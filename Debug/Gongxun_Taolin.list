
Gongxun_Taolin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ecc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  080131a0  080131a0  000141a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801371c  0801371c  0001471c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013724  08013724  00014724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013728  08013728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000214  24000000  0801372c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000cb8  24000214  08013940  00015214  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000ecc  08013940  00015ecc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015214  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021969  00000000  00000000  00015242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000465e  00000000  00000000  00036bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b08  00000000  00000000  0003b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014fd  00000000  00000000  0003cd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037c80  00000000  00000000  0003e215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026082  00000000  00000000  00075e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159940  00000000  00000000  0009bf17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f5857  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008628  00000000  00000000  001f589c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004f  00000000  00000000  001fdec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000214 	.word	0x24000214
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08013184 	.word	0x08013184

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000218 	.word	0x24000218
 800030c:	08013184 	.word	0x08013184

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af02      	add	r7, sp, #8
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 8000a9e:	4b43      	ldr	r3, [pc, #268]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa0:	4a43      	ldr	r2, [pc, #268]	@ (8000bb0 <MX_FDCAN1_Init+0x118>)
 8000aa2:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000aa4:	4b41      	ldr	r3, [pc, #260]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000aaa:	4b40      	ldr	r3, [pc, #256]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000abc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 10;
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000ac8:	4b38      	ldr	r3, [pc, #224]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ace:	4b37      	ldr	r3, [pc, #220]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ad4:	4b35      	ldr	r3, [pc, #212]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8000ada:	4b34      	ldr	r3, [pc, #208]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 10;
 8000ae0:	4b32      	ldr	r3, [pc, #200]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 2;
 8000ae6:	4b31      	ldr	r3, [pc, #196]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 2;
 8000aec:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 1;
 8000afe:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8000b04:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b06:	2204      	movs	r2, #4
 8000b08:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b18:	2204      	movs	r2, #4
 8000b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b22:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b46:	4819      	ldr	r0, [pc, #100]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b48:	f002 fffe 	bl	8003b48 <HAL_FDCAN_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_FDCAN1_Init+0xbe>
	{
		Error_Handler();
 8000b52:	f000 fde5 	bl	8001720 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */
//配置RX滤波
	hfdcan1_RX_Filter.IdType = FDCAN_EXTENDED_ID;       //标准 IDFDCAN_STANDARD_ID
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5c:	601a      	str	r2, [r3, #0]
	hfdcan1_RX_Filter.FilterIndex = 0;                           //滤波器索�????????
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
	hfdcan1_RX_Filter.FilterType = FDCAN_FILTER_MASK;            //滤波器类�????????
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	609a      	str	r2, [r3, #8]
	hfdcan1_RX_Filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //过滤�????????0关联到FIFO0
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
	hfdcan1_RX_Filter.FilterID1 = 0x000;                               //32位ID
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
	hfdcan1_RX_Filter.FilterID2 = 0x000; //如果FDCAN配置为传统模式的话，这里�????????32位掩�????????
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan1_RX_Filter);               //滤波器初始化
 8000b7c:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b7e:	480b      	ldr	r0, [pc, #44]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b80:	f003 f9c0 	bl	8003f04 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, ENABLE,
 8000b84:	2301      	movs	r3, #1
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b90:	f003 fa2e 	bl	8003ff0 <HAL_FDCAN_ConfigGlobalFilter>
			ENABLE);
	HAL_FDCAN_Start(&hfdcan1);                               //�???启FDCAN
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b96:	f003 fa58 	bl	800404a <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ba0:	f003 fc46 	bl	8004430 <HAL_FDCAN_ActivateNotification>
	/* USER CODE END FDCAN1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	240002a0 	.word	0x240002a0
 8000bb0:	4000a000 	.word	0x4000a000
 8000bb4:	24000230 	.word	0x24000230

08000bb8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef *fdcanHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0b8      	sub	sp, #224	@ 0xe0
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 8000bc0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	22b8      	movs	r2, #184	@ 0xb8
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f00f fa1e 	bl	801001a <memset>
	{ 0 };
	if (fdcanHandle->Instance == FDCAN1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c8c <HAL_FDCAN_MspInit+0xd4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d14c      	bne.n	8000c82 <HAL_FDCAN_MspInit+0xca>

		/* USER CODE END FDCAN1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000be8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f005 fad5 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_FDCAN_MspInit+0x54>
		{
			Error_Handler();
 8000c08:	f000 fd8a 	bl	8001720 <Error_Handler>
		}

		/* FDCAN1 clock enable */
		__HAL_RCC_FDCAN_CLK_ENABLE();
 8000c0c:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c12:	4a1f      	ldr	r2, [pc, #124]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	4a17      	ldr	r2, [pc, #92]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
		/**FDCAN1 GPIO Configuration
		 PD0     ------> FDCAN1_RX
		 PD1     ------> FDCAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c60:	2309      	movs	r3, #9
 8000c62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <HAL_FDCAN_MspInit+0xdc>)
 8000c6e:	f004 f955 	bl	8004f1c <HAL_GPIO_Init>

		/* FDCAN1 interrupt Init */
		HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 2, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2102      	movs	r1, #2
 8000c76:	2013      	movs	r0, #19
 8000c78:	f002 f955 	bl	8002f26 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c7c:	2013      	movs	r0, #19
 8000c7e:	f002 f96c 	bl	8002f5a <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN FDCAN1_MspInit 1 */

		/* USER CODE END FDCAN1_MspInit 1 */
	}
}
 8000c82:	bf00      	nop
 8000c84:	37e0      	adds	r7, #224	@ 0xe0
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	4000a000 	.word	0x4000a000
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020c00 	.word	0x58020c00

08000c98 <FDCAN_Send_Msg>:
	}
}

/* USER CODE BEGIN 1 */
void FDCAN_Send_Msg(uint8_t *msg, uint32_t len)
{
 8000c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c9c:	b087      	sub	sp, #28
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
 8000ca4:	466b      	mov	r3, sp
 8000ca6:	461e      	mov	r6, r3
	uint8_t i = 0, j = 0, k = 0, l = 0, packNum = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	75fb      	strb	r3, [r7, #23]
 8000cac:	2300      	movs	r3, #0
 8000cae:	753b      	strb	r3, [r7, #20]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	74fb      	strb	r3, [r7, #19]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75bb      	strb	r3, [r7, #22]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	757b      	strb	r3, [r7, #21]
	uint8_t TxData[len];
 8000cbc:	6839      	ldr	r1, [r7, #0]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4688      	mov	r8, r1
 8000cc8:	4699      	mov	r9, r3
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cde:	2300      	movs	r3, #0
 8000ce0:	460c      	mov	r4, r1
 8000ce2:	461d      	mov	r5, r3
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	00eb      	lsls	r3, r5, #3
 8000cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cf2:	00e2      	lsls	r2, r4, #3
 8000cf4:	1dcb      	adds	r3, r1, #7
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	ebad 0d03 	sub.w	sp, sp, r3
 8000cfe:	466b      	mov	r3, sp
 8000d00:	3300      	adds	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
	j = len - 2;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	3b02      	subs	r3, #2
 8000d0a:	753b      	strb	r3, [r7, #20]
	// 除去ID地址和功能码后的数据长度
	TxData[0] = msg[1];
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	785a      	ldrb	r2, [r3, #1]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	701a      	strb	r2, [r3, #0]
	// 发�?�数�????????
	while (i < j)
 8000d14:	e062      	b.n	8000ddc <FDCAN_Send_Msg+0x144>
	{
		// 数据个数
		k = j - i;
 8000d16:	7d3a      	ldrb	r2, [r7, #20]
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	74fb      	strb	r3, [r7, #19]
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	021a      	lsls	r2, r3, #8
				| (uint32_t) packNum;  //32位ID   0x00
 8000d24:	7d7b      	ldrb	r3, [r7, #21]
 8000d26:	4313      	orrs	r3, r2
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d28:	4a31      	ldr	r2, [pc, #196]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2a:	6013      	str	r3, [r2, #0]
		fdcan_TxHeader.IdType = FDCAN_EXTENDED_ID;      //ID   FDCAN_STANDARD_ID
 8000d2c:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d32:	605a      	str	r2, [r3, #4]
		fdcan_TxHeader.TxFrameType = FDCAN_DATA_FRAME;             //数据�????????
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
		//    fdcan_TxHeader.DataLength=len;              //数据长度
		fdcan_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
		fdcan_TxHeader.BitRateSwitch = FDCAN_BRS_OFF;               //关闭速率切换
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
		fdcan_TxHeader.FDFormat = FDCAN_CLASSIC_CAN;                //传统的CAN模式
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
		fdcan_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;  //无发送事�????????
 8000d4c:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
		fdcan_TxHeader.MessageMarker = 0;
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
		//小于8字节命令
		if (k < 8)
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	2b07      	cmp	r3, #7
 8000d5c:	d81b      	bhi.n	8000d96 <FDCAN_Send_Msg+0xfe>
		{
			for (l = 0; l < k; l++, i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75bb      	strb	r3, [r7, #22]
 8000d62:	e00e      	b.n	8000d82 <FDCAN_Send_Msg+0xea>
			{
				TxData[l + 1] = msg[i + 2];
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	3302      	adds	r3, #2
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	441a      	add	r2, r3
 8000d6c:	7dbb      	ldrb	r3, [r7, #22]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	7811      	ldrb	r1, [r2, #0]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < k; l++, i++)
 8000d76:	7dbb      	ldrb	r3, [r7, #22]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	75bb      	strb	r3, [r7, #22]
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	75fb      	strb	r3, [r7, #23]
 8000d82:	7dba      	ldrb	r2, [r7, #22]
 8000d84:	7cfb      	ldrb	r3, [r7, #19]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3ec      	bcc.n	8000d64 <FDCAN_Send_Msg+0xcc>
			}
			fdcan_TxHeader.DataLength = k + 1;
 8000d8a:	7cfb      	ldrb	r3, [r7, #19]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	e017      	b.n	8000dc6 <FDCAN_Send_Msg+0x12e>
		}
		// 大于8字节命令，分包发送，每包数据�????????多发�????????8个字�????????
		else
		{
			for (l = 0; l < 7; l++, i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	75bb      	strb	r3, [r7, #22]
 8000d9a:	e00e      	b.n	8000dba <FDCAN_Send_Msg+0x122>
			{
				TxData[l + 1] = msg[i + 2];
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	3302      	adds	r3, #2
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	441a      	add	r2, r3
 8000da4:	7dbb      	ldrb	r3, [r7, #22]
 8000da6:	3301      	adds	r3, #1
 8000da8:	7811      	ldrb	r1, [r2, #0]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < 7; l++, i++)
 8000dae:	7dbb      	ldrb	r3, [r7, #22]
 8000db0:	3301      	adds	r3, #1
 8000db2:	75bb      	strb	r3, [r7, #22]
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	3301      	adds	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
 8000dba:	7dbb      	ldrb	r3, [r7, #22]
 8000dbc:	2b06      	cmp	r3, #6
 8000dbe:	d9ed      	bls.n	8000d9c <FDCAN_Send_Msg+0x104>
			}
			fdcan_TxHeader.DataLength = 8;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	60da      	str	r2, [r3, #12]
		}

		// 发�?�数�??????
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &fdcan_TxHeader, TxData);
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	4909      	ldr	r1, [pc, #36]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dca:	480a      	ldr	r0, [pc, #40]	@ (8000df4 <FDCAN_Send_Msg+0x15c>)
 8000dcc:	f003 f968 	bl	80040a0 <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(5);  //发第二帧数据的关键，若无延时，不发第二帧数据
 8000dd0:	2005      	movs	r0, #5
 8000dd2:	f001 ffa9 	bl	8002d28 <HAL_Delay>
		// 记录发�?�的第几包的数据
		++packNum;
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	757b      	strb	r3, [r7, #21]
	while (i < j)
 8000ddc:	7dfa      	ldrb	r2, [r7, #23]
 8000dde:	7d3b      	ldrb	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d398      	bcc.n	8000d16 <FDCAN_Send_Msg+0x7e>
 8000de4:	46b5      	mov	sp, r6
	}
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df0:	24000250 	.word	0x24000250
 8000df4:	240002a0 	.word	0x240002a0

08000df8 <HAL_FDCAN_RxFifo0Callback>:
bool Base_Data = false;
bool Top_Data = false;
// 允许查询状态标志位
extern bool Call_Flag;
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
//	提取FIFO中的数据,
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &fdcan_RxHeader, rxdata);
 8000e02:	4b34      	ldr	r3, [pc, #208]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e04:	4a34      	ldr	r2, [pc, #208]	@ (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000e06:	2140      	movs	r1, #64	@ 0x40
 8000e08:	4834      	ldr	r0, [pc, #208]	@ (8000edc <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000e0a:	f003 f9a5 	bl	8004158 <HAL_FDCAN_GetRxMessage>
	if (Call_Flag == true)
 8000e0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d054      	beq.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
	{
//	底盘步进电机帧头
		if (fdcan_RxHeader.Identifier / 256 == 2)
 8000e16:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8000e1e:	2bff      	cmp	r3, #255	@ 0xff
 8000e20:	d824      	bhi.n	8000e6c <HAL_FDCAN_RxFifo0Callback+0x74>
		{
			if (RxState == 0)
 8000e22:	4b30      	ldr	r3, [pc, #192]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d106      	bne.n	8000e38 <HAL_FDCAN_RxFifo0Callback+0x40>
			{
				if (rxdata[0] == 0xFD)
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e30:	d102      	bne.n	8000e38 <HAL_FDCAN_RxFifo0Callback+0x40>
				{
					RxState = 1;
 8000e32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 1)
 8000e38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d106      	bne.n	8000e4e <HAL_FDCAN_RxFifo0Callback+0x56>
			{
				if (rxdata[1] == 0x9F)
 8000e40:	4b24      	ldr	r3, [pc, #144]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e42:	785b      	ldrb	r3, [r3, #1]
 8000e44:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e46:	d102      	bne.n	8000e4e <HAL_FDCAN_RxFifo0Callback+0x56>
				{
					RxState = 2;
 8000e48:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 2)
 8000e4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d134      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
			{
				if (rxdata[2] == 0x6B)
 8000e56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e58:	789b      	ldrb	r3, [r3, #2]
 8000e5a:	2b6b      	cmp	r3, #107	@ 0x6b
 8000e5c:	d130      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
				{
//				到位数据接收完毕，底盘步进确认到位
					Base_Data = true;
 8000e5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ee8 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
					RxState = 0;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	e029      	b.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
				}
			}
		}
//	升降步进电机帧头
		else if (fdcan_RxHeader.Identifier / 256 == 5)
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8000e74:	2bff      	cmp	r3, #255	@ 0xff
 8000e76:	d823      	bhi.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
		{
			if (RxState == 0)
 8000e78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d106      	bne.n	8000e8e <HAL_FDCAN_RxFifo0Callback+0x96>
			{
				if (rxdata[0] == 0xFD)
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e86:	d102      	bne.n	8000e8e <HAL_FDCAN_RxFifo0Callback+0x96>
				{
					RxState = 1;
 8000e88:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 1)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d106      	bne.n	8000ea4 <HAL_FDCAN_RxFifo0Callback+0xac>
			{
				if (rxdata[1] == 0x9F)
 8000e96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e98:	785b      	ldrb	r3, [r3, #1]
 8000e9a:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e9c:	d102      	bne.n	8000ea4 <HAL_FDCAN_RxFifo0Callback+0xac>
				{
					RxState = 2;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 2)
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d109      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
			{
				if (rxdata[2] == 0x6B)
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000eae:	789b      	ldrb	r3, [r3, #2]
 8000eb0:	2b6b      	cmp	r3, #107	@ 0x6b
 8000eb2:	d105      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
				{
//				到位数据接收完毕，底盘步进确认到位
					Top_Data = true;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
					RxState = 0;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	HAL_FDCAN_ActivateNotification(hfdcan,
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f003 fab3 	bl	8004430 <HAL_FDCAN_ActivateNotification>
	FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	24000340 	.word	0x24000340
 8000ed8:	24000274 	.word	0x24000274
 8000edc:	240002a0 	.word	0x240002a0
 8000ee0:	24000c2e 	.word	0x24000c2e
 8000ee4:	24000348 	.word	0x24000348
 8000ee8:	24000349 	.word	0x24000349
 8000eec:	2400034a 	.word	0x2400034a

08000ef0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	4b30      	ldr	r3, [pc, #192]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	4a2e      	ldr	r2, [pc, #184]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f06:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f14:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	4a27      	ldr	r2, [pc, #156]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f24:	4b24      	ldr	r3, [pc, #144]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	4a18      	ldr	r2, [pc, #96]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	4a10      	ldr	r2, [pc, #64]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

}
 8000faa:	bf00      	nop
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	58024400 	.word	0x58024400

08000fbc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000fc2:	f000 fb81 	bl	80016c8 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fc6:	f001 fe1d 	bl	8002c04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fca:	f000 f9a5 	bl	8001318 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	//  USART10 用于Action串口转发,暂时使用无线串口将数据转发到主机
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fce:	f7ff ff8f 	bl	8000ef0 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 8000fd2:	f7ff fd61 	bl	8000a98 <MX_FDCAN1_Init>
	MX_UART4_Init();
 8000fd6:	f000 ff69 	bl	8001eac <MX_UART4_Init>
	MX_UART5_Init();
 8000fda:	f000 ffb3 	bl	8001f44 <MX_UART5_Init>
	MX_UART9_Init();
 8000fde:	f001 f895 	bl	800210c <MX_UART9_Init>
	MX_USART6_UART_Init();
 8000fe2:	f001 f9b1 	bl	8002348 <MX_USART6_UART_Init>
	MX_USART10_UART_Init();
 8000fe6:	f001 f9fb 	bl	80023e0 <MX_USART10_UART_Init>
	MX_TIM2_Init();
 8000fea:	f000 fd9f 	bl	8001b2c <MX_TIM2_Init>
	MX_USART3_UART_Init();
 8000fee:	f001 f95f 	bl	80022b0 <MX_USART3_UART_Init>
	MX_UART7_Init();
 8000ff2:	f000 fff3 	bl	8001fdc <MX_UART7_Init>
	MX_UART8_Init();
 8000ff6:	f001 f83d 	bl	8002074 <MX_UART8_Init>
	MX_TIM3_Init();
 8000ffa:	f000 fde5 	bl	8001bc8 <MX_TIM3_Init>
	MX_TIM5_Init();
 8000ffe:	f000 fe33 	bl	8001c68 <MX_TIM5_Init>
	MX_USART2_UART_Init();
 8001002:	f001 f8cf 	bl	80021a4 <MX_USART2_UART_Init>
	MX_TIM12_Init();
 8001006:	f000 fe7f 	bl	8001d08 <MX_TIM12_Init>
	/* USER CODE BEGIN 2 */

//	清除定时器初始化过程中的更新中断标志�?
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800100a:	4ba4      	ldr	r3, [pc, #656]	@ (800129c <main+0x2e0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f06f 0201 	mvn.w	r2, #1
 8001012:	611a      	str	r2, [r3, #16]
//	使能定时器中�?
	HAL_TIM_Base_Start_IT(&htim2);
 8001014:	48a1      	ldr	r0, [pc, #644]	@ (800129c <main+0x2e0>)
 8001016:	f006 fee3 	bl	8007de0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 800101a:	48a1      	ldr	r0, [pc, #644]	@ (80012a0 <main+0x2e4>)
 800101c:	f006 fee0 	bl	8007de0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001020:	48a0      	ldr	r0, [pc, #640]	@ (80012a4 <main+0x2e8>)
 8001022:	f006 fedd 	bl	8007de0 <HAL_TIM_Base_Start_IT>
//	使能串口接收中断
	HAL_UART_Receive_IT(&huart4, &Screen_data, 1);
 8001026:	2201      	movs	r2, #1
 8001028:	499f      	ldr	r1, [pc, #636]	@ (80012a8 <main+0x2ec>)
 800102a:	48a0      	ldr	r0, [pc, #640]	@ (80012ac <main+0x2f0>)
 800102c:	f007 fd64 	bl	8008af8 <HAL_UART_Receive_IT>
//	HWT101预留中断接口
	HAL_UART_Receive_IT(&huart2, &HwtData, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	499f      	ldr	r1, [pc, #636]	@ (80012b0 <main+0x2f4>)
 8001034:	489f      	ldr	r0, [pc, #636]	@ (80012b4 <main+0x2f8>)
 8001036:	f007 fd5f 	bl	8008af8 <HAL_UART_Receive_IT>
//	TX2通信接收中断
	HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 800103a:	2201      	movs	r2, #1
 800103c:	499e      	ldr	r1, [pc, #632]	@ (80012b8 <main+0x2fc>)
 800103e:	489f      	ldr	r0, [pc, #636]	@ (80012bc <main+0x300>)
 8001040:	f007 fd5a 	bl	8008af8 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart9, &data, 1);
 8001044:	2201      	movs	r2, #1
 8001046:	499e      	ldr	r1, [pc, #632]	@ (80012c0 <main+0x304>)
 8001048:	489e      	ldr	r0, [pc, #632]	@ (80012c4 <main+0x308>)
 800104a:	f007 fd55 	bl	8008af8 <HAL_UART_Receive_IT>
//	HAL_UART_Receive_IT(&huart10, &Joy_data, 1);

	PID_Init();
 800104e:	f00b f87f 	bl	800c150 <PID_Init>
//			if (Joy_Flag == 1) {
//				Check_Joydata();
//				HAL_Delay(100);
//			}
//		}
		if (Ready_Flag == 1)
 8001052:	4b9d      	ldr	r3, [pc, #628]	@ (80012c8 <main+0x30c>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d104      	bne.n	8001064 <main+0xa8>
		{
			Ready_Flag = 0;
 800105a:	4b9b      	ldr	r3, [pc, #620]	@ (80012c8 <main+0x30c>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
//			整定车身
			Check_Status();
 8001060:	f00d f946 	bl	800e2f0 <Check_Status>
		}
		if (System_Flag == 1)
 8001064:	4b99      	ldr	r3, [pc, #612]	@ (80012cc <main+0x310>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d1f2      	bne.n	8001052 <main+0x96>
		{
			System_Flag = 0;
 800106c:	4b97      	ldr	r3, [pc, #604]	@ (80012cc <main+0x310>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
//			向TX2发�?�字符串"e1f"
			HAL_UART_Transmit(&huart10, (uint8_t*) "e1f", sizeof("elf") - 1,
 8001072:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001076:	2203      	movs	r2, #3
 8001078:	4995      	ldr	r1, [pc, #596]	@ (80012d0 <main+0x314>)
 800107a:	4890      	ldr	r0, [pc, #576]	@ (80012bc <main+0x300>)
 800107c:	f007 fbe6 	bl	800884c <HAL_UART_Transmit>
//			Move_Left(50,50,8000);
///////////////////////////////////////////////////////////////////////////////////////////////////////////
			/***********************运行逻辑-状�?�机*************************/
			while (1)
			{
				switch (flag)
 8001080:	4b94      	ldr	r3, [pc, #592]	@ (80012d4 <main+0x318>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	2b0d      	cmp	r3, #13
 8001086:	f200 8104 	bhi.w	8001292 <main+0x2d6>
 800108a:	a201      	add	r2, pc, #4	@ (adr r2, 8001090 <main+0xd4>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	080010c9 	.word	0x080010c9
 8001094:	08001109 	.word	0x08001109
 8001098:	08001133 	.word	0x08001133
 800109c:	08001143 	.word	0x08001143
 80010a0:	08001165 	.word	0x08001165
 80010a4:	08001185 	.word	0x08001185
 80010a8:	08001199 	.word	0x08001199
 80010ac:	080011c5 	.word	0x080011c5
 80010b0:	080011e5 	.word	0x080011e5
 80010b4:	08001211 	.word	0x08001211
 80010b8:	08001233 	.word	0x08001233
 80010bc:	08001253 	.word	0x08001253
 80010c0:	08001263 	.word	0x08001263
 80010c4:	08001283 	.word	0x08001283
				{
				case 0:  //发车，进入扫码区
//					X轴建议移动到150左右
					// Move_TO_Saomaqu(2400, 8250);
					bool temp = Move_Left(RunSpeed, RunAcc, 2400);
 80010c8:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80010cc:	2178      	movs	r1, #120	@ 0x78
 80010ce:	2064      	movs	r0, #100	@ 0x64
 80010d0:	f00b fafe 	bl	800c6d0 <Move_Left>
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
					while(temp != 0)
 80010d8:	e007      	b.n	80010ea <main+0x12e>
					{
						temp = Move_Left(RunSpeed, RunAcc, 2400);
 80010da:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80010de:	2178      	movs	r1, #120	@ 0x78
 80010e0:	2064      	movs	r0, #100	@ 0x64
 80010e2:	f00b faf5 	bl	800c6d0 <Move_Left>
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
					while(temp != 0)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f4      	bne.n	80010da <main+0x11e>
					}    
					Start();    //5400�?
 80010f0:	f00a fb46 	bl	800b780 <Start>
					Move_Line(RunSpeed, RunAcc, 8250);
 80010f4:	f242 023a 	movw	r2, #8250	@ 0x203a
 80010f8:	2178      	movs	r1, #120	@ 0x78
 80010fa:	2064      	movs	r0, #100	@ 0x64
 80010fc:	f00b fa7c 	bl	800c5f8 <Move_Line>
					flag = 1;
 8001100:	4b74      	ldr	r3, [pc, #464]	@ (80012d4 <main+0x318>)
 8001102:	2201      	movs	r2, #1
 8001104:	801a      	strh	r2, [r3, #0]
					break;
 8001106:	e0c7      	b.n	8001298 <main+0x2dc>
//					Drop_Location_jiang(200, 120, 4000);
				case 1:  //离开扫码区，进入原料�?
//					物料理想点位 375
					Move_TO_yuanliaoqu(10500);
 8001108:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 80012d8 <main+0x31c>
 800110c:	f00b fd88 	bl	800cc20 <Move_TO_yuanliaoqu>

//					X参�??150 Y参�??1430
					Move_Action_Nopid_Left_Ctrl(150, 1455);  //ACTION调整
 8001110:	eddf 0a72 	vldr	s1, [pc, #456]	@ 80012dc <main+0x320>
 8001114:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 80012e0 <main+0x324>
 8001118:	f00b fe5a 	bl	800cdd0 <Move_Action_Nopid_Left_Ctrl>
//					�?查TX2是否传�?�物料�??
					while (Point_Flag != 1)
 800111c:	bf00      	nop
 800111e:	4b71      	ldr	r3, [pc, #452]	@ (80012e4 <main+0x328>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d1fb      	bne.n	800111e <main+0x162>
					{
						;  //如果Point_Flag值不�?1,则在此处等待
					}
//					TODO:应该在物料抓取函数中实现基于TX2的物料点位闭�?
					Frist_Grab_Wuliao();
 8001126:	f00a fbd9 	bl	800b8dc <Frist_Grab_Wuliao>
					flag = 2;
 800112a:	4b6a      	ldr	r3, [pc, #424]	@ (80012d4 <main+0x318>)
 800112c:	2202      	movs	r2, #2
 800112e:	801a      	strh	r2, [r3, #0]
					break;
 8001130:	e0b2      	b.n	8001298 <main+0x2dc>

				case 2:  //离开原料区，进入加工�?

					Move_TO_jianzhi1(4500, 4335);
 8001132:	eddf 0a6d 	vldr	s1, [pc, #436]	@ 80012e8 <main+0x32c>
 8001136:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 80012ec <main+0x330>
 800113a:	f00b fd87 	bl	800cc4c <Move_TO_jianzhi1>
					while (1)
 800113e:	bf00      	nop
 8001140:	e7fd      	b.n	800113e <main+0x182>
					Move_Action_Nopid_Forward_Ctrl(160, 1070);
					flag = 3;
					break;
				case 3:    //暂存�??

					Move_TO_zancunqu(22000, 4335);
 8001142:	eddf 0a69 	vldr	s1, [pc, #420]	@ 80012e8 <main+0x32c>
 8001146:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 80012f0 <main+0x334>
 800114a:	f00b fda4 	bl	800cc96 <Move_TO_zancunqu>
					put_wuliao_to_circular_frist();
 800114e:	f00a fc47 	bl	800b9e0 <put_wuliao_to_circular_frist>
					put_wuliao_to_Car_frist();
 8001152:	f00a fcc9 	bl	800bae8 <put_wuliao_to_Car_frist>
					HAL_Delay(yanshi);
 8001156:	2032      	movs	r0, #50	@ 0x32
 8001158:	f001 fde6 	bl	8002d28 <HAL_Delay>
					flag = 4;
 800115c:	4b5d      	ldr	r3, [pc, #372]	@ (80012d4 <main+0x318>)
 800115e:	2204      	movs	r2, #4
 8001160:	801a      	strh	r2, [r3, #0]
					break;
 8001162:	e099      	b.n	8001298 <main+0x2dc>
				case 4:
					Move_TO_jianzhi2(9000, 4335);     //ACTION调整
 8001164:	eddf 0a60 	vldr	s1, [pc, #384]	@ 80012e8 <main+0x32c>
 8001168:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80012f4 <main+0x338>
 800116c:	f00b fdb8 	bl	800cce0 <Move_TO_jianzhi2>
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 8001170:	eddf 0a61 	vldr	s1, [pc, #388]	@ 80012f8 <main+0x33c>
 8001174:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 80012fc <main+0x340>
 8001178:	f00b ff8a 	bl	800d090 <Move_Action_Nopid_Forward_Ctrl>
					flag = 5;
 800117c:	4b55      	ldr	r3, [pc, #340]	@ (80012d4 <main+0x318>)
 800117e:	2205      	movs	r2, #5
 8001180:	801a      	strh	r2, [r3, #0]
					break;
 8001182:	e089      	b.n	8001298 <main+0x2dc>
				case 5:       //粗加工区
					Move_TO_cujiagongqu(10000);
 8001184:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8001300 <main+0x344>
 8001188:	f00b fdcf 	bl	800cd2a <Move_TO_cujiagongqu>
					put_wuliao_to_circular_second();
 800118c:	f00a fd30 	bl	800bbf0 <put_wuliao_to_circular_second>
					flag = 6;
 8001190:	4b50      	ldr	r3, [pc, #320]	@ (80012d4 <main+0x318>)
 8001192:	2206      	movs	r2, #6
 8001194:	801a      	strh	r2, [r3, #0]
					break;
 8001196:	e07f      	b.n	8001298 <main+0x2dc>
				case 6:
					Move_TO_jianzhi3(9000, 4335);
 8001198:	eddf 0a53 	vldr	s1, [pc, #332]	@ 80012e8 <main+0x32c>
 800119c:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 80012f4 <main+0x338>
 80011a0:	f00b fdd9 	bl	800cd56 <Move_TO_jianzhi3>
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 80011a4:	eddf 0a54 	vldr	s1, [pc, #336]	@ 80012f8 <main+0x33c>
 80011a8:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8001304 <main+0x348>
 80011ac:	f00b fe10 	bl	800cdd0 <Move_Action_Nopid_Left_Ctrl>
					Drop_Location_jiang(50, 50, 11000);
 80011b0:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80011b4:	2132      	movs	r1, #50	@ 0x32
 80011b6:	2032      	movs	r0, #50	@ 0x32
 80011b8:	f00b fc94 	bl	800cae4 <Drop_Location_jiang>
					flag = 7;
 80011bc:	4b45      	ldr	r3, [pc, #276]	@ (80012d4 <main+0x318>)
 80011be:	2207      	movs	r2, #7
 80011c0:	801a      	strh	r2, [r3, #0]
					break;
 80011c2:	e069      	b.n	8001298 <main+0x2dc>
				case 7:      //原料�??
					Move_TO_fanyuanliaoqu(4000);
 80011c4:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 8001308 <main+0x34c>
 80011c8:	f00b fdea 	bl	800cda0 <Move_TO_fanyuanliaoqu>
					Move_Action_Nopid_Left_Ctrl(160, 1400);      //ACTION调整
 80011cc:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 800130c <main+0x350>
 80011d0:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8001310 <main+0x354>
 80011d4:	f00b fdfc 	bl	800cdd0 <Move_Action_Nopid_Left_Ctrl>
					Second_Run_Frist_Grab_Wuliao();
 80011d8:	f00a fd96 	bl	800bd08 <Second_Run_Frist_Grab_Wuliao>
					flag = 8;
 80011dc:	4b3d      	ldr	r3, [pc, #244]	@ (80012d4 <main+0x318>)
 80011de:	2208      	movs	r2, #8
 80011e0:	801a      	strh	r2, [r3, #0]
					break;
 80011e2:	e059      	b.n	8001298 <main+0x2dc>
				case 8:
					Move_TO_jianzhi1(4500, 4335);
 80011e4:	eddf 0a40 	vldr	s1, [pc, #256]	@ 80012e8 <main+0x32c>
 80011e8:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 80012ec <main+0x330>
 80011ec:	f00b fd2e 	bl	800cc4c <Move_TO_jianzhi1>
					Drop_Location_jiang(50, 50, 11000);
 80011f0:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80011f4:	2132      	movs	r1, #50	@ 0x32
 80011f6:	2032      	movs	r0, #50	@ 0x32
 80011f8:	f00b fc74 	bl	800cae4 <Drop_Location_jiang>
					Move_Action_Nopid_Forward_Ctrl(160, 1070);
 80011fc:	eddf 0a45 	vldr	s1, [pc, #276]	@ 8001314 <main+0x358>
 8001200:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8001310 <main+0x354>
 8001204:	f00b ff44 	bl	800d090 <Move_Action_Nopid_Forward_Ctrl>
					flag = 9;
 8001208:	4b32      	ldr	r3, [pc, #200]	@ (80012d4 <main+0x318>)
 800120a:	2209      	movs	r2, #9
 800120c:	801a      	strh	r2, [r3, #0]
					break;
 800120e:	e043      	b.n	8001298 <main+0x2dc>
				case 9:    //暂存�??
					Move_TO_zancunqu(22000, 4335);
 8001210:	eddf 0a35 	vldr	s1, [pc, #212]	@ 80012e8 <main+0x32c>
 8001214:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 80012f0 <main+0x334>
 8001218:	f00b fd3d 	bl	800cc96 <Move_TO_zancunqu>
					Second_Run_put_wuliao_to_circular_frist();
 800121c:	f00a fe58 	bl	800bed0 <Second_Run_put_wuliao_to_circular_frist>

					Second_Run_put_wuliao_to_Car_frist();
 8001220:	f00a fdd2 	bl	800bdc8 <Second_Run_put_wuliao_to_Car_frist>
					HAL_Delay(yanshi);
 8001224:	2032      	movs	r0, #50	@ 0x32
 8001226:	f001 fd7f 	bl	8002d28 <HAL_Delay>
					flag = 10;
 800122a:	4b2a      	ldr	r3, [pc, #168]	@ (80012d4 <main+0x318>)
 800122c:	220a      	movs	r2, #10
 800122e:	801a      	strh	r2, [r3, #0]
					break;
 8001230:	e032      	b.n	8001298 <main+0x2dc>
				case 10:
					Move_TO_jianzhi2(9000, 4335);     //ACTION调整
 8001232:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 80012e8 <main+0x32c>
 8001236:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 80012f4 <main+0x338>
 800123a:	f00b fd51 	bl	800cce0 <Move_TO_jianzhi2>
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 800123e:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 80012f8 <main+0x33c>
 8001242:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 80012fc <main+0x340>
 8001246:	f00b ff23 	bl	800d090 <Move_Action_Nopid_Forward_Ctrl>
					flag = 11;
 800124a:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <main+0x318>)
 800124c:	220b      	movs	r2, #11
 800124e:	801a      	strh	r2, [r3, #0]
					break;
 8001250:	e022      	b.n	8001298 <main+0x2dc>
				case 11:       //粗加工区
					Move_TO_cujiagongqu(10000);
 8001252:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8001300 <main+0x344>
 8001256:	f00b fd68 	bl	800cd2a <Move_TO_cujiagongqu>

					flag = 12;
 800125a:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <main+0x318>)
 800125c:	220c      	movs	r2, #12
 800125e:	801a      	strh	r2, [r3, #0]
					break;
 8001260:	e01a      	b.n	8001298 <main+0x2dc>
				case 12:
					Move_TO_jianzhi3(9000, 4335);
 8001262:	eddf 0a21 	vldr	s1, [pc, #132]	@ 80012e8 <main+0x32c>
 8001266:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 80012f4 <main+0x338>
 800126a:	f00b fd74 	bl	800cd56 <Move_TO_jianzhi3>
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 800126e:	eddf 0a22 	vldr	s1, [pc, #136]	@ 80012f8 <main+0x33c>
 8001272:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001304 <main+0x348>
 8001276:	f00b fdab 	bl	800cdd0 <Move_Action_Nopid_Left_Ctrl>
					flag = 13;
 800127a:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <main+0x318>)
 800127c:	220d      	movs	r2, #13
 800127e:	801a      	strh	r2, [r3, #0]
					break;
 8001280:	e00a      	b.n	8001298 <main+0x2dc>
				case 13:      //原料�??
					Move_TO_fanyuanliaoqu(22000);
 8001282:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 80012f0 <main+0x334>
 8001286:	f00b fd8b 	bl	800cda0 <Move_TO_fanyuanliaoqu>
					flag = 14;
 800128a:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <main+0x318>)
 800128c:	220e      	movs	r2, #14
 800128e:	801a      	strh	r2, [r3, #0]
					break;
 8001290:	e002      	b.n	8001298 <main+0x2dc>
				default:
					Move_Stop();
 8001292:	f00b fcaf 	bl	800cbf4 <Move_Stop>
					break;
 8001296:	bf00      	nop
				switch (flag)
 8001298:	e6f2      	b.n	8001080 <main+0xc4>
 800129a:	bf00      	nop
 800129c:	24000490 	.word	0x24000490
 80012a0:	24000528 	.word	0x24000528
 80012a4:	240004dc 	.word	0x240004dc
 80012a8:	2400034c 	.word	0x2400034c
 80012ac:	240005c0 	.word	0x240005c0
 80012b0:	2400034d 	.word	0x2400034d
 80012b4:	240008a4 	.word	0x240008a4
 80012b8:	2400034e 	.word	0x2400034e
 80012bc:	24000a60 	.word	0x24000a60
 80012c0:	2400034b 	.word	0x2400034b
 80012c4:	24000810 	.word	0x24000810
 80012c8:	24000d27 	.word	0x24000d27
 80012cc:	24000d26 	.word	0x24000d26
 80012d0:	080131a0 	.word	0x080131a0
 80012d4:	24000478 	.word	0x24000478
 80012d8:	46241000 	.word	0x46241000
 80012dc:	44b5e000 	.word	0x44b5e000
 80012e0:	43160000 	.word	0x43160000
 80012e4:	2400045c 	.word	0x2400045c
 80012e8:	45877800 	.word	0x45877800
 80012ec:	458ca000 	.word	0x458ca000
 80012f0:	46abe000 	.word	0x46abe000
 80012f4:	460ca000 	.word	0x460ca000
 80012f8:	44e88000 	.word	0x44e88000
 80012fc:	44e9c000 	.word	0x44e9c000
 8001300:	461c4000 	.word	0x461c4000
 8001304:	432a0000 	.word	0x432a0000
 8001308:	457a0000 	.word	0x457a0000
 800130c:	44af0000 	.word	0x44af0000
 8001310:	43200000 	.word	0x43200000
 8001314:	4485c000 	.word	0x4485c000

08001318 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b09c      	sub	sp, #112	@ 0x70
 800131c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800131e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001322:	224c      	movs	r2, #76	@ 0x4c
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f00e fe77 	bl	801001a <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2220      	movs	r2, #32
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f00e fe71 	bl	801001a <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001338:	2002      	movs	r0, #2
 800133a:	f003 ff97 	bl	800526c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b2b      	ldr	r3, [pc, #172]	@ (80013f0 <SystemClock_Config+0xd8>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a2a      	ldr	r2, [pc, #168]	@ (80013f0 <SystemClock_Config+0xd8>)
 8001348:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800134c:	6193      	str	r3, [r2, #24]
 800134e:	4b28      	ldr	r3, [pc, #160]	@ (80013f0 <SystemClock_Config+0xd8>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800135a:	bf00      	nop
 800135c:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <SystemClock_Config+0xd8>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001364:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001368:	d1f8      	bne.n	800135c <SystemClock_Config+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136a:	2301      	movs	r3, #1
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001374:	2302      	movs	r3, #2
 8001376:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001378:	2302      	movs	r3, #2
 800137a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 800137c:	2302      	movs	r3, #2
 800137e:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 44;
 8001380:	232c      	movs	r3, #44	@ 0x2c
 8001382:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8001384:	2301      	movs	r3, #1
 8001386:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001388:	2302      	movs	r3, #2
 800138a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800138c:	2302      	movs	r3, #2
 800138e:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001390:	230c      	movs	r3, #12
 8001392:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001394:	2300      	movs	r3, #0
 8001396:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 ff9d 	bl	80052e0 <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80013ac:	f000 f9b8 	bl	8001720 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013b0:	233f      	movs	r3, #63	@ 0x3f
 80013b2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b4:	2303      	movs	r3, #3
 80013b6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013bc:	2308      	movs	r3, #8
 80013be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013c0:	2340      	movs	r3, #64	@ 0x40
 80013c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013c4:	2340      	movs	r3, #64	@ 0x40
 80013c6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013cc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013ce:	2340      	movs	r3, #64	@ 0x40
 80013d0:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2103      	movs	r1, #3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 fb5c 	bl	8005a94 <HAL_RCC_ClockConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0xce>
	{
		Error_Handler();
 80013e2:	f000 f99d 	bl	8001720 <Error_Handler>
	}
}
 80013e6:	bf00      	nop
 80013e8:	3770      	adds	r7, #112	@ 0x70
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	58024800 	.word	0x58024800

080013f4 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*) &ch, 1, 0xFFFF);
 80013fc:	1d39      	adds	r1, r7, #4
 80013fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001402:	2201      	movs	r2, #1
 8001404:	4803      	ldr	r0, [pc, #12]	@ (8001414 <__io_putchar+0x20>)
 8001406:	f007 fa21 	bl	800884c <HAL_UART_Transmit>
	return ch;
 800140a:	687b      	ldr	r3, [r7, #4]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	240005c0 	.word	0x240005c0

08001418 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af04      	add	r7, sp, #16
 800141e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART9)                          // 判断中断�?
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a50      	ldr	r2, [pc, #320]	@ (8001568 <HAL_UART_RxCpltCallback+0x150>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d10a      	bne.n	8001440 <HAL_UART_RxCpltCallback+0x28>
	{
		Data_Analyse(data);                                // 处理Action数据
 800142a:	4b50      	ldr	r3, [pc, #320]	@ (800156c <HAL_UART_RxCpltCallback+0x154>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f009 ffb6 	bl	800b3a0 <Data_Analyse>
		HAL_UART_Receive_IT(&huart9, &data, 1);            // 继续中断回调
 8001434:	2201      	movs	r2, #1
 8001436:	494d      	ldr	r1, [pc, #308]	@ (800156c <HAL_UART_RxCpltCallback+0x154>)
 8001438:	484d      	ldr	r0, [pc, #308]	@ (8001570 <HAL_UART_RxCpltCallback+0x158>)
 800143a:	f007 fb5d 	bl	8008af8 <HAL_UART_Receive_IT>
 800143e:	e090      	b.n	8001562 <HAL_UART_RxCpltCallback+0x14a>

	}
	else if (huart->Instance == UART4)                   // 判断中断�?
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a4b      	ldr	r2, [pc, #300]	@ (8001574 <HAL_UART_RxCpltCallback+0x15c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10a      	bne.n	8001460 <HAL_UART_RxCpltCallback+0x48>
	{
		Check_Flag(Screen_data);                       	   // 处理串口屏数�?
 800144a:	4b4b      	ldr	r3, [pc, #300]	@ (8001578 <HAL_UART_RxCpltCallback+0x160>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f00c fdd8 	bl	800e004 <Check_Flag>
		HAL_UART_Receive_IT(&huart4, &Screen_data, 1);     // 继续中断回调
 8001454:	2201      	movs	r2, #1
 8001456:	4948      	ldr	r1, [pc, #288]	@ (8001578 <HAL_UART_RxCpltCallback+0x160>)
 8001458:	4848      	ldr	r0, [pc, #288]	@ (800157c <HAL_UART_RxCpltCallback+0x164>)
 800145a:	f007 fb4d 	bl	8008af8 <HAL_UART_Receive_IT>
 800145e:	e080      	b.n	8001562 <HAL_UART_RxCpltCallback+0x14a>
	}

	else if (huart->Instance == USART10)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a46      	ldr	r2, [pc, #280]	@ (8001580 <HAL_UART_RxCpltCallback+0x168>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d17b      	bne.n	8001562 <HAL_UART_RxCpltCallback+0x14a>
	{
		//static uint8_t RxState = 0;

		RxBuffer[Uart10_Rx_Cnt++] = aRxBuffer;
 800146a:	4b46      	ldr	r3, [pc, #280]	@ (8001584 <HAL_UART_RxCpltCallback+0x16c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	b2d1      	uxtb	r1, r2
 8001472:	4a44      	ldr	r2, [pc, #272]	@ (8001584 <HAL_UART_RxCpltCallback+0x16c>)
 8001474:	7011      	strb	r1, [r2, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	4b43      	ldr	r3, [pc, #268]	@ (8001588 <HAL_UART_RxCpltCallback+0x170>)
 800147a:	7819      	ldrb	r1, [r3, #0]
 800147c:	4b43      	ldr	r3, [pc, #268]	@ (800158c <HAL_UART_RxCpltCallback+0x174>)
 800147e:	5499      	strb	r1, [r3, r2]
			memset(RxBuffer, 0, sizeof(RxBuffer));
			Uart10_Rx_Cnt = 0;
			return;
		}

		if (aRxBuffer == 'd')
 8001480:	4b41      	ldr	r3, [pc, #260]	@ (8001588 <HAL_UART_RxCpltCallback+0x170>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b64      	cmp	r3, #100	@ 0x64
 8001486:	d12e      	bne.n	80014e6 <HAL_UART_RxCpltCallback+0xce>
		{ // 如果包尾�?'d'，说明是物料和圆环点位数�?
			char *start = strchr(RxBuffer, 'a');
 8001488:	2161      	movs	r1, #97	@ 0x61
 800148a:	4840      	ldr	r0, [pc, #256]	@ (800158c <HAL_UART_RxCpltCallback+0x174>)
 800148c:	f00e fdcd 	bl	801002a <strchr>
 8001490:	6178      	str	r0, [r7, #20]
			char *end = strchr(RxBuffer, 'd');
 8001492:	2164      	movs	r1, #100	@ 0x64
 8001494:	483d      	ldr	r0, [pc, #244]	@ (800158c <HAL_UART_RxCpltCallback+0x174>)
 8001496:	f00e fdc8 	bl	801002a <strchr>
 800149a:	6138      	str	r0, [r7, #16]

			if (start != NULL && end != NULL && end > start)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d021      	beq.n	80014e6 <HAL_UART_RxCpltCallback+0xce>
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01e      	beq.n	80014e6 <HAL_UART_RxCpltCallback+0xce>
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d91a      	bls.n	80014e6 <HAL_UART_RxCpltCallback+0xce>
			{
				*end = '\0';
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
				if (sscanf(start + 1, "%f,%f,%d", &x, &y, &colour) == 3)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	1c58      	adds	r0, r3, #1
 80014ba:	4b35      	ldr	r3, [pc, #212]	@ (8001590 <HAL_UART_RxCpltCallback+0x178>)
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	4b35      	ldr	r3, [pc, #212]	@ (8001594 <HAL_UART_RxCpltCallback+0x17c>)
 80014c0:	4a35      	ldr	r2, [pc, #212]	@ (8001598 <HAL_UART_RxCpltCallback+0x180>)
 80014c2:	4936      	ldr	r1, [pc, #216]	@ (800159c <HAL_UART_RxCpltCallback+0x184>)
 80014c4:	f00e fd3a 	bl	800ff3c <siscanf>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d102      	bne.n	80014d4 <HAL_UART_RxCpltCallback+0xbc>
				{
					// 数据解析成功
					Point_Flag = 1;
 80014ce:	4b34      	ldr	r3, [pc, #208]	@ (80015a0 <HAL_UART_RxCpltCallback+0x188>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
				}

				// 清空缓冲�?
				memset(RxBuffer, 0, sizeof(RxBuffer));
 80014d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014d8:	2100      	movs	r1, #0
 80014da:	482c      	ldr	r0, [pc, #176]	@ (800158c <HAL_UART_RxCpltCallback+0x174>)
 80014dc:	f00e fd9d 	bl	801001a <memset>
				Uart10_Rx_Cnt = 0;
 80014e0:	4b28      	ldr	r3, [pc, #160]	@ (8001584 <HAL_UART_RxCpltCallback+0x16c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
			}
		}

		if (aRxBuffer == 'b')
 80014e6:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <HAL_UART_RxCpltCallback+0x170>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b62      	cmp	r3, #98	@ 0x62
 80014ec:	d134      	bne.n	8001558 <HAL_UART_RxCpltCallback+0x140>
		{ // 如果包尾�?'b'，说明是二维码数�?
			char *start = strchr(RxBuffer, 'c');
 80014ee:	2163      	movs	r1, #99	@ 0x63
 80014f0:	4826      	ldr	r0, [pc, #152]	@ (800158c <HAL_UART_RxCpltCallback+0x174>)
 80014f2:	f00e fd9a 	bl	801002a <strchr>
 80014f6:	60f8      	str	r0, [r7, #12]
			char *end = strchr(RxBuffer, 'b');
 80014f8:	2162      	movs	r1, #98	@ 0x62
 80014fa:	4824      	ldr	r0, [pc, #144]	@ (800158c <HAL_UART_RxCpltCallback+0x174>)
 80014fc:	f00e fd95 	bl	801002a <strchr>
 8001500:	60b8      	str	r0, [r7, #8]

			if (start != NULL && end != NULL && end > start)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d027      	beq.n	8001558 <HAL_UART_RxCpltCallback+0x140>
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d024      	beq.n	8001558 <HAL_UART_RxCpltCallback+0x140>
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	429a      	cmp	r2, r3
 8001514:	d920      	bls.n	8001558 <HAL_UART_RxCpltCallback+0x140>
			{
				*end = '\0';
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
//				for (int i = 0; i < 6; i++) {
//					if (sscanf(start +1+ i, "%d", &QR_data[i])) {
				if (sscanf(start + 1, "%d,%d,%d,%d,%d,%d", &QR_data[0],
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1c58      	adds	r0, r3, #1
 8001520:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <HAL_UART_RxCpltCallback+0x18c>)
 8001522:	9303      	str	r3, [sp, #12]
 8001524:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <HAL_UART_RxCpltCallback+0x190>)
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <HAL_UART_RxCpltCallback+0x194>)
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <HAL_UART_RxCpltCallback+0x198>)
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <HAL_UART_RxCpltCallback+0x19c>)
 8001532:	4a21      	ldr	r2, [pc, #132]	@ (80015b8 <HAL_UART_RxCpltCallback+0x1a0>)
 8001534:	4921      	ldr	r1, [pc, #132]	@ (80015bc <HAL_UART_RxCpltCallback+0x1a4>)
 8001536:	f00e fd01 	bl	800ff3c <siscanf>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <HAL_UART_RxCpltCallback+0x12e>
						&QR_data[1], &QR_data[2], &QR_data[3], &QR_data[4],
						&QR_data[5]))
				{
					// 数据解析成功
//						if(i==5) QR_Flag =  1;
					QR_Flag = 1;
 8001540:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <HAL_UART_RxCpltCallback+0x1a8>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]
				}
//				}
				// 清空缓冲�?
				memset(RxBuffer, 0, sizeof(RxBuffer));
 8001546:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800154a:	2100      	movs	r1, #0
 800154c:	480f      	ldr	r0, [pc, #60]	@ (800158c <HAL_UART_RxCpltCallback+0x174>)
 800154e:	f00e fd64 	bl	801001a <memset>
				Uart10_Rx_Cnt = 0;
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <HAL_UART_RxCpltCallback+0x16c>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
			}
		}
		// 重新启动接收
		HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 8001558:	2201      	movs	r2, #1
 800155a:	490b      	ldr	r1, [pc, #44]	@ (8001588 <HAL_UART_RxCpltCallback+0x170>)
 800155c:	4819      	ldr	r0, [pc, #100]	@ (80015c4 <HAL_UART_RxCpltCallback+0x1ac>)
 800155e:	f007 facb 	bl	8008af8 <HAL_UART_Receive_IT>
//	else if (huart->Instance == USART10)                            // 判断中断
//	{
//		Recive_Joydata(Joy_data);                             	// 处理Joy_data数据
//		HAL_UART_Receive_IT(&huart10, &Joy_data, 1);       // 继续中断回调
//	}
}
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40011800 	.word	0x40011800
 800156c:	2400034b 	.word	0x2400034b
 8001570:	24000810 	.word	0x24000810
 8001574:	40004c00 	.word	0x40004c00
 8001578:	2400034c 	.word	0x2400034c
 800157c:	240005c0 	.word	0x240005c0
 8001580:	40011c00 	.word	0x40011c00
 8001584:	24000450 	.word	0x24000450
 8001588:	2400034e 	.word	0x2400034e
 800158c:	24000350 	.word	0x24000350
 8001590:	2400047c 	.word	0x2400047c
 8001594:	24000458 	.word	0x24000458
 8001598:	24000454 	.word	0x24000454
 800159c:	080131a4 	.word	0x080131a4
 80015a0:	2400045c 	.word	0x2400045c
 80015a4:	24000474 	.word	0x24000474
 80015a8:	24000470 	.word	0x24000470
 80015ac:	2400046c 	.word	0x2400046c
 80015b0:	24000468 	.word	0x24000468
 80015b4:	24000464 	.word	0x24000464
 80015b8:	24000460 	.word	0x24000460
 80015bc:	080131b0 	.word	0x080131b0
 80015c0:	24000484 	.word	0x24000484
 80015c4:	24000a60 	.word	0x24000a60

080015c8 <HAL_TIM_PeriodElapsedCallback>:
extern uint16_t time_tx;
extern bool Base_Data;
extern bool Apply_Chock;
extern bool Choke_Flag;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a2e      	ldr	r2, [pc, #184]	@ (800168c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d106      	bne.n	80015e6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{

//		X_out = X_Ctrl(&XPID, x_goal);
//		Y_out = Y_Ctrl(&YPID, y_goal);
//		A_out = A_Ctrl(&APID, a_goal);
		Action_Show();
 80015d8:	f00c fbcc 	bl	800dd74 <Action_Show>
		QR_Show();
 80015dc:	f00c fc46 	bl	800de6c <QR_Show>
		Point_Show();
 80015e0:	f00c fc80 	bl	800dee4 <Point_Show>
 80015e4:	e04f      	b.n	8001686 <HAL_TIM_PeriodElapsedCallback+0xbe>

	}
	else if (htim == &htim3)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a29      	ldr	r2, [pc, #164]	@ (8001690 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d126      	bne.n	800163c <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		TX_X_out = Tx_X_Ctrl(&TXPID, tx_target);
 80015ee:	4b29      	ldr	r3, [pc, #164]	@ (8001694 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	eeb0 0a67 	vmov.f32	s0, s15
 80015f8:	4827      	ldr	r0, [pc, #156]	@ (8001698 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015fa:	f00a fe9d 	bl	800c338 <Tx_X_Ctrl>
 80015fe:	4603      	mov	r3, r0
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001608:	4b24      	ldr	r3, [pc, #144]	@ (800169c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800160a:	edc3 7a00 	vstr	s15, [r3]
		TX_Y_out = Tx_Y_Ctrl(&TYPID, ty_target);
 800160e:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	eeb0 0a67 	vmov.f32	s0, s15
 8001618:	4822      	ldr	r0, [pc, #136]	@ (80016a4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800161a:	f00a ff33 	bl	800c484 <Tx_Y_Ctrl>
 800161e:	4603      	mov	r3, r0
 8001620:	ee07 3a90 	vmov	s15, r3
 8001624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001628:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800162a:	edc3 7a00 	vstr	s15, [r3]
		time_tx++;
 800162e:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001638:	801a      	strh	r2, [r3, #0]
 800163a:	e024      	b.n	8001686 <HAL_TIM_PeriodElapsedCallback+0xbe>
	}
	else if (htim == &htim5)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a1c      	ldr	r2, [pc, #112]	@ (80016b0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d109      	bne.n	8001658 <HAL_TIM_PeriodElapsedCallback+0x90>
	{

		if (time5_jiancha != 0)
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d01c      	beq.n	8001686 <HAL_TIM_PeriodElapsedCallback+0xbe>
			time5_jiancha--;
 800164c:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3b01      	subs	r3, #1
 8001652:	4a18      	ldr	r2, [pc, #96]	@ (80016b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e016      	b.n	8001686 <HAL_TIM_PeriodElapsedCallback+0xbe>
	}
//	步进电机阻塞操作回调
	else if (htim == &htim12)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a17      	ldr	r2, [pc, #92]	@ (80016b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d112      	bne.n	8001686 <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		if(Apply_Chock == true)
 8001660:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00e      	beq.n	8001686 <HAL_TIM_PeriodElapsedCallback+0xbe>
		{
			if(Base_Data == true)
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d009      	beq.n	8001684 <HAL_TIM_PeriodElapsedCallback+0xbc>
			{
				Choke_Flag = false;
 8001670:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
				Apply_Chock = false;
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim12);
 800167c:	480e      	ldr	r0, [pc, #56]	@ (80016b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800167e:	f006 fc35 	bl	8007eec <HAL_TIM_Base_Stop_IT>
 8001682:	e000      	b.n	8001686 <HAL_TIM_PeriodElapsedCallback+0xbe>
			}
			else
			{
				return ;
 8001684:	bf00      	nop
			}
		}
//		根据查询情况来确定是否要继续阻塞 Choke_Flag
	}
}
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	24000490 	.word	0x24000490
 8001690:	240004dc 	.word	0x240004dc
 8001694:	24000000 	.word	0x24000000
 8001698:	24000bcc 	.word	0x24000bcc
 800169c:	24000c24 	.word	0x24000c24
 80016a0:	24000004 	.word	0x24000004
 80016a4:	24000bf8 	.word	0x24000bf8
 80016a8:	24000c28 	.word	0x24000c28
 80016ac:	24000c34 	.word	0x24000c34
 80016b0:	24000528 	.word	0x24000528
 80016b4:	24000c30 	.word	0x24000c30
 80016b8:	24000574 	.word	0x24000574
 80016bc:	24000c2d 	.word	0x24000c2d
 80016c0:	24000349 	.word	0x24000349
 80016c4:	24000c2c 	.word	0x24000c2c

080016c8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct =
 80016ce:	463b      	mov	r3, r7
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
	{ 0 };

	/* Disables the MPU */
	HAL_MPU_Disable();
 80016da:	f001 fc59 	bl	8002f90 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016de:	2301      	movs	r3, #1
 80016e0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80016ea:	231f      	movs	r3, #31
 80016ec:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 80016ee:	2387      	movs	r3, #135	@ 0x87
 80016f0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80016f6:	2300      	movs	r3, #0
 80016f8:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016fa:	2301      	movs	r3, #1
 80016fc:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016fe:	2301      	movs	r3, #1
 8001700:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800170a:	463b      	mov	r3, r7
 800170c:	4618      	mov	r0, r3
 800170e:	f001 fc77 	bl	8003000 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001712:	2004      	movs	r0, #4
 8001714:	f001 fc54 	bl	8002fc0 <HAL_MPU_Enable>

}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001724:	b672      	cpsid	i
}
 8001726:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <Error_Handler+0x8>

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_MspInit+0x30>)
 8001734:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001738:	4a08      	ldr	r2, [pc, #32]	@ (800175c <HAL_MspInit+0x30>)
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_MspInit+0x30>)
 8001744:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	58024400 	.word	0x58024400

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <NMI_Handler+0x4>

08001768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <MemManage_Handler+0x4>

08001778 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <UsageFault_Handler+0x4>

08001788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b6:	f001 fa97 	bl	8002ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <FDCAN1_IT0_IRQHandler+0x10>)
 80017c6:	f002 fead 	bl	8004524 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	240002a0 	.word	0x240002a0

080017d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <TIM2_IRQHandler+0x10>)
 80017da:	f006 fbb6 	bl	8007f4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	24000490 	.word	0x24000490

080017e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <TIM3_IRQHandler+0x10>)
 80017ee:	f006 fbac 	bl	8007f4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	240004dc 	.word	0x240004dc

080017fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <USART2_IRQHandler+0x10>)
 8001802:	f007 f9c5 	bl	8008b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	240008a4 	.word	0x240008a4

08001810 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <USART3_IRQHandler+0x10>)
 8001816:	f007 f9bb 	bl	8008b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	24000938 	.word	0x24000938

08001824 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800182a:	f006 fb8e 	bl	8007f4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	24000574 	.word	0x24000574

08001838 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <TIM5_IRQHandler+0x10>)
 800183e:	f006 fb84 	bl	8007f4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	24000528 	.word	0x24000528

0800184c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <UART4_IRQHandler+0x10>)
 8001852:	f007 f99d 	bl	8008b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	240005c0 	.word	0x240005c0

08001860 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <UART7_IRQHandler+0x10>)
 8001866:	f007 f993 	bl	8008b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	240006e8 	.word	0x240006e8

08001874 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <UART8_IRQHandler+0x10>)
 800187a:	f007 f989 	bl	8008b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2400077c 	.word	0x2400077c

08001888 <UART9_IRQHandler>:

/**
  * @brief This function handles UART9 global interrupt.
  */
void UART9_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART9_IRQn 0 */

  /* USER CODE END UART9_IRQn 0 */
  HAL_UART_IRQHandler(&huart9);
 800188c:	4802      	ldr	r0, [pc, #8]	@ (8001898 <UART9_IRQHandler+0x10>)
 800188e:	f007 f97f 	bl	8008b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART9_IRQn 1 */

  /* USER CODE END UART9_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	24000810 	.word	0x24000810

0800189c <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 80018a0:	4802      	ldr	r0, [pc, #8]	@ (80018ac <USART10_IRQHandler+0x10>)
 80018a2:	f007 f975 	bl	8008b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	24000a60 	.word	0x24000a60

080018b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
	return 1;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_kill>:

int _kill(int pid, int sig)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80018ca:	f00e fc27 	bl	801011c <__errno>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2216      	movs	r2, #22
 80018d2:	601a      	str	r2, [r3, #0]
	return -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_exit>:

void _exit(int status)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ffe7 	bl	80018c0 <_kill>
	while (1)
 80018f2:	bf00      	nop
 80018f4:	e7fd      	b.n	80018f2 <_exit+0x12>

080018f6 <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e00a      	b.n	800191e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001908:	f3af 8000 	nop.w
 800190c:	4601      	mov	r1, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	60ba      	str	r2, [r7, #8]
 8001914:	b2ca      	uxtb	r2, r1
 8001916:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	429a      	cmp	r2, r3
 8001924:	dbf0      	blt.n	8001908 <_read+0x12>
	}

	return len;
 8001926:	687b      	ldr	r3, [r7, #4]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	e009      	b.n	8001956 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	60ba      	str	r2, [r7, #8]
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fd52 	bl	80013f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	429a      	cmp	r2, r3
 800195c:	dbf1      	blt.n	8001942 <_write+0x12>
	}
	return len;
 800195e:	687b      	ldr	r3, [r7, #4]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <_close>:

int _close(int file)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001990:	605a      	str	r2, [r3, #4]
	return 0;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_isatty>:

int _isatty(int file)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80019d8:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80019da:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80019e4:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	@ (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
		errno = ENOMEM;
 8001a00:	f00e fb8c 	bl	801011c <__errno>
 8001a04:	4603      	mov	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a05      	ldr	r2, [pc, #20]	@ (8001a34 <_sbrk+0x64>)
 8001a20:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	24050000 	.word	0x24050000
 8001a30:	00000400 	.word	0x00000400
 8001a34:	2400048c 	.word	0x2400048c
 8001a38:	24000ed0 	.word	0x24000ed0

08001a3c <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001a40:	4b32      	ldr	r3, [pc, #200]	@ (8001b0c <SystemInit+0xd0>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a46:	4a31      	ldr	r2, [pc, #196]	@ (8001b0c <SystemInit+0xd0>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a50:	4b2f      	ldr	r3, [pc, #188]	@ (8001b10 <SystemInit+0xd4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	2b06      	cmp	r3, #6
 8001a5a:	d807      	bhi.n	8001a6c <SystemInit+0x30>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b10 <SystemInit+0xd4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 030f 	bic.w	r3, r3, #15
 8001a64:	4a2a      	ldr	r2, [pc, #168]	@ (8001b10 <SystemInit+0xd4>)
 8001a66:	f043 0307 	orr.w	r3, r3, #7
 8001a6a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001a6c:	4b29      	ldr	r3, [pc, #164]	@ (8001b14 <SystemInit+0xd8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a28      	ldr	r2, [pc, #160]	@ (8001b14 <SystemInit+0xd8>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001a78:	4b26      	ldr	r3, [pc, #152]	@ (8001b14 <SystemInit+0xd8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001a7e:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <SystemInit+0xd8>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4924      	ldr	r1, [pc, #144]	@ (8001b14 <SystemInit+0xd8>)
 8001a84:	4b24      	ldr	r3, [pc, #144]	@ (8001b18 <SystemInit+0xdc>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a8a:	4b21      	ldr	r3, [pc, #132]	@ (8001b10 <SystemInit+0xd4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d007      	beq.n	8001aa6 <SystemInit+0x6a>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001a96:	4b1e      	ldr	r3, [pc, #120]	@ (8001b10 <SystemInit+0xd4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 030f 	bic.w	r3, r3, #15
 8001a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b10 <SystemInit+0xd4>)
 8001aa0:	f043 0307 	orr.w	r3, r3, #7
 8001aa4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <SystemInit+0xd8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001aac:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <SystemInit+0xd8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001ab2:	4b18      	ldr	r3, [pc, #96]	@ (8001b14 <SystemInit+0xd8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001ab8:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <SystemInit+0xd8>)
 8001aba:	4a18      	ldr	r2, [pc, #96]	@ (8001b1c <SystemInit+0xe0>)
 8001abc:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <SystemInit+0xd8>)
 8001ac0:	4a17      	ldr	r2, [pc, #92]	@ (8001b20 <SystemInit+0xe4>)
 8001ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <SystemInit+0xd8>)
 8001ac6:	4a17      	ldr	r2, [pc, #92]	@ (8001b24 <SystemInit+0xe8>)
 8001ac8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8001aca:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <SystemInit+0xd8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001ad0:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <SystemInit+0xd8>)
 8001ad2:	4a14      	ldr	r2, [pc, #80]	@ (8001b24 <SystemInit+0xe8>)
 8001ad4:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <SystemInit+0xd8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8001adc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <SystemInit+0xd8>)
 8001ade:	4a11      	ldr	r2, [pc, #68]	@ (8001b24 <SystemInit+0xe8>)
 8001ae0:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <SystemInit+0xd8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <SystemInit+0xd8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a09      	ldr	r2, [pc, #36]	@ (8001b14 <SystemInit+0xd8>)
 8001aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001af4:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <SystemInit+0xd8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	661a      	str	r2, [r3, #96]	@ 0x60
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <SystemInit+0xec>)
 8001afc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001b00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00
 8001b10:	52002000 	.word	0x52002000
 8001b14:	58024400 	.word	0x58024400
 8001b18:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b1c:	02020200 	.word	0x02020200
 8001b20:	01ff0000 	.word	0x01ff0000
 8001b24:	01010280 	.word	0x01010280
 8001b28:	52004000 	.word	0x52004000

08001b2c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc4 <MX_TIM2_Init+0x98>)
 8001b4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 550-1;
 8001b52:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc4 <MX_TIM2_Init+0x98>)
 8001b54:	f240 2225 	movw	r2, #549	@ 0x225
 8001b58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc4 <MX_TIM2_Init+0x98>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001b60:	4b18      	ldr	r3, [pc, #96]	@ (8001bc4 <MX_TIM2_Init+0x98>)
 8001b62:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001b66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b68:	4b16      	ldr	r3, [pc, #88]	@ (8001bc4 <MX_TIM2_Init+0x98>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <MX_TIM2_Init+0x98>)
 8001b70:	2280      	movs	r2, #128	@ 0x80
 8001b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b74:	4813      	ldr	r0, [pc, #76]	@ (8001bc4 <MX_TIM2_Init+0x98>)
 8001b76:	f006 f8db 	bl	8007d30 <HAL_TIM_Base_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001b80:	f7ff fdce 	bl	8001720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480c      	ldr	r0, [pc, #48]	@ (8001bc4 <MX_TIM2_Init+0x98>)
 8001b92:	f006 fae1 	bl	8008158 <HAL_TIM_ConfigClockSource>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001b9c:	f7ff fdc0 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <MX_TIM2_Init+0x98>)
 8001bae:	f006 fd43 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001bb8:	f7ff fdb2 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	24000490 	.word	0x24000490

08001bc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c60 <MX_TIM3_Init+0x98>)
 8001be8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c64 <MX_TIM3_Init+0x9c>)
 8001bea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 550-1;
 8001bec:	4b1c      	ldr	r3, [pc, #112]	@ (8001c60 <MX_TIM3_Init+0x98>)
 8001bee:	f240 2225 	movw	r2, #549	@ 0x225
 8001bf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <MX_TIM3_Init+0x98>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <MX_TIM3_Init+0x98>)
 8001bfc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001c00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	4b17      	ldr	r3, [pc, #92]	@ (8001c60 <MX_TIM3_Init+0x98>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c08:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <MX_TIM3_Init+0x98>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c0e:	4814      	ldr	r0, [pc, #80]	@ (8001c60 <MX_TIM3_Init+0x98>)
 8001c10:	f006 f88e 	bl	8007d30 <HAL_TIM_Base_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001c1a:	f7ff fd81 	bl	8001720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480d      	ldr	r0, [pc, #52]	@ (8001c60 <MX_TIM3_Init+0x98>)
 8001c2c:	f006 fa94 	bl	8008158 <HAL_TIM_ConfigClockSource>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001c36:	f7ff fd73 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	4619      	mov	r1, r3
 8001c46:	4806      	ldr	r0, [pc, #24]	@ (8001c60 <MX_TIM3_Init+0x98>)
 8001c48:	f006 fcf6 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001c52:	f7ff fd65 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	240004dc 	.word	0x240004dc
 8001c64:	40000400 	.word	0x40000400

08001c68 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c86:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <MX_TIM5_Init+0x98>)
 8001c88:	4a1e      	ldr	r2, [pc, #120]	@ (8001d04 <MX_TIM5_Init+0x9c>)
 8001c8a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 550-1;
 8001c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d00 <MX_TIM5_Init+0x98>)
 8001c8e:	f240 2225 	movw	r2, #549	@ 0x225
 8001c92:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c94:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <MX_TIM5_Init+0x98>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8001c9a:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <MX_TIM5_Init+0x98>)
 8001c9c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ca0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca2:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <MX_TIM5_Init+0x98>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca8:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <MX_TIM5_Init+0x98>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001cae:	4814      	ldr	r0, [pc, #80]	@ (8001d00 <MX_TIM5_Init+0x98>)
 8001cb0:	f006 f83e 	bl	8007d30 <HAL_TIM_Base_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001cba:	f7ff fd31 	bl	8001720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001cc4:	f107 0310 	add.w	r3, r7, #16
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480d      	ldr	r0, [pc, #52]	@ (8001d00 <MX_TIM5_Init+0x98>)
 8001ccc:	f006 fa44 	bl	8008158 <HAL_TIM_ConfigClockSource>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001cd6:	f7ff fd23 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4806      	ldr	r0, [pc, #24]	@ (8001d00 <MX_TIM5_Init+0x98>)
 8001ce8:	f006 fca6 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001cf2:	f7ff fd15 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	3720      	adds	r7, #32
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	24000528 	.word	0x24000528
 8001d04:	40000c00 	.word	0x40000c00

08001d08 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0e:	f107 0310 	add.w	r3, r7, #16
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d26:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <MX_TIM12_Init+0x94>)
 8001d28:	4a1d      	ldr	r2, [pc, #116]	@ (8001da0 <MX_TIM12_Init+0x98>)
 8001d2a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 65535;
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <MX_TIM12_Init+0x94>)
 8001d2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d32:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d34:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <MX_TIM12_Init+0x94>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19;
 8001d3a:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <MX_TIM12_Init+0x94>)
 8001d3c:	2213      	movs	r2, #19
 8001d3e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d40:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <MX_TIM12_Init+0x94>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d46:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <MX_TIM12_Init+0x94>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001d4c:	4813      	ldr	r0, [pc, #76]	@ (8001d9c <MX_TIM12_Init+0x94>)
 8001d4e:	f005 ffef 	bl	8007d30 <HAL_TIM_Base_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM12_Init+0x54>
  {
    Error_Handler();
 8001d58:	f7ff fce2 	bl	8001720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	4619      	mov	r1, r3
 8001d68:	480c      	ldr	r0, [pc, #48]	@ (8001d9c <MX_TIM12_Init+0x94>)
 8001d6a:	f006 f9f5 	bl	8008158 <HAL_TIM_ConfigClockSource>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM12_Init+0x70>
  {
    Error_Handler();
 8001d74:	f7ff fcd4 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	4619      	mov	r1, r3
 8001d84:	4805      	ldr	r0, [pc, #20]	@ (8001d9c <MX_TIM12_Init+0x94>)
 8001d86:	f006 fc57 	bl	8008638 <HAL_TIMEx_MasterConfigSynchronization>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8001d90:	f7ff fcc6 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001d94:	bf00      	nop
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	24000574 	.word	0x24000574
 8001da0:	40001800 	.word	0x40001800

08001da4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001db4:	d117      	bne.n	8001de6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001db6:	4b39      	ldr	r3, [pc, #228]	@ (8001e9c <HAL_TIM_Base_MspInit+0xf8>)
 8001db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dbc:	4a37      	ldr	r2, [pc, #220]	@ (8001e9c <HAL_TIM_Base_MspInit+0xf8>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dc6:	4b35      	ldr	r3, [pc, #212]	@ (8001e9c <HAL_TIM_Base_MspInit+0xf8>)
 8001dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 11, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	210b      	movs	r1, #11
 8001dd8:	201c      	movs	r0, #28
 8001dda:	f001 f8a4 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dde:	201c      	movs	r0, #28
 8001de0:	f001 f8bb 	bl	8002f5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001de4:	e055      	b.n	8001e92 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2d      	ldr	r2, [pc, #180]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xfc>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d117      	bne.n	8001e20 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001df0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <HAL_TIM_Base_MspInit+0xf8>)
 8001df2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001df6:	4a29      	ldr	r2, [pc, #164]	@ (8001e9c <HAL_TIM_Base_MspInit+0xf8>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e00:	4b26      	ldr	r3, [pc, #152]	@ (8001e9c <HAL_TIM_Base_MspInit+0xf8>)
 8001e02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2102      	movs	r1, #2
 8001e12:	201d      	movs	r0, #29
 8001e14:	f001 f887 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e18:	201d      	movs	r0, #29
 8001e1a:	f001 f89e 	bl	8002f5a <HAL_NVIC_EnableIRQ>
}
 8001e1e:	e038      	b.n	8001e92 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM5)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea4 <HAL_TIM_Base_MspInit+0x100>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d117      	bne.n	8001e5a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e9c <HAL_TIM_Base_MspInit+0xf8>)
 8001e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e30:	4a1a      	ldr	r2, [pc, #104]	@ (8001e9c <HAL_TIM_Base_MspInit+0xf8>)
 8001e32:	f043 0308 	orr.w	r3, r3, #8
 8001e36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e3a:	4b18      	ldr	r3, [pc, #96]	@ (8001e9c <HAL_TIM_Base_MspInit+0xf8>)
 8001e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 13, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	210d      	movs	r1, #13
 8001e4c:	2032      	movs	r0, #50	@ 0x32
 8001e4e:	f001 f86a 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e52:	2032      	movs	r0, #50	@ 0x32
 8001e54:	f001 f881 	bl	8002f5a <HAL_NVIC_EnableIRQ>
}
 8001e58:	e01b      	b.n	8001e92 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM12)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x104>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d116      	bne.n	8001e92 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001e64:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <HAL_TIM_Base_MspInit+0xf8>)
 8001e66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e9c <HAL_TIM_Base_MspInit+0xf8>)
 8001e6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e74:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <HAL_TIM_Base_MspInit+0xf8>)
 8001e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 12, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	210c      	movs	r1, #12
 8001e86:	202b      	movs	r0, #43	@ 0x2b
 8001e88:	f001 f84d 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001e8c:	202b      	movs	r0, #43	@ 0x2b
 8001e8e:	f001 f864 	bl	8002f5a <HAL_NVIC_EnableIRQ>
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	58024400 	.word	0x58024400
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	40000c00 	.word	0x40000c00
 8001ea8:	40001800 	.word	0x40001800

08001eac <MX_UART4_Init>:
UART_HandleTypeDef huart6;
UART_HandleTypeDef huart10;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001eb0:	4b22      	ldr	r3, [pc, #136]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001eb2:	4a23      	ldr	r2, [pc, #140]	@ (8001f40 <MX_UART4_Init+0x94>)
 8001eb4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001eb6:	4b21      	ldr	r3, [pc, #132]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001eb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ebc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001edc:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eee:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ef4:	4811      	ldr	r0, [pc, #68]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ef6:	f006 fc59 	bl	80087ac <HAL_UART_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001f00:	f7ff fc0e 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f04:	2100      	movs	r1, #0
 8001f06:	480d      	ldr	r0, [pc, #52]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001f08:	f009 f97f 	bl	800b20a <HAL_UARTEx_SetTxFifoThreshold>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001f12:	f7ff fc05 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f16:	2100      	movs	r1, #0
 8001f18:	4808      	ldr	r0, [pc, #32]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001f1a:	f009 f9b4 	bl	800b286 <HAL_UARTEx_SetRxFifoThreshold>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001f24:	f7ff fbfc 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001f2a:	f009 f935 	bl	800b198 <HAL_UARTEx_DisableFifoMode>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001f34:	f7ff fbf4 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	240005c0 	.word	0x240005c0
 8001f40:	40004c00 	.word	0x40004c00

08001f44 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f48:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <MX_UART5_Init+0x90>)
 8001f4a:	4a23      	ldr	r2, [pc, #140]	@ (8001fd8 <MX_UART5_Init+0x94>)
 8001f4c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001f4e:	4b21      	ldr	r3, [pc, #132]	@ (8001fd4 <MX_UART5_Init+0x90>)
 8001f50:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f54:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f56:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd4 <MX_UART5_Init+0x90>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd4 <MX_UART5_Init+0x90>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f62:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd4 <MX_UART5_Init+0x90>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd4 <MX_UART5_Init+0x90>)
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6e:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <MX_UART5_Init+0x90>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f74:	4b17      	ldr	r3, [pc, #92]	@ (8001fd4 <MX_UART5_Init+0x90>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f7a:	4b16      	ldr	r3, [pc, #88]	@ (8001fd4 <MX_UART5_Init+0x90>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f80:	4b14      	ldr	r3, [pc, #80]	@ (8001fd4 <MX_UART5_Init+0x90>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f86:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <MX_UART5_Init+0x90>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f8c:	4811      	ldr	r0, [pc, #68]	@ (8001fd4 <MX_UART5_Init+0x90>)
 8001f8e:	f006 fc0d 	bl	80087ac <HAL_UART_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001f98:	f7ff fbc2 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	480d      	ldr	r0, [pc, #52]	@ (8001fd4 <MX_UART5_Init+0x90>)
 8001fa0:	f009 f933 	bl	800b20a <HAL_UARTEx_SetTxFifoThreshold>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001faa:	f7ff fbb9 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4808      	ldr	r0, [pc, #32]	@ (8001fd4 <MX_UART5_Init+0x90>)
 8001fb2:	f009 f968 	bl	800b286 <HAL_UARTEx_SetRxFifoThreshold>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001fbc:	f7ff fbb0 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001fc0:	4804      	ldr	r0, [pc, #16]	@ (8001fd4 <MX_UART5_Init+0x90>)
 8001fc2:	f009 f8e9 	bl	800b198 <HAL_UARTEx_DisableFifoMode>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001fcc:	f7ff fba8 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	24000654 	.word	0x24000654
 8001fd8:	40005000 	.word	0x40005000

08001fdc <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001fe0:	4b22      	ldr	r3, [pc, #136]	@ (800206c <MX_UART7_Init+0x90>)
 8001fe2:	4a23      	ldr	r2, [pc, #140]	@ (8002070 <MX_UART7_Init+0x94>)
 8001fe4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001fe6:	4b21      	ldr	r3, [pc, #132]	@ (800206c <MX_UART7_Init+0x90>)
 8001fe8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fec:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b1f      	ldr	r3, [pc, #124]	@ (800206c <MX_UART7_Init+0x90>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <MX_UART7_Init+0x90>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <MX_UART7_Init+0x90>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <MX_UART7_Init+0x90>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b19      	ldr	r3, [pc, #100]	@ (800206c <MX_UART7_Init+0x90>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b17      	ldr	r3, [pc, #92]	@ (800206c <MX_UART7_Init+0x90>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002012:	4b16      	ldr	r3, [pc, #88]	@ (800206c <MX_UART7_Init+0x90>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002018:	4b14      	ldr	r3, [pc, #80]	@ (800206c <MX_UART7_Init+0x90>)
 800201a:	2200      	movs	r2, #0
 800201c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800201e:	4b13      	ldr	r3, [pc, #76]	@ (800206c <MX_UART7_Init+0x90>)
 8002020:	2200      	movs	r2, #0
 8002022:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002024:	4811      	ldr	r0, [pc, #68]	@ (800206c <MX_UART7_Init+0x90>)
 8002026:	f006 fbc1 	bl	80087ac <HAL_UART_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8002030:	f7ff fb76 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002034:	2100      	movs	r1, #0
 8002036:	480d      	ldr	r0, [pc, #52]	@ (800206c <MX_UART7_Init+0x90>)
 8002038:	f009 f8e7 	bl	800b20a <HAL_UARTEx_SetTxFifoThreshold>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8002042:	f7ff fb6d 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002046:	2100      	movs	r1, #0
 8002048:	4808      	ldr	r0, [pc, #32]	@ (800206c <MX_UART7_Init+0x90>)
 800204a:	f009 f91c 	bl	800b286 <HAL_UARTEx_SetRxFifoThreshold>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8002054:	f7ff fb64 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002058:	4804      	ldr	r0, [pc, #16]	@ (800206c <MX_UART7_Init+0x90>)
 800205a:	f009 f89d 	bl	800b198 <HAL_UARTEx_DisableFifoMode>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8002064:	f7ff fb5c 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	240006e8 	.word	0x240006e8
 8002070:	40007800 	.word	0x40007800

08002074 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002078:	4b22      	ldr	r3, [pc, #136]	@ (8002104 <MX_UART8_Init+0x90>)
 800207a:	4a23      	ldr	r2, [pc, #140]	@ (8002108 <MX_UART8_Init+0x94>)
 800207c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800207e:	4b21      	ldr	r3, [pc, #132]	@ (8002104 <MX_UART8_Init+0x90>)
 8002080:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002084:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002086:	4b1f      	ldr	r3, [pc, #124]	@ (8002104 <MX_UART8_Init+0x90>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800208c:	4b1d      	ldr	r3, [pc, #116]	@ (8002104 <MX_UART8_Init+0x90>)
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002092:	4b1c      	ldr	r3, [pc, #112]	@ (8002104 <MX_UART8_Init+0x90>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002098:	4b1a      	ldr	r3, [pc, #104]	@ (8002104 <MX_UART8_Init+0x90>)
 800209a:	220c      	movs	r2, #12
 800209c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209e:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <MX_UART8_Init+0x90>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a4:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <MX_UART8_Init+0x90>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020aa:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <MX_UART8_Init+0x90>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020b0:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <MX_UART8_Init+0x90>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b6:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <MX_UART8_Init+0x90>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80020bc:	4811      	ldr	r0, [pc, #68]	@ (8002104 <MX_UART8_Init+0x90>)
 80020be:	f006 fb75 	bl	80087ac <HAL_UART_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80020c8:	f7ff fb2a 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020cc:	2100      	movs	r1, #0
 80020ce:	480d      	ldr	r0, [pc, #52]	@ (8002104 <MX_UART8_Init+0x90>)
 80020d0:	f009 f89b 	bl	800b20a <HAL_UARTEx_SetTxFifoThreshold>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80020da:	f7ff fb21 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020de:	2100      	movs	r1, #0
 80020e0:	4808      	ldr	r0, [pc, #32]	@ (8002104 <MX_UART8_Init+0x90>)
 80020e2:	f009 f8d0 	bl	800b286 <HAL_UARTEx_SetRxFifoThreshold>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80020ec:	f7ff fb18 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80020f0:	4804      	ldr	r0, [pc, #16]	@ (8002104 <MX_UART8_Init+0x90>)
 80020f2:	f009 f851 	bl	800b198 <HAL_UARTEx_DisableFifoMode>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80020fc:	f7ff fb10 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	2400077c 	.word	0x2400077c
 8002108:	40007c00 	.word	0x40007c00

0800210c <MX_UART9_Init>:
/* UART9 init function */
void MX_UART9_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 8002110:	4b22      	ldr	r3, [pc, #136]	@ (800219c <MX_UART9_Init+0x90>)
 8002112:	4a23      	ldr	r2, [pc, #140]	@ (80021a0 <MX_UART9_Init+0x94>)
 8002114:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 115200;
 8002116:	4b21      	ldr	r3, [pc, #132]	@ (800219c <MX_UART9_Init+0x90>)
 8002118:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800211c:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 800211e:	4b1f      	ldr	r3, [pc, #124]	@ (800219c <MX_UART9_Init+0x90>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 8002124:	4b1d      	ldr	r3, [pc, #116]	@ (800219c <MX_UART9_Init+0x90>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 800212a:	4b1c      	ldr	r3, [pc, #112]	@ (800219c <MX_UART9_Init+0x90>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 8002130:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <MX_UART9_Init+0x90>)
 8002132:	220c      	movs	r2, #12
 8002134:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002136:	4b19      	ldr	r3, [pc, #100]	@ (800219c <MX_UART9_Init+0x90>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 800213c:	4b17      	ldr	r3, [pc, #92]	@ (800219c <MX_UART9_Init+0x90>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  huart9.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002142:	4b16      	ldr	r3, [pc, #88]	@ (800219c <MX_UART9_Init+0x90>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
  huart9.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <MX_UART9_Init+0x90>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart9.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800214e:	4b13      	ldr	r3, [pc, #76]	@ (800219c <MX_UART9_Init+0x90>)
 8002150:	2200      	movs	r2, #0
 8002152:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart9) != HAL_OK)
 8002154:	4811      	ldr	r0, [pc, #68]	@ (800219c <MX_UART9_Init+0x90>)
 8002156:	f006 fb29 	bl	80087ac <HAL_UART_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_UART9_Init+0x58>
  {
    Error_Handler();
 8002160:	f7ff fade 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart9, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002164:	2100      	movs	r1, #0
 8002166:	480d      	ldr	r0, [pc, #52]	@ (800219c <MX_UART9_Init+0x90>)
 8002168:	f009 f84f 	bl	800b20a <HAL_UARTEx_SetTxFifoThreshold>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_UART9_Init+0x6a>
  {
    Error_Handler();
 8002172:	f7ff fad5 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart9, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002176:	2100      	movs	r1, #0
 8002178:	4808      	ldr	r0, [pc, #32]	@ (800219c <MX_UART9_Init+0x90>)
 800217a:	f009 f884 	bl	800b286 <HAL_UARTEx_SetRxFifoThreshold>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_UART9_Init+0x7c>
  {
    Error_Handler();
 8002184:	f7ff facc 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart9) != HAL_OK)
 8002188:	4804      	ldr	r0, [pc, #16]	@ (800219c <MX_UART9_Init+0x90>)
 800218a:	f009 f805 	bl	800b198 <HAL_UARTEx_DisableFifoMode>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_UART9_Init+0x8c>
  {
    Error_Handler();
 8002194:	f7ff fac4 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	24000810 	.word	0x24000810
 80021a0:	40011800 	.word	0x40011800

080021a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021a8:	4b39      	ldr	r3, [pc, #228]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 80021aa:	4a3a      	ldr	r2, [pc, #232]	@ (8002294 <MX_USART2_UART_Init+0xf0>)
 80021ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021ae:	4b38      	ldr	r3, [pc, #224]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 80021b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021b6:	4b36      	ldr	r3, [pc, #216]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021bc:	4b34      	ldr	r3, [pc, #208]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021c2:	4b33      	ldr	r3, [pc, #204]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021c8:	4b31      	ldr	r3, [pc, #196]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 80021ca:	220c      	movs	r2, #12
 80021cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ce:	4b30      	ldr	r3, [pc, #192]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021da:	4b2d      	ldr	r3, [pc, #180]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 80021dc:	2200      	movs	r2, #0
 80021de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021ec:	4828      	ldr	r0, [pc, #160]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 80021ee:	f006 fadd 	bl	80087ac <HAL_UART_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80021f8:	f7ff fa92 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021fc:	2100      	movs	r1, #0
 80021fe:	4824      	ldr	r0, [pc, #144]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 8002200:	f009 f803 	bl	800b20a <HAL_UARTEx_SetTxFifoThreshold>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800220a:	f7ff fa89 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800220e:	2100      	movs	r1, #0
 8002210:	481f      	ldr	r0, [pc, #124]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 8002212:	f009 f838 	bl	800b286 <HAL_UARTEx_SetRxFifoThreshold>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800221c:	f7ff fa80 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002220:	481b      	ldr	r0, [pc, #108]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 8002222:	f008 ffb9 	bl	800b198 <HAL_UARTEx_DisableFifoMode>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800222c:	f7ff fa78 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  HAL_UART_Transmit(&huart2,unlock_register, sizeof(unlock_register),1000);
 8002230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002234:	2205      	movs	r2, #5
 8002236:	4918      	ldr	r1, [pc, #96]	@ (8002298 <MX_USART2_UART_Init+0xf4>)
 8002238:	4815      	ldr	r0, [pc, #84]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 800223a:	f006 fb07 	bl	800884c <HAL_UART_Transmit>
  HAL_Delay(5);
 800223e:	2005      	movs	r0, #5
 8002240:	f000 fd72 	bl	8002d28 <HAL_Delay>
  HAL_UART_Transmit(&huart2,reset_z_axis, sizeof(reset_z_axis),1000);
 8002244:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002248:	2205      	movs	r2, #5
 800224a:	4914      	ldr	r1, [pc, #80]	@ (800229c <MX_USART2_UART_Init+0xf8>)
 800224c:	4810      	ldr	r0, [pc, #64]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 800224e:	f006 fafd 	bl	800884c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_output_200Hz, sizeof(set_output_200Hz),1000);
 8002252:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002256:	2205      	movs	r2, #5
 8002258:	4911      	ldr	r1, [pc, #68]	@ (80022a0 <MX_USART2_UART_Init+0xfc>)
 800225a:	480d      	ldr	r0, [pc, #52]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 800225c:	f006 faf6 	bl	800884c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_baudrate_115200, sizeof(set_baudrate_115200),1000);
 8002260:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002264:	2205      	movs	r2, #5
 8002266:	490f      	ldr	r1, [pc, #60]	@ (80022a4 <MX_USART2_UART_Init+0x100>)
 8002268:	4809      	ldr	r0, [pc, #36]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 800226a:	f006 faef 	bl	800884c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,save_settings, sizeof(save_settings),1000);
 800226e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002272:	2205      	movs	r2, #5
 8002274:	490c      	ldr	r1, [pc, #48]	@ (80022a8 <MX_USART2_UART_Init+0x104>)
 8002276:	4806      	ldr	r0, [pc, #24]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 8002278:	f006 fae8 	bl	800884c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,restart_device, sizeof(restart_device),1000);
 800227c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002280:	2205      	movs	r2, #5
 8002282:	490a      	ldr	r1, [pc, #40]	@ (80022ac <MX_USART2_UART_Init+0x108>)
 8002284:	4802      	ldr	r0, [pc, #8]	@ (8002290 <MX_USART2_UART_Init+0xec>)
 8002286:	f006 fae1 	bl	800884c <HAL_UART_Transmit>


  /* USER CODE END USART2_Init 2 */

}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	240008a4 	.word	0x240008a4
 8002294:	40004400 	.word	0x40004400
 8002298:	24000010 	.word	0x24000010
 800229c:	24000018 	.word	0x24000018
 80022a0:	24000020 	.word	0x24000020
 80022a4:	24000028 	.word	0x24000028
 80022a8:	24000030 	.word	0x24000030
 80022ac:	24000038 	.word	0x24000038

080022b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022b4:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <MX_USART3_UART_Init+0x90>)
 80022b6:	4a23      	ldr	r2, [pc, #140]	@ (8002344 <MX_USART3_UART_Init+0x94>)
 80022b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022ba:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <MX_USART3_UART_Init+0x90>)
 80022bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <MX_USART3_UART_Init+0x90>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <MX_USART3_UART_Init+0x90>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002340 <MX_USART3_UART_Init+0x90>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <MX_USART3_UART_Init+0x90>)
 80022d6:	220c      	movs	r2, #12
 80022d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022da:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <MX_USART3_UART_Init+0x90>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e0:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <MX_USART3_UART_Init+0x90>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022e6:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <MX_USART3_UART_Init+0x90>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022ec:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <MX_USART3_UART_Init+0x90>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022f2:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <MX_USART3_UART_Init+0x90>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022f8:	4811      	ldr	r0, [pc, #68]	@ (8002340 <MX_USART3_UART_Init+0x90>)
 80022fa:	f006 fa57 	bl	80087ac <HAL_UART_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002304:	f7ff fa0c 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002308:	2100      	movs	r1, #0
 800230a:	480d      	ldr	r0, [pc, #52]	@ (8002340 <MX_USART3_UART_Init+0x90>)
 800230c:	f008 ff7d 	bl	800b20a <HAL_UARTEx_SetTxFifoThreshold>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002316:	f7ff fa03 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800231a:	2100      	movs	r1, #0
 800231c:	4808      	ldr	r0, [pc, #32]	@ (8002340 <MX_USART3_UART_Init+0x90>)
 800231e:	f008 ffb2 	bl	800b286 <HAL_UARTEx_SetRxFifoThreshold>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002328:	f7ff f9fa 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800232c:	4804      	ldr	r0, [pc, #16]	@ (8002340 <MX_USART3_UART_Init+0x90>)
 800232e:	f008 ff33 	bl	800b198 <HAL_UARTEx_DisableFifoMode>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002338:	f7ff f9f2 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	24000938 	.word	0x24000938
 8002344:	40004800 	.word	0x40004800

08002348 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800234c:	4b22      	ldr	r3, [pc, #136]	@ (80023d8 <MX_USART6_UART_Init+0x90>)
 800234e:	4a23      	ldr	r2, [pc, #140]	@ (80023dc <MX_USART6_UART_Init+0x94>)
 8002350:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002352:	4b21      	ldr	r3, [pc, #132]	@ (80023d8 <MX_USART6_UART_Init+0x90>)
 8002354:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002358:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800235a:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <MX_USART6_UART_Init+0x90>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002360:	4b1d      	ldr	r3, [pc, #116]	@ (80023d8 <MX_USART6_UART_Init+0x90>)
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002366:	4b1c      	ldr	r3, [pc, #112]	@ (80023d8 <MX_USART6_UART_Init+0x90>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800236c:	4b1a      	ldr	r3, [pc, #104]	@ (80023d8 <MX_USART6_UART_Init+0x90>)
 800236e:	220c      	movs	r2, #12
 8002370:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002372:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <MX_USART6_UART_Init+0x90>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002378:	4b17      	ldr	r3, [pc, #92]	@ (80023d8 <MX_USART6_UART_Init+0x90>)
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800237e:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <MX_USART6_UART_Init+0x90>)
 8002380:	2200      	movs	r2, #0
 8002382:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002384:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <MX_USART6_UART_Init+0x90>)
 8002386:	2200      	movs	r2, #0
 8002388:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800238a:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <MX_USART6_UART_Init+0x90>)
 800238c:	2200      	movs	r2, #0
 800238e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002390:	4811      	ldr	r0, [pc, #68]	@ (80023d8 <MX_USART6_UART_Init+0x90>)
 8002392:	f006 fa0b 	bl	80087ac <HAL_UART_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800239c:	f7ff f9c0 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023a0:	2100      	movs	r1, #0
 80023a2:	480d      	ldr	r0, [pc, #52]	@ (80023d8 <MX_USART6_UART_Init+0x90>)
 80023a4:	f008 ff31 	bl	800b20a <HAL_UARTEx_SetTxFifoThreshold>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80023ae:	f7ff f9b7 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023b2:	2100      	movs	r1, #0
 80023b4:	4808      	ldr	r0, [pc, #32]	@ (80023d8 <MX_USART6_UART_Init+0x90>)
 80023b6:	f008 ff66 	bl	800b286 <HAL_UARTEx_SetRxFifoThreshold>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80023c0:	f7ff f9ae 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80023c4:	4804      	ldr	r0, [pc, #16]	@ (80023d8 <MX_USART6_UART_Init+0x90>)
 80023c6:	f008 fee7 	bl	800b198 <HAL_UARTEx_DisableFifoMode>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80023d0:	f7ff f9a6 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	240009cc 	.word	0x240009cc
 80023dc:	40011400 	.word	0x40011400

080023e0 <MX_USART10_UART_Init>:
/* USART10 init function */

void MX_USART10_UART_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80023e4:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <MX_USART10_UART_Init+0x90>)
 80023e6:	4a23      	ldr	r2, [pc, #140]	@ (8002474 <MX_USART10_UART_Init+0x94>)
 80023e8:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 80023ea:	4b21      	ldr	r3, [pc, #132]	@ (8002470 <MX_USART10_UART_Init+0x90>)
 80023ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023f0:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80023f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002470 <MX_USART10_UART_Init+0x90>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80023f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002470 <MX_USART10_UART_Init+0x90>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80023fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002470 <MX_USART10_UART_Init+0x90>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8002404:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <MX_USART10_UART_Init+0x90>)
 8002406:	220c      	movs	r2, #12
 8002408:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240a:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <MX_USART10_UART_Init+0x90>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8002410:	4b17      	ldr	r3, [pc, #92]	@ (8002470 <MX_USART10_UART_Init+0x90>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002416:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <MX_USART10_UART_Init+0x90>)
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800241c:	4b14      	ldr	r3, [pc, #80]	@ (8002470 <MX_USART10_UART_Init+0x90>)
 800241e:	2200      	movs	r2, #0
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002422:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <MX_USART10_UART_Init+0x90>)
 8002424:	2200      	movs	r2, #0
 8002426:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8002428:	4811      	ldr	r0, [pc, #68]	@ (8002470 <MX_USART10_UART_Init+0x90>)
 800242a:	f006 f9bf 	bl	80087ac <HAL_UART_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8002434:	f7ff f974 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002438:	2100      	movs	r1, #0
 800243a:	480d      	ldr	r0, [pc, #52]	@ (8002470 <MX_USART10_UART_Init+0x90>)
 800243c:	f008 fee5 	bl	800b20a <HAL_UARTEx_SetTxFifoThreshold>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8002446:	f7ff f96b 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800244a:	2100      	movs	r1, #0
 800244c:	4808      	ldr	r0, [pc, #32]	@ (8002470 <MX_USART10_UART_Init+0x90>)
 800244e:	f008 ff1a 	bl	800b286 <HAL_UARTEx_SetRxFifoThreshold>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8002458:	f7ff f962 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 800245c:	4804      	ldr	r0, [pc, #16]	@ (8002470 <MX_USART10_UART_Init+0x90>)
 800245e:	f008 fe9b 	bl	800b198 <HAL_UARTEx_DisableFifoMode>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8002468:	f7ff f95a 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	24000a60 	.word	0x24000a60
 8002474:	40011c00 	.word	0x40011c00

08002478 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b0c8      	sub	sp, #288	@ 0x120
 800247c:	af00      	add	r7, sp, #0
 800247e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002482:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002486:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002498:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800249c:	22b8      	movs	r2, #184	@ 0xb8
 800249e:	2100      	movs	r1, #0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f00d fdba 	bl	801001a <memset>
  if(uartHandle->Instance==UART4)
 80024a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4aaa      	ldr	r2, [pc, #680]	@ (800275c <HAL_UART_MspInit+0x2e4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d14e      	bne.n	8002556 <HAL_UART_MspInit+0xde>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80024b8:	f04f 0202 	mov.w	r2, #2
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ca:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fe6c 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80024da:	f7ff f921 	bl	8001720 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80024de:	4ba0      	ldr	r3, [pc, #640]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 80024e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024e4:	4a9e      	ldr	r2, [pc, #632]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 80024e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80024ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024ee:	4b9c      	ldr	r3, [pc, #624]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 80024f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fc:	4b98      	ldr	r3, [pc, #608]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 80024fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002502:	4a97      	ldr	r2, [pc, #604]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800250c:	4b94      	ldr	r3, [pc, #592]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 800250e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800251a:	2303      	movs	r3, #3
 800251c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252c:	2300      	movs	r3, #0
 800252e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002532:	2308      	movs	r3, #8
 8002534:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800253c:	4619      	mov	r1, r3
 800253e:	4889      	ldr	r0, [pc, #548]	@ (8002764 <HAL_UART_MspInit+0x2ec>)
 8002540:	f002 fcec 	bl	8004f1c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 8002544:	2200      	movs	r2, #0
 8002546:	2108      	movs	r1, #8
 8002548:	2034      	movs	r0, #52	@ 0x34
 800254a:	f000 fcec 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800254e:	2034      	movs	r0, #52	@ 0x34
 8002550:	f000 fd03 	bl	8002f5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }
}
 8002554:	e320      	b.n	8002b98 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART5)
 8002556:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800255a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a81      	ldr	r2, [pc, #516]	@ (8002768 <HAL_UART_MspInit+0x2f0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d147      	bne.n	80025f8 <HAL_UART_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002568:	f04f 0202 	mov.w	r2, #2
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002574:	2300      	movs	r3, #0
 8002576:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800257a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fe14 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_UART_MspInit+0x116>
      Error_Handler();
 800258a:	f7ff f8c9 	bl	8001720 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800258e:	4b74      	ldr	r3, [pc, #464]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 8002590:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002594:	4a72      	ldr	r2, [pc, #456]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 8002596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800259a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800259e:	4b70      	ldr	r3, [pc, #448]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 80025a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80025aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 80025ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b2:	4a6b      	ldr	r2, [pc, #428]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025bc:	4b68      	ldr	r3, [pc, #416]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 80025be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80025c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 80025ca:	f242 0320 	movw	r3, #8224	@ 0x2020
 80025ce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80025e4:	230e      	movs	r3, #14
 80025e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ea:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80025ee:	4619      	mov	r1, r3
 80025f0:	485e      	ldr	r0, [pc, #376]	@ (800276c <HAL_UART_MspInit+0x2f4>)
 80025f2:	f002 fc93 	bl	8004f1c <HAL_GPIO_Init>
}
 80025f6:	e2cf      	b.n	8002b98 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART7)
 80025f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80025fc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a5a      	ldr	r2, [pc, #360]	@ (8002770 <HAL_UART_MspInit+0x2f8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d14f      	bne.n	80026aa <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800260a:	f04f 0202 	mov.w	r2, #2
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002616:	2300      	movs	r3, #0
 8002618:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800261c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002620:	4618      	mov	r0, r3
 8002622:	f003 fdc3 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 800262c:	f7ff f878 	bl	8001720 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002630:	4b4b      	ldr	r3, [pc, #300]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 8002632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002636:	4a4a      	ldr	r2, [pc, #296]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 8002638:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800263c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002640:	4b47      	ldr	r3, [pc, #284]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 8002642:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002646:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800264a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800264c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800264e:	4b44      	ldr	r3, [pc, #272]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 8002650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002654:	4a42      	ldr	r2, [pc, #264]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 8002656:	f043 0310 	orr.w	r3, r3, #16
 800265a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800265e:	4b40      	ldr	r3, [pc, #256]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 8002660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	63bb      	str	r3, [r7, #56]	@ 0x38
 800266a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800266c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002670:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002686:	2307      	movs	r3, #7
 8002688:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800268c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002690:	4619      	mov	r1, r3
 8002692:	4838      	ldr	r0, [pc, #224]	@ (8002774 <HAL_UART_MspInit+0x2fc>)
 8002694:	f002 fc42 	bl	8004f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 6, 0);
 8002698:	2200      	movs	r2, #0
 800269a:	2106      	movs	r1, #6
 800269c:	2052      	movs	r0, #82	@ 0x52
 800269e:	f000 fc42 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80026a2:	2052      	movs	r0, #82	@ 0x52
 80026a4:	f000 fc59 	bl	8002f5a <HAL_NVIC_EnableIRQ>
}
 80026a8:	e276      	b.n	8002b98 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART8)
 80026aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a30      	ldr	r2, [pc, #192]	@ (8002778 <HAL_UART_MspInit+0x300>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d15f      	bne.n	800277c <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80026bc:	f04f 0202 	mov.w	r2, #2
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 fd6a 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 80026de:	f7ff f81f 	bl	8001720 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80026e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 80026e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 80026ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 80026f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80026fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80026fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002700:	4b17      	ldr	r3, [pc, #92]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 8002702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002706:	4a16      	ldr	r2, [pc, #88]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 8002708:	f043 0310 	orr.w	r3, r3, #16
 800270c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002710:	4b13      	ldr	r3, [pc, #76]	@ (8002760 <HAL_UART_MspInit+0x2e8>)
 8002712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	633b      	str	r3, [r7, #48]	@ 0x30
 800271c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800271e:	2303      	movs	r3, #3
 8002720:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002736:	2308      	movs	r3, #8
 8002738:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800273c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002740:	4619      	mov	r1, r3
 8002742:	480c      	ldr	r0, [pc, #48]	@ (8002774 <HAL_UART_MspInit+0x2fc>)
 8002744:	f002 fbea 	bl	8004f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 15, 0);
 8002748:	2200      	movs	r2, #0
 800274a:	210f      	movs	r1, #15
 800274c:	2053      	movs	r0, #83	@ 0x53
 800274e:	f000 fbea 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002752:	2053      	movs	r0, #83	@ 0x53
 8002754:	f000 fc01 	bl	8002f5a <HAL_NVIC_EnableIRQ>
}
 8002758:	e21e      	b.n	8002b98 <HAL_UART_MspInit+0x720>
 800275a:	bf00      	nop
 800275c:	40004c00 	.word	0x40004c00
 8002760:	58024400 	.word	0x58024400
 8002764:	58020000 	.word	0x58020000
 8002768:	40005000 	.word	0x40005000
 800276c:	58020400 	.word	0x58020400
 8002770:	40007800 	.word	0x40007800
 8002774:	58021000 	.word	0x58021000
 8002778:	40007c00 	.word	0x40007c00
  else if(uartHandle->Instance==UART9)
 800277c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002780:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4abd      	ldr	r2, [pc, #756]	@ (8002a80 <HAL_UART_MspInit+0x608>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d14f      	bne.n	800282e <HAL_UART_MspInit+0x3b6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART9;
 800278e:	f04f 0201 	mov.w	r2, #1
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 fd01 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 80027b0:	f7fe ffb6 	bl	8001720 <Error_Handler>
    __HAL_RCC_UART9_CLK_ENABLE();
 80027b4:	4bb3      	ldr	r3, [pc, #716]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 80027b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027ba:	4ab2      	ldr	r2, [pc, #712]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 80027bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027c4:	4baf      	ldr	r3, [pc, #700]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 80027c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d2:	4bac      	ldr	r3, [pc, #688]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 80027d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027d8:	4aaa      	ldr	r2, [pc, #680]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 80027da:	f043 0308 	orr.w	r3, r3, #8
 80027de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027e2:	4ba8      	ldr	r3, [pc, #672]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 80027e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80027f0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80027f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 800280a:	230b      	movs	r3, #11
 800280c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002810:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002814:	4619      	mov	r1, r3
 8002816:	489c      	ldr	r0, [pc, #624]	@ (8002a88 <HAL_UART_MspInit+0x610>)
 8002818:	f002 fb80 	bl	8004f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART9_IRQn, 5, 0);
 800281c:	2200      	movs	r2, #0
 800281e:	2105      	movs	r1, #5
 8002820:	209b      	movs	r0, #155	@ 0x9b
 8002822:	f000 fb80 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART9_IRQn);
 8002826:	209b      	movs	r0, #155	@ 0x9b
 8002828:	f000 fb97 	bl	8002f5a <HAL_NVIC_EnableIRQ>
}
 800282c:	e1b4      	b.n	8002b98 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART2)
 800282e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002832:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a94      	ldr	r2, [pc, #592]	@ (8002a8c <HAL_UART_MspInit+0x614>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d156      	bne.n	80028ee <HAL_UART_MspInit+0x476>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002840:	f04f 0202 	mov.w	r2, #2
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002852:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002856:	4618      	mov	r0, r3
 8002858:	f003 fca8 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_UART_MspInit+0x3ee>
      Error_Handler();
 8002862:	f7fe ff5d 	bl	8001720 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002866:	4b87      	ldr	r3, [pc, #540]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 8002868:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800286c:	4a85      	ldr	r2, [pc, #532]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 800286e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002872:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002876:	4b83      	ldr	r3, [pc, #524]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 8002878:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800287c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002884:	4b7f      	ldr	r3, [pc, #508]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 8002886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800288a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002894:	4b7b      	ldr	r3, [pc, #492]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 8002896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800289a:	f003 0201 	and.w	r2, r3, #1
 800289e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028a2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028b0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028b2:	230c      	movs	r3, #12
 80028b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028ca:	2307      	movs	r3, #7
 80028cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80028d4:	4619      	mov	r1, r3
 80028d6:	486e      	ldr	r0, [pc, #440]	@ (8002a90 <HAL_UART_MspInit+0x618>)
 80028d8:	f002 fb20 	bl	8004f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80028dc:	2200      	movs	r2, #0
 80028de:	210f      	movs	r1, #15
 80028e0:	2026      	movs	r0, #38	@ 0x26
 80028e2:	f000 fb20 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028e6:	2026      	movs	r0, #38	@ 0x26
 80028e8:	f000 fb37 	bl	8002f5a <HAL_NVIC_EnableIRQ>
}
 80028ec:	e154      	b.n	8002b98 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART3)
 80028ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a66      	ldr	r2, [pc, #408]	@ (8002a94 <HAL_UART_MspInit+0x61c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d15f      	bne.n	80029c0 <HAL_UART_MspInit+0x548>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002900:	f04f 0202 	mov.w	r2, #2
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002912:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002916:	4618      	mov	r0, r3
 8002918:	f003 fc48 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_UART_MspInit+0x4ae>
      Error_Handler();
 8002922:	f7fe fefd 	bl	8001720 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002926:	4b57      	ldr	r3, [pc, #348]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 8002928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800292c:	4a55      	ldr	r2, [pc, #340]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 800292e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002932:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002936:	4b53      	ldr	r3, [pc, #332]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 8002938:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800293c:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002940:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002944:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800294e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002952:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002954:	4b4b      	ldr	r3, [pc, #300]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 8002956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800295a:	4a4a      	ldr	r2, [pc, #296]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 800295c:	f043 0308 	orr.w	r3, r3, #8
 8002960:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002964:	4b47      	ldr	r3, [pc, #284]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 8002966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296a:	f003 0208 	and.w	r2, r3, #8
 800296e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800297c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002980:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002982:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002986:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	2300      	movs	r3, #0
 8002998:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800299c:	2307      	movs	r3, #7
 800299e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029a2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80029a6:	4619      	mov	r1, r3
 80029a8:	4837      	ldr	r0, [pc, #220]	@ (8002a88 <HAL_UART_MspInit+0x610>)
 80029aa:	f002 fab7 	bl	8004f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	210e      	movs	r1, #14
 80029b2:	2027      	movs	r0, #39	@ 0x27
 80029b4:	f000 fab7 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029b8:	2027      	movs	r0, #39	@ 0x27
 80029ba:	f000 face 	bl	8002f5a <HAL_NVIC_EnableIRQ>
}
 80029be:	e0eb      	b.n	8002b98 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART6)
 80029c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029c4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a32      	ldr	r2, [pc, #200]	@ (8002a98 <HAL_UART_MspInit+0x620>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d166      	bne.n	8002aa0 <HAL_UART_MspInit+0x628>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80029d2:	f04f 0201 	mov.w	r2, #1
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029e4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80029e8:	4618      	mov	r0, r3
 80029ea:	f003 fbdf 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_UART_MspInit+0x580>
      Error_Handler();
 80029f4:	f7fe fe94 	bl	8001720 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80029f8:	4b22      	ldr	r3, [pc, #136]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 80029fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029fe:	4a21      	ldr	r2, [pc, #132]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 8002a00:	f043 0320 	orr.w	r3, r3, #32
 8002a04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a08:	4b1e      	ldr	r3, [pc, #120]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 8002a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a0e:	f003 0220 	and.w	r2, r3, #32
 8002a12:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a24:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a26:	4b17      	ldr	r3, [pc, #92]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 8002a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a2c:	4a15      	ldr	r2, [pc, #84]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a36:	4b13      	ldr	r3, [pc, #76]	@ (8002a84 <HAL_UART_MspInit+0x60c>)
 8002a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a3c:	f003 0204 	and.w	r2, r3, #4
 8002a40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a44:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a4e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a52:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a54:	23c0      	movs	r3, #192	@ 0xc0
 8002a56:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002a6c:	2307      	movs	r3, #7
 8002a6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a72:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a76:	4619      	mov	r1, r3
 8002a78:	4808      	ldr	r0, [pc, #32]	@ (8002a9c <HAL_UART_MspInit+0x624>)
 8002a7a:	f002 fa4f 	bl	8004f1c <HAL_GPIO_Init>
}
 8002a7e:	e08b      	b.n	8002b98 <HAL_UART_MspInit+0x720>
 8002a80:	40011800 	.word	0x40011800
 8002a84:	58024400 	.word	0x58024400
 8002a88:	58020c00 	.word	0x58020c00
 8002a8c:	40004400 	.word	0x40004400
 8002a90:	58020000 	.word	0x58020000
 8002a94:	40004800 	.word	0x40004800
 8002a98:	40011400 	.word	0x40011400
 8002a9c:	58020800 	.word	0x58020800
  else if(uartHandle->Instance==USART10)
 8002aa0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002aa4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a3d      	ldr	r2, [pc, #244]	@ (8002ba4 <HAL_UART_MspInit+0x72c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d172      	bne.n	8002b98 <HAL_UART_MspInit+0x720>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8002ab2:	f04f 0201 	mov.w	r2, #1
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ac4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f003 fb6f 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_UART_MspInit+0x660>
      Error_Handler();
 8002ad4:	f7fe fe24 	bl	8001720 <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8002ad8:	4b33      	ldr	r3, [pc, #204]	@ (8002ba8 <HAL_UART_MspInit+0x730>)
 8002ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ade:	4a32      	ldr	r2, [pc, #200]	@ (8002ba8 <HAL_UART_MspInit+0x730>)
 8002ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ae4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8002ba8 <HAL_UART_MspInit+0x730>)
 8002aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002aee:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002af2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002af6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b00:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b04:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b06:	4b28      	ldr	r3, [pc, #160]	@ (8002ba8 <HAL_UART_MspInit+0x730>)
 8002b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b0c:	4a26      	ldr	r2, [pc, #152]	@ (8002ba8 <HAL_UART_MspInit+0x730>)
 8002b0e:	f043 0310 	orr.w	r3, r3, #16
 8002b12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b16:	4b24      	ldr	r3, [pc, #144]	@ (8002ba8 <HAL_UART_MspInit+0x730>)
 8002b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b1c:	f003 0210 	and.w	r2, r3, #16
 8002b20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b24:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b2e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002b32:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b34:	2304      	movs	r3, #4
 8002b36:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b52:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b56:	4619      	mov	r1, r3
 8002b58:	4814      	ldr	r0, [pc, #80]	@ (8002bac <HAL_UART_MspInit+0x734>)
 8002b5a:	f002 f9df 	bl	8004f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b5e:	2308      	movs	r3, #8
 8002b60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b64:	2302      	movs	r3, #2
 8002b66:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8002b76:	230b      	movs	r3, #11
 8002b78:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b7c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b80:	4619      	mov	r1, r3
 8002b82:	480a      	ldr	r0, [pc, #40]	@ (8002bac <HAL_UART_MspInit+0x734>)
 8002b84:	f002 f9ca 	bl	8004f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART10_IRQn, 1, 0);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	209c      	movs	r0, #156	@ 0x9c
 8002b8e:	f000 f9ca 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8002b92:	209c      	movs	r0, #156	@ 0x9c
 8002b94:	f000 f9e1 	bl	8002f5a <HAL_NVIC_EnableIRQ>
}
 8002b98:	bf00      	nop
 8002b9a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40011c00 	.word	0x40011c00
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	58021000 	.word	0x58021000

08002bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
     ldr   sp, =_estack      /* set stack pointer */
 8002bb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002be8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002bb4:	f7fe ff42 	bl	8001a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bb8:	480c      	ldr	r0, [pc, #48]	@ (8002bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bba:	490d      	ldr	r1, [pc, #52]	@ (8002bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc0:	e002      	b.n	8002bc8 <LoopCopyDataInit>

08002bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bc6:	3304      	adds	r3, #4

08002bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bcc:	d3f9      	bcc.n	8002bc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bce:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8002bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd4:	e001      	b.n	8002bda <LoopFillZerobss>

08002bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd8:	3204      	adds	r2, #4

08002bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bdc:	d3fb      	bcc.n	8002bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bde:	f00d faa3 	bl	8010128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002be2:	f7fe f9eb 	bl	8000fbc <main>
  bx  lr
 8002be6:	4770      	bx	lr
     ldr   sp, =_estack      /* set stack pointer */
 8002be8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002bec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002bf0:	24000214 	.word	0x24000214
  ldr r2, =_sidata
 8002bf4:	0801372c 	.word	0x0801372c
  ldr r2, =_sbss
 8002bf8:	24000214 	.word	0x24000214
  ldr r4, =_ebss
 8002bfc:	24000ecc 	.word	0x24000ecc

08002c00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c00:	e7fe      	b.n	8002c00 <ADC3_IRQHandler>
	...

08002c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c0a:	2003      	movs	r0, #3
 8002c0c:	f000 f980 	bl	8002f10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c10:	f003 f8f6 	bl	8005e00 <HAL_RCC_GetSysClockFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b15      	ldr	r3, [pc, #84]	@ (8002c6c <HAL_Init+0x68>)
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	4913      	ldr	r1, [pc, #76]	@ (8002c70 <HAL_Init+0x6c>)
 8002c22:	5ccb      	ldrb	r3, [r1, r3]
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c6c <HAL_Init+0x68>)
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	4a0e      	ldr	r2, [pc, #56]	@ (8002c70 <HAL_Init+0x6c>)
 8002c38:	5cd3      	ldrb	r3, [r2, r3]
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
 8002c44:	4a0b      	ldr	r2, [pc, #44]	@ (8002c74 <HAL_Init+0x70>)
 8002c46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c48:	4a0b      	ldr	r2, [pc, #44]	@ (8002c78 <HAL_Init+0x74>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c4e:	200f      	movs	r0, #15
 8002c50:	f000 f814 	bl	8002c7c <HAL_InitTick>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e002      	b.n	8002c64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c5e:	f7fe fd65 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	58024400 	.word	0x58024400
 8002c70:	08013288 	.word	0x08013288
 8002c74:	2400000c 	.word	0x2400000c
 8002c78:	24000008 	.word	0x24000008

08002c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c84:	4b15      	ldr	r3, [pc, #84]	@ (8002cdc <HAL_InitTick+0x60>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e021      	b.n	8002cd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c90:	4b13      	ldr	r3, [pc, #76]	@ (8002ce0 <HAL_InitTick+0x64>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <HAL_InitTick+0x60>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f965 	bl	8002f76 <HAL_SYSTICK_Config>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e00e      	b.n	8002cd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b0f      	cmp	r3, #15
 8002cba:	d80a      	bhi.n	8002cd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc4:	f000 f92f 	bl	8002f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cc8:	4a06      	ldr	r2, [pc, #24]	@ (8002ce4 <HAL_InitTick+0x68>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e000      	b.n	8002cd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	24000044 	.word	0x24000044
 8002ce0:	24000008 	.word	0x24000008
 8002ce4:	24000040 	.word	0x24000040

08002ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_IncTick+0x20>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <HAL_IncTick+0x24>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	4a04      	ldr	r2, [pc, #16]	@ (8002d0c <HAL_IncTick+0x24>)
 8002cfa:	6013      	str	r3, [r2, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	24000044 	.word	0x24000044
 8002d0c:	24000af4 	.word	0x24000af4

08002d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return uwTick;
 8002d14:	4b03      	ldr	r3, [pc, #12]	@ (8002d24 <HAL_GetTick+0x14>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	24000af4 	.word	0x24000af4

08002d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d30:	f7ff ffee 	bl	8002d10 <HAL_GetTick>
 8002d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d005      	beq.n	8002d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d42:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <HAL_Delay+0x44>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d4e:	bf00      	nop
 8002d50:	f7ff ffde 	bl	8002d10 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d8f7      	bhi.n	8002d50 <HAL_Delay+0x28>
  {
  }
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	24000044 	.word	0x24000044

08002d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d80:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <__NVIC_SetPriorityGrouping+0x40>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d98:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d9e:	4a04      	ldr	r2, [pc, #16]	@ (8002db0 <__NVIC_SetPriorityGrouping+0x40>)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	60d3      	str	r3, [r2, #12]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00
 8002db4:	05fa0000 	.word	0x05fa0000

08002db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dbc:	4b04      	ldr	r3, [pc, #16]	@ (8002dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	0a1b      	lsrs	r3, r3, #8
 8002dc2:	f003 0307 	and.w	r3, r3, #7
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	db0b      	blt.n	8002dfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	f003 021f 	and.w	r2, r3, #31
 8002dec:	4907      	ldr	r1, [pc, #28]	@ (8002e0c <__NVIC_EnableIRQ+0x38>)
 8002dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	2001      	movs	r0, #1
 8002df6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	e000e100 	.word	0xe000e100

08002e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	6039      	str	r1, [r7, #0]
 8002e1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	db0a      	blt.n	8002e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	490c      	ldr	r1, [pc, #48]	@ (8002e5c <__NVIC_SetPriority+0x4c>)
 8002e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e2e:	0112      	lsls	r2, r2, #4
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	440b      	add	r3, r1
 8002e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e38:	e00a      	b.n	8002e50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4908      	ldr	r1, [pc, #32]	@ (8002e60 <__NVIC_SetPriority+0x50>)
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	3b04      	subs	r3, #4
 8002e48:	0112      	lsls	r2, r2, #4
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	761a      	strb	r2, [r3, #24]
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000e100 	.word	0xe000e100
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b089      	sub	sp, #36	@ 0x24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f1c3 0307 	rsb	r3, r3, #7
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	bf28      	it	cs
 8002e82:	2304      	movcs	r3, #4
 8002e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	2b06      	cmp	r3, #6
 8002e8c:	d902      	bls.n	8002e94 <NVIC_EncodePriority+0x30>
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3b03      	subs	r3, #3
 8002e92:	e000      	b.n	8002e96 <NVIC_EncodePriority+0x32>
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eac:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	43d9      	mvns	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ebc:	4313      	orrs	r3, r2
         );
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3724      	adds	r7, #36	@ 0x24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002edc:	d301      	bcc.n	8002ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00f      	b.n	8002f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8002f0c <SysTick_Config+0x40>)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eea:	210f      	movs	r1, #15
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	f7ff ff8e 	bl	8002e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef4:	4b05      	ldr	r3, [pc, #20]	@ (8002f0c <SysTick_Config+0x40>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002efa:	4b04      	ldr	r3, [pc, #16]	@ (8002f0c <SysTick_Config+0x40>)
 8002efc:	2207      	movs	r2, #7
 8002efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	e000e010 	.word	0xe000e010

08002f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff ff29 	bl	8002d70 <__NVIC_SetPriorityGrouping>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b086      	sub	sp, #24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f34:	f7ff ff40 	bl	8002db8 <__NVIC_GetPriorityGrouping>
 8002f38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	6978      	ldr	r0, [r7, #20]
 8002f40:	f7ff ff90 	bl	8002e64 <NVIC_EncodePriority>
 8002f44:	4602      	mov	r2, r0
 8002f46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff5f 	bl	8002e10 <__NVIC_SetPriority>
}
 8002f52:	bf00      	nop
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff33 	bl	8002dd4 <__NVIC_EnableIRQ>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff ffa4 	bl	8002ecc <SysTick_Config>
 8002f84:	4603      	mov	r3, r0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002f94:	f3bf 8f5f 	dmb	sy
}
 8002f98:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002f9a:	4b07      	ldr	r3, [pc, #28]	@ (8002fb8 <HAL_MPU_Disable+0x28>)
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	4a06      	ldr	r2, [pc, #24]	@ (8002fb8 <HAL_MPU_Disable+0x28>)
 8002fa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002fa6:	4b05      	ldr	r3, [pc, #20]	@ (8002fbc <HAL_MPU_Disable+0x2c>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	605a      	str	r2, [r3, #4]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	e000ed00 	.word	0xe000ed00
 8002fbc:	e000ed90 	.word	0xe000ed90

08002fc0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff8 <HAL_MPU_Enable+0x38>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <HAL_MPU_Enable+0x3c>)
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	4a09      	ldr	r2, [pc, #36]	@ (8002ffc <HAL_MPU_Enable+0x3c>)
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fdc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002fde:	f3bf 8f4f 	dsb	sy
}
 8002fe2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002fe4:	f3bf 8f6f 	isb	sy
}
 8002fe8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000ed90 	.word	0xe000ed90
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	785a      	ldrb	r2, [r3, #1]
 800300c:	4b1b      	ldr	r3, [pc, #108]	@ (800307c <HAL_MPU_ConfigRegion+0x7c>)
 800300e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003010:	4b1a      	ldr	r3, [pc, #104]	@ (800307c <HAL_MPU_ConfigRegion+0x7c>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	4a19      	ldr	r2, [pc, #100]	@ (800307c <HAL_MPU_ConfigRegion+0x7c>)
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800301c:	4a17      	ldr	r2, [pc, #92]	@ (800307c <HAL_MPU_ConfigRegion+0x7c>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	7b1b      	ldrb	r3, [r3, #12]
 8003028:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	7adb      	ldrb	r3, [r3, #11]
 800302e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003030:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	7a9b      	ldrb	r3, [r3, #10]
 8003036:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003038:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7b5b      	ldrb	r3, [r3, #13]
 800303e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003040:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	7b9b      	ldrb	r3, [r3, #14]
 8003046:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003048:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7bdb      	ldrb	r3, [r3, #15]
 800304e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003050:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7a5b      	ldrb	r3, [r3, #9]
 8003056:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003058:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	7a1b      	ldrb	r3, [r3, #8]
 800305e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003060:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	7812      	ldrb	r2, [r2, #0]
 8003066:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003068:	4a04      	ldr	r2, [pc, #16]	@ (800307c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800306a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800306c:	6113      	str	r3, [r2, #16]
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	e000ed90 	.word	0xe000ed90

08003080 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003088:	f7ff fe42 	bl	8002d10 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e2dc      	b.n	8003652 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d008      	beq.n	80030b6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2280      	movs	r2, #128	@ 0x80
 80030a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e2cd      	b.n	8003652 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a76      	ldr	r2, [pc, #472]	@ (8003294 <HAL_DMA_Abort+0x214>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d04a      	beq.n	8003156 <HAL_DMA_Abort+0xd6>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a74      	ldr	r2, [pc, #464]	@ (8003298 <HAL_DMA_Abort+0x218>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d045      	beq.n	8003156 <HAL_DMA_Abort+0xd6>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a73      	ldr	r2, [pc, #460]	@ (800329c <HAL_DMA_Abort+0x21c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d040      	beq.n	8003156 <HAL_DMA_Abort+0xd6>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a71      	ldr	r2, [pc, #452]	@ (80032a0 <HAL_DMA_Abort+0x220>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d03b      	beq.n	8003156 <HAL_DMA_Abort+0xd6>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a70      	ldr	r2, [pc, #448]	@ (80032a4 <HAL_DMA_Abort+0x224>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d036      	beq.n	8003156 <HAL_DMA_Abort+0xd6>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6e      	ldr	r2, [pc, #440]	@ (80032a8 <HAL_DMA_Abort+0x228>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d031      	beq.n	8003156 <HAL_DMA_Abort+0xd6>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6d      	ldr	r2, [pc, #436]	@ (80032ac <HAL_DMA_Abort+0x22c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d02c      	beq.n	8003156 <HAL_DMA_Abort+0xd6>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6b      	ldr	r2, [pc, #428]	@ (80032b0 <HAL_DMA_Abort+0x230>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d027      	beq.n	8003156 <HAL_DMA_Abort+0xd6>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6a      	ldr	r2, [pc, #424]	@ (80032b4 <HAL_DMA_Abort+0x234>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d022      	beq.n	8003156 <HAL_DMA_Abort+0xd6>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a68      	ldr	r2, [pc, #416]	@ (80032b8 <HAL_DMA_Abort+0x238>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01d      	beq.n	8003156 <HAL_DMA_Abort+0xd6>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a67      	ldr	r2, [pc, #412]	@ (80032bc <HAL_DMA_Abort+0x23c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d018      	beq.n	8003156 <HAL_DMA_Abort+0xd6>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a65      	ldr	r2, [pc, #404]	@ (80032c0 <HAL_DMA_Abort+0x240>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <HAL_DMA_Abort+0xd6>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a64      	ldr	r2, [pc, #400]	@ (80032c4 <HAL_DMA_Abort+0x244>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00e      	beq.n	8003156 <HAL_DMA_Abort+0xd6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a62      	ldr	r2, [pc, #392]	@ (80032c8 <HAL_DMA_Abort+0x248>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d009      	beq.n	8003156 <HAL_DMA_Abort+0xd6>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a61      	ldr	r2, [pc, #388]	@ (80032cc <HAL_DMA_Abort+0x24c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d004      	beq.n	8003156 <HAL_DMA_Abort+0xd6>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a5f      	ldr	r2, [pc, #380]	@ (80032d0 <HAL_DMA_Abort+0x250>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_DMA_Abort+0xda>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <HAL_DMA_Abort+0xdc>
 800315a:	2300      	movs	r3, #0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d013      	beq.n	8003188 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 021e 	bic.w	r2, r2, #30
 800316e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800317e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e00a      	b.n	800319e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 020e 	bic.w	r2, r2, #14
 8003196:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003294 <HAL_DMA_Abort+0x214>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d072      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003298 <HAL_DMA_Abort+0x218>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d06d      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a39      	ldr	r2, [pc, #228]	@ (800329c <HAL_DMA_Abort+0x21c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d068      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a37      	ldr	r2, [pc, #220]	@ (80032a0 <HAL_DMA_Abort+0x220>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d063      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a36      	ldr	r2, [pc, #216]	@ (80032a4 <HAL_DMA_Abort+0x224>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d05e      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a34      	ldr	r2, [pc, #208]	@ (80032a8 <HAL_DMA_Abort+0x228>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d059      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a33      	ldr	r2, [pc, #204]	@ (80032ac <HAL_DMA_Abort+0x22c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d054      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a31      	ldr	r2, [pc, #196]	@ (80032b0 <HAL_DMA_Abort+0x230>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d04f      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a30      	ldr	r2, [pc, #192]	@ (80032b4 <HAL_DMA_Abort+0x234>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d04a      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a2e      	ldr	r2, [pc, #184]	@ (80032b8 <HAL_DMA_Abort+0x238>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d045      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a2d      	ldr	r2, [pc, #180]	@ (80032bc <HAL_DMA_Abort+0x23c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d040      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2b      	ldr	r2, [pc, #172]	@ (80032c0 <HAL_DMA_Abort+0x240>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d03b      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2a      	ldr	r2, [pc, #168]	@ (80032c4 <HAL_DMA_Abort+0x244>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d036      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a28      	ldr	r2, [pc, #160]	@ (80032c8 <HAL_DMA_Abort+0x248>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d031      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a27      	ldr	r2, [pc, #156]	@ (80032cc <HAL_DMA_Abort+0x24c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d02c      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a25      	ldr	r2, [pc, #148]	@ (80032d0 <HAL_DMA_Abort+0x250>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d027      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a24      	ldr	r2, [pc, #144]	@ (80032d4 <HAL_DMA_Abort+0x254>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d022      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a22      	ldr	r2, [pc, #136]	@ (80032d8 <HAL_DMA_Abort+0x258>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01d      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a21      	ldr	r2, [pc, #132]	@ (80032dc <HAL_DMA_Abort+0x25c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d018      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1f      	ldr	r2, [pc, #124]	@ (80032e0 <HAL_DMA_Abort+0x260>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1e      	ldr	r2, [pc, #120]	@ (80032e4 <HAL_DMA_Abort+0x264>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00e      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1c      	ldr	r2, [pc, #112]	@ (80032e8 <HAL_DMA_Abort+0x268>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d009      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1b      	ldr	r2, [pc, #108]	@ (80032ec <HAL_DMA_Abort+0x26c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d004      	beq.n	800328e <HAL_DMA_Abort+0x20e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a19      	ldr	r2, [pc, #100]	@ (80032f0 <HAL_DMA_Abort+0x270>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d132      	bne.n	80032f4 <HAL_DMA_Abort+0x274>
 800328e:	2301      	movs	r3, #1
 8003290:	e031      	b.n	80032f6 <HAL_DMA_Abort+0x276>
 8003292:	bf00      	nop
 8003294:	40020010 	.word	0x40020010
 8003298:	40020028 	.word	0x40020028
 800329c:	40020040 	.word	0x40020040
 80032a0:	40020058 	.word	0x40020058
 80032a4:	40020070 	.word	0x40020070
 80032a8:	40020088 	.word	0x40020088
 80032ac:	400200a0 	.word	0x400200a0
 80032b0:	400200b8 	.word	0x400200b8
 80032b4:	40020410 	.word	0x40020410
 80032b8:	40020428 	.word	0x40020428
 80032bc:	40020440 	.word	0x40020440
 80032c0:	40020458 	.word	0x40020458
 80032c4:	40020470 	.word	0x40020470
 80032c8:	40020488 	.word	0x40020488
 80032cc:	400204a0 	.word	0x400204a0
 80032d0:	400204b8 	.word	0x400204b8
 80032d4:	58025408 	.word	0x58025408
 80032d8:	5802541c 	.word	0x5802541c
 80032dc:	58025430 	.word	0x58025430
 80032e0:	58025444 	.word	0x58025444
 80032e4:	58025458 	.word	0x58025458
 80032e8:	5802546c 	.word	0x5802546c
 80032ec:	58025480 	.word	0x58025480
 80032f0:	58025494 	.word	0x58025494
 80032f4:	2300      	movs	r3, #0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003304:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003308:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6d      	ldr	r2, [pc, #436]	@ (80034c4 <HAL_DMA_Abort+0x444>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d04a      	beq.n	80033aa <HAL_DMA_Abort+0x32a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a6b      	ldr	r2, [pc, #428]	@ (80034c8 <HAL_DMA_Abort+0x448>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d045      	beq.n	80033aa <HAL_DMA_Abort+0x32a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a6a      	ldr	r2, [pc, #424]	@ (80034cc <HAL_DMA_Abort+0x44c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d040      	beq.n	80033aa <HAL_DMA_Abort+0x32a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a68      	ldr	r2, [pc, #416]	@ (80034d0 <HAL_DMA_Abort+0x450>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d03b      	beq.n	80033aa <HAL_DMA_Abort+0x32a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a67      	ldr	r2, [pc, #412]	@ (80034d4 <HAL_DMA_Abort+0x454>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d036      	beq.n	80033aa <HAL_DMA_Abort+0x32a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a65      	ldr	r2, [pc, #404]	@ (80034d8 <HAL_DMA_Abort+0x458>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d031      	beq.n	80033aa <HAL_DMA_Abort+0x32a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a64      	ldr	r2, [pc, #400]	@ (80034dc <HAL_DMA_Abort+0x45c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d02c      	beq.n	80033aa <HAL_DMA_Abort+0x32a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a62      	ldr	r2, [pc, #392]	@ (80034e0 <HAL_DMA_Abort+0x460>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d027      	beq.n	80033aa <HAL_DMA_Abort+0x32a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a61      	ldr	r2, [pc, #388]	@ (80034e4 <HAL_DMA_Abort+0x464>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d022      	beq.n	80033aa <HAL_DMA_Abort+0x32a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a5f      	ldr	r2, [pc, #380]	@ (80034e8 <HAL_DMA_Abort+0x468>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01d      	beq.n	80033aa <HAL_DMA_Abort+0x32a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a5e      	ldr	r2, [pc, #376]	@ (80034ec <HAL_DMA_Abort+0x46c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d018      	beq.n	80033aa <HAL_DMA_Abort+0x32a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a5c      	ldr	r2, [pc, #368]	@ (80034f0 <HAL_DMA_Abort+0x470>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d013      	beq.n	80033aa <HAL_DMA_Abort+0x32a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a5b      	ldr	r2, [pc, #364]	@ (80034f4 <HAL_DMA_Abort+0x474>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00e      	beq.n	80033aa <HAL_DMA_Abort+0x32a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a59      	ldr	r2, [pc, #356]	@ (80034f8 <HAL_DMA_Abort+0x478>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d009      	beq.n	80033aa <HAL_DMA_Abort+0x32a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a58      	ldr	r2, [pc, #352]	@ (80034fc <HAL_DMA_Abort+0x47c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d004      	beq.n	80033aa <HAL_DMA_Abort+0x32a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a56      	ldr	r2, [pc, #344]	@ (8003500 <HAL_DMA_Abort+0x480>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d108      	bne.n	80033bc <HAL_DMA_Abort+0x33c>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0201 	bic.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	e007      	b.n	80033cc <HAL_DMA_Abort+0x34c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033cc:	e013      	b.n	80033f6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033ce:	f7ff fc9f 	bl	8002d10 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b05      	cmp	r3, #5
 80033da:	d90c      	bls.n	80033f6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2203      	movs	r2, #3
 80033e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e12d      	b.n	8003652 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e5      	bne.n	80033ce <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a2f      	ldr	r2, [pc, #188]	@ (80034c4 <HAL_DMA_Abort+0x444>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d04a      	beq.n	80034a2 <HAL_DMA_Abort+0x422>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a2d      	ldr	r2, [pc, #180]	@ (80034c8 <HAL_DMA_Abort+0x448>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d045      	beq.n	80034a2 <HAL_DMA_Abort+0x422>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2c      	ldr	r2, [pc, #176]	@ (80034cc <HAL_DMA_Abort+0x44c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d040      	beq.n	80034a2 <HAL_DMA_Abort+0x422>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a2a      	ldr	r2, [pc, #168]	@ (80034d0 <HAL_DMA_Abort+0x450>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d03b      	beq.n	80034a2 <HAL_DMA_Abort+0x422>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a29      	ldr	r2, [pc, #164]	@ (80034d4 <HAL_DMA_Abort+0x454>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d036      	beq.n	80034a2 <HAL_DMA_Abort+0x422>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a27      	ldr	r2, [pc, #156]	@ (80034d8 <HAL_DMA_Abort+0x458>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d031      	beq.n	80034a2 <HAL_DMA_Abort+0x422>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a26      	ldr	r2, [pc, #152]	@ (80034dc <HAL_DMA_Abort+0x45c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d02c      	beq.n	80034a2 <HAL_DMA_Abort+0x422>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a24      	ldr	r2, [pc, #144]	@ (80034e0 <HAL_DMA_Abort+0x460>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d027      	beq.n	80034a2 <HAL_DMA_Abort+0x422>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a23      	ldr	r2, [pc, #140]	@ (80034e4 <HAL_DMA_Abort+0x464>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d022      	beq.n	80034a2 <HAL_DMA_Abort+0x422>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a21      	ldr	r2, [pc, #132]	@ (80034e8 <HAL_DMA_Abort+0x468>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01d      	beq.n	80034a2 <HAL_DMA_Abort+0x422>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a20      	ldr	r2, [pc, #128]	@ (80034ec <HAL_DMA_Abort+0x46c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d018      	beq.n	80034a2 <HAL_DMA_Abort+0x422>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1e      	ldr	r2, [pc, #120]	@ (80034f0 <HAL_DMA_Abort+0x470>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d013      	beq.n	80034a2 <HAL_DMA_Abort+0x422>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1d      	ldr	r2, [pc, #116]	@ (80034f4 <HAL_DMA_Abort+0x474>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00e      	beq.n	80034a2 <HAL_DMA_Abort+0x422>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1b      	ldr	r2, [pc, #108]	@ (80034f8 <HAL_DMA_Abort+0x478>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d009      	beq.n	80034a2 <HAL_DMA_Abort+0x422>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1a      	ldr	r2, [pc, #104]	@ (80034fc <HAL_DMA_Abort+0x47c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d004      	beq.n	80034a2 <HAL_DMA_Abort+0x422>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a18      	ldr	r2, [pc, #96]	@ (8003500 <HAL_DMA_Abort+0x480>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <HAL_DMA_Abort+0x426>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <HAL_DMA_Abort+0x428>
 80034a6:	2300      	movs	r3, #0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d02b      	beq.n	8003504 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b6:	f003 031f 	and.w	r3, r3, #31
 80034ba:	223f      	movs	r2, #63	@ 0x3f
 80034bc:	409a      	lsls	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	e02a      	b.n	800351a <HAL_DMA_Abort+0x49a>
 80034c4:	40020010 	.word	0x40020010
 80034c8:	40020028 	.word	0x40020028
 80034cc:	40020040 	.word	0x40020040
 80034d0:	40020058 	.word	0x40020058
 80034d4:	40020070 	.word	0x40020070
 80034d8:	40020088 	.word	0x40020088
 80034dc:	400200a0 	.word	0x400200a0
 80034e0:	400200b8 	.word	0x400200b8
 80034e4:	40020410 	.word	0x40020410
 80034e8:	40020428 	.word	0x40020428
 80034ec:	40020440 	.word	0x40020440
 80034f0:	40020458 	.word	0x40020458
 80034f4:	40020470 	.word	0x40020470
 80034f8:	40020488 	.word	0x40020488
 80034fc:	400204a0 	.word	0x400204a0
 8003500:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003508:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	2201      	movs	r2, #1
 8003514:	409a      	lsls	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a4f      	ldr	r2, [pc, #316]	@ (800365c <HAL_DMA_Abort+0x5dc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d072      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a4d      	ldr	r2, [pc, #308]	@ (8003660 <HAL_DMA_Abort+0x5e0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d06d      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a4c      	ldr	r2, [pc, #304]	@ (8003664 <HAL_DMA_Abort+0x5e4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d068      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a4a      	ldr	r2, [pc, #296]	@ (8003668 <HAL_DMA_Abort+0x5e8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d063      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a49      	ldr	r2, [pc, #292]	@ (800366c <HAL_DMA_Abort+0x5ec>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d05e      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a47      	ldr	r2, [pc, #284]	@ (8003670 <HAL_DMA_Abort+0x5f0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d059      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a46      	ldr	r2, [pc, #280]	@ (8003674 <HAL_DMA_Abort+0x5f4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d054      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a44      	ldr	r2, [pc, #272]	@ (8003678 <HAL_DMA_Abort+0x5f8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d04f      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a43      	ldr	r2, [pc, #268]	@ (800367c <HAL_DMA_Abort+0x5fc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d04a      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a41      	ldr	r2, [pc, #260]	@ (8003680 <HAL_DMA_Abort+0x600>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d045      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a40      	ldr	r2, [pc, #256]	@ (8003684 <HAL_DMA_Abort+0x604>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d040      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a3e      	ldr	r2, [pc, #248]	@ (8003688 <HAL_DMA_Abort+0x608>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d03b      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a3d      	ldr	r2, [pc, #244]	@ (800368c <HAL_DMA_Abort+0x60c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d036      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003690 <HAL_DMA_Abort+0x610>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d031      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a3a      	ldr	r2, [pc, #232]	@ (8003694 <HAL_DMA_Abort+0x614>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d02c      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a38      	ldr	r2, [pc, #224]	@ (8003698 <HAL_DMA_Abort+0x618>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d027      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a37      	ldr	r2, [pc, #220]	@ (800369c <HAL_DMA_Abort+0x61c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d022      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a35      	ldr	r2, [pc, #212]	@ (80036a0 <HAL_DMA_Abort+0x620>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01d      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a34      	ldr	r2, [pc, #208]	@ (80036a4 <HAL_DMA_Abort+0x624>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d018      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a32      	ldr	r2, [pc, #200]	@ (80036a8 <HAL_DMA_Abort+0x628>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a31      	ldr	r2, [pc, #196]	@ (80036ac <HAL_DMA_Abort+0x62c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00e      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a2f      	ldr	r2, [pc, #188]	@ (80036b0 <HAL_DMA_Abort+0x630>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a2e      	ldr	r2, [pc, #184]	@ (80036b4 <HAL_DMA_Abort+0x634>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_DMA_Abort+0x58a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a2c      	ldr	r2, [pc, #176]	@ (80036b8 <HAL_DMA_Abort+0x638>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_DMA_Abort+0x58e>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <HAL_DMA_Abort+0x590>
 800360e:	2300      	movs	r3, #0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d015      	beq.n	8003640 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800361c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00c      	beq.n	8003640 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003630:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003634:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800363e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40020010 	.word	0x40020010
 8003660:	40020028 	.word	0x40020028
 8003664:	40020040 	.word	0x40020040
 8003668:	40020058 	.word	0x40020058
 800366c:	40020070 	.word	0x40020070
 8003670:	40020088 	.word	0x40020088
 8003674:	400200a0 	.word	0x400200a0
 8003678:	400200b8 	.word	0x400200b8
 800367c:	40020410 	.word	0x40020410
 8003680:	40020428 	.word	0x40020428
 8003684:	40020440 	.word	0x40020440
 8003688:	40020458 	.word	0x40020458
 800368c:	40020470 	.word	0x40020470
 8003690:	40020488 	.word	0x40020488
 8003694:	400204a0 	.word	0x400204a0
 8003698:	400204b8 	.word	0x400204b8
 800369c:	58025408 	.word	0x58025408
 80036a0:	5802541c 	.word	0x5802541c
 80036a4:	58025430 	.word	0x58025430
 80036a8:	58025444 	.word	0x58025444
 80036ac:	58025458 	.word	0x58025458
 80036b0:	5802546c 	.word	0x5802546c
 80036b4:	58025480 	.word	0x58025480
 80036b8:	58025494 	.word	0x58025494

080036bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e237      	b.n	8003b3e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d004      	beq.n	80036e4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2280      	movs	r2, #128	@ 0x80
 80036de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e22c      	b.n	8003b3e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a5c      	ldr	r2, [pc, #368]	@ (800385c <HAL_DMA_Abort_IT+0x1a0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d04a      	beq.n	8003784 <HAL_DMA_Abort_IT+0xc8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003860 <HAL_DMA_Abort_IT+0x1a4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d045      	beq.n	8003784 <HAL_DMA_Abort_IT+0xc8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a59      	ldr	r2, [pc, #356]	@ (8003864 <HAL_DMA_Abort_IT+0x1a8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d040      	beq.n	8003784 <HAL_DMA_Abort_IT+0xc8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a58      	ldr	r2, [pc, #352]	@ (8003868 <HAL_DMA_Abort_IT+0x1ac>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d03b      	beq.n	8003784 <HAL_DMA_Abort_IT+0xc8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a56      	ldr	r2, [pc, #344]	@ (800386c <HAL_DMA_Abort_IT+0x1b0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d036      	beq.n	8003784 <HAL_DMA_Abort_IT+0xc8>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a55      	ldr	r2, [pc, #340]	@ (8003870 <HAL_DMA_Abort_IT+0x1b4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d031      	beq.n	8003784 <HAL_DMA_Abort_IT+0xc8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a53      	ldr	r2, [pc, #332]	@ (8003874 <HAL_DMA_Abort_IT+0x1b8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d02c      	beq.n	8003784 <HAL_DMA_Abort_IT+0xc8>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a52      	ldr	r2, [pc, #328]	@ (8003878 <HAL_DMA_Abort_IT+0x1bc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d027      	beq.n	8003784 <HAL_DMA_Abort_IT+0xc8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a50      	ldr	r2, [pc, #320]	@ (800387c <HAL_DMA_Abort_IT+0x1c0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d022      	beq.n	8003784 <HAL_DMA_Abort_IT+0xc8>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a4f      	ldr	r2, [pc, #316]	@ (8003880 <HAL_DMA_Abort_IT+0x1c4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d01d      	beq.n	8003784 <HAL_DMA_Abort_IT+0xc8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a4d      	ldr	r2, [pc, #308]	@ (8003884 <HAL_DMA_Abort_IT+0x1c8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d018      	beq.n	8003784 <HAL_DMA_Abort_IT+0xc8>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a4c      	ldr	r2, [pc, #304]	@ (8003888 <HAL_DMA_Abort_IT+0x1cc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d013      	beq.n	8003784 <HAL_DMA_Abort_IT+0xc8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a4a      	ldr	r2, [pc, #296]	@ (800388c <HAL_DMA_Abort_IT+0x1d0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00e      	beq.n	8003784 <HAL_DMA_Abort_IT+0xc8>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a49      	ldr	r2, [pc, #292]	@ (8003890 <HAL_DMA_Abort_IT+0x1d4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d009      	beq.n	8003784 <HAL_DMA_Abort_IT+0xc8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a47      	ldr	r2, [pc, #284]	@ (8003894 <HAL_DMA_Abort_IT+0x1d8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <HAL_DMA_Abort_IT+0xc8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a46      	ldr	r2, [pc, #280]	@ (8003898 <HAL_DMA_Abort_IT+0x1dc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d101      	bne.n	8003788 <HAL_DMA_Abort_IT+0xcc>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_DMA_Abort_IT+0xce>
 8003788:	2300      	movs	r3, #0
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8086 	beq.w	800389c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2204      	movs	r2, #4
 8003794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a2f      	ldr	r2, [pc, #188]	@ (800385c <HAL_DMA_Abort_IT+0x1a0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d04a      	beq.n	8003838 <HAL_DMA_Abort_IT+0x17c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003860 <HAL_DMA_Abort_IT+0x1a4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d045      	beq.n	8003838 <HAL_DMA_Abort_IT+0x17c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003864 <HAL_DMA_Abort_IT+0x1a8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d040      	beq.n	8003838 <HAL_DMA_Abort_IT+0x17c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003868 <HAL_DMA_Abort_IT+0x1ac>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d03b      	beq.n	8003838 <HAL_DMA_Abort_IT+0x17c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a29      	ldr	r2, [pc, #164]	@ (800386c <HAL_DMA_Abort_IT+0x1b0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d036      	beq.n	8003838 <HAL_DMA_Abort_IT+0x17c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a28      	ldr	r2, [pc, #160]	@ (8003870 <HAL_DMA_Abort_IT+0x1b4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d031      	beq.n	8003838 <HAL_DMA_Abort_IT+0x17c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a26      	ldr	r2, [pc, #152]	@ (8003874 <HAL_DMA_Abort_IT+0x1b8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d02c      	beq.n	8003838 <HAL_DMA_Abort_IT+0x17c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a25      	ldr	r2, [pc, #148]	@ (8003878 <HAL_DMA_Abort_IT+0x1bc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d027      	beq.n	8003838 <HAL_DMA_Abort_IT+0x17c>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a23      	ldr	r2, [pc, #140]	@ (800387c <HAL_DMA_Abort_IT+0x1c0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d022      	beq.n	8003838 <HAL_DMA_Abort_IT+0x17c>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a22      	ldr	r2, [pc, #136]	@ (8003880 <HAL_DMA_Abort_IT+0x1c4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d01d      	beq.n	8003838 <HAL_DMA_Abort_IT+0x17c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a20      	ldr	r2, [pc, #128]	@ (8003884 <HAL_DMA_Abort_IT+0x1c8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d018      	beq.n	8003838 <HAL_DMA_Abort_IT+0x17c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1f      	ldr	r2, [pc, #124]	@ (8003888 <HAL_DMA_Abort_IT+0x1cc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d013      	beq.n	8003838 <HAL_DMA_Abort_IT+0x17c>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1d      	ldr	r2, [pc, #116]	@ (800388c <HAL_DMA_Abort_IT+0x1d0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00e      	beq.n	8003838 <HAL_DMA_Abort_IT+0x17c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1c      	ldr	r2, [pc, #112]	@ (8003890 <HAL_DMA_Abort_IT+0x1d4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d009      	beq.n	8003838 <HAL_DMA_Abort_IT+0x17c>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1a      	ldr	r2, [pc, #104]	@ (8003894 <HAL_DMA_Abort_IT+0x1d8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_DMA_Abort_IT+0x17c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a19      	ldr	r2, [pc, #100]	@ (8003898 <HAL_DMA_Abort_IT+0x1dc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d108      	bne.n	800384a <HAL_DMA_Abort_IT+0x18e>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e178      	b.n	8003b3c <HAL_DMA_Abort_IT+0x480>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0201 	bic.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	e16f      	b.n	8003b3c <HAL_DMA_Abort_IT+0x480>
 800385c:	40020010 	.word	0x40020010
 8003860:	40020028 	.word	0x40020028
 8003864:	40020040 	.word	0x40020040
 8003868:	40020058 	.word	0x40020058
 800386c:	40020070 	.word	0x40020070
 8003870:	40020088 	.word	0x40020088
 8003874:	400200a0 	.word	0x400200a0
 8003878:	400200b8 	.word	0x400200b8
 800387c:	40020410 	.word	0x40020410
 8003880:	40020428 	.word	0x40020428
 8003884:	40020440 	.word	0x40020440
 8003888:	40020458 	.word	0x40020458
 800388c:	40020470 	.word	0x40020470
 8003890:	40020488 	.word	0x40020488
 8003894:	400204a0 	.word	0x400204a0
 8003898:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 020e 	bic.w	r2, r2, #14
 80038aa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a6c      	ldr	r2, [pc, #432]	@ (8003a64 <HAL_DMA_Abort_IT+0x3a8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d04a      	beq.n	800394c <HAL_DMA_Abort_IT+0x290>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a6b      	ldr	r2, [pc, #428]	@ (8003a68 <HAL_DMA_Abort_IT+0x3ac>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d045      	beq.n	800394c <HAL_DMA_Abort_IT+0x290>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a69      	ldr	r2, [pc, #420]	@ (8003a6c <HAL_DMA_Abort_IT+0x3b0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d040      	beq.n	800394c <HAL_DMA_Abort_IT+0x290>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a68      	ldr	r2, [pc, #416]	@ (8003a70 <HAL_DMA_Abort_IT+0x3b4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d03b      	beq.n	800394c <HAL_DMA_Abort_IT+0x290>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a66      	ldr	r2, [pc, #408]	@ (8003a74 <HAL_DMA_Abort_IT+0x3b8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d036      	beq.n	800394c <HAL_DMA_Abort_IT+0x290>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a65      	ldr	r2, [pc, #404]	@ (8003a78 <HAL_DMA_Abort_IT+0x3bc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d031      	beq.n	800394c <HAL_DMA_Abort_IT+0x290>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a63      	ldr	r2, [pc, #396]	@ (8003a7c <HAL_DMA_Abort_IT+0x3c0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d02c      	beq.n	800394c <HAL_DMA_Abort_IT+0x290>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a62      	ldr	r2, [pc, #392]	@ (8003a80 <HAL_DMA_Abort_IT+0x3c4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d027      	beq.n	800394c <HAL_DMA_Abort_IT+0x290>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a60      	ldr	r2, [pc, #384]	@ (8003a84 <HAL_DMA_Abort_IT+0x3c8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d022      	beq.n	800394c <HAL_DMA_Abort_IT+0x290>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a5f      	ldr	r2, [pc, #380]	@ (8003a88 <HAL_DMA_Abort_IT+0x3cc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d01d      	beq.n	800394c <HAL_DMA_Abort_IT+0x290>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a5d      	ldr	r2, [pc, #372]	@ (8003a8c <HAL_DMA_Abort_IT+0x3d0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d018      	beq.n	800394c <HAL_DMA_Abort_IT+0x290>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a5c      	ldr	r2, [pc, #368]	@ (8003a90 <HAL_DMA_Abort_IT+0x3d4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d013      	beq.n	800394c <HAL_DMA_Abort_IT+0x290>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a5a      	ldr	r2, [pc, #360]	@ (8003a94 <HAL_DMA_Abort_IT+0x3d8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00e      	beq.n	800394c <HAL_DMA_Abort_IT+0x290>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a59      	ldr	r2, [pc, #356]	@ (8003a98 <HAL_DMA_Abort_IT+0x3dc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d009      	beq.n	800394c <HAL_DMA_Abort_IT+0x290>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a57      	ldr	r2, [pc, #348]	@ (8003a9c <HAL_DMA_Abort_IT+0x3e0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d004      	beq.n	800394c <HAL_DMA_Abort_IT+0x290>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a56      	ldr	r2, [pc, #344]	@ (8003aa0 <HAL_DMA_Abort_IT+0x3e4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d108      	bne.n	800395e <HAL_DMA_Abort_IT+0x2a2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	e007      	b.n	800396e <HAL_DMA_Abort_IT+0x2b2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0201 	bic.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a3c      	ldr	r2, [pc, #240]	@ (8003a64 <HAL_DMA_Abort_IT+0x3a8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d072      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a68 <HAL_DMA_Abort_IT+0x3ac>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d06d      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a39      	ldr	r2, [pc, #228]	@ (8003a6c <HAL_DMA_Abort_IT+0x3b0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d068      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a37      	ldr	r2, [pc, #220]	@ (8003a70 <HAL_DMA_Abort_IT+0x3b4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d063      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a36      	ldr	r2, [pc, #216]	@ (8003a74 <HAL_DMA_Abort_IT+0x3b8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d05e      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a34      	ldr	r2, [pc, #208]	@ (8003a78 <HAL_DMA_Abort_IT+0x3bc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d059      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a33      	ldr	r2, [pc, #204]	@ (8003a7c <HAL_DMA_Abort_IT+0x3c0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d054      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a31      	ldr	r2, [pc, #196]	@ (8003a80 <HAL_DMA_Abort_IT+0x3c4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d04f      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a30      	ldr	r2, [pc, #192]	@ (8003a84 <HAL_DMA_Abort_IT+0x3c8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d04a      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003a88 <HAL_DMA_Abort_IT+0x3cc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d045      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a2d      	ldr	r2, [pc, #180]	@ (8003a8c <HAL_DMA_Abort_IT+0x3d0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d040      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003a90 <HAL_DMA_Abort_IT+0x3d4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d03b      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003a94 <HAL_DMA_Abort_IT+0x3d8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d036      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a28      	ldr	r2, [pc, #160]	@ (8003a98 <HAL_DMA_Abort_IT+0x3dc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d031      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a27      	ldr	r2, [pc, #156]	@ (8003a9c <HAL_DMA_Abort_IT+0x3e0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d02c      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a25      	ldr	r2, [pc, #148]	@ (8003aa0 <HAL_DMA_Abort_IT+0x3e4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d027      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a24      	ldr	r2, [pc, #144]	@ (8003aa4 <HAL_DMA_Abort_IT+0x3e8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d022      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a22      	ldr	r2, [pc, #136]	@ (8003aa8 <HAL_DMA_Abort_IT+0x3ec>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01d      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a21      	ldr	r2, [pc, #132]	@ (8003aac <HAL_DMA_Abort_IT+0x3f0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d018      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a1f      	ldr	r2, [pc, #124]	@ (8003ab0 <HAL_DMA_Abort_IT+0x3f4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ab4 <HAL_DMA_Abort_IT+0x3f8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00e      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab8 <HAL_DMA_Abort_IT+0x3fc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d009      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003abc <HAL_DMA_Abort_IT+0x400>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d004      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x3a2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a19      	ldr	r2, [pc, #100]	@ (8003ac0 <HAL_DMA_Abort_IT+0x404>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d132      	bne.n	8003ac4 <HAL_DMA_Abort_IT+0x408>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e031      	b.n	8003ac6 <HAL_DMA_Abort_IT+0x40a>
 8003a62:	bf00      	nop
 8003a64:	40020010 	.word	0x40020010
 8003a68:	40020028 	.word	0x40020028
 8003a6c:	40020040 	.word	0x40020040
 8003a70:	40020058 	.word	0x40020058
 8003a74:	40020070 	.word	0x40020070
 8003a78:	40020088 	.word	0x40020088
 8003a7c:	400200a0 	.word	0x400200a0
 8003a80:	400200b8 	.word	0x400200b8
 8003a84:	40020410 	.word	0x40020410
 8003a88:	40020428 	.word	0x40020428
 8003a8c:	40020440 	.word	0x40020440
 8003a90:	40020458 	.word	0x40020458
 8003a94:	40020470 	.word	0x40020470
 8003a98:	40020488 	.word	0x40020488
 8003a9c:	400204a0 	.word	0x400204a0
 8003aa0:	400204b8 	.word	0x400204b8
 8003aa4:	58025408 	.word	0x58025408
 8003aa8:	5802541c 	.word	0x5802541c
 8003aac:	58025430 	.word	0x58025430
 8003ab0:	58025444 	.word	0x58025444
 8003ab4:	58025458 	.word	0x58025458
 8003ab8:	5802546c 	.word	0x5802546c
 8003abc:	58025480 	.word	0x58025480
 8003ac0:	58025494 	.word	0x58025494
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d028      	beq.n	8003b1c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ade:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	2201      	movs	r2, #1
 8003aea:	409a      	lsls	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003af8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00c      	beq.n	8003b1c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b10:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b1a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop

08003b48 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b098      	sub	sp, #96	@ 0x60
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003b50:	4a84      	ldr	r2, [pc, #528]	@ (8003d64 <HAL_FDCAN_Init+0x21c>)
 8003b52:	f107 030c 	add.w	r3, r7, #12
 8003b56:	4611      	mov	r1, r2
 8003b58:	224c      	movs	r2, #76	@ 0x4c
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f00c fb0b 	bl	8010176 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e1c6      	b.n	8003ef8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d68 <HAL_FDCAN_Init+0x220>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d106      	bne.n	8003b82 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fd f80e 	bl	8000bb8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0210 	bic.w	r2, r2, #16
 8003baa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bac:	f7ff f8b0 	bl	8002d10 <HAL_GetTick>
 8003bb0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003bb2:	e014      	b.n	8003bde <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003bb4:	f7ff f8ac 	bl	8002d10 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b0a      	cmp	r3, #10
 8003bc0:	d90d      	bls.n	8003bde <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bc8:	f043 0201 	orr.w	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e18c      	b.n	8003ef8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d0e3      	beq.n	8003bb4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bfc:	f7ff f888 	bl	8002d10 <HAL_GetTick>
 8003c00:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c02:	e014      	b.n	8003c2e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c04:	f7ff f884 	bl	8002d10 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b0a      	cmp	r3, #10
 8003c10:	d90d      	bls.n	8003c2e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c18:	f043 0201 	orr.w	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2203      	movs	r2, #3
 8003c26:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e164      	b.n	8003ef8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0e3      	beq.n	8003c04 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0202 	orr.w	r2, r2, #2
 8003c4a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	7c1b      	ldrb	r3, [r3, #16]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d108      	bne.n	8003c66 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c62:	619a      	str	r2, [r3, #24]
 8003c64:	e007      	b.n	8003c76 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699a      	ldr	r2, [r3, #24]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c74:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	7c5b      	ldrb	r3, [r3, #17]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d108      	bne.n	8003c90 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699a      	ldr	r2, [r3, #24]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c8c:	619a      	str	r2, [r3, #24]
 8003c8e:	e007      	b.n	8003ca0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c9e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	7c9b      	ldrb	r3, [r3, #18]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d108      	bne.n	8003cba <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003cb6:	619a      	str	r2, [r3, #24]
 8003cb8:	e007      	b.n	8003cca <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699a      	ldr	r2, [r3, #24]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003cc8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003cee:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0210 	bic.w	r2, r2, #16
 8003cfe:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d108      	bne.n	8003d1a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0204 	orr.w	r2, r2, #4
 8003d16:	619a      	str	r2, [r3, #24]
 8003d18:	e030      	b.n	8003d7c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d02c      	beq.n	8003d7c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d020      	beq.n	8003d6c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699a      	ldr	r2, [r3, #24]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d38:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0210 	orr.w	r2, r2, #16
 8003d48:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d114      	bne.n	8003d7c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699a      	ldr	r2, [r3, #24]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0220 	orr.w	r2, r2, #32
 8003d60:	619a      	str	r2, [r3, #24]
 8003d62:	e00b      	b.n	8003d7c <HAL_FDCAN_Init+0x234>
 8003d64:	080131c4 	.word	0x080131c4
 8003d68:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0220 	orr.w	r2, r2, #32
 8003d7a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d8c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003d94:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003da4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003da6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003db0:	d115      	bne.n	8003dde <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003dc0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003dca:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003dda:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ddc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e04:	4413      	add	r3, r2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d011      	beq.n	8003e2e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003e12:	f023 0107 	bic.w	r1, r3, #7
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	3360      	adds	r3, #96	@ 0x60
 8003e1e:	443b      	add	r3, r7
 8003e20:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d011      	beq.n	8003e5a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e3e:	f023 0107 	bic.w	r1, r3, #7
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	3360      	adds	r3, #96	@ 0x60
 8003e4a:	443b      	add	r3, r7
 8003e4c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d012      	beq.n	8003e88 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e6a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	3360      	adds	r3, #96	@ 0x60
 8003e76:	443b      	add	r3, r7
 8003e78:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003e7c:	011a      	lsls	r2, r3, #4
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d012      	beq.n	8003eb6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e98:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	3360      	adds	r3, #96	@ 0x60
 8003ea4:	443b      	add	r3, r7
 8003ea6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003eaa:	021a      	lsls	r2, r3, #8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a11      	ldr	r2, [pc, #68]	@ (8003f00 <HAL_FDCAN_Init+0x3b8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d107      	bne.n	8003ed0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f022 0203 	bic.w	r2, r2, #3
 8003ece:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fe13 	bl	8004b14 <FDCAN_CalcultateRamBlockAddresses>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003ef4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3760      	adds	r7, #96	@ 0x60
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	4000a000 	.word	0x4000a000

08003f04 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003f14:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d002      	beq.n	8003f22 <HAL_FDCAN_ConfigFilter+0x1e>
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d157      	bne.n	8003fd2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d12b      	bne.n	8003f82 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2b07      	cmp	r3, #7
 8003f30:	d10d      	bne.n	8003f4e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003f3e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003f44:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003f46:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	e00e      	b.n	8003f6c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f5a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003f62:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	e025      	b.n	8003fce <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	075a      	lsls	r2, r3, #29
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	2b07      	cmp	r3, #7
 8003f96:	d103      	bne.n	8003fa0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	e006      	b.n	8003fae <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	079a      	lsls	r2, r3, #30
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e008      	b.n	8003fe4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fd8:	f043 0202 	orr.w	r2, r3, #2
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
  }
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	371c      	adds	r7, #28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d110      	bne.n	800402c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004012:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004018:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004024:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	e008      	b.n	800403e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004032:	f043 0204 	orr.w	r2, r3, #4
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
  }
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b01      	cmp	r3, #1
 800405c:	d111      	bne.n	8004082 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2202      	movs	r2, #2
 8004062:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	e008      	b.n	8004094 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004088:	f043 0204 	orr.w	r2, r3, #4
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
  }
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d141      	bne.n	800413c <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80040c0:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040ce:	f043 0220 	orr.w	r2, r3, #32
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e038      	b.n	800414e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80040e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d009      	beq.n	8004100 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e026      	b.n	800414e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fe82 	bl	8004e20 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2101      	movs	r1, #1
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	fa01 f202 	lsl.w	r2, r1, r2
 8004128:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800412c:	2201      	movs	r2, #1
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	409a      	lsls	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	e008      	b.n	800414e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004142:	f043 0208 	orr.w	r2, r3, #8
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
  }
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004158:	b480      	push	{r7}
 800415a:	b08b      	sub	sp, #44	@ 0x2c
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004170:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004172:	7efb      	ldrb	r3, [r7, #27]
 8004174:	2b02      	cmp	r3, #2
 8004176:	f040 8149 	bne.w	800440c <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b40      	cmp	r3, #64	@ 0x40
 800417e:	d14c      	bne.n	800421a <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004188:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d109      	bne.n	80041a4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004196:	f043 0220 	orr.w	r2, r3, #32
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e13c      	b.n	800441e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d109      	bne.n	80041c8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e12a      	b.n	800441e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041d0:	0e1b      	lsrs	r3, r3, #24
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d10a      	bne.n	80041f0 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041e2:	0fdb      	lsrs	r3, r3, #31
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80041ec:	2301      	movs	r3, #1
 80041ee:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041f8:	0a1b      	lsrs	r3, r3, #8
 80041fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	4413      	add	r3, r2
 8004202:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420c:	69f9      	ldr	r1, [r7, #28]
 800420e:	fb01 f303 	mul.w	r3, r1, r3
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	627b      	str	r3, [r7, #36]	@ 0x24
 8004218:	e068      	b.n	80042ec <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b41      	cmp	r3, #65	@ 0x41
 800421e:	d14c      	bne.n	80042ba <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004228:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d109      	bne.n	8004244 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004236:	f043 0220 	orr.w	r2, r3, #32
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0ec      	b.n	800441e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800424c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004250:	2b00      	cmp	r3, #0
 8004252:	d109      	bne.n	8004268 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800425a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0da      	b.n	800441e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004270:	0e1b      	lsrs	r3, r3, #24
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b01      	cmp	r3, #1
 8004278:	d10a      	bne.n	8004290 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004282:	0fdb      	lsrs	r3, r3, #31
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800428c:	2301      	movs	r3, #1
 800428e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004298:	0a1b      	lsrs	r3, r3, #8
 800429a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	4413      	add	r3, r2
 80042a2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ac:	69f9      	ldr	r1, [r7, #28]
 80042ae:	fb01 f303 	mul.w	r3, r1, r3
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b8:	e018      	b.n	80042ec <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d309      	bcc.n	80042d8 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042ca:	f043 0220 	orr.w	r2, r3, #32
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0a2      	b.n	800441e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80042ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d107      	bne.n	8004310 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	0c9b      	lsrs	r3, r3, #18
 8004306:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	e005      	b.n	800431c <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800431c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	3304      	adds	r3, #4
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	b29a      	uxth	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	0c1b      	lsrs	r3, r3, #16
 800434a:	f003 020f 	and.w	r2, r3, #15
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	0e1b      	lsrs	r3, r3, #24
 8004370:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	0fda      	lsrs	r2, r3, #31
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	3304      	adds	r3, #4
 8004386:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800438c:	2300      	movs	r3, #0
 800438e:	623b      	str	r3, [r7, #32]
 8004390:	e00a      	b.n	80043a8 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	441a      	add	r2, r3
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	440b      	add	r3, r1
 800439e:	7812      	ldrb	r2, [r2, #0]
 80043a0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	3301      	adds	r3, #1
 80043a6:	623b      	str	r3, [r7, #32]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4a1f      	ldr	r2, [pc, #124]	@ (800442c <HAL_FDCAN_GetRxMessage+0x2d4>)
 80043ae:	5cd3      	ldrb	r3, [r2, r3]
 80043b0:	461a      	mov	r2, r3
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d3ec      	bcc.n	8004392 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b40      	cmp	r3, #64	@ 0x40
 80043bc:	d105      	bne.n	80043ca <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80043c8:	e01e      	b.n	8004408 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b41      	cmp	r3, #65	@ 0x41
 80043ce:	d105      	bne.n	80043dc <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80043da:	e015      	b.n	8004408 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b1f      	cmp	r3, #31
 80043e0:	d808      	bhi.n	80043f4 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2101      	movs	r1, #1
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	fa01 f202 	lsl.w	r2, r1, r2
 80043ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80043f2:	e009      	b.n	8004408 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 021f 	and.w	r2, r3, #31
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2101      	movs	r1, #1
 8004400:	fa01 f202 	lsl.w	r2, r1, r2
 8004404:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	e008      	b.n	800441e <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004412:	f043 0208 	orr.w	r2, r3, #8
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
  }
}
 800441e:	4618      	mov	r0, r3
 8004420:	372c      	adds	r7, #44	@ 0x2c
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	08013298 	.word	0x08013298

08004430 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004442:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004444:	7dfb      	ldrb	r3, [r7, #23]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d002      	beq.n	8004450 <HAL_FDCAN_ActivateNotification+0x20>
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d155      	bne.n	80044fc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4013      	ands	r3, r2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d108      	bne.n	8004470 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0201 	orr.w	r2, r2, #1
 800446c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800446e:	e014      	b.n	800449a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	4013      	ands	r3, r2
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	429a      	cmp	r2, r3
 800447e:	d108      	bne.n	8004492 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0202 	orr.w	r2, r2, #2
 800448e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004490:	e003      	b.n	800449a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2203      	movs	r2, #3
 8004498:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d009      	beq.n	80044b8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d009      	beq.n	80044d6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	4b0f      	ldr	r3, [pc, #60]	@ (800451c <HAL_FDCAN_ActivateNotification+0xec>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	430b      	orrs	r3, r1
 80044e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80044ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <HAL_FDCAN_ActivateNotification+0xf0>)
 80044ec:	695a      	ldr	r2, [r3, #20]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	0f9b      	lsrs	r3, r3, #30
 80044f2:	490b      	ldr	r1, [pc, #44]	@ (8004520 <HAL_FDCAN_ActivateNotification+0xf0>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	e008      	b.n	800450e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004502:	f043 0202 	orr.w	r2, r3, #2
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	3fcfffff 	.word	0x3fcfffff
 8004520:	4000a800 	.word	0x4000a800

08004524 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b096      	sub	sp, #88	@ 0x58
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800452c:	4b95      	ldr	r3, [pc, #596]	@ (8004784 <HAL_FDCAN_IRQHandler+0x260>)
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	079b      	lsls	r3, r3, #30
 8004532:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004534:	4b93      	ldr	r3, [pc, #588]	@ (8004784 <HAL_FDCAN_IRQHandler+0x260>)
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	079b      	lsls	r3, r3, #30
 800453a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800453c:	4013      	ands	r3, r2
 800453e:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004546:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800454a:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004552:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004554:	4013      	ands	r3, r2
 8004556:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800456c:	4013      	ands	r3, r2
 800456e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004576:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800457a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004582:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004584:	4013      	ands	r3, r2
 8004586:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800458e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8004592:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800459c:	4013      	ands	r3, r2
 800459e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a6:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80045aa:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045b4:	4013      	ands	r3, r2
 80045b6:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80045c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00f      	beq.n	80045f2 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80045d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80045e6:	4b67      	ldr	r3, [pc, #412]	@ (8004784 <HAL_FDCAN_IRQHandler+0x260>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fa44 	bl	8004a7a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80045f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01c      	beq.n	8004636 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80045fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004602:	2b00      	cmp	r3, #0
 8004604:	d017      	beq.n	8004636 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800460e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004618:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800461a:	4013      	ands	r3, r2
 800461c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004626:	651a      	str	r2, [r3, #80]	@ 0x50
 8004628:	4b56      	ldr	r3, [pc, #344]	@ (8004784 <HAL_FDCAN_IRQHandler+0x260>)
 800462a:	2200      	movs	r2, #0
 800462c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800462e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f9f9 	bl	8004a28 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00d      	beq.n	8004658 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004642:	4b51      	ldr	r3, [pc, #324]	@ (8004788 <HAL_FDCAN_IRQHandler+0x264>)
 8004644:	400b      	ands	r3, r1
 8004646:	6513      	str	r3, [r2, #80]	@ 0x50
 8004648:	4a4e      	ldr	r2, [pc, #312]	@ (8004784 <HAL_FDCAN_IRQHandler+0x260>)
 800464a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800464c:	0f9b      	lsrs	r3, r3, #30
 800464e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004650:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f9b2 	bl	80049bc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00d      	beq.n	800467a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004664:	4b48      	ldr	r3, [pc, #288]	@ (8004788 <HAL_FDCAN_IRQHandler+0x264>)
 8004666:	400b      	ands	r3, r1
 8004668:	6513      	str	r3, [r2, #80]	@ 0x50
 800466a:	4a46      	ldr	r2, [pc, #280]	@ (8004784 <HAL_FDCAN_IRQHandler+0x260>)
 800466c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800466e:	0f9b      	lsrs	r3, r3, #30
 8004670:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004672:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f9ac 	bl	80049d2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800467a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00d      	beq.n	800469c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004686:	4b40      	ldr	r3, [pc, #256]	@ (8004788 <HAL_FDCAN_IRQHandler+0x264>)
 8004688:	400b      	ands	r3, r1
 800468a:	6513      	str	r3, [r2, #80]	@ 0x50
 800468c:	4a3d      	ldr	r2, [pc, #244]	@ (8004784 <HAL_FDCAN_IRQHandler+0x260>)
 800468e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004690:	0f9b      	lsrs	r3, r3, #30
 8004692:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004694:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fc fbae 	bl	8000df8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800469c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00d      	beq.n	80046be <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80046a8:	4b37      	ldr	r3, [pc, #220]	@ (8004788 <HAL_FDCAN_IRQHandler+0x264>)
 80046aa:	400b      	ands	r3, r1
 80046ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80046ae:	4a35      	ldr	r2, [pc, #212]	@ (8004784 <HAL_FDCAN_IRQHandler+0x260>)
 80046b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046b2:	0f9b      	lsrs	r3, r3, #30
 80046b4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80046b6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f995 	bl	80049e8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80046be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00f      	beq.n	80046e8 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80046c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046da:	651a      	str	r2, [r3, #80]	@ 0x50
 80046dc:	4b29      	ldr	r3, [pc, #164]	@ (8004784 <HAL_FDCAN_IRQHandler+0x260>)
 80046de:	2200      	movs	r2, #0
 80046e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f98b 	bl	80049fe <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80046e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01c      	beq.n	800472c <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80046f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d017      	beq.n	800472c <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004704:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800470e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004710:	4013      	ands	r3, r2
 8004712:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800471c:	651a      	str	r2, [r3, #80]	@ 0x50
 800471e:	4b19      	ldr	r3, [pc, #100]	@ (8004784 <HAL_FDCAN_IRQHandler+0x260>)
 8004720:	2200      	movs	r2, #0
 8004722:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004724:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f973 	bl	8004a12 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800472c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800472e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00f      	beq.n	8004756 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004738:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004748:	651a      	str	r2, [r3, #80]	@ 0x50
 800474a:	4b0e      	ldr	r3, [pc, #56]	@ (8004784 <HAL_FDCAN_IRQHandler+0x260>)
 800474c:	2200      	movs	r2, #0
 800474e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f974 	bl	8004a3e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d015      	beq.n	800478c <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d010      	beq.n	800478c <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004772:	651a      	str	r2, [r3, #80]	@ 0x50
 8004774:	4b03      	ldr	r3, [pc, #12]	@ (8004784 <HAL_FDCAN_IRQHandler+0x260>)
 8004776:	2200      	movs	r2, #0
 8004778:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f969 	bl	8004a52 <HAL_FDCAN_TimestampWraparoundCallback>
 8004780:	e004      	b.n	800478c <HAL_FDCAN_IRQHandler+0x268>
 8004782:	bf00      	nop
 8004784:	4000a800 	.word	0x4000a800
 8004788:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800478c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800478e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00f      	beq.n	80047b6 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004798:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80047a8:	651a      	str	r2, [r3, #80]	@ 0x50
 80047aa:	4b81      	ldr	r3, [pc, #516]	@ (80049b0 <HAL_FDCAN_IRQHandler+0x48c>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f958 	bl	8004a66 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80047b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d014      	beq.n	80047ea <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80047c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00f      	beq.n	80047ea <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80047d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80047d4:	4b76      	ldr	r3, [pc, #472]	@ (80049b0 <HAL_FDCAN_IRQHandler+0x48c>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80047ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00d      	beq.n	800480c <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047f6:	4b6f      	ldr	r3, [pc, #444]	@ (80049b4 <HAL_FDCAN_IRQHandler+0x490>)
 80047f8:	400b      	ands	r3, r1
 80047fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80047fc:	4a6c      	ldr	r2, [pc, #432]	@ (80049b0 <HAL_FDCAN_IRQHandler+0x48c>)
 80047fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004800:	0f9b      	lsrs	r3, r3, #30
 8004802:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004804:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f94b 	bl	8004aa2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800480c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800480e:	2b00      	cmp	r3, #0
 8004810:	d011      	beq.n	8004836 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004818:	4b66      	ldr	r3, [pc, #408]	@ (80049b4 <HAL_FDCAN_IRQHandler+0x490>)
 800481a:	400b      	ands	r3, r1
 800481c:	6513      	str	r3, [r2, #80]	@ 0x50
 800481e:	4a64      	ldr	r2, [pc, #400]	@ (80049b0 <HAL_FDCAN_IRQHandler+0x48c>)
 8004820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004822:	0f9b      	lsrs	r3, r3, #30
 8004824:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800482c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a5f      	ldr	r2, [pc, #380]	@ (80049b8 <HAL_FDCAN_IRQHandler+0x494>)
 800483c:	4293      	cmp	r3, r2
 800483e:	f040 80aa 	bne.w	8004996 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80a2 	beq.w	8004996 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004866:	4013      	ands	r3, r2
 8004868:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004874:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800487e:	4013      	ands	r3, r2
 8004880:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004896:	4013      	ands	r3, r2
 8004898:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80048a4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	6a3a      	ldr	r2, [r7, #32]
 80048ae:	4013      	ands	r3, r2
 80048b0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80048bc:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	4013      	ands	r3, r2
 80048c8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80048da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048e6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80048e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f8e4 	bl	8004ab8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80048f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d007      	beq.n	8004906 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048fc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80048fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f8e4 	bl	8004ace <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d019      	beq.n	8004944 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d014      	beq.n	8004944 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004920:	0c1b      	lsrs	r3, r3, #16
 8004922:	b29b      	uxth	r3, r3
 8004924:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004930:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2240      	movs	r2, #64	@ 0x40
 8004938:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	6939      	ldr	r1, [r7, #16]
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8d0 	bl	8004ae4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004950:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004952:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f8d1 	bl	8004afc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00b      	beq.n	8004978 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	6a3a      	ldr	r2, [r7, #32]
 8004966:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f874 	bl	8004a8e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80049a6:	bf00      	nop
 80049a8:	3758      	adds	r7, #88	@ 0x58
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	4000a800 	.word	0x4000a800
 80049b4:	3fcfffff 	.word	0x3fcfffff
 80049b8:	4000a000 	.word	0x4000a000

080049bc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
	...

08004b14 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b20:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004b2a:	4ba7      	ldr	r3, [pc, #668]	@ (8004dc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	0091      	lsls	r1, r2, #2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6812      	ldr	r2, [r2, #0]
 8004b36:	430b      	orrs	r3, r1
 8004b38:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b44:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4c:	041a      	lsls	r2, r3, #16
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	4413      	add	r3, r2
 8004b60:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004b6a:	4b97      	ldr	r3, [pc, #604]	@ (8004dc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	0091      	lsls	r1, r2, #2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	430b      	orrs	r3, r1
 8004b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b84:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b8c:	041a      	lsls	r2, r3, #16
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004bac:	4b86      	ldr	r3, [pc, #536]	@ (8004dc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	0091      	lsls	r1, r2, #2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004bc6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	041a      	lsls	r2, r3, #16
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	4413      	add	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004bf4:	4b74      	ldr	r3, [pc, #464]	@ (8004dc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	0091      	lsls	r1, r2, #2
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6812      	ldr	r2, [r2, #0]
 8004c00:	430b      	orrs	r3, r1
 8004c02:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c0e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c16:	041a      	lsls	r2, r3, #16
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004c2a:	fb02 f303 	mul.w	r3, r2, r3
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	4413      	add	r3, r2
 8004c32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004c3c:	4b62      	ldr	r3, [pc, #392]	@ (8004dc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	0091      	lsls	r1, r2, #2
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004c56:	fb02 f303 	mul.w	r3, r2, r3
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004c68:	4b57      	ldr	r3, [pc, #348]	@ (8004dc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	0091      	lsls	r1, r2, #2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	430b      	orrs	r3, r1
 8004c76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c82:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8a:	041a      	lsls	r2, r3, #16
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004caa:	4b47      	ldr	r3, [pc, #284]	@ (8004dc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	0091      	lsls	r1, r2, #2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004cc4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ccc:	041a      	lsls	r2, r3, #16
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004ce0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ce8:	061a      	lsls	r2, r3, #24
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cf8:	4b34      	ldr	r3, [pc, #208]	@ (8004dcc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009a      	lsls	r2, r3, #2
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	441a      	add	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	441a      	add	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8004d2e:	fb01 f303 	mul.w	r3, r1, r3
 8004d32:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004d34:	441a      	add	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8004d46:	fb01 f303 	mul.w	r3, r1, r3
 8004d4a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004d4c:	441a      	add	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8004d5e:	fb01 f303 	mul.w	r3, r1, r3
 8004d62:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004d64:	441a      	add	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	441a      	add	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004d8e:	fb01 f303 	mul.w	r3, r1, r3
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	441a      	add	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004daa:	fb01 f303 	mul.w	r3, r1, r3
 8004dae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004db0:	441a      	add	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dbe:	4a04      	ldr	r2, [pc, #16]	@ (8004dd0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d915      	bls.n	8004df0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004dc4:	e006      	b.n	8004dd4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004dc6:	bf00      	nop
 8004dc8:	ffff0003 	.word	0xffff0003
 8004dcc:	10002b00 	.word	0x10002b00
 8004dd0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dda:	f043 0220 	orr.w	r2, r3, #32
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2203      	movs	r2, #3
 8004de8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e010      	b.n	8004e12 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	e005      	b.n	8004e04 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3304      	adds	r3, #4
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d3f3      	bcc.n	8004df8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop

08004e20 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b089      	sub	sp, #36	@ 0x24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10a      	bne.n	8004e4c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004e3e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e46:	4313      	orrs	r3, r2
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	e00a      	b.n	8004e62 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004e54:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004e5a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e60:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004e6c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004e72:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004e78:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e8e:	6839      	ldr	r1, [r7, #0]
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e020      	b.n	8004efa <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	3303      	adds	r3, #3
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	3302      	adds	r3, #2
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	440b      	add	r3, r1
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004ed0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	440b      	add	r3, r1
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004ede:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004ee8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	4a06      	ldr	r2, [pc, #24]	@ (8004f18 <FDCAN_CopyMessageToRAM+0xf8>)
 8004f00:	5cd3      	ldrb	r3, [r2, r3]
 8004f02:	461a      	mov	r2, r3
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d3d6      	bcc.n	8004eb8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	bf00      	nop
 8004f0e:	3724      	adds	r7, #36	@ 0x24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	08013298 	.word	0x08013298

08004f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b089      	sub	sp, #36	@ 0x24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f2a:	4b86      	ldr	r3, [pc, #536]	@ (8005144 <HAL_GPIO_Init+0x228>)
 8004f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f2e:	e18c      	b.n	800524a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	2101      	movs	r1, #1
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 817e 	beq.w	8005244 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d005      	beq.n	8004f60 <HAL_GPIO_Init+0x44>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d130      	bne.n	8004fc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	43db      	mvns	r3, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4013      	ands	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f96:	2201      	movs	r2, #1
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	091b      	lsrs	r3, r3, #4
 8004fac:	f003 0201 	and.w	r2, r3, #1
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d017      	beq.n	8004ffe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	2203      	movs	r2, #3
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	689a      	ldr	r2, [r3, #8]
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d123      	bne.n	8005052 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	08da      	lsrs	r2, r3, #3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3208      	adds	r2, #8
 8005012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	220f      	movs	r2, #15
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	43db      	mvns	r3, r3
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	4013      	ands	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	fa02 f303 	lsl.w	r3, r2, r3
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4313      	orrs	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	08da      	lsrs	r2, r3, #3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3208      	adds	r2, #8
 800504c:	69b9      	ldr	r1, [r7, #24]
 800504e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	2203      	movs	r2, #3
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	43db      	mvns	r3, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4013      	ands	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f003 0203 	and.w	r2, r3, #3
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4313      	orrs	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 80d8 	beq.w	8005244 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005094:	4b2c      	ldr	r3, [pc, #176]	@ (8005148 <HAL_GPIO_Init+0x22c>)
 8005096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800509a:	4a2b      	ldr	r2, [pc, #172]	@ (8005148 <HAL_GPIO_Init+0x22c>)
 800509c:	f043 0302 	orr.w	r3, r3, #2
 80050a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80050a4:	4b28      	ldr	r3, [pc, #160]	@ (8005148 <HAL_GPIO_Init+0x22c>)
 80050a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050b2:	4a26      	ldr	r2, [pc, #152]	@ (800514c <HAL_GPIO_Init+0x230>)
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	089b      	lsrs	r3, r3, #2
 80050b8:	3302      	adds	r3, #2
 80050ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	220f      	movs	r2, #15
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	43db      	mvns	r3, r3
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4013      	ands	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005150 <HAL_GPIO_Init+0x234>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d04a      	beq.n	8005174 <HAL_GPIO_Init+0x258>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005154 <HAL_GPIO_Init+0x238>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d02b      	beq.n	800513e <HAL_GPIO_Init+0x222>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005158 <HAL_GPIO_Init+0x23c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d025      	beq.n	800513a <HAL_GPIO_Init+0x21e>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a1a      	ldr	r2, [pc, #104]	@ (800515c <HAL_GPIO_Init+0x240>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d01f      	beq.n	8005136 <HAL_GPIO_Init+0x21a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a19      	ldr	r2, [pc, #100]	@ (8005160 <HAL_GPIO_Init+0x244>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d019      	beq.n	8005132 <HAL_GPIO_Init+0x216>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a18      	ldr	r2, [pc, #96]	@ (8005164 <HAL_GPIO_Init+0x248>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <HAL_GPIO_Init+0x212>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a17      	ldr	r2, [pc, #92]	@ (8005168 <HAL_GPIO_Init+0x24c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00d      	beq.n	800512a <HAL_GPIO_Init+0x20e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a16      	ldr	r2, [pc, #88]	@ (800516c <HAL_GPIO_Init+0x250>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d007      	beq.n	8005126 <HAL_GPIO_Init+0x20a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a15      	ldr	r2, [pc, #84]	@ (8005170 <HAL_GPIO_Init+0x254>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d101      	bne.n	8005122 <HAL_GPIO_Init+0x206>
 800511e:	2309      	movs	r3, #9
 8005120:	e029      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 8005122:	230a      	movs	r3, #10
 8005124:	e027      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 8005126:	2307      	movs	r3, #7
 8005128:	e025      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 800512a:	2306      	movs	r3, #6
 800512c:	e023      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 800512e:	2305      	movs	r3, #5
 8005130:	e021      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 8005132:	2304      	movs	r3, #4
 8005134:	e01f      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 8005136:	2303      	movs	r3, #3
 8005138:	e01d      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 800513a:	2302      	movs	r3, #2
 800513c:	e01b      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 800513e:	2301      	movs	r3, #1
 8005140:	e019      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 8005142:	bf00      	nop
 8005144:	58000080 	.word	0x58000080
 8005148:	58024400 	.word	0x58024400
 800514c:	58000400 	.word	0x58000400
 8005150:	58020000 	.word	0x58020000
 8005154:	58020400 	.word	0x58020400
 8005158:	58020800 	.word	0x58020800
 800515c:	58020c00 	.word	0x58020c00
 8005160:	58021000 	.word	0x58021000
 8005164:	58021400 	.word	0x58021400
 8005168:	58021800 	.word	0x58021800
 800516c:	58021c00 	.word	0x58021c00
 8005170:	58022400 	.word	0x58022400
 8005174:	2300      	movs	r3, #0
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	f002 0203 	and.w	r2, r2, #3
 800517c:	0092      	lsls	r2, r2, #2
 800517e:	4093      	lsls	r3, r2
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4313      	orrs	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005186:	4938      	ldr	r1, [pc, #224]	@ (8005268 <HAL_GPIO_Init+0x34c>)
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	089b      	lsrs	r3, r3, #2
 800518c:	3302      	adds	r3, #2
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	43db      	mvns	r3, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4013      	ands	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	43db      	mvns	r3, r3
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	4013      	ands	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80051e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	43db      	mvns	r3, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4013      	ands	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	43db      	mvns	r3, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4013      	ands	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	3301      	adds	r3, #1
 8005248:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	f47f ae6b 	bne.w	8004f30 <HAL_GPIO_Init+0x14>
  }
}
 800525a:	bf00      	nop
 800525c:	bf00      	nop
 800525e:	3724      	adds	r7, #36	@ 0x24
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	58000400 	.word	0x58000400

0800526c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005274:	4b19      	ldr	r3, [pc, #100]	@ (80052dc <HAL_PWREx_ConfigSupply+0x70>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b04      	cmp	r3, #4
 800527e:	d00a      	beq.n	8005296 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005280:	4b16      	ldr	r3, [pc, #88]	@ (80052dc <HAL_PWREx_ConfigSupply+0x70>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	429a      	cmp	r2, r3
 800528c:	d001      	beq.n	8005292 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e01f      	b.n	80052d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	e01d      	b.n	80052d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005296:	4b11      	ldr	r3, [pc, #68]	@ (80052dc <HAL_PWREx_ConfigSupply+0x70>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f023 0207 	bic.w	r2, r3, #7
 800529e:	490f      	ldr	r1, [pc, #60]	@ (80052dc <HAL_PWREx_ConfigSupply+0x70>)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052a6:	f7fd fd33 	bl	8002d10 <HAL_GetTick>
 80052aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052ac:	e009      	b.n	80052c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052ae:	f7fd fd2f 	bl	8002d10 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052bc:	d901      	bls.n	80052c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e007      	b.n	80052d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052c2:	4b06      	ldr	r3, [pc, #24]	@ (80052dc <HAL_PWREx_ConfigSupply+0x70>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ce:	d1ee      	bne.n	80052ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	58024800 	.word	0x58024800

080052e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08c      	sub	sp, #48	@ 0x30
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e3c8      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 8087 	beq.w	800540e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005300:	4b88      	ldr	r3, [pc, #544]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005308:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800530a:	4b86      	ldr	r3, [pc, #536]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 800530c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005312:	2b10      	cmp	r3, #16
 8005314:	d007      	beq.n	8005326 <HAL_RCC_OscConfig+0x46>
 8005316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005318:	2b18      	cmp	r3, #24
 800531a:	d110      	bne.n	800533e <HAL_RCC_OscConfig+0x5e>
 800531c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d10b      	bne.n	800533e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005326:	4b7f      	ldr	r3, [pc, #508]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d06c      	beq.n	800540c <HAL_RCC_OscConfig+0x12c>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d168      	bne.n	800540c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e3a2      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005346:	d106      	bne.n	8005356 <HAL_RCC_OscConfig+0x76>
 8005348:	4b76      	ldr	r3, [pc, #472]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a75      	ldr	r2, [pc, #468]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 800534e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	e02e      	b.n	80053b4 <HAL_RCC_OscConfig+0xd4>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10c      	bne.n	8005378 <HAL_RCC_OscConfig+0x98>
 800535e:	4b71      	ldr	r3, [pc, #452]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a70      	ldr	r2, [pc, #448]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	4b6e      	ldr	r3, [pc, #440]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a6d      	ldr	r2, [pc, #436]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005370:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	e01d      	b.n	80053b4 <HAL_RCC_OscConfig+0xd4>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005380:	d10c      	bne.n	800539c <HAL_RCC_OscConfig+0xbc>
 8005382:	4b68      	ldr	r3, [pc, #416]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a67      	ldr	r2, [pc, #412]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	4b65      	ldr	r3, [pc, #404]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a64      	ldr	r2, [pc, #400]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	e00b      	b.n	80053b4 <HAL_RCC_OscConfig+0xd4>
 800539c:	4b61      	ldr	r3, [pc, #388]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a60      	ldr	r2, [pc, #384]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 80053a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	4b5e      	ldr	r3, [pc, #376]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a5d      	ldr	r2, [pc, #372]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 80053ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d013      	beq.n	80053e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fd fca8 	bl	8002d10 <HAL_GetTick>
 80053c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c4:	f7fd fca4 	bl	8002d10 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b64      	cmp	r3, #100	@ 0x64
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e356      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053d6:	4b53      	ldr	r3, [pc, #332]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0f0      	beq.n	80053c4 <HAL_RCC_OscConfig+0xe4>
 80053e2:	e014      	b.n	800540e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e4:	f7fd fc94 	bl	8002d10 <HAL_GetTick>
 80053e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053ec:	f7fd fc90 	bl	8002d10 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b64      	cmp	r3, #100	@ 0x64
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e342      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053fe:	4b49      	ldr	r3, [pc, #292]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f0      	bne.n	80053ec <HAL_RCC_OscConfig+0x10c>
 800540a:	e000      	b.n	800540e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800540c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 808c 	beq.w	8005534 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800541c:	4b41      	ldr	r3, [pc, #260]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005424:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005426:	4b3f      	ldr	r3, [pc, #252]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d007      	beq.n	8005442 <HAL_RCC_OscConfig+0x162>
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	2b18      	cmp	r3, #24
 8005436:	d137      	bne.n	80054a8 <HAL_RCC_OscConfig+0x1c8>
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d132      	bne.n	80054a8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005442:	4b38      	ldr	r3, [pc, #224]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0304 	and.w	r3, r3, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	d005      	beq.n	800545a <HAL_RCC_OscConfig+0x17a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e314      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800545a:	4b32      	ldr	r3, [pc, #200]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f023 0219 	bic.w	r2, r3, #25
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	492f      	ldr	r1, [pc, #188]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005468:	4313      	orrs	r3, r2
 800546a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fd fc50 	bl	8002d10 <HAL_GetTick>
 8005470:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005474:	f7fd fc4c 	bl	8002d10 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e2fe      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005486:	4b27      	ldr	r3, [pc, #156]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0f0      	beq.n	8005474 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005492:	4b24      	ldr	r3, [pc, #144]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	061b      	lsls	r3, r3, #24
 80054a0:	4920      	ldr	r1, [pc, #128]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054a6:	e045      	b.n	8005534 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d026      	beq.n	80054fe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f023 0219 	bic.w	r2, r3, #25
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	4919      	ldr	r1, [pc, #100]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c2:	f7fd fc25 	bl	8002d10 <HAL_GetTick>
 80054c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ca:	f7fd fc21 	bl	8002d10 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e2d3      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054dc:	4b11      	ldr	r3, [pc, #68]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	061b      	lsls	r3, r3, #24
 80054f6:	490b      	ldr	r1, [pc, #44]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	604b      	str	r3, [r1, #4]
 80054fc:	e01a      	b.n	8005534 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054fe:	4b09      	ldr	r3, [pc, #36]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a08      	ldr	r2, [pc, #32]	@ (8005524 <HAL_RCC_OscConfig+0x244>)
 8005504:	f023 0301 	bic.w	r3, r3, #1
 8005508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550a:	f7fd fc01 	bl	8002d10 <HAL_GetTick>
 800550e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005510:	e00a      	b.n	8005528 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005512:	f7fd fbfd 	bl	8002d10 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d903      	bls.n	8005528 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e2af      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
 8005524:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005528:	4b96      	ldr	r3, [pc, #600]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1ee      	bne.n	8005512 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	2b00      	cmp	r3, #0
 800553e:	d06a      	beq.n	8005616 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005540:	4b90      	ldr	r3, [pc, #576]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005548:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800554a:	4b8e      	ldr	r3, [pc, #568]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 800554c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b08      	cmp	r3, #8
 8005554:	d007      	beq.n	8005566 <HAL_RCC_OscConfig+0x286>
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	2b18      	cmp	r3, #24
 800555a:	d11b      	bne.n	8005594 <HAL_RCC_OscConfig+0x2b4>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b01      	cmp	r3, #1
 8005564:	d116      	bne.n	8005594 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005566:	4b87      	ldr	r3, [pc, #540]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d005      	beq.n	800557e <HAL_RCC_OscConfig+0x29e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	2b80      	cmp	r3, #128	@ 0x80
 8005578:	d001      	beq.n	800557e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e282      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800557e:	4b81      	ldr	r3, [pc, #516]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	061b      	lsls	r3, r3, #24
 800558c:	497d      	ldr	r1, [pc, #500]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 800558e:	4313      	orrs	r3, r2
 8005590:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005592:	e040      	b.n	8005616 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d023      	beq.n	80055e4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800559c:	4b79      	ldr	r3, [pc, #484]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a78      	ldr	r2, [pc, #480]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 80055a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fd fbb2 	bl	8002d10 <HAL_GetTick>
 80055ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80055b0:	f7fd fbae 	bl	8002d10 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e260      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055c2:	4b70      	ldr	r3, [pc, #448]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0f0      	beq.n	80055b0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	061b      	lsls	r3, r3, #24
 80055dc:	4969      	ldr	r1, [pc, #420]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	60cb      	str	r3, [r1, #12]
 80055e2:	e018      	b.n	8005616 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80055e4:	4b67      	ldr	r3, [pc, #412]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a66      	ldr	r2, [pc, #408]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 80055ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f0:	f7fd fb8e 	bl	8002d10 <HAL_GetTick>
 80055f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80055f8:	f7fd fb8a 	bl	8002d10 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e23c      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800560a:	4b5e      	ldr	r3, [pc, #376]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d036      	beq.n	8005690 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d019      	beq.n	800565e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800562a:	4b56      	ldr	r3, [pc, #344]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 800562c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800562e:	4a55      	ldr	r2, [pc, #340]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 8005630:	f043 0301 	orr.w	r3, r3, #1
 8005634:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005636:	f7fd fb6b 	bl	8002d10 <HAL_GetTick>
 800563a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800563e:	f7fd fb67 	bl	8002d10 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e219      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005650:	4b4c      	ldr	r3, [pc, #304]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 8005652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x35e>
 800565c:	e018      	b.n	8005690 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800565e:	4b49      	ldr	r3, [pc, #292]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 8005660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005662:	4a48      	ldr	r2, [pc, #288]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566a:	f7fd fb51 	bl	8002d10 <HAL_GetTick>
 800566e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005672:	f7fd fb4d 	bl	8002d10 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e1ff      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005684:	4b3f      	ldr	r3, [pc, #252]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 8005686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1f0      	bne.n	8005672 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d036      	beq.n	800570a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d019      	beq.n	80056d8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056a4:	4b37      	ldr	r3, [pc, #220]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a36      	ldr	r2, [pc, #216]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 80056aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80056ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056b0:	f7fd fb2e 	bl	8002d10 <HAL_GetTick>
 80056b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056b8:	f7fd fb2a 	bl	8002d10 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e1dc      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056ca:	4b2e      	ldr	r3, [pc, #184]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCC_OscConfig+0x3d8>
 80056d6:	e018      	b.n	800570a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a29      	ldr	r2, [pc, #164]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 80056de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056e4:	f7fd fb14 	bl	8002d10 <HAL_GetTick>
 80056e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056ec:	f7fd fb10 	bl	8002d10 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e1c2      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056fe:	4b21      	ldr	r3, [pc, #132]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f0      	bne.n	80056ec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 8086 	beq.w	8005824 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005718:	4b1b      	ldr	r3, [pc, #108]	@ (8005788 <HAL_RCC_OscConfig+0x4a8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1a      	ldr	r2, [pc, #104]	@ (8005788 <HAL_RCC_OscConfig+0x4a8>)
 800571e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005722:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005724:	f7fd faf4 	bl	8002d10 <HAL_GetTick>
 8005728:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572c:	f7fd faf0 	bl	8002d10 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b64      	cmp	r3, #100	@ 0x64
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e1a2      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800573e:	4b12      	ldr	r3, [pc, #72]	@ (8005788 <HAL_RCC_OscConfig+0x4a8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d106      	bne.n	8005760 <HAL_RCC_OscConfig+0x480>
 8005752:	4b0c      	ldr	r3, [pc, #48]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005756:	4a0b      	ldr	r2, [pc, #44]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	6713      	str	r3, [r2, #112]	@ 0x70
 800575e:	e032      	b.n	80057c6 <HAL_RCC_OscConfig+0x4e6>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d111      	bne.n	800578c <HAL_RCC_OscConfig+0x4ac>
 8005768:	4b06      	ldr	r3, [pc, #24]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576c:	4a05      	ldr	r2, [pc, #20]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 800576e:	f023 0301 	bic.w	r3, r3, #1
 8005772:	6713      	str	r3, [r2, #112]	@ 0x70
 8005774:	4b03      	ldr	r3, [pc, #12]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 8005776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005778:	4a02      	ldr	r2, [pc, #8]	@ (8005784 <HAL_RCC_OscConfig+0x4a4>)
 800577a:	f023 0304 	bic.w	r3, r3, #4
 800577e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005780:	e021      	b.n	80057c6 <HAL_RCC_OscConfig+0x4e6>
 8005782:	bf00      	nop
 8005784:	58024400 	.word	0x58024400
 8005788:	58024800 	.word	0x58024800
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2b05      	cmp	r3, #5
 8005792:	d10c      	bne.n	80057ae <HAL_RCC_OscConfig+0x4ce>
 8005794:	4b83      	ldr	r3, [pc, #524]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005798:	4a82      	ldr	r2, [pc, #520]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 800579a:	f043 0304 	orr.w	r3, r3, #4
 800579e:	6713      	str	r3, [r2, #112]	@ 0x70
 80057a0:	4b80      	ldr	r3, [pc, #512]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 80057a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a4:	4a7f      	ldr	r2, [pc, #508]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ac:	e00b      	b.n	80057c6 <HAL_RCC_OscConfig+0x4e6>
 80057ae:	4b7d      	ldr	r3, [pc, #500]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b2:	4a7c      	ldr	r2, [pc, #496]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 80057b4:	f023 0301 	bic.w	r3, r3, #1
 80057b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ba:	4b7a      	ldr	r3, [pc, #488]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 80057bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057be:	4a79      	ldr	r2, [pc, #484]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 80057c0:	f023 0304 	bic.w	r3, r3, #4
 80057c4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d015      	beq.n	80057fa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ce:	f7fd fa9f 	bl	8002d10 <HAL_GetTick>
 80057d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057d4:	e00a      	b.n	80057ec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d6:	f7fd fa9b 	bl	8002d10 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e14b      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057ec:	4b6d      	ldr	r3, [pc, #436]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0ee      	beq.n	80057d6 <HAL_RCC_OscConfig+0x4f6>
 80057f8:	e014      	b.n	8005824 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fa:	f7fd fa89 	bl	8002d10 <HAL_GetTick>
 80057fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005800:	e00a      	b.n	8005818 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005802:	f7fd fa85 	bl	8002d10 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005810:	4293      	cmp	r3, r2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e135      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005818:	4b62      	ldr	r3, [pc, #392]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1ee      	bne.n	8005802 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 812a 	beq.w	8005a82 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800582e:	4b5d      	ldr	r3, [pc, #372]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005836:	2b18      	cmp	r3, #24
 8005838:	f000 80ba 	beq.w	80059b0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005840:	2b02      	cmp	r3, #2
 8005842:	f040 8095 	bne.w	8005970 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005846:	4b57      	ldr	r3, [pc, #348]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a56      	ldr	r2, [pc, #344]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 800584c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005852:	f7fd fa5d 	bl	8002d10 <HAL_GetTick>
 8005856:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800585a:	f7fd fa59 	bl	8002d10 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e10b      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800586c:	4b4d      	ldr	r3, [pc, #308]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f0      	bne.n	800585a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005878:	4b4a      	ldr	r3, [pc, #296]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 800587a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800587c:	4b4a      	ldr	r3, [pc, #296]	@ (80059a8 <HAL_RCC_OscConfig+0x6c8>)
 800587e:	4013      	ands	r3, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005888:	0112      	lsls	r2, r2, #4
 800588a:	430a      	orrs	r2, r1
 800588c:	4945      	ldr	r1, [pc, #276]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 800588e:	4313      	orrs	r3, r2
 8005890:	628b      	str	r3, [r1, #40]	@ 0x28
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005896:	3b01      	subs	r3, #1
 8005898:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a0:	3b01      	subs	r3, #1
 80058a2:	025b      	lsls	r3, r3, #9
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ac:	3b01      	subs	r3, #1
 80058ae:	041b      	lsls	r3, r3, #16
 80058b0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ba:	3b01      	subs	r3, #1
 80058bc:	061b      	lsls	r3, r3, #24
 80058be:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058c2:	4938      	ldr	r1, [pc, #224]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80058c8:	4b36      	ldr	r3, [pc, #216]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 80058ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058cc:	4a35      	ldr	r2, [pc, #212]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 80058ce:	f023 0301 	bic.w	r3, r3, #1
 80058d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058d4:	4b33      	ldr	r3, [pc, #204]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 80058d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058d8:	4b34      	ldr	r3, [pc, #208]	@ (80059ac <HAL_RCC_OscConfig+0x6cc>)
 80058da:	4013      	ands	r3, r2
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80058e0:	00d2      	lsls	r2, r2, #3
 80058e2:	4930      	ldr	r1, [pc, #192]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80058e8:	4b2e      	ldr	r3, [pc, #184]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 80058ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ec:	f023 020c 	bic.w	r2, r3, #12
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f4:	492b      	ldr	r1, [pc, #172]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80058fa:	4b2a      	ldr	r3, [pc, #168]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 80058fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fe:	f023 0202 	bic.w	r2, r3, #2
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005906:	4927      	ldr	r1, [pc, #156]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 8005908:	4313      	orrs	r3, r2
 800590a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800590c:	4b25      	ldr	r3, [pc, #148]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 800590e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005910:	4a24      	ldr	r2, [pc, #144]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 8005912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005918:	4b22      	ldr	r3, [pc, #136]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 800591a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591c:	4a21      	ldr	r2, [pc, #132]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 800591e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005924:	4b1f      	ldr	r3, [pc, #124]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 8005926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005928:	4a1e      	ldr	r2, [pc, #120]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 800592a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800592e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005930:	4b1c      	ldr	r3, [pc, #112]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 8005932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005934:	4a1b      	ldr	r2, [pc, #108]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800593c:	4b19      	ldr	r3, [pc, #100]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a18      	ldr	r2, [pc, #96]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 8005942:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005948:	f7fd f9e2 	bl	8002d10 <HAL_GetTick>
 800594c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005950:	f7fd f9de 	bl	8002d10 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e090      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005962:	4b10      	ldr	r3, [pc, #64]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f0      	beq.n	8005950 <HAL_RCC_OscConfig+0x670>
 800596e:	e088      	b.n	8005a82 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005970:	4b0c      	ldr	r3, [pc, #48]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a0b      	ldr	r2, [pc, #44]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 8005976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800597a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fd f9c8 	bl	8002d10 <HAL_GetTick>
 8005980:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005984:	f7fd f9c4 	bl	8002d10 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e076      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005996:	4b03      	ldr	r3, [pc, #12]	@ (80059a4 <HAL_RCC_OscConfig+0x6c4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0x6a4>
 80059a2:	e06e      	b.n	8005a82 <HAL_RCC_OscConfig+0x7a2>
 80059a4:	58024400 	.word	0x58024400
 80059a8:	fffffc0c 	.word	0xfffffc0c
 80059ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059b0:	4b36      	ldr	r3, [pc, #216]	@ (8005a8c <HAL_RCC_OscConfig+0x7ac>)
 80059b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059b6:	4b35      	ldr	r3, [pc, #212]	@ (8005a8c <HAL_RCC_OscConfig+0x7ac>)
 80059b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d031      	beq.n	8005a28 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f003 0203 	and.w	r2, r3, #3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d12a      	bne.n	8005a28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	091b      	lsrs	r3, r3, #4
 80059d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059de:	429a      	cmp	r2, r3
 80059e0:	d122      	bne.n	8005a28 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d11a      	bne.n	8005a28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	0a5b      	lsrs	r3, r3, #9
 80059f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d111      	bne.n	8005a28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	0c1b      	lsrs	r3, r3, #16
 8005a08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d108      	bne.n	8005a28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	0e1b      	lsrs	r3, r3, #24
 8005a1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d001      	beq.n	8005a2c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e02b      	b.n	8005a84 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005a2c:	4b17      	ldr	r3, [pc, #92]	@ (8005a8c <HAL_RCC_OscConfig+0x7ac>)
 8005a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a30:	08db      	lsrs	r3, r3, #3
 8005a32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d01f      	beq.n	8005a82 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005a42:	4b12      	ldr	r3, [pc, #72]	@ (8005a8c <HAL_RCC_OscConfig+0x7ac>)
 8005a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a46:	4a11      	ldr	r2, [pc, #68]	@ (8005a8c <HAL_RCC_OscConfig+0x7ac>)
 8005a48:	f023 0301 	bic.w	r3, r3, #1
 8005a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a4e:	f7fd f95f 	bl	8002d10 <HAL_GetTick>
 8005a52:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005a54:	bf00      	nop
 8005a56:	f7fd f95b 	bl	8002d10 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d0f9      	beq.n	8005a56 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a62:	4b0a      	ldr	r3, [pc, #40]	@ (8005a8c <HAL_RCC_OscConfig+0x7ac>)
 8005a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a66:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <HAL_RCC_OscConfig+0x7b0>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a6e:	00d2      	lsls	r2, r2, #3
 8005a70:	4906      	ldr	r1, [pc, #24]	@ (8005a8c <HAL_RCC_OscConfig+0x7ac>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005a76:	4b05      	ldr	r3, [pc, #20]	@ (8005a8c <HAL_RCC_OscConfig+0x7ac>)
 8005a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7a:	4a04      	ldr	r2, [pc, #16]	@ (8005a8c <HAL_RCC_OscConfig+0x7ac>)
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3730      	adds	r7, #48	@ 0x30
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	58024400 	.word	0x58024400
 8005a90:	ffff0007 	.word	0xffff0007

08005a94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e19c      	b.n	8005de2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005aa8:	4b8a      	ldr	r3, [pc, #552]	@ (8005cd4 <HAL_RCC_ClockConfig+0x240>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 030f 	and.w	r3, r3, #15
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d910      	bls.n	8005ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ab6:	4b87      	ldr	r3, [pc, #540]	@ (8005cd4 <HAL_RCC_ClockConfig+0x240>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f023 020f 	bic.w	r2, r3, #15
 8005abe:	4985      	ldr	r1, [pc, #532]	@ (8005cd4 <HAL_RCC_ClockConfig+0x240>)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac6:	4b83      	ldr	r3, [pc, #524]	@ (8005cd4 <HAL_RCC_ClockConfig+0x240>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d001      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e184      	b.n	8005de2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d010      	beq.n	8005b06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	4b7b      	ldr	r3, [pc, #492]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d908      	bls.n	8005b06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005af4:	4b78      	ldr	r3, [pc, #480]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	4975      	ldr	r1, [pc, #468]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d010      	beq.n	8005b34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695a      	ldr	r2, [r3, #20]
 8005b16:	4b70      	ldr	r3, [pc, #448]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d908      	bls.n	8005b34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b22:	4b6d      	ldr	r3, [pc, #436]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	496a      	ldr	r1, [pc, #424]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d010      	beq.n	8005b62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	4b64      	ldr	r3, [pc, #400]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d908      	bls.n	8005b62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b50:	4b61      	ldr	r3, [pc, #388]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	495e      	ldr	r1, [pc, #376]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d010      	beq.n	8005b90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69da      	ldr	r2, [r3, #28]
 8005b72:	4b59      	ldr	r3, [pc, #356]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d908      	bls.n	8005b90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b7e:	4b56      	ldr	r3, [pc, #344]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	4953      	ldr	r1, [pc, #332]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d010      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d908      	bls.n	8005bbe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bac:	4b4a      	ldr	r3, [pc, #296]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	f023 020f 	bic.w	r2, r3, #15
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	4947      	ldr	r1, [pc, #284]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d055      	beq.n	8005c76 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bca:	4b43      	ldr	r3, [pc, #268]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	4940      	ldr	r1, [pc, #256]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d107      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005be4:	4b3c      	ldr	r3, [pc, #240]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d121      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e0f6      	b.n	8005de2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d107      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bfc:	4b36      	ldr	r3, [pc, #216]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d115      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0ea      	b.n	8005de2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d107      	bne.n	8005c24 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c14:	4b30      	ldr	r3, [pc, #192]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d109      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e0de      	b.n	8005de2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c24:	4b2c      	ldr	r3, [pc, #176]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e0d6      	b.n	8005de2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c34:	4b28      	ldr	r3, [pc, #160]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f023 0207 	bic.w	r2, r3, #7
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	4925      	ldr	r1, [pc, #148]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c46:	f7fd f863 	bl	8002d10 <HAL_GetTick>
 8005c4a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4c:	e00a      	b.n	8005c64 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c4e:	f7fd f85f 	bl	8002d10 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e0be      	b.n	8005de2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c64:	4b1c      	ldr	r3, [pc, #112]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d1eb      	bne.n	8005c4e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d010      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	4b14      	ldr	r3, [pc, #80]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d208      	bcs.n	8005ca4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c92:	4b11      	ldr	r3, [pc, #68]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f023 020f 	bic.w	r2, r3, #15
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	490e      	ldr	r1, [pc, #56]	@ (8005cd8 <HAL_RCC_ClockConfig+0x244>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd4 <HAL_RCC_ClockConfig+0x240>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d214      	bcs.n	8005cdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb2:	4b08      	ldr	r3, [pc, #32]	@ (8005cd4 <HAL_RCC_ClockConfig+0x240>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f023 020f 	bic.w	r2, r3, #15
 8005cba:	4906      	ldr	r1, [pc, #24]	@ (8005cd4 <HAL_RCC_ClockConfig+0x240>)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc2:	4b04      	ldr	r3, [pc, #16]	@ (8005cd4 <HAL_RCC_ClockConfig+0x240>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d005      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e086      	b.n	8005de2 <HAL_RCC_ClockConfig+0x34e>
 8005cd4:	52002000 	.word	0x52002000
 8005cd8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d010      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	4b3f      	ldr	r3, [pc, #252]	@ (8005dec <HAL_RCC_ClockConfig+0x358>)
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d208      	bcs.n	8005d0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005cf8:	4b3c      	ldr	r3, [pc, #240]	@ (8005dec <HAL_RCC_ClockConfig+0x358>)
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	4939      	ldr	r1, [pc, #228]	@ (8005dec <HAL_RCC_ClockConfig+0x358>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d010      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695a      	ldr	r2, [r3, #20]
 8005d1a:	4b34      	ldr	r3, [pc, #208]	@ (8005dec <HAL_RCC_ClockConfig+0x358>)
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d208      	bcs.n	8005d38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d26:	4b31      	ldr	r3, [pc, #196]	@ (8005dec <HAL_RCC_ClockConfig+0x358>)
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	492e      	ldr	r1, [pc, #184]	@ (8005dec <HAL_RCC_ClockConfig+0x358>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d010      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699a      	ldr	r2, [r3, #24]
 8005d48:	4b28      	ldr	r3, [pc, #160]	@ (8005dec <HAL_RCC_ClockConfig+0x358>)
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d208      	bcs.n	8005d66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d54:	4b25      	ldr	r3, [pc, #148]	@ (8005dec <HAL_RCC_ClockConfig+0x358>)
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	4922      	ldr	r1, [pc, #136]	@ (8005dec <HAL_RCC_ClockConfig+0x358>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d010      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69da      	ldr	r2, [r3, #28]
 8005d76:	4b1d      	ldr	r3, [pc, #116]	@ (8005dec <HAL_RCC_ClockConfig+0x358>)
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d208      	bcs.n	8005d94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d82:	4b1a      	ldr	r3, [pc, #104]	@ (8005dec <HAL_RCC_ClockConfig+0x358>)
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	4917      	ldr	r1, [pc, #92]	@ (8005dec <HAL_RCC_ClockConfig+0x358>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d94:	f000 f834 	bl	8005e00 <HAL_RCC_GetSysClockFreq>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	4b14      	ldr	r3, [pc, #80]	@ (8005dec <HAL_RCC_ClockConfig+0x358>)
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	0a1b      	lsrs	r3, r3, #8
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	4912      	ldr	r1, [pc, #72]	@ (8005df0 <HAL_RCC_ClockConfig+0x35c>)
 8005da6:	5ccb      	ldrb	r3, [r1, r3]
 8005da8:	f003 031f 	and.w	r3, r3, #31
 8005dac:	fa22 f303 	lsr.w	r3, r2, r3
 8005db0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005db2:	4b0e      	ldr	r3, [pc, #56]	@ (8005dec <HAL_RCC_ClockConfig+0x358>)
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	4a0d      	ldr	r2, [pc, #52]	@ (8005df0 <HAL_RCC_ClockConfig+0x35c>)
 8005dbc:	5cd3      	ldrb	r3, [r2, r3]
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8005df4 <HAL_RCC_ClockConfig+0x360>)
 8005dca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8005df8 <HAL_RCC_ClockConfig+0x364>)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dfc <HAL_RCC_ClockConfig+0x368>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fc ff50 	bl	8002c7c <HAL_InitTick>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	58024400 	.word	0x58024400
 8005df0:	08013288 	.word	0x08013288
 8005df4:	2400000c 	.word	0x2400000c
 8005df8:	24000008 	.word	0x24000008
 8005dfc:	24000040 	.word	0x24000040

08005e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b089      	sub	sp, #36	@ 0x24
 8005e04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e06:	4bb3      	ldr	r3, [pc, #716]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e0e:	2b18      	cmp	r3, #24
 8005e10:	f200 8155 	bhi.w	80060be <HAL_RCC_GetSysClockFreq+0x2be>
 8005e14:	a201      	add	r2, pc, #4	@ (adr r2, 8005e1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1a:	bf00      	nop
 8005e1c:	08005e81 	.word	0x08005e81
 8005e20:	080060bf 	.word	0x080060bf
 8005e24:	080060bf 	.word	0x080060bf
 8005e28:	080060bf 	.word	0x080060bf
 8005e2c:	080060bf 	.word	0x080060bf
 8005e30:	080060bf 	.word	0x080060bf
 8005e34:	080060bf 	.word	0x080060bf
 8005e38:	080060bf 	.word	0x080060bf
 8005e3c:	08005ea7 	.word	0x08005ea7
 8005e40:	080060bf 	.word	0x080060bf
 8005e44:	080060bf 	.word	0x080060bf
 8005e48:	080060bf 	.word	0x080060bf
 8005e4c:	080060bf 	.word	0x080060bf
 8005e50:	080060bf 	.word	0x080060bf
 8005e54:	080060bf 	.word	0x080060bf
 8005e58:	080060bf 	.word	0x080060bf
 8005e5c:	08005ead 	.word	0x08005ead
 8005e60:	080060bf 	.word	0x080060bf
 8005e64:	080060bf 	.word	0x080060bf
 8005e68:	080060bf 	.word	0x080060bf
 8005e6c:	080060bf 	.word	0x080060bf
 8005e70:	080060bf 	.word	0x080060bf
 8005e74:	080060bf 	.word	0x080060bf
 8005e78:	080060bf 	.word	0x080060bf
 8005e7c:	08005eb3 	.word	0x08005eb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e80:	4b94      	ldr	r3, [pc, #592]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e8c:	4b91      	ldr	r3, [pc, #580]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	08db      	lsrs	r3, r3, #3
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	4a90      	ldr	r2, [pc, #576]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005e9e:	e111      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ea0:	4b8d      	ldr	r3, [pc, #564]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ea2:	61bb      	str	r3, [r7, #24]
      break;
 8005ea4:	e10e      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005ea6:	4b8d      	ldr	r3, [pc, #564]	@ (80060dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ea8:	61bb      	str	r3, [r7, #24]
      break;
 8005eaa:	e10b      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005eac:	4b8c      	ldr	r3, [pc, #560]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005eae:	61bb      	str	r3, [r7, #24]
      break;
 8005eb0:	e108      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005eb2:	4b88      	ldr	r3, [pc, #544]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005ebc:	4b85      	ldr	r3, [pc, #532]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec0:	091b      	lsrs	r3, r3, #4
 8005ec2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ec6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ec8:	4b82      	ldr	r3, [pc, #520]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005ed2:	4b80      	ldr	r3, [pc, #512]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed6:	08db      	lsrs	r3, r3, #3
 8005ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	fb02 f303 	mul.w	r3, r2, r3
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 80e1 	beq.w	80060b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	f000 8083 	beq.w	8006004 <HAL_RCC_GetSysClockFreq+0x204>
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	f200 80a1 	bhi.w	8006048 <HAL_RCC_GetSysClockFreq+0x248>
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <HAL_RCC_GetSysClockFreq+0x114>
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d056      	beq.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f12:	e099      	b.n	8006048 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f14:	4b6f      	ldr	r3, [pc, #444]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d02d      	beq.n	8005f7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f20:	4b6c      	ldr	r3, [pc, #432]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	08db      	lsrs	r3, r3, #3
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	4a6b      	ldr	r2, [pc, #428]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	ee07 3a90 	vmov	s15, r3
 8005f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4a:	4b62      	ldr	r3, [pc, #392]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f5e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80060e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005f7a:	e087      	b.n	800608c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f86:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80060e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f8e:	4b51      	ldr	r3, [pc, #324]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fa2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80060e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fbe:	e065      	b.n	800608c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80060ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd2:	4b40      	ldr	r3, [pc, #256]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fe6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80060e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006002:	e043      	b.n	800608c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80060f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006016:	4b2f      	ldr	r3, [pc, #188]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006026:	ed97 6a02 	vldr	s12, [r7, #8]
 800602a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80060e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800602e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800603a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006042:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006046:	e021      	b.n	800608c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006052:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80060ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8006056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605a:	4b1e      	ldr	r3, [pc, #120]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606a:	ed97 6a02 	vldr	s12, [r7, #8]
 800606e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80060e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800607e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800608a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800608c:	4b11      	ldr	r3, [pc, #68]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800608e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006090:	0a5b      	lsrs	r3, r3, #9
 8006092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006096:	3301      	adds	r3, #1
 8006098:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	ee07 3a90 	vmov	s15, r3
 80060a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b0:	ee17 3a90 	vmov	r3, s15
 80060b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80060b6:	e005      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	61bb      	str	r3, [r7, #24]
      break;
 80060bc:	e002      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80060be:	4b07      	ldr	r3, [pc, #28]	@ (80060dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060c0:	61bb      	str	r3, [r7, #24]
      break;
 80060c2:	bf00      	nop
  }

  return sysclockfreq;
 80060c4:	69bb      	ldr	r3, [r7, #24]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3724      	adds	r7, #36	@ 0x24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	58024400 	.word	0x58024400
 80060d8:	03d09000 	.word	0x03d09000
 80060dc:	003d0900 	.word	0x003d0900
 80060e0:	017d7840 	.word	0x017d7840
 80060e4:	46000000 	.word	0x46000000
 80060e8:	4c742400 	.word	0x4c742400
 80060ec:	4a742400 	.word	0x4a742400
 80060f0:	4bbebc20 	.word	0x4bbebc20

080060f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80060fa:	f7ff fe81 	bl	8005e00 <HAL_RCC_GetSysClockFreq>
 80060fe:	4602      	mov	r2, r0
 8006100:	4b10      	ldr	r3, [pc, #64]	@ (8006144 <HAL_RCC_GetHCLKFreq+0x50>)
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	0a1b      	lsrs	r3, r3, #8
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	490f      	ldr	r1, [pc, #60]	@ (8006148 <HAL_RCC_GetHCLKFreq+0x54>)
 800610c:	5ccb      	ldrb	r3, [r1, r3]
 800610e:	f003 031f 	and.w	r3, r3, #31
 8006112:	fa22 f303 	lsr.w	r3, r2, r3
 8006116:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006118:	4b0a      	ldr	r3, [pc, #40]	@ (8006144 <HAL_RCC_GetHCLKFreq+0x50>)
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	4a09      	ldr	r2, [pc, #36]	@ (8006148 <HAL_RCC_GetHCLKFreq+0x54>)
 8006122:	5cd3      	ldrb	r3, [r2, r3]
 8006124:	f003 031f 	and.w	r3, r3, #31
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	fa22 f303 	lsr.w	r3, r2, r3
 800612e:	4a07      	ldr	r2, [pc, #28]	@ (800614c <HAL_RCC_GetHCLKFreq+0x58>)
 8006130:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006132:	4a07      	ldr	r2, [pc, #28]	@ (8006150 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006138:	4b04      	ldr	r3, [pc, #16]	@ (800614c <HAL_RCC_GetHCLKFreq+0x58>)
 800613a:	681b      	ldr	r3, [r3, #0]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	58024400 	.word	0x58024400
 8006148:	08013288 	.word	0x08013288
 800614c:	2400000c 	.word	0x2400000c
 8006150:	24000008 	.word	0x24000008

08006154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006158:	f7ff ffcc 	bl	80060f4 <HAL_RCC_GetHCLKFreq>
 800615c:	4602      	mov	r2, r0
 800615e:	4b06      	ldr	r3, [pc, #24]	@ (8006178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	091b      	lsrs	r3, r3, #4
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	4904      	ldr	r1, [pc, #16]	@ (800617c <HAL_RCC_GetPCLK1Freq+0x28>)
 800616a:	5ccb      	ldrb	r3, [r1, r3]
 800616c:	f003 031f 	and.w	r3, r3, #31
 8006170:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006174:	4618      	mov	r0, r3
 8006176:	bd80      	pop	{r7, pc}
 8006178:	58024400 	.word	0x58024400
 800617c:	08013288 	.word	0x08013288

08006180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006184:	f7ff ffb6 	bl	80060f4 <HAL_RCC_GetHCLKFreq>
 8006188:	4602      	mov	r2, r0
 800618a:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	0a1b      	lsrs	r3, r3, #8
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	4904      	ldr	r1, [pc, #16]	@ (80061a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006196:	5ccb      	ldrb	r3, [r1, r3]
 8006198:	f003 031f 	and.w	r3, r3, #31
 800619c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	58024400 	.word	0x58024400
 80061a8:	08013288 	.word	0x08013288

080061ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061b0:	b0c6      	sub	sp, #280	@ 0x118
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061b8:	2300      	movs	r3, #0
 80061ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061be:	2300      	movs	r3, #0
 80061c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80061d0:	2500      	movs	r5, #0
 80061d2:	ea54 0305 	orrs.w	r3, r4, r5
 80061d6:	d049      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80061d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061e2:	d02f      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80061e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061e8:	d828      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80061ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061ee:	d01a      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80061f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061f4:	d822      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80061fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061fe:	d007      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006200:	e01c      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006202:	4bab      	ldr	r3, [pc, #684]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006206:	4aaa      	ldr	r2, [pc, #680]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800620c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800620e:	e01a      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006214:	3308      	adds	r3, #8
 8006216:	2102      	movs	r1, #2
 8006218:	4618      	mov	r0, r3
 800621a:	f001 fc25 	bl	8007a68 <RCCEx_PLL2_Config>
 800621e:	4603      	mov	r3, r0
 8006220:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006224:	e00f      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622a:	3328      	adds	r3, #40	@ 0x28
 800622c:	2102      	movs	r1, #2
 800622e:	4618      	mov	r0, r3
 8006230:	f001 fccc 	bl	8007bcc <RCCEx_PLL3_Config>
 8006234:	4603      	mov	r3, r0
 8006236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800623a:	e004      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006242:	e000      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006246:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10a      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800624e:	4b98      	ldr	r3, [pc, #608]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006252:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800625c:	4a94      	ldr	r2, [pc, #592]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800625e:	430b      	orrs	r3, r1
 8006260:	6513      	str	r3, [r2, #80]	@ 0x50
 8006262:	e003      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006264:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006268:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800626c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006278:	f04f 0900 	mov.w	r9, #0
 800627c:	ea58 0309 	orrs.w	r3, r8, r9
 8006280:	d047      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006288:	2b04      	cmp	r3, #4
 800628a:	d82a      	bhi.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800628c:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062a9 	.word	0x080062a9
 8006298:	080062b7 	.word	0x080062b7
 800629c:	080062cd 	.word	0x080062cd
 80062a0:	080062eb 	.word	0x080062eb
 80062a4:	080062eb 	.word	0x080062eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a8:	4b81      	ldr	r3, [pc, #516]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ac:	4a80      	ldr	r2, [pc, #512]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062b4:	e01a      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ba:	3308      	adds	r3, #8
 80062bc:	2100      	movs	r1, #0
 80062be:	4618      	mov	r0, r3
 80062c0:	f001 fbd2 	bl	8007a68 <RCCEx_PLL2_Config>
 80062c4:	4603      	mov	r3, r0
 80062c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062ca:	e00f      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d0:	3328      	adds	r3, #40	@ 0x28
 80062d2:	2100      	movs	r1, #0
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 fc79 	bl	8007bcc <RCCEx_PLL3_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062e0:	e004      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062e8:	e000      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80062ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062f4:	4b6e      	ldr	r3, [pc, #440]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062f8:	f023 0107 	bic.w	r1, r3, #7
 80062fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006302:	4a6b      	ldr	r2, [pc, #428]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006304:	430b      	orrs	r3, r1
 8006306:	6513      	str	r3, [r2, #80]	@ 0x50
 8006308:	e003      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800630e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800631e:	f04f 0b00 	mov.w	fp, #0
 8006322:	ea5a 030b 	orrs.w	r3, sl, fp
 8006326:	d05b      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006330:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006334:	d03b      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006336:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800633a:	d834      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800633c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006340:	d037      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006342:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006346:	d82e      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006348:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800634c:	d033      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800634e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006352:	d828      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006354:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006358:	d01a      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800635a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800635e:	d822      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006364:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006368:	d007      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800636a:	e01c      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800636c:	4b50      	ldr	r3, [pc, #320]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800636e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006370:	4a4f      	ldr	r2, [pc, #316]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006378:	e01e      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800637a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637e:	3308      	adds	r3, #8
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f001 fb70 	bl	8007a68 <RCCEx_PLL2_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800638e:	e013      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006394:	3328      	adds	r3, #40	@ 0x28
 8006396:	2100      	movs	r1, #0
 8006398:	4618      	mov	r0, r3
 800639a:	f001 fc17 	bl	8007bcc <RCCEx_PLL3_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063a4:	e008      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063ac:	e004      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80063ae:	bf00      	nop
 80063b0:	e002      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80063b2:	bf00      	nop
 80063b4:	e000      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80063b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10b      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063c0:	4b3b      	ldr	r3, [pc, #236]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80063c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80063d0:	4a37      	ldr	r2, [pc, #220]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063d2:	430b      	orrs	r3, r1
 80063d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80063d6:	e003      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80063ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80063f0:	2300      	movs	r3, #0
 80063f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80063fa:	460b      	mov	r3, r1
 80063fc:	4313      	orrs	r3, r2
 80063fe:	d05d      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006404:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006408:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800640c:	d03b      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800640e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006412:	d834      	bhi.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006414:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006418:	d037      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800641a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800641e:	d82e      	bhi.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006420:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006424:	d033      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006426:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800642a:	d828      	bhi.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800642c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006430:	d01a      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006436:	d822      	bhi.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800643c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006440:	d007      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006442:	e01c      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006444:	4b1a      	ldr	r3, [pc, #104]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006448:	4a19      	ldr	r2, [pc, #100]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800644a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800644e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006450:	e01e      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006456:	3308      	adds	r3, #8
 8006458:	2100      	movs	r1, #0
 800645a:	4618      	mov	r0, r3
 800645c:	f001 fb04 	bl	8007a68 <RCCEx_PLL2_Config>
 8006460:	4603      	mov	r3, r0
 8006462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006466:	e013      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646c:	3328      	adds	r3, #40	@ 0x28
 800646e:	2100      	movs	r1, #0
 8006470:	4618      	mov	r0, r3
 8006472:	f001 fbab 	bl	8007bcc <RCCEx_PLL3_Config>
 8006476:	4603      	mov	r3, r0
 8006478:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800647c:	e008      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006484:	e004      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006486:	bf00      	nop
 8006488:	e002      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800648e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006490:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10d      	bne.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006498:	4b05      	ldr	r3, [pc, #20]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800649a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800649c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80064a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80064a8:	4a01      	ldr	r2, [pc, #4]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064aa:	430b      	orrs	r3, r1
 80064ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80064ae:	e005      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80064b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80064c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80064cc:	2300      	movs	r3, #0
 80064ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80064d2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4313      	orrs	r3, r2
 80064da:	d03a      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80064dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064e2:	2b30      	cmp	r3, #48	@ 0x30
 80064e4:	d01f      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80064e6:	2b30      	cmp	r3, #48	@ 0x30
 80064e8:	d819      	bhi.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	d00c      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d815      	bhi.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d019      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80064f6:	2b10      	cmp	r3, #16
 80064f8:	d111      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064fa:	4baa      	ldr	r3, [pc, #680]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fe:	4aa9      	ldr	r2, [pc, #676]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006504:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006506:	e011      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650c:	3308      	adds	r3, #8
 800650e:	2102      	movs	r1, #2
 8006510:	4618      	mov	r0, r3
 8006512:	f001 faa9 	bl	8007a68 <RCCEx_PLL2_Config>
 8006516:	4603      	mov	r3, r0
 8006518:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800651c:	e006      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006524:	e002      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006526:	bf00      	nop
 8006528:	e000      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800652a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800652c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006534:	4b9b      	ldr	r3, [pc, #620]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006538:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006542:	4a98      	ldr	r2, [pc, #608]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006544:	430b      	orrs	r3, r1
 8006546:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006548:	e003      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800654e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800655e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006562:	2300      	movs	r3, #0
 8006564:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006568:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800656c:	460b      	mov	r3, r1
 800656e:	4313      	orrs	r3, r2
 8006570:	d051      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006578:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800657c:	d035      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800657e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006582:	d82e      	bhi.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006584:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006588:	d031      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x442>
 800658a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800658e:	d828      	bhi.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006594:	d01a      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800659a:	d822      	bhi.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80065a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065a4:	d007      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80065a6:	e01c      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a8:	4b7e      	ldr	r3, [pc, #504]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ac:	4a7d      	ldr	r2, [pc, #500]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065b4:	e01c      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ba:	3308      	adds	r3, #8
 80065bc:	2100      	movs	r1, #0
 80065be:	4618      	mov	r0, r3
 80065c0:	f001 fa52 	bl	8007a68 <RCCEx_PLL2_Config>
 80065c4:	4603      	mov	r3, r0
 80065c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065ca:	e011      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d0:	3328      	adds	r3, #40	@ 0x28
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f001 faf9 	bl	8007bcc <RCCEx_PLL3_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065e0:	e006      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065e8:	e002      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80065ea:	bf00      	nop
 80065ec:	e000      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80065ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80065f8:	4b6a      	ldr	r3, [pc, #424]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006606:	4a67      	ldr	r2, [pc, #412]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006608:	430b      	orrs	r3, r1
 800660a:	6513      	str	r3, [r2, #80]	@ 0x50
 800660c:	e003      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006612:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006622:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006626:	2300      	movs	r3, #0
 8006628:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800662c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006630:	460b      	mov	r3, r1
 8006632:	4313      	orrs	r3, r2
 8006634:	d053      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800663c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006640:	d033      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006642:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006646:	d82c      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006648:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800664c:	d02f      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x502>
 800664e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006652:	d826      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006654:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006658:	d02b      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800665a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800665e:	d820      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006660:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006664:	d012      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006666:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800666a:	d81a      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800666c:	2b00      	cmp	r3, #0
 800666e:	d022      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006674:	d115      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800667a:	3308      	adds	r3, #8
 800667c:	2101      	movs	r1, #1
 800667e:	4618      	mov	r0, r3
 8006680:	f001 f9f2 	bl	8007a68 <RCCEx_PLL2_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800668a:	e015      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006690:	3328      	adds	r3, #40	@ 0x28
 8006692:	2101      	movs	r1, #1
 8006694:	4618      	mov	r0, r3
 8006696:	f001 fa99 	bl	8007bcc <RCCEx_PLL3_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066a0:	e00a      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066a8:	e006      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066aa:	bf00      	nop
 80066ac:	e004      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066ae:	bf00      	nop
 80066b0:	e002      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066b2:	bf00      	nop
 80066b4:	e000      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80066c0:	4b38      	ldr	r3, [pc, #224]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ce:	4a35      	ldr	r2, [pc, #212]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066d0:	430b      	orrs	r3, r1
 80066d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80066d4:	e003      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80066de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80066ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066ee:	2300      	movs	r3, #0
 80066f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80066f8:	460b      	mov	r3, r1
 80066fa:	4313      	orrs	r3, r2
 80066fc:	d058      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80066fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006702:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006706:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800670a:	d033      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800670c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006710:	d82c      	bhi.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006716:	d02f      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800671c:	d826      	bhi.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800671e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006722:	d02b      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006724:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006728:	d820      	bhi.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800672a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800672e:	d012      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006734:	d81a      	bhi.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006736:	2b00      	cmp	r3, #0
 8006738:	d022      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800673a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800673e:	d115      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006744:	3308      	adds	r3, #8
 8006746:	2101      	movs	r1, #1
 8006748:	4618      	mov	r0, r3
 800674a:	f001 f98d 	bl	8007a68 <RCCEx_PLL2_Config>
 800674e:	4603      	mov	r3, r0
 8006750:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006754:	e015      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675a:	3328      	adds	r3, #40	@ 0x28
 800675c:	2101      	movs	r1, #1
 800675e:	4618      	mov	r0, r3
 8006760:	f001 fa34 	bl	8007bcc <RCCEx_PLL3_Config>
 8006764:	4603      	mov	r3, r0
 8006766:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800676a:	e00a      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006772:	e006      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006774:	bf00      	nop
 8006776:	e004      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006778:	bf00      	nop
 800677a:	e002      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800677c:	bf00      	nop
 800677e:	e000      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006782:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10e      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800678a:	4b06      	ldr	r3, [pc, #24]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800678c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800678e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006796:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800679a:	4a02      	ldr	r2, [pc, #8]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800679c:	430b      	orrs	r3, r1
 800679e:	6593      	str	r3, [r2, #88]	@ 0x58
 80067a0:	e006      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80067a2:	bf00      	nop
 80067a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80067bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067c0:	2300      	movs	r3, #0
 80067c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4313      	orrs	r3, r2
 80067ce:	d037      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80067d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067da:	d00e      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80067dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067e0:	d816      	bhi.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d018      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80067e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067ea:	d111      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ec:	4bc4      	ldr	r3, [pc, #784]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f0:	4ac3      	ldr	r2, [pc, #780]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067f8:	e00f      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fe:	3308      	adds	r3, #8
 8006800:	2101      	movs	r1, #1
 8006802:	4618      	mov	r0, r3
 8006804:	f001 f930 	bl	8007a68 <RCCEx_PLL2_Config>
 8006808:	4603      	mov	r3, r0
 800680a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800680e:	e004      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006816:	e000      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800681a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006822:	4bb7      	ldr	r3, [pc, #732]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006826:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800682a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006830:	4ab3      	ldr	r2, [pc, #716]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006832:	430b      	orrs	r3, r1
 8006834:	6513      	str	r3, [r2, #80]	@ 0x50
 8006836:	e003      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800683c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006848:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800684c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006850:	2300      	movs	r3, #0
 8006852:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006856:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800685a:	460b      	mov	r3, r1
 800685c:	4313      	orrs	r3, r2
 800685e:	d039      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006866:	2b03      	cmp	r3, #3
 8006868:	d81c      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800686a:	a201      	add	r2, pc, #4	@ (adr r2, 8006870 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800686c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006870:	080068ad 	.word	0x080068ad
 8006874:	08006881 	.word	0x08006881
 8006878:	0800688f 	.word	0x0800688f
 800687c:	080068ad 	.word	0x080068ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006880:	4b9f      	ldr	r3, [pc, #636]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006884:	4a9e      	ldr	r2, [pc, #632]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800688a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800688c:	e00f      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006892:	3308      	adds	r3, #8
 8006894:	2102      	movs	r1, #2
 8006896:	4618      	mov	r0, r3
 8006898:	f001 f8e6 	bl	8007a68 <RCCEx_PLL2_Config>
 800689c:	4603      	mov	r3, r0
 800689e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068a2:	e004      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068aa:	e000      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80068ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10a      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068b6:	4b92      	ldr	r3, [pc, #584]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ba:	f023 0103 	bic.w	r1, r3, #3
 80068be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068c4:	4a8e      	ldr	r2, [pc, #568]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068c6:	430b      	orrs	r3, r1
 80068c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068ca:	e003      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80068e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068e4:	2300      	movs	r3, #0
 80068e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f000 8099 	beq.w	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068f6:	4b83      	ldr	r3, [pc, #524]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a82      	ldr	r2, [pc, #520]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80068fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006900:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006902:	f7fc fa05 	bl	8002d10 <HAL_GetTick>
 8006906:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800690a:	e00b      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800690c:	f7fc fa00 	bl	8002d10 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b64      	cmp	r3, #100	@ 0x64
 800691a:	d903      	bls.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006922:	e005      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006924:	4b77      	ldr	r3, [pc, #476]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0ed      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006934:	2b00      	cmp	r3, #0
 8006936:	d173      	bne.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006938:	4b71      	ldr	r3, [pc, #452]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800693a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800693c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006940:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006944:	4053      	eors	r3, r2
 8006946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800694a:	2b00      	cmp	r3, #0
 800694c:	d015      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800694e:	4b6c      	ldr	r3, [pc, #432]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006956:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800695a:	4b69      	ldr	r3, [pc, #420]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800695e:	4a68      	ldr	r2, [pc, #416]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006964:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006966:	4b66      	ldr	r3, [pc, #408]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696a:	4a65      	ldr	r2, [pc, #404]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800696c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006970:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006972:	4a63      	ldr	r2, [pc, #396]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006974:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006978:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800697a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800697e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006986:	d118      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006988:	f7fc f9c2 	bl	8002d10 <HAL_GetTick>
 800698c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006990:	e00d      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006992:	f7fc f9bd 	bl	8002d10 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800699c:	1ad2      	subs	r2, r2, r3
 800699e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d903      	bls.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80069ac:	e005      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069ae:	4b54      	ldr	r3, [pc, #336]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0eb      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80069ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d129      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069d2:	d10e      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80069d4:	4b4a      	ldr	r3, [pc, #296]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069e4:	091a      	lsrs	r2, r3, #4
 80069e6:	4b48      	ldr	r3, [pc, #288]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	4a45      	ldr	r2, [pc, #276]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069ec:	430b      	orrs	r3, r1
 80069ee:	6113      	str	r3, [r2, #16]
 80069f0:	e005      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 80069f2:	4b43      	ldr	r3, [pc, #268]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	4a42      	ldr	r2, [pc, #264]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80069fc:	6113      	str	r3, [r2, #16]
 80069fe:	4b40      	ldr	r3, [pc, #256]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a00:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a0e:	4a3c      	ldr	r2, [pc, #240]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a10:	430b      	orrs	r3, r1
 8006a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a14:	e008      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006a1e:	e003      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a30:	f002 0301 	and.w	r3, r2, #1
 8006a34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a38:	2300      	movs	r3, #0
 8006a3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a3e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a42:	460b      	mov	r3, r1
 8006a44:	4313      	orrs	r3, r2
 8006a46:	f000 808f 	beq.w	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a50:	2b28      	cmp	r3, #40	@ 0x28
 8006a52:	d871      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006a54:	a201      	add	r2, pc, #4	@ (adr r2, 8006a5c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5a:	bf00      	nop
 8006a5c:	08006b41 	.word	0x08006b41
 8006a60:	08006b39 	.word	0x08006b39
 8006a64:	08006b39 	.word	0x08006b39
 8006a68:	08006b39 	.word	0x08006b39
 8006a6c:	08006b39 	.word	0x08006b39
 8006a70:	08006b39 	.word	0x08006b39
 8006a74:	08006b39 	.word	0x08006b39
 8006a78:	08006b39 	.word	0x08006b39
 8006a7c:	08006b0d 	.word	0x08006b0d
 8006a80:	08006b39 	.word	0x08006b39
 8006a84:	08006b39 	.word	0x08006b39
 8006a88:	08006b39 	.word	0x08006b39
 8006a8c:	08006b39 	.word	0x08006b39
 8006a90:	08006b39 	.word	0x08006b39
 8006a94:	08006b39 	.word	0x08006b39
 8006a98:	08006b39 	.word	0x08006b39
 8006a9c:	08006b23 	.word	0x08006b23
 8006aa0:	08006b39 	.word	0x08006b39
 8006aa4:	08006b39 	.word	0x08006b39
 8006aa8:	08006b39 	.word	0x08006b39
 8006aac:	08006b39 	.word	0x08006b39
 8006ab0:	08006b39 	.word	0x08006b39
 8006ab4:	08006b39 	.word	0x08006b39
 8006ab8:	08006b39 	.word	0x08006b39
 8006abc:	08006b41 	.word	0x08006b41
 8006ac0:	08006b39 	.word	0x08006b39
 8006ac4:	08006b39 	.word	0x08006b39
 8006ac8:	08006b39 	.word	0x08006b39
 8006acc:	08006b39 	.word	0x08006b39
 8006ad0:	08006b39 	.word	0x08006b39
 8006ad4:	08006b39 	.word	0x08006b39
 8006ad8:	08006b39 	.word	0x08006b39
 8006adc:	08006b41 	.word	0x08006b41
 8006ae0:	08006b39 	.word	0x08006b39
 8006ae4:	08006b39 	.word	0x08006b39
 8006ae8:	08006b39 	.word	0x08006b39
 8006aec:	08006b39 	.word	0x08006b39
 8006af0:	08006b39 	.word	0x08006b39
 8006af4:	08006b39 	.word	0x08006b39
 8006af8:	08006b39 	.word	0x08006b39
 8006afc:	08006b41 	.word	0x08006b41
 8006b00:	58024400 	.word	0x58024400
 8006b04:	58024800 	.word	0x58024800
 8006b08:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b10:	3308      	adds	r3, #8
 8006b12:	2101      	movs	r1, #1
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 ffa7 	bl	8007a68 <RCCEx_PLL2_Config>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b20:	e00f      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b26:	3328      	adds	r3, #40	@ 0x28
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 f84e 	bl	8007bcc <RCCEx_PLL3_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b36:	e004      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b3e:	e000      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10a      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b4a:	4bbf      	ldr	r3, [pc, #764]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b4e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b58:	4abb      	ldr	r2, [pc, #748]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b5a:	430b      	orrs	r3, r1
 8006b5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b5e:	e003      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f002 0302 	and.w	r3, r2, #2
 8006b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4313      	orrs	r3, r2
 8006b86:	d041      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b8e:	2b05      	cmp	r3, #5
 8006b90:	d824      	bhi.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006b92:	a201      	add	r2, pc, #4	@ (adr r2, 8006b98 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006be5 	.word	0x08006be5
 8006b9c:	08006bb1 	.word	0x08006bb1
 8006ba0:	08006bc7 	.word	0x08006bc7
 8006ba4:	08006be5 	.word	0x08006be5
 8006ba8:	08006be5 	.word	0x08006be5
 8006bac:	08006be5 	.word	0x08006be5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 ff55 	bl	8007a68 <RCCEx_PLL2_Config>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006bc4:	e00f      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bca:	3328      	adds	r3, #40	@ 0x28
 8006bcc:	2101      	movs	r1, #1
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fffc 	bl	8007bcc <RCCEx_PLL3_Config>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006bda:	e004      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006be2:	e000      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006be6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006bee:	4b96      	ldr	r3, [pc, #600]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf2:	f023 0107 	bic.w	r1, r3, #7
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bfc:	4a92      	ldr	r2, [pc, #584]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006bfe:	430b      	orrs	r3, r1
 8006c00:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c02:	e003      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	f002 0304 	and.w	r3, r2, #4
 8006c18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c22:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c26:	460b      	mov	r3, r1
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	d044      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c34:	2b05      	cmp	r3, #5
 8006c36:	d825      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006c38:	a201      	add	r2, pc, #4	@ (adr r2, 8006c40 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006c8d 	.word	0x08006c8d
 8006c44:	08006c59 	.word	0x08006c59
 8006c48:	08006c6f 	.word	0x08006c6f
 8006c4c:	08006c8d 	.word	0x08006c8d
 8006c50:	08006c8d 	.word	0x08006c8d
 8006c54:	08006c8d 	.word	0x08006c8d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5c:	3308      	adds	r3, #8
 8006c5e:	2101      	movs	r1, #1
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 ff01 	bl	8007a68 <RCCEx_PLL2_Config>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c6c:	e00f      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c72:	3328      	adds	r3, #40	@ 0x28
 8006c74:	2101      	movs	r1, #1
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 ffa8 	bl	8007bcc <RCCEx_PLL3_Config>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c82:	e004      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c8a:	e000      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10b      	bne.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c96:	4b6c      	ldr	r3, [pc, #432]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c9a:	f023 0107 	bic.w	r1, r3, #7
 8006c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ca6:	4a68      	ldr	r2, [pc, #416]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cac:	e003      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	f002 0320 	and.w	r3, r2, #32
 8006cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ccc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	d055      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ce2:	d033      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ce8:	d82c      	bhi.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cee:	d02f      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf4:	d826      	bhi.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006cf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006cfa:	d02b      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006cfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d00:	d820      	bhi.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d06:	d012      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d0c:	d81a      	bhi.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d022      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d16:	d115      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	2100      	movs	r1, #0
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fea1 	bl	8007a68 <RCCEx_PLL2_Config>
 8006d26:	4603      	mov	r3, r0
 8006d28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d2c:	e015      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d32:	3328      	adds	r3, #40	@ 0x28
 8006d34:	2102      	movs	r1, #2
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 ff48 	bl	8007bcc <RCCEx_PLL3_Config>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d42:	e00a      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d4a:	e006      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d4c:	bf00      	nop
 8006d4e:	e004      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d50:	bf00      	nop
 8006d52:	e002      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d54:	bf00      	nop
 8006d56:	e000      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10b      	bne.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d62:	4b39      	ldr	r3, [pc, #228]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d66:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d72:	4a35      	ldr	r2, [pc, #212]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d74:	430b      	orrs	r3, r1
 8006d76:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d78:	e003      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006d8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d92:	2300      	movs	r3, #0
 8006d94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d98:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	d058      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006daa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006dae:	d033      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006db0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006db4:	d82c      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dba:	d02f      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc0:	d826      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006dc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dc6:	d02b      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006dc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dcc:	d820      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006dce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dd2:	d012      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006dd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dd8:	d81a      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d022      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de2:	d115      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de8:	3308      	adds	r3, #8
 8006dea:	2100      	movs	r1, #0
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fe3b 	bl	8007a68 <RCCEx_PLL2_Config>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006df8:	e015      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfe:	3328      	adds	r3, #40	@ 0x28
 8006e00:	2102      	movs	r1, #2
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fee2 	bl	8007bcc <RCCEx_PLL3_Config>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e0e:	e00a      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e16:	e006      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e18:	bf00      	nop
 8006e1a:	e004      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e1c:	bf00      	nop
 8006e1e:	e002      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e20:	bf00      	nop
 8006e22:	e000      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10e      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e2e:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e32:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e3e:	4a02      	ldr	r2, [pc, #8]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e40:	430b      	orrs	r3, r1
 8006e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e44:	e006      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006e46:	bf00      	nop
 8006e48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006e60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e64:	2300      	movs	r3, #0
 8006e66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4313      	orrs	r3, r2
 8006e72:	d055      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e7c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e80:	d033      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006e82:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e86:	d82c      	bhi.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e8c:	d02f      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006e8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e92:	d826      	bhi.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006e94:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e98:	d02b      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006e9a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e9e:	d820      	bhi.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ea0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ea4:	d012      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006ea6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eaa:	d81a      	bhi.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d022      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eb4:	d115      	bne.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eba:	3308      	adds	r3, #8
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fdd2 	bl	8007a68 <RCCEx_PLL2_Config>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006eca:	e015      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed0:	3328      	adds	r3, #40	@ 0x28
 8006ed2:	2102      	movs	r1, #2
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fe79 	bl	8007bcc <RCCEx_PLL3_Config>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ee0:	e00a      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ee8:	e006      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006eea:	bf00      	nop
 8006eec:	e004      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006eee:	bf00      	nop
 8006ef0:	e002      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006ef2:	bf00      	nop
 8006ef4:	e000      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f00:	4ba0      	ldr	r3, [pc, #640]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f04:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f10:	4a9c      	ldr	r2, [pc, #624]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f12:	430b      	orrs	r3, r1
 8006f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f16:	e003      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f28:	f002 0308 	and.w	r3, r2, #8
 8006f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f30:	2300      	movs	r3, #0
 8006f32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f36:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	d01e      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f4c:	d10c      	bne.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f52:	3328      	adds	r3, #40	@ 0x28
 8006f54:	2102      	movs	r1, #2
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fe38 	bl	8007bcc <RCCEx_PLL3_Config>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006f68:	4b86      	ldr	r3, [pc, #536]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f6c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f78:	4a82      	ldr	r2, [pc, #520]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f7a:	430b      	orrs	r3, r1
 8006f7c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f002 0310 	and.w	r3, r2, #16
 8006f8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f94:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	d01e      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006faa:	d10c      	bne.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb0:	3328      	adds	r3, #40	@ 0x28
 8006fb2:	2102      	movs	r1, #2
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fe09 	bl	8007bcc <RCCEx_PLL3_Config>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fd6:	4a6b      	ldr	r2, [pc, #428]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006fe8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fea:	2300      	movs	r3, #0
 8006fec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006fee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	d03e      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007000:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007004:	d022      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007006:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800700a:	d81b      	bhi.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007014:	d00b      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007016:	e015      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701c:	3308      	adds	r3, #8
 800701e:	2100      	movs	r1, #0
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fd21 	bl	8007a68 <RCCEx_PLL2_Config>
 8007026:	4603      	mov	r3, r0
 8007028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800702c:	e00f      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800702e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007032:	3328      	adds	r3, #40	@ 0x28
 8007034:	2102      	movs	r1, #2
 8007036:	4618      	mov	r0, r3
 8007038:	f000 fdc8 	bl	8007bcc <RCCEx_PLL3_Config>
 800703c:	4603      	mov	r3, r0
 800703e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007042:	e004      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800704a:	e000      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800704c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800704e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10b      	bne.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007056:	4b4b      	ldr	r3, [pc, #300]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800705a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800705e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007062:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007066:	4a47      	ldr	r2, [pc, #284]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007068:	430b      	orrs	r3, r1
 800706a:	6593      	str	r3, [r2, #88]	@ 0x58
 800706c:	e003      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800706e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007072:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007082:	673b      	str	r3, [r7, #112]	@ 0x70
 8007084:	2300      	movs	r3, #0
 8007086:	677b      	str	r3, [r7, #116]	@ 0x74
 8007088:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800708c:	460b      	mov	r3, r1
 800708e:	4313      	orrs	r3, r2
 8007090:	d03b      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800709a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800709e:	d01f      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80070a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070a4:	d818      	bhi.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80070a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070aa:	d003      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80070ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070b0:	d007      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80070b2:	e011      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070b4:	4b33      	ldr	r3, [pc, #204]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b8:	4a32      	ldr	r2, [pc, #200]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80070c0:	e00f      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c6:	3328      	adds	r3, #40	@ 0x28
 80070c8:	2101      	movs	r1, #1
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fd7e 	bl	8007bcc <RCCEx_PLL3_Config>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80070d6:	e004      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070de:	e000      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80070e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10b      	bne.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070ea:	4b26      	ldr	r3, [pc, #152]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80070f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070fa:	4a22      	ldr	r2, [pc, #136]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070fc:	430b      	orrs	r3, r1
 80070fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8007100:	e003      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007102:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007106:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800710a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007116:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007118:	2300      	movs	r3, #0
 800711a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800711c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007120:	460b      	mov	r3, r1
 8007122:	4313      	orrs	r3, r2
 8007124:	d034      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007134:	d007      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007136:	e011      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007138:	4b12      	ldr	r3, [pc, #72]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800713a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713c:	4a11      	ldr	r2, [pc, #68]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800713e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007142:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007144:	e00e      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800714a:	3308      	adds	r3, #8
 800714c:	2102      	movs	r1, #2
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fc8a 	bl	8007a68 <RCCEx_PLL2_Config>
 8007154:	4603      	mov	r3, r0
 8007156:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800715a:	e003      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10d      	bne.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800716c:	4b05      	ldr	r3, [pc, #20]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800716e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007170:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800717a:	4a02      	ldr	r2, [pc, #8]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800717c:	430b      	orrs	r3, r1
 800717e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007180:	e006      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007182:	bf00      	nop
 8007184:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007188:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800718c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800719c:	663b      	str	r3, [r7, #96]	@ 0x60
 800719e:	2300      	movs	r3, #0
 80071a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80071a2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80071a6:	460b      	mov	r3, r1
 80071a8:	4313      	orrs	r3, r2
 80071aa:	d00c      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b0:	3328      	adds	r3, #40	@ 0x28
 80071b2:	2102      	movs	r1, #2
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 fd09 	bl	8007bcc <RCCEx_PLL3_Config>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80071c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80071d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071d4:	2300      	movs	r3, #0
 80071d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071d8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80071dc:	460b      	mov	r3, r1
 80071de:	4313      	orrs	r3, r2
 80071e0:	d036      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80071e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071ec:	d018      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80071ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071f2:	d811      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80071f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071f8:	d014      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80071fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071fe:	d80b      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007200:	2b00      	cmp	r3, #0
 8007202:	d011      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007208:	d106      	bne.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800720a:	4bb7      	ldr	r3, [pc, #732]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800720c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720e:	4ab6      	ldr	r2, [pc, #728]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007214:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007216:	e008      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800721e:	e004      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007220:	bf00      	nop
 8007222:	e002      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007224:	bf00      	nop
 8007226:	e000      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800722a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10a      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007232:	4bad      	ldr	r3, [pc, #692]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007236:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800723a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007240:	4aa9      	ldr	r2, [pc, #676]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007242:	430b      	orrs	r3, r1
 8007244:	6553      	str	r3, [r2, #84]	@ 0x54
 8007246:	e003      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007248:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800724c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800725c:	653b      	str	r3, [r7, #80]	@ 0x50
 800725e:	2300      	movs	r3, #0
 8007260:	657b      	str	r3, [r7, #84]	@ 0x54
 8007262:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007266:	460b      	mov	r3, r1
 8007268:	4313      	orrs	r3, r2
 800726a:	d009      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800726c:	4b9e      	ldr	r3, [pc, #632]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800726e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007270:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800727a:	4a9b      	ldr	r2, [pc, #620]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800727c:	430b      	orrs	r3, r1
 800727e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800728c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800728e:	2300      	movs	r3, #0
 8007290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007292:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007296:	460b      	mov	r3, r1
 8007298:	4313      	orrs	r3, r2
 800729a:	d009      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800729c:	4b92      	ldr	r3, [pc, #584]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800729e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072a0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80072a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072aa:	4a8f      	ldr	r2, [pc, #572]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072ac:	430b      	orrs	r3, r1
 80072ae:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80072b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80072bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80072be:	2300      	movs	r3, #0
 80072c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80072c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80072c6:	460b      	mov	r3, r1
 80072c8:	4313      	orrs	r3, r2
 80072ca:	d00e      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072cc:	4b86      	ldr	r3, [pc, #536]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	4a85      	ldr	r2, [pc, #532]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072d6:	6113      	str	r3, [r2, #16]
 80072d8:	4b83      	ldr	r3, [pc, #524]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072da:	6919      	ldr	r1, [r3, #16]
 80072dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072e4:	4a80      	ldr	r2, [pc, #512]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072e6:	430b      	orrs	r3, r1
 80072e8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80072ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80072f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072f8:	2300      	movs	r3, #0
 80072fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007300:	460b      	mov	r3, r1
 8007302:	4313      	orrs	r3, r2
 8007304:	d009      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007306:	4b78      	ldr	r3, [pc, #480]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800730a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800730e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007314:	4a74      	ldr	r2, [pc, #464]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007316:	430b      	orrs	r3, r1
 8007318:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800731a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007326:	633b      	str	r3, [r7, #48]	@ 0x30
 8007328:	2300      	movs	r3, #0
 800732a:	637b      	str	r3, [r7, #52]	@ 0x34
 800732c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007330:	460b      	mov	r3, r1
 8007332:	4313      	orrs	r3, r2
 8007334:	d00a      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007336:	4b6c      	ldr	r3, [pc, #432]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800733a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800733e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007346:	4a68      	ldr	r2, [pc, #416]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007348:	430b      	orrs	r3, r1
 800734a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800734c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	2100      	movs	r1, #0
 8007356:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800735e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007362:	460b      	mov	r3, r1
 8007364:	4313      	orrs	r3, r2
 8007366:	d011      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736c:	3308      	adds	r3, #8
 800736e:	2100      	movs	r1, #0
 8007370:	4618      	mov	r0, r3
 8007372:	f000 fb79 	bl	8007a68 <RCCEx_PLL2_Config>
 8007376:	4603      	mov	r3, r0
 8007378:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800737c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800738c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	2100      	movs	r1, #0
 8007396:	6239      	str	r1, [r7, #32]
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	627b      	str	r3, [r7, #36]	@ 0x24
 800739e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80073a2:	460b      	mov	r3, r1
 80073a4:	4313      	orrs	r3, r2
 80073a6:	d011      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ac:	3308      	adds	r3, #8
 80073ae:	2101      	movs	r1, #1
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 fb59 	bl	8007a68 <RCCEx_PLL2_Config>
 80073b6:	4603      	mov	r3, r0
 80073b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80073bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80073cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	2100      	movs	r1, #0
 80073d6:	61b9      	str	r1, [r7, #24]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	61fb      	str	r3, [r7, #28]
 80073de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80073e2:	460b      	mov	r3, r1
 80073e4:	4313      	orrs	r3, r2
 80073e6:	d011      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ec:	3308      	adds	r3, #8
 80073ee:	2102      	movs	r1, #2
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fb39 	bl	8007a68 <RCCEx_PLL2_Config>
 80073f6:	4603      	mov	r3, r0
 80073f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80073fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007408:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800740c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007414:	2100      	movs	r1, #0
 8007416:	6139      	str	r1, [r7, #16]
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	617b      	str	r3, [r7, #20]
 800741e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007422:	460b      	mov	r3, r1
 8007424:	4313      	orrs	r3, r2
 8007426:	d011      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800742c:	3328      	adds	r3, #40	@ 0x28
 800742e:	2100      	movs	r1, #0
 8007430:	4618      	mov	r0, r3
 8007432:	f000 fbcb 	bl	8007bcc <RCCEx_PLL3_Config>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800743c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007444:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007448:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800744c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	2100      	movs	r1, #0
 8007456:	60b9      	str	r1, [r7, #8]
 8007458:	f003 0310 	and.w	r3, r3, #16
 800745c:	60fb      	str	r3, [r7, #12]
 800745e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007462:	460b      	mov	r3, r1
 8007464:	4313      	orrs	r3, r2
 8007466:	d011      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800746c:	3328      	adds	r3, #40	@ 0x28
 800746e:	2101      	movs	r1, #1
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fbab 	bl	8007bcc <RCCEx_PLL3_Config>
 8007476:	4603      	mov	r3, r0
 8007478:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800747c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007484:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007488:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800748c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	2100      	movs	r1, #0
 8007496:	6039      	str	r1, [r7, #0]
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	607b      	str	r3, [r7, #4]
 800749e:	e9d7 1200 	ldrd	r1, r2, [r7]
 80074a2:	460b      	mov	r3, r1
 80074a4:	4313      	orrs	r3, r2
 80074a6:	d011      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ac:	3328      	adds	r3, #40	@ 0x28
 80074ae:	2102      	movs	r1, #2
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 fb8b 	bl	8007bcc <RCCEx_PLL3_Config>
 80074b6:	4603      	mov	r3, r0
 80074b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80074bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80074cc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	e000      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
}
 80074da:	4618      	mov	r0, r3
 80074dc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80074e0:	46bd      	mov	sp, r7
 80074e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074e6:	bf00      	nop
 80074e8:	58024400 	.word	0x58024400

080074ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80074f0:	f7fe fe00 	bl	80060f4 <HAL_RCC_GetHCLKFreq>
 80074f4:	4602      	mov	r2, r0
 80074f6:	4b06      	ldr	r3, [pc, #24]	@ (8007510 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	091b      	lsrs	r3, r3, #4
 80074fc:	f003 0307 	and.w	r3, r3, #7
 8007500:	4904      	ldr	r1, [pc, #16]	@ (8007514 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007502:	5ccb      	ldrb	r3, [r1, r3]
 8007504:	f003 031f 	and.w	r3, r3, #31
 8007508:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800750c:	4618      	mov	r0, r3
 800750e:	bd80      	pop	{r7, pc}
 8007510:	58024400 	.word	0x58024400
 8007514:	08013288 	.word	0x08013288

08007518 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007518:	b480      	push	{r7}
 800751a:	b089      	sub	sp, #36	@ 0x24
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007520:	4ba1      	ldr	r3, [pc, #644]	@ (80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007524:	f003 0303 	and.w	r3, r3, #3
 8007528:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800752a:	4b9f      	ldr	r3, [pc, #636]	@ (80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800752c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752e:	0b1b      	lsrs	r3, r3, #12
 8007530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007534:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007536:	4b9c      	ldr	r3, [pc, #624]	@ (80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753a:	091b      	lsrs	r3, r3, #4
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007542:	4b99      	ldr	r3, [pc, #612]	@ (80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007546:	08db      	lsrs	r3, r3, #3
 8007548:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	fb02 f303 	mul.w	r3, r2, r3
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 8111 	beq.w	8007788 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	2b02      	cmp	r3, #2
 800756a:	f000 8083 	beq.w	8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	2b02      	cmp	r3, #2
 8007572:	f200 80a1 	bhi.w	80076b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d056      	beq.n	8007630 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007582:	e099      	b.n	80076b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007584:	4b88      	ldr	r3, [pc, #544]	@ (80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0320 	and.w	r3, r3, #32
 800758c:	2b00      	cmp	r3, #0
 800758e:	d02d      	beq.n	80075ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007590:	4b85      	ldr	r3, [pc, #532]	@ (80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	08db      	lsrs	r3, r3, #3
 8007596:	f003 0303 	and.w	r3, r3, #3
 800759a:	4a84      	ldr	r2, [pc, #528]	@ (80077ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800759c:	fa22 f303 	lsr.w	r3, r2, r3
 80075a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	ee07 3a90 	vmov	s15, r3
 80075a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ba:	4b7b      	ldr	r3, [pc, #492]	@ (80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c2:	ee07 3a90 	vmov	s15, r3
 80075c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80077b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075ea:	e087      	b.n	80076fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	ee07 3a90 	vmov	s15, r3
 80075f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80077b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80075fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075fe:	4b6a      	ldr	r3, [pc, #424]	@ (80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800760e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007612:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80077b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800761a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800761e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800762a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800762e:	e065      	b.n	80076fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80077b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800763e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007642:	4b59      	ldr	r3, [pc, #356]	@ (80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007652:	ed97 6a03 	vldr	s12, [r7, #12]
 8007656:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80077b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800765a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800765e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800766a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007672:	e043      	b.n	80076fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007686:	4b48      	ldr	r3, [pc, #288]	@ (80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768e:	ee07 3a90 	vmov	s15, r3
 8007692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007696:	ed97 6a03 	vldr	s12, [r7, #12]
 800769a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80077b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800769e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076b6:	e021      	b.n	80076fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80077b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ca:	4b37      	ldr	r3, [pc, #220]	@ (80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076da:	ed97 6a03 	vldr	s12, [r7, #12]
 80076de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80077b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80076fc:	4b2a      	ldr	r3, [pc, #168]	@ (80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007700:	0a5b      	lsrs	r3, r3, #9
 8007702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007712:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007716:	edd7 6a07 	vldr	s13, [r7, #28]
 800771a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800771e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007722:	ee17 2a90 	vmov	r2, s15
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800772a:	4b1f      	ldr	r3, [pc, #124]	@ (80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800772c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800772e:	0c1b      	lsrs	r3, r3, #16
 8007730:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007734:	ee07 3a90 	vmov	s15, r3
 8007738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007740:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007744:	edd7 6a07 	vldr	s13, [r7, #28]
 8007748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800774c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007750:	ee17 2a90 	vmov	r2, s15
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007758:	4b13      	ldr	r3, [pc, #76]	@ (80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800775a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775c:	0e1b      	lsrs	r3, r3, #24
 800775e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800776e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007772:	edd7 6a07 	vldr	s13, [r7, #28]
 8007776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800777a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800777e:	ee17 2a90 	vmov	r2, s15
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007786:	e008      	b.n	800779a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	609a      	str	r2, [r3, #8]
}
 800779a:	bf00      	nop
 800779c:	3724      	adds	r7, #36	@ 0x24
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	58024400 	.word	0x58024400
 80077ac:	03d09000 	.word	0x03d09000
 80077b0:	46000000 	.word	0x46000000
 80077b4:	4c742400 	.word	0x4c742400
 80077b8:	4a742400 	.word	0x4a742400
 80077bc:	4bbebc20 	.word	0x4bbebc20

080077c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b089      	sub	sp, #36	@ 0x24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077c8:	4ba1      	ldr	r3, [pc, #644]	@ (8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077cc:	f003 0303 	and.w	r3, r3, #3
 80077d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80077d2:	4b9f      	ldr	r3, [pc, #636]	@ (8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d6:	0d1b      	lsrs	r3, r3, #20
 80077d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80077de:	4b9c      	ldr	r3, [pc, #624]	@ (8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e2:	0a1b      	lsrs	r3, r3, #8
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80077ea:	4b99      	ldr	r3, [pc, #612]	@ (8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ee:	08db      	lsrs	r3, r3, #3
 80077f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	fb02 f303 	mul.w	r3, r2, r3
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007802:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 8111 	beq.w	8007a30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b02      	cmp	r3, #2
 8007812:	f000 8083 	beq.w	800791c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	2b02      	cmp	r3, #2
 800781a:	f200 80a1 	bhi.w	8007960 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d003      	beq.n	800782c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d056      	beq.n	80078d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800782a:	e099      	b.n	8007960 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800782c:	4b88      	ldr	r3, [pc, #544]	@ (8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0320 	and.w	r3, r3, #32
 8007834:	2b00      	cmp	r3, #0
 8007836:	d02d      	beq.n	8007894 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007838:	4b85      	ldr	r3, [pc, #532]	@ (8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	08db      	lsrs	r3, r3, #3
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	4a84      	ldr	r2, [pc, #528]	@ (8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007844:	fa22 f303 	lsr.w	r3, r2, r3
 8007848:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	ee07 3a90 	vmov	s15, r3
 8007850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007862:	4b7b      	ldr	r3, [pc, #492]	@ (8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786a:	ee07 3a90 	vmov	s15, r3
 800786e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007872:	ed97 6a03 	vldr	s12, [r7, #12]
 8007876:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800787a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800787e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800788a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800788e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007892:	e087      	b.n	80079a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	ee07 3a90 	vmov	s15, r3
 800789a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800789e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007a5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80078a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078d6:	e065      	b.n	80079a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80078e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ea:	4b59      	ldr	r3, [pc, #356]	@ (8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80078fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800790e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800791a:	e043      	b.n	80079a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007926:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800792a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800792e:	4b48      	ldr	r3, [pc, #288]	@ (8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800793e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007942:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800794e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800795e:	e021      	b.n	80079a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800796e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007972:	4b37      	ldr	r3, [pc, #220]	@ (8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007982:	ed97 6a03 	vldr	s12, [r7, #12]
 8007986:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800798a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800798e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800799e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80079a4:	4b2a      	ldr	r3, [pc, #168]	@ (8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a8:	0a5b      	lsrs	r3, r3, #9
 80079aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079ae:	ee07 3a90 	vmov	s15, r3
 80079b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079be:	edd7 6a07 	vldr	s13, [r7, #28]
 80079c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ca:	ee17 2a90 	vmov	r2, s15
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80079d2:	4b1f      	ldr	r3, [pc, #124]	@ (8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d6:	0c1b      	lsrs	r3, r3, #16
 80079d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079dc:	ee07 3a90 	vmov	s15, r3
 80079e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80079f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079f8:	ee17 2a90 	vmov	r2, s15
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007a00:	4b13      	ldr	r3, [pc, #76]	@ (8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a04:	0e1b      	lsrs	r3, r3, #24
 8007a06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a0a:	ee07 3a90 	vmov	s15, r3
 8007a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a26:	ee17 2a90 	vmov	r2, s15
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a2e:	e008      	b.n	8007a42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	609a      	str	r2, [r3, #8]
}
 8007a42:	bf00      	nop
 8007a44:	3724      	adds	r7, #36	@ 0x24
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	58024400 	.word	0x58024400
 8007a54:	03d09000 	.word	0x03d09000
 8007a58:	46000000 	.word	0x46000000
 8007a5c:	4c742400 	.word	0x4c742400
 8007a60:	4a742400 	.word	0x4a742400
 8007a64:	4bbebc20 	.word	0x4bbebc20

08007a68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a76:	4b53      	ldr	r3, [pc, #332]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	d101      	bne.n	8007a86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e099      	b.n	8007bba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a86:	4b4f      	ldr	r3, [pc, #316]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a4e      	ldr	r2, [pc, #312]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007a8c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a92:	f7fb f93d 	bl	8002d10 <HAL_GetTick>
 8007a96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a98:	e008      	b.n	8007aac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a9a:	f7fb f939 	bl	8002d10 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d901      	bls.n	8007aac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e086      	b.n	8007bba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007aac:	4b45      	ldr	r3, [pc, #276]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1f0      	bne.n	8007a9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ab8:	4b42      	ldr	r3, [pc, #264]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	031b      	lsls	r3, r3, #12
 8007ac6:	493f      	ldr	r1, [pc, #252]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	628b      	str	r3, [r1, #40]	@ 0x28
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	025b      	lsls	r3, r3, #9
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	041b      	lsls	r3, r3, #16
 8007aea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007aee:	431a      	orrs	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	061b      	lsls	r3, r3, #24
 8007af8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007afc:	4931      	ldr	r1, [pc, #196]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b02:	4b30      	ldr	r3, [pc, #192]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	492d      	ldr	r1, [pc, #180]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b10:	4313      	orrs	r3, r2
 8007b12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b14:	4b2b      	ldr	r3, [pc, #172]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b18:	f023 0220 	bic.w	r2, r3, #32
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	4928      	ldr	r1, [pc, #160]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b26:	4b27      	ldr	r3, [pc, #156]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2a:	4a26      	ldr	r2, [pc, #152]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b2c:	f023 0310 	bic.w	r3, r3, #16
 8007b30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b32:	4b24      	ldr	r3, [pc, #144]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b36:	4b24      	ldr	r3, [pc, #144]	@ (8007bc8 <RCCEx_PLL2_Config+0x160>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	69d2      	ldr	r2, [r2, #28]
 8007b3e:	00d2      	lsls	r2, r2, #3
 8007b40:	4920      	ldr	r1, [pc, #128]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b46:	4b1f      	ldr	r3, [pc, #124]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4a:	4a1e      	ldr	r2, [pc, #120]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b4c:	f043 0310 	orr.w	r3, r3, #16
 8007b50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d106      	bne.n	8007b66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b58:	4b1a      	ldr	r3, [pc, #104]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5c:	4a19      	ldr	r2, [pc, #100]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b64:	e00f      	b.n	8007b86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d106      	bne.n	8007b7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b6c:	4b15      	ldr	r3, [pc, #84]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b70:	4a14      	ldr	r2, [pc, #80]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b78:	e005      	b.n	8007b86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b7a:	4b12      	ldr	r3, [pc, #72]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7e:	4a11      	ldr	r2, [pc, #68]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b86:	4b0f      	ldr	r3, [pc, #60]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007b8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b92:	f7fb f8bd 	bl	8002d10 <HAL_GetTick>
 8007b96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b98:	e008      	b.n	8007bac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b9a:	f7fb f8b9 	bl	8002d10 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d901      	bls.n	8007bac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e006      	b.n	8007bba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bac:	4b05      	ldr	r3, [pc, #20]	@ (8007bc4 <RCCEx_PLL2_Config+0x15c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d0f0      	beq.n	8007b9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	58024400 	.word	0x58024400
 8007bc8:	ffff0007 	.word	0xffff0007

08007bcc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bda:	4b53      	ldr	r3, [pc, #332]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d101      	bne.n	8007bea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e099      	b.n	8007d1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007bea:	4b4f      	ldr	r3, [pc, #316]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a4e      	ldr	r2, [pc, #312]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007bf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bf6:	f7fb f88b 	bl	8002d10 <HAL_GetTick>
 8007bfa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bfc:	e008      	b.n	8007c10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bfe:	f7fb f887 	bl	8002d10 <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d901      	bls.n	8007c10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e086      	b.n	8007d1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c10:	4b45      	ldr	r3, [pc, #276]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1f0      	bne.n	8007bfe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c1c:	4b42      	ldr	r3, [pc, #264]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c20:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	051b      	lsls	r3, r3, #20
 8007c2a:	493f      	ldr	r1, [pc, #252]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	3b01      	subs	r3, #1
 8007c36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	025b      	lsls	r3, r3, #9
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	431a      	orrs	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	041b      	lsls	r3, r3, #16
 8007c4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c52:	431a      	orrs	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	061b      	lsls	r3, r3, #24
 8007c5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c60:	4931      	ldr	r1, [pc, #196]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c66:	4b30      	ldr	r3, [pc, #192]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	492d      	ldr	r1, [pc, #180]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c78:	4b2b      	ldr	r3, [pc, #172]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c7c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	4928      	ldr	r1, [pc, #160]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c8a:	4b27      	ldr	r3, [pc, #156]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c8e:	4a26      	ldr	r2, [pc, #152]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c96:	4b24      	ldr	r3, [pc, #144]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c9a:	4b24      	ldr	r3, [pc, #144]	@ (8007d2c <RCCEx_PLL3_Config+0x160>)
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	69d2      	ldr	r2, [r2, #28]
 8007ca2:	00d2      	lsls	r2, r2, #3
 8007ca4:	4920      	ldr	r1, [pc, #128]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007caa:	4b1f      	ldr	r3, [pc, #124]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cae:	4a1e      	ldr	r2, [pc, #120]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d106      	bne.n	8007cca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc0:	4a19      	ldr	r2, [pc, #100]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007cc2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007cc8:	e00f      	b.n	8007cea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d106      	bne.n	8007cde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007cd0:	4b15      	ldr	r3, [pc, #84]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd4:	4a14      	ldr	r2, [pc, #80]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007cd6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007cda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007cdc:	e005      	b.n	8007cea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007cde:	4b12      	ldr	r3, [pc, #72]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce2:	4a11      	ldr	r2, [pc, #68]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007ce4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007cea:	4b0f      	ldr	r3, [pc, #60]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a0e      	ldr	r2, [pc, #56]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cf6:	f7fb f80b 	bl	8002d10 <HAL_GetTick>
 8007cfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cfc:	e008      	b.n	8007d10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cfe:	f7fb f807 	bl	8002d10 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d901      	bls.n	8007d10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e006      	b.n	8007d1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d10:	4b05      	ldr	r3, [pc, #20]	@ (8007d28 <RCCEx_PLL3_Config+0x15c>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d0f0      	beq.n	8007cfe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	58024400 	.word	0x58024400
 8007d2c:	ffff0007 	.word	0xffff0007

08007d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d101      	bne.n	8007d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e049      	b.n	8007dd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d106      	bne.n	8007d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7fa f824 	bl	8001da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	f000 fb12 	bl	8008398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
	...

08007de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d001      	beq.n	8007df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e05e      	b.n	8007eb6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f042 0201 	orr.w	r2, r2, #1
 8007e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a2b      	ldr	r2, [pc, #172]	@ (8007ec4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d02c      	beq.n	8007e74 <HAL_TIM_Base_Start_IT+0x94>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e22:	d027      	beq.n	8007e74 <HAL_TIM_Base_Start_IT+0x94>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a27      	ldr	r2, [pc, #156]	@ (8007ec8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d022      	beq.n	8007e74 <HAL_TIM_Base_Start_IT+0x94>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a26      	ldr	r2, [pc, #152]	@ (8007ecc <HAL_TIM_Base_Start_IT+0xec>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d01d      	beq.n	8007e74 <HAL_TIM_Base_Start_IT+0x94>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a24      	ldr	r2, [pc, #144]	@ (8007ed0 <HAL_TIM_Base_Start_IT+0xf0>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d018      	beq.n	8007e74 <HAL_TIM_Base_Start_IT+0x94>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a23      	ldr	r2, [pc, #140]	@ (8007ed4 <HAL_TIM_Base_Start_IT+0xf4>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d013      	beq.n	8007e74 <HAL_TIM_Base_Start_IT+0x94>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a21      	ldr	r2, [pc, #132]	@ (8007ed8 <HAL_TIM_Base_Start_IT+0xf8>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d00e      	beq.n	8007e74 <HAL_TIM_Base_Start_IT+0x94>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a20      	ldr	r2, [pc, #128]	@ (8007edc <HAL_TIM_Base_Start_IT+0xfc>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d009      	beq.n	8007e74 <HAL_TIM_Base_Start_IT+0x94>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a1e      	ldr	r2, [pc, #120]	@ (8007ee0 <HAL_TIM_Base_Start_IT+0x100>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d004      	beq.n	8007e74 <HAL_TIM_Base_Start_IT+0x94>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee4 <HAL_TIM_Base_Start_IT+0x104>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d115      	bne.n	8007ea0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689a      	ldr	r2, [r3, #8]
 8007e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ee8 <HAL_TIM_Base_Start_IT+0x108>)
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b06      	cmp	r3, #6
 8007e84:	d015      	beq.n	8007eb2 <HAL_TIM_Base_Start_IT+0xd2>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e8c:	d011      	beq.n	8007eb2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f042 0201 	orr.w	r2, r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e9e:	e008      	b.n	8007eb2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f042 0201 	orr.w	r2, r2, #1
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	e000      	b.n	8007eb4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	40010000 	.word	0x40010000
 8007ec8:	40000400 	.word	0x40000400
 8007ecc:	40000800 	.word	0x40000800
 8007ed0:	40000c00 	.word	0x40000c00
 8007ed4:	40010400 	.word	0x40010400
 8007ed8:	40001800 	.word	0x40001800
 8007edc:	40014000 	.word	0x40014000
 8007ee0:	4000e000 	.word	0x4000e000
 8007ee4:	4000e400 	.word	0x4000e400
 8007ee8:	00010007 	.word	0x00010007

08007eec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0201 	bic.w	r2, r2, #1
 8007f02:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6a1a      	ldr	r2, [r3, #32]
 8007f0a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007f0e:	4013      	ands	r3, r2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10f      	bne.n	8007f34 <HAL_TIM_Base_Stop_IT+0x48>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6a1a      	ldr	r2, [r3, #32]
 8007f1a:	f240 4344 	movw	r3, #1092	@ 0x444
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d107      	bne.n	8007f34 <HAL_TIM_Base_Stop_IT+0x48>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 0201 	bic.w	r2, r2, #1
 8007f32:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f003 0302 	and.w	r3, r3, #2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d020      	beq.n	8007fae <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d01b      	beq.n	8007fae <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f06f 0202 	mvn.w	r2, #2
 8007f7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	f003 0303 	and.w	r3, r3, #3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f9e1 	bl	800835c <HAL_TIM_IC_CaptureCallback>
 8007f9a:	e005      	b.n	8007fa8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f9d3 	bl	8008348 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f9e4 	bl	8008370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d020      	beq.n	8007ffa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d01b      	beq.n	8007ffa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f06f 0204 	mvn.w	r2, #4
 8007fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d003      	beq.n	8007fe8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f9bb 	bl	800835c <HAL_TIM_IC_CaptureCallback>
 8007fe6:	e005      	b.n	8007ff4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f9ad 	bl	8008348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f9be 	bl	8008370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	f003 0308 	and.w	r3, r3, #8
 8008000:	2b00      	cmp	r3, #0
 8008002:	d020      	beq.n	8008046 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f003 0308 	and.w	r3, r3, #8
 800800a:	2b00      	cmp	r3, #0
 800800c:	d01b      	beq.n	8008046 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f06f 0208 	mvn.w	r2, #8
 8008016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2204      	movs	r2, #4
 800801c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69db      	ldr	r3, [r3, #28]
 8008024:	f003 0303 	and.w	r3, r3, #3
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f995 	bl	800835c <HAL_TIM_IC_CaptureCallback>
 8008032:	e005      	b.n	8008040 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f987 	bl	8008348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f998 	bl	8008370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f003 0310 	and.w	r3, r3, #16
 800804c:	2b00      	cmp	r3, #0
 800804e:	d020      	beq.n	8008092 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f003 0310 	and.w	r3, r3, #16
 8008056:	2b00      	cmp	r3, #0
 8008058:	d01b      	beq.n	8008092 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f06f 0210 	mvn.w	r2, #16
 8008062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2208      	movs	r2, #8
 8008068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008074:	2b00      	cmp	r3, #0
 8008076:	d003      	beq.n	8008080 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f96f 	bl	800835c <HAL_TIM_IC_CaptureCallback>
 800807e:	e005      	b.n	800808c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f961 	bl	8008348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f972 	bl	8008370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00c      	beq.n	80080b6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d007      	beq.n	80080b6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f06f 0201 	mvn.w	r2, #1
 80080ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7f9 fa89 	bl	80015c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d104      	bne.n	80080ca <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00c      	beq.n	80080e4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d007      	beq.n	80080e4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80080dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fb50 	bl	8008784 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00c      	beq.n	8008108 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d007      	beq.n	8008108 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fb48 	bl	8008798 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00c      	beq.n	800812c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008118:	2b00      	cmp	r3, #0
 800811a:	d007      	beq.n	800812c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f92c 	bl	8008384 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f003 0320 	and.w	r3, r3, #32
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00c      	beq.n	8008150 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f003 0320 	and.w	r3, r3, #32
 800813c:	2b00      	cmp	r3, #0
 800813e:	d007      	beq.n	8008150 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f06f 0220 	mvn.w	r2, #32
 8008148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fb10 	bl	8008770 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800816c:	2b01      	cmp	r3, #1
 800816e:	d101      	bne.n	8008174 <HAL_TIM_ConfigClockSource+0x1c>
 8008170:	2302      	movs	r3, #2
 8008172:	e0dc      	b.n	800832e <HAL_TIM_ConfigClockSource+0x1d6>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	4b6a      	ldr	r3, [pc, #424]	@ (8008338 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008190:	4013      	ands	r3, r2
 8008192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800819a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a64      	ldr	r2, [pc, #400]	@ (800833c <HAL_TIM_ConfigClockSource+0x1e4>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	f000 80a9 	beq.w	8008302 <HAL_TIM_ConfigClockSource+0x1aa>
 80081b0:	4a62      	ldr	r2, [pc, #392]	@ (800833c <HAL_TIM_ConfigClockSource+0x1e4>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	f200 80ae 	bhi.w	8008314 <HAL_TIM_ConfigClockSource+0x1bc>
 80081b8:	4a61      	ldr	r2, [pc, #388]	@ (8008340 <HAL_TIM_ConfigClockSource+0x1e8>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	f000 80a1 	beq.w	8008302 <HAL_TIM_ConfigClockSource+0x1aa>
 80081c0:	4a5f      	ldr	r2, [pc, #380]	@ (8008340 <HAL_TIM_ConfigClockSource+0x1e8>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	f200 80a6 	bhi.w	8008314 <HAL_TIM_ConfigClockSource+0x1bc>
 80081c8:	4a5e      	ldr	r2, [pc, #376]	@ (8008344 <HAL_TIM_ConfigClockSource+0x1ec>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	f000 8099 	beq.w	8008302 <HAL_TIM_ConfigClockSource+0x1aa>
 80081d0:	4a5c      	ldr	r2, [pc, #368]	@ (8008344 <HAL_TIM_ConfigClockSource+0x1ec>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	f200 809e 	bhi.w	8008314 <HAL_TIM_ConfigClockSource+0x1bc>
 80081d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081dc:	f000 8091 	beq.w	8008302 <HAL_TIM_ConfigClockSource+0x1aa>
 80081e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081e4:	f200 8096 	bhi.w	8008314 <HAL_TIM_ConfigClockSource+0x1bc>
 80081e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081ec:	f000 8089 	beq.w	8008302 <HAL_TIM_ConfigClockSource+0x1aa>
 80081f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081f4:	f200 808e 	bhi.w	8008314 <HAL_TIM_ConfigClockSource+0x1bc>
 80081f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081fc:	d03e      	beq.n	800827c <HAL_TIM_ConfigClockSource+0x124>
 80081fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008202:	f200 8087 	bhi.w	8008314 <HAL_TIM_ConfigClockSource+0x1bc>
 8008206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800820a:	f000 8086 	beq.w	800831a <HAL_TIM_ConfigClockSource+0x1c2>
 800820e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008212:	d87f      	bhi.n	8008314 <HAL_TIM_ConfigClockSource+0x1bc>
 8008214:	2b70      	cmp	r3, #112	@ 0x70
 8008216:	d01a      	beq.n	800824e <HAL_TIM_ConfigClockSource+0xf6>
 8008218:	2b70      	cmp	r3, #112	@ 0x70
 800821a:	d87b      	bhi.n	8008314 <HAL_TIM_ConfigClockSource+0x1bc>
 800821c:	2b60      	cmp	r3, #96	@ 0x60
 800821e:	d050      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x16a>
 8008220:	2b60      	cmp	r3, #96	@ 0x60
 8008222:	d877      	bhi.n	8008314 <HAL_TIM_ConfigClockSource+0x1bc>
 8008224:	2b50      	cmp	r3, #80	@ 0x50
 8008226:	d03c      	beq.n	80082a2 <HAL_TIM_ConfigClockSource+0x14a>
 8008228:	2b50      	cmp	r3, #80	@ 0x50
 800822a:	d873      	bhi.n	8008314 <HAL_TIM_ConfigClockSource+0x1bc>
 800822c:	2b40      	cmp	r3, #64	@ 0x40
 800822e:	d058      	beq.n	80082e2 <HAL_TIM_ConfigClockSource+0x18a>
 8008230:	2b40      	cmp	r3, #64	@ 0x40
 8008232:	d86f      	bhi.n	8008314 <HAL_TIM_ConfigClockSource+0x1bc>
 8008234:	2b30      	cmp	r3, #48	@ 0x30
 8008236:	d064      	beq.n	8008302 <HAL_TIM_ConfigClockSource+0x1aa>
 8008238:	2b30      	cmp	r3, #48	@ 0x30
 800823a:	d86b      	bhi.n	8008314 <HAL_TIM_ConfigClockSource+0x1bc>
 800823c:	2b20      	cmp	r3, #32
 800823e:	d060      	beq.n	8008302 <HAL_TIM_ConfigClockSource+0x1aa>
 8008240:	2b20      	cmp	r3, #32
 8008242:	d867      	bhi.n	8008314 <HAL_TIM_ConfigClockSource+0x1bc>
 8008244:	2b00      	cmp	r3, #0
 8008246:	d05c      	beq.n	8008302 <HAL_TIM_ConfigClockSource+0x1aa>
 8008248:	2b10      	cmp	r3, #16
 800824a:	d05a      	beq.n	8008302 <HAL_TIM_ConfigClockSource+0x1aa>
 800824c:	e062      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800825e:	f000 f9cb 	bl	80085f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008270:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	609a      	str	r2, [r3, #8]
      break;
 800827a:	e04f      	b.n	800831c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800828c:	f000 f9b4 	bl	80085f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689a      	ldr	r2, [r3, #8]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800829e:	609a      	str	r2, [r3, #8]
      break;
 80082a0:	e03c      	b.n	800831c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ae:	461a      	mov	r2, r3
 80082b0:	f000 f924 	bl	80084fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2150      	movs	r1, #80	@ 0x50
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 f97e 	bl	80085bc <TIM_ITRx_SetConfig>
      break;
 80082c0:	e02c      	b.n	800831c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082ce:	461a      	mov	r2, r3
 80082d0:	f000 f943 	bl	800855a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2160      	movs	r1, #96	@ 0x60
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 f96e 	bl	80085bc <TIM_ITRx_SetConfig>
      break;
 80082e0:	e01c      	b.n	800831c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ee:	461a      	mov	r2, r3
 80082f0:	f000 f904 	bl	80084fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2140      	movs	r1, #64	@ 0x40
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 f95e 	bl	80085bc <TIM_ITRx_SetConfig>
      break;
 8008300:	e00c      	b.n	800831c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4619      	mov	r1, r3
 800830c:	4610      	mov	r0, r2
 800830e:	f000 f955 	bl	80085bc <TIM_ITRx_SetConfig>
      break;
 8008312:	e003      	b.n	800831c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	73fb      	strb	r3, [r7, #15]
      break;
 8008318:	e000      	b.n	800831c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800831a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800832c:	7bfb      	ldrb	r3, [r7, #15]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	ffceff88 	.word	0xffceff88
 800833c:	00100040 	.word	0x00100040
 8008340:	00100030 	.word	0x00100030
 8008344:	00100020 	.word	0x00100020

08008348 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a4a      	ldr	r2, [pc, #296]	@ (80084d4 <TIM_Base_SetConfig+0x13c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d013      	beq.n	80083d8 <TIM_Base_SetConfig+0x40>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b6:	d00f      	beq.n	80083d8 <TIM_Base_SetConfig+0x40>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a47      	ldr	r2, [pc, #284]	@ (80084d8 <TIM_Base_SetConfig+0x140>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d00b      	beq.n	80083d8 <TIM_Base_SetConfig+0x40>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a46      	ldr	r2, [pc, #280]	@ (80084dc <TIM_Base_SetConfig+0x144>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d007      	beq.n	80083d8 <TIM_Base_SetConfig+0x40>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a45      	ldr	r2, [pc, #276]	@ (80084e0 <TIM_Base_SetConfig+0x148>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d003      	beq.n	80083d8 <TIM_Base_SetConfig+0x40>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a44      	ldr	r2, [pc, #272]	@ (80084e4 <TIM_Base_SetConfig+0x14c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d108      	bne.n	80083ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a39      	ldr	r2, [pc, #228]	@ (80084d4 <TIM_Base_SetConfig+0x13c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d027      	beq.n	8008442 <TIM_Base_SetConfig+0xaa>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083f8:	d023      	beq.n	8008442 <TIM_Base_SetConfig+0xaa>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a36      	ldr	r2, [pc, #216]	@ (80084d8 <TIM_Base_SetConfig+0x140>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d01f      	beq.n	8008442 <TIM_Base_SetConfig+0xaa>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a35      	ldr	r2, [pc, #212]	@ (80084dc <TIM_Base_SetConfig+0x144>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d01b      	beq.n	8008442 <TIM_Base_SetConfig+0xaa>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a34      	ldr	r2, [pc, #208]	@ (80084e0 <TIM_Base_SetConfig+0x148>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d017      	beq.n	8008442 <TIM_Base_SetConfig+0xaa>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a33      	ldr	r2, [pc, #204]	@ (80084e4 <TIM_Base_SetConfig+0x14c>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d013      	beq.n	8008442 <TIM_Base_SetConfig+0xaa>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a32      	ldr	r2, [pc, #200]	@ (80084e8 <TIM_Base_SetConfig+0x150>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00f      	beq.n	8008442 <TIM_Base_SetConfig+0xaa>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a31      	ldr	r2, [pc, #196]	@ (80084ec <TIM_Base_SetConfig+0x154>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d00b      	beq.n	8008442 <TIM_Base_SetConfig+0xaa>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a30      	ldr	r2, [pc, #192]	@ (80084f0 <TIM_Base_SetConfig+0x158>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d007      	beq.n	8008442 <TIM_Base_SetConfig+0xaa>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a2f      	ldr	r2, [pc, #188]	@ (80084f4 <TIM_Base_SetConfig+0x15c>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d003      	beq.n	8008442 <TIM_Base_SetConfig+0xaa>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a2e      	ldr	r2, [pc, #184]	@ (80084f8 <TIM_Base_SetConfig+0x160>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d108      	bne.n	8008454 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	4313      	orrs	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	4313      	orrs	r3, r2
 8008460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	689a      	ldr	r2, [r3, #8]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a16      	ldr	r2, [pc, #88]	@ (80084d4 <TIM_Base_SetConfig+0x13c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00f      	beq.n	80084a0 <TIM_Base_SetConfig+0x108>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a18      	ldr	r2, [pc, #96]	@ (80084e4 <TIM_Base_SetConfig+0x14c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00b      	beq.n	80084a0 <TIM_Base_SetConfig+0x108>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a17      	ldr	r2, [pc, #92]	@ (80084e8 <TIM_Base_SetConfig+0x150>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d007      	beq.n	80084a0 <TIM_Base_SetConfig+0x108>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a16      	ldr	r2, [pc, #88]	@ (80084ec <TIM_Base_SetConfig+0x154>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d003      	beq.n	80084a0 <TIM_Base_SetConfig+0x108>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a15      	ldr	r2, [pc, #84]	@ (80084f0 <TIM_Base_SetConfig+0x158>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d103      	bne.n	80084a8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	691a      	ldr	r2, [r3, #16]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d105      	bne.n	80084c6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	f023 0201 	bic.w	r2, r3, #1
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	611a      	str	r2, [r3, #16]
  }
}
 80084c6:	bf00      	nop
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	40010000 	.word	0x40010000
 80084d8:	40000400 	.word	0x40000400
 80084dc:	40000800 	.word	0x40000800
 80084e0:	40000c00 	.word	0x40000c00
 80084e4:	40010400 	.word	0x40010400
 80084e8:	40014000 	.word	0x40014000
 80084ec:	40014400 	.word	0x40014400
 80084f0:	40014800 	.word	0x40014800
 80084f4:	4000e000 	.word	0x4000e000
 80084f8:	4000e400 	.word	0x4000e400

080084fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	f023 0201 	bic.w	r2, r3, #1
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	011b      	lsls	r3, r3, #4
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	4313      	orrs	r3, r2
 8008530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f023 030a 	bic.w	r3, r3, #10
 8008538:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	4313      	orrs	r3, r2
 8008540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	621a      	str	r2, [r3, #32]
}
 800854e:	bf00      	nop
 8008550:	371c      	adds	r7, #28
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800855a:	b480      	push	{r7}
 800855c:	b087      	sub	sp, #28
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	f023 0210 	bic.w	r2, r3, #16
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008584:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	031b      	lsls	r3, r3, #12
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	4313      	orrs	r3, r2
 800858e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008596:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	011b      	lsls	r3, r3, #4
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	4313      	orrs	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	621a      	str	r2, [r3, #32]
}
 80085ae:	bf00      	nop
 80085b0:	371c      	adds	r7, #28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
	...

080085bc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	4b09      	ldr	r3, [pc, #36]	@ (80085f4 <TIM_ITRx_SetConfig+0x38>)
 80085d0:	4013      	ands	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	4313      	orrs	r3, r2
 80085da:	f043 0307 	orr.w	r3, r3, #7
 80085de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	609a      	str	r2, [r3, #8]
}
 80085e6:	bf00      	nop
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	ffcfff8f 	.word	0xffcfff8f

080085f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008612:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	021a      	lsls	r2, r3, #8
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	431a      	orrs	r2, r3
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4313      	orrs	r3, r2
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	4313      	orrs	r3, r2
 8008624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	609a      	str	r2, [r3, #8]
}
 800862c:	bf00      	nop
 800862e:	371c      	adds	r7, #28
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008648:	2b01      	cmp	r3, #1
 800864a:	d101      	bne.n	8008650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800864c:	2302      	movs	r3, #2
 800864e:	e077      	b.n	8008740 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a35      	ldr	r2, [pc, #212]	@ (800874c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d004      	beq.n	8008684 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a34      	ldr	r2, [pc, #208]	@ (8008750 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d108      	bne.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800868a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800869c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a25      	ldr	r2, [pc, #148]	@ (800874c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d02c      	beq.n	8008714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086c2:	d027      	beq.n	8008714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a22      	ldr	r2, [pc, #136]	@ (8008754 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d022      	beq.n	8008714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a21      	ldr	r2, [pc, #132]	@ (8008758 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d01d      	beq.n	8008714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a1f      	ldr	r2, [pc, #124]	@ (800875c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d018      	beq.n	8008714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a1a      	ldr	r2, [pc, #104]	@ (8008750 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d013      	beq.n	8008714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a1b      	ldr	r2, [pc, #108]	@ (8008760 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d00e      	beq.n	8008714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a1a      	ldr	r2, [pc, #104]	@ (8008764 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d009      	beq.n	8008714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a18      	ldr	r2, [pc, #96]	@ (8008768 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d004      	beq.n	8008714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a17      	ldr	r2, [pc, #92]	@ (800876c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d10c      	bne.n	800872e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800871a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	4313      	orrs	r3, r2
 8008724:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	40010000 	.word	0x40010000
 8008750:	40010400 	.word	0x40010400
 8008754:	40000400 	.word	0x40000400
 8008758:	40000800 	.word	0x40000800
 800875c:	40000c00 	.word	0x40000c00
 8008760:	40001800 	.word	0x40001800
 8008764:	40014000 	.word	0x40014000
 8008768:	4000e000 	.word	0x4000e000
 800876c:	4000e400 	.word	0x4000e400

08008770 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e042      	b.n	8008844 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d106      	bne.n	80087d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7f9 fe51 	bl	8002478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2224      	movs	r2, #36	@ 0x24
 80087da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f022 0201 	bic.w	r2, r2, #1
 80087ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d002      	beq.n	80087fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f001 fc10 	bl	800a01c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fda1 	bl	8009344 <UART_SetConfig>
 8008802:	4603      	mov	r3, r0
 8008804:	2b01      	cmp	r3, #1
 8008806:	d101      	bne.n	800880c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e01b      	b.n	8008844 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800881a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689a      	ldr	r2, [r3, #8]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800882a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0201 	orr.w	r2, r2, #1
 800883a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f001 fc8f 	bl	800a160 <UART_CheckIdleState>
 8008842:	4603      	mov	r3, r0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08a      	sub	sp, #40	@ 0x28
 8008850:	af02      	add	r7, sp, #8
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	603b      	str	r3, [r7, #0]
 8008858:	4613      	mov	r3, r2
 800885a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008862:	2b20      	cmp	r3, #32
 8008864:	d17b      	bne.n	800895e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <HAL_UART_Transmit+0x26>
 800886c:	88fb      	ldrh	r3, [r7, #6]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e074      	b.n	8008960 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2221      	movs	r2, #33	@ 0x21
 8008882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008886:	f7fa fa43 	bl	8002d10 <HAL_GetTick>
 800888a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	88fa      	ldrh	r2, [r7, #6]
 8008890:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	88fa      	ldrh	r2, [r7, #6]
 8008898:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088a4:	d108      	bne.n	80088b8 <HAL_UART_Transmit+0x6c>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d104      	bne.n	80088b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80088ae:	2300      	movs	r3, #0
 80088b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	61bb      	str	r3, [r7, #24]
 80088b6:	e003      	b.n	80088c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088bc:	2300      	movs	r3, #0
 80088be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088c0:	e030      	b.n	8008924 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2200      	movs	r2, #0
 80088ca:	2180      	movs	r1, #128	@ 0x80
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f001 fcf1 	bl	800a2b4 <UART_WaitOnFlagUntilTimeout>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d005      	beq.n	80088e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2220      	movs	r2, #32
 80088dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e03d      	b.n	8008960 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10b      	bne.n	8008902 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	3302      	adds	r3, #2
 80088fe:	61bb      	str	r3, [r7, #24]
 8008900:	e007      	b.n	8008912 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	781a      	ldrb	r2, [r3, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	3301      	adds	r3, #1
 8008910:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008918:	b29b      	uxth	r3, r3
 800891a:	3b01      	subs	r3, #1
 800891c:	b29a      	uxth	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800892a:	b29b      	uxth	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1c8      	bne.n	80088c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	2200      	movs	r2, #0
 8008938:	2140      	movs	r1, #64	@ 0x40
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f001 fcba 	bl	800a2b4 <UART_WaitOnFlagUntilTimeout>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2220      	movs	r2, #32
 800894a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e006      	b.n	8008960 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2220      	movs	r2, #32
 8008956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	e000      	b.n	8008960 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800895e:	2302      	movs	r3, #2
  }
}
 8008960:	4618      	mov	r0, r3
 8008962:	3720      	adds	r7, #32
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b08a      	sub	sp, #40	@ 0x28
 800896c:	af02      	add	r7, sp, #8
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	603b      	str	r3, [r7, #0]
 8008974:	4613      	mov	r3, r2
 8008976:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800897e:	2b20      	cmp	r3, #32
 8008980:	f040 80b5 	bne.w	8008aee <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d002      	beq.n	8008990 <HAL_UART_Receive+0x28>
 800898a:	88fb      	ldrh	r3, [r7, #6]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e0ad      	b.n	8008af0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2222      	movs	r2, #34	@ 0x22
 80089a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089aa:	f7fa f9b1 	bl	8002d10 <HAL_GetTick>
 80089ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	88fa      	ldrh	r2, [r7, #6]
 80089b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	88fa      	ldrh	r2, [r7, #6]
 80089bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089c8:	d10e      	bne.n	80089e8 <HAL_UART_Receive+0x80>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d105      	bne.n	80089de <HAL_UART_Receive+0x76>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80089d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80089dc:	e02d      	b.n	8008a3a <HAL_UART_Receive+0xd2>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	22ff      	movs	r2, #255	@ 0xff
 80089e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80089e6:	e028      	b.n	8008a3a <HAL_UART_Receive+0xd2>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10d      	bne.n	8008a0c <HAL_UART_Receive+0xa4>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d104      	bne.n	8008a02 <HAL_UART_Receive+0x9a>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	22ff      	movs	r2, #255	@ 0xff
 80089fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a00:	e01b      	b.n	8008a3a <HAL_UART_Receive+0xd2>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	227f      	movs	r2, #127	@ 0x7f
 8008a06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a0a:	e016      	b.n	8008a3a <HAL_UART_Receive+0xd2>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a14:	d10d      	bne.n	8008a32 <HAL_UART_Receive+0xca>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d104      	bne.n	8008a28 <HAL_UART_Receive+0xc0>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	227f      	movs	r2, #127	@ 0x7f
 8008a22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a26:	e008      	b.n	8008a3a <HAL_UART_Receive+0xd2>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	223f      	movs	r2, #63	@ 0x3f
 8008a2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a30:	e003      	b.n	8008a3a <HAL_UART_Receive+0xd2>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a40:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a4a:	d108      	bne.n	8008a5e <HAL_UART_Receive+0xf6>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d104      	bne.n	8008a5e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	61bb      	str	r3, [r7, #24]
 8008a5c:	e003      	b.n	8008a66 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008a66:	e036      	b.n	8008ad6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	2120      	movs	r1, #32
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f001 fc1e 	bl	800a2b4 <UART_WaitOnFlagUntilTimeout>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d005      	beq.n	8008a8a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2220      	movs	r2, #32
 8008a82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e032      	b.n	8008af0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10c      	bne.n	8008aaa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	8a7b      	ldrh	r3, [r7, #18]
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	3302      	adds	r3, #2
 8008aa6:	61bb      	str	r3, [r7, #24]
 8008aa8:	e00c      	b.n	8008ac4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	8a7b      	ldrh	r3, [r7, #18]
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	3b01      	subs	r3, #1
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1c2      	bne.n	8008a68 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2220      	movs	r2, #32
 8008ae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	e000      	b.n	8008af0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008aee:	2302      	movs	r3, #2
  }
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3720      	adds	r7, #32
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b08a      	sub	sp, #40	@ 0x28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	4613      	mov	r3, r2
 8008b04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b0c:	2b20      	cmp	r3, #32
 8008b0e:	d137      	bne.n	8008b80 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d002      	beq.n	8008b1c <HAL_UART_Receive_IT+0x24>
 8008b16:	88fb      	ldrh	r3, [r7, #6]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e030      	b.n	8008b82 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a18      	ldr	r2, [pc, #96]	@ (8008b8c <HAL_UART_Receive_IT+0x94>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d01f      	beq.n	8008b70 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d018      	beq.n	8008b70 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	e853 3f00 	ldrex	r3, [r3]
 8008b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	461a      	mov	r2, r3
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5c:	623b      	str	r3, [r7, #32]
 8008b5e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b60:	69f9      	ldr	r1, [r7, #28]
 8008b62:	6a3a      	ldr	r2, [r7, #32]
 8008b64:	e841 2300 	strex	r3, r2, [r1]
 8008b68:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e6      	bne.n	8008b3e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b70:	88fb      	ldrh	r3, [r7, #6]
 8008b72:	461a      	mov	r2, r3
 8008b74:	68b9      	ldr	r1, [r7, #8]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f001 fc0a 	bl	800a390 <UART_Start_Receive_IT>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	e000      	b.n	8008b82 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b80:	2302      	movs	r3, #2
  }
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3728      	adds	r7, #40	@ 0x28
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	58000c00 	.word	0x58000c00

08008b90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b0ba      	sub	sp, #232	@ 0xe8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008bba:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008bc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d11b      	bne.n	8008c04 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd0:	f003 0320 	and.w	r3, r3, #32
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d015      	beq.n	8008c04 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bdc:	f003 0320 	and.w	r3, r3, #32
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d105      	bne.n	8008bf0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d009      	beq.n	8008c04 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 8377 	beq.w	80092e8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	4798      	blx	r3
      }
      return;
 8008c02:	e371      	b.n	80092e8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 8123 	beq.w	8008e54 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008c12:	4b8d      	ldr	r3, [pc, #564]	@ (8008e48 <HAL_UART_IRQHandler+0x2b8>)
 8008c14:	4013      	ands	r3, r2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d106      	bne.n	8008c28 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008c1e:	4b8b      	ldr	r3, [pc, #556]	@ (8008e4c <HAL_UART_IRQHandler+0x2bc>)
 8008c20:	4013      	ands	r3, r2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 8116 	beq.w	8008e54 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d011      	beq.n	8008c58 <HAL_UART_IRQHandler+0xc8>
 8008c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00b      	beq.n	8008c58 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2201      	movs	r2, #1
 8008c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c4e:	f043 0201 	orr.w	r2, r3, #1
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d011      	beq.n	8008c88 <HAL_UART_IRQHandler+0xf8>
 8008c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c68:	f003 0301 	and.w	r3, r3, #1
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00b      	beq.n	8008c88 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2202      	movs	r2, #2
 8008c76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c7e:	f043 0204 	orr.w	r2, r3, #4
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c8c:	f003 0304 	and.w	r3, r3, #4
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d011      	beq.n	8008cb8 <HAL_UART_IRQHandler+0x128>
 8008c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00b      	beq.n	8008cb8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2204      	movs	r2, #4
 8008ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cae:	f043 0202 	orr.w	r2, r3, #2
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cbc:	f003 0308 	and.w	r3, r3, #8
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d017      	beq.n	8008cf4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cc8:	f003 0320 	and.w	r3, r3, #32
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d105      	bne.n	8008cdc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008cd0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008cd4:	4b5c      	ldr	r3, [pc, #368]	@ (8008e48 <HAL_UART_IRQHandler+0x2b8>)
 8008cd6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00b      	beq.n	8008cf4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2208      	movs	r2, #8
 8008ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cea:	f043 0208 	orr.w	r2, r3, #8
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d012      	beq.n	8008d26 <HAL_UART_IRQHandler+0x196>
 8008d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00c      	beq.n	8008d26 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d1c:	f043 0220 	orr.w	r2, r3, #32
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 82dd 	beq.w	80092ec <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d36:	f003 0320 	and.w	r3, r3, #32
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d013      	beq.n	8008d66 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d42:	f003 0320 	and.w	r3, r3, #32
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d105      	bne.n	8008d56 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d007      	beq.n	8008d66 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d003      	beq.n	8008d66 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7a:	2b40      	cmp	r3, #64	@ 0x40
 8008d7c:	d005      	beq.n	8008d8a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d82:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d054      	beq.n	8008e34 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f001 fc22 	bl	800a5d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d9a:	2b40      	cmp	r3, #64	@ 0x40
 8008d9c:	d146      	bne.n	8008e2c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3308      	adds	r3, #8
 8008da4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008dac:	e853 3f00 	ldrex	r3, [r3]
 8008db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3308      	adds	r3, #8
 8008dc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008dca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008dce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008dd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008dda:	e841 2300 	strex	r3, r2, [r1]
 8008dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1d9      	bne.n	8008d9e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d017      	beq.n	8008e24 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dfa:	4a15      	ldr	r2, [pc, #84]	@ (8008e50 <HAL_UART_IRQHandler+0x2c0>)
 8008dfc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fa fc59 	bl	80036bc <HAL_DMA_Abort_IT>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d019      	beq.n	8008e44 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008e1e:	4610      	mov	r0, r2
 8008e20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e22:	e00f      	b.n	8008e44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fa77 	bl	8009318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e2a:	e00b      	b.n	8008e44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fa73 	bl	8009318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e32:	e007      	b.n	8008e44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fa6f 	bl	8009318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008e42:	e253      	b.n	80092ec <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e44:	bf00      	nop
    return;
 8008e46:	e251      	b.n	80092ec <HAL_UART_IRQHandler+0x75c>
 8008e48:	10000001 	.word	0x10000001
 8008e4c:	04000120 	.word	0x04000120
 8008e50:	0800a6a1 	.word	0x0800a6a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	f040 81e7 	bne.w	800922c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e62:	f003 0310 	and.w	r3, r3, #16
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 81e0 	beq.w	800922c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e70:	f003 0310 	and.w	r3, r3, #16
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 81d9 	beq.w	800922c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2210      	movs	r2, #16
 8008e80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e8c:	2b40      	cmp	r3, #64	@ 0x40
 8008e8e:	f040 8151 	bne.w	8009134 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a96      	ldr	r2, [pc, #600]	@ (80090f4 <HAL_UART_IRQHandler+0x564>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d068      	beq.n	8008f72 <HAL_UART_IRQHandler+0x3e2>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a93      	ldr	r2, [pc, #588]	@ (80090f8 <HAL_UART_IRQHandler+0x568>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d061      	beq.n	8008f72 <HAL_UART_IRQHandler+0x3e2>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a91      	ldr	r2, [pc, #580]	@ (80090fc <HAL_UART_IRQHandler+0x56c>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d05a      	beq.n	8008f72 <HAL_UART_IRQHandler+0x3e2>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a8e      	ldr	r2, [pc, #568]	@ (8009100 <HAL_UART_IRQHandler+0x570>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d053      	beq.n	8008f72 <HAL_UART_IRQHandler+0x3e2>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a8c      	ldr	r2, [pc, #560]	@ (8009104 <HAL_UART_IRQHandler+0x574>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d04c      	beq.n	8008f72 <HAL_UART_IRQHandler+0x3e2>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a89      	ldr	r2, [pc, #548]	@ (8009108 <HAL_UART_IRQHandler+0x578>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d045      	beq.n	8008f72 <HAL_UART_IRQHandler+0x3e2>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a87      	ldr	r2, [pc, #540]	@ (800910c <HAL_UART_IRQHandler+0x57c>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d03e      	beq.n	8008f72 <HAL_UART_IRQHandler+0x3e2>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a84      	ldr	r2, [pc, #528]	@ (8009110 <HAL_UART_IRQHandler+0x580>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d037      	beq.n	8008f72 <HAL_UART_IRQHandler+0x3e2>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a82      	ldr	r2, [pc, #520]	@ (8009114 <HAL_UART_IRQHandler+0x584>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d030      	beq.n	8008f72 <HAL_UART_IRQHandler+0x3e2>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a7f      	ldr	r2, [pc, #508]	@ (8009118 <HAL_UART_IRQHandler+0x588>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d029      	beq.n	8008f72 <HAL_UART_IRQHandler+0x3e2>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a7d      	ldr	r2, [pc, #500]	@ (800911c <HAL_UART_IRQHandler+0x58c>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d022      	beq.n	8008f72 <HAL_UART_IRQHandler+0x3e2>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a7a      	ldr	r2, [pc, #488]	@ (8009120 <HAL_UART_IRQHandler+0x590>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d01b      	beq.n	8008f72 <HAL_UART_IRQHandler+0x3e2>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a78      	ldr	r2, [pc, #480]	@ (8009124 <HAL_UART_IRQHandler+0x594>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d014      	beq.n	8008f72 <HAL_UART_IRQHandler+0x3e2>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a75      	ldr	r2, [pc, #468]	@ (8009128 <HAL_UART_IRQHandler+0x598>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00d      	beq.n	8008f72 <HAL_UART_IRQHandler+0x3e2>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a73      	ldr	r2, [pc, #460]	@ (800912c <HAL_UART_IRQHandler+0x59c>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d006      	beq.n	8008f72 <HAL_UART_IRQHandler+0x3e2>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a70      	ldr	r2, [pc, #448]	@ (8009130 <HAL_UART_IRQHandler+0x5a0>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d106      	bne.n	8008f80 <HAL_UART_IRQHandler+0x3f0>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	e005      	b.n	8008f8c <HAL_UART_IRQHandler+0x3fc>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 81ab 	beq.w	80092f0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	f080 81a3 	bcs.w	80092f0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fc0:	f000 8087 	beq.w	80090d2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008fd0:	e853 3f00 	ldrex	r3, [r3]
 8008fd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008fee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ff2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ffe:	e841 2300 	strex	r3, r2, [r1]
 8009002:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009006:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1da      	bne.n	8008fc4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3308      	adds	r3, #8
 8009014:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009016:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009018:	e853 3f00 	ldrex	r3, [r3]
 800901c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800901e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009020:	f023 0301 	bic.w	r3, r3, #1
 8009024:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	3308      	adds	r3, #8
 800902e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009032:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009036:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800903a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e1      	bne.n	800900e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3308      	adds	r3, #8
 8009050:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800905a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800905c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009060:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3308      	adds	r3, #8
 800906a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800906e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009070:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009072:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009074:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009076:	e841 2300 	strex	r3, r2, [r1]
 800907a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800907c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1e3      	bne.n	800904a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2220      	movs	r2, #32
 8009086:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009098:	e853 3f00 	ldrex	r3, [r3]
 800909c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800909e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090a0:	f023 0310 	bic.w	r3, r3, #16
 80090a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	461a      	mov	r2, r3
 80090ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e4      	bne.n	8009090 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7f9 ffd7 	bl	8003080 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2202      	movs	r2, #2
 80090d6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f91d 	bl	800932c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090f2:	e0fd      	b.n	80092f0 <HAL_UART_IRQHandler+0x760>
 80090f4:	40020010 	.word	0x40020010
 80090f8:	40020028 	.word	0x40020028
 80090fc:	40020040 	.word	0x40020040
 8009100:	40020058 	.word	0x40020058
 8009104:	40020070 	.word	0x40020070
 8009108:	40020088 	.word	0x40020088
 800910c:	400200a0 	.word	0x400200a0
 8009110:	400200b8 	.word	0x400200b8
 8009114:	40020410 	.word	0x40020410
 8009118:	40020428 	.word	0x40020428
 800911c:	40020440 	.word	0x40020440
 8009120:	40020458 	.word	0x40020458
 8009124:	40020470 	.word	0x40020470
 8009128:	40020488 	.word	0x40020488
 800912c:	400204a0 	.word	0x400204a0
 8009130:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009140:	b29b      	uxth	r3, r3
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800914e:	b29b      	uxth	r3, r3
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 80cf 	beq.w	80092f4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009156:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 80ca 	beq.w	80092f4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800916e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009174:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	461a      	mov	r2, r3
 800917e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009182:	647b      	str	r3, [r7, #68]	@ 0x44
 8009184:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009186:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009188:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800918a:	e841 2300 	strex	r3, r2, [r1]
 800918e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1e4      	bne.n	8009160 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3308      	adds	r3, #8
 800919c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a0:	e853 3f00 	ldrex	r3, [r3]
 80091a4:	623b      	str	r3, [r7, #32]
   return(result);
 80091a6:	6a3a      	ldr	r2, [r7, #32]
 80091a8:	4b55      	ldr	r3, [pc, #340]	@ (8009300 <HAL_UART_IRQHandler+0x770>)
 80091aa:	4013      	ands	r3, r2
 80091ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3308      	adds	r3, #8
 80091b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80091bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091c2:	e841 2300 	strex	r3, r2, [r1]
 80091c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1e3      	bne.n	8009196 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2220      	movs	r2, #32
 80091d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	e853 3f00 	ldrex	r3, [r3]
 80091ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 0310 	bic.w	r3, r3, #16
 80091f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009204:	61fb      	str	r3, [r7, #28]
 8009206:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009208:	69b9      	ldr	r1, [r7, #24]
 800920a:	69fa      	ldr	r2, [r7, #28]
 800920c:	e841 2300 	strex	r3, r2, [r1]
 8009210:	617b      	str	r3, [r7, #20]
   return(result);
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e4      	bne.n	80091e2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2202      	movs	r2, #2
 800921c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800921e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f881 	bl	800932c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800922a:	e063      	b.n	80092f4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800922c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00e      	beq.n	8009256 <HAL_UART_IRQHandler+0x6c6>
 8009238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800923c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d008      	beq.n	8009256 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800924c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f001 ff84 	bl	800b15c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009254:	e051      	b.n	80092fa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800925a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800925e:	2b00      	cmp	r3, #0
 8009260:	d014      	beq.n	800928c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800926a:	2b00      	cmp	r3, #0
 800926c:	d105      	bne.n	800927a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800926e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009272:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d008      	beq.n	800928c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800927e:	2b00      	cmp	r3, #0
 8009280:	d03a      	beq.n	80092f8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	4798      	blx	r3
    }
    return;
 800928a:	e035      	b.n	80092f8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800928c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009294:	2b00      	cmp	r3, #0
 8009296:	d009      	beq.n	80092ac <HAL_UART_IRQHandler+0x71c>
 8009298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800929c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f001 fa11 	bl	800a6cc <UART_EndTransmit_IT>
    return;
 80092aa:	e026      	b.n	80092fa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80092ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d009      	beq.n	80092cc <HAL_UART_IRQHandler+0x73c>
 80092b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f001 ff5d 	bl	800b184 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092ca:	e016      	b.n	80092fa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80092cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d010      	beq.n	80092fa <HAL_UART_IRQHandler+0x76a>
 80092d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	da0c      	bge.n	80092fa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f001 ff45 	bl	800b170 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092e6:	e008      	b.n	80092fa <HAL_UART_IRQHandler+0x76a>
      return;
 80092e8:	bf00      	nop
 80092ea:	e006      	b.n	80092fa <HAL_UART_IRQHandler+0x76a>
    return;
 80092ec:	bf00      	nop
 80092ee:	e004      	b.n	80092fa <HAL_UART_IRQHandler+0x76a>
      return;
 80092f0:	bf00      	nop
 80092f2:	e002      	b.n	80092fa <HAL_UART_IRQHandler+0x76a>
      return;
 80092f4:	bf00      	nop
 80092f6:	e000      	b.n	80092fa <HAL_UART_IRQHandler+0x76a>
    return;
 80092f8:	bf00      	nop
  }
}
 80092fa:	37e8      	adds	r7, #232	@ 0xe8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	effffffe 	.word	0xeffffffe

08009304 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009348:	b092      	sub	sp, #72	@ 0x48
 800934a:	af00      	add	r7, sp, #0
 800934c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	689a      	ldr	r2, [r3, #8]
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	431a      	orrs	r2, r3
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	431a      	orrs	r2, r3
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	69db      	ldr	r3, [r3, #28]
 8009368:	4313      	orrs	r3, r2
 800936a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	4bbe      	ldr	r3, [pc, #760]	@ (800966c <UART_SetConfig+0x328>)
 8009374:	4013      	ands	r3, r2
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	6812      	ldr	r2, [r2, #0]
 800937a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800937c:	430b      	orrs	r3, r1
 800937e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4ab3      	ldr	r2, [pc, #716]	@ (8009670 <UART_SetConfig+0x32c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d004      	beq.n	80093b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093ac:	4313      	orrs	r3, r2
 80093ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	689a      	ldr	r2, [r3, #8]
 80093b6:	4baf      	ldr	r3, [pc, #700]	@ (8009674 <UART_SetConfig+0x330>)
 80093b8:	4013      	ands	r3, r2
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	6812      	ldr	r2, [r2, #0]
 80093be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80093c0:	430b      	orrs	r3, r1
 80093c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ca:	f023 010f 	bic.w	r1, r3, #15
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4aa6      	ldr	r2, [pc, #664]	@ (8009678 <UART_SetConfig+0x334>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d177      	bne.n	80094d4 <UART_SetConfig+0x190>
 80093e4:	4ba5      	ldr	r3, [pc, #660]	@ (800967c <UART_SetConfig+0x338>)
 80093e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093ec:	2b28      	cmp	r3, #40	@ 0x28
 80093ee:	d86d      	bhi.n	80094cc <UART_SetConfig+0x188>
 80093f0:	a201      	add	r2, pc, #4	@ (adr r2, 80093f8 <UART_SetConfig+0xb4>)
 80093f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f6:	bf00      	nop
 80093f8:	0800949d 	.word	0x0800949d
 80093fc:	080094cd 	.word	0x080094cd
 8009400:	080094cd 	.word	0x080094cd
 8009404:	080094cd 	.word	0x080094cd
 8009408:	080094cd 	.word	0x080094cd
 800940c:	080094cd 	.word	0x080094cd
 8009410:	080094cd 	.word	0x080094cd
 8009414:	080094cd 	.word	0x080094cd
 8009418:	080094a5 	.word	0x080094a5
 800941c:	080094cd 	.word	0x080094cd
 8009420:	080094cd 	.word	0x080094cd
 8009424:	080094cd 	.word	0x080094cd
 8009428:	080094cd 	.word	0x080094cd
 800942c:	080094cd 	.word	0x080094cd
 8009430:	080094cd 	.word	0x080094cd
 8009434:	080094cd 	.word	0x080094cd
 8009438:	080094ad 	.word	0x080094ad
 800943c:	080094cd 	.word	0x080094cd
 8009440:	080094cd 	.word	0x080094cd
 8009444:	080094cd 	.word	0x080094cd
 8009448:	080094cd 	.word	0x080094cd
 800944c:	080094cd 	.word	0x080094cd
 8009450:	080094cd 	.word	0x080094cd
 8009454:	080094cd 	.word	0x080094cd
 8009458:	080094b5 	.word	0x080094b5
 800945c:	080094cd 	.word	0x080094cd
 8009460:	080094cd 	.word	0x080094cd
 8009464:	080094cd 	.word	0x080094cd
 8009468:	080094cd 	.word	0x080094cd
 800946c:	080094cd 	.word	0x080094cd
 8009470:	080094cd 	.word	0x080094cd
 8009474:	080094cd 	.word	0x080094cd
 8009478:	080094bd 	.word	0x080094bd
 800947c:	080094cd 	.word	0x080094cd
 8009480:	080094cd 	.word	0x080094cd
 8009484:	080094cd 	.word	0x080094cd
 8009488:	080094cd 	.word	0x080094cd
 800948c:	080094cd 	.word	0x080094cd
 8009490:	080094cd 	.word	0x080094cd
 8009494:	080094cd 	.word	0x080094cd
 8009498:	080094c5 	.word	0x080094c5
 800949c:	2301      	movs	r3, #1
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a2:	e326      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80094a4:	2304      	movs	r3, #4
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094aa:	e322      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80094ac:	2308      	movs	r3, #8
 80094ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b2:	e31e      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80094b4:	2310      	movs	r3, #16
 80094b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ba:	e31a      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80094bc:	2320      	movs	r3, #32
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c2:	e316      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80094c4:	2340      	movs	r3, #64	@ 0x40
 80094c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ca:	e312      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80094cc:	2380      	movs	r3, #128	@ 0x80
 80094ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d2:	e30e      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a69      	ldr	r2, [pc, #420]	@ (8009680 <UART_SetConfig+0x33c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d130      	bne.n	8009540 <UART_SetConfig+0x1fc>
 80094de:	4b67      	ldr	r3, [pc, #412]	@ (800967c <UART_SetConfig+0x338>)
 80094e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e2:	f003 0307 	and.w	r3, r3, #7
 80094e6:	2b05      	cmp	r3, #5
 80094e8:	d826      	bhi.n	8009538 <UART_SetConfig+0x1f4>
 80094ea:	a201      	add	r2, pc, #4	@ (adr r2, 80094f0 <UART_SetConfig+0x1ac>)
 80094ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f0:	08009509 	.word	0x08009509
 80094f4:	08009511 	.word	0x08009511
 80094f8:	08009519 	.word	0x08009519
 80094fc:	08009521 	.word	0x08009521
 8009500:	08009529 	.word	0x08009529
 8009504:	08009531 	.word	0x08009531
 8009508:	2300      	movs	r3, #0
 800950a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950e:	e2f0      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009510:	2304      	movs	r3, #4
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009516:	e2ec      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009518:	2308      	movs	r3, #8
 800951a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951e:	e2e8      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009520:	2310      	movs	r3, #16
 8009522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009526:	e2e4      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009528:	2320      	movs	r3, #32
 800952a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952e:	e2e0      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009530:	2340      	movs	r3, #64	@ 0x40
 8009532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009536:	e2dc      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009538:	2380      	movs	r3, #128	@ 0x80
 800953a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953e:	e2d8      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a4f      	ldr	r2, [pc, #316]	@ (8009684 <UART_SetConfig+0x340>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d130      	bne.n	80095ac <UART_SetConfig+0x268>
 800954a:	4b4c      	ldr	r3, [pc, #304]	@ (800967c <UART_SetConfig+0x338>)
 800954c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800954e:	f003 0307 	and.w	r3, r3, #7
 8009552:	2b05      	cmp	r3, #5
 8009554:	d826      	bhi.n	80095a4 <UART_SetConfig+0x260>
 8009556:	a201      	add	r2, pc, #4	@ (adr r2, 800955c <UART_SetConfig+0x218>)
 8009558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955c:	08009575 	.word	0x08009575
 8009560:	0800957d 	.word	0x0800957d
 8009564:	08009585 	.word	0x08009585
 8009568:	0800958d 	.word	0x0800958d
 800956c:	08009595 	.word	0x08009595
 8009570:	0800959d 	.word	0x0800959d
 8009574:	2300      	movs	r3, #0
 8009576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957a:	e2ba      	b.n	8009af2 <UART_SetConfig+0x7ae>
 800957c:	2304      	movs	r3, #4
 800957e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009582:	e2b6      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009584:	2308      	movs	r3, #8
 8009586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958a:	e2b2      	b.n	8009af2 <UART_SetConfig+0x7ae>
 800958c:	2310      	movs	r3, #16
 800958e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009592:	e2ae      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009594:	2320      	movs	r3, #32
 8009596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959a:	e2aa      	b.n	8009af2 <UART_SetConfig+0x7ae>
 800959c:	2340      	movs	r3, #64	@ 0x40
 800959e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a2:	e2a6      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80095a4:	2380      	movs	r3, #128	@ 0x80
 80095a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095aa:	e2a2      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a35      	ldr	r2, [pc, #212]	@ (8009688 <UART_SetConfig+0x344>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d130      	bne.n	8009618 <UART_SetConfig+0x2d4>
 80095b6:	4b31      	ldr	r3, [pc, #196]	@ (800967c <UART_SetConfig+0x338>)
 80095b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ba:	f003 0307 	and.w	r3, r3, #7
 80095be:	2b05      	cmp	r3, #5
 80095c0:	d826      	bhi.n	8009610 <UART_SetConfig+0x2cc>
 80095c2:	a201      	add	r2, pc, #4	@ (adr r2, 80095c8 <UART_SetConfig+0x284>)
 80095c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c8:	080095e1 	.word	0x080095e1
 80095cc:	080095e9 	.word	0x080095e9
 80095d0:	080095f1 	.word	0x080095f1
 80095d4:	080095f9 	.word	0x080095f9
 80095d8:	08009601 	.word	0x08009601
 80095dc:	08009609 	.word	0x08009609
 80095e0:	2300      	movs	r3, #0
 80095e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e6:	e284      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80095e8:	2304      	movs	r3, #4
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ee:	e280      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80095f0:	2308      	movs	r3, #8
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f6:	e27c      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80095f8:	2310      	movs	r3, #16
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fe:	e278      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009600:	2320      	movs	r3, #32
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009606:	e274      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009608:	2340      	movs	r3, #64	@ 0x40
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960e:	e270      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009610:	2380      	movs	r3, #128	@ 0x80
 8009612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009616:	e26c      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a1b      	ldr	r2, [pc, #108]	@ (800968c <UART_SetConfig+0x348>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d142      	bne.n	80096a8 <UART_SetConfig+0x364>
 8009622:	4b16      	ldr	r3, [pc, #88]	@ (800967c <UART_SetConfig+0x338>)
 8009624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	2b05      	cmp	r3, #5
 800962c:	d838      	bhi.n	80096a0 <UART_SetConfig+0x35c>
 800962e:	a201      	add	r2, pc, #4	@ (adr r2, 8009634 <UART_SetConfig+0x2f0>)
 8009630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009634:	0800964d 	.word	0x0800964d
 8009638:	08009655 	.word	0x08009655
 800963c:	0800965d 	.word	0x0800965d
 8009640:	08009665 	.word	0x08009665
 8009644:	08009691 	.word	0x08009691
 8009648:	08009699 	.word	0x08009699
 800964c:	2300      	movs	r3, #0
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009652:	e24e      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009654:	2304      	movs	r3, #4
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965a:	e24a      	b.n	8009af2 <UART_SetConfig+0x7ae>
 800965c:	2308      	movs	r3, #8
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009662:	e246      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009664:	2310      	movs	r3, #16
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966a:	e242      	b.n	8009af2 <UART_SetConfig+0x7ae>
 800966c:	cfff69f3 	.word	0xcfff69f3
 8009670:	58000c00 	.word	0x58000c00
 8009674:	11fff4ff 	.word	0x11fff4ff
 8009678:	40011000 	.word	0x40011000
 800967c:	58024400 	.word	0x58024400
 8009680:	40004400 	.word	0x40004400
 8009684:	40004800 	.word	0x40004800
 8009688:	40004c00 	.word	0x40004c00
 800968c:	40005000 	.word	0x40005000
 8009690:	2320      	movs	r3, #32
 8009692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009696:	e22c      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009698:	2340      	movs	r3, #64	@ 0x40
 800969a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969e:	e228      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80096a0:	2380      	movs	r3, #128	@ 0x80
 80096a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a6:	e224      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4ab1      	ldr	r2, [pc, #708]	@ (8009974 <UART_SetConfig+0x630>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d176      	bne.n	80097a0 <UART_SetConfig+0x45c>
 80096b2:	4bb1      	ldr	r3, [pc, #708]	@ (8009978 <UART_SetConfig+0x634>)
 80096b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096ba:	2b28      	cmp	r3, #40	@ 0x28
 80096bc:	d86c      	bhi.n	8009798 <UART_SetConfig+0x454>
 80096be:	a201      	add	r2, pc, #4	@ (adr r2, 80096c4 <UART_SetConfig+0x380>)
 80096c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c4:	08009769 	.word	0x08009769
 80096c8:	08009799 	.word	0x08009799
 80096cc:	08009799 	.word	0x08009799
 80096d0:	08009799 	.word	0x08009799
 80096d4:	08009799 	.word	0x08009799
 80096d8:	08009799 	.word	0x08009799
 80096dc:	08009799 	.word	0x08009799
 80096e0:	08009799 	.word	0x08009799
 80096e4:	08009771 	.word	0x08009771
 80096e8:	08009799 	.word	0x08009799
 80096ec:	08009799 	.word	0x08009799
 80096f0:	08009799 	.word	0x08009799
 80096f4:	08009799 	.word	0x08009799
 80096f8:	08009799 	.word	0x08009799
 80096fc:	08009799 	.word	0x08009799
 8009700:	08009799 	.word	0x08009799
 8009704:	08009779 	.word	0x08009779
 8009708:	08009799 	.word	0x08009799
 800970c:	08009799 	.word	0x08009799
 8009710:	08009799 	.word	0x08009799
 8009714:	08009799 	.word	0x08009799
 8009718:	08009799 	.word	0x08009799
 800971c:	08009799 	.word	0x08009799
 8009720:	08009799 	.word	0x08009799
 8009724:	08009781 	.word	0x08009781
 8009728:	08009799 	.word	0x08009799
 800972c:	08009799 	.word	0x08009799
 8009730:	08009799 	.word	0x08009799
 8009734:	08009799 	.word	0x08009799
 8009738:	08009799 	.word	0x08009799
 800973c:	08009799 	.word	0x08009799
 8009740:	08009799 	.word	0x08009799
 8009744:	08009789 	.word	0x08009789
 8009748:	08009799 	.word	0x08009799
 800974c:	08009799 	.word	0x08009799
 8009750:	08009799 	.word	0x08009799
 8009754:	08009799 	.word	0x08009799
 8009758:	08009799 	.word	0x08009799
 800975c:	08009799 	.word	0x08009799
 8009760:	08009799 	.word	0x08009799
 8009764:	08009791 	.word	0x08009791
 8009768:	2301      	movs	r3, #1
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976e:	e1c0      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009770:	2304      	movs	r3, #4
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009776:	e1bc      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009778:	2308      	movs	r3, #8
 800977a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977e:	e1b8      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009780:	2310      	movs	r3, #16
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009786:	e1b4      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009788:	2320      	movs	r3, #32
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978e:	e1b0      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009790:	2340      	movs	r3, #64	@ 0x40
 8009792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009796:	e1ac      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009798:	2380      	movs	r3, #128	@ 0x80
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979e:	e1a8      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a75      	ldr	r2, [pc, #468]	@ (800997c <UART_SetConfig+0x638>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d130      	bne.n	800980c <UART_SetConfig+0x4c8>
 80097aa:	4b73      	ldr	r3, [pc, #460]	@ (8009978 <UART_SetConfig+0x634>)
 80097ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ae:	f003 0307 	and.w	r3, r3, #7
 80097b2:	2b05      	cmp	r3, #5
 80097b4:	d826      	bhi.n	8009804 <UART_SetConfig+0x4c0>
 80097b6:	a201      	add	r2, pc, #4	@ (adr r2, 80097bc <UART_SetConfig+0x478>)
 80097b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097bc:	080097d5 	.word	0x080097d5
 80097c0:	080097dd 	.word	0x080097dd
 80097c4:	080097e5 	.word	0x080097e5
 80097c8:	080097ed 	.word	0x080097ed
 80097cc:	080097f5 	.word	0x080097f5
 80097d0:	080097fd 	.word	0x080097fd
 80097d4:	2300      	movs	r3, #0
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097da:	e18a      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80097dc:	2304      	movs	r3, #4
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e2:	e186      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80097e4:	2308      	movs	r3, #8
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ea:	e182      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80097ec:	2310      	movs	r3, #16
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f2:	e17e      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80097f4:	2320      	movs	r3, #32
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fa:	e17a      	b.n	8009af2 <UART_SetConfig+0x7ae>
 80097fc:	2340      	movs	r3, #64	@ 0x40
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009802:	e176      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009804:	2380      	movs	r3, #128	@ 0x80
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980a:	e172      	b.n	8009af2 <UART_SetConfig+0x7ae>
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a5b      	ldr	r2, [pc, #364]	@ (8009980 <UART_SetConfig+0x63c>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d130      	bne.n	8009878 <UART_SetConfig+0x534>
 8009816:	4b58      	ldr	r3, [pc, #352]	@ (8009978 <UART_SetConfig+0x634>)
 8009818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800981a:	f003 0307 	and.w	r3, r3, #7
 800981e:	2b05      	cmp	r3, #5
 8009820:	d826      	bhi.n	8009870 <UART_SetConfig+0x52c>
 8009822:	a201      	add	r2, pc, #4	@ (adr r2, 8009828 <UART_SetConfig+0x4e4>)
 8009824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009828:	08009841 	.word	0x08009841
 800982c:	08009849 	.word	0x08009849
 8009830:	08009851 	.word	0x08009851
 8009834:	08009859 	.word	0x08009859
 8009838:	08009861 	.word	0x08009861
 800983c:	08009869 	.word	0x08009869
 8009840:	2300      	movs	r3, #0
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009846:	e154      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009848:	2304      	movs	r3, #4
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984e:	e150      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009850:	2308      	movs	r3, #8
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009856:	e14c      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009858:	2310      	movs	r3, #16
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985e:	e148      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009860:	2320      	movs	r3, #32
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009866:	e144      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009868:	2340      	movs	r3, #64	@ 0x40
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986e:	e140      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009870:	2380      	movs	r3, #128	@ 0x80
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009876:	e13c      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a41      	ldr	r2, [pc, #260]	@ (8009984 <UART_SetConfig+0x640>)
 800987e:	4293      	cmp	r3, r2
 8009880:	f040 8082 	bne.w	8009988 <UART_SetConfig+0x644>
 8009884:	4b3c      	ldr	r3, [pc, #240]	@ (8009978 <UART_SetConfig+0x634>)
 8009886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009888:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800988c:	2b28      	cmp	r3, #40	@ 0x28
 800988e:	d86d      	bhi.n	800996c <UART_SetConfig+0x628>
 8009890:	a201      	add	r2, pc, #4	@ (adr r2, 8009898 <UART_SetConfig+0x554>)
 8009892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009896:	bf00      	nop
 8009898:	0800993d 	.word	0x0800993d
 800989c:	0800996d 	.word	0x0800996d
 80098a0:	0800996d 	.word	0x0800996d
 80098a4:	0800996d 	.word	0x0800996d
 80098a8:	0800996d 	.word	0x0800996d
 80098ac:	0800996d 	.word	0x0800996d
 80098b0:	0800996d 	.word	0x0800996d
 80098b4:	0800996d 	.word	0x0800996d
 80098b8:	08009945 	.word	0x08009945
 80098bc:	0800996d 	.word	0x0800996d
 80098c0:	0800996d 	.word	0x0800996d
 80098c4:	0800996d 	.word	0x0800996d
 80098c8:	0800996d 	.word	0x0800996d
 80098cc:	0800996d 	.word	0x0800996d
 80098d0:	0800996d 	.word	0x0800996d
 80098d4:	0800996d 	.word	0x0800996d
 80098d8:	0800994d 	.word	0x0800994d
 80098dc:	0800996d 	.word	0x0800996d
 80098e0:	0800996d 	.word	0x0800996d
 80098e4:	0800996d 	.word	0x0800996d
 80098e8:	0800996d 	.word	0x0800996d
 80098ec:	0800996d 	.word	0x0800996d
 80098f0:	0800996d 	.word	0x0800996d
 80098f4:	0800996d 	.word	0x0800996d
 80098f8:	08009955 	.word	0x08009955
 80098fc:	0800996d 	.word	0x0800996d
 8009900:	0800996d 	.word	0x0800996d
 8009904:	0800996d 	.word	0x0800996d
 8009908:	0800996d 	.word	0x0800996d
 800990c:	0800996d 	.word	0x0800996d
 8009910:	0800996d 	.word	0x0800996d
 8009914:	0800996d 	.word	0x0800996d
 8009918:	0800995d 	.word	0x0800995d
 800991c:	0800996d 	.word	0x0800996d
 8009920:	0800996d 	.word	0x0800996d
 8009924:	0800996d 	.word	0x0800996d
 8009928:	0800996d 	.word	0x0800996d
 800992c:	0800996d 	.word	0x0800996d
 8009930:	0800996d 	.word	0x0800996d
 8009934:	0800996d 	.word	0x0800996d
 8009938:	08009965 	.word	0x08009965
 800993c:	2301      	movs	r3, #1
 800993e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009942:	e0d6      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009944:	2304      	movs	r3, #4
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994a:	e0d2      	b.n	8009af2 <UART_SetConfig+0x7ae>
 800994c:	2308      	movs	r3, #8
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009952:	e0ce      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009954:	2310      	movs	r3, #16
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995a:	e0ca      	b.n	8009af2 <UART_SetConfig+0x7ae>
 800995c:	2320      	movs	r3, #32
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009962:	e0c6      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009964:	2340      	movs	r3, #64	@ 0x40
 8009966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996a:	e0c2      	b.n	8009af2 <UART_SetConfig+0x7ae>
 800996c:	2380      	movs	r3, #128	@ 0x80
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009972:	e0be      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009974:	40011400 	.word	0x40011400
 8009978:	58024400 	.word	0x58024400
 800997c:	40007800 	.word	0x40007800
 8009980:	40007c00 	.word	0x40007c00
 8009984:	40011800 	.word	0x40011800
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4aad      	ldr	r2, [pc, #692]	@ (8009c44 <UART_SetConfig+0x900>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d176      	bne.n	8009a80 <UART_SetConfig+0x73c>
 8009992:	4bad      	ldr	r3, [pc, #692]	@ (8009c48 <UART_SetConfig+0x904>)
 8009994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009996:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800999a:	2b28      	cmp	r3, #40	@ 0x28
 800999c:	d86c      	bhi.n	8009a78 <UART_SetConfig+0x734>
 800999e:	a201      	add	r2, pc, #4	@ (adr r2, 80099a4 <UART_SetConfig+0x660>)
 80099a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a4:	08009a49 	.word	0x08009a49
 80099a8:	08009a79 	.word	0x08009a79
 80099ac:	08009a79 	.word	0x08009a79
 80099b0:	08009a79 	.word	0x08009a79
 80099b4:	08009a79 	.word	0x08009a79
 80099b8:	08009a79 	.word	0x08009a79
 80099bc:	08009a79 	.word	0x08009a79
 80099c0:	08009a79 	.word	0x08009a79
 80099c4:	08009a51 	.word	0x08009a51
 80099c8:	08009a79 	.word	0x08009a79
 80099cc:	08009a79 	.word	0x08009a79
 80099d0:	08009a79 	.word	0x08009a79
 80099d4:	08009a79 	.word	0x08009a79
 80099d8:	08009a79 	.word	0x08009a79
 80099dc:	08009a79 	.word	0x08009a79
 80099e0:	08009a79 	.word	0x08009a79
 80099e4:	08009a59 	.word	0x08009a59
 80099e8:	08009a79 	.word	0x08009a79
 80099ec:	08009a79 	.word	0x08009a79
 80099f0:	08009a79 	.word	0x08009a79
 80099f4:	08009a79 	.word	0x08009a79
 80099f8:	08009a79 	.word	0x08009a79
 80099fc:	08009a79 	.word	0x08009a79
 8009a00:	08009a79 	.word	0x08009a79
 8009a04:	08009a61 	.word	0x08009a61
 8009a08:	08009a79 	.word	0x08009a79
 8009a0c:	08009a79 	.word	0x08009a79
 8009a10:	08009a79 	.word	0x08009a79
 8009a14:	08009a79 	.word	0x08009a79
 8009a18:	08009a79 	.word	0x08009a79
 8009a1c:	08009a79 	.word	0x08009a79
 8009a20:	08009a79 	.word	0x08009a79
 8009a24:	08009a69 	.word	0x08009a69
 8009a28:	08009a79 	.word	0x08009a79
 8009a2c:	08009a79 	.word	0x08009a79
 8009a30:	08009a79 	.word	0x08009a79
 8009a34:	08009a79 	.word	0x08009a79
 8009a38:	08009a79 	.word	0x08009a79
 8009a3c:	08009a79 	.word	0x08009a79
 8009a40:	08009a79 	.word	0x08009a79
 8009a44:	08009a71 	.word	0x08009a71
 8009a48:	2301      	movs	r3, #1
 8009a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a4e:	e050      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009a50:	2304      	movs	r3, #4
 8009a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a56:	e04c      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009a58:	2308      	movs	r3, #8
 8009a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a5e:	e048      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009a60:	2310      	movs	r3, #16
 8009a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a66:	e044      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009a68:	2320      	movs	r3, #32
 8009a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a6e:	e040      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009a70:	2340      	movs	r3, #64	@ 0x40
 8009a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a76:	e03c      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009a78:	2380      	movs	r3, #128	@ 0x80
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a7e:	e038      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a71      	ldr	r2, [pc, #452]	@ (8009c4c <UART_SetConfig+0x908>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d130      	bne.n	8009aec <UART_SetConfig+0x7a8>
 8009a8a:	4b6f      	ldr	r3, [pc, #444]	@ (8009c48 <UART_SetConfig+0x904>)
 8009a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a8e:	f003 0307 	and.w	r3, r3, #7
 8009a92:	2b05      	cmp	r3, #5
 8009a94:	d826      	bhi.n	8009ae4 <UART_SetConfig+0x7a0>
 8009a96:	a201      	add	r2, pc, #4	@ (adr r2, 8009a9c <UART_SetConfig+0x758>)
 8009a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9c:	08009ab5 	.word	0x08009ab5
 8009aa0:	08009abd 	.word	0x08009abd
 8009aa4:	08009ac5 	.word	0x08009ac5
 8009aa8:	08009acd 	.word	0x08009acd
 8009aac:	08009ad5 	.word	0x08009ad5
 8009ab0:	08009add 	.word	0x08009add
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aba:	e01a      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009abc:	2304      	movs	r3, #4
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac2:	e016      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009ac4:	2308      	movs	r3, #8
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aca:	e012      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009acc:	2310      	movs	r3, #16
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad2:	e00e      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009ad4:	2320      	movs	r3, #32
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ada:	e00a      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009adc:	2340      	movs	r3, #64	@ 0x40
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae2:	e006      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009ae4:	2380      	movs	r3, #128	@ 0x80
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aea:	e002      	b.n	8009af2 <UART_SetConfig+0x7ae>
 8009aec:	2380      	movs	r3, #128	@ 0x80
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a55      	ldr	r2, [pc, #340]	@ (8009c4c <UART_SetConfig+0x908>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	f040 80f8 	bne.w	8009cee <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009afe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b02:	2b20      	cmp	r3, #32
 8009b04:	dc46      	bgt.n	8009b94 <UART_SetConfig+0x850>
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	db75      	blt.n	8009bf6 <UART_SetConfig+0x8b2>
 8009b0a:	3b02      	subs	r3, #2
 8009b0c:	2b1e      	cmp	r3, #30
 8009b0e:	d872      	bhi.n	8009bf6 <UART_SetConfig+0x8b2>
 8009b10:	a201      	add	r2, pc, #4	@ (adr r2, 8009b18 <UART_SetConfig+0x7d4>)
 8009b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b16:	bf00      	nop
 8009b18:	08009b9b 	.word	0x08009b9b
 8009b1c:	08009bf7 	.word	0x08009bf7
 8009b20:	08009ba3 	.word	0x08009ba3
 8009b24:	08009bf7 	.word	0x08009bf7
 8009b28:	08009bf7 	.word	0x08009bf7
 8009b2c:	08009bf7 	.word	0x08009bf7
 8009b30:	08009bb3 	.word	0x08009bb3
 8009b34:	08009bf7 	.word	0x08009bf7
 8009b38:	08009bf7 	.word	0x08009bf7
 8009b3c:	08009bf7 	.word	0x08009bf7
 8009b40:	08009bf7 	.word	0x08009bf7
 8009b44:	08009bf7 	.word	0x08009bf7
 8009b48:	08009bf7 	.word	0x08009bf7
 8009b4c:	08009bf7 	.word	0x08009bf7
 8009b50:	08009bc3 	.word	0x08009bc3
 8009b54:	08009bf7 	.word	0x08009bf7
 8009b58:	08009bf7 	.word	0x08009bf7
 8009b5c:	08009bf7 	.word	0x08009bf7
 8009b60:	08009bf7 	.word	0x08009bf7
 8009b64:	08009bf7 	.word	0x08009bf7
 8009b68:	08009bf7 	.word	0x08009bf7
 8009b6c:	08009bf7 	.word	0x08009bf7
 8009b70:	08009bf7 	.word	0x08009bf7
 8009b74:	08009bf7 	.word	0x08009bf7
 8009b78:	08009bf7 	.word	0x08009bf7
 8009b7c:	08009bf7 	.word	0x08009bf7
 8009b80:	08009bf7 	.word	0x08009bf7
 8009b84:	08009bf7 	.word	0x08009bf7
 8009b88:	08009bf7 	.word	0x08009bf7
 8009b8c:	08009bf7 	.word	0x08009bf7
 8009b90:	08009be9 	.word	0x08009be9
 8009b94:	2b40      	cmp	r3, #64	@ 0x40
 8009b96:	d02a      	beq.n	8009bee <UART_SetConfig+0x8aa>
 8009b98:	e02d      	b.n	8009bf6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009b9a:	f7fd fca7 	bl	80074ec <HAL_RCCEx_GetD3PCLK1Freq>
 8009b9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ba0:	e02f      	b.n	8009c02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fd fcb6 	bl	8007518 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bb0:	e027      	b.n	8009c02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bb2:	f107 0318 	add.w	r3, r7, #24
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fd fe02 	bl	80077c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bc0:	e01f      	b.n	8009c02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bc2:	4b21      	ldr	r3, [pc, #132]	@ (8009c48 <UART_SetConfig+0x904>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 0320 	and.w	r3, r3, #32
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d009      	beq.n	8009be2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009bce:	4b1e      	ldr	r3, [pc, #120]	@ (8009c48 <UART_SetConfig+0x904>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	08db      	lsrs	r3, r3, #3
 8009bd4:	f003 0303 	and.w	r3, r3, #3
 8009bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009c50 <UART_SetConfig+0x90c>)
 8009bda:	fa22 f303 	lsr.w	r3, r2, r3
 8009bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009be0:	e00f      	b.n	8009c02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009be2:	4b1b      	ldr	r3, [pc, #108]	@ (8009c50 <UART_SetConfig+0x90c>)
 8009be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009be6:	e00c      	b.n	8009c02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009be8:	4b1a      	ldr	r3, [pc, #104]	@ (8009c54 <UART_SetConfig+0x910>)
 8009bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bec:	e009      	b.n	8009c02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf4:	e005      	b.n	8009c02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f000 81ee 	beq.w	8009fe6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c0e:	4a12      	ldr	r2, [pc, #72]	@ (8009c58 <UART_SetConfig+0x914>)
 8009c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c14:	461a      	mov	r2, r3
 8009c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c18:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c1c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	4613      	mov	r3, r2
 8009c24:	005b      	lsls	r3, r3, #1
 8009c26:	4413      	add	r3, r2
 8009c28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d305      	bcc.n	8009c3a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d910      	bls.n	8009c5c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c40:	e1d1      	b.n	8009fe6 <UART_SetConfig+0xca2>
 8009c42:	bf00      	nop
 8009c44:	40011c00 	.word	0x40011c00
 8009c48:	58024400 	.word	0x58024400
 8009c4c:	58000c00 	.word	0x58000c00
 8009c50:	03d09000 	.word	0x03d09000
 8009c54:	003d0900 	.word	0x003d0900
 8009c58:	080132a8 	.word	0x080132a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c5e:	2200      	movs	r2, #0
 8009c60:	60bb      	str	r3, [r7, #8]
 8009c62:	60fa      	str	r2, [r7, #12]
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c68:	4ac0      	ldr	r2, [pc, #768]	@ (8009f6c <UART_SetConfig+0xc28>)
 8009c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	2200      	movs	r2, #0
 8009c72:	603b      	str	r3, [r7, #0]
 8009c74:	607a      	str	r2, [r7, #4]
 8009c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c7e:	f7f6 fd5b 	bl	8000738 <__aeabi_uldivmod>
 8009c82:	4602      	mov	r2, r0
 8009c84:	460b      	mov	r3, r1
 8009c86:	4610      	mov	r0, r2
 8009c88:	4619      	mov	r1, r3
 8009c8a:	f04f 0200 	mov.w	r2, #0
 8009c8e:	f04f 0300 	mov.w	r3, #0
 8009c92:	020b      	lsls	r3, r1, #8
 8009c94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c98:	0202      	lsls	r2, r0, #8
 8009c9a:	6979      	ldr	r1, [r7, #20]
 8009c9c:	6849      	ldr	r1, [r1, #4]
 8009c9e:	0849      	lsrs	r1, r1, #1
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	eb12 0804 	adds.w	r8, r2, r4
 8009caa:	eb43 0905 	adc.w	r9, r3, r5
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	469a      	mov	sl, r3
 8009cb6:	4693      	mov	fp, r2
 8009cb8:	4652      	mov	r2, sl
 8009cba:	465b      	mov	r3, fp
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	f7f6 fd3a 	bl	8000738 <__aeabi_uldivmod>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4613      	mov	r3, r2
 8009cca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cd2:	d308      	bcc.n	8009ce6 <UART_SetConfig+0x9a2>
 8009cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cda:	d204      	bcs.n	8009ce6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ce2:	60da      	str	r2, [r3, #12]
 8009ce4:	e17f      	b.n	8009fe6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009cec:	e17b      	b.n	8009fe6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cf6:	f040 80bd 	bne.w	8009e74 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009cfa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009cfe:	2b20      	cmp	r3, #32
 8009d00:	dc48      	bgt.n	8009d94 <UART_SetConfig+0xa50>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	db7b      	blt.n	8009dfe <UART_SetConfig+0xaba>
 8009d06:	2b20      	cmp	r3, #32
 8009d08:	d879      	bhi.n	8009dfe <UART_SetConfig+0xaba>
 8009d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d10 <UART_SetConfig+0x9cc>)
 8009d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d10:	08009d9b 	.word	0x08009d9b
 8009d14:	08009da3 	.word	0x08009da3
 8009d18:	08009dff 	.word	0x08009dff
 8009d1c:	08009dff 	.word	0x08009dff
 8009d20:	08009dab 	.word	0x08009dab
 8009d24:	08009dff 	.word	0x08009dff
 8009d28:	08009dff 	.word	0x08009dff
 8009d2c:	08009dff 	.word	0x08009dff
 8009d30:	08009dbb 	.word	0x08009dbb
 8009d34:	08009dff 	.word	0x08009dff
 8009d38:	08009dff 	.word	0x08009dff
 8009d3c:	08009dff 	.word	0x08009dff
 8009d40:	08009dff 	.word	0x08009dff
 8009d44:	08009dff 	.word	0x08009dff
 8009d48:	08009dff 	.word	0x08009dff
 8009d4c:	08009dff 	.word	0x08009dff
 8009d50:	08009dcb 	.word	0x08009dcb
 8009d54:	08009dff 	.word	0x08009dff
 8009d58:	08009dff 	.word	0x08009dff
 8009d5c:	08009dff 	.word	0x08009dff
 8009d60:	08009dff 	.word	0x08009dff
 8009d64:	08009dff 	.word	0x08009dff
 8009d68:	08009dff 	.word	0x08009dff
 8009d6c:	08009dff 	.word	0x08009dff
 8009d70:	08009dff 	.word	0x08009dff
 8009d74:	08009dff 	.word	0x08009dff
 8009d78:	08009dff 	.word	0x08009dff
 8009d7c:	08009dff 	.word	0x08009dff
 8009d80:	08009dff 	.word	0x08009dff
 8009d84:	08009dff 	.word	0x08009dff
 8009d88:	08009dff 	.word	0x08009dff
 8009d8c:	08009dff 	.word	0x08009dff
 8009d90:	08009df1 	.word	0x08009df1
 8009d94:	2b40      	cmp	r3, #64	@ 0x40
 8009d96:	d02e      	beq.n	8009df6 <UART_SetConfig+0xab2>
 8009d98:	e031      	b.n	8009dfe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d9a:	f7fc f9db 	bl	8006154 <HAL_RCC_GetPCLK1Freq>
 8009d9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009da0:	e033      	b.n	8009e0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009da2:	f7fc f9ed 	bl	8006180 <HAL_RCC_GetPCLK2Freq>
 8009da6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009da8:	e02f      	b.n	8009e0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009daa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fd fbb2 	bl	8007518 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009db8:	e027      	b.n	8009e0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dba:	f107 0318 	add.w	r3, r7, #24
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fd fcfe 	bl	80077c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dc8:	e01f      	b.n	8009e0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dca:	4b69      	ldr	r3, [pc, #420]	@ (8009f70 <UART_SetConfig+0xc2c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f003 0320 	and.w	r3, r3, #32
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d009      	beq.n	8009dea <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dd6:	4b66      	ldr	r3, [pc, #408]	@ (8009f70 <UART_SetConfig+0xc2c>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	08db      	lsrs	r3, r3, #3
 8009ddc:	f003 0303 	and.w	r3, r3, #3
 8009de0:	4a64      	ldr	r2, [pc, #400]	@ (8009f74 <UART_SetConfig+0xc30>)
 8009de2:	fa22 f303 	lsr.w	r3, r2, r3
 8009de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009de8:	e00f      	b.n	8009e0a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009dea:	4b62      	ldr	r3, [pc, #392]	@ (8009f74 <UART_SetConfig+0xc30>)
 8009dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dee:	e00c      	b.n	8009e0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009df0:	4b61      	ldr	r3, [pc, #388]	@ (8009f78 <UART_SetConfig+0xc34>)
 8009df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009df4:	e009      	b.n	8009e0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dfc:	e005      	b.n	8009e0a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 80ea 	beq.w	8009fe6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e16:	4a55      	ldr	r2, [pc, #340]	@ (8009f6c <UART_SetConfig+0xc28>)
 8009e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e24:	005a      	lsls	r2, r3, #1
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	085b      	lsrs	r3, r3, #1
 8009e2c:	441a      	add	r2, r3
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e36:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3a:	2b0f      	cmp	r3, #15
 8009e3c:	d916      	bls.n	8009e6c <UART_SetConfig+0xb28>
 8009e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e44:	d212      	bcs.n	8009e6c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	f023 030f 	bic.w	r3, r3, #15
 8009e4e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e52:	085b      	lsrs	r3, r3, #1
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	f003 0307 	and.w	r3, r3, #7
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009e68:	60da      	str	r2, [r3, #12]
 8009e6a:	e0bc      	b.n	8009fe6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009e72:	e0b8      	b.n	8009fe6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e74:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e78:	2b20      	cmp	r3, #32
 8009e7a:	dc4b      	bgt.n	8009f14 <UART_SetConfig+0xbd0>
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f2c0 8087 	blt.w	8009f90 <UART_SetConfig+0xc4c>
 8009e82:	2b20      	cmp	r3, #32
 8009e84:	f200 8084 	bhi.w	8009f90 <UART_SetConfig+0xc4c>
 8009e88:	a201      	add	r2, pc, #4	@ (adr r2, 8009e90 <UART_SetConfig+0xb4c>)
 8009e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8e:	bf00      	nop
 8009e90:	08009f1b 	.word	0x08009f1b
 8009e94:	08009f23 	.word	0x08009f23
 8009e98:	08009f91 	.word	0x08009f91
 8009e9c:	08009f91 	.word	0x08009f91
 8009ea0:	08009f2b 	.word	0x08009f2b
 8009ea4:	08009f91 	.word	0x08009f91
 8009ea8:	08009f91 	.word	0x08009f91
 8009eac:	08009f91 	.word	0x08009f91
 8009eb0:	08009f3b 	.word	0x08009f3b
 8009eb4:	08009f91 	.word	0x08009f91
 8009eb8:	08009f91 	.word	0x08009f91
 8009ebc:	08009f91 	.word	0x08009f91
 8009ec0:	08009f91 	.word	0x08009f91
 8009ec4:	08009f91 	.word	0x08009f91
 8009ec8:	08009f91 	.word	0x08009f91
 8009ecc:	08009f91 	.word	0x08009f91
 8009ed0:	08009f4b 	.word	0x08009f4b
 8009ed4:	08009f91 	.word	0x08009f91
 8009ed8:	08009f91 	.word	0x08009f91
 8009edc:	08009f91 	.word	0x08009f91
 8009ee0:	08009f91 	.word	0x08009f91
 8009ee4:	08009f91 	.word	0x08009f91
 8009ee8:	08009f91 	.word	0x08009f91
 8009eec:	08009f91 	.word	0x08009f91
 8009ef0:	08009f91 	.word	0x08009f91
 8009ef4:	08009f91 	.word	0x08009f91
 8009ef8:	08009f91 	.word	0x08009f91
 8009efc:	08009f91 	.word	0x08009f91
 8009f00:	08009f91 	.word	0x08009f91
 8009f04:	08009f91 	.word	0x08009f91
 8009f08:	08009f91 	.word	0x08009f91
 8009f0c:	08009f91 	.word	0x08009f91
 8009f10:	08009f83 	.word	0x08009f83
 8009f14:	2b40      	cmp	r3, #64	@ 0x40
 8009f16:	d037      	beq.n	8009f88 <UART_SetConfig+0xc44>
 8009f18:	e03a      	b.n	8009f90 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f1a:	f7fc f91b 	bl	8006154 <HAL_RCC_GetPCLK1Freq>
 8009f1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f20:	e03c      	b.n	8009f9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f22:	f7fc f92d 	bl	8006180 <HAL_RCC_GetPCLK2Freq>
 8009f26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f28:	e038      	b.n	8009f9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fd faf2 	bl	8007518 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f38:	e030      	b.n	8009f9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f3a:	f107 0318 	add.w	r3, r7, #24
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fd fc3e 	bl	80077c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f48:	e028      	b.n	8009f9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f4a:	4b09      	ldr	r3, [pc, #36]	@ (8009f70 <UART_SetConfig+0xc2c>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 0320 	and.w	r3, r3, #32
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d012      	beq.n	8009f7c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f56:	4b06      	ldr	r3, [pc, #24]	@ (8009f70 <UART_SetConfig+0xc2c>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	08db      	lsrs	r3, r3, #3
 8009f5c:	f003 0303 	and.w	r3, r3, #3
 8009f60:	4a04      	ldr	r2, [pc, #16]	@ (8009f74 <UART_SetConfig+0xc30>)
 8009f62:	fa22 f303 	lsr.w	r3, r2, r3
 8009f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f68:	e018      	b.n	8009f9c <UART_SetConfig+0xc58>
 8009f6a:	bf00      	nop
 8009f6c:	080132a8 	.word	0x080132a8
 8009f70:	58024400 	.word	0x58024400
 8009f74:	03d09000 	.word	0x03d09000
 8009f78:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009f7c:	4b24      	ldr	r3, [pc, #144]	@ (800a010 <UART_SetConfig+0xccc>)
 8009f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f80:	e00c      	b.n	8009f9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f82:	4b24      	ldr	r3, [pc, #144]	@ (800a014 <UART_SetConfig+0xcd0>)
 8009f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f86:	e009      	b.n	8009f9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f8e:	e005      	b.n	8009f9c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009f90:	2300      	movs	r3, #0
 8009f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f9a:	bf00      	nop
    }

    if (pclk != 0U)
 8009f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d021      	beq.n	8009fe6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa6:	4a1c      	ldr	r2, [pc, #112]	@ (800a018 <UART_SetConfig+0xcd4>)
 8009fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fac:	461a      	mov	r2, r3
 8009fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb0:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	085b      	lsrs	r3, r3, #1
 8009fba:	441a      	add	r2, r3
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc8:	2b0f      	cmp	r3, #15
 8009fca:	d909      	bls.n	8009fe0 <UART_SetConfig+0xc9c>
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fd2:	d205      	bcs.n	8009fe0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	60da      	str	r2, [r3, #12]
 8009fde:	e002      	b.n	8009fe6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	2200      	movs	r2, #0
 800a000:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a002:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a006:	4618      	mov	r0, r3
 800a008:	3748      	adds	r7, #72	@ 0x48
 800a00a:	46bd      	mov	sp, r7
 800a00c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a010:	03d09000 	.word	0x03d09000
 800a014:	003d0900 	.word	0x003d0900
 800a018:	080132a8 	.word	0x080132a8

0800a01c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a028:	f003 0308 	and.w	r3, r3, #8
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00a      	beq.n	800a046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	430a      	orrs	r2, r1
 800a044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a04a:	f003 0301 	and.w	r3, r3, #1
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00a      	beq.n	800a068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	430a      	orrs	r2, r1
 800a066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a06c:	f003 0302 	and.w	r3, r3, #2
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00a      	beq.n	800a08a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	430a      	orrs	r2, r1
 800a088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a08e:	f003 0304 	and.w	r3, r3, #4
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00a      	beq.n	800a0ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	430a      	orrs	r2, r1
 800a0aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b0:	f003 0310 	and.w	r3, r3, #16
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00a      	beq.n	800a0ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	430a      	orrs	r2, r1
 800a0cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d2:	f003 0320 	and.w	r3, r3, #32
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	430a      	orrs	r2, r1
 800a0ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d01a      	beq.n	800a132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	430a      	orrs	r2, r1
 800a110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a11a:	d10a      	bne.n	800a132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	430a      	orrs	r2, r1
 800a130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00a      	beq.n	800a154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	430a      	orrs	r2, r1
 800a152:	605a      	str	r2, [r3, #4]
  }
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b098      	sub	sp, #96	@ 0x60
 800a164:	af02      	add	r7, sp, #8
 800a166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a170:	f7f8 fdce 	bl	8002d10 <HAL_GetTick>
 800a174:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 0308 	and.w	r3, r3, #8
 800a180:	2b08      	cmp	r3, #8
 800a182:	d12f      	bne.n	800a1e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a184:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a18c:	2200      	movs	r2, #0
 800a18e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 f88e 	bl	800a2b4 <UART_WaitOnFlagUntilTimeout>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d022      	beq.n	800a1e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a6:	e853 3f00 	ldrex	r3, [r3]
 800a1aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1c4:	e841 2300 	strex	r3, r2, [r1]
 800a1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e6      	bne.n	800a19e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e063      	b.n	800a2ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 0304 	and.w	r3, r3, #4
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d149      	bne.n	800a286 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f857 	bl	800a2b4 <UART_WaitOnFlagUntilTimeout>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d03c      	beq.n	800a286 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a214:	e853 3f00 	ldrex	r3, [r3]
 800a218:	623b      	str	r3, [r7, #32]
   return(result);
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a220:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	461a      	mov	r2, r3
 800a228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a22a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a22c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a232:	e841 2300 	strex	r3, r2, [r1]
 800a236:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1e6      	bne.n	800a20c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3308      	adds	r3, #8
 800a244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	e853 3f00 	ldrex	r3, [r3]
 800a24c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f023 0301 	bic.w	r3, r3, #1
 800a254:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3308      	adds	r3, #8
 800a25c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a25e:	61fa      	str	r2, [r7, #28]
 800a260:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a262:	69b9      	ldr	r1, [r7, #24]
 800a264:	69fa      	ldr	r2, [r7, #28]
 800a266:	e841 2300 	strex	r3, r2, [r1]
 800a26a:	617b      	str	r3, [r7, #20]
   return(result);
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1e5      	bne.n	800a23e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2220      	movs	r2, #32
 800a276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e012      	b.n	800a2ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2220      	movs	r2, #32
 800a28a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2220      	movs	r2, #32
 800a292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3758      	adds	r7, #88	@ 0x58
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	603b      	str	r3, [r7, #0]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2c4:	e04f      	b.n	800a366 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2cc:	d04b      	beq.n	800a366 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2ce:	f7f8 fd1f 	bl	8002d10 <HAL_GetTick>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d302      	bcc.n	800a2e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d101      	bne.n	800a2e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	e04e      	b.n	800a386 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 0304 	and.w	r3, r3, #4
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d037      	beq.n	800a366 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	2b80      	cmp	r3, #128	@ 0x80
 800a2fa:	d034      	beq.n	800a366 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2b40      	cmp	r3, #64	@ 0x40
 800a300:	d031      	beq.n	800a366 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	69db      	ldr	r3, [r3, #28]
 800a308:	f003 0308 	and.w	r3, r3, #8
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	d110      	bne.n	800a332 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2208      	movs	r2, #8
 800a316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 f95b 	bl	800a5d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2208      	movs	r2, #8
 800a322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e029      	b.n	800a386 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	69db      	ldr	r3, [r3, #28]
 800a338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a33c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a340:	d111      	bne.n	800a366 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a34a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f000 f941 	bl	800a5d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2220      	movs	r2, #32
 800a356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	e00f      	b.n	800a386 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	69da      	ldr	r2, [r3, #28]
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	4013      	ands	r3, r2
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	429a      	cmp	r2, r3
 800a374:	bf0c      	ite	eq
 800a376:	2301      	moveq	r3, #1
 800a378:	2300      	movne	r3, #0
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	461a      	mov	r2, r3
 800a37e:	79fb      	ldrb	r3, [r7, #7]
 800a380:	429a      	cmp	r2, r3
 800a382:	d0a0      	beq.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
	...

0800a390 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a390:	b480      	push	{r7}
 800a392:	b0a3      	sub	sp, #140	@ 0x8c
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	4613      	mov	r3, r2
 800a39c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	88fa      	ldrh	r2, [r7, #6]
 800a3a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	88fa      	ldrh	r2, [r7, #6]
 800a3b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3c2:	d10e      	bne.n	800a3e2 <UART_Start_Receive_IT+0x52>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d105      	bne.n	800a3d8 <UART_Start_Receive_IT+0x48>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a3d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a3d6:	e02d      	b.n	800a434 <UART_Start_Receive_IT+0xa4>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	22ff      	movs	r2, #255	@ 0xff
 800a3dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a3e0:	e028      	b.n	800a434 <UART_Start_Receive_IT+0xa4>
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d10d      	bne.n	800a406 <UART_Start_Receive_IT+0x76>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d104      	bne.n	800a3fc <UART_Start_Receive_IT+0x6c>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	22ff      	movs	r2, #255	@ 0xff
 800a3f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a3fa:	e01b      	b.n	800a434 <UART_Start_Receive_IT+0xa4>
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	227f      	movs	r2, #127	@ 0x7f
 800a400:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a404:	e016      	b.n	800a434 <UART_Start_Receive_IT+0xa4>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a40e:	d10d      	bne.n	800a42c <UART_Start_Receive_IT+0x9c>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d104      	bne.n	800a422 <UART_Start_Receive_IT+0x92>
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	227f      	movs	r2, #127	@ 0x7f
 800a41c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a420:	e008      	b.n	800a434 <UART_Start_Receive_IT+0xa4>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	223f      	movs	r2, #63	@ 0x3f
 800a426:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a42a:	e003      	b.n	800a434 <UART_Start_Receive_IT+0xa4>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2222      	movs	r2, #34	@ 0x22
 800a440:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3308      	adds	r3, #8
 800a44a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a44e:	e853 3f00 	ldrex	r3, [r3]
 800a452:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a454:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a456:	f043 0301 	orr.w	r3, r3, #1
 800a45a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3308      	adds	r3, #8
 800a464:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a468:	673a      	str	r2, [r7, #112]	@ 0x70
 800a46a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a46e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a470:	e841 2300 	strex	r3, r2, [r1]
 800a474:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a476:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1e3      	bne.n	800a444 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a484:	d14f      	bne.n	800a526 <UART_Start_Receive_IT+0x196>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a48c:	88fa      	ldrh	r2, [r7, #6]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d349      	bcc.n	800a526 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a49a:	d107      	bne.n	800a4ac <UART_Start_Receive_IT+0x11c>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d103      	bne.n	800a4ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	4a47      	ldr	r2, [pc, #284]	@ (800a5c4 <UART_Start_Receive_IT+0x234>)
 800a4a8:	675a      	str	r2, [r3, #116]	@ 0x74
 800a4aa:	e002      	b.n	800a4b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	4a46      	ldr	r2, [pc, #280]	@ (800a5c8 <UART_Start_Receive_IT+0x238>)
 800a4b0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d01a      	beq.n	800a4f0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4c2:	e853 3f00 	ldrex	r3, [r3]
 800a4c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a4c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a4dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a4de:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a4e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a4e4:	e841 2300 	strex	r3, r2, [r1]
 800a4e8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a4ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e4      	bne.n	800a4ba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3308      	adds	r3, #8
 800a4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4fa:	e853 3f00 	ldrex	r3, [r3]
 800a4fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a506:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3308      	adds	r3, #8
 800a50e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a510:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a512:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a514:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a516:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a518:	e841 2300 	strex	r3, r2, [r1]
 800a51c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a51e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1e5      	bne.n	800a4f0 <UART_Start_Receive_IT+0x160>
 800a524:	e046      	b.n	800a5b4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a52e:	d107      	bne.n	800a540 <UART_Start_Receive_IT+0x1b0>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d103      	bne.n	800a540 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4a24      	ldr	r2, [pc, #144]	@ (800a5cc <UART_Start_Receive_IT+0x23c>)
 800a53c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a53e:	e002      	b.n	800a546 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4a23      	ldr	r2, [pc, #140]	@ (800a5d0 <UART_Start_Receive_IT+0x240>)
 800a544:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d019      	beq.n	800a582 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a556:	e853 3f00 	ldrex	r3, [r3]
 800a55a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a562:	677b      	str	r3, [r7, #116]	@ 0x74
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	461a      	mov	r2, r3
 800a56a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a56c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a56e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a570:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a572:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a574:	e841 2300 	strex	r3, r2, [r1]
 800a578:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1e6      	bne.n	800a54e <UART_Start_Receive_IT+0x1be>
 800a580:	e018      	b.n	800a5b4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	e853 3f00 	ldrex	r3, [r3]
 800a58e:	613b      	str	r3, [r7, #16]
   return(result);
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	f043 0320 	orr.w	r3, r3, #32
 800a596:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	461a      	mov	r2, r3
 800a59e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5a0:	623b      	str	r3, [r7, #32]
 800a5a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a4:	69f9      	ldr	r1, [r7, #28]
 800a5a6:	6a3a      	ldr	r2, [r7, #32]
 800a5a8:	e841 2300 	strex	r3, r2, [r1]
 800a5ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1e6      	bne.n	800a582 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	378c      	adds	r7, #140	@ 0x8c
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	0800adf5 	.word	0x0800adf5
 800a5c8:	0800aa95 	.word	0x0800aa95
 800a5cc:	0800a8dd 	.word	0x0800a8dd
 800a5d0:	0800a725 	.word	0x0800a725

0800a5d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b095      	sub	sp, #84	@ 0x54
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e4:	e853 3f00 	ldrex	r3, [r3]
 800a5e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a600:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a602:	e841 2300 	strex	r3, r2, [r1]
 800a606:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1e6      	bne.n	800a5dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3308      	adds	r3, #8
 800a614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	e853 3f00 	ldrex	r3, [r3]
 800a61c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a61e:	69fa      	ldr	r2, [r7, #28]
 800a620:	4b1e      	ldr	r3, [pc, #120]	@ (800a69c <UART_EndRxTransfer+0xc8>)
 800a622:	4013      	ands	r3, r2
 800a624:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	3308      	adds	r3, #8
 800a62c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a62e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a630:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a632:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a636:	e841 2300 	strex	r3, r2, [r1]
 800a63a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1e5      	bne.n	800a60e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a646:	2b01      	cmp	r3, #1
 800a648:	d118      	bne.n	800a67c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	e853 3f00 	ldrex	r3, [r3]
 800a656:	60bb      	str	r3, [r7, #8]
   return(result);
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	f023 0310 	bic.w	r3, r3, #16
 800a65e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	461a      	mov	r2, r3
 800a666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a668:	61bb      	str	r3, [r7, #24]
 800a66a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66c:	6979      	ldr	r1, [r7, #20]
 800a66e:	69ba      	ldr	r2, [r7, #24]
 800a670:	e841 2300 	strex	r3, r2, [r1]
 800a674:	613b      	str	r3, [r7, #16]
   return(result);
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1e6      	bne.n	800a64a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2220      	movs	r2, #32
 800a680:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a690:	bf00      	nop
 800a692:	3754      	adds	r7, #84	@ 0x54
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	effffffe 	.word	0xeffffffe

0800a6a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f7fe fe2a 	bl	8009318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6c4:	bf00      	nop
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b088      	sub	sp, #32
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	e853 3f00 	ldrex	r3, [r3]
 800a6e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6e8:	61fb      	str	r3, [r7, #28]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	61bb      	str	r3, [r7, #24]
 800a6f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f6:	6979      	ldr	r1, [r7, #20]
 800a6f8:	69ba      	ldr	r2, [r7, #24]
 800a6fa:	e841 2300 	strex	r3, r2, [r1]
 800a6fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1e6      	bne.n	800a6d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2220      	movs	r2, #32
 800a70a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7fe fdf5 	bl	8009304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a71a:	bf00      	nop
 800a71c:	3720      	adds	r7, #32
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
	...

0800a724 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b09c      	sub	sp, #112	@ 0x70
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a732:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a73c:	2b22      	cmp	r3, #34	@ 0x22
 800a73e:	f040 80be 	bne.w	800a8be <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a748:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a74c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a750:	b2d9      	uxtb	r1, r3
 800a752:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a756:	b2da      	uxtb	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a75c:	400a      	ands	r2, r1
 800a75e:	b2d2      	uxtb	r2, r2
 800a760:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a772:	b29b      	uxth	r3, r3
 800a774:	3b01      	subs	r3, #1
 800a776:	b29a      	uxth	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a784:	b29b      	uxth	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	f040 80a1 	bne.w	800a8ce <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a794:	e853 3f00 	ldrex	r3, [r3]
 800a798:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a79a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a79c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7b2:	e841 2300 	strex	r3, r2, [r1]
 800a7b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1e6      	bne.n	800a78c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	3308      	adds	r3, #8
 800a7c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c8:	e853 3f00 	ldrex	r3, [r3]
 800a7cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d0:	f023 0301 	bic.w	r3, r3, #1
 800a7d4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3308      	adds	r3, #8
 800a7dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a7de:	647a      	str	r2, [r7, #68]	@ 0x44
 800a7e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e5      	bne.n	800a7be <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2220      	movs	r2, #32
 800a7f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a33      	ldr	r2, [pc, #204]	@ (800a8d8 <UART_RxISR_8BIT+0x1b4>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d01f      	beq.n	800a850 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d018      	beq.n	800a850 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a826:	e853 3f00 	ldrex	r3, [r3]
 800a82a:	623b      	str	r3, [r7, #32]
   return(result);
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a832:	663b      	str	r3, [r7, #96]	@ 0x60
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	461a      	mov	r2, r3
 800a83a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a83c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a83e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a840:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a844:	e841 2300 	strex	r3, r2, [r1]
 800a848:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a84a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1e6      	bne.n	800a81e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a854:	2b01      	cmp	r3, #1
 800a856:	d12e      	bne.n	800a8b6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	e853 3f00 	ldrex	r3, [r3]
 800a86a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f023 0310 	bic.w	r3, r3, #16
 800a872:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	461a      	mov	r2, r3
 800a87a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a87c:	61fb      	str	r3, [r7, #28]
 800a87e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a880:	69b9      	ldr	r1, [r7, #24]
 800a882:	69fa      	ldr	r2, [r7, #28]
 800a884:	e841 2300 	strex	r3, r2, [r1]
 800a888:	617b      	str	r3, [r7, #20]
   return(result);
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1e6      	bne.n	800a85e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	69db      	ldr	r3, [r3, #28]
 800a896:	f003 0310 	and.w	r3, r3, #16
 800a89a:	2b10      	cmp	r3, #16
 800a89c:	d103      	bne.n	800a8a6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2210      	movs	r2, #16
 800a8a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f7fe fd3c 	bl	800932c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a8b4:	e00b      	b.n	800a8ce <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7f6 fdae 	bl	8001418 <HAL_UART_RxCpltCallback>
}
 800a8bc:	e007      	b.n	800a8ce <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	699a      	ldr	r2, [r3, #24]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f042 0208 	orr.w	r2, r2, #8
 800a8cc:	619a      	str	r2, [r3, #24]
}
 800a8ce:	bf00      	nop
 800a8d0:	3770      	adds	r7, #112	@ 0x70
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	58000c00 	.word	0x58000c00

0800a8dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b09c      	sub	sp, #112	@ 0x70
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a8ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8f4:	2b22      	cmp	r3, #34	@ 0x22
 800a8f6:	f040 80be 	bne.w	800aa76 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a900:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a908:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a90a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a90e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a912:	4013      	ands	r3, r2
 800a914:	b29a      	uxth	r2, r3
 800a916:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a918:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a91e:	1c9a      	adds	r2, r3, #2
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	3b01      	subs	r3, #1
 800a92e:	b29a      	uxth	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f040 80a1 	bne.w	800aa86 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a94c:	e853 3f00 	ldrex	r3, [r3]
 800a950:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a954:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a958:	667b      	str	r3, [r7, #100]	@ 0x64
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	461a      	mov	r2, r3
 800a960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a962:	657b      	str	r3, [r7, #84]	@ 0x54
 800a964:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a966:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a968:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a96a:	e841 2300 	strex	r3, r2, [r1]
 800a96e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1e6      	bne.n	800a944 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	3308      	adds	r3, #8
 800a97c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a980:	e853 3f00 	ldrex	r3, [r3]
 800a984:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a988:	f023 0301 	bic.w	r3, r3, #1
 800a98c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	3308      	adds	r3, #8
 800a994:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a996:	643a      	str	r2, [r7, #64]	@ 0x40
 800a998:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a99c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a99e:	e841 2300 	strex	r3, r2, [r1]
 800a9a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d1e5      	bne.n	800a976 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2220      	movs	r2, #32
 800a9ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a33      	ldr	r2, [pc, #204]	@ (800aa90 <UART_RxISR_16BIT+0x1b4>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d01f      	beq.n	800aa08 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d018      	beq.n	800aa08 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	e853 3f00 	ldrex	r3, [r3]
 800a9e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a9ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9f6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9fc:	e841 2300 	strex	r3, r2, [r1]
 800aa00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1e6      	bne.n	800a9d6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d12e      	bne.n	800aa6e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	e853 3f00 	ldrex	r3, [r3]
 800aa22:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	f023 0310 	bic.w	r3, r3, #16
 800aa2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	461a      	mov	r2, r3
 800aa32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa34:	61bb      	str	r3, [r7, #24]
 800aa36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa38:	6979      	ldr	r1, [r7, #20]
 800aa3a:	69ba      	ldr	r2, [r7, #24]
 800aa3c:	e841 2300 	strex	r3, r2, [r1]
 800aa40:	613b      	str	r3, [r7, #16]
   return(result);
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1e6      	bne.n	800aa16 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	69db      	ldr	r3, [r3, #28]
 800aa4e:	f003 0310 	and.w	r3, r3, #16
 800aa52:	2b10      	cmp	r3, #16
 800aa54:	d103      	bne.n	800aa5e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	2210      	movs	r2, #16
 800aa5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa64:	4619      	mov	r1, r3
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7fe fc60 	bl	800932c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa6c:	e00b      	b.n	800aa86 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7f6 fcd2 	bl	8001418 <HAL_UART_RxCpltCallback>
}
 800aa74:	e007      	b.n	800aa86 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	699a      	ldr	r2, [r3, #24]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f042 0208 	orr.w	r2, r2, #8
 800aa84:	619a      	str	r2, [r3, #24]
}
 800aa86:	bf00      	nop
 800aa88:	3770      	adds	r7, #112	@ 0x70
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	58000c00 	.word	0x58000c00

0800aa94 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b0ac      	sub	sp, #176	@ 0xb0
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aaa2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	69db      	ldr	r3, [r3, #28]
 800aaac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaca:	2b22      	cmp	r3, #34	@ 0x22
 800aacc:	f040 8180 	bne.w	800add0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aad6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aada:	e123      	b.n	800ad24 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aae2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aae6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800aaea:	b2d9      	uxtb	r1, r3
 800aaec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaf6:	400a      	ands	r2, r1
 800aaf8:	b2d2      	uxtb	r2, r2
 800aafa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab00:	1c5a      	adds	r2, r3, #1
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	69db      	ldr	r3, [r3, #28]
 800ab1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ab22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab26:	f003 0307 	and.w	r3, r3, #7
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d053      	beq.n	800abd6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d011      	beq.n	800ab5e <UART_RxISR_8BIT_FIFOEN+0xca>
 800ab3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ab3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00b      	beq.n	800ab5e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab54:	f043 0201 	orr.w	r2, r3, #1
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab62:	f003 0302 	and.w	r3, r3, #2
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d011      	beq.n	800ab8e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ab6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ab6e:	f003 0301 	and.w	r3, r3, #1
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00b      	beq.n	800ab8e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2202      	movs	r2, #2
 800ab7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab84:	f043 0204 	orr.w	r2, r3, #4
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab92:	f003 0304 	and.w	r3, r3, #4
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d011      	beq.n	800abbe <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ab9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ab9e:	f003 0301 	and.w	r3, r3, #1
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00b      	beq.n	800abbe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2204      	movs	r2, #4
 800abac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abb4:	f043 0202 	orr.w	r2, r3, #2
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d006      	beq.n	800abd6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f7fe fba5 	bl	8009318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abdc:	b29b      	uxth	r3, r3
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f040 80a0 	bne.w	800ad24 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abec:	e853 3f00 	ldrex	r3, [r3]
 800abf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800abf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	461a      	mov	r2, r3
 800ac02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac08:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac0a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ac0c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ac0e:	e841 2300 	strex	r3, r2, [r1]
 800ac12:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ac14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1e4      	bne.n	800abe4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	3308      	adds	r3, #8
 800ac20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac24:	e853 3f00 	ldrex	r3, [r3]
 800ac28:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ac2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac2c:	4b6e      	ldr	r3, [pc, #440]	@ (800ade8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800ac2e:	4013      	ands	r3, r2
 800ac30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	3308      	adds	r3, #8
 800ac3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ac3e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ac40:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac42:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ac44:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ac46:	e841 2300 	strex	r3, r2, [r1]
 800ac4a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ac4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1e3      	bne.n	800ac1a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2220      	movs	r2, #32
 800ac56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a60      	ldr	r2, [pc, #384]	@ (800adec <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d021      	beq.n	800acb4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d01a      	beq.n	800acb4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac86:	e853 3f00 	ldrex	r3, [r3]
 800ac8a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ac8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ac92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aca0:	657b      	str	r3, [r7, #84]	@ 0x54
 800aca2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aca6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aca8:	e841 2300 	strex	r3, r2, [r1]
 800acac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800acae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1e4      	bne.n	800ac7e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d130      	bne.n	800ad1e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acca:	e853 3f00 	ldrex	r3, [r3]
 800acce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800acd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd2:	f023 0310 	bic.w	r3, r3, #16
 800acd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	461a      	mov	r2, r3
 800ace0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ace4:	643b      	str	r3, [r7, #64]	@ 0x40
 800ace6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acec:	e841 2300 	strex	r3, r2, [r1]
 800acf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800acf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1e4      	bne.n	800acc2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	69db      	ldr	r3, [r3, #28]
 800acfe:	f003 0310 	and.w	r3, r3, #16
 800ad02:	2b10      	cmp	r3, #16
 800ad04:	d103      	bne.n	800ad0e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2210      	movs	r2, #16
 800ad0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad14:	4619      	mov	r1, r3
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7fe fb08 	bl	800932c <HAL_UARTEx_RxEventCallback>
 800ad1c:	e002      	b.n	800ad24 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7f6 fb7a 	bl	8001418 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad24:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d006      	beq.n	800ad3a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ad2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad30:	f003 0320 	and.w	r3, r3, #32
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f47f aed1 	bne.w	800aadc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad40:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ad44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d049      	beq.n	800ade0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad52:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d242      	bcs.n	800ade0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3308      	adds	r3, #8
 800ad60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	e853 3f00 	ldrex	r3, [r3]
 800ad68:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	3308      	adds	r3, #8
 800ad7a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ad7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad86:	e841 2300 	strex	r3, r2, [r1]
 800ad8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1e3      	bne.n	800ad5a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a16      	ldr	r2, [pc, #88]	@ (800adf0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ad96:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	e853 3f00 	ldrex	r3, [r3]
 800ada4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	f043 0320 	orr.w	r3, r3, #32
 800adac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	461a      	mov	r2, r3
 800adb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800adba:	61bb      	str	r3, [r7, #24]
 800adbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbe:	6979      	ldr	r1, [r7, #20]
 800adc0:	69ba      	ldr	r2, [r7, #24]
 800adc2:	e841 2300 	strex	r3, r2, [r1]
 800adc6:	613b      	str	r3, [r7, #16]
   return(result);
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1e4      	bne.n	800ad98 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800adce:	e007      	b.n	800ade0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	699a      	ldr	r2, [r3, #24]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f042 0208 	orr.w	r2, r2, #8
 800adde:	619a      	str	r2, [r3, #24]
}
 800ade0:	bf00      	nop
 800ade2:	37b0      	adds	r7, #176	@ 0xb0
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	effffffe 	.word	0xeffffffe
 800adec:	58000c00 	.word	0x58000c00
 800adf0:	0800a725 	.word	0x0800a725

0800adf4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b0ae      	sub	sp, #184	@ 0xb8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae02:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	69db      	ldr	r3, [r3, #28]
 800ae0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae2a:	2b22      	cmp	r3, #34	@ 0x22
 800ae2c:	f040 8184 	bne.w	800b138 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ae36:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ae3a:	e127      	b.n	800b08c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae42:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ae4e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ae52:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ae56:	4013      	ands	r3, r2
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ae5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae64:	1c9a      	adds	r2, r3, #2
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	3b01      	subs	r3, #1
 800ae74:	b29a      	uxth	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	69db      	ldr	r3, [r3, #28]
 800ae82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ae86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae8a:	f003 0307 	and.w	r3, r3, #7
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d053      	beq.n	800af3a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae96:	f003 0301 	and.w	r3, r3, #1
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d011      	beq.n	800aec2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ae9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00b      	beq.n	800aec2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeb8:	f043 0201 	orr.w	r2, r3, #1
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aec2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aec6:	f003 0302 	and.w	r3, r3, #2
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d011      	beq.n	800aef2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800aece:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aed2:	f003 0301 	and.w	r3, r3, #1
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00b      	beq.n	800aef2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2202      	movs	r2, #2
 800aee0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aee8:	f043 0204 	orr.w	r2, r3, #4
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aef2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aef6:	f003 0304 	and.w	r3, r3, #4
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d011      	beq.n	800af22 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800aefe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00b      	beq.n	800af22 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2204      	movs	r2, #4
 800af10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af18:	f043 0202 	orr.w	r2, r3, #2
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d006      	beq.n	800af3a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7fe f9f3 	bl	8009318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af40:	b29b      	uxth	r3, r3
 800af42:	2b00      	cmp	r3, #0
 800af44:	f040 80a2 	bne.w	800b08c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af50:	e853 3f00 	ldrex	r3, [r3]
 800af54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800af56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	461a      	mov	r2, r3
 800af66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800af6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800af72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800af76:	e841 2300 	strex	r3, r2, [r1]
 800af7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800af7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1e2      	bne.n	800af48 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	3308      	adds	r3, #8
 800af88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af8c:	e853 3f00 	ldrex	r3, [r3]
 800af90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800af92:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800af94:	4b6e      	ldr	r3, [pc, #440]	@ (800b150 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800af96:	4013      	ands	r3, r2
 800af98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	3308      	adds	r3, #8
 800afa2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800afa6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800afa8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afaa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800afac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800afae:	e841 2300 	strex	r3, r2, [r1]
 800afb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800afb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1e3      	bne.n	800af82 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2220      	movs	r2, #32
 800afbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a60      	ldr	r2, [pc, #384]	@ (800b154 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d021      	beq.n	800b01c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d01a      	beq.n	800b01c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afee:	e853 3f00 	ldrex	r3, [r3]
 800aff2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aff6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800affa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	461a      	mov	r2, r3
 800b004:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b008:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b00a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b00e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b010:	e841 2300 	strex	r3, r2, [r1]
 800b014:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d1e4      	bne.n	800afe6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b020:	2b01      	cmp	r3, #1
 800b022:	d130      	bne.n	800b086 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b032:	e853 3f00 	ldrex	r3, [r3]
 800b036:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b03a:	f023 0310 	bic.w	r3, r3, #16
 800b03e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	461a      	mov	r2, r3
 800b048:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b04c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b04e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b050:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b052:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b054:	e841 2300 	strex	r3, r2, [r1]
 800b058:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b05a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d1e4      	bne.n	800b02a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	69db      	ldr	r3, [r3, #28]
 800b066:	f003 0310 	and.w	r3, r3, #16
 800b06a:	2b10      	cmp	r3, #16
 800b06c:	d103      	bne.n	800b076 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2210      	movs	r2, #16
 800b074:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b07c:	4619      	mov	r1, r3
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f7fe f954 	bl	800932c <HAL_UARTEx_RxEventCallback>
 800b084:	e002      	b.n	800b08c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7f6 f9c6 	bl	8001418 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b08c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b090:	2b00      	cmp	r3, #0
 800b092:	d006      	beq.n	800b0a2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b094:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b098:	f003 0320 	and.w	r3, r3, #32
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f47f aecd 	bne.w	800ae3c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0a8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b0ac:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d049      	beq.n	800b148 <UART_RxISR_16BIT_FIFOEN+0x354>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b0ba:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d242      	bcs.n	800b148 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	3308      	adds	r3, #8
 800b0c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0cc:	e853 3f00 	ldrex	r3, [r3]
 800b0d0:	623b      	str	r3, [r7, #32]
   return(result);
 800b0d2:	6a3b      	ldr	r3, [r7, #32]
 800b0d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	3308      	adds	r3, #8
 800b0e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b0e6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b0e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0ee:	e841 2300 	strex	r3, r2, [r1]
 800b0f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1e3      	bne.n	800b0c2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a16      	ldr	r2, [pc, #88]	@ (800b158 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b0fe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	e853 3f00 	ldrex	r3, [r3]
 800b10c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f043 0320 	orr.w	r3, r3, #32
 800b114:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	461a      	mov	r2, r3
 800b11e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b122:	61fb      	str	r3, [r7, #28]
 800b124:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b126:	69b9      	ldr	r1, [r7, #24]
 800b128:	69fa      	ldr	r2, [r7, #28]
 800b12a:	e841 2300 	strex	r3, r2, [r1]
 800b12e:	617b      	str	r3, [r7, #20]
   return(result);
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1e4      	bne.n	800b100 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b136:	e007      	b.n	800b148 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	699a      	ldr	r2, [r3, #24]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f042 0208 	orr.w	r2, r2, #8
 800b146:	619a      	str	r2, [r3, #24]
}
 800b148:	bf00      	nop
 800b14a:	37b8      	adds	r7, #184	@ 0xb8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	effffffe 	.word	0xeffffffe
 800b154:	58000c00 	.word	0x58000c00
 800b158:	0800a8dd 	.word	0x0800a8dd

0800b15c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b178:	bf00      	nop
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b18c:	bf00      	nop
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d101      	bne.n	800b1ae <HAL_UARTEx_DisableFifoMode+0x16>
 800b1aa:	2302      	movs	r3, #2
 800b1ac:	e027      	b.n	800b1fe <HAL_UARTEx_DisableFifoMode+0x66>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2224      	movs	r2, #36	@ 0x24
 800b1ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f022 0201 	bic.w	r2, r2, #1
 800b1d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b1dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2220      	movs	r2, #32
 800b1f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3714      	adds	r7, #20
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr

0800b20a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b084      	sub	sp, #16
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
 800b212:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d101      	bne.n	800b222 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b21e:	2302      	movs	r3, #2
 800b220:	e02d      	b.n	800b27e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2201      	movs	r2, #1
 800b226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2224      	movs	r2, #36	@ 0x24
 800b22e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f022 0201 	bic.w	r2, r2, #1
 800b248:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	430a      	orrs	r2, r1
 800b25c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f850 	bl	800b304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2220      	movs	r2, #32
 800b270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b084      	sub	sp, #16
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b296:	2b01      	cmp	r3, #1
 800b298:	d101      	bne.n	800b29e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b29a:	2302      	movs	r3, #2
 800b29c:	e02d      	b.n	800b2fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2224      	movs	r2, #36	@ 0x24
 800b2aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f022 0201 	bic.w	r2, r2, #1
 800b2c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	430a      	orrs	r2, r1
 800b2d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f812 	bl	800b304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2220      	movs	r2, #32
 800b2ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
	...

0800b304 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b310:	2b00      	cmp	r3, #0
 800b312:	d108      	bne.n	800b326 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b324:	e031      	b.n	800b38a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b326:	2310      	movs	r3, #16
 800b328:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b32a:	2310      	movs	r3, #16
 800b32c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	0e5b      	lsrs	r3, r3, #25
 800b336:	b2db      	uxtb	r3, r3
 800b338:	f003 0307 	and.w	r3, r3, #7
 800b33c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	0f5b      	lsrs	r3, r3, #29
 800b346:	b2db      	uxtb	r3, r3
 800b348:	f003 0307 	and.w	r3, r3, #7
 800b34c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b34e:	7bbb      	ldrb	r3, [r7, #14]
 800b350:	7b3a      	ldrb	r2, [r7, #12]
 800b352:	4911      	ldr	r1, [pc, #68]	@ (800b398 <UARTEx_SetNbDataToProcess+0x94>)
 800b354:	5c8a      	ldrb	r2, [r1, r2]
 800b356:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b35a:	7b3a      	ldrb	r2, [r7, #12]
 800b35c:	490f      	ldr	r1, [pc, #60]	@ (800b39c <UARTEx_SetNbDataToProcess+0x98>)
 800b35e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b360:	fb93 f3f2 	sdiv	r3, r3, r2
 800b364:	b29a      	uxth	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
 800b36e:	7b7a      	ldrb	r2, [r7, #13]
 800b370:	4909      	ldr	r1, [pc, #36]	@ (800b398 <UARTEx_SetNbDataToProcess+0x94>)
 800b372:	5c8a      	ldrb	r2, [r1, r2]
 800b374:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b378:	7b7a      	ldrb	r2, [r7, #13]
 800b37a:	4908      	ldr	r1, [pc, #32]	@ (800b39c <UARTEx_SetNbDataToProcess+0x98>)
 800b37c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b37e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b382:	b29a      	uxth	r2, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b38a:	bf00      	nop
 800b38c:	3714      	adds	r7, #20
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	080132c0 	.word	0x080132c0
 800b39c:	080132c8 	.word	0x080132c8

0800b3a0 <Data_Analyse>:
/**
 * @brief 数据解析函数  如更换MCU平台或更换软件库，只需将串口接收到的值传入该函数即可解析
 * @param  rec 串口接收到的字节数据
 */
void Data_Analyse(uint8_t rec)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	71fb      	strb	r3, [r7, #7]
		float ActVal[6];
	} posture;
	static uint8_t count = 0;
	static uint8_t i = 0;

	ch = rec;
 800b3aa:	4a48      	ldr	r2, [pc, #288]	@ (800b4cc <Data_Analyse+0x12c>)
 800b3ac:	79fb      	ldrb	r3, [r7, #7]
 800b3ae:	7013      	strb	r3, [r2, #0]
//	HAL_UART_Transmit(&huart10, &ch, 1, 0xff);
//	HAL_UART_Transmit(&huart10, (uint8_t*) ch, 1, 0xff);
	switch (count)
 800b3b0:	4b47      	ldr	r3, [pc, #284]	@ (800b4d0 <Data_Analyse+0x130>)
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	2b04      	cmp	r3, #4
 800b3b6:	d87c      	bhi.n	800b4b2 <Data_Analyse+0x112>
 800b3b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c0 <Data_Analyse+0x20>)
 800b3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3be:	bf00      	nop
 800b3c0:	0800b3d5 	.word	0x0800b3d5
 800b3c4:	0800b3f3 	.word	0x0800b3f3
 800b3c8:	0800b41f 	.word	0x0800b41f
 800b3cc:	0800b455 	.word	0x0800b455
 800b3d0:	0800b473 	.word	0x0800b473
	{
	case 0:
		if (ch == 0x0d)
 800b3d4:	4b3d      	ldr	r3, [pc, #244]	@ (800b4cc <Data_Analyse+0x12c>)
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	2b0d      	cmp	r3, #13
 800b3da:	d106      	bne.n	800b3ea <Data_Analyse+0x4a>
			count++;
 800b3dc:	4b3c      	ldr	r3, [pc, #240]	@ (800b4d0 <Data_Analyse+0x130>)
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	b2da      	uxtb	r2, r3
 800b3e4:	4b3a      	ldr	r3, [pc, #232]	@ (800b4d0 <Data_Analyse+0x130>)
 800b3e6:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b3e8:	e06a      	b.n	800b4c0 <Data_Analyse+0x120>
			count = 0;
 800b3ea:	4b39      	ldr	r3, [pc, #228]	@ (800b4d0 <Data_Analyse+0x130>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	701a      	strb	r2, [r3, #0]
		break;
 800b3f0:	e066      	b.n	800b4c0 <Data_Analyse+0x120>
	case 1:
		if (ch == 0x0a)
 800b3f2:	4b36      	ldr	r3, [pc, #216]	@ (800b4cc <Data_Analyse+0x12c>)
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	2b0a      	cmp	r3, #10
 800b3f8:	d109      	bne.n	800b40e <Data_Analyse+0x6e>
		{
			i = 0;
 800b3fa:	4b36      	ldr	r3, [pc, #216]	@ (800b4d4 <Data_Analyse+0x134>)
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	701a      	strb	r2, [r3, #0]
			count++;
 800b400:	4b33      	ldr	r3, [pc, #204]	@ (800b4d0 <Data_Analyse+0x130>)
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	3301      	adds	r3, #1
 800b406:	b2da      	uxtb	r2, r3
 800b408:	4b31      	ldr	r3, [pc, #196]	@ (800b4d0 <Data_Analyse+0x130>)
 800b40a:	701a      	strb	r2, [r3, #0]
		}
		else if (ch == 0x0d)
			;
		else
			count = 0;
		break;
 800b40c:	e055      	b.n	800b4ba <Data_Analyse+0x11a>
		else if (ch == 0x0d)
 800b40e:	4b2f      	ldr	r3, [pc, #188]	@ (800b4cc <Data_Analyse+0x12c>)
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	2b0d      	cmp	r3, #13
 800b414:	d051      	beq.n	800b4ba <Data_Analyse+0x11a>
			count = 0;
 800b416:	4b2e      	ldr	r3, [pc, #184]	@ (800b4d0 <Data_Analyse+0x130>)
 800b418:	2200      	movs	r2, #0
 800b41a:	701a      	strb	r2, [r3, #0]
		break;
 800b41c:	e04d      	b.n	800b4ba <Data_Analyse+0x11a>
	case 2:
		posture.date[i] = ch;
 800b41e:	4b2d      	ldr	r3, [pc, #180]	@ (800b4d4 <Data_Analyse+0x134>)
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	461a      	mov	r2, r3
 800b424:	4b29      	ldr	r3, [pc, #164]	@ (800b4cc <Data_Analyse+0x12c>)
 800b426:	7819      	ldrb	r1, [r3, #0]
 800b428:	4b2b      	ldr	r3, [pc, #172]	@ (800b4d8 <Data_Analyse+0x138>)
 800b42a:	5499      	strb	r1, [r3, r2]
		i++;
 800b42c:	4b29      	ldr	r3, [pc, #164]	@ (800b4d4 <Data_Analyse+0x134>)
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	3301      	adds	r3, #1
 800b432:	b2da      	uxtb	r2, r3
 800b434:	4b27      	ldr	r3, [pc, #156]	@ (800b4d4 <Data_Analyse+0x134>)
 800b436:	701a      	strb	r2, [r3, #0]
		if (i >= 24)
 800b438:	4b26      	ldr	r3, [pc, #152]	@ (800b4d4 <Data_Analyse+0x134>)
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	2b17      	cmp	r3, #23
 800b43e:	d93e      	bls.n	800b4be <Data_Analyse+0x11e>
		{
			i = 0;
 800b440:	4b24      	ldr	r3, [pc, #144]	@ (800b4d4 <Data_Analyse+0x134>)
 800b442:	2200      	movs	r2, #0
 800b444:	701a      	strb	r2, [r3, #0]
			count++;
 800b446:	4b22      	ldr	r3, [pc, #136]	@ (800b4d0 <Data_Analyse+0x130>)
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	3301      	adds	r3, #1
 800b44c:	b2da      	uxtb	r2, r3
 800b44e:	4b20      	ldr	r3, [pc, #128]	@ (800b4d0 <Data_Analyse+0x130>)
 800b450:	701a      	strb	r2, [r3, #0]
		}
		break;
 800b452:	e034      	b.n	800b4be <Data_Analyse+0x11e>
	case 3:
		if (ch == 0x0a)
 800b454:	4b1d      	ldr	r3, [pc, #116]	@ (800b4cc <Data_Analyse+0x12c>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	2b0a      	cmp	r3, #10
 800b45a:	d106      	bne.n	800b46a <Data_Analyse+0xca>
			count++;
 800b45c:	4b1c      	ldr	r3, [pc, #112]	@ (800b4d0 <Data_Analyse+0x130>)
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	3301      	adds	r3, #1
 800b462:	b2da      	uxtb	r2, r3
 800b464:	4b1a      	ldr	r3, [pc, #104]	@ (800b4d0 <Data_Analyse+0x130>)
 800b466:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b468:	e02a      	b.n	800b4c0 <Data_Analyse+0x120>
			count = 0;
 800b46a:	4b19      	ldr	r3, [pc, #100]	@ (800b4d0 <Data_Analyse+0x130>)
 800b46c:	2200      	movs	r2, #0
 800b46e:	701a      	strb	r2, [r3, #0]
		break;
 800b470:	e026      	b.n	800b4c0 <Data_Analyse+0x120>
	case 4:
		if (ch == 0x0d)
 800b472:	4b16      	ldr	r3, [pc, #88]	@ (800b4cc <Data_Analyse+0x12c>)
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	2b0d      	cmp	r3, #13
 800b478:	d117      	bne.n	800b4aa <Data_Analyse+0x10a>
		{
			zangle = posture.ActVal[0];
 800b47a:	4b17      	ldr	r3, [pc, #92]	@ (800b4d8 <Data_Analyse+0x138>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a17      	ldr	r2, [pc, #92]	@ (800b4dc <Data_Analyse+0x13c>)
 800b480:	6013      	str	r3, [r2, #0]
			xangle = posture.ActVal[1];
 800b482:	4b15      	ldr	r3, [pc, #84]	@ (800b4d8 <Data_Analyse+0x138>)
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	4a16      	ldr	r2, [pc, #88]	@ (800b4e0 <Data_Analyse+0x140>)
 800b488:	6013      	str	r3, [r2, #0]
			yangle = posture.ActVal[2];
 800b48a:	4b13      	ldr	r3, [pc, #76]	@ (800b4d8 <Data_Analyse+0x138>)
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	4a15      	ldr	r2, [pc, #84]	@ (800b4e4 <Data_Analyse+0x144>)
 800b490:	6013      	str	r3, [r2, #0]
			pos_x = posture.ActVal[3];
 800b492:	4b11      	ldr	r3, [pc, #68]	@ (800b4d8 <Data_Analyse+0x138>)
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	4a14      	ldr	r2, [pc, #80]	@ (800b4e8 <Data_Analyse+0x148>)
 800b498:	6013      	str	r3, [r2, #0]
			pos_y = posture.ActVal[4];
 800b49a:	4b0f      	ldr	r3, [pc, #60]	@ (800b4d8 <Data_Analyse+0x138>)
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	4a13      	ldr	r2, [pc, #76]	@ (800b4ec <Data_Analyse+0x14c>)
 800b4a0:	6013      	str	r3, [r2, #0]
			w_z = posture.ActVal[5];
 800b4a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b4d8 <Data_Analyse+0x138>)
 800b4a4:	695b      	ldr	r3, [r3, #20]
 800b4a6:	4a12      	ldr	r2, [pc, #72]	@ (800b4f0 <Data_Analyse+0x150>)
 800b4a8:	6013      	str	r3, [r2, #0]
		}
		count = 0;
 800b4aa:	4b09      	ldr	r3, [pc, #36]	@ (800b4d0 <Data_Analyse+0x130>)
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	701a      	strb	r2, [r3, #0]
		break;
 800b4b0:	e006      	b.n	800b4c0 <Data_Analyse+0x120>
	default:
		count = 0;
 800b4b2:	4b07      	ldr	r3, [pc, #28]	@ (800b4d0 <Data_Analyse+0x130>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	701a      	strb	r2, [r3, #0]
		break;
 800b4b8:	e002      	b.n	800b4c0 <Data_Analyse+0x120>
		break;
 800b4ba:	bf00      	nop
 800b4bc:	e000      	b.n	800b4c0 <Data_Analyse+0x120>
		break;
 800b4be:	bf00      	nop
	}
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr
 800b4cc:	24000b10 	.word	0x24000b10
 800b4d0:	24000b11 	.word	0x24000b11
 800b4d4:	24000b12 	.word	0x24000b12
 800b4d8:	24000b14 	.word	0x24000b14
 800b4dc:	24000b00 	.word	0x24000b00
 800b4e0:	24000b04 	.word	0x24000b04
 800b4e4:	24000b08 	.word	0x24000b08
 800b4e8:	24000af8 	.word	0x24000af8
 800b4ec:	24000afc 	.word	0x24000afc
 800b4f0:	24000b0c 	.word	0x24000b0c

0800b4f4 <Move_Arm>:
extern float tx_target;
extern float ty_target;

//控制单个舵机运动
//参数：sevoID:舵机ID，Position:转动角度（这里以270°为例）,Time:转动时间
void Move_Arm(uint8_t servoID, int16_t Position, uint16_t Time) {
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	71fb      	strb	r3, [r7, #7]
 800b4fe:	460b      	mov	r3, r1
 800b500:	80bb      	strh	r3, [r7, #4]
 800b502:	4613      	mov	r3, r2
 800b504:	807b      	strh	r3, [r7, #2]
	uint8_t TxBuf[11];
	if (servoID > 31 || !(Time > 0) || Position > 32767) {
 800b506:	79fb      	ldrb	r3, [r7, #7]
 800b508:	2b1f      	cmp	r3, #31
 800b50a:	d82b      	bhi.n	800b564 <Move_Arm+0x70>
 800b50c:	887b      	ldrh	r3, [r7, #2]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d028      	beq.n	800b564 <Move_Arm+0x70>
		return;
	}
	TxBuf[0] = FRAME_HEADER;
 800b512:	2355      	movs	r3, #85	@ 0x55
 800b514:	733b      	strb	r3, [r7, #12]
	TxBuf[1] = FRAME_HEADER;
 800b516:	2355      	movs	r3, #85	@ 0x55
 800b518:	737b      	strb	r3, [r7, #13]
	TxBuf[2] = 8;
 800b51a:	2308      	movs	r3, #8
 800b51c:	73bb      	strb	r3, [r7, #14]
	TxBuf[3] = CMD_SERVO_MOVE;
 800b51e:	2303      	movs	r3, #3
 800b520:	73fb      	strb	r3, [r7, #15]
	TxBuf[4] = 1;
 800b522:	2301      	movs	r3, #1
 800b524:	743b      	strb	r3, [r7, #16]
	TxBuf[5] = (uint8_t) Time;
 800b526:	887b      	ldrh	r3, [r7, #2]
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	747b      	strb	r3, [r7, #17]
	TxBuf[6] = (uint8_t) (Time >> 8);
 800b52c:	887b      	ldrh	r3, [r7, #2]
 800b52e:	0a1b      	lsrs	r3, r3, #8
 800b530:	b29b      	uxth	r3, r3
 800b532:	b2db      	uxtb	r3, r3
 800b534:	74bb      	strb	r3, [r7, #18]
	TxBuf[7] = servoID;
 800b536:	79fb      	ldrb	r3, [r7, #7]
 800b538:	74fb      	strb	r3, [r7, #19]
	TxBuf[8] = (uint8_t) Position;
 800b53a:	88bb      	ldrh	r3, [r7, #4]
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	753b      	strb	r3, [r7, #20]
	TxBuf[9] = (uint8_t) (Position >> 8);
 800b540:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b544:	121b      	asrs	r3, r3, #8
 800b546:	b21b      	sxth	r3, r3
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&jixiebi_usart, TxBuf, 10, 0xffff);
 800b54c:	f107 010c 	add.w	r1, r7, #12
 800b550:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b554:	220a      	movs	r2, #10
 800b556:	4805      	ldr	r0, [pc, #20]	@ (800b56c <Move_Arm+0x78>)
 800b558:	f7fd f978 	bl	800884c <HAL_UART_Transmit>
	HAL_Delay(5);
 800b55c:	2005      	movs	r0, #5
 800b55e:	f7f7 fbe3 	bl	8002d28 <HAL_Delay>
 800b562:	e000      	b.n	800b566 <Move_Arm+0x72>
		return;
 800b564:	bf00      	nop

}
 800b566:	3718      	adds	r7, #24
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	24000654 	.word	0x24000654

0800b570 <catch_Frist>:

}
//步进上升1800  下降1800
extern float x, y;
void catch_Frist(uint16_t Pos1, uint16_t Pos2) //5400
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	4603      	mov	r3, r0
 800b578:	460a      	mov	r2, r1
 800b57a:	80fb      	strh	r3, [r7, #6]
 800b57c:	4613      	mov	r3, r2
 800b57e:	80bb      	strh	r3, [r7, #4]
	WritePosEx(0, Pos1, 500, 50); //物料底盘移动
 800b580:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b584:	2332      	movs	r3, #50	@ 0x32
 800b586:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b58a:	2000      	movs	r0, #0
 800b58c:	f002 fb7e 	bl	800dc8c <WritePosEx>

	Move_Arm(1, Arm_close, time); //爪子闭合
 800b590:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b594:	2114      	movs	r1, #20
 800b596:	2001      	movs	r0, #1
 800b598:	f7ff ffac 	bl	800b4f4 <Move_Arm>
	HAL_Delay(time);
 800b59c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b5a0:	f7f7 fbc2 	bl	8002d28 <HAL_Delay>
	Drop_Location_Sheng(Emm_Speed, Emm_Acc, 500);
 800b5a4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b5a8:	2132      	movs	r1, #50	@ 0x32
 800b5aa:	2032      	movs	r0, #50	@ 0x32
 800b5ac:	f001 fade 	bl	800cb6c <Drop_Location_Sheng>
//	HAL_Delay(3000);
	WritePosEx(1, Pos2, 500, 50); //爪子底盘向左
 800b5b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b5b4:	2332      	movs	r3, #50	@ 0x32
 800b5b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b5ba:	2001      	movs	r0, #1
 800b5bc:	f002 fb66 	bl	800dc8c <WritePosEx>
	HAL_Delay(3000);
 800b5c0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800b5c4:	f7f7 fbb0 	bl	8002d28 <HAL_Delay>
//	{
//		WritePosEx(1, 4045, 500, 50); //爪子底盘向左
//		HAL_Delay(1500);
//		Grab_count--;
//	}
	Move_Arm(6, 550, time); //爪子下降
 800b5c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b5cc:	f240 2126 	movw	r1, #550	@ 0x226
 800b5d0:	2006      	movs	r0, #6
 800b5d2:	f7ff ff8f 	bl	800b4f4 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 4500);
 800b5d6:	f241 1294 	movw	r2, #4500	@ 0x1194
 800b5da:	2132      	movs	r1, #50	@ 0x32
 800b5dc:	2032      	movs	r0, #50	@ 0x32
 800b5de:	f001 fa81 	bl	800cae4 <Drop_Location_jiang>
	Move_Arm(1, 190, time); //爪子张开
 800b5e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b5e6:	21be      	movs	r1, #190	@ 0xbe
 800b5e8:	2001      	movs	r0, #1
 800b5ea:	f7ff ff83 	bl	800b4f4 <Move_Arm>
	HAL_Delay(time);
 800b5ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b5f2:	f7f7 fb99 	bl	8002d28 <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b5f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b5fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b5fe:	2006      	movs	r0, #6
 800b600:	f7ff ff78 	bl	800b4f4 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 500);
 800b604:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b608:	2132      	movs	r1, #50	@ 0x32
 800b60a:	2032      	movs	r0, #50	@ 0x32
 800b60c:	f001 fa6a 	bl	800cae4 <Drop_Location_jiang>

	WritePosEx(1, 4050, 500, 50); //爪子底盘向左
 800b610:	2332      	movs	r3, #50	@ 0x32
 800b612:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b616:	f640 71d2 	movw	r1, #4050	@ 0xfd2
 800b61a:	2001      	movs	r0, #1
 800b61c:	f002 fb36 	bl	800dc8c <WritePosEx>
	HAL_Delay(1500);
 800b620:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800b624:	f7f7 fb80 	bl	8002d28 <HAL_Delay>
	Move_Arm(1, 500, time); //爪子张开
 800b628:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b62c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b630:	2001      	movs	r0, #1
 800b632:	f7ff ff5f 	bl	800b4f4 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 8600);
 800b636:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b63a:	2132      	movs	r1, #50	@ 0x32
 800b63c:	2032      	movs	r0, #50	@ 0x32
 800b63e:	f001 fa51 	bl	800cae4 <Drop_Location_jiang>
}
 800b642:	bf00      	nop
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <catch_Second>:
//上升1800，下降1800
void catch_Second(uint16_t Pos1, uint16_t Pos2) //从地上抓取到车上
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b082      	sub	sp, #8
 800b64e:	af00      	add	r7, sp, #0
 800b650:	4603      	mov	r3, r0
 800b652:	460a      	mov	r2, r1
 800b654:	80fb      	strh	r3, [r7, #6]
 800b656:	4613      	mov	r3, r2
 800b658:	80bb      	strh	r3, [r7, #4]

	WritePosEx(0, Pos1, 500, 50); //物料底盘移动
 800b65a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b65e:	2332      	movs	r3, #50	@ 0x32
 800b660:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b664:	2000      	movs	r0, #0
 800b666:	f002 fb11 	bl	800dc8c <WritePosEx>
	Move_Arm(1, 500, time); //爪子张开
 800b66a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b66e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b672:	2001      	movs	r0, #1
 800b674:	f7ff ff3e 	bl	800b4f4 <Move_Arm>
	HAL_Delay(time);
 800b678:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b67c:	f7f7 fb54 	bl	8002d28 <HAL_Delay>
	Move_Arm(6, 360, time); //爪子下降
 800b680:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b684:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800b688:	2006      	movs	r0, #6
 800b68a:	f7ff ff33 	bl	800b4f4 <Move_Arm>
	HAL_Delay(time);
 800b68e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b692:	f7f7 fb49 	bl	8002d28 <HAL_Delay>

	Move_Arm(1, Arm_close, time); //爪子闭合
 800b696:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b69a:	2114      	movs	r1, #20
 800b69c:	2001      	movs	r0, #1
 800b69e:	f7ff ff29 	bl	800b4f4 <Move_Arm>
	HAL_Delay(time);
 800b6a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6a6:	f7f7 fb3f 	bl	8002d28 <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b6aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6ae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b6b2:	2006      	movs	r0, #6
 800b6b4:	f7ff ff1e 	bl	800b4f4 <Move_Arm>
	HAL_Delay(time);
 800b6b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6bc:	f7f7 fb34 	bl	8002d28 <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 1000);
 800b6c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6c4:	2132      	movs	r1, #50	@ 0x32
 800b6c6:	2032      	movs	r0, #50	@ 0x32
 800b6c8:	f001 fa0c 	bl	800cae4 <Drop_Location_jiang>
	WritePosEx(1, Pos2, 500, 50); //爪子底盘向左
 800b6cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b6d0:	2332      	movs	r3, #50	@ 0x32
 800b6d2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b6d6:	2001      	movs	r0, #1
 800b6d8:	f002 fad8 	bl	800dc8c <WritePosEx>
	HAL_Delay(5000);
 800b6dc:	f241 3088 	movw	r0, #5000	@ 0x1388
 800b6e0:	f7f7 fb22 	bl	8002d28 <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 5000);
 800b6e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6e8:	2132      	movs	r1, #50	@ 0x32
 800b6ea:	2032      	movs	r0, #50	@ 0x32
 800b6ec:	f001 f9fa 	bl	800cae4 <Drop_Location_jiang>
	Move_Arm(6, 550, time); //爪子下降
 800b6f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6f4:	f240 2126 	movw	r1, #550	@ 0x226
 800b6f8:	2006      	movs	r0, #6
 800b6fa:	f7ff fefb 	bl	800b4f4 <Move_Arm>
	HAL_Delay(time);
 800b6fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b702:	f7f7 fb11 	bl	8002d28 <HAL_Delay>
	Move_Arm(1, 190, time); //爪子张开
 800b706:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b70a:	21be      	movs	r1, #190	@ 0xbe
 800b70c:	2001      	movs	r0, #1
 800b70e:	f7ff fef1 	bl	800b4f4 <Move_Arm>
	HAL_Delay(time);
 800b712:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b716:	f7f7 fb07 	bl	8002d28 <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b71a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b71e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b722:	2006      	movs	r0, #6
 800b724:	f7ff fee6 	bl	800b4f4 <Move_Arm>
	HAL_Delay(time);
 800b728:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b72c:	f7f7 fafc 	bl	8002d28 <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 5000);
 800b730:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b734:	2132      	movs	r1, #50	@ 0x32
 800b736:	2032      	movs	r0, #50	@ 0x32
 800b738:	f001 f9d4 	bl	800cae4 <Drop_Location_jiang>
	WritePosEx(1, 4045, 500, 50); //爪子底盘向左
 800b73c:	2332      	movs	r3, #50	@ 0x32
 800b73e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b742:	f640 71cd 	movw	r1, #4045	@ 0xfcd
 800b746:	2001      	movs	r0, #1
 800b748:	f002 faa0 	bl	800dc8c <WritePosEx>
	HAL_Delay(1500);
 800b74c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800b750:	f7f7 faea 	bl	8002d28 <HAL_Delay>
	Move_Arm(1, 500, time); //爪子张开
 800b754:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b758:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b75c:	2001      	movs	r0, #1
 800b75e:	f7ff fec9 	bl	800b4f4 <Move_Arm>
	HAL_Delay(time);
 800b762:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b766:	f7f7 fadf 	bl	8002d28 <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 11000);
 800b76a:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800b76e:	2132      	movs	r1, #50	@ 0x32
 800b770:	2032      	movs	r0, #50	@ 0x32
 800b772:	f001 f9b7 	bl	800cae4 <Drop_Location_jiang>

}
 800b776:	bf00      	nop
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
	...

0800b780 <Start>:

extern int QR_Flag;
void Start(void) //下降14000
{
 800b780:	b580      	push	{r7, lr}
 800b782:	af00      	add	r7, sp, #0
//	先将爪子升起来，避免打到TX2或者物料盘
	Drop_Location_jiang(200, 120, 4000);
 800b784:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800b788:	2178      	movs	r1, #120	@ 0x78
 800b78a:	20c8      	movs	r0, #200	@ 0xc8
 800b78c:	f001 f9aa 	bl	800cae4 <Drop_Location_jiang>
//	将舵机向外转动
	FT_Servo_Orth();
 800b790:	f002 fdef 	bl	800e372 <FT_Servo_Orth>
//	HAL_Delay(2000);
	Drop_Location_jiang(200, 120, 12000);
 800b794:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800b798:	2178      	movs	r1, #120	@ 0x78
 800b79a:	20c8      	movs	r0, #200	@ 0xc8
 800b79c:	f001 f9a2 	bl	800cae4 <Drop_Location_jiang>
	Move_Arm(1, 500, 300); //爪子张开
 800b7a0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b7a4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b7a8:	2001      	movs	r0, #1
 800b7aa:	f7ff fea3 	bl	800b4f4 <Move_Arm>
	Move_Arm(6, 500, 300);
 800b7ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b7b2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b7b6:	2006      	movs	r0, #6
 800b7b8:	f7ff fe9c 	bl	800b4f4 <Move_Arm>
	while (!QR_Flag)
 800b7bc:	bf00      	nop
 800b7be:	4b09      	ldr	r3, [pc, #36]	@ (800b7e4 <Start+0x64>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d0fb      	beq.n	800b7be <Start+0x3e>
		;  //等待扫码完成
//	扫码完成后将爪子提起俩
	Drop_Location_jiang(200, 120, 8600);
 800b7c6:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b7ca:	2178      	movs	r1, #120	@ 0x78
 800b7cc:	20c8      	movs	r0, #200	@ 0xc8
 800b7ce:	f001 f989 	bl	800cae4 <Drop_Location_jiang>
	Move_Arm(6, 900, 300);
 800b7d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b7d6:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800b7da:	2006      	movs	r0, #6
 800b7dc:	f7ff fe8a 	bl	800b4f4 <Move_Arm>
}
 800b7e0:	bf00      	nop
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	24000484 	.word	0x24000484

0800b7e8 <put>:
void put(uint16_t Pos1, uint16_t Pos2) {
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	460a      	mov	r2, r1
 800b7f2:	80fb      	strh	r3, [r7, #6]
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	80bb      	strh	r3, [r7, #4]
	WritePosEx(0, Pos1, 1000, 100); //物料底盘移动
 800b7f8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b7fc:	2364      	movs	r3, #100	@ 0x64
 800b7fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b802:	2000      	movs	r0, #0
 800b804:	f002 fa42 	bl	800dc8c <WritePosEx>
	Move_Arm(6, 1000, time); //爪子上升
 800b808:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b80c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b810:	2006      	movs	r0, #6
 800b812:	f7ff fe6f 	bl	800b4f4 <Move_Arm>
	Move_Arm(1, 150, time); //爪子张开
 800b816:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b81a:	2196      	movs	r1, #150	@ 0x96
 800b81c:	2001      	movs	r0, #1
 800b81e:	f7ff fe69 	bl	800b4f4 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 3500);
 800b822:	f640 52ac 	movw	r2, #3500	@ 0xdac
 800b826:	2132      	movs	r1, #50	@ 0x32
 800b828:	2032      	movs	r0, #50	@ 0x32
 800b82a:	f001 f95b 	bl	800cae4 <Drop_Location_jiang>
	HAL_Delay(1000);
 800b82e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b832:	f7f7 fa79 	bl	8002d28 <HAL_Delay>
	WritePosEx(1, Pos2, 800, 50); //爪子底盘向左
 800b836:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b83a:	2332      	movs	r3, #50	@ 0x32
 800b83c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800b840:	2001      	movs	r0, #1
 800b842:	f002 fa23 	bl	800dc8c <WritePosEx>
	HAL_Delay(2000);                                       //延时是为了抓取底盘降下来，防止变转变降
 800b846:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b84a:	f7f7 fa6d 	bl	8002d28 <HAL_Delay>
	Move_Arm(6, 410, time); //爪子下降
 800b84e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b852:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800b856:	2006      	movs	r0, #6
 800b858:	f7ff fe4c 	bl	800b4f4 <Move_Arm>
	HAL_Delay(time);
 800b85c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b860:	f7f7 fa62 	bl	8002d28 <HAL_Delay>
	Move_Arm(1, Arm_close, time); //爪子闭合
 800b864:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b868:	2114      	movs	r1, #20
 800b86a:	2001      	movs	r0, #1
 800b86c:	f7ff fe42 	bl	800b4f4 <Move_Arm>
	HAL_Delay(time);
 800b870:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b874:	f7f7 fa58 	bl	8002d28 <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b878:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b87c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b880:	2006      	movs	r0, #6
 800b882:	f7ff fe37 	bl	800b4f4 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 1000);
 800b886:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b88a:	2132      	movs	r1, #50	@ 0x32
 800b88c:	2032      	movs	r0, #50	@ 0x32
 800b88e:	f001 f929 	bl	800cae4 <Drop_Location_jiang>
	WritePosEx(1, 4100, 800, 50); //抓取底盘向摆放位置
 800b892:	2332      	movs	r3, #50	@ 0x32
 800b894:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800b898:	f241 0104 	movw	r1, #4100	@ 0x1004
 800b89c:	2001      	movs	r0, #1
 800b89e:	f002 f9f5 	bl	800dc8c <WritePosEx>
	HAL_Delay(2000);                                        //延时是为了让抓取底盘转过来
 800b8a2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b8a6:	f7f7 fa3f 	bl	8002d28 <HAL_Delay>
	Move_Arm(6, 360, time); //爪子下降
 800b8aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b8ae:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800b8b2:	2006      	movs	r0, #6
 800b8b4:	f7ff fe1e 	bl	800b4f4 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 11000);
 800b8b8:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800b8bc:	2132      	movs	r1, #50	@ 0x32
 800b8be:	2032      	movs	r0, #50	@ 0x32
 800b8c0:	f001 f910 	bl	800cae4 <Drop_Location_jiang>
	Move_Arm(1, 500, time); //爪子张开
 800b8c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b8c8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b8cc:	2001      	movs	r0, #1
 800b8ce:	f7ff fe11 	bl	800b4f4 <Move_Arm>

}
 800b8d2:	bf00      	nop
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <Frist_Grab_Wuliao>:
}
// 抓取过程标志位
extern char Match_Flag;
// 抓取计算稳定性标志位，0为识别有故障,1为正常计算
extern char Check_flag;
void Frist_Grab_Wuliao(void) {
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	af00      	add	r7, sp, #0
//	FIXME:在每一次抓取前都应该判断物料停止与基于TX2坐标闭环
//	Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
	static uint8_t Grab_count = 1;
	while (Grab_count < 4) {
 800b8e0:	e066      	b.n	800b9b0 <Frist_Grab_Wuliao+0xd4>
//		抓取物料过程，置标志位,标志位为颜色
	Match_Flag = Grab_count;
 800b8e2:	4b38      	ldr	r3, [pc, #224]	@ (800b9c4 <Frist_Grab_Wuliao+0xe8>)
 800b8e4:	781a      	ldrb	r2, [r3, #0]
 800b8e6:	4b38      	ldr	r3, [pc, #224]	@ (800b9c8 <Frist_Grab_Wuliao+0xec>)
 800b8e8:	701a      	strb	r2, [r3, #0]
//		if (QR_data[0] == colour && wuliao_falg == 0) {
//			先判断物料是否停止
	while(Check_Stability(x,y,Check_flag) == 2)
 800b8ea:	e002      	b.n	800b8f2 <Frist_Grab_Wuliao+0x16>
	{
		HAL_Delay(30);
 800b8ec:	201e      	movs	r0, #30
 800b8ee:	f7f7 fa1b 	bl	8002d28 <HAL_Delay>
	while(Check_Stability(x,y,Check_flag) == 2)
 800b8f2:	4b36      	ldr	r3, [pc, #216]	@ (800b9cc <Frist_Grab_Wuliao+0xf0>)
 800b8f4:	edd3 7a00 	vldr	s15, [r3]
 800b8f8:	4b35      	ldr	r3, [pc, #212]	@ (800b9d0 <Frist_Grab_Wuliao+0xf4>)
 800b8fa:	ed93 7a00 	vldr	s14, [r3]
 800b8fe:	4b35      	ldr	r3, [pc, #212]	@ (800b9d4 <Frist_Grab_Wuliao+0xf8>)
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	4618      	mov	r0, r3
 800b904:	eef0 0a47 	vmov.f32	s1, s14
 800b908:	eeb0 0a67 	vmov.f32	s0, s15
 800b90c:	f002 fc8c 	bl	800e228 <Check_Stability>
 800b910:	4603      	mov	r3, r0
 800b912:	2b02      	cmp	r3, #2
 800b914:	d0ea      	beq.n	800b8ec <Frist_Grab_Wuliao+0x10>
	}
//			Realize_Stop();
//			基于TX2坐标进行闭环
	Move_Tx_Pid_Ctrl(tx_target, ty_target);
 800b916:	4b30      	ldr	r3, [pc, #192]	@ (800b9d8 <Frist_Grab_Wuliao+0xfc>)
 800b918:	edd3 7a00 	vldr	s15, [r3]
 800b91c:	4b2f      	ldr	r3, [pc, #188]	@ (800b9dc <Frist_Grab_Wuliao+0x100>)
 800b91e:	ed93 7a00 	vldr	s14, [r3]
 800b922:	eef0 0a47 	vmov.f32	s1, s14
 800b926:	eeb0 0a67 	vmov.f32	s0, s15
 800b92a:	f001 fe71 	bl	800d610 <Move_Tx_Pid_Ctrl>
//			抓取第一个物料
//			物料盘先转动到目标位置
	FT_Servo_Put(0,Grab_count);
 800b92e:	4b25      	ldr	r3, [pc, #148]	@ (800b9c4 <Frist_Grab_Wuliao+0xe8>)
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	4619      	mov	r1, r3
 800b934:	2000      	movs	r0, #0
 800b936:	f002 fd28 	bl	800e38a <FT_Servo_Put>

	Move_Arm(1, 50, 300);
 800b93a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b93e:	2132      	movs	r1, #50	@ 0x32
 800b940:	2001      	movs	r0, #1
 800b942:	f7ff fdd7 	bl	800b4f4 <Move_Arm>
//			上升
	Drop_Location_jiang(200, 120, 1000);
 800b946:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b94a:	2178      	movs	r1, #120	@ 0x78
 800b94c:	20c8      	movs	r0, #200	@ 0xc8
 800b94e:	f001 f8c9 	bl	800cae4 <Drop_Location_jiang>
//			catch_Frist(860, 2375);
//			爪子舵机转动到放置物料到车上的角度
	FT_Servo_Put(1,Grab_count);
 800b952:	4b1c      	ldr	r3, [pc, #112]	@ (800b9c4 <Frist_Grab_Wuliao+0xe8>)
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	4619      	mov	r1, r3
 800b958:	2001      	movs	r0, #1
 800b95a:	f002 fd16 	bl	800e38a <FT_Servo_Put>
//			TODO:调试，失能五号舵机
	Drop_Location_jiang(200, 120, 6000);
 800b95e:	f241 7270 	movw	r2, #6000	@ 0x1770
 800b962:	2178      	movs	r1, #120	@ 0x78
 800b964:	20c8      	movs	r0, #200	@ 0xc8
 800b966:	f001 f8bd 	bl	800cae4 <Drop_Location_jiang>
//			while(1)
//			{
//				;
//			}
//			松开爪子
	Move_Arm(1, 300, 300);
 800b96a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b96e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800b972:	2001      	movs	r0, #1
 800b974:	f7ff fdbe 	bl	800b4f4 <Move_Arm>
//			上升
	Drop_Location_jiang(200, 120, 1000);
 800b978:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b97c:	2178      	movs	r1, #120	@ 0x78
 800b97e:	20c8      	movs	r0, #200	@ 0xc8
 800b980:	f001 f8b0 	bl	800cae4 <Drop_Location_jiang>
//			向右转，与车身正交
	if(Grab_count < 3)
 800b984:	4b0f      	ldr	r3, [pc, #60]	@ (800b9c4 <Frist_Grab_Wuliao+0xe8>)
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d808      	bhi.n	800b99e <Frist_Grab_Wuliao+0xc2>
	{
		FT_Servo_Orth();
 800b98c:	f002 fcf1 	bl	800e372 <FT_Servo_Orth>
		Drop_Location_jiang(200, 120, 8600);
 800b990:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b994:	2178      	movs	r1, #120	@ 0x78
 800b996:	20c8      	movs	r0, #200	@ 0xc8
 800b998:	f001 f8a4 	bl	800cae4 <Drop_Location_jiang>
 800b99c:	e002      	b.n	800b9a4 <Frist_Grab_Wuliao+0xc8>
	}
	else
		FT_Servo_Zero(1);
 800b99e:	2001      	movs	r0, #1
 800b9a0:	f002 fcc9 	bl	800e336 <FT_Servo_Zero>
	Grab_count += 1;
 800b9a4:	4b07      	ldr	r3, [pc, #28]	@ (800b9c4 <Frist_Grab_Wuliao+0xe8>)
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	b2da      	uxtb	r2, r3
 800b9ac:	4b05      	ldr	r3, [pc, #20]	@ (800b9c4 <Frist_Grab_Wuliao+0xe8>)
 800b9ae:	701a      	strb	r2, [r3, #0]
	while (Grab_count < 4) {
 800b9b0:	4b04      	ldr	r3, [pc, #16]	@ (800b9c4 <Frist_Grab_Wuliao+0xe8>)
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d994      	bls.n	800b8e2 <Frist_Grab_Wuliao+0x6>
	}
	Grab_count = 0;
 800b9b8:	4b02      	ldr	r3, [pc, #8]	@ (800b9c4 <Frist_Grab_Wuliao+0xe8>)
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	701a      	strb	r2, [r3, #0]
}
 800b9be:	bf00      	nop
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	24000045 	.word	0x24000045
 800b9c8:	24000488 	.word	0x24000488
 800b9cc:	24000454 	.word	0x24000454
 800b9d0:	24000458 	.word	0x24000458
 800b9d4:	24000489 	.word	0x24000489
 800b9d8:	24000000 	.word	0x24000000
 800b9dc:	24000004 	.word	0x24000004

0800b9e0 <put_wuliao_to_circular_frist>:
////		}
//
//	}
//}

void put_wuliao_to_circular_frist(void) {
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0

	for (int i = 0; i < 3; i++) {
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	607b      	str	r3, [r7, #4]
 800b9ea:	e067      	b.n	800babc <put_wuliao_to_circular_frist+0xdc>
		if (QR_data[i] + 3 == 4) {
 800b9ec:	4a37      	ldr	r2, [pc, #220]	@ (800bacc <put_wuliao_to_circular_frist+0xec>)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d105      	bne.n	800ba04 <put_wuliao_to_circular_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800b9f8:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800bad0 <put_wuliao_to_circular_frist+0xf0>
 800b9fc:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800bad4 <put_wuliao_to_circular_frist+0xf4>
 800ba00:	f001 fca6 	bl	800d350 <Move_Action_Nopid_Right_Ctrl>

		}
		if (QR_data[i] + 3 == 5) {
 800ba04:	4a31      	ldr	r2, [pc, #196]	@ (800bacc <put_wuliao_to_circular_frist+0xec>)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d105      	bne.n	800ba1c <put_wuliao_to_circular_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800ba10:	eddf 0a31 	vldr	s1, [pc, #196]	@ 800bad8 <put_wuliao_to_circular_frist+0xf8>
 800ba14:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800bad4 <put_wuliao_to_circular_frist+0xf4>
 800ba18:	f001 fc9a 	bl	800d350 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] + 3 == 6) {
 800ba1c:	4a2b      	ldr	r2, [pc, #172]	@ (800bacc <put_wuliao_to_circular_frist+0xec>)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba24:	2b03      	cmp	r3, #3
 800ba26:	d105      	bne.n	800ba34 <put_wuliao_to_circular_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800ba28:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800badc <put_wuliao_to_circular_frist+0xfc>
 800ba2c:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800bad4 <put_wuliao_to_circular_frist+0xf4>
 800ba30:	f001 fc8e 	bl	800d350 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 0) {
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d112      	bne.n	800ba60 <put_wuliao_to_circular_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800ba3a:	4b29      	ldr	r3, [pc, #164]	@ (800bae0 <put_wuliao_to_circular_frist+0x100>)
 800ba3c:	edd3 7a00 	vldr	s15, [r3]
 800ba40:	4b28      	ldr	r3, [pc, #160]	@ (800bae4 <put_wuliao_to_circular_frist+0x104>)
 800ba42:	ed93 7a00 	vldr	s14, [r3]
 800ba46:	eef0 0a47 	vmov.f32	s1, s14
 800ba4a:	eeb0 0a67 	vmov.f32	s0, s15
 800ba4e:	f001 fddf 	bl	800d610 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800ba52:	f640 2178 	movw	r1, #2680	@ 0xa78
 800ba56:	f640 0066 	movw	r0, #2150	@ 0x866
 800ba5a:	f7ff fec5 	bl	800b7e8 <put>
 800ba5e:	e02a      	b.n	800bab6 <put_wuliao_to_circular_frist+0xd6>
		} else if (i == 1) {
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d112      	bne.n	800ba8c <put_wuliao_to_circular_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800ba66:	4b1e      	ldr	r3, [pc, #120]	@ (800bae0 <put_wuliao_to_circular_frist+0x100>)
 800ba68:	edd3 7a00 	vldr	s15, [r3]
 800ba6c:	4b1d      	ldr	r3, [pc, #116]	@ (800bae4 <put_wuliao_to_circular_frist+0x104>)
 800ba6e:	ed93 7a00 	vldr	s14, [r3]
 800ba72:	eef0 0a47 	vmov.f32	s1, s14
 800ba76:	eeb0 0a67 	vmov.f32	s0, s15
 800ba7a:	f001 fdc9 	bl	800d610 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800ba7e:	f640 2178 	movw	r1, #2680	@ 0xa78
 800ba82:	f640 4085 	movw	r0, #3205	@ 0xc85
 800ba86:	f7ff feaf 	bl	800b7e8 <put>
 800ba8a:	e014      	b.n	800bab6 <put_wuliao_to_circular_frist+0xd6>
		} else if (i == 2) {
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d111      	bne.n	800bab6 <put_wuliao_to_circular_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800ba92:	4b13      	ldr	r3, [pc, #76]	@ (800bae0 <put_wuliao_to_circular_frist+0x100>)
 800ba94:	edd3 7a00 	vldr	s15, [r3]
 800ba98:	4b12      	ldr	r3, [pc, #72]	@ (800bae4 <put_wuliao_to_circular_frist+0x104>)
 800ba9a:	ed93 7a00 	vldr	s14, [r3]
 800ba9e:	eef0 0a47 	vmov.f32	s1, s14
 800baa2:	eeb0 0a67 	vmov.f32	s0, s15
 800baa6:	f001 fdb3 	bl	800d610 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800baaa:	f640 1142 	movw	r1, #2370	@ 0x942
 800baae:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bab2:	f7ff fe99 	bl	800b7e8 <put>
	for (int i = 0; i < 3; i++) {
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	3301      	adds	r3, #1
 800baba:	607b      	str	r3, [r7, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b02      	cmp	r3, #2
 800bac0:	dd94      	ble.n	800b9ec <put_wuliao_to_circular_frist+0xc>
		}

	}
}
 800bac2:	bf00      	nop
 800bac4:	bf00      	nop
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	24000460 	.word	0x24000460
 800bad0:	44960000 	.word	0x44960000
 800bad4:	44e74000 	.word	0x44e74000
 800bad8:	44834000 	.word	0x44834000
 800badc:	445d4000 	.word	0x445d4000
 800bae0:	24000000 	.word	0x24000000
 800bae4:	24000004 	.word	0x24000004

0800bae8 <put_wuliao_to_Car_frist>:

void put_wuliao_to_Car_frist(void) {
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 800baee:	2300      	movs	r3, #0
 800baf0:	607b      	str	r3, [r7, #4]
 800baf2:	e067      	b.n	800bbc4 <put_wuliao_to_Car_frist+0xdc>
		if (QR_data[i] == 1) {
 800baf4:	4a37      	ldr	r2, [pc, #220]	@ (800bbd4 <put_wuliao_to_Car_frist+0xec>)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d105      	bne.n	800bb0c <put_wuliao_to_Car_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800bb00:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800bbd8 <put_wuliao_to_Car_frist+0xf0>
 800bb04:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800bbdc <put_wuliao_to_Car_frist+0xf4>
 800bb08:	f001 fc22 	bl	800d350 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 2) {
 800bb0c:	4a31      	ldr	r2, [pc, #196]	@ (800bbd4 <put_wuliao_to_Car_frist+0xec>)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d105      	bne.n	800bb24 <put_wuliao_to_Car_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800bb18:	eddf 0a31 	vldr	s1, [pc, #196]	@ 800bbe0 <put_wuliao_to_Car_frist+0xf8>
 800bb1c:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800bbdc <put_wuliao_to_Car_frist+0xf4>
 800bb20:	f001 fc16 	bl	800d350 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800bb24:	4a2b      	ldr	r2, [pc, #172]	@ (800bbd4 <put_wuliao_to_Car_frist+0xec>)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb2c:	2b03      	cmp	r3, #3
 800bb2e:	d105      	bne.n	800bb3c <put_wuliao_to_Car_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800bb30:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800bbe4 <put_wuliao_to_Car_frist+0xfc>
 800bb34:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800bbdc <put_wuliao_to_Car_frist+0xf4>
 800bb38:	f001 fc0a 	bl	800d350 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 0) {
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d112      	bne.n	800bb68 <put_wuliao_to_Car_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bb42:	4b29      	ldr	r3, [pc, #164]	@ (800bbe8 <put_wuliao_to_Car_frist+0x100>)
 800bb44:	edd3 7a00 	vldr	s15, [r3]
 800bb48:	4b28      	ldr	r3, [pc, #160]	@ (800bbec <put_wuliao_to_Car_frist+0x104>)
 800bb4a:	ed93 7a00 	vldr	s14, [r3]
 800bb4e:	eef0 0a47 	vmov.f32	s1, s14
 800bb52:	eeb0 0a67 	vmov.f32	s0, s15
 800bb56:	f001 fd5b 	bl	800d610 <Move_Tx_Pid_Ctrl>
			catch_Second(860, 2375);
 800bb5a:	f640 1147 	movw	r1, #2375	@ 0x947
 800bb5e:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800bb62:	f7ff fd72 	bl	800b64a <catch_Second>
 800bb66:	e02a      	b.n	800bbbe <put_wuliao_to_Car_frist+0xd6>

		} else if (i == 1) {
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d112      	bne.n	800bb94 <put_wuliao_to_Car_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bb6e:	4b1e      	ldr	r3, [pc, #120]	@ (800bbe8 <put_wuliao_to_Car_frist+0x100>)
 800bb70:	edd3 7a00 	vldr	s15, [r3]
 800bb74:	4b1d      	ldr	r3, [pc, #116]	@ (800bbec <put_wuliao_to_Car_frist+0x104>)
 800bb76:	ed93 7a00 	vldr	s14, [r3]
 800bb7a:	eef0 0a47 	vmov.f32	s1, s14
 800bb7e:	eeb0 0a67 	vmov.f32	s0, s15
 800bb82:	f001 fd45 	bl	800d610 <Move_Tx_Pid_Ctrl>
			catch_Second(1910, 2370);
 800bb86:	f640 1142 	movw	r1, #2370	@ 0x942
 800bb8a:	f240 7076 	movw	r0, #1910	@ 0x776
 800bb8e:	f7ff fd5c 	bl	800b64a <catch_Second>
 800bb92:	e014      	b.n	800bbbe <put_wuliao_to_Car_frist+0xd6>
		} else if (i == 2) {
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d111      	bne.n	800bbbe <put_wuliao_to_Car_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bb9a:	4b13      	ldr	r3, [pc, #76]	@ (800bbe8 <put_wuliao_to_Car_frist+0x100>)
 800bb9c:	edd3 7a00 	vldr	s15, [r3]
 800bba0:	4b12      	ldr	r3, [pc, #72]	@ (800bbec <put_wuliao_to_Car_frist+0x104>)
 800bba2:	ed93 7a00 	vldr	s14, [r3]
 800bba6:	eef0 0a47 	vmov.f32	s1, s14
 800bbaa:	eeb0 0a67 	vmov.f32	s0, s15
 800bbae:	f001 fd2f 	bl	800d610 <Move_Tx_Pid_Ctrl>
			catch_Second(2960, 2370);
 800bbb2:	f640 1142 	movw	r1, #2370	@ 0x942
 800bbb6:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bbba:	f7ff fd46 	bl	800b64a <catch_Second>
	for (int i = 0; i < 3; i++) {
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	607b      	str	r3, [r7, #4]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	dd94      	ble.n	800baf4 <put_wuliao_to_Car_frist+0xc>
		}

	}
}
 800bbca:	bf00      	nop
 800bbcc:	bf00      	nop
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	24000460 	.word	0x24000460
 800bbd8:	44960000 	.word	0x44960000
 800bbdc:	44e74000 	.word	0x44e74000
 800bbe0:	44834000 	.word	0x44834000
 800bbe4:	445d4000 	.word	0x445d4000
 800bbe8:	24000000 	.word	0x24000000
 800bbec:	24000004 	.word	0x24000004

0800bbf0 <put_wuliao_to_circular_second>:

void put_wuliao_to_circular_second(void) {
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	607b      	str	r3, [r7, #4]
 800bbfa:	e067      	b.n	800bccc <put_wuliao_to_circular_second+0xdc>
		if (QR_data[i] + 3 == 4) {
 800bbfc:	4a3a      	ldr	r2, [pc, #232]	@ (800bce8 <put_wuliao_to_circular_second+0xf8>)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d105      	bne.n	800bc14 <put_wuliao_to_circular_second+0x24>
			Move_Action_Nopid_Forward_Ctrl(954, 1850);
 800bc08:	eddf 0a38 	vldr	s1, [pc, #224]	@ 800bcec <put_wuliao_to_circular_second+0xfc>
 800bc0c:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800bcf0 <put_wuliao_to_circular_second+0x100>
 800bc10:	f001 fa3e 	bl	800d090 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (QR_data[i] + 3 == 5) {
 800bc14:	4a34      	ldr	r2, [pc, #208]	@ (800bce8 <put_wuliao_to_circular_second+0xf8>)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	d105      	bne.n	800bc2c <put_wuliao_to_circular_second+0x3c>
			Move_Action_Nopid_Forward_Ctrl(1050, 1850);
 800bc20:	eddf 0a32 	vldr	s1, [pc, #200]	@ 800bcec <put_wuliao_to_circular_second+0xfc>
 800bc24:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 800bcf4 <put_wuliao_to_circular_second+0x104>
 800bc28:	f001 fa32 	bl	800d090 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (QR_data[i] + 3 == 6) {
 800bc2c:	4a2e      	ldr	r2, [pc, #184]	@ (800bce8 <put_wuliao_to_circular_second+0xf8>)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc34:	2b03      	cmp	r3, #3
 800bc36:	d105      	bne.n	800bc44 <put_wuliao_to_circular_second+0x54>
			Move_Action_Nopid_Forward_Ctrl(1208, 1850);
 800bc38:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800bcec <put_wuliao_to_circular_second+0xfc>
 800bc3c:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 800bcf8 <put_wuliao_to_circular_second+0x108>
 800bc40:	f001 fa26 	bl	800d090 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (i == 0) {
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d112      	bne.n	800bc70 <put_wuliao_to_circular_second+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bc4a:	4b2c      	ldr	r3, [pc, #176]	@ (800bcfc <put_wuliao_to_circular_second+0x10c>)
 800bc4c:	edd3 7a00 	vldr	s15, [r3]
 800bc50:	4b2b      	ldr	r3, [pc, #172]	@ (800bd00 <put_wuliao_to_circular_second+0x110>)
 800bc52:	ed93 7a00 	vldr	s14, [r3]
 800bc56:	eef0 0a47 	vmov.f32	s1, s14
 800bc5a:	eeb0 0a67 	vmov.f32	s0, s15
 800bc5e:	f001 fcd7 	bl	800d610 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800bc62:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bc66:	f640 0066 	movw	r0, #2150	@ 0x866
 800bc6a:	f7ff fdbd 	bl	800b7e8 <put>
 800bc6e:	e02a      	b.n	800bcc6 <put_wuliao_to_circular_second+0xd6>

		} else if (i == 1) {
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d112      	bne.n	800bc9c <put_wuliao_to_circular_second+0xac>

			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bc76:	4b21      	ldr	r3, [pc, #132]	@ (800bcfc <put_wuliao_to_circular_second+0x10c>)
 800bc78:	edd3 7a00 	vldr	s15, [r3]
 800bc7c:	4b20      	ldr	r3, [pc, #128]	@ (800bd00 <put_wuliao_to_circular_second+0x110>)
 800bc7e:	ed93 7a00 	vldr	s14, [r3]
 800bc82:	eef0 0a47 	vmov.f32	s1, s14
 800bc86:	eeb0 0a67 	vmov.f32	s0, s15
 800bc8a:	f001 fcc1 	bl	800d610 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800bc8e:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bc92:	f640 4085 	movw	r0, #3205	@ 0xc85
 800bc96:	f7ff fda7 	bl	800b7e8 <put>
 800bc9a:	e014      	b.n	800bcc6 <put_wuliao_to_circular_second+0xd6>
		} else if (i == 2) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d111      	bne.n	800bcc6 <put_wuliao_to_circular_second+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bca2:	4b16      	ldr	r3, [pc, #88]	@ (800bcfc <put_wuliao_to_circular_second+0x10c>)
 800bca4:	edd3 7a00 	vldr	s15, [r3]
 800bca8:	4b15      	ldr	r3, [pc, #84]	@ (800bd00 <put_wuliao_to_circular_second+0x110>)
 800bcaa:	ed93 7a00 	vldr	s14, [r3]
 800bcae:	eef0 0a47 	vmov.f32	s1, s14
 800bcb2:	eeb0 0a67 	vmov.f32	s0, s15
 800bcb6:	f001 fcab 	bl	800d610 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800bcba:	f640 1142 	movw	r1, #2370	@ 0x942
 800bcbe:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bcc2:	f7ff fd91 	bl	800b7e8 <put>
	for (int i = 0; i < 3; i++) {
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	607b      	str	r3, [r7, #4]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b02      	cmp	r3, #2
 800bcd0:	dd94      	ble.n	800bbfc <put_wuliao_to_circular_second+0xc>
		}

	}
	Move_Action_Nopid_Forward_Ctrl(1000, 1850);
 800bcd2:	eddf 0a06 	vldr	s1, [pc, #24]	@ 800bcec <put_wuliao_to_circular_second+0xfc>
 800bcd6:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800bd04 <put_wuliao_to_circular_second+0x114>
 800bcda:	f001 f9d9 	bl	800d090 <Move_Action_Nopid_Forward_Ctrl>
}
 800bcde:	bf00      	nop
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	24000460 	.word	0x24000460
 800bcec:	44e74000 	.word	0x44e74000
 800bcf0:	446e8000 	.word	0x446e8000
 800bcf4:	44834000 	.word	0x44834000
 800bcf8:	44970000 	.word	0x44970000
 800bcfc:	24000000 	.word	0x24000000
 800bd00:	24000004 	.word	0x24000004
 800bd04:	447a0000 	.word	0x447a0000

0800bd08 <Second_Run_Frist_Grab_Wuliao>:

/*************************第二次抓取***********************************************/
void Second_Run_Frist_Grab_Wuliao(void) {
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	af00      	add	r7, sp, #0
	static uint8_t Grab_count = 0;
	wuliao_falg = 0;
 800bd0c:	4b2a      	ldr	r3, [pc, #168]	@ (800bdb8 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd0e:	2200      	movs	r2, #0
 800bd10:	601a      	str	r2, [r3, #0]
	while (Grab_count < 3) {
 800bd12:	e04a      	b.n	800bdaa <Second_Run_Frist_Grab_Wuliao+0xa2>
		if (QR_data[3] == colour && wuliao_falg == 0) {
 800bd14:	4b29      	ldr	r3, [pc, #164]	@ (800bdbc <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800bd16:	68da      	ldr	r2, [r3, #12]
 800bd18:	4b29      	ldr	r3, [pc, #164]	@ (800bdc0 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d112      	bne.n	800bd46 <Second_Run_Frist_Grab_Wuliao+0x3e>
 800bd20:	4b25      	ldr	r3, [pc, #148]	@ (800bdb8 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d10e      	bne.n	800bd46 <Second_Run_Frist_Grab_Wuliao+0x3e>
			catch_Frist(860, 2375);
 800bd28:	f640 1147 	movw	r1, #2375	@ 0x947
 800bd2c:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800bd30:	f7ff fc1e 	bl	800b570 <catch_Frist>
			wuliao_falg = 1;
 800bd34:	4b20      	ldr	r3, [pc, #128]	@ (800bdb8 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd36:	2201      	movs	r2, #1
 800bd38:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bd3a:	4b22      	ldr	r3, [pc, #136]	@ (800bdc4 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	b2da      	uxtb	r2, r3
 800bd42:	4b20      	ldr	r3, [pc, #128]	@ (800bdc4 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bd44:	701a      	strb	r2, [r3, #0]
		}
		if (QR_data[4] == colour && wuliao_falg == 1) {
 800bd46:	4b1d      	ldr	r3, [pc, #116]	@ (800bdbc <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800bd48:	691a      	ldr	r2, [r3, #16]
 800bd4a:	4b1d      	ldr	r3, [pc, #116]	@ (800bdc0 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d112      	bne.n	800bd78 <Second_Run_Frist_Grab_Wuliao+0x70>
 800bd52:	4b19      	ldr	r3, [pc, #100]	@ (800bdb8 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d10e      	bne.n	800bd78 <Second_Run_Frist_Grab_Wuliao+0x70>
			catch_Frist(1910, 2370);
 800bd5a:	f640 1142 	movw	r1, #2370	@ 0x942
 800bd5e:	f240 7076 	movw	r0, #1910	@ 0x776
 800bd62:	f7ff fc05 	bl	800b570 <catch_Frist>
			wuliao_falg = 2;
 800bd66:	4b14      	ldr	r3, [pc, #80]	@ (800bdb8 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd68:	2202      	movs	r2, #2
 800bd6a:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bd6c:	4b15      	ldr	r3, [pc, #84]	@ (800bdc4 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	3301      	adds	r3, #1
 800bd72:	b2da      	uxtb	r2, r3
 800bd74:	4b13      	ldr	r3, [pc, #76]	@ (800bdc4 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bd76:	701a      	strb	r2, [r3, #0]
		}
		if (QR_data[5] == colour && wuliao_falg == 2) {
 800bd78:	4b10      	ldr	r3, [pc, #64]	@ (800bdbc <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800bd7a:	695a      	ldr	r2, [r3, #20]
 800bd7c:	4b10      	ldr	r3, [pc, #64]	@ (800bdc0 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d112      	bne.n	800bdaa <Second_Run_Frist_Grab_Wuliao+0xa2>
 800bd84:	4b0c      	ldr	r3, [pc, #48]	@ (800bdb8 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	d10e      	bne.n	800bdaa <Second_Run_Frist_Grab_Wuliao+0xa2>
			catch_Frist(2960, 2370);
 800bd8c:	f640 1142 	movw	r1, #2370	@ 0x942
 800bd90:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bd94:	f7ff fbec 	bl	800b570 <catch_Frist>
			wuliao_falg = 0;
 800bd98:	4b07      	ldr	r3, [pc, #28]	@ (800bdb8 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bd9e:	4b09      	ldr	r3, [pc, #36]	@ (800bdc4 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	3301      	adds	r3, #1
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	4b07      	ldr	r3, [pc, #28]	@ (800bdc4 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bda8:	701a      	strb	r2, [r3, #0]
	while (Grab_count < 3) {
 800bdaa:	4b06      	ldr	r3, [pc, #24]	@ (800bdc4 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d9b0      	bls.n	800bd14 <Second_Run_Frist_Grab_Wuliao+0xc>
		}

	}
}
 800bdb2:	bf00      	nop
 800bdb4:	bf00      	nop
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	24000480 	.word	0x24000480
 800bdbc:	24000460 	.word	0x24000460
 800bdc0:	2400047c 	.word	0x2400047c
 800bdc4:	24000b2c 	.word	0x24000b2c

0800bdc8 <Second_Run_put_wuliao_to_Car_frist>:
void Second_Run_put_wuliao_to_Car_frist(void) {
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
	for (int i = 3; i < 6; i++) {
 800bdce:	2303      	movs	r3, #3
 800bdd0:	607b      	str	r3, [r7, #4]
 800bdd2:	e067      	b.n	800bea4 <Second_Run_put_wuliao_to_Car_frist+0xdc>
		if (QR_data[i] == 1) {
 800bdd4:	4a37      	ldr	r2, [pc, #220]	@ (800beb4 <Second_Run_put_wuliao_to_Car_frist+0xec>)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d105      	bne.n	800bdec <Second_Run_put_wuliao_to_Car_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800bde0:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800beb8 <Second_Run_put_wuliao_to_Car_frist+0xf0>
 800bde4:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800bebc <Second_Run_put_wuliao_to_Car_frist+0xf4>
 800bde8:	f001 fab2 	bl	800d350 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 2) {
 800bdec:	4a31      	ldr	r2, [pc, #196]	@ (800beb4 <Second_Run_put_wuliao_to_Car_frist+0xec>)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	d105      	bne.n	800be04 <Second_Run_put_wuliao_to_Car_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800bdf8:	eddf 0a31 	vldr	s1, [pc, #196]	@ 800bec0 <Second_Run_put_wuliao_to_Car_frist+0xf8>
 800bdfc:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800bebc <Second_Run_put_wuliao_to_Car_frist+0xf4>
 800be00:	f001 faa6 	bl	800d350 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800be04:	4a2b      	ldr	r2, [pc, #172]	@ (800beb4 <Second_Run_put_wuliao_to_Car_frist+0xec>)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be0c:	2b03      	cmp	r3, #3
 800be0e:	d105      	bne.n	800be1c <Second_Run_put_wuliao_to_Car_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800be10:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800bec4 <Second_Run_put_wuliao_to_Car_frist+0xfc>
 800be14:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800bebc <Second_Run_put_wuliao_to_Car_frist+0xf4>
 800be18:	f001 fa9a 	bl	800d350 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 3) {
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2b03      	cmp	r3, #3
 800be20:	d112      	bne.n	800be48 <Second_Run_put_wuliao_to_Car_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800be22:	4b29      	ldr	r3, [pc, #164]	@ (800bec8 <Second_Run_put_wuliao_to_Car_frist+0x100>)
 800be24:	edd3 7a00 	vldr	s15, [r3]
 800be28:	4b28      	ldr	r3, [pc, #160]	@ (800becc <Second_Run_put_wuliao_to_Car_frist+0x104>)
 800be2a:	ed93 7a00 	vldr	s14, [r3]
 800be2e:	eef0 0a47 	vmov.f32	s1, s14
 800be32:	eeb0 0a67 	vmov.f32	s0, s15
 800be36:	f001 fbeb 	bl	800d610 <Move_Tx_Pid_Ctrl>
			catch_Second(860, 2375);
 800be3a:	f640 1147 	movw	r1, #2375	@ 0x947
 800be3e:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800be42:	f7ff fc02 	bl	800b64a <catch_Second>
 800be46:	e02a      	b.n	800be9e <Second_Run_put_wuliao_to_Car_frist+0xd6>

		} else if (i == 4) {
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2b04      	cmp	r3, #4
 800be4c:	d112      	bne.n	800be74 <Second_Run_put_wuliao_to_Car_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800be4e:	4b1e      	ldr	r3, [pc, #120]	@ (800bec8 <Second_Run_put_wuliao_to_Car_frist+0x100>)
 800be50:	edd3 7a00 	vldr	s15, [r3]
 800be54:	4b1d      	ldr	r3, [pc, #116]	@ (800becc <Second_Run_put_wuliao_to_Car_frist+0x104>)
 800be56:	ed93 7a00 	vldr	s14, [r3]
 800be5a:	eef0 0a47 	vmov.f32	s1, s14
 800be5e:	eeb0 0a67 	vmov.f32	s0, s15
 800be62:	f001 fbd5 	bl	800d610 <Move_Tx_Pid_Ctrl>
			catch_Second(1910, 2370);
 800be66:	f640 1142 	movw	r1, #2370	@ 0x942
 800be6a:	f240 7076 	movw	r0, #1910	@ 0x776
 800be6e:	f7ff fbec 	bl	800b64a <catch_Second>
 800be72:	e014      	b.n	800be9e <Second_Run_put_wuliao_to_Car_frist+0xd6>
		} else if (i == 5) {
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b05      	cmp	r3, #5
 800be78:	d111      	bne.n	800be9e <Second_Run_put_wuliao_to_Car_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800be7a:	4b13      	ldr	r3, [pc, #76]	@ (800bec8 <Second_Run_put_wuliao_to_Car_frist+0x100>)
 800be7c:	edd3 7a00 	vldr	s15, [r3]
 800be80:	4b12      	ldr	r3, [pc, #72]	@ (800becc <Second_Run_put_wuliao_to_Car_frist+0x104>)
 800be82:	ed93 7a00 	vldr	s14, [r3]
 800be86:	eef0 0a47 	vmov.f32	s1, s14
 800be8a:	eeb0 0a67 	vmov.f32	s0, s15
 800be8e:	f001 fbbf 	bl	800d610 <Move_Tx_Pid_Ctrl>
			catch_Second(2960, 2370);
 800be92:	f640 1142 	movw	r1, #2370	@ 0x942
 800be96:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800be9a:	f7ff fbd6 	bl	800b64a <catch_Second>
	for (int i = 3; i < 6; i++) {
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	3301      	adds	r3, #1
 800bea2:	607b      	str	r3, [r7, #4]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b05      	cmp	r3, #5
 800bea8:	dd94      	ble.n	800bdd4 <Second_Run_put_wuliao_to_Car_frist+0xc>
		}

	}
}
 800beaa:	bf00      	nop
 800beac:	bf00      	nop
 800beae:	3708      	adds	r7, #8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	24000460 	.word	0x24000460
 800beb8:	44960000 	.word	0x44960000
 800bebc:	44e74000 	.word	0x44e74000
 800bec0:	44834000 	.word	0x44834000
 800bec4:	445d4000 	.word	0x445d4000
 800bec8:	24000000 	.word	0x24000000
 800becc:	24000004 	.word	0x24000004

0800bed0 <Second_Run_put_wuliao_to_circular_frist>:

void Second_Run_put_wuliao_to_circular_frist(void) {
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0

	for (int i = 3; i < 6; i++) {
 800bed6:	2303      	movs	r3, #3
 800bed8:	607b      	str	r3, [r7, #4]
 800beda:	e067      	b.n	800bfac <Second_Run_put_wuliao_to_circular_frist+0xdc>
		if (QR_data[i] == 1) {
 800bedc:	4a37      	ldr	r2, [pc, #220]	@ (800bfbc <Second_Run_put_wuliao_to_circular_frist+0xec>)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d105      	bne.n	800bef4 <Second_Run_put_wuliao_to_circular_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(910, 1910);
 800bee8:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800bfc0 <Second_Run_put_wuliao_to_circular_frist+0xf0>
 800beec:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800bfc4 <Second_Run_put_wuliao_to_circular_frist+0xf4>
 800bef0:	f001 fa2e 	bl	800d350 <Move_Action_Nopid_Right_Ctrl>

		}
		if (QR_data[i] == 2) {
 800bef4:	4a31      	ldr	r2, [pc, #196]	@ (800bfbc <Second_Run_put_wuliao_to_circular_frist+0xec>)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800befc:	2b02      	cmp	r3, #2
 800befe:	d105      	bne.n	800bf0c <Second_Run_put_wuliao_to_circular_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1060, 1910);
 800bf00:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 800bfc0 <Second_Run_put_wuliao_to_circular_frist+0xf0>
 800bf04:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 800bfc8 <Second_Run_put_wuliao_to_circular_frist+0xf8>
 800bf08:	f001 fa22 	bl	800d350 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800bf0c:	4a2b      	ldr	r2, [pc, #172]	@ (800bfbc <Second_Run_put_wuliao_to_circular_frist+0xec>)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf14:	2b03      	cmp	r3, #3
 800bf16:	d105      	bne.n	800bf24 <Second_Run_put_wuliao_to_circular_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1185, 1910);
 800bf18:	eddf 0a29 	vldr	s1, [pc, #164]	@ 800bfc0 <Second_Run_put_wuliao_to_circular_frist+0xf0>
 800bf1c:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800bfcc <Second_Run_put_wuliao_to_circular_frist+0xfc>
 800bf20:	f001 fa16 	bl	800d350 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 3) {
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b03      	cmp	r3, #3
 800bf28:	d112      	bne.n	800bf50 <Second_Run_put_wuliao_to_circular_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bf2a:	4b29      	ldr	r3, [pc, #164]	@ (800bfd0 <Second_Run_put_wuliao_to_circular_frist+0x100>)
 800bf2c:	edd3 7a00 	vldr	s15, [r3]
 800bf30:	4b28      	ldr	r3, [pc, #160]	@ (800bfd4 <Second_Run_put_wuliao_to_circular_frist+0x104>)
 800bf32:	ed93 7a00 	vldr	s14, [r3]
 800bf36:	eef0 0a47 	vmov.f32	s1, s14
 800bf3a:	eeb0 0a67 	vmov.f32	s0, s15
 800bf3e:	f001 fb67 	bl	800d610 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800bf42:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bf46:	f640 0066 	movw	r0, #2150	@ 0x866
 800bf4a:	f7ff fc4d 	bl	800b7e8 <put>
 800bf4e:	e02a      	b.n	800bfa6 <Second_Run_put_wuliao_to_circular_frist+0xd6>
		} else if (i == 4) {
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b04      	cmp	r3, #4
 800bf54:	d112      	bne.n	800bf7c <Second_Run_put_wuliao_to_circular_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bf56:	4b1e      	ldr	r3, [pc, #120]	@ (800bfd0 <Second_Run_put_wuliao_to_circular_frist+0x100>)
 800bf58:	edd3 7a00 	vldr	s15, [r3]
 800bf5c:	4b1d      	ldr	r3, [pc, #116]	@ (800bfd4 <Second_Run_put_wuliao_to_circular_frist+0x104>)
 800bf5e:	ed93 7a00 	vldr	s14, [r3]
 800bf62:	eef0 0a47 	vmov.f32	s1, s14
 800bf66:	eeb0 0a67 	vmov.f32	s0, s15
 800bf6a:	f001 fb51 	bl	800d610 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800bf6e:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bf72:	f640 4085 	movw	r0, #3205	@ 0xc85
 800bf76:	f7ff fc37 	bl	800b7e8 <put>
 800bf7a:	e014      	b.n	800bfa6 <Second_Run_put_wuliao_to_circular_frist+0xd6>
		} else if (i == 5) {
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2b05      	cmp	r3, #5
 800bf80:	d111      	bne.n	800bfa6 <Second_Run_put_wuliao_to_circular_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bf82:	4b13      	ldr	r3, [pc, #76]	@ (800bfd0 <Second_Run_put_wuliao_to_circular_frist+0x100>)
 800bf84:	edd3 7a00 	vldr	s15, [r3]
 800bf88:	4b12      	ldr	r3, [pc, #72]	@ (800bfd4 <Second_Run_put_wuliao_to_circular_frist+0x104>)
 800bf8a:	ed93 7a00 	vldr	s14, [r3]
 800bf8e:	eef0 0a47 	vmov.f32	s1, s14
 800bf92:	eeb0 0a67 	vmov.f32	s0, s15
 800bf96:	f001 fb3b 	bl	800d610 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800bf9a:	f640 1142 	movw	r1, #2370	@ 0x942
 800bf9e:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bfa2:	f7ff fc21 	bl	800b7e8 <put>
	for (int i = 3; i < 6; i++) {
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	607b      	str	r3, [r7, #4]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b05      	cmp	r3, #5
 800bfb0:	dd94      	ble.n	800bedc <Second_Run_put_wuliao_to_circular_frist+0xc>
		}

	}
}
 800bfb2:	bf00      	nop
 800bfb4:	bf00      	nop
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	24000460 	.word	0x24000460
 800bfc0:	44eec000 	.word	0x44eec000
 800bfc4:	44638000 	.word	0x44638000
 800bfc8:	44848000 	.word	0x44848000
 800bfcc:	44942000 	.word	0x44942000
 800bfd0:	24000000 	.word	0x24000000
 800bfd4:	24000004 	.word	0x24000004

0800bfd8 <Emm_V5_Pos_Control>:
 * @param    raF ：相位/绝对标志，false为相对运动，true为绝对值运动
 * @param    snF ：多机同步标志 ，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Pos_Control(uint8_t addr, uint8_t dir, uint16_t vel, uint8_t acc,
		uint32_t clk, bool raF, bool snF) {
 800bfd8:	b590      	push	{r4, r7, lr}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	4604      	mov	r4, r0
 800bfe0:	4608      	mov	r0, r1
 800bfe2:	4611      	mov	r1, r2
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	4623      	mov	r3, r4
 800bfe8:	71fb      	strb	r3, [r7, #7]
 800bfea:	4603      	mov	r3, r0
 800bfec:	71bb      	strb	r3, [r7, #6]
 800bfee:	460b      	mov	r3, r1
 800bff0:	80bb      	strh	r3, [r7, #4]
 800bff2:	4613      	mov	r3, r2
 800bff4:	70fb      	strb	r3, [r7, #3]

	// 装载命令
	cmd[0] = addr;                      // 地址
 800bff6:	4a20      	ldr	r2, [pc, #128]	@ (800c078 <Emm_V5_Pos_Control+0xa0>)
 800bff8:	79fb      	ldrb	r3, [r7, #7]
 800bffa:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFD;                      // 功能码
 800bffc:	4b1e      	ldr	r3, [pc, #120]	@ (800c078 <Emm_V5_Pos_Control+0xa0>)
 800bffe:	22fd      	movs	r2, #253	@ 0xfd
 800c000:	705a      	strb	r2, [r3, #1]
	cmd[2] = dir;                       // 方向
 800c002:	4a1d      	ldr	r2, [pc, #116]	@ (800c078 <Emm_V5_Pos_Control+0xa0>)
 800c004:	79bb      	ldrb	r3, [r7, #6]
 800c006:	7093      	strb	r3, [r2, #2]
	cmd[3] = (uint8_t) (vel >> 8);       // 速度(RPM)高8位字节
 800c008:	88bb      	ldrh	r3, [r7, #4]
 800c00a:	0a1b      	lsrs	r3, r3, #8
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	b2da      	uxtb	r2, r3
 800c010:	4b19      	ldr	r3, [pc, #100]	@ (800c078 <Emm_V5_Pos_Control+0xa0>)
 800c012:	70da      	strb	r2, [r3, #3]
	cmd[4] = (uint8_t) (vel >> 0);       // 速度(RPM)低8位字节
 800c014:	88bb      	ldrh	r3, [r7, #4]
 800c016:	b2da      	uxtb	r2, r3
 800c018:	4b17      	ldr	r3, [pc, #92]	@ (800c078 <Emm_V5_Pos_Control+0xa0>)
 800c01a:	711a      	strb	r2, [r3, #4]
	cmd[5] = acc;                       // 加速度，注意：0是直接启动
 800c01c:	4a16      	ldr	r2, [pc, #88]	@ (800c078 <Emm_V5_Pos_Control+0xa0>)
 800c01e:	78fb      	ldrb	r3, [r7, #3]
 800c020:	7153      	strb	r3, [r2, #5]
	cmd[6] = (uint8_t) (clk >> 24);      // 脉冲数(bit24 - bit31)
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	0e1b      	lsrs	r3, r3, #24
 800c026:	b2da      	uxtb	r2, r3
 800c028:	4b13      	ldr	r3, [pc, #76]	@ (800c078 <Emm_V5_Pos_Control+0xa0>)
 800c02a:	719a      	strb	r2, [r3, #6]
	cmd[7] = (uint8_t) (clk >> 16);      // 脉冲数(bit16 - bit23)
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	0c1b      	lsrs	r3, r3, #16
 800c030:	b2da      	uxtb	r2, r3
 800c032:	4b11      	ldr	r3, [pc, #68]	@ (800c078 <Emm_V5_Pos_Control+0xa0>)
 800c034:	71da      	strb	r2, [r3, #7]
	cmd[8] = (uint8_t) (clk >> 8);       // 脉冲数(bit8  - bit15)
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	0a1b      	lsrs	r3, r3, #8
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	4b0e      	ldr	r3, [pc, #56]	@ (800c078 <Emm_V5_Pos_Control+0xa0>)
 800c03e:	721a      	strb	r2, [r3, #8]
	cmd[9] = (uint8_t) (clk >> 0);       // 脉冲数(bit0  - bit7 )
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	b2da      	uxtb	r2, r3
 800c044:	4b0c      	ldr	r3, [pc, #48]	@ (800c078 <Emm_V5_Pos_Control+0xa0>)
 800c046:	725a      	strb	r2, [r3, #9]
	cmd[10] = raF;                       // 相位/绝对标志，false为相对运动，true为绝对值运动
 800c048:	7f3a      	ldrb	r2, [r7, #28]
 800c04a:	4b0b      	ldr	r3, [pc, #44]	@ (800c078 <Emm_V5_Pos_Control+0xa0>)
 800c04c:	729a      	strb	r2, [r3, #10]
	cmd[11] = snF;                       // 多机同步运动标志，false为不启用，true为启用
 800c04e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c052:	4b09      	ldr	r3, [pc, #36]	@ (800c078 <Emm_V5_Pos_Control+0xa0>)
 800c054:	72da      	strb	r2, [r3, #11]
	cmd[12] = 0x6B;                      // 校验字节
 800c056:	4b08      	ldr	r3, [pc, #32]	@ (800c078 <Emm_V5_Pos_Control+0xa0>)
 800c058:	226b      	movs	r2, #107	@ 0x6b
 800c05a:	731a      	strb	r2, [r3, #12]

	// 发送命令
	FDCAN_Send_Msg(cmd, 13);
 800c05c:	210d      	movs	r1, #13
 800c05e:	4806      	ldr	r0, [pc, #24]	@ (800c078 <Emm_V5_Pos_Control+0xa0>)
 800c060:	f7f4 fe1a 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(10);
 800c064:	200a      	movs	r0, #10
 800c066:	f7f6 fe5f 	bl	8002d28 <HAL_Delay>
	Emm_mode = 1;
 800c06a:	4b04      	ldr	r3, [pc, #16]	@ (800c07c <Emm_V5_Pos_Control+0xa4>)
 800c06c:	2201      	movs	r2, #1
 800c06e:	701a      	strb	r2, [r3, #0]
}
 800c070:	bf00      	nop
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	bd90      	pop	{r4, r7, pc}
 800c078:	24000b30 	.word	0x24000b30
 800c07c:	2400029c 	.word	0x2400029c

0800c080 <Emm_V5_Stop_Now>:
 * @brief    立即停止（所有控制模式都通用）
 * @param    addr  ：电机地址
 * @param    snF   ：多机同步标志，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Stop_Now(uint8_t addr, bool snF) {
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	4603      	mov	r3, r0
 800c088:	460a      	mov	r2, r1
 800c08a:	71fb      	strb	r3, [r7, #7]
 800c08c:	4613      	mov	r3, r2
 800c08e:	71bb      	strb	r3, [r7, #6]

	// 装载命令
	cmd[0] = addr;                       // 地址
 800c090:	4a0b      	ldr	r2, [pc, #44]	@ (800c0c0 <Emm_V5_Stop_Now+0x40>)
 800c092:	79fb      	ldrb	r3, [r7, #7]
 800c094:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFE;                       // 功能码
 800c096:	4b0a      	ldr	r3, [pc, #40]	@ (800c0c0 <Emm_V5_Stop_Now+0x40>)
 800c098:	22fe      	movs	r2, #254	@ 0xfe
 800c09a:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x98;                       // 辅助码
 800c09c:	4b08      	ldr	r3, [pc, #32]	@ (800c0c0 <Emm_V5_Stop_Now+0x40>)
 800c09e:	2298      	movs	r2, #152	@ 0x98
 800c0a0:	709a      	strb	r2, [r3, #2]
	cmd[3] = snF;                        // 多机同步运动标志
 800c0a2:	79ba      	ldrb	r2, [r7, #6]
 800c0a4:	4b06      	ldr	r3, [pc, #24]	@ (800c0c0 <Emm_V5_Stop_Now+0x40>)
 800c0a6:	70da      	strb	r2, [r3, #3]
	cmd[4] = 0x6B;                       // 校验字节
 800c0a8:	4b05      	ldr	r3, [pc, #20]	@ (800c0c0 <Emm_V5_Stop_Now+0x40>)
 800c0aa:	226b      	movs	r2, #107	@ 0x6b
 800c0ac:	711a      	strb	r2, [r3, #4]

	// 发送命令
	FDCAN_Send_Msg(cmd, 5);
 800c0ae:	2105      	movs	r1, #5
 800c0b0:	4803      	ldr	r0, [pc, #12]	@ (800c0c0 <Emm_V5_Stop_Now+0x40>)
 800c0b2:	f7f4 fdf1 	bl	8000c98 <FDCAN_Send_Msg>
}
 800c0b6:	bf00      	nop
 800c0b8:	3708      	adds	r7, #8
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	24000b30 	.word	0x24000b30

0800c0c4 <Emm_V5_Synchronous_motion>:
/**
 * @brief    多机同步运动
 * @param    addr  ：电机地址
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Synchronous_motion(void) {
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	af00      	add	r7, sp, #0

	// 装载命令
	cmd[0] = 0x00;                       // 地址
 800c0c8:	4b0a      	ldr	r3, [pc, #40]	@ (800c0f4 <Emm_V5_Synchronous_motion+0x30>)
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0xFF;                       // 功能码
 800c0ce:	4b09      	ldr	r3, [pc, #36]	@ (800c0f4 <Emm_V5_Synchronous_motion+0x30>)
 800c0d0:	22ff      	movs	r2, #255	@ 0xff
 800c0d2:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x66;                       // 辅助码
 800c0d4:	4b07      	ldr	r3, [pc, #28]	@ (800c0f4 <Emm_V5_Synchronous_motion+0x30>)
 800c0d6:	2266      	movs	r2, #102	@ 0x66
 800c0d8:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6B;                       // 校验字节
 800c0da:	4b06      	ldr	r3, [pc, #24]	@ (800c0f4 <Emm_V5_Synchronous_motion+0x30>)
 800c0dc:	226b      	movs	r2, #107	@ 0x6b
 800c0de:	70da      	strb	r2, [r3, #3]

	// 发送命令
	FDCAN_Send_Msg(cmd, 4);
 800c0e0:	2104      	movs	r1, #4
 800c0e2:	4804      	ldr	r0, [pc, #16]	@ (800c0f4 <Emm_V5_Synchronous_motion+0x30>)
 800c0e4:	f7f4 fdd8 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(5);
 800c0e8:	2005      	movs	r0, #5
 800c0ea:	f7f6 fe1d 	bl	8002d28 <HAL_Delay>
}
 800c0ee:	bf00      	nop
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	24000b30 	.word	0x24000b30

0800c0f8 <limit>:
float A_out;
float TX_X_out;
float TX_Y_out;

// 输出限幅
float limit(float x, float min, float max) {
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	ed87 0a03 	vstr	s0, [r7, #12]
 800c102:	edc7 0a02 	vstr	s1, [r7, #8]
 800c106:	ed87 1a01 	vstr	s2, [r7, #4]
	x = (x > max) ? max : ((x < min) ? min : x);
 800c10a:	ed97 7a03 	vldr	s14, [r7, #12]
 800c10e:	edd7 7a01 	vldr	s15, [r7, #4]
 800c112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c11a:	dd01      	ble.n	800c120 <limit+0x28>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	e00b      	b.n	800c138 <limit+0x40>
 800c120:	ed97 7a03 	vldr	s14, [r7, #12]
 800c124:	edd7 7a02 	vldr	s15, [r7, #8]
 800c128:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c130:	d501      	bpl.n	800c136 <limit+0x3e>
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	e000      	b.n	800c138 <limit+0x40>
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	60fb      	str	r3, [r7, #12]
	return x;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	ee07 3a90 	vmov	s15, r3
}
 800c140:	eeb0 0a67 	vmov.f32	s0, s15
 800c144:	3714      	adds	r7, #20
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr
	...

0800c150 <PID_Init>:
		return in;
	}
}

//	初始化PID结构体
void PID_Init(void) {
 800c150:	b480      	push	{r7}
 800c152:	af00      	add	r7, sp, #0
	//======================X=====================//   20   60
	XPID.P = 20;    //0.57    0  0.1
 800c154:	4b69      	ldr	r3, [pc, #420]	@ (800c2fc <PID_Init+0x1ac>)
 800c156:	4a6a      	ldr	r2, [pc, #424]	@ (800c300 <PID_Init+0x1b0>)
 800c158:	601a      	str	r2, [r3, #0]
	XPID.I = 0;
 800c15a:	4b68      	ldr	r3, [pc, #416]	@ (800c2fc <PID_Init+0x1ac>)
 800c15c:	f04f 0200 	mov.w	r2, #0
 800c160:	609a      	str	r2, [r3, #8]
	XPID.D = 60;
 800c162:	4b66      	ldr	r3, [pc, #408]	@ (800c2fc <PID_Init+0x1ac>)
 800c164:	4a67      	ldr	r2, [pc, #412]	@ (800c304 <PID_Init+0x1b4>)
 800c166:	615a      	str	r2, [r3, #20]

	XPID.I_LIMIT = 100.0;
 800c168:	4b64      	ldr	r3, [pc, #400]	@ (800c2fc <PID_Init+0x1ac>)
 800c16a:	4a67      	ldr	r2, [pc, #412]	@ (800c308 <PID_Init+0x1b8>)
 800c16c:	611a      	str	r2, [r3, #16]
	XPID.OUT_LIMIT = 100.0;
 800c16e:	4b63      	ldr	r3, [pc, #396]	@ (800c2fc <PID_Init+0x1ac>)
 800c170:	4a65      	ldr	r2, [pc, #404]	@ (800c308 <PID_Init+0x1b8>)
 800c172:	621a      	str	r2, [r3, #32]

	XPID.P_OUT = 0.0;
 800c174:	4b61      	ldr	r3, [pc, #388]	@ (800c2fc <PID_Init+0x1ac>)
 800c176:	f04f 0200 	mov.w	r2, #0
 800c17a:	605a      	str	r2, [r3, #4]
	XPID.I_OUT = 0.0;
 800c17c:	4b5f      	ldr	r3, [pc, #380]	@ (800c2fc <PID_Init+0x1ac>)
 800c17e:	f04f 0200 	mov.w	r2, #0
 800c182:	60da      	str	r2, [r3, #12]
	XPID.D_OUT = 0.0;
 800c184:	4b5d      	ldr	r3, [pc, #372]	@ (800c2fc <PID_Init+0x1ac>)
 800c186:	f04f 0200 	mov.w	r2, #0
 800c18a:	619a      	str	r2, [r3, #24]

	XPID.OUT = 0.0;
 800c18c:	4b5b      	ldr	r3, [pc, #364]	@ (800c2fc <PID_Init+0x1ac>)
 800c18e:	f04f 0200 	mov.w	r2, #0
 800c192:	61da      	str	r2, [r3, #28]

	XPID.err = 0.0;
 800c194:	4b59      	ldr	r3, [pc, #356]	@ (800c2fc <PID_Init+0x1ac>)
 800c196:	2200      	movs	r2, #0
 800c198:	849a      	strh	r2, [r3, #36]	@ 0x24
	XPID.err_err = 0.0;
 800c19a:	4b58      	ldr	r3, [pc, #352]	@ (800c2fc <PID_Init+0x1ac>)
 800c19c:	2200      	movs	r2, #0
 800c19e:	84da      	strh	r2, [r3, #38]	@ 0x26
	XPID.err_old = 0.0;
 800c1a0:	4b56      	ldr	r3, [pc, #344]	@ (800c2fc <PID_Init+0x1ac>)
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	851a      	strh	r2, [r3, #40]	@ 0x28

	//========= =============Y=====================//
	YPID.P = 20;    //0.89                     //0.8 0 0.01
 800c1a6:	4b59      	ldr	r3, [pc, #356]	@ (800c30c <PID_Init+0x1bc>)
 800c1a8:	4a55      	ldr	r2, [pc, #340]	@ (800c300 <PID_Init+0x1b0>)
 800c1aa:	601a      	str	r2, [r3, #0]
	YPID.I = 0;
 800c1ac:	4b57      	ldr	r3, [pc, #348]	@ (800c30c <PID_Init+0x1bc>)
 800c1ae:	f04f 0200 	mov.w	r2, #0
 800c1b2:	609a      	str	r2, [r3, #8]
	YPID.D = 60;    //60
 800c1b4:	4b55      	ldr	r3, [pc, #340]	@ (800c30c <PID_Init+0x1bc>)
 800c1b6:	4a53      	ldr	r2, [pc, #332]	@ (800c304 <PID_Init+0x1b4>)
 800c1b8:	615a      	str	r2, [r3, #20]
	YPID.I_LIMIT = 100.0;
 800c1ba:	4b54      	ldr	r3, [pc, #336]	@ (800c30c <PID_Init+0x1bc>)
 800c1bc:	4a52      	ldr	r2, [pc, #328]	@ (800c308 <PID_Init+0x1b8>)
 800c1be:	611a      	str	r2, [r3, #16]
	YPID.OUT_LIMIT = 100.0;
 800c1c0:	4b52      	ldr	r3, [pc, #328]	@ (800c30c <PID_Init+0x1bc>)
 800c1c2:	4a51      	ldr	r2, [pc, #324]	@ (800c308 <PID_Init+0x1b8>)
 800c1c4:	621a      	str	r2, [r3, #32]

	YPID.P_OUT = 0.0;
 800c1c6:	4b51      	ldr	r3, [pc, #324]	@ (800c30c <PID_Init+0x1bc>)
 800c1c8:	f04f 0200 	mov.w	r2, #0
 800c1cc:	605a      	str	r2, [r3, #4]
	YPID.I_OUT = 0.0;
 800c1ce:	4b4f      	ldr	r3, [pc, #316]	@ (800c30c <PID_Init+0x1bc>)
 800c1d0:	f04f 0200 	mov.w	r2, #0
 800c1d4:	60da      	str	r2, [r3, #12]
	YPID.D_OUT = 0.0;
 800c1d6:	4b4d      	ldr	r3, [pc, #308]	@ (800c30c <PID_Init+0x1bc>)
 800c1d8:	f04f 0200 	mov.w	r2, #0
 800c1dc:	619a      	str	r2, [r3, #24]

	YPID.OUT = 0.0;
 800c1de:	4b4b      	ldr	r3, [pc, #300]	@ (800c30c <PID_Init+0x1bc>)
 800c1e0:	f04f 0200 	mov.w	r2, #0
 800c1e4:	61da      	str	r2, [r3, #28]

	YPID.err = 0.0;
 800c1e6:	4b49      	ldr	r3, [pc, #292]	@ (800c30c <PID_Init+0x1bc>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	849a      	strh	r2, [r3, #36]	@ 0x24
	YPID.err_err = 0.0;
 800c1ec:	4b47      	ldr	r3, [pc, #284]	@ (800c30c <PID_Init+0x1bc>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	84da      	strh	r2, [r3, #38]	@ 0x26
	YPID.err_old = 0.0;
 800c1f2:	4b46      	ldr	r3, [pc, #280]	@ (800c30c <PID_Init+0x1bc>)
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================A=====================//
	APID.P = 0.9;
 800c1f8:	4b45      	ldr	r3, [pc, #276]	@ (800c310 <PID_Init+0x1c0>)
 800c1fa:	4a46      	ldr	r2, [pc, #280]	@ (800c314 <PID_Init+0x1c4>)
 800c1fc:	601a      	str	r2, [r3, #0]
	APID.I = 0.0;
 800c1fe:	4b44      	ldr	r3, [pc, #272]	@ (800c310 <PID_Init+0x1c0>)
 800c200:	f04f 0200 	mov.w	r2, #0
 800c204:	609a      	str	r2, [r3, #8]
	APID.D = 0.0;
 800c206:	4b42      	ldr	r3, [pc, #264]	@ (800c310 <PID_Init+0x1c0>)
 800c208:	f04f 0200 	mov.w	r2, #0
 800c20c:	615a      	str	r2, [r3, #20]

	APID.I_LIMIT = 1000.0;
 800c20e:	4b40      	ldr	r3, [pc, #256]	@ (800c310 <PID_Init+0x1c0>)
 800c210:	4a41      	ldr	r2, [pc, #260]	@ (800c318 <PID_Init+0x1c8>)
 800c212:	611a      	str	r2, [r3, #16]
	APID.OUT_LIMIT = 2350.0;
 800c214:	4b3e      	ldr	r3, [pc, #248]	@ (800c310 <PID_Init+0x1c0>)
 800c216:	4a41      	ldr	r2, [pc, #260]	@ (800c31c <PID_Init+0x1cc>)
 800c218:	621a      	str	r2, [r3, #32]

	APID.P_OUT = 0.0;
 800c21a:	4b3d      	ldr	r3, [pc, #244]	@ (800c310 <PID_Init+0x1c0>)
 800c21c:	f04f 0200 	mov.w	r2, #0
 800c220:	605a      	str	r2, [r3, #4]
	APID.I_OUT = 0.0;
 800c222:	4b3b      	ldr	r3, [pc, #236]	@ (800c310 <PID_Init+0x1c0>)
 800c224:	f04f 0200 	mov.w	r2, #0
 800c228:	60da      	str	r2, [r3, #12]
	APID.D_OUT = 0.0;
 800c22a:	4b39      	ldr	r3, [pc, #228]	@ (800c310 <PID_Init+0x1c0>)
 800c22c:	f04f 0200 	mov.w	r2, #0
 800c230:	619a      	str	r2, [r3, #24]

	APID.OUT = 0.0;
 800c232:	4b37      	ldr	r3, [pc, #220]	@ (800c310 <PID_Init+0x1c0>)
 800c234:	f04f 0200 	mov.w	r2, #0
 800c238:	61da      	str	r2, [r3, #28]

	APID.err = 0.0;
 800c23a:	4b35      	ldr	r3, [pc, #212]	@ (800c310 <PID_Init+0x1c0>)
 800c23c:	2200      	movs	r2, #0
 800c23e:	849a      	strh	r2, [r3, #36]	@ 0x24
	APID.err_err = 0.0;
 800c240:	4b33      	ldr	r3, [pc, #204]	@ (800c310 <PID_Init+0x1c0>)
 800c242:	2200      	movs	r2, #0
 800c244:	84da      	strh	r2, [r3, #38]	@ 0x26
	APID.err_old = 0.0;
 800c246:	4b32      	ldr	r3, [pc, #200]	@ (800c310 <PID_Init+0x1c0>)
 800c248:	2200      	movs	r2, #0
 800c24a:	851a      	strh	r2, [r3, #40]	@ 0x28
	//======================TX=====================//
	TXPID.P = 1;
 800c24c:	4b34      	ldr	r3, [pc, #208]	@ (800c320 <PID_Init+0x1d0>)
 800c24e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c252:	601a      	str	r2, [r3, #0]
	TXPID.I = 0;
 800c254:	4b32      	ldr	r3, [pc, #200]	@ (800c320 <PID_Init+0x1d0>)
 800c256:	f04f 0200 	mov.w	r2, #0
 800c25a:	609a      	str	r2, [r3, #8]
	TXPID.D = 0.3;
 800c25c:	4b30      	ldr	r3, [pc, #192]	@ (800c320 <PID_Init+0x1d0>)
 800c25e:	4a31      	ldr	r2, [pc, #196]	@ (800c324 <PID_Init+0x1d4>)
 800c260:	615a      	str	r2, [r3, #20]

	TXPID.I_LIMIT = 100.0;
 800c262:	4b2f      	ldr	r3, [pc, #188]	@ (800c320 <PID_Init+0x1d0>)
 800c264:	4a28      	ldr	r2, [pc, #160]	@ (800c308 <PID_Init+0x1b8>)
 800c266:	611a      	str	r2, [r3, #16]
	TXPID.OUT_LIMIT = 300.0;
 800c268:	4b2d      	ldr	r3, [pc, #180]	@ (800c320 <PID_Init+0x1d0>)
 800c26a:	4a2f      	ldr	r2, [pc, #188]	@ (800c328 <PID_Init+0x1d8>)
 800c26c:	621a      	str	r2, [r3, #32]

	TXPID.P_OUT = 0.0;
 800c26e:	4b2c      	ldr	r3, [pc, #176]	@ (800c320 <PID_Init+0x1d0>)
 800c270:	f04f 0200 	mov.w	r2, #0
 800c274:	605a      	str	r2, [r3, #4]
	TXPID.I_OUT = 0.0;
 800c276:	4b2a      	ldr	r3, [pc, #168]	@ (800c320 <PID_Init+0x1d0>)
 800c278:	f04f 0200 	mov.w	r2, #0
 800c27c:	60da      	str	r2, [r3, #12]
	TXPID.D_OUT = 0.0;
 800c27e:	4b28      	ldr	r3, [pc, #160]	@ (800c320 <PID_Init+0x1d0>)
 800c280:	f04f 0200 	mov.w	r2, #0
 800c284:	619a      	str	r2, [r3, #24]

	TXPID.OUT = 0.0;
 800c286:	4b26      	ldr	r3, [pc, #152]	@ (800c320 <PID_Init+0x1d0>)
 800c288:	f04f 0200 	mov.w	r2, #0
 800c28c:	61da      	str	r2, [r3, #28]

	TXPID.err = 0.0;
 800c28e:	4b24      	ldr	r3, [pc, #144]	@ (800c320 <PID_Init+0x1d0>)
 800c290:	2200      	movs	r2, #0
 800c292:	849a      	strh	r2, [r3, #36]	@ 0x24
	TXPID.err_err = 0.0;
 800c294:	4b22      	ldr	r3, [pc, #136]	@ (800c320 <PID_Init+0x1d0>)
 800c296:	2200      	movs	r2, #0
 800c298:	84da      	strh	r2, [r3, #38]	@ 0x26
	TXPID.err_old = 0.0;
 800c29a:	4b21      	ldr	r3, [pc, #132]	@ (800c320 <PID_Init+0x1d0>)
 800c29c:	2200      	movs	r2, #0
 800c29e:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================TY=====================//
	TYPID.P = -1;
 800c2a0:	4b22      	ldr	r3, [pc, #136]	@ (800c32c <PID_Init+0x1dc>)
 800c2a2:	4a23      	ldr	r2, [pc, #140]	@ (800c330 <PID_Init+0x1e0>)
 800c2a4:	601a      	str	r2, [r3, #0]
	TYPID.I = -0;      //0.9  0.01   0.3
 800c2a6:	4b21      	ldr	r3, [pc, #132]	@ (800c32c <PID_Init+0x1dc>)
 800c2a8:	f04f 0200 	mov.w	r2, #0
 800c2ac:	609a      	str	r2, [r3, #8]
	//0.9 0 0.2
	TYPID.D = -0.3;
 800c2ae:	4b1f      	ldr	r3, [pc, #124]	@ (800c32c <PID_Init+0x1dc>)
 800c2b0:	4a20      	ldr	r2, [pc, #128]	@ (800c334 <PID_Init+0x1e4>)
 800c2b2:	615a      	str	r2, [r3, #20]

	TYPID.I_LIMIT = 100.0;
 800c2b4:	4b1d      	ldr	r3, [pc, #116]	@ (800c32c <PID_Init+0x1dc>)
 800c2b6:	4a14      	ldr	r2, [pc, #80]	@ (800c308 <PID_Init+0x1b8>)
 800c2b8:	611a      	str	r2, [r3, #16]
	TYPID.OUT_LIMIT = 300.0;
 800c2ba:	4b1c      	ldr	r3, [pc, #112]	@ (800c32c <PID_Init+0x1dc>)
 800c2bc:	4a1a      	ldr	r2, [pc, #104]	@ (800c328 <PID_Init+0x1d8>)
 800c2be:	621a      	str	r2, [r3, #32]

	TYPID.P_OUT = 0.0;
 800c2c0:	4b1a      	ldr	r3, [pc, #104]	@ (800c32c <PID_Init+0x1dc>)
 800c2c2:	f04f 0200 	mov.w	r2, #0
 800c2c6:	605a      	str	r2, [r3, #4]
	TYPID.I_OUT = 0.0;
 800c2c8:	4b18      	ldr	r3, [pc, #96]	@ (800c32c <PID_Init+0x1dc>)
 800c2ca:	f04f 0200 	mov.w	r2, #0
 800c2ce:	60da      	str	r2, [r3, #12]
	TYPID.D_OUT = 0.0;
 800c2d0:	4b16      	ldr	r3, [pc, #88]	@ (800c32c <PID_Init+0x1dc>)
 800c2d2:	f04f 0200 	mov.w	r2, #0
 800c2d6:	619a      	str	r2, [r3, #24]

	TYPID.OUT = 0.0;
 800c2d8:	4b14      	ldr	r3, [pc, #80]	@ (800c32c <PID_Init+0x1dc>)
 800c2da:	f04f 0200 	mov.w	r2, #0
 800c2de:	61da      	str	r2, [r3, #28]

	TYPID.err = 0.0;
 800c2e0:	4b12      	ldr	r3, [pc, #72]	@ (800c32c <PID_Init+0x1dc>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	849a      	strh	r2, [r3, #36]	@ 0x24
	TYPID.err_err = 0.0;
 800c2e6:	4b11      	ldr	r3, [pc, #68]	@ (800c32c <PID_Init+0x1dc>)
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	84da      	strh	r2, [r3, #38]	@ 0x26
	TYPID.err_old = 0.0;
 800c2ec:	4b0f      	ldr	r3, [pc, #60]	@ (800c32c <PID_Init+0x1dc>)
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800c2f2:	bf00      	nop
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr
 800c2fc:	24000b48 	.word	0x24000b48
 800c300:	41a00000 	.word	0x41a00000
 800c304:	42700000 	.word	0x42700000
 800c308:	42c80000 	.word	0x42c80000
 800c30c:	24000b74 	.word	0x24000b74
 800c310:	24000ba0 	.word	0x24000ba0
 800c314:	3f666666 	.word	0x3f666666
 800c318:	447a0000 	.word	0x447a0000
 800c31c:	4512e000 	.word	0x4512e000
 800c320:	24000bcc 	.word	0x24000bcc
 800c324:	3e99999a 	.word	0x3e99999a
 800c328:	43960000 	.word	0x43960000
 800c32c:	24000bf8 	.word	0x24000bf8
 800c330:	bf800000 	.word	0xbf800000
 800c334:	be99999a 	.word	0xbe99999a

0800c338 <Tx_X_Ctrl>:
	PID->err_old = PID->err;

	return PID->OUT;
}
/* TX的X轴调整 */
short Tx_X_Ctrl(_PID *PID, float goal) {
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Tx_NOW - goal;
 800c344:	4b4e      	ldr	r3, [pc, #312]	@ (800c480 <Tx_X_Ctrl+0x148>)
 800c346:	ed93 7a00 	vldr	s14, [r3]
 800c34a:	edd7 7a00 	vldr	s15, [r7]
 800c34e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c356:	ee17 3a90 	vmov	r3, s15
 800c35a:	b21a      	sxth	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c366:	b29a      	uxth	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800c36e:	b29b      	uxth	r3, r3
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	b29b      	uxth	r3, r3
 800c374:	b21a      	sxth	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	ed93 7a00 	vldr	s14, [r3]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c386:	ee07 3a90 	vmov	s15, r3
 800c38a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	ed93 7a03 	vldr	s14, [r3, #12]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	edd3 6a02 	vldr	s13, [r3, #8]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c3aa:	ee07 3a90 	vmov	s15, r3
 800c3ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c3b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	ed93 7a05 	vldr	s14, [r3, #20]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c3cc:	ee07 3a90 	vmov	s15, r3
 800c3d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	ed93 7a03 	vldr	s14, [r3, #12]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	edd3 7a04 	vldr	s15, [r3, #16]
 800c3ea:	eef1 7a67 	vneg.f32	s15, s15
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	edd3 6a04 	vldr	s13, [r3, #16]
 800c3f4:	eeb0 1a66 	vmov.f32	s2, s13
 800c3f8:	eef0 0a67 	vmov.f32	s1, s15
 800c3fc:	eeb0 0a47 	vmov.f32	s0, s14
 800c400:	f7ff fe7a 	bl	800c0f8 <limit>
 800c404:	eef0 7a40 	vmov.f32	s15, s0
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	ed93 7a01 	vldr	s14, [r3, #4]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	edd3 7a03 	vldr	s15, [r3, #12]
 800c41a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	edd3 7a06 	vldr	s15, [r3, #24]
 800c424:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	ed93 7a07 	vldr	s14, [r3, #28]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	edd3 7a08 	vldr	s15, [r3, #32]
 800c43a:	eef1 7a67 	vneg.f32	s15, s15
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	edd3 6a08 	vldr	s13, [r3, #32]
 800c444:	eeb0 1a66 	vmov.f32	s2, s13
 800c448:	eef0 0a67 	vmov.f32	s1, s15
 800c44c:	eeb0 0a47 	vmov.f32	s0, s14
 800c450:	f7ff fe52 	bl	800c0f8 <limit>
 800c454:	eef0 7a40 	vmov.f32	s15, s0
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	edd3 7a07 	vldr	s15, [r3, #28]
 800c46e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c472:	ee17 3a90 	vmov	r3, s15
 800c476:	b21b      	sxth	r3, r3
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	24000454 	.word	0x24000454

0800c484 <Tx_Y_Ctrl>:

/* TX的Y轴调整 */
short Tx_Y_Ctrl(_PID *PID, float goal) {
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Ty_NOW - goal;
 800c490:	4b4e      	ldr	r3, [pc, #312]	@ (800c5cc <Tx_Y_Ctrl+0x148>)
 800c492:	ed93 7a00 	vldr	s14, [r3]
 800c496:	edd7 7a00 	vldr	s15, [r7]
 800c49a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c49e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4a2:	ee17 3a90 	vmov	r3, s15
 800c4a6:	b21a      	sxth	r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c4b2:	b29a      	uxth	r2, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	1ad3      	subs	r3, r2, r3
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	b21a      	sxth	r2, r3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	ed93 7a00 	vldr	s14, [r3]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c4d2:	ee07 3a90 	vmov	s15, r3
 800c4d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	ed93 7a03 	vldr	s14, [r3, #12]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	edd3 6a02 	vldr	s13, [r3, #8]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c4f6:	ee07 3a90 	vmov	s15, r3
 800c4fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c502:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	ed93 7a05 	vldr	s14, [r3, #20]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c518:	ee07 3a90 	vmov	s15, r3
 800c51c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c520:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	ed93 7a03 	vldr	s14, [r3, #12]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	edd3 7a04 	vldr	s15, [r3, #16]
 800c536:	eef1 7a67 	vneg.f32	s15, s15
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	edd3 6a04 	vldr	s13, [r3, #16]
 800c540:	eeb0 1a66 	vmov.f32	s2, s13
 800c544:	eef0 0a67 	vmov.f32	s1, s15
 800c548:	eeb0 0a47 	vmov.f32	s0, s14
 800c54c:	f7ff fdd4 	bl	800c0f8 <limit>
 800c550:	eef0 7a40 	vmov.f32	s15, s0
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	ed93 7a01 	vldr	s14, [r3, #4]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	edd3 7a03 	vldr	s15, [r3, #12]
 800c566:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	edd3 7a06 	vldr	s15, [r3, #24]
 800c570:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	ed93 7a07 	vldr	s14, [r3, #28]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	edd3 7a08 	vldr	s15, [r3, #32]
 800c586:	eef1 7a67 	vneg.f32	s15, s15
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	edd3 6a08 	vldr	s13, [r3, #32]
 800c590:	eeb0 1a66 	vmov.f32	s2, s13
 800c594:	eef0 0a67 	vmov.f32	s1, s15
 800c598:	eeb0 0a47 	vmov.f32	s0, s14
 800c59c:	f7ff fdac 	bl	800c0f8 <limit>
 800c5a0:	eef0 7a40 	vmov.f32	s15, s0
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	edd3 7a07 	vldr	s15, [r3, #28]
 800c5ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c5be:	ee17 3a90 	vmov	r3, s15
 800c5c2:	b21b      	sxth	r3, r3
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	24000458 	.word	0x24000458

0800c5d0 <GetRxFlag>:



int time5_jiancha = 0;

uint8_t GetRxFlag(void) {
 800c5d0:	b480      	push	{r7}
 800c5d2:	af00      	add	r7, sp, #0
	if (RxFlag == 1) {
 800c5d4:	4b07      	ldr	r3, [pc, #28]	@ (800c5f4 <GetRxFlag+0x24>)
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d104      	bne.n	800c5e6 <GetRxFlag+0x16>
		RxFlag = 0;
 800c5dc:	4b05      	ldr	r3, [pc, #20]	@ (800c5f4 <GetRxFlag+0x24>)
 800c5de:	2200      	movs	r2, #0
 800c5e0:	701a      	strb	r2, [r3, #0]
		return 1;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e000      	b.n	800c5e8 <GetRxFlag+0x18>
	}
	return 0;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	2400029d 	.word	0x2400029d

0800c5f8 <Move_Line>:
////曲线加减速时间计算公式：t2 - t1 = (256 - acc) * 50(us)，Vt2 = Vt1 + 1(RPM)；
////（注：acc 为加速度档位，Vt1为 t1 时刻的转速，，Vt2为 t2 时刻的转速）
/////////////////////////////////////////////////////////////////////////////////////////////
//后续根据实物再进行调整
void Move_Line(u16 speed, u8 acc, u32 length)  //初始设定130.5个脉冲是一厘米
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b088      	sub	sp, #32
 800c5fc:	af04      	add	r7, sp, #16
 800c5fe:	4603      	mov	r3, r0
 800c600:	603a      	str	r2, [r7, #0]
 800c602:	80fb      	strh	r3, [r7, #6]
 800c604:	460b      	mov	r3, r1
 800c606:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c608:	88fb      	ldrh	r3, [r7, #6]
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c610:	4613      	mov	r3, r2
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	4413      	add	r3, r2
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c61a:	7979      	ldrb	r1, [r7, #5]
 800c61c:	88fa      	ldrh	r2, [r7, #6]
 800c61e:	2301      	movs	r3, #1
 800c620:	9302      	str	r3, [sp, #8]
 800c622:	2300      	movs	r3, #0
 800c624:	9301      	str	r3, [sp, #4]
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	9300      	str	r3, [sp, #0]
 800c62a:	460b      	mov	r3, r1
 800c62c:	2100      	movs	r1, #0
 800c62e:	2001      	movs	r0, #1
 800c630:	f7ff fcd2 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c634:	7979      	ldrb	r1, [r7, #5]
 800c636:	88fa      	ldrh	r2, [r7, #6]
 800c638:	2301      	movs	r3, #1
 800c63a:	9302      	str	r3, [sp, #8]
 800c63c:	2300      	movs	r3, #0
 800c63e:	9301      	str	r3, [sp, #4]
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	9300      	str	r3, [sp, #0]
 800c644:	460b      	mov	r3, r1
 800c646:	2100      	movs	r1, #0
 800c648:	2002      	movs	r0, #2
 800c64a:	f7ff fcc5 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c64e:	7979      	ldrb	r1, [r7, #5]
 800c650:	88fa      	ldrh	r2, [r7, #6]
 800c652:	2301      	movs	r3, #1
 800c654:	9302      	str	r3, [sp, #8]
 800c656:	2300      	movs	r3, #0
 800c658:	9301      	str	r3, [sp, #4]
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	9300      	str	r3, [sp, #0]
 800c65e:	460b      	mov	r3, r1
 800c660:	2100      	movs	r1, #0
 800c662:	2003      	movs	r0, #3
 800c664:	f7ff fcb8 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c668:	7979      	ldrb	r1, [r7, #5]
 800c66a:	88fa      	ldrh	r2, [r7, #6]
 800c66c:	2301      	movs	r3, #1
 800c66e:	9302      	str	r3, [sp, #8]
 800c670:	2300      	movs	r3, #0
 800c672:	9301      	str	r3, [sp, #4]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	460b      	mov	r3, r1
 800c67a:	2100      	movs	r1, #0
 800c67c:	2004      	movs	r0, #4
 800c67e:	f7ff fcab 	bl	800bfd8 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动
 800c682:	f7ff fd1f 	bl	800c0c4 <Emm_V5_Synchronous_motion>
	Emm_mode = 1;
 800c686:	4b0f      	ldr	r3, [pc, #60]	@ (800c6c4 <Move_Line+0xcc>)
 800c688:	2201      	movs	r2, #1
 800c68a:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c692:	4a0d      	ldr	r2, [pc, #52]	@ (800c6c8 <Move_Line+0xd0>)
 800c694:	fb82 1203 	smull	r1, r2, r2, r3
 800c698:	1092      	asrs	r2, r2, #2
 800c69a:	17db      	asrs	r3, r3, #31
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	4a0b      	ldr	r2, [pc, #44]	@ (800c6cc <Move_Line+0xd4>)
 800c6a0:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0)&& (time5_jiancha != 0) )
 800c6a2:	bf00      	nop
 800c6a4:	f7ff ff94 	bl	800c5d0 <GetRxFlag>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d103      	bne.n	800c6b6 <Move_Line+0xbe>
 800c6ae:	4b07      	ldr	r3, [pc, #28]	@ (800c6cc <Move_Line+0xd4>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1f6      	bne.n	800c6a4 <Move_Line+0xac>
		;
//	RxFlag = 0;·
	HAL_Delay(30);
 800c6b6:	201e      	movs	r0, #30
 800c6b8:	f7f6 fb36 	bl	8002d28 <HAL_Delay>
}
 800c6bc:	bf00      	nop
 800c6be:	3710      	adds	r7, #16
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	2400029c 	.word	0x2400029c
 800c6c8:	66666667 	.word	0x66666667
 800c6cc:	24000c30 	.word	0x24000c30

0800c6d0 <Move_Left>:

bool Move_Left(u16 speed, u8 acc, u32 length) {
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b086      	sub	sp, #24
 800c6d4:	af04      	add	r7, sp, #16
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	603a      	str	r2, [r7, #0]
 800c6da:	80fb      	strh	r3, [r7, #6]
 800c6dc:	460b      	mov	r3, r1
 800c6de:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if(Choke_Flag == true)
 800c6e0:	4b24      	ldr	r3, [pc, #144]	@ (800c774 <Move_Left+0xa4>)
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <Move_Left+0x1c>
		return  false;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	e03f      	b.n	800c76c <Move_Left+0x9c>
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c6ec:	4b22      	ldr	r3, [pc, #136]	@ (800c778 <Move_Left+0xa8>)
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c6f2:	7979      	ldrb	r1, [r7, #5]
 800c6f4:	88fa      	ldrh	r2, [r7, #6]
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	9302      	str	r3, [sp, #8]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	460b      	mov	r3, r1
 800c704:	2101      	movs	r1, #1
 800c706:	2001      	movs	r0, #1
 800c708:	f7ff fc66 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c70c:	7979      	ldrb	r1, [r7, #5]
 800c70e:	88fa      	ldrh	r2, [r7, #6]
 800c710:	2301      	movs	r3, #1
 800c712:	9302      	str	r3, [sp, #8]
 800c714:	2300      	movs	r3, #0
 800c716:	9301      	str	r3, [sp, #4]
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	460b      	mov	r3, r1
 800c71e:	2100      	movs	r1, #0
 800c720:	2002      	movs	r0, #2
 800c722:	f7ff fc59 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c726:	7979      	ldrb	r1, [r7, #5]
 800c728:	88fa      	ldrh	r2, [r7, #6]
 800c72a:	2301      	movs	r3, #1
 800c72c:	9302      	str	r3, [sp, #8]
 800c72e:	2300      	movs	r3, #0
 800c730:	9301      	str	r3, [sp, #4]
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	460b      	mov	r3, r1
 800c738:	2101      	movs	r1, #1
 800c73a:	2003      	movs	r0, #3
 800c73c:	f7ff fc4c 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c740:	7979      	ldrb	r1, [r7, #5]
 800c742:	88fa      	ldrh	r2, [r7, #6]
 800c744:	2301      	movs	r3, #1
 800c746:	9302      	str	r3, [sp, #8]
 800c748:	2300      	movs	r3, #0
 800c74a:	9301      	str	r3, [sp, #4]
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	460b      	mov	r3, r1
 800c752:	2100      	movs	r1, #0
 800c754:	2004      	movs	r0, #4
 800c756:	f7ff fc3f 	bl	800bfd8 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c75a:	f7ff fcb3 	bl	800c0c4 <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c75e:	4807      	ldr	r0, [pc, #28]	@ (800c77c <Move_Left+0xac>)
 800c760:	f7fb fb3e 	bl	8007de0 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c764:	4b06      	ldr	r3, [pc, #24]	@ (800c780 <Move_Left+0xb0>)
 800c766:	2201      	movs	r2, #1
 800c768:	701a      	strb	r2, [r3, #0]
	return true;
 800c76a:	2301      	movs	r3, #1
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3708      	adds	r7, #8
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	24000c2c 	.word	0x24000c2c
 800c778:	24000c2d 	.word	0x24000c2d
 800c77c:	24000574 	.word	0x24000574
 800c780:	24000c2e 	.word	0x24000c2e

0800c784 <Move_Back>:
// 		;
// //	RxFlag = 0;
// 	HAL_Delay(30);
// }

void Move_Back(u16 speed, u8 acc, u32 length) {
 800c784:	b580      	push	{r7, lr}
 800c786:	b088      	sub	sp, #32
 800c788:	af04      	add	r7, sp, #16
 800c78a:	4603      	mov	r3, r0
 800c78c:	603a      	str	r2, [r7, #0]
 800c78e:	80fb      	strh	r3, [r7, #6]
 800c790:	460b      	mov	r3, r1
 800c792:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c794:	88fb      	ldrh	r3, [r7, #6]
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	fbb2 f2f3 	udiv	r2, r2, r3
 800c79c:	4613      	mov	r3, r2
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	4413      	add	r3, r2
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c7a6:	7979      	ldrb	r1, [r7, #5]
 800c7a8:	88fa      	ldrh	r2, [r7, #6]
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	9302      	str	r3, [sp, #8]
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	9301      	str	r3, [sp, #4]
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	9300      	str	r3, [sp, #0]
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	2101      	movs	r1, #1
 800c7ba:	2001      	movs	r0, #1
 800c7bc:	f7ff fc0c 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c7c0:	7979      	ldrb	r1, [r7, #5]
 800c7c2:	88fa      	ldrh	r2, [r7, #6]
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	9302      	str	r3, [sp, #8]
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	9301      	str	r3, [sp, #4]
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	9300      	str	r3, [sp, #0]
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	2101      	movs	r1, #1
 800c7d4:	2002      	movs	r0, #2
 800c7d6:	f7ff fbff 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c7da:	7979      	ldrb	r1, [r7, #5]
 800c7dc:	88fa      	ldrh	r2, [r7, #6]
 800c7de:	2301      	movs	r3, #1
 800c7e0:	9302      	str	r3, [sp, #8]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	9301      	str	r3, [sp, #4]
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	2101      	movs	r1, #1
 800c7ee:	2003      	movs	r0, #3
 800c7f0:	f7ff fbf2 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c7f4:	7979      	ldrb	r1, [r7, #5]
 800c7f6:	88fa      	ldrh	r2, [r7, #6]
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	9302      	str	r3, [sp, #8]
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	9301      	str	r3, [sp, #4]
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	9300      	str	r3, [sp, #0]
 800c804:	460b      	mov	r3, r1
 800c806:	2101      	movs	r1, #1
 800c808:	2004      	movs	r0, #4
 800c80a:	f7ff fbe5 	bl	800bfd8 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800c80e:	f7ff fc59 	bl	800c0c4 <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800c812:	4b0f      	ldr	r3, [pc, #60]	@ (800c850 <Move_Back+0xcc>)
 800c814:	2201      	movs	r2, #1
 800c816:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c81e:	4a0d      	ldr	r2, [pc, #52]	@ (800c854 <Move_Back+0xd0>)
 800c820:	fb82 1203 	smull	r1, r2, r2, r3
 800c824:	1092      	asrs	r2, r2, #2
 800c826:	17db      	asrs	r3, r3, #31
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	4a0b      	ldr	r2, [pc, #44]	@ (800c858 <Move_Back+0xd4>)
 800c82c:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c82e:	bf00      	nop
 800c830:	f7ff fece 	bl	800c5d0 <GetRxFlag>
 800c834:	4603      	mov	r3, r0
 800c836:	2b00      	cmp	r3, #0
 800c838:	d103      	bne.n	800c842 <Move_Back+0xbe>
 800c83a:	4b07      	ldr	r3, [pc, #28]	@ (800c858 <Move_Back+0xd4>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1f6      	bne.n	800c830 <Move_Back+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c842:	201e      	movs	r0, #30
 800c844:	f7f6 fa70 	bl	8002d28 <HAL_Delay>
}
 800c848:	bf00      	nop
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	2400029c 	.word	0x2400029c
 800c854:	66666667 	.word	0x66666667
 800c858:	24000c30 	.word	0x24000c30

0800c85c <Move_Right>:

void Move_Right(u16 speed, u8 acc, u32 length) {
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b088      	sub	sp, #32
 800c860:	af04      	add	r7, sp, #16
 800c862:	4603      	mov	r3, r0
 800c864:	603a      	str	r2, [r7, #0]
 800c866:	80fb      	strh	r3, [r7, #6]
 800c868:	460b      	mov	r3, r1
 800c86a:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c86c:	88fb      	ldrh	r3, [r7, #6]
 800c86e:	683a      	ldr	r2, [r7, #0]
 800c870:	fbb2 f2f3 	udiv	r2, r2, r3
 800c874:	4613      	mov	r3, r2
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	4413      	add	r3, r2
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c87e:	7979      	ldrb	r1, [r7, #5]
 800c880:	88fa      	ldrh	r2, [r7, #6]
 800c882:	2301      	movs	r3, #1
 800c884:	9302      	str	r3, [sp, #8]
 800c886:	2300      	movs	r3, #0
 800c888:	9301      	str	r3, [sp, #4]
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	460b      	mov	r3, r1
 800c890:	2100      	movs	r1, #0
 800c892:	2001      	movs	r0, #1
 800c894:	f7ff fba0 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c898:	7979      	ldrb	r1, [r7, #5]
 800c89a:	88fa      	ldrh	r2, [r7, #6]
 800c89c:	2301      	movs	r3, #1
 800c89e:	9302      	str	r3, [sp, #8]
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	9301      	str	r3, [sp, #4]
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	9300      	str	r3, [sp, #0]
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	2101      	movs	r1, #1
 800c8ac:	2002      	movs	r0, #2
 800c8ae:	f7ff fb93 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c8b2:	7979      	ldrb	r1, [r7, #5]
 800c8b4:	88fa      	ldrh	r2, [r7, #6]
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	9302      	str	r3, [sp, #8]
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	9301      	str	r3, [sp, #4]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	9300      	str	r3, [sp, #0]
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	2100      	movs	r1, #0
 800c8c6:	2003      	movs	r0, #3
 800c8c8:	f7ff fb86 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c8cc:	7979      	ldrb	r1, [r7, #5]
 800c8ce:	88fa      	ldrh	r2, [r7, #6]
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	9302      	str	r3, [sp, #8]
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	9301      	str	r3, [sp, #4]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	460b      	mov	r3, r1
 800c8de:	2101      	movs	r1, #1
 800c8e0:	2004      	movs	r0, #4
 800c8e2:	f7ff fb79 	bl	800bfd8 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion();
 800c8e6:	f7ff fbed 	bl	800c0c4 <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800c8ea:	4b0f      	ldr	r3, [pc, #60]	@ (800c928 <Move_Right+0xcc>)
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c8f6:	4a0d      	ldr	r2, [pc, #52]	@ (800c92c <Move_Right+0xd0>)
 800c8f8:	fb82 1203 	smull	r1, r2, r2, r3
 800c8fc:	1092      	asrs	r2, r2, #2
 800c8fe:	17db      	asrs	r3, r3, #31
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	4a0b      	ldr	r2, [pc, #44]	@ (800c930 <Move_Right+0xd4>)
 800c904:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c906:	bf00      	nop
 800c908:	f7ff fe62 	bl	800c5d0 <GetRxFlag>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d103      	bne.n	800c91a <Move_Right+0xbe>
 800c912:	4b07      	ldr	r3, [pc, #28]	@ (800c930 <Move_Right+0xd4>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1f6      	bne.n	800c908 <Move_Right+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c91a:	201e      	movs	r0, #30
 800c91c:	f7f6 fa04 	bl	8002d28 <HAL_Delay>
}
 800c920:	bf00      	nop
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	2400029c 	.word	0x2400029c
 800c92c:	66666667 	.word	0x66666667
 800c930:	24000c30 	.word	0x24000c30

0800c934 <Move_zhengxuzhuan>:
void Move_zhengxuzhuan(u16 speed, u8 acc, u32 length) {
 800c934:	b580      	push	{r7, lr}
 800c936:	b088      	sub	sp, #32
 800c938:	af04      	add	r7, sp, #16
 800c93a:	4603      	mov	r3, r0
 800c93c:	603a      	str	r2, [r7, #0]
 800c93e:	80fb      	strh	r3, [r7, #6]
 800c940:	460b      	mov	r3, r1
 800c942:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c944:	88fb      	ldrh	r3, [r7, #6]
 800c946:	683a      	ldr	r2, [r7, #0]
 800c948:	fbb2 f2f3 	udiv	r2, r2, r3
 800c94c:	4613      	mov	r3, r2
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	4413      	add	r3, r2
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c956:	7979      	ldrb	r1, [r7, #5]
 800c958:	88fa      	ldrh	r2, [r7, #6]
 800c95a:	2301      	movs	r3, #1
 800c95c:	9302      	str	r3, [sp, #8]
 800c95e:	2300      	movs	r3, #0
 800c960:	9301      	str	r3, [sp, #4]
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	460b      	mov	r3, r1
 800c968:	2100      	movs	r1, #0
 800c96a:	2001      	movs	r0, #1
 800c96c:	f7ff fb34 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c970:	7979      	ldrb	r1, [r7, #5]
 800c972:	88fa      	ldrh	r2, [r7, #6]
 800c974:	2301      	movs	r3, #1
 800c976:	9302      	str	r3, [sp, #8]
 800c978:	2300      	movs	r3, #0
 800c97a:	9301      	str	r3, [sp, #4]
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	9300      	str	r3, [sp, #0]
 800c980:	460b      	mov	r3, r1
 800c982:	2101      	movs	r1, #1
 800c984:	2002      	movs	r0, #2
 800c986:	f7ff fb27 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c98a:	7979      	ldrb	r1, [r7, #5]
 800c98c:	88fa      	ldrh	r2, [r7, #6]
 800c98e:	2301      	movs	r3, #1
 800c990:	9302      	str	r3, [sp, #8]
 800c992:	2300      	movs	r3, #0
 800c994:	9301      	str	r3, [sp, #4]
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	460b      	mov	r3, r1
 800c99c:	2101      	movs	r1, #1
 800c99e:	2003      	movs	r0, #3
 800c9a0:	f7ff fb1a 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c9a4:	7979      	ldrb	r1, [r7, #5]
 800c9a6:	88fa      	ldrh	r2, [r7, #6]
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	9302      	str	r3, [sp, #8]
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	9301      	str	r3, [sp, #4]
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	9300      	str	r3, [sp, #0]
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	2004      	movs	r0, #4
 800c9ba:	f7ff fb0d 	bl	800bfd8 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800c9be:	f7ff fb81 	bl	800c0c4 <Emm_V5_Synchronous_motion>

	Emm_mode = 1;
 800c9c2:	4b0f      	ldr	r3, [pc, #60]	@ (800ca00 <Move_zhengxuzhuan+0xcc>)
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c9ce:	4a0d      	ldr	r2, [pc, #52]	@ (800ca04 <Move_zhengxuzhuan+0xd0>)
 800c9d0:	fb82 1203 	smull	r1, r2, r2, r3
 800c9d4:	1092      	asrs	r2, r2, #2
 800c9d6:	17db      	asrs	r3, r3, #31
 800c9d8:	1ad3      	subs	r3, r2, r3
 800c9da:	4a0b      	ldr	r2, [pc, #44]	@ (800ca08 <Move_zhengxuzhuan+0xd4>)
 800c9dc:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c9de:	bf00      	nop
 800c9e0:	f7ff fdf6 	bl	800c5d0 <GetRxFlag>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d103      	bne.n	800c9f2 <Move_zhengxuzhuan+0xbe>
 800c9ea:	4b07      	ldr	r3, [pc, #28]	@ (800ca08 <Move_zhengxuzhuan+0xd4>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1f6      	bne.n	800c9e0 <Move_zhengxuzhuan+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c9f2:	201e      	movs	r0, #30
 800c9f4:	f7f6 f998 	bl	8002d28 <HAL_Delay>
}
 800c9f8:	bf00      	nop
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	2400029c 	.word	0x2400029c
 800ca04:	66666667 	.word	0x66666667
 800ca08:	24000c30 	.word	0x24000c30

0800ca0c <Move_fanxuzhuan>:

void Move_fanxuzhuan(u16 speed, u8 acc, u32 length) //4340是90度
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b088      	sub	sp, #32
 800ca10:	af04      	add	r7, sp, #16
 800ca12:	4603      	mov	r3, r0
 800ca14:	603a      	str	r2, [r7, #0]
 800ca16:	80fb      	strh	r3, [r7, #6]
 800ca18:	460b      	mov	r3, r1
 800ca1a:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800ca1c:	88fb      	ldrh	r3, [r7, #6]
 800ca1e:	683a      	ldr	r2, [r7, #0]
 800ca20:	fbb2 f2f3 	udiv	r2, r2, r3
 800ca24:	4613      	mov	r3, r2
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4413      	add	r3, r2
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	60fb      	str	r3, [r7, #12]

	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800ca2e:	7979      	ldrb	r1, [r7, #5]
 800ca30:	88fa      	ldrh	r2, [r7, #6]
 800ca32:	2301      	movs	r3, #1
 800ca34:	9302      	str	r3, [sp, #8]
 800ca36:	2300      	movs	r3, #0
 800ca38:	9301      	str	r3, [sp, #4]
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	9300      	str	r3, [sp, #0]
 800ca3e:	460b      	mov	r3, r1
 800ca40:	2101      	movs	r1, #1
 800ca42:	2001      	movs	r0, #1
 800ca44:	f7ff fac8 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800ca48:	7979      	ldrb	r1, [r7, #5]
 800ca4a:	88fa      	ldrh	r2, [r7, #6]
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	9302      	str	r3, [sp, #8]
 800ca50:	2300      	movs	r3, #0
 800ca52:	9301      	str	r3, [sp, #4]
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	460b      	mov	r3, r1
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	2002      	movs	r0, #2
 800ca5e:	f7ff fabb 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800ca62:	7979      	ldrb	r1, [r7, #5]
 800ca64:	88fa      	ldrh	r2, [r7, #6]
 800ca66:	2301      	movs	r3, #1
 800ca68:	9302      	str	r3, [sp, #8]
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	9301      	str	r3, [sp, #4]
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	460b      	mov	r3, r1
 800ca74:	2100      	movs	r1, #0
 800ca76:	2003      	movs	r0, #3
 800ca78:	f7ff faae 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800ca7c:	7979      	ldrb	r1, [r7, #5]
 800ca7e:	88fa      	ldrh	r2, [r7, #6]
 800ca80:	2301      	movs	r3, #1
 800ca82:	9302      	str	r3, [sp, #8]
 800ca84:	2300      	movs	r3, #0
 800ca86:	9301      	str	r3, [sp, #4]
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	2101      	movs	r1, #1
 800ca90:	2004      	movs	r0, #4
 800ca92:	f7ff faa1 	bl	800bfd8 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800ca96:	f7ff fb15 	bl	800c0c4 <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800ca9a:	4b0f      	ldr	r3, [pc, #60]	@ (800cad8 <Move_fanxuzhuan+0xcc>)
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800caa6:	4a0d      	ldr	r2, [pc, #52]	@ (800cadc <Move_fanxuzhuan+0xd0>)
 800caa8:	fb82 1203 	smull	r1, r2, r2, r3
 800caac:	1092      	asrs	r2, r2, #2
 800caae:	17db      	asrs	r3, r3, #31
 800cab0:	1ad3      	subs	r3, r2, r3
 800cab2:	4a0b      	ldr	r2, [pc, #44]	@ (800cae0 <Move_fanxuzhuan+0xd4>)
 800cab4:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800cab6:	bf00      	nop
 800cab8:	f7ff fd8a 	bl	800c5d0 <GetRxFlag>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d103      	bne.n	800caca <Move_fanxuzhuan+0xbe>
 800cac2:	4b07      	ldr	r3, [pc, #28]	@ (800cae0 <Move_fanxuzhuan+0xd4>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1f6      	bne.n	800cab8 <Move_fanxuzhuan+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800caca:	201e      	movs	r0, #30
 800cacc:	f7f6 f92c 	bl	8002d28 <HAL_Delay>
}
 800cad0:	bf00      	nop
 800cad2:	3710      	adds	r7, #16
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	2400029c 	.word	0x2400029c
 800cadc:	66666667 	.word	0x66666667
 800cae0:	24000c30 	.word	0x24000c30

0800cae4 <Drop_Location_jiang>:
////	RxFlag = 0;
//	if(High_Length>=14000)
//		Emm_V5_Stop_Now(5,0);
//	HAL_Delay(30);
//}
void Drop_Location_jiang(u16 speed, u8 acc, u32 length) {
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b088      	sub	sp, #32
 800cae8:	af04      	add	r7, sp, #16
 800caea:	4603      	mov	r3, r0
 800caec:	603a      	str	r2, [r7, #0]
 800caee:	80fb      	strh	r3, [r7, #6]
 800caf0:	460b      	mov	r3, r1
 800caf2:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800caf4:	88fb      	ldrh	r3, [r7, #6]
 800caf6:	683a      	ldr	r2, [r7, #0]
 800caf8:	fbb2 f2f3 	udiv	r2, r2, r3
 800cafc:	4613      	mov	r3, r2
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	4413      	add	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(5, 1, speed, acc, length, 1, 0);
 800cb06:	7979      	ldrb	r1, [r7, #5]
 800cb08:	88fa      	ldrh	r2, [r7, #6]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	9302      	str	r3, [sp, #8]
 800cb0e:	2301      	movs	r3, #1
 800cb10:	9301      	str	r3, [sp, #4]
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	460b      	mov	r3, r1
 800cb18:	2101      	movs	r1, #1
 800cb1a:	2005      	movs	r0, #5
 800cb1c:	f7ff fa5c 	bl	800bfd8 <Emm_V5_Pos_Control>
//	检查到位回读
	Emm_mode = 1;
 800cb20:	4b0f      	ldr	r3, [pc, #60]	@ (800cb60 <Drop_Location_jiang+0x7c>)
 800cb22:	2201      	movs	r2, #1
 800cb24:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800cb2c:	4a0d      	ldr	r2, [pc, #52]	@ (800cb64 <Drop_Location_jiang+0x80>)
 800cb2e:	fb82 1203 	smull	r1, r2, r2, r3
 800cb32:	1092      	asrs	r2, r2, #2
 800cb34:	17db      	asrs	r3, r3, #31
 800cb36:	1ad3      	subs	r3, r2, r3
 800cb38:	4a0b      	ldr	r2, [pc, #44]	@ (800cb68 <Drop_Location_jiang+0x84>)
 800cb3a:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800cb3c:	bf00      	nop
 800cb3e:	f7ff fd47 	bl	800c5d0 <GetRxFlag>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d103      	bne.n	800cb50 <Drop_Location_jiang+0x6c>
 800cb48:	4b07      	ldr	r3, [pc, #28]	@ (800cb68 <Drop_Location_jiang+0x84>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1f6      	bne.n	800cb3e <Drop_Location_jiang+0x5a>
		;
	HAL_Delay(30);
 800cb50:	201e      	movs	r0, #30
 800cb52:	f7f6 f8e9 	bl	8002d28 <HAL_Delay>
}
 800cb56:	bf00      	nop
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	2400029c 	.word	0x2400029c
 800cb64:	66666667 	.word	0x66666667
 800cb68:	24000c30 	.word	0x24000c30

0800cb6c <Drop_Location_Sheng>:
void Drop_Location_Sheng(u16 speed, u8 acc, u32 length) {
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b088      	sub	sp, #32
 800cb70:	af04      	add	r7, sp, #16
 800cb72:	4603      	mov	r3, r0
 800cb74:	603a      	str	r2, [r7, #0]
 800cb76:	80fb      	strh	r3, [r7, #6]
 800cb78:	460b      	mov	r3, r1
 800cb7a:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800cb7c:	88fb      	ldrh	r3, [r7, #6]
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	fbb2 f2f3 	udiv	r2, r2, r3
 800cb84:	4613      	mov	r3, r2
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	4413      	add	r3, r2
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(5, 1, speed, acc, length, 1, 0);
 800cb8e:	7979      	ldrb	r1, [r7, #5]
 800cb90:	88fa      	ldrh	r2, [r7, #6]
 800cb92:	2300      	movs	r3, #0
 800cb94:	9302      	str	r3, [sp, #8]
 800cb96:	2301      	movs	r3, #1
 800cb98:	9301      	str	r3, [sp, #4]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	9300      	str	r3, [sp, #0]
 800cb9e:	460b      	mov	r3, r1
 800cba0:	2101      	movs	r1, #1
 800cba2:	2005      	movs	r0, #5
 800cba4:	f7ff fa18 	bl	800bfd8 <Emm_V5_Pos_Control>
	Emm_mode = 1;
 800cba8:	4b0f      	ldr	r3, [pc, #60]	@ (800cbe8 <Drop_Location_Sheng+0x7c>)
 800cbaa:	2201      	movs	r2, #1
 800cbac:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800cbb4:	4a0d      	ldr	r2, [pc, #52]	@ (800cbec <Drop_Location_Sheng+0x80>)
 800cbb6:	fb82 1203 	smull	r1, r2, r2, r3
 800cbba:	1092      	asrs	r2, r2, #2
 800cbbc:	17db      	asrs	r3, r3, #31
 800cbbe:	1ad3      	subs	r3, r2, r3
 800cbc0:	4a0b      	ldr	r2, [pc, #44]	@ (800cbf0 <Drop_Location_Sheng+0x84>)
 800cbc2:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800cbc4:	bf00      	nop
 800cbc6:	f7ff fd03 	bl	800c5d0 <GetRxFlag>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d103      	bne.n	800cbd8 <Drop_Location_Sheng+0x6c>
 800cbd0:	4b07      	ldr	r3, [pc, #28]	@ (800cbf0 <Drop_Location_Sheng+0x84>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d1f6      	bne.n	800cbc6 <Drop_Location_Sheng+0x5a>
		;

	HAL_Delay(30);
 800cbd8:	201e      	movs	r0, #30
 800cbda:	f7f6 f8a5 	bl	8002d28 <HAL_Delay>
}
 800cbde:	bf00      	nop
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	2400029c 	.word	0x2400029c
 800cbec:	66666667 	.word	0x66666667
 800cbf0:	24000c30 	.word	0x24000c30

0800cbf4 <Move_Stop>:
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动

}

void Move_Stop(void)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	af00      	add	r7, sp, #0
	Emm_V5_Stop_Now(1,true);
 800cbf8:	2101      	movs	r1, #1
 800cbfa:	2001      	movs	r0, #1
 800cbfc:	f7ff fa40 	bl	800c080 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(2,true);
 800cc00:	2101      	movs	r1, #1
 800cc02:	2002      	movs	r0, #2
 800cc04:	f7ff fa3c 	bl	800c080 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(3,true);
 800cc08:	2101      	movs	r1, #1
 800cc0a:	2003      	movs	r0, #3
 800cc0c:	f7ff fa38 	bl	800c080 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(4,true);
 800cc10:	2101      	movs	r1, #1
 800cc12:	2004      	movs	r0, #4
 800cc14:	f7ff fa34 	bl	800c080 <Emm_V5_Stop_Now>
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动
 800cc18:	f7ff fa54 	bl	800c0c4 <Emm_V5_Synchronous_motion>
}
 800cc1c:	bf00      	nop
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <Move_TO_yuanliaoqu>:

	Move_Line(RunSpeed, RunAcc, Lineclk); ////130.5
//	HAL_Delay(yanshi);
}
void Move_TO_yuanliaoqu(float Lineclk) //物料区
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	ed87 0a01 	vstr	s0, [r7, #4]
	Move_Line(RunSpeed, RunAcc, Lineclk);
 800cc2a:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc32:	ee17 2a90 	vmov	r2, s15
 800cc36:	2178      	movs	r1, #120	@ 0x78
 800cc38:	2064      	movs	r0, #100	@ 0x64
 800cc3a:	f7ff fcdd 	bl	800c5f8 <Move_Line>
	HAL_Delay(yanshi);
 800cc3e:	2032      	movs	r0, #50	@ 0x32
 800cc40:	f7f6 f872 	bl	8002d28 <HAL_Delay>
}
 800cc44:	bf00      	nop
 800cc46:	3708      	adds	r7, #8
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <Move_TO_jianzhi1>:

void Move_TO_jianzhi1(float Backclk, float fanzhuanclk) //粗加工区
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	ed87 0a01 	vstr	s0, [r7, #4]
 800cc56:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cc5a:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc62:	ee17 2a90 	vmov	r2, s15
 800cc66:	2178      	movs	r1, #120	@ 0x78
 800cc68:	2064      	movs	r0, #100	@ 0x64
 800cc6a:	f7ff fd8b 	bl	800c784 <Move_Back>
	HAL_Delay(yanshi);
 800cc6e:	2032      	movs	r0, #50	@ 0x32
 800cc70:	f7f6 f85a 	bl	8002d28 <HAL_Delay>
	Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800cc74:	edd7 7a00 	vldr	s15, [r7]
 800cc78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc7c:	ee17 2a90 	vmov	r2, s15
 800cc80:	2178      	movs	r1, #120	@ 0x78
 800cc82:	2064      	movs	r0, #100	@ 0x64
 800cc84:	f7ff fec2 	bl	800ca0c <Move_fanxuzhuan>
	HAL_Delay(yanshi);
 800cc88:	2032      	movs	r0, #50	@ 0x32
 800cc8a:	f7f6 f84d 	bl	8002d28 <HAL_Delay>
}
 800cc8e:	bf00      	nop
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <Move_TO_zancunqu>:

void Move_TO_zancunqu(float Lineclk, float fanzhuanclk) //暂存区
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b082      	sub	sp, #8
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	ed87 0a01 	vstr	s0, [r7, #4]
 800cca0:	edc7 0a00 	vstr	s1, [r7]
	Move_Line(RunSpeed, RunAcc, Lineclk);
 800cca4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccac:	ee17 2a90 	vmov	r2, s15
 800ccb0:	2178      	movs	r1, #120	@ 0x78
 800ccb2:	2064      	movs	r0, #100	@ 0x64
 800ccb4:	f7ff fca0 	bl	800c5f8 <Move_Line>
	HAL_Delay(yanshi);
 800ccb8:	2032      	movs	r0, #50	@ 0x32
 800ccba:	f7f6 f835 	bl	8002d28 <HAL_Delay>
	Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800ccbe:	edd7 7a00 	vldr	s15, [r7]
 800ccc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccc6:	ee17 2a90 	vmov	r2, s15
 800ccca:	2178      	movs	r1, #120	@ 0x78
 800cccc:	2064      	movs	r0, #100	@ 0x64
 800ccce:	f7ff fe9d 	bl	800ca0c <Move_fanxuzhuan>
	HAL_Delay(yanshi);
 800ccd2:	2032      	movs	r0, #50	@ 0x32
 800ccd4:	f7f6 f828 	bl	8002d28 <HAL_Delay>
}
 800ccd8:	bf00      	nop
 800ccda:	3708      	adds	r7, #8
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <Move_TO_jianzhi2>:
void Move_TO_jianzhi2(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	ed87 0a01 	vstr	s0, [r7, #4]
 800ccea:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800ccee:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccf6:	ee17 2a90 	vmov	r2, s15
 800ccfa:	2178      	movs	r1, #120	@ 0x78
 800ccfc:	2064      	movs	r0, #100	@ 0x64
 800ccfe:	f7ff fd41 	bl	800c784 <Move_Back>
	HAL_Delay(yanshi);
 800cd02:	2032      	movs	r0, #50	@ 0x32
 800cd04:	f7f6 f810 	bl	8002d28 <HAL_Delay>
	Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800cd08:	edd7 7a00 	vldr	s15, [r7]
 800cd0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd10:	ee17 2a90 	vmov	r2, s15
 800cd14:	2178      	movs	r1, #120	@ 0x78
 800cd16:	2064      	movs	r0, #100	@ 0x64
 800cd18:	f7ff fe0c 	bl	800c934 <Move_zhengxuzhuan>
	HAL_Delay(yanshi);
 800cd1c:	2032      	movs	r0, #50	@ 0x32
 800cd1e:	f7f6 f803 	bl	8002d28 <HAL_Delay>
}
 800cd22:	bf00      	nop
 800cd24:	3708      	adds	r7, #8
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <Move_TO_cujiagongqu>:
void Move_TO_cujiagongqu(float Backclk) //粗加工区
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b082      	sub	sp, #8
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	ed87 0a01 	vstr	s0, [r7, #4]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cd34:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd3c:	ee17 2a90 	vmov	r2, s15
 800cd40:	2178      	movs	r1, #120	@ 0x78
 800cd42:	2064      	movs	r0, #100	@ 0x64
 800cd44:	f7ff fd1e 	bl	800c784 <Move_Back>
	HAL_Delay(yanshi);
 800cd48:	2032      	movs	r0, #50	@ 0x32
 800cd4a:	f7f5 ffed 	bl	8002d28 <HAL_Delay>
}
 800cd4e:	bf00      	nop
 800cd50:	3708      	adds	r7, #8
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <Move_TO_jianzhi3>:
void Move_TO_jianzhi3(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b082      	sub	sp, #8
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	ed87 0a01 	vstr	s0, [r7, #4]
 800cd60:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cd64:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd6c:	ee17 2a90 	vmov	r2, s15
 800cd70:	2178      	movs	r1, #120	@ 0x78
 800cd72:	2064      	movs	r0, #100	@ 0x64
 800cd74:	f7ff fd06 	bl	800c784 <Move_Back>
	HAL_Delay(yanshi);
 800cd78:	2032      	movs	r0, #50	@ 0x32
 800cd7a:	f7f5 ffd5 	bl	8002d28 <HAL_Delay>
	Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800cd7e:	edd7 7a00 	vldr	s15, [r7]
 800cd82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd86:	ee17 2a90 	vmov	r2, s15
 800cd8a:	2178      	movs	r1, #120	@ 0x78
 800cd8c:	2064      	movs	r0, #100	@ 0x64
 800cd8e:	f7ff fdd1 	bl	800c934 <Move_zhengxuzhuan>
	HAL_Delay(yanshi);
 800cd92:	2032      	movs	r0, #50	@ 0x32
 800cd94:	f7f5 ffc8 	bl	8002d28 <HAL_Delay>
}
 800cd98:	bf00      	nop
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <Move_TO_fanyuanliaoqu>:
void Move_TO_fanyuanliaoqu(float Lineclk) //物料区
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	ed87 0a01 	vstr	s0, [r7, #4]
	Move_Back(RunSpeed, RunAcc, Lineclk);
 800cdaa:	edd7 7a01 	vldr	s15, [r7, #4]
 800cdae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdb2:	ee17 2a90 	vmov	r2, s15
 800cdb6:	2178      	movs	r1, #120	@ 0x78
 800cdb8:	2064      	movs	r0, #100	@ 0x64
 800cdba:	f7ff fce3 	bl	800c784 <Move_Back>
	HAL_Delay(20000);
 800cdbe:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800cdc2:	f7f5 ffb1 	bl	8002d28 <HAL_Delay>
}
 800cdc6:	bf00      	nop
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
	...

0800cdd0 <Move_Action_Nopid_Left_Ctrl>:
	} else {
		Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
		HAL_Delay(yanshi);
	}
}
void Move_Action_Nopid_Left_Ctrl(float x_goal, float y_goal) {
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	ed87 0a01 	vstr	s0, [r7, #4]
 800cdda:	edc7 0a00 	vstr	s1, [r7]
	while (1) {
		if ((X_NOW - x_goal) < 0) {
 800cdde:	4baa      	ldr	r3, [pc, #680]	@ (800d088 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cde0:	ed93 7a00 	vldr	s14, [r3]
 800cde4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cde8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cdf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf4:	d52e      	bpl.n	800ce54 <Move_Action_Nopid_Left_Ctrl+0x84>
			Move_Left(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800cdf6:	4ba4      	ldr	r3, [pc, #656]	@ (800d088 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cdf8:	ed93 7a00 	vldr	s14, [r3]
 800cdfc:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce00:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce0c:	dd07      	ble.n	800ce1e <Move_Action_Nopid_Left_Ctrl+0x4e>
 800ce0e:	4b9e      	ldr	r3, [pc, #632]	@ (800d088 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce10:	ed93 7a00 	vldr	s14, [r3]
 800ce14:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce1c:	e008      	b.n	800ce30 <Move_Action_Nopid_Left_Ctrl+0x60>
 800ce1e:	4b9a      	ldr	r3, [pc, #616]	@ (800d088 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce20:	ed93 7a00 	vldr	s14, [r3]
 800ce24:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce28:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce2c:	eef1 7a67 	vneg.f32	s15, s15
 800ce30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ce34:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800d080 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800ce38:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce3c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ce40:	ee17 2a90 	vmov	r2, s15
 800ce44:	2164      	movs	r1, #100	@ 0x64
 800ce46:	2064      	movs	r0, #100	@ 0x64
 800ce48:	f7ff fc42 	bl	800c6d0 <Move_Left>
			HAL_Delay(yanshi);
 800ce4c:	2032      	movs	r0, #50	@ 0x32
 800ce4e:	f7f5 ff6b 	bl	8002d28 <HAL_Delay>
 800ce52:	e02d      	b.n	800ceb0 <Move_Action_Nopid_Left_Ctrl+0xe0>
		} else {
			Move_Right(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800ce54:	4b8c      	ldr	r3, [pc, #560]	@ (800d088 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce56:	ed93 7a00 	vldr	s14, [r3]
 800ce5a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce6a:	dd07      	ble.n	800ce7c <Move_Action_Nopid_Left_Ctrl+0xac>
 800ce6c:	4b86      	ldr	r3, [pc, #536]	@ (800d088 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce6e:	ed93 7a00 	vldr	s14, [r3]
 800ce72:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce7a:	e008      	b.n	800ce8e <Move_Action_Nopid_Left_Ctrl+0xbe>
 800ce7c:	4b82      	ldr	r3, [pc, #520]	@ (800d088 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce7e:	ed93 7a00 	vldr	s14, [r3]
 800ce82:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce8a:	eef1 7a67 	vneg.f32	s15, s15
 800ce8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ce92:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800d080 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800ce96:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce9a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ce9e:	ee17 2a90 	vmov	r2, s15
 800cea2:	2164      	movs	r1, #100	@ 0x64
 800cea4:	2064      	movs	r0, #100	@ 0x64
 800cea6:	f7ff fcd9 	bl	800c85c <Move_Right>
			HAL_Delay(yanshi);
 800ceaa:	2032      	movs	r0, #50	@ 0x32
 800ceac:	f7f5 ff3c 	bl	8002d28 <HAL_Delay>
		}
		if (Y_NOW - y_goal < 0) {
 800ceb0:	4b76      	ldr	r3, [pc, #472]	@ (800d08c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ceb2:	edd3 7a00 	vldr	s15, [r3]
 800ceb6:	eeb1 7a67 	vneg.f32	s14, s15
 800ceba:	edd7 7a00 	vldr	s15, [r7]
 800cebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceca:	d534      	bpl.n	800cf36 <Move_Action_Nopid_Left_Ctrl+0x166>
			Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800cecc:	4b6f      	ldr	r3, [pc, #444]	@ (800d08c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cece:	edd3 7a00 	vldr	s15, [r3]
 800ced2:	eeb1 7a67 	vneg.f32	s14, s15
 800ced6:	edd7 7a00 	vldr	s15, [r7]
 800ceda:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cee6:	dd09      	ble.n	800cefc <Move_Action_Nopid_Left_Ctrl+0x12c>
 800cee8:	4b68      	ldr	r3, [pc, #416]	@ (800d08c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ceea:	edd3 7a00 	vldr	s15, [r3]
 800ceee:	eeb1 7a67 	vneg.f32	s14, s15
 800cef2:	edd7 7a00 	vldr	s15, [r7]
 800cef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cefa:	e00a      	b.n	800cf12 <Move_Action_Nopid_Left_Ctrl+0x142>
 800cefc:	4b63      	ldr	r3, [pc, #396]	@ (800d08c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cefe:	edd3 7a00 	vldr	s15, [r3]
 800cf02:	eeb1 7a67 	vneg.f32	s14, s15
 800cf06:	edd7 7a00 	vldr	s15, [r7]
 800cf0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf0e:	eef1 7a67 	vneg.f32	s15, s15
 800cf12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cf16:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800d080 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800cf1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf1e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cf22:	ee17 2a90 	vmov	r2, s15
 800cf26:	2164      	movs	r1, #100	@ 0x64
 800cf28:	2064      	movs	r0, #100	@ 0x64
 800cf2a:	f7ff fb65 	bl	800c5f8 <Move_Line>
			HAL_Delay(yanshi);
 800cf2e:	2032      	movs	r0, #50	@ 0x32
 800cf30:	f7f5 fefa 	bl	8002d28 <HAL_Delay>
 800cf34:	e033      	b.n	800cf9e <Move_Action_Nopid_Left_Ctrl+0x1ce>
		} else {
			Move_Back(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800cf36:	4b55      	ldr	r3, [pc, #340]	@ (800d08c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cf38:	edd3 7a00 	vldr	s15, [r3]
 800cf3c:	eeb1 7a67 	vneg.f32	s14, s15
 800cf40:	edd7 7a00 	vldr	s15, [r7]
 800cf44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf50:	dd09      	ble.n	800cf66 <Move_Action_Nopid_Left_Ctrl+0x196>
 800cf52:	4b4e      	ldr	r3, [pc, #312]	@ (800d08c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cf54:	edd3 7a00 	vldr	s15, [r3]
 800cf58:	eeb1 7a67 	vneg.f32	s14, s15
 800cf5c:	edd7 7a00 	vldr	s15, [r7]
 800cf60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf64:	e00a      	b.n	800cf7c <Move_Action_Nopid_Left_Ctrl+0x1ac>
 800cf66:	4b49      	ldr	r3, [pc, #292]	@ (800d08c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cf68:	edd3 7a00 	vldr	s15, [r3]
 800cf6c:	eeb1 7a67 	vneg.f32	s14, s15
 800cf70:	edd7 7a00 	vldr	s15, [r7]
 800cf74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf78:	eef1 7a67 	vneg.f32	s15, s15
 800cf7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cf80:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800d080 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800cf84:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cf8c:	ee17 2a90 	vmov	r2, s15
 800cf90:	2164      	movs	r1, #100	@ 0x64
 800cf92:	2064      	movs	r0, #100	@ 0x64
 800cf94:	f7ff fbf6 	bl	800c784 <Move_Back>
			HAL_Delay(yanshi);
 800cf98:	2032      	movs	r0, #50	@ 0x32
 800cf9a:	f7f5 fec5 	bl	8002d28 <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 2 && ABS(Y_NOW - y_goal) < 2) {
 800cf9e:	4b3a      	ldr	r3, [pc, #232]	@ (800d088 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cfa0:	ed93 7a00 	vldr	s14, [r3]
 800cfa4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cfa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cfb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb4:	dd11      	ble.n	800cfda <Move_Action_Nopid_Left_Ctrl+0x20a>
 800cfb6:	4b34      	ldr	r3, [pc, #208]	@ (800d088 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cfb8:	ed93 7a00 	vldr	s14, [r3]
 800cfbc:	edd7 7a01 	vldr	s15, [r7, #4]
 800cfc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfc4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800cfc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cfcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfd0:	bf4c      	ite	mi
 800cfd2:	2301      	movmi	r3, #1
 800cfd4:	2300      	movpl	r3, #0
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	e010      	b.n	800cffc <Move_Action_Nopid_Left_Ctrl+0x22c>
 800cfda:	4b2b      	ldr	r3, [pc, #172]	@ (800d088 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cfdc:	ed93 7a00 	vldr	s14, [r3]
 800cfe0:	edd7 7a01 	vldr	s15, [r7, #4]
 800cfe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfe8:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800cfec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff4:	bfcc      	ite	gt
 800cff6:	2301      	movgt	r3, #1
 800cff8:	2300      	movle	r3, #0
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	f43f aeee 	beq.w	800cdde <Move_Action_Nopid_Left_Ctrl+0xe>
 800d002:	4b22      	ldr	r3, [pc, #136]	@ (800d08c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800d004:	edd3 7a00 	vldr	s15, [r3]
 800d008:	eeb1 7a67 	vneg.f32	s14, s15
 800d00c:	edd7 7a00 	vldr	s15, [r7]
 800d010:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d014:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d01c:	dd13      	ble.n	800d046 <Move_Action_Nopid_Left_Ctrl+0x276>
 800d01e:	4b1b      	ldr	r3, [pc, #108]	@ (800d08c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800d020:	edd3 7a00 	vldr	s15, [r3]
 800d024:	eeb1 7a67 	vneg.f32	s14, s15
 800d028:	edd7 7a00 	vldr	s15, [r7]
 800d02c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d030:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800d034:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d03c:	bf4c      	ite	mi
 800d03e:	2301      	movmi	r3, #1
 800d040:	2300      	movpl	r3, #0
 800d042:	b2db      	uxtb	r3, r3
 800d044:	e012      	b.n	800d06c <Move_Action_Nopid_Left_Ctrl+0x29c>
 800d046:	4b11      	ldr	r3, [pc, #68]	@ (800d08c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800d048:	edd3 7a00 	vldr	s15, [r3]
 800d04c:	eeb1 7a67 	vneg.f32	s14, s15
 800d050:	edd7 7a00 	vldr	s15, [r7]
 800d054:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d058:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800d05c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d064:	bfcc      	ite	gt
 800d066:	2301      	movgt	r3, #1
 800d068:	2300      	movle	r3, #0
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d100      	bne.n	800d072 <Move_Action_Nopid_Left_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800d070:	e6b5      	b.n	800cdde <Move_Action_Nopid_Left_Ctrl+0xe>
			break; /* 到达目标 */
 800d072:	bf00      	nop
		}
	}
}
 800d074:	bf00      	nop
 800d076:	3708      	adds	r7, #8
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	f3af 8000 	nop.w
 800d080:	9999999a 	.word	0x9999999a
 800d084:	402b9999 	.word	0x402b9999
 800d088:	24000af8 	.word	0x24000af8
 800d08c:	24000afc 	.word	0x24000afc

0800d090 <Move_Action_Nopid_Forward_Ctrl>:
void Move_Action_Nopid_Forward_Ctrl(float x_goal, float y_goal) {
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	ed87 0a01 	vstr	s0, [r7, #4]
 800d09a:	edc7 0a00 	vstr	s1, [r7]
	//ACTION调整
	while (1) {

		if ((X_NOW - x_goal) < 0) {
 800d09e:	4baa      	ldr	r3, [pc, #680]	@ (800d348 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d0a0:	ed93 7a00 	vldr	s14, [r3]
 800d0a4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0b4:	d52e      	bpl.n	800d114 <Move_Action_Nopid_Forward_Ctrl+0x84>
			Move_Line(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d0b6:	4ba4      	ldr	r3, [pc, #656]	@ (800d348 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d0b8:	ed93 7a00 	vldr	s14, [r3]
 800d0bc:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0cc:	dd07      	ble.n	800d0de <Move_Action_Nopid_Forward_Ctrl+0x4e>
 800d0ce:	4b9e      	ldr	r3, [pc, #632]	@ (800d348 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d0d0:	ed93 7a00 	vldr	s14, [r3]
 800d0d4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0dc:	e008      	b.n	800d0f0 <Move_Action_Nopid_Forward_Ctrl+0x60>
 800d0de:	4b9a      	ldr	r3, [pc, #616]	@ (800d348 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d0e0:	ed93 7a00 	vldr	s14, [r3]
 800d0e4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0ec:	eef1 7a67 	vneg.f32	s15, s15
 800d0f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d0f4:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800d340 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d0f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d0fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d100:	ee17 2a90 	vmov	r2, s15
 800d104:	2164      	movs	r1, #100	@ 0x64
 800d106:	2064      	movs	r0, #100	@ 0x64
 800d108:	f7ff fa76 	bl	800c5f8 <Move_Line>
			HAL_Delay(yanshi);
 800d10c:	2032      	movs	r0, #50	@ 0x32
 800d10e:	f7f5 fe0b 	bl	8002d28 <HAL_Delay>
 800d112:	e02d      	b.n	800d170 <Move_Action_Nopid_Forward_Ctrl+0xe0>
		} else {
			Move_Back(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d114:	4b8c      	ldr	r3, [pc, #560]	@ (800d348 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d116:	ed93 7a00 	vldr	s14, [r3]
 800d11a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d11e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d12a:	dd07      	ble.n	800d13c <Move_Action_Nopid_Forward_Ctrl+0xac>
 800d12c:	4b86      	ldr	r3, [pc, #536]	@ (800d348 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d12e:	ed93 7a00 	vldr	s14, [r3]
 800d132:	edd7 7a01 	vldr	s15, [r7, #4]
 800d136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d13a:	e008      	b.n	800d14e <Move_Action_Nopid_Forward_Ctrl+0xbe>
 800d13c:	4b82      	ldr	r3, [pc, #520]	@ (800d348 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d13e:	ed93 7a00 	vldr	s14, [r3]
 800d142:	edd7 7a01 	vldr	s15, [r7, #4]
 800d146:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d14a:	eef1 7a67 	vneg.f32	s15, s15
 800d14e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d152:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800d340 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d156:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d15a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d15e:	ee17 2a90 	vmov	r2, s15
 800d162:	2164      	movs	r1, #100	@ 0x64
 800d164:	2064      	movs	r0, #100	@ 0x64
 800d166:	f7ff fb0d 	bl	800c784 <Move_Back>
			HAL_Delay(yanshi);
 800d16a:	2032      	movs	r0, #50	@ 0x32
 800d16c:	f7f5 fddc 	bl	8002d28 <HAL_Delay>
		}
		if ((Y_NOW - y_goal) < 0) {
 800d170:	4b76      	ldr	r3, [pc, #472]	@ (800d34c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d172:	edd3 7a00 	vldr	s15, [r3]
 800d176:	eeb1 7a67 	vneg.f32	s14, s15
 800d17a:	edd7 7a00 	vldr	s15, [r7]
 800d17e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d182:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d18a:	d534      	bpl.n	800d1f6 <Move_Action_Nopid_Forward_Ctrl+0x166>
			Move_Right(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d18c:	4b6f      	ldr	r3, [pc, #444]	@ (800d34c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d18e:	edd3 7a00 	vldr	s15, [r3]
 800d192:	eeb1 7a67 	vneg.f32	s14, s15
 800d196:	edd7 7a00 	vldr	s15, [r7]
 800d19a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d19e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a6:	dd09      	ble.n	800d1bc <Move_Action_Nopid_Forward_Ctrl+0x12c>
 800d1a8:	4b68      	ldr	r3, [pc, #416]	@ (800d34c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d1aa:	edd3 7a00 	vldr	s15, [r3]
 800d1ae:	eeb1 7a67 	vneg.f32	s14, s15
 800d1b2:	edd7 7a00 	vldr	s15, [r7]
 800d1b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1ba:	e00a      	b.n	800d1d2 <Move_Action_Nopid_Forward_Ctrl+0x142>
 800d1bc:	4b63      	ldr	r3, [pc, #396]	@ (800d34c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d1be:	edd3 7a00 	vldr	s15, [r3]
 800d1c2:	eeb1 7a67 	vneg.f32	s14, s15
 800d1c6:	edd7 7a00 	vldr	s15, [r7]
 800d1ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1ce:	eef1 7a67 	vneg.f32	s15, s15
 800d1d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d1d6:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800d340 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d1da:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d1de:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d1e2:	ee17 2a90 	vmov	r2, s15
 800d1e6:	2164      	movs	r1, #100	@ 0x64
 800d1e8:	2064      	movs	r0, #100	@ 0x64
 800d1ea:	f7ff fb37 	bl	800c85c <Move_Right>
			HAL_Delay(yanshi);
 800d1ee:	2032      	movs	r0, #50	@ 0x32
 800d1f0:	f7f5 fd9a 	bl	8002d28 <HAL_Delay>
 800d1f4:	e033      	b.n	800d25e <Move_Action_Nopid_Forward_Ctrl+0x1ce>
		} else {
			Move_Left(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d1f6:	4b55      	ldr	r3, [pc, #340]	@ (800d34c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d1f8:	edd3 7a00 	vldr	s15, [r3]
 800d1fc:	eeb1 7a67 	vneg.f32	s14, s15
 800d200:	edd7 7a00 	vldr	s15, [r7]
 800d204:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d208:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d210:	dd09      	ble.n	800d226 <Move_Action_Nopid_Forward_Ctrl+0x196>
 800d212:	4b4e      	ldr	r3, [pc, #312]	@ (800d34c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d214:	edd3 7a00 	vldr	s15, [r3]
 800d218:	eeb1 7a67 	vneg.f32	s14, s15
 800d21c:	edd7 7a00 	vldr	s15, [r7]
 800d220:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d224:	e00a      	b.n	800d23c <Move_Action_Nopid_Forward_Ctrl+0x1ac>
 800d226:	4b49      	ldr	r3, [pc, #292]	@ (800d34c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d228:	edd3 7a00 	vldr	s15, [r3]
 800d22c:	eeb1 7a67 	vneg.f32	s14, s15
 800d230:	edd7 7a00 	vldr	s15, [r7]
 800d234:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d238:	eef1 7a67 	vneg.f32	s15, s15
 800d23c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d240:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800d340 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d244:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d248:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d24c:	ee17 2a90 	vmov	r2, s15
 800d250:	2164      	movs	r1, #100	@ 0x64
 800d252:	2064      	movs	r0, #100	@ 0x64
 800d254:	f7ff fa3c 	bl	800c6d0 <Move_Left>
			HAL_Delay(yanshi);
 800d258:	2032      	movs	r0, #50	@ 0x32
 800d25a:	f7f5 fd65 	bl	8002d28 <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 5 && ABS(Y_NOW - y_goal) < 5) {
 800d25e:	4b3a      	ldr	r3, [pc, #232]	@ (800d348 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d260:	ed93 7a00 	vldr	s14, [r3]
 800d264:	edd7 7a01 	vldr	s15, [r7, #4]
 800d268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d26c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d274:	dd11      	ble.n	800d29a <Move_Action_Nopid_Forward_Ctrl+0x20a>
 800d276:	4b34      	ldr	r3, [pc, #208]	@ (800d348 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d278:	ed93 7a00 	vldr	s14, [r3]
 800d27c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d280:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d284:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d290:	bf4c      	ite	mi
 800d292:	2301      	movmi	r3, #1
 800d294:	2300      	movpl	r3, #0
 800d296:	b2db      	uxtb	r3, r3
 800d298:	e010      	b.n	800d2bc <Move_Action_Nopid_Forward_Ctrl+0x22c>
 800d29a:	4b2b      	ldr	r3, [pc, #172]	@ (800d348 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d29c:	ed93 7a00 	vldr	s14, [r3]
 800d2a0:	edd7 7a01 	vldr	s15, [r7, #4]
 800d2a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2a8:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d2ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2b4:	bfcc      	ite	gt
 800d2b6:	2301      	movgt	r3, #1
 800d2b8:	2300      	movle	r3, #0
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f43f aeee 	beq.w	800d09e <Move_Action_Nopid_Forward_Ctrl+0xe>
 800d2c2:	4b22      	ldr	r3, [pc, #136]	@ (800d34c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d2c4:	edd3 7a00 	vldr	s15, [r3]
 800d2c8:	eeb1 7a67 	vneg.f32	s14, s15
 800d2cc:	edd7 7a00 	vldr	s15, [r7]
 800d2d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2dc:	dd13      	ble.n	800d306 <Move_Action_Nopid_Forward_Ctrl+0x276>
 800d2de:	4b1b      	ldr	r3, [pc, #108]	@ (800d34c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d2e0:	edd3 7a00 	vldr	s15, [r3]
 800d2e4:	eeb1 7a67 	vneg.f32	s14, s15
 800d2e8:	edd7 7a00 	vldr	s15, [r7]
 800d2ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2f0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d2f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2fc:	bf4c      	ite	mi
 800d2fe:	2301      	movmi	r3, #1
 800d300:	2300      	movpl	r3, #0
 800d302:	b2db      	uxtb	r3, r3
 800d304:	e012      	b.n	800d32c <Move_Action_Nopid_Forward_Ctrl+0x29c>
 800d306:	4b11      	ldr	r3, [pc, #68]	@ (800d34c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d308:	edd3 7a00 	vldr	s15, [r3]
 800d30c:	eeb1 7a67 	vneg.f32	s14, s15
 800d310:	edd7 7a00 	vldr	s15, [r7]
 800d314:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d318:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d31c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d324:	bfcc      	ite	gt
 800d326:	2301      	movgt	r3, #1
 800d328:	2300      	movle	r3, #0
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d100      	bne.n	800d332 <Move_Action_Nopid_Forward_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800d330:	e6b5      	b.n	800d09e <Move_Action_Nopid_Forward_Ctrl+0xe>
			break; /* 到达目标 */
 800d332:	bf00      	nop
		}
	}
}
 800d334:	bf00      	nop
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	f3af 8000 	nop.w
 800d340:	9999999a 	.word	0x9999999a
 800d344:	402b9999 	.word	0x402b9999
 800d348:	24000af8 	.word	0x24000af8
 800d34c:	24000afc 	.word	0x24000afc

0800d350 <Move_Action_Nopid_Right_Ctrl>:

void Move_Action_Nopid_Right_Ctrl(float x_goal, float y_goal) {
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	ed87 0a01 	vstr	s0, [r7, #4]
 800d35a:	edc7 0a00 	vstr	s1, [r7]
	while (1) {
		if ((X_NOW - x_goal) < 0) {
 800d35e:	4baa      	ldr	r3, [pc, #680]	@ (800d608 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d360:	ed93 7a00 	vldr	s14, [r3]
 800d364:	edd7 7a01 	vldr	s15, [r7, #4]
 800d368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d36c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d374:	d52e      	bpl.n	800d3d4 <Move_Action_Nopid_Right_Ctrl+0x84>

			Move_Right(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d376:	4ba4      	ldr	r3, [pc, #656]	@ (800d608 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d378:	ed93 7a00 	vldr	s14, [r3]
 800d37c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d380:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d384:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d38c:	dd07      	ble.n	800d39e <Move_Action_Nopid_Right_Ctrl+0x4e>
 800d38e:	4b9e      	ldr	r3, [pc, #632]	@ (800d608 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d390:	ed93 7a00 	vldr	s14, [r3]
 800d394:	edd7 7a01 	vldr	s15, [r7, #4]
 800d398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d39c:	e008      	b.n	800d3b0 <Move_Action_Nopid_Right_Ctrl+0x60>
 800d39e:	4b9a      	ldr	r3, [pc, #616]	@ (800d608 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d3a0:	ed93 7a00 	vldr	s14, [r3]
 800d3a4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3ac:	eef1 7a67 	vneg.f32	s15, s15
 800d3b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d3b4:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800d600 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d3b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d3c0:	ee17 2a90 	vmov	r2, s15
 800d3c4:	2164      	movs	r1, #100	@ 0x64
 800d3c6:	2064      	movs	r0, #100	@ 0x64
 800d3c8:	f7ff fa48 	bl	800c85c <Move_Right>
			HAL_Delay(yanshi);
 800d3cc:	2032      	movs	r0, #50	@ 0x32
 800d3ce:	f7f5 fcab 	bl	8002d28 <HAL_Delay>
 800d3d2:	e02d      	b.n	800d430 <Move_Action_Nopid_Right_Ctrl+0xe0>
		} else {
			Move_Left(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d3d4:	4b8c      	ldr	r3, [pc, #560]	@ (800d608 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d3d6:	ed93 7a00 	vldr	s14, [r3]
 800d3da:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ea:	dd07      	ble.n	800d3fc <Move_Action_Nopid_Right_Ctrl+0xac>
 800d3ec:	4b86      	ldr	r3, [pc, #536]	@ (800d608 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d3ee:	ed93 7a00 	vldr	s14, [r3]
 800d3f2:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3fa:	e008      	b.n	800d40e <Move_Action_Nopid_Right_Ctrl+0xbe>
 800d3fc:	4b82      	ldr	r3, [pc, #520]	@ (800d608 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d3fe:	ed93 7a00 	vldr	s14, [r3]
 800d402:	edd7 7a01 	vldr	s15, [r7, #4]
 800d406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d40a:	eef1 7a67 	vneg.f32	s15, s15
 800d40e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d412:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800d600 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d416:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d41a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d41e:	ee17 2a90 	vmov	r2, s15
 800d422:	2164      	movs	r1, #100	@ 0x64
 800d424:	2064      	movs	r0, #100	@ 0x64
 800d426:	f7ff f953 	bl	800c6d0 <Move_Left>
			HAL_Delay(yanshi);
 800d42a:	2032      	movs	r0, #50	@ 0x32
 800d42c:	f7f5 fc7c 	bl	8002d28 <HAL_Delay>
		}
		if ((Y_NOW - y_goal) < 0) {
 800d430:	4b76      	ldr	r3, [pc, #472]	@ (800d60c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d432:	edd3 7a00 	vldr	s15, [r3]
 800d436:	eeb1 7a67 	vneg.f32	s14, s15
 800d43a:	edd7 7a00 	vldr	s15, [r7]
 800d43e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d442:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d44a:	d534      	bpl.n	800d4b6 <Move_Action_Nopid_Right_Ctrl+0x166>
			Move_Back(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d44c:	4b6f      	ldr	r3, [pc, #444]	@ (800d60c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d44e:	edd3 7a00 	vldr	s15, [r3]
 800d452:	eeb1 7a67 	vneg.f32	s14, s15
 800d456:	edd7 7a00 	vldr	s15, [r7]
 800d45a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d45e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d466:	dd09      	ble.n	800d47c <Move_Action_Nopid_Right_Ctrl+0x12c>
 800d468:	4b68      	ldr	r3, [pc, #416]	@ (800d60c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d46a:	edd3 7a00 	vldr	s15, [r3]
 800d46e:	eeb1 7a67 	vneg.f32	s14, s15
 800d472:	edd7 7a00 	vldr	s15, [r7]
 800d476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d47a:	e00a      	b.n	800d492 <Move_Action_Nopid_Right_Ctrl+0x142>
 800d47c:	4b63      	ldr	r3, [pc, #396]	@ (800d60c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d47e:	edd3 7a00 	vldr	s15, [r3]
 800d482:	eeb1 7a67 	vneg.f32	s14, s15
 800d486:	edd7 7a00 	vldr	s15, [r7]
 800d48a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d48e:	eef1 7a67 	vneg.f32	s15, s15
 800d492:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d496:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800d600 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d49a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d49e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d4a2:	ee17 2a90 	vmov	r2, s15
 800d4a6:	2164      	movs	r1, #100	@ 0x64
 800d4a8:	2064      	movs	r0, #100	@ 0x64
 800d4aa:	f7ff f96b 	bl	800c784 <Move_Back>
			HAL_Delay(yanshi);
 800d4ae:	2032      	movs	r0, #50	@ 0x32
 800d4b0:	f7f5 fc3a 	bl	8002d28 <HAL_Delay>
 800d4b4:	e033      	b.n	800d51e <Move_Action_Nopid_Right_Ctrl+0x1ce>
		} else {
			Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d4b6:	4b55      	ldr	r3, [pc, #340]	@ (800d60c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d4b8:	edd3 7a00 	vldr	s15, [r3]
 800d4bc:	eeb1 7a67 	vneg.f32	s14, s15
 800d4c0:	edd7 7a00 	vldr	s15, [r7]
 800d4c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d0:	dd09      	ble.n	800d4e6 <Move_Action_Nopid_Right_Ctrl+0x196>
 800d4d2:	4b4e      	ldr	r3, [pc, #312]	@ (800d60c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d4d4:	edd3 7a00 	vldr	s15, [r3]
 800d4d8:	eeb1 7a67 	vneg.f32	s14, s15
 800d4dc:	edd7 7a00 	vldr	s15, [r7]
 800d4e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4e4:	e00a      	b.n	800d4fc <Move_Action_Nopid_Right_Ctrl+0x1ac>
 800d4e6:	4b49      	ldr	r3, [pc, #292]	@ (800d60c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d4e8:	edd3 7a00 	vldr	s15, [r3]
 800d4ec:	eeb1 7a67 	vneg.f32	s14, s15
 800d4f0:	edd7 7a00 	vldr	s15, [r7]
 800d4f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4f8:	eef1 7a67 	vneg.f32	s15, s15
 800d4fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d500:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800d600 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d504:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d508:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d50c:	ee17 2a90 	vmov	r2, s15
 800d510:	2164      	movs	r1, #100	@ 0x64
 800d512:	2064      	movs	r0, #100	@ 0x64
 800d514:	f7ff f870 	bl	800c5f8 <Move_Line>
			HAL_Delay(yanshi);
 800d518:	2032      	movs	r0, #50	@ 0x32
 800d51a:	f7f5 fc05 	bl	8002d28 <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 5 && ABS(Y_NOW - y_goal) < 5) {
 800d51e:	4b3a      	ldr	r3, [pc, #232]	@ (800d608 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d520:	ed93 7a00 	vldr	s14, [r3]
 800d524:	edd7 7a01 	vldr	s15, [r7, #4]
 800d528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d52c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d534:	dd11      	ble.n	800d55a <Move_Action_Nopid_Right_Ctrl+0x20a>
 800d536:	4b34      	ldr	r3, [pc, #208]	@ (800d608 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d538:	ed93 7a00 	vldr	s14, [r3]
 800d53c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d540:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d544:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d550:	bf4c      	ite	mi
 800d552:	2301      	movmi	r3, #1
 800d554:	2300      	movpl	r3, #0
 800d556:	b2db      	uxtb	r3, r3
 800d558:	e010      	b.n	800d57c <Move_Action_Nopid_Right_Ctrl+0x22c>
 800d55a:	4b2b      	ldr	r3, [pc, #172]	@ (800d608 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d55c:	ed93 7a00 	vldr	s14, [r3]
 800d560:	edd7 7a01 	vldr	s15, [r7, #4]
 800d564:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d568:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d56c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d574:	bfcc      	ite	gt
 800d576:	2301      	movgt	r3, #1
 800d578:	2300      	movle	r3, #0
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f43f aeee 	beq.w	800d35e <Move_Action_Nopid_Right_Ctrl+0xe>
 800d582:	4b22      	ldr	r3, [pc, #136]	@ (800d60c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d584:	edd3 7a00 	vldr	s15, [r3]
 800d588:	eeb1 7a67 	vneg.f32	s14, s15
 800d58c:	edd7 7a00 	vldr	s15, [r7]
 800d590:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d59c:	dd13      	ble.n	800d5c6 <Move_Action_Nopid_Right_Ctrl+0x276>
 800d59e:	4b1b      	ldr	r3, [pc, #108]	@ (800d60c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d5a0:	edd3 7a00 	vldr	s15, [r3]
 800d5a4:	eeb1 7a67 	vneg.f32	s14, s15
 800d5a8:	edd7 7a00 	vldr	s15, [r7]
 800d5ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5b0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d5b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5bc:	bf4c      	ite	mi
 800d5be:	2301      	movmi	r3, #1
 800d5c0:	2300      	movpl	r3, #0
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	e012      	b.n	800d5ec <Move_Action_Nopid_Right_Ctrl+0x29c>
 800d5c6:	4b11      	ldr	r3, [pc, #68]	@ (800d60c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d5c8:	edd3 7a00 	vldr	s15, [r3]
 800d5cc:	eeb1 7a67 	vneg.f32	s14, s15
 800d5d0:	edd7 7a00 	vldr	s15, [r7]
 800d5d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5d8:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d5dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e4:	bfcc      	ite	gt
 800d5e6:	2301      	movgt	r3, #1
 800d5e8:	2300      	movle	r3, #0
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d100      	bne.n	800d5f2 <Move_Action_Nopid_Right_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800d5f0:	e6b5      	b.n	800d35e <Move_Action_Nopid_Right_Ctrl+0xe>
			break; /* 到达目标 */
 800d5f2:	bf00      	nop
		}
	}
}
 800d5f4:	bf00      	nop
 800d5f6:	3708      	adds	r7, #8
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	f3af 8000 	nop.w
 800d600:	9999999a 	.word	0x9999999a
 800d604:	402b9999 	.word	0x402b9999
 800d608:	24000af8 	.word	0x24000af8
 800d60c:	24000afc 	.word	0x24000afc

0800d610 <Move_Tx_Pid_Ctrl>:

/* Tx姿态调整 */
uint16_t time_tx=0;
void Move_Tx_Pid_Ctrl(float TX_X_Goal,float TX_Y_Goal) {
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	ed87 0a01 	vstr	s0, [r7, #4]
 800d61a:	edc7 0a00 	vstr	s1, [r7]

	while (1) {
	if (TX_Y_out >= 0) {
 800d61e:	4b72      	ldr	r3, [pc, #456]	@ (800d7e8 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d620:	edd3 7a00 	vldr	s15, [r3]
 800d624:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d62c:	db12      	blt.n	800d654 <Move_Tx_Pid_Ctrl+0x44>
			Move_Right(80, 80, TX_Y_out * 5);
 800d62e:	4b6e      	ldr	r3, [pc, #440]	@ (800d7e8 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d630:	edd3 7a00 	vldr	s15, [r3]
 800d634:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d63c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d640:	ee17 2a90 	vmov	r2, s15
 800d644:	2150      	movs	r1, #80	@ 0x50
 800d646:	2050      	movs	r0, #80	@ 0x50
 800d648:	f7ff f908 	bl	800c85c <Move_Right>
			HAL_Delay(5);
 800d64c:	2005      	movs	r0, #5
 800d64e:	f7f5 fb6b 	bl	8002d28 <HAL_Delay>
 800d652:	e013      	b.n	800d67c <Move_Tx_Pid_Ctrl+0x6c>
		} else {
			Move_Left(80, 80, -TX_Y_out * 5);
 800d654:	4b64      	ldr	r3, [pc, #400]	@ (800d7e8 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d656:	edd3 7a00 	vldr	s15, [r3]
 800d65a:	eef1 7a67 	vneg.f32	s15, s15
 800d65e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d662:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d66a:	ee17 2a90 	vmov	r2, s15
 800d66e:	2150      	movs	r1, #80	@ 0x50
 800d670:	2050      	movs	r0, #80	@ 0x50
 800d672:	f7ff f82d 	bl	800c6d0 <Move_Left>
			HAL_Delay(5);
 800d676:	2005      	movs	r0, #5
 800d678:	f7f5 fb56 	bl	8002d28 <HAL_Delay>
		}

		if (TX_X_out >= 0) {
 800d67c:	4b5b      	ldr	r3, [pc, #364]	@ (800d7ec <Move_Tx_Pid_Ctrl+0x1dc>)
 800d67e:	edd3 7a00 	vldr	s15, [r3]
 800d682:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d68a:	db12      	blt.n	800d6b2 <Move_Tx_Pid_Ctrl+0xa2>
			Move_Back(80, 80, TX_X_out * 5);
 800d68c:	4b57      	ldr	r3, [pc, #348]	@ (800d7ec <Move_Tx_Pid_Ctrl+0x1dc>)
 800d68e:	edd3 7a00 	vldr	s15, [r3]
 800d692:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d696:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d69a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d69e:	ee17 2a90 	vmov	r2, s15
 800d6a2:	2150      	movs	r1, #80	@ 0x50
 800d6a4:	2050      	movs	r0, #80	@ 0x50
 800d6a6:	f7ff f86d 	bl	800c784 <Move_Back>
			HAL_Delay(5);
 800d6aa:	2005      	movs	r0, #5
 800d6ac:	f7f5 fb3c 	bl	8002d28 <HAL_Delay>
 800d6b0:	e013      	b.n	800d6da <Move_Tx_Pid_Ctrl+0xca>
		} else {
			Move_Line(80, 80, -TX_X_out * 5);
 800d6b2:	4b4e      	ldr	r3, [pc, #312]	@ (800d7ec <Move_Tx_Pid_Ctrl+0x1dc>)
 800d6b4:	edd3 7a00 	vldr	s15, [r3]
 800d6b8:	eef1 7a67 	vneg.f32	s15, s15
 800d6bc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d6c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6c8:	ee17 2a90 	vmov	r2, s15
 800d6cc:	2150      	movs	r1, #80	@ 0x50
 800d6ce:	2050      	movs	r0, #80	@ 0x50
 800d6d0:	f7fe ff92 	bl	800c5f8 <Move_Line>
			HAL_Delay(5);
 800d6d4:	2005      	movs	r0, #5
 800d6d6:	f7f5 fb27 	bl	8002d28 <HAL_Delay>
		}

		if (ABS(Tx_NOW - 370.5) < 5 && ABS(Ty_NOW -230.5) < 5) {
 800d6da:	4b45      	ldr	r3, [pc, #276]	@ (800d7f0 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d6dc:	edd3 7a00 	vldr	s15, [r3]
 800d6e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d6e4:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800d7d8 <Move_Tx_Pid_Ctrl+0x1c8>
 800d6e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d6ec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6f4:	dd13      	ble.n	800d71e <Move_Tx_Pid_Ctrl+0x10e>
 800d6f6:	4b3e      	ldr	r3, [pc, #248]	@ (800d7f0 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d6f8:	edd3 7a00 	vldr	s15, [r3]
 800d6fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d700:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 800d7d8 <Move_Tx_Pid_Ctrl+0x1c8>
 800d704:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d708:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 800d70c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d714:	bf4c      	ite	mi
 800d716:	2301      	movmi	r3, #1
 800d718:	2300      	movpl	r3, #0
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	e012      	b.n	800d744 <Move_Tx_Pid_Ctrl+0x134>
 800d71e:	4b34      	ldr	r3, [pc, #208]	@ (800d7f0 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d720:	edd3 7a00 	vldr	s15, [r3]
 800d724:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d728:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 800d7d8 <Move_Tx_Pid_Ctrl+0x1c8>
 800d72c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d730:	eeb9 6b04 	vmov.f64	d6, #148	@ 0xc0a00000 -5.0
 800d734:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d73c:	bfcc      	ite	gt
 800d73e:	2301      	movgt	r3, #1
 800d740:	2300      	movle	r3, #0
 800d742:	b2db      	uxtb	r3, r3
 800d744:	2b00      	cmp	r3, #0
 800d746:	d036      	beq.n	800d7b6 <Move_Tx_Pid_Ctrl+0x1a6>
 800d748:	4b2a      	ldr	r3, [pc, #168]	@ (800d7f4 <Move_Tx_Pid_Ctrl+0x1e4>)
 800d74a:	edd3 7a00 	vldr	s15, [r3]
 800d74e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d752:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 800d7e0 <Move_Tx_Pid_Ctrl+0x1d0>
 800d756:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d75a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d762:	dd13      	ble.n	800d78c <Move_Tx_Pid_Ctrl+0x17c>
 800d764:	4b23      	ldr	r3, [pc, #140]	@ (800d7f4 <Move_Tx_Pid_Ctrl+0x1e4>)
 800d766:	edd3 7a00 	vldr	s15, [r3]
 800d76a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d76e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 800d7e0 <Move_Tx_Pid_Ctrl+0x1d0>
 800d772:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d776:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 800d77a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d782:	bf4c      	ite	mi
 800d784:	2301      	movmi	r3, #1
 800d786:	2300      	movpl	r3, #0
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	e012      	b.n	800d7b2 <Move_Tx_Pid_Ctrl+0x1a2>
 800d78c:	4b19      	ldr	r3, [pc, #100]	@ (800d7f4 <Move_Tx_Pid_Ctrl+0x1e4>)
 800d78e:	edd3 7a00 	vldr	s15, [r3]
 800d792:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d796:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 800d7e0 <Move_Tx_Pid_Ctrl+0x1d0>
 800d79a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d79e:	eeb9 6b04 	vmov.f64	d6, #148	@ 0xc0a00000 -5.0
 800d7a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7aa:	bfcc      	ite	gt
 800d7ac:	2301      	movgt	r3, #1
 800d7ae:	2300      	movle	r3, #0
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d108      	bne.n	800d7c8 <Move_Tx_Pid_Ctrl+0x1b8>
			break;
		}
		if(time_tx>=250)
 800d7b6:	4b10      	ldr	r3, [pc, #64]	@ (800d7f8 <Move_Tx_Pid_Ctrl+0x1e8>)
 800d7b8:	881b      	ldrh	r3, [r3, #0]
 800d7ba:	2bf9      	cmp	r3, #249	@ 0xf9
 800d7bc:	f67f af2f 	bls.w	800d61e <Move_Tx_Pid_Ctrl+0xe>
		{time_tx=0;
 800d7c0:	4b0d      	ldr	r3, [pc, #52]	@ (800d7f8 <Move_Tx_Pid_Ctrl+0x1e8>)
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	801a      	strh	r2, [r3, #0]
			break;
 800d7c6:	e000      	b.n	800d7ca <Move_Tx_Pid_Ctrl+0x1ba>
			break;
 800d7c8:	bf00      	nop
		}
	}

}
 800d7ca:	bf00      	nop
 800d7cc:	3708      	adds	r7, #8
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	f3af 8000 	nop.w
 800d7d8:	00000000 	.word	0x00000000
 800d7dc:	40772800 	.word	0x40772800
 800d7e0:	00000000 	.word	0x00000000
 800d7e4:	406cd000 	.word	0x406cd000
 800d7e8:	24000c28 	.word	0x24000c28
 800d7ec:	24000c24 	.word	0x24000c24
 800d7f0:	24000454 	.word	0x24000454
 800d7f4:	24000458 	.word	0x24000458
 800d7f8:	24000c34 	.word	0x24000c34

0800d7fc <Host2SCS>:
}

//1个16位数拆分为2个8位数
//DataL为低位，DataH为高位
void Host2SCS(uint8_t *DataL, uint8_t *DataH, int Data)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b085      	sub	sp, #20
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	607a      	str	r2, [r7, #4]
	if (End)
 800d808:	4b0e      	ldr	r3, [pc, #56]	@ (800d844 <Host2SCS+0x48>)
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d009      	beq.n	800d824 <Host2SCS+0x28>
	{
		*DataL = (Data >> 8);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	121b      	asrs	r3, r3, #8
 800d814:	b2da      	uxtb	r2, r3
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	701a      	strb	r2, [r3, #0]
		*DataH = (Data & 0xff);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	b2da      	uxtb	r2, r3
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	701a      	strb	r2, [r3, #0]
	else
	{
		*DataH = (Data >> 8);
		*DataL = (Data & 0xff);
	}
}
 800d822:	e008      	b.n	800d836 <Host2SCS+0x3a>
		*DataH = (Data >> 8);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	121b      	asrs	r3, r3, #8
 800d828:	b2da      	uxtb	r2, r3
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	701a      	strb	r2, [r3, #0]
		*DataL = (Data & 0xff);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	b2da      	uxtb	r2, r3
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	701a      	strb	r2, [r3, #0]
}
 800d836:	bf00      	nop
 800d838:	3714      	adds	r7, #20
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	24000c36 	.word	0x24000c36

0800d848 <writeBuf>:
	return Data;
}

void writeBuf(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen,
		uint8_t Fun)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b086      	sub	sp, #24
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	603a      	str	r2, [r7, #0]
 800d850:	461a      	mov	r2, r3
 800d852:	4603      	mov	r3, r0
 800d854:	71fb      	strb	r3, [r7, #7]
 800d856:	460b      	mov	r3, r1
 800d858:	71bb      	strb	r3, [r7, #6]
 800d85a:	4613      	mov	r3, r2
 800d85c:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t msgLen = 2;
 800d85e:	2302      	movs	r3, #2
 800d860:	75bb      	strb	r3, [r7, #22]
	uint8_t bBuf[6];
	uint8_t CheckSum = 0;
 800d862:	2300      	movs	r3, #0
 800d864:	73fb      	strb	r3, [r7, #15]
	bBuf[0] = 0xff;
 800d866:	23ff      	movs	r3, #255	@ 0xff
 800d868:	743b      	strb	r3, [r7, #16]
	bBuf[1] = 0xff;
 800d86a:	23ff      	movs	r3, #255	@ 0xff
 800d86c:	747b      	strb	r3, [r7, #17]
	bBuf[2] = ID;
 800d86e:	79fb      	ldrb	r3, [r7, #7]
 800d870:	74bb      	strb	r3, [r7, #18]
	bBuf[4] = Fun;
 800d872:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d876:	753b      	strb	r3, [r7, #20]
	if (nDat)
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d010      	beq.n	800d8a0 <writeBuf+0x58>
	{
		msgLen += nLen + 1;
 800d87e:	797a      	ldrb	r2, [r7, #5]
 800d880:	7dbb      	ldrb	r3, [r7, #22]
 800d882:	4413      	add	r3, r2
 800d884:	b2db      	uxtb	r3, r3
 800d886:	3301      	adds	r3, #1
 800d888:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = msgLen;
 800d88a:	7dbb      	ldrb	r3, [r7, #22]
 800d88c:	74fb      	strb	r3, [r7, #19]
		bBuf[5] = MemAddr;
 800d88e:	79bb      	ldrb	r3, [r7, #6]
 800d890:	757b      	strb	r3, [r7, #21]
		writeSCS(bBuf, 6);
 800d892:	f107 0310 	add.w	r3, r7, #16
 800d896:	2106      	movs	r1, #6
 800d898:	4618      	mov	r0, r3
 800d89a:	f000 f99b 	bl	800dbd4 <writeSCS>
 800d89e:	e007      	b.n	800d8b0 <writeBuf+0x68>

	}
	else
	{
		bBuf[3] = msgLen;
 800d8a0:	7dbb      	ldrb	r3, [r7, #22]
 800d8a2:	74fb      	strb	r3, [r7, #19]
		writeSCS(bBuf, 5);
 800d8a4:	f107 0310 	add.w	r3, r7, #16
 800d8a8:	2105      	movs	r1, #5
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f000 f992 	bl	800dbd4 <writeSCS>
	}
	CheckSum = ID + msgLen + Fun + MemAddr;
 800d8b0:	79fa      	ldrb	r2, [r7, #7]
 800d8b2:	7dbb      	ldrb	r3, [r7, #22]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	b2da      	uxtb	r2, r3
 800d8b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8bc:	4413      	add	r3, r2
 800d8be:	b2da      	uxtb	r2, r3
 800d8c0:	79bb      	ldrb	r3, [r7, #6]
 800d8c2:	4413      	add	r3, r2
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	73fb      	strb	r3, [r7, #15]
	if (nDat)
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d016      	beq.n	800d8fc <writeBuf+0xb4>
	{
		for (i = 0; i < nLen; i++)
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	75fb      	strb	r3, [r7, #23]
 800d8d2:	e00a      	b.n	800d8ea <writeBuf+0xa2>
		{
			CheckSum += nDat[i];
 800d8d4:	7dfb      	ldrb	r3, [r7, #23]
 800d8d6:	683a      	ldr	r2, [r7, #0]
 800d8d8:	4413      	add	r3, r2
 800d8da:	781a      	ldrb	r2, [r3, #0]
 800d8dc:	7bfb      	ldrb	r3, [r7, #15]
 800d8de:	4413      	add	r3, r2
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < nLen; i++)
 800d8e4:	7dfb      	ldrb	r3, [r7, #23]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	75fb      	strb	r3, [r7, #23]
 800d8ea:	7dfa      	ldrb	r2, [r7, #23]
 800d8ec:	797b      	ldrb	r3, [r7, #5]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d3f0      	bcc.n	800d8d4 <writeBuf+0x8c>
		}
		writeSCS(nDat, nLen);
 800d8f2:	797b      	ldrb	r3, [r7, #5]
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	6838      	ldr	r0, [r7, #0]
 800d8f8:	f000 f96c 	bl	800dbd4 <writeSCS>
	}
	CheckSum = ~CheckSum;
 800d8fc:	7bfb      	ldrb	r3, [r7, #15]
 800d8fe:	43db      	mvns	r3, r3
 800d900:	b2db      	uxtb	r3, r3
 800d902:	73fb      	strb	r3, [r7, #15]
	writeSCS(&CheckSum, 1);
 800d904:	f107 030f 	add.w	r3, r7, #15
 800d908:	2101      	movs	r1, #1
 800d90a:	4618      	mov	r0, r3
 800d90c:	f000 f962 	bl	800dbd4 <writeSCS>
}
 800d910:	bf00      	nop
 800d912:	3718      	adds	r7, #24
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <genWrite>:

//普通写指令
//舵机ID，MemAddr内存表地址，写入数据，写入长度
int genWrite(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af02      	add	r7, sp, #8
 800d91e:	603a      	str	r2, [r7, #0]
 800d920:	461a      	mov	r2, r3
 800d922:	4603      	mov	r3, r0
 800d924:	71fb      	strb	r3, [r7, #7]
 800d926:	460b      	mov	r3, r1
 800d928:	71bb      	strb	r3, [r7, #6]
 800d92a:	4613      	mov	r3, r2
 800d92c:	717b      	strb	r3, [r7, #5]
	rFlushSCS();
 800d92e:	f000 f990 	bl	800dc52 <rFlushSCS>
	writeBuf(ID, MemAddr, nDat, nLen, INST_WRITE);
 800d932:	797b      	ldrb	r3, [r7, #5]
 800d934:	79b9      	ldrb	r1, [r7, #6]
 800d936:	79f8      	ldrb	r0, [r7, #7]
 800d938:	2203      	movs	r2, #3
 800d93a:	9200      	str	r2, [sp, #0]
 800d93c:	683a      	ldr	r2, [r7, #0]
 800d93e:	f7ff ff83 	bl	800d848 <writeBuf>
	wFlushSCS();
 800d942:	f000 f98d 	bl	800dc60 <wFlushSCS>
	return Ack(ID);
 800d946:	79fb      	ldrb	r3, [r7, #7]
 800d948:	4618      	mov	r0, r3
 800d94a:	f000 f8b9 	bl	800dac0 <Ack>
 800d94e:	4603      	mov	r3, r0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <Read>:
}

//读指令
//舵机ID，MemAddr内存表地址，返回数据nData，数据长度nLen
int Read(uint8_t ID, uint8_t MemAddr, uint8_t *nData, uint8_t nLen)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b088      	sub	sp, #32
 800d95c:	af02      	add	r7, sp, #8
 800d95e:	603a      	str	r2, [r7, #0]
 800d960:	461a      	mov	r2, r3
 800d962:	4603      	mov	r3, r0
 800d964:	71fb      	strb	r3, [r7, #7]
 800d966:	460b      	mov	r3, r1
 800d968:	71bb      	strb	r3, [r7, #6]
 800d96a:	4613      	mov	r3, r2
 800d96c:	717b      	strb	r3, [r7, #5]
	int Size;
	uint8_t bBuf[4];
	uint8_t calSum;
	uint8_t i;
	rFlushSCS();
 800d96e:	f000 f970 	bl	800dc52 <rFlushSCS>
	writeBuf(ID, MemAddr, &nLen, 1, INST_READ);
 800d972:	1d7a      	adds	r2, r7, #5
 800d974:	79b9      	ldrb	r1, [r7, #6]
 800d976:	79f8      	ldrb	r0, [r7, #7]
 800d978:	2302      	movs	r3, #2
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	2301      	movs	r3, #1
 800d97e:	f7ff ff63 	bl	800d848 <writeBuf>
	wFlushSCS();
 800d982:	f000 f96d 	bl	800dc60 <wFlushSCS>
	if (!checkHead())
 800d986:	f000 f872 	bl	800da6e <checkHead>
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <Read+0x3c>
	{
		return 0;
 800d990:	2300      	movs	r3, #0
 800d992:	e04b      	b.n	800da2c <Read+0xd4>
	}
	Error = 0;
 800d994:	4b27      	ldr	r3, [pc, #156]	@ (800da34 <Read+0xdc>)
 800d996:	2200      	movs	r2, #0
 800d998:	701a      	strb	r2, [r3, #0]
	if (readSCS(bBuf, 3) != 3)
 800d99a:	f107 030c 	add.w	r3, r7, #12
 800d99e:	2103      	movs	r1, #3
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f000 f903 	bl	800dbac <readSCS>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b03      	cmp	r3, #3
 800d9aa:	d001      	beq.n	800d9b0 <Read+0x58>
	{
		return 0;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	e03d      	b.n	800da2c <Read+0xd4>
	}
	Size = readSCS(nData, nLen);
 800d9b0:	797b      	ldrb	r3, [r7, #5]
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	6838      	ldr	r0, [r7, #0]
 800d9b6:	f000 f8f9 	bl	800dbac <readSCS>
 800d9ba:	6138      	str	r0, [r7, #16]
	if (Size != nLen)
 800d9bc:	797b      	ldrb	r3, [r7, #5]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d001      	beq.n	800d9ca <Read+0x72>
	{
		return 0;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	e030      	b.n	800da2c <Read+0xd4>
	}
	if (readSCS(bBuf + 3, 1) != 1)
 800d9ca:	f107 030c 	add.w	r3, r7, #12
 800d9ce:	3303      	adds	r3, #3
 800d9d0:	2101      	movs	r1, #1
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f000 f8ea 	bl	800dbac <readSCS>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d001      	beq.n	800d9e2 <Read+0x8a>
	{
		return 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	e024      	b.n	800da2c <Read+0xd4>
	}
	calSum = bBuf[0] + bBuf[1] + bBuf[2];
 800d9e2:	7b3a      	ldrb	r2, [r7, #12]
 800d9e4:	7b7b      	ldrb	r3, [r7, #13]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	7bbb      	ldrb	r3, [r7, #14]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < Size; i++)
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	75bb      	strb	r3, [r7, #22]
 800d9f4:	e009      	b.n	800da0a <Read+0xb2>
	{
		calSum += nData[i];
 800d9f6:	7dbb      	ldrb	r3, [r7, #22]
 800d9f8:	683a      	ldr	r2, [r7, #0]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	781a      	ldrb	r2, [r3, #0]
 800d9fe:	7dfb      	ldrb	r3, [r7, #23]
 800da00:	4413      	add	r3, r2
 800da02:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < Size; i++)
 800da04:	7dbb      	ldrb	r3, [r7, #22]
 800da06:	3301      	adds	r3, #1
 800da08:	75bb      	strb	r3, [r7, #22]
 800da0a:	7dbb      	ldrb	r3, [r7, #22]
 800da0c:	693a      	ldr	r2, [r7, #16]
 800da0e:	429a      	cmp	r2, r3
 800da10:	dcf1      	bgt.n	800d9f6 <Read+0x9e>
	}
	calSum = ~calSum;
 800da12:	7dfb      	ldrb	r3, [r7, #23]
 800da14:	43db      	mvns	r3, r3
 800da16:	75fb      	strb	r3, [r7, #23]
	if (calSum != bBuf[3])
 800da18:	7bfb      	ldrb	r3, [r7, #15]
 800da1a:	7dfa      	ldrb	r2, [r7, #23]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d001      	beq.n	800da24 <Read+0xcc>
	{
		return 0;
 800da20:	2300      	movs	r3, #0
 800da22:	e003      	b.n	800da2c <Read+0xd4>
	}
	Error = bBuf[2];
 800da24:	7bba      	ldrb	r2, [r7, #14]
 800da26:	4b03      	ldr	r3, [pc, #12]	@ (800da34 <Read+0xdc>)
 800da28:	701a      	strb	r2, [r3, #0]
	return Size;
 800da2a:	693b      	ldr	r3, [r7, #16]
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3718      	adds	r7, #24
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	24000c37 	.word	0x24000c37

0800da38 <readByte>:

//读1字节，超时返回-1
int readByte(uint8_t ID, uint8_t MemAddr)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	4603      	mov	r3, r0
 800da40:	460a      	mov	r2, r1
 800da42:	71fb      	strb	r3, [r7, #7]
 800da44:	4613      	mov	r3, r2
 800da46:	71bb      	strb	r3, [r7, #6]
	uint8_t bDat;
	int Size = Read(ID, MemAddr, &bDat, 1);
 800da48:	f107 020b 	add.w	r2, r7, #11
 800da4c:	79b9      	ldrb	r1, [r7, #6]
 800da4e:	79f8      	ldrb	r0, [r7, #7]
 800da50:	2301      	movs	r3, #1
 800da52:	f7ff ff81 	bl	800d958 <Read>
 800da56:	60f8      	str	r0, [r7, #12]
	if (Size != 1)
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d002      	beq.n	800da64 <readByte+0x2c>
	{
		return -1;
 800da5e:	f04f 33ff 	mov.w	r3, #4294967295
 800da62:	e000      	b.n	800da66 <readByte+0x2e>
	}
	else
	{
		return bDat;
 800da64:	7afb      	ldrb	r3, [r7, #11]
	}
}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <checkHead>:
	Error = bBuf[2];
	return bBuf[0];
}

int checkHead(void)
{
 800da6e:	b580      	push	{r7, lr}
 800da70:	b082      	sub	sp, #8
 800da72:	af00      	add	r7, sp, #0
	uint8_t bDat;
	uint8_t bBuf[2] =
 800da74:	2300      	movs	r3, #0
 800da76:	80bb      	strh	r3, [r7, #4]
	{ 0, 0 };
	uint8_t Cnt = 0;
 800da78:	2300      	movs	r3, #0
 800da7a:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		if (!readSCS(&bDat, 1))
 800da7c:	1dbb      	adds	r3, r7, #6
 800da7e:	2101      	movs	r1, #1
 800da80:	4618      	mov	r0, r3
 800da82:	f000 f893 	bl	800dbac <readSCS>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d101      	bne.n	800da90 <checkHead+0x22>
		{
			return 0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	e013      	b.n	800dab8 <checkHead+0x4a>
		}
		bBuf[1] = bBuf[0];
 800da90:	793b      	ldrb	r3, [r7, #4]
 800da92:	717b      	strb	r3, [r7, #5]
		bBuf[0] = bDat;
 800da94:	79bb      	ldrb	r3, [r7, #6]
 800da96:	713b      	strb	r3, [r7, #4]
		if (bBuf[0] == 0xff && bBuf[1] == 0xff)
 800da98:	793b      	ldrb	r3, [r7, #4]
 800da9a:	2bff      	cmp	r3, #255	@ 0xff
 800da9c:	d102      	bne.n	800daa4 <checkHead+0x36>
 800da9e:	797b      	ldrb	r3, [r7, #5]
 800daa0:	2bff      	cmp	r3, #255	@ 0xff
 800daa2:	d007      	beq.n	800dab4 <checkHead+0x46>
		{
			break;
		}
		Cnt++;
 800daa4:	79fb      	ldrb	r3, [r7, #7]
 800daa6:	3301      	adds	r3, #1
 800daa8:	71fb      	strb	r3, [r7, #7]
		if (Cnt > 10)
 800daaa:	79fb      	ldrb	r3, [r7, #7]
 800daac:	2b0a      	cmp	r3, #10
 800daae:	d9e5      	bls.n	800da7c <checkHead+0xe>
		{
			return 0;
 800dab0:	2300      	movs	r3, #0
 800dab2:	e001      	b.n	800dab8 <checkHead+0x4a>
			break;
 800dab4:	bf00      	nop
		}
	}
	return 1;
 800dab6:	2301      	movs	r3, #1
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3708      	adds	r7, #8
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <Ack>:

//指令应答
int Ack(uint8_t ID)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	4603      	mov	r3, r0
 800dac8:	71fb      	strb	r3, [r7, #7]
	uint8_t bBuf[4];
	uint8_t calSum;
	Error = 0;
 800daca:	4b1f      	ldr	r3, [pc, #124]	@ (800db48 <Ack+0x88>)
 800dacc:	2200      	movs	r2, #0
 800dace:	701a      	strb	r2, [r3, #0]
	if (ID != 0xfe && Level)
 800dad0:	79fb      	ldrb	r3, [r7, #7]
 800dad2:	2bfe      	cmp	r3, #254	@ 0xfe
 800dad4:	d032      	beq.n	800db3c <Ack+0x7c>
 800dad6:	4b1d      	ldr	r3, [pc, #116]	@ (800db4c <Ack+0x8c>)
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d02e      	beq.n	800db3c <Ack+0x7c>
	{
		if (!checkHead())
 800dade:	f7ff ffc6 	bl	800da6e <checkHead>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d101      	bne.n	800daec <Ack+0x2c>
		{
			return 0;
 800dae8:	2300      	movs	r3, #0
 800daea:	e028      	b.n	800db3e <Ack+0x7e>
		}
		if (readSCS(bBuf, 4) != 4)
 800daec:	f107 0308 	add.w	r3, r7, #8
 800daf0:	2104      	movs	r1, #4
 800daf2:	4618      	mov	r0, r3
 800daf4:	f000 f85a 	bl	800dbac <readSCS>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b04      	cmp	r3, #4
 800dafc:	d001      	beq.n	800db02 <Ack+0x42>
		{
			return 0;
 800dafe:	2300      	movs	r3, #0
 800db00:	e01d      	b.n	800db3e <Ack+0x7e>
		}
		if (bBuf[0] != ID)
 800db02:	7a3b      	ldrb	r3, [r7, #8]
 800db04:	79fa      	ldrb	r2, [r7, #7]
 800db06:	429a      	cmp	r2, r3
 800db08:	d001      	beq.n	800db0e <Ack+0x4e>
		{
			return 0;
 800db0a:	2300      	movs	r3, #0
 800db0c:	e017      	b.n	800db3e <Ack+0x7e>
		}
		if (bBuf[1] != 2)
 800db0e:	7a7b      	ldrb	r3, [r7, #9]
 800db10:	2b02      	cmp	r3, #2
 800db12:	d001      	beq.n	800db18 <Ack+0x58>
		{
			return 0;
 800db14:	2300      	movs	r3, #0
 800db16:	e012      	b.n	800db3e <Ack+0x7e>
		}
		calSum = ~(bBuf[0] + bBuf[1] + bBuf[2]);
 800db18:	7a3a      	ldrb	r2, [r7, #8]
 800db1a:	7a7b      	ldrb	r3, [r7, #9]
 800db1c:	4413      	add	r3, r2
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	7abb      	ldrb	r3, [r7, #10]
 800db22:	4413      	add	r3, r2
 800db24:	b2db      	uxtb	r3, r3
 800db26:	43db      	mvns	r3, r3
 800db28:	73fb      	strb	r3, [r7, #15]
		if (calSum != bBuf[3])
 800db2a:	7afb      	ldrb	r3, [r7, #11]
 800db2c:	7bfa      	ldrb	r2, [r7, #15]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d001      	beq.n	800db36 <Ack+0x76>
		{
			return 0;
 800db32:	2300      	movs	r3, #0
 800db34:	e003      	b.n	800db3e <Ack+0x7e>
		}
		Error = bBuf[2];
 800db36:	7aba      	ldrb	r2, [r7, #10]
 800db38:	4b03      	ldr	r3, [pc, #12]	@ (800db48 <Ack+0x88>)
 800db3a:	701a      	strb	r2, [r3, #0]
	}
	return 1;
 800db3c:	2301      	movs	r3, #1
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3710      	adds	r7, #16
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	24000c37 	.word	0x24000c37
 800db4c:	24000046 	.word	0x24000046

0800db50 <Uart_Send>:
#include "stm32h7xx_hal.h"
#include "SCS_Uart.h"
#include "usart.h"

void Uart_Send(uint8_t *buf, uint16_t len)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	460b      	mov	r3, r1
 800db5a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart6, buf, len, HAL_MAX_DELAY);
 800db5c:	887a      	ldrh	r2, [r7, #2]
 800db5e:	f04f 33ff 	mov.w	r3, #4294967295
 800db62:	6879      	ldr	r1, [r7, #4]
 800db64:	4803      	ldr	r0, [pc, #12]	@ (800db74 <Uart_Send+0x24>)
 800db66:	f7fa fe71 	bl	800884c <HAL_UART_Transmit>
}
 800db6a:	bf00      	nop
 800db6c:	3708      	adds	r7, #8
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	240009cc 	.word	0x240009cc

0800db78 <Uart_Read>:

int16_t Uart_Read(uint8_t *buf, uint16_t len, uint32_t timeout)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	460b      	mov	r3, r1
 800db82:	607a      	str	r2, [r7, #4]
 800db84:	817b      	strh	r3, [r7, #10]
	if (HAL_UART_Receive(&huart6, buf, len, timeout) == HAL_OK)
 800db86:	897a      	ldrh	r2, [r7, #10]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	68f9      	ldr	r1, [r7, #12]
 800db8c:	4806      	ldr	r0, [pc, #24]	@ (800dba8 <Uart_Read+0x30>)
 800db8e:	f7fa feeb 	bl	8008968 <HAL_UART_Receive>
 800db92:	4603      	mov	r3, r0
 800db94:	2b00      	cmp	r3, #0
 800db96:	d102      	bne.n	800db9e <Uart_Read+0x26>
	{
		return len;
 800db98:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800db9c:	e000      	b.n	800dba0 <Uart_Read+0x28>
	}
	else
	{
		return 0;
 800db9e:	2300      	movs	r3, #0
	}
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3710      	adds	r7, #16
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	240009cc 	.word	0x240009cc

0800dbac <readSCS>:
uint8_t wBuf[128];
uint8_t wLen = 0;

//UART 接收数据接口
int readSCS(unsigned char *nDat, int nLen)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
	return Uart_Read(nDat, nLen, IOTimeOut);
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	b29b      	uxth	r3, r3
 800dbba:	4a05      	ldr	r2, [pc, #20]	@ (800dbd0 <readSCS+0x24>)
 800dbbc:	6812      	ldr	r2, [r2, #0]
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f7ff ffd9 	bl	800db78 <Uart_Read>
 800dbc6:	4603      	mov	r3, r0
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3708      	adds	r7, #8
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	24000048 	.word	0x24000048

0800dbd4 <writeSCS>:

//UART 发送数据接口
int writeSCS(unsigned char *nDat, int nLen)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
	while (nLen--)
 800dbde:	e014      	b.n	800dc0a <writeSCS+0x36>
	{
		if (wLen < sizeof(wBuf))
 800dbe0:	4b10      	ldr	r3, [pc, #64]	@ (800dc24 <writeSCS+0x50>)
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	b25b      	sxtb	r3, r3
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	db0f      	blt.n	800dc0a <writeSCS+0x36>
		{
			wBuf[wLen] = *nDat;
 800dbea:	4b0e      	ldr	r3, [pc, #56]	@ (800dc24 <writeSCS+0x50>)
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	461a      	mov	r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	7819      	ldrb	r1, [r3, #0]
 800dbf4:	4b0c      	ldr	r3, [pc, #48]	@ (800dc28 <writeSCS+0x54>)
 800dbf6:	5499      	strb	r1, [r3, r2]
			wLen++;
 800dbf8:	4b0a      	ldr	r3, [pc, #40]	@ (800dc24 <writeSCS+0x50>)
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	4b08      	ldr	r3, [pc, #32]	@ (800dc24 <writeSCS+0x50>)
 800dc02:	701a      	strb	r2, [r3, #0]
			nDat++;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	3301      	adds	r3, #1
 800dc08:	607b      	str	r3, [r7, #4]
	while (nLen--)
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	1e5a      	subs	r2, r3, #1
 800dc0e:	603a      	str	r2, [r7, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d1e5      	bne.n	800dbe0 <writeSCS+0xc>
		}
	}
	return wLen;
 800dc14:	4b03      	ldr	r3, [pc, #12]	@ (800dc24 <writeSCS+0x50>)
 800dc16:	781b      	ldrb	r3, [r3, #0]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr
 800dc24:	24000cb8 	.word	0x24000cb8
 800dc28:	24000c38 	.word	0x24000c38

0800dc2c <nopDelay>:
	return wLen;
}

//等待舵机总线切换(约8us)
void nopDelay(void)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
	uint16_t i = 500;
 800dc32:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800dc36:	80fb      	strh	r3, [r7, #6]
	while (i--)
 800dc38:	bf00      	nop
 800dc3a:	88fb      	ldrh	r3, [r7, #6]
 800dc3c:	1e5a      	subs	r2, r3, #1
 800dc3e:	80fa      	strh	r2, [r7, #6]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d1fa      	bne.n	800dc3a <nopDelay+0xe>
		;
}
 800dc44:	bf00      	nop
 800dc46:	bf00      	nop
 800dc48:	370c      	adds	r7, #12
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr

0800dc52 <rFlushSCS>:

//接收缓冲区刷新
void rFlushSCS()
{
 800dc52:	b580      	push	{r7, lr}
 800dc54:	af00      	add	r7, sp, #0
	nopDelay();
 800dc56:	f7ff ffe9 	bl	800dc2c <nopDelay>
}
 800dc5a:	bf00      	nop
 800dc5c:	bd80      	pop	{r7, pc}
	...

0800dc60 <wFlushSCS>:

//发送缓冲区刷新
void wFlushSCS()
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	af00      	add	r7, sp, #0
	if (wLen)
 800dc64:	4b07      	ldr	r3, [pc, #28]	@ (800dc84 <wFlushSCS+0x24>)
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d008      	beq.n	800dc7e <wFlushSCS+0x1e>
	{
		Uart_Send(wBuf, wLen);
 800dc6c:	4b05      	ldr	r3, [pc, #20]	@ (800dc84 <wFlushSCS+0x24>)
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	4619      	mov	r1, r3
 800dc72:	4805      	ldr	r0, [pc, #20]	@ (800dc88 <wFlushSCS+0x28>)
 800dc74:	f7ff ff6c 	bl	800db50 <Uart_Send>
		wLen = 0;
 800dc78:	4b02      	ldr	r3, [pc, #8]	@ (800dc84 <wFlushSCS+0x24>)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	701a      	strb	r2, [r3, #0]
	}
}
 800dc7e:	bf00      	nop
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	24000cb8 	.word	0x24000cb8
 800dc88:	24000c38 	.word	0x24000c38

0800dc8c <WritePosEx>:
{
	return Err;
}

int WritePosEx(uint8_t ID, int16_t Position, uint16_t Speed, uint8_t ACC)
{
 800dc8c:	b590      	push	{r4, r7, lr}
 800dc8e:	b085      	sub	sp, #20
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	4604      	mov	r4, r0
 800dc94:	4608      	mov	r0, r1
 800dc96:	4611      	mov	r1, r2
 800dc98:	461a      	mov	r2, r3
 800dc9a:	4623      	mov	r3, r4
 800dc9c:	71fb      	strb	r3, [r7, #7]
 800dc9e:	4603      	mov	r3, r0
 800dca0:	80bb      	strh	r3, [r7, #4]
 800dca2:	460b      	mov	r3, r1
 800dca4:	807b      	strh	r3, [r7, #2]
 800dca6:	4613      	mov	r3, r2
 800dca8:	71bb      	strb	r3, [r7, #6]
	uint8_t bBuf[7];
	if (Position < 0)
 800dcaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	da09      	bge.n	800dcc6 <WritePosEx+0x3a>
	{
		Position = -Position;
 800dcb2:	88bb      	ldrh	r3, [r7, #4]
 800dcb4:	425b      	negs	r3, r3
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	80bb      	strh	r3, [r7, #4]
		Position |= (1 << 15);
 800dcba:	88bb      	ldrh	r3, [r7, #4]
 800dcbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcc4:	80bb      	strh	r3, [r7, #4]
	}

	bBuf[0] = ACC;
 800dcc6:	79bb      	ldrb	r3, [r7, #6]
 800dcc8:	723b      	strb	r3, [r7, #8]
	Host2SCS(bBuf + 1, bBuf + 2, Position);
 800dcca:	f107 0308 	add.w	r3, r7, #8
 800dcce:	3301      	adds	r3, #1
 800dcd0:	f107 0108 	add.w	r1, r7, #8
 800dcd4:	3102      	adds	r1, #2
 800dcd6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7ff fd8e 	bl	800d7fc <Host2SCS>
	Host2SCS(bBuf + 3, bBuf + 4, 0);
 800dce0:	f107 0308 	add.w	r3, r7, #8
 800dce4:	3303      	adds	r3, #3
 800dce6:	f107 0108 	add.w	r1, r7, #8
 800dcea:	3104      	adds	r1, #4
 800dcec:	2200      	movs	r2, #0
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7ff fd84 	bl	800d7fc <Host2SCS>
	Host2SCS(bBuf + 5, bBuf + 6, Speed);
 800dcf4:	f107 0308 	add.w	r3, r7, #8
 800dcf8:	3305      	adds	r3, #5
 800dcfa:	f107 0108 	add.w	r1, r7, #8
 800dcfe:	3106      	adds	r1, #6
 800dd00:	887a      	ldrh	r2, [r7, #2]
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7ff fd7a 	bl	800d7fc <Host2SCS>

	return genWrite(ID, SMS_STS_ACC, bBuf, 7);
 800dd08:	f107 0208 	add.w	r2, r7, #8
 800dd0c:	79f8      	ldrb	r0, [r7, #7]
 800dd0e:	2307      	movs	r3, #7
 800dd10:	2129      	movs	r1, #41	@ 0x29
 800dd12:	f7ff fe01 	bl	800d918 <genWrite>
 800dd16:	4603      	mov	r3, r0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3714      	adds	r7, #20
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd90      	pop	{r4, r7, pc}

0800dd20 <ReadMove>:
	}
	return Temper;
}

int ReadMove(int ID)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
	int Move = -1;
 800dd28:	f04f 33ff 	mov.w	r3, #4294967295
 800dd2c:	60fb      	str	r3, [r7, #12]
	if (ID == -1)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd34:	d103      	bne.n	800dd3e <ReadMove+0x1e>
	{
		Move = Mem[SMS_STS_MOVING - SMS_STS_PRESENT_POSITION_L];
 800dd36:	4b0d      	ldr	r3, [pc, #52]	@ (800dd6c <ReadMove+0x4c>)
 800dd38:	7a9b      	ldrb	r3, [r3, #10]
 800dd3a:	60fb      	str	r3, [r7, #12]
 800dd3c:	e010      	b.n	800dd60 <ReadMove+0x40>
	}
	else
	{
		Err = 0;
 800dd3e:	4b0c      	ldr	r3, [pc, #48]	@ (800dd70 <ReadMove+0x50>)
 800dd40:	2200      	movs	r2, #0
 800dd42:	601a      	str	r2, [r3, #0]
		Move = readByte(ID, SMS_STS_MOVING);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	2142      	movs	r1, #66	@ 0x42
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7ff fe74 	bl	800da38 <readByte>
 800dd50:	60f8      	str	r0, [r7, #12]
		if (Move == -1)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd58:	d102      	bne.n	800dd60 <ReadMove+0x40>
		{
			Err = 1;
 800dd5a:	4b05      	ldr	r3, [pc, #20]	@ (800dd70 <ReadMove+0x50>)
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	601a      	str	r2, [r3, #0]
		}
	}
	return Move;
 800dd60:	68fb      	ldr	r3, [r7, #12]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3710      	adds	r7, #16
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	24000cbc 	.word	0x24000cbc
 800dd70:	24000ccc 	.word	0x24000ccc

0800dd74 <Action_Show>:
extern float x;
extern float y;
extern int colour;
extern char Point_Flag;

void Action_Show(void) {
 800dd74:	b580      	push	{r7, lr}
 800dd76:	af00      	add	r7, sp, #0
	sprintf(Z_str, "%.2f", zangle);
 800dd78:	4b30      	ldr	r3, [pc, #192]	@ (800de3c <Action_Show+0xc8>)
 800dd7a:	edd3 7a00 	vldr	s15, [r3]
 800dd7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dd82:	ec53 2b17 	vmov	r2, r3, d7
 800dd86:	492e      	ldr	r1, [pc, #184]	@ (800de40 <Action_Show+0xcc>)
 800dd88:	482e      	ldr	r0, [pc, #184]	@ (800de44 <Action_Show+0xd0>)
 800dd8a:	f002 f8b7 	bl	800fefc <siprintf>
	sprintf(X_srt, "%.2f", pos_x);
 800dd8e:	4b2e      	ldr	r3, [pc, #184]	@ (800de48 <Action_Show+0xd4>)
 800dd90:	edd3 7a00 	vldr	s15, [r3]
 800dd94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dd98:	ec53 2b17 	vmov	r2, r3, d7
 800dd9c:	4928      	ldr	r1, [pc, #160]	@ (800de40 <Action_Show+0xcc>)
 800dd9e:	482b      	ldr	r0, [pc, #172]	@ (800de4c <Action_Show+0xd8>)
 800dda0:	f002 f8ac 	bl	800fefc <siprintf>
	sprintf(Y_srt, "%.2f", pos_y);
 800dda4:	4b2a      	ldr	r3, [pc, #168]	@ (800de50 <Action_Show+0xdc>)
 800dda6:	edd3 7a00 	vldr	s15, [r3]
 800ddaa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ddae:	ec53 2b17 	vmov	r2, r3, d7
 800ddb2:	4923      	ldr	r1, [pc, #140]	@ (800de40 <Action_Show+0xcc>)
 800ddb4:	4827      	ldr	r0, [pc, #156]	@ (800de54 <Action_Show+0xe0>)
 800ddb6:	f002 f8a1 	bl	800fefc <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) "Z_Angle.txt=\"",
 800ddba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ddbe:	220d      	movs	r2, #13
 800ddc0:	4925      	ldr	r1, [pc, #148]	@ (800de58 <Action_Show+0xe4>)
 800ddc2:	4826      	ldr	r0, [pc, #152]	@ (800de5c <Action_Show+0xe8>)
 800ddc4:	f7fa fd42 	bl	800884c <HAL_UART_Transmit>
			sizeof("Z_Angle.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Z_str, sizeof(X_srt) - 1, 0xffff);
 800ddc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ddcc:	2213      	movs	r2, #19
 800ddce:	491d      	ldr	r1, [pc, #116]	@ (800de44 <Action_Show+0xd0>)
 800ddd0:	4822      	ldr	r0, [pc, #136]	@ (800de5c <Action_Show+0xe8>)
 800ddd2:	f7fa fd3b 	bl	800884c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800ddd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ddda:	2204      	movs	r2, #4
 800dddc:	4920      	ldr	r1, [pc, #128]	@ (800de60 <Action_Show+0xec>)
 800ddde:	481f      	ldr	r0, [pc, #124]	@ (800de5c <Action_Show+0xe8>)
 800dde0:	f7fa fd34 	bl	800884c <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "X_Point.txt=\"",
 800dde4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dde8:	220d      	movs	r2, #13
 800ddea:	491e      	ldr	r1, [pc, #120]	@ (800de64 <Action_Show+0xf0>)
 800ddec:	481b      	ldr	r0, [pc, #108]	@ (800de5c <Action_Show+0xe8>)
 800ddee:	f7fa fd2d 	bl	800884c <HAL_UART_Transmit>
			sizeof("X_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) X_srt, sizeof(X_srt) - 1, 0xffff);
 800ddf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ddf6:	2213      	movs	r2, #19
 800ddf8:	4914      	ldr	r1, [pc, #80]	@ (800de4c <Action_Show+0xd8>)
 800ddfa:	4818      	ldr	r0, [pc, #96]	@ (800de5c <Action_Show+0xe8>)
 800ddfc:	f7fa fd26 	bl	800884c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800de00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de04:	2204      	movs	r2, #4
 800de06:	4916      	ldr	r1, [pc, #88]	@ (800de60 <Action_Show+0xec>)
 800de08:	4814      	ldr	r0, [pc, #80]	@ (800de5c <Action_Show+0xe8>)
 800de0a:	f7fa fd1f 	bl	800884c <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "Y_Point.txt=\"",
 800de0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de12:	220d      	movs	r2, #13
 800de14:	4914      	ldr	r1, [pc, #80]	@ (800de68 <Action_Show+0xf4>)
 800de16:	4811      	ldr	r0, [pc, #68]	@ (800de5c <Action_Show+0xe8>)
 800de18:	f7fa fd18 	bl	800884c <HAL_UART_Transmit>
			sizeof("Y_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_srt, sizeof(X_srt) - 1, 0xffff);
 800de1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de20:	2213      	movs	r2, #19
 800de22:	490c      	ldr	r1, [pc, #48]	@ (800de54 <Action_Show+0xe0>)
 800de24:	480d      	ldr	r0, [pc, #52]	@ (800de5c <Action_Show+0xe8>)
 800de26:	f7fa fd11 	bl	800884c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800de2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de2e:	2204      	movs	r2, #4
 800de30:	490b      	ldr	r1, [pc, #44]	@ (800de60 <Action_Show+0xec>)
 800de32:	480a      	ldr	r0, [pc, #40]	@ (800de5c <Action_Show+0xe8>)
 800de34:	f7fa fd0a 	bl	800884c <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);
}
 800de38:	bf00      	nop
 800de3a:	bd80      	pop	{r7, pc}
 800de3c:	24000b00 	.word	0x24000b00
 800de40:	08013210 	.word	0x08013210
 800de44:	24000cd0 	.word	0x24000cd0
 800de48:	24000af8 	.word	0x24000af8
 800de4c:	24000cd8 	.word	0x24000cd8
 800de50:	24000afc 	.word	0x24000afc
 800de54:	24000cec 	.word	0x24000cec
 800de58:	08013218 	.word	0x08013218
 800de5c:	240005c0 	.word	0x240005c0
 800de60:	08013228 	.word	0x08013228
 800de64:	08013230 	.word	0x08013230
 800de68:	08013240 	.word	0x08013240

0800de6c <QR_Show>:
extern int QR_data[6];
void QR_Show(void) {
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++) {
 800de72:	2300      	movs	r3, #0
 800de74:	607b      	str	r3, [r7, #4]
 800de76:	e00d      	b.n	800de94 <QR_Show+0x28>
		sprintf(&Y_pid[i], "%d", QR_data[i]);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4a14      	ldr	r2, [pc, #80]	@ (800decc <QR_Show+0x60>)
 800de7c:	1898      	adds	r0, r3, r2
 800de7e:	4a14      	ldr	r2, [pc, #80]	@ (800ded0 <QR_Show+0x64>)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de86:	461a      	mov	r2, r3
 800de88:	4912      	ldr	r1, [pc, #72]	@ (800ded4 <QR_Show+0x68>)
 800de8a:	f002 f837 	bl	800fefc <siprintf>
	for (int i = 0; i < 6; i++) {
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	3301      	adds	r3, #1
 800de92:	607b      	str	r3, [r7, #4]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b05      	cmp	r3, #5
 800de98:	ddee      	ble.n	800de78 <QR_Show+0xc>
	}
	HAL_UART_Transmit(&huart4, (uint8_t*) "QR.txt=\"", sizeof("QR.txt=\"") - 1,
 800de9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de9e:	2208      	movs	r2, #8
 800dea0:	490d      	ldr	r1, [pc, #52]	@ (800ded8 <QR_Show+0x6c>)
 800dea2:	480e      	ldr	r0, [pc, #56]	@ (800dedc <QR_Show+0x70>)
 800dea4:	f7fa fcd2 	bl	800884c <HAL_UART_Transmit>
			0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_pid, sizeof(Y_pid) - 1, 0xffff);
 800dea8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800deac:	2213      	movs	r2, #19
 800deae:	4907      	ldr	r1, [pc, #28]	@ (800decc <QR_Show+0x60>)
 800deb0:	480a      	ldr	r0, [pc, #40]	@ (800dedc <QR_Show+0x70>)
 800deb2:	f7fa fccb 	bl	800884c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800deb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800deba:	2204      	movs	r2, #4
 800debc:	4908      	ldr	r1, [pc, #32]	@ (800dee0 <QR_Show+0x74>)
 800debe:	4807      	ldr	r0, [pc, #28]	@ (800dedc <QR_Show+0x70>)
 800dec0:	f7fa fcc4 	bl	800884c <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart4, (uint8_t*) QR_data, sizeof(QR_data) - 1, 0xffff);
	 HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
	 sizeof("\"\xff\xff\xff") - 1, 0xffff);
	 */

}
 800dec4:	bf00      	nop
 800dec6:	3708      	adds	r7, #8
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	24000d00 	.word	0x24000d00
 800ded0:	24000460 	.word	0x24000460
 800ded4:	08013250 	.word	0x08013250
 800ded8:	08013254 	.word	0x08013254
 800dedc:	240005c0 	.word	0x240005c0
 800dee0:	08013228 	.word	0x08013228

0800dee4 <Point_Show>:
// 抓取过程标志位，值为目标颜色
extern char Match_Flag;
// 抓取计算稳定性标志位，0为识别有故障,1为正常计算
extern char Check_flag;
// TODO：屏幕缺失字符"+",暂时判断为编码格式问题，需要通过串口助手确定编码格式
void Point_Show(void) {
 800dee4:	b580      	push	{r7, lr}
 800dee6:	af00      	add	r7, sp, #0
	if(Point_Flag == 0)
 800dee8:	4b36      	ldr	r3, [pc, #216]	@ (800dfc4 <Point_Show+0xe0>)
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d066      	beq.n	800dfbe <Point_Show+0xda>
	{
//		TX2点位数据还未接收，结束该函数
		return ;
	}
	Point_Flag = 0;
 800def0:	4b34      	ldr	r3, [pc, #208]	@ (800dfc4 <Point_Show+0xe0>)
 800def2:	2200      	movs	r2, #0
 800def4:	701a      	strb	r2, [r3, #0]
//	在抓取过程中,进行颜色校验，如果颜色与抓取目标颜色不同，则放弃该帧数据，并传递放弃稳定性计算标志位
	if(Match_Flag != colour)
 800def6:	4b34      	ldr	r3, [pc, #208]	@ (800dfc8 <Point_Show+0xe4>)
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	461a      	mov	r2, r3
 800defc:	4b33      	ldr	r3, [pc, #204]	@ (800dfcc <Point_Show+0xe8>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	429a      	cmp	r2, r3
 800df02:	d003      	beq.n	800df0c <Point_Show+0x28>
		Check_flag = 0;
 800df04:	4b32      	ldr	r3, [pc, #200]	@ (800dfd0 <Point_Show+0xec>)
 800df06:	2200      	movs	r2, #0
 800df08:	701a      	strb	r2, [r3, #0]
 800df0a:	e002      	b.n	800df12 <Point_Show+0x2e>
	else
		Check_flag = 1;
 800df0c:	4b30      	ldr	r3, [pc, #192]	@ (800dfd0 <Point_Show+0xec>)
 800df0e:	2201      	movs	r2, #1
 800df10:	701a      	strb	r2, [r3, #0]
	sprintf(TX2_X_Point, "%.2f", x);
 800df12:	4b30      	ldr	r3, [pc, #192]	@ (800dfd4 <Point_Show+0xf0>)
 800df14:	edd3 7a00 	vldr	s15, [r3]
 800df18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800df1c:	ec53 2b17 	vmov	r2, r3, d7
 800df20:	492d      	ldr	r1, [pc, #180]	@ (800dfd8 <Point_Show+0xf4>)
 800df22:	482e      	ldr	r0, [pc, #184]	@ (800dfdc <Point_Show+0xf8>)
 800df24:	f001 ffea 	bl	800fefc <siprintf>
	sprintf(TX2_Y_Point, "%.2f", y);
 800df28:	4b2d      	ldr	r3, [pc, #180]	@ (800dfe0 <Point_Show+0xfc>)
 800df2a:	edd3 7a00 	vldr	s15, [r3]
 800df2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800df32:	ec53 2b17 	vmov	r2, r3, d7
 800df36:	4928      	ldr	r1, [pc, #160]	@ (800dfd8 <Point_Show+0xf4>)
 800df38:	482a      	ldr	r0, [pc, #168]	@ (800dfe4 <Point_Show+0x100>)
 800df3a:	f001 ffdf 	bl	800fefc <siprintf>
	sprintf(TX2_Color, "%d", colour);
 800df3e:	4b23      	ldr	r3, [pc, #140]	@ (800dfcc <Point_Show+0xe8>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	461a      	mov	r2, r3
 800df44:	4928      	ldr	r1, [pc, #160]	@ (800dfe8 <Point_Show+0x104>)
 800df46:	4829      	ldr	r0, [pc, #164]	@ (800dfec <Point_Show+0x108>)
 800df48:	f001 ffd8 	bl	800fefc <siprintf>
//	开始发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Point.txt=\"",sizeof("Point.txt=\"") - 1, 0xffff);
 800df4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df50:	220b      	movs	r2, #11
 800df52:	4927      	ldr	r1, [pc, #156]	@ (800dff0 <Point_Show+0x10c>)
 800df54:	4827      	ldr	r0, [pc, #156]	@ (800dff4 <Point_Show+0x110>)
 800df56:	f7fa fc79 	bl	800884c <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_X_Point, sizeof(TX2_X_Point) - 2, 0xffff);
 800df5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df5e:	2206      	movs	r2, #6
 800df60:	491e      	ldr	r1, [pc, #120]	@ (800dfdc <Point_Show+0xf8>)
 800df62:	4824      	ldr	r0, [pc, #144]	@ (800dff4 <Point_Show+0x110>)
 800df64:	f7fa fc72 	bl	800884c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "+", sizeof("+")-2, 0xffff);
 800df68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df6c:	2200      	movs	r2, #0
 800df6e:	4922      	ldr	r1, [pc, #136]	@ (800dff8 <Point_Show+0x114>)
 800df70:	4820      	ldr	r0, [pc, #128]	@ (800dff4 <Point_Show+0x110>)
 800df72:	f7fa fc6b 	bl	800884c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Y_Point, sizeof(TX2_Y_Point) - 1, 0xffff);
 800df76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df7a:	2207      	movs	r2, #7
 800df7c:	4919      	ldr	r1, [pc, #100]	@ (800dfe4 <Point_Show+0x100>)
 800df7e:	481d      	ldr	r0, [pc, #116]	@ (800dff4 <Point_Show+0x110>)
 800df80:	f7fa fc64 	bl	800884c <HAL_UART_Transmit>
//	结束发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800df84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df88:	2204      	movs	r2, #4
 800df8a:	491c      	ldr	r1, [pc, #112]	@ (800dffc <Point_Show+0x118>)
 800df8c:	4819      	ldr	r0, [pc, #100]	@ (800dff4 <Point_Show+0x110>)
 800df8e:	f7fa fc5d 	bl	800884c <HAL_UART_Transmit>

//	开始发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Color.txt=\"",sizeof("Color.txt=\"") - 1, 0xffff);
 800df92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df96:	220b      	movs	r2, #11
 800df98:	4919      	ldr	r1, [pc, #100]	@ (800e000 <Point_Show+0x11c>)
 800df9a:	4816      	ldr	r0, [pc, #88]	@ (800dff4 <Point_Show+0x110>)
 800df9c:	f7fa fc56 	bl	800884c <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Color, sizeof(TX2_Color)-1 , 0xffff);
 800dfa0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	4911      	ldr	r1, [pc, #68]	@ (800dfec <Point_Show+0x108>)
 800dfa8:	4812      	ldr	r0, [pc, #72]	@ (800dff4 <Point_Show+0x110>)
 800dfaa:	f7fa fc4f 	bl	800884c <HAL_UART_Transmit>

//	结束发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800dfae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dfb2:	2204      	movs	r2, #4
 800dfb4:	4911      	ldr	r1, [pc, #68]	@ (800dffc <Point_Show+0x118>)
 800dfb6:	480f      	ldr	r0, [pc, #60]	@ (800dff4 <Point_Show+0x110>)
 800dfb8:	f7fa fc48 	bl	800884c <HAL_UART_Transmit>
 800dfbc:	e000      	b.n	800dfc0 <Point_Show+0xdc>
		return ;
 800dfbe:	bf00      	nop
}
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	2400045c 	.word	0x2400045c
 800dfc8:	24000488 	.word	0x24000488
 800dfcc:	2400047c 	.word	0x2400047c
 800dfd0:	24000489 	.word	0x24000489
 800dfd4:	24000454 	.word	0x24000454
 800dfd8:	08013210 	.word	0x08013210
 800dfdc:	24000d14 	.word	0x24000d14
 800dfe0:	24000458 	.word	0x24000458
 800dfe4:	24000d1c 	.word	0x24000d1c
 800dfe8:	08013250 	.word	0x08013250
 800dfec:	24000d24 	.word	0x24000d24
 800dff0:	08013260 	.word	0x08013260
 800dff4:	240005c0 	.word	0x240005c0
 800dff8:	0801326c 	.word	0x0801326c
 800dffc:	08013228 	.word	0x08013228
 800e000:	08013270 	.word	0x08013270

0800e004 <Check_Flag>:

void Check_Flag(uint8_t rec) {
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	4603      	mov	r3, r0
 800e00c:	71fb      	strb	r3, [r7, #7]
	static uint8_t ch;
	static uint8_t count = 0;

	ch = rec;
 800e00e:	4a45      	ldr	r2, [pc, #276]	@ (800e124 <Check_Flag+0x120>)
 800e010:	79fb      	ldrb	r3, [r7, #7]
 800e012:	7013      	strb	r3, [r2, #0]

	switch (count) {
 800e014:	4b44      	ldr	r3, [pc, #272]	@ (800e128 <Check_Flag+0x124>)
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	2b05      	cmp	r3, #5
 800e01a:	d876      	bhi.n	800e10a <Check_Flag+0x106>
 800e01c:	a201      	add	r2, pc, #4	@ (adr r2, 800e024 <Check_Flag+0x20>)
 800e01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e022:	bf00      	nop
 800e024:	0800e03d 	.word	0x0800e03d
 800e028:	0800e075 	.word	0x0800e075
 800e02c:	0800e09b 	.word	0x0800e09b
 800e030:	0800e0b9 	.word	0x0800e0b9
 800e034:	0800e0d7 	.word	0x0800e0d7
 800e038:	0800e0f5 	.word	0x0800e0f5
	case 0:
		if (ch == 'G')
 800e03c:	4b39      	ldr	r3, [pc, #228]	@ (800e124 <Check_Flag+0x120>)
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	2b47      	cmp	r3, #71	@ 0x47
 800e042:	d103      	bne.n	800e04c <Check_Flag+0x48>
			count = 1;
 800e044:	4b38      	ldr	r3, [pc, #224]	@ (800e128 <Check_Flag+0x124>)
 800e046:	2201      	movs	r2, #1
 800e048:	701a      	strb	r2, [r3, #0]
			count = 2;
		else if (ch == 'M')
			count = 4;
		else
			count = 0;
		break;
 800e04a:	e065      	b.n	800e118 <Check_Flag+0x114>
		else if (ch == 'R')
 800e04c:	4b35      	ldr	r3, [pc, #212]	@ (800e124 <Check_Flag+0x120>)
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	2b52      	cmp	r3, #82	@ 0x52
 800e052:	d103      	bne.n	800e05c <Check_Flag+0x58>
			count = 2;
 800e054:	4b34      	ldr	r3, [pc, #208]	@ (800e128 <Check_Flag+0x124>)
 800e056:	2202      	movs	r2, #2
 800e058:	701a      	strb	r2, [r3, #0]
		break;
 800e05a:	e05d      	b.n	800e118 <Check_Flag+0x114>
		else if (ch == 'M')
 800e05c:	4b31      	ldr	r3, [pc, #196]	@ (800e124 <Check_Flag+0x120>)
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	2b4d      	cmp	r3, #77	@ 0x4d
 800e062:	d103      	bne.n	800e06c <Check_Flag+0x68>
			count = 4;
 800e064:	4b30      	ldr	r3, [pc, #192]	@ (800e128 <Check_Flag+0x124>)
 800e066:	2204      	movs	r2, #4
 800e068:	701a      	strb	r2, [r3, #0]
		break;
 800e06a:	e055      	b.n	800e118 <Check_Flag+0x114>
			count = 0;
 800e06c:	4b2e      	ldr	r3, [pc, #184]	@ (800e128 <Check_Flag+0x124>)
 800e06e:	2200      	movs	r2, #0
 800e070:	701a      	strb	r2, [r3, #0]
		break;
 800e072:	e051      	b.n	800e118 <Check_Flag+0x114>
	case 1:
		if (ch == 'o') {
 800e074:	4b2b      	ldr	r3, [pc, #172]	@ (800e124 <Check_Flag+0x120>)
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	2b6f      	cmp	r3, #111	@ 0x6f
 800e07a:	d106      	bne.n	800e08a <Check_Flag+0x86>
			System_Flag = 1;
 800e07c:	4b2b      	ldr	r3, [pc, #172]	@ (800e12c <Check_Flag+0x128>)
 800e07e:	2201      	movs	r2, #1
 800e080:	701a      	strb	r2, [r3, #0]
			count = 0;
 800e082:	4b29      	ldr	r3, [pc, #164]	@ (800e128 <Check_Flag+0x124>)
 800e084:	2200      	movs	r2, #0
 800e086:	701a      	strb	r2, [r3, #0]
		} else if (ch == 'G')
			;
		else
			count = 0;
		break;
 800e088:	e043      	b.n	800e112 <Check_Flag+0x10e>
		} else if (ch == 'G')
 800e08a:	4b26      	ldr	r3, [pc, #152]	@ (800e124 <Check_Flag+0x120>)
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	2b47      	cmp	r3, #71	@ 0x47
 800e090:	d03f      	beq.n	800e112 <Check_Flag+0x10e>
			count = 0;
 800e092:	4b25      	ldr	r3, [pc, #148]	@ (800e128 <Check_Flag+0x124>)
 800e094:	2200      	movs	r2, #0
 800e096:	701a      	strb	r2, [r3, #0]
		break;
 800e098:	e03b      	b.n	800e112 <Check_Flag+0x10e>
	case 2:
//		此处用于判断是否进入准备模式，调整车身姿态
		if (ch == 'e')
 800e09a:	4b22      	ldr	r3, [pc, #136]	@ (800e124 <Check_Flag+0x120>)
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	2b65      	cmp	r3, #101	@ 0x65
 800e0a0:	d106      	bne.n	800e0b0 <Check_Flag+0xac>
			count++;
 800e0a2:	4b21      	ldr	r3, [pc, #132]	@ (800e128 <Check_Flag+0x124>)
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	b2da      	uxtb	r2, r3
 800e0aa:	4b1f      	ldr	r3, [pc, #124]	@ (800e128 <Check_Flag+0x124>)
 800e0ac:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800e0ae:	e033      	b.n	800e118 <Check_Flag+0x114>
			count = 0;
 800e0b0:	4b1d      	ldr	r3, [pc, #116]	@ (800e128 <Check_Flag+0x124>)
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	701a      	strb	r2, [r3, #0]
		break;
 800e0b6:	e02f      	b.n	800e118 <Check_Flag+0x114>
	case 3:
		if (ch == 'a') {
 800e0b8:	4b1a      	ldr	r3, [pc, #104]	@ (800e124 <Check_Flag+0x120>)
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	2b61      	cmp	r3, #97	@ 0x61
 800e0be:	d106      	bne.n	800e0ce <Check_Flag+0xca>
			Ready_Flag = 1;
 800e0c0:	4b1b      	ldr	r3, [pc, #108]	@ (800e130 <Check_Flag+0x12c>)
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	701a      	strb	r2, [r3, #0]
			count = 0;
 800e0c6:	4b18      	ldr	r3, [pc, #96]	@ (800e128 <Check_Flag+0x124>)
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	701a      	strb	r2, [r3, #0]
		} else
			count = 0;
		break;
 800e0cc:	e024      	b.n	800e118 <Check_Flag+0x114>
			count = 0;
 800e0ce:	4b16      	ldr	r3, [pc, #88]	@ (800e128 <Check_Flag+0x124>)
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	701a      	strb	r2, [r3, #0]
		break;
 800e0d4:	e020      	b.n	800e118 <Check_Flag+0x114>
	case 4:
		if (ch == 'a')
 800e0d6:	4b13      	ldr	r3, [pc, #76]	@ (800e124 <Check_Flag+0x120>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	2b61      	cmp	r3, #97	@ 0x61
 800e0dc:	d106      	bne.n	800e0ec <Check_Flag+0xe8>
			count++;
 800e0de:	4b12      	ldr	r3, [pc, #72]	@ (800e128 <Check_Flag+0x124>)
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	4b10      	ldr	r3, [pc, #64]	@ (800e128 <Check_Flag+0x124>)
 800e0e8:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800e0ea:	e015      	b.n	800e118 <Check_Flag+0x114>
			count = 0;
 800e0ec:	4b0e      	ldr	r3, [pc, #56]	@ (800e128 <Check_Flag+0x124>)
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	701a      	strb	r2, [r3, #0]
		break;
 800e0f2:	e011      	b.n	800e118 <Check_Flag+0x114>
	case 5:
		if (ch == 't') {
 800e0f4:	4b0b      	ldr	r3, [pc, #44]	@ (800e124 <Check_Flag+0x120>)
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	2b74      	cmp	r3, #116	@ 0x74
 800e0fa:	d10c      	bne.n	800e116 <Check_Flag+0x112>
			System_Flag = 1;
 800e0fc:	4b0b      	ldr	r3, [pc, #44]	@ (800e12c <Check_Flag+0x128>)
 800e0fe:	2201      	movs	r2, #1
 800e100:	701a      	strb	r2, [r3, #0]
			count = 0;
 800e102:	4b09      	ldr	r3, [pc, #36]	@ (800e128 <Check_Flag+0x124>)
 800e104:	2200      	movs	r2, #0
 800e106:	701a      	strb	r2, [r3, #0]
		}
		break;
 800e108:	e005      	b.n	800e116 <Check_Flag+0x112>
	default:
		count = 0;
 800e10a:	4b07      	ldr	r3, [pc, #28]	@ (800e128 <Check_Flag+0x124>)
 800e10c:	2200      	movs	r2, #0
 800e10e:	701a      	strb	r2, [r3, #0]
		break;
 800e110:	e002      	b.n	800e118 <Check_Flag+0x114>
		break;
 800e112:	bf00      	nop
 800e114:	e000      	b.n	800e118 <Check_Flag+0x114>
		break;
 800e116:	bf00      	nop
	}

}
 800e118:	bf00      	nop
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr
 800e124:	24000d28 	.word	0x24000d28
 800e128:	24000d29 	.word	0x24000d29
 800e12c:	24000d26 	.word	0x24000d26
 800e130:	24000d27 	.word	0x24000d27

0800e134 <calculate_mean>:

#include "Stability.h"
#include "Stability_sub.h"

// 计算平均值
double calculate_mean(double data[], int n) {
 800e134:	b480      	push	{r7}
 800e136:	b087      	sub	sp, #28
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
    double sum = 0.0;
 800e13e:	f04f 0200 	mov.w	r2, #0
 800e142:	f04f 0300 	mov.w	r3, #0
 800e146:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < n; i++) {
 800e14a:	2300      	movs	r3, #0
 800e14c:	60fb      	str	r3, [r7, #12]
 800e14e:	e00e      	b.n	800e16e <calculate_mean+0x3a>
        sum += data[i];
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	00db      	lsls	r3, r3, #3
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	4413      	add	r3, r2
 800e158:	ed93 7b00 	vldr	d7, [r3]
 800e15c:	ed97 6b04 	vldr	d6, [r7, #16]
 800e160:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e164:	ed87 7b04 	vstr	d7, [r7, #16]
    for (int i = 0; i < n; i++) {
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	3301      	adds	r3, #1
 800e16c:	60fb      	str	r3, [r7, #12]
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	429a      	cmp	r2, r3
 800e174:	dbec      	blt.n	800e150 <calculate_mean+0x1c>
    }
    return sum / n;
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	ee07 3a90 	vmov	s15, r3
 800e17c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e180:	ed97 6b04 	vldr	d6, [r7, #16]
 800e184:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800e188:	eeb0 7b45 	vmov.f64	d7, d5
}
 800e18c:	eeb0 0b47 	vmov.f64	d0, d7
 800e190:	371c      	adds	r7, #28
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr

0800e19a <calculate_variance>:

 // 计算方差
double calculate_variance(double data[], int n) {
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b088      	sub	sp, #32
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
 800e1a2:	6039      	str	r1, [r7, #0]
     double mean = calculate_mean(data, n);
 800e1a4:	6839      	ldr	r1, [r7, #0]
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f7ff ffc4 	bl	800e134 <calculate_mean>
 800e1ac:	ed87 0b02 	vstr	d0, [r7, #8]
     double sum_of_squares = 0.0;
 800e1b0:	f04f 0200 	mov.w	r2, #0
 800e1b4:	f04f 0300 	mov.w	r3, #0
 800e1b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
     for (int i = 0; i < n; i++) {
 800e1bc:	2300      	movs	r3, #0
 800e1be:	617b      	str	r3, [r7, #20]
 800e1c0:	e01e      	b.n	800e200 <calculate_variance+0x66>
         sum_of_squares += (data[i] - mean) * (data[i] - mean);
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	00db      	lsls	r3, r3, #3
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	ed93 6b00 	vldr	d6, [r3]
 800e1ce:	ed97 7b02 	vldr	d7, [r7, #8]
 800e1d2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	00db      	lsls	r3, r3, #3
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	4413      	add	r3, r2
 800e1de:	ed93 5b00 	vldr	d5, [r3]
 800e1e2:	ed97 7b02 	vldr	d7, [r7, #8]
 800e1e6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e1ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e1ee:	ed97 6b06 	vldr	d6, [r7, #24]
 800e1f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e1f6:	ed87 7b06 	vstr	d7, [r7, #24]
     for (int i = 0; i < n; i++) {
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	617b      	str	r3, [r7, #20]
 800e200:	697a      	ldr	r2, [r7, #20]
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	429a      	cmp	r2, r3
 800e206:	dbdc      	blt.n	800e1c2 <calculate_variance+0x28>
     }
     return sum_of_squares / n;
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	ee07 3a90 	vmov	s15, r3
 800e20e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e212:	ed97 6b06 	vldr	d6, [r7, #24]
 800e216:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800e21a:	eeb0 7b45 	vmov.f64	d7, d5
}
 800e21e:	eeb0 0b47 	vmov.f64	d0, d7
 800e222:	3720      	adds	r7, #32
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <Check_Stability>:

//  使用方差判断稳定性
uint8_t Check_Stability(float check_x,float check_y,uint8_t Check_flag)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b08a      	sub	sp, #40	@ 0x28
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	ed87 0a03 	vstr	s0, [r7, #12]
 800e232:	edc7 0a02 	vstr	s1, [r7, #8]
 800e236:	4603      	mov	r3, r0
 800e238:	71fb      	strb	r3, [r7, #7]
	static float data_x[10];
	static float data_y[10];
	static uint8_t frequency = 0;
//	不满足计算稳定性的条件，清空缓冲区并结束
	if(Check_flag != 1)
 800e23a:	79fb      	ldrb	r3, [r7, #7]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d018      	beq.n	800e272 <Check_Stability+0x4a>
	{
		for(int i = 0;i<10;i++)
 800e240:	2300      	movs	r3, #0
 800e242:	627b      	str	r3, [r7, #36]	@ 0x24
 800e244:	e010      	b.n	800e268 <Check_Stability+0x40>
		{
			data_x[i] = 0;
 800e246:	4a27      	ldr	r2, [pc, #156]	@ (800e2e4 <Check_Stability+0xbc>)
 800e248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	4413      	add	r3, r2
 800e24e:	f04f 0200 	mov.w	r2, #0
 800e252:	601a      	str	r2, [r3, #0]
			data_y[i] = 0;
 800e254:	4a24      	ldr	r2, [pc, #144]	@ (800e2e8 <Check_Stability+0xc0>)
 800e256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	4413      	add	r3, r2
 800e25c:	f04f 0200 	mov.w	r2, #0
 800e260:	601a      	str	r2, [r3, #0]
		for(int i = 0;i<10;i++)
 800e262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e264:	3301      	adds	r3, #1
 800e266:	627b      	str	r3, [r7, #36]	@ 0x24
 800e268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e26a:	2b09      	cmp	r3, #9
 800e26c:	ddeb      	ble.n	800e246 <Check_Stability+0x1e>
		}
		return 1;
 800e26e:	2301      	movs	r3, #1
 800e270:	e034      	b.n	800e2dc <Check_Stability+0xb4>
	}
	if(frequency <= 9)
 800e272:	4b1e      	ldr	r3, [pc, #120]	@ (800e2ec <Check_Stability+0xc4>)
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	2b09      	cmp	r3, #9
 800e278:	d80f      	bhi.n	800e29a <Check_Stability+0x72>
	{
		data_x[frequency] = check_x;
 800e27a:	4b1c      	ldr	r3, [pc, #112]	@ (800e2ec <Check_Stability+0xc4>)
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	4a19      	ldr	r2, [pc, #100]	@ (800e2e4 <Check_Stability+0xbc>)
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	4413      	add	r3, r2
 800e284:	68fa      	ldr	r2, [r7, #12]
 800e286:	601a      	str	r2, [r3, #0]
		data_y[frequency] = check_y;
 800e288:	4b18      	ldr	r3, [pc, #96]	@ (800e2ec <Check_Stability+0xc4>)
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	4a16      	ldr	r2, [pc, #88]	@ (800e2e8 <Check_Stability+0xc0>)
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	4413      	add	r3, r2
 800e292:	68ba      	ldr	r2, [r7, #8]
 800e294:	601a      	str	r2, [r3, #0]
//		0说明数据量过少
		return 0;
 800e296:	2300      	movs	r3, #0
 800e298:	e020      	b.n	800e2dc <Check_Stability+0xb4>
	}
//	显式类型转换，调用函数获得方差
	double variance_x = calculate_variance((double*)data_x, 10);
 800e29a:	210a      	movs	r1, #10
 800e29c:	4811      	ldr	r0, [pc, #68]	@ (800e2e4 <Check_Stability+0xbc>)
 800e29e:	f7ff ff7c 	bl	800e19a <calculate_variance>
 800e2a2:	ed87 0b06 	vstr	d0, [r7, #24]
	double variance_y = calculate_variance((double*)data_y, 10);
 800e2a6:	210a      	movs	r1, #10
 800e2a8:	480f      	ldr	r0, [pc, #60]	@ (800e2e8 <Check_Stability+0xc0>)
 800e2aa:	f7ff ff76 	bl	800e19a <calculate_variance>
 800e2ae:	ed87 0b04 	vstr	d0, [r7, #16]
	if((variance_x > 2) || (variance_y >2))
 800e2b2:	ed97 7b06 	vldr	d7, [r7, #24]
 800e2b6:	eeb0 6b00 	vmov.f64	d6, #0	@ 0x40000000  2.0
 800e2ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c2:	dc08      	bgt.n	800e2d6 <Check_Stability+0xae>
 800e2c4:	ed97 7b04 	vldr	d7, [r7, #16]
 800e2c8:	eeb0 6b00 	vmov.f64	d6, #0	@ 0x40000000  2.0
 800e2cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2d4:	dd01      	ble.n	800e2da <Check_Stability+0xb2>
	{
//		1说明还未稳定
		return 1;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	e000      	b.n	800e2dc <Check_Stability+0xb4>
	}
	else
		return 2;
 800e2da:	2302      	movs	r3, #2
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3728      	adds	r7, #40	@ 0x28
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	24000d2c 	.word	0x24000d2c
 800e2e8:	24000d54 	.word	0x24000d54
 800e2ec:	24000d7c 	.word	0x24000d7c

0800e2f0 <Check_Status>:
	首先，在步进电机上电以后，需要进行调零，找到一个零位用来确定后面一切操作的参考点，因此5号步进电机设置为上电回零
	但是在比赛过程中，要求车身及其垂直投影部分在未发车前全部处于发车区域，这就要求爪子在发车前是在车体内侧的，同时爪子不能处于太高处，否则违规
	因此在Check_Status()函数用于在回零操作已完成后进行调整，以满足发车条件，
*/
uint8_t Check_Status(void)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	af00      	add	r7, sp, #0
//  首先控制步进电机,回到零点
	Drop_Location_jiang(200, 120, 0);
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	2178      	movs	r1, #120	@ 0x78
 800e2f8:	20c8      	movs	r0, #200	@ 0xc8
 800e2fa:	f7fe fbf3 	bl	800cae4 <Drop_Location_jiang>
	Move_Arm(1, 50, 300);
 800e2fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800e302:	2132      	movs	r1, #50	@ 0x32
 800e304:	2001      	movs	r0, #1
 800e306:	f7fd f8f5 	bl	800b4f4 <Move_Arm>
//  6号舵机900
	Move_Arm(6, 900, 300);
 800e30a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800e30e:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800e312:	2006      	movs	r0, #6
 800e314:	f7fd f8ee 	bl	800b4f4 <Move_Arm>
//  旋转物料结构的支撑舵机
	FT_Servo_Zero(0);
 800e318:	2000      	movs	r0, #0
 800e31a:	f000 f80c 	bl	800e336 <FT_Servo_Zero>
//  旋转爪子结构的支撑舵机
	FT_Servo_Zero(1);
 800e31e:	2001      	movs	r0, #1
 800e320:	f000 f809 	bl	800e336 <FT_Servo_Zero>
//  步进电机下降,将位置调整为最最低点
	Drop_Location_jiang(200, 120, 9000);
 800e324:	f242 3228 	movw	r2, #9000	@ 0x2328
 800e328:	2178      	movs	r1, #120	@ 0x78
 800e32a:	20c8      	movs	r0, #200	@ 0xc8
 800e32c:	f7fe fbda 	bl	800cae4 <Drop_Location_jiang>
	return 1;
 800e330:	2301      	movs	r3, #1
}
 800e332:	4618      	mov	r0, r3
 800e334:	bd80      	pop	{r7, pc}

0800e336 <FT_Servo_Zero>:

// 将目标舵机回零
uint8_t FT_Servo_Zero(uint8_t Number)
{
 800e336:	b580      	push	{r7, lr}
 800e338:	b082      	sub	sp, #8
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	4603      	mov	r3, r0
 800e33e:	71fb      	strb	r3, [r7, #7]
	if(Number == 0)
 800e340:	79fb      	ldrb	r3, [r7, #7]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d106      	bne.n	800e354 <FT_Servo_Zero+0x1e>
		WritePosEx(0, 0, 0, 0);
 800e346:	2300      	movs	r3, #0
 800e348:	2200      	movs	r2, #0
 800e34a:	2100      	movs	r1, #0
 800e34c:	2000      	movs	r0, #0
 800e34e:	f7ff fc9d 	bl	800dc8c <WritePosEx>
 800e352:	e009      	b.n	800e368 <FT_Servo_Zero+0x32>
	else if (Number == 1)
 800e354:	79fb      	ldrb	r3, [r7, #7]
 800e356:	2b01      	cmp	r3, #1
 800e358:	d106      	bne.n	800e368 <FT_Servo_Zero+0x32>
		WritePosEx(1, 1020, 0, 0);
 800e35a:	2300      	movs	r3, #0
 800e35c:	2200      	movs	r2, #0
 800e35e:	f44f 717f 	mov.w	r1, #1020	@ 0x3fc
 800e362:	2001      	movs	r0, #1
 800e364:	f7ff fc92 	bl	800dc8c <WritePosEx>
	return 1;
 800e368:	2301      	movs	r3, #1
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <FT_Servo_Orth>:

// 将爪子处飞特舵机调整为向外，正交于车身
uint8_t FT_Servo_Orth(void)
{
 800e372:	b580      	push	{r7, lr}
 800e374:	af00      	add	r7, sp, #0
	WritePosEx(1, 3087, 0, 0);
 800e376:	2300      	movs	r3, #0
 800e378:	2200      	movs	r2, #0
 800e37a:	f640 410f 	movw	r1, #3087	@ 0xc0f
 800e37e:	2001      	movs	r0, #1
 800e380:	f7ff fc84 	bl	800dc8c <WritePosEx>
	return 1;
 800e384:	2301      	movs	r3, #1
}
 800e386:	4618      	mov	r0, r3
 800e388:	bd80      	pop	{r7, pc}

0800e38a <FT_Servo_Put>:

// 物料摆放
uint8_t FT_Servo_Put(uint8_t Servo_ID, uint8_t Pub_Number)
{
 800e38a:	b580      	push	{r7, lr}
 800e38c:	b082      	sub	sp, #8
 800e38e:	af00      	add	r7, sp, #0
 800e390:	4603      	mov	r3, r0
 800e392:	460a      	mov	r2, r1
 800e394:	71fb      	strb	r3, [r7, #7]
 800e396:	4613      	mov	r3, r2
 800e398:	71bb      	strb	r3, [r7, #6]
	if(Servo_ID == 0)
 800e39a:	79fb      	ldrb	r3, [r7, #7]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d121      	bne.n	800e3e4 <FT_Servo_Put+0x5a>
	{
		switch (Pub_Number)
 800e3a0:	79bb      	ldrb	r3, [r7, #6]
 800e3a2:	2b03      	cmp	r3, #3
 800e3a4:	d016      	beq.n	800e3d4 <FT_Servo_Put+0x4a>
 800e3a6:	2b03      	cmp	r3, #3
 800e3a8:	dc26      	bgt.n	800e3f8 <FT_Servo_Put+0x6e>
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	d002      	beq.n	800e3b4 <FT_Servo_Put+0x2a>
 800e3ae:	2b02      	cmp	r3, #2
 800e3b0:	d008      	beq.n	800e3c4 <FT_Servo_Put+0x3a>
 800e3b2:	e021      	b.n	800e3f8 <FT_Servo_Put+0x6e>
		{
			case 1:WritePosEx(0, 1180, 0, 0);break;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f240 419c 	movw	r1, #1180	@ 0x49c
 800e3bc:	2000      	movs	r0, #0
 800e3be:	f7ff fc65 	bl	800dc8c <WritePosEx>
 800e3c2:	e019      	b.n	800e3f8 <FT_Servo_Put+0x6e>
			case 2:WritePosEx(0, 2245, 0, 0);break;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	f640 01c5 	movw	r1, #2245	@ 0x8c5
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	f7ff fc5d 	bl	800dc8c <WritePosEx>
 800e3d2:	e011      	b.n	800e3f8 <FT_Servo_Put+0x6e>
			case 3:WritePosEx(0, 3292, 0, 0);break;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f640 41dc 	movw	r1, #3292	@ 0xcdc
 800e3dc:	2000      	movs	r0, #0
 800e3de:	f7ff fc55 	bl	800dc8c <WritePosEx>
 800e3e2:	e009      	b.n	800e3f8 <FT_Servo_Put+0x6e>
		}
	}
	else if (Servo_ID == 1)
 800e3e4:	79fb      	ldrb	r3, [r7, #7]
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d106      	bne.n	800e3f8 <FT_Servo_Put+0x6e>
	{
		WritePosEx(1, 1716, 0, 0);
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	f240 61b4 	movw	r1, #1716	@ 0x6b4
 800e3f2:	2001      	movs	r0, #1
 800e3f4:	f7ff fc4a 	bl	800dc8c <WritePosEx>
	}
	while(ReadMove(Servo_ID))
 800e3f8:	bf00      	nop
 800e3fa:	79fb      	ldrb	r3, [r7, #7]
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7ff fc8f 	bl	800dd20 <ReadMove>
 800e402:	4603      	mov	r3, r0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1f8      	bne.n	800e3fa <FT_Servo_Put+0x70>
	{
		;
	}
	return 1;
 800e408:	2301      	movs	r3, #1
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
	...

0800e414 <malloc>:
 800e414:	4b02      	ldr	r3, [pc, #8]	@ (800e420 <malloc+0xc>)
 800e416:	4601      	mov	r1, r0
 800e418:	6818      	ldr	r0, [r3, #0]
 800e41a:	f000 b825 	b.w	800e468 <_malloc_r>
 800e41e:	bf00      	nop
 800e420:	240001c4 	.word	0x240001c4

0800e424 <sbrk_aligned>:
 800e424:	b570      	push	{r4, r5, r6, lr}
 800e426:	4e0f      	ldr	r6, [pc, #60]	@ (800e464 <sbrk_aligned+0x40>)
 800e428:	460c      	mov	r4, r1
 800e42a:	6831      	ldr	r1, [r6, #0]
 800e42c:	4605      	mov	r5, r0
 800e42e:	b911      	cbnz	r1, 800e436 <sbrk_aligned+0x12>
 800e430:	f001 fe52 	bl	80100d8 <_sbrk_r>
 800e434:	6030      	str	r0, [r6, #0]
 800e436:	4621      	mov	r1, r4
 800e438:	4628      	mov	r0, r5
 800e43a:	f001 fe4d 	bl	80100d8 <_sbrk_r>
 800e43e:	1c43      	adds	r3, r0, #1
 800e440:	d103      	bne.n	800e44a <sbrk_aligned+0x26>
 800e442:	f04f 34ff 	mov.w	r4, #4294967295
 800e446:	4620      	mov	r0, r4
 800e448:	bd70      	pop	{r4, r5, r6, pc}
 800e44a:	1cc4      	adds	r4, r0, #3
 800e44c:	f024 0403 	bic.w	r4, r4, #3
 800e450:	42a0      	cmp	r0, r4
 800e452:	d0f8      	beq.n	800e446 <sbrk_aligned+0x22>
 800e454:	1a21      	subs	r1, r4, r0
 800e456:	4628      	mov	r0, r5
 800e458:	f001 fe3e 	bl	80100d8 <_sbrk_r>
 800e45c:	3001      	adds	r0, #1
 800e45e:	d1f2      	bne.n	800e446 <sbrk_aligned+0x22>
 800e460:	e7ef      	b.n	800e442 <sbrk_aligned+0x1e>
 800e462:	bf00      	nop
 800e464:	24000d80 	.word	0x24000d80

0800e468 <_malloc_r>:
 800e468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e46c:	1ccd      	adds	r5, r1, #3
 800e46e:	f025 0503 	bic.w	r5, r5, #3
 800e472:	3508      	adds	r5, #8
 800e474:	2d0c      	cmp	r5, #12
 800e476:	bf38      	it	cc
 800e478:	250c      	movcc	r5, #12
 800e47a:	2d00      	cmp	r5, #0
 800e47c:	4606      	mov	r6, r0
 800e47e:	db01      	blt.n	800e484 <_malloc_r+0x1c>
 800e480:	42a9      	cmp	r1, r5
 800e482:	d904      	bls.n	800e48e <_malloc_r+0x26>
 800e484:	230c      	movs	r3, #12
 800e486:	6033      	str	r3, [r6, #0]
 800e488:	2000      	movs	r0, #0
 800e48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e48e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e564 <_malloc_r+0xfc>
 800e492:	f000 f869 	bl	800e568 <__malloc_lock>
 800e496:	f8d8 3000 	ldr.w	r3, [r8]
 800e49a:	461c      	mov	r4, r3
 800e49c:	bb44      	cbnz	r4, 800e4f0 <_malloc_r+0x88>
 800e49e:	4629      	mov	r1, r5
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	f7ff ffbf 	bl	800e424 <sbrk_aligned>
 800e4a6:	1c43      	adds	r3, r0, #1
 800e4a8:	4604      	mov	r4, r0
 800e4aa:	d158      	bne.n	800e55e <_malloc_r+0xf6>
 800e4ac:	f8d8 4000 	ldr.w	r4, [r8]
 800e4b0:	4627      	mov	r7, r4
 800e4b2:	2f00      	cmp	r7, #0
 800e4b4:	d143      	bne.n	800e53e <_malloc_r+0xd6>
 800e4b6:	2c00      	cmp	r4, #0
 800e4b8:	d04b      	beq.n	800e552 <_malloc_r+0xea>
 800e4ba:	6823      	ldr	r3, [r4, #0]
 800e4bc:	4639      	mov	r1, r7
 800e4be:	4630      	mov	r0, r6
 800e4c0:	eb04 0903 	add.w	r9, r4, r3
 800e4c4:	f001 fe08 	bl	80100d8 <_sbrk_r>
 800e4c8:	4581      	cmp	r9, r0
 800e4ca:	d142      	bne.n	800e552 <_malloc_r+0xea>
 800e4cc:	6821      	ldr	r1, [r4, #0]
 800e4ce:	1a6d      	subs	r5, r5, r1
 800e4d0:	4629      	mov	r1, r5
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f7ff ffa6 	bl	800e424 <sbrk_aligned>
 800e4d8:	3001      	adds	r0, #1
 800e4da:	d03a      	beq.n	800e552 <_malloc_r+0xea>
 800e4dc:	6823      	ldr	r3, [r4, #0]
 800e4de:	442b      	add	r3, r5
 800e4e0:	6023      	str	r3, [r4, #0]
 800e4e2:	f8d8 3000 	ldr.w	r3, [r8]
 800e4e6:	685a      	ldr	r2, [r3, #4]
 800e4e8:	bb62      	cbnz	r2, 800e544 <_malloc_r+0xdc>
 800e4ea:	f8c8 7000 	str.w	r7, [r8]
 800e4ee:	e00f      	b.n	800e510 <_malloc_r+0xa8>
 800e4f0:	6822      	ldr	r2, [r4, #0]
 800e4f2:	1b52      	subs	r2, r2, r5
 800e4f4:	d420      	bmi.n	800e538 <_malloc_r+0xd0>
 800e4f6:	2a0b      	cmp	r2, #11
 800e4f8:	d917      	bls.n	800e52a <_malloc_r+0xc2>
 800e4fa:	1961      	adds	r1, r4, r5
 800e4fc:	42a3      	cmp	r3, r4
 800e4fe:	6025      	str	r5, [r4, #0]
 800e500:	bf18      	it	ne
 800e502:	6059      	strne	r1, [r3, #4]
 800e504:	6863      	ldr	r3, [r4, #4]
 800e506:	bf08      	it	eq
 800e508:	f8c8 1000 	streq.w	r1, [r8]
 800e50c:	5162      	str	r2, [r4, r5]
 800e50e:	604b      	str	r3, [r1, #4]
 800e510:	4630      	mov	r0, r6
 800e512:	f000 f82f 	bl	800e574 <__malloc_unlock>
 800e516:	f104 000b 	add.w	r0, r4, #11
 800e51a:	1d23      	adds	r3, r4, #4
 800e51c:	f020 0007 	bic.w	r0, r0, #7
 800e520:	1ac2      	subs	r2, r0, r3
 800e522:	bf1c      	itt	ne
 800e524:	1a1b      	subne	r3, r3, r0
 800e526:	50a3      	strne	r3, [r4, r2]
 800e528:	e7af      	b.n	800e48a <_malloc_r+0x22>
 800e52a:	6862      	ldr	r2, [r4, #4]
 800e52c:	42a3      	cmp	r3, r4
 800e52e:	bf0c      	ite	eq
 800e530:	f8c8 2000 	streq.w	r2, [r8]
 800e534:	605a      	strne	r2, [r3, #4]
 800e536:	e7eb      	b.n	800e510 <_malloc_r+0xa8>
 800e538:	4623      	mov	r3, r4
 800e53a:	6864      	ldr	r4, [r4, #4]
 800e53c:	e7ae      	b.n	800e49c <_malloc_r+0x34>
 800e53e:	463c      	mov	r4, r7
 800e540:	687f      	ldr	r7, [r7, #4]
 800e542:	e7b6      	b.n	800e4b2 <_malloc_r+0x4a>
 800e544:	461a      	mov	r2, r3
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	42a3      	cmp	r3, r4
 800e54a:	d1fb      	bne.n	800e544 <_malloc_r+0xdc>
 800e54c:	2300      	movs	r3, #0
 800e54e:	6053      	str	r3, [r2, #4]
 800e550:	e7de      	b.n	800e510 <_malloc_r+0xa8>
 800e552:	230c      	movs	r3, #12
 800e554:	6033      	str	r3, [r6, #0]
 800e556:	4630      	mov	r0, r6
 800e558:	f000 f80c 	bl	800e574 <__malloc_unlock>
 800e55c:	e794      	b.n	800e488 <_malloc_r+0x20>
 800e55e:	6005      	str	r5, [r0, #0]
 800e560:	e7d6      	b.n	800e510 <_malloc_r+0xa8>
 800e562:	bf00      	nop
 800e564:	24000d84 	.word	0x24000d84

0800e568 <__malloc_lock>:
 800e568:	4801      	ldr	r0, [pc, #4]	@ (800e570 <__malloc_lock+0x8>)
 800e56a:	f001 be02 	b.w	8010172 <__retarget_lock_acquire_recursive>
 800e56e:	bf00      	nop
 800e570:	24000ec8 	.word	0x24000ec8

0800e574 <__malloc_unlock>:
 800e574:	4801      	ldr	r0, [pc, #4]	@ (800e57c <__malloc_unlock+0x8>)
 800e576:	f001 bdfd 	b.w	8010174 <__retarget_lock_release_recursive>
 800e57a:	bf00      	nop
 800e57c:	24000ec8 	.word	0x24000ec8

0800e580 <sulp>:
 800e580:	b570      	push	{r4, r5, r6, lr}
 800e582:	4604      	mov	r4, r0
 800e584:	460d      	mov	r5, r1
 800e586:	4616      	mov	r6, r2
 800e588:	ec45 4b10 	vmov	d0, r4, r5
 800e58c:	f003 fafc 	bl	8011b88 <__ulp>
 800e590:	b17e      	cbz	r6, 800e5b2 <sulp+0x32>
 800e592:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e596:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	dd09      	ble.n	800e5b2 <sulp+0x32>
 800e59e:	051b      	lsls	r3, r3, #20
 800e5a0:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800e5aa:	ec41 0b17 	vmov	d7, r0, r1
 800e5ae:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e5b2:	bd70      	pop	{r4, r5, r6, pc}
 800e5b4:	0000      	movs	r0, r0
	...

0800e5b8 <_strtod_l>:
 800e5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5bc:	ed2d 8b0a 	vpush	{d8-d12}
 800e5c0:	b097      	sub	sp, #92	@ 0x5c
 800e5c2:	4688      	mov	r8, r1
 800e5c4:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	9212      	str	r2, [sp, #72]	@ 0x48
 800e5ca:	9005      	str	r0, [sp, #20]
 800e5cc:	f04f 0a00 	mov.w	sl, #0
 800e5d0:	f04f 0b00 	mov.w	fp, #0
 800e5d4:	460a      	mov	r2, r1
 800e5d6:	9211      	str	r2, [sp, #68]	@ 0x44
 800e5d8:	7811      	ldrb	r1, [r2, #0]
 800e5da:	292b      	cmp	r1, #43	@ 0x2b
 800e5dc:	d04c      	beq.n	800e678 <_strtod_l+0xc0>
 800e5de:	d839      	bhi.n	800e654 <_strtod_l+0x9c>
 800e5e0:	290d      	cmp	r1, #13
 800e5e2:	d833      	bhi.n	800e64c <_strtod_l+0x94>
 800e5e4:	2908      	cmp	r1, #8
 800e5e6:	d833      	bhi.n	800e650 <_strtod_l+0x98>
 800e5e8:	2900      	cmp	r1, #0
 800e5ea:	d03c      	beq.n	800e666 <_strtod_l+0xae>
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	9208      	str	r2, [sp, #32]
 800e5f0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e5f2:	782a      	ldrb	r2, [r5, #0]
 800e5f4:	2a30      	cmp	r2, #48	@ 0x30
 800e5f6:	f040 80b5 	bne.w	800e764 <_strtod_l+0x1ac>
 800e5fa:	786a      	ldrb	r2, [r5, #1]
 800e5fc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e600:	2a58      	cmp	r2, #88	@ 0x58
 800e602:	d170      	bne.n	800e6e6 <_strtod_l+0x12e>
 800e604:	9302      	str	r3, [sp, #8]
 800e606:	9b08      	ldr	r3, [sp, #32]
 800e608:	9301      	str	r3, [sp, #4]
 800e60a:	ab12      	add	r3, sp, #72	@ 0x48
 800e60c:	9300      	str	r3, [sp, #0]
 800e60e:	4a8b      	ldr	r2, [pc, #556]	@ (800e83c <_strtod_l+0x284>)
 800e610:	9805      	ldr	r0, [sp, #20]
 800e612:	ab13      	add	r3, sp, #76	@ 0x4c
 800e614:	a911      	add	r1, sp, #68	@ 0x44
 800e616:	f002 fc5f 	bl	8010ed8 <__gethex>
 800e61a:	f010 060f 	ands.w	r6, r0, #15
 800e61e:	4604      	mov	r4, r0
 800e620:	d005      	beq.n	800e62e <_strtod_l+0x76>
 800e622:	2e06      	cmp	r6, #6
 800e624:	d12a      	bne.n	800e67c <_strtod_l+0xc4>
 800e626:	3501      	adds	r5, #1
 800e628:	2300      	movs	r3, #0
 800e62a:	9511      	str	r5, [sp, #68]	@ 0x44
 800e62c:	9308      	str	r3, [sp, #32]
 800e62e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e630:	2b00      	cmp	r3, #0
 800e632:	f040 852f 	bne.w	800f094 <_strtod_l+0xadc>
 800e636:	9b08      	ldr	r3, [sp, #32]
 800e638:	ec4b ab10 	vmov	d0, sl, fp
 800e63c:	b1cb      	cbz	r3, 800e672 <_strtod_l+0xba>
 800e63e:	eeb1 0b40 	vneg.f64	d0, d0
 800e642:	b017      	add	sp, #92	@ 0x5c
 800e644:	ecbd 8b0a 	vpop	{d8-d12}
 800e648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e64c:	2920      	cmp	r1, #32
 800e64e:	d1cd      	bne.n	800e5ec <_strtod_l+0x34>
 800e650:	3201      	adds	r2, #1
 800e652:	e7c0      	b.n	800e5d6 <_strtod_l+0x1e>
 800e654:	292d      	cmp	r1, #45	@ 0x2d
 800e656:	d1c9      	bne.n	800e5ec <_strtod_l+0x34>
 800e658:	2101      	movs	r1, #1
 800e65a:	9108      	str	r1, [sp, #32]
 800e65c:	1c51      	adds	r1, r2, #1
 800e65e:	9111      	str	r1, [sp, #68]	@ 0x44
 800e660:	7852      	ldrb	r2, [r2, #1]
 800e662:	2a00      	cmp	r2, #0
 800e664:	d1c4      	bne.n	800e5f0 <_strtod_l+0x38>
 800e666:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e668:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f040 850f 	bne.w	800f090 <_strtod_l+0xad8>
 800e672:	ec4b ab10 	vmov	d0, sl, fp
 800e676:	e7e4      	b.n	800e642 <_strtod_l+0x8a>
 800e678:	2100      	movs	r1, #0
 800e67a:	e7ee      	b.n	800e65a <_strtod_l+0xa2>
 800e67c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e67e:	b13a      	cbz	r2, 800e690 <_strtod_l+0xd8>
 800e680:	2135      	movs	r1, #53	@ 0x35
 800e682:	a814      	add	r0, sp, #80	@ 0x50
 800e684:	f003 fb77 	bl	8011d76 <__copybits>
 800e688:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e68a:	9805      	ldr	r0, [sp, #20]
 800e68c:	f002 ff48 	bl	8011520 <_Bfree>
 800e690:	1e73      	subs	r3, r6, #1
 800e692:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e694:	2b04      	cmp	r3, #4
 800e696:	d806      	bhi.n	800e6a6 <_strtod_l+0xee>
 800e698:	e8df f003 	tbb	[pc, r3]
 800e69c:	201d0314 	.word	0x201d0314
 800e6a0:	14          	.byte	0x14
 800e6a1:	00          	.byte	0x00
 800e6a2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800e6a6:	05e3      	lsls	r3, r4, #23
 800e6a8:	bf48      	it	mi
 800e6aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e6ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e6b2:	0d1b      	lsrs	r3, r3, #20
 800e6b4:	051b      	lsls	r3, r3, #20
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1b9      	bne.n	800e62e <_strtod_l+0x76>
 800e6ba:	f001 fd2f 	bl	801011c <__errno>
 800e6be:	2322      	movs	r3, #34	@ 0x22
 800e6c0:	6003      	str	r3, [r0, #0]
 800e6c2:	e7b4      	b.n	800e62e <_strtod_l+0x76>
 800e6c4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800e6c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e6cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e6d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e6d4:	e7e7      	b.n	800e6a6 <_strtod_l+0xee>
 800e6d6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800e844 <_strtod_l+0x28c>
 800e6da:	e7e4      	b.n	800e6a6 <_strtod_l+0xee>
 800e6dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e6e0:	f04f 3aff 	mov.w	sl, #4294967295
 800e6e4:	e7df      	b.n	800e6a6 <_strtod_l+0xee>
 800e6e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e6e8:	1c5a      	adds	r2, r3, #1
 800e6ea:	9211      	str	r2, [sp, #68]	@ 0x44
 800e6ec:	785b      	ldrb	r3, [r3, #1]
 800e6ee:	2b30      	cmp	r3, #48	@ 0x30
 800e6f0:	d0f9      	beq.n	800e6e6 <_strtod_l+0x12e>
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d09b      	beq.n	800e62e <_strtod_l+0x76>
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	2600      	movs	r6, #0
 800e6fa:	9307      	str	r3, [sp, #28]
 800e6fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e6fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800e700:	46b1      	mov	r9, r6
 800e702:	4635      	mov	r5, r6
 800e704:	220a      	movs	r2, #10
 800e706:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e708:	7804      	ldrb	r4, [r0, #0]
 800e70a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e70e:	b2d9      	uxtb	r1, r3
 800e710:	2909      	cmp	r1, #9
 800e712:	d929      	bls.n	800e768 <_strtod_l+0x1b0>
 800e714:	494a      	ldr	r1, [pc, #296]	@ (800e840 <_strtod_l+0x288>)
 800e716:	2201      	movs	r2, #1
 800e718:	f001 fc94 	bl	8010044 <strncmp>
 800e71c:	b378      	cbz	r0, 800e77e <_strtod_l+0x1c6>
 800e71e:	2000      	movs	r0, #0
 800e720:	4622      	mov	r2, r4
 800e722:	462b      	mov	r3, r5
 800e724:	4607      	mov	r7, r0
 800e726:	9006      	str	r0, [sp, #24]
 800e728:	2a65      	cmp	r2, #101	@ 0x65
 800e72a:	d001      	beq.n	800e730 <_strtod_l+0x178>
 800e72c:	2a45      	cmp	r2, #69	@ 0x45
 800e72e:	d117      	bne.n	800e760 <_strtod_l+0x1a8>
 800e730:	b91b      	cbnz	r3, 800e73a <_strtod_l+0x182>
 800e732:	9b07      	ldr	r3, [sp, #28]
 800e734:	4303      	orrs	r3, r0
 800e736:	d096      	beq.n	800e666 <_strtod_l+0xae>
 800e738:	2300      	movs	r3, #0
 800e73a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800e73e:	f108 0201 	add.w	r2, r8, #1
 800e742:	9211      	str	r2, [sp, #68]	@ 0x44
 800e744:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e748:	2a2b      	cmp	r2, #43	@ 0x2b
 800e74a:	d06b      	beq.n	800e824 <_strtod_l+0x26c>
 800e74c:	2a2d      	cmp	r2, #45	@ 0x2d
 800e74e:	d071      	beq.n	800e834 <_strtod_l+0x27c>
 800e750:	f04f 0e00 	mov.w	lr, #0
 800e754:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e758:	2c09      	cmp	r4, #9
 800e75a:	d979      	bls.n	800e850 <_strtod_l+0x298>
 800e75c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e760:	2400      	movs	r4, #0
 800e762:	e094      	b.n	800e88e <_strtod_l+0x2d6>
 800e764:	2300      	movs	r3, #0
 800e766:	e7c7      	b.n	800e6f8 <_strtod_l+0x140>
 800e768:	2d08      	cmp	r5, #8
 800e76a:	f100 0001 	add.w	r0, r0, #1
 800e76e:	bfd4      	ite	le
 800e770:	fb02 3909 	mlale	r9, r2, r9, r3
 800e774:	fb02 3606 	mlagt	r6, r2, r6, r3
 800e778:	3501      	adds	r5, #1
 800e77a:	9011      	str	r0, [sp, #68]	@ 0x44
 800e77c:	e7c3      	b.n	800e706 <_strtod_l+0x14e>
 800e77e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e780:	1c5a      	adds	r2, r3, #1
 800e782:	9211      	str	r2, [sp, #68]	@ 0x44
 800e784:	785a      	ldrb	r2, [r3, #1]
 800e786:	b375      	cbz	r5, 800e7e6 <_strtod_l+0x22e>
 800e788:	4607      	mov	r7, r0
 800e78a:	462b      	mov	r3, r5
 800e78c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e790:	2909      	cmp	r1, #9
 800e792:	d913      	bls.n	800e7bc <_strtod_l+0x204>
 800e794:	2101      	movs	r1, #1
 800e796:	9106      	str	r1, [sp, #24]
 800e798:	e7c6      	b.n	800e728 <_strtod_l+0x170>
 800e79a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e79c:	1c5a      	adds	r2, r3, #1
 800e79e:	9211      	str	r2, [sp, #68]	@ 0x44
 800e7a0:	785a      	ldrb	r2, [r3, #1]
 800e7a2:	3001      	adds	r0, #1
 800e7a4:	2a30      	cmp	r2, #48	@ 0x30
 800e7a6:	d0f8      	beq.n	800e79a <_strtod_l+0x1e2>
 800e7a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e7ac:	2b08      	cmp	r3, #8
 800e7ae:	f200 8476 	bhi.w	800f09e <_strtod_l+0xae6>
 800e7b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e7b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7b6:	4607      	mov	r7, r0
 800e7b8:	2000      	movs	r0, #0
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	3a30      	subs	r2, #48	@ 0x30
 800e7be:	f100 0101 	add.w	r1, r0, #1
 800e7c2:	d023      	beq.n	800e80c <_strtod_l+0x254>
 800e7c4:	440f      	add	r7, r1
 800e7c6:	eb00 0c03 	add.w	ip, r0, r3
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	240a      	movs	r4, #10
 800e7ce:	4561      	cmp	r1, ip
 800e7d0:	d10b      	bne.n	800e7ea <_strtod_l+0x232>
 800e7d2:	1c5c      	adds	r4, r3, #1
 800e7d4:	4403      	add	r3, r0
 800e7d6:	2b08      	cmp	r3, #8
 800e7d8:	4404      	add	r4, r0
 800e7da:	dc11      	bgt.n	800e800 <_strtod_l+0x248>
 800e7dc:	230a      	movs	r3, #10
 800e7de:	fb03 2909 	mla	r9, r3, r9, r2
 800e7e2:	2100      	movs	r1, #0
 800e7e4:	e013      	b.n	800e80e <_strtod_l+0x256>
 800e7e6:	4628      	mov	r0, r5
 800e7e8:	e7dc      	b.n	800e7a4 <_strtod_l+0x1ec>
 800e7ea:	2908      	cmp	r1, #8
 800e7ec:	f101 0101 	add.w	r1, r1, #1
 800e7f0:	dc02      	bgt.n	800e7f8 <_strtod_l+0x240>
 800e7f2:	fb04 f909 	mul.w	r9, r4, r9
 800e7f6:	e7ea      	b.n	800e7ce <_strtod_l+0x216>
 800e7f8:	2910      	cmp	r1, #16
 800e7fa:	bfd8      	it	le
 800e7fc:	4366      	mulle	r6, r4
 800e7fe:	e7e6      	b.n	800e7ce <_strtod_l+0x216>
 800e800:	2b0f      	cmp	r3, #15
 800e802:	dcee      	bgt.n	800e7e2 <_strtod_l+0x22a>
 800e804:	230a      	movs	r3, #10
 800e806:	fb03 2606 	mla	r6, r3, r6, r2
 800e80a:	e7ea      	b.n	800e7e2 <_strtod_l+0x22a>
 800e80c:	461c      	mov	r4, r3
 800e80e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e810:	1c5a      	adds	r2, r3, #1
 800e812:	9211      	str	r2, [sp, #68]	@ 0x44
 800e814:	785a      	ldrb	r2, [r3, #1]
 800e816:	4608      	mov	r0, r1
 800e818:	4623      	mov	r3, r4
 800e81a:	e7b7      	b.n	800e78c <_strtod_l+0x1d4>
 800e81c:	2301      	movs	r3, #1
 800e81e:	2700      	movs	r7, #0
 800e820:	9306      	str	r3, [sp, #24]
 800e822:	e786      	b.n	800e732 <_strtod_l+0x17a>
 800e824:	f04f 0e00 	mov.w	lr, #0
 800e828:	f108 0202 	add.w	r2, r8, #2
 800e82c:	9211      	str	r2, [sp, #68]	@ 0x44
 800e82e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e832:	e78f      	b.n	800e754 <_strtod_l+0x19c>
 800e834:	f04f 0e01 	mov.w	lr, #1
 800e838:	e7f6      	b.n	800e828 <_strtod_l+0x270>
 800e83a:	bf00      	nop
 800e83c:	080132e8 	.word	0x080132e8
 800e840:	080132d0 	.word	0x080132d0
 800e844:	7ff00000 	.word	0x7ff00000
 800e848:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e84a:	1c54      	adds	r4, r2, #1
 800e84c:	9411      	str	r4, [sp, #68]	@ 0x44
 800e84e:	7852      	ldrb	r2, [r2, #1]
 800e850:	2a30      	cmp	r2, #48	@ 0x30
 800e852:	d0f9      	beq.n	800e848 <_strtod_l+0x290>
 800e854:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e858:	2c08      	cmp	r4, #8
 800e85a:	d881      	bhi.n	800e760 <_strtod_l+0x1a8>
 800e85c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e860:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e862:	9209      	str	r2, [sp, #36]	@ 0x24
 800e864:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e866:	1c51      	adds	r1, r2, #1
 800e868:	9111      	str	r1, [sp, #68]	@ 0x44
 800e86a:	7852      	ldrb	r2, [r2, #1]
 800e86c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e870:	2c09      	cmp	r4, #9
 800e872:	d938      	bls.n	800e8e6 <_strtod_l+0x32e>
 800e874:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e876:	1b0c      	subs	r4, r1, r4
 800e878:	2c08      	cmp	r4, #8
 800e87a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800e87e:	dc02      	bgt.n	800e886 <_strtod_l+0x2ce>
 800e880:	4564      	cmp	r4, ip
 800e882:	bfa8      	it	ge
 800e884:	4664      	movge	r4, ip
 800e886:	f1be 0f00 	cmp.w	lr, #0
 800e88a:	d000      	beq.n	800e88e <_strtod_l+0x2d6>
 800e88c:	4264      	negs	r4, r4
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d14e      	bne.n	800e930 <_strtod_l+0x378>
 800e892:	9b07      	ldr	r3, [sp, #28]
 800e894:	4318      	orrs	r0, r3
 800e896:	f47f aeca 	bne.w	800e62e <_strtod_l+0x76>
 800e89a:	9b06      	ldr	r3, [sp, #24]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f47f aee2 	bne.w	800e666 <_strtod_l+0xae>
 800e8a2:	2a69      	cmp	r2, #105	@ 0x69
 800e8a4:	d027      	beq.n	800e8f6 <_strtod_l+0x33e>
 800e8a6:	dc24      	bgt.n	800e8f2 <_strtod_l+0x33a>
 800e8a8:	2a49      	cmp	r2, #73	@ 0x49
 800e8aa:	d024      	beq.n	800e8f6 <_strtod_l+0x33e>
 800e8ac:	2a4e      	cmp	r2, #78	@ 0x4e
 800e8ae:	f47f aeda 	bne.w	800e666 <_strtod_l+0xae>
 800e8b2:	4997      	ldr	r1, [pc, #604]	@ (800eb10 <_strtod_l+0x558>)
 800e8b4:	a811      	add	r0, sp, #68	@ 0x44
 800e8b6:	f002 fd31 	bl	801131c <__match>
 800e8ba:	2800      	cmp	r0, #0
 800e8bc:	f43f aed3 	beq.w	800e666 <_strtod_l+0xae>
 800e8c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	2b28      	cmp	r3, #40	@ 0x28
 800e8c6:	d12d      	bne.n	800e924 <_strtod_l+0x36c>
 800e8c8:	4992      	ldr	r1, [pc, #584]	@ (800eb14 <_strtod_l+0x55c>)
 800e8ca:	aa14      	add	r2, sp, #80	@ 0x50
 800e8cc:	a811      	add	r0, sp, #68	@ 0x44
 800e8ce:	f002 fd39 	bl	8011344 <__hexnan>
 800e8d2:	2805      	cmp	r0, #5
 800e8d4:	d126      	bne.n	800e924 <_strtod_l+0x36c>
 800e8d6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e8d8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e8dc:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e8e0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e8e4:	e6a3      	b.n	800e62e <_strtod_l+0x76>
 800e8e6:	240a      	movs	r4, #10
 800e8e8:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e8ec:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e8f0:	e7b8      	b.n	800e864 <_strtod_l+0x2ac>
 800e8f2:	2a6e      	cmp	r2, #110	@ 0x6e
 800e8f4:	e7db      	b.n	800e8ae <_strtod_l+0x2f6>
 800e8f6:	4988      	ldr	r1, [pc, #544]	@ (800eb18 <_strtod_l+0x560>)
 800e8f8:	a811      	add	r0, sp, #68	@ 0x44
 800e8fa:	f002 fd0f 	bl	801131c <__match>
 800e8fe:	2800      	cmp	r0, #0
 800e900:	f43f aeb1 	beq.w	800e666 <_strtod_l+0xae>
 800e904:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e906:	4985      	ldr	r1, [pc, #532]	@ (800eb1c <_strtod_l+0x564>)
 800e908:	3b01      	subs	r3, #1
 800e90a:	a811      	add	r0, sp, #68	@ 0x44
 800e90c:	9311      	str	r3, [sp, #68]	@ 0x44
 800e90e:	f002 fd05 	bl	801131c <__match>
 800e912:	b910      	cbnz	r0, 800e91a <_strtod_l+0x362>
 800e914:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e916:	3301      	adds	r3, #1
 800e918:	9311      	str	r3, [sp, #68]	@ 0x44
 800e91a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800eb30 <_strtod_l+0x578>
 800e91e:	f04f 0a00 	mov.w	sl, #0
 800e922:	e684      	b.n	800e62e <_strtod_l+0x76>
 800e924:	487e      	ldr	r0, [pc, #504]	@ (800eb20 <_strtod_l+0x568>)
 800e926:	f001 fc37 	bl	8010198 <nan>
 800e92a:	ec5b ab10 	vmov	sl, fp, d0
 800e92e:	e67e      	b.n	800e62e <_strtod_l+0x76>
 800e930:	ee07 9a90 	vmov	s15, r9
 800e934:	1be2      	subs	r2, r4, r7
 800e936:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e93a:	2d00      	cmp	r5, #0
 800e93c:	bf08      	it	eq
 800e93e:	461d      	moveq	r5, r3
 800e940:	2b10      	cmp	r3, #16
 800e942:	9209      	str	r2, [sp, #36]	@ 0x24
 800e944:	461a      	mov	r2, r3
 800e946:	bfa8      	it	ge
 800e948:	2210      	movge	r2, #16
 800e94a:	2b09      	cmp	r3, #9
 800e94c:	ec5b ab17 	vmov	sl, fp, d7
 800e950:	dc15      	bgt.n	800e97e <_strtod_l+0x3c6>
 800e952:	1be1      	subs	r1, r4, r7
 800e954:	2900      	cmp	r1, #0
 800e956:	f43f ae6a 	beq.w	800e62e <_strtod_l+0x76>
 800e95a:	eba4 0107 	sub.w	r1, r4, r7
 800e95e:	dd72      	ble.n	800ea46 <_strtod_l+0x48e>
 800e960:	2916      	cmp	r1, #22
 800e962:	dc59      	bgt.n	800ea18 <_strtod_l+0x460>
 800e964:	4b6f      	ldr	r3, [pc, #444]	@ (800eb24 <_strtod_l+0x56c>)
 800e966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e96c:	ed93 7b00 	vldr	d7, [r3]
 800e970:	ec4b ab16 	vmov	d6, sl, fp
 800e974:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e978:	ec5b ab17 	vmov	sl, fp, d7
 800e97c:	e657      	b.n	800e62e <_strtod_l+0x76>
 800e97e:	4969      	ldr	r1, [pc, #420]	@ (800eb24 <_strtod_l+0x56c>)
 800e980:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e984:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e988:	ee06 6a90 	vmov	s13, r6
 800e98c:	2b0f      	cmp	r3, #15
 800e98e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e992:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e996:	ec5b ab16 	vmov	sl, fp, d6
 800e99a:	ddda      	ble.n	800e952 <_strtod_l+0x39a>
 800e99c:	1a9a      	subs	r2, r3, r2
 800e99e:	1be1      	subs	r1, r4, r7
 800e9a0:	440a      	add	r2, r1
 800e9a2:	2a00      	cmp	r2, #0
 800e9a4:	f340 8094 	ble.w	800ead0 <_strtod_l+0x518>
 800e9a8:	f012 000f 	ands.w	r0, r2, #15
 800e9ac:	d00a      	beq.n	800e9c4 <_strtod_l+0x40c>
 800e9ae:	495d      	ldr	r1, [pc, #372]	@ (800eb24 <_strtod_l+0x56c>)
 800e9b0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e9b4:	ed91 7b00 	vldr	d7, [r1]
 800e9b8:	ec4b ab16 	vmov	d6, sl, fp
 800e9bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e9c0:	ec5b ab17 	vmov	sl, fp, d7
 800e9c4:	f032 020f 	bics.w	r2, r2, #15
 800e9c8:	d073      	beq.n	800eab2 <_strtod_l+0x4fa>
 800e9ca:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e9ce:	dd47      	ble.n	800ea60 <_strtod_l+0x4a8>
 800e9d0:	2400      	movs	r4, #0
 800e9d2:	4625      	mov	r5, r4
 800e9d4:	9407      	str	r4, [sp, #28]
 800e9d6:	4626      	mov	r6, r4
 800e9d8:	9a05      	ldr	r2, [sp, #20]
 800e9da:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800eb30 <_strtod_l+0x578>
 800e9de:	2322      	movs	r3, #34	@ 0x22
 800e9e0:	6013      	str	r3, [r2, #0]
 800e9e2:	f04f 0a00 	mov.w	sl, #0
 800e9e6:	9b07      	ldr	r3, [sp, #28]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f43f ae20 	beq.w	800e62e <_strtod_l+0x76>
 800e9ee:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e9f0:	9805      	ldr	r0, [sp, #20]
 800e9f2:	f002 fd95 	bl	8011520 <_Bfree>
 800e9f6:	9805      	ldr	r0, [sp, #20]
 800e9f8:	4631      	mov	r1, r6
 800e9fa:	f002 fd91 	bl	8011520 <_Bfree>
 800e9fe:	9805      	ldr	r0, [sp, #20]
 800ea00:	4629      	mov	r1, r5
 800ea02:	f002 fd8d 	bl	8011520 <_Bfree>
 800ea06:	9907      	ldr	r1, [sp, #28]
 800ea08:	9805      	ldr	r0, [sp, #20]
 800ea0a:	f002 fd89 	bl	8011520 <_Bfree>
 800ea0e:	9805      	ldr	r0, [sp, #20]
 800ea10:	4621      	mov	r1, r4
 800ea12:	f002 fd85 	bl	8011520 <_Bfree>
 800ea16:	e60a      	b.n	800e62e <_strtod_l+0x76>
 800ea18:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800ea1c:	1be0      	subs	r0, r4, r7
 800ea1e:	4281      	cmp	r1, r0
 800ea20:	dbbc      	blt.n	800e99c <_strtod_l+0x3e4>
 800ea22:	4a40      	ldr	r2, [pc, #256]	@ (800eb24 <_strtod_l+0x56c>)
 800ea24:	f1c3 030f 	rsb	r3, r3, #15
 800ea28:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ea2c:	ed91 7b00 	vldr	d7, [r1]
 800ea30:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea32:	ec4b ab16 	vmov	d6, sl, fp
 800ea36:	1acb      	subs	r3, r1, r3
 800ea38:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ea3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea40:	ed92 6b00 	vldr	d6, [r2]
 800ea44:	e796      	b.n	800e974 <_strtod_l+0x3bc>
 800ea46:	3116      	adds	r1, #22
 800ea48:	dba8      	blt.n	800e99c <_strtod_l+0x3e4>
 800ea4a:	4b36      	ldr	r3, [pc, #216]	@ (800eb24 <_strtod_l+0x56c>)
 800ea4c:	1b3c      	subs	r4, r7, r4
 800ea4e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ea52:	ed94 7b00 	vldr	d7, [r4]
 800ea56:	ec4b ab16 	vmov	d6, sl, fp
 800ea5a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ea5e:	e78b      	b.n	800e978 <_strtod_l+0x3c0>
 800ea60:	2000      	movs	r0, #0
 800ea62:	ec4b ab17 	vmov	d7, sl, fp
 800ea66:	4e30      	ldr	r6, [pc, #192]	@ (800eb28 <_strtod_l+0x570>)
 800ea68:	1112      	asrs	r2, r2, #4
 800ea6a:	4601      	mov	r1, r0
 800ea6c:	2a01      	cmp	r2, #1
 800ea6e:	dc23      	bgt.n	800eab8 <_strtod_l+0x500>
 800ea70:	b108      	cbz	r0, 800ea76 <_strtod_l+0x4be>
 800ea72:	ec5b ab17 	vmov	sl, fp, d7
 800ea76:	4a2c      	ldr	r2, [pc, #176]	@ (800eb28 <_strtod_l+0x570>)
 800ea78:	482c      	ldr	r0, [pc, #176]	@ (800eb2c <_strtod_l+0x574>)
 800ea7a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ea7e:	ed92 7b00 	vldr	d7, [r2]
 800ea82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ea86:	ec4b ab16 	vmov	d6, sl, fp
 800ea8a:	4a29      	ldr	r2, [pc, #164]	@ (800eb30 <_strtod_l+0x578>)
 800ea8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea90:	ee17 1a90 	vmov	r1, s15
 800ea94:	400a      	ands	r2, r1
 800ea96:	4282      	cmp	r2, r0
 800ea98:	ec5b ab17 	vmov	sl, fp, d7
 800ea9c:	d898      	bhi.n	800e9d0 <_strtod_l+0x418>
 800ea9e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800eaa2:	4282      	cmp	r2, r0
 800eaa4:	bf86      	itte	hi
 800eaa6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800eb34 <_strtod_l+0x57c>
 800eaaa:	f04f 3aff 	movhi.w	sl, #4294967295
 800eaae:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800eab2:	2200      	movs	r2, #0
 800eab4:	9206      	str	r2, [sp, #24]
 800eab6:	e076      	b.n	800eba6 <_strtod_l+0x5ee>
 800eab8:	f012 0f01 	tst.w	r2, #1
 800eabc:	d004      	beq.n	800eac8 <_strtod_l+0x510>
 800eabe:	ed96 6b00 	vldr	d6, [r6]
 800eac2:	2001      	movs	r0, #1
 800eac4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eac8:	3101      	adds	r1, #1
 800eaca:	1052      	asrs	r2, r2, #1
 800eacc:	3608      	adds	r6, #8
 800eace:	e7cd      	b.n	800ea6c <_strtod_l+0x4b4>
 800ead0:	d0ef      	beq.n	800eab2 <_strtod_l+0x4fa>
 800ead2:	4252      	negs	r2, r2
 800ead4:	f012 000f 	ands.w	r0, r2, #15
 800ead8:	d00a      	beq.n	800eaf0 <_strtod_l+0x538>
 800eada:	4912      	ldr	r1, [pc, #72]	@ (800eb24 <_strtod_l+0x56c>)
 800eadc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800eae0:	ed91 7b00 	vldr	d7, [r1]
 800eae4:	ec4b ab16 	vmov	d6, sl, fp
 800eae8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800eaec:	ec5b ab17 	vmov	sl, fp, d7
 800eaf0:	1112      	asrs	r2, r2, #4
 800eaf2:	d0de      	beq.n	800eab2 <_strtod_l+0x4fa>
 800eaf4:	2a1f      	cmp	r2, #31
 800eaf6:	dd1f      	ble.n	800eb38 <_strtod_l+0x580>
 800eaf8:	2400      	movs	r4, #0
 800eafa:	4625      	mov	r5, r4
 800eafc:	9407      	str	r4, [sp, #28]
 800eafe:	4626      	mov	r6, r4
 800eb00:	9a05      	ldr	r2, [sp, #20]
 800eb02:	2322      	movs	r3, #34	@ 0x22
 800eb04:	f04f 0a00 	mov.w	sl, #0
 800eb08:	f04f 0b00 	mov.w	fp, #0
 800eb0c:	6013      	str	r3, [r2, #0]
 800eb0e:	e76a      	b.n	800e9e6 <_strtod_l+0x42e>
 800eb10:	08013335 	.word	0x08013335
 800eb14:	080132d4 	.word	0x080132d4
 800eb18:	0801332d 	.word	0x0801332d
 800eb1c:	0801336a 	.word	0x0801336a
 800eb20:	08013718 	.word	0x08013718
 800eb24:	080134e8 	.word	0x080134e8
 800eb28:	080134c0 	.word	0x080134c0
 800eb2c:	7ca00000 	.word	0x7ca00000
 800eb30:	7ff00000 	.word	0x7ff00000
 800eb34:	7fefffff 	.word	0x7fefffff
 800eb38:	f012 0110 	ands.w	r1, r2, #16
 800eb3c:	bf18      	it	ne
 800eb3e:	216a      	movne	r1, #106	@ 0x6a
 800eb40:	9106      	str	r1, [sp, #24]
 800eb42:	ec4b ab17 	vmov	d7, sl, fp
 800eb46:	49b0      	ldr	r1, [pc, #704]	@ (800ee08 <_strtod_l+0x850>)
 800eb48:	2000      	movs	r0, #0
 800eb4a:	07d6      	lsls	r6, r2, #31
 800eb4c:	d504      	bpl.n	800eb58 <_strtod_l+0x5a0>
 800eb4e:	ed91 6b00 	vldr	d6, [r1]
 800eb52:	2001      	movs	r0, #1
 800eb54:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eb58:	1052      	asrs	r2, r2, #1
 800eb5a:	f101 0108 	add.w	r1, r1, #8
 800eb5e:	d1f4      	bne.n	800eb4a <_strtod_l+0x592>
 800eb60:	b108      	cbz	r0, 800eb66 <_strtod_l+0x5ae>
 800eb62:	ec5b ab17 	vmov	sl, fp, d7
 800eb66:	9a06      	ldr	r2, [sp, #24]
 800eb68:	b1b2      	cbz	r2, 800eb98 <_strtod_l+0x5e0>
 800eb6a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800eb6e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800eb72:	2a00      	cmp	r2, #0
 800eb74:	4658      	mov	r0, fp
 800eb76:	dd0f      	ble.n	800eb98 <_strtod_l+0x5e0>
 800eb78:	2a1f      	cmp	r2, #31
 800eb7a:	dd55      	ble.n	800ec28 <_strtod_l+0x670>
 800eb7c:	2a34      	cmp	r2, #52	@ 0x34
 800eb7e:	bfde      	ittt	le
 800eb80:	f04f 32ff 	movle.w	r2, #4294967295
 800eb84:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800eb88:	408a      	lslle	r2, r1
 800eb8a:	f04f 0a00 	mov.w	sl, #0
 800eb8e:	bfcc      	ite	gt
 800eb90:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800eb94:	ea02 0b00 	andle.w	fp, r2, r0
 800eb98:	ec4b ab17 	vmov	d7, sl, fp
 800eb9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba4:	d0a8      	beq.n	800eaf8 <_strtod_l+0x540>
 800eba6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eba8:	9805      	ldr	r0, [sp, #20]
 800ebaa:	f8cd 9000 	str.w	r9, [sp]
 800ebae:	462a      	mov	r2, r5
 800ebb0:	f002 fd1e 	bl	80115f0 <__s2b>
 800ebb4:	9007      	str	r0, [sp, #28]
 800ebb6:	2800      	cmp	r0, #0
 800ebb8:	f43f af0a 	beq.w	800e9d0 <_strtod_l+0x418>
 800ebbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebbe:	1b3f      	subs	r7, r7, r4
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	bfb4      	ite	lt
 800ebc4:	463b      	movlt	r3, r7
 800ebc6:	2300      	movge	r3, #0
 800ebc8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebcc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800edf8 <_strtod_l+0x840>
 800ebd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ebd4:	2400      	movs	r4, #0
 800ebd6:	930d      	str	r3, [sp, #52]	@ 0x34
 800ebd8:	4625      	mov	r5, r4
 800ebda:	9b07      	ldr	r3, [sp, #28]
 800ebdc:	9805      	ldr	r0, [sp, #20]
 800ebde:	6859      	ldr	r1, [r3, #4]
 800ebe0:	f002 fc5e 	bl	80114a0 <_Balloc>
 800ebe4:	4606      	mov	r6, r0
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	f43f aef6 	beq.w	800e9d8 <_strtod_l+0x420>
 800ebec:	9b07      	ldr	r3, [sp, #28]
 800ebee:	691a      	ldr	r2, [r3, #16]
 800ebf0:	ec4b ab19 	vmov	d9, sl, fp
 800ebf4:	3202      	adds	r2, #2
 800ebf6:	f103 010c 	add.w	r1, r3, #12
 800ebfa:	0092      	lsls	r2, r2, #2
 800ebfc:	300c      	adds	r0, #12
 800ebfe:	f001 faba 	bl	8010176 <memcpy>
 800ec02:	eeb0 0b49 	vmov.f64	d0, d9
 800ec06:	9805      	ldr	r0, [sp, #20]
 800ec08:	aa14      	add	r2, sp, #80	@ 0x50
 800ec0a:	a913      	add	r1, sp, #76	@ 0x4c
 800ec0c:	f003 f82c 	bl	8011c68 <__d2b>
 800ec10:	9012      	str	r0, [sp, #72]	@ 0x48
 800ec12:	2800      	cmp	r0, #0
 800ec14:	f43f aee0 	beq.w	800e9d8 <_strtod_l+0x420>
 800ec18:	9805      	ldr	r0, [sp, #20]
 800ec1a:	2101      	movs	r1, #1
 800ec1c:	f002 fd7e 	bl	801171c <__i2b>
 800ec20:	4605      	mov	r5, r0
 800ec22:	b940      	cbnz	r0, 800ec36 <_strtod_l+0x67e>
 800ec24:	2500      	movs	r5, #0
 800ec26:	e6d7      	b.n	800e9d8 <_strtod_l+0x420>
 800ec28:	f04f 31ff 	mov.w	r1, #4294967295
 800ec2c:	fa01 f202 	lsl.w	r2, r1, r2
 800ec30:	ea02 0a0a 	and.w	sl, r2, sl
 800ec34:	e7b0      	b.n	800eb98 <_strtod_l+0x5e0>
 800ec36:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800ec38:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ec3a:	2f00      	cmp	r7, #0
 800ec3c:	bfab      	itete	ge
 800ec3e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800ec40:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800ec42:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800ec46:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800ec4a:	bfac      	ite	ge
 800ec4c:	eb07 0903 	addge.w	r9, r7, r3
 800ec50:	eba3 0807 	sublt.w	r8, r3, r7
 800ec54:	9b06      	ldr	r3, [sp, #24]
 800ec56:	1aff      	subs	r7, r7, r3
 800ec58:	4417      	add	r7, r2
 800ec5a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800ec5e:	4a6b      	ldr	r2, [pc, #428]	@ (800ee0c <_strtod_l+0x854>)
 800ec60:	3f01      	subs	r7, #1
 800ec62:	4297      	cmp	r7, r2
 800ec64:	da51      	bge.n	800ed0a <_strtod_l+0x752>
 800ec66:	1bd1      	subs	r1, r2, r7
 800ec68:	291f      	cmp	r1, #31
 800ec6a:	eba3 0301 	sub.w	r3, r3, r1
 800ec6e:	f04f 0201 	mov.w	r2, #1
 800ec72:	dc3e      	bgt.n	800ecf2 <_strtod_l+0x73a>
 800ec74:	408a      	lsls	r2, r1
 800ec76:	920c      	str	r2, [sp, #48]	@ 0x30
 800ec78:	2200      	movs	r2, #0
 800ec7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ec7c:	eb09 0703 	add.w	r7, r9, r3
 800ec80:	4498      	add	r8, r3
 800ec82:	9b06      	ldr	r3, [sp, #24]
 800ec84:	45b9      	cmp	r9, r7
 800ec86:	4498      	add	r8, r3
 800ec88:	464b      	mov	r3, r9
 800ec8a:	bfa8      	it	ge
 800ec8c:	463b      	movge	r3, r7
 800ec8e:	4543      	cmp	r3, r8
 800ec90:	bfa8      	it	ge
 800ec92:	4643      	movge	r3, r8
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	bfc2      	ittt	gt
 800ec98:	1aff      	subgt	r7, r7, r3
 800ec9a:	eba8 0803 	subgt.w	r8, r8, r3
 800ec9e:	eba9 0903 	subgt.w	r9, r9, r3
 800eca2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	dd16      	ble.n	800ecd6 <_strtod_l+0x71e>
 800eca8:	4629      	mov	r1, r5
 800ecaa:	9805      	ldr	r0, [sp, #20]
 800ecac:	461a      	mov	r2, r3
 800ecae:	f002 fdf5 	bl	801189c <__pow5mult>
 800ecb2:	4605      	mov	r5, r0
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	d0b5      	beq.n	800ec24 <_strtod_l+0x66c>
 800ecb8:	4601      	mov	r1, r0
 800ecba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ecbc:	9805      	ldr	r0, [sp, #20]
 800ecbe:	f002 fd43 	bl	8011748 <__multiply>
 800ecc2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	f43f ae87 	beq.w	800e9d8 <_strtod_l+0x420>
 800ecca:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800eccc:	9805      	ldr	r0, [sp, #20]
 800ecce:	f002 fc27 	bl	8011520 <_Bfree>
 800ecd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecd4:	9312      	str	r3, [sp, #72]	@ 0x48
 800ecd6:	2f00      	cmp	r7, #0
 800ecd8:	dc1b      	bgt.n	800ed12 <_strtod_l+0x75a>
 800ecda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	dd21      	ble.n	800ed24 <_strtod_l+0x76c>
 800ece0:	4631      	mov	r1, r6
 800ece2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ece4:	9805      	ldr	r0, [sp, #20]
 800ece6:	f002 fdd9 	bl	801189c <__pow5mult>
 800ecea:	4606      	mov	r6, r0
 800ecec:	b9d0      	cbnz	r0, 800ed24 <_strtod_l+0x76c>
 800ecee:	2600      	movs	r6, #0
 800ecf0:	e672      	b.n	800e9d8 <_strtod_l+0x420>
 800ecf2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800ecf6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800ecfa:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800ecfe:	37e2      	adds	r7, #226	@ 0xe2
 800ed00:	fa02 f107 	lsl.w	r1, r2, r7
 800ed04:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ed06:	920c      	str	r2, [sp, #48]	@ 0x30
 800ed08:	e7b8      	b.n	800ec7c <_strtod_l+0x6c4>
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ed0e:	2201      	movs	r2, #1
 800ed10:	e7f9      	b.n	800ed06 <_strtod_l+0x74e>
 800ed12:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ed14:	9805      	ldr	r0, [sp, #20]
 800ed16:	463a      	mov	r2, r7
 800ed18:	f002 fe1a 	bl	8011950 <__lshift>
 800ed1c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ed1e:	2800      	cmp	r0, #0
 800ed20:	d1db      	bne.n	800ecda <_strtod_l+0x722>
 800ed22:	e659      	b.n	800e9d8 <_strtod_l+0x420>
 800ed24:	f1b8 0f00 	cmp.w	r8, #0
 800ed28:	dd07      	ble.n	800ed3a <_strtod_l+0x782>
 800ed2a:	4631      	mov	r1, r6
 800ed2c:	9805      	ldr	r0, [sp, #20]
 800ed2e:	4642      	mov	r2, r8
 800ed30:	f002 fe0e 	bl	8011950 <__lshift>
 800ed34:	4606      	mov	r6, r0
 800ed36:	2800      	cmp	r0, #0
 800ed38:	d0d9      	beq.n	800ecee <_strtod_l+0x736>
 800ed3a:	f1b9 0f00 	cmp.w	r9, #0
 800ed3e:	dd08      	ble.n	800ed52 <_strtod_l+0x79a>
 800ed40:	4629      	mov	r1, r5
 800ed42:	9805      	ldr	r0, [sp, #20]
 800ed44:	464a      	mov	r2, r9
 800ed46:	f002 fe03 	bl	8011950 <__lshift>
 800ed4a:	4605      	mov	r5, r0
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	f43f ae43 	beq.w	800e9d8 <_strtod_l+0x420>
 800ed52:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ed54:	9805      	ldr	r0, [sp, #20]
 800ed56:	4632      	mov	r2, r6
 800ed58:	f002 fe82 	bl	8011a60 <__mdiff>
 800ed5c:	4604      	mov	r4, r0
 800ed5e:	2800      	cmp	r0, #0
 800ed60:	f43f ae3a 	beq.w	800e9d8 <_strtod_l+0x420>
 800ed64:	2300      	movs	r3, #0
 800ed66:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800ed6a:	60c3      	str	r3, [r0, #12]
 800ed6c:	4629      	mov	r1, r5
 800ed6e:	f002 fe5b 	bl	8011a28 <__mcmp>
 800ed72:	2800      	cmp	r0, #0
 800ed74:	da4e      	bge.n	800ee14 <_strtod_l+0x85c>
 800ed76:	ea58 080a 	orrs.w	r8, r8, sl
 800ed7a:	d174      	bne.n	800ee66 <_strtod_l+0x8ae>
 800ed7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d170      	bne.n	800ee66 <_strtod_l+0x8ae>
 800ed84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed88:	0d1b      	lsrs	r3, r3, #20
 800ed8a:	051b      	lsls	r3, r3, #20
 800ed8c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ed90:	d969      	bls.n	800ee66 <_strtod_l+0x8ae>
 800ed92:	6963      	ldr	r3, [r4, #20]
 800ed94:	b913      	cbnz	r3, 800ed9c <_strtod_l+0x7e4>
 800ed96:	6923      	ldr	r3, [r4, #16]
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	dd64      	ble.n	800ee66 <_strtod_l+0x8ae>
 800ed9c:	4621      	mov	r1, r4
 800ed9e:	2201      	movs	r2, #1
 800eda0:	9805      	ldr	r0, [sp, #20]
 800eda2:	f002 fdd5 	bl	8011950 <__lshift>
 800eda6:	4629      	mov	r1, r5
 800eda8:	4604      	mov	r4, r0
 800edaa:	f002 fe3d 	bl	8011a28 <__mcmp>
 800edae:	2800      	cmp	r0, #0
 800edb0:	dd59      	ble.n	800ee66 <_strtod_l+0x8ae>
 800edb2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800edb6:	9a06      	ldr	r2, [sp, #24]
 800edb8:	0d1b      	lsrs	r3, r3, #20
 800edba:	051b      	lsls	r3, r3, #20
 800edbc:	2a00      	cmp	r2, #0
 800edbe:	d070      	beq.n	800eea2 <_strtod_l+0x8ea>
 800edc0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800edc4:	d86d      	bhi.n	800eea2 <_strtod_l+0x8ea>
 800edc6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800edca:	f67f ae99 	bls.w	800eb00 <_strtod_l+0x548>
 800edce:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800ee00 <_strtod_l+0x848>
 800edd2:	ec4b ab16 	vmov	d6, sl, fp
 800edd6:	4b0e      	ldr	r3, [pc, #56]	@ (800ee10 <_strtod_l+0x858>)
 800edd8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800eddc:	ee17 2a90 	vmov	r2, s15
 800ede0:	4013      	ands	r3, r2
 800ede2:	ec5b ab17 	vmov	sl, fp, d7
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	f47f ae01 	bne.w	800e9ee <_strtod_l+0x436>
 800edec:	9a05      	ldr	r2, [sp, #20]
 800edee:	2322      	movs	r3, #34	@ 0x22
 800edf0:	6013      	str	r3, [r2, #0]
 800edf2:	e5fc      	b.n	800e9ee <_strtod_l+0x436>
 800edf4:	f3af 8000 	nop.w
 800edf8:	ffc00000 	.word	0xffc00000
 800edfc:	41dfffff 	.word	0x41dfffff
 800ee00:	00000000 	.word	0x00000000
 800ee04:	39500000 	.word	0x39500000
 800ee08:	08013300 	.word	0x08013300
 800ee0c:	fffffc02 	.word	0xfffffc02
 800ee10:	7ff00000 	.word	0x7ff00000
 800ee14:	46d9      	mov	r9, fp
 800ee16:	d15d      	bne.n	800eed4 <_strtod_l+0x91c>
 800ee18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee1c:	f1b8 0f00 	cmp.w	r8, #0
 800ee20:	d02a      	beq.n	800ee78 <_strtod_l+0x8c0>
 800ee22:	4aab      	ldr	r2, [pc, #684]	@ (800f0d0 <_strtod_l+0xb18>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d12a      	bne.n	800ee7e <_strtod_l+0x8c6>
 800ee28:	9b06      	ldr	r3, [sp, #24]
 800ee2a:	4652      	mov	r2, sl
 800ee2c:	b1fb      	cbz	r3, 800ee6e <_strtod_l+0x8b6>
 800ee2e:	4ba9      	ldr	r3, [pc, #676]	@ (800f0d4 <_strtod_l+0xb1c>)
 800ee30:	ea0b 0303 	and.w	r3, fp, r3
 800ee34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ee38:	f04f 31ff 	mov.w	r1, #4294967295
 800ee3c:	d81a      	bhi.n	800ee74 <_strtod_l+0x8bc>
 800ee3e:	0d1b      	lsrs	r3, r3, #20
 800ee40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ee44:	fa01 f303 	lsl.w	r3, r1, r3
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d118      	bne.n	800ee7e <_strtod_l+0x8c6>
 800ee4c:	4ba2      	ldr	r3, [pc, #648]	@ (800f0d8 <_strtod_l+0xb20>)
 800ee4e:	4599      	cmp	r9, r3
 800ee50:	d102      	bne.n	800ee58 <_strtod_l+0x8a0>
 800ee52:	3201      	adds	r2, #1
 800ee54:	f43f adc0 	beq.w	800e9d8 <_strtod_l+0x420>
 800ee58:	4b9e      	ldr	r3, [pc, #632]	@ (800f0d4 <_strtod_l+0xb1c>)
 800ee5a:	ea09 0303 	and.w	r3, r9, r3
 800ee5e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ee62:	f04f 0a00 	mov.w	sl, #0
 800ee66:	9b06      	ldr	r3, [sp, #24]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1b0      	bne.n	800edce <_strtod_l+0x816>
 800ee6c:	e5bf      	b.n	800e9ee <_strtod_l+0x436>
 800ee6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee72:	e7e9      	b.n	800ee48 <_strtod_l+0x890>
 800ee74:	460b      	mov	r3, r1
 800ee76:	e7e7      	b.n	800ee48 <_strtod_l+0x890>
 800ee78:	ea53 030a 	orrs.w	r3, r3, sl
 800ee7c:	d099      	beq.n	800edb2 <_strtod_l+0x7fa>
 800ee7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee80:	b1c3      	cbz	r3, 800eeb4 <_strtod_l+0x8fc>
 800ee82:	ea13 0f09 	tst.w	r3, r9
 800ee86:	d0ee      	beq.n	800ee66 <_strtod_l+0x8ae>
 800ee88:	9a06      	ldr	r2, [sp, #24]
 800ee8a:	4650      	mov	r0, sl
 800ee8c:	4659      	mov	r1, fp
 800ee8e:	f1b8 0f00 	cmp.w	r8, #0
 800ee92:	d013      	beq.n	800eebc <_strtod_l+0x904>
 800ee94:	f7ff fb74 	bl	800e580 <sulp>
 800ee98:	ee39 7b00 	vadd.f64	d7, d9, d0
 800ee9c:	ec5b ab17 	vmov	sl, fp, d7
 800eea0:	e7e1      	b.n	800ee66 <_strtod_l+0x8ae>
 800eea2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800eea6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eeaa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eeae:	f04f 3aff 	mov.w	sl, #4294967295
 800eeb2:	e7d8      	b.n	800ee66 <_strtod_l+0x8ae>
 800eeb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eeb6:	ea13 0f0a 	tst.w	r3, sl
 800eeba:	e7e4      	b.n	800ee86 <_strtod_l+0x8ce>
 800eebc:	f7ff fb60 	bl	800e580 <sulp>
 800eec0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800eec4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800eec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eecc:	ec5b ab10 	vmov	sl, fp, d0
 800eed0:	d1c9      	bne.n	800ee66 <_strtod_l+0x8ae>
 800eed2:	e615      	b.n	800eb00 <_strtod_l+0x548>
 800eed4:	4629      	mov	r1, r5
 800eed6:	4620      	mov	r0, r4
 800eed8:	f002 ff1e 	bl	8011d18 <__ratio>
 800eedc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800eee0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800eee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eee8:	d85d      	bhi.n	800efa6 <_strtod_l+0x9ee>
 800eeea:	f1b8 0f00 	cmp.w	r8, #0
 800eeee:	d164      	bne.n	800efba <_strtod_l+0xa02>
 800eef0:	f1ba 0f00 	cmp.w	sl, #0
 800eef4:	d14b      	bne.n	800ef8e <_strtod_l+0x9d6>
 800eef6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eefa:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d160      	bne.n	800efc4 <_strtod_l+0xa0c>
 800ef02:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800ef06:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ef0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef0e:	d401      	bmi.n	800ef14 <_strtod_l+0x95c>
 800ef10:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ef14:	eeb1 ab48 	vneg.f64	d10, d8
 800ef18:	486e      	ldr	r0, [pc, #440]	@ (800f0d4 <_strtod_l+0xb1c>)
 800ef1a:	4970      	ldr	r1, [pc, #448]	@ (800f0dc <_strtod_l+0xb24>)
 800ef1c:	ea09 0700 	and.w	r7, r9, r0
 800ef20:	428f      	cmp	r7, r1
 800ef22:	ec53 2b1a 	vmov	r2, r3, d10
 800ef26:	d17d      	bne.n	800f024 <_strtod_l+0xa6c>
 800ef28:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800ef2c:	ec4b ab1c 	vmov	d12, sl, fp
 800ef30:	eeb0 0b4c 	vmov.f64	d0, d12
 800ef34:	f002 fe28 	bl	8011b88 <__ulp>
 800ef38:	4866      	ldr	r0, [pc, #408]	@ (800f0d4 <_strtod_l+0xb1c>)
 800ef3a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800ef3e:	ee1c 3a90 	vmov	r3, s25
 800ef42:	4a67      	ldr	r2, [pc, #412]	@ (800f0e0 <_strtod_l+0xb28>)
 800ef44:	ea03 0100 	and.w	r1, r3, r0
 800ef48:	4291      	cmp	r1, r2
 800ef4a:	ec5b ab1c 	vmov	sl, fp, d12
 800ef4e:	d93c      	bls.n	800efca <_strtod_l+0xa12>
 800ef50:	ee19 2a90 	vmov	r2, s19
 800ef54:	4b60      	ldr	r3, [pc, #384]	@ (800f0d8 <_strtod_l+0xb20>)
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d104      	bne.n	800ef64 <_strtod_l+0x9ac>
 800ef5a:	ee19 3a10 	vmov	r3, s18
 800ef5e:	3301      	adds	r3, #1
 800ef60:	f43f ad3a 	beq.w	800e9d8 <_strtod_l+0x420>
 800ef64:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800f0d8 <_strtod_l+0xb20>
 800ef68:	f04f 3aff 	mov.w	sl, #4294967295
 800ef6c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ef6e:	9805      	ldr	r0, [sp, #20]
 800ef70:	f002 fad6 	bl	8011520 <_Bfree>
 800ef74:	9805      	ldr	r0, [sp, #20]
 800ef76:	4631      	mov	r1, r6
 800ef78:	f002 fad2 	bl	8011520 <_Bfree>
 800ef7c:	9805      	ldr	r0, [sp, #20]
 800ef7e:	4629      	mov	r1, r5
 800ef80:	f002 face 	bl	8011520 <_Bfree>
 800ef84:	9805      	ldr	r0, [sp, #20]
 800ef86:	4621      	mov	r1, r4
 800ef88:	f002 faca 	bl	8011520 <_Bfree>
 800ef8c:	e625      	b.n	800ebda <_strtod_l+0x622>
 800ef8e:	f1ba 0f01 	cmp.w	sl, #1
 800ef92:	d103      	bne.n	800ef9c <_strtod_l+0x9e4>
 800ef94:	f1bb 0f00 	cmp.w	fp, #0
 800ef98:	f43f adb2 	beq.w	800eb00 <_strtod_l+0x548>
 800ef9c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800efa0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800efa4:	e7b8      	b.n	800ef18 <_strtod_l+0x960>
 800efa6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800efaa:	ee20 8b08 	vmul.f64	d8, d0, d8
 800efae:	f1b8 0f00 	cmp.w	r8, #0
 800efb2:	d0af      	beq.n	800ef14 <_strtod_l+0x95c>
 800efb4:	eeb0 ab48 	vmov.f64	d10, d8
 800efb8:	e7ae      	b.n	800ef18 <_strtod_l+0x960>
 800efba:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800efbe:	eeb0 8b4a 	vmov.f64	d8, d10
 800efc2:	e7a9      	b.n	800ef18 <_strtod_l+0x960>
 800efc4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800efc8:	e7a6      	b.n	800ef18 <_strtod_l+0x960>
 800efca:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800efce:	9b06      	ldr	r3, [sp, #24]
 800efd0:	46d9      	mov	r9, fp
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d1ca      	bne.n	800ef6c <_strtod_l+0x9b4>
 800efd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800efda:	0d1b      	lsrs	r3, r3, #20
 800efdc:	051b      	lsls	r3, r3, #20
 800efde:	429f      	cmp	r7, r3
 800efe0:	d1c4      	bne.n	800ef6c <_strtod_l+0x9b4>
 800efe2:	ec51 0b18 	vmov	r0, r1, d8
 800efe6:	f7f1 fbbf 	bl	8000768 <__aeabi_d2lz>
 800efea:	f7f1 fb77 	bl	80006dc <__aeabi_l2d>
 800efee:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800eff2:	ec41 0b17 	vmov	d7, r0, r1
 800eff6:	ea49 090a 	orr.w	r9, r9, sl
 800effa:	ea59 0908 	orrs.w	r9, r9, r8
 800effe:	ee38 8b47 	vsub.f64	d8, d8, d7
 800f002:	d03c      	beq.n	800f07e <_strtod_l+0xac6>
 800f004:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800f0b8 <_strtod_l+0xb00>
 800f008:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f010:	f53f aced 	bmi.w	800e9ee <_strtod_l+0x436>
 800f014:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800f0c0 <_strtod_l+0xb08>
 800f018:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f020:	dda4      	ble.n	800ef6c <_strtod_l+0x9b4>
 800f022:	e4e4      	b.n	800e9ee <_strtod_l+0x436>
 800f024:	9906      	ldr	r1, [sp, #24]
 800f026:	b1e1      	cbz	r1, 800f062 <_strtod_l+0xaaa>
 800f028:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800f02c:	d819      	bhi.n	800f062 <_strtod_l+0xaaa>
 800f02e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800f032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f036:	d811      	bhi.n	800f05c <_strtod_l+0xaa4>
 800f038:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800f03c:	ee18 3a10 	vmov	r3, s16
 800f040:	2b01      	cmp	r3, #1
 800f042:	bf38      	it	cc
 800f044:	2301      	movcc	r3, #1
 800f046:	ee08 3a10 	vmov	s16, r3
 800f04a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800f04e:	f1b8 0f00 	cmp.w	r8, #0
 800f052:	d111      	bne.n	800f078 <_strtod_l+0xac0>
 800f054:	eeb1 7b48 	vneg.f64	d7, d8
 800f058:	ec53 2b17 	vmov	r2, r3, d7
 800f05c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800f060:	1bcb      	subs	r3, r1, r7
 800f062:	eeb0 0b49 	vmov.f64	d0, d9
 800f066:	ec43 2b1a 	vmov	d10, r2, r3
 800f06a:	f002 fd8d 	bl	8011b88 <__ulp>
 800f06e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800f072:	ec5b ab19 	vmov	sl, fp, d9
 800f076:	e7aa      	b.n	800efce <_strtod_l+0xa16>
 800f078:	eeb0 7b48 	vmov.f64	d7, d8
 800f07c:	e7ec      	b.n	800f058 <_strtod_l+0xaa0>
 800f07e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800f0c8 <_strtod_l+0xb10>
 800f082:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f08a:	f57f af6f 	bpl.w	800ef6c <_strtod_l+0x9b4>
 800f08e:	e4ae      	b.n	800e9ee <_strtod_l+0x436>
 800f090:	2300      	movs	r3, #0
 800f092:	9308      	str	r3, [sp, #32]
 800f094:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f096:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f098:	6013      	str	r3, [r2, #0]
 800f09a:	f7ff bacc 	b.w	800e636 <_strtod_l+0x7e>
 800f09e:	2a65      	cmp	r2, #101	@ 0x65
 800f0a0:	f43f abbc 	beq.w	800e81c <_strtod_l+0x264>
 800f0a4:	2a45      	cmp	r2, #69	@ 0x45
 800f0a6:	f43f abb9 	beq.w	800e81c <_strtod_l+0x264>
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	9306      	str	r3, [sp, #24]
 800f0ae:	f7ff bbf0 	b.w	800e892 <_strtod_l+0x2da>
 800f0b2:	bf00      	nop
 800f0b4:	f3af 8000 	nop.w
 800f0b8:	94a03595 	.word	0x94a03595
 800f0bc:	3fdfffff 	.word	0x3fdfffff
 800f0c0:	35afe535 	.word	0x35afe535
 800f0c4:	3fe00000 	.word	0x3fe00000
 800f0c8:	94a03595 	.word	0x94a03595
 800f0cc:	3fcfffff 	.word	0x3fcfffff
 800f0d0:	000fffff 	.word	0x000fffff
 800f0d4:	7ff00000 	.word	0x7ff00000
 800f0d8:	7fefffff 	.word	0x7fefffff
 800f0dc:	7fe00000 	.word	0x7fe00000
 800f0e0:	7c9fffff 	.word	0x7c9fffff

0800f0e4 <_strtod_r>:
 800f0e4:	4b01      	ldr	r3, [pc, #4]	@ (800f0ec <_strtod_r+0x8>)
 800f0e6:	f7ff ba67 	b.w	800e5b8 <_strtod_l>
 800f0ea:	bf00      	nop
 800f0ec:	24000058 	.word	0x24000058

0800f0f0 <__cvt>:
 800f0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0f2:	ed2d 8b02 	vpush	{d8}
 800f0f6:	eeb0 8b40 	vmov.f64	d8, d0
 800f0fa:	b085      	sub	sp, #20
 800f0fc:	4617      	mov	r7, r2
 800f0fe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f100:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f102:	ee18 2a90 	vmov	r2, s17
 800f106:	f025 0520 	bic.w	r5, r5, #32
 800f10a:	2a00      	cmp	r2, #0
 800f10c:	bfb6      	itet	lt
 800f10e:	222d      	movlt	r2, #45	@ 0x2d
 800f110:	2200      	movge	r2, #0
 800f112:	eeb1 8b40 	vneglt.f64	d8, d0
 800f116:	2d46      	cmp	r5, #70	@ 0x46
 800f118:	460c      	mov	r4, r1
 800f11a:	701a      	strb	r2, [r3, #0]
 800f11c:	d004      	beq.n	800f128 <__cvt+0x38>
 800f11e:	2d45      	cmp	r5, #69	@ 0x45
 800f120:	d100      	bne.n	800f124 <__cvt+0x34>
 800f122:	3401      	adds	r4, #1
 800f124:	2102      	movs	r1, #2
 800f126:	e000      	b.n	800f12a <__cvt+0x3a>
 800f128:	2103      	movs	r1, #3
 800f12a:	ab03      	add	r3, sp, #12
 800f12c:	9301      	str	r3, [sp, #4]
 800f12e:	ab02      	add	r3, sp, #8
 800f130:	9300      	str	r3, [sp, #0]
 800f132:	4622      	mov	r2, r4
 800f134:	4633      	mov	r3, r6
 800f136:	eeb0 0b48 	vmov.f64	d0, d8
 800f13a:	f001 f8c5 	bl	80102c8 <_dtoa_r>
 800f13e:	2d47      	cmp	r5, #71	@ 0x47
 800f140:	d114      	bne.n	800f16c <__cvt+0x7c>
 800f142:	07fb      	lsls	r3, r7, #31
 800f144:	d50a      	bpl.n	800f15c <__cvt+0x6c>
 800f146:	1902      	adds	r2, r0, r4
 800f148:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f150:	bf08      	it	eq
 800f152:	9203      	streq	r2, [sp, #12]
 800f154:	2130      	movs	r1, #48	@ 0x30
 800f156:	9b03      	ldr	r3, [sp, #12]
 800f158:	4293      	cmp	r3, r2
 800f15a:	d319      	bcc.n	800f190 <__cvt+0xa0>
 800f15c:	9b03      	ldr	r3, [sp, #12]
 800f15e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f160:	1a1b      	subs	r3, r3, r0
 800f162:	6013      	str	r3, [r2, #0]
 800f164:	b005      	add	sp, #20
 800f166:	ecbd 8b02 	vpop	{d8}
 800f16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f16c:	2d46      	cmp	r5, #70	@ 0x46
 800f16e:	eb00 0204 	add.w	r2, r0, r4
 800f172:	d1e9      	bne.n	800f148 <__cvt+0x58>
 800f174:	7803      	ldrb	r3, [r0, #0]
 800f176:	2b30      	cmp	r3, #48	@ 0x30
 800f178:	d107      	bne.n	800f18a <__cvt+0x9a>
 800f17a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f182:	bf1c      	itt	ne
 800f184:	f1c4 0401 	rsbne	r4, r4, #1
 800f188:	6034      	strne	r4, [r6, #0]
 800f18a:	6833      	ldr	r3, [r6, #0]
 800f18c:	441a      	add	r2, r3
 800f18e:	e7db      	b.n	800f148 <__cvt+0x58>
 800f190:	1c5c      	adds	r4, r3, #1
 800f192:	9403      	str	r4, [sp, #12]
 800f194:	7019      	strb	r1, [r3, #0]
 800f196:	e7de      	b.n	800f156 <__cvt+0x66>

0800f198 <__exponent>:
 800f198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f19a:	2900      	cmp	r1, #0
 800f19c:	bfba      	itte	lt
 800f19e:	4249      	neglt	r1, r1
 800f1a0:	232d      	movlt	r3, #45	@ 0x2d
 800f1a2:	232b      	movge	r3, #43	@ 0x2b
 800f1a4:	2909      	cmp	r1, #9
 800f1a6:	7002      	strb	r2, [r0, #0]
 800f1a8:	7043      	strb	r3, [r0, #1]
 800f1aa:	dd29      	ble.n	800f200 <__exponent+0x68>
 800f1ac:	f10d 0307 	add.w	r3, sp, #7
 800f1b0:	461d      	mov	r5, r3
 800f1b2:	270a      	movs	r7, #10
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	fbb1 f6f7 	udiv	r6, r1, r7
 800f1ba:	fb07 1416 	mls	r4, r7, r6, r1
 800f1be:	3430      	adds	r4, #48	@ 0x30
 800f1c0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f1c4:	460c      	mov	r4, r1
 800f1c6:	2c63      	cmp	r4, #99	@ 0x63
 800f1c8:	f103 33ff 	add.w	r3, r3, #4294967295
 800f1cc:	4631      	mov	r1, r6
 800f1ce:	dcf1      	bgt.n	800f1b4 <__exponent+0x1c>
 800f1d0:	3130      	adds	r1, #48	@ 0x30
 800f1d2:	1e94      	subs	r4, r2, #2
 800f1d4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f1d8:	1c41      	adds	r1, r0, #1
 800f1da:	4623      	mov	r3, r4
 800f1dc:	42ab      	cmp	r3, r5
 800f1de:	d30a      	bcc.n	800f1f6 <__exponent+0x5e>
 800f1e0:	f10d 0309 	add.w	r3, sp, #9
 800f1e4:	1a9b      	subs	r3, r3, r2
 800f1e6:	42ac      	cmp	r4, r5
 800f1e8:	bf88      	it	hi
 800f1ea:	2300      	movhi	r3, #0
 800f1ec:	3302      	adds	r3, #2
 800f1ee:	4403      	add	r3, r0
 800f1f0:	1a18      	subs	r0, r3, r0
 800f1f2:	b003      	add	sp, #12
 800f1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1f6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f1fa:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f1fe:	e7ed      	b.n	800f1dc <__exponent+0x44>
 800f200:	2330      	movs	r3, #48	@ 0x30
 800f202:	3130      	adds	r1, #48	@ 0x30
 800f204:	7083      	strb	r3, [r0, #2]
 800f206:	70c1      	strb	r1, [r0, #3]
 800f208:	1d03      	adds	r3, r0, #4
 800f20a:	e7f1      	b.n	800f1f0 <__exponent+0x58>
 800f20c:	0000      	movs	r0, r0
	...

0800f210 <_printf_float>:
 800f210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f214:	b08d      	sub	sp, #52	@ 0x34
 800f216:	460c      	mov	r4, r1
 800f218:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f21c:	4616      	mov	r6, r2
 800f21e:	461f      	mov	r7, r3
 800f220:	4605      	mov	r5, r0
 800f222:	f000 ff21 	bl	8010068 <_localeconv_r>
 800f226:	f8d0 b000 	ldr.w	fp, [r0]
 800f22a:	4658      	mov	r0, fp
 800f22c:	f7f1 f8c0 	bl	80003b0 <strlen>
 800f230:	2300      	movs	r3, #0
 800f232:	930a      	str	r3, [sp, #40]	@ 0x28
 800f234:	f8d8 3000 	ldr.w	r3, [r8]
 800f238:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f23c:	6822      	ldr	r2, [r4, #0]
 800f23e:	9005      	str	r0, [sp, #20]
 800f240:	3307      	adds	r3, #7
 800f242:	f023 0307 	bic.w	r3, r3, #7
 800f246:	f103 0108 	add.w	r1, r3, #8
 800f24a:	f8c8 1000 	str.w	r1, [r8]
 800f24e:	ed93 0b00 	vldr	d0, [r3]
 800f252:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f4b0 <_printf_float+0x2a0>
 800f256:	eeb0 7bc0 	vabs.f64	d7, d0
 800f25a:	eeb4 7b46 	vcmp.f64	d7, d6
 800f25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f262:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800f266:	dd24      	ble.n	800f2b2 <_printf_float+0xa2>
 800f268:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f270:	d502      	bpl.n	800f278 <_printf_float+0x68>
 800f272:	232d      	movs	r3, #45	@ 0x2d
 800f274:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f278:	498f      	ldr	r1, [pc, #572]	@ (800f4b8 <_printf_float+0x2a8>)
 800f27a:	4b90      	ldr	r3, [pc, #576]	@ (800f4bc <_printf_float+0x2ac>)
 800f27c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f280:	bf94      	ite	ls
 800f282:	4688      	movls	r8, r1
 800f284:	4698      	movhi	r8, r3
 800f286:	f022 0204 	bic.w	r2, r2, #4
 800f28a:	2303      	movs	r3, #3
 800f28c:	6123      	str	r3, [r4, #16]
 800f28e:	6022      	str	r2, [r4, #0]
 800f290:	f04f 0a00 	mov.w	sl, #0
 800f294:	9700      	str	r7, [sp, #0]
 800f296:	4633      	mov	r3, r6
 800f298:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f29a:	4621      	mov	r1, r4
 800f29c:	4628      	mov	r0, r5
 800f29e:	f000 f9d1 	bl	800f644 <_printf_common>
 800f2a2:	3001      	adds	r0, #1
 800f2a4:	f040 8089 	bne.w	800f3ba <_printf_float+0x1aa>
 800f2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ac:	b00d      	add	sp, #52	@ 0x34
 800f2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b2:	eeb4 0b40 	vcmp.f64	d0, d0
 800f2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ba:	d709      	bvc.n	800f2d0 <_printf_float+0xc0>
 800f2bc:	ee10 3a90 	vmov	r3, s1
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	bfbc      	itt	lt
 800f2c4:	232d      	movlt	r3, #45	@ 0x2d
 800f2c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f2ca:	497d      	ldr	r1, [pc, #500]	@ (800f4c0 <_printf_float+0x2b0>)
 800f2cc:	4b7d      	ldr	r3, [pc, #500]	@ (800f4c4 <_printf_float+0x2b4>)
 800f2ce:	e7d5      	b.n	800f27c <_printf_float+0x6c>
 800f2d0:	6863      	ldr	r3, [r4, #4]
 800f2d2:	1c59      	adds	r1, r3, #1
 800f2d4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f2d8:	d139      	bne.n	800f34e <_printf_float+0x13e>
 800f2da:	2306      	movs	r3, #6
 800f2dc:	6063      	str	r3, [r4, #4]
 800f2de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	6022      	str	r2, [r4, #0]
 800f2e6:	9303      	str	r3, [sp, #12]
 800f2e8:	ab0a      	add	r3, sp, #40	@ 0x28
 800f2ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f2ee:	ab09      	add	r3, sp, #36	@ 0x24
 800f2f0:	9300      	str	r3, [sp, #0]
 800f2f2:	6861      	ldr	r1, [r4, #4]
 800f2f4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f2f8:	4628      	mov	r0, r5
 800f2fa:	f7ff fef9 	bl	800f0f0 <__cvt>
 800f2fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f302:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f304:	4680      	mov	r8, r0
 800f306:	d129      	bne.n	800f35c <_printf_float+0x14c>
 800f308:	1cc8      	adds	r0, r1, #3
 800f30a:	db02      	blt.n	800f312 <_printf_float+0x102>
 800f30c:	6863      	ldr	r3, [r4, #4]
 800f30e:	4299      	cmp	r1, r3
 800f310:	dd41      	ble.n	800f396 <_printf_float+0x186>
 800f312:	f1a9 0902 	sub.w	r9, r9, #2
 800f316:	fa5f f989 	uxtb.w	r9, r9
 800f31a:	3901      	subs	r1, #1
 800f31c:	464a      	mov	r2, r9
 800f31e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f322:	9109      	str	r1, [sp, #36]	@ 0x24
 800f324:	f7ff ff38 	bl	800f198 <__exponent>
 800f328:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f32a:	1813      	adds	r3, r2, r0
 800f32c:	2a01      	cmp	r2, #1
 800f32e:	4682      	mov	sl, r0
 800f330:	6123      	str	r3, [r4, #16]
 800f332:	dc02      	bgt.n	800f33a <_printf_float+0x12a>
 800f334:	6822      	ldr	r2, [r4, #0]
 800f336:	07d2      	lsls	r2, r2, #31
 800f338:	d501      	bpl.n	800f33e <_printf_float+0x12e>
 800f33a:	3301      	adds	r3, #1
 800f33c:	6123      	str	r3, [r4, #16]
 800f33e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f342:	2b00      	cmp	r3, #0
 800f344:	d0a6      	beq.n	800f294 <_printf_float+0x84>
 800f346:	232d      	movs	r3, #45	@ 0x2d
 800f348:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f34c:	e7a2      	b.n	800f294 <_printf_float+0x84>
 800f34e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f352:	d1c4      	bne.n	800f2de <_printf_float+0xce>
 800f354:	2b00      	cmp	r3, #0
 800f356:	d1c2      	bne.n	800f2de <_printf_float+0xce>
 800f358:	2301      	movs	r3, #1
 800f35a:	e7bf      	b.n	800f2dc <_printf_float+0xcc>
 800f35c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f360:	d9db      	bls.n	800f31a <_printf_float+0x10a>
 800f362:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f366:	d118      	bne.n	800f39a <_printf_float+0x18a>
 800f368:	2900      	cmp	r1, #0
 800f36a:	6863      	ldr	r3, [r4, #4]
 800f36c:	dd0b      	ble.n	800f386 <_printf_float+0x176>
 800f36e:	6121      	str	r1, [r4, #16]
 800f370:	b913      	cbnz	r3, 800f378 <_printf_float+0x168>
 800f372:	6822      	ldr	r2, [r4, #0]
 800f374:	07d0      	lsls	r0, r2, #31
 800f376:	d502      	bpl.n	800f37e <_printf_float+0x16e>
 800f378:	3301      	adds	r3, #1
 800f37a:	440b      	add	r3, r1
 800f37c:	6123      	str	r3, [r4, #16]
 800f37e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f380:	f04f 0a00 	mov.w	sl, #0
 800f384:	e7db      	b.n	800f33e <_printf_float+0x12e>
 800f386:	b913      	cbnz	r3, 800f38e <_printf_float+0x17e>
 800f388:	6822      	ldr	r2, [r4, #0]
 800f38a:	07d2      	lsls	r2, r2, #31
 800f38c:	d501      	bpl.n	800f392 <_printf_float+0x182>
 800f38e:	3302      	adds	r3, #2
 800f390:	e7f4      	b.n	800f37c <_printf_float+0x16c>
 800f392:	2301      	movs	r3, #1
 800f394:	e7f2      	b.n	800f37c <_printf_float+0x16c>
 800f396:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f39a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f39c:	4299      	cmp	r1, r3
 800f39e:	db05      	blt.n	800f3ac <_printf_float+0x19c>
 800f3a0:	6823      	ldr	r3, [r4, #0]
 800f3a2:	6121      	str	r1, [r4, #16]
 800f3a4:	07d8      	lsls	r0, r3, #31
 800f3a6:	d5ea      	bpl.n	800f37e <_printf_float+0x16e>
 800f3a8:	1c4b      	adds	r3, r1, #1
 800f3aa:	e7e7      	b.n	800f37c <_printf_float+0x16c>
 800f3ac:	2900      	cmp	r1, #0
 800f3ae:	bfd4      	ite	le
 800f3b0:	f1c1 0202 	rsble	r2, r1, #2
 800f3b4:	2201      	movgt	r2, #1
 800f3b6:	4413      	add	r3, r2
 800f3b8:	e7e0      	b.n	800f37c <_printf_float+0x16c>
 800f3ba:	6823      	ldr	r3, [r4, #0]
 800f3bc:	055a      	lsls	r2, r3, #21
 800f3be:	d407      	bmi.n	800f3d0 <_printf_float+0x1c0>
 800f3c0:	6923      	ldr	r3, [r4, #16]
 800f3c2:	4642      	mov	r2, r8
 800f3c4:	4631      	mov	r1, r6
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	47b8      	blx	r7
 800f3ca:	3001      	adds	r0, #1
 800f3cc:	d12a      	bne.n	800f424 <_printf_float+0x214>
 800f3ce:	e76b      	b.n	800f2a8 <_printf_float+0x98>
 800f3d0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f3d4:	f240 80e0 	bls.w	800f598 <_printf_float+0x388>
 800f3d8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f3dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3e4:	d133      	bne.n	800f44e <_printf_float+0x23e>
 800f3e6:	4a38      	ldr	r2, [pc, #224]	@ (800f4c8 <_printf_float+0x2b8>)
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	4631      	mov	r1, r6
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	47b8      	blx	r7
 800f3f0:	3001      	adds	r0, #1
 800f3f2:	f43f af59 	beq.w	800f2a8 <_printf_float+0x98>
 800f3f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f3fa:	4543      	cmp	r3, r8
 800f3fc:	db02      	blt.n	800f404 <_printf_float+0x1f4>
 800f3fe:	6823      	ldr	r3, [r4, #0]
 800f400:	07d8      	lsls	r0, r3, #31
 800f402:	d50f      	bpl.n	800f424 <_printf_float+0x214>
 800f404:	9b05      	ldr	r3, [sp, #20]
 800f406:	465a      	mov	r2, fp
 800f408:	4631      	mov	r1, r6
 800f40a:	4628      	mov	r0, r5
 800f40c:	47b8      	blx	r7
 800f40e:	3001      	adds	r0, #1
 800f410:	f43f af4a 	beq.w	800f2a8 <_printf_float+0x98>
 800f414:	f04f 0900 	mov.w	r9, #0
 800f418:	f108 38ff 	add.w	r8, r8, #4294967295
 800f41c:	f104 0a1a 	add.w	sl, r4, #26
 800f420:	45c8      	cmp	r8, r9
 800f422:	dc09      	bgt.n	800f438 <_printf_float+0x228>
 800f424:	6823      	ldr	r3, [r4, #0]
 800f426:	079b      	lsls	r3, r3, #30
 800f428:	f100 8107 	bmi.w	800f63a <_printf_float+0x42a>
 800f42c:	68e0      	ldr	r0, [r4, #12]
 800f42e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f430:	4298      	cmp	r0, r3
 800f432:	bfb8      	it	lt
 800f434:	4618      	movlt	r0, r3
 800f436:	e739      	b.n	800f2ac <_printf_float+0x9c>
 800f438:	2301      	movs	r3, #1
 800f43a:	4652      	mov	r2, sl
 800f43c:	4631      	mov	r1, r6
 800f43e:	4628      	mov	r0, r5
 800f440:	47b8      	blx	r7
 800f442:	3001      	adds	r0, #1
 800f444:	f43f af30 	beq.w	800f2a8 <_printf_float+0x98>
 800f448:	f109 0901 	add.w	r9, r9, #1
 800f44c:	e7e8      	b.n	800f420 <_printf_float+0x210>
 800f44e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f450:	2b00      	cmp	r3, #0
 800f452:	dc3b      	bgt.n	800f4cc <_printf_float+0x2bc>
 800f454:	4a1c      	ldr	r2, [pc, #112]	@ (800f4c8 <_printf_float+0x2b8>)
 800f456:	2301      	movs	r3, #1
 800f458:	4631      	mov	r1, r6
 800f45a:	4628      	mov	r0, r5
 800f45c:	47b8      	blx	r7
 800f45e:	3001      	adds	r0, #1
 800f460:	f43f af22 	beq.w	800f2a8 <_printf_float+0x98>
 800f464:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f468:	ea59 0303 	orrs.w	r3, r9, r3
 800f46c:	d102      	bne.n	800f474 <_printf_float+0x264>
 800f46e:	6823      	ldr	r3, [r4, #0]
 800f470:	07d9      	lsls	r1, r3, #31
 800f472:	d5d7      	bpl.n	800f424 <_printf_float+0x214>
 800f474:	9b05      	ldr	r3, [sp, #20]
 800f476:	465a      	mov	r2, fp
 800f478:	4631      	mov	r1, r6
 800f47a:	4628      	mov	r0, r5
 800f47c:	47b8      	blx	r7
 800f47e:	3001      	adds	r0, #1
 800f480:	f43f af12 	beq.w	800f2a8 <_printf_float+0x98>
 800f484:	f04f 0a00 	mov.w	sl, #0
 800f488:	f104 0b1a 	add.w	fp, r4, #26
 800f48c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f48e:	425b      	negs	r3, r3
 800f490:	4553      	cmp	r3, sl
 800f492:	dc01      	bgt.n	800f498 <_printf_float+0x288>
 800f494:	464b      	mov	r3, r9
 800f496:	e794      	b.n	800f3c2 <_printf_float+0x1b2>
 800f498:	2301      	movs	r3, #1
 800f49a:	465a      	mov	r2, fp
 800f49c:	4631      	mov	r1, r6
 800f49e:	4628      	mov	r0, r5
 800f4a0:	47b8      	blx	r7
 800f4a2:	3001      	adds	r0, #1
 800f4a4:	f43f af00 	beq.w	800f2a8 <_printf_float+0x98>
 800f4a8:	f10a 0a01 	add.w	sl, sl, #1
 800f4ac:	e7ee      	b.n	800f48c <_printf_float+0x27c>
 800f4ae:	bf00      	nop
 800f4b0:	ffffffff 	.word	0xffffffff
 800f4b4:	7fefffff 	.word	0x7fefffff
 800f4b8:	08013328 	.word	0x08013328
 800f4bc:	0801332c 	.word	0x0801332c
 800f4c0:	08013330 	.word	0x08013330
 800f4c4:	08013334 	.word	0x08013334
 800f4c8:	080136d8 	.word	0x080136d8
 800f4cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f4ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f4d2:	4553      	cmp	r3, sl
 800f4d4:	bfa8      	it	ge
 800f4d6:	4653      	movge	r3, sl
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	4699      	mov	r9, r3
 800f4dc:	dc37      	bgt.n	800f54e <_printf_float+0x33e>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	9307      	str	r3, [sp, #28]
 800f4e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4e6:	f104 021a 	add.w	r2, r4, #26
 800f4ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f4ec:	9907      	ldr	r1, [sp, #28]
 800f4ee:	9306      	str	r3, [sp, #24]
 800f4f0:	eba3 0309 	sub.w	r3, r3, r9
 800f4f4:	428b      	cmp	r3, r1
 800f4f6:	dc31      	bgt.n	800f55c <_printf_float+0x34c>
 800f4f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4fa:	459a      	cmp	sl, r3
 800f4fc:	dc3b      	bgt.n	800f576 <_printf_float+0x366>
 800f4fe:	6823      	ldr	r3, [r4, #0]
 800f500:	07da      	lsls	r2, r3, #31
 800f502:	d438      	bmi.n	800f576 <_printf_float+0x366>
 800f504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f506:	ebaa 0903 	sub.w	r9, sl, r3
 800f50a:	9b06      	ldr	r3, [sp, #24]
 800f50c:	ebaa 0303 	sub.w	r3, sl, r3
 800f510:	4599      	cmp	r9, r3
 800f512:	bfa8      	it	ge
 800f514:	4699      	movge	r9, r3
 800f516:	f1b9 0f00 	cmp.w	r9, #0
 800f51a:	dc34      	bgt.n	800f586 <_printf_float+0x376>
 800f51c:	f04f 0800 	mov.w	r8, #0
 800f520:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f524:	f104 0b1a 	add.w	fp, r4, #26
 800f528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f52a:	ebaa 0303 	sub.w	r3, sl, r3
 800f52e:	eba3 0309 	sub.w	r3, r3, r9
 800f532:	4543      	cmp	r3, r8
 800f534:	f77f af76 	ble.w	800f424 <_printf_float+0x214>
 800f538:	2301      	movs	r3, #1
 800f53a:	465a      	mov	r2, fp
 800f53c:	4631      	mov	r1, r6
 800f53e:	4628      	mov	r0, r5
 800f540:	47b8      	blx	r7
 800f542:	3001      	adds	r0, #1
 800f544:	f43f aeb0 	beq.w	800f2a8 <_printf_float+0x98>
 800f548:	f108 0801 	add.w	r8, r8, #1
 800f54c:	e7ec      	b.n	800f528 <_printf_float+0x318>
 800f54e:	4642      	mov	r2, r8
 800f550:	4631      	mov	r1, r6
 800f552:	4628      	mov	r0, r5
 800f554:	47b8      	blx	r7
 800f556:	3001      	adds	r0, #1
 800f558:	d1c1      	bne.n	800f4de <_printf_float+0x2ce>
 800f55a:	e6a5      	b.n	800f2a8 <_printf_float+0x98>
 800f55c:	2301      	movs	r3, #1
 800f55e:	4631      	mov	r1, r6
 800f560:	4628      	mov	r0, r5
 800f562:	9206      	str	r2, [sp, #24]
 800f564:	47b8      	blx	r7
 800f566:	3001      	adds	r0, #1
 800f568:	f43f ae9e 	beq.w	800f2a8 <_printf_float+0x98>
 800f56c:	9b07      	ldr	r3, [sp, #28]
 800f56e:	9a06      	ldr	r2, [sp, #24]
 800f570:	3301      	adds	r3, #1
 800f572:	9307      	str	r3, [sp, #28]
 800f574:	e7b9      	b.n	800f4ea <_printf_float+0x2da>
 800f576:	9b05      	ldr	r3, [sp, #20]
 800f578:	465a      	mov	r2, fp
 800f57a:	4631      	mov	r1, r6
 800f57c:	4628      	mov	r0, r5
 800f57e:	47b8      	blx	r7
 800f580:	3001      	adds	r0, #1
 800f582:	d1bf      	bne.n	800f504 <_printf_float+0x2f4>
 800f584:	e690      	b.n	800f2a8 <_printf_float+0x98>
 800f586:	9a06      	ldr	r2, [sp, #24]
 800f588:	464b      	mov	r3, r9
 800f58a:	4442      	add	r2, r8
 800f58c:	4631      	mov	r1, r6
 800f58e:	4628      	mov	r0, r5
 800f590:	47b8      	blx	r7
 800f592:	3001      	adds	r0, #1
 800f594:	d1c2      	bne.n	800f51c <_printf_float+0x30c>
 800f596:	e687      	b.n	800f2a8 <_printf_float+0x98>
 800f598:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f59c:	f1b9 0f01 	cmp.w	r9, #1
 800f5a0:	dc01      	bgt.n	800f5a6 <_printf_float+0x396>
 800f5a2:	07db      	lsls	r3, r3, #31
 800f5a4:	d536      	bpl.n	800f614 <_printf_float+0x404>
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	4642      	mov	r2, r8
 800f5aa:	4631      	mov	r1, r6
 800f5ac:	4628      	mov	r0, r5
 800f5ae:	47b8      	blx	r7
 800f5b0:	3001      	adds	r0, #1
 800f5b2:	f43f ae79 	beq.w	800f2a8 <_printf_float+0x98>
 800f5b6:	9b05      	ldr	r3, [sp, #20]
 800f5b8:	465a      	mov	r2, fp
 800f5ba:	4631      	mov	r1, r6
 800f5bc:	4628      	mov	r0, r5
 800f5be:	47b8      	blx	r7
 800f5c0:	3001      	adds	r0, #1
 800f5c2:	f43f ae71 	beq.w	800f2a8 <_printf_float+0x98>
 800f5c6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f5ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5d2:	f109 39ff 	add.w	r9, r9, #4294967295
 800f5d6:	d018      	beq.n	800f60a <_printf_float+0x3fa>
 800f5d8:	464b      	mov	r3, r9
 800f5da:	f108 0201 	add.w	r2, r8, #1
 800f5de:	4631      	mov	r1, r6
 800f5e0:	4628      	mov	r0, r5
 800f5e2:	47b8      	blx	r7
 800f5e4:	3001      	adds	r0, #1
 800f5e6:	d10c      	bne.n	800f602 <_printf_float+0x3f2>
 800f5e8:	e65e      	b.n	800f2a8 <_printf_float+0x98>
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	465a      	mov	r2, fp
 800f5ee:	4631      	mov	r1, r6
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	47b8      	blx	r7
 800f5f4:	3001      	adds	r0, #1
 800f5f6:	f43f ae57 	beq.w	800f2a8 <_printf_float+0x98>
 800f5fa:	f108 0801 	add.w	r8, r8, #1
 800f5fe:	45c8      	cmp	r8, r9
 800f600:	dbf3      	blt.n	800f5ea <_printf_float+0x3da>
 800f602:	4653      	mov	r3, sl
 800f604:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f608:	e6dc      	b.n	800f3c4 <_printf_float+0x1b4>
 800f60a:	f04f 0800 	mov.w	r8, #0
 800f60e:	f104 0b1a 	add.w	fp, r4, #26
 800f612:	e7f4      	b.n	800f5fe <_printf_float+0x3ee>
 800f614:	2301      	movs	r3, #1
 800f616:	4642      	mov	r2, r8
 800f618:	e7e1      	b.n	800f5de <_printf_float+0x3ce>
 800f61a:	2301      	movs	r3, #1
 800f61c:	464a      	mov	r2, r9
 800f61e:	4631      	mov	r1, r6
 800f620:	4628      	mov	r0, r5
 800f622:	47b8      	blx	r7
 800f624:	3001      	adds	r0, #1
 800f626:	f43f ae3f 	beq.w	800f2a8 <_printf_float+0x98>
 800f62a:	f108 0801 	add.w	r8, r8, #1
 800f62e:	68e3      	ldr	r3, [r4, #12]
 800f630:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f632:	1a5b      	subs	r3, r3, r1
 800f634:	4543      	cmp	r3, r8
 800f636:	dcf0      	bgt.n	800f61a <_printf_float+0x40a>
 800f638:	e6f8      	b.n	800f42c <_printf_float+0x21c>
 800f63a:	f04f 0800 	mov.w	r8, #0
 800f63e:	f104 0919 	add.w	r9, r4, #25
 800f642:	e7f4      	b.n	800f62e <_printf_float+0x41e>

0800f644 <_printf_common>:
 800f644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f648:	4616      	mov	r6, r2
 800f64a:	4698      	mov	r8, r3
 800f64c:	688a      	ldr	r2, [r1, #8]
 800f64e:	690b      	ldr	r3, [r1, #16]
 800f650:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f654:	4293      	cmp	r3, r2
 800f656:	bfb8      	it	lt
 800f658:	4613      	movlt	r3, r2
 800f65a:	6033      	str	r3, [r6, #0]
 800f65c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f660:	4607      	mov	r7, r0
 800f662:	460c      	mov	r4, r1
 800f664:	b10a      	cbz	r2, 800f66a <_printf_common+0x26>
 800f666:	3301      	adds	r3, #1
 800f668:	6033      	str	r3, [r6, #0]
 800f66a:	6823      	ldr	r3, [r4, #0]
 800f66c:	0699      	lsls	r1, r3, #26
 800f66e:	bf42      	ittt	mi
 800f670:	6833      	ldrmi	r3, [r6, #0]
 800f672:	3302      	addmi	r3, #2
 800f674:	6033      	strmi	r3, [r6, #0]
 800f676:	6825      	ldr	r5, [r4, #0]
 800f678:	f015 0506 	ands.w	r5, r5, #6
 800f67c:	d106      	bne.n	800f68c <_printf_common+0x48>
 800f67e:	f104 0a19 	add.w	sl, r4, #25
 800f682:	68e3      	ldr	r3, [r4, #12]
 800f684:	6832      	ldr	r2, [r6, #0]
 800f686:	1a9b      	subs	r3, r3, r2
 800f688:	42ab      	cmp	r3, r5
 800f68a:	dc26      	bgt.n	800f6da <_printf_common+0x96>
 800f68c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f690:	6822      	ldr	r2, [r4, #0]
 800f692:	3b00      	subs	r3, #0
 800f694:	bf18      	it	ne
 800f696:	2301      	movne	r3, #1
 800f698:	0692      	lsls	r2, r2, #26
 800f69a:	d42b      	bmi.n	800f6f4 <_printf_common+0xb0>
 800f69c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f6a0:	4641      	mov	r1, r8
 800f6a2:	4638      	mov	r0, r7
 800f6a4:	47c8      	blx	r9
 800f6a6:	3001      	adds	r0, #1
 800f6a8:	d01e      	beq.n	800f6e8 <_printf_common+0xa4>
 800f6aa:	6823      	ldr	r3, [r4, #0]
 800f6ac:	6922      	ldr	r2, [r4, #16]
 800f6ae:	f003 0306 	and.w	r3, r3, #6
 800f6b2:	2b04      	cmp	r3, #4
 800f6b4:	bf02      	ittt	eq
 800f6b6:	68e5      	ldreq	r5, [r4, #12]
 800f6b8:	6833      	ldreq	r3, [r6, #0]
 800f6ba:	1aed      	subeq	r5, r5, r3
 800f6bc:	68a3      	ldr	r3, [r4, #8]
 800f6be:	bf0c      	ite	eq
 800f6c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f6c4:	2500      	movne	r5, #0
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	bfc4      	itt	gt
 800f6ca:	1a9b      	subgt	r3, r3, r2
 800f6cc:	18ed      	addgt	r5, r5, r3
 800f6ce:	2600      	movs	r6, #0
 800f6d0:	341a      	adds	r4, #26
 800f6d2:	42b5      	cmp	r5, r6
 800f6d4:	d11a      	bne.n	800f70c <_printf_common+0xc8>
 800f6d6:	2000      	movs	r0, #0
 800f6d8:	e008      	b.n	800f6ec <_printf_common+0xa8>
 800f6da:	2301      	movs	r3, #1
 800f6dc:	4652      	mov	r2, sl
 800f6de:	4641      	mov	r1, r8
 800f6e0:	4638      	mov	r0, r7
 800f6e2:	47c8      	blx	r9
 800f6e4:	3001      	adds	r0, #1
 800f6e6:	d103      	bne.n	800f6f0 <_printf_common+0xac>
 800f6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6f0:	3501      	adds	r5, #1
 800f6f2:	e7c6      	b.n	800f682 <_printf_common+0x3e>
 800f6f4:	18e1      	adds	r1, r4, r3
 800f6f6:	1c5a      	adds	r2, r3, #1
 800f6f8:	2030      	movs	r0, #48	@ 0x30
 800f6fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f6fe:	4422      	add	r2, r4
 800f700:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f704:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f708:	3302      	adds	r3, #2
 800f70a:	e7c7      	b.n	800f69c <_printf_common+0x58>
 800f70c:	2301      	movs	r3, #1
 800f70e:	4622      	mov	r2, r4
 800f710:	4641      	mov	r1, r8
 800f712:	4638      	mov	r0, r7
 800f714:	47c8      	blx	r9
 800f716:	3001      	adds	r0, #1
 800f718:	d0e6      	beq.n	800f6e8 <_printf_common+0xa4>
 800f71a:	3601      	adds	r6, #1
 800f71c:	e7d9      	b.n	800f6d2 <_printf_common+0x8e>
	...

0800f720 <_printf_i>:
 800f720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f724:	7e0f      	ldrb	r7, [r1, #24]
 800f726:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f728:	2f78      	cmp	r7, #120	@ 0x78
 800f72a:	4691      	mov	r9, r2
 800f72c:	4680      	mov	r8, r0
 800f72e:	460c      	mov	r4, r1
 800f730:	469a      	mov	sl, r3
 800f732:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f736:	d807      	bhi.n	800f748 <_printf_i+0x28>
 800f738:	2f62      	cmp	r7, #98	@ 0x62
 800f73a:	d80a      	bhi.n	800f752 <_printf_i+0x32>
 800f73c:	2f00      	cmp	r7, #0
 800f73e:	f000 80d2 	beq.w	800f8e6 <_printf_i+0x1c6>
 800f742:	2f58      	cmp	r7, #88	@ 0x58
 800f744:	f000 80b9 	beq.w	800f8ba <_printf_i+0x19a>
 800f748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f74c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f750:	e03a      	b.n	800f7c8 <_printf_i+0xa8>
 800f752:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f756:	2b15      	cmp	r3, #21
 800f758:	d8f6      	bhi.n	800f748 <_printf_i+0x28>
 800f75a:	a101      	add	r1, pc, #4	@ (adr r1, 800f760 <_printf_i+0x40>)
 800f75c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f760:	0800f7b9 	.word	0x0800f7b9
 800f764:	0800f7cd 	.word	0x0800f7cd
 800f768:	0800f749 	.word	0x0800f749
 800f76c:	0800f749 	.word	0x0800f749
 800f770:	0800f749 	.word	0x0800f749
 800f774:	0800f749 	.word	0x0800f749
 800f778:	0800f7cd 	.word	0x0800f7cd
 800f77c:	0800f749 	.word	0x0800f749
 800f780:	0800f749 	.word	0x0800f749
 800f784:	0800f749 	.word	0x0800f749
 800f788:	0800f749 	.word	0x0800f749
 800f78c:	0800f8cd 	.word	0x0800f8cd
 800f790:	0800f7f7 	.word	0x0800f7f7
 800f794:	0800f887 	.word	0x0800f887
 800f798:	0800f749 	.word	0x0800f749
 800f79c:	0800f749 	.word	0x0800f749
 800f7a0:	0800f8ef 	.word	0x0800f8ef
 800f7a4:	0800f749 	.word	0x0800f749
 800f7a8:	0800f7f7 	.word	0x0800f7f7
 800f7ac:	0800f749 	.word	0x0800f749
 800f7b0:	0800f749 	.word	0x0800f749
 800f7b4:	0800f88f 	.word	0x0800f88f
 800f7b8:	6833      	ldr	r3, [r6, #0]
 800f7ba:	1d1a      	adds	r2, r3, #4
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	6032      	str	r2, [r6, #0]
 800f7c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f7c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	e09d      	b.n	800f908 <_printf_i+0x1e8>
 800f7cc:	6833      	ldr	r3, [r6, #0]
 800f7ce:	6820      	ldr	r0, [r4, #0]
 800f7d0:	1d19      	adds	r1, r3, #4
 800f7d2:	6031      	str	r1, [r6, #0]
 800f7d4:	0606      	lsls	r6, r0, #24
 800f7d6:	d501      	bpl.n	800f7dc <_printf_i+0xbc>
 800f7d8:	681d      	ldr	r5, [r3, #0]
 800f7da:	e003      	b.n	800f7e4 <_printf_i+0xc4>
 800f7dc:	0645      	lsls	r5, r0, #25
 800f7de:	d5fb      	bpl.n	800f7d8 <_printf_i+0xb8>
 800f7e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f7e4:	2d00      	cmp	r5, #0
 800f7e6:	da03      	bge.n	800f7f0 <_printf_i+0xd0>
 800f7e8:	232d      	movs	r3, #45	@ 0x2d
 800f7ea:	426d      	negs	r5, r5
 800f7ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f7f0:	4859      	ldr	r0, [pc, #356]	@ (800f958 <_printf_i+0x238>)
 800f7f2:	230a      	movs	r3, #10
 800f7f4:	e011      	b.n	800f81a <_printf_i+0xfa>
 800f7f6:	6821      	ldr	r1, [r4, #0]
 800f7f8:	6833      	ldr	r3, [r6, #0]
 800f7fa:	0608      	lsls	r0, r1, #24
 800f7fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800f800:	d402      	bmi.n	800f808 <_printf_i+0xe8>
 800f802:	0649      	lsls	r1, r1, #25
 800f804:	bf48      	it	mi
 800f806:	b2ad      	uxthmi	r5, r5
 800f808:	2f6f      	cmp	r7, #111	@ 0x6f
 800f80a:	4853      	ldr	r0, [pc, #332]	@ (800f958 <_printf_i+0x238>)
 800f80c:	6033      	str	r3, [r6, #0]
 800f80e:	bf14      	ite	ne
 800f810:	230a      	movne	r3, #10
 800f812:	2308      	moveq	r3, #8
 800f814:	2100      	movs	r1, #0
 800f816:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f81a:	6866      	ldr	r6, [r4, #4]
 800f81c:	60a6      	str	r6, [r4, #8]
 800f81e:	2e00      	cmp	r6, #0
 800f820:	bfa2      	ittt	ge
 800f822:	6821      	ldrge	r1, [r4, #0]
 800f824:	f021 0104 	bicge.w	r1, r1, #4
 800f828:	6021      	strge	r1, [r4, #0]
 800f82a:	b90d      	cbnz	r5, 800f830 <_printf_i+0x110>
 800f82c:	2e00      	cmp	r6, #0
 800f82e:	d04b      	beq.n	800f8c8 <_printf_i+0x1a8>
 800f830:	4616      	mov	r6, r2
 800f832:	fbb5 f1f3 	udiv	r1, r5, r3
 800f836:	fb03 5711 	mls	r7, r3, r1, r5
 800f83a:	5dc7      	ldrb	r7, [r0, r7]
 800f83c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f840:	462f      	mov	r7, r5
 800f842:	42bb      	cmp	r3, r7
 800f844:	460d      	mov	r5, r1
 800f846:	d9f4      	bls.n	800f832 <_printf_i+0x112>
 800f848:	2b08      	cmp	r3, #8
 800f84a:	d10b      	bne.n	800f864 <_printf_i+0x144>
 800f84c:	6823      	ldr	r3, [r4, #0]
 800f84e:	07df      	lsls	r7, r3, #31
 800f850:	d508      	bpl.n	800f864 <_printf_i+0x144>
 800f852:	6923      	ldr	r3, [r4, #16]
 800f854:	6861      	ldr	r1, [r4, #4]
 800f856:	4299      	cmp	r1, r3
 800f858:	bfde      	ittt	le
 800f85a:	2330      	movle	r3, #48	@ 0x30
 800f85c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f860:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f864:	1b92      	subs	r2, r2, r6
 800f866:	6122      	str	r2, [r4, #16]
 800f868:	f8cd a000 	str.w	sl, [sp]
 800f86c:	464b      	mov	r3, r9
 800f86e:	aa03      	add	r2, sp, #12
 800f870:	4621      	mov	r1, r4
 800f872:	4640      	mov	r0, r8
 800f874:	f7ff fee6 	bl	800f644 <_printf_common>
 800f878:	3001      	adds	r0, #1
 800f87a:	d14a      	bne.n	800f912 <_printf_i+0x1f2>
 800f87c:	f04f 30ff 	mov.w	r0, #4294967295
 800f880:	b004      	add	sp, #16
 800f882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f886:	6823      	ldr	r3, [r4, #0]
 800f888:	f043 0320 	orr.w	r3, r3, #32
 800f88c:	6023      	str	r3, [r4, #0]
 800f88e:	4833      	ldr	r0, [pc, #204]	@ (800f95c <_printf_i+0x23c>)
 800f890:	2778      	movs	r7, #120	@ 0x78
 800f892:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f896:	6823      	ldr	r3, [r4, #0]
 800f898:	6831      	ldr	r1, [r6, #0]
 800f89a:	061f      	lsls	r7, r3, #24
 800f89c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f8a0:	d402      	bmi.n	800f8a8 <_printf_i+0x188>
 800f8a2:	065f      	lsls	r7, r3, #25
 800f8a4:	bf48      	it	mi
 800f8a6:	b2ad      	uxthmi	r5, r5
 800f8a8:	6031      	str	r1, [r6, #0]
 800f8aa:	07d9      	lsls	r1, r3, #31
 800f8ac:	bf44      	itt	mi
 800f8ae:	f043 0320 	orrmi.w	r3, r3, #32
 800f8b2:	6023      	strmi	r3, [r4, #0]
 800f8b4:	b11d      	cbz	r5, 800f8be <_printf_i+0x19e>
 800f8b6:	2310      	movs	r3, #16
 800f8b8:	e7ac      	b.n	800f814 <_printf_i+0xf4>
 800f8ba:	4827      	ldr	r0, [pc, #156]	@ (800f958 <_printf_i+0x238>)
 800f8bc:	e7e9      	b.n	800f892 <_printf_i+0x172>
 800f8be:	6823      	ldr	r3, [r4, #0]
 800f8c0:	f023 0320 	bic.w	r3, r3, #32
 800f8c4:	6023      	str	r3, [r4, #0]
 800f8c6:	e7f6      	b.n	800f8b6 <_printf_i+0x196>
 800f8c8:	4616      	mov	r6, r2
 800f8ca:	e7bd      	b.n	800f848 <_printf_i+0x128>
 800f8cc:	6833      	ldr	r3, [r6, #0]
 800f8ce:	6825      	ldr	r5, [r4, #0]
 800f8d0:	6961      	ldr	r1, [r4, #20]
 800f8d2:	1d18      	adds	r0, r3, #4
 800f8d4:	6030      	str	r0, [r6, #0]
 800f8d6:	062e      	lsls	r6, r5, #24
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	d501      	bpl.n	800f8e0 <_printf_i+0x1c0>
 800f8dc:	6019      	str	r1, [r3, #0]
 800f8de:	e002      	b.n	800f8e6 <_printf_i+0x1c6>
 800f8e0:	0668      	lsls	r0, r5, #25
 800f8e2:	d5fb      	bpl.n	800f8dc <_printf_i+0x1bc>
 800f8e4:	8019      	strh	r1, [r3, #0]
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	6123      	str	r3, [r4, #16]
 800f8ea:	4616      	mov	r6, r2
 800f8ec:	e7bc      	b.n	800f868 <_printf_i+0x148>
 800f8ee:	6833      	ldr	r3, [r6, #0]
 800f8f0:	1d1a      	adds	r2, r3, #4
 800f8f2:	6032      	str	r2, [r6, #0]
 800f8f4:	681e      	ldr	r6, [r3, #0]
 800f8f6:	6862      	ldr	r2, [r4, #4]
 800f8f8:	2100      	movs	r1, #0
 800f8fa:	4630      	mov	r0, r6
 800f8fc:	f7f0 fd08 	bl	8000310 <memchr>
 800f900:	b108      	cbz	r0, 800f906 <_printf_i+0x1e6>
 800f902:	1b80      	subs	r0, r0, r6
 800f904:	6060      	str	r0, [r4, #4]
 800f906:	6863      	ldr	r3, [r4, #4]
 800f908:	6123      	str	r3, [r4, #16]
 800f90a:	2300      	movs	r3, #0
 800f90c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f910:	e7aa      	b.n	800f868 <_printf_i+0x148>
 800f912:	6923      	ldr	r3, [r4, #16]
 800f914:	4632      	mov	r2, r6
 800f916:	4649      	mov	r1, r9
 800f918:	4640      	mov	r0, r8
 800f91a:	47d0      	blx	sl
 800f91c:	3001      	adds	r0, #1
 800f91e:	d0ad      	beq.n	800f87c <_printf_i+0x15c>
 800f920:	6823      	ldr	r3, [r4, #0]
 800f922:	079b      	lsls	r3, r3, #30
 800f924:	d413      	bmi.n	800f94e <_printf_i+0x22e>
 800f926:	68e0      	ldr	r0, [r4, #12]
 800f928:	9b03      	ldr	r3, [sp, #12]
 800f92a:	4298      	cmp	r0, r3
 800f92c:	bfb8      	it	lt
 800f92e:	4618      	movlt	r0, r3
 800f930:	e7a6      	b.n	800f880 <_printf_i+0x160>
 800f932:	2301      	movs	r3, #1
 800f934:	4632      	mov	r2, r6
 800f936:	4649      	mov	r1, r9
 800f938:	4640      	mov	r0, r8
 800f93a:	47d0      	blx	sl
 800f93c:	3001      	adds	r0, #1
 800f93e:	d09d      	beq.n	800f87c <_printf_i+0x15c>
 800f940:	3501      	adds	r5, #1
 800f942:	68e3      	ldr	r3, [r4, #12]
 800f944:	9903      	ldr	r1, [sp, #12]
 800f946:	1a5b      	subs	r3, r3, r1
 800f948:	42ab      	cmp	r3, r5
 800f94a:	dcf2      	bgt.n	800f932 <_printf_i+0x212>
 800f94c:	e7eb      	b.n	800f926 <_printf_i+0x206>
 800f94e:	2500      	movs	r5, #0
 800f950:	f104 0619 	add.w	r6, r4, #25
 800f954:	e7f5      	b.n	800f942 <_printf_i+0x222>
 800f956:	bf00      	nop
 800f958:	08013338 	.word	0x08013338
 800f95c:	08013349 	.word	0x08013349

0800f960 <_scanf_float>:
 800f960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f964:	b087      	sub	sp, #28
 800f966:	4617      	mov	r7, r2
 800f968:	9303      	str	r3, [sp, #12]
 800f96a:	688b      	ldr	r3, [r1, #8]
 800f96c:	1e5a      	subs	r2, r3, #1
 800f96e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f972:	bf81      	itttt	hi
 800f974:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f978:	eb03 0b05 	addhi.w	fp, r3, r5
 800f97c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f980:	608b      	strhi	r3, [r1, #8]
 800f982:	680b      	ldr	r3, [r1, #0]
 800f984:	460a      	mov	r2, r1
 800f986:	f04f 0500 	mov.w	r5, #0
 800f98a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f98e:	f842 3b1c 	str.w	r3, [r2], #28
 800f992:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f996:	4680      	mov	r8, r0
 800f998:	460c      	mov	r4, r1
 800f99a:	bf98      	it	ls
 800f99c:	f04f 0b00 	movls.w	fp, #0
 800f9a0:	9201      	str	r2, [sp, #4]
 800f9a2:	4616      	mov	r6, r2
 800f9a4:	46aa      	mov	sl, r5
 800f9a6:	46a9      	mov	r9, r5
 800f9a8:	9502      	str	r5, [sp, #8]
 800f9aa:	68a2      	ldr	r2, [r4, #8]
 800f9ac:	b152      	cbz	r2, 800f9c4 <_scanf_float+0x64>
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	2b4e      	cmp	r3, #78	@ 0x4e
 800f9b4:	d864      	bhi.n	800fa80 <_scanf_float+0x120>
 800f9b6:	2b40      	cmp	r3, #64	@ 0x40
 800f9b8:	d83c      	bhi.n	800fa34 <_scanf_float+0xd4>
 800f9ba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f9be:	b2c8      	uxtb	r0, r1
 800f9c0:	280e      	cmp	r0, #14
 800f9c2:	d93a      	bls.n	800fa3a <_scanf_float+0xda>
 800f9c4:	f1b9 0f00 	cmp.w	r9, #0
 800f9c8:	d003      	beq.n	800f9d2 <_scanf_float+0x72>
 800f9ca:	6823      	ldr	r3, [r4, #0]
 800f9cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f9d0:	6023      	str	r3, [r4, #0]
 800f9d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f9d6:	f1ba 0f01 	cmp.w	sl, #1
 800f9da:	f200 8117 	bhi.w	800fc0c <_scanf_float+0x2ac>
 800f9de:	9b01      	ldr	r3, [sp, #4]
 800f9e0:	429e      	cmp	r6, r3
 800f9e2:	f200 8108 	bhi.w	800fbf6 <_scanf_float+0x296>
 800f9e6:	2001      	movs	r0, #1
 800f9e8:	b007      	add	sp, #28
 800f9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f9f2:	2a0d      	cmp	r2, #13
 800f9f4:	d8e6      	bhi.n	800f9c4 <_scanf_float+0x64>
 800f9f6:	a101      	add	r1, pc, #4	@ (adr r1, 800f9fc <_scanf_float+0x9c>)
 800f9f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f9fc:	0800fb43 	.word	0x0800fb43
 800fa00:	0800f9c5 	.word	0x0800f9c5
 800fa04:	0800f9c5 	.word	0x0800f9c5
 800fa08:	0800f9c5 	.word	0x0800f9c5
 800fa0c:	0800fba3 	.word	0x0800fba3
 800fa10:	0800fb7b 	.word	0x0800fb7b
 800fa14:	0800f9c5 	.word	0x0800f9c5
 800fa18:	0800f9c5 	.word	0x0800f9c5
 800fa1c:	0800fb51 	.word	0x0800fb51
 800fa20:	0800f9c5 	.word	0x0800f9c5
 800fa24:	0800f9c5 	.word	0x0800f9c5
 800fa28:	0800f9c5 	.word	0x0800f9c5
 800fa2c:	0800f9c5 	.word	0x0800f9c5
 800fa30:	0800fb09 	.word	0x0800fb09
 800fa34:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800fa38:	e7db      	b.n	800f9f2 <_scanf_float+0x92>
 800fa3a:	290e      	cmp	r1, #14
 800fa3c:	d8c2      	bhi.n	800f9c4 <_scanf_float+0x64>
 800fa3e:	a001      	add	r0, pc, #4	@ (adr r0, 800fa44 <_scanf_float+0xe4>)
 800fa40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fa44:	0800faf9 	.word	0x0800faf9
 800fa48:	0800f9c5 	.word	0x0800f9c5
 800fa4c:	0800faf9 	.word	0x0800faf9
 800fa50:	0800fb8f 	.word	0x0800fb8f
 800fa54:	0800f9c5 	.word	0x0800f9c5
 800fa58:	0800faa1 	.word	0x0800faa1
 800fa5c:	0800fadf 	.word	0x0800fadf
 800fa60:	0800fadf 	.word	0x0800fadf
 800fa64:	0800fadf 	.word	0x0800fadf
 800fa68:	0800fadf 	.word	0x0800fadf
 800fa6c:	0800fadf 	.word	0x0800fadf
 800fa70:	0800fadf 	.word	0x0800fadf
 800fa74:	0800fadf 	.word	0x0800fadf
 800fa78:	0800fadf 	.word	0x0800fadf
 800fa7c:	0800fadf 	.word	0x0800fadf
 800fa80:	2b6e      	cmp	r3, #110	@ 0x6e
 800fa82:	d809      	bhi.n	800fa98 <_scanf_float+0x138>
 800fa84:	2b60      	cmp	r3, #96	@ 0x60
 800fa86:	d8b2      	bhi.n	800f9ee <_scanf_float+0x8e>
 800fa88:	2b54      	cmp	r3, #84	@ 0x54
 800fa8a:	d07b      	beq.n	800fb84 <_scanf_float+0x224>
 800fa8c:	2b59      	cmp	r3, #89	@ 0x59
 800fa8e:	d199      	bne.n	800f9c4 <_scanf_float+0x64>
 800fa90:	2d07      	cmp	r5, #7
 800fa92:	d197      	bne.n	800f9c4 <_scanf_float+0x64>
 800fa94:	2508      	movs	r5, #8
 800fa96:	e02c      	b.n	800faf2 <_scanf_float+0x192>
 800fa98:	2b74      	cmp	r3, #116	@ 0x74
 800fa9a:	d073      	beq.n	800fb84 <_scanf_float+0x224>
 800fa9c:	2b79      	cmp	r3, #121	@ 0x79
 800fa9e:	e7f6      	b.n	800fa8e <_scanf_float+0x12e>
 800faa0:	6821      	ldr	r1, [r4, #0]
 800faa2:	05c8      	lsls	r0, r1, #23
 800faa4:	d51b      	bpl.n	800fade <_scanf_float+0x17e>
 800faa6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800faaa:	6021      	str	r1, [r4, #0]
 800faac:	f109 0901 	add.w	r9, r9, #1
 800fab0:	f1bb 0f00 	cmp.w	fp, #0
 800fab4:	d003      	beq.n	800fabe <_scanf_float+0x15e>
 800fab6:	3201      	adds	r2, #1
 800fab8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fabc:	60a2      	str	r2, [r4, #8]
 800fabe:	68a3      	ldr	r3, [r4, #8]
 800fac0:	3b01      	subs	r3, #1
 800fac2:	60a3      	str	r3, [r4, #8]
 800fac4:	6923      	ldr	r3, [r4, #16]
 800fac6:	3301      	adds	r3, #1
 800fac8:	6123      	str	r3, [r4, #16]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	3b01      	subs	r3, #1
 800face:	2b00      	cmp	r3, #0
 800fad0:	607b      	str	r3, [r7, #4]
 800fad2:	f340 8087 	ble.w	800fbe4 <_scanf_float+0x284>
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	3301      	adds	r3, #1
 800fada:	603b      	str	r3, [r7, #0]
 800fadc:	e765      	b.n	800f9aa <_scanf_float+0x4a>
 800fade:	eb1a 0105 	adds.w	r1, sl, r5
 800fae2:	f47f af6f 	bne.w	800f9c4 <_scanf_float+0x64>
 800fae6:	6822      	ldr	r2, [r4, #0]
 800fae8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800faec:	6022      	str	r2, [r4, #0]
 800faee:	460d      	mov	r5, r1
 800faf0:	468a      	mov	sl, r1
 800faf2:	f806 3b01 	strb.w	r3, [r6], #1
 800faf6:	e7e2      	b.n	800fabe <_scanf_float+0x15e>
 800faf8:	6822      	ldr	r2, [r4, #0]
 800fafa:	0610      	lsls	r0, r2, #24
 800fafc:	f57f af62 	bpl.w	800f9c4 <_scanf_float+0x64>
 800fb00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fb04:	6022      	str	r2, [r4, #0]
 800fb06:	e7f4      	b.n	800faf2 <_scanf_float+0x192>
 800fb08:	f1ba 0f00 	cmp.w	sl, #0
 800fb0c:	d10e      	bne.n	800fb2c <_scanf_float+0x1cc>
 800fb0e:	f1b9 0f00 	cmp.w	r9, #0
 800fb12:	d10e      	bne.n	800fb32 <_scanf_float+0x1d2>
 800fb14:	6822      	ldr	r2, [r4, #0]
 800fb16:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fb1a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fb1e:	d108      	bne.n	800fb32 <_scanf_float+0x1d2>
 800fb20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fb24:	6022      	str	r2, [r4, #0]
 800fb26:	f04f 0a01 	mov.w	sl, #1
 800fb2a:	e7e2      	b.n	800faf2 <_scanf_float+0x192>
 800fb2c:	f1ba 0f02 	cmp.w	sl, #2
 800fb30:	d055      	beq.n	800fbde <_scanf_float+0x27e>
 800fb32:	2d01      	cmp	r5, #1
 800fb34:	d002      	beq.n	800fb3c <_scanf_float+0x1dc>
 800fb36:	2d04      	cmp	r5, #4
 800fb38:	f47f af44 	bne.w	800f9c4 <_scanf_float+0x64>
 800fb3c:	3501      	adds	r5, #1
 800fb3e:	b2ed      	uxtb	r5, r5
 800fb40:	e7d7      	b.n	800faf2 <_scanf_float+0x192>
 800fb42:	f1ba 0f01 	cmp.w	sl, #1
 800fb46:	f47f af3d 	bne.w	800f9c4 <_scanf_float+0x64>
 800fb4a:	f04f 0a02 	mov.w	sl, #2
 800fb4e:	e7d0      	b.n	800faf2 <_scanf_float+0x192>
 800fb50:	b97d      	cbnz	r5, 800fb72 <_scanf_float+0x212>
 800fb52:	f1b9 0f00 	cmp.w	r9, #0
 800fb56:	f47f af38 	bne.w	800f9ca <_scanf_float+0x6a>
 800fb5a:	6822      	ldr	r2, [r4, #0]
 800fb5c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fb60:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fb64:	f040 8101 	bne.w	800fd6a <_scanf_float+0x40a>
 800fb68:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fb6c:	6022      	str	r2, [r4, #0]
 800fb6e:	2501      	movs	r5, #1
 800fb70:	e7bf      	b.n	800faf2 <_scanf_float+0x192>
 800fb72:	2d03      	cmp	r5, #3
 800fb74:	d0e2      	beq.n	800fb3c <_scanf_float+0x1dc>
 800fb76:	2d05      	cmp	r5, #5
 800fb78:	e7de      	b.n	800fb38 <_scanf_float+0x1d8>
 800fb7a:	2d02      	cmp	r5, #2
 800fb7c:	f47f af22 	bne.w	800f9c4 <_scanf_float+0x64>
 800fb80:	2503      	movs	r5, #3
 800fb82:	e7b6      	b.n	800faf2 <_scanf_float+0x192>
 800fb84:	2d06      	cmp	r5, #6
 800fb86:	f47f af1d 	bne.w	800f9c4 <_scanf_float+0x64>
 800fb8a:	2507      	movs	r5, #7
 800fb8c:	e7b1      	b.n	800faf2 <_scanf_float+0x192>
 800fb8e:	6822      	ldr	r2, [r4, #0]
 800fb90:	0591      	lsls	r1, r2, #22
 800fb92:	f57f af17 	bpl.w	800f9c4 <_scanf_float+0x64>
 800fb96:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fb9a:	6022      	str	r2, [r4, #0]
 800fb9c:	f8cd 9008 	str.w	r9, [sp, #8]
 800fba0:	e7a7      	b.n	800faf2 <_scanf_float+0x192>
 800fba2:	6822      	ldr	r2, [r4, #0]
 800fba4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fba8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fbac:	d006      	beq.n	800fbbc <_scanf_float+0x25c>
 800fbae:	0550      	lsls	r0, r2, #21
 800fbb0:	f57f af08 	bpl.w	800f9c4 <_scanf_float+0x64>
 800fbb4:	f1b9 0f00 	cmp.w	r9, #0
 800fbb8:	f000 80d7 	beq.w	800fd6a <_scanf_float+0x40a>
 800fbbc:	0591      	lsls	r1, r2, #22
 800fbbe:	bf58      	it	pl
 800fbc0:	9902      	ldrpl	r1, [sp, #8]
 800fbc2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fbc6:	bf58      	it	pl
 800fbc8:	eba9 0101 	subpl.w	r1, r9, r1
 800fbcc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800fbd0:	bf58      	it	pl
 800fbd2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fbd6:	6022      	str	r2, [r4, #0]
 800fbd8:	f04f 0900 	mov.w	r9, #0
 800fbdc:	e789      	b.n	800faf2 <_scanf_float+0x192>
 800fbde:	f04f 0a03 	mov.w	sl, #3
 800fbe2:	e786      	b.n	800faf2 <_scanf_float+0x192>
 800fbe4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fbe8:	4639      	mov	r1, r7
 800fbea:	4640      	mov	r0, r8
 800fbec:	4798      	blx	r3
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	f43f aedb 	beq.w	800f9aa <_scanf_float+0x4a>
 800fbf4:	e6e6      	b.n	800f9c4 <_scanf_float+0x64>
 800fbf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fbfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fbfe:	463a      	mov	r2, r7
 800fc00:	4640      	mov	r0, r8
 800fc02:	4798      	blx	r3
 800fc04:	6923      	ldr	r3, [r4, #16]
 800fc06:	3b01      	subs	r3, #1
 800fc08:	6123      	str	r3, [r4, #16]
 800fc0a:	e6e8      	b.n	800f9de <_scanf_float+0x7e>
 800fc0c:	1e6b      	subs	r3, r5, #1
 800fc0e:	2b06      	cmp	r3, #6
 800fc10:	d824      	bhi.n	800fc5c <_scanf_float+0x2fc>
 800fc12:	2d02      	cmp	r5, #2
 800fc14:	d836      	bhi.n	800fc84 <_scanf_float+0x324>
 800fc16:	9b01      	ldr	r3, [sp, #4]
 800fc18:	429e      	cmp	r6, r3
 800fc1a:	f67f aee4 	bls.w	800f9e6 <_scanf_float+0x86>
 800fc1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fc26:	463a      	mov	r2, r7
 800fc28:	4640      	mov	r0, r8
 800fc2a:	4798      	blx	r3
 800fc2c:	6923      	ldr	r3, [r4, #16]
 800fc2e:	3b01      	subs	r3, #1
 800fc30:	6123      	str	r3, [r4, #16]
 800fc32:	e7f0      	b.n	800fc16 <_scanf_float+0x2b6>
 800fc34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc38:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fc3c:	463a      	mov	r2, r7
 800fc3e:	4640      	mov	r0, r8
 800fc40:	4798      	blx	r3
 800fc42:	6923      	ldr	r3, [r4, #16]
 800fc44:	3b01      	subs	r3, #1
 800fc46:	6123      	str	r3, [r4, #16]
 800fc48:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc4c:	fa5f fa8a 	uxtb.w	sl, sl
 800fc50:	f1ba 0f02 	cmp.w	sl, #2
 800fc54:	d1ee      	bne.n	800fc34 <_scanf_float+0x2d4>
 800fc56:	3d03      	subs	r5, #3
 800fc58:	b2ed      	uxtb	r5, r5
 800fc5a:	1b76      	subs	r6, r6, r5
 800fc5c:	6823      	ldr	r3, [r4, #0]
 800fc5e:	05da      	lsls	r2, r3, #23
 800fc60:	d530      	bpl.n	800fcc4 <_scanf_float+0x364>
 800fc62:	055b      	lsls	r3, r3, #21
 800fc64:	d511      	bpl.n	800fc8a <_scanf_float+0x32a>
 800fc66:	9b01      	ldr	r3, [sp, #4]
 800fc68:	429e      	cmp	r6, r3
 800fc6a:	f67f aebc 	bls.w	800f9e6 <_scanf_float+0x86>
 800fc6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fc76:	463a      	mov	r2, r7
 800fc78:	4640      	mov	r0, r8
 800fc7a:	4798      	blx	r3
 800fc7c:	6923      	ldr	r3, [r4, #16]
 800fc7e:	3b01      	subs	r3, #1
 800fc80:	6123      	str	r3, [r4, #16]
 800fc82:	e7f0      	b.n	800fc66 <_scanf_float+0x306>
 800fc84:	46aa      	mov	sl, r5
 800fc86:	46b3      	mov	fp, r6
 800fc88:	e7de      	b.n	800fc48 <_scanf_float+0x2e8>
 800fc8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fc8e:	6923      	ldr	r3, [r4, #16]
 800fc90:	2965      	cmp	r1, #101	@ 0x65
 800fc92:	f103 33ff 	add.w	r3, r3, #4294967295
 800fc96:	f106 35ff 	add.w	r5, r6, #4294967295
 800fc9a:	6123      	str	r3, [r4, #16]
 800fc9c:	d00c      	beq.n	800fcb8 <_scanf_float+0x358>
 800fc9e:	2945      	cmp	r1, #69	@ 0x45
 800fca0:	d00a      	beq.n	800fcb8 <_scanf_float+0x358>
 800fca2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fca6:	463a      	mov	r2, r7
 800fca8:	4640      	mov	r0, r8
 800fcaa:	4798      	blx	r3
 800fcac:	6923      	ldr	r3, [r4, #16]
 800fcae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fcb2:	3b01      	subs	r3, #1
 800fcb4:	1eb5      	subs	r5, r6, #2
 800fcb6:	6123      	str	r3, [r4, #16]
 800fcb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fcbc:	463a      	mov	r2, r7
 800fcbe:	4640      	mov	r0, r8
 800fcc0:	4798      	blx	r3
 800fcc2:	462e      	mov	r6, r5
 800fcc4:	6822      	ldr	r2, [r4, #0]
 800fcc6:	f012 0210 	ands.w	r2, r2, #16
 800fcca:	d001      	beq.n	800fcd0 <_scanf_float+0x370>
 800fccc:	2000      	movs	r0, #0
 800fcce:	e68b      	b.n	800f9e8 <_scanf_float+0x88>
 800fcd0:	7032      	strb	r2, [r6, #0]
 800fcd2:	6823      	ldr	r3, [r4, #0]
 800fcd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fcd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fcdc:	d11a      	bne.n	800fd14 <_scanf_float+0x3b4>
 800fcde:	9b02      	ldr	r3, [sp, #8]
 800fce0:	454b      	cmp	r3, r9
 800fce2:	eba3 0209 	sub.w	r2, r3, r9
 800fce6:	d121      	bne.n	800fd2c <_scanf_float+0x3cc>
 800fce8:	9901      	ldr	r1, [sp, #4]
 800fcea:	2200      	movs	r2, #0
 800fcec:	4640      	mov	r0, r8
 800fcee:	f7ff f9f9 	bl	800f0e4 <_strtod_r>
 800fcf2:	9b03      	ldr	r3, [sp, #12]
 800fcf4:	6821      	ldr	r1, [r4, #0]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	f011 0f02 	tst.w	r1, #2
 800fcfc:	f103 0204 	add.w	r2, r3, #4
 800fd00:	d01f      	beq.n	800fd42 <_scanf_float+0x3e2>
 800fd02:	9903      	ldr	r1, [sp, #12]
 800fd04:	600a      	str	r2, [r1, #0]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	ed83 0b00 	vstr	d0, [r3]
 800fd0c:	68e3      	ldr	r3, [r4, #12]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	60e3      	str	r3, [r4, #12]
 800fd12:	e7db      	b.n	800fccc <_scanf_float+0x36c>
 800fd14:	9b04      	ldr	r3, [sp, #16]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d0e6      	beq.n	800fce8 <_scanf_float+0x388>
 800fd1a:	9905      	ldr	r1, [sp, #20]
 800fd1c:	230a      	movs	r3, #10
 800fd1e:	3101      	adds	r1, #1
 800fd20:	4640      	mov	r0, r8
 800fd22:	f002 f8e7 	bl	8011ef4 <_strtol_r>
 800fd26:	9b04      	ldr	r3, [sp, #16]
 800fd28:	9e05      	ldr	r6, [sp, #20]
 800fd2a:	1ac2      	subs	r2, r0, r3
 800fd2c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fd30:	429e      	cmp	r6, r3
 800fd32:	bf28      	it	cs
 800fd34:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fd38:	490d      	ldr	r1, [pc, #52]	@ (800fd70 <_scanf_float+0x410>)
 800fd3a:	4630      	mov	r0, r6
 800fd3c:	f000 f8de 	bl	800fefc <siprintf>
 800fd40:	e7d2      	b.n	800fce8 <_scanf_float+0x388>
 800fd42:	f011 0f04 	tst.w	r1, #4
 800fd46:	9903      	ldr	r1, [sp, #12]
 800fd48:	600a      	str	r2, [r1, #0]
 800fd4a:	d1dc      	bne.n	800fd06 <_scanf_float+0x3a6>
 800fd4c:	eeb4 0b40 	vcmp.f64	d0, d0
 800fd50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd54:	681d      	ldr	r5, [r3, #0]
 800fd56:	d705      	bvc.n	800fd64 <_scanf_float+0x404>
 800fd58:	4806      	ldr	r0, [pc, #24]	@ (800fd74 <_scanf_float+0x414>)
 800fd5a:	f000 fa25 	bl	80101a8 <nanf>
 800fd5e:	ed85 0a00 	vstr	s0, [r5]
 800fd62:	e7d3      	b.n	800fd0c <_scanf_float+0x3ac>
 800fd64:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800fd68:	e7f9      	b.n	800fd5e <_scanf_float+0x3fe>
 800fd6a:	f04f 0900 	mov.w	r9, #0
 800fd6e:	e630      	b.n	800f9d2 <_scanf_float+0x72>
 800fd70:	0801335a 	.word	0x0801335a
 800fd74:	08013718 	.word	0x08013718

0800fd78 <std>:
 800fd78:	2300      	movs	r3, #0
 800fd7a:	b510      	push	{r4, lr}
 800fd7c:	4604      	mov	r4, r0
 800fd7e:	e9c0 3300 	strd	r3, r3, [r0]
 800fd82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd86:	6083      	str	r3, [r0, #8]
 800fd88:	8181      	strh	r1, [r0, #12]
 800fd8a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fd8c:	81c2      	strh	r2, [r0, #14]
 800fd8e:	6183      	str	r3, [r0, #24]
 800fd90:	4619      	mov	r1, r3
 800fd92:	2208      	movs	r2, #8
 800fd94:	305c      	adds	r0, #92	@ 0x5c
 800fd96:	f000 f940 	bl	801001a <memset>
 800fd9a:	4b0d      	ldr	r3, [pc, #52]	@ (800fdd0 <std+0x58>)
 800fd9c:	6263      	str	r3, [r4, #36]	@ 0x24
 800fd9e:	4b0d      	ldr	r3, [pc, #52]	@ (800fdd4 <std+0x5c>)
 800fda0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fda2:	4b0d      	ldr	r3, [pc, #52]	@ (800fdd8 <std+0x60>)
 800fda4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fda6:	4b0d      	ldr	r3, [pc, #52]	@ (800fddc <std+0x64>)
 800fda8:	6323      	str	r3, [r4, #48]	@ 0x30
 800fdaa:	4b0d      	ldr	r3, [pc, #52]	@ (800fde0 <std+0x68>)
 800fdac:	6224      	str	r4, [r4, #32]
 800fdae:	429c      	cmp	r4, r3
 800fdb0:	d006      	beq.n	800fdc0 <std+0x48>
 800fdb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fdb6:	4294      	cmp	r4, r2
 800fdb8:	d002      	beq.n	800fdc0 <std+0x48>
 800fdba:	33d0      	adds	r3, #208	@ 0xd0
 800fdbc:	429c      	cmp	r4, r3
 800fdbe:	d105      	bne.n	800fdcc <std+0x54>
 800fdc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fdc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdc8:	f000 b9d2 	b.w	8010170 <__retarget_lock_init_recursive>
 800fdcc:	bd10      	pop	{r4, pc}
 800fdce:	bf00      	nop
 800fdd0:	0800ff91 	.word	0x0800ff91
 800fdd4:	0800ffb7 	.word	0x0800ffb7
 800fdd8:	0800ffef 	.word	0x0800ffef
 800fddc:	08010013 	.word	0x08010013
 800fde0:	24000d88 	.word	0x24000d88

0800fde4 <stdio_exit_handler>:
 800fde4:	4a02      	ldr	r2, [pc, #8]	@ (800fdf0 <stdio_exit_handler+0xc>)
 800fde6:	4903      	ldr	r1, [pc, #12]	@ (800fdf4 <stdio_exit_handler+0x10>)
 800fde8:	4803      	ldr	r0, [pc, #12]	@ (800fdf8 <stdio_exit_handler+0x14>)
 800fdea:	f000 b869 	b.w	800fec0 <_fwalk_sglue>
 800fdee:	bf00      	nop
 800fdf0:	2400004c 	.word	0x2400004c
 800fdf4:	080128fd 	.word	0x080128fd
 800fdf8:	240001c8 	.word	0x240001c8

0800fdfc <cleanup_stdio>:
 800fdfc:	6841      	ldr	r1, [r0, #4]
 800fdfe:	4b0c      	ldr	r3, [pc, #48]	@ (800fe30 <cleanup_stdio+0x34>)
 800fe00:	4299      	cmp	r1, r3
 800fe02:	b510      	push	{r4, lr}
 800fe04:	4604      	mov	r4, r0
 800fe06:	d001      	beq.n	800fe0c <cleanup_stdio+0x10>
 800fe08:	f002 fd78 	bl	80128fc <_fflush_r>
 800fe0c:	68a1      	ldr	r1, [r4, #8]
 800fe0e:	4b09      	ldr	r3, [pc, #36]	@ (800fe34 <cleanup_stdio+0x38>)
 800fe10:	4299      	cmp	r1, r3
 800fe12:	d002      	beq.n	800fe1a <cleanup_stdio+0x1e>
 800fe14:	4620      	mov	r0, r4
 800fe16:	f002 fd71 	bl	80128fc <_fflush_r>
 800fe1a:	68e1      	ldr	r1, [r4, #12]
 800fe1c:	4b06      	ldr	r3, [pc, #24]	@ (800fe38 <cleanup_stdio+0x3c>)
 800fe1e:	4299      	cmp	r1, r3
 800fe20:	d004      	beq.n	800fe2c <cleanup_stdio+0x30>
 800fe22:	4620      	mov	r0, r4
 800fe24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe28:	f002 bd68 	b.w	80128fc <_fflush_r>
 800fe2c:	bd10      	pop	{r4, pc}
 800fe2e:	bf00      	nop
 800fe30:	24000d88 	.word	0x24000d88
 800fe34:	24000df0 	.word	0x24000df0
 800fe38:	24000e58 	.word	0x24000e58

0800fe3c <global_stdio_init.part.0>:
 800fe3c:	b510      	push	{r4, lr}
 800fe3e:	4b0b      	ldr	r3, [pc, #44]	@ (800fe6c <global_stdio_init.part.0+0x30>)
 800fe40:	4c0b      	ldr	r4, [pc, #44]	@ (800fe70 <global_stdio_init.part.0+0x34>)
 800fe42:	4a0c      	ldr	r2, [pc, #48]	@ (800fe74 <global_stdio_init.part.0+0x38>)
 800fe44:	601a      	str	r2, [r3, #0]
 800fe46:	4620      	mov	r0, r4
 800fe48:	2200      	movs	r2, #0
 800fe4a:	2104      	movs	r1, #4
 800fe4c:	f7ff ff94 	bl	800fd78 <std>
 800fe50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fe54:	2201      	movs	r2, #1
 800fe56:	2109      	movs	r1, #9
 800fe58:	f7ff ff8e 	bl	800fd78 <std>
 800fe5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fe60:	2202      	movs	r2, #2
 800fe62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe66:	2112      	movs	r1, #18
 800fe68:	f7ff bf86 	b.w	800fd78 <std>
 800fe6c:	24000ec0 	.word	0x24000ec0
 800fe70:	24000d88 	.word	0x24000d88
 800fe74:	0800fde5 	.word	0x0800fde5

0800fe78 <__sfp_lock_acquire>:
 800fe78:	4801      	ldr	r0, [pc, #4]	@ (800fe80 <__sfp_lock_acquire+0x8>)
 800fe7a:	f000 b97a 	b.w	8010172 <__retarget_lock_acquire_recursive>
 800fe7e:	bf00      	nop
 800fe80:	24000ec9 	.word	0x24000ec9

0800fe84 <__sfp_lock_release>:
 800fe84:	4801      	ldr	r0, [pc, #4]	@ (800fe8c <__sfp_lock_release+0x8>)
 800fe86:	f000 b975 	b.w	8010174 <__retarget_lock_release_recursive>
 800fe8a:	bf00      	nop
 800fe8c:	24000ec9 	.word	0x24000ec9

0800fe90 <__sinit>:
 800fe90:	b510      	push	{r4, lr}
 800fe92:	4604      	mov	r4, r0
 800fe94:	f7ff fff0 	bl	800fe78 <__sfp_lock_acquire>
 800fe98:	6a23      	ldr	r3, [r4, #32]
 800fe9a:	b11b      	cbz	r3, 800fea4 <__sinit+0x14>
 800fe9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fea0:	f7ff bff0 	b.w	800fe84 <__sfp_lock_release>
 800fea4:	4b04      	ldr	r3, [pc, #16]	@ (800feb8 <__sinit+0x28>)
 800fea6:	6223      	str	r3, [r4, #32]
 800fea8:	4b04      	ldr	r3, [pc, #16]	@ (800febc <__sinit+0x2c>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d1f5      	bne.n	800fe9c <__sinit+0xc>
 800feb0:	f7ff ffc4 	bl	800fe3c <global_stdio_init.part.0>
 800feb4:	e7f2      	b.n	800fe9c <__sinit+0xc>
 800feb6:	bf00      	nop
 800feb8:	0800fdfd 	.word	0x0800fdfd
 800febc:	24000ec0 	.word	0x24000ec0

0800fec0 <_fwalk_sglue>:
 800fec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fec4:	4607      	mov	r7, r0
 800fec6:	4688      	mov	r8, r1
 800fec8:	4614      	mov	r4, r2
 800feca:	2600      	movs	r6, #0
 800fecc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fed0:	f1b9 0901 	subs.w	r9, r9, #1
 800fed4:	d505      	bpl.n	800fee2 <_fwalk_sglue+0x22>
 800fed6:	6824      	ldr	r4, [r4, #0]
 800fed8:	2c00      	cmp	r4, #0
 800feda:	d1f7      	bne.n	800fecc <_fwalk_sglue+0xc>
 800fedc:	4630      	mov	r0, r6
 800fede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fee2:	89ab      	ldrh	r3, [r5, #12]
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d907      	bls.n	800fef8 <_fwalk_sglue+0x38>
 800fee8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800feec:	3301      	adds	r3, #1
 800feee:	d003      	beq.n	800fef8 <_fwalk_sglue+0x38>
 800fef0:	4629      	mov	r1, r5
 800fef2:	4638      	mov	r0, r7
 800fef4:	47c0      	blx	r8
 800fef6:	4306      	orrs	r6, r0
 800fef8:	3568      	adds	r5, #104	@ 0x68
 800fefa:	e7e9      	b.n	800fed0 <_fwalk_sglue+0x10>

0800fefc <siprintf>:
 800fefc:	b40e      	push	{r1, r2, r3}
 800fefe:	b500      	push	{lr}
 800ff00:	b09c      	sub	sp, #112	@ 0x70
 800ff02:	ab1d      	add	r3, sp, #116	@ 0x74
 800ff04:	9002      	str	r0, [sp, #8]
 800ff06:	9006      	str	r0, [sp, #24]
 800ff08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ff0c:	4809      	ldr	r0, [pc, #36]	@ (800ff34 <siprintf+0x38>)
 800ff0e:	9107      	str	r1, [sp, #28]
 800ff10:	9104      	str	r1, [sp, #16]
 800ff12:	4909      	ldr	r1, [pc, #36]	@ (800ff38 <siprintf+0x3c>)
 800ff14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff18:	9105      	str	r1, [sp, #20]
 800ff1a:	6800      	ldr	r0, [r0, #0]
 800ff1c:	9301      	str	r3, [sp, #4]
 800ff1e:	a902      	add	r1, sp, #8
 800ff20:	f002 f852 	bl	8011fc8 <_svfiprintf_r>
 800ff24:	9b02      	ldr	r3, [sp, #8]
 800ff26:	2200      	movs	r2, #0
 800ff28:	701a      	strb	r2, [r3, #0]
 800ff2a:	b01c      	add	sp, #112	@ 0x70
 800ff2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff30:	b003      	add	sp, #12
 800ff32:	4770      	bx	lr
 800ff34:	240001c4 	.word	0x240001c4
 800ff38:	ffff0208 	.word	0xffff0208

0800ff3c <siscanf>:
 800ff3c:	b40e      	push	{r1, r2, r3}
 800ff3e:	b530      	push	{r4, r5, lr}
 800ff40:	b09c      	sub	sp, #112	@ 0x70
 800ff42:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ff44:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800ff48:	f854 5b04 	ldr.w	r5, [r4], #4
 800ff4c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ff50:	9002      	str	r0, [sp, #8]
 800ff52:	9006      	str	r0, [sp, #24]
 800ff54:	f7f0 fa2c 	bl	80003b0 <strlen>
 800ff58:	4b0b      	ldr	r3, [pc, #44]	@ (800ff88 <siscanf+0x4c>)
 800ff5a:	9003      	str	r0, [sp, #12]
 800ff5c:	9007      	str	r0, [sp, #28]
 800ff5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff60:	480a      	ldr	r0, [pc, #40]	@ (800ff8c <siscanf+0x50>)
 800ff62:	9401      	str	r4, [sp, #4]
 800ff64:	2300      	movs	r3, #0
 800ff66:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ff68:	9314      	str	r3, [sp, #80]	@ 0x50
 800ff6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ff6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ff72:	462a      	mov	r2, r5
 800ff74:	4623      	mov	r3, r4
 800ff76:	a902      	add	r1, sp, #8
 800ff78:	6800      	ldr	r0, [r0, #0]
 800ff7a:	f002 f979 	bl	8012270 <__ssvfiscanf_r>
 800ff7e:	b01c      	add	sp, #112	@ 0x70
 800ff80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff84:	b003      	add	sp, #12
 800ff86:	4770      	bx	lr
 800ff88:	0800ffb3 	.word	0x0800ffb3
 800ff8c:	240001c4 	.word	0x240001c4

0800ff90 <__sread>:
 800ff90:	b510      	push	{r4, lr}
 800ff92:	460c      	mov	r4, r1
 800ff94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff98:	f000 f88c 	bl	80100b4 <_read_r>
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	bfab      	itete	ge
 800ffa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ffa2:	89a3      	ldrhlt	r3, [r4, #12]
 800ffa4:	181b      	addge	r3, r3, r0
 800ffa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ffaa:	bfac      	ite	ge
 800ffac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ffae:	81a3      	strhlt	r3, [r4, #12]
 800ffb0:	bd10      	pop	{r4, pc}

0800ffb2 <__seofread>:
 800ffb2:	2000      	movs	r0, #0
 800ffb4:	4770      	bx	lr

0800ffb6 <__swrite>:
 800ffb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffba:	461f      	mov	r7, r3
 800ffbc:	898b      	ldrh	r3, [r1, #12]
 800ffbe:	05db      	lsls	r3, r3, #23
 800ffc0:	4605      	mov	r5, r0
 800ffc2:	460c      	mov	r4, r1
 800ffc4:	4616      	mov	r6, r2
 800ffc6:	d505      	bpl.n	800ffd4 <__swrite+0x1e>
 800ffc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffcc:	2302      	movs	r3, #2
 800ffce:	2200      	movs	r2, #0
 800ffd0:	f000 f85e 	bl	8010090 <_lseek_r>
 800ffd4:	89a3      	ldrh	r3, [r4, #12]
 800ffd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ffde:	81a3      	strh	r3, [r4, #12]
 800ffe0:	4632      	mov	r2, r6
 800ffe2:	463b      	mov	r3, r7
 800ffe4:	4628      	mov	r0, r5
 800ffe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffea:	f000 b885 	b.w	80100f8 <_write_r>

0800ffee <__sseek>:
 800ffee:	b510      	push	{r4, lr}
 800fff0:	460c      	mov	r4, r1
 800fff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fff6:	f000 f84b 	bl	8010090 <_lseek_r>
 800fffa:	1c43      	adds	r3, r0, #1
 800fffc:	89a3      	ldrh	r3, [r4, #12]
 800fffe:	bf15      	itete	ne
 8010000:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010002:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010006:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801000a:	81a3      	strheq	r3, [r4, #12]
 801000c:	bf18      	it	ne
 801000e:	81a3      	strhne	r3, [r4, #12]
 8010010:	bd10      	pop	{r4, pc}

08010012 <__sclose>:
 8010012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010016:	f000 b82b 	b.w	8010070 <_close_r>

0801001a <memset>:
 801001a:	4402      	add	r2, r0
 801001c:	4603      	mov	r3, r0
 801001e:	4293      	cmp	r3, r2
 8010020:	d100      	bne.n	8010024 <memset+0xa>
 8010022:	4770      	bx	lr
 8010024:	f803 1b01 	strb.w	r1, [r3], #1
 8010028:	e7f9      	b.n	801001e <memset+0x4>

0801002a <strchr>:
 801002a:	b2c9      	uxtb	r1, r1
 801002c:	4603      	mov	r3, r0
 801002e:	4618      	mov	r0, r3
 8010030:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010034:	b112      	cbz	r2, 801003c <strchr+0x12>
 8010036:	428a      	cmp	r2, r1
 8010038:	d1f9      	bne.n	801002e <strchr+0x4>
 801003a:	4770      	bx	lr
 801003c:	2900      	cmp	r1, #0
 801003e:	bf18      	it	ne
 8010040:	2000      	movne	r0, #0
 8010042:	4770      	bx	lr

08010044 <strncmp>:
 8010044:	b510      	push	{r4, lr}
 8010046:	b16a      	cbz	r2, 8010064 <strncmp+0x20>
 8010048:	3901      	subs	r1, #1
 801004a:	1884      	adds	r4, r0, r2
 801004c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010050:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010054:	429a      	cmp	r2, r3
 8010056:	d103      	bne.n	8010060 <strncmp+0x1c>
 8010058:	42a0      	cmp	r0, r4
 801005a:	d001      	beq.n	8010060 <strncmp+0x1c>
 801005c:	2a00      	cmp	r2, #0
 801005e:	d1f5      	bne.n	801004c <strncmp+0x8>
 8010060:	1ad0      	subs	r0, r2, r3
 8010062:	bd10      	pop	{r4, pc}
 8010064:	4610      	mov	r0, r2
 8010066:	e7fc      	b.n	8010062 <strncmp+0x1e>

08010068 <_localeconv_r>:
 8010068:	4800      	ldr	r0, [pc, #0]	@ (801006c <_localeconv_r+0x4>)
 801006a:	4770      	bx	lr
 801006c:	24000148 	.word	0x24000148

08010070 <_close_r>:
 8010070:	b538      	push	{r3, r4, r5, lr}
 8010072:	4d06      	ldr	r5, [pc, #24]	@ (801008c <_close_r+0x1c>)
 8010074:	2300      	movs	r3, #0
 8010076:	4604      	mov	r4, r0
 8010078:	4608      	mov	r0, r1
 801007a:	602b      	str	r3, [r5, #0]
 801007c:	f7f1 fc74 	bl	8001968 <_close>
 8010080:	1c43      	adds	r3, r0, #1
 8010082:	d102      	bne.n	801008a <_close_r+0x1a>
 8010084:	682b      	ldr	r3, [r5, #0]
 8010086:	b103      	cbz	r3, 801008a <_close_r+0x1a>
 8010088:	6023      	str	r3, [r4, #0]
 801008a:	bd38      	pop	{r3, r4, r5, pc}
 801008c:	24000ec4 	.word	0x24000ec4

08010090 <_lseek_r>:
 8010090:	b538      	push	{r3, r4, r5, lr}
 8010092:	4d07      	ldr	r5, [pc, #28]	@ (80100b0 <_lseek_r+0x20>)
 8010094:	4604      	mov	r4, r0
 8010096:	4608      	mov	r0, r1
 8010098:	4611      	mov	r1, r2
 801009a:	2200      	movs	r2, #0
 801009c:	602a      	str	r2, [r5, #0]
 801009e:	461a      	mov	r2, r3
 80100a0:	f7f1 fc89 	bl	80019b6 <_lseek>
 80100a4:	1c43      	adds	r3, r0, #1
 80100a6:	d102      	bne.n	80100ae <_lseek_r+0x1e>
 80100a8:	682b      	ldr	r3, [r5, #0]
 80100aa:	b103      	cbz	r3, 80100ae <_lseek_r+0x1e>
 80100ac:	6023      	str	r3, [r4, #0]
 80100ae:	bd38      	pop	{r3, r4, r5, pc}
 80100b0:	24000ec4 	.word	0x24000ec4

080100b4 <_read_r>:
 80100b4:	b538      	push	{r3, r4, r5, lr}
 80100b6:	4d07      	ldr	r5, [pc, #28]	@ (80100d4 <_read_r+0x20>)
 80100b8:	4604      	mov	r4, r0
 80100ba:	4608      	mov	r0, r1
 80100bc:	4611      	mov	r1, r2
 80100be:	2200      	movs	r2, #0
 80100c0:	602a      	str	r2, [r5, #0]
 80100c2:	461a      	mov	r2, r3
 80100c4:	f7f1 fc17 	bl	80018f6 <_read>
 80100c8:	1c43      	adds	r3, r0, #1
 80100ca:	d102      	bne.n	80100d2 <_read_r+0x1e>
 80100cc:	682b      	ldr	r3, [r5, #0]
 80100ce:	b103      	cbz	r3, 80100d2 <_read_r+0x1e>
 80100d0:	6023      	str	r3, [r4, #0]
 80100d2:	bd38      	pop	{r3, r4, r5, pc}
 80100d4:	24000ec4 	.word	0x24000ec4

080100d8 <_sbrk_r>:
 80100d8:	b538      	push	{r3, r4, r5, lr}
 80100da:	4d06      	ldr	r5, [pc, #24]	@ (80100f4 <_sbrk_r+0x1c>)
 80100dc:	2300      	movs	r3, #0
 80100de:	4604      	mov	r4, r0
 80100e0:	4608      	mov	r0, r1
 80100e2:	602b      	str	r3, [r5, #0]
 80100e4:	f7f1 fc74 	bl	80019d0 <_sbrk>
 80100e8:	1c43      	adds	r3, r0, #1
 80100ea:	d102      	bne.n	80100f2 <_sbrk_r+0x1a>
 80100ec:	682b      	ldr	r3, [r5, #0]
 80100ee:	b103      	cbz	r3, 80100f2 <_sbrk_r+0x1a>
 80100f0:	6023      	str	r3, [r4, #0]
 80100f2:	bd38      	pop	{r3, r4, r5, pc}
 80100f4:	24000ec4 	.word	0x24000ec4

080100f8 <_write_r>:
 80100f8:	b538      	push	{r3, r4, r5, lr}
 80100fa:	4d07      	ldr	r5, [pc, #28]	@ (8010118 <_write_r+0x20>)
 80100fc:	4604      	mov	r4, r0
 80100fe:	4608      	mov	r0, r1
 8010100:	4611      	mov	r1, r2
 8010102:	2200      	movs	r2, #0
 8010104:	602a      	str	r2, [r5, #0]
 8010106:	461a      	mov	r2, r3
 8010108:	f7f1 fc12 	bl	8001930 <_write>
 801010c:	1c43      	adds	r3, r0, #1
 801010e:	d102      	bne.n	8010116 <_write_r+0x1e>
 8010110:	682b      	ldr	r3, [r5, #0]
 8010112:	b103      	cbz	r3, 8010116 <_write_r+0x1e>
 8010114:	6023      	str	r3, [r4, #0]
 8010116:	bd38      	pop	{r3, r4, r5, pc}
 8010118:	24000ec4 	.word	0x24000ec4

0801011c <__errno>:
 801011c:	4b01      	ldr	r3, [pc, #4]	@ (8010124 <__errno+0x8>)
 801011e:	6818      	ldr	r0, [r3, #0]
 8010120:	4770      	bx	lr
 8010122:	bf00      	nop
 8010124:	240001c4 	.word	0x240001c4

08010128 <__libc_init_array>:
 8010128:	b570      	push	{r4, r5, r6, lr}
 801012a:	4d0d      	ldr	r5, [pc, #52]	@ (8010160 <__libc_init_array+0x38>)
 801012c:	4c0d      	ldr	r4, [pc, #52]	@ (8010164 <__libc_init_array+0x3c>)
 801012e:	1b64      	subs	r4, r4, r5
 8010130:	10a4      	asrs	r4, r4, #2
 8010132:	2600      	movs	r6, #0
 8010134:	42a6      	cmp	r6, r4
 8010136:	d109      	bne.n	801014c <__libc_init_array+0x24>
 8010138:	4d0b      	ldr	r5, [pc, #44]	@ (8010168 <__libc_init_array+0x40>)
 801013a:	4c0c      	ldr	r4, [pc, #48]	@ (801016c <__libc_init_array+0x44>)
 801013c:	f003 f822 	bl	8013184 <_init>
 8010140:	1b64      	subs	r4, r4, r5
 8010142:	10a4      	asrs	r4, r4, #2
 8010144:	2600      	movs	r6, #0
 8010146:	42a6      	cmp	r6, r4
 8010148:	d105      	bne.n	8010156 <__libc_init_array+0x2e>
 801014a:	bd70      	pop	{r4, r5, r6, pc}
 801014c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010150:	4798      	blx	r3
 8010152:	3601      	adds	r6, #1
 8010154:	e7ee      	b.n	8010134 <__libc_init_array+0xc>
 8010156:	f855 3b04 	ldr.w	r3, [r5], #4
 801015a:	4798      	blx	r3
 801015c:	3601      	adds	r6, #1
 801015e:	e7f2      	b.n	8010146 <__libc_init_array+0x1e>
 8010160:	08013724 	.word	0x08013724
 8010164:	08013724 	.word	0x08013724
 8010168:	08013724 	.word	0x08013724
 801016c:	08013728 	.word	0x08013728

08010170 <__retarget_lock_init_recursive>:
 8010170:	4770      	bx	lr

08010172 <__retarget_lock_acquire_recursive>:
 8010172:	4770      	bx	lr

08010174 <__retarget_lock_release_recursive>:
 8010174:	4770      	bx	lr

08010176 <memcpy>:
 8010176:	440a      	add	r2, r1
 8010178:	4291      	cmp	r1, r2
 801017a:	f100 33ff 	add.w	r3, r0, #4294967295
 801017e:	d100      	bne.n	8010182 <memcpy+0xc>
 8010180:	4770      	bx	lr
 8010182:	b510      	push	{r4, lr}
 8010184:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010188:	f803 4f01 	strb.w	r4, [r3, #1]!
 801018c:	4291      	cmp	r1, r2
 801018e:	d1f9      	bne.n	8010184 <memcpy+0xe>
 8010190:	bd10      	pop	{r4, pc}
 8010192:	0000      	movs	r0, r0
 8010194:	0000      	movs	r0, r0
	...

08010198 <nan>:
 8010198:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80101a0 <nan+0x8>
 801019c:	4770      	bx	lr
 801019e:	bf00      	nop
 80101a0:	00000000 	.word	0x00000000
 80101a4:	7ff80000 	.word	0x7ff80000

080101a8 <nanf>:
 80101a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80101b0 <nanf+0x8>
 80101ac:	4770      	bx	lr
 80101ae:	bf00      	nop
 80101b0:	7fc00000 	.word	0x7fc00000

080101b4 <quorem>:
 80101b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b8:	6903      	ldr	r3, [r0, #16]
 80101ba:	690c      	ldr	r4, [r1, #16]
 80101bc:	42a3      	cmp	r3, r4
 80101be:	4607      	mov	r7, r0
 80101c0:	db7e      	blt.n	80102c0 <quorem+0x10c>
 80101c2:	3c01      	subs	r4, #1
 80101c4:	f101 0814 	add.w	r8, r1, #20
 80101c8:	00a3      	lsls	r3, r4, #2
 80101ca:	f100 0514 	add.w	r5, r0, #20
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80101d4:	9301      	str	r3, [sp, #4]
 80101d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80101da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80101de:	3301      	adds	r3, #1
 80101e0:	429a      	cmp	r2, r3
 80101e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80101e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80101ea:	d32e      	bcc.n	801024a <quorem+0x96>
 80101ec:	f04f 0a00 	mov.w	sl, #0
 80101f0:	46c4      	mov	ip, r8
 80101f2:	46ae      	mov	lr, r5
 80101f4:	46d3      	mov	fp, sl
 80101f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80101fa:	b298      	uxth	r0, r3
 80101fc:	fb06 a000 	mla	r0, r6, r0, sl
 8010200:	0c02      	lsrs	r2, r0, #16
 8010202:	0c1b      	lsrs	r3, r3, #16
 8010204:	fb06 2303 	mla	r3, r6, r3, r2
 8010208:	f8de 2000 	ldr.w	r2, [lr]
 801020c:	b280      	uxth	r0, r0
 801020e:	b292      	uxth	r2, r2
 8010210:	1a12      	subs	r2, r2, r0
 8010212:	445a      	add	r2, fp
 8010214:	f8de 0000 	ldr.w	r0, [lr]
 8010218:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801021c:	b29b      	uxth	r3, r3
 801021e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010222:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010226:	b292      	uxth	r2, r2
 8010228:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801022c:	45e1      	cmp	r9, ip
 801022e:	f84e 2b04 	str.w	r2, [lr], #4
 8010232:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010236:	d2de      	bcs.n	80101f6 <quorem+0x42>
 8010238:	9b00      	ldr	r3, [sp, #0]
 801023a:	58eb      	ldr	r3, [r5, r3]
 801023c:	b92b      	cbnz	r3, 801024a <quorem+0x96>
 801023e:	9b01      	ldr	r3, [sp, #4]
 8010240:	3b04      	subs	r3, #4
 8010242:	429d      	cmp	r5, r3
 8010244:	461a      	mov	r2, r3
 8010246:	d32f      	bcc.n	80102a8 <quorem+0xf4>
 8010248:	613c      	str	r4, [r7, #16]
 801024a:	4638      	mov	r0, r7
 801024c:	f001 fbec 	bl	8011a28 <__mcmp>
 8010250:	2800      	cmp	r0, #0
 8010252:	db25      	blt.n	80102a0 <quorem+0xec>
 8010254:	4629      	mov	r1, r5
 8010256:	2000      	movs	r0, #0
 8010258:	f858 2b04 	ldr.w	r2, [r8], #4
 801025c:	f8d1 c000 	ldr.w	ip, [r1]
 8010260:	fa1f fe82 	uxth.w	lr, r2
 8010264:	fa1f f38c 	uxth.w	r3, ip
 8010268:	eba3 030e 	sub.w	r3, r3, lr
 801026c:	4403      	add	r3, r0
 801026e:	0c12      	lsrs	r2, r2, #16
 8010270:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010274:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010278:	b29b      	uxth	r3, r3
 801027a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801027e:	45c1      	cmp	r9, r8
 8010280:	f841 3b04 	str.w	r3, [r1], #4
 8010284:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010288:	d2e6      	bcs.n	8010258 <quorem+0xa4>
 801028a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801028e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010292:	b922      	cbnz	r2, 801029e <quorem+0xea>
 8010294:	3b04      	subs	r3, #4
 8010296:	429d      	cmp	r5, r3
 8010298:	461a      	mov	r2, r3
 801029a:	d30b      	bcc.n	80102b4 <quorem+0x100>
 801029c:	613c      	str	r4, [r7, #16]
 801029e:	3601      	adds	r6, #1
 80102a0:	4630      	mov	r0, r6
 80102a2:	b003      	add	sp, #12
 80102a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102a8:	6812      	ldr	r2, [r2, #0]
 80102aa:	3b04      	subs	r3, #4
 80102ac:	2a00      	cmp	r2, #0
 80102ae:	d1cb      	bne.n	8010248 <quorem+0x94>
 80102b0:	3c01      	subs	r4, #1
 80102b2:	e7c6      	b.n	8010242 <quorem+0x8e>
 80102b4:	6812      	ldr	r2, [r2, #0]
 80102b6:	3b04      	subs	r3, #4
 80102b8:	2a00      	cmp	r2, #0
 80102ba:	d1ef      	bne.n	801029c <quorem+0xe8>
 80102bc:	3c01      	subs	r4, #1
 80102be:	e7ea      	b.n	8010296 <quorem+0xe2>
 80102c0:	2000      	movs	r0, #0
 80102c2:	e7ee      	b.n	80102a2 <quorem+0xee>
 80102c4:	0000      	movs	r0, r0
	...

080102c8 <_dtoa_r>:
 80102c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102cc:	ed2d 8b02 	vpush	{d8}
 80102d0:	69c7      	ldr	r7, [r0, #28]
 80102d2:	b091      	sub	sp, #68	@ 0x44
 80102d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80102d8:	ec55 4b10 	vmov	r4, r5, d0
 80102dc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80102de:	9107      	str	r1, [sp, #28]
 80102e0:	4681      	mov	r9, r0
 80102e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80102e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80102e6:	b97f      	cbnz	r7, 8010308 <_dtoa_r+0x40>
 80102e8:	2010      	movs	r0, #16
 80102ea:	f7fe f893 	bl	800e414 <malloc>
 80102ee:	4602      	mov	r2, r0
 80102f0:	f8c9 001c 	str.w	r0, [r9, #28]
 80102f4:	b920      	cbnz	r0, 8010300 <_dtoa_r+0x38>
 80102f6:	4ba0      	ldr	r3, [pc, #640]	@ (8010578 <_dtoa_r+0x2b0>)
 80102f8:	21ef      	movs	r1, #239	@ 0xef
 80102fa:	48a0      	ldr	r0, [pc, #640]	@ (801057c <_dtoa_r+0x2b4>)
 80102fc:	f002 fbb4 	bl	8012a68 <__assert_func>
 8010300:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010304:	6007      	str	r7, [r0, #0]
 8010306:	60c7      	str	r7, [r0, #12]
 8010308:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801030c:	6819      	ldr	r1, [r3, #0]
 801030e:	b159      	cbz	r1, 8010328 <_dtoa_r+0x60>
 8010310:	685a      	ldr	r2, [r3, #4]
 8010312:	604a      	str	r2, [r1, #4]
 8010314:	2301      	movs	r3, #1
 8010316:	4093      	lsls	r3, r2
 8010318:	608b      	str	r3, [r1, #8]
 801031a:	4648      	mov	r0, r9
 801031c:	f001 f900 	bl	8011520 <_Bfree>
 8010320:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010324:	2200      	movs	r2, #0
 8010326:	601a      	str	r2, [r3, #0]
 8010328:	1e2b      	subs	r3, r5, #0
 801032a:	bfbb      	ittet	lt
 801032c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010330:	9303      	strlt	r3, [sp, #12]
 8010332:	2300      	movge	r3, #0
 8010334:	2201      	movlt	r2, #1
 8010336:	bfac      	ite	ge
 8010338:	6033      	strge	r3, [r6, #0]
 801033a:	6032      	strlt	r2, [r6, #0]
 801033c:	4b90      	ldr	r3, [pc, #576]	@ (8010580 <_dtoa_r+0x2b8>)
 801033e:	9e03      	ldr	r6, [sp, #12]
 8010340:	43b3      	bics	r3, r6
 8010342:	d110      	bne.n	8010366 <_dtoa_r+0x9e>
 8010344:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010346:	f242 730f 	movw	r3, #9999	@ 0x270f
 801034a:	6013      	str	r3, [r2, #0]
 801034c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010350:	4323      	orrs	r3, r4
 8010352:	f000 84de 	beq.w	8010d12 <_dtoa_r+0xa4a>
 8010356:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010358:	4f8a      	ldr	r7, [pc, #552]	@ (8010584 <_dtoa_r+0x2bc>)
 801035a:	2b00      	cmp	r3, #0
 801035c:	f000 84e0 	beq.w	8010d20 <_dtoa_r+0xa58>
 8010360:	1cfb      	adds	r3, r7, #3
 8010362:	f000 bcdb 	b.w	8010d1c <_dtoa_r+0xa54>
 8010366:	ed9d 8b02 	vldr	d8, [sp, #8]
 801036a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801036e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010372:	d10a      	bne.n	801038a <_dtoa_r+0xc2>
 8010374:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010376:	2301      	movs	r3, #1
 8010378:	6013      	str	r3, [r2, #0]
 801037a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801037c:	b113      	cbz	r3, 8010384 <_dtoa_r+0xbc>
 801037e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010380:	4b81      	ldr	r3, [pc, #516]	@ (8010588 <_dtoa_r+0x2c0>)
 8010382:	6013      	str	r3, [r2, #0]
 8010384:	4f81      	ldr	r7, [pc, #516]	@ (801058c <_dtoa_r+0x2c4>)
 8010386:	f000 bccb 	b.w	8010d20 <_dtoa_r+0xa58>
 801038a:	aa0e      	add	r2, sp, #56	@ 0x38
 801038c:	a90f      	add	r1, sp, #60	@ 0x3c
 801038e:	4648      	mov	r0, r9
 8010390:	eeb0 0b48 	vmov.f64	d0, d8
 8010394:	f001 fc68 	bl	8011c68 <__d2b>
 8010398:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801039c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801039e:	9001      	str	r0, [sp, #4]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d045      	beq.n	8010430 <_dtoa_r+0x168>
 80103a4:	eeb0 7b48 	vmov.f64	d7, d8
 80103a8:	ee18 1a90 	vmov	r1, s17
 80103ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80103b0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80103b4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80103b8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80103bc:	2500      	movs	r5, #0
 80103be:	ee07 1a90 	vmov	s15, r1
 80103c2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80103c6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010560 <_dtoa_r+0x298>
 80103ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80103ce:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010568 <_dtoa_r+0x2a0>
 80103d2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80103d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010570 <_dtoa_r+0x2a8>
 80103da:	ee07 3a90 	vmov	s15, r3
 80103de:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80103e2:	eeb0 7b46 	vmov.f64	d7, d6
 80103e6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80103ea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80103ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80103f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103f6:	ee16 8a90 	vmov	r8, s13
 80103fa:	d508      	bpl.n	801040e <_dtoa_r+0x146>
 80103fc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010400:	eeb4 6b47 	vcmp.f64	d6, d7
 8010404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010408:	bf18      	it	ne
 801040a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801040e:	f1b8 0f16 	cmp.w	r8, #22
 8010412:	d82b      	bhi.n	801046c <_dtoa_r+0x1a4>
 8010414:	495e      	ldr	r1, [pc, #376]	@ (8010590 <_dtoa_r+0x2c8>)
 8010416:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801041a:	ed91 7b00 	vldr	d7, [r1]
 801041e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010426:	d501      	bpl.n	801042c <_dtoa_r+0x164>
 8010428:	f108 38ff 	add.w	r8, r8, #4294967295
 801042c:	2100      	movs	r1, #0
 801042e:	e01e      	b.n	801046e <_dtoa_r+0x1a6>
 8010430:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010432:	4413      	add	r3, r2
 8010434:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010438:	2920      	cmp	r1, #32
 801043a:	bfc1      	itttt	gt
 801043c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010440:	408e      	lslgt	r6, r1
 8010442:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8010446:	fa24 f101 	lsrgt.w	r1, r4, r1
 801044a:	bfd6      	itet	le
 801044c:	f1c1 0120 	rsble	r1, r1, #32
 8010450:	4331      	orrgt	r1, r6
 8010452:	fa04 f101 	lslle.w	r1, r4, r1
 8010456:	ee07 1a90 	vmov	s15, r1
 801045a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801045e:	3b01      	subs	r3, #1
 8010460:	ee17 1a90 	vmov	r1, s15
 8010464:	2501      	movs	r5, #1
 8010466:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801046a:	e7a8      	b.n	80103be <_dtoa_r+0xf6>
 801046c:	2101      	movs	r1, #1
 801046e:	1ad2      	subs	r2, r2, r3
 8010470:	1e53      	subs	r3, r2, #1
 8010472:	9306      	str	r3, [sp, #24]
 8010474:	bf45      	ittet	mi
 8010476:	f1c2 0301 	rsbmi	r3, r2, #1
 801047a:	9305      	strmi	r3, [sp, #20]
 801047c:	2300      	movpl	r3, #0
 801047e:	2300      	movmi	r3, #0
 8010480:	bf4c      	ite	mi
 8010482:	9306      	strmi	r3, [sp, #24]
 8010484:	9305      	strpl	r3, [sp, #20]
 8010486:	f1b8 0f00 	cmp.w	r8, #0
 801048a:	910c      	str	r1, [sp, #48]	@ 0x30
 801048c:	db18      	blt.n	80104c0 <_dtoa_r+0x1f8>
 801048e:	9b06      	ldr	r3, [sp, #24]
 8010490:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8010494:	4443      	add	r3, r8
 8010496:	9306      	str	r3, [sp, #24]
 8010498:	2300      	movs	r3, #0
 801049a:	9a07      	ldr	r2, [sp, #28]
 801049c:	2a09      	cmp	r2, #9
 801049e:	d849      	bhi.n	8010534 <_dtoa_r+0x26c>
 80104a0:	2a05      	cmp	r2, #5
 80104a2:	bfc4      	itt	gt
 80104a4:	3a04      	subgt	r2, #4
 80104a6:	9207      	strgt	r2, [sp, #28]
 80104a8:	9a07      	ldr	r2, [sp, #28]
 80104aa:	f1a2 0202 	sub.w	r2, r2, #2
 80104ae:	bfcc      	ite	gt
 80104b0:	2400      	movgt	r4, #0
 80104b2:	2401      	movle	r4, #1
 80104b4:	2a03      	cmp	r2, #3
 80104b6:	d848      	bhi.n	801054a <_dtoa_r+0x282>
 80104b8:	e8df f002 	tbb	[pc, r2]
 80104bc:	3a2c2e0b 	.word	0x3a2c2e0b
 80104c0:	9b05      	ldr	r3, [sp, #20]
 80104c2:	2200      	movs	r2, #0
 80104c4:	eba3 0308 	sub.w	r3, r3, r8
 80104c8:	9305      	str	r3, [sp, #20]
 80104ca:	920a      	str	r2, [sp, #40]	@ 0x28
 80104cc:	f1c8 0300 	rsb	r3, r8, #0
 80104d0:	e7e3      	b.n	801049a <_dtoa_r+0x1d2>
 80104d2:	2200      	movs	r2, #0
 80104d4:	9208      	str	r2, [sp, #32]
 80104d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104d8:	2a00      	cmp	r2, #0
 80104da:	dc39      	bgt.n	8010550 <_dtoa_r+0x288>
 80104dc:	f04f 0b01 	mov.w	fp, #1
 80104e0:	46da      	mov	sl, fp
 80104e2:	465a      	mov	r2, fp
 80104e4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80104e8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80104ec:	2100      	movs	r1, #0
 80104ee:	2004      	movs	r0, #4
 80104f0:	f100 0614 	add.w	r6, r0, #20
 80104f4:	4296      	cmp	r6, r2
 80104f6:	d930      	bls.n	801055a <_dtoa_r+0x292>
 80104f8:	6079      	str	r1, [r7, #4]
 80104fa:	4648      	mov	r0, r9
 80104fc:	9304      	str	r3, [sp, #16]
 80104fe:	f000 ffcf 	bl	80114a0 <_Balloc>
 8010502:	9b04      	ldr	r3, [sp, #16]
 8010504:	4607      	mov	r7, r0
 8010506:	2800      	cmp	r0, #0
 8010508:	d146      	bne.n	8010598 <_dtoa_r+0x2d0>
 801050a:	4b22      	ldr	r3, [pc, #136]	@ (8010594 <_dtoa_r+0x2cc>)
 801050c:	4602      	mov	r2, r0
 801050e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010512:	e6f2      	b.n	80102fa <_dtoa_r+0x32>
 8010514:	2201      	movs	r2, #1
 8010516:	e7dd      	b.n	80104d4 <_dtoa_r+0x20c>
 8010518:	2200      	movs	r2, #0
 801051a:	9208      	str	r2, [sp, #32]
 801051c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801051e:	eb08 0b02 	add.w	fp, r8, r2
 8010522:	f10b 0a01 	add.w	sl, fp, #1
 8010526:	4652      	mov	r2, sl
 8010528:	2a01      	cmp	r2, #1
 801052a:	bfb8      	it	lt
 801052c:	2201      	movlt	r2, #1
 801052e:	e7db      	b.n	80104e8 <_dtoa_r+0x220>
 8010530:	2201      	movs	r2, #1
 8010532:	e7f2      	b.n	801051a <_dtoa_r+0x252>
 8010534:	2401      	movs	r4, #1
 8010536:	2200      	movs	r2, #0
 8010538:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801053c:	f04f 3bff 	mov.w	fp, #4294967295
 8010540:	2100      	movs	r1, #0
 8010542:	46da      	mov	sl, fp
 8010544:	2212      	movs	r2, #18
 8010546:	9109      	str	r1, [sp, #36]	@ 0x24
 8010548:	e7ce      	b.n	80104e8 <_dtoa_r+0x220>
 801054a:	2201      	movs	r2, #1
 801054c:	9208      	str	r2, [sp, #32]
 801054e:	e7f5      	b.n	801053c <_dtoa_r+0x274>
 8010550:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8010554:	46da      	mov	sl, fp
 8010556:	465a      	mov	r2, fp
 8010558:	e7c6      	b.n	80104e8 <_dtoa_r+0x220>
 801055a:	3101      	adds	r1, #1
 801055c:	0040      	lsls	r0, r0, #1
 801055e:	e7c7      	b.n	80104f0 <_dtoa_r+0x228>
 8010560:	636f4361 	.word	0x636f4361
 8010564:	3fd287a7 	.word	0x3fd287a7
 8010568:	8b60c8b3 	.word	0x8b60c8b3
 801056c:	3fc68a28 	.word	0x3fc68a28
 8010570:	509f79fb 	.word	0x509f79fb
 8010574:	3fd34413 	.word	0x3fd34413
 8010578:	08013374 	.word	0x08013374
 801057c:	0801338b 	.word	0x0801338b
 8010580:	7ff00000 	.word	0x7ff00000
 8010584:	08013370 	.word	0x08013370
 8010588:	080136d9 	.word	0x080136d9
 801058c:	080136d8 	.word	0x080136d8
 8010590:	080134e8 	.word	0x080134e8
 8010594:	080133e3 	.word	0x080133e3
 8010598:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801059c:	f1ba 0f0e 	cmp.w	sl, #14
 80105a0:	6010      	str	r0, [r2, #0]
 80105a2:	d86f      	bhi.n	8010684 <_dtoa_r+0x3bc>
 80105a4:	2c00      	cmp	r4, #0
 80105a6:	d06d      	beq.n	8010684 <_dtoa_r+0x3bc>
 80105a8:	f1b8 0f00 	cmp.w	r8, #0
 80105ac:	f340 80c2 	ble.w	8010734 <_dtoa_r+0x46c>
 80105b0:	4aca      	ldr	r2, [pc, #808]	@ (80108dc <_dtoa_r+0x614>)
 80105b2:	f008 010f 	and.w	r1, r8, #15
 80105b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80105ba:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80105be:	ed92 7b00 	vldr	d7, [r2]
 80105c2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80105c6:	f000 80a9 	beq.w	801071c <_dtoa_r+0x454>
 80105ca:	4ac5      	ldr	r2, [pc, #788]	@ (80108e0 <_dtoa_r+0x618>)
 80105cc:	ed92 6b08 	vldr	d6, [r2, #32]
 80105d0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80105d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80105d8:	f001 010f 	and.w	r1, r1, #15
 80105dc:	2203      	movs	r2, #3
 80105de:	48c0      	ldr	r0, [pc, #768]	@ (80108e0 <_dtoa_r+0x618>)
 80105e0:	2900      	cmp	r1, #0
 80105e2:	f040 809d 	bne.w	8010720 <_dtoa_r+0x458>
 80105e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80105ea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80105ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80105f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80105f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80105f8:	2900      	cmp	r1, #0
 80105fa:	f000 80c1 	beq.w	8010780 <_dtoa_r+0x4b8>
 80105fe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010602:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801060a:	f140 80b9 	bpl.w	8010780 <_dtoa_r+0x4b8>
 801060e:	f1ba 0f00 	cmp.w	sl, #0
 8010612:	f000 80b5 	beq.w	8010780 <_dtoa_r+0x4b8>
 8010616:	f1bb 0f00 	cmp.w	fp, #0
 801061a:	dd31      	ble.n	8010680 <_dtoa_r+0x3b8>
 801061c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010620:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010624:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010628:	f108 31ff 	add.w	r1, r8, #4294967295
 801062c:	9104      	str	r1, [sp, #16]
 801062e:	3201      	adds	r2, #1
 8010630:	465c      	mov	r4, fp
 8010632:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010636:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801063a:	ee07 2a90 	vmov	s15, r2
 801063e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010642:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010646:	ee15 2a90 	vmov	r2, s11
 801064a:	ec51 0b15 	vmov	r0, r1, d5
 801064e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8010652:	2c00      	cmp	r4, #0
 8010654:	f040 8098 	bne.w	8010788 <_dtoa_r+0x4c0>
 8010658:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801065c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010660:	ec41 0b17 	vmov	d7, r0, r1
 8010664:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801066c:	f300 8261 	bgt.w	8010b32 <_dtoa_r+0x86a>
 8010670:	eeb1 7b47 	vneg.f64	d7, d7
 8010674:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801067c:	f100 80f5 	bmi.w	801086a <_dtoa_r+0x5a2>
 8010680:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010684:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010686:	2a00      	cmp	r2, #0
 8010688:	f2c0 812c 	blt.w	80108e4 <_dtoa_r+0x61c>
 801068c:	f1b8 0f0e 	cmp.w	r8, #14
 8010690:	f300 8128 	bgt.w	80108e4 <_dtoa_r+0x61c>
 8010694:	4b91      	ldr	r3, [pc, #580]	@ (80108dc <_dtoa_r+0x614>)
 8010696:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801069a:	ed93 6b00 	vldr	d6, [r3]
 801069e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	da03      	bge.n	80106ac <_dtoa_r+0x3e4>
 80106a4:	f1ba 0f00 	cmp.w	sl, #0
 80106a8:	f340 80d2 	ble.w	8010850 <_dtoa_r+0x588>
 80106ac:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80106b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80106b4:	463e      	mov	r6, r7
 80106b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80106ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80106be:	ee15 3a10 	vmov	r3, s10
 80106c2:	3330      	adds	r3, #48	@ 0x30
 80106c4:	f806 3b01 	strb.w	r3, [r6], #1
 80106c8:	1bf3      	subs	r3, r6, r7
 80106ca:	459a      	cmp	sl, r3
 80106cc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80106d0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80106d4:	f040 80f8 	bne.w	80108c8 <_dtoa_r+0x600>
 80106d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80106dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80106e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106e4:	f300 80dd 	bgt.w	80108a2 <_dtoa_r+0x5da>
 80106e8:	eeb4 7b46 	vcmp.f64	d7, d6
 80106ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f0:	d104      	bne.n	80106fc <_dtoa_r+0x434>
 80106f2:	ee15 3a10 	vmov	r3, s10
 80106f6:	07db      	lsls	r3, r3, #31
 80106f8:	f100 80d3 	bmi.w	80108a2 <_dtoa_r+0x5da>
 80106fc:	9901      	ldr	r1, [sp, #4]
 80106fe:	4648      	mov	r0, r9
 8010700:	f000 ff0e 	bl	8011520 <_Bfree>
 8010704:	2300      	movs	r3, #0
 8010706:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010708:	7033      	strb	r3, [r6, #0]
 801070a:	f108 0301 	add.w	r3, r8, #1
 801070e:	6013      	str	r3, [r2, #0]
 8010710:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010712:	2b00      	cmp	r3, #0
 8010714:	f000 8304 	beq.w	8010d20 <_dtoa_r+0xa58>
 8010718:	601e      	str	r6, [r3, #0]
 801071a:	e301      	b.n	8010d20 <_dtoa_r+0xa58>
 801071c:	2202      	movs	r2, #2
 801071e:	e75e      	b.n	80105de <_dtoa_r+0x316>
 8010720:	07cc      	lsls	r4, r1, #31
 8010722:	d504      	bpl.n	801072e <_dtoa_r+0x466>
 8010724:	ed90 6b00 	vldr	d6, [r0]
 8010728:	3201      	adds	r2, #1
 801072a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801072e:	1049      	asrs	r1, r1, #1
 8010730:	3008      	adds	r0, #8
 8010732:	e755      	b.n	80105e0 <_dtoa_r+0x318>
 8010734:	d022      	beq.n	801077c <_dtoa_r+0x4b4>
 8010736:	f1c8 0100 	rsb	r1, r8, #0
 801073a:	4a68      	ldr	r2, [pc, #416]	@ (80108dc <_dtoa_r+0x614>)
 801073c:	f001 000f 	and.w	r0, r1, #15
 8010740:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010744:	ed92 7b00 	vldr	d7, [r2]
 8010748:	ee28 7b07 	vmul.f64	d7, d8, d7
 801074c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010750:	4863      	ldr	r0, [pc, #396]	@ (80108e0 <_dtoa_r+0x618>)
 8010752:	1109      	asrs	r1, r1, #4
 8010754:	2400      	movs	r4, #0
 8010756:	2202      	movs	r2, #2
 8010758:	b929      	cbnz	r1, 8010766 <_dtoa_r+0x49e>
 801075a:	2c00      	cmp	r4, #0
 801075c:	f43f af49 	beq.w	80105f2 <_dtoa_r+0x32a>
 8010760:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010764:	e745      	b.n	80105f2 <_dtoa_r+0x32a>
 8010766:	07ce      	lsls	r6, r1, #31
 8010768:	d505      	bpl.n	8010776 <_dtoa_r+0x4ae>
 801076a:	ed90 6b00 	vldr	d6, [r0]
 801076e:	3201      	adds	r2, #1
 8010770:	2401      	movs	r4, #1
 8010772:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010776:	1049      	asrs	r1, r1, #1
 8010778:	3008      	adds	r0, #8
 801077a:	e7ed      	b.n	8010758 <_dtoa_r+0x490>
 801077c:	2202      	movs	r2, #2
 801077e:	e738      	b.n	80105f2 <_dtoa_r+0x32a>
 8010780:	f8cd 8010 	str.w	r8, [sp, #16]
 8010784:	4654      	mov	r4, sl
 8010786:	e754      	b.n	8010632 <_dtoa_r+0x36a>
 8010788:	4a54      	ldr	r2, [pc, #336]	@ (80108dc <_dtoa_r+0x614>)
 801078a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801078e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010792:	9a08      	ldr	r2, [sp, #32]
 8010794:	ec41 0b17 	vmov	d7, r0, r1
 8010798:	443c      	add	r4, r7
 801079a:	b34a      	cbz	r2, 80107f0 <_dtoa_r+0x528>
 801079c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80107a0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80107a4:	463e      	mov	r6, r7
 80107a6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80107aa:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80107ae:	ee35 7b47 	vsub.f64	d7, d5, d7
 80107b2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80107b6:	ee14 2a90 	vmov	r2, s9
 80107ba:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80107be:	3230      	adds	r2, #48	@ 0x30
 80107c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80107c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80107c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107cc:	f806 2b01 	strb.w	r2, [r6], #1
 80107d0:	d438      	bmi.n	8010844 <_dtoa_r+0x57c>
 80107d2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80107d6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80107da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107de:	d462      	bmi.n	80108a6 <_dtoa_r+0x5de>
 80107e0:	42a6      	cmp	r6, r4
 80107e2:	f43f af4d 	beq.w	8010680 <_dtoa_r+0x3b8>
 80107e6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80107ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 80107ee:	e7e0      	b.n	80107b2 <_dtoa_r+0x4ea>
 80107f0:	4621      	mov	r1, r4
 80107f2:	463e      	mov	r6, r7
 80107f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80107f8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80107fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010800:	ee14 2a90 	vmov	r2, s9
 8010804:	3230      	adds	r2, #48	@ 0x30
 8010806:	f806 2b01 	strb.w	r2, [r6], #1
 801080a:	42a6      	cmp	r6, r4
 801080c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010810:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010814:	d119      	bne.n	801084a <_dtoa_r+0x582>
 8010816:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801081a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801081e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010826:	dc3e      	bgt.n	80108a6 <_dtoa_r+0x5de>
 8010828:	ee35 5b47 	vsub.f64	d5, d5, d7
 801082c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010834:	f57f af24 	bpl.w	8010680 <_dtoa_r+0x3b8>
 8010838:	460e      	mov	r6, r1
 801083a:	3901      	subs	r1, #1
 801083c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010840:	2b30      	cmp	r3, #48	@ 0x30
 8010842:	d0f9      	beq.n	8010838 <_dtoa_r+0x570>
 8010844:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010848:	e758      	b.n	80106fc <_dtoa_r+0x434>
 801084a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801084e:	e7d5      	b.n	80107fc <_dtoa_r+0x534>
 8010850:	d10b      	bne.n	801086a <_dtoa_r+0x5a2>
 8010852:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010856:	ee26 6b07 	vmul.f64	d6, d6, d7
 801085a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801085e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010866:	f2c0 8161 	blt.w	8010b2c <_dtoa_r+0x864>
 801086a:	2400      	movs	r4, #0
 801086c:	4625      	mov	r5, r4
 801086e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010870:	43db      	mvns	r3, r3
 8010872:	9304      	str	r3, [sp, #16]
 8010874:	463e      	mov	r6, r7
 8010876:	f04f 0800 	mov.w	r8, #0
 801087a:	4621      	mov	r1, r4
 801087c:	4648      	mov	r0, r9
 801087e:	f000 fe4f 	bl	8011520 <_Bfree>
 8010882:	2d00      	cmp	r5, #0
 8010884:	d0de      	beq.n	8010844 <_dtoa_r+0x57c>
 8010886:	f1b8 0f00 	cmp.w	r8, #0
 801088a:	d005      	beq.n	8010898 <_dtoa_r+0x5d0>
 801088c:	45a8      	cmp	r8, r5
 801088e:	d003      	beq.n	8010898 <_dtoa_r+0x5d0>
 8010890:	4641      	mov	r1, r8
 8010892:	4648      	mov	r0, r9
 8010894:	f000 fe44 	bl	8011520 <_Bfree>
 8010898:	4629      	mov	r1, r5
 801089a:	4648      	mov	r0, r9
 801089c:	f000 fe40 	bl	8011520 <_Bfree>
 80108a0:	e7d0      	b.n	8010844 <_dtoa_r+0x57c>
 80108a2:	f8cd 8010 	str.w	r8, [sp, #16]
 80108a6:	4633      	mov	r3, r6
 80108a8:	461e      	mov	r6, r3
 80108aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108ae:	2a39      	cmp	r2, #57	@ 0x39
 80108b0:	d106      	bne.n	80108c0 <_dtoa_r+0x5f8>
 80108b2:	429f      	cmp	r7, r3
 80108b4:	d1f8      	bne.n	80108a8 <_dtoa_r+0x5e0>
 80108b6:	9a04      	ldr	r2, [sp, #16]
 80108b8:	3201      	adds	r2, #1
 80108ba:	9204      	str	r2, [sp, #16]
 80108bc:	2230      	movs	r2, #48	@ 0x30
 80108be:	703a      	strb	r2, [r7, #0]
 80108c0:	781a      	ldrb	r2, [r3, #0]
 80108c2:	3201      	adds	r2, #1
 80108c4:	701a      	strb	r2, [r3, #0]
 80108c6:	e7bd      	b.n	8010844 <_dtoa_r+0x57c>
 80108c8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80108cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80108d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d4:	f47f aeef 	bne.w	80106b6 <_dtoa_r+0x3ee>
 80108d8:	e710      	b.n	80106fc <_dtoa_r+0x434>
 80108da:	bf00      	nop
 80108dc:	080134e8 	.word	0x080134e8
 80108e0:	080134c0 	.word	0x080134c0
 80108e4:	9908      	ldr	r1, [sp, #32]
 80108e6:	2900      	cmp	r1, #0
 80108e8:	f000 80e3 	beq.w	8010ab2 <_dtoa_r+0x7ea>
 80108ec:	9907      	ldr	r1, [sp, #28]
 80108ee:	2901      	cmp	r1, #1
 80108f0:	f300 80c8 	bgt.w	8010a84 <_dtoa_r+0x7bc>
 80108f4:	2d00      	cmp	r5, #0
 80108f6:	f000 80c1 	beq.w	8010a7c <_dtoa_r+0x7b4>
 80108fa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80108fe:	9e05      	ldr	r6, [sp, #20]
 8010900:	461c      	mov	r4, r3
 8010902:	9304      	str	r3, [sp, #16]
 8010904:	9b05      	ldr	r3, [sp, #20]
 8010906:	4413      	add	r3, r2
 8010908:	9305      	str	r3, [sp, #20]
 801090a:	9b06      	ldr	r3, [sp, #24]
 801090c:	2101      	movs	r1, #1
 801090e:	4413      	add	r3, r2
 8010910:	4648      	mov	r0, r9
 8010912:	9306      	str	r3, [sp, #24]
 8010914:	f000 ff02 	bl	801171c <__i2b>
 8010918:	9b04      	ldr	r3, [sp, #16]
 801091a:	4605      	mov	r5, r0
 801091c:	b166      	cbz	r6, 8010938 <_dtoa_r+0x670>
 801091e:	9a06      	ldr	r2, [sp, #24]
 8010920:	2a00      	cmp	r2, #0
 8010922:	dd09      	ble.n	8010938 <_dtoa_r+0x670>
 8010924:	42b2      	cmp	r2, r6
 8010926:	9905      	ldr	r1, [sp, #20]
 8010928:	bfa8      	it	ge
 801092a:	4632      	movge	r2, r6
 801092c:	1a89      	subs	r1, r1, r2
 801092e:	9105      	str	r1, [sp, #20]
 8010930:	9906      	ldr	r1, [sp, #24]
 8010932:	1ab6      	subs	r6, r6, r2
 8010934:	1a8a      	subs	r2, r1, r2
 8010936:	9206      	str	r2, [sp, #24]
 8010938:	b1fb      	cbz	r3, 801097a <_dtoa_r+0x6b2>
 801093a:	9a08      	ldr	r2, [sp, #32]
 801093c:	2a00      	cmp	r2, #0
 801093e:	f000 80bc 	beq.w	8010aba <_dtoa_r+0x7f2>
 8010942:	b19c      	cbz	r4, 801096c <_dtoa_r+0x6a4>
 8010944:	4629      	mov	r1, r5
 8010946:	4622      	mov	r2, r4
 8010948:	4648      	mov	r0, r9
 801094a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801094c:	f000 ffa6 	bl	801189c <__pow5mult>
 8010950:	9a01      	ldr	r2, [sp, #4]
 8010952:	4601      	mov	r1, r0
 8010954:	4605      	mov	r5, r0
 8010956:	4648      	mov	r0, r9
 8010958:	f000 fef6 	bl	8011748 <__multiply>
 801095c:	9901      	ldr	r1, [sp, #4]
 801095e:	9004      	str	r0, [sp, #16]
 8010960:	4648      	mov	r0, r9
 8010962:	f000 fddd 	bl	8011520 <_Bfree>
 8010966:	9a04      	ldr	r2, [sp, #16]
 8010968:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801096a:	9201      	str	r2, [sp, #4]
 801096c:	1b1a      	subs	r2, r3, r4
 801096e:	d004      	beq.n	801097a <_dtoa_r+0x6b2>
 8010970:	9901      	ldr	r1, [sp, #4]
 8010972:	4648      	mov	r0, r9
 8010974:	f000 ff92 	bl	801189c <__pow5mult>
 8010978:	9001      	str	r0, [sp, #4]
 801097a:	2101      	movs	r1, #1
 801097c:	4648      	mov	r0, r9
 801097e:	f000 fecd 	bl	801171c <__i2b>
 8010982:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010984:	4604      	mov	r4, r0
 8010986:	2b00      	cmp	r3, #0
 8010988:	f000 81d0 	beq.w	8010d2c <_dtoa_r+0xa64>
 801098c:	461a      	mov	r2, r3
 801098e:	4601      	mov	r1, r0
 8010990:	4648      	mov	r0, r9
 8010992:	f000 ff83 	bl	801189c <__pow5mult>
 8010996:	9b07      	ldr	r3, [sp, #28]
 8010998:	2b01      	cmp	r3, #1
 801099a:	4604      	mov	r4, r0
 801099c:	f300 8095 	bgt.w	8010aca <_dtoa_r+0x802>
 80109a0:	9b02      	ldr	r3, [sp, #8]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f040 808b 	bne.w	8010abe <_dtoa_r+0x7f6>
 80109a8:	9b03      	ldr	r3, [sp, #12]
 80109aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80109ae:	2a00      	cmp	r2, #0
 80109b0:	f040 8087 	bne.w	8010ac2 <_dtoa_r+0x7fa>
 80109b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80109b8:	0d12      	lsrs	r2, r2, #20
 80109ba:	0512      	lsls	r2, r2, #20
 80109bc:	2a00      	cmp	r2, #0
 80109be:	f000 8082 	beq.w	8010ac6 <_dtoa_r+0x7fe>
 80109c2:	9b05      	ldr	r3, [sp, #20]
 80109c4:	3301      	adds	r3, #1
 80109c6:	9305      	str	r3, [sp, #20]
 80109c8:	9b06      	ldr	r3, [sp, #24]
 80109ca:	3301      	adds	r3, #1
 80109cc:	9306      	str	r3, [sp, #24]
 80109ce:	2301      	movs	r3, #1
 80109d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80109d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f000 81af 	beq.w	8010d38 <_dtoa_r+0xa70>
 80109da:	6922      	ldr	r2, [r4, #16]
 80109dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80109e0:	6910      	ldr	r0, [r2, #16]
 80109e2:	f000 fe4f 	bl	8011684 <__hi0bits>
 80109e6:	f1c0 0020 	rsb	r0, r0, #32
 80109ea:	9b06      	ldr	r3, [sp, #24]
 80109ec:	4418      	add	r0, r3
 80109ee:	f010 001f 	ands.w	r0, r0, #31
 80109f2:	d076      	beq.n	8010ae2 <_dtoa_r+0x81a>
 80109f4:	f1c0 0220 	rsb	r2, r0, #32
 80109f8:	2a04      	cmp	r2, #4
 80109fa:	dd69      	ble.n	8010ad0 <_dtoa_r+0x808>
 80109fc:	9b05      	ldr	r3, [sp, #20]
 80109fe:	f1c0 001c 	rsb	r0, r0, #28
 8010a02:	4403      	add	r3, r0
 8010a04:	9305      	str	r3, [sp, #20]
 8010a06:	9b06      	ldr	r3, [sp, #24]
 8010a08:	4406      	add	r6, r0
 8010a0a:	4403      	add	r3, r0
 8010a0c:	9306      	str	r3, [sp, #24]
 8010a0e:	9b05      	ldr	r3, [sp, #20]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	dd05      	ble.n	8010a20 <_dtoa_r+0x758>
 8010a14:	9901      	ldr	r1, [sp, #4]
 8010a16:	461a      	mov	r2, r3
 8010a18:	4648      	mov	r0, r9
 8010a1a:	f000 ff99 	bl	8011950 <__lshift>
 8010a1e:	9001      	str	r0, [sp, #4]
 8010a20:	9b06      	ldr	r3, [sp, #24]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	dd05      	ble.n	8010a32 <_dtoa_r+0x76a>
 8010a26:	4621      	mov	r1, r4
 8010a28:	461a      	mov	r2, r3
 8010a2a:	4648      	mov	r0, r9
 8010a2c:	f000 ff90 	bl	8011950 <__lshift>
 8010a30:	4604      	mov	r4, r0
 8010a32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d056      	beq.n	8010ae6 <_dtoa_r+0x81e>
 8010a38:	9801      	ldr	r0, [sp, #4]
 8010a3a:	4621      	mov	r1, r4
 8010a3c:	f000 fff4 	bl	8011a28 <__mcmp>
 8010a40:	2800      	cmp	r0, #0
 8010a42:	da50      	bge.n	8010ae6 <_dtoa_r+0x81e>
 8010a44:	f108 33ff 	add.w	r3, r8, #4294967295
 8010a48:	9304      	str	r3, [sp, #16]
 8010a4a:	9901      	ldr	r1, [sp, #4]
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	220a      	movs	r2, #10
 8010a50:	4648      	mov	r0, r9
 8010a52:	f000 fd87 	bl	8011564 <__multadd>
 8010a56:	9b08      	ldr	r3, [sp, #32]
 8010a58:	9001      	str	r0, [sp, #4]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	f000 816e 	beq.w	8010d3c <_dtoa_r+0xa74>
 8010a60:	4629      	mov	r1, r5
 8010a62:	2300      	movs	r3, #0
 8010a64:	220a      	movs	r2, #10
 8010a66:	4648      	mov	r0, r9
 8010a68:	f000 fd7c 	bl	8011564 <__multadd>
 8010a6c:	f1bb 0f00 	cmp.w	fp, #0
 8010a70:	4605      	mov	r5, r0
 8010a72:	dc64      	bgt.n	8010b3e <_dtoa_r+0x876>
 8010a74:	9b07      	ldr	r3, [sp, #28]
 8010a76:	2b02      	cmp	r3, #2
 8010a78:	dc3e      	bgt.n	8010af8 <_dtoa_r+0x830>
 8010a7a:	e060      	b.n	8010b3e <_dtoa_r+0x876>
 8010a7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a7e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010a82:	e73c      	b.n	80108fe <_dtoa_r+0x636>
 8010a84:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010a88:	42a3      	cmp	r3, r4
 8010a8a:	bfbf      	itttt	lt
 8010a8c:	1ae2      	sublt	r2, r4, r3
 8010a8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010a90:	189b      	addlt	r3, r3, r2
 8010a92:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010a94:	bfae      	itee	ge
 8010a96:	1b1c      	subge	r4, r3, r4
 8010a98:	4623      	movlt	r3, r4
 8010a9a:	2400      	movlt	r4, #0
 8010a9c:	f1ba 0f00 	cmp.w	sl, #0
 8010aa0:	bfb5      	itete	lt
 8010aa2:	9a05      	ldrlt	r2, [sp, #20]
 8010aa4:	9e05      	ldrge	r6, [sp, #20]
 8010aa6:	eba2 060a 	sublt.w	r6, r2, sl
 8010aaa:	4652      	movge	r2, sl
 8010aac:	bfb8      	it	lt
 8010aae:	2200      	movlt	r2, #0
 8010ab0:	e727      	b.n	8010902 <_dtoa_r+0x63a>
 8010ab2:	9e05      	ldr	r6, [sp, #20]
 8010ab4:	9d08      	ldr	r5, [sp, #32]
 8010ab6:	461c      	mov	r4, r3
 8010ab8:	e730      	b.n	801091c <_dtoa_r+0x654>
 8010aba:	461a      	mov	r2, r3
 8010abc:	e758      	b.n	8010970 <_dtoa_r+0x6a8>
 8010abe:	2300      	movs	r3, #0
 8010ac0:	e786      	b.n	80109d0 <_dtoa_r+0x708>
 8010ac2:	9b02      	ldr	r3, [sp, #8]
 8010ac4:	e784      	b.n	80109d0 <_dtoa_r+0x708>
 8010ac6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010ac8:	e783      	b.n	80109d2 <_dtoa_r+0x70a>
 8010aca:	2300      	movs	r3, #0
 8010acc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ace:	e784      	b.n	80109da <_dtoa_r+0x712>
 8010ad0:	d09d      	beq.n	8010a0e <_dtoa_r+0x746>
 8010ad2:	9b05      	ldr	r3, [sp, #20]
 8010ad4:	321c      	adds	r2, #28
 8010ad6:	4413      	add	r3, r2
 8010ad8:	9305      	str	r3, [sp, #20]
 8010ada:	9b06      	ldr	r3, [sp, #24]
 8010adc:	4416      	add	r6, r2
 8010ade:	4413      	add	r3, r2
 8010ae0:	e794      	b.n	8010a0c <_dtoa_r+0x744>
 8010ae2:	4602      	mov	r2, r0
 8010ae4:	e7f5      	b.n	8010ad2 <_dtoa_r+0x80a>
 8010ae6:	f1ba 0f00 	cmp.w	sl, #0
 8010aea:	f8cd 8010 	str.w	r8, [sp, #16]
 8010aee:	46d3      	mov	fp, sl
 8010af0:	dc21      	bgt.n	8010b36 <_dtoa_r+0x86e>
 8010af2:	9b07      	ldr	r3, [sp, #28]
 8010af4:	2b02      	cmp	r3, #2
 8010af6:	dd1e      	ble.n	8010b36 <_dtoa_r+0x86e>
 8010af8:	f1bb 0f00 	cmp.w	fp, #0
 8010afc:	f47f aeb7 	bne.w	801086e <_dtoa_r+0x5a6>
 8010b00:	4621      	mov	r1, r4
 8010b02:	465b      	mov	r3, fp
 8010b04:	2205      	movs	r2, #5
 8010b06:	4648      	mov	r0, r9
 8010b08:	f000 fd2c 	bl	8011564 <__multadd>
 8010b0c:	4601      	mov	r1, r0
 8010b0e:	4604      	mov	r4, r0
 8010b10:	9801      	ldr	r0, [sp, #4]
 8010b12:	f000 ff89 	bl	8011a28 <__mcmp>
 8010b16:	2800      	cmp	r0, #0
 8010b18:	f77f aea9 	ble.w	801086e <_dtoa_r+0x5a6>
 8010b1c:	463e      	mov	r6, r7
 8010b1e:	2331      	movs	r3, #49	@ 0x31
 8010b20:	f806 3b01 	strb.w	r3, [r6], #1
 8010b24:	9b04      	ldr	r3, [sp, #16]
 8010b26:	3301      	adds	r3, #1
 8010b28:	9304      	str	r3, [sp, #16]
 8010b2a:	e6a4      	b.n	8010876 <_dtoa_r+0x5ae>
 8010b2c:	f8cd 8010 	str.w	r8, [sp, #16]
 8010b30:	4654      	mov	r4, sl
 8010b32:	4625      	mov	r5, r4
 8010b34:	e7f2      	b.n	8010b1c <_dtoa_r+0x854>
 8010b36:	9b08      	ldr	r3, [sp, #32]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	f000 8103 	beq.w	8010d44 <_dtoa_r+0xa7c>
 8010b3e:	2e00      	cmp	r6, #0
 8010b40:	dd05      	ble.n	8010b4e <_dtoa_r+0x886>
 8010b42:	4629      	mov	r1, r5
 8010b44:	4632      	mov	r2, r6
 8010b46:	4648      	mov	r0, r9
 8010b48:	f000 ff02 	bl	8011950 <__lshift>
 8010b4c:	4605      	mov	r5, r0
 8010b4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d058      	beq.n	8010c06 <_dtoa_r+0x93e>
 8010b54:	6869      	ldr	r1, [r5, #4]
 8010b56:	4648      	mov	r0, r9
 8010b58:	f000 fca2 	bl	80114a0 <_Balloc>
 8010b5c:	4606      	mov	r6, r0
 8010b5e:	b928      	cbnz	r0, 8010b6c <_dtoa_r+0x8a4>
 8010b60:	4b82      	ldr	r3, [pc, #520]	@ (8010d6c <_dtoa_r+0xaa4>)
 8010b62:	4602      	mov	r2, r0
 8010b64:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010b68:	f7ff bbc7 	b.w	80102fa <_dtoa_r+0x32>
 8010b6c:	692a      	ldr	r2, [r5, #16]
 8010b6e:	3202      	adds	r2, #2
 8010b70:	0092      	lsls	r2, r2, #2
 8010b72:	f105 010c 	add.w	r1, r5, #12
 8010b76:	300c      	adds	r0, #12
 8010b78:	f7ff fafd 	bl	8010176 <memcpy>
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	4631      	mov	r1, r6
 8010b80:	4648      	mov	r0, r9
 8010b82:	f000 fee5 	bl	8011950 <__lshift>
 8010b86:	1c7b      	adds	r3, r7, #1
 8010b88:	9305      	str	r3, [sp, #20]
 8010b8a:	eb07 030b 	add.w	r3, r7, fp
 8010b8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b90:	9b02      	ldr	r3, [sp, #8]
 8010b92:	f003 0301 	and.w	r3, r3, #1
 8010b96:	46a8      	mov	r8, r5
 8010b98:	9308      	str	r3, [sp, #32]
 8010b9a:	4605      	mov	r5, r0
 8010b9c:	9b05      	ldr	r3, [sp, #20]
 8010b9e:	9801      	ldr	r0, [sp, #4]
 8010ba0:	4621      	mov	r1, r4
 8010ba2:	f103 3bff 	add.w	fp, r3, #4294967295
 8010ba6:	f7ff fb05 	bl	80101b4 <quorem>
 8010baa:	4641      	mov	r1, r8
 8010bac:	9002      	str	r0, [sp, #8]
 8010bae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010bb2:	9801      	ldr	r0, [sp, #4]
 8010bb4:	f000 ff38 	bl	8011a28 <__mcmp>
 8010bb8:	462a      	mov	r2, r5
 8010bba:	9006      	str	r0, [sp, #24]
 8010bbc:	4621      	mov	r1, r4
 8010bbe:	4648      	mov	r0, r9
 8010bc0:	f000 ff4e 	bl	8011a60 <__mdiff>
 8010bc4:	68c2      	ldr	r2, [r0, #12]
 8010bc6:	4606      	mov	r6, r0
 8010bc8:	b9fa      	cbnz	r2, 8010c0a <_dtoa_r+0x942>
 8010bca:	4601      	mov	r1, r0
 8010bcc:	9801      	ldr	r0, [sp, #4]
 8010bce:	f000 ff2b 	bl	8011a28 <__mcmp>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	4631      	mov	r1, r6
 8010bd6:	4648      	mov	r0, r9
 8010bd8:	920a      	str	r2, [sp, #40]	@ 0x28
 8010bda:	f000 fca1 	bl	8011520 <_Bfree>
 8010bde:	9b07      	ldr	r3, [sp, #28]
 8010be0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010be2:	9e05      	ldr	r6, [sp, #20]
 8010be4:	ea43 0102 	orr.w	r1, r3, r2
 8010be8:	9b08      	ldr	r3, [sp, #32]
 8010bea:	4319      	orrs	r1, r3
 8010bec:	d10f      	bne.n	8010c0e <_dtoa_r+0x946>
 8010bee:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010bf2:	d028      	beq.n	8010c46 <_dtoa_r+0x97e>
 8010bf4:	9b06      	ldr	r3, [sp, #24]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	dd02      	ble.n	8010c00 <_dtoa_r+0x938>
 8010bfa:	9b02      	ldr	r3, [sp, #8]
 8010bfc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010c00:	f88b a000 	strb.w	sl, [fp]
 8010c04:	e639      	b.n	801087a <_dtoa_r+0x5b2>
 8010c06:	4628      	mov	r0, r5
 8010c08:	e7bd      	b.n	8010b86 <_dtoa_r+0x8be>
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	e7e2      	b.n	8010bd4 <_dtoa_r+0x90c>
 8010c0e:	9b06      	ldr	r3, [sp, #24]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	db04      	blt.n	8010c1e <_dtoa_r+0x956>
 8010c14:	9907      	ldr	r1, [sp, #28]
 8010c16:	430b      	orrs	r3, r1
 8010c18:	9908      	ldr	r1, [sp, #32]
 8010c1a:	430b      	orrs	r3, r1
 8010c1c:	d120      	bne.n	8010c60 <_dtoa_r+0x998>
 8010c1e:	2a00      	cmp	r2, #0
 8010c20:	ddee      	ble.n	8010c00 <_dtoa_r+0x938>
 8010c22:	9901      	ldr	r1, [sp, #4]
 8010c24:	2201      	movs	r2, #1
 8010c26:	4648      	mov	r0, r9
 8010c28:	f000 fe92 	bl	8011950 <__lshift>
 8010c2c:	4621      	mov	r1, r4
 8010c2e:	9001      	str	r0, [sp, #4]
 8010c30:	f000 fefa 	bl	8011a28 <__mcmp>
 8010c34:	2800      	cmp	r0, #0
 8010c36:	dc03      	bgt.n	8010c40 <_dtoa_r+0x978>
 8010c38:	d1e2      	bne.n	8010c00 <_dtoa_r+0x938>
 8010c3a:	f01a 0f01 	tst.w	sl, #1
 8010c3e:	d0df      	beq.n	8010c00 <_dtoa_r+0x938>
 8010c40:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010c44:	d1d9      	bne.n	8010bfa <_dtoa_r+0x932>
 8010c46:	2339      	movs	r3, #57	@ 0x39
 8010c48:	f88b 3000 	strb.w	r3, [fp]
 8010c4c:	4633      	mov	r3, r6
 8010c4e:	461e      	mov	r6, r3
 8010c50:	3b01      	subs	r3, #1
 8010c52:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010c56:	2a39      	cmp	r2, #57	@ 0x39
 8010c58:	d053      	beq.n	8010d02 <_dtoa_r+0xa3a>
 8010c5a:	3201      	adds	r2, #1
 8010c5c:	701a      	strb	r2, [r3, #0]
 8010c5e:	e60c      	b.n	801087a <_dtoa_r+0x5b2>
 8010c60:	2a00      	cmp	r2, #0
 8010c62:	dd07      	ble.n	8010c74 <_dtoa_r+0x9ac>
 8010c64:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010c68:	d0ed      	beq.n	8010c46 <_dtoa_r+0x97e>
 8010c6a:	f10a 0301 	add.w	r3, sl, #1
 8010c6e:	f88b 3000 	strb.w	r3, [fp]
 8010c72:	e602      	b.n	801087a <_dtoa_r+0x5b2>
 8010c74:	9b05      	ldr	r3, [sp, #20]
 8010c76:	9a05      	ldr	r2, [sp, #20]
 8010c78:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	d029      	beq.n	8010cd6 <_dtoa_r+0xa0e>
 8010c82:	9901      	ldr	r1, [sp, #4]
 8010c84:	2300      	movs	r3, #0
 8010c86:	220a      	movs	r2, #10
 8010c88:	4648      	mov	r0, r9
 8010c8a:	f000 fc6b 	bl	8011564 <__multadd>
 8010c8e:	45a8      	cmp	r8, r5
 8010c90:	9001      	str	r0, [sp, #4]
 8010c92:	f04f 0300 	mov.w	r3, #0
 8010c96:	f04f 020a 	mov.w	r2, #10
 8010c9a:	4641      	mov	r1, r8
 8010c9c:	4648      	mov	r0, r9
 8010c9e:	d107      	bne.n	8010cb0 <_dtoa_r+0x9e8>
 8010ca0:	f000 fc60 	bl	8011564 <__multadd>
 8010ca4:	4680      	mov	r8, r0
 8010ca6:	4605      	mov	r5, r0
 8010ca8:	9b05      	ldr	r3, [sp, #20]
 8010caa:	3301      	adds	r3, #1
 8010cac:	9305      	str	r3, [sp, #20]
 8010cae:	e775      	b.n	8010b9c <_dtoa_r+0x8d4>
 8010cb0:	f000 fc58 	bl	8011564 <__multadd>
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	4680      	mov	r8, r0
 8010cb8:	2300      	movs	r3, #0
 8010cba:	220a      	movs	r2, #10
 8010cbc:	4648      	mov	r0, r9
 8010cbe:	f000 fc51 	bl	8011564 <__multadd>
 8010cc2:	4605      	mov	r5, r0
 8010cc4:	e7f0      	b.n	8010ca8 <_dtoa_r+0x9e0>
 8010cc6:	f1bb 0f00 	cmp.w	fp, #0
 8010cca:	bfcc      	ite	gt
 8010ccc:	465e      	movgt	r6, fp
 8010cce:	2601      	movle	r6, #1
 8010cd0:	443e      	add	r6, r7
 8010cd2:	f04f 0800 	mov.w	r8, #0
 8010cd6:	9901      	ldr	r1, [sp, #4]
 8010cd8:	2201      	movs	r2, #1
 8010cda:	4648      	mov	r0, r9
 8010cdc:	f000 fe38 	bl	8011950 <__lshift>
 8010ce0:	4621      	mov	r1, r4
 8010ce2:	9001      	str	r0, [sp, #4]
 8010ce4:	f000 fea0 	bl	8011a28 <__mcmp>
 8010ce8:	2800      	cmp	r0, #0
 8010cea:	dcaf      	bgt.n	8010c4c <_dtoa_r+0x984>
 8010cec:	d102      	bne.n	8010cf4 <_dtoa_r+0xa2c>
 8010cee:	f01a 0f01 	tst.w	sl, #1
 8010cf2:	d1ab      	bne.n	8010c4c <_dtoa_r+0x984>
 8010cf4:	4633      	mov	r3, r6
 8010cf6:	461e      	mov	r6, r3
 8010cf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010cfc:	2a30      	cmp	r2, #48	@ 0x30
 8010cfe:	d0fa      	beq.n	8010cf6 <_dtoa_r+0xa2e>
 8010d00:	e5bb      	b.n	801087a <_dtoa_r+0x5b2>
 8010d02:	429f      	cmp	r7, r3
 8010d04:	d1a3      	bne.n	8010c4e <_dtoa_r+0x986>
 8010d06:	9b04      	ldr	r3, [sp, #16]
 8010d08:	3301      	adds	r3, #1
 8010d0a:	9304      	str	r3, [sp, #16]
 8010d0c:	2331      	movs	r3, #49	@ 0x31
 8010d0e:	703b      	strb	r3, [r7, #0]
 8010d10:	e5b3      	b.n	801087a <_dtoa_r+0x5b2>
 8010d12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010d14:	4f16      	ldr	r7, [pc, #88]	@ (8010d70 <_dtoa_r+0xaa8>)
 8010d16:	b11b      	cbz	r3, 8010d20 <_dtoa_r+0xa58>
 8010d18:	f107 0308 	add.w	r3, r7, #8
 8010d1c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010d1e:	6013      	str	r3, [r2, #0]
 8010d20:	4638      	mov	r0, r7
 8010d22:	b011      	add	sp, #68	@ 0x44
 8010d24:	ecbd 8b02 	vpop	{d8}
 8010d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d2c:	9b07      	ldr	r3, [sp, #28]
 8010d2e:	2b01      	cmp	r3, #1
 8010d30:	f77f ae36 	ble.w	80109a0 <_dtoa_r+0x6d8>
 8010d34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d38:	2001      	movs	r0, #1
 8010d3a:	e656      	b.n	80109ea <_dtoa_r+0x722>
 8010d3c:	f1bb 0f00 	cmp.w	fp, #0
 8010d40:	f77f aed7 	ble.w	8010af2 <_dtoa_r+0x82a>
 8010d44:	463e      	mov	r6, r7
 8010d46:	9801      	ldr	r0, [sp, #4]
 8010d48:	4621      	mov	r1, r4
 8010d4a:	f7ff fa33 	bl	80101b4 <quorem>
 8010d4e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010d52:	f806 ab01 	strb.w	sl, [r6], #1
 8010d56:	1bf2      	subs	r2, r6, r7
 8010d58:	4593      	cmp	fp, r2
 8010d5a:	ddb4      	ble.n	8010cc6 <_dtoa_r+0x9fe>
 8010d5c:	9901      	ldr	r1, [sp, #4]
 8010d5e:	2300      	movs	r3, #0
 8010d60:	220a      	movs	r2, #10
 8010d62:	4648      	mov	r0, r9
 8010d64:	f000 fbfe 	bl	8011564 <__multadd>
 8010d68:	9001      	str	r0, [sp, #4]
 8010d6a:	e7ec      	b.n	8010d46 <_dtoa_r+0xa7e>
 8010d6c:	080133e3 	.word	0x080133e3
 8010d70:	08013367 	.word	0x08013367

08010d74 <_free_r>:
 8010d74:	b538      	push	{r3, r4, r5, lr}
 8010d76:	4605      	mov	r5, r0
 8010d78:	2900      	cmp	r1, #0
 8010d7a:	d041      	beq.n	8010e00 <_free_r+0x8c>
 8010d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d80:	1f0c      	subs	r4, r1, #4
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	bfb8      	it	lt
 8010d86:	18e4      	addlt	r4, r4, r3
 8010d88:	f7fd fbee 	bl	800e568 <__malloc_lock>
 8010d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8010e04 <_free_r+0x90>)
 8010d8e:	6813      	ldr	r3, [r2, #0]
 8010d90:	b933      	cbnz	r3, 8010da0 <_free_r+0x2c>
 8010d92:	6063      	str	r3, [r4, #4]
 8010d94:	6014      	str	r4, [r2, #0]
 8010d96:	4628      	mov	r0, r5
 8010d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d9c:	f7fd bbea 	b.w	800e574 <__malloc_unlock>
 8010da0:	42a3      	cmp	r3, r4
 8010da2:	d908      	bls.n	8010db6 <_free_r+0x42>
 8010da4:	6820      	ldr	r0, [r4, #0]
 8010da6:	1821      	adds	r1, r4, r0
 8010da8:	428b      	cmp	r3, r1
 8010daa:	bf01      	itttt	eq
 8010dac:	6819      	ldreq	r1, [r3, #0]
 8010dae:	685b      	ldreq	r3, [r3, #4]
 8010db0:	1809      	addeq	r1, r1, r0
 8010db2:	6021      	streq	r1, [r4, #0]
 8010db4:	e7ed      	b.n	8010d92 <_free_r+0x1e>
 8010db6:	461a      	mov	r2, r3
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	b10b      	cbz	r3, 8010dc0 <_free_r+0x4c>
 8010dbc:	42a3      	cmp	r3, r4
 8010dbe:	d9fa      	bls.n	8010db6 <_free_r+0x42>
 8010dc0:	6811      	ldr	r1, [r2, #0]
 8010dc2:	1850      	adds	r0, r2, r1
 8010dc4:	42a0      	cmp	r0, r4
 8010dc6:	d10b      	bne.n	8010de0 <_free_r+0x6c>
 8010dc8:	6820      	ldr	r0, [r4, #0]
 8010dca:	4401      	add	r1, r0
 8010dcc:	1850      	adds	r0, r2, r1
 8010dce:	4283      	cmp	r3, r0
 8010dd0:	6011      	str	r1, [r2, #0]
 8010dd2:	d1e0      	bne.n	8010d96 <_free_r+0x22>
 8010dd4:	6818      	ldr	r0, [r3, #0]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	6053      	str	r3, [r2, #4]
 8010dda:	4408      	add	r0, r1
 8010ddc:	6010      	str	r0, [r2, #0]
 8010dde:	e7da      	b.n	8010d96 <_free_r+0x22>
 8010de0:	d902      	bls.n	8010de8 <_free_r+0x74>
 8010de2:	230c      	movs	r3, #12
 8010de4:	602b      	str	r3, [r5, #0]
 8010de6:	e7d6      	b.n	8010d96 <_free_r+0x22>
 8010de8:	6820      	ldr	r0, [r4, #0]
 8010dea:	1821      	adds	r1, r4, r0
 8010dec:	428b      	cmp	r3, r1
 8010dee:	bf04      	itt	eq
 8010df0:	6819      	ldreq	r1, [r3, #0]
 8010df2:	685b      	ldreq	r3, [r3, #4]
 8010df4:	6063      	str	r3, [r4, #4]
 8010df6:	bf04      	itt	eq
 8010df8:	1809      	addeq	r1, r1, r0
 8010dfa:	6021      	streq	r1, [r4, #0]
 8010dfc:	6054      	str	r4, [r2, #4]
 8010dfe:	e7ca      	b.n	8010d96 <_free_r+0x22>
 8010e00:	bd38      	pop	{r3, r4, r5, pc}
 8010e02:	bf00      	nop
 8010e04:	24000d84 	.word	0x24000d84

08010e08 <rshift>:
 8010e08:	6903      	ldr	r3, [r0, #16]
 8010e0a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010e0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e12:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010e16:	f100 0414 	add.w	r4, r0, #20
 8010e1a:	dd45      	ble.n	8010ea8 <rshift+0xa0>
 8010e1c:	f011 011f 	ands.w	r1, r1, #31
 8010e20:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010e24:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010e28:	d10c      	bne.n	8010e44 <rshift+0x3c>
 8010e2a:	f100 0710 	add.w	r7, r0, #16
 8010e2e:	4629      	mov	r1, r5
 8010e30:	42b1      	cmp	r1, r6
 8010e32:	d334      	bcc.n	8010e9e <rshift+0x96>
 8010e34:	1a9b      	subs	r3, r3, r2
 8010e36:	009b      	lsls	r3, r3, #2
 8010e38:	1eea      	subs	r2, r5, #3
 8010e3a:	4296      	cmp	r6, r2
 8010e3c:	bf38      	it	cc
 8010e3e:	2300      	movcc	r3, #0
 8010e40:	4423      	add	r3, r4
 8010e42:	e015      	b.n	8010e70 <rshift+0x68>
 8010e44:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010e48:	f1c1 0820 	rsb	r8, r1, #32
 8010e4c:	40cf      	lsrs	r7, r1
 8010e4e:	f105 0e04 	add.w	lr, r5, #4
 8010e52:	46a1      	mov	r9, r4
 8010e54:	4576      	cmp	r6, lr
 8010e56:	46f4      	mov	ip, lr
 8010e58:	d815      	bhi.n	8010e86 <rshift+0x7e>
 8010e5a:	1a9a      	subs	r2, r3, r2
 8010e5c:	0092      	lsls	r2, r2, #2
 8010e5e:	3a04      	subs	r2, #4
 8010e60:	3501      	adds	r5, #1
 8010e62:	42ae      	cmp	r6, r5
 8010e64:	bf38      	it	cc
 8010e66:	2200      	movcc	r2, #0
 8010e68:	18a3      	adds	r3, r4, r2
 8010e6a:	50a7      	str	r7, [r4, r2]
 8010e6c:	b107      	cbz	r7, 8010e70 <rshift+0x68>
 8010e6e:	3304      	adds	r3, #4
 8010e70:	1b1a      	subs	r2, r3, r4
 8010e72:	42a3      	cmp	r3, r4
 8010e74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010e78:	bf08      	it	eq
 8010e7a:	2300      	moveq	r3, #0
 8010e7c:	6102      	str	r2, [r0, #16]
 8010e7e:	bf08      	it	eq
 8010e80:	6143      	streq	r3, [r0, #20]
 8010e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e86:	f8dc c000 	ldr.w	ip, [ip]
 8010e8a:	fa0c fc08 	lsl.w	ip, ip, r8
 8010e8e:	ea4c 0707 	orr.w	r7, ip, r7
 8010e92:	f849 7b04 	str.w	r7, [r9], #4
 8010e96:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010e9a:	40cf      	lsrs	r7, r1
 8010e9c:	e7da      	b.n	8010e54 <rshift+0x4c>
 8010e9e:	f851 cb04 	ldr.w	ip, [r1], #4
 8010ea2:	f847 cf04 	str.w	ip, [r7, #4]!
 8010ea6:	e7c3      	b.n	8010e30 <rshift+0x28>
 8010ea8:	4623      	mov	r3, r4
 8010eaa:	e7e1      	b.n	8010e70 <rshift+0x68>

08010eac <__hexdig_fun>:
 8010eac:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010eb0:	2b09      	cmp	r3, #9
 8010eb2:	d802      	bhi.n	8010eba <__hexdig_fun+0xe>
 8010eb4:	3820      	subs	r0, #32
 8010eb6:	b2c0      	uxtb	r0, r0
 8010eb8:	4770      	bx	lr
 8010eba:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010ebe:	2b05      	cmp	r3, #5
 8010ec0:	d801      	bhi.n	8010ec6 <__hexdig_fun+0x1a>
 8010ec2:	3847      	subs	r0, #71	@ 0x47
 8010ec4:	e7f7      	b.n	8010eb6 <__hexdig_fun+0xa>
 8010ec6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010eca:	2b05      	cmp	r3, #5
 8010ecc:	d801      	bhi.n	8010ed2 <__hexdig_fun+0x26>
 8010ece:	3827      	subs	r0, #39	@ 0x27
 8010ed0:	e7f1      	b.n	8010eb6 <__hexdig_fun+0xa>
 8010ed2:	2000      	movs	r0, #0
 8010ed4:	4770      	bx	lr
	...

08010ed8 <__gethex>:
 8010ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010edc:	b085      	sub	sp, #20
 8010ede:	468a      	mov	sl, r1
 8010ee0:	9302      	str	r3, [sp, #8]
 8010ee2:	680b      	ldr	r3, [r1, #0]
 8010ee4:	9001      	str	r0, [sp, #4]
 8010ee6:	4690      	mov	r8, r2
 8010ee8:	1c9c      	adds	r4, r3, #2
 8010eea:	46a1      	mov	r9, r4
 8010eec:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010ef0:	2830      	cmp	r0, #48	@ 0x30
 8010ef2:	d0fa      	beq.n	8010eea <__gethex+0x12>
 8010ef4:	eba9 0303 	sub.w	r3, r9, r3
 8010ef8:	f1a3 0b02 	sub.w	fp, r3, #2
 8010efc:	f7ff ffd6 	bl	8010eac <__hexdig_fun>
 8010f00:	4605      	mov	r5, r0
 8010f02:	2800      	cmp	r0, #0
 8010f04:	d168      	bne.n	8010fd8 <__gethex+0x100>
 8010f06:	49a0      	ldr	r1, [pc, #640]	@ (8011188 <__gethex+0x2b0>)
 8010f08:	2201      	movs	r2, #1
 8010f0a:	4648      	mov	r0, r9
 8010f0c:	f7ff f89a 	bl	8010044 <strncmp>
 8010f10:	4607      	mov	r7, r0
 8010f12:	2800      	cmp	r0, #0
 8010f14:	d167      	bne.n	8010fe6 <__gethex+0x10e>
 8010f16:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010f1a:	4626      	mov	r6, r4
 8010f1c:	f7ff ffc6 	bl	8010eac <__hexdig_fun>
 8010f20:	2800      	cmp	r0, #0
 8010f22:	d062      	beq.n	8010fea <__gethex+0x112>
 8010f24:	4623      	mov	r3, r4
 8010f26:	7818      	ldrb	r0, [r3, #0]
 8010f28:	2830      	cmp	r0, #48	@ 0x30
 8010f2a:	4699      	mov	r9, r3
 8010f2c:	f103 0301 	add.w	r3, r3, #1
 8010f30:	d0f9      	beq.n	8010f26 <__gethex+0x4e>
 8010f32:	f7ff ffbb 	bl	8010eac <__hexdig_fun>
 8010f36:	fab0 f580 	clz	r5, r0
 8010f3a:	096d      	lsrs	r5, r5, #5
 8010f3c:	f04f 0b01 	mov.w	fp, #1
 8010f40:	464a      	mov	r2, r9
 8010f42:	4616      	mov	r6, r2
 8010f44:	3201      	adds	r2, #1
 8010f46:	7830      	ldrb	r0, [r6, #0]
 8010f48:	f7ff ffb0 	bl	8010eac <__hexdig_fun>
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	d1f8      	bne.n	8010f42 <__gethex+0x6a>
 8010f50:	498d      	ldr	r1, [pc, #564]	@ (8011188 <__gethex+0x2b0>)
 8010f52:	2201      	movs	r2, #1
 8010f54:	4630      	mov	r0, r6
 8010f56:	f7ff f875 	bl	8010044 <strncmp>
 8010f5a:	2800      	cmp	r0, #0
 8010f5c:	d13f      	bne.n	8010fde <__gethex+0x106>
 8010f5e:	b944      	cbnz	r4, 8010f72 <__gethex+0x9a>
 8010f60:	1c74      	adds	r4, r6, #1
 8010f62:	4622      	mov	r2, r4
 8010f64:	4616      	mov	r6, r2
 8010f66:	3201      	adds	r2, #1
 8010f68:	7830      	ldrb	r0, [r6, #0]
 8010f6a:	f7ff ff9f 	bl	8010eac <__hexdig_fun>
 8010f6e:	2800      	cmp	r0, #0
 8010f70:	d1f8      	bne.n	8010f64 <__gethex+0x8c>
 8010f72:	1ba4      	subs	r4, r4, r6
 8010f74:	00a7      	lsls	r7, r4, #2
 8010f76:	7833      	ldrb	r3, [r6, #0]
 8010f78:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010f7c:	2b50      	cmp	r3, #80	@ 0x50
 8010f7e:	d13e      	bne.n	8010ffe <__gethex+0x126>
 8010f80:	7873      	ldrb	r3, [r6, #1]
 8010f82:	2b2b      	cmp	r3, #43	@ 0x2b
 8010f84:	d033      	beq.n	8010fee <__gethex+0x116>
 8010f86:	2b2d      	cmp	r3, #45	@ 0x2d
 8010f88:	d034      	beq.n	8010ff4 <__gethex+0x11c>
 8010f8a:	1c71      	adds	r1, r6, #1
 8010f8c:	2400      	movs	r4, #0
 8010f8e:	7808      	ldrb	r0, [r1, #0]
 8010f90:	f7ff ff8c 	bl	8010eac <__hexdig_fun>
 8010f94:	1e43      	subs	r3, r0, #1
 8010f96:	b2db      	uxtb	r3, r3
 8010f98:	2b18      	cmp	r3, #24
 8010f9a:	d830      	bhi.n	8010ffe <__gethex+0x126>
 8010f9c:	f1a0 0210 	sub.w	r2, r0, #16
 8010fa0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010fa4:	f7ff ff82 	bl	8010eac <__hexdig_fun>
 8010fa8:	f100 3cff 	add.w	ip, r0, #4294967295
 8010fac:	fa5f fc8c 	uxtb.w	ip, ip
 8010fb0:	f1bc 0f18 	cmp.w	ip, #24
 8010fb4:	f04f 030a 	mov.w	r3, #10
 8010fb8:	d91e      	bls.n	8010ff8 <__gethex+0x120>
 8010fba:	b104      	cbz	r4, 8010fbe <__gethex+0xe6>
 8010fbc:	4252      	negs	r2, r2
 8010fbe:	4417      	add	r7, r2
 8010fc0:	f8ca 1000 	str.w	r1, [sl]
 8010fc4:	b1ed      	cbz	r5, 8011002 <__gethex+0x12a>
 8010fc6:	f1bb 0f00 	cmp.w	fp, #0
 8010fca:	bf0c      	ite	eq
 8010fcc:	2506      	moveq	r5, #6
 8010fce:	2500      	movne	r5, #0
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	b005      	add	sp, #20
 8010fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd8:	2500      	movs	r5, #0
 8010fda:	462c      	mov	r4, r5
 8010fdc:	e7b0      	b.n	8010f40 <__gethex+0x68>
 8010fde:	2c00      	cmp	r4, #0
 8010fe0:	d1c7      	bne.n	8010f72 <__gethex+0x9a>
 8010fe2:	4627      	mov	r7, r4
 8010fe4:	e7c7      	b.n	8010f76 <__gethex+0x9e>
 8010fe6:	464e      	mov	r6, r9
 8010fe8:	462f      	mov	r7, r5
 8010fea:	2501      	movs	r5, #1
 8010fec:	e7c3      	b.n	8010f76 <__gethex+0x9e>
 8010fee:	2400      	movs	r4, #0
 8010ff0:	1cb1      	adds	r1, r6, #2
 8010ff2:	e7cc      	b.n	8010f8e <__gethex+0xb6>
 8010ff4:	2401      	movs	r4, #1
 8010ff6:	e7fb      	b.n	8010ff0 <__gethex+0x118>
 8010ff8:	fb03 0002 	mla	r0, r3, r2, r0
 8010ffc:	e7ce      	b.n	8010f9c <__gethex+0xc4>
 8010ffe:	4631      	mov	r1, r6
 8011000:	e7de      	b.n	8010fc0 <__gethex+0xe8>
 8011002:	eba6 0309 	sub.w	r3, r6, r9
 8011006:	3b01      	subs	r3, #1
 8011008:	4629      	mov	r1, r5
 801100a:	2b07      	cmp	r3, #7
 801100c:	dc0a      	bgt.n	8011024 <__gethex+0x14c>
 801100e:	9801      	ldr	r0, [sp, #4]
 8011010:	f000 fa46 	bl	80114a0 <_Balloc>
 8011014:	4604      	mov	r4, r0
 8011016:	b940      	cbnz	r0, 801102a <__gethex+0x152>
 8011018:	4b5c      	ldr	r3, [pc, #368]	@ (801118c <__gethex+0x2b4>)
 801101a:	4602      	mov	r2, r0
 801101c:	21e4      	movs	r1, #228	@ 0xe4
 801101e:	485c      	ldr	r0, [pc, #368]	@ (8011190 <__gethex+0x2b8>)
 8011020:	f001 fd22 	bl	8012a68 <__assert_func>
 8011024:	3101      	adds	r1, #1
 8011026:	105b      	asrs	r3, r3, #1
 8011028:	e7ef      	b.n	801100a <__gethex+0x132>
 801102a:	f100 0a14 	add.w	sl, r0, #20
 801102e:	2300      	movs	r3, #0
 8011030:	4655      	mov	r5, sl
 8011032:	469b      	mov	fp, r3
 8011034:	45b1      	cmp	r9, r6
 8011036:	d337      	bcc.n	80110a8 <__gethex+0x1d0>
 8011038:	f845 bb04 	str.w	fp, [r5], #4
 801103c:	eba5 050a 	sub.w	r5, r5, sl
 8011040:	10ad      	asrs	r5, r5, #2
 8011042:	6125      	str	r5, [r4, #16]
 8011044:	4658      	mov	r0, fp
 8011046:	f000 fb1d 	bl	8011684 <__hi0bits>
 801104a:	016d      	lsls	r5, r5, #5
 801104c:	f8d8 6000 	ldr.w	r6, [r8]
 8011050:	1a2d      	subs	r5, r5, r0
 8011052:	42b5      	cmp	r5, r6
 8011054:	dd54      	ble.n	8011100 <__gethex+0x228>
 8011056:	1bad      	subs	r5, r5, r6
 8011058:	4629      	mov	r1, r5
 801105a:	4620      	mov	r0, r4
 801105c:	f000 feae 	bl	8011dbc <__any_on>
 8011060:	4681      	mov	r9, r0
 8011062:	b178      	cbz	r0, 8011084 <__gethex+0x1ac>
 8011064:	1e6b      	subs	r3, r5, #1
 8011066:	1159      	asrs	r1, r3, #5
 8011068:	f003 021f 	and.w	r2, r3, #31
 801106c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011070:	f04f 0901 	mov.w	r9, #1
 8011074:	fa09 f202 	lsl.w	r2, r9, r2
 8011078:	420a      	tst	r2, r1
 801107a:	d003      	beq.n	8011084 <__gethex+0x1ac>
 801107c:	454b      	cmp	r3, r9
 801107e:	dc36      	bgt.n	80110ee <__gethex+0x216>
 8011080:	f04f 0902 	mov.w	r9, #2
 8011084:	4629      	mov	r1, r5
 8011086:	4620      	mov	r0, r4
 8011088:	f7ff febe 	bl	8010e08 <rshift>
 801108c:	442f      	add	r7, r5
 801108e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011092:	42bb      	cmp	r3, r7
 8011094:	da42      	bge.n	801111c <__gethex+0x244>
 8011096:	9801      	ldr	r0, [sp, #4]
 8011098:	4621      	mov	r1, r4
 801109a:	f000 fa41 	bl	8011520 <_Bfree>
 801109e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110a0:	2300      	movs	r3, #0
 80110a2:	6013      	str	r3, [r2, #0]
 80110a4:	25a3      	movs	r5, #163	@ 0xa3
 80110a6:	e793      	b.n	8010fd0 <__gethex+0xf8>
 80110a8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80110ac:	2a2e      	cmp	r2, #46	@ 0x2e
 80110ae:	d012      	beq.n	80110d6 <__gethex+0x1fe>
 80110b0:	2b20      	cmp	r3, #32
 80110b2:	d104      	bne.n	80110be <__gethex+0x1e6>
 80110b4:	f845 bb04 	str.w	fp, [r5], #4
 80110b8:	f04f 0b00 	mov.w	fp, #0
 80110bc:	465b      	mov	r3, fp
 80110be:	7830      	ldrb	r0, [r6, #0]
 80110c0:	9303      	str	r3, [sp, #12]
 80110c2:	f7ff fef3 	bl	8010eac <__hexdig_fun>
 80110c6:	9b03      	ldr	r3, [sp, #12]
 80110c8:	f000 000f 	and.w	r0, r0, #15
 80110cc:	4098      	lsls	r0, r3
 80110ce:	ea4b 0b00 	orr.w	fp, fp, r0
 80110d2:	3304      	adds	r3, #4
 80110d4:	e7ae      	b.n	8011034 <__gethex+0x15c>
 80110d6:	45b1      	cmp	r9, r6
 80110d8:	d8ea      	bhi.n	80110b0 <__gethex+0x1d8>
 80110da:	492b      	ldr	r1, [pc, #172]	@ (8011188 <__gethex+0x2b0>)
 80110dc:	9303      	str	r3, [sp, #12]
 80110de:	2201      	movs	r2, #1
 80110e0:	4630      	mov	r0, r6
 80110e2:	f7fe ffaf 	bl	8010044 <strncmp>
 80110e6:	9b03      	ldr	r3, [sp, #12]
 80110e8:	2800      	cmp	r0, #0
 80110ea:	d1e1      	bne.n	80110b0 <__gethex+0x1d8>
 80110ec:	e7a2      	b.n	8011034 <__gethex+0x15c>
 80110ee:	1ea9      	subs	r1, r5, #2
 80110f0:	4620      	mov	r0, r4
 80110f2:	f000 fe63 	bl	8011dbc <__any_on>
 80110f6:	2800      	cmp	r0, #0
 80110f8:	d0c2      	beq.n	8011080 <__gethex+0x1a8>
 80110fa:	f04f 0903 	mov.w	r9, #3
 80110fe:	e7c1      	b.n	8011084 <__gethex+0x1ac>
 8011100:	da09      	bge.n	8011116 <__gethex+0x23e>
 8011102:	1b75      	subs	r5, r6, r5
 8011104:	4621      	mov	r1, r4
 8011106:	9801      	ldr	r0, [sp, #4]
 8011108:	462a      	mov	r2, r5
 801110a:	f000 fc21 	bl	8011950 <__lshift>
 801110e:	1b7f      	subs	r7, r7, r5
 8011110:	4604      	mov	r4, r0
 8011112:	f100 0a14 	add.w	sl, r0, #20
 8011116:	f04f 0900 	mov.w	r9, #0
 801111a:	e7b8      	b.n	801108e <__gethex+0x1b6>
 801111c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011120:	42bd      	cmp	r5, r7
 8011122:	dd6f      	ble.n	8011204 <__gethex+0x32c>
 8011124:	1bed      	subs	r5, r5, r7
 8011126:	42ae      	cmp	r6, r5
 8011128:	dc34      	bgt.n	8011194 <__gethex+0x2bc>
 801112a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801112e:	2b02      	cmp	r3, #2
 8011130:	d022      	beq.n	8011178 <__gethex+0x2a0>
 8011132:	2b03      	cmp	r3, #3
 8011134:	d024      	beq.n	8011180 <__gethex+0x2a8>
 8011136:	2b01      	cmp	r3, #1
 8011138:	d115      	bne.n	8011166 <__gethex+0x28e>
 801113a:	42ae      	cmp	r6, r5
 801113c:	d113      	bne.n	8011166 <__gethex+0x28e>
 801113e:	2e01      	cmp	r6, #1
 8011140:	d10b      	bne.n	801115a <__gethex+0x282>
 8011142:	9a02      	ldr	r2, [sp, #8]
 8011144:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011148:	6013      	str	r3, [r2, #0]
 801114a:	2301      	movs	r3, #1
 801114c:	6123      	str	r3, [r4, #16]
 801114e:	f8ca 3000 	str.w	r3, [sl]
 8011152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011154:	2562      	movs	r5, #98	@ 0x62
 8011156:	601c      	str	r4, [r3, #0]
 8011158:	e73a      	b.n	8010fd0 <__gethex+0xf8>
 801115a:	1e71      	subs	r1, r6, #1
 801115c:	4620      	mov	r0, r4
 801115e:	f000 fe2d 	bl	8011dbc <__any_on>
 8011162:	2800      	cmp	r0, #0
 8011164:	d1ed      	bne.n	8011142 <__gethex+0x26a>
 8011166:	9801      	ldr	r0, [sp, #4]
 8011168:	4621      	mov	r1, r4
 801116a:	f000 f9d9 	bl	8011520 <_Bfree>
 801116e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011170:	2300      	movs	r3, #0
 8011172:	6013      	str	r3, [r2, #0]
 8011174:	2550      	movs	r5, #80	@ 0x50
 8011176:	e72b      	b.n	8010fd0 <__gethex+0xf8>
 8011178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801117a:	2b00      	cmp	r3, #0
 801117c:	d1f3      	bne.n	8011166 <__gethex+0x28e>
 801117e:	e7e0      	b.n	8011142 <__gethex+0x26a>
 8011180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011182:	2b00      	cmp	r3, #0
 8011184:	d1dd      	bne.n	8011142 <__gethex+0x26a>
 8011186:	e7ee      	b.n	8011166 <__gethex+0x28e>
 8011188:	080132d0 	.word	0x080132d0
 801118c:	080133e3 	.word	0x080133e3
 8011190:	080133f4 	.word	0x080133f4
 8011194:	1e6f      	subs	r7, r5, #1
 8011196:	f1b9 0f00 	cmp.w	r9, #0
 801119a:	d130      	bne.n	80111fe <__gethex+0x326>
 801119c:	b127      	cbz	r7, 80111a8 <__gethex+0x2d0>
 801119e:	4639      	mov	r1, r7
 80111a0:	4620      	mov	r0, r4
 80111a2:	f000 fe0b 	bl	8011dbc <__any_on>
 80111a6:	4681      	mov	r9, r0
 80111a8:	117a      	asrs	r2, r7, #5
 80111aa:	2301      	movs	r3, #1
 80111ac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80111b0:	f007 071f 	and.w	r7, r7, #31
 80111b4:	40bb      	lsls	r3, r7
 80111b6:	4213      	tst	r3, r2
 80111b8:	4629      	mov	r1, r5
 80111ba:	4620      	mov	r0, r4
 80111bc:	bf18      	it	ne
 80111be:	f049 0902 	orrne.w	r9, r9, #2
 80111c2:	f7ff fe21 	bl	8010e08 <rshift>
 80111c6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80111ca:	1b76      	subs	r6, r6, r5
 80111cc:	2502      	movs	r5, #2
 80111ce:	f1b9 0f00 	cmp.w	r9, #0
 80111d2:	d047      	beq.n	8011264 <__gethex+0x38c>
 80111d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80111d8:	2b02      	cmp	r3, #2
 80111da:	d015      	beq.n	8011208 <__gethex+0x330>
 80111dc:	2b03      	cmp	r3, #3
 80111de:	d017      	beq.n	8011210 <__gethex+0x338>
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d109      	bne.n	80111f8 <__gethex+0x320>
 80111e4:	f019 0f02 	tst.w	r9, #2
 80111e8:	d006      	beq.n	80111f8 <__gethex+0x320>
 80111ea:	f8da 3000 	ldr.w	r3, [sl]
 80111ee:	ea49 0903 	orr.w	r9, r9, r3
 80111f2:	f019 0f01 	tst.w	r9, #1
 80111f6:	d10e      	bne.n	8011216 <__gethex+0x33e>
 80111f8:	f045 0510 	orr.w	r5, r5, #16
 80111fc:	e032      	b.n	8011264 <__gethex+0x38c>
 80111fe:	f04f 0901 	mov.w	r9, #1
 8011202:	e7d1      	b.n	80111a8 <__gethex+0x2d0>
 8011204:	2501      	movs	r5, #1
 8011206:	e7e2      	b.n	80111ce <__gethex+0x2f6>
 8011208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801120a:	f1c3 0301 	rsb	r3, r3, #1
 801120e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011210:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011212:	2b00      	cmp	r3, #0
 8011214:	d0f0      	beq.n	80111f8 <__gethex+0x320>
 8011216:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801121a:	f104 0314 	add.w	r3, r4, #20
 801121e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011222:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011226:	f04f 0c00 	mov.w	ip, #0
 801122a:	4618      	mov	r0, r3
 801122c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011230:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011234:	d01b      	beq.n	801126e <__gethex+0x396>
 8011236:	3201      	adds	r2, #1
 8011238:	6002      	str	r2, [r0, #0]
 801123a:	2d02      	cmp	r5, #2
 801123c:	f104 0314 	add.w	r3, r4, #20
 8011240:	d13c      	bne.n	80112bc <__gethex+0x3e4>
 8011242:	f8d8 2000 	ldr.w	r2, [r8]
 8011246:	3a01      	subs	r2, #1
 8011248:	42b2      	cmp	r2, r6
 801124a:	d109      	bne.n	8011260 <__gethex+0x388>
 801124c:	1171      	asrs	r1, r6, #5
 801124e:	2201      	movs	r2, #1
 8011250:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011254:	f006 061f 	and.w	r6, r6, #31
 8011258:	fa02 f606 	lsl.w	r6, r2, r6
 801125c:	421e      	tst	r6, r3
 801125e:	d13a      	bne.n	80112d6 <__gethex+0x3fe>
 8011260:	f045 0520 	orr.w	r5, r5, #32
 8011264:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011266:	601c      	str	r4, [r3, #0]
 8011268:	9b02      	ldr	r3, [sp, #8]
 801126a:	601f      	str	r7, [r3, #0]
 801126c:	e6b0      	b.n	8010fd0 <__gethex+0xf8>
 801126e:	4299      	cmp	r1, r3
 8011270:	f843 cc04 	str.w	ip, [r3, #-4]
 8011274:	d8d9      	bhi.n	801122a <__gethex+0x352>
 8011276:	68a3      	ldr	r3, [r4, #8]
 8011278:	459b      	cmp	fp, r3
 801127a:	db17      	blt.n	80112ac <__gethex+0x3d4>
 801127c:	6861      	ldr	r1, [r4, #4]
 801127e:	9801      	ldr	r0, [sp, #4]
 8011280:	3101      	adds	r1, #1
 8011282:	f000 f90d 	bl	80114a0 <_Balloc>
 8011286:	4681      	mov	r9, r0
 8011288:	b918      	cbnz	r0, 8011292 <__gethex+0x3ba>
 801128a:	4b1a      	ldr	r3, [pc, #104]	@ (80112f4 <__gethex+0x41c>)
 801128c:	4602      	mov	r2, r0
 801128e:	2184      	movs	r1, #132	@ 0x84
 8011290:	e6c5      	b.n	801101e <__gethex+0x146>
 8011292:	6922      	ldr	r2, [r4, #16]
 8011294:	3202      	adds	r2, #2
 8011296:	f104 010c 	add.w	r1, r4, #12
 801129a:	0092      	lsls	r2, r2, #2
 801129c:	300c      	adds	r0, #12
 801129e:	f7fe ff6a 	bl	8010176 <memcpy>
 80112a2:	4621      	mov	r1, r4
 80112a4:	9801      	ldr	r0, [sp, #4]
 80112a6:	f000 f93b 	bl	8011520 <_Bfree>
 80112aa:	464c      	mov	r4, r9
 80112ac:	6923      	ldr	r3, [r4, #16]
 80112ae:	1c5a      	adds	r2, r3, #1
 80112b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80112b4:	6122      	str	r2, [r4, #16]
 80112b6:	2201      	movs	r2, #1
 80112b8:	615a      	str	r2, [r3, #20]
 80112ba:	e7be      	b.n	801123a <__gethex+0x362>
 80112bc:	6922      	ldr	r2, [r4, #16]
 80112be:	455a      	cmp	r2, fp
 80112c0:	dd0b      	ble.n	80112da <__gethex+0x402>
 80112c2:	2101      	movs	r1, #1
 80112c4:	4620      	mov	r0, r4
 80112c6:	f7ff fd9f 	bl	8010e08 <rshift>
 80112ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80112ce:	3701      	adds	r7, #1
 80112d0:	42bb      	cmp	r3, r7
 80112d2:	f6ff aee0 	blt.w	8011096 <__gethex+0x1be>
 80112d6:	2501      	movs	r5, #1
 80112d8:	e7c2      	b.n	8011260 <__gethex+0x388>
 80112da:	f016 061f 	ands.w	r6, r6, #31
 80112de:	d0fa      	beq.n	80112d6 <__gethex+0x3fe>
 80112e0:	4453      	add	r3, sl
 80112e2:	f1c6 0620 	rsb	r6, r6, #32
 80112e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80112ea:	f000 f9cb 	bl	8011684 <__hi0bits>
 80112ee:	42b0      	cmp	r0, r6
 80112f0:	dbe7      	blt.n	80112c2 <__gethex+0x3ea>
 80112f2:	e7f0      	b.n	80112d6 <__gethex+0x3fe>
 80112f4:	080133e3 	.word	0x080133e3

080112f8 <L_shift>:
 80112f8:	f1c2 0208 	rsb	r2, r2, #8
 80112fc:	0092      	lsls	r2, r2, #2
 80112fe:	b570      	push	{r4, r5, r6, lr}
 8011300:	f1c2 0620 	rsb	r6, r2, #32
 8011304:	6843      	ldr	r3, [r0, #4]
 8011306:	6804      	ldr	r4, [r0, #0]
 8011308:	fa03 f506 	lsl.w	r5, r3, r6
 801130c:	432c      	orrs	r4, r5
 801130e:	40d3      	lsrs	r3, r2
 8011310:	6004      	str	r4, [r0, #0]
 8011312:	f840 3f04 	str.w	r3, [r0, #4]!
 8011316:	4288      	cmp	r0, r1
 8011318:	d3f4      	bcc.n	8011304 <L_shift+0xc>
 801131a:	bd70      	pop	{r4, r5, r6, pc}

0801131c <__match>:
 801131c:	b530      	push	{r4, r5, lr}
 801131e:	6803      	ldr	r3, [r0, #0]
 8011320:	3301      	adds	r3, #1
 8011322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011326:	b914      	cbnz	r4, 801132e <__match+0x12>
 8011328:	6003      	str	r3, [r0, #0]
 801132a:	2001      	movs	r0, #1
 801132c:	bd30      	pop	{r4, r5, pc}
 801132e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011332:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011336:	2d19      	cmp	r5, #25
 8011338:	bf98      	it	ls
 801133a:	3220      	addls	r2, #32
 801133c:	42a2      	cmp	r2, r4
 801133e:	d0f0      	beq.n	8011322 <__match+0x6>
 8011340:	2000      	movs	r0, #0
 8011342:	e7f3      	b.n	801132c <__match+0x10>

08011344 <__hexnan>:
 8011344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011348:	680b      	ldr	r3, [r1, #0]
 801134a:	6801      	ldr	r1, [r0, #0]
 801134c:	115e      	asrs	r6, r3, #5
 801134e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011352:	f013 031f 	ands.w	r3, r3, #31
 8011356:	b087      	sub	sp, #28
 8011358:	bf18      	it	ne
 801135a:	3604      	addne	r6, #4
 801135c:	2500      	movs	r5, #0
 801135e:	1f37      	subs	r7, r6, #4
 8011360:	4682      	mov	sl, r0
 8011362:	4690      	mov	r8, r2
 8011364:	9301      	str	r3, [sp, #4]
 8011366:	f846 5c04 	str.w	r5, [r6, #-4]
 801136a:	46b9      	mov	r9, r7
 801136c:	463c      	mov	r4, r7
 801136e:	9502      	str	r5, [sp, #8]
 8011370:	46ab      	mov	fp, r5
 8011372:	784a      	ldrb	r2, [r1, #1]
 8011374:	1c4b      	adds	r3, r1, #1
 8011376:	9303      	str	r3, [sp, #12]
 8011378:	b342      	cbz	r2, 80113cc <__hexnan+0x88>
 801137a:	4610      	mov	r0, r2
 801137c:	9105      	str	r1, [sp, #20]
 801137e:	9204      	str	r2, [sp, #16]
 8011380:	f7ff fd94 	bl	8010eac <__hexdig_fun>
 8011384:	2800      	cmp	r0, #0
 8011386:	d151      	bne.n	801142c <__hexnan+0xe8>
 8011388:	9a04      	ldr	r2, [sp, #16]
 801138a:	9905      	ldr	r1, [sp, #20]
 801138c:	2a20      	cmp	r2, #32
 801138e:	d818      	bhi.n	80113c2 <__hexnan+0x7e>
 8011390:	9b02      	ldr	r3, [sp, #8]
 8011392:	459b      	cmp	fp, r3
 8011394:	dd13      	ble.n	80113be <__hexnan+0x7a>
 8011396:	454c      	cmp	r4, r9
 8011398:	d206      	bcs.n	80113a8 <__hexnan+0x64>
 801139a:	2d07      	cmp	r5, #7
 801139c:	dc04      	bgt.n	80113a8 <__hexnan+0x64>
 801139e:	462a      	mov	r2, r5
 80113a0:	4649      	mov	r1, r9
 80113a2:	4620      	mov	r0, r4
 80113a4:	f7ff ffa8 	bl	80112f8 <L_shift>
 80113a8:	4544      	cmp	r4, r8
 80113aa:	d952      	bls.n	8011452 <__hexnan+0x10e>
 80113ac:	2300      	movs	r3, #0
 80113ae:	f1a4 0904 	sub.w	r9, r4, #4
 80113b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80113b6:	f8cd b008 	str.w	fp, [sp, #8]
 80113ba:	464c      	mov	r4, r9
 80113bc:	461d      	mov	r5, r3
 80113be:	9903      	ldr	r1, [sp, #12]
 80113c0:	e7d7      	b.n	8011372 <__hexnan+0x2e>
 80113c2:	2a29      	cmp	r2, #41	@ 0x29
 80113c4:	d157      	bne.n	8011476 <__hexnan+0x132>
 80113c6:	3102      	adds	r1, #2
 80113c8:	f8ca 1000 	str.w	r1, [sl]
 80113cc:	f1bb 0f00 	cmp.w	fp, #0
 80113d0:	d051      	beq.n	8011476 <__hexnan+0x132>
 80113d2:	454c      	cmp	r4, r9
 80113d4:	d206      	bcs.n	80113e4 <__hexnan+0xa0>
 80113d6:	2d07      	cmp	r5, #7
 80113d8:	dc04      	bgt.n	80113e4 <__hexnan+0xa0>
 80113da:	462a      	mov	r2, r5
 80113dc:	4649      	mov	r1, r9
 80113de:	4620      	mov	r0, r4
 80113e0:	f7ff ff8a 	bl	80112f8 <L_shift>
 80113e4:	4544      	cmp	r4, r8
 80113e6:	d936      	bls.n	8011456 <__hexnan+0x112>
 80113e8:	f1a8 0204 	sub.w	r2, r8, #4
 80113ec:	4623      	mov	r3, r4
 80113ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80113f2:	f842 1f04 	str.w	r1, [r2, #4]!
 80113f6:	429f      	cmp	r7, r3
 80113f8:	d2f9      	bcs.n	80113ee <__hexnan+0xaa>
 80113fa:	1b3b      	subs	r3, r7, r4
 80113fc:	f023 0303 	bic.w	r3, r3, #3
 8011400:	3304      	adds	r3, #4
 8011402:	3401      	adds	r4, #1
 8011404:	3e03      	subs	r6, #3
 8011406:	42b4      	cmp	r4, r6
 8011408:	bf88      	it	hi
 801140a:	2304      	movhi	r3, #4
 801140c:	4443      	add	r3, r8
 801140e:	2200      	movs	r2, #0
 8011410:	f843 2b04 	str.w	r2, [r3], #4
 8011414:	429f      	cmp	r7, r3
 8011416:	d2fb      	bcs.n	8011410 <__hexnan+0xcc>
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	b91b      	cbnz	r3, 8011424 <__hexnan+0xe0>
 801141c:	4547      	cmp	r7, r8
 801141e:	d128      	bne.n	8011472 <__hexnan+0x12e>
 8011420:	2301      	movs	r3, #1
 8011422:	603b      	str	r3, [r7, #0]
 8011424:	2005      	movs	r0, #5
 8011426:	b007      	add	sp, #28
 8011428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801142c:	3501      	adds	r5, #1
 801142e:	2d08      	cmp	r5, #8
 8011430:	f10b 0b01 	add.w	fp, fp, #1
 8011434:	dd06      	ble.n	8011444 <__hexnan+0x100>
 8011436:	4544      	cmp	r4, r8
 8011438:	d9c1      	bls.n	80113be <__hexnan+0x7a>
 801143a:	2300      	movs	r3, #0
 801143c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011440:	2501      	movs	r5, #1
 8011442:	3c04      	subs	r4, #4
 8011444:	6822      	ldr	r2, [r4, #0]
 8011446:	f000 000f 	and.w	r0, r0, #15
 801144a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801144e:	6020      	str	r0, [r4, #0]
 8011450:	e7b5      	b.n	80113be <__hexnan+0x7a>
 8011452:	2508      	movs	r5, #8
 8011454:	e7b3      	b.n	80113be <__hexnan+0x7a>
 8011456:	9b01      	ldr	r3, [sp, #4]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d0dd      	beq.n	8011418 <__hexnan+0xd4>
 801145c:	f1c3 0320 	rsb	r3, r3, #32
 8011460:	f04f 32ff 	mov.w	r2, #4294967295
 8011464:	40da      	lsrs	r2, r3
 8011466:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801146a:	4013      	ands	r3, r2
 801146c:	f846 3c04 	str.w	r3, [r6, #-4]
 8011470:	e7d2      	b.n	8011418 <__hexnan+0xd4>
 8011472:	3f04      	subs	r7, #4
 8011474:	e7d0      	b.n	8011418 <__hexnan+0xd4>
 8011476:	2004      	movs	r0, #4
 8011478:	e7d5      	b.n	8011426 <__hexnan+0xe2>

0801147a <__ascii_mbtowc>:
 801147a:	b082      	sub	sp, #8
 801147c:	b901      	cbnz	r1, 8011480 <__ascii_mbtowc+0x6>
 801147e:	a901      	add	r1, sp, #4
 8011480:	b142      	cbz	r2, 8011494 <__ascii_mbtowc+0x1a>
 8011482:	b14b      	cbz	r3, 8011498 <__ascii_mbtowc+0x1e>
 8011484:	7813      	ldrb	r3, [r2, #0]
 8011486:	600b      	str	r3, [r1, #0]
 8011488:	7812      	ldrb	r2, [r2, #0]
 801148a:	1e10      	subs	r0, r2, #0
 801148c:	bf18      	it	ne
 801148e:	2001      	movne	r0, #1
 8011490:	b002      	add	sp, #8
 8011492:	4770      	bx	lr
 8011494:	4610      	mov	r0, r2
 8011496:	e7fb      	b.n	8011490 <__ascii_mbtowc+0x16>
 8011498:	f06f 0001 	mvn.w	r0, #1
 801149c:	e7f8      	b.n	8011490 <__ascii_mbtowc+0x16>
	...

080114a0 <_Balloc>:
 80114a0:	b570      	push	{r4, r5, r6, lr}
 80114a2:	69c6      	ldr	r6, [r0, #28]
 80114a4:	4604      	mov	r4, r0
 80114a6:	460d      	mov	r5, r1
 80114a8:	b976      	cbnz	r6, 80114c8 <_Balloc+0x28>
 80114aa:	2010      	movs	r0, #16
 80114ac:	f7fc ffb2 	bl	800e414 <malloc>
 80114b0:	4602      	mov	r2, r0
 80114b2:	61e0      	str	r0, [r4, #28]
 80114b4:	b920      	cbnz	r0, 80114c0 <_Balloc+0x20>
 80114b6:	4b18      	ldr	r3, [pc, #96]	@ (8011518 <_Balloc+0x78>)
 80114b8:	4818      	ldr	r0, [pc, #96]	@ (801151c <_Balloc+0x7c>)
 80114ba:	216b      	movs	r1, #107	@ 0x6b
 80114bc:	f001 fad4 	bl	8012a68 <__assert_func>
 80114c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114c4:	6006      	str	r6, [r0, #0]
 80114c6:	60c6      	str	r6, [r0, #12]
 80114c8:	69e6      	ldr	r6, [r4, #28]
 80114ca:	68f3      	ldr	r3, [r6, #12]
 80114cc:	b183      	cbz	r3, 80114f0 <_Balloc+0x50>
 80114ce:	69e3      	ldr	r3, [r4, #28]
 80114d0:	68db      	ldr	r3, [r3, #12]
 80114d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114d6:	b9b8      	cbnz	r0, 8011508 <_Balloc+0x68>
 80114d8:	2101      	movs	r1, #1
 80114da:	fa01 f605 	lsl.w	r6, r1, r5
 80114de:	1d72      	adds	r2, r6, #5
 80114e0:	0092      	lsls	r2, r2, #2
 80114e2:	4620      	mov	r0, r4
 80114e4:	f001 fade 	bl	8012aa4 <_calloc_r>
 80114e8:	b160      	cbz	r0, 8011504 <_Balloc+0x64>
 80114ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114ee:	e00e      	b.n	801150e <_Balloc+0x6e>
 80114f0:	2221      	movs	r2, #33	@ 0x21
 80114f2:	2104      	movs	r1, #4
 80114f4:	4620      	mov	r0, r4
 80114f6:	f001 fad5 	bl	8012aa4 <_calloc_r>
 80114fa:	69e3      	ldr	r3, [r4, #28]
 80114fc:	60f0      	str	r0, [r6, #12]
 80114fe:	68db      	ldr	r3, [r3, #12]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d1e4      	bne.n	80114ce <_Balloc+0x2e>
 8011504:	2000      	movs	r0, #0
 8011506:	bd70      	pop	{r4, r5, r6, pc}
 8011508:	6802      	ldr	r2, [r0, #0]
 801150a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801150e:	2300      	movs	r3, #0
 8011510:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011514:	e7f7      	b.n	8011506 <_Balloc+0x66>
 8011516:	bf00      	nop
 8011518:	08013374 	.word	0x08013374
 801151c:	08013454 	.word	0x08013454

08011520 <_Bfree>:
 8011520:	b570      	push	{r4, r5, r6, lr}
 8011522:	69c6      	ldr	r6, [r0, #28]
 8011524:	4605      	mov	r5, r0
 8011526:	460c      	mov	r4, r1
 8011528:	b976      	cbnz	r6, 8011548 <_Bfree+0x28>
 801152a:	2010      	movs	r0, #16
 801152c:	f7fc ff72 	bl	800e414 <malloc>
 8011530:	4602      	mov	r2, r0
 8011532:	61e8      	str	r0, [r5, #28]
 8011534:	b920      	cbnz	r0, 8011540 <_Bfree+0x20>
 8011536:	4b09      	ldr	r3, [pc, #36]	@ (801155c <_Bfree+0x3c>)
 8011538:	4809      	ldr	r0, [pc, #36]	@ (8011560 <_Bfree+0x40>)
 801153a:	218f      	movs	r1, #143	@ 0x8f
 801153c:	f001 fa94 	bl	8012a68 <__assert_func>
 8011540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011544:	6006      	str	r6, [r0, #0]
 8011546:	60c6      	str	r6, [r0, #12]
 8011548:	b13c      	cbz	r4, 801155a <_Bfree+0x3a>
 801154a:	69eb      	ldr	r3, [r5, #28]
 801154c:	6862      	ldr	r2, [r4, #4]
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011554:	6021      	str	r1, [r4, #0]
 8011556:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801155a:	bd70      	pop	{r4, r5, r6, pc}
 801155c:	08013374 	.word	0x08013374
 8011560:	08013454 	.word	0x08013454

08011564 <__multadd>:
 8011564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011568:	690d      	ldr	r5, [r1, #16]
 801156a:	4607      	mov	r7, r0
 801156c:	460c      	mov	r4, r1
 801156e:	461e      	mov	r6, r3
 8011570:	f101 0c14 	add.w	ip, r1, #20
 8011574:	2000      	movs	r0, #0
 8011576:	f8dc 3000 	ldr.w	r3, [ip]
 801157a:	b299      	uxth	r1, r3
 801157c:	fb02 6101 	mla	r1, r2, r1, r6
 8011580:	0c1e      	lsrs	r6, r3, #16
 8011582:	0c0b      	lsrs	r3, r1, #16
 8011584:	fb02 3306 	mla	r3, r2, r6, r3
 8011588:	b289      	uxth	r1, r1
 801158a:	3001      	adds	r0, #1
 801158c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011590:	4285      	cmp	r5, r0
 8011592:	f84c 1b04 	str.w	r1, [ip], #4
 8011596:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801159a:	dcec      	bgt.n	8011576 <__multadd+0x12>
 801159c:	b30e      	cbz	r6, 80115e2 <__multadd+0x7e>
 801159e:	68a3      	ldr	r3, [r4, #8]
 80115a0:	42ab      	cmp	r3, r5
 80115a2:	dc19      	bgt.n	80115d8 <__multadd+0x74>
 80115a4:	6861      	ldr	r1, [r4, #4]
 80115a6:	4638      	mov	r0, r7
 80115a8:	3101      	adds	r1, #1
 80115aa:	f7ff ff79 	bl	80114a0 <_Balloc>
 80115ae:	4680      	mov	r8, r0
 80115b0:	b928      	cbnz	r0, 80115be <__multadd+0x5a>
 80115b2:	4602      	mov	r2, r0
 80115b4:	4b0c      	ldr	r3, [pc, #48]	@ (80115e8 <__multadd+0x84>)
 80115b6:	480d      	ldr	r0, [pc, #52]	@ (80115ec <__multadd+0x88>)
 80115b8:	21ba      	movs	r1, #186	@ 0xba
 80115ba:	f001 fa55 	bl	8012a68 <__assert_func>
 80115be:	6922      	ldr	r2, [r4, #16]
 80115c0:	3202      	adds	r2, #2
 80115c2:	f104 010c 	add.w	r1, r4, #12
 80115c6:	0092      	lsls	r2, r2, #2
 80115c8:	300c      	adds	r0, #12
 80115ca:	f7fe fdd4 	bl	8010176 <memcpy>
 80115ce:	4621      	mov	r1, r4
 80115d0:	4638      	mov	r0, r7
 80115d2:	f7ff ffa5 	bl	8011520 <_Bfree>
 80115d6:	4644      	mov	r4, r8
 80115d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80115dc:	3501      	adds	r5, #1
 80115de:	615e      	str	r6, [r3, #20]
 80115e0:	6125      	str	r5, [r4, #16]
 80115e2:	4620      	mov	r0, r4
 80115e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e8:	080133e3 	.word	0x080133e3
 80115ec:	08013454 	.word	0x08013454

080115f0 <__s2b>:
 80115f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115f4:	460c      	mov	r4, r1
 80115f6:	4615      	mov	r5, r2
 80115f8:	461f      	mov	r7, r3
 80115fa:	2209      	movs	r2, #9
 80115fc:	3308      	adds	r3, #8
 80115fe:	4606      	mov	r6, r0
 8011600:	fb93 f3f2 	sdiv	r3, r3, r2
 8011604:	2100      	movs	r1, #0
 8011606:	2201      	movs	r2, #1
 8011608:	429a      	cmp	r2, r3
 801160a:	db09      	blt.n	8011620 <__s2b+0x30>
 801160c:	4630      	mov	r0, r6
 801160e:	f7ff ff47 	bl	80114a0 <_Balloc>
 8011612:	b940      	cbnz	r0, 8011626 <__s2b+0x36>
 8011614:	4602      	mov	r2, r0
 8011616:	4b19      	ldr	r3, [pc, #100]	@ (801167c <__s2b+0x8c>)
 8011618:	4819      	ldr	r0, [pc, #100]	@ (8011680 <__s2b+0x90>)
 801161a:	21d3      	movs	r1, #211	@ 0xd3
 801161c:	f001 fa24 	bl	8012a68 <__assert_func>
 8011620:	0052      	lsls	r2, r2, #1
 8011622:	3101      	adds	r1, #1
 8011624:	e7f0      	b.n	8011608 <__s2b+0x18>
 8011626:	9b08      	ldr	r3, [sp, #32]
 8011628:	6143      	str	r3, [r0, #20]
 801162a:	2d09      	cmp	r5, #9
 801162c:	f04f 0301 	mov.w	r3, #1
 8011630:	6103      	str	r3, [r0, #16]
 8011632:	dd16      	ble.n	8011662 <__s2b+0x72>
 8011634:	f104 0909 	add.w	r9, r4, #9
 8011638:	46c8      	mov	r8, r9
 801163a:	442c      	add	r4, r5
 801163c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011640:	4601      	mov	r1, r0
 8011642:	3b30      	subs	r3, #48	@ 0x30
 8011644:	220a      	movs	r2, #10
 8011646:	4630      	mov	r0, r6
 8011648:	f7ff ff8c 	bl	8011564 <__multadd>
 801164c:	45a0      	cmp	r8, r4
 801164e:	d1f5      	bne.n	801163c <__s2b+0x4c>
 8011650:	f1a5 0408 	sub.w	r4, r5, #8
 8011654:	444c      	add	r4, r9
 8011656:	1b2d      	subs	r5, r5, r4
 8011658:	1963      	adds	r3, r4, r5
 801165a:	42bb      	cmp	r3, r7
 801165c:	db04      	blt.n	8011668 <__s2b+0x78>
 801165e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011662:	340a      	adds	r4, #10
 8011664:	2509      	movs	r5, #9
 8011666:	e7f6      	b.n	8011656 <__s2b+0x66>
 8011668:	f814 3b01 	ldrb.w	r3, [r4], #1
 801166c:	4601      	mov	r1, r0
 801166e:	3b30      	subs	r3, #48	@ 0x30
 8011670:	220a      	movs	r2, #10
 8011672:	4630      	mov	r0, r6
 8011674:	f7ff ff76 	bl	8011564 <__multadd>
 8011678:	e7ee      	b.n	8011658 <__s2b+0x68>
 801167a:	bf00      	nop
 801167c:	080133e3 	.word	0x080133e3
 8011680:	08013454 	.word	0x08013454

08011684 <__hi0bits>:
 8011684:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011688:	4603      	mov	r3, r0
 801168a:	bf36      	itet	cc
 801168c:	0403      	lslcc	r3, r0, #16
 801168e:	2000      	movcs	r0, #0
 8011690:	2010      	movcc	r0, #16
 8011692:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011696:	bf3c      	itt	cc
 8011698:	021b      	lslcc	r3, r3, #8
 801169a:	3008      	addcc	r0, #8
 801169c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80116a0:	bf3c      	itt	cc
 80116a2:	011b      	lslcc	r3, r3, #4
 80116a4:	3004      	addcc	r0, #4
 80116a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80116aa:	bf3c      	itt	cc
 80116ac:	009b      	lslcc	r3, r3, #2
 80116ae:	3002      	addcc	r0, #2
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	db05      	blt.n	80116c0 <__hi0bits+0x3c>
 80116b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80116b8:	f100 0001 	add.w	r0, r0, #1
 80116bc:	bf08      	it	eq
 80116be:	2020      	moveq	r0, #32
 80116c0:	4770      	bx	lr

080116c2 <__lo0bits>:
 80116c2:	6803      	ldr	r3, [r0, #0]
 80116c4:	4602      	mov	r2, r0
 80116c6:	f013 0007 	ands.w	r0, r3, #7
 80116ca:	d00b      	beq.n	80116e4 <__lo0bits+0x22>
 80116cc:	07d9      	lsls	r1, r3, #31
 80116ce:	d421      	bmi.n	8011714 <__lo0bits+0x52>
 80116d0:	0798      	lsls	r0, r3, #30
 80116d2:	bf49      	itett	mi
 80116d4:	085b      	lsrmi	r3, r3, #1
 80116d6:	089b      	lsrpl	r3, r3, #2
 80116d8:	2001      	movmi	r0, #1
 80116da:	6013      	strmi	r3, [r2, #0]
 80116dc:	bf5c      	itt	pl
 80116de:	6013      	strpl	r3, [r2, #0]
 80116e0:	2002      	movpl	r0, #2
 80116e2:	4770      	bx	lr
 80116e4:	b299      	uxth	r1, r3
 80116e6:	b909      	cbnz	r1, 80116ec <__lo0bits+0x2a>
 80116e8:	0c1b      	lsrs	r3, r3, #16
 80116ea:	2010      	movs	r0, #16
 80116ec:	b2d9      	uxtb	r1, r3
 80116ee:	b909      	cbnz	r1, 80116f4 <__lo0bits+0x32>
 80116f0:	3008      	adds	r0, #8
 80116f2:	0a1b      	lsrs	r3, r3, #8
 80116f4:	0719      	lsls	r1, r3, #28
 80116f6:	bf04      	itt	eq
 80116f8:	091b      	lsreq	r3, r3, #4
 80116fa:	3004      	addeq	r0, #4
 80116fc:	0799      	lsls	r1, r3, #30
 80116fe:	bf04      	itt	eq
 8011700:	089b      	lsreq	r3, r3, #2
 8011702:	3002      	addeq	r0, #2
 8011704:	07d9      	lsls	r1, r3, #31
 8011706:	d403      	bmi.n	8011710 <__lo0bits+0x4e>
 8011708:	085b      	lsrs	r3, r3, #1
 801170a:	f100 0001 	add.w	r0, r0, #1
 801170e:	d003      	beq.n	8011718 <__lo0bits+0x56>
 8011710:	6013      	str	r3, [r2, #0]
 8011712:	4770      	bx	lr
 8011714:	2000      	movs	r0, #0
 8011716:	4770      	bx	lr
 8011718:	2020      	movs	r0, #32
 801171a:	4770      	bx	lr

0801171c <__i2b>:
 801171c:	b510      	push	{r4, lr}
 801171e:	460c      	mov	r4, r1
 8011720:	2101      	movs	r1, #1
 8011722:	f7ff febd 	bl	80114a0 <_Balloc>
 8011726:	4602      	mov	r2, r0
 8011728:	b928      	cbnz	r0, 8011736 <__i2b+0x1a>
 801172a:	4b05      	ldr	r3, [pc, #20]	@ (8011740 <__i2b+0x24>)
 801172c:	4805      	ldr	r0, [pc, #20]	@ (8011744 <__i2b+0x28>)
 801172e:	f240 1145 	movw	r1, #325	@ 0x145
 8011732:	f001 f999 	bl	8012a68 <__assert_func>
 8011736:	2301      	movs	r3, #1
 8011738:	6144      	str	r4, [r0, #20]
 801173a:	6103      	str	r3, [r0, #16]
 801173c:	bd10      	pop	{r4, pc}
 801173e:	bf00      	nop
 8011740:	080133e3 	.word	0x080133e3
 8011744:	08013454 	.word	0x08013454

08011748 <__multiply>:
 8011748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801174c:	4614      	mov	r4, r2
 801174e:	690a      	ldr	r2, [r1, #16]
 8011750:	6923      	ldr	r3, [r4, #16]
 8011752:	429a      	cmp	r2, r3
 8011754:	bfa8      	it	ge
 8011756:	4623      	movge	r3, r4
 8011758:	460f      	mov	r7, r1
 801175a:	bfa4      	itt	ge
 801175c:	460c      	movge	r4, r1
 801175e:	461f      	movge	r7, r3
 8011760:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011764:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011768:	68a3      	ldr	r3, [r4, #8]
 801176a:	6861      	ldr	r1, [r4, #4]
 801176c:	eb0a 0609 	add.w	r6, sl, r9
 8011770:	42b3      	cmp	r3, r6
 8011772:	b085      	sub	sp, #20
 8011774:	bfb8      	it	lt
 8011776:	3101      	addlt	r1, #1
 8011778:	f7ff fe92 	bl	80114a0 <_Balloc>
 801177c:	b930      	cbnz	r0, 801178c <__multiply+0x44>
 801177e:	4602      	mov	r2, r0
 8011780:	4b44      	ldr	r3, [pc, #272]	@ (8011894 <__multiply+0x14c>)
 8011782:	4845      	ldr	r0, [pc, #276]	@ (8011898 <__multiply+0x150>)
 8011784:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011788:	f001 f96e 	bl	8012a68 <__assert_func>
 801178c:	f100 0514 	add.w	r5, r0, #20
 8011790:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011794:	462b      	mov	r3, r5
 8011796:	2200      	movs	r2, #0
 8011798:	4543      	cmp	r3, r8
 801179a:	d321      	bcc.n	80117e0 <__multiply+0x98>
 801179c:	f107 0114 	add.w	r1, r7, #20
 80117a0:	f104 0214 	add.w	r2, r4, #20
 80117a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80117a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80117ac:	9302      	str	r3, [sp, #8]
 80117ae:	1b13      	subs	r3, r2, r4
 80117b0:	3b15      	subs	r3, #21
 80117b2:	f023 0303 	bic.w	r3, r3, #3
 80117b6:	3304      	adds	r3, #4
 80117b8:	f104 0715 	add.w	r7, r4, #21
 80117bc:	42ba      	cmp	r2, r7
 80117be:	bf38      	it	cc
 80117c0:	2304      	movcc	r3, #4
 80117c2:	9301      	str	r3, [sp, #4]
 80117c4:	9b02      	ldr	r3, [sp, #8]
 80117c6:	9103      	str	r1, [sp, #12]
 80117c8:	428b      	cmp	r3, r1
 80117ca:	d80c      	bhi.n	80117e6 <__multiply+0x9e>
 80117cc:	2e00      	cmp	r6, #0
 80117ce:	dd03      	ble.n	80117d8 <__multiply+0x90>
 80117d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d05b      	beq.n	8011890 <__multiply+0x148>
 80117d8:	6106      	str	r6, [r0, #16]
 80117da:	b005      	add	sp, #20
 80117dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117e0:	f843 2b04 	str.w	r2, [r3], #4
 80117e4:	e7d8      	b.n	8011798 <__multiply+0x50>
 80117e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80117ea:	f1ba 0f00 	cmp.w	sl, #0
 80117ee:	d024      	beq.n	801183a <__multiply+0xf2>
 80117f0:	f104 0e14 	add.w	lr, r4, #20
 80117f4:	46a9      	mov	r9, r5
 80117f6:	f04f 0c00 	mov.w	ip, #0
 80117fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80117fe:	f8d9 3000 	ldr.w	r3, [r9]
 8011802:	fa1f fb87 	uxth.w	fp, r7
 8011806:	b29b      	uxth	r3, r3
 8011808:	fb0a 330b 	mla	r3, sl, fp, r3
 801180c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011810:	f8d9 7000 	ldr.w	r7, [r9]
 8011814:	4463      	add	r3, ip
 8011816:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801181a:	fb0a c70b 	mla	r7, sl, fp, ip
 801181e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011822:	b29b      	uxth	r3, r3
 8011824:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011828:	4572      	cmp	r2, lr
 801182a:	f849 3b04 	str.w	r3, [r9], #4
 801182e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011832:	d8e2      	bhi.n	80117fa <__multiply+0xb2>
 8011834:	9b01      	ldr	r3, [sp, #4]
 8011836:	f845 c003 	str.w	ip, [r5, r3]
 801183a:	9b03      	ldr	r3, [sp, #12]
 801183c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011840:	3104      	adds	r1, #4
 8011842:	f1b9 0f00 	cmp.w	r9, #0
 8011846:	d021      	beq.n	801188c <__multiply+0x144>
 8011848:	682b      	ldr	r3, [r5, #0]
 801184a:	f104 0c14 	add.w	ip, r4, #20
 801184e:	46ae      	mov	lr, r5
 8011850:	f04f 0a00 	mov.w	sl, #0
 8011854:	f8bc b000 	ldrh.w	fp, [ip]
 8011858:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801185c:	fb09 770b 	mla	r7, r9, fp, r7
 8011860:	4457      	add	r7, sl
 8011862:	b29b      	uxth	r3, r3
 8011864:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011868:	f84e 3b04 	str.w	r3, [lr], #4
 801186c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011870:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011874:	f8be 3000 	ldrh.w	r3, [lr]
 8011878:	fb09 330a 	mla	r3, r9, sl, r3
 801187c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011880:	4562      	cmp	r2, ip
 8011882:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011886:	d8e5      	bhi.n	8011854 <__multiply+0x10c>
 8011888:	9f01      	ldr	r7, [sp, #4]
 801188a:	51eb      	str	r3, [r5, r7]
 801188c:	3504      	adds	r5, #4
 801188e:	e799      	b.n	80117c4 <__multiply+0x7c>
 8011890:	3e01      	subs	r6, #1
 8011892:	e79b      	b.n	80117cc <__multiply+0x84>
 8011894:	080133e3 	.word	0x080133e3
 8011898:	08013454 	.word	0x08013454

0801189c <__pow5mult>:
 801189c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118a0:	4615      	mov	r5, r2
 80118a2:	f012 0203 	ands.w	r2, r2, #3
 80118a6:	4607      	mov	r7, r0
 80118a8:	460e      	mov	r6, r1
 80118aa:	d007      	beq.n	80118bc <__pow5mult+0x20>
 80118ac:	4c25      	ldr	r4, [pc, #148]	@ (8011944 <__pow5mult+0xa8>)
 80118ae:	3a01      	subs	r2, #1
 80118b0:	2300      	movs	r3, #0
 80118b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118b6:	f7ff fe55 	bl	8011564 <__multadd>
 80118ba:	4606      	mov	r6, r0
 80118bc:	10ad      	asrs	r5, r5, #2
 80118be:	d03d      	beq.n	801193c <__pow5mult+0xa0>
 80118c0:	69fc      	ldr	r4, [r7, #28]
 80118c2:	b97c      	cbnz	r4, 80118e4 <__pow5mult+0x48>
 80118c4:	2010      	movs	r0, #16
 80118c6:	f7fc fda5 	bl	800e414 <malloc>
 80118ca:	4602      	mov	r2, r0
 80118cc:	61f8      	str	r0, [r7, #28]
 80118ce:	b928      	cbnz	r0, 80118dc <__pow5mult+0x40>
 80118d0:	4b1d      	ldr	r3, [pc, #116]	@ (8011948 <__pow5mult+0xac>)
 80118d2:	481e      	ldr	r0, [pc, #120]	@ (801194c <__pow5mult+0xb0>)
 80118d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80118d8:	f001 f8c6 	bl	8012a68 <__assert_func>
 80118dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118e0:	6004      	str	r4, [r0, #0]
 80118e2:	60c4      	str	r4, [r0, #12]
 80118e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80118e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80118ec:	b94c      	cbnz	r4, 8011902 <__pow5mult+0x66>
 80118ee:	f240 2171 	movw	r1, #625	@ 0x271
 80118f2:	4638      	mov	r0, r7
 80118f4:	f7ff ff12 	bl	801171c <__i2b>
 80118f8:	2300      	movs	r3, #0
 80118fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80118fe:	4604      	mov	r4, r0
 8011900:	6003      	str	r3, [r0, #0]
 8011902:	f04f 0900 	mov.w	r9, #0
 8011906:	07eb      	lsls	r3, r5, #31
 8011908:	d50a      	bpl.n	8011920 <__pow5mult+0x84>
 801190a:	4631      	mov	r1, r6
 801190c:	4622      	mov	r2, r4
 801190e:	4638      	mov	r0, r7
 8011910:	f7ff ff1a 	bl	8011748 <__multiply>
 8011914:	4631      	mov	r1, r6
 8011916:	4680      	mov	r8, r0
 8011918:	4638      	mov	r0, r7
 801191a:	f7ff fe01 	bl	8011520 <_Bfree>
 801191e:	4646      	mov	r6, r8
 8011920:	106d      	asrs	r5, r5, #1
 8011922:	d00b      	beq.n	801193c <__pow5mult+0xa0>
 8011924:	6820      	ldr	r0, [r4, #0]
 8011926:	b938      	cbnz	r0, 8011938 <__pow5mult+0x9c>
 8011928:	4622      	mov	r2, r4
 801192a:	4621      	mov	r1, r4
 801192c:	4638      	mov	r0, r7
 801192e:	f7ff ff0b 	bl	8011748 <__multiply>
 8011932:	6020      	str	r0, [r4, #0]
 8011934:	f8c0 9000 	str.w	r9, [r0]
 8011938:	4604      	mov	r4, r0
 801193a:	e7e4      	b.n	8011906 <__pow5mult+0x6a>
 801193c:	4630      	mov	r0, r6
 801193e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011942:	bf00      	nop
 8011944:	080134b0 	.word	0x080134b0
 8011948:	08013374 	.word	0x08013374
 801194c:	08013454 	.word	0x08013454

08011950 <__lshift>:
 8011950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011954:	460c      	mov	r4, r1
 8011956:	6849      	ldr	r1, [r1, #4]
 8011958:	6923      	ldr	r3, [r4, #16]
 801195a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801195e:	68a3      	ldr	r3, [r4, #8]
 8011960:	4607      	mov	r7, r0
 8011962:	4691      	mov	r9, r2
 8011964:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011968:	f108 0601 	add.w	r6, r8, #1
 801196c:	42b3      	cmp	r3, r6
 801196e:	db0b      	blt.n	8011988 <__lshift+0x38>
 8011970:	4638      	mov	r0, r7
 8011972:	f7ff fd95 	bl	80114a0 <_Balloc>
 8011976:	4605      	mov	r5, r0
 8011978:	b948      	cbnz	r0, 801198e <__lshift+0x3e>
 801197a:	4602      	mov	r2, r0
 801197c:	4b28      	ldr	r3, [pc, #160]	@ (8011a20 <__lshift+0xd0>)
 801197e:	4829      	ldr	r0, [pc, #164]	@ (8011a24 <__lshift+0xd4>)
 8011980:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011984:	f001 f870 	bl	8012a68 <__assert_func>
 8011988:	3101      	adds	r1, #1
 801198a:	005b      	lsls	r3, r3, #1
 801198c:	e7ee      	b.n	801196c <__lshift+0x1c>
 801198e:	2300      	movs	r3, #0
 8011990:	f100 0114 	add.w	r1, r0, #20
 8011994:	f100 0210 	add.w	r2, r0, #16
 8011998:	4618      	mov	r0, r3
 801199a:	4553      	cmp	r3, sl
 801199c:	db33      	blt.n	8011a06 <__lshift+0xb6>
 801199e:	6920      	ldr	r0, [r4, #16]
 80119a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119a4:	f104 0314 	add.w	r3, r4, #20
 80119a8:	f019 091f 	ands.w	r9, r9, #31
 80119ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80119b4:	d02b      	beq.n	8011a0e <__lshift+0xbe>
 80119b6:	f1c9 0e20 	rsb	lr, r9, #32
 80119ba:	468a      	mov	sl, r1
 80119bc:	2200      	movs	r2, #0
 80119be:	6818      	ldr	r0, [r3, #0]
 80119c0:	fa00 f009 	lsl.w	r0, r0, r9
 80119c4:	4310      	orrs	r0, r2
 80119c6:	f84a 0b04 	str.w	r0, [sl], #4
 80119ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80119ce:	459c      	cmp	ip, r3
 80119d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80119d4:	d8f3      	bhi.n	80119be <__lshift+0x6e>
 80119d6:	ebac 0304 	sub.w	r3, ip, r4
 80119da:	3b15      	subs	r3, #21
 80119dc:	f023 0303 	bic.w	r3, r3, #3
 80119e0:	3304      	adds	r3, #4
 80119e2:	f104 0015 	add.w	r0, r4, #21
 80119e6:	4584      	cmp	ip, r0
 80119e8:	bf38      	it	cc
 80119ea:	2304      	movcc	r3, #4
 80119ec:	50ca      	str	r2, [r1, r3]
 80119ee:	b10a      	cbz	r2, 80119f4 <__lshift+0xa4>
 80119f0:	f108 0602 	add.w	r6, r8, #2
 80119f4:	3e01      	subs	r6, #1
 80119f6:	4638      	mov	r0, r7
 80119f8:	612e      	str	r6, [r5, #16]
 80119fa:	4621      	mov	r1, r4
 80119fc:	f7ff fd90 	bl	8011520 <_Bfree>
 8011a00:	4628      	mov	r0, r5
 8011a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a06:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a0a:	3301      	adds	r3, #1
 8011a0c:	e7c5      	b.n	801199a <__lshift+0x4a>
 8011a0e:	3904      	subs	r1, #4
 8011a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a14:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a18:	459c      	cmp	ip, r3
 8011a1a:	d8f9      	bhi.n	8011a10 <__lshift+0xc0>
 8011a1c:	e7ea      	b.n	80119f4 <__lshift+0xa4>
 8011a1e:	bf00      	nop
 8011a20:	080133e3 	.word	0x080133e3
 8011a24:	08013454 	.word	0x08013454

08011a28 <__mcmp>:
 8011a28:	690a      	ldr	r2, [r1, #16]
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	6900      	ldr	r0, [r0, #16]
 8011a2e:	1a80      	subs	r0, r0, r2
 8011a30:	b530      	push	{r4, r5, lr}
 8011a32:	d10e      	bne.n	8011a52 <__mcmp+0x2a>
 8011a34:	3314      	adds	r3, #20
 8011a36:	3114      	adds	r1, #20
 8011a38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011a3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011a40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011a44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011a48:	4295      	cmp	r5, r2
 8011a4a:	d003      	beq.n	8011a54 <__mcmp+0x2c>
 8011a4c:	d205      	bcs.n	8011a5a <__mcmp+0x32>
 8011a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a52:	bd30      	pop	{r4, r5, pc}
 8011a54:	42a3      	cmp	r3, r4
 8011a56:	d3f3      	bcc.n	8011a40 <__mcmp+0x18>
 8011a58:	e7fb      	b.n	8011a52 <__mcmp+0x2a>
 8011a5a:	2001      	movs	r0, #1
 8011a5c:	e7f9      	b.n	8011a52 <__mcmp+0x2a>
	...

08011a60 <__mdiff>:
 8011a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a64:	4689      	mov	r9, r1
 8011a66:	4606      	mov	r6, r0
 8011a68:	4611      	mov	r1, r2
 8011a6a:	4648      	mov	r0, r9
 8011a6c:	4614      	mov	r4, r2
 8011a6e:	f7ff ffdb 	bl	8011a28 <__mcmp>
 8011a72:	1e05      	subs	r5, r0, #0
 8011a74:	d112      	bne.n	8011a9c <__mdiff+0x3c>
 8011a76:	4629      	mov	r1, r5
 8011a78:	4630      	mov	r0, r6
 8011a7a:	f7ff fd11 	bl	80114a0 <_Balloc>
 8011a7e:	4602      	mov	r2, r0
 8011a80:	b928      	cbnz	r0, 8011a8e <__mdiff+0x2e>
 8011a82:	4b3f      	ldr	r3, [pc, #252]	@ (8011b80 <__mdiff+0x120>)
 8011a84:	f240 2137 	movw	r1, #567	@ 0x237
 8011a88:	483e      	ldr	r0, [pc, #248]	@ (8011b84 <__mdiff+0x124>)
 8011a8a:	f000 ffed 	bl	8012a68 <__assert_func>
 8011a8e:	2301      	movs	r3, #1
 8011a90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a94:	4610      	mov	r0, r2
 8011a96:	b003      	add	sp, #12
 8011a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a9c:	bfbc      	itt	lt
 8011a9e:	464b      	movlt	r3, r9
 8011aa0:	46a1      	movlt	r9, r4
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011aa8:	bfba      	itte	lt
 8011aaa:	461c      	movlt	r4, r3
 8011aac:	2501      	movlt	r5, #1
 8011aae:	2500      	movge	r5, #0
 8011ab0:	f7ff fcf6 	bl	80114a0 <_Balloc>
 8011ab4:	4602      	mov	r2, r0
 8011ab6:	b918      	cbnz	r0, 8011ac0 <__mdiff+0x60>
 8011ab8:	4b31      	ldr	r3, [pc, #196]	@ (8011b80 <__mdiff+0x120>)
 8011aba:	f240 2145 	movw	r1, #581	@ 0x245
 8011abe:	e7e3      	b.n	8011a88 <__mdiff+0x28>
 8011ac0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011ac4:	6926      	ldr	r6, [r4, #16]
 8011ac6:	60c5      	str	r5, [r0, #12]
 8011ac8:	f109 0310 	add.w	r3, r9, #16
 8011acc:	f109 0514 	add.w	r5, r9, #20
 8011ad0:	f104 0e14 	add.w	lr, r4, #20
 8011ad4:	f100 0b14 	add.w	fp, r0, #20
 8011ad8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011adc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011ae0:	9301      	str	r3, [sp, #4]
 8011ae2:	46d9      	mov	r9, fp
 8011ae4:	f04f 0c00 	mov.w	ip, #0
 8011ae8:	9b01      	ldr	r3, [sp, #4]
 8011aea:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011aee:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011af2:	9301      	str	r3, [sp, #4]
 8011af4:	fa1f f38a 	uxth.w	r3, sl
 8011af8:	4619      	mov	r1, r3
 8011afa:	b283      	uxth	r3, r0
 8011afc:	1acb      	subs	r3, r1, r3
 8011afe:	0c00      	lsrs	r0, r0, #16
 8011b00:	4463      	add	r3, ip
 8011b02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011b06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011b10:	4576      	cmp	r6, lr
 8011b12:	f849 3b04 	str.w	r3, [r9], #4
 8011b16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b1a:	d8e5      	bhi.n	8011ae8 <__mdiff+0x88>
 8011b1c:	1b33      	subs	r3, r6, r4
 8011b1e:	3b15      	subs	r3, #21
 8011b20:	f023 0303 	bic.w	r3, r3, #3
 8011b24:	3415      	adds	r4, #21
 8011b26:	3304      	adds	r3, #4
 8011b28:	42a6      	cmp	r6, r4
 8011b2a:	bf38      	it	cc
 8011b2c:	2304      	movcc	r3, #4
 8011b2e:	441d      	add	r5, r3
 8011b30:	445b      	add	r3, fp
 8011b32:	461e      	mov	r6, r3
 8011b34:	462c      	mov	r4, r5
 8011b36:	4544      	cmp	r4, r8
 8011b38:	d30e      	bcc.n	8011b58 <__mdiff+0xf8>
 8011b3a:	f108 0103 	add.w	r1, r8, #3
 8011b3e:	1b49      	subs	r1, r1, r5
 8011b40:	f021 0103 	bic.w	r1, r1, #3
 8011b44:	3d03      	subs	r5, #3
 8011b46:	45a8      	cmp	r8, r5
 8011b48:	bf38      	it	cc
 8011b4a:	2100      	movcc	r1, #0
 8011b4c:	440b      	add	r3, r1
 8011b4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b52:	b191      	cbz	r1, 8011b7a <__mdiff+0x11a>
 8011b54:	6117      	str	r7, [r2, #16]
 8011b56:	e79d      	b.n	8011a94 <__mdiff+0x34>
 8011b58:	f854 1b04 	ldr.w	r1, [r4], #4
 8011b5c:	46e6      	mov	lr, ip
 8011b5e:	0c08      	lsrs	r0, r1, #16
 8011b60:	fa1c fc81 	uxtah	ip, ip, r1
 8011b64:	4471      	add	r1, lr
 8011b66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011b6a:	b289      	uxth	r1, r1
 8011b6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011b70:	f846 1b04 	str.w	r1, [r6], #4
 8011b74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b78:	e7dd      	b.n	8011b36 <__mdiff+0xd6>
 8011b7a:	3f01      	subs	r7, #1
 8011b7c:	e7e7      	b.n	8011b4e <__mdiff+0xee>
 8011b7e:	bf00      	nop
 8011b80:	080133e3 	.word	0x080133e3
 8011b84:	08013454 	.word	0x08013454

08011b88 <__ulp>:
 8011b88:	b082      	sub	sp, #8
 8011b8a:	ed8d 0b00 	vstr	d0, [sp]
 8011b8e:	9a01      	ldr	r2, [sp, #4]
 8011b90:	4b0f      	ldr	r3, [pc, #60]	@ (8011bd0 <__ulp+0x48>)
 8011b92:	4013      	ands	r3, r2
 8011b94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	dc08      	bgt.n	8011bae <__ulp+0x26>
 8011b9c:	425b      	negs	r3, r3
 8011b9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011ba2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011ba6:	da04      	bge.n	8011bb2 <__ulp+0x2a>
 8011ba8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011bac:	4113      	asrs	r3, r2
 8011bae:	2200      	movs	r2, #0
 8011bb0:	e008      	b.n	8011bc4 <__ulp+0x3c>
 8011bb2:	f1a2 0314 	sub.w	r3, r2, #20
 8011bb6:	2b1e      	cmp	r3, #30
 8011bb8:	bfda      	itte	le
 8011bba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011bbe:	40da      	lsrle	r2, r3
 8011bc0:	2201      	movgt	r2, #1
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	4610      	mov	r0, r2
 8011bc8:	ec41 0b10 	vmov	d0, r0, r1
 8011bcc:	b002      	add	sp, #8
 8011bce:	4770      	bx	lr
 8011bd0:	7ff00000 	.word	0x7ff00000

08011bd4 <__b2d>:
 8011bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd8:	6906      	ldr	r6, [r0, #16]
 8011bda:	f100 0814 	add.w	r8, r0, #20
 8011bde:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011be2:	1f37      	subs	r7, r6, #4
 8011be4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011be8:	4610      	mov	r0, r2
 8011bea:	f7ff fd4b 	bl	8011684 <__hi0bits>
 8011bee:	f1c0 0320 	rsb	r3, r0, #32
 8011bf2:	280a      	cmp	r0, #10
 8011bf4:	600b      	str	r3, [r1, #0]
 8011bf6:	491b      	ldr	r1, [pc, #108]	@ (8011c64 <__b2d+0x90>)
 8011bf8:	dc15      	bgt.n	8011c26 <__b2d+0x52>
 8011bfa:	f1c0 0c0b 	rsb	ip, r0, #11
 8011bfe:	fa22 f30c 	lsr.w	r3, r2, ip
 8011c02:	45b8      	cmp	r8, r7
 8011c04:	ea43 0501 	orr.w	r5, r3, r1
 8011c08:	bf34      	ite	cc
 8011c0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c0e:	2300      	movcs	r3, #0
 8011c10:	3015      	adds	r0, #21
 8011c12:	fa02 f000 	lsl.w	r0, r2, r0
 8011c16:	fa23 f30c 	lsr.w	r3, r3, ip
 8011c1a:	4303      	orrs	r3, r0
 8011c1c:	461c      	mov	r4, r3
 8011c1e:	ec45 4b10 	vmov	d0, r4, r5
 8011c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c26:	45b8      	cmp	r8, r7
 8011c28:	bf3a      	itte	cc
 8011c2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c2e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011c32:	2300      	movcs	r3, #0
 8011c34:	380b      	subs	r0, #11
 8011c36:	d012      	beq.n	8011c5e <__b2d+0x8a>
 8011c38:	f1c0 0120 	rsb	r1, r0, #32
 8011c3c:	fa23 f401 	lsr.w	r4, r3, r1
 8011c40:	4082      	lsls	r2, r0
 8011c42:	4322      	orrs	r2, r4
 8011c44:	4547      	cmp	r7, r8
 8011c46:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011c4a:	bf8c      	ite	hi
 8011c4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011c50:	2200      	movls	r2, #0
 8011c52:	4083      	lsls	r3, r0
 8011c54:	40ca      	lsrs	r2, r1
 8011c56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011c5a:	4313      	orrs	r3, r2
 8011c5c:	e7de      	b.n	8011c1c <__b2d+0x48>
 8011c5e:	ea42 0501 	orr.w	r5, r2, r1
 8011c62:	e7db      	b.n	8011c1c <__b2d+0x48>
 8011c64:	3ff00000 	.word	0x3ff00000

08011c68 <__d2b>:
 8011c68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c6c:	460f      	mov	r7, r1
 8011c6e:	2101      	movs	r1, #1
 8011c70:	ec59 8b10 	vmov	r8, r9, d0
 8011c74:	4616      	mov	r6, r2
 8011c76:	f7ff fc13 	bl	80114a0 <_Balloc>
 8011c7a:	4604      	mov	r4, r0
 8011c7c:	b930      	cbnz	r0, 8011c8c <__d2b+0x24>
 8011c7e:	4602      	mov	r2, r0
 8011c80:	4b23      	ldr	r3, [pc, #140]	@ (8011d10 <__d2b+0xa8>)
 8011c82:	4824      	ldr	r0, [pc, #144]	@ (8011d14 <__d2b+0xac>)
 8011c84:	f240 310f 	movw	r1, #783	@ 0x30f
 8011c88:	f000 feee 	bl	8012a68 <__assert_func>
 8011c8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011c90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c94:	b10d      	cbz	r5, 8011c9a <__d2b+0x32>
 8011c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c9a:	9301      	str	r3, [sp, #4]
 8011c9c:	f1b8 0300 	subs.w	r3, r8, #0
 8011ca0:	d023      	beq.n	8011cea <__d2b+0x82>
 8011ca2:	4668      	mov	r0, sp
 8011ca4:	9300      	str	r3, [sp, #0]
 8011ca6:	f7ff fd0c 	bl	80116c2 <__lo0bits>
 8011caa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011cae:	b1d0      	cbz	r0, 8011ce6 <__d2b+0x7e>
 8011cb0:	f1c0 0320 	rsb	r3, r0, #32
 8011cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8011cb8:	430b      	orrs	r3, r1
 8011cba:	40c2      	lsrs	r2, r0
 8011cbc:	6163      	str	r3, [r4, #20]
 8011cbe:	9201      	str	r2, [sp, #4]
 8011cc0:	9b01      	ldr	r3, [sp, #4]
 8011cc2:	61a3      	str	r3, [r4, #24]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	bf0c      	ite	eq
 8011cc8:	2201      	moveq	r2, #1
 8011cca:	2202      	movne	r2, #2
 8011ccc:	6122      	str	r2, [r4, #16]
 8011cce:	b1a5      	cbz	r5, 8011cfa <__d2b+0x92>
 8011cd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011cd4:	4405      	add	r5, r0
 8011cd6:	603d      	str	r5, [r7, #0]
 8011cd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011cdc:	6030      	str	r0, [r6, #0]
 8011cde:	4620      	mov	r0, r4
 8011ce0:	b003      	add	sp, #12
 8011ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ce6:	6161      	str	r1, [r4, #20]
 8011ce8:	e7ea      	b.n	8011cc0 <__d2b+0x58>
 8011cea:	a801      	add	r0, sp, #4
 8011cec:	f7ff fce9 	bl	80116c2 <__lo0bits>
 8011cf0:	9b01      	ldr	r3, [sp, #4]
 8011cf2:	6163      	str	r3, [r4, #20]
 8011cf4:	3020      	adds	r0, #32
 8011cf6:	2201      	movs	r2, #1
 8011cf8:	e7e8      	b.n	8011ccc <__d2b+0x64>
 8011cfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011cfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011d02:	6038      	str	r0, [r7, #0]
 8011d04:	6918      	ldr	r0, [r3, #16]
 8011d06:	f7ff fcbd 	bl	8011684 <__hi0bits>
 8011d0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d0e:	e7e5      	b.n	8011cdc <__d2b+0x74>
 8011d10:	080133e3 	.word	0x080133e3
 8011d14:	08013454 	.word	0x08013454

08011d18 <__ratio>:
 8011d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d1c:	4688      	mov	r8, r1
 8011d1e:	4669      	mov	r1, sp
 8011d20:	4681      	mov	r9, r0
 8011d22:	f7ff ff57 	bl	8011bd4 <__b2d>
 8011d26:	a901      	add	r1, sp, #4
 8011d28:	4640      	mov	r0, r8
 8011d2a:	ec55 4b10 	vmov	r4, r5, d0
 8011d2e:	f7ff ff51 	bl	8011bd4 <__b2d>
 8011d32:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011d36:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011d3a:	1ad2      	subs	r2, r2, r3
 8011d3c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011d40:	1a5b      	subs	r3, r3, r1
 8011d42:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8011d46:	ec57 6b10 	vmov	r6, r7, d0
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	bfd6      	itet	le
 8011d4e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d52:	462a      	movgt	r2, r5
 8011d54:	463a      	movle	r2, r7
 8011d56:	46ab      	mov	fp, r5
 8011d58:	46a2      	mov	sl, r4
 8011d5a:	bfce      	itee	gt
 8011d5c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8011d60:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8011d64:	ee00 3a90 	vmovle	s1, r3
 8011d68:	ec4b ab17 	vmov	d7, sl, fp
 8011d6c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8011d70:	b003      	add	sp, #12
 8011d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d76 <__copybits>:
 8011d76:	3901      	subs	r1, #1
 8011d78:	b570      	push	{r4, r5, r6, lr}
 8011d7a:	1149      	asrs	r1, r1, #5
 8011d7c:	6914      	ldr	r4, [r2, #16]
 8011d7e:	3101      	adds	r1, #1
 8011d80:	f102 0314 	add.w	r3, r2, #20
 8011d84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011d88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011d8c:	1f05      	subs	r5, r0, #4
 8011d8e:	42a3      	cmp	r3, r4
 8011d90:	d30c      	bcc.n	8011dac <__copybits+0x36>
 8011d92:	1aa3      	subs	r3, r4, r2
 8011d94:	3b11      	subs	r3, #17
 8011d96:	f023 0303 	bic.w	r3, r3, #3
 8011d9a:	3211      	adds	r2, #17
 8011d9c:	42a2      	cmp	r2, r4
 8011d9e:	bf88      	it	hi
 8011da0:	2300      	movhi	r3, #0
 8011da2:	4418      	add	r0, r3
 8011da4:	2300      	movs	r3, #0
 8011da6:	4288      	cmp	r0, r1
 8011da8:	d305      	bcc.n	8011db6 <__copybits+0x40>
 8011daa:	bd70      	pop	{r4, r5, r6, pc}
 8011dac:	f853 6b04 	ldr.w	r6, [r3], #4
 8011db0:	f845 6f04 	str.w	r6, [r5, #4]!
 8011db4:	e7eb      	b.n	8011d8e <__copybits+0x18>
 8011db6:	f840 3b04 	str.w	r3, [r0], #4
 8011dba:	e7f4      	b.n	8011da6 <__copybits+0x30>

08011dbc <__any_on>:
 8011dbc:	f100 0214 	add.w	r2, r0, #20
 8011dc0:	6900      	ldr	r0, [r0, #16]
 8011dc2:	114b      	asrs	r3, r1, #5
 8011dc4:	4298      	cmp	r0, r3
 8011dc6:	b510      	push	{r4, lr}
 8011dc8:	db11      	blt.n	8011dee <__any_on+0x32>
 8011dca:	dd0a      	ble.n	8011de2 <__any_on+0x26>
 8011dcc:	f011 011f 	ands.w	r1, r1, #31
 8011dd0:	d007      	beq.n	8011de2 <__any_on+0x26>
 8011dd2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011dd6:	fa24 f001 	lsr.w	r0, r4, r1
 8011dda:	fa00 f101 	lsl.w	r1, r0, r1
 8011dde:	428c      	cmp	r4, r1
 8011de0:	d10b      	bne.n	8011dfa <__any_on+0x3e>
 8011de2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011de6:	4293      	cmp	r3, r2
 8011de8:	d803      	bhi.n	8011df2 <__any_on+0x36>
 8011dea:	2000      	movs	r0, #0
 8011dec:	bd10      	pop	{r4, pc}
 8011dee:	4603      	mov	r3, r0
 8011df0:	e7f7      	b.n	8011de2 <__any_on+0x26>
 8011df2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011df6:	2900      	cmp	r1, #0
 8011df8:	d0f5      	beq.n	8011de6 <__any_on+0x2a>
 8011dfa:	2001      	movs	r0, #1
 8011dfc:	e7f6      	b.n	8011dec <__any_on+0x30>
	...

08011e00 <_strtol_l.constprop.0>:
 8011e00:	2b24      	cmp	r3, #36	@ 0x24
 8011e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e06:	4686      	mov	lr, r0
 8011e08:	4690      	mov	r8, r2
 8011e0a:	d801      	bhi.n	8011e10 <_strtol_l.constprop.0+0x10>
 8011e0c:	2b01      	cmp	r3, #1
 8011e0e:	d106      	bne.n	8011e1e <_strtol_l.constprop.0+0x1e>
 8011e10:	f7fe f984 	bl	801011c <__errno>
 8011e14:	2316      	movs	r3, #22
 8011e16:	6003      	str	r3, [r0, #0]
 8011e18:	2000      	movs	r0, #0
 8011e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e1e:	4834      	ldr	r0, [pc, #208]	@ (8011ef0 <_strtol_l.constprop.0+0xf0>)
 8011e20:	460d      	mov	r5, r1
 8011e22:	462a      	mov	r2, r5
 8011e24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e28:	5d06      	ldrb	r6, [r0, r4]
 8011e2a:	f016 0608 	ands.w	r6, r6, #8
 8011e2e:	d1f8      	bne.n	8011e22 <_strtol_l.constprop.0+0x22>
 8011e30:	2c2d      	cmp	r4, #45	@ 0x2d
 8011e32:	d12d      	bne.n	8011e90 <_strtol_l.constprop.0+0x90>
 8011e34:	782c      	ldrb	r4, [r5, #0]
 8011e36:	2601      	movs	r6, #1
 8011e38:	1c95      	adds	r5, r2, #2
 8011e3a:	f033 0210 	bics.w	r2, r3, #16
 8011e3e:	d109      	bne.n	8011e54 <_strtol_l.constprop.0+0x54>
 8011e40:	2c30      	cmp	r4, #48	@ 0x30
 8011e42:	d12a      	bne.n	8011e9a <_strtol_l.constprop.0+0x9a>
 8011e44:	782a      	ldrb	r2, [r5, #0]
 8011e46:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011e4a:	2a58      	cmp	r2, #88	@ 0x58
 8011e4c:	d125      	bne.n	8011e9a <_strtol_l.constprop.0+0x9a>
 8011e4e:	786c      	ldrb	r4, [r5, #1]
 8011e50:	2310      	movs	r3, #16
 8011e52:	3502      	adds	r5, #2
 8011e54:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011e58:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	fbbc f9f3 	udiv	r9, ip, r3
 8011e62:	4610      	mov	r0, r2
 8011e64:	fb03 ca19 	mls	sl, r3, r9, ip
 8011e68:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011e6c:	2f09      	cmp	r7, #9
 8011e6e:	d81b      	bhi.n	8011ea8 <_strtol_l.constprop.0+0xa8>
 8011e70:	463c      	mov	r4, r7
 8011e72:	42a3      	cmp	r3, r4
 8011e74:	dd27      	ble.n	8011ec6 <_strtol_l.constprop.0+0xc6>
 8011e76:	1c57      	adds	r7, r2, #1
 8011e78:	d007      	beq.n	8011e8a <_strtol_l.constprop.0+0x8a>
 8011e7a:	4581      	cmp	r9, r0
 8011e7c:	d320      	bcc.n	8011ec0 <_strtol_l.constprop.0+0xc0>
 8011e7e:	d101      	bne.n	8011e84 <_strtol_l.constprop.0+0x84>
 8011e80:	45a2      	cmp	sl, r4
 8011e82:	db1d      	blt.n	8011ec0 <_strtol_l.constprop.0+0xc0>
 8011e84:	fb00 4003 	mla	r0, r0, r3, r4
 8011e88:	2201      	movs	r2, #1
 8011e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e8e:	e7eb      	b.n	8011e68 <_strtol_l.constprop.0+0x68>
 8011e90:	2c2b      	cmp	r4, #43	@ 0x2b
 8011e92:	bf04      	itt	eq
 8011e94:	782c      	ldrbeq	r4, [r5, #0]
 8011e96:	1c95      	addeq	r5, r2, #2
 8011e98:	e7cf      	b.n	8011e3a <_strtol_l.constprop.0+0x3a>
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d1da      	bne.n	8011e54 <_strtol_l.constprop.0+0x54>
 8011e9e:	2c30      	cmp	r4, #48	@ 0x30
 8011ea0:	bf0c      	ite	eq
 8011ea2:	2308      	moveq	r3, #8
 8011ea4:	230a      	movne	r3, #10
 8011ea6:	e7d5      	b.n	8011e54 <_strtol_l.constprop.0+0x54>
 8011ea8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011eac:	2f19      	cmp	r7, #25
 8011eae:	d801      	bhi.n	8011eb4 <_strtol_l.constprop.0+0xb4>
 8011eb0:	3c37      	subs	r4, #55	@ 0x37
 8011eb2:	e7de      	b.n	8011e72 <_strtol_l.constprop.0+0x72>
 8011eb4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011eb8:	2f19      	cmp	r7, #25
 8011eba:	d804      	bhi.n	8011ec6 <_strtol_l.constprop.0+0xc6>
 8011ebc:	3c57      	subs	r4, #87	@ 0x57
 8011ebe:	e7d8      	b.n	8011e72 <_strtol_l.constprop.0+0x72>
 8011ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ec4:	e7e1      	b.n	8011e8a <_strtol_l.constprop.0+0x8a>
 8011ec6:	1c53      	adds	r3, r2, #1
 8011ec8:	d108      	bne.n	8011edc <_strtol_l.constprop.0+0xdc>
 8011eca:	2322      	movs	r3, #34	@ 0x22
 8011ecc:	f8ce 3000 	str.w	r3, [lr]
 8011ed0:	4660      	mov	r0, ip
 8011ed2:	f1b8 0f00 	cmp.w	r8, #0
 8011ed6:	d0a0      	beq.n	8011e1a <_strtol_l.constprop.0+0x1a>
 8011ed8:	1e69      	subs	r1, r5, #1
 8011eda:	e006      	b.n	8011eea <_strtol_l.constprop.0+0xea>
 8011edc:	b106      	cbz	r6, 8011ee0 <_strtol_l.constprop.0+0xe0>
 8011ede:	4240      	negs	r0, r0
 8011ee0:	f1b8 0f00 	cmp.w	r8, #0
 8011ee4:	d099      	beq.n	8011e1a <_strtol_l.constprop.0+0x1a>
 8011ee6:	2a00      	cmp	r2, #0
 8011ee8:	d1f6      	bne.n	8011ed8 <_strtol_l.constprop.0+0xd8>
 8011eea:	f8c8 1000 	str.w	r1, [r8]
 8011eee:	e794      	b.n	8011e1a <_strtol_l.constprop.0+0x1a>
 8011ef0:	080135b1 	.word	0x080135b1

08011ef4 <_strtol_r>:
 8011ef4:	f7ff bf84 	b.w	8011e00 <_strtol_l.constprop.0>

08011ef8 <__ascii_wctomb>:
 8011ef8:	4603      	mov	r3, r0
 8011efa:	4608      	mov	r0, r1
 8011efc:	b141      	cbz	r1, 8011f10 <__ascii_wctomb+0x18>
 8011efe:	2aff      	cmp	r2, #255	@ 0xff
 8011f00:	d904      	bls.n	8011f0c <__ascii_wctomb+0x14>
 8011f02:	228a      	movs	r2, #138	@ 0x8a
 8011f04:	601a      	str	r2, [r3, #0]
 8011f06:	f04f 30ff 	mov.w	r0, #4294967295
 8011f0a:	4770      	bx	lr
 8011f0c:	700a      	strb	r2, [r1, #0]
 8011f0e:	2001      	movs	r0, #1
 8011f10:	4770      	bx	lr

08011f12 <__ssputs_r>:
 8011f12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f16:	688e      	ldr	r6, [r1, #8]
 8011f18:	461f      	mov	r7, r3
 8011f1a:	42be      	cmp	r6, r7
 8011f1c:	680b      	ldr	r3, [r1, #0]
 8011f1e:	4682      	mov	sl, r0
 8011f20:	460c      	mov	r4, r1
 8011f22:	4690      	mov	r8, r2
 8011f24:	d82d      	bhi.n	8011f82 <__ssputs_r+0x70>
 8011f26:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011f2a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011f2e:	d026      	beq.n	8011f7e <__ssputs_r+0x6c>
 8011f30:	6965      	ldr	r5, [r4, #20]
 8011f32:	6909      	ldr	r1, [r1, #16]
 8011f34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f38:	eba3 0901 	sub.w	r9, r3, r1
 8011f3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f40:	1c7b      	adds	r3, r7, #1
 8011f42:	444b      	add	r3, r9
 8011f44:	106d      	asrs	r5, r5, #1
 8011f46:	429d      	cmp	r5, r3
 8011f48:	bf38      	it	cc
 8011f4a:	461d      	movcc	r5, r3
 8011f4c:	0553      	lsls	r3, r2, #21
 8011f4e:	d527      	bpl.n	8011fa0 <__ssputs_r+0x8e>
 8011f50:	4629      	mov	r1, r5
 8011f52:	f7fc fa89 	bl	800e468 <_malloc_r>
 8011f56:	4606      	mov	r6, r0
 8011f58:	b360      	cbz	r0, 8011fb4 <__ssputs_r+0xa2>
 8011f5a:	6921      	ldr	r1, [r4, #16]
 8011f5c:	464a      	mov	r2, r9
 8011f5e:	f7fe f90a 	bl	8010176 <memcpy>
 8011f62:	89a3      	ldrh	r3, [r4, #12]
 8011f64:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f6c:	81a3      	strh	r3, [r4, #12]
 8011f6e:	6126      	str	r6, [r4, #16]
 8011f70:	6165      	str	r5, [r4, #20]
 8011f72:	444e      	add	r6, r9
 8011f74:	eba5 0509 	sub.w	r5, r5, r9
 8011f78:	6026      	str	r6, [r4, #0]
 8011f7a:	60a5      	str	r5, [r4, #8]
 8011f7c:	463e      	mov	r6, r7
 8011f7e:	42be      	cmp	r6, r7
 8011f80:	d900      	bls.n	8011f84 <__ssputs_r+0x72>
 8011f82:	463e      	mov	r6, r7
 8011f84:	6820      	ldr	r0, [r4, #0]
 8011f86:	4632      	mov	r2, r6
 8011f88:	4641      	mov	r1, r8
 8011f8a:	f000 fd52 	bl	8012a32 <memmove>
 8011f8e:	68a3      	ldr	r3, [r4, #8]
 8011f90:	1b9b      	subs	r3, r3, r6
 8011f92:	60a3      	str	r3, [r4, #8]
 8011f94:	6823      	ldr	r3, [r4, #0]
 8011f96:	4433      	add	r3, r6
 8011f98:	6023      	str	r3, [r4, #0]
 8011f9a:	2000      	movs	r0, #0
 8011f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fa0:	462a      	mov	r2, r5
 8011fa2:	f000 fd93 	bl	8012acc <_realloc_r>
 8011fa6:	4606      	mov	r6, r0
 8011fa8:	2800      	cmp	r0, #0
 8011faa:	d1e0      	bne.n	8011f6e <__ssputs_r+0x5c>
 8011fac:	6921      	ldr	r1, [r4, #16]
 8011fae:	4650      	mov	r0, sl
 8011fb0:	f7fe fee0 	bl	8010d74 <_free_r>
 8011fb4:	230c      	movs	r3, #12
 8011fb6:	f8ca 3000 	str.w	r3, [sl]
 8011fba:	89a3      	ldrh	r3, [r4, #12]
 8011fbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fc0:	81a3      	strh	r3, [r4, #12]
 8011fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc6:	e7e9      	b.n	8011f9c <__ssputs_r+0x8a>

08011fc8 <_svfiprintf_r>:
 8011fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fcc:	4698      	mov	r8, r3
 8011fce:	898b      	ldrh	r3, [r1, #12]
 8011fd0:	061b      	lsls	r3, r3, #24
 8011fd2:	b09d      	sub	sp, #116	@ 0x74
 8011fd4:	4607      	mov	r7, r0
 8011fd6:	460d      	mov	r5, r1
 8011fd8:	4614      	mov	r4, r2
 8011fda:	d510      	bpl.n	8011ffe <_svfiprintf_r+0x36>
 8011fdc:	690b      	ldr	r3, [r1, #16]
 8011fde:	b973      	cbnz	r3, 8011ffe <_svfiprintf_r+0x36>
 8011fe0:	2140      	movs	r1, #64	@ 0x40
 8011fe2:	f7fc fa41 	bl	800e468 <_malloc_r>
 8011fe6:	6028      	str	r0, [r5, #0]
 8011fe8:	6128      	str	r0, [r5, #16]
 8011fea:	b930      	cbnz	r0, 8011ffa <_svfiprintf_r+0x32>
 8011fec:	230c      	movs	r3, #12
 8011fee:	603b      	str	r3, [r7, #0]
 8011ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ff4:	b01d      	add	sp, #116	@ 0x74
 8011ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ffa:	2340      	movs	r3, #64	@ 0x40
 8011ffc:	616b      	str	r3, [r5, #20]
 8011ffe:	2300      	movs	r3, #0
 8012000:	9309      	str	r3, [sp, #36]	@ 0x24
 8012002:	2320      	movs	r3, #32
 8012004:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012008:	f8cd 800c 	str.w	r8, [sp, #12]
 801200c:	2330      	movs	r3, #48	@ 0x30
 801200e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80121ac <_svfiprintf_r+0x1e4>
 8012012:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012016:	f04f 0901 	mov.w	r9, #1
 801201a:	4623      	mov	r3, r4
 801201c:	469a      	mov	sl, r3
 801201e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012022:	b10a      	cbz	r2, 8012028 <_svfiprintf_r+0x60>
 8012024:	2a25      	cmp	r2, #37	@ 0x25
 8012026:	d1f9      	bne.n	801201c <_svfiprintf_r+0x54>
 8012028:	ebba 0b04 	subs.w	fp, sl, r4
 801202c:	d00b      	beq.n	8012046 <_svfiprintf_r+0x7e>
 801202e:	465b      	mov	r3, fp
 8012030:	4622      	mov	r2, r4
 8012032:	4629      	mov	r1, r5
 8012034:	4638      	mov	r0, r7
 8012036:	f7ff ff6c 	bl	8011f12 <__ssputs_r>
 801203a:	3001      	adds	r0, #1
 801203c:	f000 80a7 	beq.w	801218e <_svfiprintf_r+0x1c6>
 8012040:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012042:	445a      	add	r2, fp
 8012044:	9209      	str	r2, [sp, #36]	@ 0x24
 8012046:	f89a 3000 	ldrb.w	r3, [sl]
 801204a:	2b00      	cmp	r3, #0
 801204c:	f000 809f 	beq.w	801218e <_svfiprintf_r+0x1c6>
 8012050:	2300      	movs	r3, #0
 8012052:	f04f 32ff 	mov.w	r2, #4294967295
 8012056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801205a:	f10a 0a01 	add.w	sl, sl, #1
 801205e:	9304      	str	r3, [sp, #16]
 8012060:	9307      	str	r3, [sp, #28]
 8012062:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012066:	931a      	str	r3, [sp, #104]	@ 0x68
 8012068:	4654      	mov	r4, sl
 801206a:	2205      	movs	r2, #5
 801206c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012070:	484e      	ldr	r0, [pc, #312]	@ (80121ac <_svfiprintf_r+0x1e4>)
 8012072:	f7ee f94d 	bl	8000310 <memchr>
 8012076:	9a04      	ldr	r2, [sp, #16]
 8012078:	b9d8      	cbnz	r0, 80120b2 <_svfiprintf_r+0xea>
 801207a:	06d0      	lsls	r0, r2, #27
 801207c:	bf44      	itt	mi
 801207e:	2320      	movmi	r3, #32
 8012080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012084:	0711      	lsls	r1, r2, #28
 8012086:	bf44      	itt	mi
 8012088:	232b      	movmi	r3, #43	@ 0x2b
 801208a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801208e:	f89a 3000 	ldrb.w	r3, [sl]
 8012092:	2b2a      	cmp	r3, #42	@ 0x2a
 8012094:	d015      	beq.n	80120c2 <_svfiprintf_r+0xfa>
 8012096:	9a07      	ldr	r2, [sp, #28]
 8012098:	4654      	mov	r4, sl
 801209a:	2000      	movs	r0, #0
 801209c:	f04f 0c0a 	mov.w	ip, #10
 80120a0:	4621      	mov	r1, r4
 80120a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120a6:	3b30      	subs	r3, #48	@ 0x30
 80120a8:	2b09      	cmp	r3, #9
 80120aa:	d94b      	bls.n	8012144 <_svfiprintf_r+0x17c>
 80120ac:	b1b0      	cbz	r0, 80120dc <_svfiprintf_r+0x114>
 80120ae:	9207      	str	r2, [sp, #28]
 80120b0:	e014      	b.n	80120dc <_svfiprintf_r+0x114>
 80120b2:	eba0 0308 	sub.w	r3, r0, r8
 80120b6:	fa09 f303 	lsl.w	r3, r9, r3
 80120ba:	4313      	orrs	r3, r2
 80120bc:	9304      	str	r3, [sp, #16]
 80120be:	46a2      	mov	sl, r4
 80120c0:	e7d2      	b.n	8012068 <_svfiprintf_r+0xa0>
 80120c2:	9b03      	ldr	r3, [sp, #12]
 80120c4:	1d19      	adds	r1, r3, #4
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	9103      	str	r1, [sp, #12]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	bfbb      	ittet	lt
 80120ce:	425b      	neglt	r3, r3
 80120d0:	f042 0202 	orrlt.w	r2, r2, #2
 80120d4:	9307      	strge	r3, [sp, #28]
 80120d6:	9307      	strlt	r3, [sp, #28]
 80120d8:	bfb8      	it	lt
 80120da:	9204      	strlt	r2, [sp, #16]
 80120dc:	7823      	ldrb	r3, [r4, #0]
 80120de:	2b2e      	cmp	r3, #46	@ 0x2e
 80120e0:	d10a      	bne.n	80120f8 <_svfiprintf_r+0x130>
 80120e2:	7863      	ldrb	r3, [r4, #1]
 80120e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80120e6:	d132      	bne.n	801214e <_svfiprintf_r+0x186>
 80120e8:	9b03      	ldr	r3, [sp, #12]
 80120ea:	1d1a      	adds	r2, r3, #4
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	9203      	str	r2, [sp, #12]
 80120f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80120f4:	3402      	adds	r4, #2
 80120f6:	9305      	str	r3, [sp, #20]
 80120f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80121bc <_svfiprintf_r+0x1f4>
 80120fc:	7821      	ldrb	r1, [r4, #0]
 80120fe:	2203      	movs	r2, #3
 8012100:	4650      	mov	r0, sl
 8012102:	f7ee f905 	bl	8000310 <memchr>
 8012106:	b138      	cbz	r0, 8012118 <_svfiprintf_r+0x150>
 8012108:	9b04      	ldr	r3, [sp, #16]
 801210a:	eba0 000a 	sub.w	r0, r0, sl
 801210e:	2240      	movs	r2, #64	@ 0x40
 8012110:	4082      	lsls	r2, r0
 8012112:	4313      	orrs	r3, r2
 8012114:	3401      	adds	r4, #1
 8012116:	9304      	str	r3, [sp, #16]
 8012118:	f814 1b01 	ldrb.w	r1, [r4], #1
 801211c:	4824      	ldr	r0, [pc, #144]	@ (80121b0 <_svfiprintf_r+0x1e8>)
 801211e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012122:	2206      	movs	r2, #6
 8012124:	f7ee f8f4 	bl	8000310 <memchr>
 8012128:	2800      	cmp	r0, #0
 801212a:	d036      	beq.n	801219a <_svfiprintf_r+0x1d2>
 801212c:	4b21      	ldr	r3, [pc, #132]	@ (80121b4 <_svfiprintf_r+0x1ec>)
 801212e:	bb1b      	cbnz	r3, 8012178 <_svfiprintf_r+0x1b0>
 8012130:	9b03      	ldr	r3, [sp, #12]
 8012132:	3307      	adds	r3, #7
 8012134:	f023 0307 	bic.w	r3, r3, #7
 8012138:	3308      	adds	r3, #8
 801213a:	9303      	str	r3, [sp, #12]
 801213c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801213e:	4433      	add	r3, r6
 8012140:	9309      	str	r3, [sp, #36]	@ 0x24
 8012142:	e76a      	b.n	801201a <_svfiprintf_r+0x52>
 8012144:	fb0c 3202 	mla	r2, ip, r2, r3
 8012148:	460c      	mov	r4, r1
 801214a:	2001      	movs	r0, #1
 801214c:	e7a8      	b.n	80120a0 <_svfiprintf_r+0xd8>
 801214e:	2300      	movs	r3, #0
 8012150:	3401      	adds	r4, #1
 8012152:	9305      	str	r3, [sp, #20]
 8012154:	4619      	mov	r1, r3
 8012156:	f04f 0c0a 	mov.w	ip, #10
 801215a:	4620      	mov	r0, r4
 801215c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012160:	3a30      	subs	r2, #48	@ 0x30
 8012162:	2a09      	cmp	r2, #9
 8012164:	d903      	bls.n	801216e <_svfiprintf_r+0x1a6>
 8012166:	2b00      	cmp	r3, #0
 8012168:	d0c6      	beq.n	80120f8 <_svfiprintf_r+0x130>
 801216a:	9105      	str	r1, [sp, #20]
 801216c:	e7c4      	b.n	80120f8 <_svfiprintf_r+0x130>
 801216e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012172:	4604      	mov	r4, r0
 8012174:	2301      	movs	r3, #1
 8012176:	e7f0      	b.n	801215a <_svfiprintf_r+0x192>
 8012178:	ab03      	add	r3, sp, #12
 801217a:	9300      	str	r3, [sp, #0]
 801217c:	462a      	mov	r2, r5
 801217e:	4b0e      	ldr	r3, [pc, #56]	@ (80121b8 <_svfiprintf_r+0x1f0>)
 8012180:	a904      	add	r1, sp, #16
 8012182:	4638      	mov	r0, r7
 8012184:	f7fd f844 	bl	800f210 <_printf_float>
 8012188:	1c42      	adds	r2, r0, #1
 801218a:	4606      	mov	r6, r0
 801218c:	d1d6      	bne.n	801213c <_svfiprintf_r+0x174>
 801218e:	89ab      	ldrh	r3, [r5, #12]
 8012190:	065b      	lsls	r3, r3, #25
 8012192:	f53f af2d 	bmi.w	8011ff0 <_svfiprintf_r+0x28>
 8012196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012198:	e72c      	b.n	8011ff4 <_svfiprintf_r+0x2c>
 801219a:	ab03      	add	r3, sp, #12
 801219c:	9300      	str	r3, [sp, #0]
 801219e:	462a      	mov	r2, r5
 80121a0:	4b05      	ldr	r3, [pc, #20]	@ (80121b8 <_svfiprintf_r+0x1f0>)
 80121a2:	a904      	add	r1, sp, #16
 80121a4:	4638      	mov	r0, r7
 80121a6:	f7fd fabb 	bl	800f720 <_printf_i>
 80121aa:	e7ed      	b.n	8012188 <_svfiprintf_r+0x1c0>
 80121ac:	080136b1 	.word	0x080136b1
 80121b0:	080136bb 	.word	0x080136bb
 80121b4:	0800f211 	.word	0x0800f211
 80121b8:	08011f13 	.word	0x08011f13
 80121bc:	080136b7 	.word	0x080136b7

080121c0 <_sungetc_r>:
 80121c0:	b538      	push	{r3, r4, r5, lr}
 80121c2:	1c4b      	adds	r3, r1, #1
 80121c4:	4614      	mov	r4, r2
 80121c6:	d103      	bne.n	80121d0 <_sungetc_r+0x10>
 80121c8:	f04f 35ff 	mov.w	r5, #4294967295
 80121cc:	4628      	mov	r0, r5
 80121ce:	bd38      	pop	{r3, r4, r5, pc}
 80121d0:	8993      	ldrh	r3, [r2, #12]
 80121d2:	f023 0320 	bic.w	r3, r3, #32
 80121d6:	8193      	strh	r3, [r2, #12]
 80121d8:	6853      	ldr	r3, [r2, #4]
 80121da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80121dc:	b2cd      	uxtb	r5, r1
 80121de:	b18a      	cbz	r2, 8012204 <_sungetc_r+0x44>
 80121e0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80121e2:	429a      	cmp	r2, r3
 80121e4:	dd08      	ble.n	80121f8 <_sungetc_r+0x38>
 80121e6:	6823      	ldr	r3, [r4, #0]
 80121e8:	1e5a      	subs	r2, r3, #1
 80121ea:	6022      	str	r2, [r4, #0]
 80121ec:	f803 5c01 	strb.w	r5, [r3, #-1]
 80121f0:	6863      	ldr	r3, [r4, #4]
 80121f2:	3301      	adds	r3, #1
 80121f4:	6063      	str	r3, [r4, #4]
 80121f6:	e7e9      	b.n	80121cc <_sungetc_r+0xc>
 80121f8:	4621      	mov	r1, r4
 80121fa:	f000 fbe0 	bl	80129be <__submore>
 80121fe:	2800      	cmp	r0, #0
 8012200:	d0f1      	beq.n	80121e6 <_sungetc_r+0x26>
 8012202:	e7e1      	b.n	80121c8 <_sungetc_r+0x8>
 8012204:	6921      	ldr	r1, [r4, #16]
 8012206:	6822      	ldr	r2, [r4, #0]
 8012208:	b141      	cbz	r1, 801221c <_sungetc_r+0x5c>
 801220a:	4291      	cmp	r1, r2
 801220c:	d206      	bcs.n	801221c <_sungetc_r+0x5c>
 801220e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8012212:	42a9      	cmp	r1, r5
 8012214:	d102      	bne.n	801221c <_sungetc_r+0x5c>
 8012216:	3a01      	subs	r2, #1
 8012218:	6022      	str	r2, [r4, #0]
 801221a:	e7ea      	b.n	80121f2 <_sungetc_r+0x32>
 801221c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8012220:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012224:	6363      	str	r3, [r4, #52]	@ 0x34
 8012226:	2303      	movs	r3, #3
 8012228:	63a3      	str	r3, [r4, #56]	@ 0x38
 801222a:	4623      	mov	r3, r4
 801222c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012230:	6023      	str	r3, [r4, #0]
 8012232:	2301      	movs	r3, #1
 8012234:	e7de      	b.n	80121f4 <_sungetc_r+0x34>

08012236 <__ssrefill_r>:
 8012236:	b510      	push	{r4, lr}
 8012238:	460c      	mov	r4, r1
 801223a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801223c:	b169      	cbz	r1, 801225a <__ssrefill_r+0x24>
 801223e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012242:	4299      	cmp	r1, r3
 8012244:	d001      	beq.n	801224a <__ssrefill_r+0x14>
 8012246:	f7fe fd95 	bl	8010d74 <_free_r>
 801224a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801224c:	6063      	str	r3, [r4, #4]
 801224e:	2000      	movs	r0, #0
 8012250:	6360      	str	r0, [r4, #52]	@ 0x34
 8012252:	b113      	cbz	r3, 801225a <__ssrefill_r+0x24>
 8012254:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012256:	6023      	str	r3, [r4, #0]
 8012258:	bd10      	pop	{r4, pc}
 801225a:	6923      	ldr	r3, [r4, #16]
 801225c:	6023      	str	r3, [r4, #0]
 801225e:	2300      	movs	r3, #0
 8012260:	6063      	str	r3, [r4, #4]
 8012262:	89a3      	ldrh	r3, [r4, #12]
 8012264:	f043 0320 	orr.w	r3, r3, #32
 8012268:	81a3      	strh	r3, [r4, #12]
 801226a:	f04f 30ff 	mov.w	r0, #4294967295
 801226e:	e7f3      	b.n	8012258 <__ssrefill_r+0x22>

08012270 <__ssvfiscanf_r>:
 8012270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012274:	460c      	mov	r4, r1
 8012276:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801227a:	2100      	movs	r1, #0
 801227c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012280:	49a5      	ldr	r1, [pc, #660]	@ (8012518 <__ssvfiscanf_r+0x2a8>)
 8012282:	91a0      	str	r1, [sp, #640]	@ 0x280
 8012284:	f10d 0804 	add.w	r8, sp, #4
 8012288:	49a4      	ldr	r1, [pc, #656]	@ (801251c <__ssvfiscanf_r+0x2ac>)
 801228a:	4fa5      	ldr	r7, [pc, #660]	@ (8012520 <__ssvfiscanf_r+0x2b0>)
 801228c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8012290:	4606      	mov	r6, r0
 8012292:	91a1      	str	r1, [sp, #644]	@ 0x284
 8012294:	9300      	str	r3, [sp, #0]
 8012296:	7813      	ldrb	r3, [r2, #0]
 8012298:	2b00      	cmp	r3, #0
 801229a:	f000 8158 	beq.w	801254e <__ssvfiscanf_r+0x2de>
 801229e:	5cf9      	ldrb	r1, [r7, r3]
 80122a0:	f011 0108 	ands.w	r1, r1, #8
 80122a4:	f102 0501 	add.w	r5, r2, #1
 80122a8:	d019      	beq.n	80122de <__ssvfiscanf_r+0x6e>
 80122aa:	6863      	ldr	r3, [r4, #4]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	dd0f      	ble.n	80122d0 <__ssvfiscanf_r+0x60>
 80122b0:	6823      	ldr	r3, [r4, #0]
 80122b2:	781a      	ldrb	r2, [r3, #0]
 80122b4:	5cba      	ldrb	r2, [r7, r2]
 80122b6:	0712      	lsls	r2, r2, #28
 80122b8:	d401      	bmi.n	80122be <__ssvfiscanf_r+0x4e>
 80122ba:	462a      	mov	r2, r5
 80122bc:	e7eb      	b.n	8012296 <__ssvfiscanf_r+0x26>
 80122be:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80122c0:	3201      	adds	r2, #1
 80122c2:	9245      	str	r2, [sp, #276]	@ 0x114
 80122c4:	6862      	ldr	r2, [r4, #4]
 80122c6:	3301      	adds	r3, #1
 80122c8:	3a01      	subs	r2, #1
 80122ca:	6062      	str	r2, [r4, #4]
 80122cc:	6023      	str	r3, [r4, #0]
 80122ce:	e7ec      	b.n	80122aa <__ssvfiscanf_r+0x3a>
 80122d0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80122d2:	4621      	mov	r1, r4
 80122d4:	4630      	mov	r0, r6
 80122d6:	4798      	blx	r3
 80122d8:	2800      	cmp	r0, #0
 80122da:	d0e9      	beq.n	80122b0 <__ssvfiscanf_r+0x40>
 80122dc:	e7ed      	b.n	80122ba <__ssvfiscanf_r+0x4a>
 80122de:	2b25      	cmp	r3, #37	@ 0x25
 80122e0:	d012      	beq.n	8012308 <__ssvfiscanf_r+0x98>
 80122e2:	4699      	mov	r9, r3
 80122e4:	6863      	ldr	r3, [r4, #4]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	f340 8093 	ble.w	8012412 <__ssvfiscanf_r+0x1a2>
 80122ec:	6822      	ldr	r2, [r4, #0]
 80122ee:	7813      	ldrb	r3, [r2, #0]
 80122f0:	454b      	cmp	r3, r9
 80122f2:	f040 812c 	bne.w	801254e <__ssvfiscanf_r+0x2de>
 80122f6:	6863      	ldr	r3, [r4, #4]
 80122f8:	3b01      	subs	r3, #1
 80122fa:	6063      	str	r3, [r4, #4]
 80122fc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80122fe:	3201      	adds	r2, #1
 8012300:	3301      	adds	r3, #1
 8012302:	6022      	str	r2, [r4, #0]
 8012304:	9345      	str	r3, [sp, #276]	@ 0x114
 8012306:	e7d8      	b.n	80122ba <__ssvfiscanf_r+0x4a>
 8012308:	9141      	str	r1, [sp, #260]	@ 0x104
 801230a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801230c:	7853      	ldrb	r3, [r2, #1]
 801230e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012310:	bf02      	ittt	eq
 8012312:	2310      	moveq	r3, #16
 8012314:	1c95      	addeq	r5, r2, #2
 8012316:	9341      	streq	r3, [sp, #260]	@ 0x104
 8012318:	220a      	movs	r2, #10
 801231a:	46a9      	mov	r9, r5
 801231c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8012320:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8012324:	2b09      	cmp	r3, #9
 8012326:	d91e      	bls.n	8012366 <__ssvfiscanf_r+0xf6>
 8012328:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8012524 <__ssvfiscanf_r+0x2b4>
 801232c:	2203      	movs	r2, #3
 801232e:	4650      	mov	r0, sl
 8012330:	f7ed ffee 	bl	8000310 <memchr>
 8012334:	b138      	cbz	r0, 8012346 <__ssvfiscanf_r+0xd6>
 8012336:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012338:	eba0 000a 	sub.w	r0, r0, sl
 801233c:	2301      	movs	r3, #1
 801233e:	4083      	lsls	r3, r0
 8012340:	4313      	orrs	r3, r2
 8012342:	9341      	str	r3, [sp, #260]	@ 0x104
 8012344:	464d      	mov	r5, r9
 8012346:	f815 3b01 	ldrb.w	r3, [r5], #1
 801234a:	2b78      	cmp	r3, #120	@ 0x78
 801234c:	d806      	bhi.n	801235c <__ssvfiscanf_r+0xec>
 801234e:	2b57      	cmp	r3, #87	@ 0x57
 8012350:	d810      	bhi.n	8012374 <__ssvfiscanf_r+0x104>
 8012352:	2b25      	cmp	r3, #37	@ 0x25
 8012354:	d0c5      	beq.n	80122e2 <__ssvfiscanf_r+0x72>
 8012356:	d857      	bhi.n	8012408 <__ssvfiscanf_r+0x198>
 8012358:	2b00      	cmp	r3, #0
 801235a:	d065      	beq.n	8012428 <__ssvfiscanf_r+0x1b8>
 801235c:	2303      	movs	r3, #3
 801235e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012360:	230a      	movs	r3, #10
 8012362:	9342      	str	r3, [sp, #264]	@ 0x108
 8012364:	e078      	b.n	8012458 <__ssvfiscanf_r+0x1e8>
 8012366:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012368:	fb02 1103 	mla	r1, r2, r3, r1
 801236c:	3930      	subs	r1, #48	@ 0x30
 801236e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012370:	464d      	mov	r5, r9
 8012372:	e7d2      	b.n	801231a <__ssvfiscanf_r+0xaa>
 8012374:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012378:	2a20      	cmp	r2, #32
 801237a:	d8ef      	bhi.n	801235c <__ssvfiscanf_r+0xec>
 801237c:	a101      	add	r1, pc, #4	@ (adr r1, 8012384 <__ssvfiscanf_r+0x114>)
 801237e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012382:	bf00      	nop
 8012384:	08012437 	.word	0x08012437
 8012388:	0801235d 	.word	0x0801235d
 801238c:	0801235d 	.word	0x0801235d
 8012390:	08012491 	.word	0x08012491
 8012394:	0801235d 	.word	0x0801235d
 8012398:	0801235d 	.word	0x0801235d
 801239c:	0801235d 	.word	0x0801235d
 80123a0:	0801235d 	.word	0x0801235d
 80123a4:	0801235d 	.word	0x0801235d
 80123a8:	0801235d 	.word	0x0801235d
 80123ac:	0801235d 	.word	0x0801235d
 80123b0:	080124a7 	.word	0x080124a7
 80123b4:	0801248d 	.word	0x0801248d
 80123b8:	0801240f 	.word	0x0801240f
 80123bc:	0801240f 	.word	0x0801240f
 80123c0:	0801240f 	.word	0x0801240f
 80123c4:	0801235d 	.word	0x0801235d
 80123c8:	08012449 	.word	0x08012449
 80123cc:	0801235d 	.word	0x0801235d
 80123d0:	0801235d 	.word	0x0801235d
 80123d4:	0801235d 	.word	0x0801235d
 80123d8:	0801235d 	.word	0x0801235d
 80123dc:	080124b7 	.word	0x080124b7
 80123e0:	08012451 	.word	0x08012451
 80123e4:	0801242f 	.word	0x0801242f
 80123e8:	0801235d 	.word	0x0801235d
 80123ec:	0801235d 	.word	0x0801235d
 80123f0:	080124b3 	.word	0x080124b3
 80123f4:	0801235d 	.word	0x0801235d
 80123f8:	0801248d 	.word	0x0801248d
 80123fc:	0801235d 	.word	0x0801235d
 8012400:	0801235d 	.word	0x0801235d
 8012404:	08012437 	.word	0x08012437
 8012408:	3b45      	subs	r3, #69	@ 0x45
 801240a:	2b02      	cmp	r3, #2
 801240c:	d8a6      	bhi.n	801235c <__ssvfiscanf_r+0xec>
 801240e:	2305      	movs	r3, #5
 8012410:	e021      	b.n	8012456 <__ssvfiscanf_r+0x1e6>
 8012412:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012414:	4621      	mov	r1, r4
 8012416:	4630      	mov	r0, r6
 8012418:	4798      	blx	r3
 801241a:	2800      	cmp	r0, #0
 801241c:	f43f af66 	beq.w	80122ec <__ssvfiscanf_r+0x7c>
 8012420:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012422:	2800      	cmp	r0, #0
 8012424:	f040 808b 	bne.w	801253e <__ssvfiscanf_r+0x2ce>
 8012428:	f04f 30ff 	mov.w	r0, #4294967295
 801242c:	e08b      	b.n	8012546 <__ssvfiscanf_r+0x2d6>
 801242e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012430:	f042 0220 	orr.w	r2, r2, #32
 8012434:	9241      	str	r2, [sp, #260]	@ 0x104
 8012436:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801243c:	9241      	str	r2, [sp, #260]	@ 0x104
 801243e:	2210      	movs	r2, #16
 8012440:	2b6e      	cmp	r3, #110	@ 0x6e
 8012442:	9242      	str	r2, [sp, #264]	@ 0x108
 8012444:	d902      	bls.n	801244c <__ssvfiscanf_r+0x1dc>
 8012446:	e005      	b.n	8012454 <__ssvfiscanf_r+0x1e4>
 8012448:	2300      	movs	r3, #0
 801244a:	9342      	str	r3, [sp, #264]	@ 0x108
 801244c:	2303      	movs	r3, #3
 801244e:	e002      	b.n	8012456 <__ssvfiscanf_r+0x1e6>
 8012450:	2308      	movs	r3, #8
 8012452:	9342      	str	r3, [sp, #264]	@ 0x108
 8012454:	2304      	movs	r3, #4
 8012456:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012458:	6863      	ldr	r3, [r4, #4]
 801245a:	2b00      	cmp	r3, #0
 801245c:	dd39      	ble.n	80124d2 <__ssvfiscanf_r+0x262>
 801245e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012460:	0659      	lsls	r1, r3, #25
 8012462:	d404      	bmi.n	801246e <__ssvfiscanf_r+0x1fe>
 8012464:	6823      	ldr	r3, [r4, #0]
 8012466:	781a      	ldrb	r2, [r3, #0]
 8012468:	5cba      	ldrb	r2, [r7, r2]
 801246a:	0712      	lsls	r2, r2, #28
 801246c:	d438      	bmi.n	80124e0 <__ssvfiscanf_r+0x270>
 801246e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012470:	2b02      	cmp	r3, #2
 8012472:	dc47      	bgt.n	8012504 <__ssvfiscanf_r+0x294>
 8012474:	466b      	mov	r3, sp
 8012476:	4622      	mov	r2, r4
 8012478:	a941      	add	r1, sp, #260	@ 0x104
 801247a:	4630      	mov	r0, r6
 801247c:	f000 f86c 	bl	8012558 <_scanf_chars>
 8012480:	2801      	cmp	r0, #1
 8012482:	d064      	beq.n	801254e <__ssvfiscanf_r+0x2de>
 8012484:	2802      	cmp	r0, #2
 8012486:	f47f af18 	bne.w	80122ba <__ssvfiscanf_r+0x4a>
 801248a:	e7c9      	b.n	8012420 <__ssvfiscanf_r+0x1b0>
 801248c:	220a      	movs	r2, #10
 801248e:	e7d7      	b.n	8012440 <__ssvfiscanf_r+0x1d0>
 8012490:	4629      	mov	r1, r5
 8012492:	4640      	mov	r0, r8
 8012494:	f000 fa5a 	bl	801294c <__sccl>
 8012498:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801249a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801249e:	9341      	str	r3, [sp, #260]	@ 0x104
 80124a0:	4605      	mov	r5, r0
 80124a2:	2301      	movs	r3, #1
 80124a4:	e7d7      	b.n	8012456 <__ssvfiscanf_r+0x1e6>
 80124a6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80124a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124ac:	9341      	str	r3, [sp, #260]	@ 0x104
 80124ae:	2300      	movs	r3, #0
 80124b0:	e7d1      	b.n	8012456 <__ssvfiscanf_r+0x1e6>
 80124b2:	2302      	movs	r3, #2
 80124b4:	e7cf      	b.n	8012456 <__ssvfiscanf_r+0x1e6>
 80124b6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80124b8:	06c3      	lsls	r3, r0, #27
 80124ba:	f53f aefe 	bmi.w	80122ba <__ssvfiscanf_r+0x4a>
 80124be:	9b00      	ldr	r3, [sp, #0]
 80124c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80124c2:	1d19      	adds	r1, r3, #4
 80124c4:	9100      	str	r1, [sp, #0]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	07c0      	lsls	r0, r0, #31
 80124ca:	bf4c      	ite	mi
 80124cc:	801a      	strhmi	r2, [r3, #0]
 80124ce:	601a      	strpl	r2, [r3, #0]
 80124d0:	e6f3      	b.n	80122ba <__ssvfiscanf_r+0x4a>
 80124d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80124d4:	4621      	mov	r1, r4
 80124d6:	4630      	mov	r0, r6
 80124d8:	4798      	blx	r3
 80124da:	2800      	cmp	r0, #0
 80124dc:	d0bf      	beq.n	801245e <__ssvfiscanf_r+0x1ee>
 80124de:	e79f      	b.n	8012420 <__ssvfiscanf_r+0x1b0>
 80124e0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80124e2:	3201      	adds	r2, #1
 80124e4:	9245      	str	r2, [sp, #276]	@ 0x114
 80124e6:	6862      	ldr	r2, [r4, #4]
 80124e8:	3a01      	subs	r2, #1
 80124ea:	2a00      	cmp	r2, #0
 80124ec:	6062      	str	r2, [r4, #4]
 80124ee:	dd02      	ble.n	80124f6 <__ssvfiscanf_r+0x286>
 80124f0:	3301      	adds	r3, #1
 80124f2:	6023      	str	r3, [r4, #0]
 80124f4:	e7b6      	b.n	8012464 <__ssvfiscanf_r+0x1f4>
 80124f6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80124f8:	4621      	mov	r1, r4
 80124fa:	4630      	mov	r0, r6
 80124fc:	4798      	blx	r3
 80124fe:	2800      	cmp	r0, #0
 8012500:	d0b0      	beq.n	8012464 <__ssvfiscanf_r+0x1f4>
 8012502:	e78d      	b.n	8012420 <__ssvfiscanf_r+0x1b0>
 8012504:	2b04      	cmp	r3, #4
 8012506:	dc0f      	bgt.n	8012528 <__ssvfiscanf_r+0x2b8>
 8012508:	466b      	mov	r3, sp
 801250a:	4622      	mov	r2, r4
 801250c:	a941      	add	r1, sp, #260	@ 0x104
 801250e:	4630      	mov	r0, r6
 8012510:	f000 f87c 	bl	801260c <_scanf_i>
 8012514:	e7b4      	b.n	8012480 <__ssvfiscanf_r+0x210>
 8012516:	bf00      	nop
 8012518:	080121c1 	.word	0x080121c1
 801251c:	08012237 	.word	0x08012237
 8012520:	080135b1 	.word	0x080135b1
 8012524:	080136b7 	.word	0x080136b7
 8012528:	4b0a      	ldr	r3, [pc, #40]	@ (8012554 <__ssvfiscanf_r+0x2e4>)
 801252a:	2b00      	cmp	r3, #0
 801252c:	f43f aec5 	beq.w	80122ba <__ssvfiscanf_r+0x4a>
 8012530:	466b      	mov	r3, sp
 8012532:	4622      	mov	r2, r4
 8012534:	a941      	add	r1, sp, #260	@ 0x104
 8012536:	4630      	mov	r0, r6
 8012538:	f7fd fa12 	bl	800f960 <_scanf_float>
 801253c:	e7a0      	b.n	8012480 <__ssvfiscanf_r+0x210>
 801253e:	89a3      	ldrh	r3, [r4, #12]
 8012540:	065b      	lsls	r3, r3, #25
 8012542:	f53f af71 	bmi.w	8012428 <__ssvfiscanf_r+0x1b8>
 8012546:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801254a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801254e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012550:	e7f9      	b.n	8012546 <__ssvfiscanf_r+0x2d6>
 8012552:	bf00      	nop
 8012554:	0800f961 	.word	0x0800f961

08012558 <_scanf_chars>:
 8012558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801255c:	4615      	mov	r5, r2
 801255e:	688a      	ldr	r2, [r1, #8]
 8012560:	4680      	mov	r8, r0
 8012562:	460c      	mov	r4, r1
 8012564:	b932      	cbnz	r2, 8012574 <_scanf_chars+0x1c>
 8012566:	698a      	ldr	r2, [r1, #24]
 8012568:	2a00      	cmp	r2, #0
 801256a:	bf14      	ite	ne
 801256c:	f04f 32ff 	movne.w	r2, #4294967295
 8012570:	2201      	moveq	r2, #1
 8012572:	608a      	str	r2, [r1, #8]
 8012574:	6822      	ldr	r2, [r4, #0]
 8012576:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012608 <_scanf_chars+0xb0>
 801257a:	06d1      	lsls	r1, r2, #27
 801257c:	bf5f      	itttt	pl
 801257e:	681a      	ldrpl	r2, [r3, #0]
 8012580:	1d11      	addpl	r1, r2, #4
 8012582:	6019      	strpl	r1, [r3, #0]
 8012584:	6816      	ldrpl	r6, [r2, #0]
 8012586:	2700      	movs	r7, #0
 8012588:	69a0      	ldr	r0, [r4, #24]
 801258a:	b188      	cbz	r0, 80125b0 <_scanf_chars+0x58>
 801258c:	2801      	cmp	r0, #1
 801258e:	d107      	bne.n	80125a0 <_scanf_chars+0x48>
 8012590:	682b      	ldr	r3, [r5, #0]
 8012592:	781a      	ldrb	r2, [r3, #0]
 8012594:	6963      	ldr	r3, [r4, #20]
 8012596:	5c9b      	ldrb	r3, [r3, r2]
 8012598:	b953      	cbnz	r3, 80125b0 <_scanf_chars+0x58>
 801259a:	2f00      	cmp	r7, #0
 801259c:	d031      	beq.n	8012602 <_scanf_chars+0xaa>
 801259e:	e022      	b.n	80125e6 <_scanf_chars+0x8e>
 80125a0:	2802      	cmp	r0, #2
 80125a2:	d120      	bne.n	80125e6 <_scanf_chars+0x8e>
 80125a4:	682b      	ldr	r3, [r5, #0]
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80125ac:	071b      	lsls	r3, r3, #28
 80125ae:	d41a      	bmi.n	80125e6 <_scanf_chars+0x8e>
 80125b0:	6823      	ldr	r3, [r4, #0]
 80125b2:	06da      	lsls	r2, r3, #27
 80125b4:	bf5e      	ittt	pl
 80125b6:	682b      	ldrpl	r3, [r5, #0]
 80125b8:	781b      	ldrbpl	r3, [r3, #0]
 80125ba:	f806 3b01 	strbpl.w	r3, [r6], #1
 80125be:	682a      	ldr	r2, [r5, #0]
 80125c0:	686b      	ldr	r3, [r5, #4]
 80125c2:	3201      	adds	r2, #1
 80125c4:	602a      	str	r2, [r5, #0]
 80125c6:	68a2      	ldr	r2, [r4, #8]
 80125c8:	3b01      	subs	r3, #1
 80125ca:	3a01      	subs	r2, #1
 80125cc:	606b      	str	r3, [r5, #4]
 80125ce:	3701      	adds	r7, #1
 80125d0:	60a2      	str	r2, [r4, #8]
 80125d2:	b142      	cbz	r2, 80125e6 <_scanf_chars+0x8e>
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	dcd7      	bgt.n	8012588 <_scanf_chars+0x30>
 80125d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80125dc:	4629      	mov	r1, r5
 80125de:	4640      	mov	r0, r8
 80125e0:	4798      	blx	r3
 80125e2:	2800      	cmp	r0, #0
 80125e4:	d0d0      	beq.n	8012588 <_scanf_chars+0x30>
 80125e6:	6823      	ldr	r3, [r4, #0]
 80125e8:	f013 0310 	ands.w	r3, r3, #16
 80125ec:	d105      	bne.n	80125fa <_scanf_chars+0xa2>
 80125ee:	68e2      	ldr	r2, [r4, #12]
 80125f0:	3201      	adds	r2, #1
 80125f2:	60e2      	str	r2, [r4, #12]
 80125f4:	69a2      	ldr	r2, [r4, #24]
 80125f6:	b102      	cbz	r2, 80125fa <_scanf_chars+0xa2>
 80125f8:	7033      	strb	r3, [r6, #0]
 80125fa:	6923      	ldr	r3, [r4, #16]
 80125fc:	443b      	add	r3, r7
 80125fe:	6123      	str	r3, [r4, #16]
 8012600:	2000      	movs	r0, #0
 8012602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012606:	bf00      	nop
 8012608:	080135b1 	.word	0x080135b1

0801260c <_scanf_i>:
 801260c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012610:	4698      	mov	r8, r3
 8012612:	4b74      	ldr	r3, [pc, #464]	@ (80127e4 <_scanf_i+0x1d8>)
 8012614:	460c      	mov	r4, r1
 8012616:	4682      	mov	sl, r0
 8012618:	4616      	mov	r6, r2
 801261a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801261e:	b087      	sub	sp, #28
 8012620:	ab03      	add	r3, sp, #12
 8012622:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012626:	4b70      	ldr	r3, [pc, #448]	@ (80127e8 <_scanf_i+0x1dc>)
 8012628:	69a1      	ldr	r1, [r4, #24]
 801262a:	4a70      	ldr	r2, [pc, #448]	@ (80127ec <_scanf_i+0x1e0>)
 801262c:	2903      	cmp	r1, #3
 801262e:	bf08      	it	eq
 8012630:	461a      	moveq	r2, r3
 8012632:	68a3      	ldr	r3, [r4, #8]
 8012634:	9201      	str	r2, [sp, #4]
 8012636:	1e5a      	subs	r2, r3, #1
 8012638:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801263c:	bf88      	it	hi
 801263e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012642:	4627      	mov	r7, r4
 8012644:	bf82      	ittt	hi
 8012646:	eb03 0905 	addhi.w	r9, r3, r5
 801264a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801264e:	60a3      	strhi	r3, [r4, #8]
 8012650:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012654:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012658:	bf98      	it	ls
 801265a:	f04f 0900 	movls.w	r9, #0
 801265e:	6023      	str	r3, [r4, #0]
 8012660:	463d      	mov	r5, r7
 8012662:	f04f 0b00 	mov.w	fp, #0
 8012666:	6831      	ldr	r1, [r6, #0]
 8012668:	ab03      	add	r3, sp, #12
 801266a:	7809      	ldrb	r1, [r1, #0]
 801266c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012670:	2202      	movs	r2, #2
 8012672:	f7ed fe4d 	bl	8000310 <memchr>
 8012676:	b328      	cbz	r0, 80126c4 <_scanf_i+0xb8>
 8012678:	f1bb 0f01 	cmp.w	fp, #1
 801267c:	d159      	bne.n	8012732 <_scanf_i+0x126>
 801267e:	6862      	ldr	r2, [r4, #4]
 8012680:	b92a      	cbnz	r2, 801268e <_scanf_i+0x82>
 8012682:	6822      	ldr	r2, [r4, #0]
 8012684:	2108      	movs	r1, #8
 8012686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801268a:	6061      	str	r1, [r4, #4]
 801268c:	6022      	str	r2, [r4, #0]
 801268e:	6822      	ldr	r2, [r4, #0]
 8012690:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012694:	6022      	str	r2, [r4, #0]
 8012696:	68a2      	ldr	r2, [r4, #8]
 8012698:	1e51      	subs	r1, r2, #1
 801269a:	60a1      	str	r1, [r4, #8]
 801269c:	b192      	cbz	r2, 80126c4 <_scanf_i+0xb8>
 801269e:	6832      	ldr	r2, [r6, #0]
 80126a0:	1c51      	adds	r1, r2, #1
 80126a2:	6031      	str	r1, [r6, #0]
 80126a4:	7812      	ldrb	r2, [r2, #0]
 80126a6:	f805 2b01 	strb.w	r2, [r5], #1
 80126aa:	6872      	ldr	r2, [r6, #4]
 80126ac:	3a01      	subs	r2, #1
 80126ae:	2a00      	cmp	r2, #0
 80126b0:	6072      	str	r2, [r6, #4]
 80126b2:	dc07      	bgt.n	80126c4 <_scanf_i+0xb8>
 80126b4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80126b8:	4631      	mov	r1, r6
 80126ba:	4650      	mov	r0, sl
 80126bc:	4790      	blx	r2
 80126be:	2800      	cmp	r0, #0
 80126c0:	f040 8085 	bne.w	80127ce <_scanf_i+0x1c2>
 80126c4:	f10b 0b01 	add.w	fp, fp, #1
 80126c8:	f1bb 0f03 	cmp.w	fp, #3
 80126cc:	d1cb      	bne.n	8012666 <_scanf_i+0x5a>
 80126ce:	6863      	ldr	r3, [r4, #4]
 80126d0:	b90b      	cbnz	r3, 80126d6 <_scanf_i+0xca>
 80126d2:	230a      	movs	r3, #10
 80126d4:	6063      	str	r3, [r4, #4]
 80126d6:	6863      	ldr	r3, [r4, #4]
 80126d8:	4945      	ldr	r1, [pc, #276]	@ (80127f0 <_scanf_i+0x1e4>)
 80126da:	6960      	ldr	r0, [r4, #20]
 80126dc:	1ac9      	subs	r1, r1, r3
 80126de:	f000 f935 	bl	801294c <__sccl>
 80126e2:	f04f 0b00 	mov.w	fp, #0
 80126e6:	68a3      	ldr	r3, [r4, #8]
 80126e8:	6822      	ldr	r2, [r4, #0]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d03d      	beq.n	801276a <_scanf_i+0x15e>
 80126ee:	6831      	ldr	r1, [r6, #0]
 80126f0:	6960      	ldr	r0, [r4, #20]
 80126f2:	f891 c000 	ldrb.w	ip, [r1]
 80126f6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80126fa:	2800      	cmp	r0, #0
 80126fc:	d035      	beq.n	801276a <_scanf_i+0x15e>
 80126fe:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012702:	d124      	bne.n	801274e <_scanf_i+0x142>
 8012704:	0510      	lsls	r0, r2, #20
 8012706:	d522      	bpl.n	801274e <_scanf_i+0x142>
 8012708:	f10b 0b01 	add.w	fp, fp, #1
 801270c:	f1b9 0f00 	cmp.w	r9, #0
 8012710:	d003      	beq.n	801271a <_scanf_i+0x10e>
 8012712:	3301      	adds	r3, #1
 8012714:	f109 39ff 	add.w	r9, r9, #4294967295
 8012718:	60a3      	str	r3, [r4, #8]
 801271a:	6873      	ldr	r3, [r6, #4]
 801271c:	3b01      	subs	r3, #1
 801271e:	2b00      	cmp	r3, #0
 8012720:	6073      	str	r3, [r6, #4]
 8012722:	dd1b      	ble.n	801275c <_scanf_i+0x150>
 8012724:	6833      	ldr	r3, [r6, #0]
 8012726:	3301      	adds	r3, #1
 8012728:	6033      	str	r3, [r6, #0]
 801272a:	68a3      	ldr	r3, [r4, #8]
 801272c:	3b01      	subs	r3, #1
 801272e:	60a3      	str	r3, [r4, #8]
 8012730:	e7d9      	b.n	80126e6 <_scanf_i+0xda>
 8012732:	f1bb 0f02 	cmp.w	fp, #2
 8012736:	d1ae      	bne.n	8012696 <_scanf_i+0x8a>
 8012738:	6822      	ldr	r2, [r4, #0]
 801273a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801273e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012742:	d1bf      	bne.n	80126c4 <_scanf_i+0xb8>
 8012744:	2110      	movs	r1, #16
 8012746:	6061      	str	r1, [r4, #4]
 8012748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801274c:	e7a2      	b.n	8012694 <_scanf_i+0x88>
 801274e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012752:	6022      	str	r2, [r4, #0]
 8012754:	780b      	ldrb	r3, [r1, #0]
 8012756:	f805 3b01 	strb.w	r3, [r5], #1
 801275a:	e7de      	b.n	801271a <_scanf_i+0x10e>
 801275c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012760:	4631      	mov	r1, r6
 8012762:	4650      	mov	r0, sl
 8012764:	4798      	blx	r3
 8012766:	2800      	cmp	r0, #0
 8012768:	d0df      	beq.n	801272a <_scanf_i+0x11e>
 801276a:	6823      	ldr	r3, [r4, #0]
 801276c:	05d9      	lsls	r1, r3, #23
 801276e:	d50d      	bpl.n	801278c <_scanf_i+0x180>
 8012770:	42bd      	cmp	r5, r7
 8012772:	d909      	bls.n	8012788 <_scanf_i+0x17c>
 8012774:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012778:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801277c:	4632      	mov	r2, r6
 801277e:	4650      	mov	r0, sl
 8012780:	4798      	blx	r3
 8012782:	f105 39ff 	add.w	r9, r5, #4294967295
 8012786:	464d      	mov	r5, r9
 8012788:	42bd      	cmp	r5, r7
 801278a:	d028      	beq.n	80127de <_scanf_i+0x1d2>
 801278c:	6822      	ldr	r2, [r4, #0]
 801278e:	f012 0210 	ands.w	r2, r2, #16
 8012792:	d113      	bne.n	80127bc <_scanf_i+0x1b0>
 8012794:	702a      	strb	r2, [r5, #0]
 8012796:	6863      	ldr	r3, [r4, #4]
 8012798:	9e01      	ldr	r6, [sp, #4]
 801279a:	4639      	mov	r1, r7
 801279c:	4650      	mov	r0, sl
 801279e:	47b0      	blx	r6
 80127a0:	f8d8 3000 	ldr.w	r3, [r8]
 80127a4:	6821      	ldr	r1, [r4, #0]
 80127a6:	1d1a      	adds	r2, r3, #4
 80127a8:	f8c8 2000 	str.w	r2, [r8]
 80127ac:	f011 0f20 	tst.w	r1, #32
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	d00f      	beq.n	80127d4 <_scanf_i+0x1c8>
 80127b4:	6018      	str	r0, [r3, #0]
 80127b6:	68e3      	ldr	r3, [r4, #12]
 80127b8:	3301      	adds	r3, #1
 80127ba:	60e3      	str	r3, [r4, #12]
 80127bc:	6923      	ldr	r3, [r4, #16]
 80127be:	1bed      	subs	r5, r5, r7
 80127c0:	445d      	add	r5, fp
 80127c2:	442b      	add	r3, r5
 80127c4:	6123      	str	r3, [r4, #16]
 80127c6:	2000      	movs	r0, #0
 80127c8:	b007      	add	sp, #28
 80127ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127ce:	f04f 0b00 	mov.w	fp, #0
 80127d2:	e7ca      	b.n	801276a <_scanf_i+0x15e>
 80127d4:	07ca      	lsls	r2, r1, #31
 80127d6:	bf4c      	ite	mi
 80127d8:	8018      	strhmi	r0, [r3, #0]
 80127da:	6018      	strpl	r0, [r3, #0]
 80127dc:	e7eb      	b.n	80127b6 <_scanf_i+0x1aa>
 80127de:	2001      	movs	r0, #1
 80127e0:	e7f2      	b.n	80127c8 <_scanf_i+0x1bc>
 80127e2:	bf00      	nop
 80127e4:	0801327c 	.word	0x0801327c
 80127e8:	08011ef5 	.word	0x08011ef5
 80127ec:	08012c05 	.word	0x08012c05
 80127f0:	080136d2 	.word	0x080136d2

080127f4 <__sflush_r>:
 80127f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80127f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127fc:	0716      	lsls	r6, r2, #28
 80127fe:	4605      	mov	r5, r0
 8012800:	460c      	mov	r4, r1
 8012802:	d454      	bmi.n	80128ae <__sflush_r+0xba>
 8012804:	684b      	ldr	r3, [r1, #4]
 8012806:	2b00      	cmp	r3, #0
 8012808:	dc02      	bgt.n	8012810 <__sflush_r+0x1c>
 801280a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801280c:	2b00      	cmp	r3, #0
 801280e:	dd48      	ble.n	80128a2 <__sflush_r+0xae>
 8012810:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012812:	2e00      	cmp	r6, #0
 8012814:	d045      	beq.n	80128a2 <__sflush_r+0xae>
 8012816:	2300      	movs	r3, #0
 8012818:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801281c:	682f      	ldr	r7, [r5, #0]
 801281e:	6a21      	ldr	r1, [r4, #32]
 8012820:	602b      	str	r3, [r5, #0]
 8012822:	d030      	beq.n	8012886 <__sflush_r+0x92>
 8012824:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012826:	89a3      	ldrh	r3, [r4, #12]
 8012828:	0759      	lsls	r1, r3, #29
 801282a:	d505      	bpl.n	8012838 <__sflush_r+0x44>
 801282c:	6863      	ldr	r3, [r4, #4]
 801282e:	1ad2      	subs	r2, r2, r3
 8012830:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012832:	b10b      	cbz	r3, 8012838 <__sflush_r+0x44>
 8012834:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012836:	1ad2      	subs	r2, r2, r3
 8012838:	2300      	movs	r3, #0
 801283a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801283c:	6a21      	ldr	r1, [r4, #32]
 801283e:	4628      	mov	r0, r5
 8012840:	47b0      	blx	r6
 8012842:	1c43      	adds	r3, r0, #1
 8012844:	89a3      	ldrh	r3, [r4, #12]
 8012846:	d106      	bne.n	8012856 <__sflush_r+0x62>
 8012848:	6829      	ldr	r1, [r5, #0]
 801284a:	291d      	cmp	r1, #29
 801284c:	d82b      	bhi.n	80128a6 <__sflush_r+0xb2>
 801284e:	4a2a      	ldr	r2, [pc, #168]	@ (80128f8 <__sflush_r+0x104>)
 8012850:	410a      	asrs	r2, r1
 8012852:	07d6      	lsls	r6, r2, #31
 8012854:	d427      	bmi.n	80128a6 <__sflush_r+0xb2>
 8012856:	2200      	movs	r2, #0
 8012858:	6062      	str	r2, [r4, #4]
 801285a:	04d9      	lsls	r1, r3, #19
 801285c:	6922      	ldr	r2, [r4, #16]
 801285e:	6022      	str	r2, [r4, #0]
 8012860:	d504      	bpl.n	801286c <__sflush_r+0x78>
 8012862:	1c42      	adds	r2, r0, #1
 8012864:	d101      	bne.n	801286a <__sflush_r+0x76>
 8012866:	682b      	ldr	r3, [r5, #0]
 8012868:	b903      	cbnz	r3, 801286c <__sflush_r+0x78>
 801286a:	6560      	str	r0, [r4, #84]	@ 0x54
 801286c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801286e:	602f      	str	r7, [r5, #0]
 8012870:	b1b9      	cbz	r1, 80128a2 <__sflush_r+0xae>
 8012872:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012876:	4299      	cmp	r1, r3
 8012878:	d002      	beq.n	8012880 <__sflush_r+0x8c>
 801287a:	4628      	mov	r0, r5
 801287c:	f7fe fa7a 	bl	8010d74 <_free_r>
 8012880:	2300      	movs	r3, #0
 8012882:	6363      	str	r3, [r4, #52]	@ 0x34
 8012884:	e00d      	b.n	80128a2 <__sflush_r+0xae>
 8012886:	2301      	movs	r3, #1
 8012888:	4628      	mov	r0, r5
 801288a:	47b0      	blx	r6
 801288c:	4602      	mov	r2, r0
 801288e:	1c50      	adds	r0, r2, #1
 8012890:	d1c9      	bne.n	8012826 <__sflush_r+0x32>
 8012892:	682b      	ldr	r3, [r5, #0]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d0c6      	beq.n	8012826 <__sflush_r+0x32>
 8012898:	2b1d      	cmp	r3, #29
 801289a:	d001      	beq.n	80128a0 <__sflush_r+0xac>
 801289c:	2b16      	cmp	r3, #22
 801289e:	d11e      	bne.n	80128de <__sflush_r+0xea>
 80128a0:	602f      	str	r7, [r5, #0]
 80128a2:	2000      	movs	r0, #0
 80128a4:	e022      	b.n	80128ec <__sflush_r+0xf8>
 80128a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128aa:	b21b      	sxth	r3, r3
 80128ac:	e01b      	b.n	80128e6 <__sflush_r+0xf2>
 80128ae:	690f      	ldr	r7, [r1, #16]
 80128b0:	2f00      	cmp	r7, #0
 80128b2:	d0f6      	beq.n	80128a2 <__sflush_r+0xae>
 80128b4:	0793      	lsls	r3, r2, #30
 80128b6:	680e      	ldr	r6, [r1, #0]
 80128b8:	bf08      	it	eq
 80128ba:	694b      	ldreq	r3, [r1, #20]
 80128bc:	600f      	str	r7, [r1, #0]
 80128be:	bf18      	it	ne
 80128c0:	2300      	movne	r3, #0
 80128c2:	eba6 0807 	sub.w	r8, r6, r7
 80128c6:	608b      	str	r3, [r1, #8]
 80128c8:	f1b8 0f00 	cmp.w	r8, #0
 80128cc:	dde9      	ble.n	80128a2 <__sflush_r+0xae>
 80128ce:	6a21      	ldr	r1, [r4, #32]
 80128d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80128d2:	4643      	mov	r3, r8
 80128d4:	463a      	mov	r2, r7
 80128d6:	4628      	mov	r0, r5
 80128d8:	47b0      	blx	r6
 80128da:	2800      	cmp	r0, #0
 80128dc:	dc08      	bgt.n	80128f0 <__sflush_r+0xfc>
 80128de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128e6:	81a3      	strh	r3, [r4, #12]
 80128e8:	f04f 30ff 	mov.w	r0, #4294967295
 80128ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128f0:	4407      	add	r7, r0
 80128f2:	eba8 0800 	sub.w	r8, r8, r0
 80128f6:	e7e7      	b.n	80128c8 <__sflush_r+0xd4>
 80128f8:	dfbffffe 	.word	0xdfbffffe

080128fc <_fflush_r>:
 80128fc:	b538      	push	{r3, r4, r5, lr}
 80128fe:	690b      	ldr	r3, [r1, #16]
 8012900:	4605      	mov	r5, r0
 8012902:	460c      	mov	r4, r1
 8012904:	b913      	cbnz	r3, 801290c <_fflush_r+0x10>
 8012906:	2500      	movs	r5, #0
 8012908:	4628      	mov	r0, r5
 801290a:	bd38      	pop	{r3, r4, r5, pc}
 801290c:	b118      	cbz	r0, 8012916 <_fflush_r+0x1a>
 801290e:	6a03      	ldr	r3, [r0, #32]
 8012910:	b90b      	cbnz	r3, 8012916 <_fflush_r+0x1a>
 8012912:	f7fd fabd 	bl	800fe90 <__sinit>
 8012916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d0f3      	beq.n	8012906 <_fflush_r+0xa>
 801291e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012920:	07d0      	lsls	r0, r2, #31
 8012922:	d404      	bmi.n	801292e <_fflush_r+0x32>
 8012924:	0599      	lsls	r1, r3, #22
 8012926:	d402      	bmi.n	801292e <_fflush_r+0x32>
 8012928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801292a:	f7fd fc22 	bl	8010172 <__retarget_lock_acquire_recursive>
 801292e:	4628      	mov	r0, r5
 8012930:	4621      	mov	r1, r4
 8012932:	f7ff ff5f 	bl	80127f4 <__sflush_r>
 8012936:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012938:	07da      	lsls	r2, r3, #31
 801293a:	4605      	mov	r5, r0
 801293c:	d4e4      	bmi.n	8012908 <_fflush_r+0xc>
 801293e:	89a3      	ldrh	r3, [r4, #12]
 8012940:	059b      	lsls	r3, r3, #22
 8012942:	d4e1      	bmi.n	8012908 <_fflush_r+0xc>
 8012944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012946:	f7fd fc15 	bl	8010174 <__retarget_lock_release_recursive>
 801294a:	e7dd      	b.n	8012908 <_fflush_r+0xc>

0801294c <__sccl>:
 801294c:	b570      	push	{r4, r5, r6, lr}
 801294e:	780b      	ldrb	r3, [r1, #0]
 8012950:	4604      	mov	r4, r0
 8012952:	2b5e      	cmp	r3, #94	@ 0x5e
 8012954:	bf0b      	itete	eq
 8012956:	784b      	ldrbeq	r3, [r1, #1]
 8012958:	1c4a      	addne	r2, r1, #1
 801295a:	1c8a      	addeq	r2, r1, #2
 801295c:	2100      	movne	r1, #0
 801295e:	bf08      	it	eq
 8012960:	2101      	moveq	r1, #1
 8012962:	3801      	subs	r0, #1
 8012964:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012968:	f800 1f01 	strb.w	r1, [r0, #1]!
 801296c:	42a8      	cmp	r0, r5
 801296e:	d1fb      	bne.n	8012968 <__sccl+0x1c>
 8012970:	b90b      	cbnz	r3, 8012976 <__sccl+0x2a>
 8012972:	1e50      	subs	r0, r2, #1
 8012974:	bd70      	pop	{r4, r5, r6, pc}
 8012976:	f081 0101 	eor.w	r1, r1, #1
 801297a:	54e1      	strb	r1, [r4, r3]
 801297c:	4610      	mov	r0, r2
 801297e:	4602      	mov	r2, r0
 8012980:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012984:	2d2d      	cmp	r5, #45	@ 0x2d
 8012986:	d005      	beq.n	8012994 <__sccl+0x48>
 8012988:	2d5d      	cmp	r5, #93	@ 0x5d
 801298a:	d016      	beq.n	80129ba <__sccl+0x6e>
 801298c:	2d00      	cmp	r5, #0
 801298e:	d0f1      	beq.n	8012974 <__sccl+0x28>
 8012990:	462b      	mov	r3, r5
 8012992:	e7f2      	b.n	801297a <__sccl+0x2e>
 8012994:	7846      	ldrb	r6, [r0, #1]
 8012996:	2e5d      	cmp	r6, #93	@ 0x5d
 8012998:	d0fa      	beq.n	8012990 <__sccl+0x44>
 801299a:	42b3      	cmp	r3, r6
 801299c:	dcf8      	bgt.n	8012990 <__sccl+0x44>
 801299e:	3002      	adds	r0, #2
 80129a0:	461a      	mov	r2, r3
 80129a2:	3201      	adds	r2, #1
 80129a4:	4296      	cmp	r6, r2
 80129a6:	54a1      	strb	r1, [r4, r2]
 80129a8:	dcfb      	bgt.n	80129a2 <__sccl+0x56>
 80129aa:	1af2      	subs	r2, r6, r3
 80129ac:	3a01      	subs	r2, #1
 80129ae:	1c5d      	adds	r5, r3, #1
 80129b0:	42b3      	cmp	r3, r6
 80129b2:	bfa8      	it	ge
 80129b4:	2200      	movge	r2, #0
 80129b6:	18ab      	adds	r3, r5, r2
 80129b8:	e7e1      	b.n	801297e <__sccl+0x32>
 80129ba:	4610      	mov	r0, r2
 80129bc:	e7da      	b.n	8012974 <__sccl+0x28>

080129be <__submore>:
 80129be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129c2:	460c      	mov	r4, r1
 80129c4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80129c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80129ca:	4299      	cmp	r1, r3
 80129cc:	d11d      	bne.n	8012a0a <__submore+0x4c>
 80129ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80129d2:	f7fb fd49 	bl	800e468 <_malloc_r>
 80129d6:	b918      	cbnz	r0, 80129e0 <__submore+0x22>
 80129d8:	f04f 30ff 	mov.w	r0, #4294967295
 80129dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80129e4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80129e6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80129ea:	6360      	str	r0, [r4, #52]	@ 0x34
 80129ec:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80129f0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80129f4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80129f8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80129fc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012a00:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012a04:	6020      	str	r0, [r4, #0]
 8012a06:	2000      	movs	r0, #0
 8012a08:	e7e8      	b.n	80129dc <__submore+0x1e>
 8012a0a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012a0c:	0077      	lsls	r7, r6, #1
 8012a0e:	463a      	mov	r2, r7
 8012a10:	f000 f85c 	bl	8012acc <_realloc_r>
 8012a14:	4605      	mov	r5, r0
 8012a16:	2800      	cmp	r0, #0
 8012a18:	d0de      	beq.n	80129d8 <__submore+0x1a>
 8012a1a:	eb00 0806 	add.w	r8, r0, r6
 8012a1e:	4601      	mov	r1, r0
 8012a20:	4632      	mov	r2, r6
 8012a22:	4640      	mov	r0, r8
 8012a24:	f7fd fba7 	bl	8010176 <memcpy>
 8012a28:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012a2c:	f8c4 8000 	str.w	r8, [r4]
 8012a30:	e7e9      	b.n	8012a06 <__submore+0x48>

08012a32 <memmove>:
 8012a32:	4288      	cmp	r0, r1
 8012a34:	b510      	push	{r4, lr}
 8012a36:	eb01 0402 	add.w	r4, r1, r2
 8012a3a:	d902      	bls.n	8012a42 <memmove+0x10>
 8012a3c:	4284      	cmp	r4, r0
 8012a3e:	4623      	mov	r3, r4
 8012a40:	d807      	bhi.n	8012a52 <memmove+0x20>
 8012a42:	1e43      	subs	r3, r0, #1
 8012a44:	42a1      	cmp	r1, r4
 8012a46:	d008      	beq.n	8012a5a <memmove+0x28>
 8012a48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a4c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a50:	e7f8      	b.n	8012a44 <memmove+0x12>
 8012a52:	4402      	add	r2, r0
 8012a54:	4601      	mov	r1, r0
 8012a56:	428a      	cmp	r2, r1
 8012a58:	d100      	bne.n	8012a5c <memmove+0x2a>
 8012a5a:	bd10      	pop	{r4, pc}
 8012a5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a60:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a64:	e7f7      	b.n	8012a56 <memmove+0x24>
	...

08012a68 <__assert_func>:
 8012a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a6a:	4614      	mov	r4, r2
 8012a6c:	461a      	mov	r2, r3
 8012a6e:	4b09      	ldr	r3, [pc, #36]	@ (8012a94 <__assert_func+0x2c>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	4605      	mov	r5, r0
 8012a74:	68d8      	ldr	r0, [r3, #12]
 8012a76:	b954      	cbnz	r4, 8012a8e <__assert_func+0x26>
 8012a78:	4b07      	ldr	r3, [pc, #28]	@ (8012a98 <__assert_func+0x30>)
 8012a7a:	461c      	mov	r4, r3
 8012a7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012a80:	9100      	str	r1, [sp, #0]
 8012a82:	462b      	mov	r3, r5
 8012a84:	4905      	ldr	r1, [pc, #20]	@ (8012a9c <__assert_func+0x34>)
 8012a86:	f000 f8bf 	bl	8012c08 <fiprintf>
 8012a8a:	f000 f8cf 	bl	8012c2c <abort>
 8012a8e:	4b04      	ldr	r3, [pc, #16]	@ (8012aa0 <__assert_func+0x38>)
 8012a90:	e7f4      	b.n	8012a7c <__assert_func+0x14>
 8012a92:	bf00      	nop
 8012a94:	240001c4 	.word	0x240001c4
 8012a98:	08013718 	.word	0x08013718
 8012a9c:	080136ea 	.word	0x080136ea
 8012aa0:	080136dd 	.word	0x080136dd

08012aa4 <_calloc_r>:
 8012aa4:	b570      	push	{r4, r5, r6, lr}
 8012aa6:	fba1 5402 	umull	r5, r4, r1, r2
 8012aaa:	b93c      	cbnz	r4, 8012abc <_calloc_r+0x18>
 8012aac:	4629      	mov	r1, r5
 8012aae:	f7fb fcdb 	bl	800e468 <_malloc_r>
 8012ab2:	4606      	mov	r6, r0
 8012ab4:	b928      	cbnz	r0, 8012ac2 <_calloc_r+0x1e>
 8012ab6:	2600      	movs	r6, #0
 8012ab8:	4630      	mov	r0, r6
 8012aba:	bd70      	pop	{r4, r5, r6, pc}
 8012abc:	220c      	movs	r2, #12
 8012abe:	6002      	str	r2, [r0, #0]
 8012ac0:	e7f9      	b.n	8012ab6 <_calloc_r+0x12>
 8012ac2:	462a      	mov	r2, r5
 8012ac4:	4621      	mov	r1, r4
 8012ac6:	f7fd faa8 	bl	801001a <memset>
 8012aca:	e7f5      	b.n	8012ab8 <_calloc_r+0x14>

08012acc <_realloc_r>:
 8012acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ad0:	4680      	mov	r8, r0
 8012ad2:	4615      	mov	r5, r2
 8012ad4:	460c      	mov	r4, r1
 8012ad6:	b921      	cbnz	r1, 8012ae2 <_realloc_r+0x16>
 8012ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012adc:	4611      	mov	r1, r2
 8012ade:	f7fb bcc3 	b.w	800e468 <_malloc_r>
 8012ae2:	b92a      	cbnz	r2, 8012af0 <_realloc_r+0x24>
 8012ae4:	f7fe f946 	bl	8010d74 <_free_r>
 8012ae8:	2400      	movs	r4, #0
 8012aea:	4620      	mov	r0, r4
 8012aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012af0:	f000 f8a3 	bl	8012c3a <_malloc_usable_size_r>
 8012af4:	4285      	cmp	r5, r0
 8012af6:	4606      	mov	r6, r0
 8012af8:	d802      	bhi.n	8012b00 <_realloc_r+0x34>
 8012afa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012afe:	d8f4      	bhi.n	8012aea <_realloc_r+0x1e>
 8012b00:	4629      	mov	r1, r5
 8012b02:	4640      	mov	r0, r8
 8012b04:	f7fb fcb0 	bl	800e468 <_malloc_r>
 8012b08:	4607      	mov	r7, r0
 8012b0a:	2800      	cmp	r0, #0
 8012b0c:	d0ec      	beq.n	8012ae8 <_realloc_r+0x1c>
 8012b0e:	42b5      	cmp	r5, r6
 8012b10:	462a      	mov	r2, r5
 8012b12:	4621      	mov	r1, r4
 8012b14:	bf28      	it	cs
 8012b16:	4632      	movcs	r2, r6
 8012b18:	f7fd fb2d 	bl	8010176 <memcpy>
 8012b1c:	4621      	mov	r1, r4
 8012b1e:	4640      	mov	r0, r8
 8012b20:	f7fe f928 	bl	8010d74 <_free_r>
 8012b24:	463c      	mov	r4, r7
 8012b26:	e7e0      	b.n	8012aea <_realloc_r+0x1e>

08012b28 <_strtoul_l.constprop.0>:
 8012b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b2c:	4e34      	ldr	r6, [pc, #208]	@ (8012c00 <_strtoul_l.constprop.0+0xd8>)
 8012b2e:	4686      	mov	lr, r0
 8012b30:	460d      	mov	r5, r1
 8012b32:	4628      	mov	r0, r5
 8012b34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b38:	5d37      	ldrb	r7, [r6, r4]
 8012b3a:	f017 0708 	ands.w	r7, r7, #8
 8012b3e:	d1f8      	bne.n	8012b32 <_strtoul_l.constprop.0+0xa>
 8012b40:	2c2d      	cmp	r4, #45	@ 0x2d
 8012b42:	d12f      	bne.n	8012ba4 <_strtoul_l.constprop.0+0x7c>
 8012b44:	782c      	ldrb	r4, [r5, #0]
 8012b46:	2701      	movs	r7, #1
 8012b48:	1c85      	adds	r5, r0, #2
 8012b4a:	f033 0010 	bics.w	r0, r3, #16
 8012b4e:	d109      	bne.n	8012b64 <_strtoul_l.constprop.0+0x3c>
 8012b50:	2c30      	cmp	r4, #48	@ 0x30
 8012b52:	d12c      	bne.n	8012bae <_strtoul_l.constprop.0+0x86>
 8012b54:	7828      	ldrb	r0, [r5, #0]
 8012b56:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012b5a:	2858      	cmp	r0, #88	@ 0x58
 8012b5c:	d127      	bne.n	8012bae <_strtoul_l.constprop.0+0x86>
 8012b5e:	786c      	ldrb	r4, [r5, #1]
 8012b60:	2310      	movs	r3, #16
 8012b62:	3502      	adds	r5, #2
 8012b64:	f04f 38ff 	mov.w	r8, #4294967295
 8012b68:	2600      	movs	r6, #0
 8012b6a:	fbb8 f8f3 	udiv	r8, r8, r3
 8012b6e:	fb03 f908 	mul.w	r9, r3, r8
 8012b72:	ea6f 0909 	mvn.w	r9, r9
 8012b76:	4630      	mov	r0, r6
 8012b78:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012b7c:	f1bc 0f09 	cmp.w	ip, #9
 8012b80:	d81c      	bhi.n	8012bbc <_strtoul_l.constprop.0+0x94>
 8012b82:	4664      	mov	r4, ip
 8012b84:	42a3      	cmp	r3, r4
 8012b86:	dd2a      	ble.n	8012bde <_strtoul_l.constprop.0+0xb6>
 8012b88:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012b8c:	d007      	beq.n	8012b9e <_strtoul_l.constprop.0+0x76>
 8012b8e:	4580      	cmp	r8, r0
 8012b90:	d322      	bcc.n	8012bd8 <_strtoul_l.constprop.0+0xb0>
 8012b92:	d101      	bne.n	8012b98 <_strtoul_l.constprop.0+0x70>
 8012b94:	45a1      	cmp	r9, r4
 8012b96:	db1f      	blt.n	8012bd8 <_strtoul_l.constprop.0+0xb0>
 8012b98:	fb00 4003 	mla	r0, r0, r3, r4
 8012b9c:	2601      	movs	r6, #1
 8012b9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012ba2:	e7e9      	b.n	8012b78 <_strtoul_l.constprop.0+0x50>
 8012ba4:	2c2b      	cmp	r4, #43	@ 0x2b
 8012ba6:	bf04      	itt	eq
 8012ba8:	782c      	ldrbeq	r4, [r5, #0]
 8012baa:	1c85      	addeq	r5, r0, #2
 8012bac:	e7cd      	b.n	8012b4a <_strtoul_l.constprop.0+0x22>
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d1d8      	bne.n	8012b64 <_strtoul_l.constprop.0+0x3c>
 8012bb2:	2c30      	cmp	r4, #48	@ 0x30
 8012bb4:	bf0c      	ite	eq
 8012bb6:	2308      	moveq	r3, #8
 8012bb8:	230a      	movne	r3, #10
 8012bba:	e7d3      	b.n	8012b64 <_strtoul_l.constprop.0+0x3c>
 8012bbc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012bc0:	f1bc 0f19 	cmp.w	ip, #25
 8012bc4:	d801      	bhi.n	8012bca <_strtoul_l.constprop.0+0xa2>
 8012bc6:	3c37      	subs	r4, #55	@ 0x37
 8012bc8:	e7dc      	b.n	8012b84 <_strtoul_l.constprop.0+0x5c>
 8012bca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012bce:	f1bc 0f19 	cmp.w	ip, #25
 8012bd2:	d804      	bhi.n	8012bde <_strtoul_l.constprop.0+0xb6>
 8012bd4:	3c57      	subs	r4, #87	@ 0x57
 8012bd6:	e7d5      	b.n	8012b84 <_strtoul_l.constprop.0+0x5c>
 8012bd8:	f04f 36ff 	mov.w	r6, #4294967295
 8012bdc:	e7df      	b.n	8012b9e <_strtoul_l.constprop.0+0x76>
 8012bde:	1c73      	adds	r3, r6, #1
 8012be0:	d106      	bne.n	8012bf0 <_strtoul_l.constprop.0+0xc8>
 8012be2:	2322      	movs	r3, #34	@ 0x22
 8012be4:	f8ce 3000 	str.w	r3, [lr]
 8012be8:	4630      	mov	r0, r6
 8012bea:	b932      	cbnz	r2, 8012bfa <_strtoul_l.constprop.0+0xd2>
 8012bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bf0:	b107      	cbz	r7, 8012bf4 <_strtoul_l.constprop.0+0xcc>
 8012bf2:	4240      	negs	r0, r0
 8012bf4:	2a00      	cmp	r2, #0
 8012bf6:	d0f9      	beq.n	8012bec <_strtoul_l.constprop.0+0xc4>
 8012bf8:	b106      	cbz	r6, 8012bfc <_strtoul_l.constprop.0+0xd4>
 8012bfa:	1e69      	subs	r1, r5, #1
 8012bfc:	6011      	str	r1, [r2, #0]
 8012bfe:	e7f5      	b.n	8012bec <_strtoul_l.constprop.0+0xc4>
 8012c00:	080135b1 	.word	0x080135b1

08012c04 <_strtoul_r>:
 8012c04:	f7ff bf90 	b.w	8012b28 <_strtoul_l.constprop.0>

08012c08 <fiprintf>:
 8012c08:	b40e      	push	{r1, r2, r3}
 8012c0a:	b503      	push	{r0, r1, lr}
 8012c0c:	4601      	mov	r1, r0
 8012c0e:	ab03      	add	r3, sp, #12
 8012c10:	4805      	ldr	r0, [pc, #20]	@ (8012c28 <fiprintf+0x20>)
 8012c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c16:	6800      	ldr	r0, [r0, #0]
 8012c18:	9301      	str	r3, [sp, #4]
 8012c1a:	f000 f83f 	bl	8012c9c <_vfiprintf_r>
 8012c1e:	b002      	add	sp, #8
 8012c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c24:	b003      	add	sp, #12
 8012c26:	4770      	bx	lr
 8012c28:	240001c4 	.word	0x240001c4

08012c2c <abort>:
 8012c2c:	b508      	push	{r3, lr}
 8012c2e:	2006      	movs	r0, #6
 8012c30:	f000 fa08 	bl	8013044 <raise>
 8012c34:	2001      	movs	r0, #1
 8012c36:	f7ee fe53 	bl	80018e0 <_exit>

08012c3a <_malloc_usable_size_r>:
 8012c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c3e:	1f18      	subs	r0, r3, #4
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	bfbc      	itt	lt
 8012c44:	580b      	ldrlt	r3, [r1, r0]
 8012c46:	18c0      	addlt	r0, r0, r3
 8012c48:	4770      	bx	lr

08012c4a <__sfputc_r>:
 8012c4a:	6893      	ldr	r3, [r2, #8]
 8012c4c:	3b01      	subs	r3, #1
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	b410      	push	{r4}
 8012c52:	6093      	str	r3, [r2, #8]
 8012c54:	da08      	bge.n	8012c68 <__sfputc_r+0x1e>
 8012c56:	6994      	ldr	r4, [r2, #24]
 8012c58:	42a3      	cmp	r3, r4
 8012c5a:	db01      	blt.n	8012c60 <__sfputc_r+0x16>
 8012c5c:	290a      	cmp	r1, #10
 8012c5e:	d103      	bne.n	8012c68 <__sfputc_r+0x1e>
 8012c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c64:	f000 b932 	b.w	8012ecc <__swbuf_r>
 8012c68:	6813      	ldr	r3, [r2, #0]
 8012c6a:	1c58      	adds	r0, r3, #1
 8012c6c:	6010      	str	r0, [r2, #0]
 8012c6e:	7019      	strb	r1, [r3, #0]
 8012c70:	4608      	mov	r0, r1
 8012c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c76:	4770      	bx	lr

08012c78 <__sfputs_r>:
 8012c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c7a:	4606      	mov	r6, r0
 8012c7c:	460f      	mov	r7, r1
 8012c7e:	4614      	mov	r4, r2
 8012c80:	18d5      	adds	r5, r2, r3
 8012c82:	42ac      	cmp	r4, r5
 8012c84:	d101      	bne.n	8012c8a <__sfputs_r+0x12>
 8012c86:	2000      	movs	r0, #0
 8012c88:	e007      	b.n	8012c9a <__sfputs_r+0x22>
 8012c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c8e:	463a      	mov	r2, r7
 8012c90:	4630      	mov	r0, r6
 8012c92:	f7ff ffda 	bl	8012c4a <__sfputc_r>
 8012c96:	1c43      	adds	r3, r0, #1
 8012c98:	d1f3      	bne.n	8012c82 <__sfputs_r+0xa>
 8012c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012c9c <_vfiprintf_r>:
 8012c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca0:	460d      	mov	r5, r1
 8012ca2:	b09d      	sub	sp, #116	@ 0x74
 8012ca4:	4614      	mov	r4, r2
 8012ca6:	4698      	mov	r8, r3
 8012ca8:	4606      	mov	r6, r0
 8012caa:	b118      	cbz	r0, 8012cb4 <_vfiprintf_r+0x18>
 8012cac:	6a03      	ldr	r3, [r0, #32]
 8012cae:	b90b      	cbnz	r3, 8012cb4 <_vfiprintf_r+0x18>
 8012cb0:	f7fd f8ee 	bl	800fe90 <__sinit>
 8012cb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012cb6:	07d9      	lsls	r1, r3, #31
 8012cb8:	d405      	bmi.n	8012cc6 <_vfiprintf_r+0x2a>
 8012cba:	89ab      	ldrh	r3, [r5, #12]
 8012cbc:	059a      	lsls	r2, r3, #22
 8012cbe:	d402      	bmi.n	8012cc6 <_vfiprintf_r+0x2a>
 8012cc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012cc2:	f7fd fa56 	bl	8010172 <__retarget_lock_acquire_recursive>
 8012cc6:	89ab      	ldrh	r3, [r5, #12]
 8012cc8:	071b      	lsls	r3, r3, #28
 8012cca:	d501      	bpl.n	8012cd0 <_vfiprintf_r+0x34>
 8012ccc:	692b      	ldr	r3, [r5, #16]
 8012cce:	b99b      	cbnz	r3, 8012cf8 <_vfiprintf_r+0x5c>
 8012cd0:	4629      	mov	r1, r5
 8012cd2:	4630      	mov	r0, r6
 8012cd4:	f000 f938 	bl	8012f48 <__swsetup_r>
 8012cd8:	b170      	cbz	r0, 8012cf8 <_vfiprintf_r+0x5c>
 8012cda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012cdc:	07dc      	lsls	r4, r3, #31
 8012cde:	d504      	bpl.n	8012cea <_vfiprintf_r+0x4e>
 8012ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ce4:	b01d      	add	sp, #116	@ 0x74
 8012ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cea:	89ab      	ldrh	r3, [r5, #12]
 8012cec:	0598      	lsls	r0, r3, #22
 8012cee:	d4f7      	bmi.n	8012ce0 <_vfiprintf_r+0x44>
 8012cf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012cf2:	f7fd fa3f 	bl	8010174 <__retarget_lock_release_recursive>
 8012cf6:	e7f3      	b.n	8012ce0 <_vfiprintf_r+0x44>
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8012cfc:	2320      	movs	r3, #32
 8012cfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012d02:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d06:	2330      	movs	r3, #48	@ 0x30
 8012d08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012eb8 <_vfiprintf_r+0x21c>
 8012d0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012d10:	f04f 0901 	mov.w	r9, #1
 8012d14:	4623      	mov	r3, r4
 8012d16:	469a      	mov	sl, r3
 8012d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d1c:	b10a      	cbz	r2, 8012d22 <_vfiprintf_r+0x86>
 8012d1e:	2a25      	cmp	r2, #37	@ 0x25
 8012d20:	d1f9      	bne.n	8012d16 <_vfiprintf_r+0x7a>
 8012d22:	ebba 0b04 	subs.w	fp, sl, r4
 8012d26:	d00b      	beq.n	8012d40 <_vfiprintf_r+0xa4>
 8012d28:	465b      	mov	r3, fp
 8012d2a:	4622      	mov	r2, r4
 8012d2c:	4629      	mov	r1, r5
 8012d2e:	4630      	mov	r0, r6
 8012d30:	f7ff ffa2 	bl	8012c78 <__sfputs_r>
 8012d34:	3001      	adds	r0, #1
 8012d36:	f000 80a7 	beq.w	8012e88 <_vfiprintf_r+0x1ec>
 8012d3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d3c:	445a      	add	r2, fp
 8012d3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d40:	f89a 3000 	ldrb.w	r3, [sl]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	f000 809f 	beq.w	8012e88 <_vfiprintf_r+0x1ec>
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8012d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d54:	f10a 0a01 	add.w	sl, sl, #1
 8012d58:	9304      	str	r3, [sp, #16]
 8012d5a:	9307      	str	r3, [sp, #28]
 8012d5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012d60:	931a      	str	r3, [sp, #104]	@ 0x68
 8012d62:	4654      	mov	r4, sl
 8012d64:	2205      	movs	r2, #5
 8012d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d6a:	4853      	ldr	r0, [pc, #332]	@ (8012eb8 <_vfiprintf_r+0x21c>)
 8012d6c:	f7ed fad0 	bl	8000310 <memchr>
 8012d70:	9a04      	ldr	r2, [sp, #16]
 8012d72:	b9d8      	cbnz	r0, 8012dac <_vfiprintf_r+0x110>
 8012d74:	06d1      	lsls	r1, r2, #27
 8012d76:	bf44      	itt	mi
 8012d78:	2320      	movmi	r3, #32
 8012d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d7e:	0713      	lsls	r3, r2, #28
 8012d80:	bf44      	itt	mi
 8012d82:	232b      	movmi	r3, #43	@ 0x2b
 8012d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d88:	f89a 3000 	ldrb.w	r3, [sl]
 8012d8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d8e:	d015      	beq.n	8012dbc <_vfiprintf_r+0x120>
 8012d90:	9a07      	ldr	r2, [sp, #28]
 8012d92:	4654      	mov	r4, sl
 8012d94:	2000      	movs	r0, #0
 8012d96:	f04f 0c0a 	mov.w	ip, #10
 8012d9a:	4621      	mov	r1, r4
 8012d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012da0:	3b30      	subs	r3, #48	@ 0x30
 8012da2:	2b09      	cmp	r3, #9
 8012da4:	d94b      	bls.n	8012e3e <_vfiprintf_r+0x1a2>
 8012da6:	b1b0      	cbz	r0, 8012dd6 <_vfiprintf_r+0x13a>
 8012da8:	9207      	str	r2, [sp, #28]
 8012daa:	e014      	b.n	8012dd6 <_vfiprintf_r+0x13a>
 8012dac:	eba0 0308 	sub.w	r3, r0, r8
 8012db0:	fa09 f303 	lsl.w	r3, r9, r3
 8012db4:	4313      	orrs	r3, r2
 8012db6:	9304      	str	r3, [sp, #16]
 8012db8:	46a2      	mov	sl, r4
 8012dba:	e7d2      	b.n	8012d62 <_vfiprintf_r+0xc6>
 8012dbc:	9b03      	ldr	r3, [sp, #12]
 8012dbe:	1d19      	adds	r1, r3, #4
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	9103      	str	r1, [sp, #12]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	bfbb      	ittet	lt
 8012dc8:	425b      	neglt	r3, r3
 8012dca:	f042 0202 	orrlt.w	r2, r2, #2
 8012dce:	9307      	strge	r3, [sp, #28]
 8012dd0:	9307      	strlt	r3, [sp, #28]
 8012dd2:	bfb8      	it	lt
 8012dd4:	9204      	strlt	r2, [sp, #16]
 8012dd6:	7823      	ldrb	r3, [r4, #0]
 8012dd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8012dda:	d10a      	bne.n	8012df2 <_vfiprintf_r+0x156>
 8012ddc:	7863      	ldrb	r3, [r4, #1]
 8012dde:	2b2a      	cmp	r3, #42	@ 0x2a
 8012de0:	d132      	bne.n	8012e48 <_vfiprintf_r+0x1ac>
 8012de2:	9b03      	ldr	r3, [sp, #12]
 8012de4:	1d1a      	adds	r2, r3, #4
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	9203      	str	r2, [sp, #12]
 8012dea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012dee:	3402      	adds	r4, #2
 8012df0:	9305      	str	r3, [sp, #20]
 8012df2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012ec8 <_vfiprintf_r+0x22c>
 8012df6:	7821      	ldrb	r1, [r4, #0]
 8012df8:	2203      	movs	r2, #3
 8012dfa:	4650      	mov	r0, sl
 8012dfc:	f7ed fa88 	bl	8000310 <memchr>
 8012e00:	b138      	cbz	r0, 8012e12 <_vfiprintf_r+0x176>
 8012e02:	9b04      	ldr	r3, [sp, #16]
 8012e04:	eba0 000a 	sub.w	r0, r0, sl
 8012e08:	2240      	movs	r2, #64	@ 0x40
 8012e0a:	4082      	lsls	r2, r0
 8012e0c:	4313      	orrs	r3, r2
 8012e0e:	3401      	adds	r4, #1
 8012e10:	9304      	str	r3, [sp, #16]
 8012e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e16:	4829      	ldr	r0, [pc, #164]	@ (8012ebc <_vfiprintf_r+0x220>)
 8012e18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012e1c:	2206      	movs	r2, #6
 8012e1e:	f7ed fa77 	bl	8000310 <memchr>
 8012e22:	2800      	cmp	r0, #0
 8012e24:	d03f      	beq.n	8012ea6 <_vfiprintf_r+0x20a>
 8012e26:	4b26      	ldr	r3, [pc, #152]	@ (8012ec0 <_vfiprintf_r+0x224>)
 8012e28:	bb1b      	cbnz	r3, 8012e72 <_vfiprintf_r+0x1d6>
 8012e2a:	9b03      	ldr	r3, [sp, #12]
 8012e2c:	3307      	adds	r3, #7
 8012e2e:	f023 0307 	bic.w	r3, r3, #7
 8012e32:	3308      	adds	r3, #8
 8012e34:	9303      	str	r3, [sp, #12]
 8012e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e38:	443b      	add	r3, r7
 8012e3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e3c:	e76a      	b.n	8012d14 <_vfiprintf_r+0x78>
 8012e3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e42:	460c      	mov	r4, r1
 8012e44:	2001      	movs	r0, #1
 8012e46:	e7a8      	b.n	8012d9a <_vfiprintf_r+0xfe>
 8012e48:	2300      	movs	r3, #0
 8012e4a:	3401      	adds	r4, #1
 8012e4c:	9305      	str	r3, [sp, #20]
 8012e4e:	4619      	mov	r1, r3
 8012e50:	f04f 0c0a 	mov.w	ip, #10
 8012e54:	4620      	mov	r0, r4
 8012e56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e5a:	3a30      	subs	r2, #48	@ 0x30
 8012e5c:	2a09      	cmp	r2, #9
 8012e5e:	d903      	bls.n	8012e68 <_vfiprintf_r+0x1cc>
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d0c6      	beq.n	8012df2 <_vfiprintf_r+0x156>
 8012e64:	9105      	str	r1, [sp, #20]
 8012e66:	e7c4      	b.n	8012df2 <_vfiprintf_r+0x156>
 8012e68:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e6c:	4604      	mov	r4, r0
 8012e6e:	2301      	movs	r3, #1
 8012e70:	e7f0      	b.n	8012e54 <_vfiprintf_r+0x1b8>
 8012e72:	ab03      	add	r3, sp, #12
 8012e74:	9300      	str	r3, [sp, #0]
 8012e76:	462a      	mov	r2, r5
 8012e78:	4b12      	ldr	r3, [pc, #72]	@ (8012ec4 <_vfiprintf_r+0x228>)
 8012e7a:	a904      	add	r1, sp, #16
 8012e7c:	4630      	mov	r0, r6
 8012e7e:	f7fc f9c7 	bl	800f210 <_printf_float>
 8012e82:	4607      	mov	r7, r0
 8012e84:	1c78      	adds	r0, r7, #1
 8012e86:	d1d6      	bne.n	8012e36 <_vfiprintf_r+0x19a>
 8012e88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e8a:	07d9      	lsls	r1, r3, #31
 8012e8c:	d405      	bmi.n	8012e9a <_vfiprintf_r+0x1fe>
 8012e8e:	89ab      	ldrh	r3, [r5, #12]
 8012e90:	059a      	lsls	r2, r3, #22
 8012e92:	d402      	bmi.n	8012e9a <_vfiprintf_r+0x1fe>
 8012e94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e96:	f7fd f96d 	bl	8010174 <__retarget_lock_release_recursive>
 8012e9a:	89ab      	ldrh	r3, [r5, #12]
 8012e9c:	065b      	lsls	r3, r3, #25
 8012e9e:	f53f af1f 	bmi.w	8012ce0 <_vfiprintf_r+0x44>
 8012ea2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ea4:	e71e      	b.n	8012ce4 <_vfiprintf_r+0x48>
 8012ea6:	ab03      	add	r3, sp, #12
 8012ea8:	9300      	str	r3, [sp, #0]
 8012eaa:	462a      	mov	r2, r5
 8012eac:	4b05      	ldr	r3, [pc, #20]	@ (8012ec4 <_vfiprintf_r+0x228>)
 8012eae:	a904      	add	r1, sp, #16
 8012eb0:	4630      	mov	r0, r6
 8012eb2:	f7fc fc35 	bl	800f720 <_printf_i>
 8012eb6:	e7e4      	b.n	8012e82 <_vfiprintf_r+0x1e6>
 8012eb8:	080136b1 	.word	0x080136b1
 8012ebc:	080136bb 	.word	0x080136bb
 8012ec0:	0800f211 	.word	0x0800f211
 8012ec4:	08012c79 	.word	0x08012c79
 8012ec8:	080136b7 	.word	0x080136b7

08012ecc <__swbuf_r>:
 8012ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ece:	460e      	mov	r6, r1
 8012ed0:	4614      	mov	r4, r2
 8012ed2:	4605      	mov	r5, r0
 8012ed4:	b118      	cbz	r0, 8012ede <__swbuf_r+0x12>
 8012ed6:	6a03      	ldr	r3, [r0, #32]
 8012ed8:	b90b      	cbnz	r3, 8012ede <__swbuf_r+0x12>
 8012eda:	f7fc ffd9 	bl	800fe90 <__sinit>
 8012ede:	69a3      	ldr	r3, [r4, #24]
 8012ee0:	60a3      	str	r3, [r4, #8]
 8012ee2:	89a3      	ldrh	r3, [r4, #12]
 8012ee4:	071a      	lsls	r2, r3, #28
 8012ee6:	d501      	bpl.n	8012eec <__swbuf_r+0x20>
 8012ee8:	6923      	ldr	r3, [r4, #16]
 8012eea:	b943      	cbnz	r3, 8012efe <__swbuf_r+0x32>
 8012eec:	4621      	mov	r1, r4
 8012eee:	4628      	mov	r0, r5
 8012ef0:	f000 f82a 	bl	8012f48 <__swsetup_r>
 8012ef4:	b118      	cbz	r0, 8012efe <__swbuf_r+0x32>
 8012ef6:	f04f 37ff 	mov.w	r7, #4294967295
 8012efa:	4638      	mov	r0, r7
 8012efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012efe:	6823      	ldr	r3, [r4, #0]
 8012f00:	6922      	ldr	r2, [r4, #16]
 8012f02:	1a98      	subs	r0, r3, r2
 8012f04:	6963      	ldr	r3, [r4, #20]
 8012f06:	b2f6      	uxtb	r6, r6
 8012f08:	4283      	cmp	r3, r0
 8012f0a:	4637      	mov	r7, r6
 8012f0c:	dc05      	bgt.n	8012f1a <__swbuf_r+0x4e>
 8012f0e:	4621      	mov	r1, r4
 8012f10:	4628      	mov	r0, r5
 8012f12:	f7ff fcf3 	bl	80128fc <_fflush_r>
 8012f16:	2800      	cmp	r0, #0
 8012f18:	d1ed      	bne.n	8012ef6 <__swbuf_r+0x2a>
 8012f1a:	68a3      	ldr	r3, [r4, #8]
 8012f1c:	3b01      	subs	r3, #1
 8012f1e:	60a3      	str	r3, [r4, #8]
 8012f20:	6823      	ldr	r3, [r4, #0]
 8012f22:	1c5a      	adds	r2, r3, #1
 8012f24:	6022      	str	r2, [r4, #0]
 8012f26:	701e      	strb	r6, [r3, #0]
 8012f28:	6962      	ldr	r2, [r4, #20]
 8012f2a:	1c43      	adds	r3, r0, #1
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d004      	beq.n	8012f3a <__swbuf_r+0x6e>
 8012f30:	89a3      	ldrh	r3, [r4, #12]
 8012f32:	07db      	lsls	r3, r3, #31
 8012f34:	d5e1      	bpl.n	8012efa <__swbuf_r+0x2e>
 8012f36:	2e0a      	cmp	r6, #10
 8012f38:	d1df      	bne.n	8012efa <__swbuf_r+0x2e>
 8012f3a:	4621      	mov	r1, r4
 8012f3c:	4628      	mov	r0, r5
 8012f3e:	f7ff fcdd 	bl	80128fc <_fflush_r>
 8012f42:	2800      	cmp	r0, #0
 8012f44:	d0d9      	beq.n	8012efa <__swbuf_r+0x2e>
 8012f46:	e7d6      	b.n	8012ef6 <__swbuf_r+0x2a>

08012f48 <__swsetup_r>:
 8012f48:	b538      	push	{r3, r4, r5, lr}
 8012f4a:	4b29      	ldr	r3, [pc, #164]	@ (8012ff0 <__swsetup_r+0xa8>)
 8012f4c:	4605      	mov	r5, r0
 8012f4e:	6818      	ldr	r0, [r3, #0]
 8012f50:	460c      	mov	r4, r1
 8012f52:	b118      	cbz	r0, 8012f5c <__swsetup_r+0x14>
 8012f54:	6a03      	ldr	r3, [r0, #32]
 8012f56:	b90b      	cbnz	r3, 8012f5c <__swsetup_r+0x14>
 8012f58:	f7fc ff9a 	bl	800fe90 <__sinit>
 8012f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f60:	0719      	lsls	r1, r3, #28
 8012f62:	d422      	bmi.n	8012faa <__swsetup_r+0x62>
 8012f64:	06da      	lsls	r2, r3, #27
 8012f66:	d407      	bmi.n	8012f78 <__swsetup_r+0x30>
 8012f68:	2209      	movs	r2, #9
 8012f6a:	602a      	str	r2, [r5, #0]
 8012f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f70:	81a3      	strh	r3, [r4, #12]
 8012f72:	f04f 30ff 	mov.w	r0, #4294967295
 8012f76:	e033      	b.n	8012fe0 <__swsetup_r+0x98>
 8012f78:	0758      	lsls	r0, r3, #29
 8012f7a:	d512      	bpl.n	8012fa2 <__swsetup_r+0x5a>
 8012f7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f7e:	b141      	cbz	r1, 8012f92 <__swsetup_r+0x4a>
 8012f80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f84:	4299      	cmp	r1, r3
 8012f86:	d002      	beq.n	8012f8e <__swsetup_r+0x46>
 8012f88:	4628      	mov	r0, r5
 8012f8a:	f7fd fef3 	bl	8010d74 <_free_r>
 8012f8e:	2300      	movs	r3, #0
 8012f90:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f92:	89a3      	ldrh	r3, [r4, #12]
 8012f94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012f98:	81a3      	strh	r3, [r4, #12]
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	6063      	str	r3, [r4, #4]
 8012f9e:	6923      	ldr	r3, [r4, #16]
 8012fa0:	6023      	str	r3, [r4, #0]
 8012fa2:	89a3      	ldrh	r3, [r4, #12]
 8012fa4:	f043 0308 	orr.w	r3, r3, #8
 8012fa8:	81a3      	strh	r3, [r4, #12]
 8012faa:	6923      	ldr	r3, [r4, #16]
 8012fac:	b94b      	cbnz	r3, 8012fc2 <__swsetup_r+0x7a>
 8012fae:	89a3      	ldrh	r3, [r4, #12]
 8012fb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012fb8:	d003      	beq.n	8012fc2 <__swsetup_r+0x7a>
 8012fba:	4621      	mov	r1, r4
 8012fbc:	4628      	mov	r0, r5
 8012fbe:	f000 f883 	bl	80130c8 <__smakebuf_r>
 8012fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fc6:	f013 0201 	ands.w	r2, r3, #1
 8012fca:	d00a      	beq.n	8012fe2 <__swsetup_r+0x9a>
 8012fcc:	2200      	movs	r2, #0
 8012fce:	60a2      	str	r2, [r4, #8]
 8012fd0:	6962      	ldr	r2, [r4, #20]
 8012fd2:	4252      	negs	r2, r2
 8012fd4:	61a2      	str	r2, [r4, #24]
 8012fd6:	6922      	ldr	r2, [r4, #16]
 8012fd8:	b942      	cbnz	r2, 8012fec <__swsetup_r+0xa4>
 8012fda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012fde:	d1c5      	bne.n	8012f6c <__swsetup_r+0x24>
 8012fe0:	bd38      	pop	{r3, r4, r5, pc}
 8012fe2:	0799      	lsls	r1, r3, #30
 8012fe4:	bf58      	it	pl
 8012fe6:	6962      	ldrpl	r2, [r4, #20]
 8012fe8:	60a2      	str	r2, [r4, #8]
 8012fea:	e7f4      	b.n	8012fd6 <__swsetup_r+0x8e>
 8012fec:	2000      	movs	r0, #0
 8012fee:	e7f7      	b.n	8012fe0 <__swsetup_r+0x98>
 8012ff0:	240001c4 	.word	0x240001c4

08012ff4 <_raise_r>:
 8012ff4:	291f      	cmp	r1, #31
 8012ff6:	b538      	push	{r3, r4, r5, lr}
 8012ff8:	4605      	mov	r5, r0
 8012ffa:	460c      	mov	r4, r1
 8012ffc:	d904      	bls.n	8013008 <_raise_r+0x14>
 8012ffe:	2316      	movs	r3, #22
 8013000:	6003      	str	r3, [r0, #0]
 8013002:	f04f 30ff 	mov.w	r0, #4294967295
 8013006:	bd38      	pop	{r3, r4, r5, pc}
 8013008:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801300a:	b112      	cbz	r2, 8013012 <_raise_r+0x1e>
 801300c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013010:	b94b      	cbnz	r3, 8013026 <_raise_r+0x32>
 8013012:	4628      	mov	r0, r5
 8013014:	f000 f830 	bl	8013078 <_getpid_r>
 8013018:	4622      	mov	r2, r4
 801301a:	4601      	mov	r1, r0
 801301c:	4628      	mov	r0, r5
 801301e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013022:	f000 b817 	b.w	8013054 <_kill_r>
 8013026:	2b01      	cmp	r3, #1
 8013028:	d00a      	beq.n	8013040 <_raise_r+0x4c>
 801302a:	1c59      	adds	r1, r3, #1
 801302c:	d103      	bne.n	8013036 <_raise_r+0x42>
 801302e:	2316      	movs	r3, #22
 8013030:	6003      	str	r3, [r0, #0]
 8013032:	2001      	movs	r0, #1
 8013034:	e7e7      	b.n	8013006 <_raise_r+0x12>
 8013036:	2100      	movs	r1, #0
 8013038:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801303c:	4620      	mov	r0, r4
 801303e:	4798      	blx	r3
 8013040:	2000      	movs	r0, #0
 8013042:	e7e0      	b.n	8013006 <_raise_r+0x12>

08013044 <raise>:
 8013044:	4b02      	ldr	r3, [pc, #8]	@ (8013050 <raise+0xc>)
 8013046:	4601      	mov	r1, r0
 8013048:	6818      	ldr	r0, [r3, #0]
 801304a:	f7ff bfd3 	b.w	8012ff4 <_raise_r>
 801304e:	bf00      	nop
 8013050:	240001c4 	.word	0x240001c4

08013054 <_kill_r>:
 8013054:	b538      	push	{r3, r4, r5, lr}
 8013056:	4d07      	ldr	r5, [pc, #28]	@ (8013074 <_kill_r+0x20>)
 8013058:	2300      	movs	r3, #0
 801305a:	4604      	mov	r4, r0
 801305c:	4608      	mov	r0, r1
 801305e:	4611      	mov	r1, r2
 8013060:	602b      	str	r3, [r5, #0]
 8013062:	f7ee fc2d 	bl	80018c0 <_kill>
 8013066:	1c43      	adds	r3, r0, #1
 8013068:	d102      	bne.n	8013070 <_kill_r+0x1c>
 801306a:	682b      	ldr	r3, [r5, #0]
 801306c:	b103      	cbz	r3, 8013070 <_kill_r+0x1c>
 801306e:	6023      	str	r3, [r4, #0]
 8013070:	bd38      	pop	{r3, r4, r5, pc}
 8013072:	bf00      	nop
 8013074:	24000ec4 	.word	0x24000ec4

08013078 <_getpid_r>:
 8013078:	f7ee bc1a 	b.w	80018b0 <_getpid>

0801307c <__swhatbuf_r>:
 801307c:	b570      	push	{r4, r5, r6, lr}
 801307e:	460c      	mov	r4, r1
 8013080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013084:	2900      	cmp	r1, #0
 8013086:	b096      	sub	sp, #88	@ 0x58
 8013088:	4615      	mov	r5, r2
 801308a:	461e      	mov	r6, r3
 801308c:	da0d      	bge.n	80130aa <__swhatbuf_r+0x2e>
 801308e:	89a3      	ldrh	r3, [r4, #12]
 8013090:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013094:	f04f 0100 	mov.w	r1, #0
 8013098:	bf14      	ite	ne
 801309a:	2340      	movne	r3, #64	@ 0x40
 801309c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80130a0:	2000      	movs	r0, #0
 80130a2:	6031      	str	r1, [r6, #0]
 80130a4:	602b      	str	r3, [r5, #0]
 80130a6:	b016      	add	sp, #88	@ 0x58
 80130a8:	bd70      	pop	{r4, r5, r6, pc}
 80130aa:	466a      	mov	r2, sp
 80130ac:	f000 f848 	bl	8013140 <_fstat_r>
 80130b0:	2800      	cmp	r0, #0
 80130b2:	dbec      	blt.n	801308e <__swhatbuf_r+0x12>
 80130b4:	9901      	ldr	r1, [sp, #4]
 80130b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80130ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80130be:	4259      	negs	r1, r3
 80130c0:	4159      	adcs	r1, r3
 80130c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80130c6:	e7eb      	b.n	80130a0 <__swhatbuf_r+0x24>

080130c8 <__smakebuf_r>:
 80130c8:	898b      	ldrh	r3, [r1, #12]
 80130ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130cc:	079d      	lsls	r5, r3, #30
 80130ce:	4606      	mov	r6, r0
 80130d0:	460c      	mov	r4, r1
 80130d2:	d507      	bpl.n	80130e4 <__smakebuf_r+0x1c>
 80130d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80130d8:	6023      	str	r3, [r4, #0]
 80130da:	6123      	str	r3, [r4, #16]
 80130dc:	2301      	movs	r3, #1
 80130de:	6163      	str	r3, [r4, #20]
 80130e0:	b003      	add	sp, #12
 80130e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130e4:	ab01      	add	r3, sp, #4
 80130e6:	466a      	mov	r2, sp
 80130e8:	f7ff ffc8 	bl	801307c <__swhatbuf_r>
 80130ec:	9f00      	ldr	r7, [sp, #0]
 80130ee:	4605      	mov	r5, r0
 80130f0:	4639      	mov	r1, r7
 80130f2:	4630      	mov	r0, r6
 80130f4:	f7fb f9b8 	bl	800e468 <_malloc_r>
 80130f8:	b948      	cbnz	r0, 801310e <__smakebuf_r+0x46>
 80130fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130fe:	059a      	lsls	r2, r3, #22
 8013100:	d4ee      	bmi.n	80130e0 <__smakebuf_r+0x18>
 8013102:	f023 0303 	bic.w	r3, r3, #3
 8013106:	f043 0302 	orr.w	r3, r3, #2
 801310a:	81a3      	strh	r3, [r4, #12]
 801310c:	e7e2      	b.n	80130d4 <__smakebuf_r+0xc>
 801310e:	89a3      	ldrh	r3, [r4, #12]
 8013110:	6020      	str	r0, [r4, #0]
 8013112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013116:	81a3      	strh	r3, [r4, #12]
 8013118:	9b01      	ldr	r3, [sp, #4]
 801311a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801311e:	b15b      	cbz	r3, 8013138 <__smakebuf_r+0x70>
 8013120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013124:	4630      	mov	r0, r6
 8013126:	f000 f81d 	bl	8013164 <_isatty_r>
 801312a:	b128      	cbz	r0, 8013138 <__smakebuf_r+0x70>
 801312c:	89a3      	ldrh	r3, [r4, #12]
 801312e:	f023 0303 	bic.w	r3, r3, #3
 8013132:	f043 0301 	orr.w	r3, r3, #1
 8013136:	81a3      	strh	r3, [r4, #12]
 8013138:	89a3      	ldrh	r3, [r4, #12]
 801313a:	431d      	orrs	r5, r3
 801313c:	81a5      	strh	r5, [r4, #12]
 801313e:	e7cf      	b.n	80130e0 <__smakebuf_r+0x18>

08013140 <_fstat_r>:
 8013140:	b538      	push	{r3, r4, r5, lr}
 8013142:	4d07      	ldr	r5, [pc, #28]	@ (8013160 <_fstat_r+0x20>)
 8013144:	2300      	movs	r3, #0
 8013146:	4604      	mov	r4, r0
 8013148:	4608      	mov	r0, r1
 801314a:	4611      	mov	r1, r2
 801314c:	602b      	str	r3, [r5, #0]
 801314e:	f7ee fc17 	bl	8001980 <_fstat>
 8013152:	1c43      	adds	r3, r0, #1
 8013154:	d102      	bne.n	801315c <_fstat_r+0x1c>
 8013156:	682b      	ldr	r3, [r5, #0]
 8013158:	b103      	cbz	r3, 801315c <_fstat_r+0x1c>
 801315a:	6023      	str	r3, [r4, #0]
 801315c:	bd38      	pop	{r3, r4, r5, pc}
 801315e:	bf00      	nop
 8013160:	24000ec4 	.word	0x24000ec4

08013164 <_isatty_r>:
 8013164:	b538      	push	{r3, r4, r5, lr}
 8013166:	4d06      	ldr	r5, [pc, #24]	@ (8013180 <_isatty_r+0x1c>)
 8013168:	2300      	movs	r3, #0
 801316a:	4604      	mov	r4, r0
 801316c:	4608      	mov	r0, r1
 801316e:	602b      	str	r3, [r5, #0]
 8013170:	f7ee fc16 	bl	80019a0 <_isatty>
 8013174:	1c43      	adds	r3, r0, #1
 8013176:	d102      	bne.n	801317e <_isatty_r+0x1a>
 8013178:	682b      	ldr	r3, [r5, #0]
 801317a:	b103      	cbz	r3, 801317e <_isatty_r+0x1a>
 801317c:	6023      	str	r3, [r4, #0]
 801317e:	bd38      	pop	{r3, r4, r5, pc}
 8013180:	24000ec4 	.word	0x24000ec4

08013184 <_init>:
 8013184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013186:	bf00      	nop
 8013188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801318a:	bc08      	pop	{r3}
 801318c:	469e      	mov	lr, r3
 801318e:	4770      	bx	lr

08013190 <_fini>:
 8013190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013192:	bf00      	nop
 8013194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013196:	bc08      	pop	{r3}
 8013198:	469e      	mov	lr, r3
 801319a:	4770      	bx	lr
