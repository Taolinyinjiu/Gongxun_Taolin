
Gongxun_Taolin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d94  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08013068  08013068  00014068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080135e4  080135e4  000145e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080135ec  080135ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080135f0  080135f0  000145f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000214  24000000  080135f4  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c68  24000214  08013808  00015214  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e7c  08013808  00015e7c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015214  2**0
                  CONTENTS, READONLY
 10 .debug_info   000210ed  00000000  00000000  00015242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004519  00000000  00000000  0003632f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001af8  00000000  00000000  0003a848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014f0  00000000  00000000  0003c340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037c37  00000000  00000000  0003d830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029691  00000000  00000000  00075467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001598b2  00000000  00000000  0009eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f83aa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000085e4  00000000  00000000  001f83f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004f  00000000  00000000  002009d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000214 	.word	0x24000214
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801304c 	.word	0x0801304c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000218 	.word	0x24000218
 800030c:	0801304c 	.word	0x0801304c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a9e:	4b43      	ldr	r3, [pc, #268]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa0:	4a43      	ldr	r2, [pc, #268]	@ (8000bb0 <MX_FDCAN1_Init+0x118>)
 8000aa2:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000aa4:	4b41      	ldr	r3, [pc, #260]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000aaa:	4b40      	ldr	r3, [pc, #256]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000abc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000ac8:	4b38      	ldr	r3, [pc, #224]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ace:	4b37      	ldr	r3, [pc, #220]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ad4:	4b35      	ldr	r3, [pc, #212]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ada:	4b34      	ldr	r3, [pc, #208]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 10;
 8000ae0:	4b32      	ldr	r3, [pc, #200]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8000ae6:	4b31      	ldr	r3, [pc, #196]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000aec:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000afe:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8000b04:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b06:	2204      	movs	r2, #4
 8000b08:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b18:	2204      	movs	r2, #4
 8000b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b22:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b46:	4819      	ldr	r0, [pc, #100]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b48:	f002 ff5c 	bl	8003a04 <HAL_FDCAN_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000b52:	f000 fdbb 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
//配置RX滤波
	hfdcan1_RX_Filter.IdType = FDCAN_EXTENDED_ID;       //标准 IDFDCAN_STANDARD_ID
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5c:	601a      	str	r2, [r3, #0]
	hfdcan1_RX_Filter.FilterIndex = 0;                             //滤波器索�???????
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
	hfdcan1_RX_Filter.FilterType = FDCAN_FILTER_MASK;              //滤波器类�???????
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	609a      	str	r2, [r3, #8]
	hfdcan1_RX_Filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //过滤�???????0关联到FIFO0
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
	hfdcan1_RX_Filter.FilterID1 = 0x000;                               //32位ID
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
	hfdcan1_RX_Filter.FilterID2 = 0x000; //如果FDCAN配置为传统模式的话，这里�???????32位掩�???????
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan1_RX_Filter);               //滤波器初始化
 8000b7c:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b7e:	480b      	ldr	r0, [pc, #44]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b80:	f003 f91e 	bl	8003dc0 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, ENABLE,
 8000b84:	2301      	movs	r3, #1
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b90:	f003 f98c 	bl	8003eac <HAL_FDCAN_ConfigGlobalFilter>
			ENABLE);
	HAL_FDCAN_Start(&hfdcan1);                               //�??启FDCAN
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b96:	f003 f9b6 	bl	8003f06 <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ba0:	f003 fba4 	bl	80042ec <HAL_FDCAN_ActivateNotification>
  /* USER CODE END FDCAN1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	240002a0 	.word	0x240002a0
 8000bb0:	4000a000 	.word	0x4000a000
 8000bb4:	24000230 	.word	0x24000230

08000bb8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0b8      	sub	sp, #224	@ 0xe0
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	22b8      	movs	r2, #184	@ 0xb8
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f00f f982 	bl	800fee2 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c8c <HAL_FDCAN_MspInit+0xd4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d14c      	bne.n	8000c82 <HAL_FDCAN_MspInit+0xca>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000be8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f005 fa33 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8000c08:	f000 fd60 	bl	80016cc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c0c:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c12:	4a1f      	ldr	r2, [pc, #124]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	4a17      	ldr	r2, [pc, #92]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c60:	2309      	movs	r3, #9
 8000c62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <HAL_FDCAN_MspInit+0xdc>)
 8000c6e:	f004 f8b3 	bl	8004dd8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 2, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2102      	movs	r1, #2
 8000c76:	2013      	movs	r0, #19
 8000c78:	f002 f8b3 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c7c:	2013      	movs	r0, #19
 8000c7e:	f002 f8ca 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000c82:	bf00      	nop
 8000c84:	37e0      	adds	r7, #224	@ 0xe0
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	4000a000 	.word	0x4000a000
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020c00 	.word	0x58020c00

08000c98 <FDCAN_Send_Msg>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void FDCAN_Send_Msg(uint8_t *msg, uint32_t len) {
 8000c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c9c:	b087      	sub	sp, #28
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
 8000ca4:	466b      	mov	r3, sp
 8000ca6:	461e      	mov	r6, r3
	uint8_t i = 0, j = 0, k = 0, l = 0, packNum = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	75fb      	strb	r3, [r7, #23]
 8000cac:	2300      	movs	r3, #0
 8000cae:	753b      	strb	r3, [r7, #20]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	74fb      	strb	r3, [r7, #19]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75bb      	strb	r3, [r7, #22]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	757b      	strb	r3, [r7, #21]
	uint8_t TxData[len];
 8000cbc:	6839      	ldr	r1, [r7, #0]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4688      	mov	r8, r1
 8000cc8:	4699      	mov	r9, r3
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cde:	2300      	movs	r3, #0
 8000ce0:	460c      	mov	r4, r1
 8000ce2:	461d      	mov	r5, r3
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	00eb      	lsls	r3, r5, #3
 8000cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cf2:	00e2      	lsls	r2, r4, #3
 8000cf4:	1dcb      	adds	r3, r1, #7
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	ebad 0d03 	sub.w	sp, sp, r3
 8000cfe:	466b      	mov	r3, sp
 8000d00:	3300      	adds	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
	j = len - 2;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	3b02      	subs	r3, #2
 8000d0a:	753b      	strb	r3, [r7, #20]
	// 除去ID地址和功能码后的数据长度
	TxData[0] = msg[1];
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	785a      	ldrb	r2, [r3, #1]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	701a      	strb	r2, [r3, #0]
	// 发�?�数�???????
	while (i < j) {
 8000d14:	e062      	b.n	8000ddc <FDCAN_Send_Msg+0x144>
		// 数据个数
		k = j - i;
 8000d16:	7d3a      	ldrb	r2, [r7, #20]
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	74fb      	strb	r3, [r7, #19]
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	021a      	lsls	r2, r3, #8
				| (uint32_t) packNum;  //32位ID   0x00
 8000d24:	7d7b      	ldrb	r3, [r7, #21]
 8000d26:	4313      	orrs	r3, r2
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d28:	4a31      	ldr	r2, [pc, #196]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2a:	6013      	str	r3, [r2, #0]
		fdcan_TxHeader.IdType = FDCAN_EXTENDED_ID;      //ID   FDCAN_STANDARD_ID
 8000d2c:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d32:	605a      	str	r2, [r3, #4]
		fdcan_TxHeader.TxFrameType = FDCAN_DATA_FRAME;              //数据�???????
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
		//    fdcan_TxHeader.DataLength=len;              //数据长度
		fdcan_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
		fdcan_TxHeader.BitRateSwitch = FDCAN_BRS_OFF;               //关闭速率切换
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
		fdcan_TxHeader.FDFormat = FDCAN_CLASSIC_CAN;                //传统的CAN模式
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
		fdcan_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;    //无发送事�???????
 8000d4c:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
		fdcan_TxHeader.MessageMarker = 0;
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
		//小于8字节命令
		if (k < 8) {
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	2b07      	cmp	r3, #7
 8000d5c:	d81b      	bhi.n	8000d96 <FDCAN_Send_Msg+0xfe>
			for (l = 0; l < k; l++, i++) {
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75bb      	strb	r3, [r7, #22]
 8000d62:	e00e      	b.n	8000d82 <FDCAN_Send_Msg+0xea>
				TxData[l + 1] = msg[i + 2];
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	3302      	adds	r3, #2
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	441a      	add	r2, r3
 8000d6c:	7dbb      	ldrb	r3, [r7, #22]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	7811      	ldrb	r1, [r2, #0]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < k; l++, i++) {
 8000d76:	7dbb      	ldrb	r3, [r7, #22]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	75bb      	strb	r3, [r7, #22]
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	75fb      	strb	r3, [r7, #23]
 8000d82:	7dba      	ldrb	r2, [r7, #22]
 8000d84:	7cfb      	ldrb	r3, [r7, #19]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3ec      	bcc.n	8000d64 <FDCAN_Send_Msg+0xcc>
			}
			fdcan_TxHeader.DataLength = k + 1;
 8000d8a:	7cfb      	ldrb	r3, [r7, #19]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	e017      	b.n	8000dc6 <FDCAN_Send_Msg+0x12e>
		}
		// 大于8字节命令，分包发送，每包数据�???????多发�???????8个字�???????
		else {
			for (l = 0; l < 7; l++, i++) {
 8000d96:	2300      	movs	r3, #0
 8000d98:	75bb      	strb	r3, [r7, #22]
 8000d9a:	e00e      	b.n	8000dba <FDCAN_Send_Msg+0x122>
				TxData[l + 1] = msg[i + 2];
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	3302      	adds	r3, #2
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	441a      	add	r2, r3
 8000da4:	7dbb      	ldrb	r3, [r7, #22]
 8000da6:	3301      	adds	r3, #1
 8000da8:	7811      	ldrb	r1, [r2, #0]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < 7; l++, i++) {
 8000dae:	7dbb      	ldrb	r3, [r7, #22]
 8000db0:	3301      	adds	r3, #1
 8000db2:	75bb      	strb	r3, [r7, #22]
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	3301      	adds	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
 8000dba:	7dbb      	ldrb	r3, [r7, #22]
 8000dbc:	2b06      	cmp	r3, #6
 8000dbe:	d9ed      	bls.n	8000d9c <FDCAN_Send_Msg+0x104>
			}
			fdcan_TxHeader.DataLength = 8;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	60da      	str	r2, [r3, #12]
		}

		// 发�?�数�?????
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &fdcan_TxHeader, TxData);
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	4909      	ldr	r1, [pc, #36]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dca:	480a      	ldr	r0, [pc, #40]	@ (8000df4 <FDCAN_Send_Msg+0x15c>)
 8000dcc:	f003 f8c6 	bl	8003f5c <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(5);  //发第二帧数据的关键，若无延时，不发第二帧数据
 8000dd0:	2005      	movs	r0, #5
 8000dd2:	f001 ff07 	bl	8002be4 <HAL_Delay>
		// 记录发�?�的第几包的数据
		++packNum;
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	757b      	strb	r3, [r7, #21]
	while (i < j) {
 8000ddc:	7dfa      	ldrb	r2, [r7, #23]
 8000dde:	7d3b      	ldrb	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d398      	bcc.n	8000d16 <FDCAN_Send_Msg+0x7e>
 8000de4:	46b5      	mov	sp, r6
	}
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df0:	24000250 	.word	0x24000250
 8000df4:	240002a0 	.word	0x240002a0

08000df8 <HAL_FDCAN_RxFifo0Callback>:
// 定义一个u8类型的数组变量rxdata用于存储接收到的数据
uint8_t  rxdata[8];
// 定义一个静态变量RxState，用于记录接收状态
uint8_t RxState = 0;
uint8_t Zero_data;
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]

	//提取FIFO0中接收到的数据
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &fdcan_RxHeader, rxdata);
 8000e02:	4b37      	ldr	r3, [pc, #220]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e04:	4a37      	ldr	r2, [pc, #220]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e06:	2140      	movs	r1, #64	@ 0x40
 8000e08:	4837      	ldr	r0, [pc, #220]	@ (8000ee8 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8000e0a:	f003 f903 	bl	8004014 <HAL_FDCAN_GetRxMessage>
//	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &fdcan_TxHeader, rxdata);
// Emm_mode 为0,清除接收状态
	if (Emm_mode == 0) {
 8000e0e:	4b37      	ldr	r3, [pc, #220]	@ (8000eec <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d102      	bne.n	8000e1c <HAL_FDCAN_RxFifo0Callback+0x24>
		RxState = 0;
 8000e16:	4b36      	ldr	r3, [pc, #216]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
	}

// Emm_mode为1，进入接收状态机
	if (Emm_mode == 1) {
 8000e1c:	4b33      	ldr	r3, [pc, #204]	@ (8000eec <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d127      	bne.n	8000e74 <HAL_FDCAN_RxFifo0Callback+0x7c>
		if (RxState == 0) {
 8000e24:	4b32      	ldr	r3, [pc, #200]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d106      	bne.n	8000e3a <HAL_FDCAN_RxFifo0Callback+0x42>
			if (rxdata[0] == 0xFD) {
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e32:	d102      	bne.n	8000e3a <HAL_FDCAN_RxFifo0Callback+0x42>
				RxState = 1;
 8000e34:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
			}
		}
		 if (RxState == 1) {
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d106      	bne.n	8000e50 <HAL_FDCAN_RxFifo0Callback+0x58>

			if (rxdata[1] == 0x9F) {
 8000e42:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e44:	785b      	ldrb	r3, [r3, #1]
 8000e46:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e48:	d102      	bne.n	8000e50 <HAL_FDCAN_RxFifo0Callback+0x58>

				RxState = 2;
 8000e4a:	4b29      	ldr	r3, [pc, #164]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	701a      	strb	r2, [r3, #0]

			}
		}
		 if (RxState == 2) {
 8000e50:	4b27      	ldr	r3, [pc, #156]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d13a      	bne.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
			if (rxdata[2] == 0x6B) {
 8000e58:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e5a:	789b      	ldrb	r3, [r3, #2]
 8000e5c:	2b6b      	cmp	r3, #107	@ 0x6b
 8000e5e:	d136      	bne.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>

				RxFlag = 1;
 8000e60:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
				RxState = 0;
 8000e66:	4b22      	ldr	r3, [pc, #136]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
				Emm_mode = 0;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e02c      	b.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
			}
		}
	}
//	进入回零状态回调
	else if(Emm_mode == 2)
 8000e74:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d128      	bne.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
	{
		if (RxState == 0) {
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d107      	bne.n	8000e94 <HAL_FDCAN_RxFifo0Callback+0x9c>
			if (rxdata[0] == 0x3B) {
 8000e84:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e8a:	d120      	bne.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
				RxState = 1;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	e01c      	b.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
			}
		}
		else if(RxState == 1)
 8000e94:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d10a      	bne.n	8000eb2 <HAL_FDCAN_RxFifo0Callback+0xba>
			{
			Zero_data = rxdata[1] & 0x04;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e9e:	785b      	ldrb	r3, [r3, #1]
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <HAL_FDCAN_RxFifo0Callback+0x100>)
 8000ea8:	701a      	strb	r2, [r3, #0]
			RxState = 2;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000eac:	2202      	movs	r2, #2
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e00d      	b.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
			}
		else if (RxState == 2)
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d109      	bne.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
		{
			if (rxdata[0] == 0x6B) {
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b6b      	cmp	r3, #107	@ 0x6b
 8000ec0:	d105      	bne.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
//				退出状态机
				RxState = 0;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
				Emm_mode = 0;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
			}
		}
	}
//	memset(rxdata, 0x00, sizeof(rxdata));
	HAL_FDCAN_ActivateNotification(hfdcan,
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f003 fa0a 	bl	80042ec <HAL_FDCAN_ActivateNotification>
	FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);

}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	24000340 	.word	0x24000340
 8000ee4:	24000274 	.word	0x24000274
 8000ee8:	240002a0 	.word	0x240002a0
 8000eec:	2400029c 	.word	0x2400029c
 8000ef0:	24000348 	.word	0x24000348
 8000ef4:	2400029d 	.word	0x2400029d
 8000ef8:	24000349 	.word	0x24000349

08000efc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f02:	4b30      	ldr	r3, [pc, #192]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f08:	4a2e      	ldr	r2, [pc, #184]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f0a:	f043 0310 	orr.w	r3, r3, #16
 8000f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f12:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f18:	f003 0310 	and.w	r3, r3, #16
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f20:	4b28      	ldr	r3, [pc, #160]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f26:	4a27      	ldr	r2, [pc, #156]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f30:	4b24      	ldr	r3, [pc, #144]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	4b21      	ldr	r3, [pc, #132]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f44:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f62:	4a18      	ldr	r2, [pc, #96]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6c:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f80:	4a10      	ldr	r2, [pc, #64]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	4a09      	ldr	r2, [pc, #36]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]

}
 8000fb6:	bf00      	nop
 8000fb8:	371c      	adds	r7, #28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	58024400 	.word	0x58024400

08000fc8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000fcc:	f000 fb52 	bl	8001674 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fd0:	f001 fd76 	bl	8002ac0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fd4:	f000 f994 	bl	8001300 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	//  USART10 用于Action串口转发,暂时使用无线串口将数据转发到主机
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fd8:	f7ff ff90 	bl	8000efc <MX_GPIO_Init>
	MX_FDCAN1_Init();
 8000fdc:	f7ff fd5c 	bl	8000a98 <MX_FDCAN1_Init>
	MX_UART4_Init();
 8000fe0:	f000 fec2 	bl	8001d68 <MX_UART4_Init>
	MX_UART5_Init();
 8000fe4:	f000 ff0c 	bl	8001e00 <MX_UART5_Init>
	MX_UART9_Init();
 8000fe8:	f000 ffee 	bl	8001fc8 <MX_UART9_Init>
	MX_USART6_UART_Init();
 8000fec:	f001 f90a 	bl	8002204 <MX_USART6_UART_Init>
	MX_USART10_UART_Init();
 8000ff0:	f001 f954 	bl	800229c <MX_USART10_UART_Init>
	MX_TIM2_Init();
 8000ff4:	f000 fd66 	bl	8001ac4 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 8000ff8:	f001 f8b8 	bl	800216c <MX_USART3_UART_Init>
	MX_UART7_Init();
 8000ffc:	f000 ff4c 	bl	8001e98 <MX_UART7_Init>
	MX_UART8_Init();
 8001000:	f000 ff96 	bl	8001f30 <MX_UART8_Init>
	MX_TIM3_Init();
 8001004:	f000 fdac 	bl	8001b60 <MX_TIM3_Init>
	MX_TIM5_Init();
 8001008:	f000 fdfa 	bl	8001c00 <MX_TIM5_Init>
	MX_USART2_UART_Init();
 800100c:	f001 f828 	bl	8002060 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

//	清除定时器初始化过程中的更新中断标志，
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001010:	4b9a      	ldr	r3, [pc, #616]	@ (800127c <main+0x2b4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f06f 0201 	mvn.w	r2, #1
 8001018:	611a      	str	r2, [r3, #16]
//	使能定时器中断
	HAL_TIM_Base_Start_IT(&htim2);
 800101a:	4898      	ldr	r0, [pc, #608]	@ (800127c <main+0x2b4>)
 800101c:	f006 fe3e 	bl	8007c9c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8001020:	4897      	ldr	r0, [pc, #604]	@ (8001280 <main+0x2b8>)
 8001022:	f006 fe3b 	bl	8007c9c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001026:	4897      	ldr	r0, [pc, #604]	@ (8001284 <main+0x2bc>)
 8001028:	f006 fe38 	bl	8007c9c <HAL_TIM_Base_Start_IT>
//	使能串口接收中断
	HAL_UART_Receive_IT(&huart4, &Screen_data, 1);
 800102c:	2201      	movs	r2, #1
 800102e:	4996      	ldr	r1, [pc, #600]	@ (8001288 <main+0x2c0>)
 8001030:	4896      	ldr	r0, [pc, #600]	@ (800128c <main+0x2c4>)
 8001032:	f007 fc91 	bl	8008958 <HAL_UART_Receive_IT>
//	HWT101预留中断接口
	HAL_UART_Receive_IT(&huart2, &HwtData, 1);
 8001036:	2201      	movs	r2, #1
 8001038:	4995      	ldr	r1, [pc, #596]	@ (8001290 <main+0x2c8>)
 800103a:	4896      	ldr	r0, [pc, #600]	@ (8001294 <main+0x2cc>)
 800103c:	f007 fc8c 	bl	8008958 <HAL_UART_Receive_IT>
//	TX2通信接收中断
	HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 8001040:	2201      	movs	r2, #1
 8001042:	4995      	ldr	r1, [pc, #596]	@ (8001298 <main+0x2d0>)
 8001044:	4895      	ldr	r0, [pc, #596]	@ (800129c <main+0x2d4>)
 8001046:	f007 fc87 	bl	8008958 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart9, &data, 1);
 800104a:	2201      	movs	r2, #1
 800104c:	4994      	ldr	r1, [pc, #592]	@ (80012a0 <main+0x2d8>)
 800104e:	4895      	ldr	r0, [pc, #596]	@ (80012a4 <main+0x2dc>)
 8001050:	f007 fc82 	bl	8008958 <HAL_UART_Receive_IT>
//	HAL_UART_Receive_IT(&huart10, &Joy_data, 1);

	PID_Init();
 8001054:	f00a ffac 	bl	800bfb0 <PID_Init>
//				Check_Joydata();
//				HAL_Delay(100);
//			}
//		}

		if(Ready_Flag == 1)
 8001058:	4b93      	ldr	r3, [pc, #588]	@ (80012a8 <main+0x2e0>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d104      	bne.n	800106a <main+0xa2>
		{
			Ready_Flag = 0;
 8001060:	4b91      	ldr	r3, [pc, #580]	@ (80012a8 <main+0x2e0>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
//			整定车身
			Check_Status();
 8001066:	f00d f8a7 	bl	800e1b8 <Check_Status>
		}
		if (System_Flag == 1) {
 800106a:	4b90      	ldr	r3, [pc, #576]	@ (80012ac <main+0x2e4>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d1f2      	bne.n	8001058 <main+0x90>
			System_Flag = 0;
 8001072:	4b8e      	ldr	r3, [pc, #568]	@ (80012ac <main+0x2e4>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
//			向TX2发送字符串"e1f"
			HAL_UART_Transmit(&huart10, (uint8_t*) "e1f", sizeof("elf") - 1,0x1000);
 8001078:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800107c:	2203      	movs	r2, #3
 800107e:	498c      	ldr	r1, [pc, #560]	@ (80012b0 <main+0x2e8>)
 8001080:	4886      	ldr	r0, [pc, #536]	@ (800129c <main+0x2d4>)
 8001082:	f007 fb13 	bl	80086ac <HAL_UART_Transmit>

//			Move_Left(50,50,8000);
///////////////////////////////////////////////////////////////////////////////////////////////////////////
			/***********************运行逻辑-状态机*************************/
			while (1) {
				switch (flag) {
 8001086:	4b8b      	ldr	r3, [pc, #556]	@ (80012b4 <main+0x2ec>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	2b0d      	cmp	r3, #13
 800108c:	f200 80f1 	bhi.w	8001272 <main+0x2aa>
 8001090:	a201      	add	r2, pc, #4	@ (adr r2, 8001098 <main+0xd0>)
 8001092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001096:	bf00      	nop
 8001098:	080010d1 	.word	0x080010d1
 800109c:	080010e9 	.word	0x080010e9
 80010a0:	08001113 	.word	0x08001113
 80010a4:	08001123 	.word	0x08001123
 80010a8:	08001145 	.word	0x08001145
 80010ac:	08001165 	.word	0x08001165
 80010b0:	08001179 	.word	0x08001179
 80010b4:	080011a5 	.word	0x080011a5
 80010b8:	080011c5 	.word	0x080011c5
 80010bc:	080011f1 	.word	0x080011f1
 80010c0:	08001213 	.word	0x08001213
 80010c4:	08001233 	.word	0x08001233
 80010c8:	08001243 	.word	0x08001243
 80010cc:	08001263 	.word	0x08001263
				case 0:  //发车，进入扫码区
//					X轴建议移动到150左右
					Move_TO_Saomaqu(2400, 8250);
 80010d0:	eddf 0a79 	vldr	s1, [pc, #484]	@ 80012b8 <main+0x2f0>
 80010d4:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 80012bc <main+0x2f4>
 80010d8:	f00b fce4 	bl	800caa4 <Move_TO_Saomaqu>
					Start();    //5400处
 80010dc:	f00a fa80 	bl	800b5e0 <Start>
					flag = 1;
 80010e0:	4b74      	ldr	r3, [pc, #464]	@ (80012b4 <main+0x2ec>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	801a      	strh	r2, [r3, #0]
					break;
 80010e6:	e0c7      	b.n	8001278 <main+0x2b0>
//					Drop_Location_jiang(200, 120, 4000);
				case 1:  //离开扫码区，进入原料区
//					物料理想点位 375
					Move_TO_yuanliaoqu(10500);
 80010e8:	ed9f 0a75 	vldr	s0, [pc, #468]	@ 80012c0 <main+0x2f8>
 80010ec:	f00b fcfc 	bl	800cae8 <Move_TO_yuanliaoqu>

//					X参考150 Y参考1430
					Move_Action_Nopid_Left_Ctrl(150, 1455);  //ACTION调整
 80010f0:	eddf 0a74 	vldr	s1, [pc, #464]	@ 80012c4 <main+0x2fc>
 80010f4:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 80012c8 <main+0x300>
 80010f8:	f00b fdce 	bl	800cc98 <Move_Action_Nopid_Left_Ctrl>
//					检查TX2是否传递物料值
					while(Point_Flag != 1)
 80010fc:	bf00      	nop
 80010fe:	4b73      	ldr	r3, [pc, #460]	@ (80012cc <main+0x304>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d1fb      	bne.n	80010fe <main+0x136>
					{
						;  //如果Point_Flag值不为1,则在此处等待
					}
//					TODO:应该在物料抓取函数中实现基于TX2的物料点位闭环
					Frist_Grab_Wuliao();
 8001106:	f00a fb19 	bl	800b73c <Frist_Grab_Wuliao>
					flag = 2;
 800110a:	4b6a      	ldr	r3, [pc, #424]	@ (80012b4 <main+0x2ec>)
 800110c:	2202      	movs	r2, #2
 800110e:	801a      	strh	r2, [r3, #0]
					break;
 8001110:	e0b2      	b.n	8001278 <main+0x2b0>

				case 2:  //离开原料区，进入加工区

					Move_TO_jianzhi1(4500, 4335);
 8001112:	eddf 0a6f 	vldr	s1, [pc, #444]	@ 80012d0 <main+0x308>
 8001116:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 80012d4 <main+0x30c>
 800111a:	f00b fcfb 	bl	800cb14 <Move_TO_jianzhi1>
					while(1)
 800111e:	bf00      	nop
 8001120:	e7fd      	b.n	800111e <main+0x156>
					Move_Action_Nopid_Forward_Ctrl(160, 1070);
					flag = 3;
					break;
				case 3:    //暂存�?

					Move_TO_zancunqu(22000, 4335);
 8001122:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 80012d0 <main+0x308>
 8001126:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 80012d8 <main+0x310>
 800112a:	f00b fd18 	bl	800cb5e <Move_TO_zancunqu>
					put_wuliao_to_circular_frist();
 800112e:	f00a fb87 	bl	800b840 <put_wuliao_to_circular_frist>
					put_wuliao_to_Car_frist();
 8001132:	f00a fc09 	bl	800b948 <put_wuliao_to_Car_frist>
					HAL_Delay(yanshi);
 8001136:	2032      	movs	r0, #50	@ 0x32
 8001138:	f001 fd54 	bl	8002be4 <HAL_Delay>
					flag = 4;
 800113c:	4b5d      	ldr	r3, [pc, #372]	@ (80012b4 <main+0x2ec>)
 800113e:	2204      	movs	r2, #4
 8001140:	801a      	strh	r2, [r3, #0]
					break;
 8001142:	e099      	b.n	8001278 <main+0x2b0>
				case 4:
					Move_TO_jianzhi2(9000, 4335);     //ACTION调整
 8001144:	eddf 0a62 	vldr	s1, [pc, #392]	@ 80012d0 <main+0x308>
 8001148:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 80012dc <main+0x314>
 800114c:	f00b fd2c 	bl	800cba8 <Move_TO_jianzhi2>
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 8001150:	eddf 0a63 	vldr	s1, [pc, #396]	@ 80012e0 <main+0x318>
 8001154:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 80012e4 <main+0x31c>
 8001158:	f00b fefe 	bl	800cf58 <Move_Action_Nopid_Forward_Ctrl>
					flag = 5;
 800115c:	4b55      	ldr	r3, [pc, #340]	@ (80012b4 <main+0x2ec>)
 800115e:	2205      	movs	r2, #5
 8001160:	801a      	strh	r2, [r3, #0]
					break;
 8001162:	e089      	b.n	8001278 <main+0x2b0>
				case 5:       //粗加工区
					Move_TO_cujiagongqu(10000);
 8001164:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 80012e8 <main+0x320>
 8001168:	f00b fd43 	bl	800cbf2 <Move_TO_cujiagongqu>
					put_wuliao_to_circular_second();
 800116c:	f00a fc70 	bl	800ba50 <put_wuliao_to_circular_second>
					flag = 6;
 8001170:	4b50      	ldr	r3, [pc, #320]	@ (80012b4 <main+0x2ec>)
 8001172:	2206      	movs	r2, #6
 8001174:	801a      	strh	r2, [r3, #0]
					break;
 8001176:	e07f      	b.n	8001278 <main+0x2b0>
				case 6:
					Move_TO_jianzhi3(9000, 4335);
 8001178:	eddf 0a55 	vldr	s1, [pc, #340]	@ 80012d0 <main+0x308>
 800117c:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 80012dc <main+0x314>
 8001180:	f00b fd4d 	bl	800cc1e <Move_TO_jianzhi3>
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 8001184:	eddf 0a56 	vldr	s1, [pc, #344]	@ 80012e0 <main+0x318>
 8001188:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 80012ec <main+0x324>
 800118c:	f00b fd84 	bl	800cc98 <Move_Action_Nopid_Left_Ctrl>
					Drop_Location_jiang(50, 50, 11000);
 8001190:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8001194:	2132      	movs	r1, #50	@ 0x32
 8001196:	2032      	movs	r0, #50	@ 0x32
 8001198:	f00b fbe6 	bl	800c968 <Drop_Location_jiang>
					flag = 7;
 800119c:	4b45      	ldr	r3, [pc, #276]	@ (80012b4 <main+0x2ec>)
 800119e:	2207      	movs	r2, #7
 80011a0:	801a      	strh	r2, [r3, #0]
					break;
 80011a2:	e069      	b.n	8001278 <main+0x2b0>
				case 7:      //原料�?
					Move_TO_fanyuanliaoqu(4000);
 80011a4:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 80012f0 <main+0x328>
 80011a8:	f00b fd5e 	bl	800cc68 <Move_TO_fanyuanliaoqu>
					Move_Action_Nopid_Left_Ctrl(160, 1400);      //ACTION调整
 80011ac:	eddf 0a51 	vldr	s1, [pc, #324]	@ 80012f4 <main+0x32c>
 80011b0:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 80012f8 <main+0x330>
 80011b4:	f00b fd70 	bl	800cc98 <Move_Action_Nopid_Left_Ctrl>
					Second_Run_Frist_Grab_Wuliao();
 80011b8:	f00a fcd6 	bl	800bb68 <Second_Run_Frist_Grab_Wuliao>
					flag = 8;
 80011bc:	4b3d      	ldr	r3, [pc, #244]	@ (80012b4 <main+0x2ec>)
 80011be:	2208      	movs	r2, #8
 80011c0:	801a      	strh	r2, [r3, #0]
					break;
 80011c2:	e059      	b.n	8001278 <main+0x2b0>
				case 8:
					Move_TO_jianzhi1(4500, 4335);
 80011c4:	eddf 0a42 	vldr	s1, [pc, #264]	@ 80012d0 <main+0x308>
 80011c8:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 80012d4 <main+0x30c>
 80011cc:	f00b fca2 	bl	800cb14 <Move_TO_jianzhi1>
					Drop_Location_jiang(50, 50, 11000);
 80011d0:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80011d4:	2132      	movs	r1, #50	@ 0x32
 80011d6:	2032      	movs	r0, #50	@ 0x32
 80011d8:	f00b fbc6 	bl	800c968 <Drop_Location_jiang>
					Move_Action_Nopid_Forward_Ctrl(160, 1070);
 80011dc:	eddf 0a47 	vldr	s1, [pc, #284]	@ 80012fc <main+0x334>
 80011e0:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 80012f8 <main+0x330>
 80011e4:	f00b feb8 	bl	800cf58 <Move_Action_Nopid_Forward_Ctrl>
					flag = 9;
 80011e8:	4b32      	ldr	r3, [pc, #200]	@ (80012b4 <main+0x2ec>)
 80011ea:	2209      	movs	r2, #9
 80011ec:	801a      	strh	r2, [r3, #0]
					break;
 80011ee:	e043      	b.n	8001278 <main+0x2b0>
				case 9:    //暂存�?
					Move_TO_zancunqu(22000, 4335);
 80011f0:	eddf 0a37 	vldr	s1, [pc, #220]	@ 80012d0 <main+0x308>
 80011f4:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 80012d8 <main+0x310>
 80011f8:	f00b fcb1 	bl	800cb5e <Move_TO_zancunqu>
					Second_Run_put_wuliao_to_circular_frist();
 80011fc:	f00a fd98 	bl	800bd30 <Second_Run_put_wuliao_to_circular_frist>

					Second_Run_put_wuliao_to_Car_frist();
 8001200:	f00a fd12 	bl	800bc28 <Second_Run_put_wuliao_to_Car_frist>
					HAL_Delay(yanshi);
 8001204:	2032      	movs	r0, #50	@ 0x32
 8001206:	f001 fced 	bl	8002be4 <HAL_Delay>
					flag = 10;
 800120a:	4b2a      	ldr	r3, [pc, #168]	@ (80012b4 <main+0x2ec>)
 800120c:	220a      	movs	r2, #10
 800120e:	801a      	strh	r2, [r3, #0]
					break;
 8001210:	e032      	b.n	8001278 <main+0x2b0>
				case 10:
					Move_TO_jianzhi2(9000, 4335);     //ACTION调整
 8001212:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 80012d0 <main+0x308>
 8001216:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 80012dc <main+0x314>
 800121a:	f00b fcc5 	bl	800cba8 <Move_TO_jianzhi2>
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 800121e:	eddf 0a30 	vldr	s1, [pc, #192]	@ 80012e0 <main+0x318>
 8001222:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80012e4 <main+0x31c>
 8001226:	f00b fe97 	bl	800cf58 <Move_Action_Nopid_Forward_Ctrl>
					flag = 11;
 800122a:	4b22      	ldr	r3, [pc, #136]	@ (80012b4 <main+0x2ec>)
 800122c:	220b      	movs	r2, #11
 800122e:	801a      	strh	r2, [r3, #0]
					break;
 8001230:	e022      	b.n	8001278 <main+0x2b0>
				case 11:       //粗加工区
					Move_TO_cujiagongqu(10000);
 8001232:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80012e8 <main+0x320>
 8001236:	f00b fcdc 	bl	800cbf2 <Move_TO_cujiagongqu>

					flag = 12;
 800123a:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <main+0x2ec>)
 800123c:	220c      	movs	r2, #12
 800123e:	801a      	strh	r2, [r3, #0]
					break;
 8001240:	e01a      	b.n	8001278 <main+0x2b0>
				case 12:
					Move_TO_jianzhi3(9000, 4335);
 8001242:	eddf 0a23 	vldr	s1, [pc, #140]	@ 80012d0 <main+0x308>
 8001246:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80012dc <main+0x314>
 800124a:	f00b fce8 	bl	800cc1e <Move_TO_jianzhi3>
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 800124e:	eddf 0a24 	vldr	s1, [pc, #144]	@ 80012e0 <main+0x318>
 8001252:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 80012ec <main+0x324>
 8001256:	f00b fd1f 	bl	800cc98 <Move_Action_Nopid_Left_Ctrl>
					flag = 13;
 800125a:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <main+0x2ec>)
 800125c:	220d      	movs	r2, #13
 800125e:	801a      	strh	r2, [r3, #0]
					break;
 8001260:	e00a      	b.n	8001278 <main+0x2b0>
				case 13:      //原料�?
					Move_TO_fanyuanliaoqu(22000);
 8001262:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80012d8 <main+0x310>
 8001266:	f00b fcff 	bl	800cc68 <Move_TO_fanyuanliaoqu>
					flag = 14;
 800126a:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <main+0x2ec>)
 800126c:	220e      	movs	r2, #14
 800126e:	801a      	strh	r2, [r3, #0]
					break;
 8001270:	e002      	b.n	8001278 <main+0x2b0>
				default:
					Move_Stop();
 8001272:	f00b fc01 	bl	800ca78 <Move_Stop>
					break;
 8001276:	bf00      	nop
				switch (flag) {
 8001278:	e705      	b.n	8001086 <main+0xbe>
 800127a:	bf00      	nop
 800127c:	24000490 	.word	0x24000490
 8001280:	24000528 	.word	0x24000528
 8001284:	240004dc 	.word	0x240004dc
 8001288:	2400034b 	.word	0x2400034b
 800128c:	24000574 	.word	0x24000574
 8001290:	2400034c 	.word	0x2400034c
 8001294:	24000858 	.word	0x24000858
 8001298:	2400034d 	.word	0x2400034d
 800129c:	24000a14 	.word	0x24000a14
 80012a0:	2400034a 	.word	0x2400034a
 80012a4:	240007c4 	.word	0x240007c4
 80012a8:	24000cd7 	.word	0x24000cd7
 80012ac:	24000cd6 	.word	0x24000cd6
 80012b0:	08013068 	.word	0x08013068
 80012b4:	24000478 	.word	0x24000478
 80012b8:	4600e800 	.word	0x4600e800
 80012bc:	45160000 	.word	0x45160000
 80012c0:	46241000 	.word	0x46241000
 80012c4:	44b5e000 	.word	0x44b5e000
 80012c8:	43160000 	.word	0x43160000
 80012cc:	2400045c 	.word	0x2400045c
 80012d0:	45877800 	.word	0x45877800
 80012d4:	458ca000 	.word	0x458ca000
 80012d8:	46abe000 	.word	0x46abe000
 80012dc:	460ca000 	.word	0x460ca000
 80012e0:	44e88000 	.word	0x44e88000
 80012e4:	44e9c000 	.word	0x44e9c000
 80012e8:	461c4000 	.word	0x461c4000
 80012ec:	432a0000 	.word	0x432a0000
 80012f0:	457a0000 	.word	0x457a0000
 80012f4:	44af0000 	.word	0x44af0000
 80012f8:	43200000 	.word	0x43200000
 80012fc:	4485c000 	.word	0x4485c000

08001300 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b09c      	sub	sp, #112	@ 0x70
 8001304:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130a:	224c      	movs	r2, #76	@ 0x4c
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f00e fde7 	bl	800fee2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2220      	movs	r2, #32
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f00e fde1 	bl	800fee2 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001320:	2002      	movs	r0, #2
 8001322:	f003 ff01 	bl	8005128 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4b2b      	ldr	r3, [pc, #172]	@ (80013d8 <SystemClock_Config+0xd8>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	4a2a      	ldr	r2, [pc, #168]	@ (80013d8 <SystemClock_Config+0xd8>)
 8001330:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001334:	6193      	str	r3, [r2, #24]
 8001336:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <SystemClock_Config+0xd8>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001342:	bf00      	nop
 8001344:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <SystemClock_Config+0xd8>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800134c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001350:	d1f8      	bne.n	8001344 <SystemClock_Config+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001352:	2301      	movs	r3, #1
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001356:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135c:	2302      	movs	r3, #2
 800135e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001360:	2302      	movs	r3, #2
 8001362:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 8001364:	2302      	movs	r3, #2
 8001366:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 44;
 8001368:	232c      	movs	r3, #44	@ 0x2c
 800136a:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 800136c:	2301      	movs	r3, #1
 800136e:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001370:	2302      	movs	r3, #2
 8001372:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001374:	2302      	movs	r3, #2
 8001376:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001378:	230c      	movs	r3, #12
 800137a:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800137c:	2300      	movs	r3, #0
 800137e:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001388:	4618      	mov	r0, r3
 800138a:	f003 ff07 	bl	800519c <HAL_RCC_OscConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0x98>
		Error_Handler();
 8001394:	f000 f99a 	bl	80016cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001398:	233f      	movs	r3, #63	@ 0x3f
 800139a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139c:	2303      	movs	r3, #3
 800139e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013a4:	2308      	movs	r3, #8
 80013a6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013a8:	2340      	movs	r3, #64	@ 0x40
 80013aa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013ac:	2340      	movs	r3, #64	@ 0x40
 80013ae:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013b4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013b6:	2340      	movs	r3, #64	@ 0x40
 80013b8:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2103      	movs	r1, #3
 80013be:	4618      	mov	r0, r3
 80013c0:	f004 fac6 	bl	8005950 <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0xce>
		Error_Handler();
 80013ca:	f000 f97f 	bl	80016cc <Error_Handler>
	}
}
 80013ce:	bf00      	nop
 80013d0:	3770      	adds	r7, #112	@ 0x70
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	58024800 	.word	0x58024800

080013dc <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*) &ch, 1, 0xFFFF);
 80013e4:	1d39      	adds	r1, r7, #4
 80013e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013ea:	2201      	movs	r2, #1
 80013ec:	4803      	ldr	r0, [pc, #12]	@ (80013fc <__io_putchar+0x20>)
 80013ee:	f007 f95d 	bl	80086ac <HAL_UART_Transmit>
	return ch;
 80013f2:	687b      	ldr	r3, [r7, #4]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	24000574 	.word	0x24000574

08001400 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af04      	add	r7, sp, #16
 8001406:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART9)                          // 判断中断源
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a50      	ldr	r2, [pc, #320]	@ (8001550 <HAL_UART_RxCpltCallback+0x150>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d10a      	bne.n	8001428 <HAL_UART_RxCpltCallback+0x28>
	{
		Data_Analyse(data);                                // 处理Action数据
 8001412:	4b50      	ldr	r3, [pc, #320]	@ (8001554 <HAL_UART_RxCpltCallback+0x154>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f009 fef2 	bl	800b200 <Data_Analyse>
		HAL_UART_Receive_IT(&huart9, &data, 1);            // 继续中断回调
 800141c:	2201      	movs	r2, #1
 800141e:	494d      	ldr	r1, [pc, #308]	@ (8001554 <HAL_UART_RxCpltCallback+0x154>)
 8001420:	484d      	ldr	r0, [pc, #308]	@ (8001558 <HAL_UART_RxCpltCallback+0x158>)
 8001422:	f007 fa99 	bl	8008958 <HAL_UART_Receive_IT>
 8001426:	e090      	b.n	800154a <HAL_UART_RxCpltCallback+0x14a>

	} else if (huart->Instance == UART4)                   // 判断中断源
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a4b      	ldr	r2, [pc, #300]	@ (800155c <HAL_UART_RxCpltCallback+0x15c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d10a      	bne.n	8001448 <HAL_UART_RxCpltCallback+0x48>
	{
		Check_Flag(Screen_data);                       	   // 处理串口屏数据
 8001432:	4b4b      	ldr	r3, [pc, #300]	@ (8001560 <HAL_UART_RxCpltCallback+0x160>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f00c fd48 	bl	800decc <Check_Flag>
		HAL_UART_Receive_IT(&huart4, &Screen_data, 1);     // 继续中断回调
 800143c:	2201      	movs	r2, #1
 800143e:	4948      	ldr	r1, [pc, #288]	@ (8001560 <HAL_UART_RxCpltCallback+0x160>)
 8001440:	4848      	ldr	r0, [pc, #288]	@ (8001564 <HAL_UART_RxCpltCallback+0x164>)
 8001442:	f007 fa89 	bl	8008958 <HAL_UART_Receive_IT>
 8001446:	e080      	b.n	800154a <HAL_UART_RxCpltCallback+0x14a>
	}

	else if (huart->Instance == USART10) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a46      	ldr	r2, [pc, #280]	@ (8001568 <HAL_UART_RxCpltCallback+0x168>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d17b      	bne.n	800154a <HAL_UART_RxCpltCallback+0x14a>
		//static uint8_t RxState = 0;

		RxBuffer[Uart10_Rx_Cnt++] = aRxBuffer;
 8001452:	4b46      	ldr	r3, [pc, #280]	@ (800156c <HAL_UART_RxCpltCallback+0x16c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	b2d1      	uxtb	r1, r2
 800145a:	4a44      	ldr	r2, [pc, #272]	@ (800156c <HAL_UART_RxCpltCallback+0x16c>)
 800145c:	7011      	strb	r1, [r2, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	4b43      	ldr	r3, [pc, #268]	@ (8001570 <HAL_UART_RxCpltCallback+0x170>)
 8001462:	7819      	ldrb	r1, [r3, #0]
 8001464:	4b43      	ldr	r3, [pc, #268]	@ (8001574 <HAL_UART_RxCpltCallback+0x174>)
 8001466:	5499      	strb	r1, [r3, r2]
			memset(RxBuffer, 0, sizeof(RxBuffer));
			Uart10_Rx_Cnt = 0;
			return;
		}

		if (aRxBuffer == 'd') { // 如果包尾是'd'，说明是物料和圆环点位数据
 8001468:	4b41      	ldr	r3, [pc, #260]	@ (8001570 <HAL_UART_RxCpltCallback+0x170>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b64      	cmp	r3, #100	@ 0x64
 800146e:	d12e      	bne.n	80014ce <HAL_UART_RxCpltCallback+0xce>
			char *start = strchr(RxBuffer, 'a');
 8001470:	2161      	movs	r1, #97	@ 0x61
 8001472:	4840      	ldr	r0, [pc, #256]	@ (8001574 <HAL_UART_RxCpltCallback+0x174>)
 8001474:	f00e fd3d 	bl	800fef2 <strchr>
 8001478:	6178      	str	r0, [r7, #20]
			char *end = strchr(RxBuffer, 'd');
 800147a:	2164      	movs	r1, #100	@ 0x64
 800147c:	483d      	ldr	r0, [pc, #244]	@ (8001574 <HAL_UART_RxCpltCallback+0x174>)
 800147e:	f00e fd38 	bl	800fef2 <strchr>
 8001482:	6138      	str	r0, [r7, #16]

			if (start != NULL && end != NULL && end > start) {
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d021      	beq.n	80014ce <HAL_UART_RxCpltCallback+0xce>
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d01e      	beq.n	80014ce <HAL_UART_RxCpltCallback+0xce>
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	429a      	cmp	r2, r3
 8001496:	d91a      	bls.n	80014ce <HAL_UART_RxCpltCallback+0xce>
				*end = '\0';
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
				if (sscanf(start + 1, "%f,%f,%d", &x, &y, &colour) == 3) {
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	1c58      	adds	r0, r3, #1
 80014a2:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <HAL_UART_RxCpltCallback+0x178>)
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	4b35      	ldr	r3, [pc, #212]	@ (800157c <HAL_UART_RxCpltCallback+0x17c>)
 80014a8:	4a35      	ldr	r2, [pc, #212]	@ (8001580 <HAL_UART_RxCpltCallback+0x180>)
 80014aa:	4936      	ldr	r1, [pc, #216]	@ (8001584 <HAL_UART_RxCpltCallback+0x184>)
 80014ac:	f00e fcaa 	bl	800fe04 <siscanf>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d102      	bne.n	80014bc <HAL_UART_RxCpltCallback+0xbc>
					// 数据解析成功
					Point_Flag = 1;
 80014b6:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <HAL_UART_RxCpltCallback+0x188>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
				}

				// 清空缓冲区
				memset(RxBuffer, 0, sizeof(RxBuffer));
 80014bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014c0:	2100      	movs	r1, #0
 80014c2:	482c      	ldr	r0, [pc, #176]	@ (8001574 <HAL_UART_RxCpltCallback+0x174>)
 80014c4:	f00e fd0d 	bl	800fee2 <memset>
				Uart10_Rx_Cnt = 0;
 80014c8:	4b28      	ldr	r3, [pc, #160]	@ (800156c <HAL_UART_RxCpltCallback+0x16c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
			}
		}

		if (aRxBuffer == 'b') { // 如果包尾是'b'，说明是二维码数据
 80014ce:	4b28      	ldr	r3, [pc, #160]	@ (8001570 <HAL_UART_RxCpltCallback+0x170>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b62      	cmp	r3, #98	@ 0x62
 80014d4:	d134      	bne.n	8001540 <HAL_UART_RxCpltCallback+0x140>
			char *start = strchr(RxBuffer, 'c');
 80014d6:	2163      	movs	r1, #99	@ 0x63
 80014d8:	4826      	ldr	r0, [pc, #152]	@ (8001574 <HAL_UART_RxCpltCallback+0x174>)
 80014da:	f00e fd0a 	bl	800fef2 <strchr>
 80014de:	60f8      	str	r0, [r7, #12]
			char *end = strchr(RxBuffer, 'b');
 80014e0:	2162      	movs	r1, #98	@ 0x62
 80014e2:	4824      	ldr	r0, [pc, #144]	@ (8001574 <HAL_UART_RxCpltCallback+0x174>)
 80014e4:	f00e fd05 	bl	800fef2 <strchr>
 80014e8:	60b8      	str	r0, [r7, #8]

			if (start != NULL && end != NULL && end > start) {
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d027      	beq.n	8001540 <HAL_UART_RxCpltCallback+0x140>
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d024      	beq.n	8001540 <HAL_UART_RxCpltCallback+0x140>
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d920      	bls.n	8001540 <HAL_UART_RxCpltCallback+0x140>
				*end = '\0';
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
//				for (int i = 0; i < 6; i++) {
//					if (sscanf(start +1+ i, "%d", &QR_data[i])) {
				if (sscanf(start + 1, "%d,%d,%d,%d,%d,%d", &QR_data[0],
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1c58      	adds	r0, r3, #1
 8001508:	4b20      	ldr	r3, [pc, #128]	@ (800158c <HAL_UART_RxCpltCallback+0x18c>)
 800150a:	9303      	str	r3, [sp, #12]
 800150c:	4b20      	ldr	r3, [pc, #128]	@ (8001590 <HAL_UART_RxCpltCallback+0x190>)
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <HAL_UART_RxCpltCallback+0x194>)
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <HAL_UART_RxCpltCallback+0x198>)
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	4b20      	ldr	r3, [pc, #128]	@ (800159c <HAL_UART_RxCpltCallback+0x19c>)
 800151a:	4a21      	ldr	r2, [pc, #132]	@ (80015a0 <HAL_UART_RxCpltCallback+0x1a0>)
 800151c:	4921      	ldr	r1, [pc, #132]	@ (80015a4 <HAL_UART_RxCpltCallback+0x1a4>)
 800151e:	f00e fc71 	bl	800fe04 <siscanf>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <HAL_UART_RxCpltCallback+0x12e>
						&QR_data[1], &QR_data[2], &QR_data[3], &QR_data[4],
						&QR_data[5])) {
					// 数据解析成功
//						if(i==5) QR_Flag =  1;
					QR_Flag = 1;
 8001528:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <HAL_UART_RxCpltCallback+0x1a8>)
 800152a:	2201      	movs	r2, #1
 800152c:	601a      	str	r2, [r3, #0]
				}
//				}
				// 清空缓冲区
				memset(RxBuffer, 0, sizeof(RxBuffer));
 800152e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001532:	2100      	movs	r1, #0
 8001534:	480f      	ldr	r0, [pc, #60]	@ (8001574 <HAL_UART_RxCpltCallback+0x174>)
 8001536:	f00e fcd4 	bl	800fee2 <memset>
				Uart10_Rx_Cnt = 0;
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <HAL_UART_RxCpltCallback+0x16c>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
			}
		}
		// 重新启动接收
		HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 8001540:	2201      	movs	r2, #1
 8001542:	490b      	ldr	r1, [pc, #44]	@ (8001570 <HAL_UART_RxCpltCallback+0x170>)
 8001544:	4819      	ldr	r0, [pc, #100]	@ (80015ac <HAL_UART_RxCpltCallback+0x1ac>)
 8001546:	f007 fa07 	bl	8008958 <HAL_UART_Receive_IT>
//	else if (huart->Instance == USART10)                            // 判断中断
//	{
//		Recive_Joydata(Joy_data);                             	// 处理Joy_data数据
//		HAL_UART_Receive_IT(&huart10, &Joy_data, 1);       // 继续中断回调
//	}
}
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40011800 	.word	0x40011800
 8001554:	2400034a 	.word	0x2400034a
 8001558:	240007c4 	.word	0x240007c4
 800155c:	40004c00 	.word	0x40004c00
 8001560:	2400034b 	.word	0x2400034b
 8001564:	24000574 	.word	0x24000574
 8001568:	40011c00 	.word	0x40011c00
 800156c:	24000450 	.word	0x24000450
 8001570:	2400034d 	.word	0x2400034d
 8001574:	24000350 	.word	0x24000350
 8001578:	2400047c 	.word	0x2400047c
 800157c:	24000458 	.word	0x24000458
 8001580:	24000454 	.word	0x24000454
 8001584:	0801306c 	.word	0x0801306c
 8001588:	2400045c 	.word	0x2400045c
 800158c:	24000474 	.word	0x24000474
 8001590:	24000470 	.word	0x24000470
 8001594:	2400046c 	.word	0x2400046c
 8001598:	24000468 	.word	0x24000468
 800159c:	24000464 	.word	0x24000464
 80015a0:	24000460 	.word	0x24000460
 80015a4:	08013078 	.word	0x08013078
 80015a8:	24000484 	.word	0x24000484
 80015ac:	24000a14 	.word	0x24000a14

080015b0 <HAL_TIM_PeriodElapsedCallback>:
extern uint16_t time_tx;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a23      	ldr	r2, [pc, #140]	@ (8001648 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d106      	bne.n	80015ce <HAL_TIM_PeriodElapsedCallback+0x1e>

//		X_out = X_Ctrl(&XPID, x_goal);
//		Y_out = Y_Ctrl(&YPID, y_goal);
//		A_out = A_Ctrl(&APID, a_goal);
		Action_Show();
 80015c0:	f00c fb3c 	bl	800dc3c <Action_Show>
		QR_Show();
 80015c4:	f00c fbb6 	bl	800dd34 <QR_Show>
		Point_Show();
 80015c8:	f00c fbf0 	bl	800ddac <Point_Show>
		if (time5_jiancha != 0)
			time5_jiancha--;


	}
}
 80015cc:	e037      	b.n	800163e <HAL_TIM_PeriodElapsedCallback+0x8e>
	} else if (htim == &htim3) {
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a1e      	ldr	r2, [pc, #120]	@ (800164c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d126      	bne.n	8001624 <HAL_TIM_PeriodElapsedCallback+0x74>
		TX_X_out = Tx_X_Ctrl(&TXPID, tx_target);
 80015d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	481c      	ldr	r0, [pc, #112]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80015e2:	f00a fdd9 	bl	800c198 <Tx_X_Ctrl>
 80015e6:	4603      	mov	r3, r0
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f0:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80015f2:	edc3 7a00 	vstr	s15, [r3]
		TX_Y_out = Tx_Y_Ctrl(&TYPID, ty_target);
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001600:	4817      	ldr	r0, [pc, #92]	@ (8001660 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001602:	f00a fe6f 	bl	800c2e4 <Tx_Y_Ctrl>
 8001606:	4603      	mov	r3, r0
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001612:	edc3 7a00 	vstr	s15, [r3]
		time_tx++;
 8001616:	4b14      	ldr	r3, [pc, #80]	@ (8001668 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	b29a      	uxth	r2, r3
 800161e:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001620:	801a      	strh	r2, [r3, #0]
}
 8001622:	e00c      	b.n	800163e <HAL_TIM_PeriodElapsedCallback+0x8e>
	} else if (htim == &htim5) {
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a11      	ldr	r2, [pc, #68]	@ (800166c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d108      	bne.n	800163e <HAL_TIM_PeriodElapsedCallback+0x8e>
		if (time5_jiancha != 0)
 800162c:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d004      	beq.n	800163e <HAL_TIM_PeriodElapsedCallback+0x8e>
			time5_jiancha--;
 8001634:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3b01      	subs	r3, #1
 800163a:	4a0d      	ldr	r2, [pc, #52]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800163c:	6013      	str	r3, [r2, #0]
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	24000490 	.word	0x24000490
 800164c:	240004dc 	.word	0x240004dc
 8001650:	24000000 	.word	0x24000000
 8001654:	24000b80 	.word	0x24000b80
 8001658:	24000bd8 	.word	0x24000bd8
 800165c:	24000004 	.word	0x24000004
 8001660:	24000bac 	.word	0x24000bac
 8001664:	24000bdc 	.word	0x24000bdc
 8001668:	24000be4 	.word	0x24000be4
 800166c:	24000528 	.word	0x24000528
 8001670:	24000be0 	.word	0x24000be0

08001674 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 800167a:	463b      	mov	r3, r7
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8001686:	f001 fbe1 	bl	8002e4c <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800168a:	2301      	movs	r3, #1
 800168c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800168e:	2300      	movs	r3, #0
 8001690:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001696:	231f      	movs	r3, #31
 8001698:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 800169a:	2387      	movs	r3, #135	@ 0x87
 800169c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800169e:	2300      	movs	r3, #0
 80016a0:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80016a2:	2300      	movs	r3, #0
 80016a4:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016a6:	2301      	movs	r3, #1
 80016a8:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016aa:	2301      	movs	r3, #1
 80016ac:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016b6:	463b      	mov	r3, r7
 80016b8:	4618      	mov	r0, r3
 80016ba:	f001 fbff 	bl	8002ebc <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016be:	2004      	movs	r0, #4
 80016c0:	f001 fbdc 	bl	8002e7c <HAL_MPU_Enable>

}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <Error_Handler+0x8>

080016d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <HAL_MspInit+0x30>)
 80016e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016e4:	4a08      	ldr	r2, [pc, #32]	@ (8001708 <HAL_MspInit+0x30>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_MspInit+0x30>)
 80016f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	58024400 	.word	0x58024400

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <NMI_Handler+0x4>

08001714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <MemManage_Handler+0x4>

08001724 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <UsageFault_Handler+0x4>

08001734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001762:	f001 fa1f 	bl	8002ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001770:	4802      	ldr	r0, [pc, #8]	@ (800177c <FDCAN1_IT0_IRQHandler+0x10>)
 8001772:	f002 fe35 	bl	80043e0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	240002a0 	.word	0x240002a0

08001780 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <TIM2_IRQHandler+0x10>)
 8001786:	f006 fb0f 	bl	8007da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	24000490 	.word	0x24000490

08001794 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001798:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <TIM3_IRQHandler+0x10>)
 800179a:	f006 fb05 	bl	8007da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	240004dc 	.word	0x240004dc

080017a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017ac:	4802      	ldr	r0, [pc, #8]	@ (80017b8 <USART2_IRQHandler+0x10>)
 80017ae:	f007 f91f 	bl	80089f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	24000858 	.word	0x24000858

080017bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <USART3_IRQHandler+0x10>)
 80017c2:	f007 f915 	bl	80089f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	240008ec 	.word	0x240008ec

080017d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <TIM5_IRQHandler+0x10>)
 80017d6:	f006 fae7 	bl	8007da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	24000528 	.word	0x24000528

080017e4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <UART4_IRQHandler+0x10>)
 80017ea:	f007 f901 	bl	80089f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	24000574 	.word	0x24000574

080017f8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <UART7_IRQHandler+0x10>)
 80017fe:	f007 f8f7 	bl	80089f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2400069c 	.word	0x2400069c

0800180c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <UART8_IRQHandler+0x10>)
 8001812:	f007 f8ed 	bl	80089f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	24000730 	.word	0x24000730

08001820 <UART9_IRQHandler>:

/**
  * @brief This function handles UART9 global interrupt.
  */
void UART9_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART9_IRQn 0 */

  /* USER CODE END UART9_IRQn 0 */
  HAL_UART_IRQHandler(&huart9);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <UART9_IRQHandler+0x10>)
 8001826:	f007 f8e3 	bl	80089f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART9_IRQn 1 */

  /* USER CODE END UART9_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	240007c4 	.word	0x240007c4

08001834 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8001838:	4802      	ldr	r0, [pc, #8]	@ (8001844 <USART10_IRQHandler+0x10>)
 800183a:	f007 f8d9 	bl	80089f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	24000a14 	.word	0x24000a14

08001848 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
	return 1;
 800184c:	2301      	movs	r3, #1
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_kill>:

int _kill(int pid, int sig)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8001862:	f00e fbbf 	bl	800ffe4 <__errno>
 8001866:	4603      	mov	r3, r0
 8001868:	2216      	movs	r2, #22
 800186a:	601a      	str	r2, [r3, #0]
	return -1;
 800186c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_exit>:

void _exit(int status)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ffe7 	bl	8001858 <_kill>
	while (1)
 800188a:	bf00      	nop
 800188c:	e7fd      	b.n	800188a <_exit+0x12>

0800188e <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e00a      	b.n	80018b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018a0:	f3af 8000 	nop.w
 80018a4:	4601      	mov	r1, r0
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	60ba      	str	r2, [r7, #8]
 80018ac:	b2ca      	uxtb	r2, r1
 80018ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3301      	adds	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	dbf0      	blt.n	80018a0 <_read+0x12>
	}

	return len;
 80018be:	687b      	ldr	r3, [r7, #4]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	e009      	b.n	80018ee <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	60ba      	str	r2, [r7, #8]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fd7a 	bl	80013dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	3301      	adds	r3, #1
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	dbf1      	blt.n	80018da <_write+0x12>
	}
	return len;
 80018f6:	687b      	ldr	r3, [r7, #4]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <_close>:

int _close(int file)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001928:	605a      	str	r2, [r3, #4]
	return 0;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_isatty>:

int _isatty(int file)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800194e:	b480      	push	{r7}
 8001950:	b085      	sub	sp, #20
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001970:	4a14      	ldr	r2, [pc, #80]	@ (80019c4 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001972:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800197c:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <_sbrk+0x64>)
 8001986:	4a12      	ldr	r2, [pc, #72]	@ (80019d0 <_sbrk+0x68>)
 8001988:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	429a      	cmp	r2, r3
 8001996:	d207      	bcs.n	80019a8 <_sbrk+0x40>
		errno = ENOMEM;
 8001998:	f00e fb24 	bl	800ffe4 <__errno>
 800199c:	4603      	mov	r3, r0
 800199e:	220c      	movs	r2, #12
 80019a0:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
 80019a6:	e009      	b.n	80019bc <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80019a8:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80019ae:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	4a05      	ldr	r2, [pc, #20]	@ (80019cc <_sbrk+0x64>)
 80019b8:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	24050000 	.word	0x24050000
 80019c8:	00000400 	.word	0x00000400
 80019cc:	2400048c 	.word	0x2400048c
 80019d0:	24000e80 	.word	0x24000e80

080019d4 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80019d8:	4b32      	ldr	r3, [pc, #200]	@ (8001aa4 <SystemInit+0xd0>)
 80019da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019de:	4a31      	ldr	r2, [pc, #196]	@ (8001aa4 <SystemInit+0xd0>)
 80019e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019e8:	4b2f      	ldr	r3, [pc, #188]	@ (8001aa8 <SystemInit+0xd4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	2b06      	cmp	r3, #6
 80019f2:	d807      	bhi.n	8001a04 <SystemInit+0x30>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80019f4:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <SystemInit+0xd4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 030f 	bic.w	r3, r3, #15
 80019fc:	4a2a      	ldr	r2, [pc, #168]	@ (8001aa8 <SystemInit+0xd4>)
 80019fe:	f043 0307 	orr.w	r3, r3, #7
 8001a02:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001a04:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <SystemInit+0xd8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a28      	ldr	r2, [pc, #160]	@ (8001aac <SystemInit+0xd8>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001a10:	4b26      	ldr	r3, [pc, #152]	@ (8001aac <SystemInit+0xd8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001a16:	4b25      	ldr	r3, [pc, #148]	@ (8001aac <SystemInit+0xd8>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4924      	ldr	r1, [pc, #144]	@ (8001aac <SystemInit+0xd8>)
 8001a1c:	4b24      	ldr	r3, [pc, #144]	@ (8001ab0 <SystemInit+0xdc>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a22:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <SystemInit+0xd4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <SystemInit+0x6a>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <SystemInit+0xd4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 030f 	bic.w	r3, r3, #15
 8001a36:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa8 <SystemInit+0xd4>)
 8001a38:	f043 0307 	orr.w	r3, r3, #7
 8001a3c:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <SystemInit+0xd8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001a44:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <SystemInit+0xd8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001a4a:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <SystemInit+0xd8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001a50:	4b16      	ldr	r3, [pc, #88]	@ (8001aac <SystemInit+0xd8>)
 8001a52:	4a18      	ldr	r2, [pc, #96]	@ (8001ab4 <SystemInit+0xe0>)
 8001a54:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <SystemInit+0xd8>)
 8001a58:	4a17      	ldr	r2, [pc, #92]	@ (8001ab8 <SystemInit+0xe4>)
 8001a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001a5c:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <SystemInit+0xd8>)
 8001a5e:	4a17      	ldr	r2, [pc, #92]	@ (8001abc <SystemInit+0xe8>)
 8001a60:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8001a62:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <SystemInit+0xd8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001a68:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <SystemInit+0xd8>)
 8001a6a:	4a14      	ldr	r2, [pc, #80]	@ (8001abc <SystemInit+0xe8>)
 8001a6c:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <SystemInit+0xd8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8001a74:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <SystemInit+0xd8>)
 8001a76:	4a11      	ldr	r2, [pc, #68]	@ (8001abc <SystemInit+0xe8>)
 8001a78:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <SystemInit+0xd8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8001a80:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <SystemInit+0xd8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a09      	ldr	r2, [pc, #36]	@ (8001aac <SystemInit+0xd8>)
 8001a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a8a:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001a8c:	4b07      	ldr	r3, [pc, #28]	@ (8001aac <SystemInit+0xd8>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	661a      	str	r2, [r3, #96]	@ 0x60
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <SystemInit+0xec>)
 8001a94:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001a98:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00
 8001aa8:	52002000 	.word	0x52002000
 8001aac:	58024400 	.word	0x58024400
 8001ab0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ab4:	02020200 	.word	0x02020200
 8001ab8:	01ff0000 	.word	0x01ff0000
 8001abc:	01010280 	.word	0x01010280
 8001ac0:	52004000 	.word	0x52004000

08001ac4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <MX_TIM2_Init+0x98>)
 8001ae4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ae8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 550-1;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <MX_TIM2_Init+0x98>)
 8001aec:	f240 2225 	movw	r2, #549	@ 0x225
 8001af0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <MX_TIM2_Init+0x98>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001af8:	4b18      	ldr	r3, [pc, #96]	@ (8001b5c <MX_TIM2_Init+0x98>)
 8001afa:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001afe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b00:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <MX_TIM2_Init+0x98>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <MX_TIM2_Init+0x98>)
 8001b08:	2280      	movs	r2, #128	@ 0x80
 8001b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b0c:	4813      	ldr	r0, [pc, #76]	@ (8001b5c <MX_TIM2_Init+0x98>)
 8001b0e:	f006 f86d 	bl	8007bec <HAL_TIM_Base_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001b18:	f7ff fdd8 	bl	80016cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b22:	f107 0310 	add.w	r3, r7, #16
 8001b26:	4619      	mov	r1, r3
 8001b28:	480c      	ldr	r0, [pc, #48]	@ (8001b5c <MX_TIM2_Init+0x98>)
 8001b2a:	f006 fa45 	bl	8007fb8 <HAL_TIM_ConfigClockSource>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001b34:	f7ff fdca 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	@ (8001b5c <MX_TIM2_Init+0x98>)
 8001b46:	f006 fca7 	bl	8008498 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001b50:	f7ff fdbc 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	24000490 	.word	0x24000490

08001b60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf8 <MX_TIM3_Init+0x98>)
 8001b80:	4a1e      	ldr	r2, [pc, #120]	@ (8001bfc <MX_TIM3_Init+0x9c>)
 8001b82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 550-1;
 8001b84:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <MX_TIM3_Init+0x98>)
 8001b86:	f240 2225 	movw	r2, #549	@ 0x225
 8001b8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <MX_TIM3_Init+0x98>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001b92:	4b19      	ldr	r3, [pc, #100]	@ (8001bf8 <MX_TIM3_Init+0x98>)
 8001b94:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001b98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9a:	4b17      	ldr	r3, [pc, #92]	@ (8001bf8 <MX_TIM3_Init+0x98>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba0:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <MX_TIM3_Init+0x98>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ba6:	4814      	ldr	r0, [pc, #80]	@ (8001bf8 <MX_TIM3_Init+0x98>)
 8001ba8:	f006 f820 	bl	8007bec <HAL_TIM_Base_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001bb2:	f7ff fd8b 	bl	80016cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bbc:	f107 0310 	add.w	r3, r7, #16
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480d      	ldr	r0, [pc, #52]	@ (8001bf8 <MX_TIM3_Init+0x98>)
 8001bc4:	f006 f9f8 	bl	8007fb8 <HAL_TIM_ConfigClockSource>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001bce:	f7ff fd7d 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4806      	ldr	r0, [pc, #24]	@ (8001bf8 <MX_TIM3_Init+0x98>)
 8001be0:	f006 fc5a 	bl	8008498 <HAL_TIMEx_MasterConfigSynchronization>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001bea:	f7ff fd6f 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	240004dc 	.word	0x240004dc
 8001bfc:	40000400 	.word	0x40000400

08001c00 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c06:	f107 0310 	add.w	r3, r7, #16
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <MX_TIM5_Init+0x98>)
 8001c20:	4a1e      	ldr	r2, [pc, #120]	@ (8001c9c <MX_TIM5_Init+0x9c>)
 8001c22:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 550-1;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	@ (8001c98 <MX_TIM5_Init+0x98>)
 8001c26:	f240 2225 	movw	r2, #549	@ 0x225
 8001c2a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c98 <MX_TIM5_Init+0x98>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8001c32:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <MX_TIM5_Init+0x98>)
 8001c34:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c38:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3a:	4b17      	ldr	r3, [pc, #92]	@ (8001c98 <MX_TIM5_Init+0x98>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <MX_TIM5_Init+0x98>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c46:	4814      	ldr	r0, [pc, #80]	@ (8001c98 <MX_TIM5_Init+0x98>)
 8001c48:	f005 ffd0 	bl	8007bec <HAL_TIM_Base_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001c52:	f7ff fd3b 	bl	80016cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	4619      	mov	r1, r3
 8001c62:	480d      	ldr	r0, [pc, #52]	@ (8001c98 <MX_TIM5_Init+0x98>)
 8001c64:	f006 f9a8 	bl	8007fb8 <HAL_TIM_ConfigClockSource>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001c6e:	f7ff fd2d 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4806      	ldr	r0, [pc, #24]	@ (8001c98 <MX_TIM5_Init+0x98>)
 8001c80:	f006 fc0a 	bl	8008498 <HAL_TIMEx_MasterConfigSynchronization>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001c8a:	f7ff fd1f 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	3720      	adds	r7, #32
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	24000528 	.word	0x24000528
 8001c9c:	40000c00 	.word	0x40000c00

08001ca0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cb0:	d117      	bne.n	8001ce2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d5c <HAL_TIM_Base_MspInit+0xbc>)
 8001cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cb8:	4a28      	ldr	r2, [pc, #160]	@ (8001d5c <HAL_TIM_Base_MspInit+0xbc>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cc2:	4b26      	ldr	r3, [pc, #152]	@ (8001d5c <HAL_TIM_Base_MspInit+0xbc>)
 8001cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 11, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	210b      	movs	r1, #11
 8001cd4:	201c      	movs	r0, #28
 8001cd6:	f001 f884 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cda:	201c      	movs	r0, #28
 8001cdc:	f001 f89b 	bl	8002e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001ce0:	e038      	b.n	8001d54 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d60 <HAL_TIM_Base_MspInit+0xc0>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d117      	bne.n	8001d1c <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cec:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <HAL_TIM_Base_MspInit+0xbc>)
 8001cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d5c <HAL_TIM_Base_MspInit+0xbc>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cfc:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <HAL_TIM_Base_MspInit+0xbc>)
 8001cfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2102      	movs	r1, #2
 8001d0e:	201d      	movs	r0, #29
 8001d10:	f001 f867 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d14:	201d      	movs	r0, #29
 8001d16:	f001 f87e 	bl	8002e16 <HAL_NVIC_EnableIRQ>
}
 8001d1a:	e01b      	b.n	8001d54 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM5)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a10      	ldr	r2, [pc, #64]	@ (8001d64 <HAL_TIM_Base_MspInit+0xc4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d116      	bne.n	8001d54 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d26:	4b0d      	ldr	r3, [pc, #52]	@ (8001d5c <HAL_TIM_Base_MspInit+0xbc>)
 8001d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d5c <HAL_TIM_Base_MspInit+0xbc>)
 8001d2e:	f043 0308 	orr.w	r3, r3, #8
 8001d32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_TIM_Base_MspInit+0xbc>)
 8001d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 13, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	210d      	movs	r1, #13
 8001d48:	2032      	movs	r0, #50	@ 0x32
 8001d4a:	f001 f84a 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d4e:	2032      	movs	r0, #50	@ 0x32
 8001d50:	f001 f861 	bl	8002e16 <HAL_NVIC_EnableIRQ>
}
 8001d54:	bf00      	nop
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	58024400 	.word	0x58024400
 8001d60:	40000400 	.word	0x40000400
 8001d64:	40000c00 	.word	0x40000c00

08001d68 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
UART_HandleTypeDef huart10;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d6c:	4b22      	ldr	r3, [pc, #136]	@ (8001df8 <MX_UART4_Init+0x90>)
 8001d6e:	4a23      	ldr	r2, [pc, #140]	@ (8001dfc <MX_UART4_Init+0x94>)
 8001d70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d72:	4b21      	ldr	r3, [pc, #132]	@ (8001df8 <MX_UART4_Init+0x90>)
 8001d74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <MX_UART4_Init+0x90>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d80:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <MX_UART4_Init+0x90>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d86:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <MX_UART4_Init+0x90>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <MX_UART4_Init+0x90>)
 8001d8e:	220c      	movs	r2, #12
 8001d90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d92:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <MX_UART4_Init+0x90>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d98:	4b17      	ldr	r3, [pc, #92]	@ (8001df8 <MX_UART4_Init+0x90>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d9e:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <MX_UART4_Init+0x90>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001da4:	4b14      	ldr	r3, [pc, #80]	@ (8001df8 <MX_UART4_Init+0x90>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001daa:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <MX_UART4_Init+0x90>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001db0:	4811      	ldr	r0, [pc, #68]	@ (8001df8 <MX_UART4_Init+0x90>)
 8001db2:	f006 fc2b 	bl	800860c <HAL_UART_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001dbc:	f7ff fc86 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	480d      	ldr	r0, [pc, #52]	@ (8001df8 <MX_UART4_Init+0x90>)
 8001dc4:	f009 f951 	bl	800b06a <HAL_UARTEx_SetTxFifoThreshold>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001dce:	f7ff fc7d 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4808      	ldr	r0, [pc, #32]	@ (8001df8 <MX_UART4_Init+0x90>)
 8001dd6:	f009 f986 	bl	800b0e6 <HAL_UARTEx_SetRxFifoThreshold>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001de0:	f7ff fc74 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001de4:	4804      	ldr	r0, [pc, #16]	@ (8001df8 <MX_UART4_Init+0x90>)
 8001de6:	f009 f907 	bl	800aff8 <HAL_UARTEx_DisableFifoMode>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001df0:	f7ff fc6c 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	24000574 	.word	0x24000574
 8001dfc:	40004c00 	.word	0x40004c00

08001e00 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001e04:	4b22      	ldr	r3, [pc, #136]	@ (8001e90 <MX_UART5_Init+0x90>)
 8001e06:	4a23      	ldr	r2, [pc, #140]	@ (8001e94 <MX_UART5_Init+0x94>)
 8001e08:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001e0a:	4b21      	ldr	r3, [pc, #132]	@ (8001e90 <MX_UART5_Init+0x90>)
 8001e0c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e10:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e12:	4b1f      	ldr	r3, [pc, #124]	@ (8001e90 <MX_UART5_Init+0x90>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e18:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <MX_UART5_Init+0x90>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <MX_UART5_Init+0x90>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e24:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <MX_UART5_Init+0x90>)
 8001e26:	220c      	movs	r2, #12
 8001e28:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2a:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <MX_UART5_Init+0x90>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e30:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <MX_UART5_Init+0x90>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e36:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <MX_UART5_Init+0x90>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e3c:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <MX_UART5_Init+0x90>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <MX_UART5_Init+0x90>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e48:	4811      	ldr	r0, [pc, #68]	@ (8001e90 <MX_UART5_Init+0x90>)
 8001e4a:	f006 fbdf 	bl	800860c <HAL_UART_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001e54:	f7ff fc3a 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e58:	2100      	movs	r1, #0
 8001e5a:	480d      	ldr	r0, [pc, #52]	@ (8001e90 <MX_UART5_Init+0x90>)
 8001e5c:	f009 f905 	bl	800b06a <HAL_UARTEx_SetTxFifoThreshold>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001e66:	f7ff fc31 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4808      	ldr	r0, [pc, #32]	@ (8001e90 <MX_UART5_Init+0x90>)
 8001e6e:	f009 f93a 	bl	800b0e6 <HAL_UARTEx_SetRxFifoThreshold>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001e78:	f7ff fc28 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001e7c:	4804      	ldr	r0, [pc, #16]	@ (8001e90 <MX_UART5_Init+0x90>)
 8001e7e:	f009 f8bb 	bl	800aff8 <HAL_UARTEx_DisableFifoMode>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001e88:	f7ff fc20 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	24000608 	.word	0x24000608
 8001e94:	40005000 	.word	0x40005000

08001e98 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001e9c:	4b22      	ldr	r3, [pc, #136]	@ (8001f28 <MX_UART7_Init+0x90>)
 8001e9e:	4a23      	ldr	r2, [pc, #140]	@ (8001f2c <MX_UART7_Init+0x94>)
 8001ea0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001ea2:	4b21      	ldr	r3, [pc, #132]	@ (8001f28 <MX_UART7_Init+0x90>)
 8001ea4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ea8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001f28 <MX_UART7_Init+0x90>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <MX_UART7_Init+0x90>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f28 <MX_UART7_Init+0x90>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <MX_UART7_Init+0x90>)
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <MX_UART7_Init+0x90>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	4b17      	ldr	r3, [pc, #92]	@ (8001f28 <MX_UART7_Init+0x90>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ece:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <MX_UART7_Init+0x90>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ed4:	4b14      	ldr	r3, [pc, #80]	@ (8001f28 <MX_UART7_Init+0x90>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eda:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <MX_UART7_Init+0x90>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001ee0:	4811      	ldr	r0, [pc, #68]	@ (8001f28 <MX_UART7_Init+0x90>)
 8001ee2:	f006 fb93 	bl	800860c <HAL_UART_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001eec:	f7ff fbee 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	480d      	ldr	r0, [pc, #52]	@ (8001f28 <MX_UART7_Init+0x90>)
 8001ef4:	f009 f8b9 	bl	800b06a <HAL_UARTEx_SetTxFifoThreshold>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001efe:	f7ff fbe5 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f02:	2100      	movs	r1, #0
 8001f04:	4808      	ldr	r0, [pc, #32]	@ (8001f28 <MX_UART7_Init+0x90>)
 8001f06:	f009 f8ee 	bl	800b0e6 <HAL_UARTEx_SetRxFifoThreshold>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001f10:	f7ff fbdc 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001f14:	4804      	ldr	r0, [pc, #16]	@ (8001f28 <MX_UART7_Init+0x90>)
 8001f16:	f009 f86f 	bl	800aff8 <HAL_UARTEx_DisableFifoMode>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001f20:	f7ff fbd4 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	2400069c 	.word	0x2400069c
 8001f2c:	40007800 	.word	0x40007800

08001f30 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001f34:	4b22      	ldr	r3, [pc, #136]	@ (8001fc0 <MX_UART8_Init+0x90>)
 8001f36:	4a23      	ldr	r2, [pc, #140]	@ (8001fc4 <MX_UART8_Init+0x94>)
 8001f38:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001f3a:	4b21      	ldr	r3, [pc, #132]	@ (8001fc0 <MX_UART8_Init+0x90>)
 8001f3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f40:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001f42:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc0 <MX_UART8_Init+0x90>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001f48:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <MX_UART8_Init+0x90>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc0 <MX_UART8_Init+0x90>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001f54:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <MX_UART8_Init+0x90>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5a:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <MX_UART8_Init+0x90>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f60:	4b17      	ldr	r3, [pc, #92]	@ (8001fc0 <MX_UART8_Init+0x90>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f66:	4b16      	ldr	r3, [pc, #88]	@ (8001fc0 <MX_UART8_Init+0x90>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f6c:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <MX_UART8_Init+0x90>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f72:	4b13      	ldr	r3, [pc, #76]	@ (8001fc0 <MX_UART8_Init+0x90>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001f78:	4811      	ldr	r0, [pc, #68]	@ (8001fc0 <MX_UART8_Init+0x90>)
 8001f7a:	f006 fb47 	bl	800860c <HAL_UART_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001f84:	f7ff fba2 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f88:	2100      	movs	r1, #0
 8001f8a:	480d      	ldr	r0, [pc, #52]	@ (8001fc0 <MX_UART8_Init+0x90>)
 8001f8c:	f009 f86d 	bl	800b06a <HAL_UARTEx_SetTxFifoThreshold>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001f96:	f7ff fb99 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4808      	ldr	r0, [pc, #32]	@ (8001fc0 <MX_UART8_Init+0x90>)
 8001f9e:	f009 f8a2 	bl	800b0e6 <HAL_UARTEx_SetRxFifoThreshold>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001fa8:	f7ff fb90 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001fac:	4804      	ldr	r0, [pc, #16]	@ (8001fc0 <MX_UART8_Init+0x90>)
 8001fae:	f009 f823 	bl	800aff8 <HAL_UARTEx_DisableFifoMode>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001fb8:	f7ff fb88 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	24000730 	.word	0x24000730
 8001fc4:	40007c00 	.word	0x40007c00

08001fc8 <MX_UART9_Init>:
/* UART9 init function */
void MX_UART9_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 8001fcc:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <MX_UART9_Init+0x90>)
 8001fce:	4a23      	ldr	r2, [pc, #140]	@ (800205c <MX_UART9_Init+0x94>)
 8001fd0:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 115200;
 8001fd2:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <MX_UART9_Init+0x90>)
 8001fd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fd8:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 8001fda:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <MX_UART9_Init+0x90>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8002058 <MX_UART9_Init+0x90>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8002058 <MX_UART9_Init+0x90>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 8001fec:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <MX_UART9_Init+0x90>)
 8001fee:	220c      	movs	r2, #12
 8001ff0:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff2:	4b19      	ldr	r3, [pc, #100]	@ (8002058 <MX_UART9_Init+0x90>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff8:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <MX_UART9_Init+0x90>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
  huart9.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ffe:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <MX_UART9_Init+0x90>)
 8002000:	2200      	movs	r2, #0
 8002002:	621a      	str	r2, [r3, #32]
  huart9.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002004:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <MX_UART9_Init+0x90>)
 8002006:	2200      	movs	r2, #0
 8002008:	625a      	str	r2, [r3, #36]	@ 0x24
  huart9.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800200a:	4b13      	ldr	r3, [pc, #76]	@ (8002058 <MX_UART9_Init+0x90>)
 800200c:	2200      	movs	r2, #0
 800200e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart9) != HAL_OK)
 8002010:	4811      	ldr	r0, [pc, #68]	@ (8002058 <MX_UART9_Init+0x90>)
 8002012:	f006 fafb 	bl	800860c <HAL_UART_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_UART9_Init+0x58>
  {
    Error_Handler();
 800201c:	f7ff fb56 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart9, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002020:	2100      	movs	r1, #0
 8002022:	480d      	ldr	r0, [pc, #52]	@ (8002058 <MX_UART9_Init+0x90>)
 8002024:	f009 f821 	bl	800b06a <HAL_UARTEx_SetTxFifoThreshold>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_UART9_Init+0x6a>
  {
    Error_Handler();
 800202e:	f7ff fb4d 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart9, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002032:	2100      	movs	r1, #0
 8002034:	4808      	ldr	r0, [pc, #32]	@ (8002058 <MX_UART9_Init+0x90>)
 8002036:	f009 f856 	bl	800b0e6 <HAL_UARTEx_SetRxFifoThreshold>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_UART9_Init+0x7c>
  {
    Error_Handler();
 8002040:	f7ff fb44 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart9) != HAL_OK)
 8002044:	4804      	ldr	r0, [pc, #16]	@ (8002058 <MX_UART9_Init+0x90>)
 8002046:	f008 ffd7 	bl	800aff8 <HAL_UARTEx_DisableFifoMode>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_UART9_Init+0x8c>
  {
    Error_Handler();
 8002050:	f7ff fb3c 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	240007c4 	.word	0x240007c4
 800205c:	40011800 	.word	0x40011800

08002060 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002064:	4b39      	ldr	r3, [pc, #228]	@ (800214c <MX_USART2_UART_Init+0xec>)
 8002066:	4a3a      	ldr	r2, [pc, #232]	@ (8002150 <MX_USART2_UART_Init+0xf0>)
 8002068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800206a:	4b38      	ldr	r3, [pc, #224]	@ (800214c <MX_USART2_UART_Init+0xec>)
 800206c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002072:	4b36      	ldr	r3, [pc, #216]	@ (800214c <MX_USART2_UART_Init+0xec>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002078:	4b34      	ldr	r3, [pc, #208]	@ (800214c <MX_USART2_UART_Init+0xec>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800207e:	4b33      	ldr	r3, [pc, #204]	@ (800214c <MX_USART2_UART_Init+0xec>)
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002084:	4b31      	ldr	r3, [pc, #196]	@ (800214c <MX_USART2_UART_Init+0xec>)
 8002086:	220c      	movs	r2, #12
 8002088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208a:	4b30      	ldr	r3, [pc, #192]	@ (800214c <MX_USART2_UART_Init+0xec>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002090:	4b2e      	ldr	r3, [pc, #184]	@ (800214c <MX_USART2_UART_Init+0xec>)
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002096:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <MX_USART2_UART_Init+0xec>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800209c:	4b2b      	ldr	r3, [pc, #172]	@ (800214c <MX_USART2_UART_Init+0xec>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020a2:	4b2a      	ldr	r3, [pc, #168]	@ (800214c <MX_USART2_UART_Init+0xec>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a8:	4828      	ldr	r0, [pc, #160]	@ (800214c <MX_USART2_UART_Init+0xec>)
 80020aa:	f006 faaf 	bl	800860c <HAL_UART_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80020b4:	f7ff fb0a 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020b8:	2100      	movs	r1, #0
 80020ba:	4824      	ldr	r0, [pc, #144]	@ (800214c <MX_USART2_UART_Init+0xec>)
 80020bc:	f008 ffd5 	bl	800b06a <HAL_UARTEx_SetTxFifoThreshold>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80020c6:	f7ff fb01 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020ca:	2100      	movs	r1, #0
 80020cc:	481f      	ldr	r0, [pc, #124]	@ (800214c <MX_USART2_UART_Init+0xec>)
 80020ce:	f009 f80a 	bl	800b0e6 <HAL_UARTEx_SetRxFifoThreshold>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80020d8:	f7ff faf8 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020dc:	481b      	ldr	r0, [pc, #108]	@ (800214c <MX_USART2_UART_Init+0xec>)
 80020de:	f008 ff8b 	bl	800aff8 <HAL_UARTEx_DisableFifoMode>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80020e8:	f7ff faf0 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  HAL_UART_Transmit(&huart2,unlock_register, sizeof(unlock_register),1000);
 80020ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020f0:	2205      	movs	r2, #5
 80020f2:	4918      	ldr	r1, [pc, #96]	@ (8002154 <MX_USART2_UART_Init+0xf4>)
 80020f4:	4815      	ldr	r0, [pc, #84]	@ (800214c <MX_USART2_UART_Init+0xec>)
 80020f6:	f006 fad9 	bl	80086ac <HAL_UART_Transmit>
  HAL_Delay(5);
 80020fa:	2005      	movs	r0, #5
 80020fc:	f000 fd72 	bl	8002be4 <HAL_Delay>
  HAL_UART_Transmit(&huart2,reset_z_axis, sizeof(reset_z_axis),1000);
 8002100:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002104:	2205      	movs	r2, #5
 8002106:	4914      	ldr	r1, [pc, #80]	@ (8002158 <MX_USART2_UART_Init+0xf8>)
 8002108:	4810      	ldr	r0, [pc, #64]	@ (800214c <MX_USART2_UART_Init+0xec>)
 800210a:	f006 facf 	bl	80086ac <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_output_200Hz, sizeof(set_output_200Hz),1000);
 800210e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002112:	2205      	movs	r2, #5
 8002114:	4911      	ldr	r1, [pc, #68]	@ (800215c <MX_USART2_UART_Init+0xfc>)
 8002116:	480d      	ldr	r0, [pc, #52]	@ (800214c <MX_USART2_UART_Init+0xec>)
 8002118:	f006 fac8 	bl	80086ac <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_baudrate_115200, sizeof(set_baudrate_115200),1000);
 800211c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002120:	2205      	movs	r2, #5
 8002122:	490f      	ldr	r1, [pc, #60]	@ (8002160 <MX_USART2_UART_Init+0x100>)
 8002124:	4809      	ldr	r0, [pc, #36]	@ (800214c <MX_USART2_UART_Init+0xec>)
 8002126:	f006 fac1 	bl	80086ac <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,save_settings, sizeof(save_settings),1000);
 800212a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212e:	2205      	movs	r2, #5
 8002130:	490c      	ldr	r1, [pc, #48]	@ (8002164 <MX_USART2_UART_Init+0x104>)
 8002132:	4806      	ldr	r0, [pc, #24]	@ (800214c <MX_USART2_UART_Init+0xec>)
 8002134:	f006 faba 	bl	80086ac <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,restart_device, sizeof(restart_device),1000);
 8002138:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800213c:	2205      	movs	r2, #5
 800213e:	490a      	ldr	r1, [pc, #40]	@ (8002168 <MX_USART2_UART_Init+0x108>)
 8002140:	4802      	ldr	r0, [pc, #8]	@ (800214c <MX_USART2_UART_Init+0xec>)
 8002142:	f006 fab3 	bl	80086ac <HAL_UART_Transmit>


  /* USER CODE END USART2_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	24000858 	.word	0x24000858
 8002150:	40004400 	.word	0x40004400
 8002154:	24000010 	.word	0x24000010
 8002158:	24000018 	.word	0x24000018
 800215c:	24000020 	.word	0x24000020
 8002160:	24000028 	.word	0x24000028
 8002164:	24000030 	.word	0x24000030
 8002168:	24000038 	.word	0x24000038

0800216c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002170:	4b22      	ldr	r3, [pc, #136]	@ (80021fc <MX_USART3_UART_Init+0x90>)
 8002172:	4a23      	ldr	r2, [pc, #140]	@ (8002200 <MX_USART3_UART_Init+0x94>)
 8002174:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002176:	4b21      	ldr	r3, [pc, #132]	@ (80021fc <MX_USART3_UART_Init+0x90>)
 8002178:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800217c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b1f      	ldr	r3, [pc, #124]	@ (80021fc <MX_USART3_UART_Init+0x90>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002184:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <MX_USART3_UART_Init+0x90>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800218a:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <MX_USART3_UART_Init+0x90>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002190:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <MX_USART3_UART_Init+0x90>)
 8002192:	220c      	movs	r2, #12
 8002194:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <MX_USART3_UART_Init+0x90>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800219c:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <MX_USART3_UART_Init+0x90>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021a2:	4b16      	ldr	r3, [pc, #88]	@ (80021fc <MX_USART3_UART_Init+0x90>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021a8:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <MX_USART3_UART_Init+0x90>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ae:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <MX_USART3_UART_Init+0x90>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021b4:	4811      	ldr	r0, [pc, #68]	@ (80021fc <MX_USART3_UART_Init+0x90>)
 80021b6:	f006 fa29 	bl	800860c <HAL_UART_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021c0:	f7ff fa84 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021c4:	2100      	movs	r1, #0
 80021c6:	480d      	ldr	r0, [pc, #52]	@ (80021fc <MX_USART3_UART_Init+0x90>)
 80021c8:	f008 ff4f 	bl	800b06a <HAL_UARTEx_SetTxFifoThreshold>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80021d2:	f7ff fa7b 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d6:	2100      	movs	r1, #0
 80021d8:	4808      	ldr	r0, [pc, #32]	@ (80021fc <MX_USART3_UART_Init+0x90>)
 80021da:	f008 ff84 	bl	800b0e6 <HAL_UARTEx_SetRxFifoThreshold>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80021e4:	f7ff fa72 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80021e8:	4804      	ldr	r0, [pc, #16]	@ (80021fc <MX_USART3_UART_Init+0x90>)
 80021ea:	f008 ff05 	bl	800aff8 <HAL_UARTEx_DisableFifoMode>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80021f4:	f7ff fa6a 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	240008ec 	.word	0x240008ec
 8002200:	40004800 	.word	0x40004800

08002204 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002208:	4b22      	ldr	r3, [pc, #136]	@ (8002294 <MX_USART6_UART_Init+0x90>)
 800220a:	4a23      	ldr	r2, [pc, #140]	@ (8002298 <MX_USART6_UART_Init+0x94>)
 800220c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800220e:	4b21      	ldr	r3, [pc, #132]	@ (8002294 <MX_USART6_UART_Init+0x90>)
 8002210:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002214:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002216:	4b1f      	ldr	r3, [pc, #124]	@ (8002294 <MX_USART6_UART_Init+0x90>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800221c:	4b1d      	ldr	r3, [pc, #116]	@ (8002294 <MX_USART6_UART_Init+0x90>)
 800221e:	2200      	movs	r2, #0
 8002220:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002222:	4b1c      	ldr	r3, [pc, #112]	@ (8002294 <MX_USART6_UART_Init+0x90>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002228:	4b1a      	ldr	r3, [pc, #104]	@ (8002294 <MX_USART6_UART_Init+0x90>)
 800222a:	220c      	movs	r2, #12
 800222c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800222e:	4b19      	ldr	r3, [pc, #100]	@ (8002294 <MX_USART6_UART_Init+0x90>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002234:	4b17      	ldr	r3, [pc, #92]	@ (8002294 <MX_USART6_UART_Init+0x90>)
 8002236:	2200      	movs	r2, #0
 8002238:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800223a:	4b16      	ldr	r3, [pc, #88]	@ (8002294 <MX_USART6_UART_Init+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002240:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <MX_USART6_UART_Init+0x90>)
 8002242:	2200      	movs	r2, #0
 8002244:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002246:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <MX_USART6_UART_Init+0x90>)
 8002248:	2200      	movs	r2, #0
 800224a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800224c:	4811      	ldr	r0, [pc, #68]	@ (8002294 <MX_USART6_UART_Init+0x90>)
 800224e:	f006 f9dd 	bl	800860c <HAL_UART_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002258:	f7ff fa38 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800225c:	2100      	movs	r1, #0
 800225e:	480d      	ldr	r0, [pc, #52]	@ (8002294 <MX_USART6_UART_Init+0x90>)
 8002260:	f008 ff03 	bl	800b06a <HAL_UARTEx_SetTxFifoThreshold>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800226a:	f7ff fa2f 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800226e:	2100      	movs	r1, #0
 8002270:	4808      	ldr	r0, [pc, #32]	@ (8002294 <MX_USART6_UART_Init+0x90>)
 8002272:	f008 ff38 	bl	800b0e6 <HAL_UARTEx_SetRxFifoThreshold>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800227c:	f7ff fa26 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002280:	4804      	ldr	r0, [pc, #16]	@ (8002294 <MX_USART6_UART_Init+0x90>)
 8002282:	f008 feb9 	bl	800aff8 <HAL_UARTEx_DisableFifoMode>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800228c:	f7ff fa1e 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	24000980 	.word	0x24000980
 8002298:	40011400 	.word	0x40011400

0800229c <MX_USART10_UART_Init>:
/* USART10 init function */

void MX_USART10_UART_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80022a0:	4b22      	ldr	r3, [pc, #136]	@ (800232c <MX_USART10_UART_Init+0x90>)
 80022a2:	4a23      	ldr	r2, [pc, #140]	@ (8002330 <MX_USART10_UART_Init+0x94>)
 80022a4:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 80022a6:	4b21      	ldr	r3, [pc, #132]	@ (800232c <MX_USART10_UART_Init+0x90>)
 80022a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022ac:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80022ae:	4b1f      	ldr	r3, [pc, #124]	@ (800232c <MX_USART10_UART_Init+0x90>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80022b4:	4b1d      	ldr	r3, [pc, #116]	@ (800232c <MX_USART10_UART_Init+0x90>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80022ba:	4b1c      	ldr	r3, [pc, #112]	@ (800232c <MX_USART10_UART_Init+0x90>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80022c0:	4b1a      	ldr	r3, [pc, #104]	@ (800232c <MX_USART10_UART_Init+0x90>)
 80022c2:	220c      	movs	r2, #12
 80022c4:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022c6:	4b19      	ldr	r3, [pc, #100]	@ (800232c <MX_USART10_UART_Init+0x90>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80022cc:	4b17      	ldr	r3, [pc, #92]	@ (800232c <MX_USART10_UART_Init+0x90>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022d2:	4b16      	ldr	r3, [pc, #88]	@ (800232c <MX_USART10_UART_Init+0x90>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022d8:	4b14      	ldr	r3, [pc, #80]	@ (800232c <MX_USART10_UART_Init+0x90>)
 80022da:	2200      	movs	r2, #0
 80022dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022de:	4b13      	ldr	r3, [pc, #76]	@ (800232c <MX_USART10_UART_Init+0x90>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80022e4:	4811      	ldr	r0, [pc, #68]	@ (800232c <MX_USART10_UART_Init+0x90>)
 80022e6:	f006 f991 	bl	800860c <HAL_UART_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 80022f0:	f7ff f9ec 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022f4:	2100      	movs	r1, #0
 80022f6:	480d      	ldr	r0, [pc, #52]	@ (800232c <MX_USART10_UART_Init+0x90>)
 80022f8:	f008 feb7 	bl	800b06a <HAL_UARTEx_SetTxFifoThreshold>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8002302:	f7ff f9e3 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002306:	2100      	movs	r1, #0
 8002308:	4808      	ldr	r0, [pc, #32]	@ (800232c <MX_USART10_UART_Init+0x90>)
 800230a:	f008 feec 	bl	800b0e6 <HAL_UARTEx_SetRxFifoThreshold>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8002314:	f7ff f9da 	bl	80016cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8002318:	4804      	ldr	r0, [pc, #16]	@ (800232c <MX_USART10_UART_Init+0x90>)
 800231a:	f008 fe6d 	bl	800aff8 <HAL_UARTEx_DisableFifoMode>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8002324:	f7ff f9d2 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}
 800232c:	24000a14 	.word	0x24000a14
 8002330:	40011c00 	.word	0x40011c00

08002334 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b0c8      	sub	sp, #288	@ 0x120
 8002338:	af00      	add	r7, sp, #0
 800233a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800233e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002342:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002354:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002358:	22b8      	movs	r2, #184	@ 0xb8
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f00d fdc0 	bl	800fee2 <memset>
  if(uartHandle->Instance==UART4)
 8002362:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002366:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4aaa      	ldr	r2, [pc, #680]	@ (8002618 <HAL_UART_MspInit+0x2e4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d14e      	bne.n	8002412 <HAL_UART_MspInit+0xde>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002374:	f04f 0202 	mov.w	r2, #2
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002386:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800238a:	4618      	mov	r0, r3
 800238c:	f003 fe6c 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8002396:	f7ff f999 	bl	80016cc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800239a:	4ba0      	ldr	r3, [pc, #640]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 800239c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023a0:	4a9e      	ldr	r2, [pc, #632]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 80023a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80023a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023aa:	4b9c      	ldr	r3, [pc, #624]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 80023ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b8:	4b98      	ldr	r3, [pc, #608]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 80023ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023be:	4a97      	ldr	r2, [pc, #604]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023c8:	4b94      	ldr	r3, [pc, #592]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 80023ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023d6:	2303      	movs	r3, #3
 80023d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80023ee:	2308      	movs	r3, #8
 80023f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80023f8:	4619      	mov	r1, r3
 80023fa:	4889      	ldr	r0, [pc, #548]	@ (8002620 <HAL_UART_MspInit+0x2ec>)
 80023fc:	f002 fcec 	bl	8004dd8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2108      	movs	r1, #8
 8002404:	2034      	movs	r0, #52	@ 0x34
 8002406:	f000 fcec 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800240a:	2034      	movs	r0, #52	@ 0x34
 800240c:	f000 fd03 	bl	8002e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }
}
 8002410:	e320      	b.n	8002a54 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART5)
 8002412:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002416:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a81      	ldr	r2, [pc, #516]	@ (8002624 <HAL_UART_MspInit+0x2f0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d147      	bne.n	80024b4 <HAL_UART_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002424:	f04f 0202 	mov.w	r2, #2
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002430:	2300      	movs	r3, #0
 8002432:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002436:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800243a:	4618      	mov	r0, r3
 800243c:	f003 fe14 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_UART_MspInit+0x116>
      Error_Handler();
 8002446:	f7ff f941 	bl	80016cc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800244a:	4b74      	ldr	r3, [pc, #464]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 800244c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002450:	4a72      	ldr	r2, [pc, #456]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 8002452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002456:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800245a:	4b70      	ldr	r3, [pc, #448]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 800245c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002460:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002464:	647b      	str	r3, [r7, #68]	@ 0x44
 8002466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002468:	4b6c      	ldr	r3, [pc, #432]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 800246a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800246e:	4a6b      	ldr	r2, [pc, #428]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002478:	4b68      	ldr	r3, [pc, #416]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 800247a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	643b      	str	r3, [r7, #64]	@ 0x40
 8002484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8002486:	f242 0320 	movw	r3, #8224	@ 0x2020
 800248a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80024a0:	230e      	movs	r3, #14
 80024a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80024aa:	4619      	mov	r1, r3
 80024ac:	485e      	ldr	r0, [pc, #376]	@ (8002628 <HAL_UART_MspInit+0x2f4>)
 80024ae:	f002 fc93 	bl	8004dd8 <HAL_GPIO_Init>
}
 80024b2:	e2cf      	b.n	8002a54 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART7)
 80024b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024b8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a5a      	ldr	r2, [pc, #360]	@ (800262c <HAL_UART_MspInit+0x2f8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d14f      	bne.n	8002566 <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80024c6:	f04f 0202 	mov.w	r2, #2
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024d8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80024dc:	4618      	mov	r0, r3
 80024de:	f003 fdc3 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80024e8:	f7ff f8f0 	bl	80016cc <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80024ec:	4b4b      	ldr	r3, [pc, #300]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 80024ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024f2:	4a4a      	ldr	r2, [pc, #296]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 80024f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024fc:	4b47      	ldr	r3, [pc, #284]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 80024fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002502:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800250a:	4b44      	ldr	r3, [pc, #272]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 800250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002510:	4a42      	ldr	r2, [pc, #264]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 8002512:	f043 0310 	orr.w	r3, r3, #16
 8002516:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800251a:	4b40      	ldr	r3, [pc, #256]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 800251c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002528:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800252c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002542:	2307      	movs	r3, #7
 8002544:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002548:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800254c:	4619      	mov	r1, r3
 800254e:	4838      	ldr	r0, [pc, #224]	@ (8002630 <HAL_UART_MspInit+0x2fc>)
 8002550:	f002 fc42 	bl	8004dd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 6, 0);
 8002554:	2200      	movs	r2, #0
 8002556:	2106      	movs	r1, #6
 8002558:	2052      	movs	r0, #82	@ 0x52
 800255a:	f000 fc42 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800255e:	2052      	movs	r0, #82	@ 0x52
 8002560:	f000 fc59 	bl	8002e16 <HAL_NVIC_EnableIRQ>
}
 8002564:	e276      	b.n	8002a54 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART8)
 8002566:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800256a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a30      	ldr	r2, [pc, #192]	@ (8002634 <HAL_UART_MspInit+0x300>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d15f      	bne.n	8002638 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002578:	f04f 0202 	mov.w	r2, #2
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800258a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800258e:	4618      	mov	r0, r3
 8002590:	f003 fd6a 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_UART_MspInit+0x26a>
      Error_Handler();
 800259a:	f7ff f897 	bl	80016cc <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800259e:	4b1f      	ldr	r3, [pc, #124]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 80025a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025a4:	4a1d      	ldr	r2, [pc, #116]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 80025a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025ae:	4b1b      	ldr	r3, [pc, #108]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 80025b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025bc:	4b17      	ldr	r3, [pc, #92]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 80025be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c2:	4a16      	ldr	r2, [pc, #88]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 80025c4:	f043 0310 	orr.w	r3, r3, #16
 80025c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025cc:	4b13      	ldr	r3, [pc, #76]	@ (800261c <HAL_UART_MspInit+0x2e8>)
 80025ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80025d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025da:	2303      	movs	r3, #3
 80025dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80025f2:	2308      	movs	r3, #8
 80025f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025f8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80025fc:	4619      	mov	r1, r3
 80025fe:	480c      	ldr	r0, [pc, #48]	@ (8002630 <HAL_UART_MspInit+0x2fc>)
 8002600:	f002 fbea 	bl	8004dd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 15, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	210f      	movs	r1, #15
 8002608:	2053      	movs	r0, #83	@ 0x53
 800260a:	f000 fbea 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800260e:	2053      	movs	r0, #83	@ 0x53
 8002610:	f000 fc01 	bl	8002e16 <HAL_NVIC_EnableIRQ>
}
 8002614:	e21e      	b.n	8002a54 <HAL_UART_MspInit+0x720>
 8002616:	bf00      	nop
 8002618:	40004c00 	.word	0x40004c00
 800261c:	58024400 	.word	0x58024400
 8002620:	58020000 	.word	0x58020000
 8002624:	40005000 	.word	0x40005000
 8002628:	58020400 	.word	0x58020400
 800262c:	40007800 	.word	0x40007800
 8002630:	58021000 	.word	0x58021000
 8002634:	40007c00 	.word	0x40007c00
  else if(uartHandle->Instance==UART9)
 8002638:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800263c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4abd      	ldr	r2, [pc, #756]	@ (800293c <HAL_UART_MspInit+0x608>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d14f      	bne.n	80026ea <HAL_UART_MspInit+0x3b6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART9;
 800264a:	f04f 0201 	mov.w	r2, #1
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800265c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002660:	4618      	mov	r0, r3
 8002662:	f003 fd01 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 800266c:	f7ff f82e 	bl	80016cc <Error_Handler>
    __HAL_RCC_UART9_CLK_ENABLE();
 8002670:	4bb3      	ldr	r3, [pc, #716]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 8002672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002676:	4ab2      	ldr	r2, [pc, #712]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 8002678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800267c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002680:	4baf      	ldr	r3, [pc, #700]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 8002682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800268c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800268e:	4bac      	ldr	r3, [pc, #688]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 8002690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002694:	4aaa      	ldr	r2, [pc, #680]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 8002696:	f043 0308 	orr.w	r3, r3, #8
 800269a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800269e:	4ba8      	ldr	r3, [pc, #672]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 80026a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80026ac:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80026b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	2302      	movs	r3, #2
 80026b6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 80026c6:	230b      	movs	r3, #11
 80026c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026cc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80026d0:	4619      	mov	r1, r3
 80026d2:	489c      	ldr	r0, [pc, #624]	@ (8002944 <HAL_UART_MspInit+0x610>)
 80026d4:	f002 fb80 	bl	8004dd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART9_IRQn, 5, 0);
 80026d8:	2200      	movs	r2, #0
 80026da:	2105      	movs	r1, #5
 80026dc:	209b      	movs	r0, #155	@ 0x9b
 80026de:	f000 fb80 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART9_IRQn);
 80026e2:	209b      	movs	r0, #155	@ 0x9b
 80026e4:	f000 fb97 	bl	8002e16 <HAL_NVIC_EnableIRQ>
}
 80026e8:	e1b4      	b.n	8002a54 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART2)
 80026ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026ee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a94      	ldr	r2, [pc, #592]	@ (8002948 <HAL_UART_MspInit+0x614>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d156      	bne.n	80027aa <HAL_UART_MspInit+0x476>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026fc:	f04f 0202 	mov.w	r2, #2
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002708:	2300      	movs	r3, #0
 800270a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800270e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002712:	4618      	mov	r0, r3
 8002714:	f003 fca8 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_UART_MspInit+0x3ee>
      Error_Handler();
 800271e:	f7fe ffd5 	bl	80016cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002722:	4b87      	ldr	r3, [pc, #540]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 8002724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002728:	4a85      	ldr	r2, [pc, #532]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 800272a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800272e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002732:	4b83      	ldr	r3, [pc, #524]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 8002734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002740:	4b7f      	ldr	r3, [pc, #508]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 8002742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002746:	4a7e      	ldr	r2, [pc, #504]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002750:	4b7b      	ldr	r3, [pc, #492]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 8002752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002756:	f003 0201 	and.w	r2, r3, #1
 800275a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800275e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002768:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800276c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800276e:	230c      	movs	r3, #12
 8002770:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002786:	2307      	movs	r3, #7
 8002788:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002790:	4619      	mov	r1, r3
 8002792:	486e      	ldr	r0, [pc, #440]	@ (800294c <HAL_UART_MspInit+0x618>)
 8002794:	f002 fb20 	bl	8004dd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8002798:	2200      	movs	r2, #0
 800279a:	210f      	movs	r1, #15
 800279c:	2026      	movs	r0, #38	@ 0x26
 800279e:	f000 fb20 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027a2:	2026      	movs	r0, #38	@ 0x26
 80027a4:	f000 fb37 	bl	8002e16 <HAL_NVIC_EnableIRQ>
}
 80027a8:	e154      	b.n	8002a54 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART3)
 80027aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a66      	ldr	r2, [pc, #408]	@ (8002950 <HAL_UART_MspInit+0x61c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d15f      	bne.n	800287c <HAL_UART_MspInit+0x548>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027bc:	f04f 0202 	mov.w	r2, #2
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80027d2:	4618      	mov	r0, r3
 80027d4:	f003 fc48 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_UART_MspInit+0x4ae>
      Error_Handler();
 80027de:	f7fe ff75 	bl	80016cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027e2:	4b57      	ldr	r3, [pc, #348]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 80027e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027e8:	4a55      	ldr	r2, [pc, #340]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 80027ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027f2:	4b53      	ldr	r3, [pc, #332]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 80027f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027f8:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80027fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002800:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800280a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800280e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002810:	4b4b      	ldr	r3, [pc, #300]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 8002812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002816:	4a4a      	ldr	r2, [pc, #296]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 8002818:	f043 0308 	orr.w	r3, r3, #8
 800281c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002820:	4b47      	ldr	r3, [pc, #284]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 8002822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002826:	f003 0208 	and.w	r2, r3, #8
 800282a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800282e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800283c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800283e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002842:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	2302      	movs	r3, #2
 8002848:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002852:	2300      	movs	r3, #0
 8002854:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002858:	2307      	movs	r3, #7
 800285a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800285e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002862:	4619      	mov	r1, r3
 8002864:	4837      	ldr	r0, [pc, #220]	@ (8002944 <HAL_UART_MspInit+0x610>)
 8002866:	f002 fab7 	bl	8004dd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 800286a:	2200      	movs	r2, #0
 800286c:	210e      	movs	r1, #14
 800286e:	2027      	movs	r0, #39	@ 0x27
 8002870:	f000 fab7 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002874:	2027      	movs	r0, #39	@ 0x27
 8002876:	f000 face 	bl	8002e16 <HAL_NVIC_EnableIRQ>
}
 800287a:	e0eb      	b.n	8002a54 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART6)
 800287c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002880:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a32      	ldr	r2, [pc, #200]	@ (8002954 <HAL_UART_MspInit+0x620>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d166      	bne.n	800295c <HAL_UART_MspInit+0x628>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800288e:	f04f 0201 	mov.w	r2, #1
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028a0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 fbdf 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_UART_MspInit+0x580>
      Error_Handler();
 80028b0:	f7fe ff0c 	bl	80016cc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028b4:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 80028b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028ba:	4a21      	ldr	r2, [pc, #132]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 80028bc:	f043 0320 	orr.w	r3, r3, #32
 80028c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 80028c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028ca:	f003 0220 	and.w	r2, r3, #32
 80028ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80028e0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e2:	4b17      	ldr	r3, [pc, #92]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 80028e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028e8:	4a15      	ldr	r2, [pc, #84]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028f2:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <HAL_UART_MspInit+0x60c>)
 80028f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028f8:	f003 0204 	and.w	r2, r3, #4
 80028fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002900:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800290a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800290e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002910:	23c0      	movs	r3, #192	@ 0xc0
 8002912:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	2302      	movs	r3, #2
 8002918:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002922:	2300      	movs	r3, #0
 8002924:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002928:	2307      	movs	r3, #7
 800292a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800292e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002932:	4619      	mov	r1, r3
 8002934:	4808      	ldr	r0, [pc, #32]	@ (8002958 <HAL_UART_MspInit+0x624>)
 8002936:	f002 fa4f 	bl	8004dd8 <HAL_GPIO_Init>
}
 800293a:	e08b      	b.n	8002a54 <HAL_UART_MspInit+0x720>
 800293c:	40011800 	.word	0x40011800
 8002940:	58024400 	.word	0x58024400
 8002944:	58020c00 	.word	0x58020c00
 8002948:	40004400 	.word	0x40004400
 800294c:	58020000 	.word	0x58020000
 8002950:	40004800 	.word	0x40004800
 8002954:	40011400 	.word	0x40011400
 8002958:	58020800 	.word	0x58020800
  else if(uartHandle->Instance==USART10)
 800295c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002960:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a3d      	ldr	r2, [pc, #244]	@ (8002a60 <HAL_UART_MspInit+0x72c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d172      	bne.n	8002a54 <HAL_UART_MspInit+0x720>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 800296e:	f04f 0201 	mov.w	r2, #1
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800297a:	2300      	movs	r3, #0
 800297c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002980:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002984:	4618      	mov	r0, r3
 8002986:	f003 fb6f 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_UART_MspInit+0x660>
      Error_Handler();
 8002990:	f7fe fe9c 	bl	80016cc <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8002994:	4b33      	ldr	r3, [pc, #204]	@ (8002a64 <HAL_UART_MspInit+0x730>)
 8002996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800299a:	4a32      	ldr	r2, [pc, #200]	@ (8002a64 <HAL_UART_MspInit+0x730>)
 800299c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002a64 <HAL_UART_MspInit+0x730>)
 80029a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029aa:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 80029ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029c0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029c2:	4b28      	ldr	r3, [pc, #160]	@ (8002a64 <HAL_UART_MspInit+0x730>)
 80029c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029c8:	4a26      	ldr	r2, [pc, #152]	@ (8002a64 <HAL_UART_MspInit+0x730>)
 80029ca:	f043 0310 	orr.w	r3, r3, #16
 80029ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029d2:	4b24      	ldr	r3, [pc, #144]	@ (8002a64 <HAL_UART_MspInit+0x730>)
 80029d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029d8:	f003 0210 	and.w	r2, r3, #16
 80029dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029e0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029ea:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029ee:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029f0:	2304      	movs	r3, #4
 80029f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f6:	2302      	movs	r3, #2
 80029f8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8002a08:	2304      	movs	r3, #4
 8002a0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a0e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a12:	4619      	mov	r1, r3
 8002a14:	4814      	ldr	r0, [pc, #80]	@ (8002a68 <HAL_UART_MspInit+0x734>)
 8002a16:	f002 f9df 	bl	8004dd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8002a32:	230b      	movs	r3, #11
 8002a34:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a38:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	480a      	ldr	r0, [pc, #40]	@ (8002a68 <HAL_UART_MspInit+0x734>)
 8002a40:	f002 f9ca 	bl	8004dd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART10_IRQn, 1, 0);
 8002a44:	2200      	movs	r2, #0
 8002a46:	2101      	movs	r1, #1
 8002a48:	209c      	movs	r0, #156	@ 0x9c
 8002a4a:	f000 f9ca 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8002a4e:	209c      	movs	r0, #156	@ 0x9c
 8002a50:	f000 f9e1 	bl	8002e16 <HAL_NVIC_EnableIRQ>
}
 8002a54:	bf00      	nop
 8002a56:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40011c00 	.word	0x40011c00
 8002a64:	58024400 	.word	0x58024400
 8002a68:	58021000 	.word	0x58021000

08002a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
     ldr   sp, =_estack      /* set stack pointer */
 8002a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002aa4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a70:	f7fe ffb0 	bl	80019d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a74:	480c      	ldr	r0, [pc, #48]	@ (8002aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a76:	490d      	ldr	r1, [pc, #52]	@ (8002aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a78:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a7c:	e002      	b.n	8002a84 <LoopCopyDataInit>

08002a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a82:	3304      	adds	r3, #4

08002a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a88:	d3f9      	bcc.n	8002a7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a90:	e001      	b.n	8002a96 <LoopFillZerobss>

08002a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a94:	3204      	adds	r2, #4

08002a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a98:	d3fb      	bcc.n	8002a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a9a:	f00d faa9 	bl	800fff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a9e:	f7fe fa93 	bl	8000fc8 <main>
  bx  lr
 8002aa2:	4770      	bx	lr
     ldr   sp, =_estack      /* set stack pointer */
 8002aa4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002aa8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002aac:	24000214 	.word	0x24000214
  ldr r2, =_sidata
 8002ab0:	080135f4 	.word	0x080135f4
  ldr r2, =_sbss
 8002ab4:	24000214 	.word	0x24000214
  ldr r4, =_ebss
 8002ab8:	24000e7c 	.word	0x24000e7c

08002abc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002abc:	e7fe      	b.n	8002abc <ADC3_IRQHandler>
	...

08002ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac6:	2003      	movs	r0, #3
 8002ac8:	f000 f980 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002acc:	f003 f8f6 	bl	8005cbc <HAL_RCC_GetSysClockFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <HAL_Init+0x68>)
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	4913      	ldr	r1, [pc, #76]	@ (8002b2c <HAL_Init+0x6c>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002aea:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <HAL_Init+0x68>)
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	4a0e      	ldr	r2, [pc, #56]	@ (8002b2c <HAL_Init+0x6c>)
 8002af4:	5cd3      	ldrb	r3, [r2, r3]
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
 8002b00:	4a0b      	ldr	r2, [pc, #44]	@ (8002b30 <HAL_Init+0x70>)
 8002b02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b04:	4a0b      	ldr	r2, [pc, #44]	@ (8002b34 <HAL_Init+0x74>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b0a:	200f      	movs	r0, #15
 8002b0c:	f000 f814 	bl	8002b38 <HAL_InitTick>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e002      	b.n	8002b20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b1a:	f7fe fddd 	bl	80016d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	58024400 	.word	0x58024400
 8002b2c:	08013150 	.word	0x08013150
 8002b30:	2400000c 	.word	0x2400000c
 8002b34:	24000008 	.word	0x24000008

08002b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b40:	4b15      	ldr	r3, [pc, #84]	@ (8002b98 <HAL_InitTick+0x60>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e021      	b.n	8002b90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b4c:	4b13      	ldr	r3, [pc, #76]	@ (8002b9c <HAL_InitTick+0x64>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <HAL_InitTick+0x60>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	4619      	mov	r1, r3
 8002b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 f965 	bl	8002e32 <HAL_SYSTICK_Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e00e      	b.n	8002b90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b0f      	cmp	r3, #15
 8002b76:	d80a      	bhi.n	8002b8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b80:	f000 f92f 	bl	8002de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b84:	4a06      	ldr	r2, [pc, #24]	@ (8002ba0 <HAL_InitTick+0x68>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	24000044 	.word	0x24000044
 8002b9c:	24000008 	.word	0x24000008
 8002ba0:	24000040 	.word	0x24000040

08002ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <HAL_IncTick+0x20>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <HAL_IncTick+0x24>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	4a04      	ldr	r2, [pc, #16]	@ (8002bc8 <HAL_IncTick+0x24>)
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	24000044 	.word	0x24000044
 8002bc8:	24000aa8 	.word	0x24000aa8

08002bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd0:	4b03      	ldr	r3, [pc, #12]	@ (8002be0 <HAL_GetTick+0x14>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	24000aa8 	.word	0x24000aa8

08002be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bec:	f7ff ffee 	bl	8002bcc <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d005      	beq.n	8002c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <HAL_Delay+0x44>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c0a:	bf00      	nop
 8002c0c:	f7ff ffde 	bl	8002bcc <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d8f7      	bhi.n	8002c0c <HAL_Delay+0x28>
  {
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	24000044 	.word	0x24000044

08002c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c6c <__NVIC_SetPriorityGrouping+0x40>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c54:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5a:	4a04      	ldr	r2, [pc, #16]	@ (8002c6c <__NVIC_SetPriorityGrouping+0x40>)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	60d3      	str	r3, [r2, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000ed00 	.word	0xe000ed00
 8002c70:	05fa0000 	.word	0x05fa0000

08002c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4907      	ldr	r1, [pc, #28]	@ (8002cc8 <__NVIC_EnableIRQ+0x38>)
 8002caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db0a      	blt.n	8002cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	490c      	ldr	r1, [pc, #48]	@ (8002d18 <__NVIC_SetPriority+0x4c>)
 8002ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf4:	e00a      	b.n	8002d0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4908      	ldr	r1, [pc, #32]	@ (8002d1c <__NVIC_SetPriority+0x50>)
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3b04      	subs	r3, #4
 8002d04:	0112      	lsls	r2, r2, #4
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	761a      	strb	r2, [r3, #24]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	@ 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f1c3 0307 	rsb	r3, r3, #7
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf28      	it	cs
 8002d3e:	2304      	movcs	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d902      	bls.n	8002d50 <NVIC_EncodePriority+0x30>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3b03      	subs	r3, #3
 8002d4e:	e000      	b.n	8002d52 <NVIC_EncodePriority+0x32>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	4313      	orrs	r3, r2
         );
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	@ 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d98:	d301      	bcc.n	8002d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc8 <SysTick_Config+0x40>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da6:	210f      	movs	r1, #15
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f7ff ff8e 	bl	8002ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <SysTick_Config+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db6:	4b04      	ldr	r3, [pc, #16]	@ (8002dc8 <SysTick_Config+0x40>)
 8002db8:	2207      	movs	r2, #7
 8002dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010

08002dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff29 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002df0:	f7ff ff40 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	6978      	ldr	r0, [r7, #20]
 8002dfc:	f7ff ff90 	bl	8002d20 <NVIC_EncodePriority>
 8002e00:	4602      	mov	r2, r0
 8002e02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff5f 	bl	8002ccc <__NVIC_SetPriority>
}
 8002e0e:	bf00      	nop
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff33 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff ffa4 	bl	8002d88 <SysTick_Config>
 8002e40:	4603      	mov	r3, r0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002e50:	f3bf 8f5f 	dmb	sy
}
 8002e54:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002e56:	4b07      	ldr	r3, [pc, #28]	@ (8002e74 <HAL_MPU_Disable+0x28>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5a:	4a06      	ldr	r2, [pc, #24]	@ (8002e74 <HAL_MPU_Disable+0x28>)
 8002e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e60:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002e62:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <HAL_MPU_Disable+0x2c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	605a      	str	r2, [r3, #4]
}
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000ed00 	.word	0xe000ed00
 8002e78:	e000ed90 	.word	0xe000ed90

08002e7c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002e84:	4a0b      	ldr	r2, [pc, #44]	@ (8002eb4 <HAL_MPU_Enable+0x38>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <HAL_MPU_Enable+0x3c>)
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	4a09      	ldr	r2, [pc, #36]	@ (8002eb8 <HAL_MPU_Enable+0x3c>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e98:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002e9a:	f3bf 8f4f 	dsb	sy
}
 8002e9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ea0:	f3bf 8f6f 	isb	sy
}
 8002ea4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000ed90 	.word	0xe000ed90
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	785a      	ldrb	r2, [r3, #1]
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f38 <HAL_MPU_ConfigRegion+0x7c>)
 8002eca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f38 <HAL_MPU_ConfigRegion+0x7c>)
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	4a19      	ldr	r2, [pc, #100]	@ (8002f38 <HAL_MPU_ConfigRegion+0x7c>)
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002ed8:	4a17      	ldr	r2, [pc, #92]	@ (8002f38 <HAL_MPU_ConfigRegion+0x7c>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	7b1b      	ldrb	r3, [r3, #12]
 8002ee4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7adb      	ldrb	r3, [r3, #11]
 8002eea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002eec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7a9b      	ldrb	r3, [r3, #10]
 8002ef2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ef4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7b5b      	ldrb	r3, [r3, #13]
 8002efa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002efc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	7b9b      	ldrb	r3, [r3, #14]
 8002f02:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7bdb      	ldrb	r3, [r3, #15]
 8002f0a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	7a5b      	ldrb	r3, [r3, #9]
 8002f12:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	7a1b      	ldrb	r3, [r3, #8]
 8002f1a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f1c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	7812      	ldrb	r2, [r2, #0]
 8002f22:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f24:	4a04      	ldr	r2, [pc, #16]	@ (8002f38 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f26:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f28:	6113      	str	r3, [r2, #16]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	e000ed90 	.word	0xe000ed90

08002f3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002f44:	f7ff fe42 	bl	8002bcc <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e2dc      	b.n	800350e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d008      	beq.n	8002f72 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2280      	movs	r2, #128	@ 0x80
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e2cd      	b.n	800350e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a76      	ldr	r2, [pc, #472]	@ (8003150 <HAL_DMA_Abort+0x214>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d04a      	beq.n	8003012 <HAL_DMA_Abort+0xd6>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a74      	ldr	r2, [pc, #464]	@ (8003154 <HAL_DMA_Abort+0x218>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d045      	beq.n	8003012 <HAL_DMA_Abort+0xd6>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a73      	ldr	r2, [pc, #460]	@ (8003158 <HAL_DMA_Abort+0x21c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d040      	beq.n	8003012 <HAL_DMA_Abort+0xd6>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a71      	ldr	r2, [pc, #452]	@ (800315c <HAL_DMA_Abort+0x220>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d03b      	beq.n	8003012 <HAL_DMA_Abort+0xd6>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a70      	ldr	r2, [pc, #448]	@ (8003160 <HAL_DMA_Abort+0x224>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d036      	beq.n	8003012 <HAL_DMA_Abort+0xd6>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a6e      	ldr	r2, [pc, #440]	@ (8003164 <HAL_DMA_Abort+0x228>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d031      	beq.n	8003012 <HAL_DMA_Abort+0xd6>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6d      	ldr	r2, [pc, #436]	@ (8003168 <HAL_DMA_Abort+0x22c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d02c      	beq.n	8003012 <HAL_DMA_Abort+0xd6>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a6b      	ldr	r2, [pc, #428]	@ (800316c <HAL_DMA_Abort+0x230>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d027      	beq.n	8003012 <HAL_DMA_Abort+0xd6>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6a      	ldr	r2, [pc, #424]	@ (8003170 <HAL_DMA_Abort+0x234>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d022      	beq.n	8003012 <HAL_DMA_Abort+0xd6>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a68      	ldr	r2, [pc, #416]	@ (8003174 <HAL_DMA_Abort+0x238>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01d      	beq.n	8003012 <HAL_DMA_Abort+0xd6>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a67      	ldr	r2, [pc, #412]	@ (8003178 <HAL_DMA_Abort+0x23c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d018      	beq.n	8003012 <HAL_DMA_Abort+0xd6>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a65      	ldr	r2, [pc, #404]	@ (800317c <HAL_DMA_Abort+0x240>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d013      	beq.n	8003012 <HAL_DMA_Abort+0xd6>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a64      	ldr	r2, [pc, #400]	@ (8003180 <HAL_DMA_Abort+0x244>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00e      	beq.n	8003012 <HAL_DMA_Abort+0xd6>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a62      	ldr	r2, [pc, #392]	@ (8003184 <HAL_DMA_Abort+0x248>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d009      	beq.n	8003012 <HAL_DMA_Abort+0xd6>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a61      	ldr	r2, [pc, #388]	@ (8003188 <HAL_DMA_Abort+0x24c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d004      	beq.n	8003012 <HAL_DMA_Abort+0xd6>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a5f      	ldr	r2, [pc, #380]	@ (800318c <HAL_DMA_Abort+0x250>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d101      	bne.n	8003016 <HAL_DMA_Abort+0xda>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_DMA_Abort+0xdc>
 8003016:	2300      	movs	r3, #0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d013      	beq.n	8003044 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 021e 	bic.w	r2, r2, #30
 800302a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800303a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	e00a      	b.n	800305a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 020e 	bic.w	r2, r2, #14
 8003052:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a3c      	ldr	r2, [pc, #240]	@ (8003150 <HAL_DMA_Abort+0x214>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d072      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a3a      	ldr	r2, [pc, #232]	@ (8003154 <HAL_DMA_Abort+0x218>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d06d      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a39      	ldr	r2, [pc, #228]	@ (8003158 <HAL_DMA_Abort+0x21c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d068      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a37      	ldr	r2, [pc, #220]	@ (800315c <HAL_DMA_Abort+0x220>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d063      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a36      	ldr	r2, [pc, #216]	@ (8003160 <HAL_DMA_Abort+0x224>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d05e      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a34      	ldr	r2, [pc, #208]	@ (8003164 <HAL_DMA_Abort+0x228>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d059      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a33      	ldr	r2, [pc, #204]	@ (8003168 <HAL_DMA_Abort+0x22c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d054      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a31      	ldr	r2, [pc, #196]	@ (800316c <HAL_DMA_Abort+0x230>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d04f      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a30      	ldr	r2, [pc, #192]	@ (8003170 <HAL_DMA_Abort+0x234>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d04a      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003174 <HAL_DMA_Abort+0x238>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d045      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003178 <HAL_DMA_Abort+0x23c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d040      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a2b      	ldr	r2, [pc, #172]	@ (800317c <HAL_DMA_Abort+0x240>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d03b      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003180 <HAL_DMA_Abort+0x244>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d036      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a28      	ldr	r2, [pc, #160]	@ (8003184 <HAL_DMA_Abort+0x248>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d031      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a27      	ldr	r2, [pc, #156]	@ (8003188 <HAL_DMA_Abort+0x24c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d02c      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a25      	ldr	r2, [pc, #148]	@ (800318c <HAL_DMA_Abort+0x250>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d027      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a24      	ldr	r2, [pc, #144]	@ (8003190 <HAL_DMA_Abort+0x254>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a22      	ldr	r2, [pc, #136]	@ (8003194 <HAL_DMA_Abort+0x258>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01d      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a21      	ldr	r2, [pc, #132]	@ (8003198 <HAL_DMA_Abort+0x25c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d018      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1f      	ldr	r2, [pc, #124]	@ (800319c <HAL_DMA_Abort+0x260>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1e      	ldr	r2, [pc, #120]	@ (80031a0 <HAL_DMA_Abort+0x264>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00e      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1c      	ldr	r2, [pc, #112]	@ (80031a4 <HAL_DMA_Abort+0x268>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d009      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1b      	ldr	r2, [pc, #108]	@ (80031a8 <HAL_DMA_Abort+0x26c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_DMA_Abort+0x20e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a19      	ldr	r2, [pc, #100]	@ (80031ac <HAL_DMA_Abort+0x270>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d132      	bne.n	80031b0 <HAL_DMA_Abort+0x274>
 800314a:	2301      	movs	r3, #1
 800314c:	e031      	b.n	80031b2 <HAL_DMA_Abort+0x276>
 800314e:	bf00      	nop
 8003150:	40020010 	.word	0x40020010
 8003154:	40020028 	.word	0x40020028
 8003158:	40020040 	.word	0x40020040
 800315c:	40020058 	.word	0x40020058
 8003160:	40020070 	.word	0x40020070
 8003164:	40020088 	.word	0x40020088
 8003168:	400200a0 	.word	0x400200a0
 800316c:	400200b8 	.word	0x400200b8
 8003170:	40020410 	.word	0x40020410
 8003174:	40020428 	.word	0x40020428
 8003178:	40020440 	.word	0x40020440
 800317c:	40020458 	.word	0x40020458
 8003180:	40020470 	.word	0x40020470
 8003184:	40020488 	.word	0x40020488
 8003188:	400204a0 	.word	0x400204a0
 800318c:	400204b8 	.word	0x400204b8
 8003190:	58025408 	.word	0x58025408
 8003194:	5802541c 	.word	0x5802541c
 8003198:	58025430 	.word	0x58025430
 800319c:	58025444 	.word	0x58025444
 80031a0:	58025458 	.word	0x58025458
 80031a4:	5802546c 	.word	0x5802546c
 80031a8:	58025480 	.word	0x58025480
 80031ac:	58025494 	.word	0x58025494
 80031b0:	2300      	movs	r3, #0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a6d      	ldr	r2, [pc, #436]	@ (8003380 <HAL_DMA_Abort+0x444>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d04a      	beq.n	8003266 <HAL_DMA_Abort+0x32a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a6b      	ldr	r2, [pc, #428]	@ (8003384 <HAL_DMA_Abort+0x448>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d045      	beq.n	8003266 <HAL_DMA_Abort+0x32a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a6a      	ldr	r2, [pc, #424]	@ (8003388 <HAL_DMA_Abort+0x44c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d040      	beq.n	8003266 <HAL_DMA_Abort+0x32a>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a68      	ldr	r2, [pc, #416]	@ (800338c <HAL_DMA_Abort+0x450>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d03b      	beq.n	8003266 <HAL_DMA_Abort+0x32a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a67      	ldr	r2, [pc, #412]	@ (8003390 <HAL_DMA_Abort+0x454>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d036      	beq.n	8003266 <HAL_DMA_Abort+0x32a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a65      	ldr	r2, [pc, #404]	@ (8003394 <HAL_DMA_Abort+0x458>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d031      	beq.n	8003266 <HAL_DMA_Abort+0x32a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a64      	ldr	r2, [pc, #400]	@ (8003398 <HAL_DMA_Abort+0x45c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d02c      	beq.n	8003266 <HAL_DMA_Abort+0x32a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a62      	ldr	r2, [pc, #392]	@ (800339c <HAL_DMA_Abort+0x460>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d027      	beq.n	8003266 <HAL_DMA_Abort+0x32a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a61      	ldr	r2, [pc, #388]	@ (80033a0 <HAL_DMA_Abort+0x464>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d022      	beq.n	8003266 <HAL_DMA_Abort+0x32a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a5f      	ldr	r2, [pc, #380]	@ (80033a4 <HAL_DMA_Abort+0x468>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01d      	beq.n	8003266 <HAL_DMA_Abort+0x32a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a5e      	ldr	r2, [pc, #376]	@ (80033a8 <HAL_DMA_Abort+0x46c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d018      	beq.n	8003266 <HAL_DMA_Abort+0x32a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a5c      	ldr	r2, [pc, #368]	@ (80033ac <HAL_DMA_Abort+0x470>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_DMA_Abort+0x32a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a5b      	ldr	r2, [pc, #364]	@ (80033b0 <HAL_DMA_Abort+0x474>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00e      	beq.n	8003266 <HAL_DMA_Abort+0x32a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a59      	ldr	r2, [pc, #356]	@ (80033b4 <HAL_DMA_Abort+0x478>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d009      	beq.n	8003266 <HAL_DMA_Abort+0x32a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a58      	ldr	r2, [pc, #352]	@ (80033b8 <HAL_DMA_Abort+0x47c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d004      	beq.n	8003266 <HAL_DMA_Abort+0x32a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a56      	ldr	r2, [pc, #344]	@ (80033bc <HAL_DMA_Abort+0x480>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d108      	bne.n	8003278 <HAL_DMA_Abort+0x33c>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0201 	bic.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	e007      	b.n	8003288 <HAL_DMA_Abort+0x34c>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0201 	bic.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003288:	e013      	b.n	80032b2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800328a:	f7ff fc9f 	bl	8002bcc <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b05      	cmp	r3, #5
 8003296:	d90c      	bls.n	80032b2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2203      	movs	r2, #3
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e12d      	b.n	800350e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e5      	bne.n	800328a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003380 <HAL_DMA_Abort+0x444>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d04a      	beq.n	800335e <HAL_DMA_Abort+0x422>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003384 <HAL_DMA_Abort+0x448>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d045      	beq.n	800335e <HAL_DMA_Abort+0x422>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003388 <HAL_DMA_Abort+0x44c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d040      	beq.n	800335e <HAL_DMA_Abort+0x422>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a2a      	ldr	r2, [pc, #168]	@ (800338c <HAL_DMA_Abort+0x450>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d03b      	beq.n	800335e <HAL_DMA_Abort+0x422>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a29      	ldr	r2, [pc, #164]	@ (8003390 <HAL_DMA_Abort+0x454>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d036      	beq.n	800335e <HAL_DMA_Abort+0x422>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a27      	ldr	r2, [pc, #156]	@ (8003394 <HAL_DMA_Abort+0x458>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d031      	beq.n	800335e <HAL_DMA_Abort+0x422>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a26      	ldr	r2, [pc, #152]	@ (8003398 <HAL_DMA_Abort+0x45c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d02c      	beq.n	800335e <HAL_DMA_Abort+0x422>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a24      	ldr	r2, [pc, #144]	@ (800339c <HAL_DMA_Abort+0x460>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d027      	beq.n	800335e <HAL_DMA_Abort+0x422>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a23      	ldr	r2, [pc, #140]	@ (80033a0 <HAL_DMA_Abort+0x464>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d022      	beq.n	800335e <HAL_DMA_Abort+0x422>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a21      	ldr	r2, [pc, #132]	@ (80033a4 <HAL_DMA_Abort+0x468>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01d      	beq.n	800335e <HAL_DMA_Abort+0x422>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a20      	ldr	r2, [pc, #128]	@ (80033a8 <HAL_DMA_Abort+0x46c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d018      	beq.n	800335e <HAL_DMA_Abort+0x422>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a1e      	ldr	r2, [pc, #120]	@ (80033ac <HAL_DMA_Abort+0x470>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_DMA_Abort+0x422>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1d      	ldr	r2, [pc, #116]	@ (80033b0 <HAL_DMA_Abort+0x474>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00e      	beq.n	800335e <HAL_DMA_Abort+0x422>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1b      	ldr	r2, [pc, #108]	@ (80033b4 <HAL_DMA_Abort+0x478>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d009      	beq.n	800335e <HAL_DMA_Abort+0x422>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1a      	ldr	r2, [pc, #104]	@ (80033b8 <HAL_DMA_Abort+0x47c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d004      	beq.n	800335e <HAL_DMA_Abort+0x422>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a18      	ldr	r2, [pc, #96]	@ (80033bc <HAL_DMA_Abort+0x480>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d101      	bne.n	8003362 <HAL_DMA_Abort+0x426>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_DMA_Abort+0x428>
 8003362:	2300      	movs	r3, #0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d02b      	beq.n	80033c0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	223f      	movs	r2, #63	@ 0x3f
 8003378:	409a      	lsls	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	609a      	str	r2, [r3, #8]
 800337e:	e02a      	b.n	80033d6 <HAL_DMA_Abort+0x49a>
 8003380:	40020010 	.word	0x40020010
 8003384:	40020028 	.word	0x40020028
 8003388:	40020040 	.word	0x40020040
 800338c:	40020058 	.word	0x40020058
 8003390:	40020070 	.word	0x40020070
 8003394:	40020088 	.word	0x40020088
 8003398:	400200a0 	.word	0x400200a0
 800339c:	400200b8 	.word	0x400200b8
 80033a0:	40020410 	.word	0x40020410
 80033a4:	40020428 	.word	0x40020428
 80033a8:	40020440 	.word	0x40020440
 80033ac:	40020458 	.word	0x40020458
 80033b0:	40020470 	.word	0x40020470
 80033b4:	40020488 	.word	0x40020488
 80033b8:	400204a0 	.word	0x400204a0
 80033bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	2201      	movs	r2, #1
 80033d0:	409a      	lsls	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a4f      	ldr	r2, [pc, #316]	@ (8003518 <HAL_DMA_Abort+0x5dc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d072      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a4d      	ldr	r2, [pc, #308]	@ (800351c <HAL_DMA_Abort+0x5e0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d06d      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a4c      	ldr	r2, [pc, #304]	@ (8003520 <HAL_DMA_Abort+0x5e4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d068      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003524 <HAL_DMA_Abort+0x5e8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d063      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a49      	ldr	r2, [pc, #292]	@ (8003528 <HAL_DMA_Abort+0x5ec>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d05e      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a47      	ldr	r2, [pc, #284]	@ (800352c <HAL_DMA_Abort+0x5f0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d059      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a46      	ldr	r2, [pc, #280]	@ (8003530 <HAL_DMA_Abort+0x5f4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d054      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a44      	ldr	r2, [pc, #272]	@ (8003534 <HAL_DMA_Abort+0x5f8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d04f      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a43      	ldr	r2, [pc, #268]	@ (8003538 <HAL_DMA_Abort+0x5fc>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d04a      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a41      	ldr	r2, [pc, #260]	@ (800353c <HAL_DMA_Abort+0x600>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d045      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a40      	ldr	r2, [pc, #256]	@ (8003540 <HAL_DMA_Abort+0x604>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d040      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a3e      	ldr	r2, [pc, #248]	@ (8003544 <HAL_DMA_Abort+0x608>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d03b      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a3d      	ldr	r2, [pc, #244]	@ (8003548 <HAL_DMA_Abort+0x60c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d036      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a3b      	ldr	r2, [pc, #236]	@ (800354c <HAL_DMA_Abort+0x610>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d031      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a3a      	ldr	r2, [pc, #232]	@ (8003550 <HAL_DMA_Abort+0x614>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d02c      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a38      	ldr	r2, [pc, #224]	@ (8003554 <HAL_DMA_Abort+0x618>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d027      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a37      	ldr	r2, [pc, #220]	@ (8003558 <HAL_DMA_Abort+0x61c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d022      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a35      	ldr	r2, [pc, #212]	@ (800355c <HAL_DMA_Abort+0x620>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d01d      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a34      	ldr	r2, [pc, #208]	@ (8003560 <HAL_DMA_Abort+0x624>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d018      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a32      	ldr	r2, [pc, #200]	@ (8003564 <HAL_DMA_Abort+0x628>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d013      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a31      	ldr	r2, [pc, #196]	@ (8003568 <HAL_DMA_Abort+0x62c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00e      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a2f      	ldr	r2, [pc, #188]	@ (800356c <HAL_DMA_Abort+0x630>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d009      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2e      	ldr	r2, [pc, #184]	@ (8003570 <HAL_DMA_Abort+0x634>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d004      	beq.n	80034c6 <HAL_DMA_Abort+0x58a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003574 <HAL_DMA_Abort+0x638>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <HAL_DMA_Abort+0x58e>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_DMA_Abort+0x590>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d015      	beq.n	80034fc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80034d8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00c      	beq.n	80034fc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034f0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80034fa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40020010 	.word	0x40020010
 800351c:	40020028 	.word	0x40020028
 8003520:	40020040 	.word	0x40020040
 8003524:	40020058 	.word	0x40020058
 8003528:	40020070 	.word	0x40020070
 800352c:	40020088 	.word	0x40020088
 8003530:	400200a0 	.word	0x400200a0
 8003534:	400200b8 	.word	0x400200b8
 8003538:	40020410 	.word	0x40020410
 800353c:	40020428 	.word	0x40020428
 8003540:	40020440 	.word	0x40020440
 8003544:	40020458 	.word	0x40020458
 8003548:	40020470 	.word	0x40020470
 800354c:	40020488 	.word	0x40020488
 8003550:	400204a0 	.word	0x400204a0
 8003554:	400204b8 	.word	0x400204b8
 8003558:	58025408 	.word	0x58025408
 800355c:	5802541c 	.word	0x5802541c
 8003560:	58025430 	.word	0x58025430
 8003564:	58025444 	.word	0x58025444
 8003568:	58025458 	.word	0x58025458
 800356c:	5802546c 	.word	0x5802546c
 8003570:	58025480 	.word	0x58025480
 8003574:	58025494 	.word	0x58025494

08003578 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e237      	b.n	80039fa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d004      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2280      	movs	r2, #128	@ 0x80
 800359a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e22c      	b.n	80039fa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a5c      	ldr	r2, [pc, #368]	@ (8003718 <HAL_DMA_Abort_IT+0x1a0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d04a      	beq.n	8003640 <HAL_DMA_Abort_IT+0xc8>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a5b      	ldr	r2, [pc, #364]	@ (800371c <HAL_DMA_Abort_IT+0x1a4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d045      	beq.n	8003640 <HAL_DMA_Abort_IT+0xc8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a59      	ldr	r2, [pc, #356]	@ (8003720 <HAL_DMA_Abort_IT+0x1a8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d040      	beq.n	8003640 <HAL_DMA_Abort_IT+0xc8>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a58      	ldr	r2, [pc, #352]	@ (8003724 <HAL_DMA_Abort_IT+0x1ac>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d03b      	beq.n	8003640 <HAL_DMA_Abort_IT+0xc8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a56      	ldr	r2, [pc, #344]	@ (8003728 <HAL_DMA_Abort_IT+0x1b0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d036      	beq.n	8003640 <HAL_DMA_Abort_IT+0xc8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a55      	ldr	r2, [pc, #340]	@ (800372c <HAL_DMA_Abort_IT+0x1b4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d031      	beq.n	8003640 <HAL_DMA_Abort_IT+0xc8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a53      	ldr	r2, [pc, #332]	@ (8003730 <HAL_DMA_Abort_IT+0x1b8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d02c      	beq.n	8003640 <HAL_DMA_Abort_IT+0xc8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a52      	ldr	r2, [pc, #328]	@ (8003734 <HAL_DMA_Abort_IT+0x1bc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d027      	beq.n	8003640 <HAL_DMA_Abort_IT+0xc8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a50      	ldr	r2, [pc, #320]	@ (8003738 <HAL_DMA_Abort_IT+0x1c0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d022      	beq.n	8003640 <HAL_DMA_Abort_IT+0xc8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a4f      	ldr	r2, [pc, #316]	@ (800373c <HAL_DMA_Abort_IT+0x1c4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d01d      	beq.n	8003640 <HAL_DMA_Abort_IT+0xc8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a4d      	ldr	r2, [pc, #308]	@ (8003740 <HAL_DMA_Abort_IT+0x1c8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d018      	beq.n	8003640 <HAL_DMA_Abort_IT+0xc8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a4c      	ldr	r2, [pc, #304]	@ (8003744 <HAL_DMA_Abort_IT+0x1cc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d013      	beq.n	8003640 <HAL_DMA_Abort_IT+0xc8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a4a      	ldr	r2, [pc, #296]	@ (8003748 <HAL_DMA_Abort_IT+0x1d0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00e      	beq.n	8003640 <HAL_DMA_Abort_IT+0xc8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a49      	ldr	r2, [pc, #292]	@ (800374c <HAL_DMA_Abort_IT+0x1d4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d009      	beq.n	8003640 <HAL_DMA_Abort_IT+0xc8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a47      	ldr	r2, [pc, #284]	@ (8003750 <HAL_DMA_Abort_IT+0x1d8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_DMA_Abort_IT+0xc8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a46      	ldr	r2, [pc, #280]	@ (8003754 <HAL_DMA_Abort_IT+0x1dc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <HAL_DMA_Abort_IT+0xcc>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <HAL_DMA_Abort_IT+0xce>
 8003644:	2300      	movs	r3, #0
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8086 	beq.w	8003758 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2204      	movs	r2, #4
 8003650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2f      	ldr	r2, [pc, #188]	@ (8003718 <HAL_DMA_Abort_IT+0x1a0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d04a      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x17c>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a2e      	ldr	r2, [pc, #184]	@ (800371c <HAL_DMA_Abort_IT+0x1a4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d045      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x17c>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2c      	ldr	r2, [pc, #176]	@ (8003720 <HAL_DMA_Abort_IT+0x1a8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d040      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x17c>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2b      	ldr	r2, [pc, #172]	@ (8003724 <HAL_DMA_Abort_IT+0x1ac>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d03b      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x17c>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a29      	ldr	r2, [pc, #164]	@ (8003728 <HAL_DMA_Abort_IT+0x1b0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d036      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x17c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a28      	ldr	r2, [pc, #160]	@ (800372c <HAL_DMA_Abort_IT+0x1b4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d031      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x17c>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a26      	ldr	r2, [pc, #152]	@ (8003730 <HAL_DMA_Abort_IT+0x1b8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d02c      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x17c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a25      	ldr	r2, [pc, #148]	@ (8003734 <HAL_DMA_Abort_IT+0x1bc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d027      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x17c>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a23      	ldr	r2, [pc, #140]	@ (8003738 <HAL_DMA_Abort_IT+0x1c0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d022      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x17c>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a22      	ldr	r2, [pc, #136]	@ (800373c <HAL_DMA_Abort_IT+0x1c4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d01d      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x17c>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a20      	ldr	r2, [pc, #128]	@ (8003740 <HAL_DMA_Abort_IT+0x1c8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d018      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x17c>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003744 <HAL_DMA_Abort_IT+0x1cc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d013      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x17c>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003748 <HAL_DMA_Abort_IT+0x1d0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00e      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x17c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1c      	ldr	r2, [pc, #112]	@ (800374c <HAL_DMA_Abort_IT+0x1d4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d009      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x17c>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003750 <HAL_DMA_Abort_IT+0x1d8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d004      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x17c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a19      	ldr	r2, [pc, #100]	@ (8003754 <HAL_DMA_Abort_IT+0x1dc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d108      	bne.n	8003706 <HAL_DMA_Abort_IT+0x18e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	e178      	b.n	80039f8 <HAL_DMA_Abort_IT+0x480>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0201 	bic.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	e16f      	b.n	80039f8 <HAL_DMA_Abort_IT+0x480>
 8003718:	40020010 	.word	0x40020010
 800371c:	40020028 	.word	0x40020028
 8003720:	40020040 	.word	0x40020040
 8003724:	40020058 	.word	0x40020058
 8003728:	40020070 	.word	0x40020070
 800372c:	40020088 	.word	0x40020088
 8003730:	400200a0 	.word	0x400200a0
 8003734:	400200b8 	.word	0x400200b8
 8003738:	40020410 	.word	0x40020410
 800373c:	40020428 	.word	0x40020428
 8003740:	40020440 	.word	0x40020440
 8003744:	40020458 	.word	0x40020458
 8003748:	40020470 	.word	0x40020470
 800374c:	40020488 	.word	0x40020488
 8003750:	400204a0 	.word	0x400204a0
 8003754:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 020e 	bic.w	r2, r2, #14
 8003766:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a6c      	ldr	r2, [pc, #432]	@ (8003920 <HAL_DMA_Abort_IT+0x3a8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d04a      	beq.n	8003808 <HAL_DMA_Abort_IT+0x290>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6b      	ldr	r2, [pc, #428]	@ (8003924 <HAL_DMA_Abort_IT+0x3ac>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d045      	beq.n	8003808 <HAL_DMA_Abort_IT+0x290>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a69      	ldr	r2, [pc, #420]	@ (8003928 <HAL_DMA_Abort_IT+0x3b0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d040      	beq.n	8003808 <HAL_DMA_Abort_IT+0x290>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a68      	ldr	r2, [pc, #416]	@ (800392c <HAL_DMA_Abort_IT+0x3b4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d03b      	beq.n	8003808 <HAL_DMA_Abort_IT+0x290>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a66      	ldr	r2, [pc, #408]	@ (8003930 <HAL_DMA_Abort_IT+0x3b8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d036      	beq.n	8003808 <HAL_DMA_Abort_IT+0x290>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a65      	ldr	r2, [pc, #404]	@ (8003934 <HAL_DMA_Abort_IT+0x3bc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d031      	beq.n	8003808 <HAL_DMA_Abort_IT+0x290>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a63      	ldr	r2, [pc, #396]	@ (8003938 <HAL_DMA_Abort_IT+0x3c0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d02c      	beq.n	8003808 <HAL_DMA_Abort_IT+0x290>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a62      	ldr	r2, [pc, #392]	@ (800393c <HAL_DMA_Abort_IT+0x3c4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d027      	beq.n	8003808 <HAL_DMA_Abort_IT+0x290>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a60      	ldr	r2, [pc, #384]	@ (8003940 <HAL_DMA_Abort_IT+0x3c8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d022      	beq.n	8003808 <HAL_DMA_Abort_IT+0x290>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a5f      	ldr	r2, [pc, #380]	@ (8003944 <HAL_DMA_Abort_IT+0x3cc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d01d      	beq.n	8003808 <HAL_DMA_Abort_IT+0x290>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003948 <HAL_DMA_Abort_IT+0x3d0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d018      	beq.n	8003808 <HAL_DMA_Abort_IT+0x290>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a5c      	ldr	r2, [pc, #368]	@ (800394c <HAL_DMA_Abort_IT+0x3d4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d013      	beq.n	8003808 <HAL_DMA_Abort_IT+0x290>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003950 <HAL_DMA_Abort_IT+0x3d8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00e      	beq.n	8003808 <HAL_DMA_Abort_IT+0x290>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a59      	ldr	r2, [pc, #356]	@ (8003954 <HAL_DMA_Abort_IT+0x3dc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d009      	beq.n	8003808 <HAL_DMA_Abort_IT+0x290>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a57      	ldr	r2, [pc, #348]	@ (8003958 <HAL_DMA_Abort_IT+0x3e0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_DMA_Abort_IT+0x290>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a56      	ldr	r2, [pc, #344]	@ (800395c <HAL_DMA_Abort_IT+0x3e4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d108      	bne.n	800381a <HAL_DMA_Abort_IT+0x2a2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	e007      	b.n	800382a <HAL_DMA_Abort_IT+0x2b2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a3c      	ldr	r2, [pc, #240]	@ (8003920 <HAL_DMA_Abort_IT+0x3a8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d072      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a3a      	ldr	r2, [pc, #232]	@ (8003924 <HAL_DMA_Abort_IT+0x3ac>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d06d      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a39      	ldr	r2, [pc, #228]	@ (8003928 <HAL_DMA_Abort_IT+0x3b0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d068      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a37      	ldr	r2, [pc, #220]	@ (800392c <HAL_DMA_Abort_IT+0x3b4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d063      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a36      	ldr	r2, [pc, #216]	@ (8003930 <HAL_DMA_Abort_IT+0x3b8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d05e      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a34      	ldr	r2, [pc, #208]	@ (8003934 <HAL_DMA_Abort_IT+0x3bc>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d059      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a33      	ldr	r2, [pc, #204]	@ (8003938 <HAL_DMA_Abort_IT+0x3c0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d054      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a31      	ldr	r2, [pc, #196]	@ (800393c <HAL_DMA_Abort_IT+0x3c4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d04f      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a30      	ldr	r2, [pc, #192]	@ (8003940 <HAL_DMA_Abort_IT+0x3c8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d04a      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2e      	ldr	r2, [pc, #184]	@ (8003944 <HAL_DMA_Abort_IT+0x3cc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d045      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2d      	ldr	r2, [pc, #180]	@ (8003948 <HAL_DMA_Abort_IT+0x3d0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d040      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2b      	ldr	r2, [pc, #172]	@ (800394c <HAL_DMA_Abort_IT+0x3d4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d03b      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003950 <HAL_DMA_Abort_IT+0x3d8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d036      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a28      	ldr	r2, [pc, #160]	@ (8003954 <HAL_DMA_Abort_IT+0x3dc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d031      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a27      	ldr	r2, [pc, #156]	@ (8003958 <HAL_DMA_Abort_IT+0x3e0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d02c      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a25      	ldr	r2, [pc, #148]	@ (800395c <HAL_DMA_Abort_IT+0x3e4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d027      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a24      	ldr	r2, [pc, #144]	@ (8003960 <HAL_DMA_Abort_IT+0x3e8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d022      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a22      	ldr	r2, [pc, #136]	@ (8003964 <HAL_DMA_Abort_IT+0x3ec>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01d      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a21      	ldr	r2, [pc, #132]	@ (8003968 <HAL_DMA_Abort_IT+0x3f0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d018      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1f      	ldr	r2, [pc, #124]	@ (800396c <HAL_DMA_Abort_IT+0x3f4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003970 <HAL_DMA_Abort_IT+0x3f8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00e      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1c      	ldr	r2, [pc, #112]	@ (8003974 <HAL_DMA_Abort_IT+0x3fc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d009      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1b      	ldr	r2, [pc, #108]	@ (8003978 <HAL_DMA_Abort_IT+0x400>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <HAL_DMA_Abort_IT+0x3a2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a19      	ldr	r2, [pc, #100]	@ (800397c <HAL_DMA_Abort_IT+0x404>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d132      	bne.n	8003980 <HAL_DMA_Abort_IT+0x408>
 800391a:	2301      	movs	r3, #1
 800391c:	e031      	b.n	8003982 <HAL_DMA_Abort_IT+0x40a>
 800391e:	bf00      	nop
 8003920:	40020010 	.word	0x40020010
 8003924:	40020028 	.word	0x40020028
 8003928:	40020040 	.word	0x40020040
 800392c:	40020058 	.word	0x40020058
 8003930:	40020070 	.word	0x40020070
 8003934:	40020088 	.word	0x40020088
 8003938:	400200a0 	.word	0x400200a0
 800393c:	400200b8 	.word	0x400200b8
 8003940:	40020410 	.word	0x40020410
 8003944:	40020428 	.word	0x40020428
 8003948:	40020440 	.word	0x40020440
 800394c:	40020458 	.word	0x40020458
 8003950:	40020470 	.word	0x40020470
 8003954:	40020488 	.word	0x40020488
 8003958:	400204a0 	.word	0x400204a0
 800395c:	400204b8 	.word	0x400204b8
 8003960:	58025408 	.word	0x58025408
 8003964:	5802541c 	.word	0x5802541c
 8003968:	58025430 	.word	0x58025430
 800396c:	58025444 	.word	0x58025444
 8003970:	58025458 	.word	0x58025458
 8003974:	5802546c 	.word	0x5802546c
 8003978:	58025480 	.word	0x58025480
 800397c:	58025494 	.word	0x58025494
 8003980:	2300      	movs	r3, #0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d028      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003990:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003994:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	2201      	movs	r2, #1
 80039a6:	409a      	lsls	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00c      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop

08003a04 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b098      	sub	sp, #96	@ 0x60
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003a0c:	4a84      	ldr	r2, [pc, #528]	@ (8003c20 <HAL_FDCAN_Init+0x21c>)
 8003a0e:	f107 030c 	add.w	r3, r7, #12
 8003a12:	4611      	mov	r1, r2
 8003a14:	224c      	movs	r2, #76	@ 0x4c
 8003a16:	4618      	mov	r0, r3
 8003a18:	f00c fb11 	bl	801003e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e1c6      	b.n	8003db4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c24 <HAL_FDCAN_Init+0x220>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d106      	bne.n	8003a3e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003a38:	461a      	mov	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fd f8b0 	bl	8000bb8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0210 	bic.w	r2, r2, #16
 8003a66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a68:	f7ff f8b0 	bl	8002bcc <HAL_GetTick>
 8003a6c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a6e:	e014      	b.n	8003a9a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a70:	f7ff f8ac 	bl	8002bcc <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b0a      	cmp	r3, #10
 8003a7c:	d90d      	bls.n	8003a9a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2203      	movs	r2, #3
 8003a92:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e18c      	b.n	8003db4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d0e3      	beq.n	8003a70 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ab8:	f7ff f888 	bl	8002bcc <HAL_GetTick>
 8003abc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003abe:	e014      	b.n	8003aea <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ac0:	f7ff f884 	bl	8002bcc <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b0a      	cmp	r3, #10
 8003acc:	d90d      	bls.n	8003aea <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ad4:	f043 0201 	orr.w	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e164      	b.n	8003db4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0e3      	beq.n	8003ac0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0202 	orr.w	r2, r2, #2
 8003b06:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	7c1b      	ldrb	r3, [r3, #16]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d108      	bne.n	8003b22 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b1e:	619a      	str	r2, [r3, #24]
 8003b20:	e007      	b.n	8003b32 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699a      	ldr	r2, [r3, #24]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b30:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	7c5b      	ldrb	r3, [r3, #17]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d108      	bne.n	8003b4c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b48:	619a      	str	r2, [r3, #24]
 8003b4a:	e007      	b.n	8003b5c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b5a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	7c9b      	ldrb	r3, [r3, #18]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d108      	bne.n	8003b76 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b72:	619a      	str	r2, [r3, #24]
 8003b74:	e007      	b.n	8003b86 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699a      	ldr	r2, [r3, #24]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b84:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003baa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0210 	bic.w	r2, r2, #16
 8003bba:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d108      	bne.n	8003bd6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0204 	orr.w	r2, r2, #4
 8003bd2:	619a      	str	r2, [r3, #24]
 8003bd4:	e030      	b.n	8003c38 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d02c      	beq.n	8003c38 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d020      	beq.n	8003c28 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699a      	ldr	r2, [r3, #24]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bf4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0210 	orr.w	r2, r2, #16
 8003c04:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d114      	bne.n	8003c38 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0220 	orr.w	r2, r2, #32
 8003c1c:	619a      	str	r2, [r3, #24]
 8003c1e:	e00b      	b.n	8003c38 <HAL_FDCAN_Init+0x234>
 8003c20:	0801308c 	.word	0x0801308c
 8003c24:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0220 	orr.w	r2, r2, #32
 8003c36:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c48:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c50:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c60:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c62:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c6c:	d115      	bne.n	8003c9a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c7c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	3b01      	subs	r3, #1
 8003c84:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c86:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c96:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c98:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc0:	4413      	add	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d011      	beq.n	8003cea <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003cce:	f023 0107 	bic.w	r1, r3, #7
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	3360      	adds	r3, #96	@ 0x60
 8003cda:	443b      	add	r3, r7
 8003cdc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d011      	beq.n	8003d16 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003cfa:	f023 0107 	bic.w	r1, r3, #7
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	3360      	adds	r3, #96	@ 0x60
 8003d06:	443b      	add	r3, r7
 8003d08:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d012      	beq.n	8003d44 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003d26:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	3360      	adds	r3, #96	@ 0x60
 8003d32:	443b      	add	r3, r7
 8003d34:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003d38:	011a      	lsls	r2, r3, #4
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d012      	beq.n	8003d72 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003d54:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	3360      	adds	r3, #96	@ 0x60
 8003d60:	443b      	add	r3, r7
 8003d62:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003d66:	021a      	lsls	r2, r3, #8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a11      	ldr	r2, [pc, #68]	@ (8003dbc <HAL_FDCAN_Init+0x3b8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d107      	bne.n	8003d8c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f022 0203 	bic.w	r2, r2, #3
 8003d8a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fe13 	bl	80049d0 <FDCAN_CalcultateRamBlockAddresses>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003db0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3760      	adds	r7, #96	@ 0x60
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	4000a000 	.word	0x4000a000

08003dc0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003dd0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d002      	beq.n	8003dde <HAL_FDCAN_ConfigFilter+0x1e>
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d157      	bne.n	8003e8e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d12b      	bne.n	8003e3e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	2b07      	cmp	r3, #7
 8003dec:	d10d      	bne.n	8003e0a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003dfa:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003e00:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003e02:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	e00e      	b.n	8003e28 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003e16:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003e1e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	e025      	b.n	8003e8a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	075a      	lsls	r2, r3, #29
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2b07      	cmp	r3, #7
 8003e52:	d103      	bne.n	8003e5c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	e006      	b.n	8003e6a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	079a      	lsls	r2, r3, #30
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	3304      	adds	r3, #4
 8003e82:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e008      	b.n	8003ea0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e94:	f043 0202 	orr.w	r2, r3, #2
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
  }
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d110      	bne.n	8003ee8 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003ece:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003ed4:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003ee0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e008      	b.n	8003efa <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003eee:	f043 0204 	orr.w	r2, r3, #4
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d111      	bne.n	8003f3e <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699a      	ldr	r2, [r3, #24]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0201 	bic.w	r2, r2, #1
 8003f30:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e008      	b.n	8003f50 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f44:	f043 0204 	orr.w	r2, r3, #4
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
  }
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d141      	bne.n	8003ff8 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f7c:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e038      	b.n	800400a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d009      	beq.n	8003fbc <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e026      	b.n	800400a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 fe82 	bl	8004cdc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2101      	movs	r1, #1
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003fe8:	2201      	movs	r2, #1
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	409a      	lsls	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e008      	b.n	800400a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ffe:	f043 0208 	orr.w	r2, r3, #8
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
  }
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004014:	b480      	push	{r7}
 8004016:	b08b      	sub	sp, #44	@ 0x2c
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800402c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800402e:	7efb      	ldrb	r3, [r7, #27]
 8004030:	2b02      	cmp	r3, #2
 8004032:	f040 8149 	bne.w	80042c8 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b40      	cmp	r3, #64	@ 0x40
 800403a:	d14c      	bne.n	80040d6 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004044:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d109      	bne.n	8004060 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004052:	f043 0220 	orr.w	r2, r3, #32
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e13c      	b.n	80042da <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004068:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800406c:	2b00      	cmp	r3, #0
 800406e:	d109      	bne.n	8004084 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004076:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e12a      	b.n	80042da <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800408c:	0e1b      	lsrs	r3, r3, #24
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d10a      	bne.n	80040ac <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800409e:	0fdb      	lsrs	r3, r3, #31
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80040a8:	2301      	movs	r3, #1
 80040aa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040b4:	0a1b      	lsrs	r3, r3, #8
 80040b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	4413      	add	r3, r2
 80040be:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c8:	69f9      	ldr	r1, [r7, #28]
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d4:	e068      	b.n	80041a8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b41      	cmp	r3, #65	@ 0x41
 80040da:	d14c      	bne.n	8004176 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040e4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d109      	bne.n	8004100 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040f2:	f043 0220 	orr.w	r2, r3, #32
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0ec      	b.n	80042da <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004108:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004116:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0da      	b.n	80042da <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800412c:	0e1b      	lsrs	r3, r3, #24
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b01      	cmp	r3, #1
 8004134:	d10a      	bne.n	800414c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800413e:	0fdb      	lsrs	r3, r3, #31
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004148:	2301      	movs	r3, #1
 800414a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004154:	0a1b      	lsrs	r3, r3, #8
 8004156:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004168:	69f9      	ldr	r1, [r7, #28]
 800416a:	fb01 f303 	mul.w	r3, r1, r3
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24
 8004174:	e018      	b.n	80041a8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	429a      	cmp	r2, r3
 800417e:	d309      	bcc.n	8004194 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004186:	f043 0220 	orr.w	r2, r3, #32
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0a2      	b.n	80042da <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d107      	bne.n	80041cc <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	0c9b      	lsrs	r3, r3, #18
 80041c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e005      	b.n	80041d8 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	3304      	adds	r3, #4
 80041f4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	f003 020f 	and.w	r2, r3, #15
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	0e1b      	lsrs	r3, r3, #24
 800422c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	0fda      	lsrs	r2, r3, #31
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	3304      	adds	r3, #4
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004248:	2300      	movs	r3, #0
 800424a:	623b      	str	r3, [r7, #32]
 800424c:	e00a      	b.n	8004264 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	441a      	add	r2, r3
 8004254:	6839      	ldr	r1, [r7, #0]
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	440b      	add	r3, r1
 800425a:	7812      	ldrb	r2, [r2, #0]
 800425c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	3301      	adds	r3, #1
 8004262:	623b      	str	r3, [r7, #32]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4a1f      	ldr	r2, [pc, #124]	@ (80042e8 <HAL_FDCAN_GetRxMessage+0x2d4>)
 800426a:	5cd3      	ldrb	r3, [r2, r3]
 800426c:	461a      	mov	r2, r3
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	4293      	cmp	r3, r2
 8004272:	d3ec      	bcc.n	800424e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b40      	cmp	r3, #64	@ 0x40
 8004278:	d105      	bne.n	8004286 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8004284:	e01e      	b.n	80042c4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b41      	cmp	r3, #65	@ 0x41
 800428a:	d105      	bne.n	8004298 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8004296:	e015      	b.n	80042c4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b1f      	cmp	r3, #31
 800429c:	d808      	bhi.n	80042b0 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2101      	movs	r1, #1
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	fa01 f202 	lsl.w	r2, r1, r2
 80042aa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80042ae:	e009      	b.n	80042c4 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 021f 	and.w	r2, r3, #31
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2101      	movs	r1, #1
 80042bc:	fa01 f202 	lsl.w	r2, r1, r2
 80042c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	e008      	b.n	80042da <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042ce:	f043 0208 	orr.w	r2, r3, #8
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
  }
}
 80042da:	4618      	mov	r0, r3
 80042dc:	372c      	adds	r7, #44	@ 0x2c
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	08013160 	.word	0x08013160

080042ec <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80042fe:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004300:	7dfb      	ldrb	r3, [r7, #23]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d002      	beq.n	800430c <HAL_FDCAN_ActivateNotification+0x20>
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d155      	bne.n	80043b8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d108      	bne.n	800432c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0201 	orr.w	r2, r2, #1
 8004328:	65da      	str	r2, [r3, #92]	@ 0x5c
 800432a:	e014      	b.n	8004356 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	429a      	cmp	r2, r3
 800433a:	d108      	bne.n	800434e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0202 	orr.w	r2, r2, #2
 800434a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800434c:	e003      	b.n	8004356 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2203      	movs	r2, #3
 8004354:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800435c:	2b00      	cmp	r3, #0
 800435e:	d009      	beq.n	8004374 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	430a      	orrs	r2, r1
 8004370:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	430a      	orrs	r2, r1
 800438e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	4b0f      	ldr	r3, [pc, #60]	@ (80043d8 <HAL_FDCAN_ActivateNotification+0xec>)
 800439c:	4013      	ands	r3, r2
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	430b      	orrs	r3, r1
 80043a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80043a6:	4b0d      	ldr	r3, [pc, #52]	@ (80043dc <HAL_FDCAN_ActivateNotification+0xf0>)
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	0f9b      	lsrs	r3, r3, #30
 80043ae:	490b      	ldr	r1, [pc, #44]	@ (80043dc <HAL_FDCAN_ActivateNotification+0xf0>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	e008      	b.n	80043ca <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043be:	f043 0202 	orr.w	r2, r3, #2
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
  }
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	3fcfffff 	.word	0x3fcfffff
 80043dc:	4000a800 	.word	0x4000a800

080043e0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b096      	sub	sp, #88	@ 0x58
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80043e8:	4b95      	ldr	r3, [pc, #596]	@ (8004640 <HAL_FDCAN_IRQHandler+0x260>)
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	079b      	lsls	r3, r3, #30
 80043ee:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80043f0:	4b93      	ldr	r3, [pc, #588]	@ (8004640 <HAL_FDCAN_IRQHandler+0x260>)
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	079b      	lsls	r3, r3, #30
 80043f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80043f8:	4013      	ands	r3, r2
 80043fa:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004402:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004406:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004410:	4013      	ands	r3, r2
 8004412:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004426:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004428:	4013      	ands	r3, r2
 800442a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004432:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004436:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004440:	4013      	ands	r3, r2
 8004442:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800444a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800444e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004458:	4013      	ands	r3, r2
 800445a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004462:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8004466:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800446e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004470:	4013      	ands	r3, r2
 8004472:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004482:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00f      	beq.n	80044ae <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800448e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80044a2:	4b67      	ldr	r3, [pc, #412]	@ (8004640 <HAL_FDCAN_IRQHandler+0x260>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fa44 	bl	8004936 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80044ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01c      	beq.n	80044f2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80044b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d017      	beq.n	80044f2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80044ca:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80044d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044d6:	4013      	ands	r3, r2
 80044d8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80044e4:	4b56      	ldr	r3, [pc, #344]	@ (8004640 <HAL_FDCAN_IRQHandler+0x260>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80044ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f9f9 	bl	80048e4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80044f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00d      	beq.n	8004514 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044fe:	4b51      	ldr	r3, [pc, #324]	@ (8004644 <HAL_FDCAN_IRQHandler+0x264>)
 8004500:	400b      	ands	r3, r1
 8004502:	6513      	str	r3, [r2, #80]	@ 0x50
 8004504:	4a4e      	ldr	r2, [pc, #312]	@ (8004640 <HAL_FDCAN_IRQHandler+0x260>)
 8004506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004508:	0f9b      	lsrs	r3, r3, #30
 800450a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800450c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9b2 	bl	8004878 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00d      	beq.n	8004536 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004520:	4b48      	ldr	r3, [pc, #288]	@ (8004644 <HAL_FDCAN_IRQHandler+0x264>)
 8004522:	400b      	ands	r3, r1
 8004524:	6513      	str	r3, [r2, #80]	@ 0x50
 8004526:	4a46      	ldr	r2, [pc, #280]	@ (8004640 <HAL_FDCAN_IRQHandler+0x260>)
 8004528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800452a:	0f9b      	lsrs	r3, r3, #30
 800452c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800452e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f9ac 	bl	800488e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00d      	beq.n	8004558 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004542:	4b40      	ldr	r3, [pc, #256]	@ (8004644 <HAL_FDCAN_IRQHandler+0x264>)
 8004544:	400b      	ands	r3, r1
 8004546:	6513      	str	r3, [r2, #80]	@ 0x50
 8004548:	4a3d      	ldr	r2, [pc, #244]	@ (8004640 <HAL_FDCAN_IRQHandler+0x260>)
 800454a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800454c:	0f9b      	lsrs	r3, r3, #30
 800454e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004550:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fc fc50 	bl	8000df8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004558:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00d      	beq.n	800457a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004564:	4b37      	ldr	r3, [pc, #220]	@ (8004644 <HAL_FDCAN_IRQHandler+0x264>)
 8004566:	400b      	ands	r3, r1
 8004568:	6513      	str	r3, [r2, #80]	@ 0x50
 800456a:	4a35      	ldr	r2, [pc, #212]	@ (8004640 <HAL_FDCAN_IRQHandler+0x260>)
 800456c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800456e:	0f9b      	lsrs	r3, r3, #30
 8004570:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004572:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f995 	bl	80048a4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800457a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800457c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00f      	beq.n	80045a4 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004596:	651a      	str	r2, [r3, #80]	@ 0x50
 8004598:	4b29      	ldr	r3, [pc, #164]	@ (8004640 <HAL_FDCAN_IRQHandler+0x260>)
 800459a:	2200      	movs	r2, #0
 800459c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f98b 	bl	80048ba <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80045a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d01c      	beq.n	80045e8 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80045ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d017      	beq.n	80045e8 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80045c0:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045cc:	4013      	ands	r3, r2
 80045ce:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80045da:	4b19      	ldr	r3, [pc, #100]	@ (8004640 <HAL_FDCAN_IRQHandler+0x260>)
 80045dc:	2200      	movs	r2, #0
 80045de:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80045e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f973 	bl	80048ce <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80045e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00f      	beq.n	8004612 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80045f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004604:	651a      	str	r2, [r3, #80]	@ 0x50
 8004606:	4b0e      	ldr	r3, [pc, #56]	@ (8004640 <HAL_FDCAN_IRQHandler+0x260>)
 8004608:	2200      	movs	r2, #0
 800460a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f974 	bl	80048fa <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d015      	beq.n	8004648 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800461c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d010      	beq.n	8004648 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800462e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004630:	4b03      	ldr	r3, [pc, #12]	@ (8004640 <HAL_FDCAN_IRQHandler+0x260>)
 8004632:	2200      	movs	r2, #0
 8004634:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f969 	bl	800490e <HAL_FDCAN_TimestampWraparoundCallback>
 800463c:	e004      	b.n	8004648 <HAL_FDCAN_IRQHandler+0x268>
 800463e:	bf00      	nop
 8004640:	4000a800 	.word	0x4000a800
 8004644:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800464a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00f      	beq.n	8004672 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004654:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004664:	651a      	str	r2, [r3, #80]	@ 0x50
 8004666:	4b81      	ldr	r3, [pc, #516]	@ (800486c <HAL_FDCAN_IRQHandler+0x48c>)
 8004668:	2200      	movs	r2, #0
 800466a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f958 	bl	8004922 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d014      	beq.n	80046a6 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800467c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00f      	beq.n	80046a6 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800468e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004690:	4b76      	ldr	r3, [pc, #472]	@ (800486c <HAL_FDCAN_IRQHandler+0x48c>)
 8004692:	2200      	movs	r2, #0
 8004694:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800469c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80046a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00d      	beq.n	80046c8 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046b2:	4b6f      	ldr	r3, [pc, #444]	@ (8004870 <HAL_FDCAN_IRQHandler+0x490>)
 80046b4:	400b      	ands	r3, r1
 80046b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80046b8:	4a6c      	ldr	r2, [pc, #432]	@ (800486c <HAL_FDCAN_IRQHandler+0x48c>)
 80046ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046bc:	0f9b      	lsrs	r3, r3, #30
 80046be:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80046c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f94b 	bl	800495e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80046c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d011      	beq.n	80046f2 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80046d4:	4b66      	ldr	r3, [pc, #408]	@ (8004870 <HAL_FDCAN_IRQHandler+0x490>)
 80046d6:	400b      	ands	r3, r1
 80046d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80046da:	4a64      	ldr	r2, [pc, #400]	@ (800486c <HAL_FDCAN_IRQHandler+0x48c>)
 80046dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046de:	0f9b      	lsrs	r3, r3, #30
 80046e0:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80046e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a5f      	ldr	r2, [pc, #380]	@ (8004874 <HAL_FDCAN_IRQHandler+0x494>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	f040 80aa 	bne.w	8004852 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80a2 	beq.w	8004852 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004722:	4013      	ands	r3, r2
 8004724:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004730:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800473a:	4013      	ands	r3, r2
 800473c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004748:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004752:	4013      	ands	r3, r2
 8004754:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8004760:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	6a3a      	ldr	r2, [r7, #32]
 800476a:	4013      	ands	r3, r2
 800476c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8004778:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	4013      	ands	r3, r2
 8004784:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004798:	2b00      	cmp	r3, #0
 800479a:	d007      	beq.n	80047ac <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047a2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80047a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f8e4 	bl	8004974 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80047ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d007      	beq.n	80047c2 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047b8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80047ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f8e4 	bl	800498a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d019      	beq.n	8004800 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d014      	beq.n	8004800 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	b29b      	uxth	r3, r3
 80047e0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047ec:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2240      	movs	r2, #64	@ 0x40
 80047f4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	6939      	ldr	r1, [r7, #16]
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8d0 	bl	80049a0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800480c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800480e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f8d1 	bl	80049b8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00b      	beq.n	8004834 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	6a3a      	ldr	r2, [r7, #32]
 8004822:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f874 	bl	800494a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004862:	bf00      	nop
 8004864:	3758      	adds	r7, #88	@ 0x58
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	4000a800 	.word	0x4000a800
 8004870:	3fcfffff 	.word	0x3fcfffff
 8004874:	4000a000 	.word	0x4000a000

08004878 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
	...

080049d0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049dc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80049e6:	4ba7      	ldr	r3, [pc, #668]	@ (8004c84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	0091      	lsls	r1, r2, #2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	430b      	orrs	r3, r1
 80049f4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a00:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a08:	041a      	lsls	r2, r3, #16
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004a26:	4b97      	ldr	r3, [pc, #604]	@ (8004c84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	0091      	lsls	r1, r2, #2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	430b      	orrs	r3, r1
 8004a34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a40:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a48:	041a      	lsls	r2, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004a68:	4b86      	ldr	r3, [pc, #536]	@ (8004c84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	0091      	lsls	r1, r2, #2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	430b      	orrs	r3, r1
 8004a76:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a82:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	041a      	lsls	r2, r3, #16
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004ab0:	4b74      	ldr	r3, [pc, #464]	@ (8004c84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	0091      	lsls	r1, r2, #2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	430b      	orrs	r3, r1
 8004abe:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004aca:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad2:	041a      	lsls	r2, r3, #16
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	4413      	add	r3, r2
 8004aee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004af8:	4b62      	ldr	r3, [pc, #392]	@ (8004c84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	0091      	lsls	r1, r2, #2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4413      	add	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004b24:	4b57      	ldr	r3, [pc, #348]	@ (8004c84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	0091      	lsls	r1, r2, #2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	430b      	orrs	r3, r1
 8004b32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b3e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b46:	041a      	lsls	r2, r3, #16
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004b66:	4b47      	ldr	r3, [pc, #284]	@ (8004c84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	0091      	lsls	r1, r2, #2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6812      	ldr	r2, [r2, #0]
 8004b72:	430b      	orrs	r3, r1
 8004b74:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004b80:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b88:	041a      	lsls	r2, r3, #16
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004b9c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba4:	061a      	lsls	r2, r3, #24
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bb4:	4b34      	ldr	r3, [pc, #208]	@ (8004c88 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009a      	lsls	r2, r3, #2
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	441a      	add	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	441a      	add	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8004bea:	fb01 f303 	mul.w	r3, r1, r3
 8004bee:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004bf0:	441a      	add	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8004c02:	fb01 f303 	mul.w	r3, r1, r3
 8004c06:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004c08:	441a      	add	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8004c1a:	fb01 f303 	mul.w	r3, r1, r3
 8004c1e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004c20:	441a      	add	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	441a      	add	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004c4a:	fb01 f303 	mul.w	r3, r1, r3
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	441a      	add	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004c6c:	441a      	add	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c7a:	4a04      	ldr	r2, [pc, #16]	@ (8004c8c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d915      	bls.n	8004cac <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004c80:	e006      	b.n	8004c90 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004c82:	bf00      	nop
 8004c84:	ffff0003 	.word	0xffff0003
 8004c88:	10002b00 	.word	0x10002b00
 8004c8c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c96:	f043 0220 	orr.w	r2, r3, #32
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e010      	b.n	8004cce <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	e005      	b.n	8004cc0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d3f3      	bcc.n	8004cb4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop

08004cdc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b089      	sub	sp, #36	@ 0x24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004cfa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004d02:	4313      	orrs	r3, r2
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	e00a      	b.n	8004d1e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004d10:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004d16:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004d18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d1c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004d28:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004d2e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004d34:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d4a:	6839      	ldr	r1, [r7, #0]
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	e020      	b.n	8004db6 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	3303      	adds	r3, #3
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	3302      	adds	r3, #2
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	440b      	add	r3, r1
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004d8c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	3301      	adds	r3, #1
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	440b      	add	r3, r1
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004d9a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	440a      	add	r2, r1
 8004da2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004da4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	3304      	adds	r3, #4
 8004dae:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	3304      	adds	r3, #4
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	4a06      	ldr	r2, [pc, #24]	@ (8004dd4 <FDCAN_CopyMessageToRAM+0xf8>)
 8004dbc:	5cd3      	ldrb	r3, [r2, r3]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d3d6      	bcc.n	8004d74 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	bf00      	nop
 8004dca:	3724      	adds	r7, #36	@ 0x24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	08013160 	.word	0x08013160

08004dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b089      	sub	sp, #36	@ 0x24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004de6:	4b86      	ldr	r3, [pc, #536]	@ (8005000 <HAL_GPIO_Init+0x228>)
 8004de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004dea:	e18c      	b.n	8005106 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	2101      	movs	r1, #1
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	fa01 f303 	lsl.w	r3, r1, r3
 8004df8:	4013      	ands	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 817e 	beq.w	8005100 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f003 0303 	and.w	r3, r3, #3
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d005      	beq.n	8004e1c <HAL_GPIO_Init+0x44>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d130      	bne.n	8004e7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	2203      	movs	r2, #3
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	4013      	ands	r3, r2
 8004e32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e52:	2201      	movs	r2, #1
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	091b      	lsrs	r3, r3, #4
 8004e68:	f003 0201 	and.w	r2, r3, #1
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d017      	beq.n	8004eba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	2203      	movs	r2, #3
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d123      	bne.n	8004f0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	08da      	lsrs	r2, r3, #3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3208      	adds	r2, #8
 8004ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	220f      	movs	r2, #15
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	691a      	ldr	r2, [r3, #16]
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	08da      	lsrs	r2, r3, #3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3208      	adds	r2, #8
 8004f08:	69b9      	ldr	r1, [r7, #24]
 8004f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	2203      	movs	r2, #3
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	4013      	ands	r3, r2
 8004f24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f003 0203 	and.w	r2, r3, #3
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 80d8 	beq.w	8005100 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f50:	4b2c      	ldr	r3, [pc, #176]	@ (8005004 <HAL_GPIO_Init+0x22c>)
 8004f52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f56:	4a2b      	ldr	r2, [pc, #172]	@ (8005004 <HAL_GPIO_Init+0x22c>)
 8004f58:	f043 0302 	orr.w	r3, r3, #2
 8004f5c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004f60:	4b28      	ldr	r3, [pc, #160]	@ (8005004 <HAL_GPIO_Init+0x22c>)
 8004f62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f6e:	4a26      	ldr	r2, [pc, #152]	@ (8005008 <HAL_GPIO_Init+0x230>)
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	089b      	lsrs	r3, r3, #2
 8004f74:	3302      	adds	r3, #2
 8004f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	220f      	movs	r2, #15
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a1d      	ldr	r2, [pc, #116]	@ (800500c <HAL_GPIO_Init+0x234>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d04a      	beq.n	8005030 <HAL_GPIO_Init+0x258>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005010 <HAL_GPIO_Init+0x238>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d02b      	beq.n	8004ffa <HAL_GPIO_Init+0x222>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8005014 <HAL_GPIO_Init+0x23c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d025      	beq.n	8004ff6 <HAL_GPIO_Init+0x21e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a1a      	ldr	r2, [pc, #104]	@ (8005018 <HAL_GPIO_Init+0x240>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01f      	beq.n	8004ff2 <HAL_GPIO_Init+0x21a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a19      	ldr	r2, [pc, #100]	@ (800501c <HAL_GPIO_Init+0x244>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d019      	beq.n	8004fee <HAL_GPIO_Init+0x216>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a18      	ldr	r2, [pc, #96]	@ (8005020 <HAL_GPIO_Init+0x248>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d013      	beq.n	8004fea <HAL_GPIO_Init+0x212>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a17      	ldr	r2, [pc, #92]	@ (8005024 <HAL_GPIO_Init+0x24c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00d      	beq.n	8004fe6 <HAL_GPIO_Init+0x20e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a16      	ldr	r2, [pc, #88]	@ (8005028 <HAL_GPIO_Init+0x250>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d007      	beq.n	8004fe2 <HAL_GPIO_Init+0x20a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a15      	ldr	r2, [pc, #84]	@ (800502c <HAL_GPIO_Init+0x254>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d101      	bne.n	8004fde <HAL_GPIO_Init+0x206>
 8004fda:	2309      	movs	r3, #9
 8004fdc:	e029      	b.n	8005032 <HAL_GPIO_Init+0x25a>
 8004fde:	230a      	movs	r3, #10
 8004fe0:	e027      	b.n	8005032 <HAL_GPIO_Init+0x25a>
 8004fe2:	2307      	movs	r3, #7
 8004fe4:	e025      	b.n	8005032 <HAL_GPIO_Init+0x25a>
 8004fe6:	2306      	movs	r3, #6
 8004fe8:	e023      	b.n	8005032 <HAL_GPIO_Init+0x25a>
 8004fea:	2305      	movs	r3, #5
 8004fec:	e021      	b.n	8005032 <HAL_GPIO_Init+0x25a>
 8004fee:	2304      	movs	r3, #4
 8004ff0:	e01f      	b.n	8005032 <HAL_GPIO_Init+0x25a>
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e01d      	b.n	8005032 <HAL_GPIO_Init+0x25a>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e01b      	b.n	8005032 <HAL_GPIO_Init+0x25a>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e019      	b.n	8005032 <HAL_GPIO_Init+0x25a>
 8004ffe:	bf00      	nop
 8005000:	58000080 	.word	0x58000080
 8005004:	58024400 	.word	0x58024400
 8005008:	58000400 	.word	0x58000400
 800500c:	58020000 	.word	0x58020000
 8005010:	58020400 	.word	0x58020400
 8005014:	58020800 	.word	0x58020800
 8005018:	58020c00 	.word	0x58020c00
 800501c:	58021000 	.word	0x58021000
 8005020:	58021400 	.word	0x58021400
 8005024:	58021800 	.word	0x58021800
 8005028:	58021c00 	.word	0x58021c00
 800502c:	58022400 	.word	0x58022400
 8005030:	2300      	movs	r3, #0
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	f002 0203 	and.w	r2, r2, #3
 8005038:	0092      	lsls	r2, r2, #2
 800503a:	4093      	lsls	r3, r2
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4313      	orrs	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005042:	4938      	ldr	r1, [pc, #224]	@ (8005124 <HAL_GPIO_Init+0x34c>)
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	089b      	lsrs	r3, r3, #2
 8005048:	3302      	adds	r3, #2
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	43db      	mvns	r3, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4013      	ands	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005076:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800507e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	43db      	mvns	r3, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4013      	ands	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80050a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	43db      	mvns	r3, r3
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4013      	ands	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	43db      	mvns	r3, r3
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4013      	ands	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	3301      	adds	r3, #1
 8005104:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	fa22 f303 	lsr.w	r3, r2, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	f47f ae6b 	bne.w	8004dec <HAL_GPIO_Init+0x14>
  }
}
 8005116:	bf00      	nop
 8005118:	bf00      	nop
 800511a:	3724      	adds	r7, #36	@ 0x24
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	58000400 	.word	0x58000400

08005128 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005130:	4b19      	ldr	r3, [pc, #100]	@ (8005198 <HAL_PWREx_ConfigSupply+0x70>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b04      	cmp	r3, #4
 800513a:	d00a      	beq.n	8005152 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800513c:	4b16      	ldr	r3, [pc, #88]	@ (8005198 <HAL_PWREx_ConfigSupply+0x70>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	429a      	cmp	r2, r3
 8005148:	d001      	beq.n	800514e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e01f      	b.n	800518e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	e01d      	b.n	800518e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005152:	4b11      	ldr	r3, [pc, #68]	@ (8005198 <HAL_PWREx_ConfigSupply+0x70>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f023 0207 	bic.w	r2, r3, #7
 800515a:	490f      	ldr	r1, [pc, #60]	@ (8005198 <HAL_PWREx_ConfigSupply+0x70>)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4313      	orrs	r3, r2
 8005160:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005162:	f7fd fd33 	bl	8002bcc <HAL_GetTick>
 8005166:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005168:	e009      	b.n	800517e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800516a:	f7fd fd2f 	bl	8002bcc <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005178:	d901      	bls.n	800517e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e007      	b.n	800518e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800517e:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <HAL_PWREx_ConfigSupply+0x70>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800518a:	d1ee      	bne.n	800516a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	58024800 	.word	0x58024800

0800519c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08c      	sub	sp, #48	@ 0x30
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e3c8      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 8087 	beq.w	80052ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051bc:	4b88      	ldr	r3, [pc, #544]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051c6:	4b86      	ldr	r3, [pc, #536]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 80051c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80051cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ce:	2b10      	cmp	r3, #16
 80051d0:	d007      	beq.n	80051e2 <HAL_RCC_OscConfig+0x46>
 80051d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d4:	2b18      	cmp	r3, #24
 80051d6:	d110      	bne.n	80051fa <HAL_RCC_OscConfig+0x5e>
 80051d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d10b      	bne.n	80051fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e2:	4b7f      	ldr	r3, [pc, #508]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d06c      	beq.n	80052c8 <HAL_RCC_OscConfig+0x12c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d168      	bne.n	80052c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e3a2      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005202:	d106      	bne.n	8005212 <HAL_RCC_OscConfig+0x76>
 8005204:	4b76      	ldr	r3, [pc, #472]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a75      	ldr	r2, [pc, #468]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 800520a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	e02e      	b.n	8005270 <HAL_RCC_OscConfig+0xd4>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10c      	bne.n	8005234 <HAL_RCC_OscConfig+0x98>
 800521a:	4b71      	ldr	r3, [pc, #452]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a70      	ldr	r2, [pc, #448]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	4b6e      	ldr	r3, [pc, #440]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a6d      	ldr	r2, [pc, #436]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 800522c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	e01d      	b.n	8005270 <HAL_RCC_OscConfig+0xd4>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800523c:	d10c      	bne.n	8005258 <HAL_RCC_OscConfig+0xbc>
 800523e:	4b68      	ldr	r3, [pc, #416]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a67      	ldr	r2, [pc, #412]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	4b65      	ldr	r3, [pc, #404]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a64      	ldr	r2, [pc, #400]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	e00b      	b.n	8005270 <HAL_RCC_OscConfig+0xd4>
 8005258:	4b61      	ldr	r3, [pc, #388]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a60      	ldr	r2, [pc, #384]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 800525e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	4b5e      	ldr	r3, [pc, #376]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a5d      	ldr	r2, [pc, #372]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 800526a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800526e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d013      	beq.n	80052a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fd fca8 	bl	8002bcc <HAL_GetTick>
 800527c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005280:	f7fd fca4 	bl	8002bcc <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b64      	cmp	r3, #100	@ 0x64
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e356      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005292:	4b53      	ldr	r3, [pc, #332]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0f0      	beq.n	8005280 <HAL_RCC_OscConfig+0xe4>
 800529e:	e014      	b.n	80052ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a0:	f7fd fc94 	bl	8002bcc <HAL_GetTick>
 80052a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052a8:	f7fd fc90 	bl	8002bcc <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b64      	cmp	r3, #100	@ 0x64
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e342      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052ba:	4b49      	ldr	r3, [pc, #292]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f0      	bne.n	80052a8 <HAL_RCC_OscConfig+0x10c>
 80052c6:	e000      	b.n	80052ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 808c 	beq.w	80053f0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052d8:	4b41      	ldr	r3, [pc, #260]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052e2:	4b3f      	ldr	r3, [pc, #252]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 80052e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <HAL_RCC_OscConfig+0x162>
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	2b18      	cmp	r3, #24
 80052f2:	d137      	bne.n	8005364 <HAL_RCC_OscConfig+0x1c8>
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d132      	bne.n	8005364 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052fe:	4b38      	ldr	r3, [pc, #224]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <HAL_RCC_OscConfig+0x17a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e314      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005316:	4b32      	ldr	r3, [pc, #200]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f023 0219 	bic.w	r2, r3, #25
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	492f      	ldr	r1, [pc, #188]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005324:	4313      	orrs	r3, r2
 8005326:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fd fc50 	bl	8002bcc <HAL_GetTick>
 800532c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005330:	f7fd fc4c 	bl	8002bcc <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e2fe      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005342:	4b27      	ldr	r3, [pc, #156]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f0      	beq.n	8005330 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534e:	4b24      	ldr	r3, [pc, #144]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	061b      	lsls	r3, r3, #24
 800535c:	4920      	ldr	r1, [pc, #128]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 800535e:	4313      	orrs	r3, r2
 8005360:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005362:	e045      	b.n	80053f0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d026      	beq.n	80053ba <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800536c:	4b1c      	ldr	r3, [pc, #112]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f023 0219 	bic.w	r2, r3, #25
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	4919      	ldr	r1, [pc, #100]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 800537a:	4313      	orrs	r3, r2
 800537c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537e:	f7fd fc25 	bl	8002bcc <HAL_GetTick>
 8005382:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005386:	f7fd fc21 	bl	8002bcc <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e2d3      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005398:	4b11      	ldr	r3, [pc, #68]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0f0      	beq.n	8005386 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a4:	4b0e      	ldr	r3, [pc, #56]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	490b      	ldr	r1, [pc, #44]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	604b      	str	r3, [r1, #4]
 80053b8:	e01a      	b.n	80053f0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ba:	4b09      	ldr	r3, [pc, #36]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a08      	ldr	r2, [pc, #32]	@ (80053e0 <HAL_RCC_OscConfig+0x244>)
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c6:	f7fd fc01 	bl	8002bcc <HAL_GetTick>
 80053ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ce:	f7fd fbfd 	bl	8002bcc <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d903      	bls.n	80053e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e2af      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
 80053e0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053e4:	4b96      	ldr	r3, [pc, #600]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1ee      	bne.n	80053ce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d06a      	beq.n	80054d2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053fc:	4b90      	ldr	r3, [pc, #576]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005404:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005406:	4b8e      	ldr	r3, [pc, #568]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 8005408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2b08      	cmp	r3, #8
 8005410:	d007      	beq.n	8005422 <HAL_RCC_OscConfig+0x286>
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	2b18      	cmp	r3, #24
 8005416:	d11b      	bne.n	8005450 <HAL_RCC_OscConfig+0x2b4>
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	2b01      	cmp	r3, #1
 8005420:	d116      	bne.n	8005450 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005422:	4b87      	ldr	r3, [pc, #540]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <HAL_RCC_OscConfig+0x29e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	2b80      	cmp	r3, #128	@ 0x80
 8005434:	d001      	beq.n	800543a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e282      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800543a:	4b81      	ldr	r3, [pc, #516]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	061b      	lsls	r3, r3, #24
 8005448:	497d      	ldr	r1, [pc, #500]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 800544a:	4313      	orrs	r3, r2
 800544c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800544e:	e040      	b.n	80054d2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d023      	beq.n	80054a0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005458:	4b79      	ldr	r3, [pc, #484]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a78      	ldr	r2, [pc, #480]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 800545e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fd fbb2 	bl	8002bcc <HAL_GetTick>
 8005468:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800546c:	f7fd fbae 	bl	8002bcc <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e260      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800547e:	4b70      	ldr	r3, [pc, #448]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800548a:	4b6d      	ldr	r3, [pc, #436]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	061b      	lsls	r3, r3, #24
 8005498:	4969      	ldr	r1, [pc, #420]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 800549a:	4313      	orrs	r3, r2
 800549c:	60cb      	str	r3, [r1, #12]
 800549e:	e018      	b.n	80054d2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80054a0:	4b67      	ldr	r3, [pc, #412]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a66      	ldr	r2, [pc, #408]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 80054a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ac:	f7fd fb8e 	bl	8002bcc <HAL_GetTick>
 80054b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054b4:	f7fd fb8a 	bl	8002bcc <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e23c      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054c6:	4b5e      	ldr	r3, [pc, #376]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f0      	bne.n	80054b4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d036      	beq.n	800554c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d019      	beq.n	800551a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054e6:	4b56      	ldr	r3, [pc, #344]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 80054e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ea:	4a55      	ldr	r2, [pc, #340]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f2:	f7fd fb6b 	bl	8002bcc <HAL_GetTick>
 80054f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054fa:	f7fd fb67 	bl	8002bcc <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e219      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800550c:	4b4c      	ldr	r3, [pc, #304]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 800550e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f0      	beq.n	80054fa <HAL_RCC_OscConfig+0x35e>
 8005518:	e018      	b.n	800554c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800551a:	4b49      	ldr	r3, [pc, #292]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 800551c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551e:	4a48      	ldr	r2, [pc, #288]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 8005520:	f023 0301 	bic.w	r3, r3, #1
 8005524:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005526:	f7fd fb51 	bl	8002bcc <HAL_GetTick>
 800552a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800552e:	f7fd fb4d 	bl	8002bcc <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e1ff      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005540:	4b3f      	ldr	r3, [pc, #252]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 8005542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f0      	bne.n	800552e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b00      	cmp	r3, #0
 8005556:	d036      	beq.n	80055c6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d019      	beq.n	8005594 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005560:	4b37      	ldr	r3, [pc, #220]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a36      	ldr	r2, [pc, #216]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 8005566:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800556a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800556c:	f7fd fb2e 	bl	8002bcc <HAL_GetTick>
 8005570:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005574:	f7fd fb2a 	bl	8002bcc <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e1dc      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005586:	4b2e      	ldr	r3, [pc, #184]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0f0      	beq.n	8005574 <HAL_RCC_OscConfig+0x3d8>
 8005592:	e018      	b.n	80055c6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005594:	4b2a      	ldr	r3, [pc, #168]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a29      	ldr	r2, [pc, #164]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 800559a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800559e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055a0:	f7fd fb14 	bl	8002bcc <HAL_GetTick>
 80055a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055a8:	f7fd fb10 	bl	8002bcc <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e1c2      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055ba:	4b21      	ldr	r3, [pc, #132]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f0      	bne.n	80055a8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8086 	beq.w	80056e0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005644 <HAL_RCC_OscConfig+0x4a8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005644 <HAL_RCC_OscConfig+0x4a8>)
 80055da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055e0:	f7fd faf4 	bl	8002bcc <HAL_GetTick>
 80055e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e8:	f7fd faf0 	bl	8002bcc <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b64      	cmp	r3, #100	@ 0x64
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e1a2      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055fa:	4b12      	ldr	r3, [pc, #72]	@ (8005644 <HAL_RCC_OscConfig+0x4a8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0f0      	beq.n	80055e8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d106      	bne.n	800561c <HAL_RCC_OscConfig+0x480>
 800560e:	4b0c      	ldr	r3, [pc, #48]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005612:	4a0b      	ldr	r2, [pc, #44]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 8005614:	f043 0301 	orr.w	r3, r3, #1
 8005618:	6713      	str	r3, [r2, #112]	@ 0x70
 800561a:	e032      	b.n	8005682 <HAL_RCC_OscConfig+0x4e6>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d111      	bne.n	8005648 <HAL_RCC_OscConfig+0x4ac>
 8005624:	4b06      	ldr	r3, [pc, #24]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 8005626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005628:	4a05      	ldr	r2, [pc, #20]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 800562a:	f023 0301 	bic.w	r3, r3, #1
 800562e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005630:	4b03      	ldr	r3, [pc, #12]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 8005632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005634:	4a02      	ldr	r2, [pc, #8]	@ (8005640 <HAL_RCC_OscConfig+0x4a4>)
 8005636:	f023 0304 	bic.w	r3, r3, #4
 800563a:	6713      	str	r3, [r2, #112]	@ 0x70
 800563c:	e021      	b.n	8005682 <HAL_RCC_OscConfig+0x4e6>
 800563e:	bf00      	nop
 8005640:	58024400 	.word	0x58024400
 8005644:	58024800 	.word	0x58024800
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2b05      	cmp	r3, #5
 800564e:	d10c      	bne.n	800566a <HAL_RCC_OscConfig+0x4ce>
 8005650:	4b83      	ldr	r3, [pc, #524]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005654:	4a82      	ldr	r2, [pc, #520]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 8005656:	f043 0304 	orr.w	r3, r3, #4
 800565a:	6713      	str	r3, [r2, #112]	@ 0x70
 800565c:	4b80      	ldr	r3, [pc, #512]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 800565e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005660:	4a7f      	ldr	r2, [pc, #508]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	6713      	str	r3, [r2, #112]	@ 0x70
 8005668:	e00b      	b.n	8005682 <HAL_RCC_OscConfig+0x4e6>
 800566a:	4b7d      	ldr	r3, [pc, #500]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 800566c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566e:	4a7c      	ldr	r2, [pc, #496]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	6713      	str	r3, [r2, #112]	@ 0x70
 8005676:	4b7a      	ldr	r3, [pc, #488]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 8005678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567a:	4a79      	ldr	r2, [pc, #484]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 800567c:	f023 0304 	bic.w	r3, r3, #4
 8005680:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d015      	beq.n	80056b6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568a:	f7fd fa9f 	bl	8002bcc <HAL_GetTick>
 800568e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005690:	e00a      	b.n	80056a8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005692:	f7fd fa9b 	bl	8002bcc <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e14b      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056a8:	4b6d      	ldr	r3, [pc, #436]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0ee      	beq.n	8005692 <HAL_RCC_OscConfig+0x4f6>
 80056b4:	e014      	b.n	80056e0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b6:	f7fd fa89 	bl	8002bcc <HAL_GetTick>
 80056ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056bc:	e00a      	b.n	80056d4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056be:	f7fd fa85 	bl	8002bcc <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e135      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056d4:	4b62      	ldr	r3, [pc, #392]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80056d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1ee      	bne.n	80056be <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 812a 	beq.w	800593e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80056ea:	4b5d      	ldr	r3, [pc, #372]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056f2:	2b18      	cmp	r3, #24
 80056f4:	f000 80ba 	beq.w	800586c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	f040 8095 	bne.w	800582c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005702:	4b57      	ldr	r3, [pc, #348]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a56      	ldr	r2, [pc, #344]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 8005708:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800570c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570e:	f7fd fa5d 	bl	8002bcc <HAL_GetTick>
 8005712:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005714:	e008      	b.n	8005728 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005716:	f7fd fa59 	bl	8002bcc <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e10b      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005728:	4b4d      	ldr	r3, [pc, #308]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1f0      	bne.n	8005716 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005734:	4b4a      	ldr	r3, [pc, #296]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 8005736:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005738:	4b4a      	ldr	r3, [pc, #296]	@ (8005864 <HAL_RCC_OscConfig+0x6c8>)
 800573a:	4013      	ands	r3, r2
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005744:	0112      	lsls	r2, r2, #4
 8005746:	430a      	orrs	r2, r1
 8005748:	4945      	ldr	r1, [pc, #276]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 800574a:	4313      	orrs	r3, r2
 800574c:	628b      	str	r3, [r1, #40]	@ 0x28
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005752:	3b01      	subs	r3, #1
 8005754:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575c:	3b01      	subs	r3, #1
 800575e:	025b      	lsls	r3, r3, #9
 8005760:	b29b      	uxth	r3, r3
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005768:	3b01      	subs	r3, #1
 800576a:	041b      	lsls	r3, r3, #16
 800576c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005776:	3b01      	subs	r3, #1
 8005778:	061b      	lsls	r3, r3, #24
 800577a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800577e:	4938      	ldr	r1, [pc, #224]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 8005780:	4313      	orrs	r3, r2
 8005782:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005784:	4b36      	ldr	r3, [pc, #216]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 8005786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005788:	4a35      	ldr	r2, [pc, #212]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 800578a:	f023 0301 	bic.w	r3, r3, #1
 800578e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005790:	4b33      	ldr	r3, [pc, #204]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 8005792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005794:	4b34      	ldr	r3, [pc, #208]	@ (8005868 <HAL_RCC_OscConfig+0x6cc>)
 8005796:	4013      	ands	r3, r2
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800579c:	00d2      	lsls	r2, r2, #3
 800579e:	4930      	ldr	r1, [pc, #192]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80057a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	f023 020c 	bic.w	r2, r3, #12
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b0:	492b      	ldr	r1, [pc, #172]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80057b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ba:	f023 0202 	bic.w	r2, r3, #2
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c2:	4927      	ldr	r1, [pc, #156]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057c8:	4b25      	ldr	r3, [pc, #148]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80057ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057cc:	4a24      	ldr	r2, [pc, #144]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80057ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d4:	4b22      	ldr	r3, [pc, #136]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	4a21      	ldr	r2, [pc, #132]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80057da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80057e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80057e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80057ec:	4b1c      	ldr	r3, [pc, #112]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80057ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057f8:	4b19      	ldr	r3, [pc, #100]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a18      	ldr	r2, [pc, #96]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 80057fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005804:	f7fd f9e2 	bl	8002bcc <HAL_GetTick>
 8005808:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580c:	f7fd f9de 	bl	8002bcc <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e090      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800581e:	4b10      	ldr	r3, [pc, #64]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d0f0      	beq.n	800580c <HAL_RCC_OscConfig+0x670>
 800582a:	e088      	b.n	800593e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582c:	4b0c      	ldr	r3, [pc, #48]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a0b      	ldr	r2, [pc, #44]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 8005832:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fd f9c8 	bl	8002bcc <HAL_GetTick>
 800583c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005840:	f7fd f9c4 	bl	8002bcc <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e076      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005852:	4b03      	ldr	r3, [pc, #12]	@ (8005860 <HAL_RCC_OscConfig+0x6c4>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f0      	bne.n	8005840 <HAL_RCC_OscConfig+0x6a4>
 800585e:	e06e      	b.n	800593e <HAL_RCC_OscConfig+0x7a2>
 8005860:	58024400 	.word	0x58024400
 8005864:	fffffc0c 	.word	0xfffffc0c
 8005868:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800586c:	4b36      	ldr	r3, [pc, #216]	@ (8005948 <HAL_RCC_OscConfig+0x7ac>)
 800586e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005870:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005872:	4b35      	ldr	r3, [pc, #212]	@ (8005948 <HAL_RCC_OscConfig+0x7ac>)
 8005874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005876:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587c:	2b01      	cmp	r3, #1
 800587e:	d031      	beq.n	80058e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f003 0203 	and.w	r2, r3, #3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800588a:	429a      	cmp	r2, r3
 800588c:	d12a      	bne.n	80058e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	091b      	lsrs	r3, r3, #4
 8005892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800589a:	429a      	cmp	r2, r3
 800589c:	d122      	bne.n	80058e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d11a      	bne.n	80058e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	0a5b      	lsrs	r3, r3, #9
 80058b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058bc:	429a      	cmp	r2, r3
 80058be:	d111      	bne.n	80058e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	0c1b      	lsrs	r3, r3, #16
 80058c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d108      	bne.n	80058e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	0e1b      	lsrs	r3, r3, #24
 80058d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d001      	beq.n	80058e8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e02b      	b.n	8005940 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80058e8:	4b17      	ldr	r3, [pc, #92]	@ (8005948 <HAL_RCC_OscConfig+0x7ac>)
 80058ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ec:	08db      	lsrs	r3, r3, #3
 80058ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d01f      	beq.n	800593e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80058fe:	4b12      	ldr	r3, [pc, #72]	@ (8005948 <HAL_RCC_OscConfig+0x7ac>)
 8005900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005902:	4a11      	ldr	r2, [pc, #68]	@ (8005948 <HAL_RCC_OscConfig+0x7ac>)
 8005904:	f023 0301 	bic.w	r3, r3, #1
 8005908:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800590a:	f7fd f95f 	bl	8002bcc <HAL_GetTick>
 800590e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005910:	bf00      	nop
 8005912:	f7fd f95b 	bl	8002bcc <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	4293      	cmp	r3, r2
 800591c:	d0f9      	beq.n	8005912 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800591e:	4b0a      	ldr	r3, [pc, #40]	@ (8005948 <HAL_RCC_OscConfig+0x7ac>)
 8005920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005922:	4b0a      	ldr	r3, [pc, #40]	@ (800594c <HAL_RCC_OscConfig+0x7b0>)
 8005924:	4013      	ands	r3, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800592a:	00d2      	lsls	r2, r2, #3
 800592c:	4906      	ldr	r1, [pc, #24]	@ (8005948 <HAL_RCC_OscConfig+0x7ac>)
 800592e:	4313      	orrs	r3, r2
 8005930:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005932:	4b05      	ldr	r3, [pc, #20]	@ (8005948 <HAL_RCC_OscConfig+0x7ac>)
 8005934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005936:	4a04      	ldr	r2, [pc, #16]	@ (8005948 <HAL_RCC_OscConfig+0x7ac>)
 8005938:	f043 0301 	orr.w	r3, r3, #1
 800593c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3730      	adds	r7, #48	@ 0x30
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	58024400 	.word	0x58024400
 800594c:	ffff0007 	.word	0xffff0007

08005950 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e19c      	b.n	8005c9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005964:	4b8a      	ldr	r3, [pc, #552]	@ (8005b90 <HAL_RCC_ClockConfig+0x240>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d910      	bls.n	8005994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005972:	4b87      	ldr	r3, [pc, #540]	@ (8005b90 <HAL_RCC_ClockConfig+0x240>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f023 020f 	bic.w	r2, r3, #15
 800597a:	4985      	ldr	r1, [pc, #532]	@ (8005b90 <HAL_RCC_ClockConfig+0x240>)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	4313      	orrs	r3, r2
 8005980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005982:	4b83      	ldr	r3, [pc, #524]	@ (8005b90 <HAL_RCC_ClockConfig+0x240>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d001      	beq.n	8005994 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e184      	b.n	8005c9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d010      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	4b7b      	ldr	r3, [pc, #492]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d908      	bls.n	80059c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059b0:	4b78      	ldr	r3, [pc, #480]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	4975      	ldr	r1, [pc, #468]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d010      	beq.n	80059f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	4b70      	ldr	r3, [pc, #448]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059da:	429a      	cmp	r2, r3
 80059dc:	d908      	bls.n	80059f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059de:	4b6d      	ldr	r3, [pc, #436]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	496a      	ldr	r1, [pc, #424]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d010      	beq.n	8005a1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699a      	ldr	r2, [r3, #24]
 8005a00:	4b64      	ldr	r3, [pc, #400]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d908      	bls.n	8005a1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a0c:	4b61      	ldr	r3, [pc, #388]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	495e      	ldr	r1, [pc, #376]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d010      	beq.n	8005a4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69da      	ldr	r2, [r3, #28]
 8005a2e:	4b59      	ldr	r3, [pc, #356]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d908      	bls.n	8005a4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a3a:	4b56      	ldr	r3, [pc, #344]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	4953      	ldr	r1, [pc, #332]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d010      	beq.n	8005a7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	f003 030f 	and.w	r3, r3, #15
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d908      	bls.n	8005a7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a68:	4b4a      	ldr	r3, [pc, #296]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	f023 020f 	bic.w	r2, r3, #15
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	4947      	ldr	r1, [pc, #284]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d055      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a86:	4b43      	ldr	r3, [pc, #268]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	4940      	ldr	r1, [pc, #256]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d107      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005aa0:	4b3c      	ldr	r3, [pc, #240]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d121      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e0f6      	b.n	8005c9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d107      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ab8:	4b36      	ldr	r3, [pc, #216]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d115      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0ea      	b.n	8005c9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d107      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ad0:	4b30      	ldr	r3, [pc, #192]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d109      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e0de      	b.n	8005c9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e0d6      	b.n	8005c9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005af0:	4b28      	ldr	r3, [pc, #160]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f023 0207 	bic.w	r2, r3, #7
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	4925      	ldr	r1, [pc, #148]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b02:	f7fd f863 	bl	8002bcc <HAL_GetTick>
 8005b06:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b08:	e00a      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b0a:	f7fd f85f 	bl	8002bcc <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e0be      	b.n	8005c9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b20:	4b1c      	ldr	r3, [pc, #112]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d1eb      	bne.n	8005b0a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d010      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	4b14      	ldr	r3, [pc, #80]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d208      	bcs.n	8005b60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b4e:	4b11      	ldr	r3, [pc, #68]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	f023 020f 	bic.w	r2, r3, #15
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	490e      	ldr	r1, [pc, #56]	@ (8005b94 <HAL_RCC_ClockConfig+0x244>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b60:	4b0b      	ldr	r3, [pc, #44]	@ (8005b90 <HAL_RCC_ClockConfig+0x240>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d214      	bcs.n	8005b98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6e:	4b08      	ldr	r3, [pc, #32]	@ (8005b90 <HAL_RCC_ClockConfig+0x240>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f023 020f 	bic.w	r2, r3, #15
 8005b76:	4906      	ldr	r1, [pc, #24]	@ (8005b90 <HAL_RCC_ClockConfig+0x240>)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7e:	4b04      	ldr	r3, [pc, #16]	@ (8005b90 <HAL_RCC_ClockConfig+0x240>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d005      	beq.n	8005b98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e086      	b.n	8005c9e <HAL_RCC_ClockConfig+0x34e>
 8005b90:	52002000 	.word	0x52002000
 8005b94:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d010      	beq.n	8005bc6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	4b3f      	ldr	r3, [pc, #252]	@ (8005ca8 <HAL_RCC_ClockConfig+0x358>)
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d208      	bcs.n	8005bc6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ca8 <HAL_RCC_ClockConfig+0x358>)
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	4939      	ldr	r1, [pc, #228]	@ (8005ca8 <HAL_RCC_ClockConfig+0x358>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d010      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	695a      	ldr	r2, [r3, #20]
 8005bd6:	4b34      	ldr	r3, [pc, #208]	@ (8005ca8 <HAL_RCC_ClockConfig+0x358>)
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d208      	bcs.n	8005bf4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005be2:	4b31      	ldr	r3, [pc, #196]	@ (8005ca8 <HAL_RCC_ClockConfig+0x358>)
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	492e      	ldr	r1, [pc, #184]	@ (8005ca8 <HAL_RCC_ClockConfig+0x358>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d010      	beq.n	8005c22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699a      	ldr	r2, [r3, #24]
 8005c04:	4b28      	ldr	r3, [pc, #160]	@ (8005ca8 <HAL_RCC_ClockConfig+0x358>)
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d208      	bcs.n	8005c22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c10:	4b25      	ldr	r3, [pc, #148]	@ (8005ca8 <HAL_RCC_ClockConfig+0x358>)
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	4922      	ldr	r1, [pc, #136]	@ (8005ca8 <HAL_RCC_ClockConfig+0x358>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d010      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69da      	ldr	r2, [r3, #28]
 8005c32:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca8 <HAL_RCC_ClockConfig+0x358>)
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d208      	bcs.n	8005c50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca8 <HAL_RCC_ClockConfig+0x358>)
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	4917      	ldr	r1, [pc, #92]	@ (8005ca8 <HAL_RCC_ClockConfig+0x358>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c50:	f000 f834 	bl	8005cbc <HAL_RCC_GetSysClockFreq>
 8005c54:	4602      	mov	r2, r0
 8005c56:	4b14      	ldr	r3, [pc, #80]	@ (8005ca8 <HAL_RCC_ClockConfig+0x358>)
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	0a1b      	lsrs	r3, r3, #8
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	4912      	ldr	r1, [pc, #72]	@ (8005cac <HAL_RCC_ClockConfig+0x35c>)
 8005c62:	5ccb      	ldrb	r3, [r1, r3]
 8005c64:	f003 031f 	and.w	r3, r3, #31
 8005c68:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ca8 <HAL_RCC_ClockConfig+0x358>)
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	4a0d      	ldr	r2, [pc, #52]	@ (8005cac <HAL_RCC_ClockConfig+0x35c>)
 8005c78:	5cd3      	ldrb	r3, [r2, r3]
 8005c7a:	f003 031f 	and.w	r3, r3, #31
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	fa22 f303 	lsr.w	r3, r2, r3
 8005c84:	4a0a      	ldr	r2, [pc, #40]	@ (8005cb0 <HAL_RCC_ClockConfig+0x360>)
 8005c86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c88:	4a0a      	ldr	r2, [pc, #40]	@ (8005cb4 <HAL_RCC_ClockConfig+0x364>)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb8 <HAL_RCC_ClockConfig+0x368>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fc ff50 	bl	8002b38 <HAL_InitTick>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	58024400 	.word	0x58024400
 8005cac:	08013150 	.word	0x08013150
 8005cb0:	2400000c 	.word	0x2400000c
 8005cb4:	24000008 	.word	0x24000008
 8005cb8:	24000040 	.word	0x24000040

08005cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b089      	sub	sp, #36	@ 0x24
 8005cc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cc2:	4bb3      	ldr	r3, [pc, #716]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cca:	2b18      	cmp	r3, #24
 8005ccc:	f200 8155 	bhi.w	8005f7a <HAL_RCC_GetSysClockFreq+0x2be>
 8005cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd6:	bf00      	nop
 8005cd8:	08005d3d 	.word	0x08005d3d
 8005cdc:	08005f7b 	.word	0x08005f7b
 8005ce0:	08005f7b 	.word	0x08005f7b
 8005ce4:	08005f7b 	.word	0x08005f7b
 8005ce8:	08005f7b 	.word	0x08005f7b
 8005cec:	08005f7b 	.word	0x08005f7b
 8005cf0:	08005f7b 	.word	0x08005f7b
 8005cf4:	08005f7b 	.word	0x08005f7b
 8005cf8:	08005d63 	.word	0x08005d63
 8005cfc:	08005f7b 	.word	0x08005f7b
 8005d00:	08005f7b 	.word	0x08005f7b
 8005d04:	08005f7b 	.word	0x08005f7b
 8005d08:	08005f7b 	.word	0x08005f7b
 8005d0c:	08005f7b 	.word	0x08005f7b
 8005d10:	08005f7b 	.word	0x08005f7b
 8005d14:	08005f7b 	.word	0x08005f7b
 8005d18:	08005d69 	.word	0x08005d69
 8005d1c:	08005f7b 	.word	0x08005f7b
 8005d20:	08005f7b 	.word	0x08005f7b
 8005d24:	08005f7b 	.word	0x08005f7b
 8005d28:	08005f7b 	.word	0x08005f7b
 8005d2c:	08005f7b 	.word	0x08005f7b
 8005d30:	08005f7b 	.word	0x08005f7b
 8005d34:	08005f7b 	.word	0x08005f7b
 8005d38:	08005d6f 	.word	0x08005d6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d3c:	4b94      	ldr	r3, [pc, #592]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0320 	and.w	r3, r3, #32
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d009      	beq.n	8005d5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d48:	4b91      	ldr	r3, [pc, #580]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	08db      	lsrs	r3, r3, #3
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	4a90      	ldr	r2, [pc, #576]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d54:	fa22 f303 	lsr.w	r3, r2, r3
 8005d58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005d5a:	e111      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d5c:	4b8d      	ldr	r3, [pc, #564]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d5e:	61bb      	str	r3, [r7, #24]
      break;
 8005d60:	e10e      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005d62:	4b8d      	ldr	r3, [pc, #564]	@ (8005f98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d64:	61bb      	str	r3, [r7, #24]
      break;
 8005d66:	e10b      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d68:	4b8c      	ldr	r3, [pc, #560]	@ (8005f9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d6a:	61bb      	str	r3, [r7, #24]
      break;
 8005d6c:	e108      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d6e:	4b88      	ldr	r3, [pc, #544]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d78:	4b85      	ldr	r3, [pc, #532]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7c:	091b      	lsrs	r3, r3, #4
 8005d7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d84:	4b82      	ldr	r3, [pc, #520]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d8e:	4b80      	ldr	r3, [pc, #512]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d92:	08db      	lsrs	r3, r3, #3
 8005d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	fb02 f303 	mul.w	r3, r2, r3
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80e1 	beq.w	8005f74 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	f000 8083 	beq.w	8005ec0 <HAL_RCC_GetSysClockFreq+0x204>
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	f200 80a1 	bhi.w	8005f04 <HAL_RCC_GetSysClockFreq+0x248>
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x114>
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d056      	beq.n	8005e7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005dce:	e099      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dd0:	4b6f      	ldr	r3, [pc, #444]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d02d      	beq.n	8005e38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	08db      	lsrs	r3, r3, #3
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	4a6b      	ldr	r2, [pc, #428]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	ee07 3a90 	vmov	s15, r3
 8005df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e06:	4b62      	ldr	r3, [pc, #392]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e1a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005fa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e36:	e087      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e42:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005fa4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e4a:	4b51      	ldr	r3, [pc, #324]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e5e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005fa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e7a:	e065      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e86:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005fa8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8e:	4b40      	ldr	r3, [pc, #256]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ea2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005fa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ebe:	e043      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005fac <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ee6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005fa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f02:	e021      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005fa8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f16:	4b1e      	ldr	r3, [pc, #120]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f2a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005fa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005f48:	4b11      	ldr	r3, [pc, #68]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4c:	0a5b      	lsrs	r3, r3, #9
 8005f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f52:	3301      	adds	r3, #1
 8005f54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	ee07 3a90 	vmov	s15, r3
 8005f5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f60:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f6c:	ee17 3a90 	vmov	r3, s15
 8005f70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f72:	e005      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	61bb      	str	r3, [r7, #24]
      break;
 8005f78:	e002      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005f7a:	4b07      	ldr	r3, [pc, #28]	@ (8005f98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f7c:	61bb      	str	r3, [r7, #24]
      break;
 8005f7e:	bf00      	nop
  }

  return sysclockfreq;
 8005f80:	69bb      	ldr	r3, [r7, #24]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3724      	adds	r7, #36	@ 0x24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	58024400 	.word	0x58024400
 8005f94:	03d09000 	.word	0x03d09000
 8005f98:	003d0900 	.word	0x003d0900
 8005f9c:	017d7840 	.word	0x017d7840
 8005fa0:	46000000 	.word	0x46000000
 8005fa4:	4c742400 	.word	0x4c742400
 8005fa8:	4a742400 	.word	0x4a742400
 8005fac:	4bbebc20 	.word	0x4bbebc20

08005fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fb6:	f7ff fe81 	bl	8005cbc <HAL_RCC_GetSysClockFreq>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	4b10      	ldr	r3, [pc, #64]	@ (8006000 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	0a1b      	lsrs	r3, r3, #8
 8005fc2:	f003 030f 	and.w	r3, r3, #15
 8005fc6:	490f      	ldr	r1, [pc, #60]	@ (8006004 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fc8:	5ccb      	ldrb	r3, [r1, r3]
 8005fca:	f003 031f 	and.w	r3, r3, #31
 8005fce:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006000 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f003 030f 	and.w	r3, r3, #15
 8005fdc:	4a09      	ldr	r2, [pc, #36]	@ (8006004 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fde:	5cd3      	ldrb	r3, [r2, r3]
 8005fe0:	f003 031f 	and.w	r3, r3, #31
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fea:	4a07      	ldr	r2, [pc, #28]	@ (8006008 <HAL_RCC_GetHCLKFreq+0x58>)
 8005fec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005fee:	4a07      	ldr	r2, [pc, #28]	@ (800600c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ff4:	4b04      	ldr	r3, [pc, #16]	@ (8006008 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	58024400 	.word	0x58024400
 8006004:	08013150 	.word	0x08013150
 8006008:	2400000c 	.word	0x2400000c
 800600c:	24000008 	.word	0x24000008

08006010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006014:	f7ff ffcc 	bl	8005fb0 <HAL_RCC_GetHCLKFreq>
 8006018:	4602      	mov	r2, r0
 800601a:	4b06      	ldr	r3, [pc, #24]	@ (8006034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	091b      	lsrs	r3, r3, #4
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	4904      	ldr	r1, [pc, #16]	@ (8006038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006026:	5ccb      	ldrb	r3, [r1, r3]
 8006028:	f003 031f 	and.w	r3, r3, #31
 800602c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006030:	4618      	mov	r0, r3
 8006032:	bd80      	pop	{r7, pc}
 8006034:	58024400 	.word	0x58024400
 8006038:	08013150 	.word	0x08013150

0800603c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006040:	f7ff ffb6 	bl	8005fb0 <HAL_RCC_GetHCLKFreq>
 8006044:	4602      	mov	r2, r0
 8006046:	4b06      	ldr	r3, [pc, #24]	@ (8006060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	0a1b      	lsrs	r3, r3, #8
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	4904      	ldr	r1, [pc, #16]	@ (8006064 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006052:	5ccb      	ldrb	r3, [r1, r3]
 8006054:	f003 031f 	and.w	r3, r3, #31
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800605c:	4618      	mov	r0, r3
 800605e:	bd80      	pop	{r7, pc}
 8006060:	58024400 	.word	0x58024400
 8006064:	08013150 	.word	0x08013150

08006068 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800606c:	b0c6      	sub	sp, #280	@ 0x118
 800606e:	af00      	add	r7, sp, #0
 8006070:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006074:	2300      	movs	r3, #0
 8006076:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800607a:	2300      	movs	r3, #0
 800607c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800608c:	2500      	movs	r5, #0
 800608e:	ea54 0305 	orrs.w	r3, r4, r5
 8006092:	d049      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800609a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800609e:	d02f      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80060a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060a4:	d828      	bhi.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060aa:	d01a      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060b0:	d822      	bhi.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80060b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060ba:	d007      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060bc:	e01c      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060be:	4bab      	ldr	r3, [pc, #684]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c2:	4aaa      	ldr	r2, [pc, #680]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060ca:	e01a      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d0:	3308      	adds	r3, #8
 80060d2:	2102      	movs	r1, #2
 80060d4:	4618      	mov	r0, r3
 80060d6:	f001 fc25 	bl	8007924 <RCCEx_PLL2_Config>
 80060da:	4603      	mov	r3, r0
 80060dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060e0:	e00f      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e6:	3328      	adds	r3, #40	@ 0x28
 80060e8:	2102      	movs	r1, #2
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 fccc 	bl	8007a88 <RCCEx_PLL3_Config>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060f6:	e004      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060fe:	e000      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006102:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800610a:	4b98      	ldr	r3, [pc, #608]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800610c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800610e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006116:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006118:	4a94      	ldr	r2, [pc, #592]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800611a:	430b      	orrs	r3, r1
 800611c:	6513      	str	r3, [r2, #80]	@ 0x50
 800611e:	e003      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006120:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006124:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006134:	f04f 0900 	mov.w	r9, #0
 8006138:	ea58 0309 	orrs.w	r3, r8, r9
 800613c:	d047      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800613e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006144:	2b04      	cmp	r3, #4
 8006146:	d82a      	bhi.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006148:	a201      	add	r2, pc, #4	@ (adr r2, 8006150 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614e:	bf00      	nop
 8006150:	08006165 	.word	0x08006165
 8006154:	08006173 	.word	0x08006173
 8006158:	08006189 	.word	0x08006189
 800615c:	080061a7 	.word	0x080061a7
 8006160:	080061a7 	.word	0x080061a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006164:	4b81      	ldr	r3, [pc, #516]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006168:	4a80      	ldr	r2, [pc, #512]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800616a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800616e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006170:	e01a      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006176:	3308      	adds	r3, #8
 8006178:	2100      	movs	r1, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f001 fbd2 	bl	8007924 <RCCEx_PLL2_Config>
 8006180:	4603      	mov	r3, r0
 8006182:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006186:	e00f      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618c:	3328      	adds	r3, #40	@ 0x28
 800618e:	2100      	movs	r1, #0
 8006190:	4618      	mov	r0, r3
 8006192:	f001 fc79 	bl	8007a88 <RCCEx_PLL3_Config>
 8006196:	4603      	mov	r3, r0
 8006198:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800619c:	e004      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061a4:	e000      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80061a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061b0:	4b6e      	ldr	r3, [pc, #440]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061b4:	f023 0107 	bic.w	r1, r3, #7
 80061b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061be:	4a6b      	ldr	r2, [pc, #428]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061c0:	430b      	orrs	r3, r1
 80061c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80061c4:	e003      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80061da:	f04f 0b00 	mov.w	fp, #0
 80061de:	ea5a 030b 	orrs.w	r3, sl, fp
 80061e2:	d05b      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80061e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061ec:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80061f0:	d03b      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80061f2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80061f6:	d834      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80061f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061fc:	d037      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80061fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006202:	d82e      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006204:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006208:	d033      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800620a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800620e:	d828      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006210:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006214:	d01a      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006216:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800621a:	d822      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006220:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006224:	d007      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006226:	e01c      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006228:	4b50      	ldr	r3, [pc, #320]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800622a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622c:	4a4f      	ldr	r2, [pc, #316]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800622e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006234:	e01e      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800623a:	3308      	adds	r3, #8
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f001 fb70 	bl	8007924 <RCCEx_PLL2_Config>
 8006244:	4603      	mov	r3, r0
 8006246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800624a:	e013      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800624c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006250:	3328      	adds	r3, #40	@ 0x28
 8006252:	2100      	movs	r1, #0
 8006254:	4618      	mov	r0, r3
 8006256:	f001 fc17 	bl	8007a88 <RCCEx_PLL3_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006260:	e008      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006268:	e004      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800626a:	bf00      	nop
 800626c:	e002      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800626e:	bf00      	nop
 8006270:	e000      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006274:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10b      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800627c:	4b3b      	ldr	r3, [pc, #236]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800627e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006280:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006288:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800628c:	4a37      	ldr	r2, [pc, #220]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800628e:	430b      	orrs	r3, r1
 8006290:	6593      	str	r3, [r2, #88]	@ 0x58
 8006292:	e003      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006294:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006298:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800629c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80062a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80062ac:	2300      	movs	r3, #0
 80062ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80062b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80062b6:	460b      	mov	r3, r1
 80062b8:	4313      	orrs	r3, r2
 80062ba:	d05d      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80062bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80062c4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80062c8:	d03b      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80062ca:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80062ce:	d834      	bhi.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80062d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062d4:	d037      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80062d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062da:	d82e      	bhi.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80062dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062e0:	d033      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80062e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062e6:	d828      	bhi.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80062e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062ec:	d01a      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80062ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062f2:	d822      	bhi.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80062f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062fc:	d007      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80062fe:	e01c      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006300:	4b1a      	ldr	r3, [pc, #104]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006304:	4a19      	ldr	r2, [pc, #100]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800630a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800630c:	e01e      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800630e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006312:	3308      	adds	r3, #8
 8006314:	2100      	movs	r1, #0
 8006316:	4618      	mov	r0, r3
 8006318:	f001 fb04 	bl	8007924 <RCCEx_PLL2_Config>
 800631c:	4603      	mov	r3, r0
 800631e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006322:	e013      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006328:	3328      	adds	r3, #40	@ 0x28
 800632a:	2100      	movs	r1, #0
 800632c:	4618      	mov	r0, r3
 800632e:	f001 fbab 	bl	8007a88 <RCCEx_PLL3_Config>
 8006332:	4603      	mov	r3, r0
 8006334:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006338:	e008      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006340:	e004      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006342:	bf00      	nop
 8006344:	e002      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006346:	bf00      	nop
 8006348:	e000      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800634a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800634c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10d      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006354:	4b05      	ldr	r3, [pc, #20]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006358:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800635c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006360:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006364:	4a01      	ldr	r2, [pc, #4]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006366:	430b      	orrs	r3, r1
 8006368:	6593      	str	r3, [r2, #88]	@ 0x58
 800636a:	e005      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800636c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006370:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006374:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006384:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006388:	2300      	movs	r3, #0
 800638a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800638e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006392:	460b      	mov	r3, r1
 8006394:	4313      	orrs	r3, r2
 8006396:	d03a      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800639c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800639e:	2b30      	cmp	r3, #48	@ 0x30
 80063a0:	d01f      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80063a2:	2b30      	cmp	r3, #48	@ 0x30
 80063a4:	d819      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x372>
 80063a6:	2b20      	cmp	r3, #32
 80063a8:	d00c      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80063aa:	2b20      	cmp	r3, #32
 80063ac:	d815      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x372>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d019      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80063b2:	2b10      	cmp	r3, #16
 80063b4:	d111      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b6:	4baa      	ldr	r3, [pc, #680]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ba:	4aa9      	ldr	r2, [pc, #676]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80063c2:	e011      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c8:	3308      	adds	r3, #8
 80063ca:	2102      	movs	r1, #2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 faa9 	bl	8007924 <RCCEx_PLL2_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80063d8:	e006      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063e0:	e002      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80063e2:	bf00      	nop
 80063e4:	e000      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80063e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10a      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80063f0:	4b9b      	ldr	r3, [pc, #620]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80063f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063fe:	4a98      	ldr	r2, [pc, #608]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006400:	430b      	orrs	r3, r1
 8006402:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006404:	e003      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006406:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800640a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800640e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800641a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800641e:	2300      	movs	r3, #0
 8006420:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006424:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006428:	460b      	mov	r3, r1
 800642a:	4313      	orrs	r3, r2
 800642c:	d051      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800642e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006438:	d035      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800643a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800643e:	d82e      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006440:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006444:	d031      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006446:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800644a:	d828      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800644c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006450:	d01a      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006456:	d822      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800645c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006460:	d007      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006462:	e01c      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006464:	4b7e      	ldr	r3, [pc, #504]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	4a7d      	ldr	r2, [pc, #500]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800646a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800646e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006470:	e01c      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006476:	3308      	adds	r3, #8
 8006478:	2100      	movs	r1, #0
 800647a:	4618      	mov	r0, r3
 800647c:	f001 fa52 	bl	8007924 <RCCEx_PLL2_Config>
 8006480:	4603      	mov	r3, r0
 8006482:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006486:	e011      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648c:	3328      	adds	r3, #40	@ 0x28
 800648e:	2100      	movs	r1, #0
 8006490:	4618      	mov	r0, r3
 8006492:	f001 faf9 	bl	8007a88 <RCCEx_PLL3_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800649c:	e006      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064a4:	e002      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80064a6:	bf00      	nop
 80064a8:	e000      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80064aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064b4:	4b6a      	ldr	r3, [pc, #424]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c2:	4a67      	ldr	r2, [pc, #412]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064c4:	430b      	orrs	r3, r1
 80064c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80064c8:	e003      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80064de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064e2:	2300      	movs	r3, #0
 80064e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064e8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4313      	orrs	r3, r2
 80064f0:	d053      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80064f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064fc:	d033      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80064fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006502:	d82c      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006504:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006508:	d02f      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800650a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800650e:	d826      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006510:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006514:	d02b      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006516:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800651a:	d820      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800651c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006520:	d012      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006526:	d81a      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006528:	2b00      	cmp	r3, #0
 800652a:	d022      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800652c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006530:	d115      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006536:	3308      	adds	r3, #8
 8006538:	2101      	movs	r1, #1
 800653a:	4618      	mov	r0, r3
 800653c:	f001 f9f2 	bl	8007924 <RCCEx_PLL2_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006546:	e015      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654c:	3328      	adds	r3, #40	@ 0x28
 800654e:	2101      	movs	r1, #1
 8006550:	4618      	mov	r0, r3
 8006552:	f001 fa99 	bl	8007a88 <RCCEx_PLL3_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800655c:	e00a      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006564:	e006      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006566:	bf00      	nop
 8006568:	e004      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800656a:	bf00      	nop
 800656c:	e002      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800656e:	bf00      	nop
 8006570:	e000      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006574:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10a      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800657c:	4b38      	ldr	r3, [pc, #224]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800657e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006580:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800658a:	4a35      	ldr	r2, [pc, #212]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800658c:	430b      	orrs	r3, r1
 800658e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006590:	e003      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006592:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006596:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800659a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80065a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065aa:	2300      	movs	r3, #0
 80065ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80065b0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80065b4:	460b      	mov	r3, r1
 80065b6:	4313      	orrs	r3, r2
 80065b8:	d058      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80065c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065c6:	d033      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80065c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065cc:	d82c      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d2:	d02f      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80065d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d8:	d826      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80065da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065de:	d02b      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80065e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065e4:	d820      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80065e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ea:	d012      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80065ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065f0:	d81a      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d022      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80065f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065fa:	d115      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006600:	3308      	adds	r3, #8
 8006602:	2101      	movs	r1, #1
 8006604:	4618      	mov	r0, r3
 8006606:	f001 f98d 	bl	8007924 <RCCEx_PLL2_Config>
 800660a:	4603      	mov	r3, r0
 800660c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006610:	e015      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006616:	3328      	adds	r3, #40	@ 0x28
 8006618:	2101      	movs	r1, #1
 800661a:	4618      	mov	r0, r3
 800661c:	f001 fa34 	bl	8007a88 <RCCEx_PLL3_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006626:	e00a      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800662e:	e006      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006630:	bf00      	nop
 8006632:	e004      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006634:	bf00      	nop
 8006636:	e002      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006638:	bf00      	nop
 800663a:	e000      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800663c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800663e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10e      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006646:	4b06      	ldr	r3, [pc, #24]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800664a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800664e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006652:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006656:	4a02      	ldr	r2, [pc, #8]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006658:	430b      	orrs	r3, r1
 800665a:	6593      	str	r3, [r2, #88]	@ 0x58
 800665c:	e006      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800665e:	bf00      	nop
 8006660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006664:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006668:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800666c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800667c:	2300      	movs	r3, #0
 800667e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006682:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006686:	460b      	mov	r3, r1
 8006688:	4313      	orrs	r3, r2
 800668a:	d037      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006690:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006696:	d00e      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800669c:	d816      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d018      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80066a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066a6:	d111      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a8:	4bc4      	ldr	r3, [pc, #784]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ac:	4ac3      	ldr	r2, [pc, #780]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066b4:	e00f      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ba:	3308      	adds	r3, #8
 80066bc:	2101      	movs	r1, #1
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 f930 	bl	8007924 <RCCEx_PLL2_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066ca:	e004      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066d2:	e000      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80066d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066de:	4bb7      	ldr	r3, [pc, #732]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066ec:	4ab3      	ldr	r2, [pc, #716]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066ee:	430b      	orrs	r3, r1
 80066f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80066f2:	e003      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80066fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006708:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800670c:	2300      	movs	r3, #0
 800670e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006712:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006716:	460b      	mov	r3, r1
 8006718:	4313      	orrs	r3, r2
 800671a:	d039      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800671c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006722:	2b03      	cmp	r3, #3
 8006724:	d81c      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006726:	a201      	add	r2, pc, #4	@ (adr r2, 800672c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672c:	08006769 	.word	0x08006769
 8006730:	0800673d 	.word	0x0800673d
 8006734:	0800674b 	.word	0x0800674b
 8006738:	08006769 	.word	0x08006769
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800673c:	4b9f      	ldr	r3, [pc, #636]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800673e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006740:	4a9e      	ldr	r2, [pc, #632]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006746:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006748:	e00f      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800674a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674e:	3308      	adds	r3, #8
 8006750:	2102      	movs	r1, #2
 8006752:	4618      	mov	r0, r3
 8006754:	f001 f8e6 	bl	8007924 <RCCEx_PLL2_Config>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800675e:	e004      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006766:	e000      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10a      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006772:	4b92      	ldr	r3, [pc, #584]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006776:	f023 0103 	bic.w	r1, r3, #3
 800677a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800677e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006780:	4a8e      	ldr	r2, [pc, #568]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006782:	430b      	orrs	r3, r1
 8006784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006786:	e003      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006788:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800678c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800679c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067a0:	2300      	movs	r3, #0
 80067a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4313      	orrs	r3, r2
 80067ae:	f000 8099 	beq.w	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067b2:	4b83      	ldr	r3, [pc, #524]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a82      	ldr	r2, [pc, #520]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80067b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067be:	f7fc fa05 	bl	8002bcc <HAL_GetTick>
 80067c2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067c6:	e00b      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c8:	f7fc fa00 	bl	8002bcc <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b64      	cmp	r3, #100	@ 0x64
 80067d6:	d903      	bls.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067de:	e005      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067e0:	4b77      	ldr	r3, [pc, #476]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0ed      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80067ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d173      	bne.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80067f4:	4b71      	ldr	r3, [pc, #452]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006800:	4053      	eors	r3, r2
 8006802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006806:	2b00      	cmp	r3, #0
 8006808:	d015      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800680a:	4b6c      	ldr	r3, [pc, #432]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800680e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006812:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006816:	4b69      	ldr	r3, [pc, #420]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800681a:	4a68      	ldr	r2, [pc, #416]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800681c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006820:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006822:	4b66      	ldr	r3, [pc, #408]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006826:	4a65      	ldr	r2, [pc, #404]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800682c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800682e:	4a63      	ldr	r2, [pc, #396]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006830:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006834:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800683e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006842:	d118      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006844:	f7fc f9c2 	bl	8002bcc <HAL_GetTick>
 8006848:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800684c:	e00d      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800684e:	f7fc f9bd 	bl	8002bcc <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006858:	1ad2      	subs	r2, r2, r3
 800685a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800685e:	429a      	cmp	r2, r3
 8006860:	d903      	bls.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006868:	e005      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800686a:	4b54      	ldr	r3, [pc, #336]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0eb      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006876:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800687a:	2b00      	cmp	r3, #0
 800687c:	d129      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800687e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006882:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800688a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800688e:	d10e      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006890:	4b4a      	ldr	r3, [pc, #296]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068a0:	091a      	lsrs	r2, r3, #4
 80068a2:	4b48      	ldr	r3, [pc, #288]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	4a45      	ldr	r2, [pc, #276]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068a8:	430b      	orrs	r3, r1
 80068aa:	6113      	str	r3, [r2, #16]
 80068ac:	e005      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x852>
 80068ae:	4b43      	ldr	r3, [pc, #268]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	4a42      	ldr	r2, [pc, #264]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80068b8:	6113      	str	r3, [r2, #16]
 80068ba:	4b40      	ldr	r3, [pc, #256]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80068be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ca:	4a3c      	ldr	r2, [pc, #240]	@ (80069bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068cc:	430b      	orrs	r3, r1
 80068ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80068d0:	e008      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80068da:	e003      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	f002 0301 	and.w	r3, r2, #1
 80068f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068f4:	2300      	movs	r3, #0
 80068f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80068fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80068fe:	460b      	mov	r3, r1
 8006900:	4313      	orrs	r3, r2
 8006902:	f000 808f 	beq.w	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800690a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800690c:	2b28      	cmp	r3, #40	@ 0x28
 800690e:	d871      	bhi.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006910:	a201      	add	r2, pc, #4	@ (adr r2, 8006918 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006916:	bf00      	nop
 8006918:	080069fd 	.word	0x080069fd
 800691c:	080069f5 	.word	0x080069f5
 8006920:	080069f5 	.word	0x080069f5
 8006924:	080069f5 	.word	0x080069f5
 8006928:	080069f5 	.word	0x080069f5
 800692c:	080069f5 	.word	0x080069f5
 8006930:	080069f5 	.word	0x080069f5
 8006934:	080069f5 	.word	0x080069f5
 8006938:	080069c9 	.word	0x080069c9
 800693c:	080069f5 	.word	0x080069f5
 8006940:	080069f5 	.word	0x080069f5
 8006944:	080069f5 	.word	0x080069f5
 8006948:	080069f5 	.word	0x080069f5
 800694c:	080069f5 	.word	0x080069f5
 8006950:	080069f5 	.word	0x080069f5
 8006954:	080069f5 	.word	0x080069f5
 8006958:	080069df 	.word	0x080069df
 800695c:	080069f5 	.word	0x080069f5
 8006960:	080069f5 	.word	0x080069f5
 8006964:	080069f5 	.word	0x080069f5
 8006968:	080069f5 	.word	0x080069f5
 800696c:	080069f5 	.word	0x080069f5
 8006970:	080069f5 	.word	0x080069f5
 8006974:	080069f5 	.word	0x080069f5
 8006978:	080069fd 	.word	0x080069fd
 800697c:	080069f5 	.word	0x080069f5
 8006980:	080069f5 	.word	0x080069f5
 8006984:	080069f5 	.word	0x080069f5
 8006988:	080069f5 	.word	0x080069f5
 800698c:	080069f5 	.word	0x080069f5
 8006990:	080069f5 	.word	0x080069f5
 8006994:	080069f5 	.word	0x080069f5
 8006998:	080069fd 	.word	0x080069fd
 800699c:	080069f5 	.word	0x080069f5
 80069a0:	080069f5 	.word	0x080069f5
 80069a4:	080069f5 	.word	0x080069f5
 80069a8:	080069f5 	.word	0x080069f5
 80069ac:	080069f5 	.word	0x080069f5
 80069b0:	080069f5 	.word	0x080069f5
 80069b4:	080069f5 	.word	0x080069f5
 80069b8:	080069fd 	.word	0x080069fd
 80069bc:	58024400 	.word	0x58024400
 80069c0:	58024800 	.word	0x58024800
 80069c4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069cc:	3308      	adds	r3, #8
 80069ce:	2101      	movs	r1, #1
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 ffa7 	bl	8007924 <RCCEx_PLL2_Config>
 80069d6:	4603      	mov	r3, r0
 80069d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069dc:	e00f      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e2:	3328      	adds	r3, #40	@ 0x28
 80069e4:	2101      	movs	r1, #1
 80069e6:	4618      	mov	r0, r3
 80069e8:	f001 f84e 	bl	8007a88 <RCCEx_PLL3_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069f2:	e004      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069fa:	e000      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80069fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a06:	4bbf      	ldr	r3, [pc, #764]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a14:	4abb      	ldr	r2, [pc, #748]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a16:	430b      	orrs	r3, r1
 8006a18:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a1a:	e003      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	f002 0302 	and.w	r3, r2, #2
 8006a30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a34:	2300      	movs	r3, #0
 8006a36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4313      	orrs	r3, r2
 8006a42:	d041      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a4a:	2b05      	cmp	r3, #5
 8006a4c:	d824      	bhi.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a54 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006aa1 	.word	0x08006aa1
 8006a58:	08006a6d 	.word	0x08006a6d
 8006a5c:	08006a83 	.word	0x08006a83
 8006a60:	08006aa1 	.word	0x08006aa1
 8006a64:	08006aa1 	.word	0x08006aa1
 8006a68:	08006aa1 	.word	0x08006aa1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a70:	3308      	adds	r3, #8
 8006a72:	2101      	movs	r1, #1
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 ff55 	bl	8007924 <RCCEx_PLL2_Config>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a80:	e00f      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a86:	3328      	adds	r3, #40	@ 0x28
 8006a88:	2101      	movs	r1, #1
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fffc 	bl	8007a88 <RCCEx_PLL3_Config>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a96:	e004      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a9e:	e000      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006aaa:	4b96      	ldr	r3, [pc, #600]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aae:	f023 0107 	bic.w	r1, r3, #7
 8006ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ab8:	4a92      	ldr	r2, [pc, #584]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006aba:	430b      	orrs	r3, r1
 8006abc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006abe:	e003      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ac4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	f002 0304 	and.w	r3, r2, #4
 8006ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ade:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	d044      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af0:	2b05      	cmp	r3, #5
 8006af2:	d825      	bhi.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006af4:	a201      	add	r2, pc, #4	@ (adr r2, 8006afc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afa:	bf00      	nop
 8006afc:	08006b49 	.word	0x08006b49
 8006b00:	08006b15 	.word	0x08006b15
 8006b04:	08006b2b 	.word	0x08006b2b
 8006b08:	08006b49 	.word	0x08006b49
 8006b0c:	08006b49 	.word	0x08006b49
 8006b10:	08006b49 	.word	0x08006b49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b18:	3308      	adds	r3, #8
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 ff01 	bl	8007924 <RCCEx_PLL2_Config>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b28:	e00f      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2e:	3328      	adds	r3, #40	@ 0x28
 8006b30:	2101      	movs	r1, #1
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 ffa8 	bl	8007a88 <RCCEx_PLL3_Config>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b3e:	e004      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b46:	e000      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10b      	bne.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b52:	4b6c      	ldr	r3, [pc, #432]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b56:	f023 0107 	bic.w	r1, r3, #7
 8006b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b62:	4a68      	ldr	r2, [pc, #416]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b68:	e003      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	f002 0320 	and.w	r3, r2, #32
 8006b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b82:	2300      	movs	r3, #0
 8006b84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	d055      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b9e:	d033      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ba4:	d82c      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006baa:	d02f      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb0:	d826      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006bb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bb6:	d02b      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006bb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bbc:	d820      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bc2:	d012      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bc8:	d81a      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d022      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006bce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bd2:	d115      	bne.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd8:	3308      	adds	r3, #8
 8006bda:	2100      	movs	r1, #0
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fea1 	bl	8007924 <RCCEx_PLL2_Config>
 8006be2:	4603      	mov	r3, r0
 8006be4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006be8:	e015      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bee:	3328      	adds	r3, #40	@ 0x28
 8006bf0:	2102      	movs	r1, #2
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 ff48 	bl	8007a88 <RCCEx_PLL3_Config>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006bfe:	e00a      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c06:	e006      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c08:	bf00      	nop
 8006c0a:	e004      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c0c:	bf00      	nop
 8006c0e:	e002      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c10:	bf00      	nop
 8006c12:	e000      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10b      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c1e:	4b39      	ldr	r3, [pc, #228]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c2e:	4a35      	ldr	r2, [pc, #212]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c34:	e003      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006c4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c54:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	d058      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c66:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c6a:	d033      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006c6c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c70:	d82c      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c76:	d02f      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c7c:	d826      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c82:	d02b      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006c84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c88:	d820      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c8e:	d012      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c94:	d81a      	bhi.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d022      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c9e:	d115      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 fe3b 	bl	8007924 <RCCEx_PLL2_Config>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cb4:	e015      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cba:	3328      	adds	r3, #40	@ 0x28
 8006cbc:	2102      	movs	r1, #2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fee2 	bl	8007a88 <RCCEx_PLL3_Config>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006cca:	e00a      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cd2:	e006      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006cd4:	bf00      	nop
 8006cd6:	e004      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006cd8:	bf00      	nop
 8006cda:	e002      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006cdc:	bf00      	nop
 8006cde:	e000      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10e      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cea:	4b06      	ldr	r3, [pc, #24]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cfa:	4a02      	ldr	r2, [pc, #8]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d00:	e006      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006d02:	bf00      	nop
 8006d04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006d1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d20:	2300      	movs	r3, #0
 8006d22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d26:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	d055      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d38:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d3c:	d033      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006d3e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d42:	d82c      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d48:	d02f      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d4e:	d826      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d50:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d54:	d02b      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006d56:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d5a:	d820      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d60:	d012      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006d62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d66:	d81a      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d022      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d70:	d115      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d76:	3308      	adds	r3, #8
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fdd2 	bl	8007924 <RCCEx_PLL2_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d86:	e015      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8c:	3328      	adds	r3, #40	@ 0x28
 8006d8e:	2102      	movs	r1, #2
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fe79 	bl	8007a88 <RCCEx_PLL3_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d9c:	e00a      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006da4:	e006      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006da6:	bf00      	nop
 8006da8:	e004      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006daa:	bf00      	nop
 8006dac:	e002      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006dae:	bf00      	nop
 8006db0:	e000      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10b      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dbc:	4ba0      	ldr	r3, [pc, #640]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006dcc:	4a9c      	ldr	r2, [pc, #624]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dd2:	e003      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f002 0308 	and.w	r3, r2, #8
 8006de8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006dec:	2300      	movs	r3, #0
 8006dee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006df2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006df6:	460b      	mov	r3, r1
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	d01e      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e08:	d10c      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0e:	3328      	adds	r3, #40	@ 0x28
 8006e10:	2102      	movs	r1, #2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fe38 	bl	8007a88 <RCCEx_PLL3_Config>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006e24:	4b86      	ldr	r3, [pc, #536]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e28:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e34:	4a82      	ldr	r2, [pc, #520]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e36:	430b      	orrs	r3, r1
 8006e38:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f002 0310 	and.w	r3, r2, #16
 8006e46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e50:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006e54:	460b      	mov	r3, r1
 8006e56:	4313      	orrs	r3, r2
 8006e58:	d01e      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e66:	d10c      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e6c:	3328      	adds	r3, #40	@ 0x28
 8006e6e:	2102      	movs	r1, #2
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fe09 	bl	8007a88 <RCCEx_PLL3_Config>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e82:	4b6f      	ldr	r3, [pc, #444]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e92:	4a6b      	ldr	r2, [pc, #428]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e94:	430b      	orrs	r3, r1
 8006e96:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006ea4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006eaa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	d03e      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ec0:	d022      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006ec2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ec6:	d81b      	bhi.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ed0:	d00b      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006ed2:	e015      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed8:	3308      	adds	r3, #8
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fd21 	bl	8007924 <RCCEx_PLL2_Config>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ee8:	e00f      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eee:	3328      	adds	r3, #40	@ 0x28
 8006ef0:	2102      	movs	r1, #2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 fdc8 	bl	8007a88 <RCCEx_PLL3_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006efe:	e004      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f06:	e000      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10b      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f12:	4b4b      	ldr	r3, [pc, #300]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f16:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f22:	4a47      	ldr	r2, [pc, #284]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f24:	430b      	orrs	r3, r1
 8006f26:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f28:	e003      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006f3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f40:	2300      	movs	r3, #0
 8006f42:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f44:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	d03b      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f5a:	d01f      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006f5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f60:	d818      	bhi.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f66:	d003      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006f68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f6c:	d007      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006f6e:	e011      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f70:	4b33      	ldr	r3, [pc, #204]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f74:	4a32      	ldr	r2, [pc, #200]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f7c:	e00f      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f82:	3328      	adds	r3, #40	@ 0x28
 8006f84:	2101      	movs	r1, #1
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fd7e 	bl	8007a88 <RCCEx_PLL3_Config>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f92:	e004      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f9a:	e000      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10b      	bne.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fa6:	4b26      	ldr	r3, [pc, #152]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006faa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fb6:	4a22      	ldr	r2, [pc, #136]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fbc:	e003      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006fd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006fd8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	d034      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ff0:	d007      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006ff2:	e011      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff4:	4b12      	ldr	r3, [pc, #72]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff8:	4a11      	ldr	r2, [pc, #68]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007000:	e00e      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007006:	3308      	adds	r3, #8
 8007008:	2102      	movs	r1, #2
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fc8a 	bl	8007924 <RCCEx_PLL2_Config>
 8007010:	4603      	mov	r3, r0
 8007012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007016:	e003      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800701e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007020:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10d      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007028:	4b05      	ldr	r3, [pc, #20]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800702a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800702c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007036:	4a02      	ldr	r2, [pc, #8]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007038:	430b      	orrs	r3, r1
 800703a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800703c:	e006      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800703e:	bf00      	nop
 8007040:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007048:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800704c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007058:	663b      	str	r3, [r7, #96]	@ 0x60
 800705a:	2300      	movs	r3, #0
 800705c:	667b      	str	r3, [r7, #100]	@ 0x64
 800705e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007062:	460b      	mov	r3, r1
 8007064:	4313      	orrs	r3, r2
 8007066:	d00c      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706c:	3328      	adds	r3, #40	@ 0x28
 800706e:	2102      	movs	r1, #2
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fd09 	bl	8007a88 <RCCEx_PLL3_Config>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800708e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007090:	2300      	movs	r3, #0
 8007092:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007094:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007098:	460b      	mov	r3, r1
 800709a:	4313      	orrs	r3, r2
 800709c:	d036      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800709e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070a8:	d018      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80070aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070ae:	d811      	bhi.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80070b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070b4:	d014      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80070b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ba:	d80b      	bhi.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d011      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80070c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070c4:	d106      	bne.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c6:	4bb7      	ldr	r3, [pc, #732]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ca:	4ab6      	ldr	r2, [pc, #728]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80070d2:	e008      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070da:	e004      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80070dc:	bf00      	nop
 80070de:	e002      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80070e0:	bf00      	nop
 80070e2:	e000      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80070e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10a      	bne.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070ee:	4bad      	ldr	r3, [pc, #692]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80070f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070fc:	4aa9      	ldr	r2, [pc, #676]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070fe:	430b      	orrs	r3, r1
 8007100:	6553      	str	r3, [r2, #84]	@ 0x54
 8007102:	e003      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007104:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007108:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800710c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007118:	653b      	str	r3, [r7, #80]	@ 0x50
 800711a:	2300      	movs	r3, #0
 800711c:	657b      	str	r3, [r7, #84]	@ 0x54
 800711e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007122:	460b      	mov	r3, r1
 8007124:	4313      	orrs	r3, r2
 8007126:	d009      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007128:	4b9e      	ldr	r3, [pc, #632]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800712a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800712c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007136:	4a9b      	ldr	r2, [pc, #620]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007138:	430b      	orrs	r3, r1
 800713a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800713c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800714a:	2300      	movs	r3, #0
 800714c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800714e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007152:	460b      	mov	r3, r1
 8007154:	4313      	orrs	r3, r2
 8007156:	d009      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007158:	4b92      	ldr	r3, [pc, #584]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800715a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800715c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007166:	4a8f      	ldr	r2, [pc, #572]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007168:	430b      	orrs	r3, r1
 800716a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800716c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007178:	643b      	str	r3, [r7, #64]	@ 0x40
 800717a:	2300      	movs	r3, #0
 800717c:	647b      	str	r3, [r7, #68]	@ 0x44
 800717e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007182:	460b      	mov	r3, r1
 8007184:	4313      	orrs	r3, r2
 8007186:	d00e      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007188:	4b86      	ldr	r3, [pc, #536]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	4a85      	ldr	r2, [pc, #532]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800718e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007192:	6113      	str	r3, [r2, #16]
 8007194:	4b83      	ldr	r3, [pc, #524]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007196:	6919      	ldr	r1, [r3, #16]
 8007198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071a0:	4a80      	ldr	r2, [pc, #512]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071a2:	430b      	orrs	r3, r1
 80071a4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80071b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071b4:	2300      	movs	r3, #0
 80071b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071b8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80071bc:	460b      	mov	r3, r1
 80071be:	4313      	orrs	r3, r2
 80071c0:	d009      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80071c2:	4b78      	ldr	r3, [pc, #480]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80071ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d0:	4a74      	ldr	r2, [pc, #464]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071d2:	430b      	orrs	r3, r1
 80071d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80071d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80071e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80071e4:	2300      	movs	r3, #0
 80071e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071e8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80071ec:	460b      	mov	r3, r1
 80071ee:	4313      	orrs	r3, r2
 80071f0:	d00a      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80071f2:	4b6c      	ldr	r3, [pc, #432]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071f6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80071fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007202:	4a68      	ldr	r2, [pc, #416]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007204:	430b      	orrs	r3, r1
 8007206:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007210:	2100      	movs	r1, #0
 8007212:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800721a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800721e:	460b      	mov	r3, r1
 8007220:	4313      	orrs	r3, r2
 8007222:	d011      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007228:	3308      	adds	r3, #8
 800722a:	2100      	movs	r1, #0
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fb79 	bl	8007924 <RCCEx_PLL2_Config>
 8007232:	4603      	mov	r3, r0
 8007234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007238:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007240:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007244:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	2100      	movs	r1, #0
 8007252:	6239      	str	r1, [r7, #32]
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	627b      	str	r3, [r7, #36]	@ 0x24
 800725a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800725e:	460b      	mov	r3, r1
 8007260:	4313      	orrs	r3, r2
 8007262:	d011      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007268:	3308      	adds	r3, #8
 800726a:	2101      	movs	r1, #1
 800726c:	4618      	mov	r0, r3
 800726e:	f000 fb59 	bl	8007924 <RCCEx_PLL2_Config>
 8007272:	4603      	mov	r3, r0
 8007274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007278:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007284:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	2100      	movs	r1, #0
 8007292:	61b9      	str	r1, [r7, #24]
 8007294:	f003 0304 	and.w	r3, r3, #4
 8007298:	61fb      	str	r3, [r7, #28]
 800729a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800729e:	460b      	mov	r3, r1
 80072a0:	4313      	orrs	r3, r2
 80072a2:	d011      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a8:	3308      	adds	r3, #8
 80072aa:	2102      	movs	r1, #2
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 fb39 	bl	8007924 <RCCEx_PLL2_Config>
 80072b2:	4603      	mov	r3, r0
 80072b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80072b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80072c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	2100      	movs	r1, #0
 80072d2:	6139      	str	r1, [r7, #16]
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	617b      	str	r3, [r7, #20]
 80072da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80072de:	460b      	mov	r3, r1
 80072e0:	4313      	orrs	r3, r2
 80072e2:	d011      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e8:	3328      	adds	r3, #40	@ 0x28
 80072ea:	2100      	movs	r1, #0
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fbcb 	bl	8007a88 <RCCEx_PLL3_Config>
 80072f2:	4603      	mov	r3, r0
 80072f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80072f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007304:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	2100      	movs	r1, #0
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800731e:	460b      	mov	r3, r1
 8007320:	4313      	orrs	r3, r2
 8007322:	d011      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007328:	3328      	adds	r3, #40	@ 0x28
 800732a:	2101      	movs	r1, #1
 800732c:	4618      	mov	r0, r3
 800732e:	f000 fbab 	bl	8007a88 <RCCEx_PLL3_Config>
 8007332:	4603      	mov	r3, r0
 8007334:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007344:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	2100      	movs	r1, #0
 8007352:	6039      	str	r1, [r7, #0]
 8007354:	f003 0320 	and.w	r3, r3, #32
 8007358:	607b      	str	r3, [r7, #4]
 800735a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800735e:	460b      	mov	r3, r1
 8007360:	4313      	orrs	r3, r2
 8007362:	d011      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007368:	3328      	adds	r3, #40	@ 0x28
 800736a:	2102      	movs	r1, #2
 800736c:	4618      	mov	r0, r3
 800736e:	f000 fb8b 	bl	8007a88 <RCCEx_PLL3_Config>
 8007372:	4603      	mov	r3, r0
 8007374:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007378:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007384:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007388:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	e000      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
}
 8007396:	4618      	mov	r0, r3
 8007398:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800739c:	46bd      	mov	sp, r7
 800739e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073a2:	bf00      	nop
 80073a4:	58024400 	.word	0x58024400

080073a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80073ac:	f7fe fe00 	bl	8005fb0 <HAL_RCC_GetHCLKFreq>
 80073b0:	4602      	mov	r2, r0
 80073b2:	4b06      	ldr	r3, [pc, #24]	@ (80073cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	091b      	lsrs	r3, r3, #4
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	4904      	ldr	r1, [pc, #16]	@ (80073d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80073be:	5ccb      	ldrb	r3, [r1, r3]
 80073c0:	f003 031f 	and.w	r3, r3, #31
 80073c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	58024400 	.word	0x58024400
 80073d0:	08013150 	.word	0x08013150

080073d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b089      	sub	sp, #36	@ 0x24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073dc:	4ba1      	ldr	r3, [pc, #644]	@ (8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e0:	f003 0303 	and.w	r3, r3, #3
 80073e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80073e6:	4b9f      	ldr	r3, [pc, #636]	@ (8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ea:	0b1b      	lsrs	r3, r3, #12
 80073ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80073f2:	4b9c      	ldr	r3, [pc, #624]	@ (8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f6:	091b      	lsrs	r3, r3, #4
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80073fe:	4b99      	ldr	r3, [pc, #612]	@ (8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007402:	08db      	lsrs	r3, r3, #3
 8007404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	fb02 f303 	mul.w	r3, r2, r3
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007416:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 8111 	beq.w	8007644 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	2b02      	cmp	r3, #2
 8007426:	f000 8083 	beq.w	8007530 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	2b02      	cmp	r3, #2
 800742e:	f200 80a1 	bhi.w	8007574 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d003      	beq.n	8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d056      	beq.n	80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800743e:	e099      	b.n	8007574 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007440:	4b88      	ldr	r3, [pc, #544]	@ (8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	2b00      	cmp	r3, #0
 800744a:	d02d      	beq.n	80074a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800744c:	4b85      	ldr	r3, [pc, #532]	@ (8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	08db      	lsrs	r3, r3, #3
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	4a84      	ldr	r2, [pc, #528]	@ (8007668 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007458:	fa22 f303 	lsr.w	r3, r2, r3
 800745c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	ee07 3a90 	vmov	s15, r3
 8007464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007476:	4b7b      	ldr	r3, [pc, #492]	@ (8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007486:	ed97 6a03 	vldr	s12, [r7, #12]
 800748a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800766c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800748e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800749a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074a6:	e087      	b.n	80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80074b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ba:	4b6a      	ldr	r3, [pc, #424]	@ (8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800766c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ea:	e065      	b.n	80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80074fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fe:	4b59      	ldr	r3, [pc, #356]	@ (8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007512:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800766c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800751a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800752e:	e043      	b.n	80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007678 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800753e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007542:	4b48      	ldr	r3, [pc, #288]	@ (8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007552:	ed97 6a03 	vldr	s12, [r7, #12]
 8007556:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800766c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800755a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800756a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007572:	e021      	b.n	80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007586:	4b37      	ldr	r3, [pc, #220]	@ (8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007596:	ed97 6a03 	vldr	s12, [r7, #12]
 800759a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800766c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800759e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80075b8:	4b2a      	ldr	r3, [pc, #168]	@ (8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075bc:	0a5b      	lsrs	r3, r3, #9
 80075be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075c2:	ee07 3a90 	vmov	s15, r3
 80075c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075de:	ee17 2a90 	vmov	r2, s15
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80075e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ea:	0c1b      	lsrs	r3, r3, #16
 80075ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075f0:	ee07 3a90 	vmov	s15, r3
 80075f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007600:	edd7 6a07 	vldr	s13, [r7, #28]
 8007604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800760c:	ee17 2a90 	vmov	r2, s15
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007614:	4b13      	ldr	r3, [pc, #76]	@ (8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007618:	0e1b      	lsrs	r3, r3, #24
 800761a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007626:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800762a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800762e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800763a:	ee17 2a90 	vmov	r2, s15
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007642:	e008      	b.n	8007656 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	609a      	str	r2, [r3, #8]
}
 8007656:	bf00      	nop
 8007658:	3724      	adds	r7, #36	@ 0x24
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	58024400 	.word	0x58024400
 8007668:	03d09000 	.word	0x03d09000
 800766c:	46000000 	.word	0x46000000
 8007670:	4c742400 	.word	0x4c742400
 8007674:	4a742400 	.word	0x4a742400
 8007678:	4bbebc20 	.word	0x4bbebc20

0800767c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800767c:	b480      	push	{r7}
 800767e:	b089      	sub	sp, #36	@ 0x24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007684:	4ba1      	ldr	r3, [pc, #644]	@ (800790c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007688:	f003 0303 	and.w	r3, r3, #3
 800768c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800768e:	4b9f      	ldr	r3, [pc, #636]	@ (800790c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007692:	0d1b      	lsrs	r3, r3, #20
 8007694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007698:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800769a:	4b9c      	ldr	r3, [pc, #624]	@ (800790c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800769c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769e:	0a1b      	lsrs	r3, r3, #8
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80076a6:	4b99      	ldr	r3, [pc, #612]	@ (800790c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076aa:	08db      	lsrs	r3, r3, #3
 80076ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	fb02 f303 	mul.w	r3, r2, r3
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 8111 	beq.w	80078ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	f000 8083 	beq.w	80077d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	f200 80a1 	bhi.w	800781c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d056      	beq.n	8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80076e6:	e099      	b.n	800781c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076e8:	4b88      	ldr	r3, [pc, #544]	@ (800790c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0320 	and.w	r3, r3, #32
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d02d      	beq.n	8007750 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076f4:	4b85      	ldr	r3, [pc, #532]	@ (800790c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	08db      	lsrs	r3, r3, #3
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	4a84      	ldr	r2, [pc, #528]	@ (8007910 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007700:	fa22 f303 	lsr.w	r3, r2, r3
 8007704:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	ee07 3a90 	vmov	s15, r3
 800770c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	ee07 3a90 	vmov	s15, r3
 8007716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771e:	4b7b      	ldr	r3, [pc, #492]	@ (800790c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800772e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007732:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007914 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800773a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800774e:	e087      	b.n	8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800775e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007762:	4b6a      	ldr	r3, [pc, #424]	@ (800790c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007772:	ed97 6a03 	vldr	s12, [r7, #12]
 8007776:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007914 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800777a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800778a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007792:	e065      	b.n	8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	ee07 3a90 	vmov	s15, r3
 800779a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800791c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a6:	4b59      	ldr	r3, [pc, #356]	@ (800790c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007914 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077d6:	e043      	b.n	8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	ee07 3a90 	vmov	s15, r3
 80077de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007920 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80077e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ea:	4b48      	ldr	r3, [pc, #288]	@ (800790c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80077fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007914 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800780a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800780e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800781a:	e021      	b.n	8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007826:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800791c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800782a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800782e:	4b37      	ldr	r3, [pc, #220]	@ (800790c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007842:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007914 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800784a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800784e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800785a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800785e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007860:	4b2a      	ldr	r3, [pc, #168]	@ (800790c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007864:	0a5b      	lsrs	r3, r3, #9
 8007866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800786a:	ee07 3a90 	vmov	s15, r3
 800786e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007872:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800787a:	edd7 6a07 	vldr	s13, [r7, #28]
 800787e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007886:	ee17 2a90 	vmov	r2, s15
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800788e:	4b1f      	ldr	r3, [pc, #124]	@ (800790c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007892:	0c1b      	lsrs	r3, r3, #16
 8007894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007898:	ee07 3a90 	vmov	s15, r3
 800789c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80078ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078b4:	ee17 2a90 	vmov	r2, s15
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80078bc:	4b13      	ldr	r3, [pc, #76]	@ (800790c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c0:	0e1b      	lsrs	r3, r3, #24
 80078c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80078da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078e2:	ee17 2a90 	vmov	r2, s15
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80078ea:	e008      	b.n	80078fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	609a      	str	r2, [r3, #8]
}
 80078fe:	bf00      	nop
 8007900:	3724      	adds	r7, #36	@ 0x24
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	58024400 	.word	0x58024400
 8007910:	03d09000 	.word	0x03d09000
 8007914:	46000000 	.word	0x46000000
 8007918:	4c742400 	.word	0x4c742400
 800791c:	4a742400 	.word	0x4a742400
 8007920:	4bbebc20 	.word	0x4bbebc20

08007924 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007932:	4b53      	ldr	r3, [pc, #332]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007936:	f003 0303 	and.w	r3, r3, #3
 800793a:	2b03      	cmp	r3, #3
 800793c:	d101      	bne.n	8007942 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e099      	b.n	8007a76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007942:	4b4f      	ldr	r3, [pc, #316]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a4e      	ldr	r2, [pc, #312]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007948:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800794c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800794e:	f7fb f93d 	bl	8002bcc <HAL_GetTick>
 8007952:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007954:	e008      	b.n	8007968 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007956:	f7fb f939 	bl	8002bcc <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	2b02      	cmp	r3, #2
 8007962:	d901      	bls.n	8007968 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e086      	b.n	8007a76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007968:	4b45      	ldr	r3, [pc, #276]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1f0      	bne.n	8007956 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007974:	4b42      	ldr	r3, [pc, #264]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007978:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	031b      	lsls	r3, r3, #12
 8007982:	493f      	ldr	r1, [pc, #252]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007984:	4313      	orrs	r3, r2
 8007986:	628b      	str	r3, [r1, #40]	@ 0x28
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	3b01      	subs	r3, #1
 800798e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	3b01      	subs	r3, #1
 8007998:	025b      	lsls	r3, r3, #9
 800799a:	b29b      	uxth	r3, r3
 800799c:	431a      	orrs	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	041b      	lsls	r3, r3, #16
 80079a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80079aa:	431a      	orrs	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	061b      	lsls	r3, r3, #24
 80079b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80079b8:	4931      	ldr	r1, [pc, #196]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079be:	4b30      	ldr	r3, [pc, #192]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 80079c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	492d      	ldr	r1, [pc, #180]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80079d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 80079d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d4:	f023 0220 	bic.w	r2, r3, #32
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	4928      	ldr	r1, [pc, #160]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079e2:	4b27      	ldr	r3, [pc, #156]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 80079e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e6:	4a26      	ldr	r2, [pc, #152]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 80079e8:	f023 0310 	bic.w	r3, r3, #16
 80079ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80079ee:	4b24      	ldr	r3, [pc, #144]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 80079f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079f2:	4b24      	ldr	r3, [pc, #144]	@ (8007a84 <RCCEx_PLL2_Config+0x160>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	69d2      	ldr	r2, [r2, #28]
 80079fa:	00d2      	lsls	r2, r2, #3
 80079fc:	4920      	ldr	r1, [pc, #128]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a02:	4b1f      	ldr	r3, [pc, #124]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a06:	4a1e      	ldr	r2, [pc, #120]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007a08:	f043 0310 	orr.w	r3, r3, #16
 8007a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d106      	bne.n	8007a22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a14:	4b1a      	ldr	r3, [pc, #104]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a18:	4a19      	ldr	r2, [pc, #100]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007a1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a20:	e00f      	b.n	8007a42 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d106      	bne.n	8007a36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a28:	4b15      	ldr	r3, [pc, #84]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2c:	4a14      	ldr	r2, [pc, #80]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a34:	e005      	b.n	8007a42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a36:	4b12      	ldr	r3, [pc, #72]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3a:	4a11      	ldr	r2, [pc, #68]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007a3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a42:	4b0f      	ldr	r3, [pc, #60]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a0e      	ldr	r2, [pc, #56]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007a48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a4e:	f7fb f8bd 	bl	8002bcc <HAL_GetTick>
 8007a52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a54:	e008      	b.n	8007a68 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a56:	f7fb f8b9 	bl	8002bcc <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d901      	bls.n	8007a68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e006      	b.n	8007a76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a68:	4b05      	ldr	r3, [pc, #20]	@ (8007a80 <RCCEx_PLL2_Config+0x15c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d0f0      	beq.n	8007a56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	58024400 	.word	0x58024400
 8007a84:	ffff0007 	.word	0xffff0007

08007a88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a96:	4b53      	ldr	r3, [pc, #332]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d101      	bne.n	8007aa6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e099      	b.n	8007bda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007aa6:	4b4f      	ldr	r3, [pc, #316]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a4e      	ldr	r2, [pc, #312]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ab2:	f7fb f88b 	bl	8002bcc <HAL_GetTick>
 8007ab6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ab8:	e008      	b.n	8007acc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007aba:	f7fb f887 	bl	8002bcc <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d901      	bls.n	8007acc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e086      	b.n	8007bda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007acc:	4b45      	ldr	r3, [pc, #276]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1f0      	bne.n	8007aba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ad8:	4b42      	ldr	r3, [pc, #264]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007adc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	051b      	lsls	r3, r3, #20
 8007ae6:	493f      	ldr	r1, [pc, #252]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	628b      	str	r3, [r1, #40]	@ 0x28
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	025b      	lsls	r3, r3, #9
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	431a      	orrs	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	3b01      	subs	r3, #1
 8007b08:	041b      	lsls	r3, r3, #16
 8007b0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	061b      	lsls	r3, r3, #24
 8007b18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b1c:	4931      	ldr	r1, [pc, #196]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b22:	4b30      	ldr	r3, [pc, #192]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	492d      	ldr	r1, [pc, #180]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b34:	4b2b      	ldr	r3, [pc, #172]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b38:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	4928      	ldr	r1, [pc, #160]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b46:	4b27      	ldr	r3, [pc, #156]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4a:	4a26      	ldr	r2, [pc, #152]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b52:	4b24      	ldr	r3, [pc, #144]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b56:	4b24      	ldr	r3, [pc, #144]	@ (8007be8 <RCCEx_PLL3_Config+0x160>)
 8007b58:	4013      	ands	r3, r2
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	69d2      	ldr	r2, [r2, #28]
 8007b5e:	00d2      	lsls	r2, r2, #3
 8007b60:	4920      	ldr	r1, [pc, #128]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b66:	4b1f      	ldr	r3, [pc, #124]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d106      	bne.n	8007b86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b78:	4b1a      	ldr	r3, [pc, #104]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7c:	4a19      	ldr	r2, [pc, #100]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007b82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b84:	e00f      	b.n	8007ba6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d106      	bne.n	8007b9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b8c:	4b15      	ldr	r3, [pc, #84]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b90:	4a14      	ldr	r2, [pc, #80]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007b96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b98:	e005      	b.n	8007ba6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b9a:	4b12      	ldr	r3, [pc, #72]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9e:	4a11      	ldr	r2, [pc, #68]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007ba0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a0e      	ldr	r2, [pc, #56]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bb2:	f7fb f80b 	bl	8002bcc <HAL_GetTick>
 8007bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bb8:	e008      	b.n	8007bcc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bba:	f7fb f807 	bl	8002bcc <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d901      	bls.n	8007bcc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e006      	b.n	8007bda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bcc:	4b05      	ldr	r3, [pc, #20]	@ (8007be4 <RCCEx_PLL3_Config+0x15c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d0f0      	beq.n	8007bba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	58024400 	.word	0x58024400
 8007be8:	ffff0007 	.word	0xffff0007

08007bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e049      	b.n	8007c92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d106      	bne.n	8007c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7fa f844 	bl	8001ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	f000 fae4 	bl	80081f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d001      	beq.n	8007cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e05e      	b.n	8007d72 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68da      	ldr	r2, [r3, #12]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0201 	orr.w	r2, r2, #1
 8007cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8007d80 <HAL_TIM_Base_Start_IT+0xe4>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d02c      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x94>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cde:	d027      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x94>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a27      	ldr	r2, [pc, #156]	@ (8007d84 <HAL_TIM_Base_Start_IT+0xe8>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d022      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x94>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a26      	ldr	r2, [pc, #152]	@ (8007d88 <HAL_TIM_Base_Start_IT+0xec>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d01d      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x94>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a24      	ldr	r2, [pc, #144]	@ (8007d8c <HAL_TIM_Base_Start_IT+0xf0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d018      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x94>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a23      	ldr	r2, [pc, #140]	@ (8007d90 <HAL_TIM_Base_Start_IT+0xf4>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d013      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x94>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a21      	ldr	r2, [pc, #132]	@ (8007d94 <HAL_TIM_Base_Start_IT+0xf8>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00e      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x94>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a20      	ldr	r2, [pc, #128]	@ (8007d98 <HAL_TIM_Base_Start_IT+0xfc>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d009      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x94>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a1e      	ldr	r2, [pc, #120]	@ (8007d9c <HAL_TIM_Base_Start_IT+0x100>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d004      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x94>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8007da0 <HAL_TIM_Base_Start_IT+0x104>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d115      	bne.n	8007d5c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	4b1b      	ldr	r3, [pc, #108]	@ (8007da4 <HAL_TIM_Base_Start_IT+0x108>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2b06      	cmp	r3, #6
 8007d40:	d015      	beq.n	8007d6e <HAL_TIM_Base_Start_IT+0xd2>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d48:	d011      	beq.n	8007d6e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0201 	orr.w	r2, r2, #1
 8007d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d5a:	e008      	b.n	8007d6e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f042 0201 	orr.w	r2, r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	e000      	b.n	8007d70 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	40010000 	.word	0x40010000
 8007d84:	40000400 	.word	0x40000400
 8007d88:	40000800 	.word	0x40000800
 8007d8c:	40000c00 	.word	0x40000c00
 8007d90:	40010400 	.word	0x40010400
 8007d94:	40001800 	.word	0x40001800
 8007d98:	40014000 	.word	0x40014000
 8007d9c:	4000e000 	.word	0x4000e000
 8007da0:	4000e400 	.word	0x4000e400
 8007da4:	00010007 	.word	0x00010007

08007da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d020      	beq.n	8007e0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d01b      	beq.n	8007e0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f06f 0202 	mvn.w	r2, #2
 8007ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	f003 0303 	and.w	r3, r3, #3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f9e2 	bl	80081bc <HAL_TIM_IC_CaptureCallback>
 8007df8:	e005      	b.n	8007e06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f9d4 	bl	80081a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f9e5 	bl	80081d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f003 0304 	and.w	r3, r3, #4
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d020      	beq.n	8007e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f003 0304 	and.w	r3, r3, #4
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01b      	beq.n	8007e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f06f 0204 	mvn.w	r2, #4
 8007e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f9bc 	bl	80081bc <HAL_TIM_IC_CaptureCallback>
 8007e44:	e005      	b.n	8007e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f9ae 	bl	80081a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f9bf 	bl	80081d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	f003 0308 	and.w	r3, r3, #8
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d020      	beq.n	8007ea4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f003 0308 	and.w	r3, r3, #8
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01b      	beq.n	8007ea4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f06f 0208 	mvn.w	r2, #8
 8007e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2204      	movs	r2, #4
 8007e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f996 	bl	80081bc <HAL_TIM_IC_CaptureCallback>
 8007e90:	e005      	b.n	8007e9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f988 	bl	80081a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f999 	bl	80081d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f003 0310 	and.w	r3, r3, #16
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d020      	beq.n	8007ef0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f003 0310 	and.w	r3, r3, #16
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01b      	beq.n	8007ef0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f06f 0210 	mvn.w	r2, #16
 8007ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2208      	movs	r2, #8
 8007ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f970 	bl	80081bc <HAL_TIM_IC_CaptureCallback>
 8007edc:	e005      	b.n	8007eea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f962 	bl	80081a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f973 	bl	80081d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00c      	beq.n	8007f14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d007      	beq.n	8007f14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f06f 0201 	mvn.w	r2, #1
 8007f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7f9 fb4e 	bl	80015b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d104      	bne.n	8007f28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00c      	beq.n	8007f42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fb51 	bl	80085e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00c      	beq.n	8007f66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d007      	beq.n	8007f66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fb49 	bl	80085f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00c      	beq.n	8007f8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d007      	beq.n	8007f8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f92d 	bl	80081e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	f003 0320 	and.w	r3, r3, #32
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00c      	beq.n	8007fae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f003 0320 	and.w	r3, r3, #32
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d007      	beq.n	8007fae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f06f 0220 	mvn.w	r2, #32
 8007fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fb11 	bl	80085d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fae:	bf00      	nop
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d101      	bne.n	8007fd4 <HAL_TIM_ConfigClockSource+0x1c>
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	e0dc      	b.n	800818e <HAL_TIM_ConfigClockSource+0x1d6>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	4b6a      	ldr	r3, [pc, #424]	@ (8008198 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ffa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a64      	ldr	r2, [pc, #400]	@ (800819c <HAL_TIM_ConfigClockSource+0x1e4>)
 800800a:	4293      	cmp	r3, r2
 800800c:	f000 80a9 	beq.w	8008162 <HAL_TIM_ConfigClockSource+0x1aa>
 8008010:	4a62      	ldr	r2, [pc, #392]	@ (800819c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008012:	4293      	cmp	r3, r2
 8008014:	f200 80ae 	bhi.w	8008174 <HAL_TIM_ConfigClockSource+0x1bc>
 8008018:	4a61      	ldr	r2, [pc, #388]	@ (80081a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800801a:	4293      	cmp	r3, r2
 800801c:	f000 80a1 	beq.w	8008162 <HAL_TIM_ConfigClockSource+0x1aa>
 8008020:	4a5f      	ldr	r2, [pc, #380]	@ (80081a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008022:	4293      	cmp	r3, r2
 8008024:	f200 80a6 	bhi.w	8008174 <HAL_TIM_ConfigClockSource+0x1bc>
 8008028:	4a5e      	ldr	r2, [pc, #376]	@ (80081a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800802a:	4293      	cmp	r3, r2
 800802c:	f000 8099 	beq.w	8008162 <HAL_TIM_ConfigClockSource+0x1aa>
 8008030:	4a5c      	ldr	r2, [pc, #368]	@ (80081a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008032:	4293      	cmp	r3, r2
 8008034:	f200 809e 	bhi.w	8008174 <HAL_TIM_ConfigClockSource+0x1bc>
 8008038:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800803c:	f000 8091 	beq.w	8008162 <HAL_TIM_ConfigClockSource+0x1aa>
 8008040:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008044:	f200 8096 	bhi.w	8008174 <HAL_TIM_ConfigClockSource+0x1bc>
 8008048:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800804c:	f000 8089 	beq.w	8008162 <HAL_TIM_ConfigClockSource+0x1aa>
 8008050:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008054:	f200 808e 	bhi.w	8008174 <HAL_TIM_ConfigClockSource+0x1bc>
 8008058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800805c:	d03e      	beq.n	80080dc <HAL_TIM_ConfigClockSource+0x124>
 800805e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008062:	f200 8087 	bhi.w	8008174 <HAL_TIM_ConfigClockSource+0x1bc>
 8008066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800806a:	f000 8086 	beq.w	800817a <HAL_TIM_ConfigClockSource+0x1c2>
 800806e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008072:	d87f      	bhi.n	8008174 <HAL_TIM_ConfigClockSource+0x1bc>
 8008074:	2b70      	cmp	r3, #112	@ 0x70
 8008076:	d01a      	beq.n	80080ae <HAL_TIM_ConfigClockSource+0xf6>
 8008078:	2b70      	cmp	r3, #112	@ 0x70
 800807a:	d87b      	bhi.n	8008174 <HAL_TIM_ConfigClockSource+0x1bc>
 800807c:	2b60      	cmp	r3, #96	@ 0x60
 800807e:	d050      	beq.n	8008122 <HAL_TIM_ConfigClockSource+0x16a>
 8008080:	2b60      	cmp	r3, #96	@ 0x60
 8008082:	d877      	bhi.n	8008174 <HAL_TIM_ConfigClockSource+0x1bc>
 8008084:	2b50      	cmp	r3, #80	@ 0x50
 8008086:	d03c      	beq.n	8008102 <HAL_TIM_ConfigClockSource+0x14a>
 8008088:	2b50      	cmp	r3, #80	@ 0x50
 800808a:	d873      	bhi.n	8008174 <HAL_TIM_ConfigClockSource+0x1bc>
 800808c:	2b40      	cmp	r3, #64	@ 0x40
 800808e:	d058      	beq.n	8008142 <HAL_TIM_ConfigClockSource+0x18a>
 8008090:	2b40      	cmp	r3, #64	@ 0x40
 8008092:	d86f      	bhi.n	8008174 <HAL_TIM_ConfigClockSource+0x1bc>
 8008094:	2b30      	cmp	r3, #48	@ 0x30
 8008096:	d064      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x1aa>
 8008098:	2b30      	cmp	r3, #48	@ 0x30
 800809a:	d86b      	bhi.n	8008174 <HAL_TIM_ConfigClockSource+0x1bc>
 800809c:	2b20      	cmp	r3, #32
 800809e:	d060      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x1aa>
 80080a0:	2b20      	cmp	r3, #32
 80080a2:	d867      	bhi.n	8008174 <HAL_TIM_ConfigClockSource+0x1bc>
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d05c      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x1aa>
 80080a8:	2b10      	cmp	r3, #16
 80080aa:	d05a      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x1aa>
 80080ac:	e062      	b.n	8008174 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080be:	f000 f9cb 	bl	8008458 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80080d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	609a      	str	r2, [r3, #8]
      break;
 80080da:	e04f      	b.n	800817c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080ec:	f000 f9b4 	bl	8008458 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80080fe:	609a      	str	r2, [r3, #8]
      break;
 8008100:	e03c      	b.n	800817c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800810e:	461a      	mov	r2, r3
 8008110:	f000 f924 	bl	800835c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2150      	movs	r1, #80	@ 0x50
 800811a:	4618      	mov	r0, r3
 800811c:	f000 f97e 	bl	800841c <TIM_ITRx_SetConfig>
      break;
 8008120:	e02c      	b.n	800817c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800812e:	461a      	mov	r2, r3
 8008130:	f000 f943 	bl	80083ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2160      	movs	r1, #96	@ 0x60
 800813a:	4618      	mov	r0, r3
 800813c:	f000 f96e 	bl	800841c <TIM_ITRx_SetConfig>
      break;
 8008140:	e01c      	b.n	800817c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800814e:	461a      	mov	r2, r3
 8008150:	f000 f904 	bl	800835c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2140      	movs	r1, #64	@ 0x40
 800815a:	4618      	mov	r0, r3
 800815c:	f000 f95e 	bl	800841c <TIM_ITRx_SetConfig>
      break;
 8008160:	e00c      	b.n	800817c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4619      	mov	r1, r3
 800816c:	4610      	mov	r0, r2
 800816e:	f000 f955 	bl	800841c <TIM_ITRx_SetConfig>
      break;
 8008172:	e003      	b.n	800817c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	73fb      	strb	r3, [r7, #15]
      break;
 8008178:	e000      	b.n	800817c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800817a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800818c:	7bfb      	ldrb	r3, [r7, #15]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	ffceff88 	.word	0xffceff88
 800819c:	00100040 	.word	0x00100040
 80081a0:	00100030 	.word	0x00100030
 80081a4:	00100020 	.word	0x00100020

080081a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a4a      	ldr	r2, [pc, #296]	@ (8008334 <TIM_Base_SetConfig+0x13c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d013      	beq.n	8008238 <TIM_Base_SetConfig+0x40>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008216:	d00f      	beq.n	8008238 <TIM_Base_SetConfig+0x40>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a47      	ldr	r2, [pc, #284]	@ (8008338 <TIM_Base_SetConfig+0x140>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d00b      	beq.n	8008238 <TIM_Base_SetConfig+0x40>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a46      	ldr	r2, [pc, #280]	@ (800833c <TIM_Base_SetConfig+0x144>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d007      	beq.n	8008238 <TIM_Base_SetConfig+0x40>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a45      	ldr	r2, [pc, #276]	@ (8008340 <TIM_Base_SetConfig+0x148>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d003      	beq.n	8008238 <TIM_Base_SetConfig+0x40>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a44      	ldr	r2, [pc, #272]	@ (8008344 <TIM_Base_SetConfig+0x14c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d108      	bne.n	800824a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800823e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a39      	ldr	r2, [pc, #228]	@ (8008334 <TIM_Base_SetConfig+0x13c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d027      	beq.n	80082a2 <TIM_Base_SetConfig+0xaa>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008258:	d023      	beq.n	80082a2 <TIM_Base_SetConfig+0xaa>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a36      	ldr	r2, [pc, #216]	@ (8008338 <TIM_Base_SetConfig+0x140>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d01f      	beq.n	80082a2 <TIM_Base_SetConfig+0xaa>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a35      	ldr	r2, [pc, #212]	@ (800833c <TIM_Base_SetConfig+0x144>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d01b      	beq.n	80082a2 <TIM_Base_SetConfig+0xaa>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a34      	ldr	r2, [pc, #208]	@ (8008340 <TIM_Base_SetConfig+0x148>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d017      	beq.n	80082a2 <TIM_Base_SetConfig+0xaa>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a33      	ldr	r2, [pc, #204]	@ (8008344 <TIM_Base_SetConfig+0x14c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d013      	beq.n	80082a2 <TIM_Base_SetConfig+0xaa>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a32      	ldr	r2, [pc, #200]	@ (8008348 <TIM_Base_SetConfig+0x150>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d00f      	beq.n	80082a2 <TIM_Base_SetConfig+0xaa>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a31      	ldr	r2, [pc, #196]	@ (800834c <TIM_Base_SetConfig+0x154>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00b      	beq.n	80082a2 <TIM_Base_SetConfig+0xaa>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a30      	ldr	r2, [pc, #192]	@ (8008350 <TIM_Base_SetConfig+0x158>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d007      	beq.n	80082a2 <TIM_Base_SetConfig+0xaa>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a2f      	ldr	r2, [pc, #188]	@ (8008354 <TIM_Base_SetConfig+0x15c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d003      	beq.n	80082a2 <TIM_Base_SetConfig+0xaa>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a2e      	ldr	r2, [pc, #184]	@ (8008358 <TIM_Base_SetConfig+0x160>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d108      	bne.n	80082b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a16      	ldr	r2, [pc, #88]	@ (8008334 <TIM_Base_SetConfig+0x13c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00f      	beq.n	8008300 <TIM_Base_SetConfig+0x108>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a18      	ldr	r2, [pc, #96]	@ (8008344 <TIM_Base_SetConfig+0x14c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00b      	beq.n	8008300 <TIM_Base_SetConfig+0x108>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a17      	ldr	r2, [pc, #92]	@ (8008348 <TIM_Base_SetConfig+0x150>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d007      	beq.n	8008300 <TIM_Base_SetConfig+0x108>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a16      	ldr	r2, [pc, #88]	@ (800834c <TIM_Base_SetConfig+0x154>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d003      	beq.n	8008300 <TIM_Base_SetConfig+0x108>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a15      	ldr	r2, [pc, #84]	@ (8008350 <TIM_Base_SetConfig+0x158>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d103      	bne.n	8008308 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	691a      	ldr	r2, [r3, #16]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b01      	cmp	r3, #1
 8008318:	d105      	bne.n	8008326 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f023 0201 	bic.w	r2, r3, #1
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	611a      	str	r2, [r3, #16]
  }
}
 8008326:	bf00      	nop
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	40010000 	.word	0x40010000
 8008338:	40000400 	.word	0x40000400
 800833c:	40000800 	.word	0x40000800
 8008340:	40000c00 	.word	0x40000c00
 8008344:	40010400 	.word	0x40010400
 8008348:	40014000 	.word	0x40014000
 800834c:	40014400 	.word	0x40014400
 8008350:	40014800 	.word	0x40014800
 8008354:	4000e000 	.word	0x4000e000
 8008358:	4000e400 	.word	0x4000e400

0800835c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	f023 0201 	bic.w	r2, r3, #1
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	011b      	lsls	r3, r3, #4
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f023 030a 	bic.w	r3, r3, #10
 8008398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	4313      	orrs	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	621a      	str	r2, [r3, #32]
}
 80083ae:	bf00      	nop
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b087      	sub	sp, #28
 80083be:	af00      	add	r7, sp, #0
 80083c0:	60f8      	str	r0, [r7, #12]
 80083c2:	60b9      	str	r1, [r7, #8]
 80083c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	f023 0210 	bic.w	r2, r3, #16
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80083e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	031b      	lsls	r3, r3, #12
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80083f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	011b      	lsls	r3, r3, #4
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	4313      	orrs	r3, r2
 8008400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	621a      	str	r2, [r3, #32]
}
 800840e:	bf00      	nop
 8008410:	371c      	adds	r7, #28
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
	...

0800841c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	4b09      	ldr	r3, [pc, #36]	@ (8008454 <TIM_ITRx_SetConfig+0x38>)
 8008430:	4013      	ands	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4313      	orrs	r3, r2
 800843a:	f043 0307 	orr.w	r3, r3, #7
 800843e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	609a      	str	r2, [r3, #8]
}
 8008446:	bf00      	nop
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	ffcfff8f 	.word	0xffcfff8f

08008458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008472:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	021a      	lsls	r2, r3, #8
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	431a      	orrs	r2, r3
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	4313      	orrs	r3, r2
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	609a      	str	r2, [r3, #8]
}
 800848c:	bf00      	nop
 800848e:	371c      	adds	r7, #28
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d101      	bne.n	80084b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084ac:	2302      	movs	r3, #2
 80084ae:	e077      	b.n	80085a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a35      	ldr	r2, [pc, #212]	@ (80085ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d004      	beq.n	80084e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a34      	ldr	r2, [pc, #208]	@ (80085b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d108      	bne.n	80084f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80084ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	4313      	orrs	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a25      	ldr	r2, [pc, #148]	@ (80085ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d02c      	beq.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008522:	d027      	beq.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a22      	ldr	r2, [pc, #136]	@ (80085b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d022      	beq.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a21      	ldr	r2, [pc, #132]	@ (80085b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d01d      	beq.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a1f      	ldr	r2, [pc, #124]	@ (80085bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d018      	beq.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a1a      	ldr	r2, [pc, #104]	@ (80085b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d013      	beq.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a1b      	ldr	r2, [pc, #108]	@ (80085c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d00e      	beq.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a1a      	ldr	r2, [pc, #104]	@ (80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d009      	beq.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a18      	ldr	r2, [pc, #96]	@ (80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d004      	beq.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a17      	ldr	r2, [pc, #92]	@ (80085cc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d10c      	bne.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800857a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	4313      	orrs	r3, r2
 8008584:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	40010000 	.word	0x40010000
 80085b0:	40010400 	.word	0x40010400
 80085b4:	40000400 	.word	0x40000400
 80085b8:	40000800 	.word	0x40000800
 80085bc:	40000c00 	.word	0x40000c00
 80085c0:	40001800 	.word	0x40001800
 80085c4:	40014000 	.word	0x40014000
 80085c8:	4000e000 	.word	0x4000e000
 80085cc:	4000e400 	.word	0x4000e400

080085d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e042      	b.n	80086a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008624:	2b00      	cmp	r3, #0
 8008626:	d106      	bne.n	8008636 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7f9 fe7f 	bl	8002334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2224      	movs	r2, #36	@ 0x24
 800863a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f022 0201 	bic.w	r2, r2, #1
 800864c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f001 fc10 	bl	8009e7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fda1 	bl	80091a4 <UART_SetConfig>
 8008662:	4603      	mov	r3, r0
 8008664:	2b01      	cmp	r3, #1
 8008666:	d101      	bne.n	800866c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e01b      	b.n	80086a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800867a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	689a      	ldr	r2, [r3, #8]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800868a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f042 0201 	orr.w	r2, r2, #1
 800869a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f001 fc8f 	bl	8009fc0 <UART_CheckIdleState>
 80086a2:	4603      	mov	r3, r0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08a      	sub	sp, #40	@ 0x28
 80086b0:	af02      	add	r7, sp, #8
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	603b      	str	r3, [r7, #0]
 80086b8:	4613      	mov	r3, r2
 80086ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086c2:	2b20      	cmp	r3, #32
 80086c4:	d17b      	bne.n	80087be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <HAL_UART_Transmit+0x26>
 80086cc:	88fb      	ldrh	r3, [r7, #6]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e074      	b.n	80087c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2221      	movs	r2, #33	@ 0x21
 80086e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086e6:	f7fa fa71 	bl	8002bcc <HAL_GetTick>
 80086ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	88fa      	ldrh	r2, [r7, #6]
 80086f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	88fa      	ldrh	r2, [r7, #6]
 80086f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008704:	d108      	bne.n	8008718 <HAL_UART_Transmit+0x6c>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d104      	bne.n	8008718 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800870e:	2300      	movs	r3, #0
 8008710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	61bb      	str	r3, [r7, #24]
 8008716:	e003      	b.n	8008720 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800871c:	2300      	movs	r3, #0
 800871e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008720:	e030      	b.n	8008784 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2200      	movs	r2, #0
 800872a:	2180      	movs	r1, #128	@ 0x80
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f001 fcf1 	bl	800a114 <UART_WaitOnFlagUntilTimeout>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d005      	beq.n	8008744 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2220      	movs	r2, #32
 800873c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e03d      	b.n	80087c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10b      	bne.n	8008762 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008758:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	3302      	adds	r3, #2
 800875e:	61bb      	str	r3, [r7, #24]
 8008760:	e007      	b.n	8008772 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	781a      	ldrb	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	3301      	adds	r3, #1
 8008770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008778:	b29b      	uxth	r3, r3
 800877a:	3b01      	subs	r3, #1
 800877c:	b29a      	uxth	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800878a:	b29b      	uxth	r3, r3
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1c8      	bne.n	8008722 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	2200      	movs	r2, #0
 8008798:	2140      	movs	r1, #64	@ 0x40
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f001 fcba 	bl	800a114 <UART_WaitOnFlagUntilTimeout>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d005      	beq.n	80087b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2220      	movs	r2, #32
 80087aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e006      	b.n	80087c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2220      	movs	r2, #32
 80087b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	e000      	b.n	80087c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80087be:	2302      	movs	r3, #2
  }
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3720      	adds	r7, #32
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08a      	sub	sp, #40	@ 0x28
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	4613      	mov	r3, r2
 80087d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087de:	2b20      	cmp	r3, #32
 80087e0:	f040 80b5 	bne.w	800894e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d002      	beq.n	80087f0 <HAL_UART_Receive+0x28>
 80087ea:	88fb      	ldrh	r3, [r7, #6]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e0ad      	b.n	8008950 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2222      	movs	r2, #34	@ 0x22
 8008800:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800880a:	f7fa f9df 	bl	8002bcc <HAL_GetTick>
 800880e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	88fa      	ldrh	r2, [r7, #6]
 8008814:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	88fa      	ldrh	r2, [r7, #6]
 800881c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008828:	d10e      	bne.n	8008848 <HAL_UART_Receive+0x80>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d105      	bne.n	800883e <HAL_UART_Receive+0x76>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008838:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800883c:	e02d      	b.n	800889a <HAL_UART_Receive+0xd2>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	22ff      	movs	r2, #255	@ 0xff
 8008842:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008846:	e028      	b.n	800889a <HAL_UART_Receive+0xd2>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10d      	bne.n	800886c <HAL_UART_Receive+0xa4>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d104      	bne.n	8008862 <HAL_UART_Receive+0x9a>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	22ff      	movs	r2, #255	@ 0xff
 800885c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008860:	e01b      	b.n	800889a <HAL_UART_Receive+0xd2>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	227f      	movs	r2, #127	@ 0x7f
 8008866:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800886a:	e016      	b.n	800889a <HAL_UART_Receive+0xd2>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008874:	d10d      	bne.n	8008892 <HAL_UART_Receive+0xca>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d104      	bne.n	8008888 <HAL_UART_Receive+0xc0>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	227f      	movs	r2, #127	@ 0x7f
 8008882:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008886:	e008      	b.n	800889a <HAL_UART_Receive+0xd2>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	223f      	movs	r2, #63	@ 0x3f
 800888c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008890:	e003      	b.n	800889a <HAL_UART_Receive+0xd2>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80088a0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088aa:	d108      	bne.n	80088be <HAL_UART_Receive+0xf6>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d104      	bne.n	80088be <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80088b4:	2300      	movs	r3, #0
 80088b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	61bb      	str	r3, [r7, #24]
 80088bc:	e003      	b.n	80088c6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80088c6:	e036      	b.n	8008936 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2200      	movs	r2, #0
 80088d0:	2120      	movs	r1, #32
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f001 fc1e 	bl	800a114 <UART_WaitOnFlagUntilTimeout>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d005      	beq.n	80088ea <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e032      	b.n	8008950 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10c      	bne.n	800890a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	8a7b      	ldrh	r3, [r7, #18]
 80088fa:	4013      	ands	r3, r2
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	3302      	adds	r3, #2
 8008906:	61bb      	str	r3, [r7, #24]
 8008908:	e00c      	b.n	8008924 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008910:	b2da      	uxtb	r2, r3
 8008912:	8a7b      	ldrh	r3, [r7, #18]
 8008914:	b2db      	uxtb	r3, r3
 8008916:	4013      	ands	r3, r2
 8008918:	b2da      	uxtb	r2, r3
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	3301      	adds	r3, #1
 8008922:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800892a:	b29b      	uxth	r3, r3
 800892c:	3b01      	subs	r3, #1
 800892e:	b29a      	uxth	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800893c:	b29b      	uxth	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1c2      	bne.n	80088c8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2220      	movs	r2, #32
 8008946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	e000      	b.n	8008950 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800894e:	2302      	movs	r3, #2
  }
}
 8008950:	4618      	mov	r0, r3
 8008952:	3720      	adds	r7, #32
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b08a      	sub	sp, #40	@ 0x28
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	4613      	mov	r3, r2
 8008964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800896c:	2b20      	cmp	r3, #32
 800896e:	d137      	bne.n	80089e0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <HAL_UART_Receive_IT+0x24>
 8008976:	88fb      	ldrh	r3, [r7, #6]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e030      	b.n	80089e2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a18      	ldr	r2, [pc, #96]	@ (80089ec <HAL_UART_Receive_IT+0x94>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d01f      	beq.n	80089d0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d018      	beq.n	80089d0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	613b      	str	r3, [r7, #16]
   return(result);
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	461a      	mov	r2, r3
 80089ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089bc:	623b      	str	r3, [r7, #32]
 80089be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	69f9      	ldr	r1, [r7, #28]
 80089c2:	6a3a      	ldr	r2, [r7, #32]
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e6      	bne.n	800899e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80089d0:	88fb      	ldrh	r3, [r7, #6]
 80089d2:	461a      	mov	r2, r3
 80089d4:	68b9      	ldr	r1, [r7, #8]
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f001 fc0a 	bl	800a1f0 <UART_Start_Receive_IT>
 80089dc:	4603      	mov	r3, r0
 80089de:	e000      	b.n	80089e2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089e0:	2302      	movs	r3, #2
  }
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3728      	adds	r7, #40	@ 0x28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	58000c00 	.word	0x58000c00

080089f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b0ba      	sub	sp, #232	@ 0xe8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a1a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a1e:	4013      	ands	r3, r2
 8008a20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d11b      	bne.n	8008a64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a30:	f003 0320 	and.w	r3, r3, #32
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d015      	beq.n	8008a64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a3c:	f003 0320 	and.w	r3, r3, #32
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d105      	bne.n	8008a50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d009      	beq.n	8008a64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 8377 	beq.w	8009148 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	4798      	blx	r3
      }
      return;
 8008a62:	e371      	b.n	8009148 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 8123 	beq.w	8008cb4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008a6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008a72:	4b8d      	ldr	r3, [pc, #564]	@ (8008ca8 <HAL_UART_IRQHandler+0x2b8>)
 8008a74:	4013      	ands	r3, r2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d106      	bne.n	8008a88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008a7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008a7e:	4b8b      	ldr	r3, [pc, #556]	@ (8008cac <HAL_UART_IRQHandler+0x2bc>)
 8008a80:	4013      	ands	r3, r2
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 8116 	beq.w	8008cb4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a8c:	f003 0301 	and.w	r3, r3, #1
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d011      	beq.n	8008ab8 <HAL_UART_IRQHandler+0xc8>
 8008a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00b      	beq.n	8008ab8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aae:	f043 0201 	orr.w	r2, r3, #1
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008abc:	f003 0302 	and.w	r3, r3, #2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d011      	beq.n	8008ae8 <HAL_UART_IRQHandler+0xf8>
 8008ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00b      	beq.n	8008ae8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ade:	f043 0204 	orr.w	r2, r3, #4
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d011      	beq.n	8008b18 <HAL_UART_IRQHandler+0x128>
 8008af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00b      	beq.n	8008b18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2204      	movs	r2, #4
 8008b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b0e:	f043 0202 	orr.w	r2, r3, #2
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b1c:	f003 0308 	and.w	r3, r3, #8
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d017      	beq.n	8008b54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b28:	f003 0320 	and.w	r3, r3, #32
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d105      	bne.n	8008b3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008b30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008b34:	4b5c      	ldr	r3, [pc, #368]	@ (8008ca8 <HAL_UART_IRQHandler+0x2b8>)
 8008b36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00b      	beq.n	8008b54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2208      	movs	r2, #8
 8008b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b4a:	f043 0208 	orr.w	r2, r3, #8
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d012      	beq.n	8008b86 <HAL_UART_IRQHandler+0x196>
 8008b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00c      	beq.n	8008b86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b7c:	f043 0220 	orr.w	r2, r3, #32
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 82dd 	beq.w	800914c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b96:	f003 0320 	and.w	r3, r3, #32
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d013      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ba2:	f003 0320 	and.w	r3, r3, #32
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d105      	bne.n	8008bb6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d007      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d003      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bda:	2b40      	cmp	r3, #64	@ 0x40
 8008bdc:	d005      	beq.n	8008bea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008be2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d054      	beq.n	8008c94 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f001 fc22 	bl	800a434 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bfa:	2b40      	cmp	r3, #64	@ 0x40
 8008bfc:	d146      	bne.n	8008c8c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3308      	adds	r3, #8
 8008c04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c0c:	e853 3f00 	ldrex	r3, [r3]
 8008c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3308      	adds	r3, #8
 8008c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c3a:	e841 2300 	strex	r3, r2, [r1]
 8008c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1d9      	bne.n	8008bfe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d017      	beq.n	8008c84 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c5a:	4a15      	ldr	r2, [pc, #84]	@ (8008cb0 <HAL_UART_IRQHandler+0x2c0>)
 8008c5c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fa fc87 	bl	8003578 <HAL_DMA_Abort_IT>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d019      	beq.n	8008ca4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008c7e:	4610      	mov	r0, r2
 8008c80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c82:	e00f      	b.n	8008ca4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fa77 	bl	8009178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c8a:	e00b      	b.n	8008ca4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fa73 	bl	8009178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c92:	e007      	b.n	8008ca4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fa6f 	bl	8009178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008ca2:	e253      	b.n	800914c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca4:	bf00      	nop
    return;
 8008ca6:	e251      	b.n	800914c <HAL_UART_IRQHandler+0x75c>
 8008ca8:	10000001 	.word	0x10000001
 8008cac:	04000120 	.word	0x04000120
 8008cb0:	0800a501 	.word	0x0800a501

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	f040 81e7 	bne.w	800908c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cc2:	f003 0310 	and.w	r3, r3, #16
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f000 81e0 	beq.w	800908c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cd0:	f003 0310 	and.w	r3, r3, #16
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 81d9 	beq.w	800908c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2210      	movs	r2, #16
 8008ce0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cec:	2b40      	cmp	r3, #64	@ 0x40
 8008cee:	f040 8151 	bne.w	8008f94 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a96      	ldr	r2, [pc, #600]	@ (8008f54 <HAL_UART_IRQHandler+0x564>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d068      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x3e2>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a93      	ldr	r2, [pc, #588]	@ (8008f58 <HAL_UART_IRQHandler+0x568>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d061      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x3e2>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a91      	ldr	r2, [pc, #580]	@ (8008f5c <HAL_UART_IRQHandler+0x56c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d05a      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x3e2>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a8e      	ldr	r2, [pc, #568]	@ (8008f60 <HAL_UART_IRQHandler+0x570>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d053      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x3e2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a8c      	ldr	r2, [pc, #560]	@ (8008f64 <HAL_UART_IRQHandler+0x574>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d04c      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x3e2>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a89      	ldr	r2, [pc, #548]	@ (8008f68 <HAL_UART_IRQHandler+0x578>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d045      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x3e2>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a87      	ldr	r2, [pc, #540]	@ (8008f6c <HAL_UART_IRQHandler+0x57c>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d03e      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x3e2>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a84      	ldr	r2, [pc, #528]	@ (8008f70 <HAL_UART_IRQHandler+0x580>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d037      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x3e2>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a82      	ldr	r2, [pc, #520]	@ (8008f74 <HAL_UART_IRQHandler+0x584>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d030      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x3e2>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a7f      	ldr	r2, [pc, #508]	@ (8008f78 <HAL_UART_IRQHandler+0x588>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d029      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x3e2>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a7d      	ldr	r2, [pc, #500]	@ (8008f7c <HAL_UART_IRQHandler+0x58c>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d022      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x3e2>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a7a      	ldr	r2, [pc, #488]	@ (8008f80 <HAL_UART_IRQHandler+0x590>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d01b      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x3e2>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a78      	ldr	r2, [pc, #480]	@ (8008f84 <HAL_UART_IRQHandler+0x594>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d014      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x3e2>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a75      	ldr	r2, [pc, #468]	@ (8008f88 <HAL_UART_IRQHandler+0x598>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d00d      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x3e2>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a73      	ldr	r2, [pc, #460]	@ (8008f8c <HAL_UART_IRQHandler+0x59c>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d006      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x3e2>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a70      	ldr	r2, [pc, #448]	@ (8008f90 <HAL_UART_IRQHandler+0x5a0>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d106      	bne.n	8008de0 <HAL_UART_IRQHandler+0x3f0>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	e005      	b.n	8008dec <HAL_UART_IRQHandler+0x3fc>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008df0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 81ab 	beq.w	8009150 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e04:	429a      	cmp	r2, r3
 8008e06:	f080 81a3 	bcs.w	8009150 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e1a:	69db      	ldr	r3, [r3, #28]
 8008e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e20:	f000 8087 	beq.w	8008f32 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e30:	e853 3f00 	ldrex	r3, [r3]
 8008e34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e5e:	e841 2300 	strex	r3, r2, [r1]
 8008e62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1da      	bne.n	8008e24 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3308      	adds	r3, #8
 8008e74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e80:	f023 0301 	bic.w	r3, r3, #1
 8008e84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e9e:	e841 2300 	strex	r3, r2, [r1]
 8008ea2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ea4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1e1      	bne.n	8008e6e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3308      	adds	r3, #8
 8008eb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008eb4:	e853 3f00 	ldrex	r3, [r3]
 8008eb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008eba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ebc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3308      	adds	r3, #8
 8008eca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ece:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ed4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008edc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e3      	bne.n	8008eaa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ef8:	e853 3f00 	ldrex	r3, [r3]
 8008efc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f00:	f023 0310 	bic.w	r3, r3, #16
 8008f04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f1a:	e841 2300 	strex	r3, r2, [r1]
 8008f1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1e4      	bne.n	8008ef0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fa f805 	bl	8002f3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2202      	movs	r2, #2
 8008f36:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f91d 	bl	800918c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f52:	e0fd      	b.n	8009150 <HAL_UART_IRQHandler+0x760>
 8008f54:	40020010 	.word	0x40020010
 8008f58:	40020028 	.word	0x40020028
 8008f5c:	40020040 	.word	0x40020040
 8008f60:	40020058 	.word	0x40020058
 8008f64:	40020070 	.word	0x40020070
 8008f68:	40020088 	.word	0x40020088
 8008f6c:	400200a0 	.word	0x400200a0
 8008f70:	400200b8 	.word	0x400200b8
 8008f74:	40020410 	.word	0x40020410
 8008f78:	40020428 	.word	0x40020428
 8008f7c:	40020440 	.word	0x40020440
 8008f80:	40020458 	.word	0x40020458
 8008f84:	40020470 	.word	0x40020470
 8008f88:	40020488 	.word	0x40020488
 8008f8c:	400204a0 	.word	0x400204a0
 8008f90:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	1ad3      	subs	r3, r2, r3
 8008fa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 80cf 	beq.w	8009154 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008fb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f000 80ca 	beq.w	8009154 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc8:	e853 3f00 	ldrex	r3, [r3]
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008fe2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fe4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fe8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fea:	e841 2300 	strex	r3, r2, [r1]
 8008fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1e4      	bne.n	8008fc0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009000:	e853 3f00 	ldrex	r3, [r3]
 8009004:	623b      	str	r3, [r7, #32]
   return(result);
 8009006:	6a3a      	ldr	r2, [r7, #32]
 8009008:	4b55      	ldr	r3, [pc, #340]	@ (8009160 <HAL_UART_IRQHandler+0x770>)
 800900a:	4013      	ands	r3, r2
 800900c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3308      	adds	r3, #8
 8009016:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800901a:	633a      	str	r2, [r7, #48]	@ 0x30
 800901c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009022:	e841 2300 	strex	r3, r2, [r1]
 8009026:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1e3      	bne.n	8008ff6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2220      	movs	r2, #32
 8009032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	e853 3f00 	ldrex	r3, [r3]
 800904e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f023 0310 	bic.w	r3, r3, #16
 8009056:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009064:	61fb      	str	r3, [r7, #28]
 8009066:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009068:	69b9      	ldr	r1, [r7, #24]
 800906a:	69fa      	ldr	r2, [r7, #28]
 800906c:	e841 2300 	strex	r3, r2, [r1]
 8009070:	617b      	str	r3, [r7, #20]
   return(result);
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1e4      	bne.n	8009042 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2202      	movs	r2, #2
 800907c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800907e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f881 	bl	800918c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800908a:	e063      	b.n	8009154 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800908c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009090:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00e      	beq.n	80090b6 <HAL_UART_IRQHandler+0x6c6>
 8009098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800909c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d008      	beq.n	80090b6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80090ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 ff84 	bl	800afbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090b4:	e051      	b.n	800915a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80090b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d014      	beq.n	80090ec <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80090c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d105      	bne.n	80090da <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80090ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d008      	beq.n	80090ec <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d03a      	beq.n	8009158 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	4798      	blx	r3
    }
    return;
 80090ea:	e035      	b.n	8009158 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80090ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d009      	beq.n	800910c <HAL_UART_IRQHandler+0x71c>
 80090f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009100:	2b00      	cmp	r3, #0
 8009102:	d003      	beq.n	800910c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f001 fa11 	bl	800a52c <UART_EndTransmit_IT>
    return;
 800910a:	e026      	b.n	800915a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800910c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009110:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d009      	beq.n	800912c <HAL_UART_IRQHandler+0x73c>
 8009118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800911c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d003      	beq.n	800912c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 ff5d 	bl	800afe4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800912a:	e016      	b.n	800915a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800912c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d010      	beq.n	800915a <HAL_UART_IRQHandler+0x76a>
 8009138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800913c:	2b00      	cmp	r3, #0
 800913e:	da0c      	bge.n	800915a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 ff45 	bl	800afd0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009146:	e008      	b.n	800915a <HAL_UART_IRQHandler+0x76a>
      return;
 8009148:	bf00      	nop
 800914a:	e006      	b.n	800915a <HAL_UART_IRQHandler+0x76a>
    return;
 800914c:	bf00      	nop
 800914e:	e004      	b.n	800915a <HAL_UART_IRQHandler+0x76a>
      return;
 8009150:	bf00      	nop
 8009152:	e002      	b.n	800915a <HAL_UART_IRQHandler+0x76a>
      return;
 8009154:	bf00      	nop
 8009156:	e000      	b.n	800915a <HAL_UART_IRQHandler+0x76a>
    return;
 8009158:	bf00      	nop
  }
}
 800915a:	37e8      	adds	r7, #232	@ 0xe8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	effffffe 	.word	0xeffffffe

08009164 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091a8:	b092      	sub	sp, #72	@ 0x48
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	431a      	orrs	r2, r3
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	431a      	orrs	r2, r3
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	4bbe      	ldr	r3, [pc, #760]	@ (80094cc <UART_SetConfig+0x328>)
 80091d4:	4013      	ands	r3, r2
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	6812      	ldr	r2, [r2, #0]
 80091da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80091dc:	430b      	orrs	r3, r1
 80091de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	68da      	ldr	r2, [r3, #12]
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4ab3      	ldr	r2, [pc, #716]	@ (80094d0 <UART_SetConfig+0x32c>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d004      	beq.n	8009210 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800920c:	4313      	orrs	r3, r2
 800920e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689a      	ldr	r2, [r3, #8]
 8009216:	4baf      	ldr	r3, [pc, #700]	@ (80094d4 <UART_SetConfig+0x330>)
 8009218:	4013      	ands	r3, r2
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	6812      	ldr	r2, [r2, #0]
 800921e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009220:	430b      	orrs	r3, r1
 8009222:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922a:	f023 010f 	bic.w	r1, r3, #15
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	430a      	orrs	r2, r1
 8009238:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4aa6      	ldr	r2, [pc, #664]	@ (80094d8 <UART_SetConfig+0x334>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d177      	bne.n	8009334 <UART_SetConfig+0x190>
 8009244:	4ba5      	ldr	r3, [pc, #660]	@ (80094dc <UART_SetConfig+0x338>)
 8009246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009248:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800924c:	2b28      	cmp	r3, #40	@ 0x28
 800924e:	d86d      	bhi.n	800932c <UART_SetConfig+0x188>
 8009250:	a201      	add	r2, pc, #4	@ (adr r2, 8009258 <UART_SetConfig+0xb4>)
 8009252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009256:	bf00      	nop
 8009258:	080092fd 	.word	0x080092fd
 800925c:	0800932d 	.word	0x0800932d
 8009260:	0800932d 	.word	0x0800932d
 8009264:	0800932d 	.word	0x0800932d
 8009268:	0800932d 	.word	0x0800932d
 800926c:	0800932d 	.word	0x0800932d
 8009270:	0800932d 	.word	0x0800932d
 8009274:	0800932d 	.word	0x0800932d
 8009278:	08009305 	.word	0x08009305
 800927c:	0800932d 	.word	0x0800932d
 8009280:	0800932d 	.word	0x0800932d
 8009284:	0800932d 	.word	0x0800932d
 8009288:	0800932d 	.word	0x0800932d
 800928c:	0800932d 	.word	0x0800932d
 8009290:	0800932d 	.word	0x0800932d
 8009294:	0800932d 	.word	0x0800932d
 8009298:	0800930d 	.word	0x0800930d
 800929c:	0800932d 	.word	0x0800932d
 80092a0:	0800932d 	.word	0x0800932d
 80092a4:	0800932d 	.word	0x0800932d
 80092a8:	0800932d 	.word	0x0800932d
 80092ac:	0800932d 	.word	0x0800932d
 80092b0:	0800932d 	.word	0x0800932d
 80092b4:	0800932d 	.word	0x0800932d
 80092b8:	08009315 	.word	0x08009315
 80092bc:	0800932d 	.word	0x0800932d
 80092c0:	0800932d 	.word	0x0800932d
 80092c4:	0800932d 	.word	0x0800932d
 80092c8:	0800932d 	.word	0x0800932d
 80092cc:	0800932d 	.word	0x0800932d
 80092d0:	0800932d 	.word	0x0800932d
 80092d4:	0800932d 	.word	0x0800932d
 80092d8:	0800931d 	.word	0x0800931d
 80092dc:	0800932d 	.word	0x0800932d
 80092e0:	0800932d 	.word	0x0800932d
 80092e4:	0800932d 	.word	0x0800932d
 80092e8:	0800932d 	.word	0x0800932d
 80092ec:	0800932d 	.word	0x0800932d
 80092f0:	0800932d 	.word	0x0800932d
 80092f4:	0800932d 	.word	0x0800932d
 80092f8:	08009325 	.word	0x08009325
 80092fc:	2301      	movs	r3, #1
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009302:	e326      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009304:	2304      	movs	r3, #4
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930a:	e322      	b.n	8009952 <UART_SetConfig+0x7ae>
 800930c:	2308      	movs	r3, #8
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009312:	e31e      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009314:	2310      	movs	r3, #16
 8009316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800931a:	e31a      	b.n	8009952 <UART_SetConfig+0x7ae>
 800931c:	2320      	movs	r3, #32
 800931e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009322:	e316      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009324:	2340      	movs	r3, #64	@ 0x40
 8009326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932a:	e312      	b.n	8009952 <UART_SetConfig+0x7ae>
 800932c:	2380      	movs	r3, #128	@ 0x80
 800932e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009332:	e30e      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a69      	ldr	r2, [pc, #420]	@ (80094e0 <UART_SetConfig+0x33c>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d130      	bne.n	80093a0 <UART_SetConfig+0x1fc>
 800933e:	4b67      	ldr	r3, [pc, #412]	@ (80094dc <UART_SetConfig+0x338>)
 8009340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009342:	f003 0307 	and.w	r3, r3, #7
 8009346:	2b05      	cmp	r3, #5
 8009348:	d826      	bhi.n	8009398 <UART_SetConfig+0x1f4>
 800934a:	a201      	add	r2, pc, #4	@ (adr r2, 8009350 <UART_SetConfig+0x1ac>)
 800934c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009350:	08009369 	.word	0x08009369
 8009354:	08009371 	.word	0x08009371
 8009358:	08009379 	.word	0x08009379
 800935c:	08009381 	.word	0x08009381
 8009360:	08009389 	.word	0x08009389
 8009364:	08009391 	.word	0x08009391
 8009368:	2300      	movs	r3, #0
 800936a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936e:	e2f0      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009370:	2304      	movs	r3, #4
 8009372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009376:	e2ec      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009378:	2308      	movs	r3, #8
 800937a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937e:	e2e8      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009380:	2310      	movs	r3, #16
 8009382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009386:	e2e4      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009388:	2320      	movs	r3, #32
 800938a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938e:	e2e0      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009390:	2340      	movs	r3, #64	@ 0x40
 8009392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009396:	e2dc      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009398:	2380      	movs	r3, #128	@ 0x80
 800939a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939e:	e2d8      	b.n	8009952 <UART_SetConfig+0x7ae>
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a4f      	ldr	r2, [pc, #316]	@ (80094e4 <UART_SetConfig+0x340>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d130      	bne.n	800940c <UART_SetConfig+0x268>
 80093aa:	4b4c      	ldr	r3, [pc, #304]	@ (80094dc <UART_SetConfig+0x338>)
 80093ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	2b05      	cmp	r3, #5
 80093b4:	d826      	bhi.n	8009404 <UART_SetConfig+0x260>
 80093b6:	a201      	add	r2, pc, #4	@ (adr r2, 80093bc <UART_SetConfig+0x218>)
 80093b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093bc:	080093d5 	.word	0x080093d5
 80093c0:	080093dd 	.word	0x080093dd
 80093c4:	080093e5 	.word	0x080093e5
 80093c8:	080093ed 	.word	0x080093ed
 80093cc:	080093f5 	.word	0x080093f5
 80093d0:	080093fd 	.word	0x080093fd
 80093d4:	2300      	movs	r3, #0
 80093d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093da:	e2ba      	b.n	8009952 <UART_SetConfig+0x7ae>
 80093dc:	2304      	movs	r3, #4
 80093de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e2:	e2b6      	b.n	8009952 <UART_SetConfig+0x7ae>
 80093e4:	2308      	movs	r3, #8
 80093e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ea:	e2b2      	b.n	8009952 <UART_SetConfig+0x7ae>
 80093ec:	2310      	movs	r3, #16
 80093ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f2:	e2ae      	b.n	8009952 <UART_SetConfig+0x7ae>
 80093f4:	2320      	movs	r3, #32
 80093f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fa:	e2aa      	b.n	8009952 <UART_SetConfig+0x7ae>
 80093fc:	2340      	movs	r3, #64	@ 0x40
 80093fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009402:	e2a6      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009404:	2380      	movs	r3, #128	@ 0x80
 8009406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940a:	e2a2      	b.n	8009952 <UART_SetConfig+0x7ae>
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a35      	ldr	r2, [pc, #212]	@ (80094e8 <UART_SetConfig+0x344>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d130      	bne.n	8009478 <UART_SetConfig+0x2d4>
 8009416:	4b31      	ldr	r3, [pc, #196]	@ (80094dc <UART_SetConfig+0x338>)
 8009418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800941a:	f003 0307 	and.w	r3, r3, #7
 800941e:	2b05      	cmp	r3, #5
 8009420:	d826      	bhi.n	8009470 <UART_SetConfig+0x2cc>
 8009422:	a201      	add	r2, pc, #4	@ (adr r2, 8009428 <UART_SetConfig+0x284>)
 8009424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009428:	08009441 	.word	0x08009441
 800942c:	08009449 	.word	0x08009449
 8009430:	08009451 	.word	0x08009451
 8009434:	08009459 	.word	0x08009459
 8009438:	08009461 	.word	0x08009461
 800943c:	08009469 	.word	0x08009469
 8009440:	2300      	movs	r3, #0
 8009442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009446:	e284      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009448:	2304      	movs	r3, #4
 800944a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944e:	e280      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009450:	2308      	movs	r3, #8
 8009452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009456:	e27c      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009458:	2310      	movs	r3, #16
 800945a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945e:	e278      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009460:	2320      	movs	r3, #32
 8009462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009466:	e274      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009468:	2340      	movs	r3, #64	@ 0x40
 800946a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946e:	e270      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009470:	2380      	movs	r3, #128	@ 0x80
 8009472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009476:	e26c      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a1b      	ldr	r2, [pc, #108]	@ (80094ec <UART_SetConfig+0x348>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d142      	bne.n	8009508 <UART_SetConfig+0x364>
 8009482:	4b16      	ldr	r3, [pc, #88]	@ (80094dc <UART_SetConfig+0x338>)
 8009484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009486:	f003 0307 	and.w	r3, r3, #7
 800948a:	2b05      	cmp	r3, #5
 800948c:	d838      	bhi.n	8009500 <UART_SetConfig+0x35c>
 800948e:	a201      	add	r2, pc, #4	@ (adr r2, 8009494 <UART_SetConfig+0x2f0>)
 8009490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009494:	080094ad 	.word	0x080094ad
 8009498:	080094b5 	.word	0x080094b5
 800949c:	080094bd 	.word	0x080094bd
 80094a0:	080094c5 	.word	0x080094c5
 80094a4:	080094f1 	.word	0x080094f1
 80094a8:	080094f9 	.word	0x080094f9
 80094ac:	2300      	movs	r3, #0
 80094ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b2:	e24e      	b.n	8009952 <UART_SetConfig+0x7ae>
 80094b4:	2304      	movs	r3, #4
 80094b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ba:	e24a      	b.n	8009952 <UART_SetConfig+0x7ae>
 80094bc:	2308      	movs	r3, #8
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c2:	e246      	b.n	8009952 <UART_SetConfig+0x7ae>
 80094c4:	2310      	movs	r3, #16
 80094c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ca:	e242      	b.n	8009952 <UART_SetConfig+0x7ae>
 80094cc:	cfff69f3 	.word	0xcfff69f3
 80094d0:	58000c00 	.word	0x58000c00
 80094d4:	11fff4ff 	.word	0x11fff4ff
 80094d8:	40011000 	.word	0x40011000
 80094dc:	58024400 	.word	0x58024400
 80094e0:	40004400 	.word	0x40004400
 80094e4:	40004800 	.word	0x40004800
 80094e8:	40004c00 	.word	0x40004c00
 80094ec:	40005000 	.word	0x40005000
 80094f0:	2320      	movs	r3, #32
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f6:	e22c      	b.n	8009952 <UART_SetConfig+0x7ae>
 80094f8:	2340      	movs	r3, #64	@ 0x40
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fe:	e228      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009500:	2380      	movs	r3, #128	@ 0x80
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009506:	e224      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4ab1      	ldr	r2, [pc, #708]	@ (80097d4 <UART_SetConfig+0x630>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d176      	bne.n	8009600 <UART_SetConfig+0x45c>
 8009512:	4bb1      	ldr	r3, [pc, #708]	@ (80097d8 <UART_SetConfig+0x634>)
 8009514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009516:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800951a:	2b28      	cmp	r3, #40	@ 0x28
 800951c:	d86c      	bhi.n	80095f8 <UART_SetConfig+0x454>
 800951e:	a201      	add	r2, pc, #4	@ (adr r2, 8009524 <UART_SetConfig+0x380>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	080095c9 	.word	0x080095c9
 8009528:	080095f9 	.word	0x080095f9
 800952c:	080095f9 	.word	0x080095f9
 8009530:	080095f9 	.word	0x080095f9
 8009534:	080095f9 	.word	0x080095f9
 8009538:	080095f9 	.word	0x080095f9
 800953c:	080095f9 	.word	0x080095f9
 8009540:	080095f9 	.word	0x080095f9
 8009544:	080095d1 	.word	0x080095d1
 8009548:	080095f9 	.word	0x080095f9
 800954c:	080095f9 	.word	0x080095f9
 8009550:	080095f9 	.word	0x080095f9
 8009554:	080095f9 	.word	0x080095f9
 8009558:	080095f9 	.word	0x080095f9
 800955c:	080095f9 	.word	0x080095f9
 8009560:	080095f9 	.word	0x080095f9
 8009564:	080095d9 	.word	0x080095d9
 8009568:	080095f9 	.word	0x080095f9
 800956c:	080095f9 	.word	0x080095f9
 8009570:	080095f9 	.word	0x080095f9
 8009574:	080095f9 	.word	0x080095f9
 8009578:	080095f9 	.word	0x080095f9
 800957c:	080095f9 	.word	0x080095f9
 8009580:	080095f9 	.word	0x080095f9
 8009584:	080095e1 	.word	0x080095e1
 8009588:	080095f9 	.word	0x080095f9
 800958c:	080095f9 	.word	0x080095f9
 8009590:	080095f9 	.word	0x080095f9
 8009594:	080095f9 	.word	0x080095f9
 8009598:	080095f9 	.word	0x080095f9
 800959c:	080095f9 	.word	0x080095f9
 80095a0:	080095f9 	.word	0x080095f9
 80095a4:	080095e9 	.word	0x080095e9
 80095a8:	080095f9 	.word	0x080095f9
 80095ac:	080095f9 	.word	0x080095f9
 80095b0:	080095f9 	.word	0x080095f9
 80095b4:	080095f9 	.word	0x080095f9
 80095b8:	080095f9 	.word	0x080095f9
 80095bc:	080095f9 	.word	0x080095f9
 80095c0:	080095f9 	.word	0x080095f9
 80095c4:	080095f1 	.word	0x080095f1
 80095c8:	2301      	movs	r3, #1
 80095ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ce:	e1c0      	b.n	8009952 <UART_SetConfig+0x7ae>
 80095d0:	2304      	movs	r3, #4
 80095d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d6:	e1bc      	b.n	8009952 <UART_SetConfig+0x7ae>
 80095d8:	2308      	movs	r3, #8
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095de:	e1b8      	b.n	8009952 <UART_SetConfig+0x7ae>
 80095e0:	2310      	movs	r3, #16
 80095e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e6:	e1b4      	b.n	8009952 <UART_SetConfig+0x7ae>
 80095e8:	2320      	movs	r3, #32
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ee:	e1b0      	b.n	8009952 <UART_SetConfig+0x7ae>
 80095f0:	2340      	movs	r3, #64	@ 0x40
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f6:	e1ac      	b.n	8009952 <UART_SetConfig+0x7ae>
 80095f8:	2380      	movs	r3, #128	@ 0x80
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fe:	e1a8      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a75      	ldr	r2, [pc, #468]	@ (80097dc <UART_SetConfig+0x638>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d130      	bne.n	800966c <UART_SetConfig+0x4c8>
 800960a:	4b73      	ldr	r3, [pc, #460]	@ (80097d8 <UART_SetConfig+0x634>)
 800960c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800960e:	f003 0307 	and.w	r3, r3, #7
 8009612:	2b05      	cmp	r3, #5
 8009614:	d826      	bhi.n	8009664 <UART_SetConfig+0x4c0>
 8009616:	a201      	add	r2, pc, #4	@ (adr r2, 800961c <UART_SetConfig+0x478>)
 8009618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961c:	08009635 	.word	0x08009635
 8009620:	0800963d 	.word	0x0800963d
 8009624:	08009645 	.word	0x08009645
 8009628:	0800964d 	.word	0x0800964d
 800962c:	08009655 	.word	0x08009655
 8009630:	0800965d 	.word	0x0800965d
 8009634:	2300      	movs	r3, #0
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963a:	e18a      	b.n	8009952 <UART_SetConfig+0x7ae>
 800963c:	2304      	movs	r3, #4
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009642:	e186      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009644:	2308      	movs	r3, #8
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964a:	e182      	b.n	8009952 <UART_SetConfig+0x7ae>
 800964c:	2310      	movs	r3, #16
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009652:	e17e      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009654:	2320      	movs	r3, #32
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965a:	e17a      	b.n	8009952 <UART_SetConfig+0x7ae>
 800965c:	2340      	movs	r3, #64	@ 0x40
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009662:	e176      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009664:	2380      	movs	r3, #128	@ 0x80
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966a:	e172      	b.n	8009952 <UART_SetConfig+0x7ae>
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a5b      	ldr	r2, [pc, #364]	@ (80097e0 <UART_SetConfig+0x63c>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d130      	bne.n	80096d8 <UART_SetConfig+0x534>
 8009676:	4b58      	ldr	r3, [pc, #352]	@ (80097d8 <UART_SetConfig+0x634>)
 8009678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800967a:	f003 0307 	and.w	r3, r3, #7
 800967e:	2b05      	cmp	r3, #5
 8009680:	d826      	bhi.n	80096d0 <UART_SetConfig+0x52c>
 8009682:	a201      	add	r2, pc, #4	@ (adr r2, 8009688 <UART_SetConfig+0x4e4>)
 8009684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009688:	080096a1 	.word	0x080096a1
 800968c:	080096a9 	.word	0x080096a9
 8009690:	080096b1 	.word	0x080096b1
 8009694:	080096b9 	.word	0x080096b9
 8009698:	080096c1 	.word	0x080096c1
 800969c:	080096c9 	.word	0x080096c9
 80096a0:	2300      	movs	r3, #0
 80096a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a6:	e154      	b.n	8009952 <UART_SetConfig+0x7ae>
 80096a8:	2304      	movs	r3, #4
 80096aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ae:	e150      	b.n	8009952 <UART_SetConfig+0x7ae>
 80096b0:	2308      	movs	r3, #8
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b6:	e14c      	b.n	8009952 <UART_SetConfig+0x7ae>
 80096b8:	2310      	movs	r3, #16
 80096ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096be:	e148      	b.n	8009952 <UART_SetConfig+0x7ae>
 80096c0:	2320      	movs	r3, #32
 80096c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c6:	e144      	b.n	8009952 <UART_SetConfig+0x7ae>
 80096c8:	2340      	movs	r3, #64	@ 0x40
 80096ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ce:	e140      	b.n	8009952 <UART_SetConfig+0x7ae>
 80096d0:	2380      	movs	r3, #128	@ 0x80
 80096d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d6:	e13c      	b.n	8009952 <UART_SetConfig+0x7ae>
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a41      	ldr	r2, [pc, #260]	@ (80097e4 <UART_SetConfig+0x640>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	f040 8082 	bne.w	80097e8 <UART_SetConfig+0x644>
 80096e4:	4b3c      	ldr	r3, [pc, #240]	@ (80097d8 <UART_SetConfig+0x634>)
 80096e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096ec:	2b28      	cmp	r3, #40	@ 0x28
 80096ee:	d86d      	bhi.n	80097cc <UART_SetConfig+0x628>
 80096f0:	a201      	add	r2, pc, #4	@ (adr r2, 80096f8 <UART_SetConfig+0x554>)
 80096f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f6:	bf00      	nop
 80096f8:	0800979d 	.word	0x0800979d
 80096fc:	080097cd 	.word	0x080097cd
 8009700:	080097cd 	.word	0x080097cd
 8009704:	080097cd 	.word	0x080097cd
 8009708:	080097cd 	.word	0x080097cd
 800970c:	080097cd 	.word	0x080097cd
 8009710:	080097cd 	.word	0x080097cd
 8009714:	080097cd 	.word	0x080097cd
 8009718:	080097a5 	.word	0x080097a5
 800971c:	080097cd 	.word	0x080097cd
 8009720:	080097cd 	.word	0x080097cd
 8009724:	080097cd 	.word	0x080097cd
 8009728:	080097cd 	.word	0x080097cd
 800972c:	080097cd 	.word	0x080097cd
 8009730:	080097cd 	.word	0x080097cd
 8009734:	080097cd 	.word	0x080097cd
 8009738:	080097ad 	.word	0x080097ad
 800973c:	080097cd 	.word	0x080097cd
 8009740:	080097cd 	.word	0x080097cd
 8009744:	080097cd 	.word	0x080097cd
 8009748:	080097cd 	.word	0x080097cd
 800974c:	080097cd 	.word	0x080097cd
 8009750:	080097cd 	.word	0x080097cd
 8009754:	080097cd 	.word	0x080097cd
 8009758:	080097b5 	.word	0x080097b5
 800975c:	080097cd 	.word	0x080097cd
 8009760:	080097cd 	.word	0x080097cd
 8009764:	080097cd 	.word	0x080097cd
 8009768:	080097cd 	.word	0x080097cd
 800976c:	080097cd 	.word	0x080097cd
 8009770:	080097cd 	.word	0x080097cd
 8009774:	080097cd 	.word	0x080097cd
 8009778:	080097bd 	.word	0x080097bd
 800977c:	080097cd 	.word	0x080097cd
 8009780:	080097cd 	.word	0x080097cd
 8009784:	080097cd 	.word	0x080097cd
 8009788:	080097cd 	.word	0x080097cd
 800978c:	080097cd 	.word	0x080097cd
 8009790:	080097cd 	.word	0x080097cd
 8009794:	080097cd 	.word	0x080097cd
 8009798:	080097c5 	.word	0x080097c5
 800979c:	2301      	movs	r3, #1
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e0d6      	b.n	8009952 <UART_SetConfig+0x7ae>
 80097a4:	2304      	movs	r3, #4
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097aa:	e0d2      	b.n	8009952 <UART_SetConfig+0x7ae>
 80097ac:	2308      	movs	r3, #8
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b2:	e0ce      	b.n	8009952 <UART_SetConfig+0x7ae>
 80097b4:	2310      	movs	r3, #16
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ba:	e0ca      	b.n	8009952 <UART_SetConfig+0x7ae>
 80097bc:	2320      	movs	r3, #32
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c2:	e0c6      	b.n	8009952 <UART_SetConfig+0x7ae>
 80097c4:	2340      	movs	r3, #64	@ 0x40
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ca:	e0c2      	b.n	8009952 <UART_SetConfig+0x7ae>
 80097cc:	2380      	movs	r3, #128	@ 0x80
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d2:	e0be      	b.n	8009952 <UART_SetConfig+0x7ae>
 80097d4:	40011400 	.word	0x40011400
 80097d8:	58024400 	.word	0x58024400
 80097dc:	40007800 	.word	0x40007800
 80097e0:	40007c00 	.word	0x40007c00
 80097e4:	40011800 	.word	0x40011800
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4aad      	ldr	r2, [pc, #692]	@ (8009aa4 <UART_SetConfig+0x900>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d176      	bne.n	80098e0 <UART_SetConfig+0x73c>
 80097f2:	4bad      	ldr	r3, [pc, #692]	@ (8009aa8 <UART_SetConfig+0x904>)
 80097f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097fa:	2b28      	cmp	r3, #40	@ 0x28
 80097fc:	d86c      	bhi.n	80098d8 <UART_SetConfig+0x734>
 80097fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009804 <UART_SetConfig+0x660>)
 8009800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009804:	080098a9 	.word	0x080098a9
 8009808:	080098d9 	.word	0x080098d9
 800980c:	080098d9 	.word	0x080098d9
 8009810:	080098d9 	.word	0x080098d9
 8009814:	080098d9 	.word	0x080098d9
 8009818:	080098d9 	.word	0x080098d9
 800981c:	080098d9 	.word	0x080098d9
 8009820:	080098d9 	.word	0x080098d9
 8009824:	080098b1 	.word	0x080098b1
 8009828:	080098d9 	.word	0x080098d9
 800982c:	080098d9 	.word	0x080098d9
 8009830:	080098d9 	.word	0x080098d9
 8009834:	080098d9 	.word	0x080098d9
 8009838:	080098d9 	.word	0x080098d9
 800983c:	080098d9 	.word	0x080098d9
 8009840:	080098d9 	.word	0x080098d9
 8009844:	080098b9 	.word	0x080098b9
 8009848:	080098d9 	.word	0x080098d9
 800984c:	080098d9 	.word	0x080098d9
 8009850:	080098d9 	.word	0x080098d9
 8009854:	080098d9 	.word	0x080098d9
 8009858:	080098d9 	.word	0x080098d9
 800985c:	080098d9 	.word	0x080098d9
 8009860:	080098d9 	.word	0x080098d9
 8009864:	080098c1 	.word	0x080098c1
 8009868:	080098d9 	.word	0x080098d9
 800986c:	080098d9 	.word	0x080098d9
 8009870:	080098d9 	.word	0x080098d9
 8009874:	080098d9 	.word	0x080098d9
 8009878:	080098d9 	.word	0x080098d9
 800987c:	080098d9 	.word	0x080098d9
 8009880:	080098d9 	.word	0x080098d9
 8009884:	080098c9 	.word	0x080098c9
 8009888:	080098d9 	.word	0x080098d9
 800988c:	080098d9 	.word	0x080098d9
 8009890:	080098d9 	.word	0x080098d9
 8009894:	080098d9 	.word	0x080098d9
 8009898:	080098d9 	.word	0x080098d9
 800989c:	080098d9 	.word	0x080098d9
 80098a0:	080098d9 	.word	0x080098d9
 80098a4:	080098d1 	.word	0x080098d1
 80098a8:	2301      	movs	r3, #1
 80098aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ae:	e050      	b.n	8009952 <UART_SetConfig+0x7ae>
 80098b0:	2304      	movs	r3, #4
 80098b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b6:	e04c      	b.n	8009952 <UART_SetConfig+0x7ae>
 80098b8:	2308      	movs	r3, #8
 80098ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098be:	e048      	b.n	8009952 <UART_SetConfig+0x7ae>
 80098c0:	2310      	movs	r3, #16
 80098c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c6:	e044      	b.n	8009952 <UART_SetConfig+0x7ae>
 80098c8:	2320      	movs	r3, #32
 80098ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ce:	e040      	b.n	8009952 <UART_SetConfig+0x7ae>
 80098d0:	2340      	movs	r3, #64	@ 0x40
 80098d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d6:	e03c      	b.n	8009952 <UART_SetConfig+0x7ae>
 80098d8:	2380      	movs	r3, #128	@ 0x80
 80098da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098de:	e038      	b.n	8009952 <UART_SetConfig+0x7ae>
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a71      	ldr	r2, [pc, #452]	@ (8009aac <UART_SetConfig+0x908>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d130      	bne.n	800994c <UART_SetConfig+0x7a8>
 80098ea:	4b6f      	ldr	r3, [pc, #444]	@ (8009aa8 <UART_SetConfig+0x904>)
 80098ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ee:	f003 0307 	and.w	r3, r3, #7
 80098f2:	2b05      	cmp	r3, #5
 80098f4:	d826      	bhi.n	8009944 <UART_SetConfig+0x7a0>
 80098f6:	a201      	add	r2, pc, #4	@ (adr r2, 80098fc <UART_SetConfig+0x758>)
 80098f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fc:	08009915 	.word	0x08009915
 8009900:	0800991d 	.word	0x0800991d
 8009904:	08009925 	.word	0x08009925
 8009908:	0800992d 	.word	0x0800992d
 800990c:	08009935 	.word	0x08009935
 8009910:	0800993d 	.word	0x0800993d
 8009914:	2302      	movs	r3, #2
 8009916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991a:	e01a      	b.n	8009952 <UART_SetConfig+0x7ae>
 800991c:	2304      	movs	r3, #4
 800991e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009922:	e016      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009924:	2308      	movs	r3, #8
 8009926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992a:	e012      	b.n	8009952 <UART_SetConfig+0x7ae>
 800992c:	2310      	movs	r3, #16
 800992e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009932:	e00e      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009934:	2320      	movs	r3, #32
 8009936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993a:	e00a      	b.n	8009952 <UART_SetConfig+0x7ae>
 800993c:	2340      	movs	r3, #64	@ 0x40
 800993e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009942:	e006      	b.n	8009952 <UART_SetConfig+0x7ae>
 8009944:	2380      	movs	r3, #128	@ 0x80
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994a:	e002      	b.n	8009952 <UART_SetConfig+0x7ae>
 800994c:	2380      	movs	r3, #128	@ 0x80
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a55      	ldr	r2, [pc, #340]	@ (8009aac <UART_SetConfig+0x908>)
 8009958:	4293      	cmp	r3, r2
 800995a:	f040 80f8 	bne.w	8009b4e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800995e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009962:	2b20      	cmp	r3, #32
 8009964:	dc46      	bgt.n	80099f4 <UART_SetConfig+0x850>
 8009966:	2b02      	cmp	r3, #2
 8009968:	db75      	blt.n	8009a56 <UART_SetConfig+0x8b2>
 800996a:	3b02      	subs	r3, #2
 800996c:	2b1e      	cmp	r3, #30
 800996e:	d872      	bhi.n	8009a56 <UART_SetConfig+0x8b2>
 8009970:	a201      	add	r2, pc, #4	@ (adr r2, 8009978 <UART_SetConfig+0x7d4>)
 8009972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009976:	bf00      	nop
 8009978:	080099fb 	.word	0x080099fb
 800997c:	08009a57 	.word	0x08009a57
 8009980:	08009a03 	.word	0x08009a03
 8009984:	08009a57 	.word	0x08009a57
 8009988:	08009a57 	.word	0x08009a57
 800998c:	08009a57 	.word	0x08009a57
 8009990:	08009a13 	.word	0x08009a13
 8009994:	08009a57 	.word	0x08009a57
 8009998:	08009a57 	.word	0x08009a57
 800999c:	08009a57 	.word	0x08009a57
 80099a0:	08009a57 	.word	0x08009a57
 80099a4:	08009a57 	.word	0x08009a57
 80099a8:	08009a57 	.word	0x08009a57
 80099ac:	08009a57 	.word	0x08009a57
 80099b0:	08009a23 	.word	0x08009a23
 80099b4:	08009a57 	.word	0x08009a57
 80099b8:	08009a57 	.word	0x08009a57
 80099bc:	08009a57 	.word	0x08009a57
 80099c0:	08009a57 	.word	0x08009a57
 80099c4:	08009a57 	.word	0x08009a57
 80099c8:	08009a57 	.word	0x08009a57
 80099cc:	08009a57 	.word	0x08009a57
 80099d0:	08009a57 	.word	0x08009a57
 80099d4:	08009a57 	.word	0x08009a57
 80099d8:	08009a57 	.word	0x08009a57
 80099dc:	08009a57 	.word	0x08009a57
 80099e0:	08009a57 	.word	0x08009a57
 80099e4:	08009a57 	.word	0x08009a57
 80099e8:	08009a57 	.word	0x08009a57
 80099ec:	08009a57 	.word	0x08009a57
 80099f0:	08009a49 	.word	0x08009a49
 80099f4:	2b40      	cmp	r3, #64	@ 0x40
 80099f6:	d02a      	beq.n	8009a4e <UART_SetConfig+0x8aa>
 80099f8:	e02d      	b.n	8009a56 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80099fa:	f7fd fcd5 	bl	80073a8 <HAL_RCCEx_GetD3PCLK1Freq>
 80099fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a00:	e02f      	b.n	8009a62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fd fce4 	bl	80073d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a10:	e027      	b.n	8009a62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a12:	f107 0318 	add.w	r3, r7, #24
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fd fe30 	bl	800767c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a20:	e01f      	b.n	8009a62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a22:	4b21      	ldr	r3, [pc, #132]	@ (8009aa8 <UART_SetConfig+0x904>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d009      	beq.n	8009a42 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8009aa8 <UART_SetConfig+0x904>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	08db      	lsrs	r3, r3, #3
 8009a34:	f003 0303 	and.w	r3, r3, #3
 8009a38:	4a1d      	ldr	r2, [pc, #116]	@ (8009ab0 <UART_SetConfig+0x90c>)
 8009a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a40:	e00f      	b.n	8009a62 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009a42:	4b1b      	ldr	r3, [pc, #108]	@ (8009ab0 <UART_SetConfig+0x90c>)
 8009a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a46:	e00c      	b.n	8009a62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a48:	4b1a      	ldr	r3, [pc, #104]	@ (8009ab4 <UART_SetConfig+0x910>)
 8009a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a4c:	e009      	b.n	8009a62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a54:	e005      	b.n	8009a62 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009a56:	2300      	movs	r3, #0
 8009a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009a60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 81ee 	beq.w	8009e46 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6e:	4a12      	ldr	r2, [pc, #72]	@ (8009ab8 <UART_SetConfig+0x914>)
 8009a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a74:	461a      	mov	r2, r3
 8009a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a78:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a7c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	4613      	mov	r3, r2
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	4413      	add	r3, r2
 8009a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d305      	bcc.n	8009a9a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d910      	bls.n	8009abc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009aa0:	e1d1      	b.n	8009e46 <UART_SetConfig+0xca2>
 8009aa2:	bf00      	nop
 8009aa4:	40011c00 	.word	0x40011c00
 8009aa8:	58024400 	.word	0x58024400
 8009aac:	58000c00 	.word	0x58000c00
 8009ab0:	03d09000 	.word	0x03d09000
 8009ab4:	003d0900 	.word	0x003d0900
 8009ab8:	08013170 	.word	0x08013170
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009abe:	2200      	movs	r2, #0
 8009ac0:	60bb      	str	r3, [r7, #8]
 8009ac2:	60fa      	str	r2, [r7, #12]
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac8:	4ac0      	ldr	r2, [pc, #768]	@ (8009dcc <UART_SetConfig+0xc28>)
 8009aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	603b      	str	r3, [r7, #0]
 8009ad4:	607a      	str	r2, [r7, #4]
 8009ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ade:	f7f6 fe2b 	bl	8000738 <__aeabi_uldivmod>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	4619      	mov	r1, r3
 8009aea:	f04f 0200 	mov.w	r2, #0
 8009aee:	f04f 0300 	mov.w	r3, #0
 8009af2:	020b      	lsls	r3, r1, #8
 8009af4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009af8:	0202      	lsls	r2, r0, #8
 8009afa:	6979      	ldr	r1, [r7, #20]
 8009afc:	6849      	ldr	r1, [r1, #4]
 8009afe:	0849      	lsrs	r1, r1, #1
 8009b00:	2000      	movs	r0, #0
 8009b02:	460c      	mov	r4, r1
 8009b04:	4605      	mov	r5, r0
 8009b06:	eb12 0804 	adds.w	r8, r2, r4
 8009b0a:	eb43 0905 	adc.w	r9, r3, r5
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	469a      	mov	sl, r3
 8009b16:	4693      	mov	fp, r2
 8009b18:	4652      	mov	r2, sl
 8009b1a:	465b      	mov	r3, fp
 8009b1c:	4640      	mov	r0, r8
 8009b1e:	4649      	mov	r1, r9
 8009b20:	f7f6 fe0a 	bl	8000738 <__aeabi_uldivmod>
 8009b24:	4602      	mov	r2, r0
 8009b26:	460b      	mov	r3, r1
 8009b28:	4613      	mov	r3, r2
 8009b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b32:	d308      	bcc.n	8009b46 <UART_SetConfig+0x9a2>
 8009b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b3a:	d204      	bcs.n	8009b46 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b42:	60da      	str	r2, [r3, #12]
 8009b44:	e17f      	b.n	8009e46 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b4c:	e17b      	b.n	8009e46 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b56:	f040 80bd 	bne.w	8009cd4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009b5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b5e:	2b20      	cmp	r3, #32
 8009b60:	dc48      	bgt.n	8009bf4 <UART_SetConfig+0xa50>
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	db7b      	blt.n	8009c5e <UART_SetConfig+0xaba>
 8009b66:	2b20      	cmp	r3, #32
 8009b68:	d879      	bhi.n	8009c5e <UART_SetConfig+0xaba>
 8009b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b70 <UART_SetConfig+0x9cc>)
 8009b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b70:	08009bfb 	.word	0x08009bfb
 8009b74:	08009c03 	.word	0x08009c03
 8009b78:	08009c5f 	.word	0x08009c5f
 8009b7c:	08009c5f 	.word	0x08009c5f
 8009b80:	08009c0b 	.word	0x08009c0b
 8009b84:	08009c5f 	.word	0x08009c5f
 8009b88:	08009c5f 	.word	0x08009c5f
 8009b8c:	08009c5f 	.word	0x08009c5f
 8009b90:	08009c1b 	.word	0x08009c1b
 8009b94:	08009c5f 	.word	0x08009c5f
 8009b98:	08009c5f 	.word	0x08009c5f
 8009b9c:	08009c5f 	.word	0x08009c5f
 8009ba0:	08009c5f 	.word	0x08009c5f
 8009ba4:	08009c5f 	.word	0x08009c5f
 8009ba8:	08009c5f 	.word	0x08009c5f
 8009bac:	08009c5f 	.word	0x08009c5f
 8009bb0:	08009c2b 	.word	0x08009c2b
 8009bb4:	08009c5f 	.word	0x08009c5f
 8009bb8:	08009c5f 	.word	0x08009c5f
 8009bbc:	08009c5f 	.word	0x08009c5f
 8009bc0:	08009c5f 	.word	0x08009c5f
 8009bc4:	08009c5f 	.word	0x08009c5f
 8009bc8:	08009c5f 	.word	0x08009c5f
 8009bcc:	08009c5f 	.word	0x08009c5f
 8009bd0:	08009c5f 	.word	0x08009c5f
 8009bd4:	08009c5f 	.word	0x08009c5f
 8009bd8:	08009c5f 	.word	0x08009c5f
 8009bdc:	08009c5f 	.word	0x08009c5f
 8009be0:	08009c5f 	.word	0x08009c5f
 8009be4:	08009c5f 	.word	0x08009c5f
 8009be8:	08009c5f 	.word	0x08009c5f
 8009bec:	08009c5f 	.word	0x08009c5f
 8009bf0:	08009c51 	.word	0x08009c51
 8009bf4:	2b40      	cmp	r3, #64	@ 0x40
 8009bf6:	d02e      	beq.n	8009c56 <UART_SetConfig+0xab2>
 8009bf8:	e031      	b.n	8009c5e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bfa:	f7fc fa09 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 8009bfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c00:	e033      	b.n	8009c6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c02:	f7fc fa1b 	bl	800603c <HAL_RCC_GetPCLK2Freq>
 8009c06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c08:	e02f      	b.n	8009c6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fd fbe0 	bl	80073d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c18:	e027      	b.n	8009c6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c1a:	f107 0318 	add.w	r3, r7, #24
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fd fd2c 	bl	800767c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c28:	e01f      	b.n	8009c6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c2a:	4b69      	ldr	r3, [pc, #420]	@ (8009dd0 <UART_SetConfig+0xc2c>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0320 	and.w	r3, r3, #32
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d009      	beq.n	8009c4a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c36:	4b66      	ldr	r3, [pc, #408]	@ (8009dd0 <UART_SetConfig+0xc2c>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	08db      	lsrs	r3, r3, #3
 8009c3c:	f003 0303 	and.w	r3, r3, #3
 8009c40:	4a64      	ldr	r2, [pc, #400]	@ (8009dd4 <UART_SetConfig+0xc30>)
 8009c42:	fa22 f303 	lsr.w	r3, r2, r3
 8009c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c48:	e00f      	b.n	8009c6a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009c4a:	4b62      	ldr	r3, [pc, #392]	@ (8009dd4 <UART_SetConfig+0xc30>)
 8009c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c4e:	e00c      	b.n	8009c6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c50:	4b61      	ldr	r3, [pc, #388]	@ (8009dd8 <UART_SetConfig+0xc34>)
 8009c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c54:	e009      	b.n	8009c6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c5c:	e005      	b.n	8009c6a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 80ea 	beq.w	8009e46 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c76:	4a55      	ldr	r2, [pc, #340]	@ (8009dcc <UART_SetConfig+0xc28>)
 8009c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c84:	005a      	lsls	r2, r3, #1
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	085b      	lsrs	r3, r3, #1
 8009c8c:	441a      	add	r2, r3
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c96:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9a:	2b0f      	cmp	r3, #15
 8009c9c:	d916      	bls.n	8009ccc <UART_SetConfig+0xb28>
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ca4:	d212      	bcs.n	8009ccc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	f023 030f 	bic.w	r3, r3, #15
 8009cae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb2:	085b      	lsrs	r3, r3, #1
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	f003 0307 	and.w	r3, r3, #7
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009cc8:	60da      	str	r2, [r3, #12]
 8009cca:	e0bc      	b.n	8009e46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009cd2:	e0b8      	b.n	8009e46 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cd4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009cd8:	2b20      	cmp	r3, #32
 8009cda:	dc4b      	bgt.n	8009d74 <UART_SetConfig+0xbd0>
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f2c0 8087 	blt.w	8009df0 <UART_SetConfig+0xc4c>
 8009ce2:	2b20      	cmp	r3, #32
 8009ce4:	f200 8084 	bhi.w	8009df0 <UART_SetConfig+0xc4c>
 8009ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf0 <UART_SetConfig+0xb4c>)
 8009cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cee:	bf00      	nop
 8009cf0:	08009d7b 	.word	0x08009d7b
 8009cf4:	08009d83 	.word	0x08009d83
 8009cf8:	08009df1 	.word	0x08009df1
 8009cfc:	08009df1 	.word	0x08009df1
 8009d00:	08009d8b 	.word	0x08009d8b
 8009d04:	08009df1 	.word	0x08009df1
 8009d08:	08009df1 	.word	0x08009df1
 8009d0c:	08009df1 	.word	0x08009df1
 8009d10:	08009d9b 	.word	0x08009d9b
 8009d14:	08009df1 	.word	0x08009df1
 8009d18:	08009df1 	.word	0x08009df1
 8009d1c:	08009df1 	.word	0x08009df1
 8009d20:	08009df1 	.word	0x08009df1
 8009d24:	08009df1 	.word	0x08009df1
 8009d28:	08009df1 	.word	0x08009df1
 8009d2c:	08009df1 	.word	0x08009df1
 8009d30:	08009dab 	.word	0x08009dab
 8009d34:	08009df1 	.word	0x08009df1
 8009d38:	08009df1 	.word	0x08009df1
 8009d3c:	08009df1 	.word	0x08009df1
 8009d40:	08009df1 	.word	0x08009df1
 8009d44:	08009df1 	.word	0x08009df1
 8009d48:	08009df1 	.word	0x08009df1
 8009d4c:	08009df1 	.word	0x08009df1
 8009d50:	08009df1 	.word	0x08009df1
 8009d54:	08009df1 	.word	0x08009df1
 8009d58:	08009df1 	.word	0x08009df1
 8009d5c:	08009df1 	.word	0x08009df1
 8009d60:	08009df1 	.word	0x08009df1
 8009d64:	08009df1 	.word	0x08009df1
 8009d68:	08009df1 	.word	0x08009df1
 8009d6c:	08009df1 	.word	0x08009df1
 8009d70:	08009de3 	.word	0x08009de3
 8009d74:	2b40      	cmp	r3, #64	@ 0x40
 8009d76:	d037      	beq.n	8009de8 <UART_SetConfig+0xc44>
 8009d78:	e03a      	b.n	8009df0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d7a:	f7fc f949 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 8009d7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d80:	e03c      	b.n	8009dfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d82:	f7fc f95b 	bl	800603c <HAL_RCC_GetPCLK2Freq>
 8009d86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d88:	e038      	b.n	8009dfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fd fb20 	bl	80073d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d98:	e030      	b.n	8009dfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d9a:	f107 0318 	add.w	r3, r7, #24
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fd fc6c 	bl	800767c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009da8:	e028      	b.n	8009dfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009daa:	4b09      	ldr	r3, [pc, #36]	@ (8009dd0 <UART_SetConfig+0xc2c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0320 	and.w	r3, r3, #32
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d012      	beq.n	8009ddc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009db6:	4b06      	ldr	r3, [pc, #24]	@ (8009dd0 <UART_SetConfig+0xc2c>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	08db      	lsrs	r3, r3, #3
 8009dbc:	f003 0303 	and.w	r3, r3, #3
 8009dc0:	4a04      	ldr	r2, [pc, #16]	@ (8009dd4 <UART_SetConfig+0xc30>)
 8009dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dc8:	e018      	b.n	8009dfc <UART_SetConfig+0xc58>
 8009dca:	bf00      	nop
 8009dcc:	08013170 	.word	0x08013170
 8009dd0:	58024400 	.word	0x58024400
 8009dd4:	03d09000 	.word	0x03d09000
 8009dd8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009ddc:	4b24      	ldr	r3, [pc, #144]	@ (8009e70 <UART_SetConfig+0xccc>)
 8009dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009de0:	e00c      	b.n	8009dfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009de2:	4b24      	ldr	r3, [pc, #144]	@ (8009e74 <UART_SetConfig+0xcd0>)
 8009de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009de6:	e009      	b.n	8009dfc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009de8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dee:	e005      	b.n	8009dfc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009df0:	2300      	movs	r3, #0
 8009df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009dfa:	bf00      	nop
    }

    if (pclk != 0U)
 8009dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d021      	beq.n	8009e46 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e06:	4a1c      	ldr	r2, [pc, #112]	@ (8009e78 <UART_SetConfig+0xcd4>)
 8009e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e10:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	085b      	lsrs	r3, r3, #1
 8009e1a:	441a      	add	r2, r3
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e24:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e28:	2b0f      	cmp	r3, #15
 8009e2a:	d909      	bls.n	8009e40 <UART_SetConfig+0xc9c>
 8009e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e32:	d205      	bcs.n	8009e40 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	60da      	str	r2, [r3, #12]
 8009e3e:	e002      	b.n	8009e46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e62:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3748      	adds	r7, #72	@ 0x48
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e70:	03d09000 	.word	0x03d09000
 8009e74:	003d0900 	.word	0x003d0900
 8009e78:	08013170 	.word	0x08013170

08009e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e88:	f003 0308 	and.w	r3, r3, #8
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00a      	beq.n	8009ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eaa:	f003 0301 	and.w	r3, r3, #1
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00a      	beq.n	8009ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	430a      	orrs	r2, r1
 8009ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ecc:	f003 0302 	and.w	r3, r3, #2
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00a      	beq.n	8009eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eee:	f003 0304 	and.w	r3, r3, #4
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	430a      	orrs	r2, r1
 8009f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f10:	f003 0310 	and.w	r3, r3, #16
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00a      	beq.n	8009f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	430a      	orrs	r2, r1
 8009f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f32:	f003 0320 	and.w	r3, r3, #32
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00a      	beq.n	8009f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d01a      	beq.n	8009f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f7a:	d10a      	bne.n	8009f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	430a      	orrs	r2, r1
 8009f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00a      	beq.n	8009fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	605a      	str	r2, [r3, #4]
  }
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b098      	sub	sp, #96	@ 0x60
 8009fc4:	af02      	add	r7, sp, #8
 8009fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fd0:	f7f8 fdfc 	bl	8002bcc <HAL_GetTick>
 8009fd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0308 	and.w	r3, r3, #8
 8009fe0:	2b08      	cmp	r3, #8
 8009fe2:	d12f      	bne.n	800a044 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fe4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fec:	2200      	movs	r2, #0
 8009fee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f88e 	bl	800a114 <UART_WaitOnFlagUntilTimeout>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d022      	beq.n	800a044 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a00c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a00e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a012:	653b      	str	r3, [r7, #80]	@ 0x50
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	461a      	mov	r2, r3
 800a01a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a01c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a01e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a022:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a024:	e841 2300 	strex	r3, r2, [r1]
 800a028:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a02a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e6      	bne.n	8009ffe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2220      	movs	r2, #32
 800a034:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a040:	2303      	movs	r3, #3
 800a042:	e063      	b.n	800a10c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f003 0304 	and.w	r3, r3, #4
 800a04e:	2b04      	cmp	r3, #4
 800a050:	d149      	bne.n	800a0e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a052:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a05a:	2200      	movs	r2, #0
 800a05c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f857 	bl	800a114 <UART_WaitOnFlagUntilTimeout>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d03c      	beq.n	800a0e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a074:	e853 3f00 	ldrex	r3, [r3]
 800a078:	623b      	str	r3, [r7, #32]
   return(result);
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a080:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	461a      	mov	r2, r3
 800a088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a08a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a08c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a092:	e841 2300 	strex	r3, r2, [r1]
 800a096:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1e6      	bne.n	800a06c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3308      	adds	r3, #8
 800a0a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	e853 3f00 	ldrex	r3, [r3]
 800a0ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f023 0301 	bic.w	r3, r3, #1
 800a0b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0be:	61fa      	str	r2, [r7, #28]
 800a0c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c2:	69b9      	ldr	r1, [r7, #24]
 800a0c4:	69fa      	ldr	r2, [r7, #28]
 800a0c6:	e841 2300 	strex	r3, r2, [r1]
 800a0ca:	617b      	str	r3, [r7, #20]
   return(result);
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1e5      	bne.n	800a09e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e012      	b.n	800a10c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2220      	movs	r2, #32
 800a0f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3758      	adds	r7, #88	@ 0x58
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	603b      	str	r3, [r7, #0]
 800a120:	4613      	mov	r3, r2
 800a122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a124:	e04f      	b.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12c:	d04b      	beq.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a12e:	f7f8 fd4d 	bl	8002bcc <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	69ba      	ldr	r2, [r7, #24]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d302      	bcc.n	800a144 <UART_WaitOnFlagUntilTimeout+0x30>
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d101      	bne.n	800a148 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a144:	2303      	movs	r3, #3
 800a146:	e04e      	b.n	800a1e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0304 	and.w	r3, r3, #4
 800a152:	2b00      	cmp	r3, #0
 800a154:	d037      	beq.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2b80      	cmp	r3, #128	@ 0x80
 800a15a:	d034      	beq.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2b40      	cmp	r3, #64	@ 0x40
 800a160:	d031      	beq.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	f003 0308 	and.w	r3, r3, #8
 800a16c:	2b08      	cmp	r3, #8
 800a16e:	d110      	bne.n	800a192 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2208      	movs	r2, #8
 800a176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f000 f95b 	bl	800a434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2208      	movs	r2, #8
 800a182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e029      	b.n	800a1e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a19c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1a0:	d111      	bne.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a1aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 f941 	bl	800a434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2220      	movs	r2, #32
 800a1b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e00f      	b.n	800a1e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	69da      	ldr	r2, [r3, #28]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	bf0c      	ite	eq
 800a1d6:	2301      	moveq	r3, #1
 800a1d8:	2300      	movne	r3, #0
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	461a      	mov	r2, r3
 800a1de:	79fb      	ldrb	r3, [r7, #7]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d0a0      	beq.n	800a126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
	...

0800a1f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b0a3      	sub	sp, #140	@ 0x8c
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	88fa      	ldrh	r2, [r7, #6]
 800a208:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	88fa      	ldrh	r2, [r7, #6]
 800a210:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a222:	d10e      	bne.n	800a242 <UART_Start_Receive_IT+0x52>
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d105      	bne.n	800a238 <UART_Start_Receive_IT+0x48>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a232:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a236:	e02d      	b.n	800a294 <UART_Start_Receive_IT+0xa4>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	22ff      	movs	r2, #255	@ 0xff
 800a23c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a240:	e028      	b.n	800a294 <UART_Start_Receive_IT+0xa4>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10d      	bne.n	800a266 <UART_Start_Receive_IT+0x76>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d104      	bne.n	800a25c <UART_Start_Receive_IT+0x6c>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	22ff      	movs	r2, #255	@ 0xff
 800a256:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a25a:	e01b      	b.n	800a294 <UART_Start_Receive_IT+0xa4>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	227f      	movs	r2, #127	@ 0x7f
 800a260:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a264:	e016      	b.n	800a294 <UART_Start_Receive_IT+0xa4>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a26e:	d10d      	bne.n	800a28c <UART_Start_Receive_IT+0x9c>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d104      	bne.n	800a282 <UART_Start_Receive_IT+0x92>
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	227f      	movs	r2, #127	@ 0x7f
 800a27c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a280:	e008      	b.n	800a294 <UART_Start_Receive_IT+0xa4>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	223f      	movs	r2, #63	@ 0x3f
 800a286:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a28a:	e003      	b.n	800a294 <UART_Start_Receive_IT+0xa4>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2200      	movs	r2, #0
 800a290:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2222      	movs	r2, #34	@ 0x22
 800a2a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	3308      	adds	r3, #8
 800a2aa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a2ae:	e853 3f00 	ldrex	r3, [r3]
 800a2b2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a2b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a2b6:	f043 0301 	orr.w	r3, r3, #1
 800a2ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a2c8:	673a      	str	r2, [r7, #112]	@ 0x70
 800a2ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2cc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a2ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a2d0:	e841 2300 	strex	r3, r2, [r1]
 800a2d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a2d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1e3      	bne.n	800a2a4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2e4:	d14f      	bne.n	800a386 <UART_Start_Receive_IT+0x196>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a2ec:	88fa      	ldrh	r2, [r7, #6]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d349      	bcc.n	800a386 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2fa:	d107      	bne.n	800a30c <UART_Start_Receive_IT+0x11c>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d103      	bne.n	800a30c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4a47      	ldr	r2, [pc, #284]	@ (800a424 <UART_Start_Receive_IT+0x234>)
 800a308:	675a      	str	r2, [r3, #116]	@ 0x74
 800a30a:	e002      	b.n	800a312 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4a46      	ldr	r2, [pc, #280]	@ (800a428 <UART_Start_Receive_IT+0x238>)
 800a310:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	691b      	ldr	r3, [r3, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d01a      	beq.n	800a350 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a322:	e853 3f00 	ldrex	r3, [r3]
 800a326:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a32a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a32e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	461a      	mov	r2, r3
 800a338:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a33c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a33e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a342:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a34a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e4      	bne.n	800a31a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3308      	adds	r3, #8
 800a356:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a35a:	e853 3f00 	ldrex	r3, [r3]
 800a35e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a366:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3308      	adds	r3, #8
 800a36e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a370:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a372:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a374:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a376:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a378:	e841 2300 	strex	r3, r2, [r1]
 800a37c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a37e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1e5      	bne.n	800a350 <UART_Start_Receive_IT+0x160>
 800a384:	e046      	b.n	800a414 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a38e:	d107      	bne.n	800a3a0 <UART_Start_Receive_IT+0x1b0>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d103      	bne.n	800a3a0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	4a24      	ldr	r2, [pc, #144]	@ (800a42c <UART_Start_Receive_IT+0x23c>)
 800a39c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a39e:	e002      	b.n	800a3a6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4a23      	ldr	r2, [pc, #140]	@ (800a430 <UART_Start_Receive_IT+0x240>)
 800a3a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d019      	beq.n	800a3e2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b6:	e853 3f00 	ldrex	r3, [r3]
 800a3ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3be:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a3c2:	677b      	str	r3, [r7, #116]	@ 0x74
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3ce:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a3d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3d4:	e841 2300 	strex	r3, r2, [r1]
 800a3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1e6      	bne.n	800a3ae <UART_Start_Receive_IT+0x1be>
 800a3e0:	e018      	b.n	800a414 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	e853 3f00 	ldrex	r3, [r3]
 800a3ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	f043 0320 	orr.w	r3, r3, #32
 800a3f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a400:	623b      	str	r3, [r7, #32]
 800a402:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a404:	69f9      	ldr	r1, [r7, #28]
 800a406:	6a3a      	ldr	r2, [r7, #32]
 800a408:	e841 2300 	strex	r3, r2, [r1]
 800a40c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d1e6      	bne.n	800a3e2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	378c      	adds	r7, #140	@ 0x8c
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	0800ac55 	.word	0x0800ac55
 800a428:	0800a8f5 	.word	0x0800a8f5
 800a42c:	0800a73d 	.word	0x0800a73d
 800a430:	0800a585 	.word	0x0800a585

0800a434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a434:	b480      	push	{r7}
 800a436:	b095      	sub	sp, #84	@ 0x54
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a444:	e853 3f00 	ldrex	r3, [r3]
 800a448:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a45a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a45c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a460:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a462:	e841 2300 	strex	r3, r2, [r1]
 800a466:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1e6      	bne.n	800a43c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	3308      	adds	r3, #8
 800a474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a476:	6a3b      	ldr	r3, [r7, #32]
 800a478:	e853 3f00 	ldrex	r3, [r3]
 800a47c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a47e:	69fa      	ldr	r2, [r7, #28]
 800a480:	4b1e      	ldr	r3, [pc, #120]	@ (800a4fc <UART_EndRxTransfer+0xc8>)
 800a482:	4013      	ands	r3, r2
 800a484:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3308      	adds	r3, #8
 800a48c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a48e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a496:	e841 2300 	strex	r3, r2, [r1]
 800a49a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1e5      	bne.n	800a46e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d118      	bne.n	800a4dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	e853 3f00 	ldrex	r3, [r3]
 800a4b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	f023 0310 	bic.w	r3, r3, #16
 800a4be:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4c8:	61bb      	str	r3, [r7, #24]
 800a4ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4cc:	6979      	ldr	r1, [r7, #20]
 800a4ce:	69ba      	ldr	r2, [r7, #24]
 800a4d0:	e841 2300 	strex	r3, r2, [r1]
 800a4d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1e6      	bne.n	800a4aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2220      	movs	r2, #32
 800a4e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a4f0:	bf00      	nop
 800a4f2:	3754      	adds	r7, #84	@ 0x54
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr
 800a4fc:	effffffe 	.word	0xeffffffe

0800a500 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a50c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f7fe fe2a 	bl	8009178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a524:	bf00      	nop
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b088      	sub	sp, #32
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	e853 3f00 	ldrex	r3, [r3]
 800a540:	60bb      	str	r3, [r7, #8]
   return(result);
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a548:	61fb      	str	r3, [r7, #28]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	61bb      	str	r3, [r7, #24]
 800a554:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a556:	6979      	ldr	r1, [r7, #20]
 800a558:	69ba      	ldr	r2, [r7, #24]
 800a55a:	e841 2300 	strex	r3, r2, [r1]
 800a55e:	613b      	str	r3, [r7, #16]
   return(result);
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1e6      	bne.n	800a534 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2220      	movs	r2, #32
 800a56a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f7fe fdf5 	bl	8009164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a57a:	bf00      	nop
 800a57c:	3720      	adds	r7, #32
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
	...

0800a584 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b09c      	sub	sp, #112	@ 0x70
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a592:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a59c:	2b22      	cmp	r3, #34	@ 0x22
 800a59e:	f040 80be 	bne.w	800a71e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a5ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a5b0:	b2d9      	uxtb	r1, r3
 800a5b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5bc:	400a      	ands	r2, r1
 800a5be:	b2d2      	uxtb	r2, r2
 800a5c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5c6:	1c5a      	adds	r2, r3, #1
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f040 80a1 	bne.w	800a72e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5f4:	e853 3f00 	ldrex	r3, [r3]
 800a5f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a5fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a600:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	461a      	mov	r2, r3
 800a608:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a60a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a60c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a610:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a612:	e841 2300 	strex	r3, r2, [r1]
 800a616:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a618:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1e6      	bne.n	800a5ec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	3308      	adds	r3, #8
 800a624:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a628:	e853 3f00 	ldrex	r3, [r3]
 800a62c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a62e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a630:	f023 0301 	bic.w	r3, r3, #1
 800a634:	667b      	str	r3, [r7, #100]	@ 0x64
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3308      	adds	r3, #8
 800a63c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a63e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a640:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a642:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a644:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a646:	e841 2300 	strex	r3, r2, [r1]
 800a64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a64c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1e5      	bne.n	800a61e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2220      	movs	r2, #32
 800a656:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a33      	ldr	r2, [pc, #204]	@ (800a738 <UART_RxISR_8BIT+0x1b4>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d01f      	beq.n	800a6b0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d018      	beq.n	800a6b0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a686:	e853 3f00 	ldrex	r3, [r3]
 800a68a:	623b      	str	r3, [r7, #32]
   return(result);
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a692:	663b      	str	r3, [r7, #96]	@ 0x60
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	461a      	mov	r2, r3
 800a69a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a69c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a69e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6a4:	e841 2300 	strex	r3, r2, [r1]
 800a6a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1e6      	bne.n	800a67e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d12e      	bne.n	800a716 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	e853 3f00 	ldrex	r3, [r3]
 800a6ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f023 0310 	bic.w	r3, r3, #16
 800a6d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	461a      	mov	r2, r3
 800a6da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6dc:	61fb      	str	r3, [r7, #28]
 800a6de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e0:	69b9      	ldr	r1, [r7, #24]
 800a6e2:	69fa      	ldr	r2, [r7, #28]
 800a6e4:	e841 2300 	strex	r3, r2, [r1]
 800a6e8:	617b      	str	r3, [r7, #20]
   return(result);
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d1e6      	bne.n	800a6be <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	69db      	ldr	r3, [r3, #28]
 800a6f6:	f003 0310 	and.w	r3, r3, #16
 800a6fa:	2b10      	cmp	r3, #16
 800a6fc:	d103      	bne.n	800a706 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2210      	movs	r2, #16
 800a704:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a70c:	4619      	mov	r1, r3
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7fe fd3c 	bl	800918c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a714:	e00b      	b.n	800a72e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7f6 fe72 	bl	8001400 <HAL_UART_RxCpltCallback>
}
 800a71c:	e007      	b.n	800a72e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	699a      	ldr	r2, [r3, #24]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f042 0208 	orr.w	r2, r2, #8
 800a72c:	619a      	str	r2, [r3, #24]
}
 800a72e:	bf00      	nop
 800a730:	3770      	adds	r7, #112	@ 0x70
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	58000c00 	.word	0x58000c00

0800a73c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b09c      	sub	sp, #112	@ 0x70
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a74a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a754:	2b22      	cmp	r3, #34	@ 0x22
 800a756:	f040 80be 	bne.w	800a8d6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a760:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a768:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a76a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a76e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a772:	4013      	ands	r3, r2
 800a774:	b29a      	uxth	r2, r3
 800a776:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a778:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a77e:	1c9a      	adds	r2, r3, #2
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	3b01      	subs	r3, #1
 800a78e:	b29a      	uxth	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f040 80a1 	bne.w	800a8e6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7ac:	e853 3f00 	ldrex	r3, [r3]
 800a7b0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a7b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7b8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a7c4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a7c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a7ca:	e841 2300 	strex	r3, r2, [r1]
 800a7ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a7d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1e6      	bne.n	800a7a4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3308      	adds	r3, #8
 800a7dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7e0:	e853 3f00 	ldrex	r3, [r3]
 800a7e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e8:	f023 0301 	bic.w	r3, r3, #1
 800a7ec:	663b      	str	r3, [r7, #96]	@ 0x60
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3308      	adds	r3, #8
 800a7f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a7f6:	643a      	str	r2, [r7, #64]	@ 0x40
 800a7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7fe:	e841 2300 	strex	r3, r2, [r1]
 800a802:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1e5      	bne.n	800a7d6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2220      	movs	r2, #32
 800a80e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a33      	ldr	r2, [pc, #204]	@ (800a8f0 <UART_RxISR_16BIT+0x1b4>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d01f      	beq.n	800a868 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d018      	beq.n	800a868 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83c:	6a3b      	ldr	r3, [r7, #32]
 800a83e:	e853 3f00 	ldrex	r3, [r3]
 800a842:	61fb      	str	r3, [r7, #28]
   return(result);
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a84a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	461a      	mov	r2, r3
 800a852:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a856:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a858:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a85a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a85c:	e841 2300 	strex	r3, r2, [r1]
 800a860:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1e6      	bne.n	800a836 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d12e      	bne.n	800a8ce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	e853 3f00 	ldrex	r3, [r3]
 800a882:	60bb      	str	r3, [r7, #8]
   return(result);
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	f023 0310 	bic.w	r3, r3, #16
 800a88a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	461a      	mov	r2, r3
 800a892:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a894:	61bb      	str	r3, [r7, #24]
 800a896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a898:	6979      	ldr	r1, [r7, #20]
 800a89a:	69ba      	ldr	r2, [r7, #24]
 800a89c:	e841 2300 	strex	r3, r2, [r1]
 800a8a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1e6      	bne.n	800a876 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	69db      	ldr	r3, [r3, #28]
 800a8ae:	f003 0310 	and.w	r3, r3, #16
 800a8b2:	2b10      	cmp	r3, #16
 800a8b4:	d103      	bne.n	800a8be <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2210      	movs	r2, #16
 800a8bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7fe fc60 	bl	800918c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a8cc:	e00b      	b.n	800a8e6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f7f6 fd96 	bl	8001400 <HAL_UART_RxCpltCallback>
}
 800a8d4:	e007      	b.n	800a8e6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	699a      	ldr	r2, [r3, #24]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f042 0208 	orr.w	r2, r2, #8
 800a8e4:	619a      	str	r2, [r3, #24]
}
 800a8e6:	bf00      	nop
 800a8e8:	3770      	adds	r7, #112	@ 0x70
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	58000c00 	.word	0x58000c00

0800a8f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b0ac      	sub	sp, #176	@ 0xb0
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a902:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a92a:	2b22      	cmp	r3, #34	@ 0x22
 800a92c:	f040 8180 	bne.w	800ac30 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a936:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a93a:	e123      	b.n	800ab84 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a942:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a946:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a94a:	b2d9      	uxtb	r1, r3
 800a94c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a950:	b2da      	uxtb	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a956:	400a      	ands	r2, r1
 800a958:	b2d2      	uxtb	r2, r2
 800a95a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	3b01      	subs	r3, #1
 800a970:	b29a      	uxth	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a986:	f003 0307 	and.w	r3, r3, #7
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d053      	beq.n	800aa36 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a98e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	2b00      	cmp	r3, #0
 800a998:	d011      	beq.n	800a9be <UART_RxISR_8BIT_FIFOEN+0xca>
 800a99a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a99e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00b      	beq.n	800a9be <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9b4:	f043 0201 	orr.w	r2, r3, #1
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9c2:	f003 0302 	and.w	r3, r3, #2
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d011      	beq.n	800a9ee <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a9ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00b      	beq.n	800a9ee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2202      	movs	r2, #2
 800a9dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9e4:	f043 0204 	orr.w	r2, r3, #4
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9f2:	f003 0304 	and.w	r3, r3, #4
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d011      	beq.n	800aa1e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a9fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9fe:	f003 0301 	and.w	r3, r3, #1
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00b      	beq.n	800aa1e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2204      	movs	r2, #4
 800aa0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa14:	f043 0202 	orr.w	r2, r3, #2
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d006      	beq.n	800aa36 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7fe fba5 	bl	8009178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f040 80a0 	bne.w	800ab84 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aa4c:	e853 3f00 	ldrex	r3, [r3]
 800aa50:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800aa52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	461a      	mov	r2, r3
 800aa62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aa66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aa68:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800aa6c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800aa6e:	e841 2300 	strex	r3, r2, [r1]
 800aa72:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800aa74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1e4      	bne.n	800aa44 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3308      	adds	r3, #8
 800aa80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa84:	e853 3f00 	ldrex	r3, [r3]
 800aa88:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800aa8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa8c:	4b6e      	ldr	r3, [pc, #440]	@ (800ac48 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800aa8e:	4013      	ands	r3, r2
 800aa90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	3308      	adds	r3, #8
 800aa9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aa9e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800aaa0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800aaa4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aaa6:	e841 2300 	strex	r3, r2, [r1]
 800aaaa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800aaac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1e3      	bne.n	800aa7a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2220      	movs	r2, #32
 800aab6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a60      	ldr	r2, [pc, #384]	@ (800ac4c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d021      	beq.n	800ab14 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d01a      	beq.n	800ab14 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aae6:	e853 3f00 	ldrex	r3, [r3]
 800aaea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800aaec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aaee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aaf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	461a      	mov	r2, r3
 800aafc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ab00:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab02:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab04:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ab06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab08:	e841 2300 	strex	r3, r2, [r1]
 800ab0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ab0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1e4      	bne.n	800aade <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d130      	bne.n	800ab7e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab2a:	e853 3f00 	ldrex	r3, [r3]
 800ab2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab32:	f023 0310 	bic.w	r3, r3, #16
 800ab36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab44:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab4c:	e841 2300 	strex	r3, r2, [r1]
 800ab50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1e4      	bne.n	800ab22 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	69db      	ldr	r3, [r3, #28]
 800ab5e:	f003 0310 	and.w	r3, r3, #16
 800ab62:	2b10      	cmp	r3, #16
 800ab64:	d103      	bne.n	800ab6e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2210      	movs	r2, #16
 800ab6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab74:	4619      	mov	r1, r3
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7fe fb08 	bl	800918c <HAL_UARTEx_RxEventCallback>
 800ab7c:	e002      	b.n	800ab84 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7f6 fc3e 	bl	8001400 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab84:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d006      	beq.n	800ab9a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ab8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab90:	f003 0320 	and.w	r3, r3, #32
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f47f aed1 	bne.w	800a93c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aba0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aba4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d049      	beq.n	800ac40 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800abb2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d242      	bcs.n	800ac40 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	3308      	adds	r3, #8
 800abc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc2:	6a3b      	ldr	r3, [r7, #32]
 800abc4:	e853 3f00 	ldrex	r3, [r3]
 800abc8:	61fb      	str	r3, [r7, #28]
   return(result);
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3308      	adds	r3, #8
 800abda:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800abde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800abe0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abe4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abe6:	e841 2300 	strex	r3, r2, [r1]
 800abea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1e3      	bne.n	800abba <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a16      	ldr	r2, [pc, #88]	@ (800ac50 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800abf6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	e853 3f00 	ldrex	r3, [r3]
 800ac04:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	f043 0320 	orr.w	r3, r3, #32
 800ac0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	461a      	mov	r2, r3
 800ac16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ac1a:	61bb      	str	r3, [r7, #24]
 800ac1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1e:	6979      	ldr	r1, [r7, #20]
 800ac20:	69ba      	ldr	r2, [r7, #24]
 800ac22:	e841 2300 	strex	r3, r2, [r1]
 800ac26:	613b      	str	r3, [r7, #16]
   return(result);
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1e4      	bne.n	800abf8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac2e:	e007      	b.n	800ac40 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	699a      	ldr	r2, [r3, #24]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f042 0208 	orr.w	r2, r2, #8
 800ac3e:	619a      	str	r2, [r3, #24]
}
 800ac40:	bf00      	nop
 800ac42:	37b0      	adds	r7, #176	@ 0xb0
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	effffffe 	.word	0xeffffffe
 800ac4c:	58000c00 	.word	0x58000c00
 800ac50:	0800a585 	.word	0x0800a585

0800ac54 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b0ae      	sub	sp, #184	@ 0xb8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ac62:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	69db      	ldr	r3, [r3, #28]
 800ac6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac8a:	2b22      	cmp	r3, #34	@ 0x22
 800ac8c:	f040 8184 	bne.w	800af98 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ac96:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ac9a:	e127      	b.n	800aeec <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800acae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800acb2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800acb6:	4013      	ands	r3, r2
 800acb8:	b29a      	uxth	r2, r3
 800acba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800acbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acc4:	1c9a      	adds	r2, r3, #2
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	3b01      	subs	r3, #1
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	69db      	ldr	r3, [r3, #28]
 800ace2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ace6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800acea:	f003 0307 	and.w	r3, r3, #7
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d053      	beq.n	800ad9a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800acf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d011      	beq.n	800ad22 <UART_RxISR_16BIT_FIFOEN+0xce>
 800acfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00b      	beq.n	800ad22 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad18:	f043 0201 	orr.w	r2, r3, #1
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad26:	f003 0302 	and.w	r3, r3, #2
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d011      	beq.n	800ad52 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ad2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00b      	beq.n	800ad52 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2202      	movs	r2, #2
 800ad40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad48:	f043 0204 	orr.w	r2, r3, #4
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad56:	f003 0304 	and.w	r3, r3, #4
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d011      	beq.n	800ad82 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ad5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d00b      	beq.n	800ad82 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2204      	movs	r2, #4
 800ad70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad78:	f043 0202 	orr.w	r2, r3, #2
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d006      	beq.n	800ad9a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7fe f9f3 	bl	8009178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f040 80a2 	bne.w	800aeec <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800adb0:	e853 3f00 	ldrex	r3, [r3]
 800adb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800adb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800adb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	461a      	mov	r2, r3
 800adc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800adca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800adce:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800add2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800add6:	e841 2300 	strex	r3, r2, [r1]
 800adda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800addc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1e2      	bne.n	800ada8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	3308      	adds	r3, #8
 800ade8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adec:	e853 3f00 	ldrex	r3, [r3]
 800adf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800adf2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800adf4:	4b6e      	ldr	r3, [pc, #440]	@ (800afb0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800adf6:	4013      	ands	r3, r2
 800adf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	3308      	adds	r3, #8
 800ae02:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ae06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ae08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ae0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ae0e:	e841 2300 	strex	r3, r2, [r1]
 800ae12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ae14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d1e3      	bne.n	800ade2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2220      	movs	r2, #32
 800ae1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a60      	ldr	r2, [pc, #384]	@ (800afb4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d021      	beq.n	800ae7c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d01a      	beq.n	800ae7c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae4e:	e853 3f00 	ldrex	r3, [r3]
 800ae52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	461a      	mov	r2, r3
 800ae64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ae68:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae6a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae70:	e841 2300 	strex	r3, r2, [r1]
 800ae74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1e4      	bne.n	800ae46 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d130      	bne.n	800aee6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae92:	e853 3f00 	ldrex	r3, [r3]
 800ae96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae9a:	f023 0310 	bic.w	r3, r3, #16
 800ae9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aeac:	647b      	str	r3, [r7, #68]	@ 0x44
 800aeae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aeb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aeb4:	e841 2300 	strex	r3, r2, [r1]
 800aeb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aeba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1e4      	bne.n	800ae8a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	69db      	ldr	r3, [r3, #28]
 800aec6:	f003 0310 	and.w	r3, r3, #16
 800aeca:	2b10      	cmp	r3, #16
 800aecc:	d103      	bne.n	800aed6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2210      	movs	r2, #16
 800aed4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aedc:	4619      	mov	r1, r3
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f7fe f954 	bl	800918c <HAL_UARTEx_RxEventCallback>
 800aee4:	e002      	b.n	800aeec <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7f6 fa8a 	bl	8001400 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aeec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d006      	beq.n	800af02 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800aef4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aef8:	f003 0320 	and.w	r3, r3, #32
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f47f aecd 	bne.w	800ac9c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af08:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800af0c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800af10:	2b00      	cmp	r3, #0
 800af12:	d049      	beq.n	800afa8 <UART_RxISR_16BIT_FIFOEN+0x354>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800af1a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800af1e:	429a      	cmp	r2, r3
 800af20:	d242      	bcs.n	800afa8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	3308      	adds	r3, #8
 800af28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2c:	e853 3f00 	ldrex	r3, [r3]
 800af30:	623b      	str	r3, [r7, #32]
   return(result);
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	3308      	adds	r3, #8
 800af42:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800af46:	633a      	str	r2, [r7, #48]	@ 0x30
 800af48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af4e:	e841 2300 	strex	r3, r2, [r1]
 800af52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1e3      	bne.n	800af22 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a16      	ldr	r2, [pc, #88]	@ (800afb8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800af5e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	e853 3f00 	ldrex	r3, [r3]
 800af6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f043 0320 	orr.w	r3, r3, #32
 800af74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	461a      	mov	r2, r3
 800af7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800af82:	61fb      	str	r3, [r7, #28]
 800af84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af86:	69b9      	ldr	r1, [r7, #24]
 800af88:	69fa      	ldr	r2, [r7, #28]
 800af8a:	e841 2300 	strex	r3, r2, [r1]
 800af8e:	617b      	str	r3, [r7, #20]
   return(result);
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1e4      	bne.n	800af60 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800af96:	e007      	b.n	800afa8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	699a      	ldr	r2, [r3, #24]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f042 0208 	orr.w	r2, r2, #8
 800afa6:	619a      	str	r2, [r3, #24]
}
 800afa8:	bf00      	nop
 800afaa:	37b8      	adds	r7, #184	@ 0xb8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	effffffe 	.word	0xeffffffe
 800afb4:	58000c00 	.word	0x58000c00
 800afb8:	0800a73d 	.word	0x0800a73d

0800afbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800afd8:	bf00      	nop
 800afda:	370c      	adds	r7, #12
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b006:	2b01      	cmp	r3, #1
 800b008:	d101      	bne.n	800b00e <HAL_UARTEx_DisableFifoMode+0x16>
 800b00a:	2302      	movs	r3, #2
 800b00c:	e027      	b.n	800b05e <HAL_UARTEx_DisableFifoMode+0x66>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2201      	movs	r2, #1
 800b012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2224      	movs	r2, #36	@ 0x24
 800b01a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f022 0201 	bic.w	r2, r2, #1
 800b034:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b03c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2220      	movs	r2, #32
 800b050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b084      	sub	sp, #16
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d101      	bne.n	800b082 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b07e:	2302      	movs	r3, #2
 800b080:	e02d      	b.n	800b0de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2201      	movs	r2, #1
 800b086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2224      	movs	r2, #36	@ 0x24
 800b08e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f022 0201 	bic.w	r2, r2, #1
 800b0a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	683a      	ldr	r2, [r7, #0]
 800b0ba:	430a      	orrs	r2, r1
 800b0bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f850 	bl	800b164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2220      	movs	r2, #32
 800b0d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b084      	sub	sp, #16
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d101      	bne.n	800b0fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b0fa:	2302      	movs	r3, #2
 800b0fc:	e02d      	b.n	800b15a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2201      	movs	r2, #1
 800b102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2224      	movs	r2, #36	@ 0x24
 800b10a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f022 0201 	bic.w	r2, r2, #1
 800b124:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	430a      	orrs	r2, r1
 800b138:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f812 	bl	800b164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2220      	movs	r2, #32
 800b14c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b170:	2b00      	cmp	r3, #0
 800b172:	d108      	bne.n	800b186 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b184:	e031      	b.n	800b1ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b186:	2310      	movs	r3, #16
 800b188:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b18a:	2310      	movs	r3, #16
 800b18c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	0e5b      	lsrs	r3, r3, #25
 800b196:	b2db      	uxtb	r3, r3
 800b198:	f003 0307 	and.w	r3, r3, #7
 800b19c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	0f5b      	lsrs	r3, r3, #29
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	f003 0307 	and.w	r3, r3, #7
 800b1ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1ae:	7bbb      	ldrb	r3, [r7, #14]
 800b1b0:	7b3a      	ldrb	r2, [r7, #12]
 800b1b2:	4911      	ldr	r1, [pc, #68]	@ (800b1f8 <UARTEx_SetNbDataToProcess+0x94>)
 800b1b4:	5c8a      	ldrb	r2, [r1, r2]
 800b1b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b1ba:	7b3a      	ldrb	r2, [r7, #12]
 800b1bc:	490f      	ldr	r1, [pc, #60]	@ (800b1fc <UARTEx_SetNbDataToProcess+0x98>)
 800b1be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1cc:	7bfb      	ldrb	r3, [r7, #15]
 800b1ce:	7b7a      	ldrb	r2, [r7, #13]
 800b1d0:	4909      	ldr	r1, [pc, #36]	@ (800b1f8 <UARTEx_SetNbDataToProcess+0x94>)
 800b1d2:	5c8a      	ldrb	r2, [r1, r2]
 800b1d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b1d8:	7b7a      	ldrb	r2, [r7, #13]
 800b1da:	4908      	ldr	r1, [pc, #32]	@ (800b1fc <UARTEx_SetNbDataToProcess+0x98>)
 800b1dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1de:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1e2:	b29a      	uxth	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b1ea:	bf00      	nop
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	08013188 	.word	0x08013188
 800b1fc:	08013190 	.word	0x08013190

0800b200 <Data_Analyse>:
/**
 * @brief 数据解析函数  如更换MCU平台或更换软件库，只需将串口接收到的值传入该函数即可解析
 * @param  rec 串口接收到的字节数据
 */
void Data_Analyse(uint8_t rec)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	4603      	mov	r3, r0
 800b208:	71fb      	strb	r3, [r7, #7]
		float ActVal[6];
	} posture;
	static uint8_t count = 0;
	static uint8_t i = 0;

	ch = rec;
 800b20a:	4a48      	ldr	r2, [pc, #288]	@ (800b32c <Data_Analyse+0x12c>)
 800b20c:	79fb      	ldrb	r3, [r7, #7]
 800b20e:	7013      	strb	r3, [r2, #0]
//	HAL_UART_Transmit(&huart10, &ch, 1, 0xff);
//	HAL_UART_Transmit(&huart10, (uint8_t*) ch, 1, 0xff);
	switch (count)
 800b210:	4b47      	ldr	r3, [pc, #284]	@ (800b330 <Data_Analyse+0x130>)
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	2b04      	cmp	r3, #4
 800b216:	d87c      	bhi.n	800b312 <Data_Analyse+0x112>
 800b218:	a201      	add	r2, pc, #4	@ (adr r2, 800b220 <Data_Analyse+0x20>)
 800b21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21e:	bf00      	nop
 800b220:	0800b235 	.word	0x0800b235
 800b224:	0800b253 	.word	0x0800b253
 800b228:	0800b27f 	.word	0x0800b27f
 800b22c:	0800b2b5 	.word	0x0800b2b5
 800b230:	0800b2d3 	.word	0x0800b2d3
	{
	case 0:
		if (ch == 0x0d)
 800b234:	4b3d      	ldr	r3, [pc, #244]	@ (800b32c <Data_Analyse+0x12c>)
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	2b0d      	cmp	r3, #13
 800b23a:	d106      	bne.n	800b24a <Data_Analyse+0x4a>
			count++;
 800b23c:	4b3c      	ldr	r3, [pc, #240]	@ (800b330 <Data_Analyse+0x130>)
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	3301      	adds	r3, #1
 800b242:	b2da      	uxtb	r2, r3
 800b244:	4b3a      	ldr	r3, [pc, #232]	@ (800b330 <Data_Analyse+0x130>)
 800b246:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b248:	e06a      	b.n	800b320 <Data_Analyse+0x120>
			count = 0;
 800b24a:	4b39      	ldr	r3, [pc, #228]	@ (800b330 <Data_Analyse+0x130>)
 800b24c:	2200      	movs	r2, #0
 800b24e:	701a      	strb	r2, [r3, #0]
		break;
 800b250:	e066      	b.n	800b320 <Data_Analyse+0x120>
	case 1:
		if (ch == 0x0a)
 800b252:	4b36      	ldr	r3, [pc, #216]	@ (800b32c <Data_Analyse+0x12c>)
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	2b0a      	cmp	r3, #10
 800b258:	d109      	bne.n	800b26e <Data_Analyse+0x6e>
		{
			i = 0;
 800b25a:	4b36      	ldr	r3, [pc, #216]	@ (800b334 <Data_Analyse+0x134>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	701a      	strb	r2, [r3, #0]
			count++;
 800b260:	4b33      	ldr	r3, [pc, #204]	@ (800b330 <Data_Analyse+0x130>)
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	3301      	adds	r3, #1
 800b266:	b2da      	uxtb	r2, r3
 800b268:	4b31      	ldr	r3, [pc, #196]	@ (800b330 <Data_Analyse+0x130>)
 800b26a:	701a      	strb	r2, [r3, #0]
		}
		else if (ch == 0x0d)
			;
		else
			count = 0;
		break;
 800b26c:	e055      	b.n	800b31a <Data_Analyse+0x11a>
		else if (ch == 0x0d)
 800b26e:	4b2f      	ldr	r3, [pc, #188]	@ (800b32c <Data_Analyse+0x12c>)
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	2b0d      	cmp	r3, #13
 800b274:	d051      	beq.n	800b31a <Data_Analyse+0x11a>
			count = 0;
 800b276:	4b2e      	ldr	r3, [pc, #184]	@ (800b330 <Data_Analyse+0x130>)
 800b278:	2200      	movs	r2, #0
 800b27a:	701a      	strb	r2, [r3, #0]
		break;
 800b27c:	e04d      	b.n	800b31a <Data_Analyse+0x11a>
	case 2:
		posture.date[i] = ch;
 800b27e:	4b2d      	ldr	r3, [pc, #180]	@ (800b334 <Data_Analyse+0x134>)
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	461a      	mov	r2, r3
 800b284:	4b29      	ldr	r3, [pc, #164]	@ (800b32c <Data_Analyse+0x12c>)
 800b286:	7819      	ldrb	r1, [r3, #0]
 800b288:	4b2b      	ldr	r3, [pc, #172]	@ (800b338 <Data_Analyse+0x138>)
 800b28a:	5499      	strb	r1, [r3, r2]
		i++;
 800b28c:	4b29      	ldr	r3, [pc, #164]	@ (800b334 <Data_Analyse+0x134>)
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	3301      	adds	r3, #1
 800b292:	b2da      	uxtb	r2, r3
 800b294:	4b27      	ldr	r3, [pc, #156]	@ (800b334 <Data_Analyse+0x134>)
 800b296:	701a      	strb	r2, [r3, #0]
		if (i >= 24)
 800b298:	4b26      	ldr	r3, [pc, #152]	@ (800b334 <Data_Analyse+0x134>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	2b17      	cmp	r3, #23
 800b29e:	d93e      	bls.n	800b31e <Data_Analyse+0x11e>
		{
			i = 0;
 800b2a0:	4b24      	ldr	r3, [pc, #144]	@ (800b334 <Data_Analyse+0x134>)
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	701a      	strb	r2, [r3, #0]
			count++;
 800b2a6:	4b22      	ldr	r3, [pc, #136]	@ (800b330 <Data_Analyse+0x130>)
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	b2da      	uxtb	r2, r3
 800b2ae:	4b20      	ldr	r3, [pc, #128]	@ (800b330 <Data_Analyse+0x130>)
 800b2b0:	701a      	strb	r2, [r3, #0]
		}
		break;
 800b2b2:	e034      	b.n	800b31e <Data_Analyse+0x11e>
	case 3:
		if (ch == 0x0a)
 800b2b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b32c <Data_Analyse+0x12c>)
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	2b0a      	cmp	r3, #10
 800b2ba:	d106      	bne.n	800b2ca <Data_Analyse+0xca>
			count++;
 800b2bc:	4b1c      	ldr	r3, [pc, #112]	@ (800b330 <Data_Analyse+0x130>)
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	b2da      	uxtb	r2, r3
 800b2c4:	4b1a      	ldr	r3, [pc, #104]	@ (800b330 <Data_Analyse+0x130>)
 800b2c6:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b2c8:	e02a      	b.n	800b320 <Data_Analyse+0x120>
			count = 0;
 800b2ca:	4b19      	ldr	r3, [pc, #100]	@ (800b330 <Data_Analyse+0x130>)
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	701a      	strb	r2, [r3, #0]
		break;
 800b2d0:	e026      	b.n	800b320 <Data_Analyse+0x120>
	case 4:
		if (ch == 0x0d)
 800b2d2:	4b16      	ldr	r3, [pc, #88]	@ (800b32c <Data_Analyse+0x12c>)
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	2b0d      	cmp	r3, #13
 800b2d8:	d117      	bne.n	800b30a <Data_Analyse+0x10a>
		{
			zangle = posture.ActVal[0];
 800b2da:	4b17      	ldr	r3, [pc, #92]	@ (800b338 <Data_Analyse+0x138>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a17      	ldr	r2, [pc, #92]	@ (800b33c <Data_Analyse+0x13c>)
 800b2e0:	6013      	str	r3, [r2, #0]
			xangle = posture.ActVal[1];
 800b2e2:	4b15      	ldr	r3, [pc, #84]	@ (800b338 <Data_Analyse+0x138>)
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	4a16      	ldr	r2, [pc, #88]	@ (800b340 <Data_Analyse+0x140>)
 800b2e8:	6013      	str	r3, [r2, #0]
			yangle = posture.ActVal[2];
 800b2ea:	4b13      	ldr	r3, [pc, #76]	@ (800b338 <Data_Analyse+0x138>)
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	4a15      	ldr	r2, [pc, #84]	@ (800b344 <Data_Analyse+0x144>)
 800b2f0:	6013      	str	r3, [r2, #0]
			pos_x = posture.ActVal[3];
 800b2f2:	4b11      	ldr	r3, [pc, #68]	@ (800b338 <Data_Analyse+0x138>)
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	4a14      	ldr	r2, [pc, #80]	@ (800b348 <Data_Analyse+0x148>)
 800b2f8:	6013      	str	r3, [r2, #0]
			pos_y = posture.ActVal[4];
 800b2fa:	4b0f      	ldr	r3, [pc, #60]	@ (800b338 <Data_Analyse+0x138>)
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	4a13      	ldr	r2, [pc, #76]	@ (800b34c <Data_Analyse+0x14c>)
 800b300:	6013      	str	r3, [r2, #0]
			w_z = posture.ActVal[5];
 800b302:	4b0d      	ldr	r3, [pc, #52]	@ (800b338 <Data_Analyse+0x138>)
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	4a12      	ldr	r2, [pc, #72]	@ (800b350 <Data_Analyse+0x150>)
 800b308:	6013      	str	r3, [r2, #0]
		}
		count = 0;
 800b30a:	4b09      	ldr	r3, [pc, #36]	@ (800b330 <Data_Analyse+0x130>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	701a      	strb	r2, [r3, #0]
		break;
 800b310:	e006      	b.n	800b320 <Data_Analyse+0x120>
	default:
		count = 0;
 800b312:	4b07      	ldr	r3, [pc, #28]	@ (800b330 <Data_Analyse+0x130>)
 800b314:	2200      	movs	r2, #0
 800b316:	701a      	strb	r2, [r3, #0]
		break;
 800b318:	e002      	b.n	800b320 <Data_Analyse+0x120>
		break;
 800b31a:	bf00      	nop
 800b31c:	e000      	b.n	800b320 <Data_Analyse+0x120>
		break;
 800b31e:	bf00      	nop
	}
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	24000ac4 	.word	0x24000ac4
 800b330:	24000ac5 	.word	0x24000ac5
 800b334:	24000ac6 	.word	0x24000ac6
 800b338:	24000ac8 	.word	0x24000ac8
 800b33c:	24000ab4 	.word	0x24000ab4
 800b340:	24000ab8 	.word	0x24000ab8
 800b344:	24000abc 	.word	0x24000abc
 800b348:	24000aac 	.word	0x24000aac
 800b34c:	24000ab0 	.word	0x24000ab0
 800b350:	24000ac0 	.word	0x24000ac0

0800b354 <Move_Arm>:
extern float tx_target;
extern float ty_target;

//控制单个舵机运动
//参数：sevoID:舵机ID，Position:转动角度（这里以270°为例）,Time:转动时间
void Move_Arm(uint8_t servoID, int16_t Position, uint16_t Time) {
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	4603      	mov	r3, r0
 800b35c:	71fb      	strb	r3, [r7, #7]
 800b35e:	460b      	mov	r3, r1
 800b360:	80bb      	strh	r3, [r7, #4]
 800b362:	4613      	mov	r3, r2
 800b364:	807b      	strh	r3, [r7, #2]
	uint8_t TxBuf[11];
	if (servoID > 31 || !(Time > 0) || Position > 32767) {
 800b366:	79fb      	ldrb	r3, [r7, #7]
 800b368:	2b1f      	cmp	r3, #31
 800b36a:	d82b      	bhi.n	800b3c4 <Move_Arm+0x70>
 800b36c:	887b      	ldrh	r3, [r7, #2]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d028      	beq.n	800b3c4 <Move_Arm+0x70>
		return;
	}
	TxBuf[0] = FRAME_HEADER;
 800b372:	2355      	movs	r3, #85	@ 0x55
 800b374:	733b      	strb	r3, [r7, #12]
	TxBuf[1] = FRAME_HEADER;
 800b376:	2355      	movs	r3, #85	@ 0x55
 800b378:	737b      	strb	r3, [r7, #13]
	TxBuf[2] = 8;
 800b37a:	2308      	movs	r3, #8
 800b37c:	73bb      	strb	r3, [r7, #14]
	TxBuf[3] = CMD_SERVO_MOVE;
 800b37e:	2303      	movs	r3, #3
 800b380:	73fb      	strb	r3, [r7, #15]
	TxBuf[4] = 1;
 800b382:	2301      	movs	r3, #1
 800b384:	743b      	strb	r3, [r7, #16]
	TxBuf[5] = (uint8_t) Time;
 800b386:	887b      	ldrh	r3, [r7, #2]
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	747b      	strb	r3, [r7, #17]
	TxBuf[6] = (uint8_t) (Time >> 8);
 800b38c:	887b      	ldrh	r3, [r7, #2]
 800b38e:	0a1b      	lsrs	r3, r3, #8
 800b390:	b29b      	uxth	r3, r3
 800b392:	b2db      	uxtb	r3, r3
 800b394:	74bb      	strb	r3, [r7, #18]
	TxBuf[7] = servoID;
 800b396:	79fb      	ldrb	r3, [r7, #7]
 800b398:	74fb      	strb	r3, [r7, #19]
	TxBuf[8] = (uint8_t) Position;
 800b39a:	88bb      	ldrh	r3, [r7, #4]
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	753b      	strb	r3, [r7, #20]
	TxBuf[9] = (uint8_t) (Position >> 8);
 800b3a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b3a4:	121b      	asrs	r3, r3, #8
 800b3a6:	b21b      	sxth	r3, r3
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&jixiebi_usart, TxBuf, 10, 0xffff);
 800b3ac:	f107 010c 	add.w	r1, r7, #12
 800b3b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b3b4:	220a      	movs	r2, #10
 800b3b6:	4805      	ldr	r0, [pc, #20]	@ (800b3cc <Move_Arm+0x78>)
 800b3b8:	f7fd f978 	bl	80086ac <HAL_UART_Transmit>
	HAL_Delay(5);
 800b3bc:	2005      	movs	r0, #5
 800b3be:	f7f7 fc11 	bl	8002be4 <HAL_Delay>
 800b3c2:	e000      	b.n	800b3c6 <Move_Arm+0x72>
		return;
 800b3c4:	bf00      	nop

}
 800b3c6:	3718      	adds	r7, #24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	24000608 	.word	0x24000608

0800b3d0 <catch_Frist>:

}
//步进上升1800  下降1800
extern float x, y;
void catch_Frist(uint16_t Pos1, uint16_t Pos2) //5400
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	460a      	mov	r2, r1
 800b3da:	80fb      	strh	r3, [r7, #6]
 800b3dc:	4613      	mov	r3, r2
 800b3de:	80bb      	strh	r3, [r7, #4]
	WritePosEx(0, Pos1, 500, 50); //物料底盘移动
 800b3e0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b3e4:	2332      	movs	r3, #50	@ 0x32
 800b3e6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	f002 fbb2 	bl	800db54 <WritePosEx>

	Move_Arm(1, Arm_close, time); //爪子闭合
 800b3f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b3f4:	2114      	movs	r1, #20
 800b3f6:	2001      	movs	r0, #1
 800b3f8:	f7ff ffac 	bl	800b354 <Move_Arm>
	HAL_Delay(time);
 800b3fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b400:	f7f7 fbf0 	bl	8002be4 <HAL_Delay>
	Drop_Location_Sheng(Emm_Speed, Emm_Acc, 500);
 800b404:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b408:	2132      	movs	r1, #50	@ 0x32
 800b40a:	2032      	movs	r0, #50	@ 0x32
 800b40c:	f001 faf0 	bl	800c9f0 <Drop_Location_Sheng>
//	HAL_Delay(3000);
	WritePosEx(1, Pos2, 500, 50); //爪子底盘向左
 800b410:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b414:	2332      	movs	r3, #50	@ 0x32
 800b416:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b41a:	2001      	movs	r0, #1
 800b41c:	f002 fb9a 	bl	800db54 <WritePosEx>
	HAL_Delay(3000);
 800b420:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800b424:	f7f7 fbde 	bl	8002be4 <HAL_Delay>
//	{
//		WritePosEx(1, 4045, 500, 50); //爪子底盘向左
//		HAL_Delay(1500);
//		Grab_count--;
//	}
	Move_Arm(6, 550, time); //爪子下降
 800b428:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b42c:	f240 2126 	movw	r1, #550	@ 0x226
 800b430:	2006      	movs	r0, #6
 800b432:	f7ff ff8f 	bl	800b354 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 4500);
 800b436:	f241 1294 	movw	r2, #4500	@ 0x1194
 800b43a:	2132      	movs	r1, #50	@ 0x32
 800b43c:	2032      	movs	r0, #50	@ 0x32
 800b43e:	f001 fa93 	bl	800c968 <Drop_Location_jiang>
	Move_Arm(1, 190, time); //爪子张开
 800b442:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b446:	21be      	movs	r1, #190	@ 0xbe
 800b448:	2001      	movs	r0, #1
 800b44a:	f7ff ff83 	bl	800b354 <Move_Arm>
	HAL_Delay(time);
 800b44e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b452:	f7f7 fbc7 	bl	8002be4 <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b456:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b45a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b45e:	2006      	movs	r0, #6
 800b460:	f7ff ff78 	bl	800b354 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 500);
 800b464:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b468:	2132      	movs	r1, #50	@ 0x32
 800b46a:	2032      	movs	r0, #50	@ 0x32
 800b46c:	f001 fa7c 	bl	800c968 <Drop_Location_jiang>

	WritePosEx(1, 4050, 500, 50); //爪子底盘向左
 800b470:	2332      	movs	r3, #50	@ 0x32
 800b472:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b476:	f640 71d2 	movw	r1, #4050	@ 0xfd2
 800b47a:	2001      	movs	r0, #1
 800b47c:	f002 fb6a 	bl	800db54 <WritePosEx>
	HAL_Delay(1500);
 800b480:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800b484:	f7f7 fbae 	bl	8002be4 <HAL_Delay>
	Move_Arm(1, 500, time); //爪子张开
 800b488:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b48c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b490:	2001      	movs	r0, #1
 800b492:	f7ff ff5f 	bl	800b354 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 8600);
 800b496:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b49a:	2132      	movs	r1, #50	@ 0x32
 800b49c:	2032      	movs	r0, #50	@ 0x32
 800b49e:	f001 fa63 	bl	800c968 <Drop_Location_jiang>
}
 800b4a2:	bf00      	nop
 800b4a4:	3708      	adds	r7, #8
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <catch_Second>:
//上升1800，下降1800
void catch_Second(uint16_t Pos1, uint16_t Pos2) //从地上抓取到车上
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b082      	sub	sp, #8
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	460a      	mov	r2, r1
 800b4b4:	80fb      	strh	r3, [r7, #6]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	80bb      	strh	r3, [r7, #4]

	WritePosEx(0, Pos1, 500, 50); //物料底盘移动
 800b4ba:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b4be:	2332      	movs	r3, #50	@ 0x32
 800b4c0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	f002 fb45 	bl	800db54 <WritePosEx>
	Move_Arm(1, 500, time); //爪子张开
 800b4ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b4ce:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b4d2:	2001      	movs	r0, #1
 800b4d4:	f7ff ff3e 	bl	800b354 <Move_Arm>
	HAL_Delay(time);
 800b4d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b4dc:	f7f7 fb82 	bl	8002be4 <HAL_Delay>
	Move_Arm(6, 360, time); //爪子下降
 800b4e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b4e4:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800b4e8:	2006      	movs	r0, #6
 800b4ea:	f7ff ff33 	bl	800b354 <Move_Arm>
	HAL_Delay(time);
 800b4ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b4f2:	f7f7 fb77 	bl	8002be4 <HAL_Delay>

	Move_Arm(1, Arm_close, time); //爪子闭合
 800b4f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b4fa:	2114      	movs	r1, #20
 800b4fc:	2001      	movs	r0, #1
 800b4fe:	f7ff ff29 	bl	800b354 <Move_Arm>
	HAL_Delay(time);
 800b502:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b506:	f7f7 fb6d 	bl	8002be4 <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b50a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b50e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b512:	2006      	movs	r0, #6
 800b514:	f7ff ff1e 	bl	800b354 <Move_Arm>
	HAL_Delay(time);
 800b518:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b51c:	f7f7 fb62 	bl	8002be4 <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 1000);
 800b520:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b524:	2132      	movs	r1, #50	@ 0x32
 800b526:	2032      	movs	r0, #50	@ 0x32
 800b528:	f001 fa1e 	bl	800c968 <Drop_Location_jiang>
	WritePosEx(1, Pos2, 500, 50); //爪子底盘向左
 800b52c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b530:	2332      	movs	r3, #50	@ 0x32
 800b532:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b536:	2001      	movs	r0, #1
 800b538:	f002 fb0c 	bl	800db54 <WritePosEx>
	HAL_Delay(5000);
 800b53c:	f241 3088 	movw	r0, #5000	@ 0x1388
 800b540:	f7f7 fb50 	bl	8002be4 <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 5000);
 800b544:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b548:	2132      	movs	r1, #50	@ 0x32
 800b54a:	2032      	movs	r0, #50	@ 0x32
 800b54c:	f001 fa0c 	bl	800c968 <Drop_Location_jiang>
	Move_Arm(6, 550, time); //爪子下降
 800b550:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b554:	f240 2126 	movw	r1, #550	@ 0x226
 800b558:	2006      	movs	r0, #6
 800b55a:	f7ff fefb 	bl	800b354 <Move_Arm>
	HAL_Delay(time);
 800b55e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b562:	f7f7 fb3f 	bl	8002be4 <HAL_Delay>
	Move_Arm(1, 190, time); //爪子张开
 800b566:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b56a:	21be      	movs	r1, #190	@ 0xbe
 800b56c:	2001      	movs	r0, #1
 800b56e:	f7ff fef1 	bl	800b354 <Move_Arm>
	HAL_Delay(time);
 800b572:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b576:	f7f7 fb35 	bl	8002be4 <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b57a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b57e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b582:	2006      	movs	r0, #6
 800b584:	f7ff fee6 	bl	800b354 <Move_Arm>
	HAL_Delay(time);
 800b588:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b58c:	f7f7 fb2a 	bl	8002be4 <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 5000);
 800b590:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b594:	2132      	movs	r1, #50	@ 0x32
 800b596:	2032      	movs	r0, #50	@ 0x32
 800b598:	f001 f9e6 	bl	800c968 <Drop_Location_jiang>
	WritePosEx(1, 4045, 500, 50); //爪子底盘向左
 800b59c:	2332      	movs	r3, #50	@ 0x32
 800b59e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b5a2:	f640 71cd 	movw	r1, #4045	@ 0xfcd
 800b5a6:	2001      	movs	r0, #1
 800b5a8:	f002 fad4 	bl	800db54 <WritePosEx>
	HAL_Delay(1500);
 800b5ac:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800b5b0:	f7f7 fb18 	bl	8002be4 <HAL_Delay>
	Move_Arm(1, 500, time); //爪子张开
 800b5b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b5b8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b5bc:	2001      	movs	r0, #1
 800b5be:	f7ff fec9 	bl	800b354 <Move_Arm>
	HAL_Delay(time);
 800b5c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b5c6:	f7f7 fb0d 	bl	8002be4 <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 11000);
 800b5ca:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800b5ce:	2132      	movs	r1, #50	@ 0x32
 800b5d0:	2032      	movs	r0, #50	@ 0x32
 800b5d2:	f001 f9c9 	bl	800c968 <Drop_Location_jiang>

}
 800b5d6:	bf00      	nop
 800b5d8:	3708      	adds	r7, #8
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
	...

0800b5e0 <Start>:

extern int QR_Flag;
void Start(void) //下降14000
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	af00      	add	r7, sp, #0
//	先将爪子升起来，避免打到TX2或者物料盘
	Drop_Location_jiang(200, 120, 4000);
 800b5e4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800b5e8:	2178      	movs	r1, #120	@ 0x78
 800b5ea:	20c8      	movs	r0, #200	@ 0xc8
 800b5ec:	f001 f9bc 	bl	800c968 <Drop_Location_jiang>
//	将舵机向外转动
	FT_Servo_Orth();
 800b5f0:	f002 fe23 	bl	800e23a <FT_Servo_Orth>
//	HAL_Delay(2000);
	Drop_Location_jiang(200, 120, 12000);
 800b5f4:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800b5f8:	2178      	movs	r1, #120	@ 0x78
 800b5fa:	20c8      	movs	r0, #200	@ 0xc8
 800b5fc:	f001 f9b4 	bl	800c968 <Drop_Location_jiang>
	Move_Arm(1, 500, 300); //爪子张开
 800b600:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b604:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b608:	2001      	movs	r0, #1
 800b60a:	f7ff fea3 	bl	800b354 <Move_Arm>
	Move_Arm(6, 500, 300);
 800b60e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b612:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b616:	2006      	movs	r0, #6
 800b618:	f7ff fe9c 	bl	800b354 <Move_Arm>
	while (!QR_Flag)
 800b61c:	bf00      	nop
 800b61e:	4b09      	ldr	r3, [pc, #36]	@ (800b644 <Start+0x64>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d0fb      	beq.n	800b61e <Start+0x3e>
		;  //等待扫码完成
//	扫码完成后将爪子提起俩
	Drop_Location_jiang(200, 120, 8600);
 800b626:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b62a:	2178      	movs	r1, #120	@ 0x78
 800b62c:	20c8      	movs	r0, #200	@ 0xc8
 800b62e:	f001 f99b 	bl	800c968 <Drop_Location_jiang>
	Move_Arm(6, 900, 300);
 800b632:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b636:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800b63a:	2006      	movs	r0, #6
 800b63c:	f7ff fe8a 	bl	800b354 <Move_Arm>
}
 800b640:	bf00      	nop
 800b642:	bd80      	pop	{r7, pc}
 800b644:	24000484 	.word	0x24000484

0800b648 <put>:
void put(uint16_t Pos1, uint16_t Pos2) {
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	4603      	mov	r3, r0
 800b650:	460a      	mov	r2, r1
 800b652:	80fb      	strh	r3, [r7, #6]
 800b654:	4613      	mov	r3, r2
 800b656:	80bb      	strh	r3, [r7, #4]
	WritePosEx(0, Pos1, 1000, 100); //物料底盘移动
 800b658:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b65c:	2364      	movs	r3, #100	@ 0x64
 800b65e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b662:	2000      	movs	r0, #0
 800b664:	f002 fa76 	bl	800db54 <WritePosEx>
	Move_Arm(6, 1000, time); //爪子上升
 800b668:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b66c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b670:	2006      	movs	r0, #6
 800b672:	f7ff fe6f 	bl	800b354 <Move_Arm>
	Move_Arm(1, 150, time); //爪子张开
 800b676:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b67a:	2196      	movs	r1, #150	@ 0x96
 800b67c:	2001      	movs	r0, #1
 800b67e:	f7ff fe69 	bl	800b354 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 3500);
 800b682:	f640 52ac 	movw	r2, #3500	@ 0xdac
 800b686:	2132      	movs	r1, #50	@ 0x32
 800b688:	2032      	movs	r0, #50	@ 0x32
 800b68a:	f001 f96d 	bl	800c968 <Drop_Location_jiang>
	HAL_Delay(1000);
 800b68e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b692:	f7f7 faa7 	bl	8002be4 <HAL_Delay>
	WritePosEx(1, Pos2, 800, 50); //爪子底盘向左
 800b696:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b69a:	2332      	movs	r3, #50	@ 0x32
 800b69c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800b6a0:	2001      	movs	r0, #1
 800b6a2:	f002 fa57 	bl	800db54 <WritePosEx>
	HAL_Delay(2000);                                       //延时是为了抓取底盘降下来，防止变转变降
 800b6a6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b6aa:	f7f7 fa9b 	bl	8002be4 <HAL_Delay>
	Move_Arm(6, 410, time); //爪子下降
 800b6ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6b2:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800b6b6:	2006      	movs	r0, #6
 800b6b8:	f7ff fe4c 	bl	800b354 <Move_Arm>
	HAL_Delay(time);
 800b6bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6c0:	f7f7 fa90 	bl	8002be4 <HAL_Delay>
	Move_Arm(1, Arm_close, time); //爪子闭合
 800b6c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6c8:	2114      	movs	r1, #20
 800b6ca:	2001      	movs	r0, #1
 800b6cc:	f7ff fe42 	bl	800b354 <Move_Arm>
	HAL_Delay(time);
 800b6d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6d4:	f7f7 fa86 	bl	8002be4 <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b6d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b6e0:	2006      	movs	r0, #6
 800b6e2:	f7ff fe37 	bl	800b354 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 1000);
 800b6e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6ea:	2132      	movs	r1, #50	@ 0x32
 800b6ec:	2032      	movs	r0, #50	@ 0x32
 800b6ee:	f001 f93b 	bl	800c968 <Drop_Location_jiang>
	WritePosEx(1, 4100, 800, 50); //抓取底盘向摆放位置
 800b6f2:	2332      	movs	r3, #50	@ 0x32
 800b6f4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800b6f8:	f241 0104 	movw	r1, #4100	@ 0x1004
 800b6fc:	2001      	movs	r0, #1
 800b6fe:	f002 fa29 	bl	800db54 <WritePosEx>
	HAL_Delay(2000);                                        //延时是为了让抓取底盘转过来
 800b702:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b706:	f7f7 fa6d 	bl	8002be4 <HAL_Delay>
	Move_Arm(6, 360, time); //爪子下降
 800b70a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b70e:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800b712:	2006      	movs	r0, #6
 800b714:	f7ff fe1e 	bl	800b354 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 11000);
 800b718:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800b71c:	2132      	movs	r1, #50	@ 0x32
 800b71e:	2032      	movs	r0, #50	@ 0x32
 800b720:	f001 f922 	bl	800c968 <Drop_Location_jiang>
	Move_Arm(1, 500, time); //爪子张开
 800b724:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b728:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b72c:	2001      	movs	r0, #1
 800b72e:	f7ff fe11 	bl	800b354 <Move_Arm>

}
 800b732:	bf00      	nop
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
	...

0800b73c <Frist_Grab_Wuliao>:
}
// 抓取过程标志位
extern char Match_Flag;
// 抓取计算稳定性标志位，0为识别有故障,1为正常计算
extern char Check_flag;
void Frist_Grab_Wuliao(void) {
 800b73c:	b580      	push	{r7, lr}
 800b73e:	af00      	add	r7, sp, #0
//	FIXME:在每一次抓取前都应该判断物料停止与基于TX2坐标闭环
//	Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
	static uint8_t Grab_count = 1;
	while (Grab_count < 4) {
 800b740:	e066      	b.n	800b810 <Frist_Grab_Wuliao+0xd4>
//		抓取物料过程，置标志位,标志位为颜色
	Match_Flag = Grab_count;
 800b742:	4b38      	ldr	r3, [pc, #224]	@ (800b824 <Frist_Grab_Wuliao+0xe8>)
 800b744:	781a      	ldrb	r2, [r3, #0]
 800b746:	4b38      	ldr	r3, [pc, #224]	@ (800b828 <Frist_Grab_Wuliao+0xec>)
 800b748:	701a      	strb	r2, [r3, #0]
//		if (QR_data[0] == colour && wuliao_falg == 0) {
//			先判断物料是否停止
	while(Check_Stability(x,y,Check_flag) == 2)
 800b74a:	e002      	b.n	800b752 <Frist_Grab_Wuliao+0x16>
	{
		HAL_Delay(30);
 800b74c:	201e      	movs	r0, #30
 800b74e:	f7f7 fa49 	bl	8002be4 <HAL_Delay>
	while(Check_Stability(x,y,Check_flag) == 2)
 800b752:	4b36      	ldr	r3, [pc, #216]	@ (800b82c <Frist_Grab_Wuliao+0xf0>)
 800b754:	edd3 7a00 	vldr	s15, [r3]
 800b758:	4b35      	ldr	r3, [pc, #212]	@ (800b830 <Frist_Grab_Wuliao+0xf4>)
 800b75a:	ed93 7a00 	vldr	s14, [r3]
 800b75e:	4b35      	ldr	r3, [pc, #212]	@ (800b834 <Frist_Grab_Wuliao+0xf8>)
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	4618      	mov	r0, r3
 800b764:	eef0 0a47 	vmov.f32	s1, s14
 800b768:	eeb0 0a67 	vmov.f32	s0, s15
 800b76c:	f002 fcc0 	bl	800e0f0 <Check_Stability>
 800b770:	4603      	mov	r3, r0
 800b772:	2b02      	cmp	r3, #2
 800b774:	d0ea      	beq.n	800b74c <Frist_Grab_Wuliao+0x10>
	}
//			Realize_Stop();
//			基于TX2坐标进行闭环
	Move_Tx_Pid_Ctrl(tx_target, ty_target);
 800b776:	4b30      	ldr	r3, [pc, #192]	@ (800b838 <Frist_Grab_Wuliao+0xfc>)
 800b778:	edd3 7a00 	vldr	s15, [r3]
 800b77c:	4b2f      	ldr	r3, [pc, #188]	@ (800b83c <Frist_Grab_Wuliao+0x100>)
 800b77e:	ed93 7a00 	vldr	s14, [r3]
 800b782:	eef0 0a47 	vmov.f32	s1, s14
 800b786:	eeb0 0a67 	vmov.f32	s0, s15
 800b78a:	f001 fea5 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
//			抓取第一个物料
//			物料盘先转动到目标位置
	FT_Servo_Put(0,Grab_count);
 800b78e:	4b25      	ldr	r3, [pc, #148]	@ (800b824 <Frist_Grab_Wuliao+0xe8>)
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	4619      	mov	r1, r3
 800b794:	2000      	movs	r0, #0
 800b796:	f002 fd5c 	bl	800e252 <FT_Servo_Put>

	Move_Arm(1, 50, 300);
 800b79a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b79e:	2132      	movs	r1, #50	@ 0x32
 800b7a0:	2001      	movs	r0, #1
 800b7a2:	f7ff fdd7 	bl	800b354 <Move_Arm>
//			上升
	Drop_Location_jiang(200, 120, 1000);
 800b7a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b7aa:	2178      	movs	r1, #120	@ 0x78
 800b7ac:	20c8      	movs	r0, #200	@ 0xc8
 800b7ae:	f001 f8db 	bl	800c968 <Drop_Location_jiang>
//			catch_Frist(860, 2375);
//			爪子舵机转动到放置物料到车上的角度
	FT_Servo_Put(1,Grab_count);
 800b7b2:	4b1c      	ldr	r3, [pc, #112]	@ (800b824 <Frist_Grab_Wuliao+0xe8>)
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	2001      	movs	r0, #1
 800b7ba:	f002 fd4a 	bl	800e252 <FT_Servo_Put>
//			TODO:调试，失能五号舵机
	Drop_Location_jiang(200, 120, 6000);
 800b7be:	f241 7270 	movw	r2, #6000	@ 0x1770
 800b7c2:	2178      	movs	r1, #120	@ 0x78
 800b7c4:	20c8      	movs	r0, #200	@ 0xc8
 800b7c6:	f001 f8cf 	bl	800c968 <Drop_Location_jiang>
//			while(1)
//			{
//				;
//			}
//			松开爪子
	Move_Arm(1, 300, 300);
 800b7ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b7ce:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800b7d2:	2001      	movs	r0, #1
 800b7d4:	f7ff fdbe 	bl	800b354 <Move_Arm>
//			上升
	Drop_Location_jiang(200, 120, 1000);
 800b7d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b7dc:	2178      	movs	r1, #120	@ 0x78
 800b7de:	20c8      	movs	r0, #200	@ 0xc8
 800b7e0:	f001 f8c2 	bl	800c968 <Drop_Location_jiang>
//			向右转，与车身正交
	if(Grab_count < 3)
 800b7e4:	4b0f      	ldr	r3, [pc, #60]	@ (800b824 <Frist_Grab_Wuliao+0xe8>)
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	d808      	bhi.n	800b7fe <Frist_Grab_Wuliao+0xc2>
	{
		FT_Servo_Orth();
 800b7ec:	f002 fd25 	bl	800e23a <FT_Servo_Orth>
		Drop_Location_jiang(200, 120, 8600);
 800b7f0:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b7f4:	2178      	movs	r1, #120	@ 0x78
 800b7f6:	20c8      	movs	r0, #200	@ 0xc8
 800b7f8:	f001 f8b6 	bl	800c968 <Drop_Location_jiang>
 800b7fc:	e002      	b.n	800b804 <Frist_Grab_Wuliao+0xc8>
	}
	else
		FT_Servo_Zero(1);
 800b7fe:	2001      	movs	r0, #1
 800b800:	f002 fcfd 	bl	800e1fe <FT_Servo_Zero>
	Grab_count += 1;
 800b804:	4b07      	ldr	r3, [pc, #28]	@ (800b824 <Frist_Grab_Wuliao+0xe8>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	3301      	adds	r3, #1
 800b80a:	b2da      	uxtb	r2, r3
 800b80c:	4b05      	ldr	r3, [pc, #20]	@ (800b824 <Frist_Grab_Wuliao+0xe8>)
 800b80e:	701a      	strb	r2, [r3, #0]
	while (Grab_count < 4) {
 800b810:	4b04      	ldr	r3, [pc, #16]	@ (800b824 <Frist_Grab_Wuliao+0xe8>)
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	2b03      	cmp	r3, #3
 800b816:	d994      	bls.n	800b742 <Frist_Grab_Wuliao+0x6>
	}
	Grab_count = 0;
 800b818:	4b02      	ldr	r3, [pc, #8]	@ (800b824 <Frist_Grab_Wuliao+0xe8>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	701a      	strb	r2, [r3, #0]
}
 800b81e:	bf00      	nop
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	24000045 	.word	0x24000045
 800b828:	24000488 	.word	0x24000488
 800b82c:	24000454 	.word	0x24000454
 800b830:	24000458 	.word	0x24000458
 800b834:	24000489 	.word	0x24000489
 800b838:	24000000 	.word	0x24000000
 800b83c:	24000004 	.word	0x24000004

0800b840 <put_wuliao_to_circular_frist>:
////		}
//
//	}
//}

void put_wuliao_to_circular_frist(void) {
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0

	for (int i = 0; i < 3; i++) {
 800b846:	2300      	movs	r3, #0
 800b848:	607b      	str	r3, [r7, #4]
 800b84a:	e067      	b.n	800b91c <put_wuliao_to_circular_frist+0xdc>
		if (QR_data[i] + 3 == 4) {
 800b84c:	4a37      	ldr	r2, [pc, #220]	@ (800b92c <put_wuliao_to_circular_frist+0xec>)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d105      	bne.n	800b864 <put_wuliao_to_circular_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800b858:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800b930 <put_wuliao_to_circular_frist+0xf0>
 800b85c:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800b934 <put_wuliao_to_circular_frist+0xf4>
 800b860:	f001 fcda 	bl	800d218 <Move_Action_Nopid_Right_Ctrl>

		}
		if (QR_data[i] + 3 == 5) {
 800b864:	4a31      	ldr	r2, [pc, #196]	@ (800b92c <put_wuliao_to_circular_frist+0xec>)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d105      	bne.n	800b87c <put_wuliao_to_circular_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800b870:	eddf 0a31 	vldr	s1, [pc, #196]	@ 800b938 <put_wuliao_to_circular_frist+0xf8>
 800b874:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800b934 <put_wuliao_to_circular_frist+0xf4>
 800b878:	f001 fcce 	bl	800d218 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] + 3 == 6) {
 800b87c:	4a2b      	ldr	r2, [pc, #172]	@ (800b92c <put_wuliao_to_circular_frist+0xec>)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b884:	2b03      	cmp	r3, #3
 800b886:	d105      	bne.n	800b894 <put_wuliao_to_circular_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800b888:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800b93c <put_wuliao_to_circular_frist+0xfc>
 800b88c:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800b934 <put_wuliao_to_circular_frist+0xf4>
 800b890:	f001 fcc2 	bl	800d218 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 0) {
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d112      	bne.n	800b8c0 <put_wuliao_to_circular_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800b89a:	4b29      	ldr	r3, [pc, #164]	@ (800b940 <put_wuliao_to_circular_frist+0x100>)
 800b89c:	edd3 7a00 	vldr	s15, [r3]
 800b8a0:	4b28      	ldr	r3, [pc, #160]	@ (800b944 <put_wuliao_to_circular_frist+0x104>)
 800b8a2:	ed93 7a00 	vldr	s14, [r3]
 800b8a6:	eef0 0a47 	vmov.f32	s1, s14
 800b8aa:	eeb0 0a67 	vmov.f32	s0, s15
 800b8ae:	f001 fe13 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800b8b2:	f640 2178 	movw	r1, #2680	@ 0xa78
 800b8b6:	f640 0066 	movw	r0, #2150	@ 0x866
 800b8ba:	f7ff fec5 	bl	800b648 <put>
 800b8be:	e02a      	b.n	800b916 <put_wuliao_to_circular_frist+0xd6>
		} else if (i == 1) {
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d112      	bne.n	800b8ec <put_wuliao_to_circular_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800b8c6:	4b1e      	ldr	r3, [pc, #120]	@ (800b940 <put_wuliao_to_circular_frist+0x100>)
 800b8c8:	edd3 7a00 	vldr	s15, [r3]
 800b8cc:	4b1d      	ldr	r3, [pc, #116]	@ (800b944 <put_wuliao_to_circular_frist+0x104>)
 800b8ce:	ed93 7a00 	vldr	s14, [r3]
 800b8d2:	eef0 0a47 	vmov.f32	s1, s14
 800b8d6:	eeb0 0a67 	vmov.f32	s0, s15
 800b8da:	f001 fdfd 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800b8de:	f640 2178 	movw	r1, #2680	@ 0xa78
 800b8e2:	f640 4085 	movw	r0, #3205	@ 0xc85
 800b8e6:	f7ff feaf 	bl	800b648 <put>
 800b8ea:	e014      	b.n	800b916 <put_wuliao_to_circular_frist+0xd6>
		} else if (i == 2) {
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d111      	bne.n	800b916 <put_wuliao_to_circular_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800b8f2:	4b13      	ldr	r3, [pc, #76]	@ (800b940 <put_wuliao_to_circular_frist+0x100>)
 800b8f4:	edd3 7a00 	vldr	s15, [r3]
 800b8f8:	4b12      	ldr	r3, [pc, #72]	@ (800b944 <put_wuliao_to_circular_frist+0x104>)
 800b8fa:	ed93 7a00 	vldr	s14, [r3]
 800b8fe:	eef0 0a47 	vmov.f32	s1, s14
 800b902:	eeb0 0a67 	vmov.f32	s0, s15
 800b906:	f001 fde7 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800b90a:	f640 1142 	movw	r1, #2370	@ 0x942
 800b90e:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800b912:	f7ff fe99 	bl	800b648 <put>
	for (int i = 0; i < 3; i++) {
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	3301      	adds	r3, #1
 800b91a:	607b      	str	r3, [r7, #4]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b02      	cmp	r3, #2
 800b920:	dd94      	ble.n	800b84c <put_wuliao_to_circular_frist+0xc>
		}

	}
}
 800b922:	bf00      	nop
 800b924:	bf00      	nop
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	24000460 	.word	0x24000460
 800b930:	44960000 	.word	0x44960000
 800b934:	44e74000 	.word	0x44e74000
 800b938:	44834000 	.word	0x44834000
 800b93c:	445d4000 	.word	0x445d4000
 800b940:	24000000 	.word	0x24000000
 800b944:	24000004 	.word	0x24000004

0800b948 <put_wuliao_to_Car_frist>:

void put_wuliao_to_Car_frist(void) {
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 800b94e:	2300      	movs	r3, #0
 800b950:	607b      	str	r3, [r7, #4]
 800b952:	e067      	b.n	800ba24 <put_wuliao_to_Car_frist+0xdc>
		if (QR_data[i] == 1) {
 800b954:	4a37      	ldr	r2, [pc, #220]	@ (800ba34 <put_wuliao_to_Car_frist+0xec>)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d105      	bne.n	800b96c <put_wuliao_to_Car_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800b960:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800ba38 <put_wuliao_to_Car_frist+0xf0>
 800b964:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800ba3c <put_wuliao_to_Car_frist+0xf4>
 800b968:	f001 fc56 	bl	800d218 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 2) {
 800b96c:	4a31      	ldr	r2, [pc, #196]	@ (800ba34 <put_wuliao_to_Car_frist+0xec>)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b974:	2b02      	cmp	r3, #2
 800b976:	d105      	bne.n	800b984 <put_wuliao_to_Car_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800b978:	eddf 0a31 	vldr	s1, [pc, #196]	@ 800ba40 <put_wuliao_to_Car_frist+0xf8>
 800b97c:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800ba3c <put_wuliao_to_Car_frist+0xf4>
 800b980:	f001 fc4a 	bl	800d218 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800b984:	4a2b      	ldr	r2, [pc, #172]	@ (800ba34 <put_wuliao_to_Car_frist+0xec>)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	d105      	bne.n	800b99c <put_wuliao_to_Car_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800b990:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800ba44 <put_wuliao_to_Car_frist+0xfc>
 800b994:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800ba3c <put_wuliao_to_Car_frist+0xf4>
 800b998:	f001 fc3e 	bl	800d218 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 0) {
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d112      	bne.n	800b9c8 <put_wuliao_to_Car_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800b9a2:	4b29      	ldr	r3, [pc, #164]	@ (800ba48 <put_wuliao_to_Car_frist+0x100>)
 800b9a4:	edd3 7a00 	vldr	s15, [r3]
 800b9a8:	4b28      	ldr	r3, [pc, #160]	@ (800ba4c <put_wuliao_to_Car_frist+0x104>)
 800b9aa:	ed93 7a00 	vldr	s14, [r3]
 800b9ae:	eef0 0a47 	vmov.f32	s1, s14
 800b9b2:	eeb0 0a67 	vmov.f32	s0, s15
 800b9b6:	f001 fd8f 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
			catch_Second(860, 2375);
 800b9ba:	f640 1147 	movw	r1, #2375	@ 0x947
 800b9be:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800b9c2:	f7ff fd72 	bl	800b4aa <catch_Second>
 800b9c6:	e02a      	b.n	800ba1e <put_wuliao_to_Car_frist+0xd6>

		} else if (i == 1) {
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d112      	bne.n	800b9f4 <put_wuliao_to_Car_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800b9ce:	4b1e      	ldr	r3, [pc, #120]	@ (800ba48 <put_wuliao_to_Car_frist+0x100>)
 800b9d0:	edd3 7a00 	vldr	s15, [r3]
 800b9d4:	4b1d      	ldr	r3, [pc, #116]	@ (800ba4c <put_wuliao_to_Car_frist+0x104>)
 800b9d6:	ed93 7a00 	vldr	s14, [r3]
 800b9da:	eef0 0a47 	vmov.f32	s1, s14
 800b9de:	eeb0 0a67 	vmov.f32	s0, s15
 800b9e2:	f001 fd79 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
			catch_Second(1910, 2370);
 800b9e6:	f640 1142 	movw	r1, #2370	@ 0x942
 800b9ea:	f240 7076 	movw	r0, #1910	@ 0x776
 800b9ee:	f7ff fd5c 	bl	800b4aa <catch_Second>
 800b9f2:	e014      	b.n	800ba1e <put_wuliao_to_Car_frist+0xd6>
		} else if (i == 2) {
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b02      	cmp	r3, #2
 800b9f8:	d111      	bne.n	800ba1e <put_wuliao_to_Car_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800b9fa:	4b13      	ldr	r3, [pc, #76]	@ (800ba48 <put_wuliao_to_Car_frist+0x100>)
 800b9fc:	edd3 7a00 	vldr	s15, [r3]
 800ba00:	4b12      	ldr	r3, [pc, #72]	@ (800ba4c <put_wuliao_to_Car_frist+0x104>)
 800ba02:	ed93 7a00 	vldr	s14, [r3]
 800ba06:	eef0 0a47 	vmov.f32	s1, s14
 800ba0a:	eeb0 0a67 	vmov.f32	s0, s15
 800ba0e:	f001 fd63 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
			catch_Second(2960, 2370);
 800ba12:	f640 1142 	movw	r1, #2370	@ 0x942
 800ba16:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800ba1a:	f7ff fd46 	bl	800b4aa <catch_Second>
	for (int i = 0; i < 3; i++) {
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	3301      	adds	r3, #1
 800ba22:	607b      	str	r3, [r7, #4]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	dd94      	ble.n	800b954 <put_wuliao_to_Car_frist+0xc>
		}

	}
}
 800ba2a:	bf00      	nop
 800ba2c:	bf00      	nop
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	24000460 	.word	0x24000460
 800ba38:	44960000 	.word	0x44960000
 800ba3c:	44e74000 	.word	0x44e74000
 800ba40:	44834000 	.word	0x44834000
 800ba44:	445d4000 	.word	0x445d4000
 800ba48:	24000000 	.word	0x24000000
 800ba4c:	24000004 	.word	0x24000004

0800ba50 <put_wuliao_to_circular_second>:

void put_wuliao_to_circular_second(void) {
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 800ba56:	2300      	movs	r3, #0
 800ba58:	607b      	str	r3, [r7, #4]
 800ba5a:	e067      	b.n	800bb2c <put_wuliao_to_circular_second+0xdc>
		if (QR_data[i] + 3 == 4) {
 800ba5c:	4a3a      	ldr	r2, [pc, #232]	@ (800bb48 <put_wuliao_to_circular_second+0xf8>)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d105      	bne.n	800ba74 <put_wuliao_to_circular_second+0x24>
			Move_Action_Nopid_Forward_Ctrl(954, 1850);
 800ba68:	eddf 0a38 	vldr	s1, [pc, #224]	@ 800bb4c <put_wuliao_to_circular_second+0xfc>
 800ba6c:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800bb50 <put_wuliao_to_circular_second+0x100>
 800ba70:	f001 fa72 	bl	800cf58 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (QR_data[i] + 3 == 5) {
 800ba74:	4a34      	ldr	r2, [pc, #208]	@ (800bb48 <put_wuliao_to_circular_second+0xf8>)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	d105      	bne.n	800ba8c <put_wuliao_to_circular_second+0x3c>
			Move_Action_Nopid_Forward_Ctrl(1050, 1850);
 800ba80:	eddf 0a32 	vldr	s1, [pc, #200]	@ 800bb4c <put_wuliao_to_circular_second+0xfc>
 800ba84:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 800bb54 <put_wuliao_to_circular_second+0x104>
 800ba88:	f001 fa66 	bl	800cf58 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (QR_data[i] + 3 == 6) {
 800ba8c:	4a2e      	ldr	r2, [pc, #184]	@ (800bb48 <put_wuliao_to_circular_second+0xf8>)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d105      	bne.n	800baa4 <put_wuliao_to_circular_second+0x54>
			Move_Action_Nopid_Forward_Ctrl(1208, 1850);
 800ba98:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800bb4c <put_wuliao_to_circular_second+0xfc>
 800ba9c:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 800bb58 <put_wuliao_to_circular_second+0x108>
 800baa0:	f001 fa5a 	bl	800cf58 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (i == 0) {
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d112      	bne.n	800bad0 <put_wuliao_to_circular_second+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800baaa:	4b2c      	ldr	r3, [pc, #176]	@ (800bb5c <put_wuliao_to_circular_second+0x10c>)
 800baac:	edd3 7a00 	vldr	s15, [r3]
 800bab0:	4b2b      	ldr	r3, [pc, #172]	@ (800bb60 <put_wuliao_to_circular_second+0x110>)
 800bab2:	ed93 7a00 	vldr	s14, [r3]
 800bab6:	eef0 0a47 	vmov.f32	s1, s14
 800baba:	eeb0 0a67 	vmov.f32	s0, s15
 800babe:	f001 fd0b 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800bac2:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bac6:	f640 0066 	movw	r0, #2150	@ 0x866
 800baca:	f7ff fdbd 	bl	800b648 <put>
 800bace:	e02a      	b.n	800bb26 <put_wuliao_to_circular_second+0xd6>

		} else if (i == 1) {
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d112      	bne.n	800bafc <put_wuliao_to_circular_second+0xac>

			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bad6:	4b21      	ldr	r3, [pc, #132]	@ (800bb5c <put_wuliao_to_circular_second+0x10c>)
 800bad8:	edd3 7a00 	vldr	s15, [r3]
 800badc:	4b20      	ldr	r3, [pc, #128]	@ (800bb60 <put_wuliao_to_circular_second+0x110>)
 800bade:	ed93 7a00 	vldr	s14, [r3]
 800bae2:	eef0 0a47 	vmov.f32	s1, s14
 800bae6:	eeb0 0a67 	vmov.f32	s0, s15
 800baea:	f001 fcf5 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800baee:	f640 2178 	movw	r1, #2680	@ 0xa78
 800baf2:	f640 4085 	movw	r0, #3205	@ 0xc85
 800baf6:	f7ff fda7 	bl	800b648 <put>
 800bafa:	e014      	b.n	800bb26 <put_wuliao_to_circular_second+0xd6>
		} else if (i == 2) {
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d111      	bne.n	800bb26 <put_wuliao_to_circular_second+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bb02:	4b16      	ldr	r3, [pc, #88]	@ (800bb5c <put_wuliao_to_circular_second+0x10c>)
 800bb04:	edd3 7a00 	vldr	s15, [r3]
 800bb08:	4b15      	ldr	r3, [pc, #84]	@ (800bb60 <put_wuliao_to_circular_second+0x110>)
 800bb0a:	ed93 7a00 	vldr	s14, [r3]
 800bb0e:	eef0 0a47 	vmov.f32	s1, s14
 800bb12:	eeb0 0a67 	vmov.f32	s0, s15
 800bb16:	f001 fcdf 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800bb1a:	f640 1142 	movw	r1, #2370	@ 0x942
 800bb1e:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bb22:	f7ff fd91 	bl	800b648 <put>
	for (int i = 0; i < 3; i++) {
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	607b      	str	r3, [r7, #4]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	dd94      	ble.n	800ba5c <put_wuliao_to_circular_second+0xc>
		}

	}
	Move_Action_Nopid_Forward_Ctrl(1000, 1850);
 800bb32:	eddf 0a06 	vldr	s1, [pc, #24]	@ 800bb4c <put_wuliao_to_circular_second+0xfc>
 800bb36:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800bb64 <put_wuliao_to_circular_second+0x114>
 800bb3a:	f001 fa0d 	bl	800cf58 <Move_Action_Nopid_Forward_Ctrl>
}
 800bb3e:	bf00      	nop
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	24000460 	.word	0x24000460
 800bb4c:	44e74000 	.word	0x44e74000
 800bb50:	446e8000 	.word	0x446e8000
 800bb54:	44834000 	.word	0x44834000
 800bb58:	44970000 	.word	0x44970000
 800bb5c:	24000000 	.word	0x24000000
 800bb60:	24000004 	.word	0x24000004
 800bb64:	447a0000 	.word	0x447a0000

0800bb68 <Second_Run_Frist_Grab_Wuliao>:

/*************************第二次抓取***********************************************/
void Second_Run_Frist_Grab_Wuliao(void) {
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	af00      	add	r7, sp, #0
	static uint8_t Grab_count = 0;
	wuliao_falg = 0;
 800bb6c:	4b2a      	ldr	r3, [pc, #168]	@ (800bc18 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	601a      	str	r2, [r3, #0]
	while (Grab_count < 3) {
 800bb72:	e04a      	b.n	800bc0a <Second_Run_Frist_Grab_Wuliao+0xa2>
		if (QR_data[3] == colour && wuliao_falg == 0) {
 800bb74:	4b29      	ldr	r3, [pc, #164]	@ (800bc1c <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800bb76:	68da      	ldr	r2, [r3, #12]
 800bb78:	4b29      	ldr	r3, [pc, #164]	@ (800bc20 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d112      	bne.n	800bba6 <Second_Run_Frist_Grab_Wuliao+0x3e>
 800bb80:	4b25      	ldr	r3, [pc, #148]	@ (800bc18 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d10e      	bne.n	800bba6 <Second_Run_Frist_Grab_Wuliao+0x3e>
			catch_Frist(860, 2375);
 800bb88:	f640 1147 	movw	r1, #2375	@ 0x947
 800bb8c:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800bb90:	f7ff fc1e 	bl	800b3d0 <catch_Frist>
			wuliao_falg = 1;
 800bb94:	4b20      	ldr	r3, [pc, #128]	@ (800bc18 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bb96:	2201      	movs	r2, #1
 800bb98:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bb9a:	4b22      	ldr	r3, [pc, #136]	@ (800bc24 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	b2da      	uxtb	r2, r3
 800bba2:	4b20      	ldr	r3, [pc, #128]	@ (800bc24 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bba4:	701a      	strb	r2, [r3, #0]
		}
		if (QR_data[4] == colour && wuliao_falg == 1) {
 800bba6:	4b1d      	ldr	r3, [pc, #116]	@ (800bc1c <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800bba8:	691a      	ldr	r2, [r3, #16]
 800bbaa:	4b1d      	ldr	r3, [pc, #116]	@ (800bc20 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d112      	bne.n	800bbd8 <Second_Run_Frist_Grab_Wuliao+0x70>
 800bbb2:	4b19      	ldr	r3, [pc, #100]	@ (800bc18 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d10e      	bne.n	800bbd8 <Second_Run_Frist_Grab_Wuliao+0x70>
			catch_Frist(1910, 2370);
 800bbba:	f640 1142 	movw	r1, #2370	@ 0x942
 800bbbe:	f240 7076 	movw	r0, #1910	@ 0x776
 800bbc2:	f7ff fc05 	bl	800b3d0 <catch_Frist>
			wuliao_falg = 2;
 800bbc6:	4b14      	ldr	r3, [pc, #80]	@ (800bc18 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bbc8:	2202      	movs	r2, #2
 800bbca:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bbcc:	4b15      	ldr	r3, [pc, #84]	@ (800bc24 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	4b13      	ldr	r3, [pc, #76]	@ (800bc24 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bbd6:	701a      	strb	r2, [r3, #0]
		}
		if (QR_data[5] == colour && wuliao_falg == 2) {
 800bbd8:	4b10      	ldr	r3, [pc, #64]	@ (800bc1c <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800bbda:	695a      	ldr	r2, [r3, #20]
 800bbdc:	4b10      	ldr	r3, [pc, #64]	@ (800bc20 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d112      	bne.n	800bc0a <Second_Run_Frist_Grab_Wuliao+0xa2>
 800bbe4:	4b0c      	ldr	r3, [pc, #48]	@ (800bc18 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b02      	cmp	r3, #2
 800bbea:	d10e      	bne.n	800bc0a <Second_Run_Frist_Grab_Wuliao+0xa2>
			catch_Frist(2960, 2370);
 800bbec:	f640 1142 	movw	r1, #2370	@ 0x942
 800bbf0:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bbf4:	f7ff fbec 	bl	800b3d0 <catch_Frist>
			wuliao_falg = 0;
 800bbf8:	4b07      	ldr	r3, [pc, #28]	@ (800bc18 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bbfe:	4b09      	ldr	r3, [pc, #36]	@ (800bc24 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	3301      	adds	r3, #1
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	4b07      	ldr	r3, [pc, #28]	@ (800bc24 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bc08:	701a      	strb	r2, [r3, #0]
	while (Grab_count < 3) {
 800bc0a:	4b06      	ldr	r3, [pc, #24]	@ (800bc24 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	d9b0      	bls.n	800bb74 <Second_Run_Frist_Grab_Wuliao+0xc>
		}

	}
}
 800bc12:	bf00      	nop
 800bc14:	bf00      	nop
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	24000480 	.word	0x24000480
 800bc1c:	24000460 	.word	0x24000460
 800bc20:	2400047c 	.word	0x2400047c
 800bc24:	24000ae0 	.word	0x24000ae0

0800bc28 <Second_Run_put_wuliao_to_Car_frist>:
void Second_Run_put_wuliao_to_Car_frist(void) {
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
	for (int i = 3; i < 6; i++) {
 800bc2e:	2303      	movs	r3, #3
 800bc30:	607b      	str	r3, [r7, #4]
 800bc32:	e067      	b.n	800bd04 <Second_Run_put_wuliao_to_Car_frist+0xdc>
		if (QR_data[i] == 1) {
 800bc34:	4a37      	ldr	r2, [pc, #220]	@ (800bd14 <Second_Run_put_wuliao_to_Car_frist+0xec>)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d105      	bne.n	800bc4c <Second_Run_put_wuliao_to_Car_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800bc40:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800bd18 <Second_Run_put_wuliao_to_Car_frist+0xf0>
 800bc44:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800bd1c <Second_Run_put_wuliao_to_Car_frist+0xf4>
 800bc48:	f001 fae6 	bl	800d218 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 2) {
 800bc4c:	4a31      	ldr	r2, [pc, #196]	@ (800bd14 <Second_Run_put_wuliao_to_Car_frist+0xec>)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d105      	bne.n	800bc64 <Second_Run_put_wuliao_to_Car_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800bc58:	eddf 0a31 	vldr	s1, [pc, #196]	@ 800bd20 <Second_Run_put_wuliao_to_Car_frist+0xf8>
 800bc5c:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800bd1c <Second_Run_put_wuliao_to_Car_frist+0xf4>
 800bc60:	f001 fada 	bl	800d218 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800bc64:	4a2b      	ldr	r2, [pc, #172]	@ (800bd14 <Second_Run_put_wuliao_to_Car_frist+0xec>)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc6c:	2b03      	cmp	r3, #3
 800bc6e:	d105      	bne.n	800bc7c <Second_Run_put_wuliao_to_Car_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800bc70:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800bd24 <Second_Run_put_wuliao_to_Car_frist+0xfc>
 800bc74:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800bd1c <Second_Run_put_wuliao_to_Car_frist+0xf4>
 800bc78:	f001 face 	bl	800d218 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 3) {
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b03      	cmp	r3, #3
 800bc80:	d112      	bne.n	800bca8 <Second_Run_put_wuliao_to_Car_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bc82:	4b29      	ldr	r3, [pc, #164]	@ (800bd28 <Second_Run_put_wuliao_to_Car_frist+0x100>)
 800bc84:	edd3 7a00 	vldr	s15, [r3]
 800bc88:	4b28      	ldr	r3, [pc, #160]	@ (800bd2c <Second_Run_put_wuliao_to_Car_frist+0x104>)
 800bc8a:	ed93 7a00 	vldr	s14, [r3]
 800bc8e:	eef0 0a47 	vmov.f32	s1, s14
 800bc92:	eeb0 0a67 	vmov.f32	s0, s15
 800bc96:	f001 fc1f 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
			catch_Second(860, 2375);
 800bc9a:	f640 1147 	movw	r1, #2375	@ 0x947
 800bc9e:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800bca2:	f7ff fc02 	bl	800b4aa <catch_Second>
 800bca6:	e02a      	b.n	800bcfe <Second_Run_put_wuliao_to_Car_frist+0xd6>

		} else if (i == 4) {
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b04      	cmp	r3, #4
 800bcac:	d112      	bne.n	800bcd4 <Second_Run_put_wuliao_to_Car_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bcae:	4b1e      	ldr	r3, [pc, #120]	@ (800bd28 <Second_Run_put_wuliao_to_Car_frist+0x100>)
 800bcb0:	edd3 7a00 	vldr	s15, [r3]
 800bcb4:	4b1d      	ldr	r3, [pc, #116]	@ (800bd2c <Second_Run_put_wuliao_to_Car_frist+0x104>)
 800bcb6:	ed93 7a00 	vldr	s14, [r3]
 800bcba:	eef0 0a47 	vmov.f32	s1, s14
 800bcbe:	eeb0 0a67 	vmov.f32	s0, s15
 800bcc2:	f001 fc09 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
			catch_Second(1910, 2370);
 800bcc6:	f640 1142 	movw	r1, #2370	@ 0x942
 800bcca:	f240 7076 	movw	r0, #1910	@ 0x776
 800bcce:	f7ff fbec 	bl	800b4aa <catch_Second>
 800bcd2:	e014      	b.n	800bcfe <Second_Run_put_wuliao_to_Car_frist+0xd6>
		} else if (i == 5) {
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b05      	cmp	r3, #5
 800bcd8:	d111      	bne.n	800bcfe <Second_Run_put_wuliao_to_Car_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bcda:	4b13      	ldr	r3, [pc, #76]	@ (800bd28 <Second_Run_put_wuliao_to_Car_frist+0x100>)
 800bcdc:	edd3 7a00 	vldr	s15, [r3]
 800bce0:	4b12      	ldr	r3, [pc, #72]	@ (800bd2c <Second_Run_put_wuliao_to_Car_frist+0x104>)
 800bce2:	ed93 7a00 	vldr	s14, [r3]
 800bce6:	eef0 0a47 	vmov.f32	s1, s14
 800bcea:	eeb0 0a67 	vmov.f32	s0, s15
 800bcee:	f001 fbf3 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
			catch_Second(2960, 2370);
 800bcf2:	f640 1142 	movw	r1, #2370	@ 0x942
 800bcf6:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bcfa:	f7ff fbd6 	bl	800b4aa <catch_Second>
	for (int i = 3; i < 6; i++) {
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	3301      	adds	r3, #1
 800bd02:	607b      	str	r3, [r7, #4]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b05      	cmp	r3, #5
 800bd08:	dd94      	ble.n	800bc34 <Second_Run_put_wuliao_to_Car_frist+0xc>
		}

	}
}
 800bd0a:	bf00      	nop
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	24000460 	.word	0x24000460
 800bd18:	44960000 	.word	0x44960000
 800bd1c:	44e74000 	.word	0x44e74000
 800bd20:	44834000 	.word	0x44834000
 800bd24:	445d4000 	.word	0x445d4000
 800bd28:	24000000 	.word	0x24000000
 800bd2c:	24000004 	.word	0x24000004

0800bd30 <Second_Run_put_wuliao_to_circular_frist>:

void Second_Run_put_wuliao_to_circular_frist(void) {
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0

	for (int i = 3; i < 6; i++) {
 800bd36:	2303      	movs	r3, #3
 800bd38:	607b      	str	r3, [r7, #4]
 800bd3a:	e067      	b.n	800be0c <Second_Run_put_wuliao_to_circular_frist+0xdc>
		if (QR_data[i] == 1) {
 800bd3c:	4a37      	ldr	r2, [pc, #220]	@ (800be1c <Second_Run_put_wuliao_to_circular_frist+0xec>)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d105      	bne.n	800bd54 <Second_Run_put_wuliao_to_circular_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(910, 1910);
 800bd48:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800be20 <Second_Run_put_wuliao_to_circular_frist+0xf0>
 800bd4c:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800be24 <Second_Run_put_wuliao_to_circular_frist+0xf4>
 800bd50:	f001 fa62 	bl	800d218 <Move_Action_Nopid_Right_Ctrl>

		}
		if (QR_data[i] == 2) {
 800bd54:	4a31      	ldr	r2, [pc, #196]	@ (800be1c <Second_Run_put_wuliao_to_circular_frist+0xec>)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd5c:	2b02      	cmp	r3, #2
 800bd5e:	d105      	bne.n	800bd6c <Second_Run_put_wuliao_to_circular_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1060, 1910);
 800bd60:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 800be20 <Second_Run_put_wuliao_to_circular_frist+0xf0>
 800bd64:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 800be28 <Second_Run_put_wuliao_to_circular_frist+0xf8>
 800bd68:	f001 fa56 	bl	800d218 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800bd6c:	4a2b      	ldr	r2, [pc, #172]	@ (800be1c <Second_Run_put_wuliao_to_circular_frist+0xec>)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd74:	2b03      	cmp	r3, #3
 800bd76:	d105      	bne.n	800bd84 <Second_Run_put_wuliao_to_circular_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1185, 1910);
 800bd78:	eddf 0a29 	vldr	s1, [pc, #164]	@ 800be20 <Second_Run_put_wuliao_to_circular_frist+0xf0>
 800bd7c:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800be2c <Second_Run_put_wuliao_to_circular_frist+0xfc>
 800bd80:	f001 fa4a 	bl	800d218 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 3) {
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	d112      	bne.n	800bdb0 <Second_Run_put_wuliao_to_circular_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bd8a:	4b29      	ldr	r3, [pc, #164]	@ (800be30 <Second_Run_put_wuliao_to_circular_frist+0x100>)
 800bd8c:	edd3 7a00 	vldr	s15, [r3]
 800bd90:	4b28      	ldr	r3, [pc, #160]	@ (800be34 <Second_Run_put_wuliao_to_circular_frist+0x104>)
 800bd92:	ed93 7a00 	vldr	s14, [r3]
 800bd96:	eef0 0a47 	vmov.f32	s1, s14
 800bd9a:	eeb0 0a67 	vmov.f32	s0, s15
 800bd9e:	f001 fb9b 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800bda2:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bda6:	f640 0066 	movw	r0, #2150	@ 0x866
 800bdaa:	f7ff fc4d 	bl	800b648 <put>
 800bdae:	e02a      	b.n	800be06 <Second_Run_put_wuliao_to_circular_frist+0xd6>
		} else if (i == 4) {
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b04      	cmp	r3, #4
 800bdb4:	d112      	bne.n	800bddc <Second_Run_put_wuliao_to_circular_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bdb6:	4b1e      	ldr	r3, [pc, #120]	@ (800be30 <Second_Run_put_wuliao_to_circular_frist+0x100>)
 800bdb8:	edd3 7a00 	vldr	s15, [r3]
 800bdbc:	4b1d      	ldr	r3, [pc, #116]	@ (800be34 <Second_Run_put_wuliao_to_circular_frist+0x104>)
 800bdbe:	ed93 7a00 	vldr	s14, [r3]
 800bdc2:	eef0 0a47 	vmov.f32	s1, s14
 800bdc6:	eeb0 0a67 	vmov.f32	s0, s15
 800bdca:	f001 fb85 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800bdce:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bdd2:	f640 4085 	movw	r0, #3205	@ 0xc85
 800bdd6:	f7ff fc37 	bl	800b648 <put>
 800bdda:	e014      	b.n	800be06 <Second_Run_put_wuliao_to_circular_frist+0xd6>
		} else if (i == 5) {
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2b05      	cmp	r3, #5
 800bde0:	d111      	bne.n	800be06 <Second_Run_put_wuliao_to_circular_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bde2:	4b13      	ldr	r3, [pc, #76]	@ (800be30 <Second_Run_put_wuliao_to_circular_frist+0x100>)
 800bde4:	edd3 7a00 	vldr	s15, [r3]
 800bde8:	4b12      	ldr	r3, [pc, #72]	@ (800be34 <Second_Run_put_wuliao_to_circular_frist+0x104>)
 800bdea:	ed93 7a00 	vldr	s14, [r3]
 800bdee:	eef0 0a47 	vmov.f32	s1, s14
 800bdf2:	eeb0 0a67 	vmov.f32	s0, s15
 800bdf6:	f001 fb6f 	bl	800d4d8 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800bdfa:	f640 1142 	movw	r1, #2370	@ 0x942
 800bdfe:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800be02:	f7ff fc21 	bl	800b648 <put>
	for (int i = 3; i < 6; i++) {
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	3301      	adds	r3, #1
 800be0a:	607b      	str	r3, [r7, #4]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b05      	cmp	r3, #5
 800be10:	dd94      	ble.n	800bd3c <Second_Run_put_wuliao_to_circular_frist+0xc>
		}

	}
}
 800be12:	bf00      	nop
 800be14:	bf00      	nop
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	24000460 	.word	0x24000460
 800be20:	44eec000 	.word	0x44eec000
 800be24:	44638000 	.word	0x44638000
 800be28:	44848000 	.word	0x44848000
 800be2c:	44942000 	.word	0x44942000
 800be30:	24000000 	.word	0x24000000
 800be34:	24000004 	.word	0x24000004

0800be38 <Emm_V5_Pos_Control>:
 * @param    raF ：相位/绝对标志，false为相对运动，true为绝对值运动
 * @param    snF ：多机同步标志 ，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Pos_Control(uint8_t addr, uint8_t dir, uint16_t vel, uint8_t acc,
		uint32_t clk, bool raF, bool snF) {
 800be38:	b590      	push	{r4, r7, lr}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	4604      	mov	r4, r0
 800be40:	4608      	mov	r0, r1
 800be42:	4611      	mov	r1, r2
 800be44:	461a      	mov	r2, r3
 800be46:	4623      	mov	r3, r4
 800be48:	71fb      	strb	r3, [r7, #7]
 800be4a:	4603      	mov	r3, r0
 800be4c:	71bb      	strb	r3, [r7, #6]
 800be4e:	460b      	mov	r3, r1
 800be50:	80bb      	strh	r3, [r7, #4]
 800be52:	4613      	mov	r3, r2
 800be54:	70fb      	strb	r3, [r7, #3]

	// 装载命令
	cmd[0] = addr;                      // 地址
 800be56:	4a20      	ldr	r2, [pc, #128]	@ (800bed8 <Emm_V5_Pos_Control+0xa0>)
 800be58:	79fb      	ldrb	r3, [r7, #7]
 800be5a:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFD;                      // 功能码
 800be5c:	4b1e      	ldr	r3, [pc, #120]	@ (800bed8 <Emm_V5_Pos_Control+0xa0>)
 800be5e:	22fd      	movs	r2, #253	@ 0xfd
 800be60:	705a      	strb	r2, [r3, #1]
	cmd[2] = dir;                       // 方向
 800be62:	4a1d      	ldr	r2, [pc, #116]	@ (800bed8 <Emm_V5_Pos_Control+0xa0>)
 800be64:	79bb      	ldrb	r3, [r7, #6]
 800be66:	7093      	strb	r3, [r2, #2]
	cmd[3] = (uint8_t) (vel >> 8);       // 速度(RPM)高8位字节
 800be68:	88bb      	ldrh	r3, [r7, #4]
 800be6a:	0a1b      	lsrs	r3, r3, #8
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	4b19      	ldr	r3, [pc, #100]	@ (800bed8 <Emm_V5_Pos_Control+0xa0>)
 800be72:	70da      	strb	r2, [r3, #3]
	cmd[4] = (uint8_t) (vel >> 0);       // 速度(RPM)低8位字节
 800be74:	88bb      	ldrh	r3, [r7, #4]
 800be76:	b2da      	uxtb	r2, r3
 800be78:	4b17      	ldr	r3, [pc, #92]	@ (800bed8 <Emm_V5_Pos_Control+0xa0>)
 800be7a:	711a      	strb	r2, [r3, #4]
	cmd[5] = acc;                       // 加速度，注意：0是直接启动
 800be7c:	4a16      	ldr	r2, [pc, #88]	@ (800bed8 <Emm_V5_Pos_Control+0xa0>)
 800be7e:	78fb      	ldrb	r3, [r7, #3]
 800be80:	7153      	strb	r3, [r2, #5]
	cmd[6] = (uint8_t) (clk >> 24);      // 脉冲数(bit24 - bit31)
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	0e1b      	lsrs	r3, r3, #24
 800be86:	b2da      	uxtb	r2, r3
 800be88:	4b13      	ldr	r3, [pc, #76]	@ (800bed8 <Emm_V5_Pos_Control+0xa0>)
 800be8a:	719a      	strb	r2, [r3, #6]
	cmd[7] = (uint8_t) (clk >> 16);      // 脉冲数(bit16 - bit23)
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	0c1b      	lsrs	r3, r3, #16
 800be90:	b2da      	uxtb	r2, r3
 800be92:	4b11      	ldr	r3, [pc, #68]	@ (800bed8 <Emm_V5_Pos_Control+0xa0>)
 800be94:	71da      	strb	r2, [r3, #7]
	cmd[8] = (uint8_t) (clk >> 8);       // 脉冲数(bit8  - bit15)
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	0a1b      	lsrs	r3, r3, #8
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	4b0e      	ldr	r3, [pc, #56]	@ (800bed8 <Emm_V5_Pos_Control+0xa0>)
 800be9e:	721a      	strb	r2, [r3, #8]
	cmd[9] = (uint8_t) (clk >> 0);       // 脉冲数(bit0  - bit7 )
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	b2da      	uxtb	r2, r3
 800bea4:	4b0c      	ldr	r3, [pc, #48]	@ (800bed8 <Emm_V5_Pos_Control+0xa0>)
 800bea6:	725a      	strb	r2, [r3, #9]
	cmd[10] = raF;                       // 相位/绝对标志，false为相对运动，true为绝对值运动
 800bea8:	7f3a      	ldrb	r2, [r7, #28]
 800beaa:	4b0b      	ldr	r3, [pc, #44]	@ (800bed8 <Emm_V5_Pos_Control+0xa0>)
 800beac:	729a      	strb	r2, [r3, #10]
	cmd[11] = snF;                       // 多机同步运动标志，false为不启用，true为启用
 800beae:	f897 2020 	ldrb.w	r2, [r7, #32]
 800beb2:	4b09      	ldr	r3, [pc, #36]	@ (800bed8 <Emm_V5_Pos_Control+0xa0>)
 800beb4:	72da      	strb	r2, [r3, #11]
	cmd[12] = 0x6B;                      // 校验字节
 800beb6:	4b08      	ldr	r3, [pc, #32]	@ (800bed8 <Emm_V5_Pos_Control+0xa0>)
 800beb8:	226b      	movs	r2, #107	@ 0x6b
 800beba:	731a      	strb	r2, [r3, #12]

	// 发送命令
	FDCAN_Send_Msg(cmd, 13);
 800bebc:	210d      	movs	r1, #13
 800bebe:	4806      	ldr	r0, [pc, #24]	@ (800bed8 <Emm_V5_Pos_Control+0xa0>)
 800bec0:	f7f4 feea 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(10);
 800bec4:	200a      	movs	r0, #10
 800bec6:	f7f6 fe8d 	bl	8002be4 <HAL_Delay>
	Emm_mode = 1;
 800beca:	4b04      	ldr	r3, [pc, #16]	@ (800bedc <Emm_V5_Pos_Control+0xa4>)
 800becc:	2201      	movs	r2, #1
 800bece:	701a      	strb	r2, [r3, #0]
}
 800bed0:	bf00      	nop
 800bed2:	370c      	adds	r7, #12
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd90      	pop	{r4, r7, pc}
 800bed8:	24000ae4 	.word	0x24000ae4
 800bedc:	2400029c 	.word	0x2400029c

0800bee0 <Emm_V5_Stop_Now>:
 * @brief    立即停止（所有控制模式都通用）
 * @param    addr  ：电机地址
 * @param    snF   ：多机同步标志，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Stop_Now(uint8_t addr, bool snF) {
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	4603      	mov	r3, r0
 800bee8:	460a      	mov	r2, r1
 800beea:	71fb      	strb	r3, [r7, #7]
 800beec:	4613      	mov	r3, r2
 800beee:	71bb      	strb	r3, [r7, #6]

	// 装载命令
	cmd[0] = addr;                       // 地址
 800bef0:	4a0b      	ldr	r2, [pc, #44]	@ (800bf20 <Emm_V5_Stop_Now+0x40>)
 800bef2:	79fb      	ldrb	r3, [r7, #7]
 800bef4:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFE;                       // 功能码
 800bef6:	4b0a      	ldr	r3, [pc, #40]	@ (800bf20 <Emm_V5_Stop_Now+0x40>)
 800bef8:	22fe      	movs	r2, #254	@ 0xfe
 800befa:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x98;                       // 辅助码
 800befc:	4b08      	ldr	r3, [pc, #32]	@ (800bf20 <Emm_V5_Stop_Now+0x40>)
 800befe:	2298      	movs	r2, #152	@ 0x98
 800bf00:	709a      	strb	r2, [r3, #2]
	cmd[3] = snF;                        // 多机同步运动标志
 800bf02:	79ba      	ldrb	r2, [r7, #6]
 800bf04:	4b06      	ldr	r3, [pc, #24]	@ (800bf20 <Emm_V5_Stop_Now+0x40>)
 800bf06:	70da      	strb	r2, [r3, #3]
	cmd[4] = 0x6B;                       // 校验字节
 800bf08:	4b05      	ldr	r3, [pc, #20]	@ (800bf20 <Emm_V5_Stop_Now+0x40>)
 800bf0a:	226b      	movs	r2, #107	@ 0x6b
 800bf0c:	711a      	strb	r2, [r3, #4]

	// 发送命令
	FDCAN_Send_Msg(cmd, 5);
 800bf0e:	2105      	movs	r1, #5
 800bf10:	4803      	ldr	r0, [pc, #12]	@ (800bf20 <Emm_V5_Stop_Now+0x40>)
 800bf12:	f7f4 fec1 	bl	8000c98 <FDCAN_Send_Msg>
}
 800bf16:	bf00      	nop
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	24000ae4 	.word	0x24000ae4

0800bf24 <Emm_V5_Synchronous_motion>:
/**
 * @brief    多机同步运动
 * @param    addr  ：电机地址
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Synchronous_motion(void) {
 800bf24:	b580      	push	{r7, lr}
 800bf26:	af00      	add	r7, sp, #0

	// 装载命令
	cmd[0] = 0x00;                       // 地址
 800bf28:	4b0a      	ldr	r3, [pc, #40]	@ (800bf54 <Emm_V5_Synchronous_motion+0x30>)
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0xFF;                       // 功能码
 800bf2e:	4b09      	ldr	r3, [pc, #36]	@ (800bf54 <Emm_V5_Synchronous_motion+0x30>)
 800bf30:	22ff      	movs	r2, #255	@ 0xff
 800bf32:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x66;                       // 辅助码
 800bf34:	4b07      	ldr	r3, [pc, #28]	@ (800bf54 <Emm_V5_Synchronous_motion+0x30>)
 800bf36:	2266      	movs	r2, #102	@ 0x66
 800bf38:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6B;                       // 校验字节
 800bf3a:	4b06      	ldr	r3, [pc, #24]	@ (800bf54 <Emm_V5_Synchronous_motion+0x30>)
 800bf3c:	226b      	movs	r2, #107	@ 0x6b
 800bf3e:	70da      	strb	r2, [r3, #3]

	// 发送命令
	FDCAN_Send_Msg(cmd, 4);
 800bf40:	2104      	movs	r1, #4
 800bf42:	4804      	ldr	r0, [pc, #16]	@ (800bf54 <Emm_V5_Synchronous_motion+0x30>)
 800bf44:	f7f4 fea8 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(5);
 800bf48:	2005      	movs	r0, #5
 800bf4a:	f7f6 fe4b 	bl	8002be4 <HAL_Delay>
}
 800bf4e:	bf00      	nop
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	24000ae4 	.word	0x24000ae4

0800bf58 <limit>:
float A_out;
float TX_X_out;
float TX_Y_out;

// 输出限幅
float limit(float x, float min, float max) {
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	ed87 0a03 	vstr	s0, [r7, #12]
 800bf62:	edc7 0a02 	vstr	s1, [r7, #8]
 800bf66:	ed87 1a01 	vstr	s2, [r7, #4]
	x = (x > max) ? max : ((x < min) ? min : x);
 800bf6a:	ed97 7a03 	vldr	s14, [r7, #12]
 800bf6e:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bf76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf7a:	dd01      	ble.n	800bf80 <limit+0x28>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	e00b      	b.n	800bf98 <limit+0x40>
 800bf80:	ed97 7a03 	vldr	s14, [r7, #12]
 800bf84:	edd7 7a02 	vldr	s15, [r7, #8]
 800bf88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bf8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf90:	d501      	bpl.n	800bf96 <limit+0x3e>
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	e000      	b.n	800bf98 <limit+0x40>
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	60fb      	str	r3, [r7, #12]
	return x;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	ee07 3a90 	vmov	s15, r3
}
 800bfa0:	eeb0 0a67 	vmov.f32	s0, s15
 800bfa4:	3714      	adds	r7, #20
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
	...

0800bfb0 <PID_Init>:
		return in;
	}
}

//	初始化PID结构体
void PID_Init(void) {
 800bfb0:	b480      	push	{r7}
 800bfb2:	af00      	add	r7, sp, #0
	//======================X=====================//   20   60
	XPID.P = 20;    //0.57    0  0.1
 800bfb4:	4b69      	ldr	r3, [pc, #420]	@ (800c15c <PID_Init+0x1ac>)
 800bfb6:	4a6a      	ldr	r2, [pc, #424]	@ (800c160 <PID_Init+0x1b0>)
 800bfb8:	601a      	str	r2, [r3, #0]
	XPID.I = 0;
 800bfba:	4b68      	ldr	r3, [pc, #416]	@ (800c15c <PID_Init+0x1ac>)
 800bfbc:	f04f 0200 	mov.w	r2, #0
 800bfc0:	609a      	str	r2, [r3, #8]
	XPID.D = 60;
 800bfc2:	4b66      	ldr	r3, [pc, #408]	@ (800c15c <PID_Init+0x1ac>)
 800bfc4:	4a67      	ldr	r2, [pc, #412]	@ (800c164 <PID_Init+0x1b4>)
 800bfc6:	615a      	str	r2, [r3, #20]

	XPID.I_LIMIT = 100.0;
 800bfc8:	4b64      	ldr	r3, [pc, #400]	@ (800c15c <PID_Init+0x1ac>)
 800bfca:	4a67      	ldr	r2, [pc, #412]	@ (800c168 <PID_Init+0x1b8>)
 800bfcc:	611a      	str	r2, [r3, #16]
	XPID.OUT_LIMIT = 100.0;
 800bfce:	4b63      	ldr	r3, [pc, #396]	@ (800c15c <PID_Init+0x1ac>)
 800bfd0:	4a65      	ldr	r2, [pc, #404]	@ (800c168 <PID_Init+0x1b8>)
 800bfd2:	621a      	str	r2, [r3, #32]

	XPID.P_OUT = 0.0;
 800bfd4:	4b61      	ldr	r3, [pc, #388]	@ (800c15c <PID_Init+0x1ac>)
 800bfd6:	f04f 0200 	mov.w	r2, #0
 800bfda:	605a      	str	r2, [r3, #4]
	XPID.I_OUT = 0.0;
 800bfdc:	4b5f      	ldr	r3, [pc, #380]	@ (800c15c <PID_Init+0x1ac>)
 800bfde:	f04f 0200 	mov.w	r2, #0
 800bfe2:	60da      	str	r2, [r3, #12]
	XPID.D_OUT = 0.0;
 800bfe4:	4b5d      	ldr	r3, [pc, #372]	@ (800c15c <PID_Init+0x1ac>)
 800bfe6:	f04f 0200 	mov.w	r2, #0
 800bfea:	619a      	str	r2, [r3, #24]

	XPID.OUT = 0.0;
 800bfec:	4b5b      	ldr	r3, [pc, #364]	@ (800c15c <PID_Init+0x1ac>)
 800bfee:	f04f 0200 	mov.w	r2, #0
 800bff2:	61da      	str	r2, [r3, #28]

	XPID.err = 0.0;
 800bff4:	4b59      	ldr	r3, [pc, #356]	@ (800c15c <PID_Init+0x1ac>)
 800bff6:	2200      	movs	r2, #0
 800bff8:	849a      	strh	r2, [r3, #36]	@ 0x24
	XPID.err_err = 0.0;
 800bffa:	4b58      	ldr	r3, [pc, #352]	@ (800c15c <PID_Init+0x1ac>)
 800bffc:	2200      	movs	r2, #0
 800bffe:	84da      	strh	r2, [r3, #38]	@ 0x26
	XPID.err_old = 0.0;
 800c000:	4b56      	ldr	r3, [pc, #344]	@ (800c15c <PID_Init+0x1ac>)
 800c002:	2200      	movs	r2, #0
 800c004:	851a      	strh	r2, [r3, #40]	@ 0x28

	//========= =============Y=====================//
	YPID.P = 20;    //0.89                     //0.8 0 0.01
 800c006:	4b59      	ldr	r3, [pc, #356]	@ (800c16c <PID_Init+0x1bc>)
 800c008:	4a55      	ldr	r2, [pc, #340]	@ (800c160 <PID_Init+0x1b0>)
 800c00a:	601a      	str	r2, [r3, #0]
	YPID.I = 0;
 800c00c:	4b57      	ldr	r3, [pc, #348]	@ (800c16c <PID_Init+0x1bc>)
 800c00e:	f04f 0200 	mov.w	r2, #0
 800c012:	609a      	str	r2, [r3, #8]
	YPID.D = 60;    //60
 800c014:	4b55      	ldr	r3, [pc, #340]	@ (800c16c <PID_Init+0x1bc>)
 800c016:	4a53      	ldr	r2, [pc, #332]	@ (800c164 <PID_Init+0x1b4>)
 800c018:	615a      	str	r2, [r3, #20]
	YPID.I_LIMIT = 100.0;
 800c01a:	4b54      	ldr	r3, [pc, #336]	@ (800c16c <PID_Init+0x1bc>)
 800c01c:	4a52      	ldr	r2, [pc, #328]	@ (800c168 <PID_Init+0x1b8>)
 800c01e:	611a      	str	r2, [r3, #16]
	YPID.OUT_LIMIT = 100.0;
 800c020:	4b52      	ldr	r3, [pc, #328]	@ (800c16c <PID_Init+0x1bc>)
 800c022:	4a51      	ldr	r2, [pc, #324]	@ (800c168 <PID_Init+0x1b8>)
 800c024:	621a      	str	r2, [r3, #32]

	YPID.P_OUT = 0.0;
 800c026:	4b51      	ldr	r3, [pc, #324]	@ (800c16c <PID_Init+0x1bc>)
 800c028:	f04f 0200 	mov.w	r2, #0
 800c02c:	605a      	str	r2, [r3, #4]
	YPID.I_OUT = 0.0;
 800c02e:	4b4f      	ldr	r3, [pc, #316]	@ (800c16c <PID_Init+0x1bc>)
 800c030:	f04f 0200 	mov.w	r2, #0
 800c034:	60da      	str	r2, [r3, #12]
	YPID.D_OUT = 0.0;
 800c036:	4b4d      	ldr	r3, [pc, #308]	@ (800c16c <PID_Init+0x1bc>)
 800c038:	f04f 0200 	mov.w	r2, #0
 800c03c:	619a      	str	r2, [r3, #24]

	YPID.OUT = 0.0;
 800c03e:	4b4b      	ldr	r3, [pc, #300]	@ (800c16c <PID_Init+0x1bc>)
 800c040:	f04f 0200 	mov.w	r2, #0
 800c044:	61da      	str	r2, [r3, #28]

	YPID.err = 0.0;
 800c046:	4b49      	ldr	r3, [pc, #292]	@ (800c16c <PID_Init+0x1bc>)
 800c048:	2200      	movs	r2, #0
 800c04a:	849a      	strh	r2, [r3, #36]	@ 0x24
	YPID.err_err = 0.0;
 800c04c:	4b47      	ldr	r3, [pc, #284]	@ (800c16c <PID_Init+0x1bc>)
 800c04e:	2200      	movs	r2, #0
 800c050:	84da      	strh	r2, [r3, #38]	@ 0x26
	YPID.err_old = 0.0;
 800c052:	4b46      	ldr	r3, [pc, #280]	@ (800c16c <PID_Init+0x1bc>)
 800c054:	2200      	movs	r2, #0
 800c056:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================A=====================//
	APID.P = 0.9;
 800c058:	4b45      	ldr	r3, [pc, #276]	@ (800c170 <PID_Init+0x1c0>)
 800c05a:	4a46      	ldr	r2, [pc, #280]	@ (800c174 <PID_Init+0x1c4>)
 800c05c:	601a      	str	r2, [r3, #0]
	APID.I = 0.0;
 800c05e:	4b44      	ldr	r3, [pc, #272]	@ (800c170 <PID_Init+0x1c0>)
 800c060:	f04f 0200 	mov.w	r2, #0
 800c064:	609a      	str	r2, [r3, #8]
	APID.D = 0.0;
 800c066:	4b42      	ldr	r3, [pc, #264]	@ (800c170 <PID_Init+0x1c0>)
 800c068:	f04f 0200 	mov.w	r2, #0
 800c06c:	615a      	str	r2, [r3, #20]

	APID.I_LIMIT = 1000.0;
 800c06e:	4b40      	ldr	r3, [pc, #256]	@ (800c170 <PID_Init+0x1c0>)
 800c070:	4a41      	ldr	r2, [pc, #260]	@ (800c178 <PID_Init+0x1c8>)
 800c072:	611a      	str	r2, [r3, #16]
	APID.OUT_LIMIT = 2350.0;
 800c074:	4b3e      	ldr	r3, [pc, #248]	@ (800c170 <PID_Init+0x1c0>)
 800c076:	4a41      	ldr	r2, [pc, #260]	@ (800c17c <PID_Init+0x1cc>)
 800c078:	621a      	str	r2, [r3, #32]

	APID.P_OUT = 0.0;
 800c07a:	4b3d      	ldr	r3, [pc, #244]	@ (800c170 <PID_Init+0x1c0>)
 800c07c:	f04f 0200 	mov.w	r2, #0
 800c080:	605a      	str	r2, [r3, #4]
	APID.I_OUT = 0.0;
 800c082:	4b3b      	ldr	r3, [pc, #236]	@ (800c170 <PID_Init+0x1c0>)
 800c084:	f04f 0200 	mov.w	r2, #0
 800c088:	60da      	str	r2, [r3, #12]
	APID.D_OUT = 0.0;
 800c08a:	4b39      	ldr	r3, [pc, #228]	@ (800c170 <PID_Init+0x1c0>)
 800c08c:	f04f 0200 	mov.w	r2, #0
 800c090:	619a      	str	r2, [r3, #24]

	APID.OUT = 0.0;
 800c092:	4b37      	ldr	r3, [pc, #220]	@ (800c170 <PID_Init+0x1c0>)
 800c094:	f04f 0200 	mov.w	r2, #0
 800c098:	61da      	str	r2, [r3, #28]

	APID.err = 0.0;
 800c09a:	4b35      	ldr	r3, [pc, #212]	@ (800c170 <PID_Init+0x1c0>)
 800c09c:	2200      	movs	r2, #0
 800c09e:	849a      	strh	r2, [r3, #36]	@ 0x24
	APID.err_err = 0.0;
 800c0a0:	4b33      	ldr	r3, [pc, #204]	@ (800c170 <PID_Init+0x1c0>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	84da      	strh	r2, [r3, #38]	@ 0x26
	APID.err_old = 0.0;
 800c0a6:	4b32      	ldr	r3, [pc, #200]	@ (800c170 <PID_Init+0x1c0>)
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	851a      	strh	r2, [r3, #40]	@ 0x28
	//======================TX=====================//
	TXPID.P = 1;
 800c0ac:	4b34      	ldr	r3, [pc, #208]	@ (800c180 <PID_Init+0x1d0>)
 800c0ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c0b2:	601a      	str	r2, [r3, #0]
	TXPID.I = 0;
 800c0b4:	4b32      	ldr	r3, [pc, #200]	@ (800c180 <PID_Init+0x1d0>)
 800c0b6:	f04f 0200 	mov.w	r2, #0
 800c0ba:	609a      	str	r2, [r3, #8]
	TXPID.D = 0.3;
 800c0bc:	4b30      	ldr	r3, [pc, #192]	@ (800c180 <PID_Init+0x1d0>)
 800c0be:	4a31      	ldr	r2, [pc, #196]	@ (800c184 <PID_Init+0x1d4>)
 800c0c0:	615a      	str	r2, [r3, #20]

	TXPID.I_LIMIT = 100.0;
 800c0c2:	4b2f      	ldr	r3, [pc, #188]	@ (800c180 <PID_Init+0x1d0>)
 800c0c4:	4a28      	ldr	r2, [pc, #160]	@ (800c168 <PID_Init+0x1b8>)
 800c0c6:	611a      	str	r2, [r3, #16]
	TXPID.OUT_LIMIT = 300.0;
 800c0c8:	4b2d      	ldr	r3, [pc, #180]	@ (800c180 <PID_Init+0x1d0>)
 800c0ca:	4a2f      	ldr	r2, [pc, #188]	@ (800c188 <PID_Init+0x1d8>)
 800c0cc:	621a      	str	r2, [r3, #32]

	TXPID.P_OUT = 0.0;
 800c0ce:	4b2c      	ldr	r3, [pc, #176]	@ (800c180 <PID_Init+0x1d0>)
 800c0d0:	f04f 0200 	mov.w	r2, #0
 800c0d4:	605a      	str	r2, [r3, #4]
	TXPID.I_OUT = 0.0;
 800c0d6:	4b2a      	ldr	r3, [pc, #168]	@ (800c180 <PID_Init+0x1d0>)
 800c0d8:	f04f 0200 	mov.w	r2, #0
 800c0dc:	60da      	str	r2, [r3, #12]
	TXPID.D_OUT = 0.0;
 800c0de:	4b28      	ldr	r3, [pc, #160]	@ (800c180 <PID_Init+0x1d0>)
 800c0e0:	f04f 0200 	mov.w	r2, #0
 800c0e4:	619a      	str	r2, [r3, #24]

	TXPID.OUT = 0.0;
 800c0e6:	4b26      	ldr	r3, [pc, #152]	@ (800c180 <PID_Init+0x1d0>)
 800c0e8:	f04f 0200 	mov.w	r2, #0
 800c0ec:	61da      	str	r2, [r3, #28]

	TXPID.err = 0.0;
 800c0ee:	4b24      	ldr	r3, [pc, #144]	@ (800c180 <PID_Init+0x1d0>)
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	849a      	strh	r2, [r3, #36]	@ 0x24
	TXPID.err_err = 0.0;
 800c0f4:	4b22      	ldr	r3, [pc, #136]	@ (800c180 <PID_Init+0x1d0>)
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	84da      	strh	r2, [r3, #38]	@ 0x26
	TXPID.err_old = 0.0;
 800c0fa:	4b21      	ldr	r3, [pc, #132]	@ (800c180 <PID_Init+0x1d0>)
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================TY=====================//
	TYPID.P = -1;
 800c100:	4b22      	ldr	r3, [pc, #136]	@ (800c18c <PID_Init+0x1dc>)
 800c102:	4a23      	ldr	r2, [pc, #140]	@ (800c190 <PID_Init+0x1e0>)
 800c104:	601a      	str	r2, [r3, #0]
	TYPID.I = -0;      //0.9  0.01   0.3
 800c106:	4b21      	ldr	r3, [pc, #132]	@ (800c18c <PID_Init+0x1dc>)
 800c108:	f04f 0200 	mov.w	r2, #0
 800c10c:	609a      	str	r2, [r3, #8]
	//0.9 0 0.2
	TYPID.D = -0.3;
 800c10e:	4b1f      	ldr	r3, [pc, #124]	@ (800c18c <PID_Init+0x1dc>)
 800c110:	4a20      	ldr	r2, [pc, #128]	@ (800c194 <PID_Init+0x1e4>)
 800c112:	615a      	str	r2, [r3, #20]

	TYPID.I_LIMIT = 100.0;
 800c114:	4b1d      	ldr	r3, [pc, #116]	@ (800c18c <PID_Init+0x1dc>)
 800c116:	4a14      	ldr	r2, [pc, #80]	@ (800c168 <PID_Init+0x1b8>)
 800c118:	611a      	str	r2, [r3, #16]
	TYPID.OUT_LIMIT = 300.0;
 800c11a:	4b1c      	ldr	r3, [pc, #112]	@ (800c18c <PID_Init+0x1dc>)
 800c11c:	4a1a      	ldr	r2, [pc, #104]	@ (800c188 <PID_Init+0x1d8>)
 800c11e:	621a      	str	r2, [r3, #32]

	TYPID.P_OUT = 0.0;
 800c120:	4b1a      	ldr	r3, [pc, #104]	@ (800c18c <PID_Init+0x1dc>)
 800c122:	f04f 0200 	mov.w	r2, #0
 800c126:	605a      	str	r2, [r3, #4]
	TYPID.I_OUT = 0.0;
 800c128:	4b18      	ldr	r3, [pc, #96]	@ (800c18c <PID_Init+0x1dc>)
 800c12a:	f04f 0200 	mov.w	r2, #0
 800c12e:	60da      	str	r2, [r3, #12]
	TYPID.D_OUT = 0.0;
 800c130:	4b16      	ldr	r3, [pc, #88]	@ (800c18c <PID_Init+0x1dc>)
 800c132:	f04f 0200 	mov.w	r2, #0
 800c136:	619a      	str	r2, [r3, #24]

	TYPID.OUT = 0.0;
 800c138:	4b14      	ldr	r3, [pc, #80]	@ (800c18c <PID_Init+0x1dc>)
 800c13a:	f04f 0200 	mov.w	r2, #0
 800c13e:	61da      	str	r2, [r3, #28]

	TYPID.err = 0.0;
 800c140:	4b12      	ldr	r3, [pc, #72]	@ (800c18c <PID_Init+0x1dc>)
 800c142:	2200      	movs	r2, #0
 800c144:	849a      	strh	r2, [r3, #36]	@ 0x24
	TYPID.err_err = 0.0;
 800c146:	4b11      	ldr	r3, [pc, #68]	@ (800c18c <PID_Init+0x1dc>)
 800c148:	2200      	movs	r2, #0
 800c14a:	84da      	strh	r2, [r3, #38]	@ 0x26
	TYPID.err_old = 0.0;
 800c14c:	4b0f      	ldr	r3, [pc, #60]	@ (800c18c <PID_Init+0x1dc>)
 800c14e:	2200      	movs	r2, #0
 800c150:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800c152:	bf00      	nop
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	24000afc 	.word	0x24000afc
 800c160:	41a00000 	.word	0x41a00000
 800c164:	42700000 	.word	0x42700000
 800c168:	42c80000 	.word	0x42c80000
 800c16c:	24000b28 	.word	0x24000b28
 800c170:	24000b54 	.word	0x24000b54
 800c174:	3f666666 	.word	0x3f666666
 800c178:	447a0000 	.word	0x447a0000
 800c17c:	4512e000 	.word	0x4512e000
 800c180:	24000b80 	.word	0x24000b80
 800c184:	3e99999a 	.word	0x3e99999a
 800c188:	43960000 	.word	0x43960000
 800c18c:	24000bac 	.word	0x24000bac
 800c190:	bf800000 	.word	0xbf800000
 800c194:	be99999a 	.word	0xbe99999a

0800c198 <Tx_X_Ctrl>:
	PID->err_old = PID->err;

	return PID->OUT;
}
/* TX的X轴调整 */
short Tx_X_Ctrl(_PID *PID, float goal) {
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Tx_NOW - goal;
 800c1a4:	4b4e      	ldr	r3, [pc, #312]	@ (800c2e0 <Tx_X_Ctrl+0x148>)
 800c1a6:	ed93 7a00 	vldr	s14, [r3]
 800c1aa:	edd7 7a00 	vldr	s15, [r7]
 800c1ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c1b6:	ee17 3a90 	vmov	r3, s15
 800c1ba:	b21a      	sxth	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	b21a      	sxth	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	ed93 7a00 	vldr	s14, [r3]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c1e6:	ee07 3a90 	vmov	s15, r3
 800c1ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	ed93 7a03 	vldr	s14, [r3, #12]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	edd3 6a02 	vldr	s13, [r3, #8]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c20a:	ee07 3a90 	vmov	s15, r3
 800c20e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	ed93 7a05 	vldr	s14, [r3, #20]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c22c:	ee07 3a90 	vmov	s15, r3
 800c230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c234:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	ed93 7a03 	vldr	s14, [r3, #12]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	edd3 7a04 	vldr	s15, [r3, #16]
 800c24a:	eef1 7a67 	vneg.f32	s15, s15
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	edd3 6a04 	vldr	s13, [r3, #16]
 800c254:	eeb0 1a66 	vmov.f32	s2, s13
 800c258:	eef0 0a67 	vmov.f32	s1, s15
 800c25c:	eeb0 0a47 	vmov.f32	s0, s14
 800c260:	f7ff fe7a 	bl	800bf58 <limit>
 800c264:	eef0 7a40 	vmov.f32	s15, s0
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	ed93 7a01 	vldr	s14, [r3, #4]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	edd3 7a03 	vldr	s15, [r3, #12]
 800c27a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	edd3 7a06 	vldr	s15, [r3, #24]
 800c284:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	ed93 7a07 	vldr	s14, [r3, #28]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	edd3 7a08 	vldr	s15, [r3, #32]
 800c29a:	eef1 7a67 	vneg.f32	s15, s15
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	edd3 6a08 	vldr	s13, [r3, #32]
 800c2a4:	eeb0 1a66 	vmov.f32	s2, s13
 800c2a8:	eef0 0a67 	vmov.f32	s1, s15
 800c2ac:	eeb0 0a47 	vmov.f32	s0, s14
 800c2b0:	f7ff fe52 	bl	800bf58 <limit>
 800c2b4:	eef0 7a40 	vmov.f32	s15, s0
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	edd3 7a07 	vldr	s15, [r3, #28]
 800c2ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2d2:	ee17 3a90 	vmov	r3, s15
 800c2d6:	b21b      	sxth	r3, r3
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	24000454 	.word	0x24000454

0800c2e4 <Tx_Y_Ctrl>:

/* TX的Y轴调整 */
short Tx_Y_Ctrl(_PID *PID, float goal) {
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Ty_NOW - goal;
 800c2f0:	4b4e      	ldr	r3, [pc, #312]	@ (800c42c <Tx_Y_Ctrl+0x148>)
 800c2f2:	ed93 7a00 	vldr	s14, [r3]
 800c2f6:	edd7 7a00 	vldr	s15, [r7]
 800c2fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c302:	ee17 3a90 	vmov	r3, s15
 800c306:	b21a      	sxth	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c312:	b29a      	uxth	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	1ad3      	subs	r3, r2, r3
 800c31e:	b29b      	uxth	r3, r3
 800c320:	b21a      	sxth	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	ed93 7a00 	vldr	s14, [r3]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c332:	ee07 3a90 	vmov	s15, r3
 800c336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c33a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	ed93 7a03 	vldr	s14, [r3, #12]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	edd3 6a02 	vldr	s13, [r3, #8]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c356:	ee07 3a90 	vmov	s15, r3
 800c35a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c35e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c362:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	ed93 7a05 	vldr	s14, [r3, #20]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c378:	ee07 3a90 	vmov	s15, r3
 800c37c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c380:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	ed93 7a03 	vldr	s14, [r3, #12]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	edd3 7a04 	vldr	s15, [r3, #16]
 800c396:	eef1 7a67 	vneg.f32	s15, s15
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	edd3 6a04 	vldr	s13, [r3, #16]
 800c3a0:	eeb0 1a66 	vmov.f32	s2, s13
 800c3a4:	eef0 0a67 	vmov.f32	s1, s15
 800c3a8:	eeb0 0a47 	vmov.f32	s0, s14
 800c3ac:	f7ff fdd4 	bl	800bf58 <limit>
 800c3b0:	eef0 7a40 	vmov.f32	s15, s0
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	ed93 7a01 	vldr	s14, [r3, #4]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	edd3 7a03 	vldr	s15, [r3, #12]
 800c3c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	edd3 7a06 	vldr	s15, [r3, #24]
 800c3d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	ed93 7a07 	vldr	s14, [r3, #28]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	edd3 7a08 	vldr	s15, [r3, #32]
 800c3e6:	eef1 7a67 	vneg.f32	s15, s15
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	edd3 6a08 	vldr	s13, [r3, #32]
 800c3f0:	eeb0 1a66 	vmov.f32	s2, s13
 800c3f4:	eef0 0a67 	vmov.f32	s1, s15
 800c3f8:	eeb0 0a47 	vmov.f32	s0, s14
 800c3fc:	f7ff fdac 	bl	800bf58 <limit>
 800c400:	eef0 7a40 	vmov.f32	s15, s0
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	edd3 7a07 	vldr	s15, [r3, #28]
 800c41a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c41e:	ee17 3a90 	vmov	r3, s15
 800c422:	b21b      	sxth	r3, r3
}
 800c424:	4618      	mov	r0, r3
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	24000458 	.word	0x24000458

0800c430 <GetRxFlag>:
#define RunSpeed 100
#define RunAcc 120

int time5_jiancha = 0;

uint8_t GetRxFlag(void) {
 800c430:	b480      	push	{r7}
 800c432:	af00      	add	r7, sp, #0
	if (RxFlag == 1) {
 800c434:	4b07      	ldr	r3, [pc, #28]	@ (800c454 <GetRxFlag+0x24>)
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d104      	bne.n	800c446 <GetRxFlag+0x16>
		RxFlag = 0;
 800c43c:	4b05      	ldr	r3, [pc, #20]	@ (800c454 <GetRxFlag+0x24>)
 800c43e:	2200      	movs	r2, #0
 800c440:	701a      	strb	r2, [r3, #0]
		return 1;
 800c442:	2301      	movs	r3, #1
 800c444:	e000      	b.n	800c448 <GetRxFlag+0x18>
	}
	return 0;
 800c446:	2300      	movs	r3, #0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	2400029d 	.word	0x2400029d

0800c458 <Move_Line>:
////曲线加减速时间计算公式：t2 - t1 = (256 - acc) * 50(us)，Vt2 = Vt1 + 1(RPM)；
////（注：acc 为加速度档位，Vt1为 t1 时刻的转速，，Vt2为 t2 时刻的转速）
/////////////////////////////////////////////////////////////////////////////////////////////
//后续根据实物再进行调整
void Move_Line(u16 speed, u8 acc, u32 length)  //初始设定130.5个脉冲是一厘米
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b088      	sub	sp, #32
 800c45c:	af04      	add	r7, sp, #16
 800c45e:	4603      	mov	r3, r0
 800c460:	603a      	str	r2, [r7, #0]
 800c462:	80fb      	strh	r3, [r7, #6]
 800c464:	460b      	mov	r3, r1
 800c466:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c468:	88fb      	ldrh	r3, [r7, #6]
 800c46a:	683a      	ldr	r2, [r7, #0]
 800c46c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c470:	4613      	mov	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4413      	add	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c47a:	7979      	ldrb	r1, [r7, #5]
 800c47c:	88fa      	ldrh	r2, [r7, #6]
 800c47e:	2301      	movs	r3, #1
 800c480:	9302      	str	r3, [sp, #8]
 800c482:	2300      	movs	r3, #0
 800c484:	9301      	str	r3, [sp, #4]
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	9300      	str	r3, [sp, #0]
 800c48a:	460b      	mov	r3, r1
 800c48c:	2100      	movs	r1, #0
 800c48e:	2001      	movs	r0, #1
 800c490:	f7ff fcd2 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c494:	7979      	ldrb	r1, [r7, #5]
 800c496:	88fa      	ldrh	r2, [r7, #6]
 800c498:	2301      	movs	r3, #1
 800c49a:	9302      	str	r3, [sp, #8]
 800c49c:	2300      	movs	r3, #0
 800c49e:	9301      	str	r3, [sp, #4]
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	2002      	movs	r0, #2
 800c4aa:	f7ff fcc5 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c4ae:	7979      	ldrb	r1, [r7, #5]
 800c4b0:	88fa      	ldrh	r2, [r7, #6]
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	9302      	str	r3, [sp, #8]
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	9301      	str	r3, [sp, #4]
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	9300      	str	r3, [sp, #0]
 800c4be:	460b      	mov	r3, r1
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	2003      	movs	r0, #3
 800c4c4:	f7ff fcb8 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c4c8:	7979      	ldrb	r1, [r7, #5]
 800c4ca:	88fa      	ldrh	r2, [r7, #6]
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	9302      	str	r3, [sp, #8]
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	9301      	str	r3, [sp, #4]
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	9300      	str	r3, [sp, #0]
 800c4d8:	460b      	mov	r3, r1
 800c4da:	2100      	movs	r1, #0
 800c4dc:	2004      	movs	r0, #4
 800c4de:	f7ff fcab 	bl	800be38 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动
 800c4e2:	f7ff fd1f 	bl	800bf24 <Emm_V5_Synchronous_motion>
	Emm_mode = 1;
 800c4e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c524 <Move_Line+0xcc>)
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c4f2:	4a0d      	ldr	r2, [pc, #52]	@ (800c528 <Move_Line+0xd0>)
 800c4f4:	fb82 1203 	smull	r1, r2, r2, r3
 800c4f8:	1092      	asrs	r2, r2, #2
 800c4fa:	17db      	asrs	r3, r3, #31
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	4a0b      	ldr	r2, [pc, #44]	@ (800c52c <Move_Line+0xd4>)
 800c500:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0)&& (time5_jiancha != 0) )
 800c502:	bf00      	nop
 800c504:	f7ff ff94 	bl	800c430 <GetRxFlag>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d103      	bne.n	800c516 <Move_Line+0xbe>
 800c50e:	4b07      	ldr	r3, [pc, #28]	@ (800c52c <Move_Line+0xd4>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d1f6      	bne.n	800c504 <Move_Line+0xac>
		;
//	RxFlag = 0;·
	HAL_Delay(30);
 800c516:	201e      	movs	r0, #30
 800c518:	f7f6 fb64 	bl	8002be4 <HAL_Delay>
}
 800c51c:	bf00      	nop
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	2400029c 	.word	0x2400029c
 800c528:	66666667 	.word	0x66666667
 800c52c:	24000be0 	.word	0x24000be0

0800c530 <Move_Left>:

void Move_Left(u16 speed, u8 acc, u32 length) {
 800c530:	b580      	push	{r7, lr}
 800c532:	b088      	sub	sp, #32
 800c534:	af04      	add	r7, sp, #16
 800c536:	4603      	mov	r3, r0
 800c538:	603a      	str	r2, [r7, #0]
 800c53a:	80fb      	strh	r3, [r7, #6]
 800c53c:	460b      	mov	r3, r1
 800c53e:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c540:	88fb      	ldrh	r3, [r7, #6]
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	fbb2 f2f3 	udiv	r2, r2, r3
 800c548:	4613      	mov	r3, r2
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	4413      	add	r3, r2
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c552:	7979      	ldrb	r1, [r7, #5]
 800c554:	88fa      	ldrh	r2, [r7, #6]
 800c556:	2301      	movs	r3, #1
 800c558:	9302      	str	r3, [sp, #8]
 800c55a:	2300      	movs	r3, #0
 800c55c:	9301      	str	r3, [sp, #4]
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	460b      	mov	r3, r1
 800c564:	2101      	movs	r1, #1
 800c566:	2001      	movs	r0, #1
 800c568:	f7ff fc66 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c56c:	7979      	ldrb	r1, [r7, #5]
 800c56e:	88fa      	ldrh	r2, [r7, #6]
 800c570:	2301      	movs	r3, #1
 800c572:	9302      	str	r3, [sp, #8]
 800c574:	2300      	movs	r3, #0
 800c576:	9301      	str	r3, [sp, #4]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	460b      	mov	r3, r1
 800c57e:	2100      	movs	r1, #0
 800c580:	2002      	movs	r0, #2
 800c582:	f7ff fc59 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c586:	7979      	ldrb	r1, [r7, #5]
 800c588:	88fa      	ldrh	r2, [r7, #6]
 800c58a:	2301      	movs	r3, #1
 800c58c:	9302      	str	r3, [sp, #8]
 800c58e:	2300      	movs	r3, #0
 800c590:	9301      	str	r3, [sp, #4]
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	9300      	str	r3, [sp, #0]
 800c596:	460b      	mov	r3, r1
 800c598:	2101      	movs	r1, #1
 800c59a:	2003      	movs	r0, #3
 800c59c:	f7ff fc4c 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c5a0:	7979      	ldrb	r1, [r7, #5]
 800c5a2:	88fa      	ldrh	r2, [r7, #6]
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	9302      	str	r3, [sp, #8]
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	9301      	str	r3, [sp, #4]
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	9300      	str	r3, [sp, #0]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	2004      	movs	r0, #4
 800c5b6:	f7ff fc3f 	bl	800be38 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800c5ba:	f7ff fcb3 	bl	800bf24 <Emm_V5_Synchronous_motion>

	Emm_mode = 1;
 800c5be:	4b0f      	ldr	r3, [pc, #60]	@ (800c5fc <Move_Left+0xcc>)
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c5ca:	4a0d      	ldr	r2, [pc, #52]	@ (800c600 <Move_Left+0xd0>)
 800c5cc:	fb82 1203 	smull	r1, r2, r2, r3
 800c5d0:	1092      	asrs	r2, r2, #2
 800c5d2:	17db      	asrs	r3, r3, #31
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	4a0b      	ldr	r2, [pc, #44]	@ (800c604 <Move_Left+0xd4>)
 800c5d8:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c5da:	bf00      	nop
 800c5dc:	f7ff ff28 	bl	800c430 <GetRxFlag>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d103      	bne.n	800c5ee <Move_Left+0xbe>
 800c5e6:	4b07      	ldr	r3, [pc, #28]	@ (800c604 <Move_Left+0xd4>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1f6      	bne.n	800c5dc <Move_Left+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c5ee:	201e      	movs	r0, #30
 800c5f0:	f7f6 faf8 	bl	8002be4 <HAL_Delay>
}
 800c5f4:	bf00      	nop
 800c5f6:	3710      	adds	r7, #16
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	2400029c 	.word	0x2400029c
 800c600:	66666667 	.word	0x66666667
 800c604:	24000be0 	.word	0x24000be0

0800c608 <Move_Back>:

void Move_Back(u16 speed, u8 acc, u32 length) {
 800c608:	b580      	push	{r7, lr}
 800c60a:	b088      	sub	sp, #32
 800c60c:	af04      	add	r7, sp, #16
 800c60e:	4603      	mov	r3, r0
 800c610:	603a      	str	r2, [r7, #0]
 800c612:	80fb      	strh	r3, [r7, #6]
 800c614:	460b      	mov	r3, r1
 800c616:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c618:	88fb      	ldrh	r3, [r7, #6]
 800c61a:	683a      	ldr	r2, [r7, #0]
 800c61c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c620:	4613      	mov	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	4413      	add	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c62a:	7979      	ldrb	r1, [r7, #5]
 800c62c:	88fa      	ldrh	r2, [r7, #6]
 800c62e:	2301      	movs	r3, #1
 800c630:	9302      	str	r3, [sp, #8]
 800c632:	2300      	movs	r3, #0
 800c634:	9301      	str	r3, [sp, #4]
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	460b      	mov	r3, r1
 800c63c:	2101      	movs	r1, #1
 800c63e:	2001      	movs	r0, #1
 800c640:	f7ff fbfa 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c644:	7979      	ldrb	r1, [r7, #5]
 800c646:	88fa      	ldrh	r2, [r7, #6]
 800c648:	2301      	movs	r3, #1
 800c64a:	9302      	str	r3, [sp, #8]
 800c64c:	2300      	movs	r3, #0
 800c64e:	9301      	str	r3, [sp, #4]
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	460b      	mov	r3, r1
 800c656:	2101      	movs	r1, #1
 800c658:	2002      	movs	r0, #2
 800c65a:	f7ff fbed 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c65e:	7979      	ldrb	r1, [r7, #5]
 800c660:	88fa      	ldrh	r2, [r7, #6]
 800c662:	2301      	movs	r3, #1
 800c664:	9302      	str	r3, [sp, #8]
 800c666:	2300      	movs	r3, #0
 800c668:	9301      	str	r3, [sp, #4]
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	460b      	mov	r3, r1
 800c670:	2101      	movs	r1, #1
 800c672:	2003      	movs	r0, #3
 800c674:	f7ff fbe0 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c678:	7979      	ldrb	r1, [r7, #5]
 800c67a:	88fa      	ldrh	r2, [r7, #6]
 800c67c:	2301      	movs	r3, #1
 800c67e:	9302      	str	r3, [sp, #8]
 800c680:	2300      	movs	r3, #0
 800c682:	9301      	str	r3, [sp, #4]
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	460b      	mov	r3, r1
 800c68a:	2101      	movs	r1, #1
 800c68c:	2004      	movs	r0, #4
 800c68e:	f7ff fbd3 	bl	800be38 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800c692:	f7ff fc47 	bl	800bf24 <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800c696:	4b0f      	ldr	r3, [pc, #60]	@ (800c6d4 <Move_Back+0xcc>)
 800c698:	2201      	movs	r2, #1
 800c69a:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c6a2:	4a0d      	ldr	r2, [pc, #52]	@ (800c6d8 <Move_Back+0xd0>)
 800c6a4:	fb82 1203 	smull	r1, r2, r2, r3
 800c6a8:	1092      	asrs	r2, r2, #2
 800c6aa:	17db      	asrs	r3, r3, #31
 800c6ac:	1ad3      	subs	r3, r2, r3
 800c6ae:	4a0b      	ldr	r2, [pc, #44]	@ (800c6dc <Move_Back+0xd4>)
 800c6b0:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c6b2:	bf00      	nop
 800c6b4:	f7ff febc 	bl	800c430 <GetRxFlag>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d103      	bne.n	800c6c6 <Move_Back+0xbe>
 800c6be:	4b07      	ldr	r3, [pc, #28]	@ (800c6dc <Move_Back+0xd4>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1f6      	bne.n	800c6b4 <Move_Back+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c6c6:	201e      	movs	r0, #30
 800c6c8:	f7f6 fa8c 	bl	8002be4 <HAL_Delay>
}
 800c6cc:	bf00      	nop
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	2400029c 	.word	0x2400029c
 800c6d8:	66666667 	.word	0x66666667
 800c6dc:	24000be0 	.word	0x24000be0

0800c6e0 <Move_Right>:

void Move_Right(u16 speed, u8 acc, u32 length) {
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b088      	sub	sp, #32
 800c6e4:	af04      	add	r7, sp, #16
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	603a      	str	r2, [r7, #0]
 800c6ea:	80fb      	strh	r3, [r7, #6]
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c6f0:	88fb      	ldrh	r3, [r7, #6]
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	4413      	add	r3, r2
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c702:	7979      	ldrb	r1, [r7, #5]
 800c704:	88fa      	ldrh	r2, [r7, #6]
 800c706:	2301      	movs	r3, #1
 800c708:	9302      	str	r3, [sp, #8]
 800c70a:	2300      	movs	r3, #0
 800c70c:	9301      	str	r3, [sp, #4]
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	9300      	str	r3, [sp, #0]
 800c712:	460b      	mov	r3, r1
 800c714:	2100      	movs	r1, #0
 800c716:	2001      	movs	r0, #1
 800c718:	f7ff fb8e 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c71c:	7979      	ldrb	r1, [r7, #5]
 800c71e:	88fa      	ldrh	r2, [r7, #6]
 800c720:	2301      	movs	r3, #1
 800c722:	9302      	str	r3, [sp, #8]
 800c724:	2300      	movs	r3, #0
 800c726:	9301      	str	r3, [sp, #4]
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	460b      	mov	r3, r1
 800c72e:	2101      	movs	r1, #1
 800c730:	2002      	movs	r0, #2
 800c732:	f7ff fb81 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c736:	7979      	ldrb	r1, [r7, #5]
 800c738:	88fa      	ldrh	r2, [r7, #6]
 800c73a:	2301      	movs	r3, #1
 800c73c:	9302      	str	r3, [sp, #8]
 800c73e:	2300      	movs	r3, #0
 800c740:	9301      	str	r3, [sp, #4]
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	9300      	str	r3, [sp, #0]
 800c746:	460b      	mov	r3, r1
 800c748:	2100      	movs	r1, #0
 800c74a:	2003      	movs	r0, #3
 800c74c:	f7ff fb74 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c750:	7979      	ldrb	r1, [r7, #5]
 800c752:	88fa      	ldrh	r2, [r7, #6]
 800c754:	2301      	movs	r3, #1
 800c756:	9302      	str	r3, [sp, #8]
 800c758:	2300      	movs	r3, #0
 800c75a:	9301      	str	r3, [sp, #4]
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	9300      	str	r3, [sp, #0]
 800c760:	460b      	mov	r3, r1
 800c762:	2101      	movs	r1, #1
 800c764:	2004      	movs	r0, #4
 800c766:	f7ff fb67 	bl	800be38 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion();
 800c76a:	f7ff fbdb 	bl	800bf24 <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800c76e:	4b0f      	ldr	r3, [pc, #60]	@ (800c7ac <Move_Right+0xcc>)
 800c770:	2201      	movs	r2, #1
 800c772:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c77a:	4a0d      	ldr	r2, [pc, #52]	@ (800c7b0 <Move_Right+0xd0>)
 800c77c:	fb82 1203 	smull	r1, r2, r2, r3
 800c780:	1092      	asrs	r2, r2, #2
 800c782:	17db      	asrs	r3, r3, #31
 800c784:	1ad3      	subs	r3, r2, r3
 800c786:	4a0b      	ldr	r2, [pc, #44]	@ (800c7b4 <Move_Right+0xd4>)
 800c788:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c78a:	bf00      	nop
 800c78c:	f7ff fe50 	bl	800c430 <GetRxFlag>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d103      	bne.n	800c79e <Move_Right+0xbe>
 800c796:	4b07      	ldr	r3, [pc, #28]	@ (800c7b4 <Move_Right+0xd4>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d1f6      	bne.n	800c78c <Move_Right+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c79e:	201e      	movs	r0, #30
 800c7a0:	f7f6 fa20 	bl	8002be4 <HAL_Delay>
}
 800c7a4:	bf00      	nop
 800c7a6:	3710      	adds	r7, #16
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	2400029c 	.word	0x2400029c
 800c7b0:	66666667 	.word	0x66666667
 800c7b4:	24000be0 	.word	0x24000be0

0800c7b8 <Move_zhengxuzhuan>:
void Move_zhengxuzhuan(u16 speed, u8 acc, u32 length) {
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b088      	sub	sp, #32
 800c7bc:	af04      	add	r7, sp, #16
 800c7be:	4603      	mov	r3, r0
 800c7c0:	603a      	str	r2, [r7, #0]
 800c7c2:	80fb      	strh	r3, [r7, #6]
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c7c8:	88fb      	ldrh	r3, [r7, #6]
 800c7ca:	683a      	ldr	r2, [r7, #0]
 800c7cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	4413      	add	r3, r2
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c7da:	7979      	ldrb	r1, [r7, #5]
 800c7dc:	88fa      	ldrh	r2, [r7, #6]
 800c7de:	2301      	movs	r3, #1
 800c7e0:	9302      	str	r3, [sp, #8]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	9301      	str	r3, [sp, #4]
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	2001      	movs	r0, #1
 800c7f0:	f7ff fb22 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c7f4:	7979      	ldrb	r1, [r7, #5]
 800c7f6:	88fa      	ldrh	r2, [r7, #6]
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	9302      	str	r3, [sp, #8]
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	9301      	str	r3, [sp, #4]
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	9300      	str	r3, [sp, #0]
 800c804:	460b      	mov	r3, r1
 800c806:	2101      	movs	r1, #1
 800c808:	2002      	movs	r0, #2
 800c80a:	f7ff fb15 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c80e:	7979      	ldrb	r1, [r7, #5]
 800c810:	88fa      	ldrh	r2, [r7, #6]
 800c812:	2301      	movs	r3, #1
 800c814:	9302      	str	r3, [sp, #8]
 800c816:	2300      	movs	r3, #0
 800c818:	9301      	str	r3, [sp, #4]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	460b      	mov	r3, r1
 800c820:	2101      	movs	r1, #1
 800c822:	2003      	movs	r0, #3
 800c824:	f7ff fb08 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c828:	7979      	ldrb	r1, [r7, #5]
 800c82a:	88fa      	ldrh	r2, [r7, #6]
 800c82c:	2301      	movs	r3, #1
 800c82e:	9302      	str	r3, [sp, #8]
 800c830:	2300      	movs	r3, #0
 800c832:	9301      	str	r3, [sp, #4]
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	460b      	mov	r3, r1
 800c83a:	2100      	movs	r1, #0
 800c83c:	2004      	movs	r0, #4
 800c83e:	f7ff fafb 	bl	800be38 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800c842:	f7ff fb6f 	bl	800bf24 <Emm_V5_Synchronous_motion>

	Emm_mode = 1;
 800c846:	4b0f      	ldr	r3, [pc, #60]	@ (800c884 <Move_zhengxuzhuan+0xcc>)
 800c848:	2201      	movs	r2, #1
 800c84a:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c852:	4a0d      	ldr	r2, [pc, #52]	@ (800c888 <Move_zhengxuzhuan+0xd0>)
 800c854:	fb82 1203 	smull	r1, r2, r2, r3
 800c858:	1092      	asrs	r2, r2, #2
 800c85a:	17db      	asrs	r3, r3, #31
 800c85c:	1ad3      	subs	r3, r2, r3
 800c85e:	4a0b      	ldr	r2, [pc, #44]	@ (800c88c <Move_zhengxuzhuan+0xd4>)
 800c860:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c862:	bf00      	nop
 800c864:	f7ff fde4 	bl	800c430 <GetRxFlag>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d103      	bne.n	800c876 <Move_zhengxuzhuan+0xbe>
 800c86e:	4b07      	ldr	r3, [pc, #28]	@ (800c88c <Move_zhengxuzhuan+0xd4>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d1f6      	bne.n	800c864 <Move_zhengxuzhuan+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c876:	201e      	movs	r0, #30
 800c878:	f7f6 f9b4 	bl	8002be4 <HAL_Delay>
}
 800c87c:	bf00      	nop
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	2400029c 	.word	0x2400029c
 800c888:	66666667 	.word	0x66666667
 800c88c:	24000be0 	.word	0x24000be0

0800c890 <Move_fanxuzhuan>:

void Move_fanxuzhuan(u16 speed, u8 acc, u32 length) //4340是90度
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b088      	sub	sp, #32
 800c894:	af04      	add	r7, sp, #16
 800c896:	4603      	mov	r3, r0
 800c898:	603a      	str	r2, [r7, #0]
 800c89a:	80fb      	strh	r3, [r7, #6]
 800c89c:	460b      	mov	r3, r1
 800c89e:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c8a0:	88fb      	ldrh	r3, [r7, #6]
 800c8a2:	683a      	ldr	r2, [r7, #0]
 800c8a4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c8a8:	4613      	mov	r3, r2
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	4413      	add	r3, r2
 800c8ae:	009b      	lsls	r3, r3, #2
 800c8b0:	60fb      	str	r3, [r7, #12]

	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c8b2:	7979      	ldrb	r1, [r7, #5]
 800c8b4:	88fa      	ldrh	r2, [r7, #6]
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	9302      	str	r3, [sp, #8]
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	9301      	str	r3, [sp, #4]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	9300      	str	r3, [sp, #0]
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	2101      	movs	r1, #1
 800c8c6:	2001      	movs	r0, #1
 800c8c8:	f7ff fab6 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c8cc:	7979      	ldrb	r1, [r7, #5]
 800c8ce:	88fa      	ldrh	r2, [r7, #6]
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	9302      	str	r3, [sp, #8]
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	9301      	str	r3, [sp, #4]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	460b      	mov	r3, r1
 800c8de:	2100      	movs	r1, #0
 800c8e0:	2002      	movs	r0, #2
 800c8e2:	f7ff faa9 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c8e6:	7979      	ldrb	r1, [r7, #5]
 800c8e8:	88fa      	ldrh	r2, [r7, #6]
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	9302      	str	r3, [sp, #8]
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	9301      	str	r3, [sp, #4]
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	9300      	str	r3, [sp, #0]
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	2100      	movs	r1, #0
 800c8fa:	2003      	movs	r0, #3
 800c8fc:	f7ff fa9c 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c900:	7979      	ldrb	r1, [r7, #5]
 800c902:	88fa      	ldrh	r2, [r7, #6]
 800c904:	2301      	movs	r3, #1
 800c906:	9302      	str	r3, [sp, #8]
 800c908:	2300      	movs	r3, #0
 800c90a:	9301      	str	r3, [sp, #4]
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	460b      	mov	r3, r1
 800c912:	2101      	movs	r1, #1
 800c914:	2004      	movs	r0, #4
 800c916:	f7ff fa8f 	bl	800be38 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800c91a:	f7ff fb03 	bl	800bf24 <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800c91e:	4b0f      	ldr	r3, [pc, #60]	@ (800c95c <Move_fanxuzhuan+0xcc>)
 800c920:	2201      	movs	r2, #1
 800c922:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c92a:	4a0d      	ldr	r2, [pc, #52]	@ (800c960 <Move_fanxuzhuan+0xd0>)
 800c92c:	fb82 1203 	smull	r1, r2, r2, r3
 800c930:	1092      	asrs	r2, r2, #2
 800c932:	17db      	asrs	r3, r3, #31
 800c934:	1ad3      	subs	r3, r2, r3
 800c936:	4a0b      	ldr	r2, [pc, #44]	@ (800c964 <Move_fanxuzhuan+0xd4>)
 800c938:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c93a:	bf00      	nop
 800c93c:	f7ff fd78 	bl	800c430 <GetRxFlag>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d103      	bne.n	800c94e <Move_fanxuzhuan+0xbe>
 800c946:	4b07      	ldr	r3, [pc, #28]	@ (800c964 <Move_fanxuzhuan+0xd4>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1f6      	bne.n	800c93c <Move_fanxuzhuan+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c94e:	201e      	movs	r0, #30
 800c950:	f7f6 f948 	bl	8002be4 <HAL_Delay>
}
 800c954:	bf00      	nop
 800c956:	3710      	adds	r7, #16
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	2400029c 	.word	0x2400029c
 800c960:	66666667 	.word	0x66666667
 800c964:	24000be0 	.word	0x24000be0

0800c968 <Drop_Location_jiang>:
////	RxFlag = 0;
//	if(High_Length>=14000)
//		Emm_V5_Stop_Now(5,0);
//	HAL_Delay(30);
//}
void Drop_Location_jiang(u16 speed, u8 acc, u32 length) {
 800c968:	b580      	push	{r7, lr}
 800c96a:	b088      	sub	sp, #32
 800c96c:	af04      	add	r7, sp, #16
 800c96e:	4603      	mov	r3, r0
 800c970:	603a      	str	r2, [r7, #0]
 800c972:	80fb      	strh	r3, [r7, #6]
 800c974:	460b      	mov	r3, r1
 800c976:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c978:	88fb      	ldrh	r3, [r7, #6]
 800c97a:	683a      	ldr	r2, [r7, #0]
 800c97c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c980:	4613      	mov	r3, r2
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	4413      	add	r3, r2
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(5, 1, speed, acc, length, 1, 0);
 800c98a:	7979      	ldrb	r1, [r7, #5]
 800c98c:	88fa      	ldrh	r2, [r7, #6]
 800c98e:	2300      	movs	r3, #0
 800c990:	9302      	str	r3, [sp, #8]
 800c992:	2301      	movs	r3, #1
 800c994:	9301      	str	r3, [sp, #4]
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	460b      	mov	r3, r1
 800c99c:	2101      	movs	r1, #1
 800c99e:	2005      	movs	r0, #5
 800c9a0:	f7ff fa4a 	bl	800be38 <Emm_V5_Pos_Control>
//	检查到位回读
	Emm_mode = 1;
 800c9a4:	4b0f      	ldr	r3, [pc, #60]	@ (800c9e4 <Drop_Location_jiang+0x7c>)
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c9b0:	4a0d      	ldr	r2, [pc, #52]	@ (800c9e8 <Drop_Location_jiang+0x80>)
 800c9b2:	fb82 1203 	smull	r1, r2, r2, r3
 800c9b6:	1092      	asrs	r2, r2, #2
 800c9b8:	17db      	asrs	r3, r3, #31
 800c9ba:	1ad3      	subs	r3, r2, r3
 800c9bc:	4a0b      	ldr	r2, [pc, #44]	@ (800c9ec <Drop_Location_jiang+0x84>)
 800c9be:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c9c0:	bf00      	nop
 800c9c2:	f7ff fd35 	bl	800c430 <GetRxFlag>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d103      	bne.n	800c9d4 <Drop_Location_jiang+0x6c>
 800c9cc:	4b07      	ldr	r3, [pc, #28]	@ (800c9ec <Drop_Location_jiang+0x84>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d1f6      	bne.n	800c9c2 <Drop_Location_jiang+0x5a>
		;
	HAL_Delay(30);
 800c9d4:	201e      	movs	r0, #30
 800c9d6:	f7f6 f905 	bl	8002be4 <HAL_Delay>
}
 800c9da:	bf00      	nop
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	2400029c 	.word	0x2400029c
 800c9e8:	66666667 	.word	0x66666667
 800c9ec:	24000be0 	.word	0x24000be0

0800c9f0 <Drop_Location_Sheng>:
void Drop_Location_Sheng(u16 speed, u8 acc, u32 length) {
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b088      	sub	sp, #32
 800c9f4:	af04      	add	r7, sp, #16
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	603a      	str	r2, [r7, #0]
 800c9fa:	80fb      	strh	r3, [r7, #6]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800ca00:	88fb      	ldrh	r3, [r7, #6]
 800ca02:	683a      	ldr	r2, [r7, #0]
 800ca04:	fbb2 f2f3 	udiv	r2, r2, r3
 800ca08:	4613      	mov	r3, r2
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	4413      	add	r3, r2
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(5, 1, speed, acc, length, 1, 0);
 800ca12:	7979      	ldrb	r1, [r7, #5]
 800ca14:	88fa      	ldrh	r2, [r7, #6]
 800ca16:	2300      	movs	r3, #0
 800ca18:	9302      	str	r3, [sp, #8]
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	9301      	str	r3, [sp, #4]
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	460b      	mov	r3, r1
 800ca24:	2101      	movs	r1, #1
 800ca26:	2005      	movs	r0, #5
 800ca28:	f7ff fa06 	bl	800be38 <Emm_V5_Pos_Control>
	Emm_mode = 1;
 800ca2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ca6c <Drop_Location_Sheng+0x7c>)
 800ca2e:	2201      	movs	r2, #1
 800ca30:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800ca38:	4a0d      	ldr	r2, [pc, #52]	@ (800ca70 <Drop_Location_Sheng+0x80>)
 800ca3a:	fb82 1203 	smull	r1, r2, r2, r3
 800ca3e:	1092      	asrs	r2, r2, #2
 800ca40:	17db      	asrs	r3, r3, #31
 800ca42:	1ad3      	subs	r3, r2, r3
 800ca44:	4a0b      	ldr	r2, [pc, #44]	@ (800ca74 <Drop_Location_Sheng+0x84>)
 800ca46:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800ca48:	bf00      	nop
 800ca4a:	f7ff fcf1 	bl	800c430 <GetRxFlag>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d103      	bne.n	800ca5c <Drop_Location_Sheng+0x6c>
 800ca54:	4b07      	ldr	r3, [pc, #28]	@ (800ca74 <Drop_Location_Sheng+0x84>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d1f6      	bne.n	800ca4a <Drop_Location_Sheng+0x5a>
		;

	HAL_Delay(30);
 800ca5c:	201e      	movs	r0, #30
 800ca5e:	f7f6 f8c1 	bl	8002be4 <HAL_Delay>
}
 800ca62:	bf00      	nop
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	2400029c 	.word	0x2400029c
 800ca70:	66666667 	.word	0x66666667
 800ca74:	24000be0 	.word	0x24000be0

0800ca78 <Move_Stop>:
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动

}

void Move_Stop(void)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	af00      	add	r7, sp, #0
	Emm_V5_Stop_Now(1,true);
 800ca7c:	2101      	movs	r1, #1
 800ca7e:	2001      	movs	r0, #1
 800ca80:	f7ff fa2e 	bl	800bee0 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(2,true);
 800ca84:	2101      	movs	r1, #1
 800ca86:	2002      	movs	r0, #2
 800ca88:	f7ff fa2a 	bl	800bee0 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(3,true);
 800ca8c:	2101      	movs	r1, #1
 800ca8e:	2003      	movs	r0, #3
 800ca90:	f7ff fa26 	bl	800bee0 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(4,true);
 800ca94:	2101      	movs	r1, #1
 800ca96:	2004      	movs	r0, #4
 800ca98:	f7ff fa22 	bl	800bee0 <Emm_V5_Stop_Now>
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动
 800ca9c:	f7ff fa42 	bl	800bf24 <Emm_V5_Synchronous_motion>
}
 800caa0:	bf00      	nop
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <Move_TO_Saomaqu>:
		;
	HAL_Delay(30);

}
extern void Start(void);
void Move_TO_Saomaqu(float Leftclk, float Lineclk) {
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	ed87 0a01 	vstr	s0, [r7, #4]
 800caae:	edc7 0a00 	vstr	s1, [r7]
	Move_Left(RunSpeed, RunAcc, Leftclk);                                                                                         //爪子目前在最低处
 800cab2:	edd7 7a01 	vldr	s15, [r7, #4]
 800cab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caba:	ee17 2a90 	vmov	r2, s15
 800cabe:	2178      	movs	r1, #120	@ 0x78
 800cac0:	2064      	movs	r0, #100	@ 0x64
 800cac2:	f7ff fd35 	bl	800c530 <Move_Left>
	HAL_Delay(20);
 800cac6:	2014      	movs	r0, #20
 800cac8:	f7f6 f88c 	bl	8002be4 <HAL_Delay>
//	HAL_Delay(yanshi);

	Move_Line(RunSpeed, RunAcc, Lineclk); ////130.5
 800cacc:	edd7 7a00 	vldr	s15, [r7]
 800cad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cad4:	ee17 2a90 	vmov	r2, s15
 800cad8:	2178      	movs	r1, #120	@ 0x78
 800cada:	2064      	movs	r0, #100	@ 0x64
 800cadc:	f7ff fcbc 	bl	800c458 <Move_Line>
//	HAL_Delay(yanshi);
}
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <Move_TO_yuanliaoqu>:
void Move_TO_yuanliaoqu(float Lineclk) //物料区
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	ed87 0a01 	vstr	s0, [r7, #4]
	Move_Line(RunSpeed, RunAcc, Lineclk);
 800caf2:	edd7 7a01 	vldr	s15, [r7, #4]
 800caf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cafa:	ee17 2a90 	vmov	r2, s15
 800cafe:	2178      	movs	r1, #120	@ 0x78
 800cb00:	2064      	movs	r0, #100	@ 0x64
 800cb02:	f7ff fca9 	bl	800c458 <Move_Line>
	HAL_Delay(yanshi);
 800cb06:	2032      	movs	r0, #50	@ 0x32
 800cb08:	f7f6 f86c 	bl	8002be4 <HAL_Delay>
}
 800cb0c:	bf00      	nop
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <Move_TO_jianzhi1>:

void Move_TO_jianzhi1(float Backclk, float fanzhuanclk) //粗加工区
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	ed87 0a01 	vstr	s0, [r7, #4]
 800cb1e:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cb22:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb2a:	ee17 2a90 	vmov	r2, s15
 800cb2e:	2178      	movs	r1, #120	@ 0x78
 800cb30:	2064      	movs	r0, #100	@ 0x64
 800cb32:	f7ff fd69 	bl	800c608 <Move_Back>
	HAL_Delay(yanshi);
 800cb36:	2032      	movs	r0, #50	@ 0x32
 800cb38:	f7f6 f854 	bl	8002be4 <HAL_Delay>
	Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800cb3c:	edd7 7a00 	vldr	s15, [r7]
 800cb40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb44:	ee17 2a90 	vmov	r2, s15
 800cb48:	2178      	movs	r1, #120	@ 0x78
 800cb4a:	2064      	movs	r0, #100	@ 0x64
 800cb4c:	f7ff fea0 	bl	800c890 <Move_fanxuzhuan>
	HAL_Delay(yanshi);
 800cb50:	2032      	movs	r0, #50	@ 0x32
 800cb52:	f7f6 f847 	bl	8002be4 <HAL_Delay>
}
 800cb56:	bf00      	nop
 800cb58:	3708      	adds	r7, #8
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <Move_TO_zancunqu>:

void Move_TO_zancunqu(float Lineclk, float fanzhuanclk) //暂存区
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b082      	sub	sp, #8
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	ed87 0a01 	vstr	s0, [r7, #4]
 800cb68:	edc7 0a00 	vstr	s1, [r7]
	Move_Line(RunSpeed, RunAcc, Lineclk);
 800cb6c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb74:	ee17 2a90 	vmov	r2, s15
 800cb78:	2178      	movs	r1, #120	@ 0x78
 800cb7a:	2064      	movs	r0, #100	@ 0x64
 800cb7c:	f7ff fc6c 	bl	800c458 <Move_Line>
	HAL_Delay(yanshi);
 800cb80:	2032      	movs	r0, #50	@ 0x32
 800cb82:	f7f6 f82f 	bl	8002be4 <HAL_Delay>
	Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800cb86:	edd7 7a00 	vldr	s15, [r7]
 800cb8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb8e:	ee17 2a90 	vmov	r2, s15
 800cb92:	2178      	movs	r1, #120	@ 0x78
 800cb94:	2064      	movs	r0, #100	@ 0x64
 800cb96:	f7ff fe7b 	bl	800c890 <Move_fanxuzhuan>
	HAL_Delay(yanshi);
 800cb9a:	2032      	movs	r0, #50	@ 0x32
 800cb9c:	f7f6 f822 	bl	8002be4 <HAL_Delay>
}
 800cba0:	bf00      	nop
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <Move_TO_jianzhi2>:
void Move_TO_jianzhi2(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	ed87 0a01 	vstr	s0, [r7, #4]
 800cbb2:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cbb6:	edd7 7a01 	vldr	s15, [r7, #4]
 800cbba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbbe:	ee17 2a90 	vmov	r2, s15
 800cbc2:	2178      	movs	r1, #120	@ 0x78
 800cbc4:	2064      	movs	r0, #100	@ 0x64
 800cbc6:	f7ff fd1f 	bl	800c608 <Move_Back>
	HAL_Delay(yanshi);
 800cbca:	2032      	movs	r0, #50	@ 0x32
 800cbcc:	f7f6 f80a 	bl	8002be4 <HAL_Delay>
	Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800cbd0:	edd7 7a00 	vldr	s15, [r7]
 800cbd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbd8:	ee17 2a90 	vmov	r2, s15
 800cbdc:	2178      	movs	r1, #120	@ 0x78
 800cbde:	2064      	movs	r0, #100	@ 0x64
 800cbe0:	f7ff fdea 	bl	800c7b8 <Move_zhengxuzhuan>
	HAL_Delay(yanshi);
 800cbe4:	2032      	movs	r0, #50	@ 0x32
 800cbe6:	f7f5 fffd 	bl	8002be4 <HAL_Delay>
}
 800cbea:	bf00      	nop
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <Move_TO_cujiagongqu>:
void Move_TO_cujiagongqu(float Backclk) //粗加工区
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b082      	sub	sp, #8
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	ed87 0a01 	vstr	s0, [r7, #4]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cbfc:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc04:	ee17 2a90 	vmov	r2, s15
 800cc08:	2178      	movs	r1, #120	@ 0x78
 800cc0a:	2064      	movs	r0, #100	@ 0x64
 800cc0c:	f7ff fcfc 	bl	800c608 <Move_Back>
	HAL_Delay(yanshi);
 800cc10:	2032      	movs	r0, #50	@ 0x32
 800cc12:	f7f5 ffe7 	bl	8002be4 <HAL_Delay>
}
 800cc16:	bf00      	nop
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <Move_TO_jianzhi3>:
void Move_TO_jianzhi3(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b082      	sub	sp, #8
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	ed87 0a01 	vstr	s0, [r7, #4]
 800cc28:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cc2c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc34:	ee17 2a90 	vmov	r2, s15
 800cc38:	2178      	movs	r1, #120	@ 0x78
 800cc3a:	2064      	movs	r0, #100	@ 0x64
 800cc3c:	f7ff fce4 	bl	800c608 <Move_Back>
	HAL_Delay(yanshi);
 800cc40:	2032      	movs	r0, #50	@ 0x32
 800cc42:	f7f5 ffcf 	bl	8002be4 <HAL_Delay>
	Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800cc46:	edd7 7a00 	vldr	s15, [r7]
 800cc4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc4e:	ee17 2a90 	vmov	r2, s15
 800cc52:	2178      	movs	r1, #120	@ 0x78
 800cc54:	2064      	movs	r0, #100	@ 0x64
 800cc56:	f7ff fdaf 	bl	800c7b8 <Move_zhengxuzhuan>
	HAL_Delay(yanshi);
 800cc5a:	2032      	movs	r0, #50	@ 0x32
 800cc5c:	f7f5 ffc2 	bl	8002be4 <HAL_Delay>
}
 800cc60:	bf00      	nop
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <Move_TO_fanyuanliaoqu>:
void Move_TO_fanyuanliaoqu(float Lineclk) //物料区
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	ed87 0a01 	vstr	s0, [r7, #4]
	Move_Back(RunSpeed, RunAcc, Lineclk);
 800cc72:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc7a:	ee17 2a90 	vmov	r2, s15
 800cc7e:	2178      	movs	r1, #120	@ 0x78
 800cc80:	2064      	movs	r0, #100	@ 0x64
 800cc82:	f7ff fcc1 	bl	800c608 <Move_Back>
	HAL_Delay(20000);
 800cc86:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800cc8a:	f7f5 ffab 	bl	8002be4 <HAL_Delay>
}
 800cc8e:	bf00      	nop
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
	...

0800cc98 <Move_Action_Nopid_Left_Ctrl>:
	} else {
		Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
		HAL_Delay(yanshi);
	}
}
void Move_Action_Nopid_Left_Ctrl(float x_goal, float y_goal) {
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	ed87 0a01 	vstr	s0, [r7, #4]
 800cca2:	edc7 0a00 	vstr	s1, [r7]
	while (1) {
		if ((X_NOW - x_goal) < 0) {
 800cca6:	4baa      	ldr	r3, [pc, #680]	@ (800cf50 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cca8:	ed93 7a00 	vldr	s14, [r3]
 800ccac:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ccb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccbc:	d52e      	bpl.n	800cd1c <Move_Action_Nopid_Left_Ctrl+0x84>
			Move_Left(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800ccbe:	4ba4      	ldr	r3, [pc, #656]	@ (800cf50 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ccc0:	ed93 7a00 	vldr	s14, [r3]
 800ccc4:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cccc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ccd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd4:	dd07      	ble.n	800cce6 <Move_Action_Nopid_Left_Ctrl+0x4e>
 800ccd6:	4b9e      	ldr	r3, [pc, #632]	@ (800cf50 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ccd8:	ed93 7a00 	vldr	s14, [r3]
 800ccdc:	edd7 7a01 	vldr	s15, [r7, #4]
 800cce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cce4:	e008      	b.n	800ccf8 <Move_Action_Nopid_Left_Ctrl+0x60>
 800cce6:	4b9a      	ldr	r3, [pc, #616]	@ (800cf50 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cce8:	ed93 7a00 	vldr	s14, [r3]
 800ccec:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccf4:	eef1 7a67 	vneg.f32	s15, s15
 800ccf8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ccfc:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800cf48 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800cd00:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cd08:	ee17 2a90 	vmov	r2, s15
 800cd0c:	2164      	movs	r1, #100	@ 0x64
 800cd0e:	2064      	movs	r0, #100	@ 0x64
 800cd10:	f7ff fc0e 	bl	800c530 <Move_Left>
			HAL_Delay(yanshi);
 800cd14:	2032      	movs	r0, #50	@ 0x32
 800cd16:	f7f5 ff65 	bl	8002be4 <HAL_Delay>
 800cd1a:	e02d      	b.n	800cd78 <Move_Action_Nopid_Left_Ctrl+0xe0>
		} else {
			Move_Right(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800cd1c:	4b8c      	ldr	r3, [pc, #560]	@ (800cf50 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cd1e:	ed93 7a00 	vldr	s14, [r3]
 800cd22:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd32:	dd07      	ble.n	800cd44 <Move_Action_Nopid_Left_Ctrl+0xac>
 800cd34:	4b86      	ldr	r3, [pc, #536]	@ (800cf50 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cd36:	ed93 7a00 	vldr	s14, [r3]
 800cd3a:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd42:	e008      	b.n	800cd56 <Move_Action_Nopid_Left_Ctrl+0xbe>
 800cd44:	4b82      	ldr	r3, [pc, #520]	@ (800cf50 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cd46:	ed93 7a00 	vldr	s14, [r3]
 800cd4a:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd52:	eef1 7a67 	vneg.f32	s15, s15
 800cd56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cd5a:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800cf48 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800cd5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cd66:	ee17 2a90 	vmov	r2, s15
 800cd6a:	2164      	movs	r1, #100	@ 0x64
 800cd6c:	2064      	movs	r0, #100	@ 0x64
 800cd6e:	f7ff fcb7 	bl	800c6e0 <Move_Right>
			HAL_Delay(yanshi);
 800cd72:	2032      	movs	r0, #50	@ 0x32
 800cd74:	f7f5 ff36 	bl	8002be4 <HAL_Delay>
		}
		if (Y_NOW - y_goal < 0) {
 800cd78:	4b76      	ldr	r3, [pc, #472]	@ (800cf54 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cd7a:	edd3 7a00 	vldr	s15, [r3]
 800cd7e:	eeb1 7a67 	vneg.f32	s14, s15
 800cd82:	edd7 7a00 	vldr	s15, [r7]
 800cd86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd92:	d534      	bpl.n	800cdfe <Move_Action_Nopid_Left_Ctrl+0x166>
			Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800cd94:	4b6f      	ldr	r3, [pc, #444]	@ (800cf54 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cd96:	edd3 7a00 	vldr	s15, [r3]
 800cd9a:	eeb1 7a67 	vneg.f32	s14, s15
 800cd9e:	edd7 7a00 	vldr	s15, [r7]
 800cda2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cda6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cdaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdae:	dd09      	ble.n	800cdc4 <Move_Action_Nopid_Left_Ctrl+0x12c>
 800cdb0:	4b68      	ldr	r3, [pc, #416]	@ (800cf54 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cdb2:	edd3 7a00 	vldr	s15, [r3]
 800cdb6:	eeb1 7a67 	vneg.f32	s14, s15
 800cdba:	edd7 7a00 	vldr	s15, [r7]
 800cdbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdc2:	e00a      	b.n	800cdda <Move_Action_Nopid_Left_Ctrl+0x142>
 800cdc4:	4b63      	ldr	r3, [pc, #396]	@ (800cf54 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cdc6:	edd3 7a00 	vldr	s15, [r3]
 800cdca:	eeb1 7a67 	vneg.f32	s14, s15
 800cdce:	edd7 7a00 	vldr	s15, [r7]
 800cdd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdd6:	eef1 7a67 	vneg.f32	s15, s15
 800cdda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cdde:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800cf48 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800cde2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cde6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cdea:	ee17 2a90 	vmov	r2, s15
 800cdee:	2164      	movs	r1, #100	@ 0x64
 800cdf0:	2064      	movs	r0, #100	@ 0x64
 800cdf2:	f7ff fb31 	bl	800c458 <Move_Line>
			HAL_Delay(yanshi);
 800cdf6:	2032      	movs	r0, #50	@ 0x32
 800cdf8:	f7f5 fef4 	bl	8002be4 <HAL_Delay>
 800cdfc:	e033      	b.n	800ce66 <Move_Action_Nopid_Left_Ctrl+0x1ce>
		} else {
			Move_Back(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800cdfe:	4b55      	ldr	r3, [pc, #340]	@ (800cf54 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ce00:	edd3 7a00 	vldr	s15, [r3]
 800ce04:	eeb1 7a67 	vneg.f32	s14, s15
 800ce08:	edd7 7a00 	vldr	s15, [r7]
 800ce0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce18:	dd09      	ble.n	800ce2e <Move_Action_Nopid_Left_Ctrl+0x196>
 800ce1a:	4b4e      	ldr	r3, [pc, #312]	@ (800cf54 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ce1c:	edd3 7a00 	vldr	s15, [r3]
 800ce20:	eeb1 7a67 	vneg.f32	s14, s15
 800ce24:	edd7 7a00 	vldr	s15, [r7]
 800ce28:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce2c:	e00a      	b.n	800ce44 <Move_Action_Nopid_Left_Ctrl+0x1ac>
 800ce2e:	4b49      	ldr	r3, [pc, #292]	@ (800cf54 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ce30:	edd3 7a00 	vldr	s15, [r3]
 800ce34:	eeb1 7a67 	vneg.f32	s14, s15
 800ce38:	edd7 7a00 	vldr	s15, [r7]
 800ce3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce40:	eef1 7a67 	vneg.f32	s15, s15
 800ce44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ce48:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800cf48 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800ce4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce50:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ce54:	ee17 2a90 	vmov	r2, s15
 800ce58:	2164      	movs	r1, #100	@ 0x64
 800ce5a:	2064      	movs	r0, #100	@ 0x64
 800ce5c:	f7ff fbd4 	bl	800c608 <Move_Back>
			HAL_Delay(yanshi);
 800ce60:	2032      	movs	r0, #50	@ 0x32
 800ce62:	f7f5 febf 	bl	8002be4 <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 2 && ABS(Y_NOW - y_goal) < 2) {
 800ce66:	4b3a      	ldr	r3, [pc, #232]	@ (800cf50 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce68:	ed93 7a00 	vldr	s14, [r3]
 800ce6c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce7c:	dd11      	ble.n	800cea2 <Move_Action_Nopid_Left_Ctrl+0x20a>
 800ce7e:	4b34      	ldr	r3, [pc, #208]	@ (800cf50 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce80:	ed93 7a00 	vldr	s14, [r3]
 800ce84:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce8c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800ce90:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce98:	bf4c      	ite	mi
 800ce9a:	2301      	movmi	r3, #1
 800ce9c:	2300      	movpl	r3, #0
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	e010      	b.n	800cec4 <Move_Action_Nopid_Left_Ctrl+0x22c>
 800cea2:	4b2b      	ldr	r3, [pc, #172]	@ (800cf50 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cea4:	ed93 7a00 	vldr	s14, [r3]
 800cea8:	edd7 7a01 	vldr	s15, [r7, #4]
 800ceac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceb0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800ceb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ceb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cebc:	bfcc      	ite	gt
 800cebe:	2301      	movgt	r3, #1
 800cec0:	2300      	movle	r3, #0
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f43f aeee 	beq.w	800cca6 <Move_Action_Nopid_Left_Ctrl+0xe>
 800ceca:	4b22      	ldr	r3, [pc, #136]	@ (800cf54 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cecc:	edd3 7a00 	vldr	s15, [r3]
 800ced0:	eeb1 7a67 	vneg.f32	s14, s15
 800ced4:	edd7 7a00 	vldr	s15, [r7]
 800ced8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cedc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cee4:	dd13      	ble.n	800cf0e <Move_Action_Nopid_Left_Ctrl+0x276>
 800cee6:	4b1b      	ldr	r3, [pc, #108]	@ (800cf54 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cee8:	edd3 7a00 	vldr	s15, [r3]
 800ceec:	eeb1 7a67 	vneg.f32	s14, s15
 800cef0:	edd7 7a00 	vldr	s15, [r7]
 800cef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cef8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800cefc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf04:	bf4c      	ite	mi
 800cf06:	2301      	movmi	r3, #1
 800cf08:	2300      	movpl	r3, #0
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	e012      	b.n	800cf34 <Move_Action_Nopid_Left_Ctrl+0x29c>
 800cf0e:	4b11      	ldr	r3, [pc, #68]	@ (800cf54 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cf10:	edd3 7a00 	vldr	s15, [r3]
 800cf14:	eeb1 7a67 	vneg.f32	s14, s15
 800cf18:	edd7 7a00 	vldr	s15, [r7]
 800cf1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf20:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800cf24:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf2c:	bfcc      	ite	gt
 800cf2e:	2301      	movgt	r3, #1
 800cf30:	2300      	movle	r3, #0
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d100      	bne.n	800cf3a <Move_Action_Nopid_Left_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800cf38:	e6b5      	b.n	800cca6 <Move_Action_Nopid_Left_Ctrl+0xe>
			break; /* 到达目标 */
 800cf3a:	bf00      	nop
		}
	}
}
 800cf3c:	bf00      	nop
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	f3af 8000 	nop.w
 800cf48:	9999999a 	.word	0x9999999a
 800cf4c:	402b9999 	.word	0x402b9999
 800cf50:	24000aac 	.word	0x24000aac
 800cf54:	24000ab0 	.word	0x24000ab0

0800cf58 <Move_Action_Nopid_Forward_Ctrl>:
void Move_Action_Nopid_Forward_Ctrl(float x_goal, float y_goal) {
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	ed87 0a01 	vstr	s0, [r7, #4]
 800cf62:	edc7 0a00 	vstr	s1, [r7]
	//ACTION调整
	while (1) {

		if ((X_NOW - x_goal) < 0) {
 800cf66:	4baa      	ldr	r3, [pc, #680]	@ (800d210 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800cf68:	ed93 7a00 	vldr	s14, [r3]
 800cf6c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf7c:	d52e      	bpl.n	800cfdc <Move_Action_Nopid_Forward_Ctrl+0x84>
			Move_Line(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800cf7e:	4ba4      	ldr	r3, [pc, #656]	@ (800d210 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800cf80:	ed93 7a00 	vldr	s14, [r3]
 800cf84:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf94:	dd07      	ble.n	800cfa6 <Move_Action_Nopid_Forward_Ctrl+0x4e>
 800cf96:	4b9e      	ldr	r3, [pc, #632]	@ (800d210 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800cf98:	ed93 7a00 	vldr	s14, [r3]
 800cf9c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cfa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfa4:	e008      	b.n	800cfb8 <Move_Action_Nopid_Forward_Ctrl+0x60>
 800cfa6:	4b9a      	ldr	r3, [pc, #616]	@ (800d210 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800cfa8:	ed93 7a00 	vldr	s14, [r3]
 800cfac:	edd7 7a01 	vldr	s15, [r7, #4]
 800cfb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfb4:	eef1 7a67 	vneg.f32	s15, s15
 800cfb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cfbc:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800d208 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800cfc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cfc4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cfc8:	ee17 2a90 	vmov	r2, s15
 800cfcc:	2164      	movs	r1, #100	@ 0x64
 800cfce:	2064      	movs	r0, #100	@ 0x64
 800cfd0:	f7ff fa42 	bl	800c458 <Move_Line>
			HAL_Delay(yanshi);
 800cfd4:	2032      	movs	r0, #50	@ 0x32
 800cfd6:	f7f5 fe05 	bl	8002be4 <HAL_Delay>
 800cfda:	e02d      	b.n	800d038 <Move_Action_Nopid_Forward_Ctrl+0xe0>
		} else {
			Move_Back(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800cfdc:	4b8c      	ldr	r3, [pc, #560]	@ (800d210 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800cfde:	ed93 7a00 	vldr	s14, [r3]
 800cfe2:	edd7 7a01 	vldr	s15, [r7, #4]
 800cfe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff2:	dd07      	ble.n	800d004 <Move_Action_Nopid_Forward_Ctrl+0xac>
 800cff4:	4b86      	ldr	r3, [pc, #536]	@ (800d210 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800cff6:	ed93 7a00 	vldr	s14, [r3]
 800cffa:	edd7 7a01 	vldr	s15, [r7, #4]
 800cffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d002:	e008      	b.n	800d016 <Move_Action_Nopid_Forward_Ctrl+0xbe>
 800d004:	4b82      	ldr	r3, [pc, #520]	@ (800d210 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d006:	ed93 7a00 	vldr	s14, [r3]
 800d00a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d00e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d012:	eef1 7a67 	vneg.f32	s15, s15
 800d016:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d01a:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800d208 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d01e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d022:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d026:	ee17 2a90 	vmov	r2, s15
 800d02a:	2164      	movs	r1, #100	@ 0x64
 800d02c:	2064      	movs	r0, #100	@ 0x64
 800d02e:	f7ff faeb 	bl	800c608 <Move_Back>
			HAL_Delay(yanshi);
 800d032:	2032      	movs	r0, #50	@ 0x32
 800d034:	f7f5 fdd6 	bl	8002be4 <HAL_Delay>
		}
		if ((Y_NOW - y_goal) < 0) {
 800d038:	4b76      	ldr	r3, [pc, #472]	@ (800d214 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d03a:	edd3 7a00 	vldr	s15, [r3]
 800d03e:	eeb1 7a67 	vneg.f32	s14, s15
 800d042:	edd7 7a00 	vldr	s15, [r7]
 800d046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d04a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d052:	d534      	bpl.n	800d0be <Move_Action_Nopid_Forward_Ctrl+0x166>
			Move_Right(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d054:	4b6f      	ldr	r3, [pc, #444]	@ (800d214 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d056:	edd3 7a00 	vldr	s15, [r3]
 800d05a:	eeb1 7a67 	vneg.f32	s14, s15
 800d05e:	edd7 7a00 	vldr	s15, [r7]
 800d062:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d06e:	dd09      	ble.n	800d084 <Move_Action_Nopid_Forward_Ctrl+0x12c>
 800d070:	4b68      	ldr	r3, [pc, #416]	@ (800d214 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d072:	edd3 7a00 	vldr	s15, [r3]
 800d076:	eeb1 7a67 	vneg.f32	s14, s15
 800d07a:	edd7 7a00 	vldr	s15, [r7]
 800d07e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d082:	e00a      	b.n	800d09a <Move_Action_Nopid_Forward_Ctrl+0x142>
 800d084:	4b63      	ldr	r3, [pc, #396]	@ (800d214 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d086:	edd3 7a00 	vldr	s15, [r3]
 800d08a:	eeb1 7a67 	vneg.f32	s14, s15
 800d08e:	edd7 7a00 	vldr	s15, [r7]
 800d092:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d096:	eef1 7a67 	vneg.f32	s15, s15
 800d09a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d09e:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800d208 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d0a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d0a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d0aa:	ee17 2a90 	vmov	r2, s15
 800d0ae:	2164      	movs	r1, #100	@ 0x64
 800d0b0:	2064      	movs	r0, #100	@ 0x64
 800d0b2:	f7ff fb15 	bl	800c6e0 <Move_Right>
			HAL_Delay(yanshi);
 800d0b6:	2032      	movs	r0, #50	@ 0x32
 800d0b8:	f7f5 fd94 	bl	8002be4 <HAL_Delay>
 800d0bc:	e033      	b.n	800d126 <Move_Action_Nopid_Forward_Ctrl+0x1ce>
		} else {
			Move_Left(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d0be:	4b55      	ldr	r3, [pc, #340]	@ (800d214 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d0c0:	edd3 7a00 	vldr	s15, [r3]
 800d0c4:	eeb1 7a67 	vneg.f32	s14, s15
 800d0c8:	edd7 7a00 	vldr	s15, [r7]
 800d0cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0d8:	dd09      	ble.n	800d0ee <Move_Action_Nopid_Forward_Ctrl+0x196>
 800d0da:	4b4e      	ldr	r3, [pc, #312]	@ (800d214 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d0dc:	edd3 7a00 	vldr	s15, [r3]
 800d0e0:	eeb1 7a67 	vneg.f32	s14, s15
 800d0e4:	edd7 7a00 	vldr	s15, [r7]
 800d0e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0ec:	e00a      	b.n	800d104 <Move_Action_Nopid_Forward_Ctrl+0x1ac>
 800d0ee:	4b49      	ldr	r3, [pc, #292]	@ (800d214 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d0f0:	edd3 7a00 	vldr	s15, [r3]
 800d0f4:	eeb1 7a67 	vneg.f32	s14, s15
 800d0f8:	edd7 7a00 	vldr	s15, [r7]
 800d0fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d100:	eef1 7a67 	vneg.f32	s15, s15
 800d104:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d108:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800d208 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d10c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d110:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d114:	ee17 2a90 	vmov	r2, s15
 800d118:	2164      	movs	r1, #100	@ 0x64
 800d11a:	2064      	movs	r0, #100	@ 0x64
 800d11c:	f7ff fa08 	bl	800c530 <Move_Left>
			HAL_Delay(yanshi);
 800d120:	2032      	movs	r0, #50	@ 0x32
 800d122:	f7f5 fd5f 	bl	8002be4 <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 5 && ABS(Y_NOW - y_goal) < 5) {
 800d126:	4b3a      	ldr	r3, [pc, #232]	@ (800d210 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d128:	ed93 7a00 	vldr	s14, [r3]
 800d12c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d130:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d134:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d13c:	dd11      	ble.n	800d162 <Move_Action_Nopid_Forward_Ctrl+0x20a>
 800d13e:	4b34      	ldr	r3, [pc, #208]	@ (800d210 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d140:	ed93 7a00 	vldr	s14, [r3]
 800d144:	edd7 7a01 	vldr	s15, [r7, #4]
 800d148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d14c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d150:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d158:	bf4c      	ite	mi
 800d15a:	2301      	movmi	r3, #1
 800d15c:	2300      	movpl	r3, #0
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	e010      	b.n	800d184 <Move_Action_Nopid_Forward_Ctrl+0x22c>
 800d162:	4b2b      	ldr	r3, [pc, #172]	@ (800d210 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d164:	ed93 7a00 	vldr	s14, [r3]
 800d168:	edd7 7a01 	vldr	s15, [r7, #4]
 800d16c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d170:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d174:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d17c:	bfcc      	ite	gt
 800d17e:	2301      	movgt	r3, #1
 800d180:	2300      	movle	r3, #0
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b00      	cmp	r3, #0
 800d186:	f43f aeee 	beq.w	800cf66 <Move_Action_Nopid_Forward_Ctrl+0xe>
 800d18a:	4b22      	ldr	r3, [pc, #136]	@ (800d214 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d18c:	edd3 7a00 	vldr	s15, [r3]
 800d190:	eeb1 7a67 	vneg.f32	s14, s15
 800d194:	edd7 7a00 	vldr	s15, [r7]
 800d198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d19c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a4:	dd13      	ble.n	800d1ce <Move_Action_Nopid_Forward_Ctrl+0x276>
 800d1a6:	4b1b      	ldr	r3, [pc, #108]	@ (800d214 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d1a8:	edd3 7a00 	vldr	s15, [r3]
 800d1ac:	eeb1 7a67 	vneg.f32	s14, s15
 800d1b0:	edd7 7a00 	vldr	s15, [r7]
 800d1b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1b8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d1bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1c4:	bf4c      	ite	mi
 800d1c6:	2301      	movmi	r3, #1
 800d1c8:	2300      	movpl	r3, #0
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	e012      	b.n	800d1f4 <Move_Action_Nopid_Forward_Ctrl+0x29c>
 800d1ce:	4b11      	ldr	r3, [pc, #68]	@ (800d214 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d1d0:	edd3 7a00 	vldr	s15, [r3]
 800d1d4:	eeb1 7a67 	vneg.f32	s14, s15
 800d1d8:	edd7 7a00 	vldr	s15, [r7]
 800d1dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1e0:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d1e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ec:	bfcc      	ite	gt
 800d1ee:	2301      	movgt	r3, #1
 800d1f0:	2300      	movle	r3, #0
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d100      	bne.n	800d1fa <Move_Action_Nopid_Forward_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800d1f8:	e6b5      	b.n	800cf66 <Move_Action_Nopid_Forward_Ctrl+0xe>
			break; /* 到达目标 */
 800d1fa:	bf00      	nop
		}
	}
}
 800d1fc:	bf00      	nop
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	f3af 8000 	nop.w
 800d208:	9999999a 	.word	0x9999999a
 800d20c:	402b9999 	.word	0x402b9999
 800d210:	24000aac 	.word	0x24000aac
 800d214:	24000ab0 	.word	0x24000ab0

0800d218 <Move_Action_Nopid_Right_Ctrl>:

void Move_Action_Nopid_Right_Ctrl(float x_goal, float y_goal) {
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	ed87 0a01 	vstr	s0, [r7, #4]
 800d222:	edc7 0a00 	vstr	s1, [r7]
	while (1) {
		if ((X_NOW - x_goal) < 0) {
 800d226:	4baa      	ldr	r3, [pc, #680]	@ (800d4d0 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d228:	ed93 7a00 	vldr	s14, [r3]
 800d22c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d230:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d234:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d23c:	d52e      	bpl.n	800d29c <Move_Action_Nopid_Right_Ctrl+0x84>

			Move_Right(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d23e:	4ba4      	ldr	r3, [pc, #656]	@ (800d4d0 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d240:	ed93 7a00 	vldr	s14, [r3]
 800d244:	edd7 7a01 	vldr	s15, [r7, #4]
 800d248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d24c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d254:	dd07      	ble.n	800d266 <Move_Action_Nopid_Right_Ctrl+0x4e>
 800d256:	4b9e      	ldr	r3, [pc, #632]	@ (800d4d0 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d258:	ed93 7a00 	vldr	s14, [r3]
 800d25c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d260:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d264:	e008      	b.n	800d278 <Move_Action_Nopid_Right_Ctrl+0x60>
 800d266:	4b9a      	ldr	r3, [pc, #616]	@ (800d4d0 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d268:	ed93 7a00 	vldr	s14, [r3]
 800d26c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d270:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d274:	eef1 7a67 	vneg.f32	s15, s15
 800d278:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d27c:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800d4c8 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d280:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d284:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d288:	ee17 2a90 	vmov	r2, s15
 800d28c:	2164      	movs	r1, #100	@ 0x64
 800d28e:	2064      	movs	r0, #100	@ 0x64
 800d290:	f7ff fa26 	bl	800c6e0 <Move_Right>
			HAL_Delay(yanshi);
 800d294:	2032      	movs	r0, #50	@ 0x32
 800d296:	f7f5 fca5 	bl	8002be4 <HAL_Delay>
 800d29a:	e02d      	b.n	800d2f8 <Move_Action_Nopid_Right_Ctrl+0xe0>
		} else {
			Move_Left(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d29c:	4b8c      	ldr	r3, [pc, #560]	@ (800d4d0 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d29e:	ed93 7a00 	vldr	s14, [r3]
 800d2a2:	edd7 7a01 	vldr	s15, [r7, #4]
 800d2a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2b2:	dd07      	ble.n	800d2c4 <Move_Action_Nopid_Right_Ctrl+0xac>
 800d2b4:	4b86      	ldr	r3, [pc, #536]	@ (800d4d0 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d2b6:	ed93 7a00 	vldr	s14, [r3]
 800d2ba:	edd7 7a01 	vldr	s15, [r7, #4]
 800d2be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2c2:	e008      	b.n	800d2d6 <Move_Action_Nopid_Right_Ctrl+0xbe>
 800d2c4:	4b82      	ldr	r3, [pc, #520]	@ (800d4d0 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d2c6:	ed93 7a00 	vldr	s14, [r3]
 800d2ca:	edd7 7a01 	vldr	s15, [r7, #4]
 800d2ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2d2:	eef1 7a67 	vneg.f32	s15, s15
 800d2d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d2da:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800d4c8 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d2de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d2e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d2e6:	ee17 2a90 	vmov	r2, s15
 800d2ea:	2164      	movs	r1, #100	@ 0x64
 800d2ec:	2064      	movs	r0, #100	@ 0x64
 800d2ee:	f7ff f91f 	bl	800c530 <Move_Left>
			HAL_Delay(yanshi);
 800d2f2:	2032      	movs	r0, #50	@ 0x32
 800d2f4:	f7f5 fc76 	bl	8002be4 <HAL_Delay>
		}
		if ((Y_NOW - y_goal) < 0) {
 800d2f8:	4b76      	ldr	r3, [pc, #472]	@ (800d4d4 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d2fa:	edd3 7a00 	vldr	s15, [r3]
 800d2fe:	eeb1 7a67 	vneg.f32	s14, s15
 800d302:	edd7 7a00 	vldr	s15, [r7]
 800d306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d30a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d312:	d534      	bpl.n	800d37e <Move_Action_Nopid_Right_Ctrl+0x166>
			Move_Back(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d314:	4b6f      	ldr	r3, [pc, #444]	@ (800d4d4 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d316:	edd3 7a00 	vldr	s15, [r3]
 800d31a:	eeb1 7a67 	vneg.f32	s14, s15
 800d31e:	edd7 7a00 	vldr	s15, [r7]
 800d322:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d32e:	dd09      	ble.n	800d344 <Move_Action_Nopid_Right_Ctrl+0x12c>
 800d330:	4b68      	ldr	r3, [pc, #416]	@ (800d4d4 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d332:	edd3 7a00 	vldr	s15, [r3]
 800d336:	eeb1 7a67 	vneg.f32	s14, s15
 800d33a:	edd7 7a00 	vldr	s15, [r7]
 800d33e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d342:	e00a      	b.n	800d35a <Move_Action_Nopid_Right_Ctrl+0x142>
 800d344:	4b63      	ldr	r3, [pc, #396]	@ (800d4d4 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d346:	edd3 7a00 	vldr	s15, [r3]
 800d34a:	eeb1 7a67 	vneg.f32	s14, s15
 800d34e:	edd7 7a00 	vldr	s15, [r7]
 800d352:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d356:	eef1 7a67 	vneg.f32	s15, s15
 800d35a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d35e:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800d4c8 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d362:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d366:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d36a:	ee17 2a90 	vmov	r2, s15
 800d36e:	2164      	movs	r1, #100	@ 0x64
 800d370:	2064      	movs	r0, #100	@ 0x64
 800d372:	f7ff f949 	bl	800c608 <Move_Back>
			HAL_Delay(yanshi);
 800d376:	2032      	movs	r0, #50	@ 0x32
 800d378:	f7f5 fc34 	bl	8002be4 <HAL_Delay>
 800d37c:	e033      	b.n	800d3e6 <Move_Action_Nopid_Right_Ctrl+0x1ce>
		} else {
			Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d37e:	4b55      	ldr	r3, [pc, #340]	@ (800d4d4 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d380:	edd3 7a00 	vldr	s15, [r3]
 800d384:	eeb1 7a67 	vneg.f32	s14, s15
 800d388:	edd7 7a00 	vldr	s15, [r7]
 800d38c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d390:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d398:	dd09      	ble.n	800d3ae <Move_Action_Nopid_Right_Ctrl+0x196>
 800d39a:	4b4e      	ldr	r3, [pc, #312]	@ (800d4d4 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d39c:	edd3 7a00 	vldr	s15, [r3]
 800d3a0:	eeb1 7a67 	vneg.f32	s14, s15
 800d3a4:	edd7 7a00 	vldr	s15, [r7]
 800d3a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3ac:	e00a      	b.n	800d3c4 <Move_Action_Nopid_Right_Ctrl+0x1ac>
 800d3ae:	4b49      	ldr	r3, [pc, #292]	@ (800d4d4 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d3b0:	edd3 7a00 	vldr	s15, [r3]
 800d3b4:	eeb1 7a67 	vneg.f32	s14, s15
 800d3b8:	edd7 7a00 	vldr	s15, [r7]
 800d3bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3c0:	eef1 7a67 	vneg.f32	s15, s15
 800d3c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d3c8:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800d4c8 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d3cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d3d4:	ee17 2a90 	vmov	r2, s15
 800d3d8:	2164      	movs	r1, #100	@ 0x64
 800d3da:	2064      	movs	r0, #100	@ 0x64
 800d3dc:	f7ff f83c 	bl	800c458 <Move_Line>
			HAL_Delay(yanshi);
 800d3e0:	2032      	movs	r0, #50	@ 0x32
 800d3e2:	f7f5 fbff 	bl	8002be4 <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 5 && ABS(Y_NOW - y_goal) < 5) {
 800d3e6:	4b3a      	ldr	r3, [pc, #232]	@ (800d4d0 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d3e8:	ed93 7a00 	vldr	s14, [r3]
 800d3ec:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3fc:	dd11      	ble.n	800d422 <Move_Action_Nopid_Right_Ctrl+0x20a>
 800d3fe:	4b34      	ldr	r3, [pc, #208]	@ (800d4d0 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d400:	ed93 7a00 	vldr	s14, [r3]
 800d404:	edd7 7a01 	vldr	s15, [r7, #4]
 800d408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d40c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d410:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d418:	bf4c      	ite	mi
 800d41a:	2301      	movmi	r3, #1
 800d41c:	2300      	movpl	r3, #0
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	e010      	b.n	800d444 <Move_Action_Nopid_Right_Ctrl+0x22c>
 800d422:	4b2b      	ldr	r3, [pc, #172]	@ (800d4d0 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d424:	ed93 7a00 	vldr	s14, [r3]
 800d428:	edd7 7a01 	vldr	s15, [r7, #4]
 800d42c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d430:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d434:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d43c:	bfcc      	ite	gt
 800d43e:	2301      	movgt	r3, #1
 800d440:	2300      	movle	r3, #0
 800d442:	b2db      	uxtb	r3, r3
 800d444:	2b00      	cmp	r3, #0
 800d446:	f43f aeee 	beq.w	800d226 <Move_Action_Nopid_Right_Ctrl+0xe>
 800d44a:	4b22      	ldr	r3, [pc, #136]	@ (800d4d4 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d44c:	edd3 7a00 	vldr	s15, [r3]
 800d450:	eeb1 7a67 	vneg.f32	s14, s15
 800d454:	edd7 7a00 	vldr	s15, [r7]
 800d458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d45c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d464:	dd13      	ble.n	800d48e <Move_Action_Nopid_Right_Ctrl+0x276>
 800d466:	4b1b      	ldr	r3, [pc, #108]	@ (800d4d4 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d468:	edd3 7a00 	vldr	s15, [r3]
 800d46c:	eeb1 7a67 	vneg.f32	s14, s15
 800d470:	edd7 7a00 	vldr	s15, [r7]
 800d474:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d478:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d47c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d484:	bf4c      	ite	mi
 800d486:	2301      	movmi	r3, #1
 800d488:	2300      	movpl	r3, #0
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	e012      	b.n	800d4b4 <Move_Action_Nopid_Right_Ctrl+0x29c>
 800d48e:	4b11      	ldr	r3, [pc, #68]	@ (800d4d4 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d490:	edd3 7a00 	vldr	s15, [r3]
 800d494:	eeb1 7a67 	vneg.f32	s14, s15
 800d498:	edd7 7a00 	vldr	s15, [r7]
 800d49c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4a0:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d4a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ac:	bfcc      	ite	gt
 800d4ae:	2301      	movgt	r3, #1
 800d4b0:	2300      	movle	r3, #0
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d100      	bne.n	800d4ba <Move_Action_Nopid_Right_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800d4b8:	e6b5      	b.n	800d226 <Move_Action_Nopid_Right_Ctrl+0xe>
			break; /* 到达目标 */
 800d4ba:	bf00      	nop
		}
	}
}
 800d4bc:	bf00      	nop
 800d4be:	3708      	adds	r7, #8
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	f3af 8000 	nop.w
 800d4c8:	9999999a 	.word	0x9999999a
 800d4cc:	402b9999 	.word	0x402b9999
 800d4d0:	24000aac 	.word	0x24000aac
 800d4d4:	24000ab0 	.word	0x24000ab0

0800d4d8 <Move_Tx_Pid_Ctrl>:

/* Tx姿态调整 */
uint16_t time_tx=0;
void Move_Tx_Pid_Ctrl(float TX_X_Goal,float TX_Y_Goal) {
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	ed87 0a01 	vstr	s0, [r7, #4]
 800d4e2:	edc7 0a00 	vstr	s1, [r7]

	while (1) {
	if (TX_Y_out >= 0) {
 800d4e6:	4b72      	ldr	r3, [pc, #456]	@ (800d6b0 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d4e8:	edd3 7a00 	vldr	s15, [r3]
 800d4ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f4:	db12      	blt.n	800d51c <Move_Tx_Pid_Ctrl+0x44>
			Move_Right(80, 80, TX_Y_out * 5);
 800d4f6:	4b6e      	ldr	r3, [pc, #440]	@ (800d6b0 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d4f8:	edd3 7a00 	vldr	s15, [r3]
 800d4fc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d500:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d508:	ee17 2a90 	vmov	r2, s15
 800d50c:	2150      	movs	r1, #80	@ 0x50
 800d50e:	2050      	movs	r0, #80	@ 0x50
 800d510:	f7ff f8e6 	bl	800c6e0 <Move_Right>
			HAL_Delay(5);
 800d514:	2005      	movs	r0, #5
 800d516:	f7f5 fb65 	bl	8002be4 <HAL_Delay>
 800d51a:	e013      	b.n	800d544 <Move_Tx_Pid_Ctrl+0x6c>
		} else {
			Move_Left(80, 80, -TX_Y_out * 5);
 800d51c:	4b64      	ldr	r3, [pc, #400]	@ (800d6b0 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d51e:	edd3 7a00 	vldr	s15, [r3]
 800d522:	eef1 7a67 	vneg.f32	s15, s15
 800d526:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d52a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d52e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d532:	ee17 2a90 	vmov	r2, s15
 800d536:	2150      	movs	r1, #80	@ 0x50
 800d538:	2050      	movs	r0, #80	@ 0x50
 800d53a:	f7fe fff9 	bl	800c530 <Move_Left>
			HAL_Delay(5);
 800d53e:	2005      	movs	r0, #5
 800d540:	f7f5 fb50 	bl	8002be4 <HAL_Delay>
		}

		if (TX_X_out >= 0) {
 800d544:	4b5b      	ldr	r3, [pc, #364]	@ (800d6b4 <Move_Tx_Pid_Ctrl+0x1dc>)
 800d546:	edd3 7a00 	vldr	s15, [r3]
 800d54a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d552:	db12      	blt.n	800d57a <Move_Tx_Pid_Ctrl+0xa2>
			Move_Back(80, 80, TX_X_out * 5);
 800d554:	4b57      	ldr	r3, [pc, #348]	@ (800d6b4 <Move_Tx_Pid_Ctrl+0x1dc>)
 800d556:	edd3 7a00 	vldr	s15, [r3]
 800d55a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d55e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d566:	ee17 2a90 	vmov	r2, s15
 800d56a:	2150      	movs	r1, #80	@ 0x50
 800d56c:	2050      	movs	r0, #80	@ 0x50
 800d56e:	f7ff f84b 	bl	800c608 <Move_Back>
			HAL_Delay(5);
 800d572:	2005      	movs	r0, #5
 800d574:	f7f5 fb36 	bl	8002be4 <HAL_Delay>
 800d578:	e013      	b.n	800d5a2 <Move_Tx_Pid_Ctrl+0xca>
		} else {
			Move_Line(80, 80, -TX_X_out * 5);
 800d57a:	4b4e      	ldr	r3, [pc, #312]	@ (800d6b4 <Move_Tx_Pid_Ctrl+0x1dc>)
 800d57c:	edd3 7a00 	vldr	s15, [r3]
 800d580:	eef1 7a67 	vneg.f32	s15, s15
 800d584:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d58c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d590:	ee17 2a90 	vmov	r2, s15
 800d594:	2150      	movs	r1, #80	@ 0x50
 800d596:	2050      	movs	r0, #80	@ 0x50
 800d598:	f7fe ff5e 	bl	800c458 <Move_Line>
			HAL_Delay(5);
 800d59c:	2005      	movs	r0, #5
 800d59e:	f7f5 fb21 	bl	8002be4 <HAL_Delay>
		}

		if (ABS(Tx_NOW - 370.5) < 5 && ABS(Ty_NOW -230.5) < 5) {
 800d5a2:	4b45      	ldr	r3, [pc, #276]	@ (800d6b8 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d5a4:	edd3 7a00 	vldr	s15, [r3]
 800d5a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d5ac:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800d6a0 <Move_Tx_Pid_Ctrl+0x1c8>
 800d5b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d5b4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5bc:	dd13      	ble.n	800d5e6 <Move_Tx_Pid_Ctrl+0x10e>
 800d5be:	4b3e      	ldr	r3, [pc, #248]	@ (800d6b8 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d5c0:	edd3 7a00 	vldr	s15, [r3]
 800d5c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d5c8:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 800d6a0 <Move_Tx_Pid_Ctrl+0x1c8>
 800d5cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d5d0:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 800d5d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5dc:	bf4c      	ite	mi
 800d5de:	2301      	movmi	r3, #1
 800d5e0:	2300      	movpl	r3, #0
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	e012      	b.n	800d60c <Move_Tx_Pid_Ctrl+0x134>
 800d5e6:	4b34      	ldr	r3, [pc, #208]	@ (800d6b8 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d5e8:	edd3 7a00 	vldr	s15, [r3]
 800d5ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d5f0:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 800d6a0 <Move_Tx_Pid_Ctrl+0x1c8>
 800d5f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d5f8:	eeb9 6b04 	vmov.f64	d6, #148	@ 0xc0a00000 -5.0
 800d5fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d604:	bfcc      	ite	gt
 800d606:	2301      	movgt	r3, #1
 800d608:	2300      	movle	r3, #0
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d036      	beq.n	800d67e <Move_Tx_Pid_Ctrl+0x1a6>
 800d610:	4b2a      	ldr	r3, [pc, #168]	@ (800d6bc <Move_Tx_Pid_Ctrl+0x1e4>)
 800d612:	edd3 7a00 	vldr	s15, [r3]
 800d616:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d61a:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 800d6a8 <Move_Tx_Pid_Ctrl+0x1d0>
 800d61e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d622:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d62a:	dd13      	ble.n	800d654 <Move_Tx_Pid_Ctrl+0x17c>
 800d62c:	4b23      	ldr	r3, [pc, #140]	@ (800d6bc <Move_Tx_Pid_Ctrl+0x1e4>)
 800d62e:	edd3 7a00 	vldr	s15, [r3]
 800d632:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d636:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 800d6a8 <Move_Tx_Pid_Ctrl+0x1d0>
 800d63a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d63e:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 800d642:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d64a:	bf4c      	ite	mi
 800d64c:	2301      	movmi	r3, #1
 800d64e:	2300      	movpl	r3, #0
 800d650:	b2db      	uxtb	r3, r3
 800d652:	e012      	b.n	800d67a <Move_Tx_Pid_Ctrl+0x1a2>
 800d654:	4b19      	ldr	r3, [pc, #100]	@ (800d6bc <Move_Tx_Pid_Ctrl+0x1e4>)
 800d656:	edd3 7a00 	vldr	s15, [r3]
 800d65a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d65e:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 800d6a8 <Move_Tx_Pid_Ctrl+0x1d0>
 800d662:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d666:	eeb9 6b04 	vmov.f64	d6, #148	@ 0xc0a00000 -5.0
 800d66a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d672:	bfcc      	ite	gt
 800d674:	2301      	movgt	r3, #1
 800d676:	2300      	movle	r3, #0
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d108      	bne.n	800d690 <Move_Tx_Pid_Ctrl+0x1b8>
			break;
		}
		if(time_tx>=250)
 800d67e:	4b10      	ldr	r3, [pc, #64]	@ (800d6c0 <Move_Tx_Pid_Ctrl+0x1e8>)
 800d680:	881b      	ldrh	r3, [r3, #0]
 800d682:	2bf9      	cmp	r3, #249	@ 0xf9
 800d684:	f67f af2f 	bls.w	800d4e6 <Move_Tx_Pid_Ctrl+0xe>
		{time_tx=0;
 800d688:	4b0d      	ldr	r3, [pc, #52]	@ (800d6c0 <Move_Tx_Pid_Ctrl+0x1e8>)
 800d68a:	2200      	movs	r2, #0
 800d68c:	801a      	strh	r2, [r3, #0]
			break;
 800d68e:	e000      	b.n	800d692 <Move_Tx_Pid_Ctrl+0x1ba>
			break;
 800d690:	bf00      	nop
		}
	}

}
 800d692:	bf00      	nop
 800d694:	3708      	adds	r7, #8
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	f3af 8000 	nop.w
 800d6a0:	00000000 	.word	0x00000000
 800d6a4:	40772800 	.word	0x40772800
 800d6a8:	00000000 	.word	0x00000000
 800d6ac:	406cd000 	.word	0x406cd000
 800d6b0:	24000bdc 	.word	0x24000bdc
 800d6b4:	24000bd8 	.word	0x24000bd8
 800d6b8:	24000454 	.word	0x24000454
 800d6bc:	24000458 	.word	0x24000458
 800d6c0:	24000be4 	.word	0x24000be4

0800d6c4 <Host2SCS>:
}

//1个16位数拆分为2个8位数
//DataL为低位，DataH为高位
void Host2SCS(uint8_t *DataL, uint8_t *DataH, int Data)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b085      	sub	sp, #20
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	60b9      	str	r1, [r7, #8]
 800d6ce:	607a      	str	r2, [r7, #4]
	if (End)
 800d6d0:	4b0e      	ldr	r3, [pc, #56]	@ (800d70c <Host2SCS+0x48>)
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d009      	beq.n	800d6ec <Host2SCS+0x28>
	{
		*DataL = (Data >> 8);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	121b      	asrs	r3, r3, #8
 800d6dc:	b2da      	uxtb	r2, r3
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	701a      	strb	r2, [r3, #0]
		*DataH = (Data & 0xff);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	b2da      	uxtb	r2, r3
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	701a      	strb	r2, [r3, #0]
	else
	{
		*DataH = (Data >> 8);
		*DataL = (Data & 0xff);
	}
}
 800d6ea:	e008      	b.n	800d6fe <Host2SCS+0x3a>
		*DataH = (Data >> 8);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	121b      	asrs	r3, r3, #8
 800d6f0:	b2da      	uxtb	r2, r3
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	701a      	strb	r2, [r3, #0]
		*DataL = (Data & 0xff);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	b2da      	uxtb	r2, r3
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	701a      	strb	r2, [r3, #0]
}
 800d6fe:	bf00      	nop
 800d700:	3714      	adds	r7, #20
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	24000be6 	.word	0x24000be6

0800d710 <writeBuf>:
	return Data;
}

void writeBuf(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen,
		uint8_t Fun)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b086      	sub	sp, #24
 800d714:	af00      	add	r7, sp, #0
 800d716:	603a      	str	r2, [r7, #0]
 800d718:	461a      	mov	r2, r3
 800d71a:	4603      	mov	r3, r0
 800d71c:	71fb      	strb	r3, [r7, #7]
 800d71e:	460b      	mov	r3, r1
 800d720:	71bb      	strb	r3, [r7, #6]
 800d722:	4613      	mov	r3, r2
 800d724:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t msgLen = 2;
 800d726:	2302      	movs	r3, #2
 800d728:	75bb      	strb	r3, [r7, #22]
	uint8_t bBuf[6];
	uint8_t CheckSum = 0;
 800d72a:	2300      	movs	r3, #0
 800d72c:	73fb      	strb	r3, [r7, #15]
	bBuf[0] = 0xff;
 800d72e:	23ff      	movs	r3, #255	@ 0xff
 800d730:	743b      	strb	r3, [r7, #16]
	bBuf[1] = 0xff;
 800d732:	23ff      	movs	r3, #255	@ 0xff
 800d734:	747b      	strb	r3, [r7, #17]
	bBuf[2] = ID;
 800d736:	79fb      	ldrb	r3, [r7, #7]
 800d738:	74bb      	strb	r3, [r7, #18]
	bBuf[4] = Fun;
 800d73a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d73e:	753b      	strb	r3, [r7, #20]
	if (nDat)
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d010      	beq.n	800d768 <writeBuf+0x58>
	{
		msgLen += nLen + 1;
 800d746:	797a      	ldrb	r2, [r7, #5]
 800d748:	7dbb      	ldrb	r3, [r7, #22]
 800d74a:	4413      	add	r3, r2
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	3301      	adds	r3, #1
 800d750:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = msgLen;
 800d752:	7dbb      	ldrb	r3, [r7, #22]
 800d754:	74fb      	strb	r3, [r7, #19]
		bBuf[5] = MemAddr;
 800d756:	79bb      	ldrb	r3, [r7, #6]
 800d758:	757b      	strb	r3, [r7, #21]
		writeSCS(bBuf, 6);
 800d75a:	f107 0310 	add.w	r3, r7, #16
 800d75e:	2106      	movs	r1, #6
 800d760:	4618      	mov	r0, r3
 800d762:	f000 f99b 	bl	800da9c <writeSCS>
 800d766:	e007      	b.n	800d778 <writeBuf+0x68>

	}
	else
	{
		bBuf[3] = msgLen;
 800d768:	7dbb      	ldrb	r3, [r7, #22]
 800d76a:	74fb      	strb	r3, [r7, #19]
		writeSCS(bBuf, 5);
 800d76c:	f107 0310 	add.w	r3, r7, #16
 800d770:	2105      	movs	r1, #5
 800d772:	4618      	mov	r0, r3
 800d774:	f000 f992 	bl	800da9c <writeSCS>
	}
	CheckSum = ID + msgLen + Fun + MemAddr;
 800d778:	79fa      	ldrb	r2, [r7, #7]
 800d77a:	7dbb      	ldrb	r3, [r7, #22]
 800d77c:	4413      	add	r3, r2
 800d77e:	b2da      	uxtb	r2, r3
 800d780:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d784:	4413      	add	r3, r2
 800d786:	b2da      	uxtb	r2, r3
 800d788:	79bb      	ldrb	r3, [r7, #6]
 800d78a:	4413      	add	r3, r2
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	73fb      	strb	r3, [r7, #15]
	if (nDat)
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d016      	beq.n	800d7c4 <writeBuf+0xb4>
	{
		for (i = 0; i < nLen; i++)
 800d796:	2300      	movs	r3, #0
 800d798:	75fb      	strb	r3, [r7, #23]
 800d79a:	e00a      	b.n	800d7b2 <writeBuf+0xa2>
		{
			CheckSum += nDat[i];
 800d79c:	7dfb      	ldrb	r3, [r7, #23]
 800d79e:	683a      	ldr	r2, [r7, #0]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	781a      	ldrb	r2, [r3, #0]
 800d7a4:	7bfb      	ldrb	r3, [r7, #15]
 800d7a6:	4413      	add	r3, r2
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < nLen; i++)
 800d7ac:	7dfb      	ldrb	r3, [r7, #23]
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	75fb      	strb	r3, [r7, #23]
 800d7b2:	7dfa      	ldrb	r2, [r7, #23]
 800d7b4:	797b      	ldrb	r3, [r7, #5]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d3f0      	bcc.n	800d79c <writeBuf+0x8c>
		}
		writeSCS(nDat, nLen);
 800d7ba:	797b      	ldrb	r3, [r7, #5]
 800d7bc:	4619      	mov	r1, r3
 800d7be:	6838      	ldr	r0, [r7, #0]
 800d7c0:	f000 f96c 	bl	800da9c <writeSCS>
	}
	CheckSum = ~CheckSum;
 800d7c4:	7bfb      	ldrb	r3, [r7, #15]
 800d7c6:	43db      	mvns	r3, r3
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	73fb      	strb	r3, [r7, #15]
	writeSCS(&CheckSum, 1);
 800d7cc:	f107 030f 	add.w	r3, r7, #15
 800d7d0:	2101      	movs	r1, #1
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f000 f962 	bl	800da9c <writeSCS>
}
 800d7d8:	bf00      	nop
 800d7da:	3718      	adds	r7, #24
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <genWrite>:

//普通写指令
//舵机ID，MemAddr内存表地址，写入数据，写入长度
int genWrite(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af02      	add	r7, sp, #8
 800d7e6:	603a      	str	r2, [r7, #0]
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	71fb      	strb	r3, [r7, #7]
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	71bb      	strb	r3, [r7, #6]
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	717b      	strb	r3, [r7, #5]
	rFlushSCS();
 800d7f6:	f000 f990 	bl	800db1a <rFlushSCS>
	writeBuf(ID, MemAddr, nDat, nLen, INST_WRITE);
 800d7fa:	797b      	ldrb	r3, [r7, #5]
 800d7fc:	79b9      	ldrb	r1, [r7, #6]
 800d7fe:	79f8      	ldrb	r0, [r7, #7]
 800d800:	2203      	movs	r2, #3
 800d802:	9200      	str	r2, [sp, #0]
 800d804:	683a      	ldr	r2, [r7, #0]
 800d806:	f7ff ff83 	bl	800d710 <writeBuf>
	wFlushSCS();
 800d80a:	f000 f98d 	bl	800db28 <wFlushSCS>
	return Ack(ID);
 800d80e:	79fb      	ldrb	r3, [r7, #7]
 800d810:	4618      	mov	r0, r3
 800d812:	f000 f8b9 	bl	800d988 <Ack>
 800d816:	4603      	mov	r3, r0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3708      	adds	r7, #8
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <Read>:
}

//读指令
//舵机ID，MemAddr内存表地址，返回数据nData，数据长度nLen
int Read(uint8_t ID, uint8_t MemAddr, uint8_t *nData, uint8_t nLen)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b088      	sub	sp, #32
 800d824:	af02      	add	r7, sp, #8
 800d826:	603a      	str	r2, [r7, #0]
 800d828:	461a      	mov	r2, r3
 800d82a:	4603      	mov	r3, r0
 800d82c:	71fb      	strb	r3, [r7, #7]
 800d82e:	460b      	mov	r3, r1
 800d830:	71bb      	strb	r3, [r7, #6]
 800d832:	4613      	mov	r3, r2
 800d834:	717b      	strb	r3, [r7, #5]
	int Size;
	uint8_t bBuf[4];
	uint8_t calSum;
	uint8_t i;
	rFlushSCS();
 800d836:	f000 f970 	bl	800db1a <rFlushSCS>
	writeBuf(ID, MemAddr, &nLen, 1, INST_READ);
 800d83a:	1d7a      	adds	r2, r7, #5
 800d83c:	79b9      	ldrb	r1, [r7, #6]
 800d83e:	79f8      	ldrb	r0, [r7, #7]
 800d840:	2302      	movs	r3, #2
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	2301      	movs	r3, #1
 800d846:	f7ff ff63 	bl	800d710 <writeBuf>
	wFlushSCS();
 800d84a:	f000 f96d 	bl	800db28 <wFlushSCS>
	if (!checkHead())
 800d84e:	f000 f872 	bl	800d936 <checkHead>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d101      	bne.n	800d85c <Read+0x3c>
	{
		return 0;
 800d858:	2300      	movs	r3, #0
 800d85a:	e04b      	b.n	800d8f4 <Read+0xd4>
	}
	Error = 0;
 800d85c:	4b27      	ldr	r3, [pc, #156]	@ (800d8fc <Read+0xdc>)
 800d85e:	2200      	movs	r2, #0
 800d860:	701a      	strb	r2, [r3, #0]
	if (readSCS(bBuf, 3) != 3)
 800d862:	f107 030c 	add.w	r3, r7, #12
 800d866:	2103      	movs	r1, #3
 800d868:	4618      	mov	r0, r3
 800d86a:	f000 f903 	bl	800da74 <readSCS>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b03      	cmp	r3, #3
 800d872:	d001      	beq.n	800d878 <Read+0x58>
	{
		return 0;
 800d874:	2300      	movs	r3, #0
 800d876:	e03d      	b.n	800d8f4 <Read+0xd4>
	}
	Size = readSCS(nData, nLen);
 800d878:	797b      	ldrb	r3, [r7, #5]
 800d87a:	4619      	mov	r1, r3
 800d87c:	6838      	ldr	r0, [r7, #0]
 800d87e:	f000 f8f9 	bl	800da74 <readSCS>
 800d882:	6138      	str	r0, [r7, #16]
	if (Size != nLen)
 800d884:	797b      	ldrb	r3, [r7, #5]
 800d886:	461a      	mov	r2, r3
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d001      	beq.n	800d892 <Read+0x72>
	{
		return 0;
 800d88e:	2300      	movs	r3, #0
 800d890:	e030      	b.n	800d8f4 <Read+0xd4>
	}
	if (readSCS(bBuf + 3, 1) != 1)
 800d892:	f107 030c 	add.w	r3, r7, #12
 800d896:	3303      	adds	r3, #3
 800d898:	2101      	movs	r1, #1
 800d89a:	4618      	mov	r0, r3
 800d89c:	f000 f8ea 	bl	800da74 <readSCS>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d001      	beq.n	800d8aa <Read+0x8a>
	{
		return 0;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	e024      	b.n	800d8f4 <Read+0xd4>
	}
	calSum = bBuf[0] + bBuf[1] + bBuf[2];
 800d8aa:	7b3a      	ldrb	r2, [r7, #12]
 800d8ac:	7b7b      	ldrb	r3, [r7, #13]
 800d8ae:	4413      	add	r3, r2
 800d8b0:	b2da      	uxtb	r2, r3
 800d8b2:	7bbb      	ldrb	r3, [r7, #14]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < Size; i++)
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	75bb      	strb	r3, [r7, #22]
 800d8bc:	e009      	b.n	800d8d2 <Read+0xb2>
	{
		calSum += nData[i];
 800d8be:	7dbb      	ldrb	r3, [r7, #22]
 800d8c0:	683a      	ldr	r2, [r7, #0]
 800d8c2:	4413      	add	r3, r2
 800d8c4:	781a      	ldrb	r2, [r3, #0]
 800d8c6:	7dfb      	ldrb	r3, [r7, #23]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < Size; i++)
 800d8cc:	7dbb      	ldrb	r3, [r7, #22]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	75bb      	strb	r3, [r7, #22]
 800d8d2:	7dbb      	ldrb	r3, [r7, #22]
 800d8d4:	693a      	ldr	r2, [r7, #16]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	dcf1      	bgt.n	800d8be <Read+0x9e>
	}
	calSum = ~calSum;
 800d8da:	7dfb      	ldrb	r3, [r7, #23]
 800d8dc:	43db      	mvns	r3, r3
 800d8de:	75fb      	strb	r3, [r7, #23]
	if (calSum != bBuf[3])
 800d8e0:	7bfb      	ldrb	r3, [r7, #15]
 800d8e2:	7dfa      	ldrb	r2, [r7, #23]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d001      	beq.n	800d8ec <Read+0xcc>
	{
		return 0;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	e003      	b.n	800d8f4 <Read+0xd4>
	}
	Error = bBuf[2];
 800d8ec:	7bba      	ldrb	r2, [r7, #14]
 800d8ee:	4b03      	ldr	r3, [pc, #12]	@ (800d8fc <Read+0xdc>)
 800d8f0:	701a      	strb	r2, [r3, #0]
	return Size;
 800d8f2:	693b      	ldr	r3, [r7, #16]
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3718      	adds	r7, #24
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	24000be7 	.word	0x24000be7

0800d900 <readByte>:

//读1字节，超时返回-1
int readByte(uint8_t ID, uint8_t MemAddr)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	4603      	mov	r3, r0
 800d908:	460a      	mov	r2, r1
 800d90a:	71fb      	strb	r3, [r7, #7]
 800d90c:	4613      	mov	r3, r2
 800d90e:	71bb      	strb	r3, [r7, #6]
	uint8_t bDat;
	int Size = Read(ID, MemAddr, &bDat, 1);
 800d910:	f107 020b 	add.w	r2, r7, #11
 800d914:	79b9      	ldrb	r1, [r7, #6]
 800d916:	79f8      	ldrb	r0, [r7, #7]
 800d918:	2301      	movs	r3, #1
 800d91a:	f7ff ff81 	bl	800d820 <Read>
 800d91e:	60f8      	str	r0, [r7, #12]
	if (Size != 1)
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2b01      	cmp	r3, #1
 800d924:	d002      	beq.n	800d92c <readByte+0x2c>
	{
		return -1;
 800d926:	f04f 33ff 	mov.w	r3, #4294967295
 800d92a:	e000      	b.n	800d92e <readByte+0x2e>
	}
	else
	{
		return bDat;
 800d92c:	7afb      	ldrb	r3, [r7, #11]
	}
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3710      	adds	r7, #16
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <checkHead>:
	Error = bBuf[2];
	return bBuf[0];
}

int checkHead(void)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
	uint8_t bDat;
	uint8_t bBuf[2] =
 800d93c:	2300      	movs	r3, #0
 800d93e:	80bb      	strh	r3, [r7, #4]
	{ 0, 0 };
	uint8_t Cnt = 0;
 800d940:	2300      	movs	r3, #0
 800d942:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		if (!readSCS(&bDat, 1))
 800d944:	1dbb      	adds	r3, r7, #6
 800d946:	2101      	movs	r1, #1
 800d948:	4618      	mov	r0, r3
 800d94a:	f000 f893 	bl	800da74 <readSCS>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d101      	bne.n	800d958 <checkHead+0x22>
		{
			return 0;
 800d954:	2300      	movs	r3, #0
 800d956:	e013      	b.n	800d980 <checkHead+0x4a>
		}
		bBuf[1] = bBuf[0];
 800d958:	793b      	ldrb	r3, [r7, #4]
 800d95a:	717b      	strb	r3, [r7, #5]
		bBuf[0] = bDat;
 800d95c:	79bb      	ldrb	r3, [r7, #6]
 800d95e:	713b      	strb	r3, [r7, #4]
		if (bBuf[0] == 0xff && bBuf[1] == 0xff)
 800d960:	793b      	ldrb	r3, [r7, #4]
 800d962:	2bff      	cmp	r3, #255	@ 0xff
 800d964:	d102      	bne.n	800d96c <checkHead+0x36>
 800d966:	797b      	ldrb	r3, [r7, #5]
 800d968:	2bff      	cmp	r3, #255	@ 0xff
 800d96a:	d007      	beq.n	800d97c <checkHead+0x46>
		{
			break;
		}
		Cnt++;
 800d96c:	79fb      	ldrb	r3, [r7, #7]
 800d96e:	3301      	adds	r3, #1
 800d970:	71fb      	strb	r3, [r7, #7]
		if (Cnt > 10)
 800d972:	79fb      	ldrb	r3, [r7, #7]
 800d974:	2b0a      	cmp	r3, #10
 800d976:	d9e5      	bls.n	800d944 <checkHead+0xe>
		{
			return 0;
 800d978:	2300      	movs	r3, #0
 800d97a:	e001      	b.n	800d980 <checkHead+0x4a>
			break;
 800d97c:	bf00      	nop
		}
	}
	return 1;
 800d97e:	2301      	movs	r3, #1
}
 800d980:	4618      	mov	r0, r3
 800d982:	3708      	adds	r7, #8
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <Ack>:

//指令应答
int Ack(uint8_t ID)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	4603      	mov	r3, r0
 800d990:	71fb      	strb	r3, [r7, #7]
	uint8_t bBuf[4];
	uint8_t calSum;
	Error = 0;
 800d992:	4b1f      	ldr	r3, [pc, #124]	@ (800da10 <Ack+0x88>)
 800d994:	2200      	movs	r2, #0
 800d996:	701a      	strb	r2, [r3, #0]
	if (ID != 0xfe && Level)
 800d998:	79fb      	ldrb	r3, [r7, #7]
 800d99a:	2bfe      	cmp	r3, #254	@ 0xfe
 800d99c:	d032      	beq.n	800da04 <Ack+0x7c>
 800d99e:	4b1d      	ldr	r3, [pc, #116]	@ (800da14 <Ack+0x8c>)
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d02e      	beq.n	800da04 <Ack+0x7c>
	{
		if (!checkHead())
 800d9a6:	f7ff ffc6 	bl	800d936 <checkHead>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d101      	bne.n	800d9b4 <Ack+0x2c>
		{
			return 0;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	e028      	b.n	800da06 <Ack+0x7e>
		}
		if (readSCS(bBuf, 4) != 4)
 800d9b4:	f107 0308 	add.w	r3, r7, #8
 800d9b8:	2104      	movs	r1, #4
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f000 f85a 	bl	800da74 <readSCS>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b04      	cmp	r3, #4
 800d9c4:	d001      	beq.n	800d9ca <Ack+0x42>
		{
			return 0;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	e01d      	b.n	800da06 <Ack+0x7e>
		}
		if (bBuf[0] != ID)
 800d9ca:	7a3b      	ldrb	r3, [r7, #8]
 800d9cc:	79fa      	ldrb	r2, [r7, #7]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d001      	beq.n	800d9d6 <Ack+0x4e>
		{
			return 0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	e017      	b.n	800da06 <Ack+0x7e>
		}
		if (bBuf[1] != 2)
 800d9d6:	7a7b      	ldrb	r3, [r7, #9]
 800d9d8:	2b02      	cmp	r3, #2
 800d9da:	d001      	beq.n	800d9e0 <Ack+0x58>
		{
			return 0;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	e012      	b.n	800da06 <Ack+0x7e>
		}
		calSum = ~(bBuf[0] + bBuf[1] + bBuf[2]);
 800d9e0:	7a3a      	ldrb	r2, [r7, #8]
 800d9e2:	7a7b      	ldrb	r3, [r7, #9]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	b2da      	uxtb	r2, r3
 800d9e8:	7abb      	ldrb	r3, [r7, #10]
 800d9ea:	4413      	add	r3, r2
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	43db      	mvns	r3, r3
 800d9f0:	73fb      	strb	r3, [r7, #15]
		if (calSum != bBuf[3])
 800d9f2:	7afb      	ldrb	r3, [r7, #11]
 800d9f4:	7bfa      	ldrb	r2, [r7, #15]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d001      	beq.n	800d9fe <Ack+0x76>
		{
			return 0;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	e003      	b.n	800da06 <Ack+0x7e>
		}
		Error = bBuf[2];
 800d9fe:	7aba      	ldrb	r2, [r7, #10]
 800da00:	4b03      	ldr	r3, [pc, #12]	@ (800da10 <Ack+0x88>)
 800da02:	701a      	strb	r2, [r3, #0]
	}
	return 1;
 800da04:	2301      	movs	r3, #1
}
 800da06:	4618      	mov	r0, r3
 800da08:	3710      	adds	r7, #16
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	24000be7 	.word	0x24000be7
 800da14:	24000046 	.word	0x24000046

0800da18 <Uart_Send>:
#include "stm32h7xx_hal.h"
#include "SCS_Uart.h"
#include "usart.h"

void Uart_Send(uint8_t *buf, uint16_t len)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	460b      	mov	r3, r1
 800da22:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart6, buf, len, HAL_MAX_DELAY);
 800da24:	887a      	ldrh	r2, [r7, #2]
 800da26:	f04f 33ff 	mov.w	r3, #4294967295
 800da2a:	6879      	ldr	r1, [r7, #4]
 800da2c:	4803      	ldr	r0, [pc, #12]	@ (800da3c <Uart_Send+0x24>)
 800da2e:	f7fa fe3d 	bl	80086ac <HAL_UART_Transmit>
}
 800da32:	bf00      	nop
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	24000980 	.word	0x24000980

0800da40 <Uart_Read>:

int16_t Uart_Read(uint8_t *buf, uint16_t len, uint32_t timeout)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	460b      	mov	r3, r1
 800da4a:	607a      	str	r2, [r7, #4]
 800da4c:	817b      	strh	r3, [r7, #10]
	if (HAL_UART_Receive(&huart6, buf, len, timeout) == HAL_OK)
 800da4e:	897a      	ldrh	r2, [r7, #10]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	68f9      	ldr	r1, [r7, #12]
 800da54:	4806      	ldr	r0, [pc, #24]	@ (800da70 <Uart_Read+0x30>)
 800da56:	f7fa feb7 	bl	80087c8 <HAL_UART_Receive>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d102      	bne.n	800da66 <Uart_Read+0x26>
	{
		return len;
 800da60:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800da64:	e000      	b.n	800da68 <Uart_Read+0x28>
	}
	else
	{
		return 0;
 800da66:	2300      	movs	r3, #0
	}
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	24000980 	.word	0x24000980

0800da74 <readSCS>:
uint8_t wBuf[128];
uint8_t wLen = 0;

//UART 接收数据接口
int readSCS(unsigned char *nDat, int nLen)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
	return Uart_Read(nDat, nLen, IOTimeOut);
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	b29b      	uxth	r3, r3
 800da82:	4a05      	ldr	r2, [pc, #20]	@ (800da98 <readSCS+0x24>)
 800da84:	6812      	ldr	r2, [r2, #0]
 800da86:	4619      	mov	r1, r3
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7ff ffd9 	bl	800da40 <Uart_Read>
 800da8e:	4603      	mov	r3, r0
}
 800da90:	4618      	mov	r0, r3
 800da92:	3708      	adds	r7, #8
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	24000048 	.word	0x24000048

0800da9c <writeSCS>:

//UART 发送数据接口
int writeSCS(unsigned char *nDat, int nLen)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
	while (nLen--)
 800daa6:	e014      	b.n	800dad2 <writeSCS+0x36>
	{
		if (wLen < sizeof(wBuf))
 800daa8:	4b10      	ldr	r3, [pc, #64]	@ (800daec <writeSCS+0x50>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	b25b      	sxtb	r3, r3
 800daae:	2b00      	cmp	r3, #0
 800dab0:	db0f      	blt.n	800dad2 <writeSCS+0x36>
		{
			wBuf[wLen] = *nDat;
 800dab2:	4b0e      	ldr	r3, [pc, #56]	@ (800daec <writeSCS+0x50>)
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	461a      	mov	r2, r3
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	7819      	ldrb	r1, [r3, #0]
 800dabc:	4b0c      	ldr	r3, [pc, #48]	@ (800daf0 <writeSCS+0x54>)
 800dabe:	5499      	strb	r1, [r3, r2]
			wLen++;
 800dac0:	4b0a      	ldr	r3, [pc, #40]	@ (800daec <writeSCS+0x50>)
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	3301      	adds	r3, #1
 800dac6:	b2da      	uxtb	r2, r3
 800dac8:	4b08      	ldr	r3, [pc, #32]	@ (800daec <writeSCS+0x50>)
 800daca:	701a      	strb	r2, [r3, #0]
			nDat++;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	3301      	adds	r3, #1
 800dad0:	607b      	str	r3, [r7, #4]
	while (nLen--)
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	1e5a      	subs	r2, r3, #1
 800dad6:	603a      	str	r2, [r7, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d1e5      	bne.n	800daa8 <writeSCS+0xc>
		}
	}
	return wLen;
 800dadc:	4b03      	ldr	r3, [pc, #12]	@ (800daec <writeSCS+0x50>)
 800dade:	781b      	ldrb	r3, [r3, #0]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	370c      	adds	r7, #12
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr
 800daec:	24000c68 	.word	0x24000c68
 800daf0:	24000be8 	.word	0x24000be8

0800daf4 <nopDelay>:
	return wLen;
}

//等待舵机总线切换(约8us)
void nopDelay(void)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
	uint16_t i = 500;
 800dafa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800dafe:	80fb      	strh	r3, [r7, #6]
	while (i--)
 800db00:	bf00      	nop
 800db02:	88fb      	ldrh	r3, [r7, #6]
 800db04:	1e5a      	subs	r2, r3, #1
 800db06:	80fa      	strh	r2, [r7, #6]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d1fa      	bne.n	800db02 <nopDelay+0xe>
		;
}
 800db0c:	bf00      	nop
 800db0e:	bf00      	nop
 800db10:	370c      	adds	r7, #12
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr

0800db1a <rFlushSCS>:

//接收缓冲区刷新
void rFlushSCS()
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	af00      	add	r7, sp, #0
	nopDelay();
 800db1e:	f7ff ffe9 	bl	800daf4 <nopDelay>
}
 800db22:	bf00      	nop
 800db24:	bd80      	pop	{r7, pc}
	...

0800db28 <wFlushSCS>:

//发送缓冲区刷新
void wFlushSCS()
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	af00      	add	r7, sp, #0
	if (wLen)
 800db2c:	4b07      	ldr	r3, [pc, #28]	@ (800db4c <wFlushSCS+0x24>)
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d008      	beq.n	800db46 <wFlushSCS+0x1e>
	{
		Uart_Send(wBuf, wLen);
 800db34:	4b05      	ldr	r3, [pc, #20]	@ (800db4c <wFlushSCS+0x24>)
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	4619      	mov	r1, r3
 800db3a:	4805      	ldr	r0, [pc, #20]	@ (800db50 <wFlushSCS+0x28>)
 800db3c:	f7ff ff6c 	bl	800da18 <Uart_Send>
		wLen = 0;
 800db40:	4b02      	ldr	r3, [pc, #8]	@ (800db4c <wFlushSCS+0x24>)
 800db42:	2200      	movs	r2, #0
 800db44:	701a      	strb	r2, [r3, #0]
	}
}
 800db46:	bf00      	nop
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	24000c68 	.word	0x24000c68
 800db50:	24000be8 	.word	0x24000be8

0800db54 <WritePosEx>:
{
	return Err;
}

int WritePosEx(uint8_t ID, int16_t Position, uint16_t Speed, uint8_t ACC)
{
 800db54:	b590      	push	{r4, r7, lr}
 800db56:	b085      	sub	sp, #20
 800db58:	af00      	add	r7, sp, #0
 800db5a:	4604      	mov	r4, r0
 800db5c:	4608      	mov	r0, r1
 800db5e:	4611      	mov	r1, r2
 800db60:	461a      	mov	r2, r3
 800db62:	4623      	mov	r3, r4
 800db64:	71fb      	strb	r3, [r7, #7]
 800db66:	4603      	mov	r3, r0
 800db68:	80bb      	strh	r3, [r7, #4]
 800db6a:	460b      	mov	r3, r1
 800db6c:	807b      	strh	r3, [r7, #2]
 800db6e:	4613      	mov	r3, r2
 800db70:	71bb      	strb	r3, [r7, #6]
	uint8_t bBuf[7];
	if (Position < 0)
 800db72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	da09      	bge.n	800db8e <WritePosEx+0x3a>
	{
		Position = -Position;
 800db7a:	88bb      	ldrh	r3, [r7, #4]
 800db7c:	425b      	negs	r3, r3
 800db7e:	b29b      	uxth	r3, r3
 800db80:	80bb      	strh	r3, [r7, #4]
		Position |= (1 << 15);
 800db82:	88bb      	ldrh	r3, [r7, #4]
 800db84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db8c:	80bb      	strh	r3, [r7, #4]
	}

	bBuf[0] = ACC;
 800db8e:	79bb      	ldrb	r3, [r7, #6]
 800db90:	723b      	strb	r3, [r7, #8]
	Host2SCS(bBuf + 1, bBuf + 2, Position);
 800db92:	f107 0308 	add.w	r3, r7, #8
 800db96:	3301      	adds	r3, #1
 800db98:	f107 0108 	add.w	r1, r7, #8
 800db9c:	3102      	adds	r1, #2
 800db9e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7ff fd8e 	bl	800d6c4 <Host2SCS>
	Host2SCS(bBuf + 3, bBuf + 4, 0);
 800dba8:	f107 0308 	add.w	r3, r7, #8
 800dbac:	3303      	adds	r3, #3
 800dbae:	f107 0108 	add.w	r1, r7, #8
 800dbb2:	3104      	adds	r1, #4
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7ff fd84 	bl	800d6c4 <Host2SCS>
	Host2SCS(bBuf + 5, bBuf + 6, Speed);
 800dbbc:	f107 0308 	add.w	r3, r7, #8
 800dbc0:	3305      	adds	r3, #5
 800dbc2:	f107 0108 	add.w	r1, r7, #8
 800dbc6:	3106      	adds	r1, #6
 800dbc8:	887a      	ldrh	r2, [r7, #2]
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7ff fd7a 	bl	800d6c4 <Host2SCS>

	return genWrite(ID, SMS_STS_ACC, bBuf, 7);
 800dbd0:	f107 0208 	add.w	r2, r7, #8
 800dbd4:	79f8      	ldrb	r0, [r7, #7]
 800dbd6:	2307      	movs	r3, #7
 800dbd8:	2129      	movs	r1, #41	@ 0x29
 800dbda:	f7ff fe01 	bl	800d7e0 <genWrite>
 800dbde:	4603      	mov	r3, r0
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3714      	adds	r7, #20
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd90      	pop	{r4, r7, pc}

0800dbe8 <ReadMove>:
	}
	return Temper;
}

int ReadMove(int ID)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
	int Move = -1;
 800dbf0:	f04f 33ff 	mov.w	r3, #4294967295
 800dbf4:	60fb      	str	r3, [r7, #12]
	if (ID == -1)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbfc:	d103      	bne.n	800dc06 <ReadMove+0x1e>
	{
		Move = Mem[SMS_STS_MOVING - SMS_STS_PRESENT_POSITION_L];
 800dbfe:	4b0d      	ldr	r3, [pc, #52]	@ (800dc34 <ReadMove+0x4c>)
 800dc00:	7a9b      	ldrb	r3, [r3, #10]
 800dc02:	60fb      	str	r3, [r7, #12]
 800dc04:	e010      	b.n	800dc28 <ReadMove+0x40>
	}
	else
	{
		Err = 0;
 800dc06:	4b0c      	ldr	r3, [pc, #48]	@ (800dc38 <ReadMove+0x50>)
 800dc08:	2200      	movs	r2, #0
 800dc0a:	601a      	str	r2, [r3, #0]
		Move = readByte(ID, SMS_STS_MOVING);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	2142      	movs	r1, #66	@ 0x42
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7ff fe74 	bl	800d900 <readByte>
 800dc18:	60f8      	str	r0, [r7, #12]
		if (Move == -1)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc20:	d102      	bne.n	800dc28 <ReadMove+0x40>
		{
			Err = 1;
 800dc22:	4b05      	ldr	r3, [pc, #20]	@ (800dc38 <ReadMove+0x50>)
 800dc24:	2201      	movs	r2, #1
 800dc26:	601a      	str	r2, [r3, #0]
		}
	}
	return Move;
 800dc28:	68fb      	ldr	r3, [r7, #12]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	24000c6c 	.word	0x24000c6c
 800dc38:	24000c7c 	.word	0x24000c7c

0800dc3c <Action_Show>:
extern float x;
extern float y;
extern int colour;
extern char Point_Flag;

void Action_Show(void) {
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	af00      	add	r7, sp, #0
	sprintf(Z_str, "%.2f", zangle);
 800dc40:	4b30      	ldr	r3, [pc, #192]	@ (800dd04 <Action_Show+0xc8>)
 800dc42:	edd3 7a00 	vldr	s15, [r3]
 800dc46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dc4a:	ec53 2b17 	vmov	r2, r3, d7
 800dc4e:	492e      	ldr	r1, [pc, #184]	@ (800dd08 <Action_Show+0xcc>)
 800dc50:	482e      	ldr	r0, [pc, #184]	@ (800dd0c <Action_Show+0xd0>)
 800dc52:	f002 f8b7 	bl	800fdc4 <siprintf>
	sprintf(X_srt, "%.2f", pos_x);
 800dc56:	4b2e      	ldr	r3, [pc, #184]	@ (800dd10 <Action_Show+0xd4>)
 800dc58:	edd3 7a00 	vldr	s15, [r3]
 800dc5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dc60:	ec53 2b17 	vmov	r2, r3, d7
 800dc64:	4928      	ldr	r1, [pc, #160]	@ (800dd08 <Action_Show+0xcc>)
 800dc66:	482b      	ldr	r0, [pc, #172]	@ (800dd14 <Action_Show+0xd8>)
 800dc68:	f002 f8ac 	bl	800fdc4 <siprintf>
	sprintf(Y_srt, "%.2f", pos_y);
 800dc6c:	4b2a      	ldr	r3, [pc, #168]	@ (800dd18 <Action_Show+0xdc>)
 800dc6e:	edd3 7a00 	vldr	s15, [r3]
 800dc72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dc76:	ec53 2b17 	vmov	r2, r3, d7
 800dc7a:	4923      	ldr	r1, [pc, #140]	@ (800dd08 <Action_Show+0xcc>)
 800dc7c:	4827      	ldr	r0, [pc, #156]	@ (800dd1c <Action_Show+0xe0>)
 800dc7e:	f002 f8a1 	bl	800fdc4 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) "Z_Angle.txt=\"",
 800dc82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc86:	220d      	movs	r2, #13
 800dc88:	4925      	ldr	r1, [pc, #148]	@ (800dd20 <Action_Show+0xe4>)
 800dc8a:	4826      	ldr	r0, [pc, #152]	@ (800dd24 <Action_Show+0xe8>)
 800dc8c:	f7fa fd0e 	bl	80086ac <HAL_UART_Transmit>
			sizeof("Z_Angle.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Z_str, sizeof(X_srt) - 1, 0xffff);
 800dc90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc94:	2213      	movs	r2, #19
 800dc96:	491d      	ldr	r1, [pc, #116]	@ (800dd0c <Action_Show+0xd0>)
 800dc98:	4822      	ldr	r0, [pc, #136]	@ (800dd24 <Action_Show+0xe8>)
 800dc9a:	f7fa fd07 	bl	80086ac <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800dc9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dca2:	2204      	movs	r2, #4
 800dca4:	4920      	ldr	r1, [pc, #128]	@ (800dd28 <Action_Show+0xec>)
 800dca6:	481f      	ldr	r0, [pc, #124]	@ (800dd24 <Action_Show+0xe8>)
 800dca8:	f7fa fd00 	bl	80086ac <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "X_Point.txt=\"",
 800dcac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dcb0:	220d      	movs	r2, #13
 800dcb2:	491e      	ldr	r1, [pc, #120]	@ (800dd2c <Action_Show+0xf0>)
 800dcb4:	481b      	ldr	r0, [pc, #108]	@ (800dd24 <Action_Show+0xe8>)
 800dcb6:	f7fa fcf9 	bl	80086ac <HAL_UART_Transmit>
			sizeof("X_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) X_srt, sizeof(X_srt) - 1, 0xffff);
 800dcba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dcbe:	2213      	movs	r2, #19
 800dcc0:	4914      	ldr	r1, [pc, #80]	@ (800dd14 <Action_Show+0xd8>)
 800dcc2:	4818      	ldr	r0, [pc, #96]	@ (800dd24 <Action_Show+0xe8>)
 800dcc4:	f7fa fcf2 	bl	80086ac <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800dcc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dccc:	2204      	movs	r2, #4
 800dcce:	4916      	ldr	r1, [pc, #88]	@ (800dd28 <Action_Show+0xec>)
 800dcd0:	4814      	ldr	r0, [pc, #80]	@ (800dd24 <Action_Show+0xe8>)
 800dcd2:	f7fa fceb 	bl	80086ac <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "Y_Point.txt=\"",
 800dcd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dcda:	220d      	movs	r2, #13
 800dcdc:	4914      	ldr	r1, [pc, #80]	@ (800dd30 <Action_Show+0xf4>)
 800dcde:	4811      	ldr	r0, [pc, #68]	@ (800dd24 <Action_Show+0xe8>)
 800dce0:	f7fa fce4 	bl	80086ac <HAL_UART_Transmit>
			sizeof("Y_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_srt, sizeof(X_srt) - 1, 0xffff);
 800dce4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dce8:	2213      	movs	r2, #19
 800dcea:	490c      	ldr	r1, [pc, #48]	@ (800dd1c <Action_Show+0xe0>)
 800dcec:	480d      	ldr	r0, [pc, #52]	@ (800dd24 <Action_Show+0xe8>)
 800dcee:	f7fa fcdd 	bl	80086ac <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800dcf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dcf6:	2204      	movs	r2, #4
 800dcf8:	490b      	ldr	r1, [pc, #44]	@ (800dd28 <Action_Show+0xec>)
 800dcfa:	480a      	ldr	r0, [pc, #40]	@ (800dd24 <Action_Show+0xe8>)
 800dcfc:	f7fa fcd6 	bl	80086ac <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);
}
 800dd00:	bf00      	nop
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	24000ab4 	.word	0x24000ab4
 800dd08:	080130d8 	.word	0x080130d8
 800dd0c:	24000c80 	.word	0x24000c80
 800dd10:	24000aac 	.word	0x24000aac
 800dd14:	24000c88 	.word	0x24000c88
 800dd18:	24000ab0 	.word	0x24000ab0
 800dd1c:	24000c9c 	.word	0x24000c9c
 800dd20:	080130e0 	.word	0x080130e0
 800dd24:	24000574 	.word	0x24000574
 800dd28:	080130f0 	.word	0x080130f0
 800dd2c:	080130f8 	.word	0x080130f8
 800dd30:	08013108 	.word	0x08013108

0800dd34 <QR_Show>:
extern int QR_data[6];
void QR_Show(void) {
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++) {
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	607b      	str	r3, [r7, #4]
 800dd3e:	e00d      	b.n	800dd5c <QR_Show+0x28>
		sprintf(&Y_pid[i], "%d", QR_data[i]);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	4a14      	ldr	r2, [pc, #80]	@ (800dd94 <QR_Show+0x60>)
 800dd44:	1898      	adds	r0, r3, r2
 800dd46:	4a14      	ldr	r2, [pc, #80]	@ (800dd98 <QR_Show+0x64>)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd4e:	461a      	mov	r2, r3
 800dd50:	4912      	ldr	r1, [pc, #72]	@ (800dd9c <QR_Show+0x68>)
 800dd52:	f002 f837 	bl	800fdc4 <siprintf>
	for (int i = 0; i < 6; i++) {
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	3301      	adds	r3, #1
 800dd5a:	607b      	str	r3, [r7, #4]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b05      	cmp	r3, #5
 800dd60:	ddee      	ble.n	800dd40 <QR_Show+0xc>
	}
	HAL_UART_Transmit(&huart4, (uint8_t*) "QR.txt=\"", sizeof("QR.txt=\"") - 1,
 800dd62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd66:	2208      	movs	r2, #8
 800dd68:	490d      	ldr	r1, [pc, #52]	@ (800dda0 <QR_Show+0x6c>)
 800dd6a:	480e      	ldr	r0, [pc, #56]	@ (800dda4 <QR_Show+0x70>)
 800dd6c:	f7fa fc9e 	bl	80086ac <HAL_UART_Transmit>
			0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_pid, sizeof(Y_pid) - 1, 0xffff);
 800dd70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd74:	2213      	movs	r2, #19
 800dd76:	4907      	ldr	r1, [pc, #28]	@ (800dd94 <QR_Show+0x60>)
 800dd78:	480a      	ldr	r0, [pc, #40]	@ (800dda4 <QR_Show+0x70>)
 800dd7a:	f7fa fc97 	bl	80086ac <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800dd7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd82:	2204      	movs	r2, #4
 800dd84:	4908      	ldr	r1, [pc, #32]	@ (800dda8 <QR_Show+0x74>)
 800dd86:	4807      	ldr	r0, [pc, #28]	@ (800dda4 <QR_Show+0x70>)
 800dd88:	f7fa fc90 	bl	80086ac <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart4, (uint8_t*) QR_data, sizeof(QR_data) - 1, 0xffff);
	 HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
	 sizeof("\"\xff\xff\xff") - 1, 0xffff);
	 */

}
 800dd8c:	bf00      	nop
 800dd8e:	3708      	adds	r7, #8
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	24000cb0 	.word	0x24000cb0
 800dd98:	24000460 	.word	0x24000460
 800dd9c:	08013118 	.word	0x08013118
 800dda0:	0801311c 	.word	0x0801311c
 800dda4:	24000574 	.word	0x24000574
 800dda8:	080130f0 	.word	0x080130f0

0800ddac <Point_Show>:
// 抓取过程标志位，值为目标颜色
extern char Match_Flag;
// 抓取计算稳定性标志位，0为识别有故障,1为正常计算
extern char Check_flag;
// TODO：屏幕缺失字符"+",暂时判断为编码格式问题，需要通过串口助手确定编码格式
void Point_Show(void) {
 800ddac:	b580      	push	{r7, lr}
 800ddae:	af00      	add	r7, sp, #0
	if(Point_Flag == 0)
 800ddb0:	4b36      	ldr	r3, [pc, #216]	@ (800de8c <Point_Show+0xe0>)
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d066      	beq.n	800de86 <Point_Show+0xda>
	{
//		TX2点位数据还未接收，结束该函数
		return ;
	}
	Point_Flag = 0;
 800ddb8:	4b34      	ldr	r3, [pc, #208]	@ (800de8c <Point_Show+0xe0>)
 800ddba:	2200      	movs	r2, #0
 800ddbc:	701a      	strb	r2, [r3, #0]
//	在抓取过程中,进行颜色校验，如果颜色与抓取目标颜色不同，则放弃该帧数据，并传递放弃稳定性计算标志位
	if(Match_Flag != colour)
 800ddbe:	4b34      	ldr	r3, [pc, #208]	@ (800de90 <Point_Show+0xe4>)
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	4b33      	ldr	r3, [pc, #204]	@ (800de94 <Point_Show+0xe8>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d003      	beq.n	800ddd4 <Point_Show+0x28>
		Check_flag = 0;
 800ddcc:	4b32      	ldr	r3, [pc, #200]	@ (800de98 <Point_Show+0xec>)
 800ddce:	2200      	movs	r2, #0
 800ddd0:	701a      	strb	r2, [r3, #0]
 800ddd2:	e002      	b.n	800ddda <Point_Show+0x2e>
	else
		Check_flag = 1;
 800ddd4:	4b30      	ldr	r3, [pc, #192]	@ (800de98 <Point_Show+0xec>)
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	701a      	strb	r2, [r3, #0]
	sprintf(TX2_X_Point, "%.2f", x);
 800ddda:	4b30      	ldr	r3, [pc, #192]	@ (800de9c <Point_Show+0xf0>)
 800dddc:	edd3 7a00 	vldr	s15, [r3]
 800dde0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dde4:	ec53 2b17 	vmov	r2, r3, d7
 800dde8:	492d      	ldr	r1, [pc, #180]	@ (800dea0 <Point_Show+0xf4>)
 800ddea:	482e      	ldr	r0, [pc, #184]	@ (800dea4 <Point_Show+0xf8>)
 800ddec:	f001 ffea 	bl	800fdc4 <siprintf>
	sprintf(TX2_Y_Point, "%.2f", y);
 800ddf0:	4b2d      	ldr	r3, [pc, #180]	@ (800dea8 <Point_Show+0xfc>)
 800ddf2:	edd3 7a00 	vldr	s15, [r3]
 800ddf6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ddfa:	ec53 2b17 	vmov	r2, r3, d7
 800ddfe:	4928      	ldr	r1, [pc, #160]	@ (800dea0 <Point_Show+0xf4>)
 800de00:	482a      	ldr	r0, [pc, #168]	@ (800deac <Point_Show+0x100>)
 800de02:	f001 ffdf 	bl	800fdc4 <siprintf>
	sprintf(TX2_Color, "%d", colour);
 800de06:	4b23      	ldr	r3, [pc, #140]	@ (800de94 <Point_Show+0xe8>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	461a      	mov	r2, r3
 800de0c:	4928      	ldr	r1, [pc, #160]	@ (800deb0 <Point_Show+0x104>)
 800de0e:	4829      	ldr	r0, [pc, #164]	@ (800deb4 <Point_Show+0x108>)
 800de10:	f001 ffd8 	bl	800fdc4 <siprintf>
//	开始发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Point.txt=\"",sizeof("Point.txt=\"") - 1, 0xffff);
 800de14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de18:	220b      	movs	r2, #11
 800de1a:	4927      	ldr	r1, [pc, #156]	@ (800deb8 <Point_Show+0x10c>)
 800de1c:	4827      	ldr	r0, [pc, #156]	@ (800debc <Point_Show+0x110>)
 800de1e:	f7fa fc45 	bl	80086ac <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_X_Point, sizeof(TX2_X_Point) - 2, 0xffff);
 800de22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de26:	2206      	movs	r2, #6
 800de28:	491e      	ldr	r1, [pc, #120]	@ (800dea4 <Point_Show+0xf8>)
 800de2a:	4824      	ldr	r0, [pc, #144]	@ (800debc <Point_Show+0x110>)
 800de2c:	f7fa fc3e 	bl	80086ac <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "+", sizeof("+")-2, 0xffff);
 800de30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de34:	2200      	movs	r2, #0
 800de36:	4922      	ldr	r1, [pc, #136]	@ (800dec0 <Point_Show+0x114>)
 800de38:	4820      	ldr	r0, [pc, #128]	@ (800debc <Point_Show+0x110>)
 800de3a:	f7fa fc37 	bl	80086ac <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Y_Point, sizeof(TX2_Y_Point) - 1, 0xffff);
 800de3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de42:	2207      	movs	r2, #7
 800de44:	4919      	ldr	r1, [pc, #100]	@ (800deac <Point_Show+0x100>)
 800de46:	481d      	ldr	r0, [pc, #116]	@ (800debc <Point_Show+0x110>)
 800de48:	f7fa fc30 	bl	80086ac <HAL_UART_Transmit>
//	结束发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800de4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de50:	2204      	movs	r2, #4
 800de52:	491c      	ldr	r1, [pc, #112]	@ (800dec4 <Point_Show+0x118>)
 800de54:	4819      	ldr	r0, [pc, #100]	@ (800debc <Point_Show+0x110>)
 800de56:	f7fa fc29 	bl	80086ac <HAL_UART_Transmit>

//	开始发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Color.txt=\"",sizeof("Color.txt=\"") - 1, 0xffff);
 800de5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de5e:	220b      	movs	r2, #11
 800de60:	4919      	ldr	r1, [pc, #100]	@ (800dec8 <Point_Show+0x11c>)
 800de62:	4816      	ldr	r0, [pc, #88]	@ (800debc <Point_Show+0x110>)
 800de64:	f7fa fc22 	bl	80086ac <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Color, sizeof(TX2_Color)-1 , 0xffff);
 800de68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de6c:	2201      	movs	r2, #1
 800de6e:	4911      	ldr	r1, [pc, #68]	@ (800deb4 <Point_Show+0x108>)
 800de70:	4812      	ldr	r0, [pc, #72]	@ (800debc <Point_Show+0x110>)
 800de72:	f7fa fc1b 	bl	80086ac <HAL_UART_Transmit>

//	结束发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800de76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de7a:	2204      	movs	r2, #4
 800de7c:	4911      	ldr	r1, [pc, #68]	@ (800dec4 <Point_Show+0x118>)
 800de7e:	480f      	ldr	r0, [pc, #60]	@ (800debc <Point_Show+0x110>)
 800de80:	f7fa fc14 	bl	80086ac <HAL_UART_Transmit>
 800de84:	e000      	b.n	800de88 <Point_Show+0xdc>
		return ;
 800de86:	bf00      	nop
}
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	2400045c 	.word	0x2400045c
 800de90:	24000488 	.word	0x24000488
 800de94:	2400047c 	.word	0x2400047c
 800de98:	24000489 	.word	0x24000489
 800de9c:	24000454 	.word	0x24000454
 800dea0:	080130d8 	.word	0x080130d8
 800dea4:	24000cc4 	.word	0x24000cc4
 800dea8:	24000458 	.word	0x24000458
 800deac:	24000ccc 	.word	0x24000ccc
 800deb0:	08013118 	.word	0x08013118
 800deb4:	24000cd4 	.word	0x24000cd4
 800deb8:	08013128 	.word	0x08013128
 800debc:	24000574 	.word	0x24000574
 800dec0:	08013134 	.word	0x08013134
 800dec4:	080130f0 	.word	0x080130f0
 800dec8:	08013138 	.word	0x08013138

0800decc <Check_Flag>:

void Check_Flag(uint8_t rec) {
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	4603      	mov	r3, r0
 800ded4:	71fb      	strb	r3, [r7, #7]
	static uint8_t ch;
	static uint8_t count = 0;

	ch = rec;
 800ded6:	4a45      	ldr	r2, [pc, #276]	@ (800dfec <Check_Flag+0x120>)
 800ded8:	79fb      	ldrb	r3, [r7, #7]
 800deda:	7013      	strb	r3, [r2, #0]

	switch (count) {
 800dedc:	4b44      	ldr	r3, [pc, #272]	@ (800dff0 <Check_Flag+0x124>)
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	2b05      	cmp	r3, #5
 800dee2:	d876      	bhi.n	800dfd2 <Check_Flag+0x106>
 800dee4:	a201      	add	r2, pc, #4	@ (adr r2, 800deec <Check_Flag+0x20>)
 800dee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deea:	bf00      	nop
 800deec:	0800df05 	.word	0x0800df05
 800def0:	0800df3d 	.word	0x0800df3d
 800def4:	0800df63 	.word	0x0800df63
 800def8:	0800df81 	.word	0x0800df81
 800defc:	0800df9f 	.word	0x0800df9f
 800df00:	0800dfbd 	.word	0x0800dfbd
	case 0:
		if (ch == 'G')
 800df04:	4b39      	ldr	r3, [pc, #228]	@ (800dfec <Check_Flag+0x120>)
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	2b47      	cmp	r3, #71	@ 0x47
 800df0a:	d103      	bne.n	800df14 <Check_Flag+0x48>
			count = 1;
 800df0c:	4b38      	ldr	r3, [pc, #224]	@ (800dff0 <Check_Flag+0x124>)
 800df0e:	2201      	movs	r2, #1
 800df10:	701a      	strb	r2, [r3, #0]
			count = 2;
		else if (ch == 'M')
			count = 4;
		else
			count = 0;
		break;
 800df12:	e065      	b.n	800dfe0 <Check_Flag+0x114>
		else if (ch == 'R')
 800df14:	4b35      	ldr	r3, [pc, #212]	@ (800dfec <Check_Flag+0x120>)
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	2b52      	cmp	r3, #82	@ 0x52
 800df1a:	d103      	bne.n	800df24 <Check_Flag+0x58>
			count = 2;
 800df1c:	4b34      	ldr	r3, [pc, #208]	@ (800dff0 <Check_Flag+0x124>)
 800df1e:	2202      	movs	r2, #2
 800df20:	701a      	strb	r2, [r3, #0]
		break;
 800df22:	e05d      	b.n	800dfe0 <Check_Flag+0x114>
		else if (ch == 'M')
 800df24:	4b31      	ldr	r3, [pc, #196]	@ (800dfec <Check_Flag+0x120>)
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	2b4d      	cmp	r3, #77	@ 0x4d
 800df2a:	d103      	bne.n	800df34 <Check_Flag+0x68>
			count = 4;
 800df2c:	4b30      	ldr	r3, [pc, #192]	@ (800dff0 <Check_Flag+0x124>)
 800df2e:	2204      	movs	r2, #4
 800df30:	701a      	strb	r2, [r3, #0]
		break;
 800df32:	e055      	b.n	800dfe0 <Check_Flag+0x114>
			count = 0;
 800df34:	4b2e      	ldr	r3, [pc, #184]	@ (800dff0 <Check_Flag+0x124>)
 800df36:	2200      	movs	r2, #0
 800df38:	701a      	strb	r2, [r3, #0]
		break;
 800df3a:	e051      	b.n	800dfe0 <Check_Flag+0x114>
	case 1:
		if (ch == 'o') {
 800df3c:	4b2b      	ldr	r3, [pc, #172]	@ (800dfec <Check_Flag+0x120>)
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	2b6f      	cmp	r3, #111	@ 0x6f
 800df42:	d106      	bne.n	800df52 <Check_Flag+0x86>
			System_Flag = 1;
 800df44:	4b2b      	ldr	r3, [pc, #172]	@ (800dff4 <Check_Flag+0x128>)
 800df46:	2201      	movs	r2, #1
 800df48:	701a      	strb	r2, [r3, #0]
			count = 0;
 800df4a:	4b29      	ldr	r3, [pc, #164]	@ (800dff0 <Check_Flag+0x124>)
 800df4c:	2200      	movs	r2, #0
 800df4e:	701a      	strb	r2, [r3, #0]
		} else if (ch == 'G')
			;
		else
			count = 0;
		break;
 800df50:	e043      	b.n	800dfda <Check_Flag+0x10e>
		} else if (ch == 'G')
 800df52:	4b26      	ldr	r3, [pc, #152]	@ (800dfec <Check_Flag+0x120>)
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	2b47      	cmp	r3, #71	@ 0x47
 800df58:	d03f      	beq.n	800dfda <Check_Flag+0x10e>
			count = 0;
 800df5a:	4b25      	ldr	r3, [pc, #148]	@ (800dff0 <Check_Flag+0x124>)
 800df5c:	2200      	movs	r2, #0
 800df5e:	701a      	strb	r2, [r3, #0]
		break;
 800df60:	e03b      	b.n	800dfda <Check_Flag+0x10e>
	case 2:
//		此处用于判断是否进入准备模式，调整车身姿态
		if (ch == 'e')
 800df62:	4b22      	ldr	r3, [pc, #136]	@ (800dfec <Check_Flag+0x120>)
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	2b65      	cmp	r3, #101	@ 0x65
 800df68:	d106      	bne.n	800df78 <Check_Flag+0xac>
			count++;
 800df6a:	4b21      	ldr	r3, [pc, #132]	@ (800dff0 <Check_Flag+0x124>)
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	3301      	adds	r3, #1
 800df70:	b2da      	uxtb	r2, r3
 800df72:	4b1f      	ldr	r3, [pc, #124]	@ (800dff0 <Check_Flag+0x124>)
 800df74:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800df76:	e033      	b.n	800dfe0 <Check_Flag+0x114>
			count = 0;
 800df78:	4b1d      	ldr	r3, [pc, #116]	@ (800dff0 <Check_Flag+0x124>)
 800df7a:	2200      	movs	r2, #0
 800df7c:	701a      	strb	r2, [r3, #0]
		break;
 800df7e:	e02f      	b.n	800dfe0 <Check_Flag+0x114>
	case 3:
		if (ch == 'a') {
 800df80:	4b1a      	ldr	r3, [pc, #104]	@ (800dfec <Check_Flag+0x120>)
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	2b61      	cmp	r3, #97	@ 0x61
 800df86:	d106      	bne.n	800df96 <Check_Flag+0xca>
			Ready_Flag = 1;
 800df88:	4b1b      	ldr	r3, [pc, #108]	@ (800dff8 <Check_Flag+0x12c>)
 800df8a:	2201      	movs	r2, #1
 800df8c:	701a      	strb	r2, [r3, #0]
			count = 0;
 800df8e:	4b18      	ldr	r3, [pc, #96]	@ (800dff0 <Check_Flag+0x124>)
 800df90:	2200      	movs	r2, #0
 800df92:	701a      	strb	r2, [r3, #0]
		} else
			count = 0;
		break;
 800df94:	e024      	b.n	800dfe0 <Check_Flag+0x114>
			count = 0;
 800df96:	4b16      	ldr	r3, [pc, #88]	@ (800dff0 <Check_Flag+0x124>)
 800df98:	2200      	movs	r2, #0
 800df9a:	701a      	strb	r2, [r3, #0]
		break;
 800df9c:	e020      	b.n	800dfe0 <Check_Flag+0x114>
	case 4:
		if (ch == 'a')
 800df9e:	4b13      	ldr	r3, [pc, #76]	@ (800dfec <Check_Flag+0x120>)
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	2b61      	cmp	r3, #97	@ 0x61
 800dfa4:	d106      	bne.n	800dfb4 <Check_Flag+0xe8>
			count++;
 800dfa6:	4b12      	ldr	r3, [pc, #72]	@ (800dff0 <Check_Flag+0x124>)
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	3301      	adds	r3, #1
 800dfac:	b2da      	uxtb	r2, r3
 800dfae:	4b10      	ldr	r3, [pc, #64]	@ (800dff0 <Check_Flag+0x124>)
 800dfb0:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800dfb2:	e015      	b.n	800dfe0 <Check_Flag+0x114>
			count = 0;
 800dfb4:	4b0e      	ldr	r3, [pc, #56]	@ (800dff0 <Check_Flag+0x124>)
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	701a      	strb	r2, [r3, #0]
		break;
 800dfba:	e011      	b.n	800dfe0 <Check_Flag+0x114>
	case 5:
		if (ch == 't') {
 800dfbc:	4b0b      	ldr	r3, [pc, #44]	@ (800dfec <Check_Flag+0x120>)
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	2b74      	cmp	r3, #116	@ 0x74
 800dfc2:	d10c      	bne.n	800dfde <Check_Flag+0x112>
			System_Flag = 1;
 800dfc4:	4b0b      	ldr	r3, [pc, #44]	@ (800dff4 <Check_Flag+0x128>)
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	701a      	strb	r2, [r3, #0]
			count = 0;
 800dfca:	4b09      	ldr	r3, [pc, #36]	@ (800dff0 <Check_Flag+0x124>)
 800dfcc:	2200      	movs	r2, #0
 800dfce:	701a      	strb	r2, [r3, #0]
		}
		break;
 800dfd0:	e005      	b.n	800dfde <Check_Flag+0x112>
	default:
		count = 0;
 800dfd2:	4b07      	ldr	r3, [pc, #28]	@ (800dff0 <Check_Flag+0x124>)
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	701a      	strb	r2, [r3, #0]
		break;
 800dfd8:	e002      	b.n	800dfe0 <Check_Flag+0x114>
		break;
 800dfda:	bf00      	nop
 800dfdc:	e000      	b.n	800dfe0 <Check_Flag+0x114>
		break;
 800dfde:	bf00      	nop
	}

}
 800dfe0:	bf00      	nop
 800dfe2:	370c      	adds	r7, #12
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr
 800dfec:	24000cd8 	.word	0x24000cd8
 800dff0:	24000cd9 	.word	0x24000cd9
 800dff4:	24000cd6 	.word	0x24000cd6
 800dff8:	24000cd7 	.word	0x24000cd7

0800dffc <calculate_mean>:

#include "Stability.h"
#include "Stability_sub.h"

// 计算平均值
double calculate_mean(double data[], int n) {
 800dffc:	b480      	push	{r7}
 800dffe:	b087      	sub	sp, #28
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
    double sum = 0.0;
 800e006:	f04f 0200 	mov.w	r2, #0
 800e00a:	f04f 0300 	mov.w	r3, #0
 800e00e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < n; i++) {
 800e012:	2300      	movs	r3, #0
 800e014:	60fb      	str	r3, [r7, #12]
 800e016:	e00e      	b.n	800e036 <calculate_mean+0x3a>
        sum += data[i];
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	00db      	lsls	r3, r3, #3
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	4413      	add	r3, r2
 800e020:	ed93 7b00 	vldr	d7, [r3]
 800e024:	ed97 6b04 	vldr	d6, [r7, #16]
 800e028:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e02c:	ed87 7b04 	vstr	d7, [r7, #16]
    for (int i = 0; i < n; i++) {
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	3301      	adds	r3, #1
 800e034:	60fb      	str	r3, [r7, #12]
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	dbec      	blt.n	800e018 <calculate_mean+0x1c>
    }
    return sum / n;
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	ee07 3a90 	vmov	s15, r3
 800e044:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e048:	ed97 6b04 	vldr	d6, [r7, #16]
 800e04c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800e050:	eeb0 7b45 	vmov.f64	d7, d5
}
 800e054:	eeb0 0b47 	vmov.f64	d0, d7
 800e058:	371c      	adds	r7, #28
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <calculate_variance>:

 // 计算方差
double calculate_variance(double data[], int n) {
 800e062:	b580      	push	{r7, lr}
 800e064:	b088      	sub	sp, #32
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
 800e06a:	6039      	str	r1, [r7, #0]
     double mean = calculate_mean(data, n);
 800e06c:	6839      	ldr	r1, [r7, #0]
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f7ff ffc4 	bl	800dffc <calculate_mean>
 800e074:	ed87 0b02 	vstr	d0, [r7, #8]
     double sum_of_squares = 0.0;
 800e078:	f04f 0200 	mov.w	r2, #0
 800e07c:	f04f 0300 	mov.w	r3, #0
 800e080:	e9c7 2306 	strd	r2, r3, [r7, #24]
     for (int i = 0; i < n; i++) {
 800e084:	2300      	movs	r3, #0
 800e086:	617b      	str	r3, [r7, #20]
 800e088:	e01e      	b.n	800e0c8 <calculate_variance+0x66>
         sum_of_squares += (data[i] - mean) * (data[i] - mean);
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	00db      	lsls	r3, r3, #3
 800e08e:	687a      	ldr	r2, [r7, #4]
 800e090:	4413      	add	r3, r2
 800e092:	ed93 6b00 	vldr	d6, [r3]
 800e096:	ed97 7b02 	vldr	d7, [r7, #8]
 800e09a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	00db      	lsls	r3, r3, #3
 800e0a2:	687a      	ldr	r2, [r7, #4]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	ed93 5b00 	vldr	d5, [r3]
 800e0aa:	ed97 7b02 	vldr	d7, [r7, #8]
 800e0ae:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e0b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e0b6:	ed97 6b06 	vldr	d6, [r7, #24]
 800e0ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e0be:	ed87 7b06 	vstr	d7, [r7, #24]
     for (int i = 0; i < n; i++) {
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	617b      	str	r3, [r7, #20]
 800e0c8:	697a      	ldr	r2, [r7, #20]
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	dbdc      	blt.n	800e08a <calculate_variance+0x28>
     }
     return sum_of_squares / n;
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	ee07 3a90 	vmov	s15, r3
 800e0d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e0da:	ed97 6b06 	vldr	d6, [r7, #24]
 800e0de:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800e0e2:	eeb0 7b45 	vmov.f64	d7, d5
}
 800e0e6:	eeb0 0b47 	vmov.f64	d0, d7
 800e0ea:	3720      	adds	r7, #32
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <Check_Stability>:

//  使用方差判断稳定性
uint8_t Check_Stability(float check_x,float check_y,uint8_t Check_flag)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b08a      	sub	sp, #40	@ 0x28
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	ed87 0a03 	vstr	s0, [r7, #12]
 800e0fa:	edc7 0a02 	vstr	s1, [r7, #8]
 800e0fe:	4603      	mov	r3, r0
 800e100:	71fb      	strb	r3, [r7, #7]
	static float data_x[10];
	static float data_y[10];
	static uint8_t frequency = 0;
//	不满足计算稳定性的条件，清空缓冲区并结束
	if(Check_flag != 1)
 800e102:	79fb      	ldrb	r3, [r7, #7]
 800e104:	2b01      	cmp	r3, #1
 800e106:	d018      	beq.n	800e13a <Check_Stability+0x4a>
	{
		for(int i = 0;i<10;i++)
 800e108:	2300      	movs	r3, #0
 800e10a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e10c:	e010      	b.n	800e130 <Check_Stability+0x40>
		{
			data_x[i] = 0;
 800e10e:	4a27      	ldr	r2, [pc, #156]	@ (800e1ac <Check_Stability+0xbc>)
 800e110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	4413      	add	r3, r2
 800e116:	f04f 0200 	mov.w	r2, #0
 800e11a:	601a      	str	r2, [r3, #0]
			data_y[i] = 0;
 800e11c:	4a24      	ldr	r2, [pc, #144]	@ (800e1b0 <Check_Stability+0xc0>)
 800e11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	4413      	add	r3, r2
 800e124:	f04f 0200 	mov.w	r2, #0
 800e128:	601a      	str	r2, [r3, #0]
		for(int i = 0;i<10;i++)
 800e12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e12c:	3301      	adds	r3, #1
 800e12e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e132:	2b09      	cmp	r3, #9
 800e134:	ddeb      	ble.n	800e10e <Check_Stability+0x1e>
		}
		return 1;
 800e136:	2301      	movs	r3, #1
 800e138:	e034      	b.n	800e1a4 <Check_Stability+0xb4>
	}
	if(frequency <= 9)
 800e13a:	4b1e      	ldr	r3, [pc, #120]	@ (800e1b4 <Check_Stability+0xc4>)
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	2b09      	cmp	r3, #9
 800e140:	d80f      	bhi.n	800e162 <Check_Stability+0x72>
	{
		data_x[frequency] = check_x;
 800e142:	4b1c      	ldr	r3, [pc, #112]	@ (800e1b4 <Check_Stability+0xc4>)
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	4a19      	ldr	r2, [pc, #100]	@ (800e1ac <Check_Stability+0xbc>)
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	4413      	add	r3, r2
 800e14c:	68fa      	ldr	r2, [r7, #12]
 800e14e:	601a      	str	r2, [r3, #0]
		data_y[frequency] = check_y;
 800e150:	4b18      	ldr	r3, [pc, #96]	@ (800e1b4 <Check_Stability+0xc4>)
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	4a16      	ldr	r2, [pc, #88]	@ (800e1b0 <Check_Stability+0xc0>)
 800e156:	009b      	lsls	r3, r3, #2
 800e158:	4413      	add	r3, r2
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	601a      	str	r2, [r3, #0]
//		0说明数据量过少
		return 0;
 800e15e:	2300      	movs	r3, #0
 800e160:	e020      	b.n	800e1a4 <Check_Stability+0xb4>
	}
//	显式类型转换，调用函数获得方差
	double variance_x = calculate_variance((double*)data_x, 10);
 800e162:	210a      	movs	r1, #10
 800e164:	4811      	ldr	r0, [pc, #68]	@ (800e1ac <Check_Stability+0xbc>)
 800e166:	f7ff ff7c 	bl	800e062 <calculate_variance>
 800e16a:	ed87 0b06 	vstr	d0, [r7, #24]
	double variance_y = calculate_variance((double*)data_y, 10);
 800e16e:	210a      	movs	r1, #10
 800e170:	480f      	ldr	r0, [pc, #60]	@ (800e1b0 <Check_Stability+0xc0>)
 800e172:	f7ff ff76 	bl	800e062 <calculate_variance>
 800e176:	ed87 0b04 	vstr	d0, [r7, #16]
	if((variance_x > 2) || (variance_y >2))
 800e17a:	ed97 7b06 	vldr	d7, [r7, #24]
 800e17e:	eeb0 6b00 	vmov.f64	d6, #0	@ 0x40000000  2.0
 800e182:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e18a:	dc08      	bgt.n	800e19e <Check_Stability+0xae>
 800e18c:	ed97 7b04 	vldr	d7, [r7, #16]
 800e190:	eeb0 6b00 	vmov.f64	d6, #0	@ 0x40000000  2.0
 800e194:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e19c:	dd01      	ble.n	800e1a2 <Check_Stability+0xb2>
	{
//		1说明还未稳定
		return 1;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e000      	b.n	800e1a4 <Check_Stability+0xb4>
	}
	else
		return 2;
 800e1a2:	2302      	movs	r3, #2
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3728      	adds	r7, #40	@ 0x28
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	24000cdc 	.word	0x24000cdc
 800e1b0:	24000d04 	.word	0x24000d04
 800e1b4:	24000d2c 	.word	0x24000d2c

0800e1b8 <Check_Status>:
	首先，在步进电机上电以后，需要进行调零，找到一个零位用来确定后面一切操作的参考点，因此5号步进电机设置为上电回零
	但是在比赛过程中，要求车身及其垂直投影部分在未发车前全部处于发车区域，这就要求爪子在发车前是在车体内侧的，同时爪子不能处于太高处，否则违规
	因此在Check_Status()函数用于在回零操作已完成后进行调整，以满足发车条件，
*/
uint8_t Check_Status(void)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	af00      	add	r7, sp, #0
//  首先控制步进电机,回到零点
	Drop_Location_jiang(200, 120, 0);
 800e1bc:	2200      	movs	r2, #0
 800e1be:	2178      	movs	r1, #120	@ 0x78
 800e1c0:	20c8      	movs	r0, #200	@ 0xc8
 800e1c2:	f7fe fbd1 	bl	800c968 <Drop_Location_jiang>
	Move_Arm(1, 50, 300);
 800e1c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800e1ca:	2132      	movs	r1, #50	@ 0x32
 800e1cc:	2001      	movs	r0, #1
 800e1ce:	f7fd f8c1 	bl	800b354 <Move_Arm>
//  6号舵机900
	Move_Arm(6, 900, 300);
 800e1d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800e1d6:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800e1da:	2006      	movs	r0, #6
 800e1dc:	f7fd f8ba 	bl	800b354 <Move_Arm>
//  旋转物料结构的支撑舵机
	FT_Servo_Zero(0);
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	f000 f80c 	bl	800e1fe <FT_Servo_Zero>
//  旋转爪子结构的支撑舵机
	FT_Servo_Zero(1);
 800e1e6:	2001      	movs	r0, #1
 800e1e8:	f000 f809 	bl	800e1fe <FT_Servo_Zero>
//  步进电机下降,将位置调整为最最低点
	Drop_Location_jiang(200, 120, 9000);
 800e1ec:	f242 3228 	movw	r2, #9000	@ 0x2328
 800e1f0:	2178      	movs	r1, #120	@ 0x78
 800e1f2:	20c8      	movs	r0, #200	@ 0xc8
 800e1f4:	f7fe fbb8 	bl	800c968 <Drop_Location_jiang>
	return 1;
 800e1f8:	2301      	movs	r3, #1
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	bd80      	pop	{r7, pc}

0800e1fe <FT_Servo_Zero>:

// 将目标舵机回零
uint8_t FT_Servo_Zero(uint8_t Number)
{
 800e1fe:	b580      	push	{r7, lr}
 800e200:	b082      	sub	sp, #8
 800e202:	af00      	add	r7, sp, #0
 800e204:	4603      	mov	r3, r0
 800e206:	71fb      	strb	r3, [r7, #7]
	if(Number == 0)
 800e208:	79fb      	ldrb	r3, [r7, #7]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d106      	bne.n	800e21c <FT_Servo_Zero+0x1e>
		WritePosEx(0, 0, 0, 0);
 800e20e:	2300      	movs	r3, #0
 800e210:	2200      	movs	r2, #0
 800e212:	2100      	movs	r1, #0
 800e214:	2000      	movs	r0, #0
 800e216:	f7ff fc9d 	bl	800db54 <WritePosEx>
 800e21a:	e009      	b.n	800e230 <FT_Servo_Zero+0x32>
	else if (Number == 1)
 800e21c:	79fb      	ldrb	r3, [r7, #7]
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d106      	bne.n	800e230 <FT_Servo_Zero+0x32>
		WritePosEx(1, 1020, 0, 0);
 800e222:	2300      	movs	r3, #0
 800e224:	2200      	movs	r2, #0
 800e226:	f44f 717f 	mov.w	r1, #1020	@ 0x3fc
 800e22a:	2001      	movs	r0, #1
 800e22c:	f7ff fc92 	bl	800db54 <WritePosEx>
	return 1;
 800e230:	2301      	movs	r3, #1
}
 800e232:	4618      	mov	r0, r3
 800e234:	3708      	adds	r7, #8
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}

0800e23a <FT_Servo_Orth>:

// 将爪子处飞特舵机调整为向外，正交于车身
uint8_t FT_Servo_Orth(void)
{
 800e23a:	b580      	push	{r7, lr}
 800e23c:	af00      	add	r7, sp, #0
	WritePosEx(1, 3087, 0, 0);
 800e23e:	2300      	movs	r3, #0
 800e240:	2200      	movs	r2, #0
 800e242:	f640 410f 	movw	r1, #3087	@ 0xc0f
 800e246:	2001      	movs	r0, #1
 800e248:	f7ff fc84 	bl	800db54 <WritePosEx>
	return 1;
 800e24c:	2301      	movs	r3, #1
}
 800e24e:	4618      	mov	r0, r3
 800e250:	bd80      	pop	{r7, pc}

0800e252 <FT_Servo_Put>:

// 物料摆放
uint8_t FT_Servo_Put(uint8_t Servo_ID, uint8_t Pub_Number)
{
 800e252:	b580      	push	{r7, lr}
 800e254:	b082      	sub	sp, #8
 800e256:	af00      	add	r7, sp, #0
 800e258:	4603      	mov	r3, r0
 800e25a:	460a      	mov	r2, r1
 800e25c:	71fb      	strb	r3, [r7, #7]
 800e25e:	4613      	mov	r3, r2
 800e260:	71bb      	strb	r3, [r7, #6]
	if(Servo_ID == 0)
 800e262:	79fb      	ldrb	r3, [r7, #7]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d121      	bne.n	800e2ac <FT_Servo_Put+0x5a>
	{
		switch (Pub_Number)
 800e268:	79bb      	ldrb	r3, [r7, #6]
 800e26a:	2b03      	cmp	r3, #3
 800e26c:	d016      	beq.n	800e29c <FT_Servo_Put+0x4a>
 800e26e:	2b03      	cmp	r3, #3
 800e270:	dc26      	bgt.n	800e2c0 <FT_Servo_Put+0x6e>
 800e272:	2b01      	cmp	r3, #1
 800e274:	d002      	beq.n	800e27c <FT_Servo_Put+0x2a>
 800e276:	2b02      	cmp	r3, #2
 800e278:	d008      	beq.n	800e28c <FT_Servo_Put+0x3a>
 800e27a:	e021      	b.n	800e2c0 <FT_Servo_Put+0x6e>
		{
			case 1:WritePosEx(0, 1180, 0, 0);break;
 800e27c:	2300      	movs	r3, #0
 800e27e:	2200      	movs	r2, #0
 800e280:	f240 419c 	movw	r1, #1180	@ 0x49c
 800e284:	2000      	movs	r0, #0
 800e286:	f7ff fc65 	bl	800db54 <WritePosEx>
 800e28a:	e019      	b.n	800e2c0 <FT_Servo_Put+0x6e>
			case 2:WritePosEx(0, 2245, 0, 0);break;
 800e28c:	2300      	movs	r3, #0
 800e28e:	2200      	movs	r2, #0
 800e290:	f640 01c5 	movw	r1, #2245	@ 0x8c5
 800e294:	2000      	movs	r0, #0
 800e296:	f7ff fc5d 	bl	800db54 <WritePosEx>
 800e29a:	e011      	b.n	800e2c0 <FT_Servo_Put+0x6e>
			case 3:WritePosEx(0, 3292, 0, 0);break;
 800e29c:	2300      	movs	r3, #0
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f640 41dc 	movw	r1, #3292	@ 0xcdc
 800e2a4:	2000      	movs	r0, #0
 800e2a6:	f7ff fc55 	bl	800db54 <WritePosEx>
 800e2aa:	e009      	b.n	800e2c0 <FT_Servo_Put+0x6e>
		}
	}
	else if (Servo_ID == 1)
 800e2ac:	79fb      	ldrb	r3, [r7, #7]
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d106      	bne.n	800e2c0 <FT_Servo_Put+0x6e>
	{
		WritePosEx(1, 1716, 0, 0);
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	f240 61b4 	movw	r1, #1716	@ 0x6b4
 800e2ba:	2001      	movs	r0, #1
 800e2bc:	f7ff fc4a 	bl	800db54 <WritePosEx>
	}
	while(ReadMove(Servo_ID))
 800e2c0:	bf00      	nop
 800e2c2:	79fb      	ldrb	r3, [r7, #7]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7ff fc8f 	bl	800dbe8 <ReadMove>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d1f8      	bne.n	800e2c2 <FT_Servo_Put+0x70>
	{
		;
	}
	return 1;
 800e2d0:	2301      	movs	r3, #1
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3708      	adds	r7, #8
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
	...

0800e2dc <malloc>:
 800e2dc:	4b02      	ldr	r3, [pc, #8]	@ (800e2e8 <malloc+0xc>)
 800e2de:	4601      	mov	r1, r0
 800e2e0:	6818      	ldr	r0, [r3, #0]
 800e2e2:	f000 b825 	b.w	800e330 <_malloc_r>
 800e2e6:	bf00      	nop
 800e2e8:	240001c4 	.word	0x240001c4

0800e2ec <sbrk_aligned>:
 800e2ec:	b570      	push	{r4, r5, r6, lr}
 800e2ee:	4e0f      	ldr	r6, [pc, #60]	@ (800e32c <sbrk_aligned+0x40>)
 800e2f0:	460c      	mov	r4, r1
 800e2f2:	6831      	ldr	r1, [r6, #0]
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	b911      	cbnz	r1, 800e2fe <sbrk_aligned+0x12>
 800e2f8:	f001 fe52 	bl	800ffa0 <_sbrk_r>
 800e2fc:	6030      	str	r0, [r6, #0]
 800e2fe:	4621      	mov	r1, r4
 800e300:	4628      	mov	r0, r5
 800e302:	f001 fe4d 	bl	800ffa0 <_sbrk_r>
 800e306:	1c43      	adds	r3, r0, #1
 800e308:	d103      	bne.n	800e312 <sbrk_aligned+0x26>
 800e30a:	f04f 34ff 	mov.w	r4, #4294967295
 800e30e:	4620      	mov	r0, r4
 800e310:	bd70      	pop	{r4, r5, r6, pc}
 800e312:	1cc4      	adds	r4, r0, #3
 800e314:	f024 0403 	bic.w	r4, r4, #3
 800e318:	42a0      	cmp	r0, r4
 800e31a:	d0f8      	beq.n	800e30e <sbrk_aligned+0x22>
 800e31c:	1a21      	subs	r1, r4, r0
 800e31e:	4628      	mov	r0, r5
 800e320:	f001 fe3e 	bl	800ffa0 <_sbrk_r>
 800e324:	3001      	adds	r0, #1
 800e326:	d1f2      	bne.n	800e30e <sbrk_aligned+0x22>
 800e328:	e7ef      	b.n	800e30a <sbrk_aligned+0x1e>
 800e32a:	bf00      	nop
 800e32c:	24000d30 	.word	0x24000d30

0800e330 <_malloc_r>:
 800e330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e334:	1ccd      	adds	r5, r1, #3
 800e336:	f025 0503 	bic.w	r5, r5, #3
 800e33a:	3508      	adds	r5, #8
 800e33c:	2d0c      	cmp	r5, #12
 800e33e:	bf38      	it	cc
 800e340:	250c      	movcc	r5, #12
 800e342:	2d00      	cmp	r5, #0
 800e344:	4606      	mov	r6, r0
 800e346:	db01      	blt.n	800e34c <_malloc_r+0x1c>
 800e348:	42a9      	cmp	r1, r5
 800e34a:	d904      	bls.n	800e356 <_malloc_r+0x26>
 800e34c:	230c      	movs	r3, #12
 800e34e:	6033      	str	r3, [r6, #0]
 800e350:	2000      	movs	r0, #0
 800e352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e356:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e42c <_malloc_r+0xfc>
 800e35a:	f000 f869 	bl	800e430 <__malloc_lock>
 800e35e:	f8d8 3000 	ldr.w	r3, [r8]
 800e362:	461c      	mov	r4, r3
 800e364:	bb44      	cbnz	r4, 800e3b8 <_malloc_r+0x88>
 800e366:	4629      	mov	r1, r5
 800e368:	4630      	mov	r0, r6
 800e36a:	f7ff ffbf 	bl	800e2ec <sbrk_aligned>
 800e36e:	1c43      	adds	r3, r0, #1
 800e370:	4604      	mov	r4, r0
 800e372:	d158      	bne.n	800e426 <_malloc_r+0xf6>
 800e374:	f8d8 4000 	ldr.w	r4, [r8]
 800e378:	4627      	mov	r7, r4
 800e37a:	2f00      	cmp	r7, #0
 800e37c:	d143      	bne.n	800e406 <_malloc_r+0xd6>
 800e37e:	2c00      	cmp	r4, #0
 800e380:	d04b      	beq.n	800e41a <_malloc_r+0xea>
 800e382:	6823      	ldr	r3, [r4, #0]
 800e384:	4639      	mov	r1, r7
 800e386:	4630      	mov	r0, r6
 800e388:	eb04 0903 	add.w	r9, r4, r3
 800e38c:	f001 fe08 	bl	800ffa0 <_sbrk_r>
 800e390:	4581      	cmp	r9, r0
 800e392:	d142      	bne.n	800e41a <_malloc_r+0xea>
 800e394:	6821      	ldr	r1, [r4, #0]
 800e396:	1a6d      	subs	r5, r5, r1
 800e398:	4629      	mov	r1, r5
 800e39a:	4630      	mov	r0, r6
 800e39c:	f7ff ffa6 	bl	800e2ec <sbrk_aligned>
 800e3a0:	3001      	adds	r0, #1
 800e3a2:	d03a      	beq.n	800e41a <_malloc_r+0xea>
 800e3a4:	6823      	ldr	r3, [r4, #0]
 800e3a6:	442b      	add	r3, r5
 800e3a8:	6023      	str	r3, [r4, #0]
 800e3aa:	f8d8 3000 	ldr.w	r3, [r8]
 800e3ae:	685a      	ldr	r2, [r3, #4]
 800e3b0:	bb62      	cbnz	r2, 800e40c <_malloc_r+0xdc>
 800e3b2:	f8c8 7000 	str.w	r7, [r8]
 800e3b6:	e00f      	b.n	800e3d8 <_malloc_r+0xa8>
 800e3b8:	6822      	ldr	r2, [r4, #0]
 800e3ba:	1b52      	subs	r2, r2, r5
 800e3bc:	d420      	bmi.n	800e400 <_malloc_r+0xd0>
 800e3be:	2a0b      	cmp	r2, #11
 800e3c0:	d917      	bls.n	800e3f2 <_malloc_r+0xc2>
 800e3c2:	1961      	adds	r1, r4, r5
 800e3c4:	42a3      	cmp	r3, r4
 800e3c6:	6025      	str	r5, [r4, #0]
 800e3c8:	bf18      	it	ne
 800e3ca:	6059      	strne	r1, [r3, #4]
 800e3cc:	6863      	ldr	r3, [r4, #4]
 800e3ce:	bf08      	it	eq
 800e3d0:	f8c8 1000 	streq.w	r1, [r8]
 800e3d4:	5162      	str	r2, [r4, r5]
 800e3d6:	604b      	str	r3, [r1, #4]
 800e3d8:	4630      	mov	r0, r6
 800e3da:	f000 f82f 	bl	800e43c <__malloc_unlock>
 800e3de:	f104 000b 	add.w	r0, r4, #11
 800e3e2:	1d23      	adds	r3, r4, #4
 800e3e4:	f020 0007 	bic.w	r0, r0, #7
 800e3e8:	1ac2      	subs	r2, r0, r3
 800e3ea:	bf1c      	itt	ne
 800e3ec:	1a1b      	subne	r3, r3, r0
 800e3ee:	50a3      	strne	r3, [r4, r2]
 800e3f0:	e7af      	b.n	800e352 <_malloc_r+0x22>
 800e3f2:	6862      	ldr	r2, [r4, #4]
 800e3f4:	42a3      	cmp	r3, r4
 800e3f6:	bf0c      	ite	eq
 800e3f8:	f8c8 2000 	streq.w	r2, [r8]
 800e3fc:	605a      	strne	r2, [r3, #4]
 800e3fe:	e7eb      	b.n	800e3d8 <_malloc_r+0xa8>
 800e400:	4623      	mov	r3, r4
 800e402:	6864      	ldr	r4, [r4, #4]
 800e404:	e7ae      	b.n	800e364 <_malloc_r+0x34>
 800e406:	463c      	mov	r4, r7
 800e408:	687f      	ldr	r7, [r7, #4]
 800e40a:	e7b6      	b.n	800e37a <_malloc_r+0x4a>
 800e40c:	461a      	mov	r2, r3
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	42a3      	cmp	r3, r4
 800e412:	d1fb      	bne.n	800e40c <_malloc_r+0xdc>
 800e414:	2300      	movs	r3, #0
 800e416:	6053      	str	r3, [r2, #4]
 800e418:	e7de      	b.n	800e3d8 <_malloc_r+0xa8>
 800e41a:	230c      	movs	r3, #12
 800e41c:	6033      	str	r3, [r6, #0]
 800e41e:	4630      	mov	r0, r6
 800e420:	f000 f80c 	bl	800e43c <__malloc_unlock>
 800e424:	e794      	b.n	800e350 <_malloc_r+0x20>
 800e426:	6005      	str	r5, [r0, #0]
 800e428:	e7d6      	b.n	800e3d8 <_malloc_r+0xa8>
 800e42a:	bf00      	nop
 800e42c:	24000d34 	.word	0x24000d34

0800e430 <__malloc_lock>:
 800e430:	4801      	ldr	r0, [pc, #4]	@ (800e438 <__malloc_lock+0x8>)
 800e432:	f001 be02 	b.w	801003a <__retarget_lock_acquire_recursive>
 800e436:	bf00      	nop
 800e438:	24000e78 	.word	0x24000e78

0800e43c <__malloc_unlock>:
 800e43c:	4801      	ldr	r0, [pc, #4]	@ (800e444 <__malloc_unlock+0x8>)
 800e43e:	f001 bdfd 	b.w	801003c <__retarget_lock_release_recursive>
 800e442:	bf00      	nop
 800e444:	24000e78 	.word	0x24000e78

0800e448 <sulp>:
 800e448:	b570      	push	{r4, r5, r6, lr}
 800e44a:	4604      	mov	r4, r0
 800e44c:	460d      	mov	r5, r1
 800e44e:	4616      	mov	r6, r2
 800e450:	ec45 4b10 	vmov	d0, r4, r5
 800e454:	f003 fafc 	bl	8011a50 <__ulp>
 800e458:	b17e      	cbz	r6, 800e47a <sulp+0x32>
 800e45a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e45e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e462:	2b00      	cmp	r3, #0
 800e464:	dd09      	ble.n	800e47a <sulp+0x32>
 800e466:	051b      	lsls	r3, r3, #20
 800e468:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e46c:	2000      	movs	r0, #0
 800e46e:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800e472:	ec41 0b17 	vmov	d7, r0, r1
 800e476:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e47a:	bd70      	pop	{r4, r5, r6, pc}
 800e47c:	0000      	movs	r0, r0
	...

0800e480 <_strtod_l>:
 800e480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e484:	ed2d 8b0a 	vpush	{d8-d12}
 800e488:	b097      	sub	sp, #92	@ 0x5c
 800e48a:	4688      	mov	r8, r1
 800e48c:	920e      	str	r2, [sp, #56]	@ 0x38
 800e48e:	2200      	movs	r2, #0
 800e490:	9212      	str	r2, [sp, #72]	@ 0x48
 800e492:	9005      	str	r0, [sp, #20]
 800e494:	f04f 0a00 	mov.w	sl, #0
 800e498:	f04f 0b00 	mov.w	fp, #0
 800e49c:	460a      	mov	r2, r1
 800e49e:	9211      	str	r2, [sp, #68]	@ 0x44
 800e4a0:	7811      	ldrb	r1, [r2, #0]
 800e4a2:	292b      	cmp	r1, #43	@ 0x2b
 800e4a4:	d04c      	beq.n	800e540 <_strtod_l+0xc0>
 800e4a6:	d839      	bhi.n	800e51c <_strtod_l+0x9c>
 800e4a8:	290d      	cmp	r1, #13
 800e4aa:	d833      	bhi.n	800e514 <_strtod_l+0x94>
 800e4ac:	2908      	cmp	r1, #8
 800e4ae:	d833      	bhi.n	800e518 <_strtod_l+0x98>
 800e4b0:	2900      	cmp	r1, #0
 800e4b2:	d03c      	beq.n	800e52e <_strtod_l+0xae>
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	9208      	str	r2, [sp, #32]
 800e4b8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e4ba:	782a      	ldrb	r2, [r5, #0]
 800e4bc:	2a30      	cmp	r2, #48	@ 0x30
 800e4be:	f040 80b5 	bne.w	800e62c <_strtod_l+0x1ac>
 800e4c2:	786a      	ldrb	r2, [r5, #1]
 800e4c4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e4c8:	2a58      	cmp	r2, #88	@ 0x58
 800e4ca:	d170      	bne.n	800e5ae <_strtod_l+0x12e>
 800e4cc:	9302      	str	r3, [sp, #8]
 800e4ce:	9b08      	ldr	r3, [sp, #32]
 800e4d0:	9301      	str	r3, [sp, #4]
 800e4d2:	ab12      	add	r3, sp, #72	@ 0x48
 800e4d4:	9300      	str	r3, [sp, #0]
 800e4d6:	4a8b      	ldr	r2, [pc, #556]	@ (800e704 <_strtod_l+0x284>)
 800e4d8:	9805      	ldr	r0, [sp, #20]
 800e4da:	ab13      	add	r3, sp, #76	@ 0x4c
 800e4dc:	a911      	add	r1, sp, #68	@ 0x44
 800e4de:	f002 fc5f 	bl	8010da0 <__gethex>
 800e4e2:	f010 060f 	ands.w	r6, r0, #15
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	d005      	beq.n	800e4f6 <_strtod_l+0x76>
 800e4ea:	2e06      	cmp	r6, #6
 800e4ec:	d12a      	bne.n	800e544 <_strtod_l+0xc4>
 800e4ee:	3501      	adds	r5, #1
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	9511      	str	r5, [sp, #68]	@ 0x44
 800e4f4:	9308      	str	r3, [sp, #32]
 800e4f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	f040 852f 	bne.w	800ef5c <_strtod_l+0xadc>
 800e4fe:	9b08      	ldr	r3, [sp, #32]
 800e500:	ec4b ab10 	vmov	d0, sl, fp
 800e504:	b1cb      	cbz	r3, 800e53a <_strtod_l+0xba>
 800e506:	eeb1 0b40 	vneg.f64	d0, d0
 800e50a:	b017      	add	sp, #92	@ 0x5c
 800e50c:	ecbd 8b0a 	vpop	{d8-d12}
 800e510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e514:	2920      	cmp	r1, #32
 800e516:	d1cd      	bne.n	800e4b4 <_strtod_l+0x34>
 800e518:	3201      	adds	r2, #1
 800e51a:	e7c0      	b.n	800e49e <_strtod_l+0x1e>
 800e51c:	292d      	cmp	r1, #45	@ 0x2d
 800e51e:	d1c9      	bne.n	800e4b4 <_strtod_l+0x34>
 800e520:	2101      	movs	r1, #1
 800e522:	9108      	str	r1, [sp, #32]
 800e524:	1c51      	adds	r1, r2, #1
 800e526:	9111      	str	r1, [sp, #68]	@ 0x44
 800e528:	7852      	ldrb	r2, [r2, #1]
 800e52a:	2a00      	cmp	r2, #0
 800e52c:	d1c4      	bne.n	800e4b8 <_strtod_l+0x38>
 800e52e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e530:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e534:	2b00      	cmp	r3, #0
 800e536:	f040 850f 	bne.w	800ef58 <_strtod_l+0xad8>
 800e53a:	ec4b ab10 	vmov	d0, sl, fp
 800e53e:	e7e4      	b.n	800e50a <_strtod_l+0x8a>
 800e540:	2100      	movs	r1, #0
 800e542:	e7ee      	b.n	800e522 <_strtod_l+0xa2>
 800e544:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e546:	b13a      	cbz	r2, 800e558 <_strtod_l+0xd8>
 800e548:	2135      	movs	r1, #53	@ 0x35
 800e54a:	a814      	add	r0, sp, #80	@ 0x50
 800e54c:	f003 fb77 	bl	8011c3e <__copybits>
 800e550:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e552:	9805      	ldr	r0, [sp, #20]
 800e554:	f002 ff48 	bl	80113e8 <_Bfree>
 800e558:	1e73      	subs	r3, r6, #1
 800e55a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e55c:	2b04      	cmp	r3, #4
 800e55e:	d806      	bhi.n	800e56e <_strtod_l+0xee>
 800e560:	e8df f003 	tbb	[pc, r3]
 800e564:	201d0314 	.word	0x201d0314
 800e568:	14          	.byte	0x14
 800e569:	00          	.byte	0x00
 800e56a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800e56e:	05e3      	lsls	r3, r4, #23
 800e570:	bf48      	it	mi
 800e572:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e576:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e57a:	0d1b      	lsrs	r3, r3, #20
 800e57c:	051b      	lsls	r3, r3, #20
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d1b9      	bne.n	800e4f6 <_strtod_l+0x76>
 800e582:	f001 fd2f 	bl	800ffe4 <__errno>
 800e586:	2322      	movs	r3, #34	@ 0x22
 800e588:	6003      	str	r3, [r0, #0]
 800e58a:	e7b4      	b.n	800e4f6 <_strtod_l+0x76>
 800e58c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800e590:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e594:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e598:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e59c:	e7e7      	b.n	800e56e <_strtod_l+0xee>
 800e59e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800e70c <_strtod_l+0x28c>
 800e5a2:	e7e4      	b.n	800e56e <_strtod_l+0xee>
 800e5a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e5a8:	f04f 3aff 	mov.w	sl, #4294967295
 800e5ac:	e7df      	b.n	800e56e <_strtod_l+0xee>
 800e5ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e5b0:	1c5a      	adds	r2, r3, #1
 800e5b2:	9211      	str	r2, [sp, #68]	@ 0x44
 800e5b4:	785b      	ldrb	r3, [r3, #1]
 800e5b6:	2b30      	cmp	r3, #48	@ 0x30
 800e5b8:	d0f9      	beq.n	800e5ae <_strtod_l+0x12e>
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d09b      	beq.n	800e4f6 <_strtod_l+0x76>
 800e5be:	2301      	movs	r3, #1
 800e5c0:	2600      	movs	r6, #0
 800e5c2:	9307      	str	r3, [sp, #28]
 800e5c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e5c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5c8:	46b1      	mov	r9, r6
 800e5ca:	4635      	mov	r5, r6
 800e5cc:	220a      	movs	r2, #10
 800e5ce:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e5d0:	7804      	ldrb	r4, [r0, #0]
 800e5d2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e5d6:	b2d9      	uxtb	r1, r3
 800e5d8:	2909      	cmp	r1, #9
 800e5da:	d929      	bls.n	800e630 <_strtod_l+0x1b0>
 800e5dc:	494a      	ldr	r1, [pc, #296]	@ (800e708 <_strtod_l+0x288>)
 800e5de:	2201      	movs	r2, #1
 800e5e0:	f001 fc94 	bl	800ff0c <strncmp>
 800e5e4:	b378      	cbz	r0, 800e646 <_strtod_l+0x1c6>
 800e5e6:	2000      	movs	r0, #0
 800e5e8:	4622      	mov	r2, r4
 800e5ea:	462b      	mov	r3, r5
 800e5ec:	4607      	mov	r7, r0
 800e5ee:	9006      	str	r0, [sp, #24]
 800e5f0:	2a65      	cmp	r2, #101	@ 0x65
 800e5f2:	d001      	beq.n	800e5f8 <_strtod_l+0x178>
 800e5f4:	2a45      	cmp	r2, #69	@ 0x45
 800e5f6:	d117      	bne.n	800e628 <_strtod_l+0x1a8>
 800e5f8:	b91b      	cbnz	r3, 800e602 <_strtod_l+0x182>
 800e5fa:	9b07      	ldr	r3, [sp, #28]
 800e5fc:	4303      	orrs	r3, r0
 800e5fe:	d096      	beq.n	800e52e <_strtod_l+0xae>
 800e600:	2300      	movs	r3, #0
 800e602:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800e606:	f108 0201 	add.w	r2, r8, #1
 800e60a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e60c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e610:	2a2b      	cmp	r2, #43	@ 0x2b
 800e612:	d06b      	beq.n	800e6ec <_strtod_l+0x26c>
 800e614:	2a2d      	cmp	r2, #45	@ 0x2d
 800e616:	d071      	beq.n	800e6fc <_strtod_l+0x27c>
 800e618:	f04f 0e00 	mov.w	lr, #0
 800e61c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e620:	2c09      	cmp	r4, #9
 800e622:	d979      	bls.n	800e718 <_strtod_l+0x298>
 800e624:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e628:	2400      	movs	r4, #0
 800e62a:	e094      	b.n	800e756 <_strtod_l+0x2d6>
 800e62c:	2300      	movs	r3, #0
 800e62e:	e7c7      	b.n	800e5c0 <_strtod_l+0x140>
 800e630:	2d08      	cmp	r5, #8
 800e632:	f100 0001 	add.w	r0, r0, #1
 800e636:	bfd4      	ite	le
 800e638:	fb02 3909 	mlale	r9, r2, r9, r3
 800e63c:	fb02 3606 	mlagt	r6, r2, r6, r3
 800e640:	3501      	adds	r5, #1
 800e642:	9011      	str	r0, [sp, #68]	@ 0x44
 800e644:	e7c3      	b.n	800e5ce <_strtod_l+0x14e>
 800e646:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e648:	1c5a      	adds	r2, r3, #1
 800e64a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e64c:	785a      	ldrb	r2, [r3, #1]
 800e64e:	b375      	cbz	r5, 800e6ae <_strtod_l+0x22e>
 800e650:	4607      	mov	r7, r0
 800e652:	462b      	mov	r3, r5
 800e654:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e658:	2909      	cmp	r1, #9
 800e65a:	d913      	bls.n	800e684 <_strtod_l+0x204>
 800e65c:	2101      	movs	r1, #1
 800e65e:	9106      	str	r1, [sp, #24]
 800e660:	e7c6      	b.n	800e5f0 <_strtod_l+0x170>
 800e662:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e664:	1c5a      	adds	r2, r3, #1
 800e666:	9211      	str	r2, [sp, #68]	@ 0x44
 800e668:	785a      	ldrb	r2, [r3, #1]
 800e66a:	3001      	adds	r0, #1
 800e66c:	2a30      	cmp	r2, #48	@ 0x30
 800e66e:	d0f8      	beq.n	800e662 <_strtod_l+0x1e2>
 800e670:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e674:	2b08      	cmp	r3, #8
 800e676:	f200 8476 	bhi.w	800ef66 <_strtod_l+0xae6>
 800e67a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e67c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e67e:	4607      	mov	r7, r0
 800e680:	2000      	movs	r0, #0
 800e682:	4603      	mov	r3, r0
 800e684:	3a30      	subs	r2, #48	@ 0x30
 800e686:	f100 0101 	add.w	r1, r0, #1
 800e68a:	d023      	beq.n	800e6d4 <_strtod_l+0x254>
 800e68c:	440f      	add	r7, r1
 800e68e:	eb00 0c03 	add.w	ip, r0, r3
 800e692:	4619      	mov	r1, r3
 800e694:	240a      	movs	r4, #10
 800e696:	4561      	cmp	r1, ip
 800e698:	d10b      	bne.n	800e6b2 <_strtod_l+0x232>
 800e69a:	1c5c      	adds	r4, r3, #1
 800e69c:	4403      	add	r3, r0
 800e69e:	2b08      	cmp	r3, #8
 800e6a0:	4404      	add	r4, r0
 800e6a2:	dc11      	bgt.n	800e6c8 <_strtod_l+0x248>
 800e6a4:	230a      	movs	r3, #10
 800e6a6:	fb03 2909 	mla	r9, r3, r9, r2
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	e013      	b.n	800e6d6 <_strtod_l+0x256>
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	e7dc      	b.n	800e66c <_strtod_l+0x1ec>
 800e6b2:	2908      	cmp	r1, #8
 800e6b4:	f101 0101 	add.w	r1, r1, #1
 800e6b8:	dc02      	bgt.n	800e6c0 <_strtod_l+0x240>
 800e6ba:	fb04 f909 	mul.w	r9, r4, r9
 800e6be:	e7ea      	b.n	800e696 <_strtod_l+0x216>
 800e6c0:	2910      	cmp	r1, #16
 800e6c2:	bfd8      	it	le
 800e6c4:	4366      	mulle	r6, r4
 800e6c6:	e7e6      	b.n	800e696 <_strtod_l+0x216>
 800e6c8:	2b0f      	cmp	r3, #15
 800e6ca:	dcee      	bgt.n	800e6aa <_strtod_l+0x22a>
 800e6cc:	230a      	movs	r3, #10
 800e6ce:	fb03 2606 	mla	r6, r3, r6, r2
 800e6d2:	e7ea      	b.n	800e6aa <_strtod_l+0x22a>
 800e6d4:	461c      	mov	r4, r3
 800e6d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e6d8:	1c5a      	adds	r2, r3, #1
 800e6da:	9211      	str	r2, [sp, #68]	@ 0x44
 800e6dc:	785a      	ldrb	r2, [r3, #1]
 800e6de:	4608      	mov	r0, r1
 800e6e0:	4623      	mov	r3, r4
 800e6e2:	e7b7      	b.n	800e654 <_strtod_l+0x1d4>
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	2700      	movs	r7, #0
 800e6e8:	9306      	str	r3, [sp, #24]
 800e6ea:	e786      	b.n	800e5fa <_strtod_l+0x17a>
 800e6ec:	f04f 0e00 	mov.w	lr, #0
 800e6f0:	f108 0202 	add.w	r2, r8, #2
 800e6f4:	9211      	str	r2, [sp, #68]	@ 0x44
 800e6f6:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e6fa:	e78f      	b.n	800e61c <_strtod_l+0x19c>
 800e6fc:	f04f 0e01 	mov.w	lr, #1
 800e700:	e7f6      	b.n	800e6f0 <_strtod_l+0x270>
 800e702:	bf00      	nop
 800e704:	080131b0 	.word	0x080131b0
 800e708:	08013198 	.word	0x08013198
 800e70c:	7ff00000 	.word	0x7ff00000
 800e710:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e712:	1c54      	adds	r4, r2, #1
 800e714:	9411      	str	r4, [sp, #68]	@ 0x44
 800e716:	7852      	ldrb	r2, [r2, #1]
 800e718:	2a30      	cmp	r2, #48	@ 0x30
 800e71a:	d0f9      	beq.n	800e710 <_strtod_l+0x290>
 800e71c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e720:	2c08      	cmp	r4, #8
 800e722:	d881      	bhi.n	800e628 <_strtod_l+0x1a8>
 800e724:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e728:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e72a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e72c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e72e:	1c51      	adds	r1, r2, #1
 800e730:	9111      	str	r1, [sp, #68]	@ 0x44
 800e732:	7852      	ldrb	r2, [r2, #1]
 800e734:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e738:	2c09      	cmp	r4, #9
 800e73a:	d938      	bls.n	800e7ae <_strtod_l+0x32e>
 800e73c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e73e:	1b0c      	subs	r4, r1, r4
 800e740:	2c08      	cmp	r4, #8
 800e742:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800e746:	dc02      	bgt.n	800e74e <_strtod_l+0x2ce>
 800e748:	4564      	cmp	r4, ip
 800e74a:	bfa8      	it	ge
 800e74c:	4664      	movge	r4, ip
 800e74e:	f1be 0f00 	cmp.w	lr, #0
 800e752:	d000      	beq.n	800e756 <_strtod_l+0x2d6>
 800e754:	4264      	negs	r4, r4
 800e756:	2b00      	cmp	r3, #0
 800e758:	d14e      	bne.n	800e7f8 <_strtod_l+0x378>
 800e75a:	9b07      	ldr	r3, [sp, #28]
 800e75c:	4318      	orrs	r0, r3
 800e75e:	f47f aeca 	bne.w	800e4f6 <_strtod_l+0x76>
 800e762:	9b06      	ldr	r3, [sp, #24]
 800e764:	2b00      	cmp	r3, #0
 800e766:	f47f aee2 	bne.w	800e52e <_strtod_l+0xae>
 800e76a:	2a69      	cmp	r2, #105	@ 0x69
 800e76c:	d027      	beq.n	800e7be <_strtod_l+0x33e>
 800e76e:	dc24      	bgt.n	800e7ba <_strtod_l+0x33a>
 800e770:	2a49      	cmp	r2, #73	@ 0x49
 800e772:	d024      	beq.n	800e7be <_strtod_l+0x33e>
 800e774:	2a4e      	cmp	r2, #78	@ 0x4e
 800e776:	f47f aeda 	bne.w	800e52e <_strtod_l+0xae>
 800e77a:	4997      	ldr	r1, [pc, #604]	@ (800e9d8 <_strtod_l+0x558>)
 800e77c:	a811      	add	r0, sp, #68	@ 0x44
 800e77e:	f002 fd31 	bl	80111e4 <__match>
 800e782:	2800      	cmp	r0, #0
 800e784:	f43f aed3 	beq.w	800e52e <_strtod_l+0xae>
 800e788:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	2b28      	cmp	r3, #40	@ 0x28
 800e78e:	d12d      	bne.n	800e7ec <_strtod_l+0x36c>
 800e790:	4992      	ldr	r1, [pc, #584]	@ (800e9dc <_strtod_l+0x55c>)
 800e792:	aa14      	add	r2, sp, #80	@ 0x50
 800e794:	a811      	add	r0, sp, #68	@ 0x44
 800e796:	f002 fd39 	bl	801120c <__hexnan>
 800e79a:	2805      	cmp	r0, #5
 800e79c:	d126      	bne.n	800e7ec <_strtod_l+0x36c>
 800e79e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e7a0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e7a4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e7a8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e7ac:	e6a3      	b.n	800e4f6 <_strtod_l+0x76>
 800e7ae:	240a      	movs	r4, #10
 800e7b0:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e7b4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e7b8:	e7b8      	b.n	800e72c <_strtod_l+0x2ac>
 800e7ba:	2a6e      	cmp	r2, #110	@ 0x6e
 800e7bc:	e7db      	b.n	800e776 <_strtod_l+0x2f6>
 800e7be:	4988      	ldr	r1, [pc, #544]	@ (800e9e0 <_strtod_l+0x560>)
 800e7c0:	a811      	add	r0, sp, #68	@ 0x44
 800e7c2:	f002 fd0f 	bl	80111e4 <__match>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	f43f aeb1 	beq.w	800e52e <_strtod_l+0xae>
 800e7cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e7ce:	4985      	ldr	r1, [pc, #532]	@ (800e9e4 <_strtod_l+0x564>)
 800e7d0:	3b01      	subs	r3, #1
 800e7d2:	a811      	add	r0, sp, #68	@ 0x44
 800e7d4:	9311      	str	r3, [sp, #68]	@ 0x44
 800e7d6:	f002 fd05 	bl	80111e4 <__match>
 800e7da:	b910      	cbnz	r0, 800e7e2 <_strtod_l+0x362>
 800e7dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e7de:	3301      	adds	r3, #1
 800e7e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800e7e2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800e9f8 <_strtod_l+0x578>
 800e7e6:	f04f 0a00 	mov.w	sl, #0
 800e7ea:	e684      	b.n	800e4f6 <_strtod_l+0x76>
 800e7ec:	487e      	ldr	r0, [pc, #504]	@ (800e9e8 <_strtod_l+0x568>)
 800e7ee:	f001 fc37 	bl	8010060 <nan>
 800e7f2:	ec5b ab10 	vmov	sl, fp, d0
 800e7f6:	e67e      	b.n	800e4f6 <_strtod_l+0x76>
 800e7f8:	ee07 9a90 	vmov	s15, r9
 800e7fc:	1be2      	subs	r2, r4, r7
 800e7fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e802:	2d00      	cmp	r5, #0
 800e804:	bf08      	it	eq
 800e806:	461d      	moveq	r5, r3
 800e808:	2b10      	cmp	r3, #16
 800e80a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e80c:	461a      	mov	r2, r3
 800e80e:	bfa8      	it	ge
 800e810:	2210      	movge	r2, #16
 800e812:	2b09      	cmp	r3, #9
 800e814:	ec5b ab17 	vmov	sl, fp, d7
 800e818:	dc15      	bgt.n	800e846 <_strtod_l+0x3c6>
 800e81a:	1be1      	subs	r1, r4, r7
 800e81c:	2900      	cmp	r1, #0
 800e81e:	f43f ae6a 	beq.w	800e4f6 <_strtod_l+0x76>
 800e822:	eba4 0107 	sub.w	r1, r4, r7
 800e826:	dd72      	ble.n	800e90e <_strtod_l+0x48e>
 800e828:	2916      	cmp	r1, #22
 800e82a:	dc59      	bgt.n	800e8e0 <_strtod_l+0x460>
 800e82c:	4b6f      	ldr	r3, [pc, #444]	@ (800e9ec <_strtod_l+0x56c>)
 800e82e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e830:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e834:	ed93 7b00 	vldr	d7, [r3]
 800e838:	ec4b ab16 	vmov	d6, sl, fp
 800e83c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e840:	ec5b ab17 	vmov	sl, fp, d7
 800e844:	e657      	b.n	800e4f6 <_strtod_l+0x76>
 800e846:	4969      	ldr	r1, [pc, #420]	@ (800e9ec <_strtod_l+0x56c>)
 800e848:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e84c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e850:	ee06 6a90 	vmov	s13, r6
 800e854:	2b0f      	cmp	r3, #15
 800e856:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e85a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e85e:	ec5b ab16 	vmov	sl, fp, d6
 800e862:	ddda      	ble.n	800e81a <_strtod_l+0x39a>
 800e864:	1a9a      	subs	r2, r3, r2
 800e866:	1be1      	subs	r1, r4, r7
 800e868:	440a      	add	r2, r1
 800e86a:	2a00      	cmp	r2, #0
 800e86c:	f340 8094 	ble.w	800e998 <_strtod_l+0x518>
 800e870:	f012 000f 	ands.w	r0, r2, #15
 800e874:	d00a      	beq.n	800e88c <_strtod_l+0x40c>
 800e876:	495d      	ldr	r1, [pc, #372]	@ (800e9ec <_strtod_l+0x56c>)
 800e878:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e87c:	ed91 7b00 	vldr	d7, [r1]
 800e880:	ec4b ab16 	vmov	d6, sl, fp
 800e884:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e888:	ec5b ab17 	vmov	sl, fp, d7
 800e88c:	f032 020f 	bics.w	r2, r2, #15
 800e890:	d073      	beq.n	800e97a <_strtod_l+0x4fa>
 800e892:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e896:	dd47      	ble.n	800e928 <_strtod_l+0x4a8>
 800e898:	2400      	movs	r4, #0
 800e89a:	4625      	mov	r5, r4
 800e89c:	9407      	str	r4, [sp, #28]
 800e89e:	4626      	mov	r6, r4
 800e8a0:	9a05      	ldr	r2, [sp, #20]
 800e8a2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e9f8 <_strtod_l+0x578>
 800e8a6:	2322      	movs	r3, #34	@ 0x22
 800e8a8:	6013      	str	r3, [r2, #0]
 800e8aa:	f04f 0a00 	mov.w	sl, #0
 800e8ae:	9b07      	ldr	r3, [sp, #28]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	f43f ae20 	beq.w	800e4f6 <_strtod_l+0x76>
 800e8b6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e8b8:	9805      	ldr	r0, [sp, #20]
 800e8ba:	f002 fd95 	bl	80113e8 <_Bfree>
 800e8be:	9805      	ldr	r0, [sp, #20]
 800e8c0:	4631      	mov	r1, r6
 800e8c2:	f002 fd91 	bl	80113e8 <_Bfree>
 800e8c6:	9805      	ldr	r0, [sp, #20]
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	f002 fd8d 	bl	80113e8 <_Bfree>
 800e8ce:	9907      	ldr	r1, [sp, #28]
 800e8d0:	9805      	ldr	r0, [sp, #20]
 800e8d2:	f002 fd89 	bl	80113e8 <_Bfree>
 800e8d6:	9805      	ldr	r0, [sp, #20]
 800e8d8:	4621      	mov	r1, r4
 800e8da:	f002 fd85 	bl	80113e8 <_Bfree>
 800e8de:	e60a      	b.n	800e4f6 <_strtod_l+0x76>
 800e8e0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e8e4:	1be0      	subs	r0, r4, r7
 800e8e6:	4281      	cmp	r1, r0
 800e8e8:	dbbc      	blt.n	800e864 <_strtod_l+0x3e4>
 800e8ea:	4a40      	ldr	r2, [pc, #256]	@ (800e9ec <_strtod_l+0x56c>)
 800e8ec:	f1c3 030f 	rsb	r3, r3, #15
 800e8f0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e8f4:	ed91 7b00 	vldr	d7, [r1]
 800e8f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e8fa:	ec4b ab16 	vmov	d6, sl, fp
 800e8fe:	1acb      	subs	r3, r1, r3
 800e900:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e904:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e908:	ed92 6b00 	vldr	d6, [r2]
 800e90c:	e796      	b.n	800e83c <_strtod_l+0x3bc>
 800e90e:	3116      	adds	r1, #22
 800e910:	dba8      	blt.n	800e864 <_strtod_l+0x3e4>
 800e912:	4b36      	ldr	r3, [pc, #216]	@ (800e9ec <_strtod_l+0x56c>)
 800e914:	1b3c      	subs	r4, r7, r4
 800e916:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e91a:	ed94 7b00 	vldr	d7, [r4]
 800e91e:	ec4b ab16 	vmov	d6, sl, fp
 800e922:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e926:	e78b      	b.n	800e840 <_strtod_l+0x3c0>
 800e928:	2000      	movs	r0, #0
 800e92a:	ec4b ab17 	vmov	d7, sl, fp
 800e92e:	4e30      	ldr	r6, [pc, #192]	@ (800e9f0 <_strtod_l+0x570>)
 800e930:	1112      	asrs	r2, r2, #4
 800e932:	4601      	mov	r1, r0
 800e934:	2a01      	cmp	r2, #1
 800e936:	dc23      	bgt.n	800e980 <_strtod_l+0x500>
 800e938:	b108      	cbz	r0, 800e93e <_strtod_l+0x4be>
 800e93a:	ec5b ab17 	vmov	sl, fp, d7
 800e93e:	4a2c      	ldr	r2, [pc, #176]	@ (800e9f0 <_strtod_l+0x570>)
 800e940:	482c      	ldr	r0, [pc, #176]	@ (800e9f4 <_strtod_l+0x574>)
 800e942:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e946:	ed92 7b00 	vldr	d7, [r2]
 800e94a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e94e:	ec4b ab16 	vmov	d6, sl, fp
 800e952:	4a29      	ldr	r2, [pc, #164]	@ (800e9f8 <_strtod_l+0x578>)
 800e954:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e958:	ee17 1a90 	vmov	r1, s15
 800e95c:	400a      	ands	r2, r1
 800e95e:	4282      	cmp	r2, r0
 800e960:	ec5b ab17 	vmov	sl, fp, d7
 800e964:	d898      	bhi.n	800e898 <_strtod_l+0x418>
 800e966:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800e96a:	4282      	cmp	r2, r0
 800e96c:	bf86      	itte	hi
 800e96e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800e9fc <_strtod_l+0x57c>
 800e972:	f04f 3aff 	movhi.w	sl, #4294967295
 800e976:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800e97a:	2200      	movs	r2, #0
 800e97c:	9206      	str	r2, [sp, #24]
 800e97e:	e076      	b.n	800ea6e <_strtod_l+0x5ee>
 800e980:	f012 0f01 	tst.w	r2, #1
 800e984:	d004      	beq.n	800e990 <_strtod_l+0x510>
 800e986:	ed96 6b00 	vldr	d6, [r6]
 800e98a:	2001      	movs	r0, #1
 800e98c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e990:	3101      	adds	r1, #1
 800e992:	1052      	asrs	r2, r2, #1
 800e994:	3608      	adds	r6, #8
 800e996:	e7cd      	b.n	800e934 <_strtod_l+0x4b4>
 800e998:	d0ef      	beq.n	800e97a <_strtod_l+0x4fa>
 800e99a:	4252      	negs	r2, r2
 800e99c:	f012 000f 	ands.w	r0, r2, #15
 800e9a0:	d00a      	beq.n	800e9b8 <_strtod_l+0x538>
 800e9a2:	4912      	ldr	r1, [pc, #72]	@ (800e9ec <_strtod_l+0x56c>)
 800e9a4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e9a8:	ed91 7b00 	vldr	d7, [r1]
 800e9ac:	ec4b ab16 	vmov	d6, sl, fp
 800e9b0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e9b4:	ec5b ab17 	vmov	sl, fp, d7
 800e9b8:	1112      	asrs	r2, r2, #4
 800e9ba:	d0de      	beq.n	800e97a <_strtod_l+0x4fa>
 800e9bc:	2a1f      	cmp	r2, #31
 800e9be:	dd1f      	ble.n	800ea00 <_strtod_l+0x580>
 800e9c0:	2400      	movs	r4, #0
 800e9c2:	4625      	mov	r5, r4
 800e9c4:	9407      	str	r4, [sp, #28]
 800e9c6:	4626      	mov	r6, r4
 800e9c8:	9a05      	ldr	r2, [sp, #20]
 800e9ca:	2322      	movs	r3, #34	@ 0x22
 800e9cc:	f04f 0a00 	mov.w	sl, #0
 800e9d0:	f04f 0b00 	mov.w	fp, #0
 800e9d4:	6013      	str	r3, [r2, #0]
 800e9d6:	e76a      	b.n	800e8ae <_strtod_l+0x42e>
 800e9d8:	080131fd 	.word	0x080131fd
 800e9dc:	0801319c 	.word	0x0801319c
 800e9e0:	080131f5 	.word	0x080131f5
 800e9e4:	08013232 	.word	0x08013232
 800e9e8:	080135e0 	.word	0x080135e0
 800e9ec:	080133b0 	.word	0x080133b0
 800e9f0:	08013388 	.word	0x08013388
 800e9f4:	7ca00000 	.word	0x7ca00000
 800e9f8:	7ff00000 	.word	0x7ff00000
 800e9fc:	7fefffff 	.word	0x7fefffff
 800ea00:	f012 0110 	ands.w	r1, r2, #16
 800ea04:	bf18      	it	ne
 800ea06:	216a      	movne	r1, #106	@ 0x6a
 800ea08:	9106      	str	r1, [sp, #24]
 800ea0a:	ec4b ab17 	vmov	d7, sl, fp
 800ea0e:	49b0      	ldr	r1, [pc, #704]	@ (800ecd0 <_strtod_l+0x850>)
 800ea10:	2000      	movs	r0, #0
 800ea12:	07d6      	lsls	r6, r2, #31
 800ea14:	d504      	bpl.n	800ea20 <_strtod_l+0x5a0>
 800ea16:	ed91 6b00 	vldr	d6, [r1]
 800ea1a:	2001      	movs	r0, #1
 800ea1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea20:	1052      	asrs	r2, r2, #1
 800ea22:	f101 0108 	add.w	r1, r1, #8
 800ea26:	d1f4      	bne.n	800ea12 <_strtod_l+0x592>
 800ea28:	b108      	cbz	r0, 800ea2e <_strtod_l+0x5ae>
 800ea2a:	ec5b ab17 	vmov	sl, fp, d7
 800ea2e:	9a06      	ldr	r2, [sp, #24]
 800ea30:	b1b2      	cbz	r2, 800ea60 <_strtod_l+0x5e0>
 800ea32:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800ea36:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800ea3a:	2a00      	cmp	r2, #0
 800ea3c:	4658      	mov	r0, fp
 800ea3e:	dd0f      	ble.n	800ea60 <_strtod_l+0x5e0>
 800ea40:	2a1f      	cmp	r2, #31
 800ea42:	dd55      	ble.n	800eaf0 <_strtod_l+0x670>
 800ea44:	2a34      	cmp	r2, #52	@ 0x34
 800ea46:	bfde      	ittt	le
 800ea48:	f04f 32ff 	movle.w	r2, #4294967295
 800ea4c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800ea50:	408a      	lslle	r2, r1
 800ea52:	f04f 0a00 	mov.w	sl, #0
 800ea56:	bfcc      	ite	gt
 800ea58:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ea5c:	ea02 0b00 	andle.w	fp, r2, r0
 800ea60:	ec4b ab17 	vmov	d7, sl, fp
 800ea64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea6c:	d0a8      	beq.n	800e9c0 <_strtod_l+0x540>
 800ea6e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ea70:	9805      	ldr	r0, [sp, #20]
 800ea72:	f8cd 9000 	str.w	r9, [sp]
 800ea76:	462a      	mov	r2, r5
 800ea78:	f002 fd1e 	bl	80114b8 <__s2b>
 800ea7c:	9007      	str	r0, [sp, #28]
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	f43f af0a 	beq.w	800e898 <_strtod_l+0x418>
 800ea84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea86:	1b3f      	subs	r7, r7, r4
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	bfb4      	ite	lt
 800ea8c:	463b      	movlt	r3, r7
 800ea8e:	2300      	movge	r3, #0
 800ea90:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea94:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800ecc0 <_strtod_l+0x840>
 800ea98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ea9c:	2400      	movs	r4, #0
 800ea9e:	930d      	str	r3, [sp, #52]	@ 0x34
 800eaa0:	4625      	mov	r5, r4
 800eaa2:	9b07      	ldr	r3, [sp, #28]
 800eaa4:	9805      	ldr	r0, [sp, #20]
 800eaa6:	6859      	ldr	r1, [r3, #4]
 800eaa8:	f002 fc5e 	bl	8011368 <_Balloc>
 800eaac:	4606      	mov	r6, r0
 800eaae:	2800      	cmp	r0, #0
 800eab0:	f43f aef6 	beq.w	800e8a0 <_strtod_l+0x420>
 800eab4:	9b07      	ldr	r3, [sp, #28]
 800eab6:	691a      	ldr	r2, [r3, #16]
 800eab8:	ec4b ab19 	vmov	d9, sl, fp
 800eabc:	3202      	adds	r2, #2
 800eabe:	f103 010c 	add.w	r1, r3, #12
 800eac2:	0092      	lsls	r2, r2, #2
 800eac4:	300c      	adds	r0, #12
 800eac6:	f001 faba 	bl	801003e <memcpy>
 800eaca:	eeb0 0b49 	vmov.f64	d0, d9
 800eace:	9805      	ldr	r0, [sp, #20]
 800ead0:	aa14      	add	r2, sp, #80	@ 0x50
 800ead2:	a913      	add	r1, sp, #76	@ 0x4c
 800ead4:	f003 f82c 	bl	8011b30 <__d2b>
 800ead8:	9012      	str	r0, [sp, #72]	@ 0x48
 800eada:	2800      	cmp	r0, #0
 800eadc:	f43f aee0 	beq.w	800e8a0 <_strtod_l+0x420>
 800eae0:	9805      	ldr	r0, [sp, #20]
 800eae2:	2101      	movs	r1, #1
 800eae4:	f002 fd7e 	bl	80115e4 <__i2b>
 800eae8:	4605      	mov	r5, r0
 800eaea:	b940      	cbnz	r0, 800eafe <_strtod_l+0x67e>
 800eaec:	2500      	movs	r5, #0
 800eaee:	e6d7      	b.n	800e8a0 <_strtod_l+0x420>
 800eaf0:	f04f 31ff 	mov.w	r1, #4294967295
 800eaf4:	fa01 f202 	lsl.w	r2, r1, r2
 800eaf8:	ea02 0a0a 	and.w	sl, r2, sl
 800eafc:	e7b0      	b.n	800ea60 <_strtod_l+0x5e0>
 800eafe:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800eb00:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800eb02:	2f00      	cmp	r7, #0
 800eb04:	bfab      	itete	ge
 800eb06:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800eb08:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800eb0a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800eb0e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800eb12:	bfac      	ite	ge
 800eb14:	eb07 0903 	addge.w	r9, r7, r3
 800eb18:	eba3 0807 	sublt.w	r8, r3, r7
 800eb1c:	9b06      	ldr	r3, [sp, #24]
 800eb1e:	1aff      	subs	r7, r7, r3
 800eb20:	4417      	add	r7, r2
 800eb22:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800eb26:	4a6b      	ldr	r2, [pc, #428]	@ (800ecd4 <_strtod_l+0x854>)
 800eb28:	3f01      	subs	r7, #1
 800eb2a:	4297      	cmp	r7, r2
 800eb2c:	da51      	bge.n	800ebd2 <_strtod_l+0x752>
 800eb2e:	1bd1      	subs	r1, r2, r7
 800eb30:	291f      	cmp	r1, #31
 800eb32:	eba3 0301 	sub.w	r3, r3, r1
 800eb36:	f04f 0201 	mov.w	r2, #1
 800eb3a:	dc3e      	bgt.n	800ebba <_strtod_l+0x73a>
 800eb3c:	408a      	lsls	r2, r1
 800eb3e:	920c      	str	r2, [sp, #48]	@ 0x30
 800eb40:	2200      	movs	r2, #0
 800eb42:	920b      	str	r2, [sp, #44]	@ 0x2c
 800eb44:	eb09 0703 	add.w	r7, r9, r3
 800eb48:	4498      	add	r8, r3
 800eb4a:	9b06      	ldr	r3, [sp, #24]
 800eb4c:	45b9      	cmp	r9, r7
 800eb4e:	4498      	add	r8, r3
 800eb50:	464b      	mov	r3, r9
 800eb52:	bfa8      	it	ge
 800eb54:	463b      	movge	r3, r7
 800eb56:	4543      	cmp	r3, r8
 800eb58:	bfa8      	it	ge
 800eb5a:	4643      	movge	r3, r8
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	bfc2      	ittt	gt
 800eb60:	1aff      	subgt	r7, r7, r3
 800eb62:	eba8 0803 	subgt.w	r8, r8, r3
 800eb66:	eba9 0903 	subgt.w	r9, r9, r3
 800eb6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	dd16      	ble.n	800eb9e <_strtod_l+0x71e>
 800eb70:	4629      	mov	r1, r5
 800eb72:	9805      	ldr	r0, [sp, #20]
 800eb74:	461a      	mov	r2, r3
 800eb76:	f002 fdf5 	bl	8011764 <__pow5mult>
 800eb7a:	4605      	mov	r5, r0
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	d0b5      	beq.n	800eaec <_strtod_l+0x66c>
 800eb80:	4601      	mov	r1, r0
 800eb82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800eb84:	9805      	ldr	r0, [sp, #20]
 800eb86:	f002 fd43 	bl	8011610 <__multiply>
 800eb8a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	f43f ae87 	beq.w	800e8a0 <_strtod_l+0x420>
 800eb92:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800eb94:	9805      	ldr	r0, [sp, #20]
 800eb96:	f002 fc27 	bl	80113e8 <_Bfree>
 800eb9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb9c:	9312      	str	r3, [sp, #72]	@ 0x48
 800eb9e:	2f00      	cmp	r7, #0
 800eba0:	dc1b      	bgt.n	800ebda <_strtod_l+0x75a>
 800eba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	dd21      	ble.n	800ebec <_strtod_l+0x76c>
 800eba8:	4631      	mov	r1, r6
 800ebaa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ebac:	9805      	ldr	r0, [sp, #20]
 800ebae:	f002 fdd9 	bl	8011764 <__pow5mult>
 800ebb2:	4606      	mov	r6, r0
 800ebb4:	b9d0      	cbnz	r0, 800ebec <_strtod_l+0x76c>
 800ebb6:	2600      	movs	r6, #0
 800ebb8:	e672      	b.n	800e8a0 <_strtod_l+0x420>
 800ebba:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800ebbe:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800ebc2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800ebc6:	37e2      	adds	r7, #226	@ 0xe2
 800ebc8:	fa02 f107 	lsl.w	r1, r2, r7
 800ebcc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ebce:	920c      	str	r2, [sp, #48]	@ 0x30
 800ebd0:	e7b8      	b.n	800eb44 <_strtod_l+0x6c4>
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	e7f9      	b.n	800ebce <_strtod_l+0x74e>
 800ebda:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ebdc:	9805      	ldr	r0, [sp, #20]
 800ebde:	463a      	mov	r2, r7
 800ebe0:	f002 fe1a 	bl	8011818 <__lshift>
 800ebe4:	9012      	str	r0, [sp, #72]	@ 0x48
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	d1db      	bne.n	800eba2 <_strtod_l+0x722>
 800ebea:	e659      	b.n	800e8a0 <_strtod_l+0x420>
 800ebec:	f1b8 0f00 	cmp.w	r8, #0
 800ebf0:	dd07      	ble.n	800ec02 <_strtod_l+0x782>
 800ebf2:	4631      	mov	r1, r6
 800ebf4:	9805      	ldr	r0, [sp, #20]
 800ebf6:	4642      	mov	r2, r8
 800ebf8:	f002 fe0e 	bl	8011818 <__lshift>
 800ebfc:	4606      	mov	r6, r0
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	d0d9      	beq.n	800ebb6 <_strtod_l+0x736>
 800ec02:	f1b9 0f00 	cmp.w	r9, #0
 800ec06:	dd08      	ble.n	800ec1a <_strtod_l+0x79a>
 800ec08:	4629      	mov	r1, r5
 800ec0a:	9805      	ldr	r0, [sp, #20]
 800ec0c:	464a      	mov	r2, r9
 800ec0e:	f002 fe03 	bl	8011818 <__lshift>
 800ec12:	4605      	mov	r5, r0
 800ec14:	2800      	cmp	r0, #0
 800ec16:	f43f ae43 	beq.w	800e8a0 <_strtod_l+0x420>
 800ec1a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ec1c:	9805      	ldr	r0, [sp, #20]
 800ec1e:	4632      	mov	r2, r6
 800ec20:	f002 fe82 	bl	8011928 <__mdiff>
 800ec24:	4604      	mov	r4, r0
 800ec26:	2800      	cmp	r0, #0
 800ec28:	f43f ae3a 	beq.w	800e8a0 <_strtod_l+0x420>
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800ec32:	60c3      	str	r3, [r0, #12]
 800ec34:	4629      	mov	r1, r5
 800ec36:	f002 fe5b 	bl	80118f0 <__mcmp>
 800ec3a:	2800      	cmp	r0, #0
 800ec3c:	da4e      	bge.n	800ecdc <_strtod_l+0x85c>
 800ec3e:	ea58 080a 	orrs.w	r8, r8, sl
 800ec42:	d174      	bne.n	800ed2e <_strtod_l+0x8ae>
 800ec44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d170      	bne.n	800ed2e <_strtod_l+0x8ae>
 800ec4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec50:	0d1b      	lsrs	r3, r3, #20
 800ec52:	051b      	lsls	r3, r3, #20
 800ec54:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ec58:	d969      	bls.n	800ed2e <_strtod_l+0x8ae>
 800ec5a:	6963      	ldr	r3, [r4, #20]
 800ec5c:	b913      	cbnz	r3, 800ec64 <_strtod_l+0x7e4>
 800ec5e:	6923      	ldr	r3, [r4, #16]
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	dd64      	ble.n	800ed2e <_strtod_l+0x8ae>
 800ec64:	4621      	mov	r1, r4
 800ec66:	2201      	movs	r2, #1
 800ec68:	9805      	ldr	r0, [sp, #20]
 800ec6a:	f002 fdd5 	bl	8011818 <__lshift>
 800ec6e:	4629      	mov	r1, r5
 800ec70:	4604      	mov	r4, r0
 800ec72:	f002 fe3d 	bl	80118f0 <__mcmp>
 800ec76:	2800      	cmp	r0, #0
 800ec78:	dd59      	ble.n	800ed2e <_strtod_l+0x8ae>
 800ec7a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec7e:	9a06      	ldr	r2, [sp, #24]
 800ec80:	0d1b      	lsrs	r3, r3, #20
 800ec82:	051b      	lsls	r3, r3, #20
 800ec84:	2a00      	cmp	r2, #0
 800ec86:	d070      	beq.n	800ed6a <_strtod_l+0x8ea>
 800ec88:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ec8c:	d86d      	bhi.n	800ed6a <_strtod_l+0x8ea>
 800ec8e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ec92:	f67f ae99 	bls.w	800e9c8 <_strtod_l+0x548>
 800ec96:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800ecc8 <_strtod_l+0x848>
 800ec9a:	ec4b ab16 	vmov	d6, sl, fp
 800ec9e:	4b0e      	ldr	r3, [pc, #56]	@ (800ecd8 <_strtod_l+0x858>)
 800eca0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800eca4:	ee17 2a90 	vmov	r2, s15
 800eca8:	4013      	ands	r3, r2
 800ecaa:	ec5b ab17 	vmov	sl, fp, d7
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	f47f ae01 	bne.w	800e8b6 <_strtod_l+0x436>
 800ecb4:	9a05      	ldr	r2, [sp, #20]
 800ecb6:	2322      	movs	r3, #34	@ 0x22
 800ecb8:	6013      	str	r3, [r2, #0]
 800ecba:	e5fc      	b.n	800e8b6 <_strtod_l+0x436>
 800ecbc:	f3af 8000 	nop.w
 800ecc0:	ffc00000 	.word	0xffc00000
 800ecc4:	41dfffff 	.word	0x41dfffff
 800ecc8:	00000000 	.word	0x00000000
 800eccc:	39500000 	.word	0x39500000
 800ecd0:	080131c8 	.word	0x080131c8
 800ecd4:	fffffc02 	.word	0xfffffc02
 800ecd8:	7ff00000 	.word	0x7ff00000
 800ecdc:	46d9      	mov	r9, fp
 800ecde:	d15d      	bne.n	800ed9c <_strtod_l+0x91c>
 800ece0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ece4:	f1b8 0f00 	cmp.w	r8, #0
 800ece8:	d02a      	beq.n	800ed40 <_strtod_l+0x8c0>
 800ecea:	4aab      	ldr	r2, [pc, #684]	@ (800ef98 <_strtod_l+0xb18>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d12a      	bne.n	800ed46 <_strtod_l+0x8c6>
 800ecf0:	9b06      	ldr	r3, [sp, #24]
 800ecf2:	4652      	mov	r2, sl
 800ecf4:	b1fb      	cbz	r3, 800ed36 <_strtod_l+0x8b6>
 800ecf6:	4ba9      	ldr	r3, [pc, #676]	@ (800ef9c <_strtod_l+0xb1c>)
 800ecf8:	ea0b 0303 	and.w	r3, fp, r3
 800ecfc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ed00:	f04f 31ff 	mov.w	r1, #4294967295
 800ed04:	d81a      	bhi.n	800ed3c <_strtod_l+0x8bc>
 800ed06:	0d1b      	lsrs	r3, r3, #20
 800ed08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ed0c:	fa01 f303 	lsl.w	r3, r1, r3
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d118      	bne.n	800ed46 <_strtod_l+0x8c6>
 800ed14:	4ba2      	ldr	r3, [pc, #648]	@ (800efa0 <_strtod_l+0xb20>)
 800ed16:	4599      	cmp	r9, r3
 800ed18:	d102      	bne.n	800ed20 <_strtod_l+0x8a0>
 800ed1a:	3201      	adds	r2, #1
 800ed1c:	f43f adc0 	beq.w	800e8a0 <_strtod_l+0x420>
 800ed20:	4b9e      	ldr	r3, [pc, #632]	@ (800ef9c <_strtod_l+0xb1c>)
 800ed22:	ea09 0303 	and.w	r3, r9, r3
 800ed26:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ed2a:	f04f 0a00 	mov.w	sl, #0
 800ed2e:	9b06      	ldr	r3, [sp, #24]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d1b0      	bne.n	800ec96 <_strtod_l+0x816>
 800ed34:	e5bf      	b.n	800e8b6 <_strtod_l+0x436>
 800ed36:	f04f 33ff 	mov.w	r3, #4294967295
 800ed3a:	e7e9      	b.n	800ed10 <_strtod_l+0x890>
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	e7e7      	b.n	800ed10 <_strtod_l+0x890>
 800ed40:	ea53 030a 	orrs.w	r3, r3, sl
 800ed44:	d099      	beq.n	800ec7a <_strtod_l+0x7fa>
 800ed46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed48:	b1c3      	cbz	r3, 800ed7c <_strtod_l+0x8fc>
 800ed4a:	ea13 0f09 	tst.w	r3, r9
 800ed4e:	d0ee      	beq.n	800ed2e <_strtod_l+0x8ae>
 800ed50:	9a06      	ldr	r2, [sp, #24]
 800ed52:	4650      	mov	r0, sl
 800ed54:	4659      	mov	r1, fp
 800ed56:	f1b8 0f00 	cmp.w	r8, #0
 800ed5a:	d013      	beq.n	800ed84 <_strtod_l+0x904>
 800ed5c:	f7ff fb74 	bl	800e448 <sulp>
 800ed60:	ee39 7b00 	vadd.f64	d7, d9, d0
 800ed64:	ec5b ab17 	vmov	sl, fp, d7
 800ed68:	e7e1      	b.n	800ed2e <_strtod_l+0x8ae>
 800ed6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ed6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ed72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ed76:	f04f 3aff 	mov.w	sl, #4294967295
 800ed7a:	e7d8      	b.n	800ed2e <_strtod_l+0x8ae>
 800ed7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed7e:	ea13 0f0a 	tst.w	r3, sl
 800ed82:	e7e4      	b.n	800ed4e <_strtod_l+0x8ce>
 800ed84:	f7ff fb60 	bl	800e448 <sulp>
 800ed88:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ed8c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ed90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed94:	ec5b ab10 	vmov	sl, fp, d0
 800ed98:	d1c9      	bne.n	800ed2e <_strtod_l+0x8ae>
 800ed9a:	e615      	b.n	800e9c8 <_strtod_l+0x548>
 800ed9c:	4629      	mov	r1, r5
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f002 ff1e 	bl	8011be0 <__ratio>
 800eda4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800eda8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800edac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb0:	d85d      	bhi.n	800ee6e <_strtod_l+0x9ee>
 800edb2:	f1b8 0f00 	cmp.w	r8, #0
 800edb6:	d164      	bne.n	800ee82 <_strtod_l+0xa02>
 800edb8:	f1ba 0f00 	cmp.w	sl, #0
 800edbc:	d14b      	bne.n	800ee56 <_strtod_l+0x9d6>
 800edbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800edc2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d160      	bne.n	800ee8c <_strtod_l+0xa0c>
 800edca:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800edce:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800edd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edd6:	d401      	bmi.n	800eddc <_strtod_l+0x95c>
 800edd8:	ee20 8b08 	vmul.f64	d8, d0, d8
 800eddc:	eeb1 ab48 	vneg.f64	d10, d8
 800ede0:	486e      	ldr	r0, [pc, #440]	@ (800ef9c <_strtod_l+0xb1c>)
 800ede2:	4970      	ldr	r1, [pc, #448]	@ (800efa4 <_strtod_l+0xb24>)
 800ede4:	ea09 0700 	and.w	r7, r9, r0
 800ede8:	428f      	cmp	r7, r1
 800edea:	ec53 2b1a 	vmov	r2, r3, d10
 800edee:	d17d      	bne.n	800eeec <_strtod_l+0xa6c>
 800edf0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800edf4:	ec4b ab1c 	vmov	d12, sl, fp
 800edf8:	eeb0 0b4c 	vmov.f64	d0, d12
 800edfc:	f002 fe28 	bl	8011a50 <__ulp>
 800ee00:	4866      	ldr	r0, [pc, #408]	@ (800ef9c <_strtod_l+0xb1c>)
 800ee02:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800ee06:	ee1c 3a90 	vmov	r3, s25
 800ee0a:	4a67      	ldr	r2, [pc, #412]	@ (800efa8 <_strtod_l+0xb28>)
 800ee0c:	ea03 0100 	and.w	r1, r3, r0
 800ee10:	4291      	cmp	r1, r2
 800ee12:	ec5b ab1c 	vmov	sl, fp, d12
 800ee16:	d93c      	bls.n	800ee92 <_strtod_l+0xa12>
 800ee18:	ee19 2a90 	vmov	r2, s19
 800ee1c:	4b60      	ldr	r3, [pc, #384]	@ (800efa0 <_strtod_l+0xb20>)
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d104      	bne.n	800ee2c <_strtod_l+0x9ac>
 800ee22:	ee19 3a10 	vmov	r3, s18
 800ee26:	3301      	adds	r3, #1
 800ee28:	f43f ad3a 	beq.w	800e8a0 <_strtod_l+0x420>
 800ee2c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800efa0 <_strtod_l+0xb20>
 800ee30:	f04f 3aff 	mov.w	sl, #4294967295
 800ee34:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ee36:	9805      	ldr	r0, [sp, #20]
 800ee38:	f002 fad6 	bl	80113e8 <_Bfree>
 800ee3c:	9805      	ldr	r0, [sp, #20]
 800ee3e:	4631      	mov	r1, r6
 800ee40:	f002 fad2 	bl	80113e8 <_Bfree>
 800ee44:	9805      	ldr	r0, [sp, #20]
 800ee46:	4629      	mov	r1, r5
 800ee48:	f002 face 	bl	80113e8 <_Bfree>
 800ee4c:	9805      	ldr	r0, [sp, #20]
 800ee4e:	4621      	mov	r1, r4
 800ee50:	f002 faca 	bl	80113e8 <_Bfree>
 800ee54:	e625      	b.n	800eaa2 <_strtod_l+0x622>
 800ee56:	f1ba 0f01 	cmp.w	sl, #1
 800ee5a:	d103      	bne.n	800ee64 <_strtod_l+0x9e4>
 800ee5c:	f1bb 0f00 	cmp.w	fp, #0
 800ee60:	f43f adb2 	beq.w	800e9c8 <_strtod_l+0x548>
 800ee64:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ee68:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ee6c:	e7b8      	b.n	800ede0 <_strtod_l+0x960>
 800ee6e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ee72:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ee76:	f1b8 0f00 	cmp.w	r8, #0
 800ee7a:	d0af      	beq.n	800eddc <_strtod_l+0x95c>
 800ee7c:	eeb0 ab48 	vmov.f64	d10, d8
 800ee80:	e7ae      	b.n	800ede0 <_strtod_l+0x960>
 800ee82:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800ee86:	eeb0 8b4a 	vmov.f64	d8, d10
 800ee8a:	e7a9      	b.n	800ede0 <_strtod_l+0x960>
 800ee8c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ee90:	e7a6      	b.n	800ede0 <_strtod_l+0x960>
 800ee92:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ee96:	9b06      	ldr	r3, [sp, #24]
 800ee98:	46d9      	mov	r9, fp
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d1ca      	bne.n	800ee34 <_strtod_l+0x9b4>
 800ee9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eea2:	0d1b      	lsrs	r3, r3, #20
 800eea4:	051b      	lsls	r3, r3, #20
 800eea6:	429f      	cmp	r7, r3
 800eea8:	d1c4      	bne.n	800ee34 <_strtod_l+0x9b4>
 800eeaa:	ec51 0b18 	vmov	r0, r1, d8
 800eeae:	f7f1 fc5b 	bl	8000768 <__aeabi_d2lz>
 800eeb2:	f7f1 fc13 	bl	80006dc <__aeabi_l2d>
 800eeb6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800eeba:	ec41 0b17 	vmov	d7, r0, r1
 800eebe:	ea49 090a 	orr.w	r9, r9, sl
 800eec2:	ea59 0908 	orrs.w	r9, r9, r8
 800eec6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800eeca:	d03c      	beq.n	800ef46 <_strtod_l+0xac6>
 800eecc:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800ef80 <_strtod_l+0xb00>
 800eed0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed8:	f53f aced 	bmi.w	800e8b6 <_strtod_l+0x436>
 800eedc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ef88 <_strtod_l+0xb08>
 800eee0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eee8:	dda4      	ble.n	800ee34 <_strtod_l+0x9b4>
 800eeea:	e4e4      	b.n	800e8b6 <_strtod_l+0x436>
 800eeec:	9906      	ldr	r1, [sp, #24]
 800eeee:	b1e1      	cbz	r1, 800ef2a <_strtod_l+0xaaa>
 800eef0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800eef4:	d819      	bhi.n	800ef2a <_strtod_l+0xaaa>
 800eef6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800eefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eefe:	d811      	bhi.n	800ef24 <_strtod_l+0xaa4>
 800ef00:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800ef04:	ee18 3a10 	vmov	r3, s16
 800ef08:	2b01      	cmp	r3, #1
 800ef0a:	bf38      	it	cc
 800ef0c:	2301      	movcc	r3, #1
 800ef0e:	ee08 3a10 	vmov	s16, r3
 800ef12:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800ef16:	f1b8 0f00 	cmp.w	r8, #0
 800ef1a:	d111      	bne.n	800ef40 <_strtod_l+0xac0>
 800ef1c:	eeb1 7b48 	vneg.f64	d7, d8
 800ef20:	ec53 2b17 	vmov	r2, r3, d7
 800ef24:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800ef28:	1bcb      	subs	r3, r1, r7
 800ef2a:	eeb0 0b49 	vmov.f64	d0, d9
 800ef2e:	ec43 2b1a 	vmov	d10, r2, r3
 800ef32:	f002 fd8d 	bl	8011a50 <__ulp>
 800ef36:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800ef3a:	ec5b ab19 	vmov	sl, fp, d9
 800ef3e:	e7aa      	b.n	800ee96 <_strtod_l+0xa16>
 800ef40:	eeb0 7b48 	vmov.f64	d7, d8
 800ef44:	e7ec      	b.n	800ef20 <_strtod_l+0xaa0>
 800ef46:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800ef90 <_strtod_l+0xb10>
 800ef4a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ef4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef52:	f57f af6f 	bpl.w	800ee34 <_strtod_l+0x9b4>
 800ef56:	e4ae      	b.n	800e8b6 <_strtod_l+0x436>
 800ef58:	2300      	movs	r3, #0
 800ef5a:	9308      	str	r3, [sp, #32]
 800ef5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ef60:	6013      	str	r3, [r2, #0]
 800ef62:	f7ff bacc 	b.w	800e4fe <_strtod_l+0x7e>
 800ef66:	2a65      	cmp	r2, #101	@ 0x65
 800ef68:	f43f abbc 	beq.w	800e6e4 <_strtod_l+0x264>
 800ef6c:	2a45      	cmp	r2, #69	@ 0x45
 800ef6e:	f43f abb9 	beq.w	800e6e4 <_strtod_l+0x264>
 800ef72:	2301      	movs	r3, #1
 800ef74:	9306      	str	r3, [sp, #24]
 800ef76:	f7ff bbf0 	b.w	800e75a <_strtod_l+0x2da>
 800ef7a:	bf00      	nop
 800ef7c:	f3af 8000 	nop.w
 800ef80:	94a03595 	.word	0x94a03595
 800ef84:	3fdfffff 	.word	0x3fdfffff
 800ef88:	35afe535 	.word	0x35afe535
 800ef8c:	3fe00000 	.word	0x3fe00000
 800ef90:	94a03595 	.word	0x94a03595
 800ef94:	3fcfffff 	.word	0x3fcfffff
 800ef98:	000fffff 	.word	0x000fffff
 800ef9c:	7ff00000 	.word	0x7ff00000
 800efa0:	7fefffff 	.word	0x7fefffff
 800efa4:	7fe00000 	.word	0x7fe00000
 800efa8:	7c9fffff 	.word	0x7c9fffff

0800efac <_strtod_r>:
 800efac:	4b01      	ldr	r3, [pc, #4]	@ (800efb4 <_strtod_r+0x8>)
 800efae:	f7ff ba67 	b.w	800e480 <_strtod_l>
 800efb2:	bf00      	nop
 800efb4:	24000058 	.word	0x24000058

0800efb8 <__cvt>:
 800efb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efba:	ed2d 8b02 	vpush	{d8}
 800efbe:	eeb0 8b40 	vmov.f64	d8, d0
 800efc2:	b085      	sub	sp, #20
 800efc4:	4617      	mov	r7, r2
 800efc6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800efc8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800efca:	ee18 2a90 	vmov	r2, s17
 800efce:	f025 0520 	bic.w	r5, r5, #32
 800efd2:	2a00      	cmp	r2, #0
 800efd4:	bfb6      	itet	lt
 800efd6:	222d      	movlt	r2, #45	@ 0x2d
 800efd8:	2200      	movge	r2, #0
 800efda:	eeb1 8b40 	vneglt.f64	d8, d0
 800efde:	2d46      	cmp	r5, #70	@ 0x46
 800efe0:	460c      	mov	r4, r1
 800efe2:	701a      	strb	r2, [r3, #0]
 800efe4:	d004      	beq.n	800eff0 <__cvt+0x38>
 800efe6:	2d45      	cmp	r5, #69	@ 0x45
 800efe8:	d100      	bne.n	800efec <__cvt+0x34>
 800efea:	3401      	adds	r4, #1
 800efec:	2102      	movs	r1, #2
 800efee:	e000      	b.n	800eff2 <__cvt+0x3a>
 800eff0:	2103      	movs	r1, #3
 800eff2:	ab03      	add	r3, sp, #12
 800eff4:	9301      	str	r3, [sp, #4]
 800eff6:	ab02      	add	r3, sp, #8
 800eff8:	9300      	str	r3, [sp, #0]
 800effa:	4622      	mov	r2, r4
 800effc:	4633      	mov	r3, r6
 800effe:	eeb0 0b48 	vmov.f64	d0, d8
 800f002:	f001 f8c5 	bl	8010190 <_dtoa_r>
 800f006:	2d47      	cmp	r5, #71	@ 0x47
 800f008:	d114      	bne.n	800f034 <__cvt+0x7c>
 800f00a:	07fb      	lsls	r3, r7, #31
 800f00c:	d50a      	bpl.n	800f024 <__cvt+0x6c>
 800f00e:	1902      	adds	r2, r0, r4
 800f010:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f018:	bf08      	it	eq
 800f01a:	9203      	streq	r2, [sp, #12]
 800f01c:	2130      	movs	r1, #48	@ 0x30
 800f01e:	9b03      	ldr	r3, [sp, #12]
 800f020:	4293      	cmp	r3, r2
 800f022:	d319      	bcc.n	800f058 <__cvt+0xa0>
 800f024:	9b03      	ldr	r3, [sp, #12]
 800f026:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f028:	1a1b      	subs	r3, r3, r0
 800f02a:	6013      	str	r3, [r2, #0]
 800f02c:	b005      	add	sp, #20
 800f02e:	ecbd 8b02 	vpop	{d8}
 800f032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f034:	2d46      	cmp	r5, #70	@ 0x46
 800f036:	eb00 0204 	add.w	r2, r0, r4
 800f03a:	d1e9      	bne.n	800f010 <__cvt+0x58>
 800f03c:	7803      	ldrb	r3, [r0, #0]
 800f03e:	2b30      	cmp	r3, #48	@ 0x30
 800f040:	d107      	bne.n	800f052 <__cvt+0x9a>
 800f042:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f04a:	bf1c      	itt	ne
 800f04c:	f1c4 0401 	rsbne	r4, r4, #1
 800f050:	6034      	strne	r4, [r6, #0]
 800f052:	6833      	ldr	r3, [r6, #0]
 800f054:	441a      	add	r2, r3
 800f056:	e7db      	b.n	800f010 <__cvt+0x58>
 800f058:	1c5c      	adds	r4, r3, #1
 800f05a:	9403      	str	r4, [sp, #12]
 800f05c:	7019      	strb	r1, [r3, #0]
 800f05e:	e7de      	b.n	800f01e <__cvt+0x66>

0800f060 <__exponent>:
 800f060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f062:	2900      	cmp	r1, #0
 800f064:	bfba      	itte	lt
 800f066:	4249      	neglt	r1, r1
 800f068:	232d      	movlt	r3, #45	@ 0x2d
 800f06a:	232b      	movge	r3, #43	@ 0x2b
 800f06c:	2909      	cmp	r1, #9
 800f06e:	7002      	strb	r2, [r0, #0]
 800f070:	7043      	strb	r3, [r0, #1]
 800f072:	dd29      	ble.n	800f0c8 <__exponent+0x68>
 800f074:	f10d 0307 	add.w	r3, sp, #7
 800f078:	461d      	mov	r5, r3
 800f07a:	270a      	movs	r7, #10
 800f07c:	461a      	mov	r2, r3
 800f07e:	fbb1 f6f7 	udiv	r6, r1, r7
 800f082:	fb07 1416 	mls	r4, r7, r6, r1
 800f086:	3430      	adds	r4, #48	@ 0x30
 800f088:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f08c:	460c      	mov	r4, r1
 800f08e:	2c63      	cmp	r4, #99	@ 0x63
 800f090:	f103 33ff 	add.w	r3, r3, #4294967295
 800f094:	4631      	mov	r1, r6
 800f096:	dcf1      	bgt.n	800f07c <__exponent+0x1c>
 800f098:	3130      	adds	r1, #48	@ 0x30
 800f09a:	1e94      	subs	r4, r2, #2
 800f09c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f0a0:	1c41      	adds	r1, r0, #1
 800f0a2:	4623      	mov	r3, r4
 800f0a4:	42ab      	cmp	r3, r5
 800f0a6:	d30a      	bcc.n	800f0be <__exponent+0x5e>
 800f0a8:	f10d 0309 	add.w	r3, sp, #9
 800f0ac:	1a9b      	subs	r3, r3, r2
 800f0ae:	42ac      	cmp	r4, r5
 800f0b0:	bf88      	it	hi
 800f0b2:	2300      	movhi	r3, #0
 800f0b4:	3302      	adds	r3, #2
 800f0b6:	4403      	add	r3, r0
 800f0b8:	1a18      	subs	r0, r3, r0
 800f0ba:	b003      	add	sp, #12
 800f0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0be:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f0c2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f0c6:	e7ed      	b.n	800f0a4 <__exponent+0x44>
 800f0c8:	2330      	movs	r3, #48	@ 0x30
 800f0ca:	3130      	adds	r1, #48	@ 0x30
 800f0cc:	7083      	strb	r3, [r0, #2]
 800f0ce:	70c1      	strb	r1, [r0, #3]
 800f0d0:	1d03      	adds	r3, r0, #4
 800f0d2:	e7f1      	b.n	800f0b8 <__exponent+0x58>
 800f0d4:	0000      	movs	r0, r0
	...

0800f0d8 <_printf_float>:
 800f0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0dc:	b08d      	sub	sp, #52	@ 0x34
 800f0de:	460c      	mov	r4, r1
 800f0e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f0e4:	4616      	mov	r6, r2
 800f0e6:	461f      	mov	r7, r3
 800f0e8:	4605      	mov	r5, r0
 800f0ea:	f000 ff21 	bl	800ff30 <_localeconv_r>
 800f0ee:	f8d0 b000 	ldr.w	fp, [r0]
 800f0f2:	4658      	mov	r0, fp
 800f0f4:	f7f1 f95c 	bl	80003b0 <strlen>
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0fc:	f8d8 3000 	ldr.w	r3, [r8]
 800f100:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f104:	6822      	ldr	r2, [r4, #0]
 800f106:	9005      	str	r0, [sp, #20]
 800f108:	3307      	adds	r3, #7
 800f10a:	f023 0307 	bic.w	r3, r3, #7
 800f10e:	f103 0108 	add.w	r1, r3, #8
 800f112:	f8c8 1000 	str.w	r1, [r8]
 800f116:	ed93 0b00 	vldr	d0, [r3]
 800f11a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f378 <_printf_float+0x2a0>
 800f11e:	eeb0 7bc0 	vabs.f64	d7, d0
 800f122:	eeb4 7b46 	vcmp.f64	d7, d6
 800f126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f12a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800f12e:	dd24      	ble.n	800f17a <_printf_float+0xa2>
 800f130:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f138:	d502      	bpl.n	800f140 <_printf_float+0x68>
 800f13a:	232d      	movs	r3, #45	@ 0x2d
 800f13c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f140:	498f      	ldr	r1, [pc, #572]	@ (800f380 <_printf_float+0x2a8>)
 800f142:	4b90      	ldr	r3, [pc, #576]	@ (800f384 <_printf_float+0x2ac>)
 800f144:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f148:	bf94      	ite	ls
 800f14a:	4688      	movls	r8, r1
 800f14c:	4698      	movhi	r8, r3
 800f14e:	f022 0204 	bic.w	r2, r2, #4
 800f152:	2303      	movs	r3, #3
 800f154:	6123      	str	r3, [r4, #16]
 800f156:	6022      	str	r2, [r4, #0]
 800f158:	f04f 0a00 	mov.w	sl, #0
 800f15c:	9700      	str	r7, [sp, #0]
 800f15e:	4633      	mov	r3, r6
 800f160:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f162:	4621      	mov	r1, r4
 800f164:	4628      	mov	r0, r5
 800f166:	f000 f9d1 	bl	800f50c <_printf_common>
 800f16a:	3001      	adds	r0, #1
 800f16c:	f040 8089 	bne.w	800f282 <_printf_float+0x1aa>
 800f170:	f04f 30ff 	mov.w	r0, #4294967295
 800f174:	b00d      	add	sp, #52	@ 0x34
 800f176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f17a:	eeb4 0b40 	vcmp.f64	d0, d0
 800f17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f182:	d709      	bvc.n	800f198 <_printf_float+0xc0>
 800f184:	ee10 3a90 	vmov	r3, s1
 800f188:	2b00      	cmp	r3, #0
 800f18a:	bfbc      	itt	lt
 800f18c:	232d      	movlt	r3, #45	@ 0x2d
 800f18e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f192:	497d      	ldr	r1, [pc, #500]	@ (800f388 <_printf_float+0x2b0>)
 800f194:	4b7d      	ldr	r3, [pc, #500]	@ (800f38c <_printf_float+0x2b4>)
 800f196:	e7d5      	b.n	800f144 <_printf_float+0x6c>
 800f198:	6863      	ldr	r3, [r4, #4]
 800f19a:	1c59      	adds	r1, r3, #1
 800f19c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f1a0:	d139      	bne.n	800f216 <_printf_float+0x13e>
 800f1a2:	2306      	movs	r3, #6
 800f1a4:	6063      	str	r3, [r4, #4]
 800f1a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	6022      	str	r2, [r4, #0]
 800f1ae:	9303      	str	r3, [sp, #12]
 800f1b0:	ab0a      	add	r3, sp, #40	@ 0x28
 800f1b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f1b6:	ab09      	add	r3, sp, #36	@ 0x24
 800f1b8:	9300      	str	r3, [sp, #0]
 800f1ba:	6861      	ldr	r1, [r4, #4]
 800f1bc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f1c0:	4628      	mov	r0, r5
 800f1c2:	f7ff fef9 	bl	800efb8 <__cvt>
 800f1c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f1ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f1cc:	4680      	mov	r8, r0
 800f1ce:	d129      	bne.n	800f224 <_printf_float+0x14c>
 800f1d0:	1cc8      	adds	r0, r1, #3
 800f1d2:	db02      	blt.n	800f1da <_printf_float+0x102>
 800f1d4:	6863      	ldr	r3, [r4, #4]
 800f1d6:	4299      	cmp	r1, r3
 800f1d8:	dd41      	ble.n	800f25e <_printf_float+0x186>
 800f1da:	f1a9 0902 	sub.w	r9, r9, #2
 800f1de:	fa5f f989 	uxtb.w	r9, r9
 800f1e2:	3901      	subs	r1, #1
 800f1e4:	464a      	mov	r2, r9
 800f1e6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f1ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800f1ec:	f7ff ff38 	bl	800f060 <__exponent>
 800f1f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f1f2:	1813      	adds	r3, r2, r0
 800f1f4:	2a01      	cmp	r2, #1
 800f1f6:	4682      	mov	sl, r0
 800f1f8:	6123      	str	r3, [r4, #16]
 800f1fa:	dc02      	bgt.n	800f202 <_printf_float+0x12a>
 800f1fc:	6822      	ldr	r2, [r4, #0]
 800f1fe:	07d2      	lsls	r2, r2, #31
 800f200:	d501      	bpl.n	800f206 <_printf_float+0x12e>
 800f202:	3301      	adds	r3, #1
 800f204:	6123      	str	r3, [r4, #16]
 800f206:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d0a6      	beq.n	800f15c <_printf_float+0x84>
 800f20e:	232d      	movs	r3, #45	@ 0x2d
 800f210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f214:	e7a2      	b.n	800f15c <_printf_float+0x84>
 800f216:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f21a:	d1c4      	bne.n	800f1a6 <_printf_float+0xce>
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d1c2      	bne.n	800f1a6 <_printf_float+0xce>
 800f220:	2301      	movs	r3, #1
 800f222:	e7bf      	b.n	800f1a4 <_printf_float+0xcc>
 800f224:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f228:	d9db      	bls.n	800f1e2 <_printf_float+0x10a>
 800f22a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f22e:	d118      	bne.n	800f262 <_printf_float+0x18a>
 800f230:	2900      	cmp	r1, #0
 800f232:	6863      	ldr	r3, [r4, #4]
 800f234:	dd0b      	ble.n	800f24e <_printf_float+0x176>
 800f236:	6121      	str	r1, [r4, #16]
 800f238:	b913      	cbnz	r3, 800f240 <_printf_float+0x168>
 800f23a:	6822      	ldr	r2, [r4, #0]
 800f23c:	07d0      	lsls	r0, r2, #31
 800f23e:	d502      	bpl.n	800f246 <_printf_float+0x16e>
 800f240:	3301      	adds	r3, #1
 800f242:	440b      	add	r3, r1
 800f244:	6123      	str	r3, [r4, #16]
 800f246:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f248:	f04f 0a00 	mov.w	sl, #0
 800f24c:	e7db      	b.n	800f206 <_printf_float+0x12e>
 800f24e:	b913      	cbnz	r3, 800f256 <_printf_float+0x17e>
 800f250:	6822      	ldr	r2, [r4, #0]
 800f252:	07d2      	lsls	r2, r2, #31
 800f254:	d501      	bpl.n	800f25a <_printf_float+0x182>
 800f256:	3302      	adds	r3, #2
 800f258:	e7f4      	b.n	800f244 <_printf_float+0x16c>
 800f25a:	2301      	movs	r3, #1
 800f25c:	e7f2      	b.n	800f244 <_printf_float+0x16c>
 800f25e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f262:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f264:	4299      	cmp	r1, r3
 800f266:	db05      	blt.n	800f274 <_printf_float+0x19c>
 800f268:	6823      	ldr	r3, [r4, #0]
 800f26a:	6121      	str	r1, [r4, #16]
 800f26c:	07d8      	lsls	r0, r3, #31
 800f26e:	d5ea      	bpl.n	800f246 <_printf_float+0x16e>
 800f270:	1c4b      	adds	r3, r1, #1
 800f272:	e7e7      	b.n	800f244 <_printf_float+0x16c>
 800f274:	2900      	cmp	r1, #0
 800f276:	bfd4      	ite	le
 800f278:	f1c1 0202 	rsble	r2, r1, #2
 800f27c:	2201      	movgt	r2, #1
 800f27e:	4413      	add	r3, r2
 800f280:	e7e0      	b.n	800f244 <_printf_float+0x16c>
 800f282:	6823      	ldr	r3, [r4, #0]
 800f284:	055a      	lsls	r2, r3, #21
 800f286:	d407      	bmi.n	800f298 <_printf_float+0x1c0>
 800f288:	6923      	ldr	r3, [r4, #16]
 800f28a:	4642      	mov	r2, r8
 800f28c:	4631      	mov	r1, r6
 800f28e:	4628      	mov	r0, r5
 800f290:	47b8      	blx	r7
 800f292:	3001      	adds	r0, #1
 800f294:	d12a      	bne.n	800f2ec <_printf_float+0x214>
 800f296:	e76b      	b.n	800f170 <_printf_float+0x98>
 800f298:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f29c:	f240 80e0 	bls.w	800f460 <_printf_float+0x388>
 800f2a0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f2a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ac:	d133      	bne.n	800f316 <_printf_float+0x23e>
 800f2ae:	4a38      	ldr	r2, [pc, #224]	@ (800f390 <_printf_float+0x2b8>)
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	4631      	mov	r1, r6
 800f2b4:	4628      	mov	r0, r5
 800f2b6:	47b8      	blx	r7
 800f2b8:	3001      	adds	r0, #1
 800f2ba:	f43f af59 	beq.w	800f170 <_printf_float+0x98>
 800f2be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f2c2:	4543      	cmp	r3, r8
 800f2c4:	db02      	blt.n	800f2cc <_printf_float+0x1f4>
 800f2c6:	6823      	ldr	r3, [r4, #0]
 800f2c8:	07d8      	lsls	r0, r3, #31
 800f2ca:	d50f      	bpl.n	800f2ec <_printf_float+0x214>
 800f2cc:	9b05      	ldr	r3, [sp, #20]
 800f2ce:	465a      	mov	r2, fp
 800f2d0:	4631      	mov	r1, r6
 800f2d2:	4628      	mov	r0, r5
 800f2d4:	47b8      	blx	r7
 800f2d6:	3001      	adds	r0, #1
 800f2d8:	f43f af4a 	beq.w	800f170 <_printf_float+0x98>
 800f2dc:	f04f 0900 	mov.w	r9, #0
 800f2e0:	f108 38ff 	add.w	r8, r8, #4294967295
 800f2e4:	f104 0a1a 	add.w	sl, r4, #26
 800f2e8:	45c8      	cmp	r8, r9
 800f2ea:	dc09      	bgt.n	800f300 <_printf_float+0x228>
 800f2ec:	6823      	ldr	r3, [r4, #0]
 800f2ee:	079b      	lsls	r3, r3, #30
 800f2f0:	f100 8107 	bmi.w	800f502 <_printf_float+0x42a>
 800f2f4:	68e0      	ldr	r0, [r4, #12]
 800f2f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2f8:	4298      	cmp	r0, r3
 800f2fa:	bfb8      	it	lt
 800f2fc:	4618      	movlt	r0, r3
 800f2fe:	e739      	b.n	800f174 <_printf_float+0x9c>
 800f300:	2301      	movs	r3, #1
 800f302:	4652      	mov	r2, sl
 800f304:	4631      	mov	r1, r6
 800f306:	4628      	mov	r0, r5
 800f308:	47b8      	blx	r7
 800f30a:	3001      	adds	r0, #1
 800f30c:	f43f af30 	beq.w	800f170 <_printf_float+0x98>
 800f310:	f109 0901 	add.w	r9, r9, #1
 800f314:	e7e8      	b.n	800f2e8 <_printf_float+0x210>
 800f316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f318:	2b00      	cmp	r3, #0
 800f31a:	dc3b      	bgt.n	800f394 <_printf_float+0x2bc>
 800f31c:	4a1c      	ldr	r2, [pc, #112]	@ (800f390 <_printf_float+0x2b8>)
 800f31e:	2301      	movs	r3, #1
 800f320:	4631      	mov	r1, r6
 800f322:	4628      	mov	r0, r5
 800f324:	47b8      	blx	r7
 800f326:	3001      	adds	r0, #1
 800f328:	f43f af22 	beq.w	800f170 <_printf_float+0x98>
 800f32c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f330:	ea59 0303 	orrs.w	r3, r9, r3
 800f334:	d102      	bne.n	800f33c <_printf_float+0x264>
 800f336:	6823      	ldr	r3, [r4, #0]
 800f338:	07d9      	lsls	r1, r3, #31
 800f33a:	d5d7      	bpl.n	800f2ec <_printf_float+0x214>
 800f33c:	9b05      	ldr	r3, [sp, #20]
 800f33e:	465a      	mov	r2, fp
 800f340:	4631      	mov	r1, r6
 800f342:	4628      	mov	r0, r5
 800f344:	47b8      	blx	r7
 800f346:	3001      	adds	r0, #1
 800f348:	f43f af12 	beq.w	800f170 <_printf_float+0x98>
 800f34c:	f04f 0a00 	mov.w	sl, #0
 800f350:	f104 0b1a 	add.w	fp, r4, #26
 800f354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f356:	425b      	negs	r3, r3
 800f358:	4553      	cmp	r3, sl
 800f35a:	dc01      	bgt.n	800f360 <_printf_float+0x288>
 800f35c:	464b      	mov	r3, r9
 800f35e:	e794      	b.n	800f28a <_printf_float+0x1b2>
 800f360:	2301      	movs	r3, #1
 800f362:	465a      	mov	r2, fp
 800f364:	4631      	mov	r1, r6
 800f366:	4628      	mov	r0, r5
 800f368:	47b8      	blx	r7
 800f36a:	3001      	adds	r0, #1
 800f36c:	f43f af00 	beq.w	800f170 <_printf_float+0x98>
 800f370:	f10a 0a01 	add.w	sl, sl, #1
 800f374:	e7ee      	b.n	800f354 <_printf_float+0x27c>
 800f376:	bf00      	nop
 800f378:	ffffffff 	.word	0xffffffff
 800f37c:	7fefffff 	.word	0x7fefffff
 800f380:	080131f0 	.word	0x080131f0
 800f384:	080131f4 	.word	0x080131f4
 800f388:	080131f8 	.word	0x080131f8
 800f38c:	080131fc 	.word	0x080131fc
 800f390:	080135a0 	.word	0x080135a0
 800f394:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f396:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f39a:	4553      	cmp	r3, sl
 800f39c:	bfa8      	it	ge
 800f39e:	4653      	movge	r3, sl
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	4699      	mov	r9, r3
 800f3a4:	dc37      	bgt.n	800f416 <_printf_float+0x33e>
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	9307      	str	r3, [sp, #28]
 800f3aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f3ae:	f104 021a 	add.w	r2, r4, #26
 800f3b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f3b4:	9907      	ldr	r1, [sp, #28]
 800f3b6:	9306      	str	r3, [sp, #24]
 800f3b8:	eba3 0309 	sub.w	r3, r3, r9
 800f3bc:	428b      	cmp	r3, r1
 800f3be:	dc31      	bgt.n	800f424 <_printf_float+0x34c>
 800f3c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3c2:	459a      	cmp	sl, r3
 800f3c4:	dc3b      	bgt.n	800f43e <_printf_float+0x366>
 800f3c6:	6823      	ldr	r3, [r4, #0]
 800f3c8:	07da      	lsls	r2, r3, #31
 800f3ca:	d438      	bmi.n	800f43e <_printf_float+0x366>
 800f3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3ce:	ebaa 0903 	sub.w	r9, sl, r3
 800f3d2:	9b06      	ldr	r3, [sp, #24]
 800f3d4:	ebaa 0303 	sub.w	r3, sl, r3
 800f3d8:	4599      	cmp	r9, r3
 800f3da:	bfa8      	it	ge
 800f3dc:	4699      	movge	r9, r3
 800f3de:	f1b9 0f00 	cmp.w	r9, #0
 800f3e2:	dc34      	bgt.n	800f44e <_printf_float+0x376>
 800f3e4:	f04f 0800 	mov.w	r8, #0
 800f3e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f3ec:	f104 0b1a 	add.w	fp, r4, #26
 800f3f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3f2:	ebaa 0303 	sub.w	r3, sl, r3
 800f3f6:	eba3 0309 	sub.w	r3, r3, r9
 800f3fa:	4543      	cmp	r3, r8
 800f3fc:	f77f af76 	ble.w	800f2ec <_printf_float+0x214>
 800f400:	2301      	movs	r3, #1
 800f402:	465a      	mov	r2, fp
 800f404:	4631      	mov	r1, r6
 800f406:	4628      	mov	r0, r5
 800f408:	47b8      	blx	r7
 800f40a:	3001      	adds	r0, #1
 800f40c:	f43f aeb0 	beq.w	800f170 <_printf_float+0x98>
 800f410:	f108 0801 	add.w	r8, r8, #1
 800f414:	e7ec      	b.n	800f3f0 <_printf_float+0x318>
 800f416:	4642      	mov	r2, r8
 800f418:	4631      	mov	r1, r6
 800f41a:	4628      	mov	r0, r5
 800f41c:	47b8      	blx	r7
 800f41e:	3001      	adds	r0, #1
 800f420:	d1c1      	bne.n	800f3a6 <_printf_float+0x2ce>
 800f422:	e6a5      	b.n	800f170 <_printf_float+0x98>
 800f424:	2301      	movs	r3, #1
 800f426:	4631      	mov	r1, r6
 800f428:	4628      	mov	r0, r5
 800f42a:	9206      	str	r2, [sp, #24]
 800f42c:	47b8      	blx	r7
 800f42e:	3001      	adds	r0, #1
 800f430:	f43f ae9e 	beq.w	800f170 <_printf_float+0x98>
 800f434:	9b07      	ldr	r3, [sp, #28]
 800f436:	9a06      	ldr	r2, [sp, #24]
 800f438:	3301      	adds	r3, #1
 800f43a:	9307      	str	r3, [sp, #28]
 800f43c:	e7b9      	b.n	800f3b2 <_printf_float+0x2da>
 800f43e:	9b05      	ldr	r3, [sp, #20]
 800f440:	465a      	mov	r2, fp
 800f442:	4631      	mov	r1, r6
 800f444:	4628      	mov	r0, r5
 800f446:	47b8      	blx	r7
 800f448:	3001      	adds	r0, #1
 800f44a:	d1bf      	bne.n	800f3cc <_printf_float+0x2f4>
 800f44c:	e690      	b.n	800f170 <_printf_float+0x98>
 800f44e:	9a06      	ldr	r2, [sp, #24]
 800f450:	464b      	mov	r3, r9
 800f452:	4442      	add	r2, r8
 800f454:	4631      	mov	r1, r6
 800f456:	4628      	mov	r0, r5
 800f458:	47b8      	blx	r7
 800f45a:	3001      	adds	r0, #1
 800f45c:	d1c2      	bne.n	800f3e4 <_printf_float+0x30c>
 800f45e:	e687      	b.n	800f170 <_printf_float+0x98>
 800f460:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f464:	f1b9 0f01 	cmp.w	r9, #1
 800f468:	dc01      	bgt.n	800f46e <_printf_float+0x396>
 800f46a:	07db      	lsls	r3, r3, #31
 800f46c:	d536      	bpl.n	800f4dc <_printf_float+0x404>
 800f46e:	2301      	movs	r3, #1
 800f470:	4642      	mov	r2, r8
 800f472:	4631      	mov	r1, r6
 800f474:	4628      	mov	r0, r5
 800f476:	47b8      	blx	r7
 800f478:	3001      	adds	r0, #1
 800f47a:	f43f ae79 	beq.w	800f170 <_printf_float+0x98>
 800f47e:	9b05      	ldr	r3, [sp, #20]
 800f480:	465a      	mov	r2, fp
 800f482:	4631      	mov	r1, r6
 800f484:	4628      	mov	r0, r5
 800f486:	47b8      	blx	r7
 800f488:	3001      	adds	r0, #1
 800f48a:	f43f ae71 	beq.w	800f170 <_printf_float+0x98>
 800f48e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f492:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f49a:	f109 39ff 	add.w	r9, r9, #4294967295
 800f49e:	d018      	beq.n	800f4d2 <_printf_float+0x3fa>
 800f4a0:	464b      	mov	r3, r9
 800f4a2:	f108 0201 	add.w	r2, r8, #1
 800f4a6:	4631      	mov	r1, r6
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	47b8      	blx	r7
 800f4ac:	3001      	adds	r0, #1
 800f4ae:	d10c      	bne.n	800f4ca <_printf_float+0x3f2>
 800f4b0:	e65e      	b.n	800f170 <_printf_float+0x98>
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	465a      	mov	r2, fp
 800f4b6:	4631      	mov	r1, r6
 800f4b8:	4628      	mov	r0, r5
 800f4ba:	47b8      	blx	r7
 800f4bc:	3001      	adds	r0, #1
 800f4be:	f43f ae57 	beq.w	800f170 <_printf_float+0x98>
 800f4c2:	f108 0801 	add.w	r8, r8, #1
 800f4c6:	45c8      	cmp	r8, r9
 800f4c8:	dbf3      	blt.n	800f4b2 <_printf_float+0x3da>
 800f4ca:	4653      	mov	r3, sl
 800f4cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f4d0:	e6dc      	b.n	800f28c <_printf_float+0x1b4>
 800f4d2:	f04f 0800 	mov.w	r8, #0
 800f4d6:	f104 0b1a 	add.w	fp, r4, #26
 800f4da:	e7f4      	b.n	800f4c6 <_printf_float+0x3ee>
 800f4dc:	2301      	movs	r3, #1
 800f4de:	4642      	mov	r2, r8
 800f4e0:	e7e1      	b.n	800f4a6 <_printf_float+0x3ce>
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	464a      	mov	r2, r9
 800f4e6:	4631      	mov	r1, r6
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	47b8      	blx	r7
 800f4ec:	3001      	adds	r0, #1
 800f4ee:	f43f ae3f 	beq.w	800f170 <_printf_float+0x98>
 800f4f2:	f108 0801 	add.w	r8, r8, #1
 800f4f6:	68e3      	ldr	r3, [r4, #12]
 800f4f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f4fa:	1a5b      	subs	r3, r3, r1
 800f4fc:	4543      	cmp	r3, r8
 800f4fe:	dcf0      	bgt.n	800f4e2 <_printf_float+0x40a>
 800f500:	e6f8      	b.n	800f2f4 <_printf_float+0x21c>
 800f502:	f04f 0800 	mov.w	r8, #0
 800f506:	f104 0919 	add.w	r9, r4, #25
 800f50a:	e7f4      	b.n	800f4f6 <_printf_float+0x41e>

0800f50c <_printf_common>:
 800f50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f510:	4616      	mov	r6, r2
 800f512:	4698      	mov	r8, r3
 800f514:	688a      	ldr	r2, [r1, #8]
 800f516:	690b      	ldr	r3, [r1, #16]
 800f518:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f51c:	4293      	cmp	r3, r2
 800f51e:	bfb8      	it	lt
 800f520:	4613      	movlt	r3, r2
 800f522:	6033      	str	r3, [r6, #0]
 800f524:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f528:	4607      	mov	r7, r0
 800f52a:	460c      	mov	r4, r1
 800f52c:	b10a      	cbz	r2, 800f532 <_printf_common+0x26>
 800f52e:	3301      	adds	r3, #1
 800f530:	6033      	str	r3, [r6, #0]
 800f532:	6823      	ldr	r3, [r4, #0]
 800f534:	0699      	lsls	r1, r3, #26
 800f536:	bf42      	ittt	mi
 800f538:	6833      	ldrmi	r3, [r6, #0]
 800f53a:	3302      	addmi	r3, #2
 800f53c:	6033      	strmi	r3, [r6, #0]
 800f53e:	6825      	ldr	r5, [r4, #0]
 800f540:	f015 0506 	ands.w	r5, r5, #6
 800f544:	d106      	bne.n	800f554 <_printf_common+0x48>
 800f546:	f104 0a19 	add.w	sl, r4, #25
 800f54a:	68e3      	ldr	r3, [r4, #12]
 800f54c:	6832      	ldr	r2, [r6, #0]
 800f54e:	1a9b      	subs	r3, r3, r2
 800f550:	42ab      	cmp	r3, r5
 800f552:	dc26      	bgt.n	800f5a2 <_printf_common+0x96>
 800f554:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f558:	6822      	ldr	r2, [r4, #0]
 800f55a:	3b00      	subs	r3, #0
 800f55c:	bf18      	it	ne
 800f55e:	2301      	movne	r3, #1
 800f560:	0692      	lsls	r2, r2, #26
 800f562:	d42b      	bmi.n	800f5bc <_printf_common+0xb0>
 800f564:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f568:	4641      	mov	r1, r8
 800f56a:	4638      	mov	r0, r7
 800f56c:	47c8      	blx	r9
 800f56e:	3001      	adds	r0, #1
 800f570:	d01e      	beq.n	800f5b0 <_printf_common+0xa4>
 800f572:	6823      	ldr	r3, [r4, #0]
 800f574:	6922      	ldr	r2, [r4, #16]
 800f576:	f003 0306 	and.w	r3, r3, #6
 800f57a:	2b04      	cmp	r3, #4
 800f57c:	bf02      	ittt	eq
 800f57e:	68e5      	ldreq	r5, [r4, #12]
 800f580:	6833      	ldreq	r3, [r6, #0]
 800f582:	1aed      	subeq	r5, r5, r3
 800f584:	68a3      	ldr	r3, [r4, #8]
 800f586:	bf0c      	ite	eq
 800f588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f58c:	2500      	movne	r5, #0
 800f58e:	4293      	cmp	r3, r2
 800f590:	bfc4      	itt	gt
 800f592:	1a9b      	subgt	r3, r3, r2
 800f594:	18ed      	addgt	r5, r5, r3
 800f596:	2600      	movs	r6, #0
 800f598:	341a      	adds	r4, #26
 800f59a:	42b5      	cmp	r5, r6
 800f59c:	d11a      	bne.n	800f5d4 <_printf_common+0xc8>
 800f59e:	2000      	movs	r0, #0
 800f5a0:	e008      	b.n	800f5b4 <_printf_common+0xa8>
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	4652      	mov	r2, sl
 800f5a6:	4641      	mov	r1, r8
 800f5a8:	4638      	mov	r0, r7
 800f5aa:	47c8      	blx	r9
 800f5ac:	3001      	adds	r0, #1
 800f5ae:	d103      	bne.n	800f5b8 <_printf_common+0xac>
 800f5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5b8:	3501      	adds	r5, #1
 800f5ba:	e7c6      	b.n	800f54a <_printf_common+0x3e>
 800f5bc:	18e1      	adds	r1, r4, r3
 800f5be:	1c5a      	adds	r2, r3, #1
 800f5c0:	2030      	movs	r0, #48	@ 0x30
 800f5c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f5c6:	4422      	add	r2, r4
 800f5c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f5cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f5d0:	3302      	adds	r3, #2
 800f5d2:	e7c7      	b.n	800f564 <_printf_common+0x58>
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	4622      	mov	r2, r4
 800f5d8:	4641      	mov	r1, r8
 800f5da:	4638      	mov	r0, r7
 800f5dc:	47c8      	blx	r9
 800f5de:	3001      	adds	r0, #1
 800f5e0:	d0e6      	beq.n	800f5b0 <_printf_common+0xa4>
 800f5e2:	3601      	adds	r6, #1
 800f5e4:	e7d9      	b.n	800f59a <_printf_common+0x8e>
	...

0800f5e8 <_printf_i>:
 800f5e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5ec:	7e0f      	ldrb	r7, [r1, #24]
 800f5ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f5f0:	2f78      	cmp	r7, #120	@ 0x78
 800f5f2:	4691      	mov	r9, r2
 800f5f4:	4680      	mov	r8, r0
 800f5f6:	460c      	mov	r4, r1
 800f5f8:	469a      	mov	sl, r3
 800f5fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f5fe:	d807      	bhi.n	800f610 <_printf_i+0x28>
 800f600:	2f62      	cmp	r7, #98	@ 0x62
 800f602:	d80a      	bhi.n	800f61a <_printf_i+0x32>
 800f604:	2f00      	cmp	r7, #0
 800f606:	f000 80d2 	beq.w	800f7ae <_printf_i+0x1c6>
 800f60a:	2f58      	cmp	r7, #88	@ 0x58
 800f60c:	f000 80b9 	beq.w	800f782 <_printf_i+0x19a>
 800f610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f614:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f618:	e03a      	b.n	800f690 <_printf_i+0xa8>
 800f61a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f61e:	2b15      	cmp	r3, #21
 800f620:	d8f6      	bhi.n	800f610 <_printf_i+0x28>
 800f622:	a101      	add	r1, pc, #4	@ (adr r1, 800f628 <_printf_i+0x40>)
 800f624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f628:	0800f681 	.word	0x0800f681
 800f62c:	0800f695 	.word	0x0800f695
 800f630:	0800f611 	.word	0x0800f611
 800f634:	0800f611 	.word	0x0800f611
 800f638:	0800f611 	.word	0x0800f611
 800f63c:	0800f611 	.word	0x0800f611
 800f640:	0800f695 	.word	0x0800f695
 800f644:	0800f611 	.word	0x0800f611
 800f648:	0800f611 	.word	0x0800f611
 800f64c:	0800f611 	.word	0x0800f611
 800f650:	0800f611 	.word	0x0800f611
 800f654:	0800f795 	.word	0x0800f795
 800f658:	0800f6bf 	.word	0x0800f6bf
 800f65c:	0800f74f 	.word	0x0800f74f
 800f660:	0800f611 	.word	0x0800f611
 800f664:	0800f611 	.word	0x0800f611
 800f668:	0800f7b7 	.word	0x0800f7b7
 800f66c:	0800f611 	.word	0x0800f611
 800f670:	0800f6bf 	.word	0x0800f6bf
 800f674:	0800f611 	.word	0x0800f611
 800f678:	0800f611 	.word	0x0800f611
 800f67c:	0800f757 	.word	0x0800f757
 800f680:	6833      	ldr	r3, [r6, #0]
 800f682:	1d1a      	adds	r2, r3, #4
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	6032      	str	r2, [r6, #0]
 800f688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f68c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f690:	2301      	movs	r3, #1
 800f692:	e09d      	b.n	800f7d0 <_printf_i+0x1e8>
 800f694:	6833      	ldr	r3, [r6, #0]
 800f696:	6820      	ldr	r0, [r4, #0]
 800f698:	1d19      	adds	r1, r3, #4
 800f69a:	6031      	str	r1, [r6, #0]
 800f69c:	0606      	lsls	r6, r0, #24
 800f69e:	d501      	bpl.n	800f6a4 <_printf_i+0xbc>
 800f6a0:	681d      	ldr	r5, [r3, #0]
 800f6a2:	e003      	b.n	800f6ac <_printf_i+0xc4>
 800f6a4:	0645      	lsls	r5, r0, #25
 800f6a6:	d5fb      	bpl.n	800f6a0 <_printf_i+0xb8>
 800f6a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f6ac:	2d00      	cmp	r5, #0
 800f6ae:	da03      	bge.n	800f6b8 <_printf_i+0xd0>
 800f6b0:	232d      	movs	r3, #45	@ 0x2d
 800f6b2:	426d      	negs	r5, r5
 800f6b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6b8:	4859      	ldr	r0, [pc, #356]	@ (800f820 <_printf_i+0x238>)
 800f6ba:	230a      	movs	r3, #10
 800f6bc:	e011      	b.n	800f6e2 <_printf_i+0xfa>
 800f6be:	6821      	ldr	r1, [r4, #0]
 800f6c0:	6833      	ldr	r3, [r6, #0]
 800f6c2:	0608      	lsls	r0, r1, #24
 800f6c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f6c8:	d402      	bmi.n	800f6d0 <_printf_i+0xe8>
 800f6ca:	0649      	lsls	r1, r1, #25
 800f6cc:	bf48      	it	mi
 800f6ce:	b2ad      	uxthmi	r5, r5
 800f6d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f6d2:	4853      	ldr	r0, [pc, #332]	@ (800f820 <_printf_i+0x238>)
 800f6d4:	6033      	str	r3, [r6, #0]
 800f6d6:	bf14      	ite	ne
 800f6d8:	230a      	movne	r3, #10
 800f6da:	2308      	moveq	r3, #8
 800f6dc:	2100      	movs	r1, #0
 800f6de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f6e2:	6866      	ldr	r6, [r4, #4]
 800f6e4:	60a6      	str	r6, [r4, #8]
 800f6e6:	2e00      	cmp	r6, #0
 800f6e8:	bfa2      	ittt	ge
 800f6ea:	6821      	ldrge	r1, [r4, #0]
 800f6ec:	f021 0104 	bicge.w	r1, r1, #4
 800f6f0:	6021      	strge	r1, [r4, #0]
 800f6f2:	b90d      	cbnz	r5, 800f6f8 <_printf_i+0x110>
 800f6f4:	2e00      	cmp	r6, #0
 800f6f6:	d04b      	beq.n	800f790 <_printf_i+0x1a8>
 800f6f8:	4616      	mov	r6, r2
 800f6fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800f6fe:	fb03 5711 	mls	r7, r3, r1, r5
 800f702:	5dc7      	ldrb	r7, [r0, r7]
 800f704:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f708:	462f      	mov	r7, r5
 800f70a:	42bb      	cmp	r3, r7
 800f70c:	460d      	mov	r5, r1
 800f70e:	d9f4      	bls.n	800f6fa <_printf_i+0x112>
 800f710:	2b08      	cmp	r3, #8
 800f712:	d10b      	bne.n	800f72c <_printf_i+0x144>
 800f714:	6823      	ldr	r3, [r4, #0]
 800f716:	07df      	lsls	r7, r3, #31
 800f718:	d508      	bpl.n	800f72c <_printf_i+0x144>
 800f71a:	6923      	ldr	r3, [r4, #16]
 800f71c:	6861      	ldr	r1, [r4, #4]
 800f71e:	4299      	cmp	r1, r3
 800f720:	bfde      	ittt	le
 800f722:	2330      	movle	r3, #48	@ 0x30
 800f724:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f728:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f72c:	1b92      	subs	r2, r2, r6
 800f72e:	6122      	str	r2, [r4, #16]
 800f730:	f8cd a000 	str.w	sl, [sp]
 800f734:	464b      	mov	r3, r9
 800f736:	aa03      	add	r2, sp, #12
 800f738:	4621      	mov	r1, r4
 800f73a:	4640      	mov	r0, r8
 800f73c:	f7ff fee6 	bl	800f50c <_printf_common>
 800f740:	3001      	adds	r0, #1
 800f742:	d14a      	bne.n	800f7da <_printf_i+0x1f2>
 800f744:	f04f 30ff 	mov.w	r0, #4294967295
 800f748:	b004      	add	sp, #16
 800f74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f74e:	6823      	ldr	r3, [r4, #0]
 800f750:	f043 0320 	orr.w	r3, r3, #32
 800f754:	6023      	str	r3, [r4, #0]
 800f756:	4833      	ldr	r0, [pc, #204]	@ (800f824 <_printf_i+0x23c>)
 800f758:	2778      	movs	r7, #120	@ 0x78
 800f75a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f75e:	6823      	ldr	r3, [r4, #0]
 800f760:	6831      	ldr	r1, [r6, #0]
 800f762:	061f      	lsls	r7, r3, #24
 800f764:	f851 5b04 	ldr.w	r5, [r1], #4
 800f768:	d402      	bmi.n	800f770 <_printf_i+0x188>
 800f76a:	065f      	lsls	r7, r3, #25
 800f76c:	bf48      	it	mi
 800f76e:	b2ad      	uxthmi	r5, r5
 800f770:	6031      	str	r1, [r6, #0]
 800f772:	07d9      	lsls	r1, r3, #31
 800f774:	bf44      	itt	mi
 800f776:	f043 0320 	orrmi.w	r3, r3, #32
 800f77a:	6023      	strmi	r3, [r4, #0]
 800f77c:	b11d      	cbz	r5, 800f786 <_printf_i+0x19e>
 800f77e:	2310      	movs	r3, #16
 800f780:	e7ac      	b.n	800f6dc <_printf_i+0xf4>
 800f782:	4827      	ldr	r0, [pc, #156]	@ (800f820 <_printf_i+0x238>)
 800f784:	e7e9      	b.n	800f75a <_printf_i+0x172>
 800f786:	6823      	ldr	r3, [r4, #0]
 800f788:	f023 0320 	bic.w	r3, r3, #32
 800f78c:	6023      	str	r3, [r4, #0]
 800f78e:	e7f6      	b.n	800f77e <_printf_i+0x196>
 800f790:	4616      	mov	r6, r2
 800f792:	e7bd      	b.n	800f710 <_printf_i+0x128>
 800f794:	6833      	ldr	r3, [r6, #0]
 800f796:	6825      	ldr	r5, [r4, #0]
 800f798:	6961      	ldr	r1, [r4, #20]
 800f79a:	1d18      	adds	r0, r3, #4
 800f79c:	6030      	str	r0, [r6, #0]
 800f79e:	062e      	lsls	r6, r5, #24
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	d501      	bpl.n	800f7a8 <_printf_i+0x1c0>
 800f7a4:	6019      	str	r1, [r3, #0]
 800f7a6:	e002      	b.n	800f7ae <_printf_i+0x1c6>
 800f7a8:	0668      	lsls	r0, r5, #25
 800f7aa:	d5fb      	bpl.n	800f7a4 <_printf_i+0x1bc>
 800f7ac:	8019      	strh	r1, [r3, #0]
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	6123      	str	r3, [r4, #16]
 800f7b2:	4616      	mov	r6, r2
 800f7b4:	e7bc      	b.n	800f730 <_printf_i+0x148>
 800f7b6:	6833      	ldr	r3, [r6, #0]
 800f7b8:	1d1a      	adds	r2, r3, #4
 800f7ba:	6032      	str	r2, [r6, #0]
 800f7bc:	681e      	ldr	r6, [r3, #0]
 800f7be:	6862      	ldr	r2, [r4, #4]
 800f7c0:	2100      	movs	r1, #0
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	f7f0 fda4 	bl	8000310 <memchr>
 800f7c8:	b108      	cbz	r0, 800f7ce <_printf_i+0x1e6>
 800f7ca:	1b80      	subs	r0, r0, r6
 800f7cc:	6060      	str	r0, [r4, #4]
 800f7ce:	6863      	ldr	r3, [r4, #4]
 800f7d0:	6123      	str	r3, [r4, #16]
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f7d8:	e7aa      	b.n	800f730 <_printf_i+0x148>
 800f7da:	6923      	ldr	r3, [r4, #16]
 800f7dc:	4632      	mov	r2, r6
 800f7de:	4649      	mov	r1, r9
 800f7e0:	4640      	mov	r0, r8
 800f7e2:	47d0      	blx	sl
 800f7e4:	3001      	adds	r0, #1
 800f7e6:	d0ad      	beq.n	800f744 <_printf_i+0x15c>
 800f7e8:	6823      	ldr	r3, [r4, #0]
 800f7ea:	079b      	lsls	r3, r3, #30
 800f7ec:	d413      	bmi.n	800f816 <_printf_i+0x22e>
 800f7ee:	68e0      	ldr	r0, [r4, #12]
 800f7f0:	9b03      	ldr	r3, [sp, #12]
 800f7f2:	4298      	cmp	r0, r3
 800f7f4:	bfb8      	it	lt
 800f7f6:	4618      	movlt	r0, r3
 800f7f8:	e7a6      	b.n	800f748 <_printf_i+0x160>
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	4632      	mov	r2, r6
 800f7fe:	4649      	mov	r1, r9
 800f800:	4640      	mov	r0, r8
 800f802:	47d0      	blx	sl
 800f804:	3001      	adds	r0, #1
 800f806:	d09d      	beq.n	800f744 <_printf_i+0x15c>
 800f808:	3501      	adds	r5, #1
 800f80a:	68e3      	ldr	r3, [r4, #12]
 800f80c:	9903      	ldr	r1, [sp, #12]
 800f80e:	1a5b      	subs	r3, r3, r1
 800f810:	42ab      	cmp	r3, r5
 800f812:	dcf2      	bgt.n	800f7fa <_printf_i+0x212>
 800f814:	e7eb      	b.n	800f7ee <_printf_i+0x206>
 800f816:	2500      	movs	r5, #0
 800f818:	f104 0619 	add.w	r6, r4, #25
 800f81c:	e7f5      	b.n	800f80a <_printf_i+0x222>
 800f81e:	bf00      	nop
 800f820:	08013200 	.word	0x08013200
 800f824:	08013211 	.word	0x08013211

0800f828 <_scanf_float>:
 800f828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f82c:	b087      	sub	sp, #28
 800f82e:	4617      	mov	r7, r2
 800f830:	9303      	str	r3, [sp, #12]
 800f832:	688b      	ldr	r3, [r1, #8]
 800f834:	1e5a      	subs	r2, r3, #1
 800f836:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f83a:	bf81      	itttt	hi
 800f83c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f840:	eb03 0b05 	addhi.w	fp, r3, r5
 800f844:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f848:	608b      	strhi	r3, [r1, #8]
 800f84a:	680b      	ldr	r3, [r1, #0]
 800f84c:	460a      	mov	r2, r1
 800f84e:	f04f 0500 	mov.w	r5, #0
 800f852:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f856:	f842 3b1c 	str.w	r3, [r2], #28
 800f85a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f85e:	4680      	mov	r8, r0
 800f860:	460c      	mov	r4, r1
 800f862:	bf98      	it	ls
 800f864:	f04f 0b00 	movls.w	fp, #0
 800f868:	9201      	str	r2, [sp, #4]
 800f86a:	4616      	mov	r6, r2
 800f86c:	46aa      	mov	sl, r5
 800f86e:	46a9      	mov	r9, r5
 800f870:	9502      	str	r5, [sp, #8]
 800f872:	68a2      	ldr	r2, [r4, #8]
 800f874:	b152      	cbz	r2, 800f88c <_scanf_float+0x64>
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	2b4e      	cmp	r3, #78	@ 0x4e
 800f87c:	d864      	bhi.n	800f948 <_scanf_float+0x120>
 800f87e:	2b40      	cmp	r3, #64	@ 0x40
 800f880:	d83c      	bhi.n	800f8fc <_scanf_float+0xd4>
 800f882:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f886:	b2c8      	uxtb	r0, r1
 800f888:	280e      	cmp	r0, #14
 800f88a:	d93a      	bls.n	800f902 <_scanf_float+0xda>
 800f88c:	f1b9 0f00 	cmp.w	r9, #0
 800f890:	d003      	beq.n	800f89a <_scanf_float+0x72>
 800f892:	6823      	ldr	r3, [r4, #0]
 800f894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f898:	6023      	str	r3, [r4, #0]
 800f89a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f89e:	f1ba 0f01 	cmp.w	sl, #1
 800f8a2:	f200 8117 	bhi.w	800fad4 <_scanf_float+0x2ac>
 800f8a6:	9b01      	ldr	r3, [sp, #4]
 800f8a8:	429e      	cmp	r6, r3
 800f8aa:	f200 8108 	bhi.w	800fabe <_scanf_float+0x296>
 800f8ae:	2001      	movs	r0, #1
 800f8b0:	b007      	add	sp, #28
 800f8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f8ba:	2a0d      	cmp	r2, #13
 800f8bc:	d8e6      	bhi.n	800f88c <_scanf_float+0x64>
 800f8be:	a101      	add	r1, pc, #4	@ (adr r1, 800f8c4 <_scanf_float+0x9c>)
 800f8c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f8c4:	0800fa0b 	.word	0x0800fa0b
 800f8c8:	0800f88d 	.word	0x0800f88d
 800f8cc:	0800f88d 	.word	0x0800f88d
 800f8d0:	0800f88d 	.word	0x0800f88d
 800f8d4:	0800fa6b 	.word	0x0800fa6b
 800f8d8:	0800fa43 	.word	0x0800fa43
 800f8dc:	0800f88d 	.word	0x0800f88d
 800f8e0:	0800f88d 	.word	0x0800f88d
 800f8e4:	0800fa19 	.word	0x0800fa19
 800f8e8:	0800f88d 	.word	0x0800f88d
 800f8ec:	0800f88d 	.word	0x0800f88d
 800f8f0:	0800f88d 	.word	0x0800f88d
 800f8f4:	0800f88d 	.word	0x0800f88d
 800f8f8:	0800f9d1 	.word	0x0800f9d1
 800f8fc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f900:	e7db      	b.n	800f8ba <_scanf_float+0x92>
 800f902:	290e      	cmp	r1, #14
 800f904:	d8c2      	bhi.n	800f88c <_scanf_float+0x64>
 800f906:	a001      	add	r0, pc, #4	@ (adr r0, 800f90c <_scanf_float+0xe4>)
 800f908:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f90c:	0800f9c1 	.word	0x0800f9c1
 800f910:	0800f88d 	.word	0x0800f88d
 800f914:	0800f9c1 	.word	0x0800f9c1
 800f918:	0800fa57 	.word	0x0800fa57
 800f91c:	0800f88d 	.word	0x0800f88d
 800f920:	0800f969 	.word	0x0800f969
 800f924:	0800f9a7 	.word	0x0800f9a7
 800f928:	0800f9a7 	.word	0x0800f9a7
 800f92c:	0800f9a7 	.word	0x0800f9a7
 800f930:	0800f9a7 	.word	0x0800f9a7
 800f934:	0800f9a7 	.word	0x0800f9a7
 800f938:	0800f9a7 	.word	0x0800f9a7
 800f93c:	0800f9a7 	.word	0x0800f9a7
 800f940:	0800f9a7 	.word	0x0800f9a7
 800f944:	0800f9a7 	.word	0x0800f9a7
 800f948:	2b6e      	cmp	r3, #110	@ 0x6e
 800f94a:	d809      	bhi.n	800f960 <_scanf_float+0x138>
 800f94c:	2b60      	cmp	r3, #96	@ 0x60
 800f94e:	d8b2      	bhi.n	800f8b6 <_scanf_float+0x8e>
 800f950:	2b54      	cmp	r3, #84	@ 0x54
 800f952:	d07b      	beq.n	800fa4c <_scanf_float+0x224>
 800f954:	2b59      	cmp	r3, #89	@ 0x59
 800f956:	d199      	bne.n	800f88c <_scanf_float+0x64>
 800f958:	2d07      	cmp	r5, #7
 800f95a:	d197      	bne.n	800f88c <_scanf_float+0x64>
 800f95c:	2508      	movs	r5, #8
 800f95e:	e02c      	b.n	800f9ba <_scanf_float+0x192>
 800f960:	2b74      	cmp	r3, #116	@ 0x74
 800f962:	d073      	beq.n	800fa4c <_scanf_float+0x224>
 800f964:	2b79      	cmp	r3, #121	@ 0x79
 800f966:	e7f6      	b.n	800f956 <_scanf_float+0x12e>
 800f968:	6821      	ldr	r1, [r4, #0]
 800f96a:	05c8      	lsls	r0, r1, #23
 800f96c:	d51b      	bpl.n	800f9a6 <_scanf_float+0x17e>
 800f96e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f972:	6021      	str	r1, [r4, #0]
 800f974:	f109 0901 	add.w	r9, r9, #1
 800f978:	f1bb 0f00 	cmp.w	fp, #0
 800f97c:	d003      	beq.n	800f986 <_scanf_float+0x15e>
 800f97e:	3201      	adds	r2, #1
 800f980:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f984:	60a2      	str	r2, [r4, #8]
 800f986:	68a3      	ldr	r3, [r4, #8]
 800f988:	3b01      	subs	r3, #1
 800f98a:	60a3      	str	r3, [r4, #8]
 800f98c:	6923      	ldr	r3, [r4, #16]
 800f98e:	3301      	adds	r3, #1
 800f990:	6123      	str	r3, [r4, #16]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	3b01      	subs	r3, #1
 800f996:	2b00      	cmp	r3, #0
 800f998:	607b      	str	r3, [r7, #4]
 800f99a:	f340 8087 	ble.w	800faac <_scanf_float+0x284>
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	3301      	adds	r3, #1
 800f9a2:	603b      	str	r3, [r7, #0]
 800f9a4:	e765      	b.n	800f872 <_scanf_float+0x4a>
 800f9a6:	eb1a 0105 	adds.w	r1, sl, r5
 800f9aa:	f47f af6f 	bne.w	800f88c <_scanf_float+0x64>
 800f9ae:	6822      	ldr	r2, [r4, #0]
 800f9b0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f9b4:	6022      	str	r2, [r4, #0]
 800f9b6:	460d      	mov	r5, r1
 800f9b8:	468a      	mov	sl, r1
 800f9ba:	f806 3b01 	strb.w	r3, [r6], #1
 800f9be:	e7e2      	b.n	800f986 <_scanf_float+0x15e>
 800f9c0:	6822      	ldr	r2, [r4, #0]
 800f9c2:	0610      	lsls	r0, r2, #24
 800f9c4:	f57f af62 	bpl.w	800f88c <_scanf_float+0x64>
 800f9c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f9cc:	6022      	str	r2, [r4, #0]
 800f9ce:	e7f4      	b.n	800f9ba <_scanf_float+0x192>
 800f9d0:	f1ba 0f00 	cmp.w	sl, #0
 800f9d4:	d10e      	bne.n	800f9f4 <_scanf_float+0x1cc>
 800f9d6:	f1b9 0f00 	cmp.w	r9, #0
 800f9da:	d10e      	bne.n	800f9fa <_scanf_float+0x1d2>
 800f9dc:	6822      	ldr	r2, [r4, #0]
 800f9de:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f9e2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f9e6:	d108      	bne.n	800f9fa <_scanf_float+0x1d2>
 800f9e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f9ec:	6022      	str	r2, [r4, #0]
 800f9ee:	f04f 0a01 	mov.w	sl, #1
 800f9f2:	e7e2      	b.n	800f9ba <_scanf_float+0x192>
 800f9f4:	f1ba 0f02 	cmp.w	sl, #2
 800f9f8:	d055      	beq.n	800faa6 <_scanf_float+0x27e>
 800f9fa:	2d01      	cmp	r5, #1
 800f9fc:	d002      	beq.n	800fa04 <_scanf_float+0x1dc>
 800f9fe:	2d04      	cmp	r5, #4
 800fa00:	f47f af44 	bne.w	800f88c <_scanf_float+0x64>
 800fa04:	3501      	adds	r5, #1
 800fa06:	b2ed      	uxtb	r5, r5
 800fa08:	e7d7      	b.n	800f9ba <_scanf_float+0x192>
 800fa0a:	f1ba 0f01 	cmp.w	sl, #1
 800fa0e:	f47f af3d 	bne.w	800f88c <_scanf_float+0x64>
 800fa12:	f04f 0a02 	mov.w	sl, #2
 800fa16:	e7d0      	b.n	800f9ba <_scanf_float+0x192>
 800fa18:	b97d      	cbnz	r5, 800fa3a <_scanf_float+0x212>
 800fa1a:	f1b9 0f00 	cmp.w	r9, #0
 800fa1e:	f47f af38 	bne.w	800f892 <_scanf_float+0x6a>
 800fa22:	6822      	ldr	r2, [r4, #0]
 800fa24:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fa28:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fa2c:	f040 8101 	bne.w	800fc32 <_scanf_float+0x40a>
 800fa30:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fa34:	6022      	str	r2, [r4, #0]
 800fa36:	2501      	movs	r5, #1
 800fa38:	e7bf      	b.n	800f9ba <_scanf_float+0x192>
 800fa3a:	2d03      	cmp	r5, #3
 800fa3c:	d0e2      	beq.n	800fa04 <_scanf_float+0x1dc>
 800fa3e:	2d05      	cmp	r5, #5
 800fa40:	e7de      	b.n	800fa00 <_scanf_float+0x1d8>
 800fa42:	2d02      	cmp	r5, #2
 800fa44:	f47f af22 	bne.w	800f88c <_scanf_float+0x64>
 800fa48:	2503      	movs	r5, #3
 800fa4a:	e7b6      	b.n	800f9ba <_scanf_float+0x192>
 800fa4c:	2d06      	cmp	r5, #6
 800fa4e:	f47f af1d 	bne.w	800f88c <_scanf_float+0x64>
 800fa52:	2507      	movs	r5, #7
 800fa54:	e7b1      	b.n	800f9ba <_scanf_float+0x192>
 800fa56:	6822      	ldr	r2, [r4, #0]
 800fa58:	0591      	lsls	r1, r2, #22
 800fa5a:	f57f af17 	bpl.w	800f88c <_scanf_float+0x64>
 800fa5e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fa62:	6022      	str	r2, [r4, #0]
 800fa64:	f8cd 9008 	str.w	r9, [sp, #8]
 800fa68:	e7a7      	b.n	800f9ba <_scanf_float+0x192>
 800fa6a:	6822      	ldr	r2, [r4, #0]
 800fa6c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fa70:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fa74:	d006      	beq.n	800fa84 <_scanf_float+0x25c>
 800fa76:	0550      	lsls	r0, r2, #21
 800fa78:	f57f af08 	bpl.w	800f88c <_scanf_float+0x64>
 800fa7c:	f1b9 0f00 	cmp.w	r9, #0
 800fa80:	f000 80d7 	beq.w	800fc32 <_scanf_float+0x40a>
 800fa84:	0591      	lsls	r1, r2, #22
 800fa86:	bf58      	it	pl
 800fa88:	9902      	ldrpl	r1, [sp, #8]
 800fa8a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fa8e:	bf58      	it	pl
 800fa90:	eba9 0101 	subpl.w	r1, r9, r1
 800fa94:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800fa98:	bf58      	it	pl
 800fa9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fa9e:	6022      	str	r2, [r4, #0]
 800faa0:	f04f 0900 	mov.w	r9, #0
 800faa4:	e789      	b.n	800f9ba <_scanf_float+0x192>
 800faa6:	f04f 0a03 	mov.w	sl, #3
 800faaa:	e786      	b.n	800f9ba <_scanf_float+0x192>
 800faac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fab0:	4639      	mov	r1, r7
 800fab2:	4640      	mov	r0, r8
 800fab4:	4798      	blx	r3
 800fab6:	2800      	cmp	r0, #0
 800fab8:	f43f aedb 	beq.w	800f872 <_scanf_float+0x4a>
 800fabc:	e6e6      	b.n	800f88c <_scanf_float+0x64>
 800fabe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fac2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fac6:	463a      	mov	r2, r7
 800fac8:	4640      	mov	r0, r8
 800faca:	4798      	blx	r3
 800facc:	6923      	ldr	r3, [r4, #16]
 800face:	3b01      	subs	r3, #1
 800fad0:	6123      	str	r3, [r4, #16]
 800fad2:	e6e8      	b.n	800f8a6 <_scanf_float+0x7e>
 800fad4:	1e6b      	subs	r3, r5, #1
 800fad6:	2b06      	cmp	r3, #6
 800fad8:	d824      	bhi.n	800fb24 <_scanf_float+0x2fc>
 800fada:	2d02      	cmp	r5, #2
 800fadc:	d836      	bhi.n	800fb4c <_scanf_float+0x324>
 800fade:	9b01      	ldr	r3, [sp, #4]
 800fae0:	429e      	cmp	r6, r3
 800fae2:	f67f aee4 	bls.w	800f8ae <_scanf_float+0x86>
 800fae6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800faea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800faee:	463a      	mov	r2, r7
 800faf0:	4640      	mov	r0, r8
 800faf2:	4798      	blx	r3
 800faf4:	6923      	ldr	r3, [r4, #16]
 800faf6:	3b01      	subs	r3, #1
 800faf8:	6123      	str	r3, [r4, #16]
 800fafa:	e7f0      	b.n	800fade <_scanf_float+0x2b6>
 800fafc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fb00:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fb04:	463a      	mov	r2, r7
 800fb06:	4640      	mov	r0, r8
 800fb08:	4798      	blx	r3
 800fb0a:	6923      	ldr	r3, [r4, #16]
 800fb0c:	3b01      	subs	r3, #1
 800fb0e:	6123      	str	r3, [r4, #16]
 800fb10:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb14:	fa5f fa8a 	uxtb.w	sl, sl
 800fb18:	f1ba 0f02 	cmp.w	sl, #2
 800fb1c:	d1ee      	bne.n	800fafc <_scanf_float+0x2d4>
 800fb1e:	3d03      	subs	r5, #3
 800fb20:	b2ed      	uxtb	r5, r5
 800fb22:	1b76      	subs	r6, r6, r5
 800fb24:	6823      	ldr	r3, [r4, #0]
 800fb26:	05da      	lsls	r2, r3, #23
 800fb28:	d530      	bpl.n	800fb8c <_scanf_float+0x364>
 800fb2a:	055b      	lsls	r3, r3, #21
 800fb2c:	d511      	bpl.n	800fb52 <_scanf_float+0x32a>
 800fb2e:	9b01      	ldr	r3, [sp, #4]
 800fb30:	429e      	cmp	r6, r3
 800fb32:	f67f aebc 	bls.w	800f8ae <_scanf_float+0x86>
 800fb36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fb3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb3e:	463a      	mov	r2, r7
 800fb40:	4640      	mov	r0, r8
 800fb42:	4798      	blx	r3
 800fb44:	6923      	ldr	r3, [r4, #16]
 800fb46:	3b01      	subs	r3, #1
 800fb48:	6123      	str	r3, [r4, #16]
 800fb4a:	e7f0      	b.n	800fb2e <_scanf_float+0x306>
 800fb4c:	46aa      	mov	sl, r5
 800fb4e:	46b3      	mov	fp, r6
 800fb50:	e7de      	b.n	800fb10 <_scanf_float+0x2e8>
 800fb52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fb56:	6923      	ldr	r3, [r4, #16]
 800fb58:	2965      	cmp	r1, #101	@ 0x65
 800fb5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800fb5e:	f106 35ff 	add.w	r5, r6, #4294967295
 800fb62:	6123      	str	r3, [r4, #16]
 800fb64:	d00c      	beq.n	800fb80 <_scanf_float+0x358>
 800fb66:	2945      	cmp	r1, #69	@ 0x45
 800fb68:	d00a      	beq.n	800fb80 <_scanf_float+0x358>
 800fb6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fb6e:	463a      	mov	r2, r7
 800fb70:	4640      	mov	r0, r8
 800fb72:	4798      	blx	r3
 800fb74:	6923      	ldr	r3, [r4, #16]
 800fb76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	1eb5      	subs	r5, r6, #2
 800fb7e:	6123      	str	r3, [r4, #16]
 800fb80:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fb84:	463a      	mov	r2, r7
 800fb86:	4640      	mov	r0, r8
 800fb88:	4798      	blx	r3
 800fb8a:	462e      	mov	r6, r5
 800fb8c:	6822      	ldr	r2, [r4, #0]
 800fb8e:	f012 0210 	ands.w	r2, r2, #16
 800fb92:	d001      	beq.n	800fb98 <_scanf_float+0x370>
 800fb94:	2000      	movs	r0, #0
 800fb96:	e68b      	b.n	800f8b0 <_scanf_float+0x88>
 800fb98:	7032      	strb	r2, [r6, #0]
 800fb9a:	6823      	ldr	r3, [r4, #0]
 800fb9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fba4:	d11a      	bne.n	800fbdc <_scanf_float+0x3b4>
 800fba6:	9b02      	ldr	r3, [sp, #8]
 800fba8:	454b      	cmp	r3, r9
 800fbaa:	eba3 0209 	sub.w	r2, r3, r9
 800fbae:	d121      	bne.n	800fbf4 <_scanf_float+0x3cc>
 800fbb0:	9901      	ldr	r1, [sp, #4]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	4640      	mov	r0, r8
 800fbb6:	f7ff f9f9 	bl	800efac <_strtod_r>
 800fbba:	9b03      	ldr	r3, [sp, #12]
 800fbbc:	6821      	ldr	r1, [r4, #0]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	f011 0f02 	tst.w	r1, #2
 800fbc4:	f103 0204 	add.w	r2, r3, #4
 800fbc8:	d01f      	beq.n	800fc0a <_scanf_float+0x3e2>
 800fbca:	9903      	ldr	r1, [sp, #12]
 800fbcc:	600a      	str	r2, [r1, #0]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	ed83 0b00 	vstr	d0, [r3]
 800fbd4:	68e3      	ldr	r3, [r4, #12]
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	60e3      	str	r3, [r4, #12]
 800fbda:	e7db      	b.n	800fb94 <_scanf_float+0x36c>
 800fbdc:	9b04      	ldr	r3, [sp, #16]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d0e6      	beq.n	800fbb0 <_scanf_float+0x388>
 800fbe2:	9905      	ldr	r1, [sp, #20]
 800fbe4:	230a      	movs	r3, #10
 800fbe6:	3101      	adds	r1, #1
 800fbe8:	4640      	mov	r0, r8
 800fbea:	f002 f8e7 	bl	8011dbc <_strtol_r>
 800fbee:	9b04      	ldr	r3, [sp, #16]
 800fbf0:	9e05      	ldr	r6, [sp, #20]
 800fbf2:	1ac2      	subs	r2, r0, r3
 800fbf4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fbf8:	429e      	cmp	r6, r3
 800fbfa:	bf28      	it	cs
 800fbfc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fc00:	490d      	ldr	r1, [pc, #52]	@ (800fc38 <_scanf_float+0x410>)
 800fc02:	4630      	mov	r0, r6
 800fc04:	f000 f8de 	bl	800fdc4 <siprintf>
 800fc08:	e7d2      	b.n	800fbb0 <_scanf_float+0x388>
 800fc0a:	f011 0f04 	tst.w	r1, #4
 800fc0e:	9903      	ldr	r1, [sp, #12]
 800fc10:	600a      	str	r2, [r1, #0]
 800fc12:	d1dc      	bne.n	800fbce <_scanf_float+0x3a6>
 800fc14:	eeb4 0b40 	vcmp.f64	d0, d0
 800fc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc1c:	681d      	ldr	r5, [r3, #0]
 800fc1e:	d705      	bvc.n	800fc2c <_scanf_float+0x404>
 800fc20:	4806      	ldr	r0, [pc, #24]	@ (800fc3c <_scanf_float+0x414>)
 800fc22:	f000 fa25 	bl	8010070 <nanf>
 800fc26:	ed85 0a00 	vstr	s0, [r5]
 800fc2a:	e7d3      	b.n	800fbd4 <_scanf_float+0x3ac>
 800fc2c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800fc30:	e7f9      	b.n	800fc26 <_scanf_float+0x3fe>
 800fc32:	f04f 0900 	mov.w	r9, #0
 800fc36:	e630      	b.n	800f89a <_scanf_float+0x72>
 800fc38:	08013222 	.word	0x08013222
 800fc3c:	080135e0 	.word	0x080135e0

0800fc40 <std>:
 800fc40:	2300      	movs	r3, #0
 800fc42:	b510      	push	{r4, lr}
 800fc44:	4604      	mov	r4, r0
 800fc46:	e9c0 3300 	strd	r3, r3, [r0]
 800fc4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc4e:	6083      	str	r3, [r0, #8]
 800fc50:	8181      	strh	r1, [r0, #12]
 800fc52:	6643      	str	r3, [r0, #100]	@ 0x64
 800fc54:	81c2      	strh	r2, [r0, #14]
 800fc56:	6183      	str	r3, [r0, #24]
 800fc58:	4619      	mov	r1, r3
 800fc5a:	2208      	movs	r2, #8
 800fc5c:	305c      	adds	r0, #92	@ 0x5c
 800fc5e:	f000 f940 	bl	800fee2 <memset>
 800fc62:	4b0d      	ldr	r3, [pc, #52]	@ (800fc98 <std+0x58>)
 800fc64:	6263      	str	r3, [r4, #36]	@ 0x24
 800fc66:	4b0d      	ldr	r3, [pc, #52]	@ (800fc9c <std+0x5c>)
 800fc68:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fc6a:	4b0d      	ldr	r3, [pc, #52]	@ (800fca0 <std+0x60>)
 800fc6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fc6e:	4b0d      	ldr	r3, [pc, #52]	@ (800fca4 <std+0x64>)
 800fc70:	6323      	str	r3, [r4, #48]	@ 0x30
 800fc72:	4b0d      	ldr	r3, [pc, #52]	@ (800fca8 <std+0x68>)
 800fc74:	6224      	str	r4, [r4, #32]
 800fc76:	429c      	cmp	r4, r3
 800fc78:	d006      	beq.n	800fc88 <std+0x48>
 800fc7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fc7e:	4294      	cmp	r4, r2
 800fc80:	d002      	beq.n	800fc88 <std+0x48>
 800fc82:	33d0      	adds	r3, #208	@ 0xd0
 800fc84:	429c      	cmp	r4, r3
 800fc86:	d105      	bne.n	800fc94 <std+0x54>
 800fc88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fc8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc90:	f000 b9d2 	b.w	8010038 <__retarget_lock_init_recursive>
 800fc94:	bd10      	pop	{r4, pc}
 800fc96:	bf00      	nop
 800fc98:	0800fe59 	.word	0x0800fe59
 800fc9c:	0800fe7f 	.word	0x0800fe7f
 800fca0:	0800feb7 	.word	0x0800feb7
 800fca4:	0800fedb 	.word	0x0800fedb
 800fca8:	24000d38 	.word	0x24000d38

0800fcac <stdio_exit_handler>:
 800fcac:	4a02      	ldr	r2, [pc, #8]	@ (800fcb8 <stdio_exit_handler+0xc>)
 800fcae:	4903      	ldr	r1, [pc, #12]	@ (800fcbc <stdio_exit_handler+0x10>)
 800fcb0:	4803      	ldr	r0, [pc, #12]	@ (800fcc0 <stdio_exit_handler+0x14>)
 800fcb2:	f000 b869 	b.w	800fd88 <_fwalk_sglue>
 800fcb6:	bf00      	nop
 800fcb8:	2400004c 	.word	0x2400004c
 800fcbc:	080127c5 	.word	0x080127c5
 800fcc0:	240001c8 	.word	0x240001c8

0800fcc4 <cleanup_stdio>:
 800fcc4:	6841      	ldr	r1, [r0, #4]
 800fcc6:	4b0c      	ldr	r3, [pc, #48]	@ (800fcf8 <cleanup_stdio+0x34>)
 800fcc8:	4299      	cmp	r1, r3
 800fcca:	b510      	push	{r4, lr}
 800fccc:	4604      	mov	r4, r0
 800fcce:	d001      	beq.n	800fcd4 <cleanup_stdio+0x10>
 800fcd0:	f002 fd78 	bl	80127c4 <_fflush_r>
 800fcd4:	68a1      	ldr	r1, [r4, #8]
 800fcd6:	4b09      	ldr	r3, [pc, #36]	@ (800fcfc <cleanup_stdio+0x38>)
 800fcd8:	4299      	cmp	r1, r3
 800fcda:	d002      	beq.n	800fce2 <cleanup_stdio+0x1e>
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f002 fd71 	bl	80127c4 <_fflush_r>
 800fce2:	68e1      	ldr	r1, [r4, #12]
 800fce4:	4b06      	ldr	r3, [pc, #24]	@ (800fd00 <cleanup_stdio+0x3c>)
 800fce6:	4299      	cmp	r1, r3
 800fce8:	d004      	beq.n	800fcf4 <cleanup_stdio+0x30>
 800fcea:	4620      	mov	r0, r4
 800fcec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcf0:	f002 bd68 	b.w	80127c4 <_fflush_r>
 800fcf4:	bd10      	pop	{r4, pc}
 800fcf6:	bf00      	nop
 800fcf8:	24000d38 	.word	0x24000d38
 800fcfc:	24000da0 	.word	0x24000da0
 800fd00:	24000e08 	.word	0x24000e08

0800fd04 <global_stdio_init.part.0>:
 800fd04:	b510      	push	{r4, lr}
 800fd06:	4b0b      	ldr	r3, [pc, #44]	@ (800fd34 <global_stdio_init.part.0+0x30>)
 800fd08:	4c0b      	ldr	r4, [pc, #44]	@ (800fd38 <global_stdio_init.part.0+0x34>)
 800fd0a:	4a0c      	ldr	r2, [pc, #48]	@ (800fd3c <global_stdio_init.part.0+0x38>)
 800fd0c:	601a      	str	r2, [r3, #0]
 800fd0e:	4620      	mov	r0, r4
 800fd10:	2200      	movs	r2, #0
 800fd12:	2104      	movs	r1, #4
 800fd14:	f7ff ff94 	bl	800fc40 <std>
 800fd18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	2109      	movs	r1, #9
 800fd20:	f7ff ff8e 	bl	800fc40 <std>
 800fd24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fd28:	2202      	movs	r2, #2
 800fd2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd2e:	2112      	movs	r1, #18
 800fd30:	f7ff bf86 	b.w	800fc40 <std>
 800fd34:	24000e70 	.word	0x24000e70
 800fd38:	24000d38 	.word	0x24000d38
 800fd3c:	0800fcad 	.word	0x0800fcad

0800fd40 <__sfp_lock_acquire>:
 800fd40:	4801      	ldr	r0, [pc, #4]	@ (800fd48 <__sfp_lock_acquire+0x8>)
 800fd42:	f000 b97a 	b.w	801003a <__retarget_lock_acquire_recursive>
 800fd46:	bf00      	nop
 800fd48:	24000e79 	.word	0x24000e79

0800fd4c <__sfp_lock_release>:
 800fd4c:	4801      	ldr	r0, [pc, #4]	@ (800fd54 <__sfp_lock_release+0x8>)
 800fd4e:	f000 b975 	b.w	801003c <__retarget_lock_release_recursive>
 800fd52:	bf00      	nop
 800fd54:	24000e79 	.word	0x24000e79

0800fd58 <__sinit>:
 800fd58:	b510      	push	{r4, lr}
 800fd5a:	4604      	mov	r4, r0
 800fd5c:	f7ff fff0 	bl	800fd40 <__sfp_lock_acquire>
 800fd60:	6a23      	ldr	r3, [r4, #32]
 800fd62:	b11b      	cbz	r3, 800fd6c <__sinit+0x14>
 800fd64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd68:	f7ff bff0 	b.w	800fd4c <__sfp_lock_release>
 800fd6c:	4b04      	ldr	r3, [pc, #16]	@ (800fd80 <__sinit+0x28>)
 800fd6e:	6223      	str	r3, [r4, #32]
 800fd70:	4b04      	ldr	r3, [pc, #16]	@ (800fd84 <__sinit+0x2c>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d1f5      	bne.n	800fd64 <__sinit+0xc>
 800fd78:	f7ff ffc4 	bl	800fd04 <global_stdio_init.part.0>
 800fd7c:	e7f2      	b.n	800fd64 <__sinit+0xc>
 800fd7e:	bf00      	nop
 800fd80:	0800fcc5 	.word	0x0800fcc5
 800fd84:	24000e70 	.word	0x24000e70

0800fd88 <_fwalk_sglue>:
 800fd88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd8c:	4607      	mov	r7, r0
 800fd8e:	4688      	mov	r8, r1
 800fd90:	4614      	mov	r4, r2
 800fd92:	2600      	movs	r6, #0
 800fd94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fd98:	f1b9 0901 	subs.w	r9, r9, #1
 800fd9c:	d505      	bpl.n	800fdaa <_fwalk_sglue+0x22>
 800fd9e:	6824      	ldr	r4, [r4, #0]
 800fda0:	2c00      	cmp	r4, #0
 800fda2:	d1f7      	bne.n	800fd94 <_fwalk_sglue+0xc>
 800fda4:	4630      	mov	r0, r6
 800fda6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdaa:	89ab      	ldrh	r3, [r5, #12]
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d907      	bls.n	800fdc0 <_fwalk_sglue+0x38>
 800fdb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	d003      	beq.n	800fdc0 <_fwalk_sglue+0x38>
 800fdb8:	4629      	mov	r1, r5
 800fdba:	4638      	mov	r0, r7
 800fdbc:	47c0      	blx	r8
 800fdbe:	4306      	orrs	r6, r0
 800fdc0:	3568      	adds	r5, #104	@ 0x68
 800fdc2:	e7e9      	b.n	800fd98 <_fwalk_sglue+0x10>

0800fdc4 <siprintf>:
 800fdc4:	b40e      	push	{r1, r2, r3}
 800fdc6:	b500      	push	{lr}
 800fdc8:	b09c      	sub	sp, #112	@ 0x70
 800fdca:	ab1d      	add	r3, sp, #116	@ 0x74
 800fdcc:	9002      	str	r0, [sp, #8]
 800fdce:	9006      	str	r0, [sp, #24]
 800fdd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fdd4:	4809      	ldr	r0, [pc, #36]	@ (800fdfc <siprintf+0x38>)
 800fdd6:	9107      	str	r1, [sp, #28]
 800fdd8:	9104      	str	r1, [sp, #16]
 800fdda:	4909      	ldr	r1, [pc, #36]	@ (800fe00 <siprintf+0x3c>)
 800fddc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fde0:	9105      	str	r1, [sp, #20]
 800fde2:	6800      	ldr	r0, [r0, #0]
 800fde4:	9301      	str	r3, [sp, #4]
 800fde6:	a902      	add	r1, sp, #8
 800fde8:	f002 f852 	bl	8011e90 <_svfiprintf_r>
 800fdec:	9b02      	ldr	r3, [sp, #8]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	701a      	strb	r2, [r3, #0]
 800fdf2:	b01c      	add	sp, #112	@ 0x70
 800fdf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdf8:	b003      	add	sp, #12
 800fdfa:	4770      	bx	lr
 800fdfc:	240001c4 	.word	0x240001c4
 800fe00:	ffff0208 	.word	0xffff0208

0800fe04 <siscanf>:
 800fe04:	b40e      	push	{r1, r2, r3}
 800fe06:	b530      	push	{r4, r5, lr}
 800fe08:	b09c      	sub	sp, #112	@ 0x70
 800fe0a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800fe0c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800fe10:	f854 5b04 	ldr.w	r5, [r4], #4
 800fe14:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fe18:	9002      	str	r0, [sp, #8]
 800fe1a:	9006      	str	r0, [sp, #24]
 800fe1c:	f7f0 fac8 	bl	80003b0 <strlen>
 800fe20:	4b0b      	ldr	r3, [pc, #44]	@ (800fe50 <siscanf+0x4c>)
 800fe22:	9003      	str	r0, [sp, #12]
 800fe24:	9007      	str	r0, [sp, #28]
 800fe26:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe28:	480a      	ldr	r0, [pc, #40]	@ (800fe54 <siscanf+0x50>)
 800fe2a:	9401      	str	r4, [sp, #4]
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fe30:	9314      	str	r3, [sp, #80]	@ 0x50
 800fe32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fe36:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fe3a:	462a      	mov	r2, r5
 800fe3c:	4623      	mov	r3, r4
 800fe3e:	a902      	add	r1, sp, #8
 800fe40:	6800      	ldr	r0, [r0, #0]
 800fe42:	f002 f979 	bl	8012138 <__ssvfiscanf_r>
 800fe46:	b01c      	add	sp, #112	@ 0x70
 800fe48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe4c:	b003      	add	sp, #12
 800fe4e:	4770      	bx	lr
 800fe50:	0800fe7b 	.word	0x0800fe7b
 800fe54:	240001c4 	.word	0x240001c4

0800fe58 <__sread>:
 800fe58:	b510      	push	{r4, lr}
 800fe5a:	460c      	mov	r4, r1
 800fe5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe60:	f000 f88c 	bl	800ff7c <_read_r>
 800fe64:	2800      	cmp	r0, #0
 800fe66:	bfab      	itete	ge
 800fe68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fe6a:	89a3      	ldrhlt	r3, [r4, #12]
 800fe6c:	181b      	addge	r3, r3, r0
 800fe6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fe72:	bfac      	ite	ge
 800fe74:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fe76:	81a3      	strhlt	r3, [r4, #12]
 800fe78:	bd10      	pop	{r4, pc}

0800fe7a <__seofread>:
 800fe7a:	2000      	movs	r0, #0
 800fe7c:	4770      	bx	lr

0800fe7e <__swrite>:
 800fe7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe82:	461f      	mov	r7, r3
 800fe84:	898b      	ldrh	r3, [r1, #12]
 800fe86:	05db      	lsls	r3, r3, #23
 800fe88:	4605      	mov	r5, r0
 800fe8a:	460c      	mov	r4, r1
 800fe8c:	4616      	mov	r6, r2
 800fe8e:	d505      	bpl.n	800fe9c <__swrite+0x1e>
 800fe90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe94:	2302      	movs	r3, #2
 800fe96:	2200      	movs	r2, #0
 800fe98:	f000 f85e 	bl	800ff58 <_lseek_r>
 800fe9c:	89a3      	ldrh	r3, [r4, #12]
 800fe9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fea2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fea6:	81a3      	strh	r3, [r4, #12]
 800fea8:	4632      	mov	r2, r6
 800feaa:	463b      	mov	r3, r7
 800feac:	4628      	mov	r0, r5
 800feae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feb2:	f000 b885 	b.w	800ffc0 <_write_r>

0800feb6 <__sseek>:
 800feb6:	b510      	push	{r4, lr}
 800feb8:	460c      	mov	r4, r1
 800feba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800febe:	f000 f84b 	bl	800ff58 <_lseek_r>
 800fec2:	1c43      	adds	r3, r0, #1
 800fec4:	89a3      	ldrh	r3, [r4, #12]
 800fec6:	bf15      	itete	ne
 800fec8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800feca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fece:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fed2:	81a3      	strheq	r3, [r4, #12]
 800fed4:	bf18      	it	ne
 800fed6:	81a3      	strhne	r3, [r4, #12]
 800fed8:	bd10      	pop	{r4, pc}

0800feda <__sclose>:
 800feda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fede:	f000 b82b 	b.w	800ff38 <_close_r>

0800fee2 <memset>:
 800fee2:	4402      	add	r2, r0
 800fee4:	4603      	mov	r3, r0
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d100      	bne.n	800feec <memset+0xa>
 800feea:	4770      	bx	lr
 800feec:	f803 1b01 	strb.w	r1, [r3], #1
 800fef0:	e7f9      	b.n	800fee6 <memset+0x4>

0800fef2 <strchr>:
 800fef2:	b2c9      	uxtb	r1, r1
 800fef4:	4603      	mov	r3, r0
 800fef6:	4618      	mov	r0, r3
 800fef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fefc:	b112      	cbz	r2, 800ff04 <strchr+0x12>
 800fefe:	428a      	cmp	r2, r1
 800ff00:	d1f9      	bne.n	800fef6 <strchr+0x4>
 800ff02:	4770      	bx	lr
 800ff04:	2900      	cmp	r1, #0
 800ff06:	bf18      	it	ne
 800ff08:	2000      	movne	r0, #0
 800ff0a:	4770      	bx	lr

0800ff0c <strncmp>:
 800ff0c:	b510      	push	{r4, lr}
 800ff0e:	b16a      	cbz	r2, 800ff2c <strncmp+0x20>
 800ff10:	3901      	subs	r1, #1
 800ff12:	1884      	adds	r4, r0, r2
 800ff14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff18:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d103      	bne.n	800ff28 <strncmp+0x1c>
 800ff20:	42a0      	cmp	r0, r4
 800ff22:	d001      	beq.n	800ff28 <strncmp+0x1c>
 800ff24:	2a00      	cmp	r2, #0
 800ff26:	d1f5      	bne.n	800ff14 <strncmp+0x8>
 800ff28:	1ad0      	subs	r0, r2, r3
 800ff2a:	bd10      	pop	{r4, pc}
 800ff2c:	4610      	mov	r0, r2
 800ff2e:	e7fc      	b.n	800ff2a <strncmp+0x1e>

0800ff30 <_localeconv_r>:
 800ff30:	4800      	ldr	r0, [pc, #0]	@ (800ff34 <_localeconv_r+0x4>)
 800ff32:	4770      	bx	lr
 800ff34:	24000148 	.word	0x24000148

0800ff38 <_close_r>:
 800ff38:	b538      	push	{r3, r4, r5, lr}
 800ff3a:	4d06      	ldr	r5, [pc, #24]	@ (800ff54 <_close_r+0x1c>)
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	4604      	mov	r4, r0
 800ff40:	4608      	mov	r0, r1
 800ff42:	602b      	str	r3, [r5, #0]
 800ff44:	f7f1 fcdc 	bl	8001900 <_close>
 800ff48:	1c43      	adds	r3, r0, #1
 800ff4a:	d102      	bne.n	800ff52 <_close_r+0x1a>
 800ff4c:	682b      	ldr	r3, [r5, #0]
 800ff4e:	b103      	cbz	r3, 800ff52 <_close_r+0x1a>
 800ff50:	6023      	str	r3, [r4, #0]
 800ff52:	bd38      	pop	{r3, r4, r5, pc}
 800ff54:	24000e74 	.word	0x24000e74

0800ff58 <_lseek_r>:
 800ff58:	b538      	push	{r3, r4, r5, lr}
 800ff5a:	4d07      	ldr	r5, [pc, #28]	@ (800ff78 <_lseek_r+0x20>)
 800ff5c:	4604      	mov	r4, r0
 800ff5e:	4608      	mov	r0, r1
 800ff60:	4611      	mov	r1, r2
 800ff62:	2200      	movs	r2, #0
 800ff64:	602a      	str	r2, [r5, #0]
 800ff66:	461a      	mov	r2, r3
 800ff68:	f7f1 fcf1 	bl	800194e <_lseek>
 800ff6c:	1c43      	adds	r3, r0, #1
 800ff6e:	d102      	bne.n	800ff76 <_lseek_r+0x1e>
 800ff70:	682b      	ldr	r3, [r5, #0]
 800ff72:	b103      	cbz	r3, 800ff76 <_lseek_r+0x1e>
 800ff74:	6023      	str	r3, [r4, #0]
 800ff76:	bd38      	pop	{r3, r4, r5, pc}
 800ff78:	24000e74 	.word	0x24000e74

0800ff7c <_read_r>:
 800ff7c:	b538      	push	{r3, r4, r5, lr}
 800ff7e:	4d07      	ldr	r5, [pc, #28]	@ (800ff9c <_read_r+0x20>)
 800ff80:	4604      	mov	r4, r0
 800ff82:	4608      	mov	r0, r1
 800ff84:	4611      	mov	r1, r2
 800ff86:	2200      	movs	r2, #0
 800ff88:	602a      	str	r2, [r5, #0]
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	f7f1 fc7f 	bl	800188e <_read>
 800ff90:	1c43      	adds	r3, r0, #1
 800ff92:	d102      	bne.n	800ff9a <_read_r+0x1e>
 800ff94:	682b      	ldr	r3, [r5, #0]
 800ff96:	b103      	cbz	r3, 800ff9a <_read_r+0x1e>
 800ff98:	6023      	str	r3, [r4, #0]
 800ff9a:	bd38      	pop	{r3, r4, r5, pc}
 800ff9c:	24000e74 	.word	0x24000e74

0800ffa0 <_sbrk_r>:
 800ffa0:	b538      	push	{r3, r4, r5, lr}
 800ffa2:	4d06      	ldr	r5, [pc, #24]	@ (800ffbc <_sbrk_r+0x1c>)
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	4604      	mov	r4, r0
 800ffa8:	4608      	mov	r0, r1
 800ffaa:	602b      	str	r3, [r5, #0]
 800ffac:	f7f1 fcdc 	bl	8001968 <_sbrk>
 800ffb0:	1c43      	adds	r3, r0, #1
 800ffb2:	d102      	bne.n	800ffba <_sbrk_r+0x1a>
 800ffb4:	682b      	ldr	r3, [r5, #0]
 800ffb6:	b103      	cbz	r3, 800ffba <_sbrk_r+0x1a>
 800ffb8:	6023      	str	r3, [r4, #0]
 800ffba:	bd38      	pop	{r3, r4, r5, pc}
 800ffbc:	24000e74 	.word	0x24000e74

0800ffc0 <_write_r>:
 800ffc0:	b538      	push	{r3, r4, r5, lr}
 800ffc2:	4d07      	ldr	r5, [pc, #28]	@ (800ffe0 <_write_r+0x20>)
 800ffc4:	4604      	mov	r4, r0
 800ffc6:	4608      	mov	r0, r1
 800ffc8:	4611      	mov	r1, r2
 800ffca:	2200      	movs	r2, #0
 800ffcc:	602a      	str	r2, [r5, #0]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	f7f1 fc7a 	bl	80018c8 <_write>
 800ffd4:	1c43      	adds	r3, r0, #1
 800ffd6:	d102      	bne.n	800ffde <_write_r+0x1e>
 800ffd8:	682b      	ldr	r3, [r5, #0]
 800ffda:	b103      	cbz	r3, 800ffde <_write_r+0x1e>
 800ffdc:	6023      	str	r3, [r4, #0]
 800ffde:	bd38      	pop	{r3, r4, r5, pc}
 800ffe0:	24000e74 	.word	0x24000e74

0800ffe4 <__errno>:
 800ffe4:	4b01      	ldr	r3, [pc, #4]	@ (800ffec <__errno+0x8>)
 800ffe6:	6818      	ldr	r0, [r3, #0]
 800ffe8:	4770      	bx	lr
 800ffea:	bf00      	nop
 800ffec:	240001c4 	.word	0x240001c4

0800fff0 <__libc_init_array>:
 800fff0:	b570      	push	{r4, r5, r6, lr}
 800fff2:	4d0d      	ldr	r5, [pc, #52]	@ (8010028 <__libc_init_array+0x38>)
 800fff4:	4c0d      	ldr	r4, [pc, #52]	@ (801002c <__libc_init_array+0x3c>)
 800fff6:	1b64      	subs	r4, r4, r5
 800fff8:	10a4      	asrs	r4, r4, #2
 800fffa:	2600      	movs	r6, #0
 800fffc:	42a6      	cmp	r6, r4
 800fffe:	d109      	bne.n	8010014 <__libc_init_array+0x24>
 8010000:	4d0b      	ldr	r5, [pc, #44]	@ (8010030 <__libc_init_array+0x40>)
 8010002:	4c0c      	ldr	r4, [pc, #48]	@ (8010034 <__libc_init_array+0x44>)
 8010004:	f003 f822 	bl	801304c <_init>
 8010008:	1b64      	subs	r4, r4, r5
 801000a:	10a4      	asrs	r4, r4, #2
 801000c:	2600      	movs	r6, #0
 801000e:	42a6      	cmp	r6, r4
 8010010:	d105      	bne.n	801001e <__libc_init_array+0x2e>
 8010012:	bd70      	pop	{r4, r5, r6, pc}
 8010014:	f855 3b04 	ldr.w	r3, [r5], #4
 8010018:	4798      	blx	r3
 801001a:	3601      	adds	r6, #1
 801001c:	e7ee      	b.n	800fffc <__libc_init_array+0xc>
 801001e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010022:	4798      	blx	r3
 8010024:	3601      	adds	r6, #1
 8010026:	e7f2      	b.n	801000e <__libc_init_array+0x1e>
 8010028:	080135ec 	.word	0x080135ec
 801002c:	080135ec 	.word	0x080135ec
 8010030:	080135ec 	.word	0x080135ec
 8010034:	080135f0 	.word	0x080135f0

08010038 <__retarget_lock_init_recursive>:
 8010038:	4770      	bx	lr

0801003a <__retarget_lock_acquire_recursive>:
 801003a:	4770      	bx	lr

0801003c <__retarget_lock_release_recursive>:
 801003c:	4770      	bx	lr

0801003e <memcpy>:
 801003e:	440a      	add	r2, r1
 8010040:	4291      	cmp	r1, r2
 8010042:	f100 33ff 	add.w	r3, r0, #4294967295
 8010046:	d100      	bne.n	801004a <memcpy+0xc>
 8010048:	4770      	bx	lr
 801004a:	b510      	push	{r4, lr}
 801004c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010050:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010054:	4291      	cmp	r1, r2
 8010056:	d1f9      	bne.n	801004c <memcpy+0xe>
 8010058:	bd10      	pop	{r4, pc}
 801005a:	0000      	movs	r0, r0
 801005c:	0000      	movs	r0, r0
	...

08010060 <nan>:
 8010060:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010068 <nan+0x8>
 8010064:	4770      	bx	lr
 8010066:	bf00      	nop
 8010068:	00000000 	.word	0x00000000
 801006c:	7ff80000 	.word	0x7ff80000

08010070 <nanf>:
 8010070:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010078 <nanf+0x8>
 8010074:	4770      	bx	lr
 8010076:	bf00      	nop
 8010078:	7fc00000 	.word	0x7fc00000

0801007c <quorem>:
 801007c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010080:	6903      	ldr	r3, [r0, #16]
 8010082:	690c      	ldr	r4, [r1, #16]
 8010084:	42a3      	cmp	r3, r4
 8010086:	4607      	mov	r7, r0
 8010088:	db7e      	blt.n	8010188 <quorem+0x10c>
 801008a:	3c01      	subs	r4, #1
 801008c:	f101 0814 	add.w	r8, r1, #20
 8010090:	00a3      	lsls	r3, r4, #2
 8010092:	f100 0514 	add.w	r5, r0, #20
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801009c:	9301      	str	r3, [sp, #4]
 801009e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80100a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100a6:	3301      	adds	r3, #1
 80100a8:	429a      	cmp	r2, r3
 80100aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80100ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80100b2:	d32e      	bcc.n	8010112 <quorem+0x96>
 80100b4:	f04f 0a00 	mov.w	sl, #0
 80100b8:	46c4      	mov	ip, r8
 80100ba:	46ae      	mov	lr, r5
 80100bc:	46d3      	mov	fp, sl
 80100be:	f85c 3b04 	ldr.w	r3, [ip], #4
 80100c2:	b298      	uxth	r0, r3
 80100c4:	fb06 a000 	mla	r0, r6, r0, sl
 80100c8:	0c02      	lsrs	r2, r0, #16
 80100ca:	0c1b      	lsrs	r3, r3, #16
 80100cc:	fb06 2303 	mla	r3, r6, r3, r2
 80100d0:	f8de 2000 	ldr.w	r2, [lr]
 80100d4:	b280      	uxth	r0, r0
 80100d6:	b292      	uxth	r2, r2
 80100d8:	1a12      	subs	r2, r2, r0
 80100da:	445a      	add	r2, fp
 80100dc:	f8de 0000 	ldr.w	r0, [lr]
 80100e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80100ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80100ee:	b292      	uxth	r2, r2
 80100f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80100f4:	45e1      	cmp	r9, ip
 80100f6:	f84e 2b04 	str.w	r2, [lr], #4
 80100fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80100fe:	d2de      	bcs.n	80100be <quorem+0x42>
 8010100:	9b00      	ldr	r3, [sp, #0]
 8010102:	58eb      	ldr	r3, [r5, r3]
 8010104:	b92b      	cbnz	r3, 8010112 <quorem+0x96>
 8010106:	9b01      	ldr	r3, [sp, #4]
 8010108:	3b04      	subs	r3, #4
 801010a:	429d      	cmp	r5, r3
 801010c:	461a      	mov	r2, r3
 801010e:	d32f      	bcc.n	8010170 <quorem+0xf4>
 8010110:	613c      	str	r4, [r7, #16]
 8010112:	4638      	mov	r0, r7
 8010114:	f001 fbec 	bl	80118f0 <__mcmp>
 8010118:	2800      	cmp	r0, #0
 801011a:	db25      	blt.n	8010168 <quorem+0xec>
 801011c:	4629      	mov	r1, r5
 801011e:	2000      	movs	r0, #0
 8010120:	f858 2b04 	ldr.w	r2, [r8], #4
 8010124:	f8d1 c000 	ldr.w	ip, [r1]
 8010128:	fa1f fe82 	uxth.w	lr, r2
 801012c:	fa1f f38c 	uxth.w	r3, ip
 8010130:	eba3 030e 	sub.w	r3, r3, lr
 8010134:	4403      	add	r3, r0
 8010136:	0c12      	lsrs	r2, r2, #16
 8010138:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801013c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010140:	b29b      	uxth	r3, r3
 8010142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010146:	45c1      	cmp	r9, r8
 8010148:	f841 3b04 	str.w	r3, [r1], #4
 801014c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010150:	d2e6      	bcs.n	8010120 <quorem+0xa4>
 8010152:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801015a:	b922      	cbnz	r2, 8010166 <quorem+0xea>
 801015c:	3b04      	subs	r3, #4
 801015e:	429d      	cmp	r5, r3
 8010160:	461a      	mov	r2, r3
 8010162:	d30b      	bcc.n	801017c <quorem+0x100>
 8010164:	613c      	str	r4, [r7, #16]
 8010166:	3601      	adds	r6, #1
 8010168:	4630      	mov	r0, r6
 801016a:	b003      	add	sp, #12
 801016c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010170:	6812      	ldr	r2, [r2, #0]
 8010172:	3b04      	subs	r3, #4
 8010174:	2a00      	cmp	r2, #0
 8010176:	d1cb      	bne.n	8010110 <quorem+0x94>
 8010178:	3c01      	subs	r4, #1
 801017a:	e7c6      	b.n	801010a <quorem+0x8e>
 801017c:	6812      	ldr	r2, [r2, #0]
 801017e:	3b04      	subs	r3, #4
 8010180:	2a00      	cmp	r2, #0
 8010182:	d1ef      	bne.n	8010164 <quorem+0xe8>
 8010184:	3c01      	subs	r4, #1
 8010186:	e7ea      	b.n	801015e <quorem+0xe2>
 8010188:	2000      	movs	r0, #0
 801018a:	e7ee      	b.n	801016a <quorem+0xee>
 801018c:	0000      	movs	r0, r0
	...

08010190 <_dtoa_r>:
 8010190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010194:	ed2d 8b02 	vpush	{d8}
 8010198:	69c7      	ldr	r7, [r0, #28]
 801019a:	b091      	sub	sp, #68	@ 0x44
 801019c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80101a0:	ec55 4b10 	vmov	r4, r5, d0
 80101a4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80101a6:	9107      	str	r1, [sp, #28]
 80101a8:	4681      	mov	r9, r0
 80101aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80101ac:	930d      	str	r3, [sp, #52]	@ 0x34
 80101ae:	b97f      	cbnz	r7, 80101d0 <_dtoa_r+0x40>
 80101b0:	2010      	movs	r0, #16
 80101b2:	f7fe f893 	bl	800e2dc <malloc>
 80101b6:	4602      	mov	r2, r0
 80101b8:	f8c9 001c 	str.w	r0, [r9, #28]
 80101bc:	b920      	cbnz	r0, 80101c8 <_dtoa_r+0x38>
 80101be:	4ba0      	ldr	r3, [pc, #640]	@ (8010440 <_dtoa_r+0x2b0>)
 80101c0:	21ef      	movs	r1, #239	@ 0xef
 80101c2:	48a0      	ldr	r0, [pc, #640]	@ (8010444 <_dtoa_r+0x2b4>)
 80101c4:	f002 fbb4 	bl	8012930 <__assert_func>
 80101c8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80101cc:	6007      	str	r7, [r0, #0]
 80101ce:	60c7      	str	r7, [r0, #12]
 80101d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80101d4:	6819      	ldr	r1, [r3, #0]
 80101d6:	b159      	cbz	r1, 80101f0 <_dtoa_r+0x60>
 80101d8:	685a      	ldr	r2, [r3, #4]
 80101da:	604a      	str	r2, [r1, #4]
 80101dc:	2301      	movs	r3, #1
 80101de:	4093      	lsls	r3, r2
 80101e0:	608b      	str	r3, [r1, #8]
 80101e2:	4648      	mov	r0, r9
 80101e4:	f001 f900 	bl	80113e8 <_Bfree>
 80101e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80101ec:	2200      	movs	r2, #0
 80101ee:	601a      	str	r2, [r3, #0]
 80101f0:	1e2b      	subs	r3, r5, #0
 80101f2:	bfbb      	ittet	lt
 80101f4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80101f8:	9303      	strlt	r3, [sp, #12]
 80101fa:	2300      	movge	r3, #0
 80101fc:	2201      	movlt	r2, #1
 80101fe:	bfac      	ite	ge
 8010200:	6033      	strge	r3, [r6, #0]
 8010202:	6032      	strlt	r2, [r6, #0]
 8010204:	4b90      	ldr	r3, [pc, #576]	@ (8010448 <_dtoa_r+0x2b8>)
 8010206:	9e03      	ldr	r6, [sp, #12]
 8010208:	43b3      	bics	r3, r6
 801020a:	d110      	bne.n	801022e <_dtoa_r+0x9e>
 801020c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801020e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010212:	6013      	str	r3, [r2, #0]
 8010214:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010218:	4323      	orrs	r3, r4
 801021a:	f000 84de 	beq.w	8010bda <_dtoa_r+0xa4a>
 801021e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010220:	4f8a      	ldr	r7, [pc, #552]	@ (801044c <_dtoa_r+0x2bc>)
 8010222:	2b00      	cmp	r3, #0
 8010224:	f000 84e0 	beq.w	8010be8 <_dtoa_r+0xa58>
 8010228:	1cfb      	adds	r3, r7, #3
 801022a:	f000 bcdb 	b.w	8010be4 <_dtoa_r+0xa54>
 801022e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010232:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801023a:	d10a      	bne.n	8010252 <_dtoa_r+0xc2>
 801023c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801023e:	2301      	movs	r3, #1
 8010240:	6013      	str	r3, [r2, #0]
 8010242:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010244:	b113      	cbz	r3, 801024c <_dtoa_r+0xbc>
 8010246:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010248:	4b81      	ldr	r3, [pc, #516]	@ (8010450 <_dtoa_r+0x2c0>)
 801024a:	6013      	str	r3, [r2, #0]
 801024c:	4f81      	ldr	r7, [pc, #516]	@ (8010454 <_dtoa_r+0x2c4>)
 801024e:	f000 bccb 	b.w	8010be8 <_dtoa_r+0xa58>
 8010252:	aa0e      	add	r2, sp, #56	@ 0x38
 8010254:	a90f      	add	r1, sp, #60	@ 0x3c
 8010256:	4648      	mov	r0, r9
 8010258:	eeb0 0b48 	vmov.f64	d0, d8
 801025c:	f001 fc68 	bl	8011b30 <__d2b>
 8010260:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8010264:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010266:	9001      	str	r0, [sp, #4]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d045      	beq.n	80102f8 <_dtoa_r+0x168>
 801026c:	eeb0 7b48 	vmov.f64	d7, d8
 8010270:	ee18 1a90 	vmov	r1, s17
 8010274:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010278:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801027c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010280:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010284:	2500      	movs	r5, #0
 8010286:	ee07 1a90 	vmov	s15, r1
 801028a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801028e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010428 <_dtoa_r+0x298>
 8010292:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010296:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010430 <_dtoa_r+0x2a0>
 801029a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801029e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010438 <_dtoa_r+0x2a8>
 80102a2:	ee07 3a90 	vmov	s15, r3
 80102a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80102aa:	eeb0 7b46 	vmov.f64	d7, d6
 80102ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 80102b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80102b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80102ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102be:	ee16 8a90 	vmov	r8, s13
 80102c2:	d508      	bpl.n	80102d6 <_dtoa_r+0x146>
 80102c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80102c8:	eeb4 6b47 	vcmp.f64	d6, d7
 80102cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102d0:	bf18      	it	ne
 80102d2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80102d6:	f1b8 0f16 	cmp.w	r8, #22
 80102da:	d82b      	bhi.n	8010334 <_dtoa_r+0x1a4>
 80102dc:	495e      	ldr	r1, [pc, #376]	@ (8010458 <_dtoa_r+0x2c8>)
 80102de:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80102e2:	ed91 7b00 	vldr	d7, [r1]
 80102e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80102ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ee:	d501      	bpl.n	80102f4 <_dtoa_r+0x164>
 80102f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80102f4:	2100      	movs	r1, #0
 80102f6:	e01e      	b.n	8010336 <_dtoa_r+0x1a6>
 80102f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102fa:	4413      	add	r3, r2
 80102fc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010300:	2920      	cmp	r1, #32
 8010302:	bfc1      	itttt	gt
 8010304:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010308:	408e      	lslgt	r6, r1
 801030a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801030e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010312:	bfd6      	itet	le
 8010314:	f1c1 0120 	rsble	r1, r1, #32
 8010318:	4331      	orrgt	r1, r6
 801031a:	fa04 f101 	lslle.w	r1, r4, r1
 801031e:	ee07 1a90 	vmov	s15, r1
 8010322:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010326:	3b01      	subs	r3, #1
 8010328:	ee17 1a90 	vmov	r1, s15
 801032c:	2501      	movs	r5, #1
 801032e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8010332:	e7a8      	b.n	8010286 <_dtoa_r+0xf6>
 8010334:	2101      	movs	r1, #1
 8010336:	1ad2      	subs	r2, r2, r3
 8010338:	1e53      	subs	r3, r2, #1
 801033a:	9306      	str	r3, [sp, #24]
 801033c:	bf45      	ittet	mi
 801033e:	f1c2 0301 	rsbmi	r3, r2, #1
 8010342:	9305      	strmi	r3, [sp, #20]
 8010344:	2300      	movpl	r3, #0
 8010346:	2300      	movmi	r3, #0
 8010348:	bf4c      	ite	mi
 801034a:	9306      	strmi	r3, [sp, #24]
 801034c:	9305      	strpl	r3, [sp, #20]
 801034e:	f1b8 0f00 	cmp.w	r8, #0
 8010352:	910c      	str	r1, [sp, #48]	@ 0x30
 8010354:	db18      	blt.n	8010388 <_dtoa_r+0x1f8>
 8010356:	9b06      	ldr	r3, [sp, #24]
 8010358:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801035c:	4443      	add	r3, r8
 801035e:	9306      	str	r3, [sp, #24]
 8010360:	2300      	movs	r3, #0
 8010362:	9a07      	ldr	r2, [sp, #28]
 8010364:	2a09      	cmp	r2, #9
 8010366:	d849      	bhi.n	80103fc <_dtoa_r+0x26c>
 8010368:	2a05      	cmp	r2, #5
 801036a:	bfc4      	itt	gt
 801036c:	3a04      	subgt	r2, #4
 801036e:	9207      	strgt	r2, [sp, #28]
 8010370:	9a07      	ldr	r2, [sp, #28]
 8010372:	f1a2 0202 	sub.w	r2, r2, #2
 8010376:	bfcc      	ite	gt
 8010378:	2400      	movgt	r4, #0
 801037a:	2401      	movle	r4, #1
 801037c:	2a03      	cmp	r2, #3
 801037e:	d848      	bhi.n	8010412 <_dtoa_r+0x282>
 8010380:	e8df f002 	tbb	[pc, r2]
 8010384:	3a2c2e0b 	.word	0x3a2c2e0b
 8010388:	9b05      	ldr	r3, [sp, #20]
 801038a:	2200      	movs	r2, #0
 801038c:	eba3 0308 	sub.w	r3, r3, r8
 8010390:	9305      	str	r3, [sp, #20]
 8010392:	920a      	str	r2, [sp, #40]	@ 0x28
 8010394:	f1c8 0300 	rsb	r3, r8, #0
 8010398:	e7e3      	b.n	8010362 <_dtoa_r+0x1d2>
 801039a:	2200      	movs	r2, #0
 801039c:	9208      	str	r2, [sp, #32]
 801039e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103a0:	2a00      	cmp	r2, #0
 80103a2:	dc39      	bgt.n	8010418 <_dtoa_r+0x288>
 80103a4:	f04f 0b01 	mov.w	fp, #1
 80103a8:	46da      	mov	sl, fp
 80103aa:	465a      	mov	r2, fp
 80103ac:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80103b0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80103b4:	2100      	movs	r1, #0
 80103b6:	2004      	movs	r0, #4
 80103b8:	f100 0614 	add.w	r6, r0, #20
 80103bc:	4296      	cmp	r6, r2
 80103be:	d930      	bls.n	8010422 <_dtoa_r+0x292>
 80103c0:	6079      	str	r1, [r7, #4]
 80103c2:	4648      	mov	r0, r9
 80103c4:	9304      	str	r3, [sp, #16]
 80103c6:	f000 ffcf 	bl	8011368 <_Balloc>
 80103ca:	9b04      	ldr	r3, [sp, #16]
 80103cc:	4607      	mov	r7, r0
 80103ce:	2800      	cmp	r0, #0
 80103d0:	d146      	bne.n	8010460 <_dtoa_r+0x2d0>
 80103d2:	4b22      	ldr	r3, [pc, #136]	@ (801045c <_dtoa_r+0x2cc>)
 80103d4:	4602      	mov	r2, r0
 80103d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80103da:	e6f2      	b.n	80101c2 <_dtoa_r+0x32>
 80103dc:	2201      	movs	r2, #1
 80103de:	e7dd      	b.n	801039c <_dtoa_r+0x20c>
 80103e0:	2200      	movs	r2, #0
 80103e2:	9208      	str	r2, [sp, #32]
 80103e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103e6:	eb08 0b02 	add.w	fp, r8, r2
 80103ea:	f10b 0a01 	add.w	sl, fp, #1
 80103ee:	4652      	mov	r2, sl
 80103f0:	2a01      	cmp	r2, #1
 80103f2:	bfb8      	it	lt
 80103f4:	2201      	movlt	r2, #1
 80103f6:	e7db      	b.n	80103b0 <_dtoa_r+0x220>
 80103f8:	2201      	movs	r2, #1
 80103fa:	e7f2      	b.n	80103e2 <_dtoa_r+0x252>
 80103fc:	2401      	movs	r4, #1
 80103fe:	2200      	movs	r2, #0
 8010400:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010404:	f04f 3bff 	mov.w	fp, #4294967295
 8010408:	2100      	movs	r1, #0
 801040a:	46da      	mov	sl, fp
 801040c:	2212      	movs	r2, #18
 801040e:	9109      	str	r1, [sp, #36]	@ 0x24
 8010410:	e7ce      	b.n	80103b0 <_dtoa_r+0x220>
 8010412:	2201      	movs	r2, #1
 8010414:	9208      	str	r2, [sp, #32]
 8010416:	e7f5      	b.n	8010404 <_dtoa_r+0x274>
 8010418:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801041c:	46da      	mov	sl, fp
 801041e:	465a      	mov	r2, fp
 8010420:	e7c6      	b.n	80103b0 <_dtoa_r+0x220>
 8010422:	3101      	adds	r1, #1
 8010424:	0040      	lsls	r0, r0, #1
 8010426:	e7c7      	b.n	80103b8 <_dtoa_r+0x228>
 8010428:	636f4361 	.word	0x636f4361
 801042c:	3fd287a7 	.word	0x3fd287a7
 8010430:	8b60c8b3 	.word	0x8b60c8b3
 8010434:	3fc68a28 	.word	0x3fc68a28
 8010438:	509f79fb 	.word	0x509f79fb
 801043c:	3fd34413 	.word	0x3fd34413
 8010440:	0801323c 	.word	0x0801323c
 8010444:	08013253 	.word	0x08013253
 8010448:	7ff00000 	.word	0x7ff00000
 801044c:	08013238 	.word	0x08013238
 8010450:	080135a1 	.word	0x080135a1
 8010454:	080135a0 	.word	0x080135a0
 8010458:	080133b0 	.word	0x080133b0
 801045c:	080132ab 	.word	0x080132ab
 8010460:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8010464:	f1ba 0f0e 	cmp.w	sl, #14
 8010468:	6010      	str	r0, [r2, #0]
 801046a:	d86f      	bhi.n	801054c <_dtoa_r+0x3bc>
 801046c:	2c00      	cmp	r4, #0
 801046e:	d06d      	beq.n	801054c <_dtoa_r+0x3bc>
 8010470:	f1b8 0f00 	cmp.w	r8, #0
 8010474:	f340 80c2 	ble.w	80105fc <_dtoa_r+0x46c>
 8010478:	4aca      	ldr	r2, [pc, #808]	@ (80107a4 <_dtoa_r+0x614>)
 801047a:	f008 010f 	and.w	r1, r8, #15
 801047e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010482:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010486:	ed92 7b00 	vldr	d7, [r2]
 801048a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801048e:	f000 80a9 	beq.w	80105e4 <_dtoa_r+0x454>
 8010492:	4ac5      	ldr	r2, [pc, #788]	@ (80107a8 <_dtoa_r+0x618>)
 8010494:	ed92 6b08 	vldr	d6, [r2, #32]
 8010498:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801049c:	ed8d 6b02 	vstr	d6, [sp, #8]
 80104a0:	f001 010f 	and.w	r1, r1, #15
 80104a4:	2203      	movs	r2, #3
 80104a6:	48c0      	ldr	r0, [pc, #768]	@ (80107a8 <_dtoa_r+0x618>)
 80104a8:	2900      	cmp	r1, #0
 80104aa:	f040 809d 	bne.w	80105e8 <_dtoa_r+0x458>
 80104ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80104b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80104b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80104ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80104bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80104c0:	2900      	cmp	r1, #0
 80104c2:	f000 80c1 	beq.w	8010648 <_dtoa_r+0x4b8>
 80104c6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80104ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80104ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104d2:	f140 80b9 	bpl.w	8010648 <_dtoa_r+0x4b8>
 80104d6:	f1ba 0f00 	cmp.w	sl, #0
 80104da:	f000 80b5 	beq.w	8010648 <_dtoa_r+0x4b8>
 80104de:	f1bb 0f00 	cmp.w	fp, #0
 80104e2:	dd31      	ble.n	8010548 <_dtoa_r+0x3b8>
 80104e4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80104e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80104ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80104f0:	f108 31ff 	add.w	r1, r8, #4294967295
 80104f4:	9104      	str	r1, [sp, #16]
 80104f6:	3201      	adds	r2, #1
 80104f8:	465c      	mov	r4, fp
 80104fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80104fe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010502:	ee07 2a90 	vmov	s15, r2
 8010506:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801050a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801050e:	ee15 2a90 	vmov	r2, s11
 8010512:	ec51 0b15 	vmov	r0, r1, d5
 8010516:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801051a:	2c00      	cmp	r4, #0
 801051c:	f040 8098 	bne.w	8010650 <_dtoa_r+0x4c0>
 8010520:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010524:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010528:	ec41 0b17 	vmov	d7, r0, r1
 801052c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010534:	f300 8261 	bgt.w	80109fa <_dtoa_r+0x86a>
 8010538:	eeb1 7b47 	vneg.f64	d7, d7
 801053c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010544:	f100 80f5 	bmi.w	8010732 <_dtoa_r+0x5a2>
 8010548:	ed8d 8b02 	vstr	d8, [sp, #8]
 801054c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801054e:	2a00      	cmp	r2, #0
 8010550:	f2c0 812c 	blt.w	80107ac <_dtoa_r+0x61c>
 8010554:	f1b8 0f0e 	cmp.w	r8, #14
 8010558:	f300 8128 	bgt.w	80107ac <_dtoa_r+0x61c>
 801055c:	4b91      	ldr	r3, [pc, #580]	@ (80107a4 <_dtoa_r+0x614>)
 801055e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010562:	ed93 6b00 	vldr	d6, [r3]
 8010566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010568:	2b00      	cmp	r3, #0
 801056a:	da03      	bge.n	8010574 <_dtoa_r+0x3e4>
 801056c:	f1ba 0f00 	cmp.w	sl, #0
 8010570:	f340 80d2 	ble.w	8010718 <_dtoa_r+0x588>
 8010574:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010578:	ed9d 7b02 	vldr	d7, [sp, #8]
 801057c:	463e      	mov	r6, r7
 801057e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010582:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010586:	ee15 3a10 	vmov	r3, s10
 801058a:	3330      	adds	r3, #48	@ 0x30
 801058c:	f806 3b01 	strb.w	r3, [r6], #1
 8010590:	1bf3      	subs	r3, r6, r7
 8010592:	459a      	cmp	sl, r3
 8010594:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010598:	eea3 7b46 	vfms.f64	d7, d3, d6
 801059c:	f040 80f8 	bne.w	8010790 <_dtoa_r+0x600>
 80105a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80105a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80105a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ac:	f300 80dd 	bgt.w	801076a <_dtoa_r+0x5da>
 80105b0:	eeb4 7b46 	vcmp.f64	d7, d6
 80105b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105b8:	d104      	bne.n	80105c4 <_dtoa_r+0x434>
 80105ba:	ee15 3a10 	vmov	r3, s10
 80105be:	07db      	lsls	r3, r3, #31
 80105c0:	f100 80d3 	bmi.w	801076a <_dtoa_r+0x5da>
 80105c4:	9901      	ldr	r1, [sp, #4]
 80105c6:	4648      	mov	r0, r9
 80105c8:	f000 ff0e 	bl	80113e8 <_Bfree>
 80105cc:	2300      	movs	r3, #0
 80105ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80105d0:	7033      	strb	r3, [r6, #0]
 80105d2:	f108 0301 	add.w	r3, r8, #1
 80105d6:	6013      	str	r3, [r2, #0]
 80105d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f000 8304 	beq.w	8010be8 <_dtoa_r+0xa58>
 80105e0:	601e      	str	r6, [r3, #0]
 80105e2:	e301      	b.n	8010be8 <_dtoa_r+0xa58>
 80105e4:	2202      	movs	r2, #2
 80105e6:	e75e      	b.n	80104a6 <_dtoa_r+0x316>
 80105e8:	07cc      	lsls	r4, r1, #31
 80105ea:	d504      	bpl.n	80105f6 <_dtoa_r+0x466>
 80105ec:	ed90 6b00 	vldr	d6, [r0]
 80105f0:	3201      	adds	r2, #1
 80105f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80105f6:	1049      	asrs	r1, r1, #1
 80105f8:	3008      	adds	r0, #8
 80105fa:	e755      	b.n	80104a8 <_dtoa_r+0x318>
 80105fc:	d022      	beq.n	8010644 <_dtoa_r+0x4b4>
 80105fe:	f1c8 0100 	rsb	r1, r8, #0
 8010602:	4a68      	ldr	r2, [pc, #416]	@ (80107a4 <_dtoa_r+0x614>)
 8010604:	f001 000f 	and.w	r0, r1, #15
 8010608:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801060c:	ed92 7b00 	vldr	d7, [r2]
 8010610:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010614:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010618:	4863      	ldr	r0, [pc, #396]	@ (80107a8 <_dtoa_r+0x618>)
 801061a:	1109      	asrs	r1, r1, #4
 801061c:	2400      	movs	r4, #0
 801061e:	2202      	movs	r2, #2
 8010620:	b929      	cbnz	r1, 801062e <_dtoa_r+0x49e>
 8010622:	2c00      	cmp	r4, #0
 8010624:	f43f af49 	beq.w	80104ba <_dtoa_r+0x32a>
 8010628:	ed8d 7b02 	vstr	d7, [sp, #8]
 801062c:	e745      	b.n	80104ba <_dtoa_r+0x32a>
 801062e:	07ce      	lsls	r6, r1, #31
 8010630:	d505      	bpl.n	801063e <_dtoa_r+0x4ae>
 8010632:	ed90 6b00 	vldr	d6, [r0]
 8010636:	3201      	adds	r2, #1
 8010638:	2401      	movs	r4, #1
 801063a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801063e:	1049      	asrs	r1, r1, #1
 8010640:	3008      	adds	r0, #8
 8010642:	e7ed      	b.n	8010620 <_dtoa_r+0x490>
 8010644:	2202      	movs	r2, #2
 8010646:	e738      	b.n	80104ba <_dtoa_r+0x32a>
 8010648:	f8cd 8010 	str.w	r8, [sp, #16]
 801064c:	4654      	mov	r4, sl
 801064e:	e754      	b.n	80104fa <_dtoa_r+0x36a>
 8010650:	4a54      	ldr	r2, [pc, #336]	@ (80107a4 <_dtoa_r+0x614>)
 8010652:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010656:	ed12 4b02 	vldr	d4, [r2, #-8]
 801065a:	9a08      	ldr	r2, [sp, #32]
 801065c:	ec41 0b17 	vmov	d7, r0, r1
 8010660:	443c      	add	r4, r7
 8010662:	b34a      	cbz	r2, 80106b8 <_dtoa_r+0x528>
 8010664:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010668:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801066c:	463e      	mov	r6, r7
 801066e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010672:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010676:	ee35 7b47 	vsub.f64	d7, d5, d7
 801067a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801067e:	ee14 2a90 	vmov	r2, s9
 8010682:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010686:	3230      	adds	r2, #48	@ 0x30
 8010688:	ee36 6b45 	vsub.f64	d6, d6, d5
 801068c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010694:	f806 2b01 	strb.w	r2, [r6], #1
 8010698:	d438      	bmi.n	801070c <_dtoa_r+0x57c>
 801069a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801069e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80106a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106a6:	d462      	bmi.n	801076e <_dtoa_r+0x5de>
 80106a8:	42a6      	cmp	r6, r4
 80106aa:	f43f af4d 	beq.w	8010548 <_dtoa_r+0x3b8>
 80106ae:	ee27 7b03 	vmul.f64	d7, d7, d3
 80106b2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80106b6:	e7e0      	b.n	801067a <_dtoa_r+0x4ea>
 80106b8:	4621      	mov	r1, r4
 80106ba:	463e      	mov	r6, r7
 80106bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80106c0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80106c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80106c8:	ee14 2a90 	vmov	r2, s9
 80106cc:	3230      	adds	r2, #48	@ 0x30
 80106ce:	f806 2b01 	strb.w	r2, [r6], #1
 80106d2:	42a6      	cmp	r6, r4
 80106d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80106d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80106dc:	d119      	bne.n	8010712 <_dtoa_r+0x582>
 80106de:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80106e2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80106e6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80106ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ee:	dc3e      	bgt.n	801076e <_dtoa_r+0x5de>
 80106f0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80106f4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80106f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106fc:	f57f af24 	bpl.w	8010548 <_dtoa_r+0x3b8>
 8010700:	460e      	mov	r6, r1
 8010702:	3901      	subs	r1, #1
 8010704:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010708:	2b30      	cmp	r3, #48	@ 0x30
 801070a:	d0f9      	beq.n	8010700 <_dtoa_r+0x570>
 801070c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010710:	e758      	b.n	80105c4 <_dtoa_r+0x434>
 8010712:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010716:	e7d5      	b.n	80106c4 <_dtoa_r+0x534>
 8010718:	d10b      	bne.n	8010732 <_dtoa_r+0x5a2>
 801071a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801071e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010722:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010726:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801072a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801072e:	f2c0 8161 	blt.w	80109f4 <_dtoa_r+0x864>
 8010732:	2400      	movs	r4, #0
 8010734:	4625      	mov	r5, r4
 8010736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010738:	43db      	mvns	r3, r3
 801073a:	9304      	str	r3, [sp, #16]
 801073c:	463e      	mov	r6, r7
 801073e:	f04f 0800 	mov.w	r8, #0
 8010742:	4621      	mov	r1, r4
 8010744:	4648      	mov	r0, r9
 8010746:	f000 fe4f 	bl	80113e8 <_Bfree>
 801074a:	2d00      	cmp	r5, #0
 801074c:	d0de      	beq.n	801070c <_dtoa_r+0x57c>
 801074e:	f1b8 0f00 	cmp.w	r8, #0
 8010752:	d005      	beq.n	8010760 <_dtoa_r+0x5d0>
 8010754:	45a8      	cmp	r8, r5
 8010756:	d003      	beq.n	8010760 <_dtoa_r+0x5d0>
 8010758:	4641      	mov	r1, r8
 801075a:	4648      	mov	r0, r9
 801075c:	f000 fe44 	bl	80113e8 <_Bfree>
 8010760:	4629      	mov	r1, r5
 8010762:	4648      	mov	r0, r9
 8010764:	f000 fe40 	bl	80113e8 <_Bfree>
 8010768:	e7d0      	b.n	801070c <_dtoa_r+0x57c>
 801076a:	f8cd 8010 	str.w	r8, [sp, #16]
 801076e:	4633      	mov	r3, r6
 8010770:	461e      	mov	r6, r3
 8010772:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010776:	2a39      	cmp	r2, #57	@ 0x39
 8010778:	d106      	bne.n	8010788 <_dtoa_r+0x5f8>
 801077a:	429f      	cmp	r7, r3
 801077c:	d1f8      	bne.n	8010770 <_dtoa_r+0x5e0>
 801077e:	9a04      	ldr	r2, [sp, #16]
 8010780:	3201      	adds	r2, #1
 8010782:	9204      	str	r2, [sp, #16]
 8010784:	2230      	movs	r2, #48	@ 0x30
 8010786:	703a      	strb	r2, [r7, #0]
 8010788:	781a      	ldrb	r2, [r3, #0]
 801078a:	3201      	adds	r2, #1
 801078c:	701a      	strb	r2, [r3, #0]
 801078e:	e7bd      	b.n	801070c <_dtoa_r+0x57c>
 8010790:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010794:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801079c:	f47f aeef 	bne.w	801057e <_dtoa_r+0x3ee>
 80107a0:	e710      	b.n	80105c4 <_dtoa_r+0x434>
 80107a2:	bf00      	nop
 80107a4:	080133b0 	.word	0x080133b0
 80107a8:	08013388 	.word	0x08013388
 80107ac:	9908      	ldr	r1, [sp, #32]
 80107ae:	2900      	cmp	r1, #0
 80107b0:	f000 80e3 	beq.w	801097a <_dtoa_r+0x7ea>
 80107b4:	9907      	ldr	r1, [sp, #28]
 80107b6:	2901      	cmp	r1, #1
 80107b8:	f300 80c8 	bgt.w	801094c <_dtoa_r+0x7bc>
 80107bc:	2d00      	cmp	r5, #0
 80107be:	f000 80c1 	beq.w	8010944 <_dtoa_r+0x7b4>
 80107c2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80107c6:	9e05      	ldr	r6, [sp, #20]
 80107c8:	461c      	mov	r4, r3
 80107ca:	9304      	str	r3, [sp, #16]
 80107cc:	9b05      	ldr	r3, [sp, #20]
 80107ce:	4413      	add	r3, r2
 80107d0:	9305      	str	r3, [sp, #20]
 80107d2:	9b06      	ldr	r3, [sp, #24]
 80107d4:	2101      	movs	r1, #1
 80107d6:	4413      	add	r3, r2
 80107d8:	4648      	mov	r0, r9
 80107da:	9306      	str	r3, [sp, #24]
 80107dc:	f000 ff02 	bl	80115e4 <__i2b>
 80107e0:	9b04      	ldr	r3, [sp, #16]
 80107e2:	4605      	mov	r5, r0
 80107e4:	b166      	cbz	r6, 8010800 <_dtoa_r+0x670>
 80107e6:	9a06      	ldr	r2, [sp, #24]
 80107e8:	2a00      	cmp	r2, #0
 80107ea:	dd09      	ble.n	8010800 <_dtoa_r+0x670>
 80107ec:	42b2      	cmp	r2, r6
 80107ee:	9905      	ldr	r1, [sp, #20]
 80107f0:	bfa8      	it	ge
 80107f2:	4632      	movge	r2, r6
 80107f4:	1a89      	subs	r1, r1, r2
 80107f6:	9105      	str	r1, [sp, #20]
 80107f8:	9906      	ldr	r1, [sp, #24]
 80107fa:	1ab6      	subs	r6, r6, r2
 80107fc:	1a8a      	subs	r2, r1, r2
 80107fe:	9206      	str	r2, [sp, #24]
 8010800:	b1fb      	cbz	r3, 8010842 <_dtoa_r+0x6b2>
 8010802:	9a08      	ldr	r2, [sp, #32]
 8010804:	2a00      	cmp	r2, #0
 8010806:	f000 80bc 	beq.w	8010982 <_dtoa_r+0x7f2>
 801080a:	b19c      	cbz	r4, 8010834 <_dtoa_r+0x6a4>
 801080c:	4629      	mov	r1, r5
 801080e:	4622      	mov	r2, r4
 8010810:	4648      	mov	r0, r9
 8010812:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010814:	f000 ffa6 	bl	8011764 <__pow5mult>
 8010818:	9a01      	ldr	r2, [sp, #4]
 801081a:	4601      	mov	r1, r0
 801081c:	4605      	mov	r5, r0
 801081e:	4648      	mov	r0, r9
 8010820:	f000 fef6 	bl	8011610 <__multiply>
 8010824:	9901      	ldr	r1, [sp, #4]
 8010826:	9004      	str	r0, [sp, #16]
 8010828:	4648      	mov	r0, r9
 801082a:	f000 fddd 	bl	80113e8 <_Bfree>
 801082e:	9a04      	ldr	r2, [sp, #16]
 8010830:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010832:	9201      	str	r2, [sp, #4]
 8010834:	1b1a      	subs	r2, r3, r4
 8010836:	d004      	beq.n	8010842 <_dtoa_r+0x6b2>
 8010838:	9901      	ldr	r1, [sp, #4]
 801083a:	4648      	mov	r0, r9
 801083c:	f000 ff92 	bl	8011764 <__pow5mult>
 8010840:	9001      	str	r0, [sp, #4]
 8010842:	2101      	movs	r1, #1
 8010844:	4648      	mov	r0, r9
 8010846:	f000 fecd 	bl	80115e4 <__i2b>
 801084a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801084c:	4604      	mov	r4, r0
 801084e:	2b00      	cmp	r3, #0
 8010850:	f000 81d0 	beq.w	8010bf4 <_dtoa_r+0xa64>
 8010854:	461a      	mov	r2, r3
 8010856:	4601      	mov	r1, r0
 8010858:	4648      	mov	r0, r9
 801085a:	f000 ff83 	bl	8011764 <__pow5mult>
 801085e:	9b07      	ldr	r3, [sp, #28]
 8010860:	2b01      	cmp	r3, #1
 8010862:	4604      	mov	r4, r0
 8010864:	f300 8095 	bgt.w	8010992 <_dtoa_r+0x802>
 8010868:	9b02      	ldr	r3, [sp, #8]
 801086a:	2b00      	cmp	r3, #0
 801086c:	f040 808b 	bne.w	8010986 <_dtoa_r+0x7f6>
 8010870:	9b03      	ldr	r3, [sp, #12]
 8010872:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010876:	2a00      	cmp	r2, #0
 8010878:	f040 8087 	bne.w	801098a <_dtoa_r+0x7fa>
 801087c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010880:	0d12      	lsrs	r2, r2, #20
 8010882:	0512      	lsls	r2, r2, #20
 8010884:	2a00      	cmp	r2, #0
 8010886:	f000 8082 	beq.w	801098e <_dtoa_r+0x7fe>
 801088a:	9b05      	ldr	r3, [sp, #20]
 801088c:	3301      	adds	r3, #1
 801088e:	9305      	str	r3, [sp, #20]
 8010890:	9b06      	ldr	r3, [sp, #24]
 8010892:	3301      	adds	r3, #1
 8010894:	9306      	str	r3, [sp, #24]
 8010896:	2301      	movs	r3, #1
 8010898:	930b      	str	r3, [sp, #44]	@ 0x2c
 801089a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801089c:	2b00      	cmp	r3, #0
 801089e:	f000 81af 	beq.w	8010c00 <_dtoa_r+0xa70>
 80108a2:	6922      	ldr	r2, [r4, #16]
 80108a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80108a8:	6910      	ldr	r0, [r2, #16]
 80108aa:	f000 fe4f 	bl	801154c <__hi0bits>
 80108ae:	f1c0 0020 	rsb	r0, r0, #32
 80108b2:	9b06      	ldr	r3, [sp, #24]
 80108b4:	4418      	add	r0, r3
 80108b6:	f010 001f 	ands.w	r0, r0, #31
 80108ba:	d076      	beq.n	80109aa <_dtoa_r+0x81a>
 80108bc:	f1c0 0220 	rsb	r2, r0, #32
 80108c0:	2a04      	cmp	r2, #4
 80108c2:	dd69      	ble.n	8010998 <_dtoa_r+0x808>
 80108c4:	9b05      	ldr	r3, [sp, #20]
 80108c6:	f1c0 001c 	rsb	r0, r0, #28
 80108ca:	4403      	add	r3, r0
 80108cc:	9305      	str	r3, [sp, #20]
 80108ce:	9b06      	ldr	r3, [sp, #24]
 80108d0:	4406      	add	r6, r0
 80108d2:	4403      	add	r3, r0
 80108d4:	9306      	str	r3, [sp, #24]
 80108d6:	9b05      	ldr	r3, [sp, #20]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	dd05      	ble.n	80108e8 <_dtoa_r+0x758>
 80108dc:	9901      	ldr	r1, [sp, #4]
 80108de:	461a      	mov	r2, r3
 80108e0:	4648      	mov	r0, r9
 80108e2:	f000 ff99 	bl	8011818 <__lshift>
 80108e6:	9001      	str	r0, [sp, #4]
 80108e8:	9b06      	ldr	r3, [sp, #24]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	dd05      	ble.n	80108fa <_dtoa_r+0x76a>
 80108ee:	4621      	mov	r1, r4
 80108f0:	461a      	mov	r2, r3
 80108f2:	4648      	mov	r0, r9
 80108f4:	f000 ff90 	bl	8011818 <__lshift>
 80108f8:	4604      	mov	r4, r0
 80108fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d056      	beq.n	80109ae <_dtoa_r+0x81e>
 8010900:	9801      	ldr	r0, [sp, #4]
 8010902:	4621      	mov	r1, r4
 8010904:	f000 fff4 	bl	80118f0 <__mcmp>
 8010908:	2800      	cmp	r0, #0
 801090a:	da50      	bge.n	80109ae <_dtoa_r+0x81e>
 801090c:	f108 33ff 	add.w	r3, r8, #4294967295
 8010910:	9304      	str	r3, [sp, #16]
 8010912:	9901      	ldr	r1, [sp, #4]
 8010914:	2300      	movs	r3, #0
 8010916:	220a      	movs	r2, #10
 8010918:	4648      	mov	r0, r9
 801091a:	f000 fd87 	bl	801142c <__multadd>
 801091e:	9b08      	ldr	r3, [sp, #32]
 8010920:	9001      	str	r0, [sp, #4]
 8010922:	2b00      	cmp	r3, #0
 8010924:	f000 816e 	beq.w	8010c04 <_dtoa_r+0xa74>
 8010928:	4629      	mov	r1, r5
 801092a:	2300      	movs	r3, #0
 801092c:	220a      	movs	r2, #10
 801092e:	4648      	mov	r0, r9
 8010930:	f000 fd7c 	bl	801142c <__multadd>
 8010934:	f1bb 0f00 	cmp.w	fp, #0
 8010938:	4605      	mov	r5, r0
 801093a:	dc64      	bgt.n	8010a06 <_dtoa_r+0x876>
 801093c:	9b07      	ldr	r3, [sp, #28]
 801093e:	2b02      	cmp	r3, #2
 8010940:	dc3e      	bgt.n	80109c0 <_dtoa_r+0x830>
 8010942:	e060      	b.n	8010a06 <_dtoa_r+0x876>
 8010944:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010946:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801094a:	e73c      	b.n	80107c6 <_dtoa_r+0x636>
 801094c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010950:	42a3      	cmp	r3, r4
 8010952:	bfbf      	itttt	lt
 8010954:	1ae2      	sublt	r2, r4, r3
 8010956:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010958:	189b      	addlt	r3, r3, r2
 801095a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801095c:	bfae      	itee	ge
 801095e:	1b1c      	subge	r4, r3, r4
 8010960:	4623      	movlt	r3, r4
 8010962:	2400      	movlt	r4, #0
 8010964:	f1ba 0f00 	cmp.w	sl, #0
 8010968:	bfb5      	itete	lt
 801096a:	9a05      	ldrlt	r2, [sp, #20]
 801096c:	9e05      	ldrge	r6, [sp, #20]
 801096e:	eba2 060a 	sublt.w	r6, r2, sl
 8010972:	4652      	movge	r2, sl
 8010974:	bfb8      	it	lt
 8010976:	2200      	movlt	r2, #0
 8010978:	e727      	b.n	80107ca <_dtoa_r+0x63a>
 801097a:	9e05      	ldr	r6, [sp, #20]
 801097c:	9d08      	ldr	r5, [sp, #32]
 801097e:	461c      	mov	r4, r3
 8010980:	e730      	b.n	80107e4 <_dtoa_r+0x654>
 8010982:	461a      	mov	r2, r3
 8010984:	e758      	b.n	8010838 <_dtoa_r+0x6a8>
 8010986:	2300      	movs	r3, #0
 8010988:	e786      	b.n	8010898 <_dtoa_r+0x708>
 801098a:	9b02      	ldr	r3, [sp, #8]
 801098c:	e784      	b.n	8010898 <_dtoa_r+0x708>
 801098e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010990:	e783      	b.n	801089a <_dtoa_r+0x70a>
 8010992:	2300      	movs	r3, #0
 8010994:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010996:	e784      	b.n	80108a2 <_dtoa_r+0x712>
 8010998:	d09d      	beq.n	80108d6 <_dtoa_r+0x746>
 801099a:	9b05      	ldr	r3, [sp, #20]
 801099c:	321c      	adds	r2, #28
 801099e:	4413      	add	r3, r2
 80109a0:	9305      	str	r3, [sp, #20]
 80109a2:	9b06      	ldr	r3, [sp, #24]
 80109a4:	4416      	add	r6, r2
 80109a6:	4413      	add	r3, r2
 80109a8:	e794      	b.n	80108d4 <_dtoa_r+0x744>
 80109aa:	4602      	mov	r2, r0
 80109ac:	e7f5      	b.n	801099a <_dtoa_r+0x80a>
 80109ae:	f1ba 0f00 	cmp.w	sl, #0
 80109b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80109b6:	46d3      	mov	fp, sl
 80109b8:	dc21      	bgt.n	80109fe <_dtoa_r+0x86e>
 80109ba:	9b07      	ldr	r3, [sp, #28]
 80109bc:	2b02      	cmp	r3, #2
 80109be:	dd1e      	ble.n	80109fe <_dtoa_r+0x86e>
 80109c0:	f1bb 0f00 	cmp.w	fp, #0
 80109c4:	f47f aeb7 	bne.w	8010736 <_dtoa_r+0x5a6>
 80109c8:	4621      	mov	r1, r4
 80109ca:	465b      	mov	r3, fp
 80109cc:	2205      	movs	r2, #5
 80109ce:	4648      	mov	r0, r9
 80109d0:	f000 fd2c 	bl	801142c <__multadd>
 80109d4:	4601      	mov	r1, r0
 80109d6:	4604      	mov	r4, r0
 80109d8:	9801      	ldr	r0, [sp, #4]
 80109da:	f000 ff89 	bl	80118f0 <__mcmp>
 80109de:	2800      	cmp	r0, #0
 80109e0:	f77f aea9 	ble.w	8010736 <_dtoa_r+0x5a6>
 80109e4:	463e      	mov	r6, r7
 80109e6:	2331      	movs	r3, #49	@ 0x31
 80109e8:	f806 3b01 	strb.w	r3, [r6], #1
 80109ec:	9b04      	ldr	r3, [sp, #16]
 80109ee:	3301      	adds	r3, #1
 80109f0:	9304      	str	r3, [sp, #16]
 80109f2:	e6a4      	b.n	801073e <_dtoa_r+0x5ae>
 80109f4:	f8cd 8010 	str.w	r8, [sp, #16]
 80109f8:	4654      	mov	r4, sl
 80109fa:	4625      	mov	r5, r4
 80109fc:	e7f2      	b.n	80109e4 <_dtoa_r+0x854>
 80109fe:	9b08      	ldr	r3, [sp, #32]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	f000 8103 	beq.w	8010c0c <_dtoa_r+0xa7c>
 8010a06:	2e00      	cmp	r6, #0
 8010a08:	dd05      	ble.n	8010a16 <_dtoa_r+0x886>
 8010a0a:	4629      	mov	r1, r5
 8010a0c:	4632      	mov	r2, r6
 8010a0e:	4648      	mov	r0, r9
 8010a10:	f000 ff02 	bl	8011818 <__lshift>
 8010a14:	4605      	mov	r5, r0
 8010a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d058      	beq.n	8010ace <_dtoa_r+0x93e>
 8010a1c:	6869      	ldr	r1, [r5, #4]
 8010a1e:	4648      	mov	r0, r9
 8010a20:	f000 fca2 	bl	8011368 <_Balloc>
 8010a24:	4606      	mov	r6, r0
 8010a26:	b928      	cbnz	r0, 8010a34 <_dtoa_r+0x8a4>
 8010a28:	4b82      	ldr	r3, [pc, #520]	@ (8010c34 <_dtoa_r+0xaa4>)
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010a30:	f7ff bbc7 	b.w	80101c2 <_dtoa_r+0x32>
 8010a34:	692a      	ldr	r2, [r5, #16]
 8010a36:	3202      	adds	r2, #2
 8010a38:	0092      	lsls	r2, r2, #2
 8010a3a:	f105 010c 	add.w	r1, r5, #12
 8010a3e:	300c      	adds	r0, #12
 8010a40:	f7ff fafd 	bl	801003e <memcpy>
 8010a44:	2201      	movs	r2, #1
 8010a46:	4631      	mov	r1, r6
 8010a48:	4648      	mov	r0, r9
 8010a4a:	f000 fee5 	bl	8011818 <__lshift>
 8010a4e:	1c7b      	adds	r3, r7, #1
 8010a50:	9305      	str	r3, [sp, #20]
 8010a52:	eb07 030b 	add.w	r3, r7, fp
 8010a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a58:	9b02      	ldr	r3, [sp, #8]
 8010a5a:	f003 0301 	and.w	r3, r3, #1
 8010a5e:	46a8      	mov	r8, r5
 8010a60:	9308      	str	r3, [sp, #32]
 8010a62:	4605      	mov	r5, r0
 8010a64:	9b05      	ldr	r3, [sp, #20]
 8010a66:	9801      	ldr	r0, [sp, #4]
 8010a68:	4621      	mov	r1, r4
 8010a6a:	f103 3bff 	add.w	fp, r3, #4294967295
 8010a6e:	f7ff fb05 	bl	801007c <quorem>
 8010a72:	4641      	mov	r1, r8
 8010a74:	9002      	str	r0, [sp, #8]
 8010a76:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010a7a:	9801      	ldr	r0, [sp, #4]
 8010a7c:	f000 ff38 	bl	80118f0 <__mcmp>
 8010a80:	462a      	mov	r2, r5
 8010a82:	9006      	str	r0, [sp, #24]
 8010a84:	4621      	mov	r1, r4
 8010a86:	4648      	mov	r0, r9
 8010a88:	f000 ff4e 	bl	8011928 <__mdiff>
 8010a8c:	68c2      	ldr	r2, [r0, #12]
 8010a8e:	4606      	mov	r6, r0
 8010a90:	b9fa      	cbnz	r2, 8010ad2 <_dtoa_r+0x942>
 8010a92:	4601      	mov	r1, r0
 8010a94:	9801      	ldr	r0, [sp, #4]
 8010a96:	f000 ff2b 	bl	80118f0 <__mcmp>
 8010a9a:	4602      	mov	r2, r0
 8010a9c:	4631      	mov	r1, r6
 8010a9e:	4648      	mov	r0, r9
 8010aa0:	920a      	str	r2, [sp, #40]	@ 0x28
 8010aa2:	f000 fca1 	bl	80113e8 <_Bfree>
 8010aa6:	9b07      	ldr	r3, [sp, #28]
 8010aa8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010aaa:	9e05      	ldr	r6, [sp, #20]
 8010aac:	ea43 0102 	orr.w	r1, r3, r2
 8010ab0:	9b08      	ldr	r3, [sp, #32]
 8010ab2:	4319      	orrs	r1, r3
 8010ab4:	d10f      	bne.n	8010ad6 <_dtoa_r+0x946>
 8010ab6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010aba:	d028      	beq.n	8010b0e <_dtoa_r+0x97e>
 8010abc:	9b06      	ldr	r3, [sp, #24]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	dd02      	ble.n	8010ac8 <_dtoa_r+0x938>
 8010ac2:	9b02      	ldr	r3, [sp, #8]
 8010ac4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010ac8:	f88b a000 	strb.w	sl, [fp]
 8010acc:	e639      	b.n	8010742 <_dtoa_r+0x5b2>
 8010ace:	4628      	mov	r0, r5
 8010ad0:	e7bd      	b.n	8010a4e <_dtoa_r+0x8be>
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	e7e2      	b.n	8010a9c <_dtoa_r+0x90c>
 8010ad6:	9b06      	ldr	r3, [sp, #24]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	db04      	blt.n	8010ae6 <_dtoa_r+0x956>
 8010adc:	9907      	ldr	r1, [sp, #28]
 8010ade:	430b      	orrs	r3, r1
 8010ae0:	9908      	ldr	r1, [sp, #32]
 8010ae2:	430b      	orrs	r3, r1
 8010ae4:	d120      	bne.n	8010b28 <_dtoa_r+0x998>
 8010ae6:	2a00      	cmp	r2, #0
 8010ae8:	ddee      	ble.n	8010ac8 <_dtoa_r+0x938>
 8010aea:	9901      	ldr	r1, [sp, #4]
 8010aec:	2201      	movs	r2, #1
 8010aee:	4648      	mov	r0, r9
 8010af0:	f000 fe92 	bl	8011818 <__lshift>
 8010af4:	4621      	mov	r1, r4
 8010af6:	9001      	str	r0, [sp, #4]
 8010af8:	f000 fefa 	bl	80118f0 <__mcmp>
 8010afc:	2800      	cmp	r0, #0
 8010afe:	dc03      	bgt.n	8010b08 <_dtoa_r+0x978>
 8010b00:	d1e2      	bne.n	8010ac8 <_dtoa_r+0x938>
 8010b02:	f01a 0f01 	tst.w	sl, #1
 8010b06:	d0df      	beq.n	8010ac8 <_dtoa_r+0x938>
 8010b08:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010b0c:	d1d9      	bne.n	8010ac2 <_dtoa_r+0x932>
 8010b0e:	2339      	movs	r3, #57	@ 0x39
 8010b10:	f88b 3000 	strb.w	r3, [fp]
 8010b14:	4633      	mov	r3, r6
 8010b16:	461e      	mov	r6, r3
 8010b18:	3b01      	subs	r3, #1
 8010b1a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010b1e:	2a39      	cmp	r2, #57	@ 0x39
 8010b20:	d053      	beq.n	8010bca <_dtoa_r+0xa3a>
 8010b22:	3201      	adds	r2, #1
 8010b24:	701a      	strb	r2, [r3, #0]
 8010b26:	e60c      	b.n	8010742 <_dtoa_r+0x5b2>
 8010b28:	2a00      	cmp	r2, #0
 8010b2a:	dd07      	ble.n	8010b3c <_dtoa_r+0x9ac>
 8010b2c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010b30:	d0ed      	beq.n	8010b0e <_dtoa_r+0x97e>
 8010b32:	f10a 0301 	add.w	r3, sl, #1
 8010b36:	f88b 3000 	strb.w	r3, [fp]
 8010b3a:	e602      	b.n	8010742 <_dtoa_r+0x5b2>
 8010b3c:	9b05      	ldr	r3, [sp, #20]
 8010b3e:	9a05      	ldr	r2, [sp, #20]
 8010b40:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b46:	4293      	cmp	r3, r2
 8010b48:	d029      	beq.n	8010b9e <_dtoa_r+0xa0e>
 8010b4a:	9901      	ldr	r1, [sp, #4]
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	220a      	movs	r2, #10
 8010b50:	4648      	mov	r0, r9
 8010b52:	f000 fc6b 	bl	801142c <__multadd>
 8010b56:	45a8      	cmp	r8, r5
 8010b58:	9001      	str	r0, [sp, #4]
 8010b5a:	f04f 0300 	mov.w	r3, #0
 8010b5e:	f04f 020a 	mov.w	r2, #10
 8010b62:	4641      	mov	r1, r8
 8010b64:	4648      	mov	r0, r9
 8010b66:	d107      	bne.n	8010b78 <_dtoa_r+0x9e8>
 8010b68:	f000 fc60 	bl	801142c <__multadd>
 8010b6c:	4680      	mov	r8, r0
 8010b6e:	4605      	mov	r5, r0
 8010b70:	9b05      	ldr	r3, [sp, #20]
 8010b72:	3301      	adds	r3, #1
 8010b74:	9305      	str	r3, [sp, #20]
 8010b76:	e775      	b.n	8010a64 <_dtoa_r+0x8d4>
 8010b78:	f000 fc58 	bl	801142c <__multadd>
 8010b7c:	4629      	mov	r1, r5
 8010b7e:	4680      	mov	r8, r0
 8010b80:	2300      	movs	r3, #0
 8010b82:	220a      	movs	r2, #10
 8010b84:	4648      	mov	r0, r9
 8010b86:	f000 fc51 	bl	801142c <__multadd>
 8010b8a:	4605      	mov	r5, r0
 8010b8c:	e7f0      	b.n	8010b70 <_dtoa_r+0x9e0>
 8010b8e:	f1bb 0f00 	cmp.w	fp, #0
 8010b92:	bfcc      	ite	gt
 8010b94:	465e      	movgt	r6, fp
 8010b96:	2601      	movle	r6, #1
 8010b98:	443e      	add	r6, r7
 8010b9a:	f04f 0800 	mov.w	r8, #0
 8010b9e:	9901      	ldr	r1, [sp, #4]
 8010ba0:	2201      	movs	r2, #1
 8010ba2:	4648      	mov	r0, r9
 8010ba4:	f000 fe38 	bl	8011818 <__lshift>
 8010ba8:	4621      	mov	r1, r4
 8010baa:	9001      	str	r0, [sp, #4]
 8010bac:	f000 fea0 	bl	80118f0 <__mcmp>
 8010bb0:	2800      	cmp	r0, #0
 8010bb2:	dcaf      	bgt.n	8010b14 <_dtoa_r+0x984>
 8010bb4:	d102      	bne.n	8010bbc <_dtoa_r+0xa2c>
 8010bb6:	f01a 0f01 	tst.w	sl, #1
 8010bba:	d1ab      	bne.n	8010b14 <_dtoa_r+0x984>
 8010bbc:	4633      	mov	r3, r6
 8010bbe:	461e      	mov	r6, r3
 8010bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010bc4:	2a30      	cmp	r2, #48	@ 0x30
 8010bc6:	d0fa      	beq.n	8010bbe <_dtoa_r+0xa2e>
 8010bc8:	e5bb      	b.n	8010742 <_dtoa_r+0x5b2>
 8010bca:	429f      	cmp	r7, r3
 8010bcc:	d1a3      	bne.n	8010b16 <_dtoa_r+0x986>
 8010bce:	9b04      	ldr	r3, [sp, #16]
 8010bd0:	3301      	adds	r3, #1
 8010bd2:	9304      	str	r3, [sp, #16]
 8010bd4:	2331      	movs	r3, #49	@ 0x31
 8010bd6:	703b      	strb	r3, [r7, #0]
 8010bd8:	e5b3      	b.n	8010742 <_dtoa_r+0x5b2>
 8010bda:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010bdc:	4f16      	ldr	r7, [pc, #88]	@ (8010c38 <_dtoa_r+0xaa8>)
 8010bde:	b11b      	cbz	r3, 8010be8 <_dtoa_r+0xa58>
 8010be0:	f107 0308 	add.w	r3, r7, #8
 8010be4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010be6:	6013      	str	r3, [r2, #0]
 8010be8:	4638      	mov	r0, r7
 8010bea:	b011      	add	sp, #68	@ 0x44
 8010bec:	ecbd 8b02 	vpop	{d8}
 8010bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf4:	9b07      	ldr	r3, [sp, #28]
 8010bf6:	2b01      	cmp	r3, #1
 8010bf8:	f77f ae36 	ble.w	8010868 <_dtoa_r+0x6d8>
 8010bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c00:	2001      	movs	r0, #1
 8010c02:	e656      	b.n	80108b2 <_dtoa_r+0x722>
 8010c04:	f1bb 0f00 	cmp.w	fp, #0
 8010c08:	f77f aed7 	ble.w	80109ba <_dtoa_r+0x82a>
 8010c0c:	463e      	mov	r6, r7
 8010c0e:	9801      	ldr	r0, [sp, #4]
 8010c10:	4621      	mov	r1, r4
 8010c12:	f7ff fa33 	bl	801007c <quorem>
 8010c16:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010c1a:	f806 ab01 	strb.w	sl, [r6], #1
 8010c1e:	1bf2      	subs	r2, r6, r7
 8010c20:	4593      	cmp	fp, r2
 8010c22:	ddb4      	ble.n	8010b8e <_dtoa_r+0x9fe>
 8010c24:	9901      	ldr	r1, [sp, #4]
 8010c26:	2300      	movs	r3, #0
 8010c28:	220a      	movs	r2, #10
 8010c2a:	4648      	mov	r0, r9
 8010c2c:	f000 fbfe 	bl	801142c <__multadd>
 8010c30:	9001      	str	r0, [sp, #4]
 8010c32:	e7ec      	b.n	8010c0e <_dtoa_r+0xa7e>
 8010c34:	080132ab 	.word	0x080132ab
 8010c38:	0801322f 	.word	0x0801322f

08010c3c <_free_r>:
 8010c3c:	b538      	push	{r3, r4, r5, lr}
 8010c3e:	4605      	mov	r5, r0
 8010c40:	2900      	cmp	r1, #0
 8010c42:	d041      	beq.n	8010cc8 <_free_r+0x8c>
 8010c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c48:	1f0c      	subs	r4, r1, #4
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	bfb8      	it	lt
 8010c4e:	18e4      	addlt	r4, r4, r3
 8010c50:	f7fd fbee 	bl	800e430 <__malloc_lock>
 8010c54:	4a1d      	ldr	r2, [pc, #116]	@ (8010ccc <_free_r+0x90>)
 8010c56:	6813      	ldr	r3, [r2, #0]
 8010c58:	b933      	cbnz	r3, 8010c68 <_free_r+0x2c>
 8010c5a:	6063      	str	r3, [r4, #4]
 8010c5c:	6014      	str	r4, [r2, #0]
 8010c5e:	4628      	mov	r0, r5
 8010c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c64:	f7fd bbea 	b.w	800e43c <__malloc_unlock>
 8010c68:	42a3      	cmp	r3, r4
 8010c6a:	d908      	bls.n	8010c7e <_free_r+0x42>
 8010c6c:	6820      	ldr	r0, [r4, #0]
 8010c6e:	1821      	adds	r1, r4, r0
 8010c70:	428b      	cmp	r3, r1
 8010c72:	bf01      	itttt	eq
 8010c74:	6819      	ldreq	r1, [r3, #0]
 8010c76:	685b      	ldreq	r3, [r3, #4]
 8010c78:	1809      	addeq	r1, r1, r0
 8010c7a:	6021      	streq	r1, [r4, #0]
 8010c7c:	e7ed      	b.n	8010c5a <_free_r+0x1e>
 8010c7e:	461a      	mov	r2, r3
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	b10b      	cbz	r3, 8010c88 <_free_r+0x4c>
 8010c84:	42a3      	cmp	r3, r4
 8010c86:	d9fa      	bls.n	8010c7e <_free_r+0x42>
 8010c88:	6811      	ldr	r1, [r2, #0]
 8010c8a:	1850      	adds	r0, r2, r1
 8010c8c:	42a0      	cmp	r0, r4
 8010c8e:	d10b      	bne.n	8010ca8 <_free_r+0x6c>
 8010c90:	6820      	ldr	r0, [r4, #0]
 8010c92:	4401      	add	r1, r0
 8010c94:	1850      	adds	r0, r2, r1
 8010c96:	4283      	cmp	r3, r0
 8010c98:	6011      	str	r1, [r2, #0]
 8010c9a:	d1e0      	bne.n	8010c5e <_free_r+0x22>
 8010c9c:	6818      	ldr	r0, [r3, #0]
 8010c9e:	685b      	ldr	r3, [r3, #4]
 8010ca0:	6053      	str	r3, [r2, #4]
 8010ca2:	4408      	add	r0, r1
 8010ca4:	6010      	str	r0, [r2, #0]
 8010ca6:	e7da      	b.n	8010c5e <_free_r+0x22>
 8010ca8:	d902      	bls.n	8010cb0 <_free_r+0x74>
 8010caa:	230c      	movs	r3, #12
 8010cac:	602b      	str	r3, [r5, #0]
 8010cae:	e7d6      	b.n	8010c5e <_free_r+0x22>
 8010cb0:	6820      	ldr	r0, [r4, #0]
 8010cb2:	1821      	adds	r1, r4, r0
 8010cb4:	428b      	cmp	r3, r1
 8010cb6:	bf04      	itt	eq
 8010cb8:	6819      	ldreq	r1, [r3, #0]
 8010cba:	685b      	ldreq	r3, [r3, #4]
 8010cbc:	6063      	str	r3, [r4, #4]
 8010cbe:	bf04      	itt	eq
 8010cc0:	1809      	addeq	r1, r1, r0
 8010cc2:	6021      	streq	r1, [r4, #0]
 8010cc4:	6054      	str	r4, [r2, #4]
 8010cc6:	e7ca      	b.n	8010c5e <_free_r+0x22>
 8010cc8:	bd38      	pop	{r3, r4, r5, pc}
 8010cca:	bf00      	nop
 8010ccc:	24000d34 	.word	0x24000d34

08010cd0 <rshift>:
 8010cd0:	6903      	ldr	r3, [r0, #16]
 8010cd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010cd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cda:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010cde:	f100 0414 	add.w	r4, r0, #20
 8010ce2:	dd45      	ble.n	8010d70 <rshift+0xa0>
 8010ce4:	f011 011f 	ands.w	r1, r1, #31
 8010ce8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010cec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010cf0:	d10c      	bne.n	8010d0c <rshift+0x3c>
 8010cf2:	f100 0710 	add.w	r7, r0, #16
 8010cf6:	4629      	mov	r1, r5
 8010cf8:	42b1      	cmp	r1, r6
 8010cfa:	d334      	bcc.n	8010d66 <rshift+0x96>
 8010cfc:	1a9b      	subs	r3, r3, r2
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	1eea      	subs	r2, r5, #3
 8010d02:	4296      	cmp	r6, r2
 8010d04:	bf38      	it	cc
 8010d06:	2300      	movcc	r3, #0
 8010d08:	4423      	add	r3, r4
 8010d0a:	e015      	b.n	8010d38 <rshift+0x68>
 8010d0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010d10:	f1c1 0820 	rsb	r8, r1, #32
 8010d14:	40cf      	lsrs	r7, r1
 8010d16:	f105 0e04 	add.w	lr, r5, #4
 8010d1a:	46a1      	mov	r9, r4
 8010d1c:	4576      	cmp	r6, lr
 8010d1e:	46f4      	mov	ip, lr
 8010d20:	d815      	bhi.n	8010d4e <rshift+0x7e>
 8010d22:	1a9a      	subs	r2, r3, r2
 8010d24:	0092      	lsls	r2, r2, #2
 8010d26:	3a04      	subs	r2, #4
 8010d28:	3501      	adds	r5, #1
 8010d2a:	42ae      	cmp	r6, r5
 8010d2c:	bf38      	it	cc
 8010d2e:	2200      	movcc	r2, #0
 8010d30:	18a3      	adds	r3, r4, r2
 8010d32:	50a7      	str	r7, [r4, r2]
 8010d34:	b107      	cbz	r7, 8010d38 <rshift+0x68>
 8010d36:	3304      	adds	r3, #4
 8010d38:	1b1a      	subs	r2, r3, r4
 8010d3a:	42a3      	cmp	r3, r4
 8010d3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010d40:	bf08      	it	eq
 8010d42:	2300      	moveq	r3, #0
 8010d44:	6102      	str	r2, [r0, #16]
 8010d46:	bf08      	it	eq
 8010d48:	6143      	streq	r3, [r0, #20]
 8010d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d4e:	f8dc c000 	ldr.w	ip, [ip]
 8010d52:	fa0c fc08 	lsl.w	ip, ip, r8
 8010d56:	ea4c 0707 	orr.w	r7, ip, r7
 8010d5a:	f849 7b04 	str.w	r7, [r9], #4
 8010d5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010d62:	40cf      	lsrs	r7, r1
 8010d64:	e7da      	b.n	8010d1c <rshift+0x4c>
 8010d66:	f851 cb04 	ldr.w	ip, [r1], #4
 8010d6a:	f847 cf04 	str.w	ip, [r7, #4]!
 8010d6e:	e7c3      	b.n	8010cf8 <rshift+0x28>
 8010d70:	4623      	mov	r3, r4
 8010d72:	e7e1      	b.n	8010d38 <rshift+0x68>

08010d74 <__hexdig_fun>:
 8010d74:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010d78:	2b09      	cmp	r3, #9
 8010d7a:	d802      	bhi.n	8010d82 <__hexdig_fun+0xe>
 8010d7c:	3820      	subs	r0, #32
 8010d7e:	b2c0      	uxtb	r0, r0
 8010d80:	4770      	bx	lr
 8010d82:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010d86:	2b05      	cmp	r3, #5
 8010d88:	d801      	bhi.n	8010d8e <__hexdig_fun+0x1a>
 8010d8a:	3847      	subs	r0, #71	@ 0x47
 8010d8c:	e7f7      	b.n	8010d7e <__hexdig_fun+0xa>
 8010d8e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010d92:	2b05      	cmp	r3, #5
 8010d94:	d801      	bhi.n	8010d9a <__hexdig_fun+0x26>
 8010d96:	3827      	subs	r0, #39	@ 0x27
 8010d98:	e7f1      	b.n	8010d7e <__hexdig_fun+0xa>
 8010d9a:	2000      	movs	r0, #0
 8010d9c:	4770      	bx	lr
	...

08010da0 <__gethex>:
 8010da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da4:	b085      	sub	sp, #20
 8010da6:	468a      	mov	sl, r1
 8010da8:	9302      	str	r3, [sp, #8]
 8010daa:	680b      	ldr	r3, [r1, #0]
 8010dac:	9001      	str	r0, [sp, #4]
 8010dae:	4690      	mov	r8, r2
 8010db0:	1c9c      	adds	r4, r3, #2
 8010db2:	46a1      	mov	r9, r4
 8010db4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010db8:	2830      	cmp	r0, #48	@ 0x30
 8010dba:	d0fa      	beq.n	8010db2 <__gethex+0x12>
 8010dbc:	eba9 0303 	sub.w	r3, r9, r3
 8010dc0:	f1a3 0b02 	sub.w	fp, r3, #2
 8010dc4:	f7ff ffd6 	bl	8010d74 <__hexdig_fun>
 8010dc8:	4605      	mov	r5, r0
 8010dca:	2800      	cmp	r0, #0
 8010dcc:	d168      	bne.n	8010ea0 <__gethex+0x100>
 8010dce:	49a0      	ldr	r1, [pc, #640]	@ (8011050 <__gethex+0x2b0>)
 8010dd0:	2201      	movs	r2, #1
 8010dd2:	4648      	mov	r0, r9
 8010dd4:	f7ff f89a 	bl	800ff0c <strncmp>
 8010dd8:	4607      	mov	r7, r0
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	d167      	bne.n	8010eae <__gethex+0x10e>
 8010dde:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010de2:	4626      	mov	r6, r4
 8010de4:	f7ff ffc6 	bl	8010d74 <__hexdig_fun>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	d062      	beq.n	8010eb2 <__gethex+0x112>
 8010dec:	4623      	mov	r3, r4
 8010dee:	7818      	ldrb	r0, [r3, #0]
 8010df0:	2830      	cmp	r0, #48	@ 0x30
 8010df2:	4699      	mov	r9, r3
 8010df4:	f103 0301 	add.w	r3, r3, #1
 8010df8:	d0f9      	beq.n	8010dee <__gethex+0x4e>
 8010dfa:	f7ff ffbb 	bl	8010d74 <__hexdig_fun>
 8010dfe:	fab0 f580 	clz	r5, r0
 8010e02:	096d      	lsrs	r5, r5, #5
 8010e04:	f04f 0b01 	mov.w	fp, #1
 8010e08:	464a      	mov	r2, r9
 8010e0a:	4616      	mov	r6, r2
 8010e0c:	3201      	adds	r2, #1
 8010e0e:	7830      	ldrb	r0, [r6, #0]
 8010e10:	f7ff ffb0 	bl	8010d74 <__hexdig_fun>
 8010e14:	2800      	cmp	r0, #0
 8010e16:	d1f8      	bne.n	8010e0a <__gethex+0x6a>
 8010e18:	498d      	ldr	r1, [pc, #564]	@ (8011050 <__gethex+0x2b0>)
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	4630      	mov	r0, r6
 8010e1e:	f7ff f875 	bl	800ff0c <strncmp>
 8010e22:	2800      	cmp	r0, #0
 8010e24:	d13f      	bne.n	8010ea6 <__gethex+0x106>
 8010e26:	b944      	cbnz	r4, 8010e3a <__gethex+0x9a>
 8010e28:	1c74      	adds	r4, r6, #1
 8010e2a:	4622      	mov	r2, r4
 8010e2c:	4616      	mov	r6, r2
 8010e2e:	3201      	adds	r2, #1
 8010e30:	7830      	ldrb	r0, [r6, #0]
 8010e32:	f7ff ff9f 	bl	8010d74 <__hexdig_fun>
 8010e36:	2800      	cmp	r0, #0
 8010e38:	d1f8      	bne.n	8010e2c <__gethex+0x8c>
 8010e3a:	1ba4      	subs	r4, r4, r6
 8010e3c:	00a7      	lsls	r7, r4, #2
 8010e3e:	7833      	ldrb	r3, [r6, #0]
 8010e40:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010e44:	2b50      	cmp	r3, #80	@ 0x50
 8010e46:	d13e      	bne.n	8010ec6 <__gethex+0x126>
 8010e48:	7873      	ldrb	r3, [r6, #1]
 8010e4a:	2b2b      	cmp	r3, #43	@ 0x2b
 8010e4c:	d033      	beq.n	8010eb6 <__gethex+0x116>
 8010e4e:	2b2d      	cmp	r3, #45	@ 0x2d
 8010e50:	d034      	beq.n	8010ebc <__gethex+0x11c>
 8010e52:	1c71      	adds	r1, r6, #1
 8010e54:	2400      	movs	r4, #0
 8010e56:	7808      	ldrb	r0, [r1, #0]
 8010e58:	f7ff ff8c 	bl	8010d74 <__hexdig_fun>
 8010e5c:	1e43      	subs	r3, r0, #1
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	2b18      	cmp	r3, #24
 8010e62:	d830      	bhi.n	8010ec6 <__gethex+0x126>
 8010e64:	f1a0 0210 	sub.w	r2, r0, #16
 8010e68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010e6c:	f7ff ff82 	bl	8010d74 <__hexdig_fun>
 8010e70:	f100 3cff 	add.w	ip, r0, #4294967295
 8010e74:	fa5f fc8c 	uxtb.w	ip, ip
 8010e78:	f1bc 0f18 	cmp.w	ip, #24
 8010e7c:	f04f 030a 	mov.w	r3, #10
 8010e80:	d91e      	bls.n	8010ec0 <__gethex+0x120>
 8010e82:	b104      	cbz	r4, 8010e86 <__gethex+0xe6>
 8010e84:	4252      	negs	r2, r2
 8010e86:	4417      	add	r7, r2
 8010e88:	f8ca 1000 	str.w	r1, [sl]
 8010e8c:	b1ed      	cbz	r5, 8010eca <__gethex+0x12a>
 8010e8e:	f1bb 0f00 	cmp.w	fp, #0
 8010e92:	bf0c      	ite	eq
 8010e94:	2506      	moveq	r5, #6
 8010e96:	2500      	movne	r5, #0
 8010e98:	4628      	mov	r0, r5
 8010e9a:	b005      	add	sp, #20
 8010e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea0:	2500      	movs	r5, #0
 8010ea2:	462c      	mov	r4, r5
 8010ea4:	e7b0      	b.n	8010e08 <__gethex+0x68>
 8010ea6:	2c00      	cmp	r4, #0
 8010ea8:	d1c7      	bne.n	8010e3a <__gethex+0x9a>
 8010eaa:	4627      	mov	r7, r4
 8010eac:	e7c7      	b.n	8010e3e <__gethex+0x9e>
 8010eae:	464e      	mov	r6, r9
 8010eb0:	462f      	mov	r7, r5
 8010eb2:	2501      	movs	r5, #1
 8010eb4:	e7c3      	b.n	8010e3e <__gethex+0x9e>
 8010eb6:	2400      	movs	r4, #0
 8010eb8:	1cb1      	adds	r1, r6, #2
 8010eba:	e7cc      	b.n	8010e56 <__gethex+0xb6>
 8010ebc:	2401      	movs	r4, #1
 8010ebe:	e7fb      	b.n	8010eb8 <__gethex+0x118>
 8010ec0:	fb03 0002 	mla	r0, r3, r2, r0
 8010ec4:	e7ce      	b.n	8010e64 <__gethex+0xc4>
 8010ec6:	4631      	mov	r1, r6
 8010ec8:	e7de      	b.n	8010e88 <__gethex+0xe8>
 8010eca:	eba6 0309 	sub.w	r3, r6, r9
 8010ece:	3b01      	subs	r3, #1
 8010ed0:	4629      	mov	r1, r5
 8010ed2:	2b07      	cmp	r3, #7
 8010ed4:	dc0a      	bgt.n	8010eec <__gethex+0x14c>
 8010ed6:	9801      	ldr	r0, [sp, #4]
 8010ed8:	f000 fa46 	bl	8011368 <_Balloc>
 8010edc:	4604      	mov	r4, r0
 8010ede:	b940      	cbnz	r0, 8010ef2 <__gethex+0x152>
 8010ee0:	4b5c      	ldr	r3, [pc, #368]	@ (8011054 <__gethex+0x2b4>)
 8010ee2:	4602      	mov	r2, r0
 8010ee4:	21e4      	movs	r1, #228	@ 0xe4
 8010ee6:	485c      	ldr	r0, [pc, #368]	@ (8011058 <__gethex+0x2b8>)
 8010ee8:	f001 fd22 	bl	8012930 <__assert_func>
 8010eec:	3101      	adds	r1, #1
 8010eee:	105b      	asrs	r3, r3, #1
 8010ef0:	e7ef      	b.n	8010ed2 <__gethex+0x132>
 8010ef2:	f100 0a14 	add.w	sl, r0, #20
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	4655      	mov	r5, sl
 8010efa:	469b      	mov	fp, r3
 8010efc:	45b1      	cmp	r9, r6
 8010efe:	d337      	bcc.n	8010f70 <__gethex+0x1d0>
 8010f00:	f845 bb04 	str.w	fp, [r5], #4
 8010f04:	eba5 050a 	sub.w	r5, r5, sl
 8010f08:	10ad      	asrs	r5, r5, #2
 8010f0a:	6125      	str	r5, [r4, #16]
 8010f0c:	4658      	mov	r0, fp
 8010f0e:	f000 fb1d 	bl	801154c <__hi0bits>
 8010f12:	016d      	lsls	r5, r5, #5
 8010f14:	f8d8 6000 	ldr.w	r6, [r8]
 8010f18:	1a2d      	subs	r5, r5, r0
 8010f1a:	42b5      	cmp	r5, r6
 8010f1c:	dd54      	ble.n	8010fc8 <__gethex+0x228>
 8010f1e:	1bad      	subs	r5, r5, r6
 8010f20:	4629      	mov	r1, r5
 8010f22:	4620      	mov	r0, r4
 8010f24:	f000 feae 	bl	8011c84 <__any_on>
 8010f28:	4681      	mov	r9, r0
 8010f2a:	b178      	cbz	r0, 8010f4c <__gethex+0x1ac>
 8010f2c:	1e6b      	subs	r3, r5, #1
 8010f2e:	1159      	asrs	r1, r3, #5
 8010f30:	f003 021f 	and.w	r2, r3, #31
 8010f34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010f38:	f04f 0901 	mov.w	r9, #1
 8010f3c:	fa09 f202 	lsl.w	r2, r9, r2
 8010f40:	420a      	tst	r2, r1
 8010f42:	d003      	beq.n	8010f4c <__gethex+0x1ac>
 8010f44:	454b      	cmp	r3, r9
 8010f46:	dc36      	bgt.n	8010fb6 <__gethex+0x216>
 8010f48:	f04f 0902 	mov.w	r9, #2
 8010f4c:	4629      	mov	r1, r5
 8010f4e:	4620      	mov	r0, r4
 8010f50:	f7ff febe 	bl	8010cd0 <rshift>
 8010f54:	442f      	add	r7, r5
 8010f56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f5a:	42bb      	cmp	r3, r7
 8010f5c:	da42      	bge.n	8010fe4 <__gethex+0x244>
 8010f5e:	9801      	ldr	r0, [sp, #4]
 8010f60:	4621      	mov	r1, r4
 8010f62:	f000 fa41 	bl	80113e8 <_Bfree>
 8010f66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f68:	2300      	movs	r3, #0
 8010f6a:	6013      	str	r3, [r2, #0]
 8010f6c:	25a3      	movs	r5, #163	@ 0xa3
 8010f6e:	e793      	b.n	8010e98 <__gethex+0xf8>
 8010f70:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010f74:	2a2e      	cmp	r2, #46	@ 0x2e
 8010f76:	d012      	beq.n	8010f9e <__gethex+0x1fe>
 8010f78:	2b20      	cmp	r3, #32
 8010f7a:	d104      	bne.n	8010f86 <__gethex+0x1e6>
 8010f7c:	f845 bb04 	str.w	fp, [r5], #4
 8010f80:	f04f 0b00 	mov.w	fp, #0
 8010f84:	465b      	mov	r3, fp
 8010f86:	7830      	ldrb	r0, [r6, #0]
 8010f88:	9303      	str	r3, [sp, #12]
 8010f8a:	f7ff fef3 	bl	8010d74 <__hexdig_fun>
 8010f8e:	9b03      	ldr	r3, [sp, #12]
 8010f90:	f000 000f 	and.w	r0, r0, #15
 8010f94:	4098      	lsls	r0, r3
 8010f96:	ea4b 0b00 	orr.w	fp, fp, r0
 8010f9a:	3304      	adds	r3, #4
 8010f9c:	e7ae      	b.n	8010efc <__gethex+0x15c>
 8010f9e:	45b1      	cmp	r9, r6
 8010fa0:	d8ea      	bhi.n	8010f78 <__gethex+0x1d8>
 8010fa2:	492b      	ldr	r1, [pc, #172]	@ (8011050 <__gethex+0x2b0>)
 8010fa4:	9303      	str	r3, [sp, #12]
 8010fa6:	2201      	movs	r2, #1
 8010fa8:	4630      	mov	r0, r6
 8010faa:	f7fe ffaf 	bl	800ff0c <strncmp>
 8010fae:	9b03      	ldr	r3, [sp, #12]
 8010fb0:	2800      	cmp	r0, #0
 8010fb2:	d1e1      	bne.n	8010f78 <__gethex+0x1d8>
 8010fb4:	e7a2      	b.n	8010efc <__gethex+0x15c>
 8010fb6:	1ea9      	subs	r1, r5, #2
 8010fb8:	4620      	mov	r0, r4
 8010fba:	f000 fe63 	bl	8011c84 <__any_on>
 8010fbe:	2800      	cmp	r0, #0
 8010fc0:	d0c2      	beq.n	8010f48 <__gethex+0x1a8>
 8010fc2:	f04f 0903 	mov.w	r9, #3
 8010fc6:	e7c1      	b.n	8010f4c <__gethex+0x1ac>
 8010fc8:	da09      	bge.n	8010fde <__gethex+0x23e>
 8010fca:	1b75      	subs	r5, r6, r5
 8010fcc:	4621      	mov	r1, r4
 8010fce:	9801      	ldr	r0, [sp, #4]
 8010fd0:	462a      	mov	r2, r5
 8010fd2:	f000 fc21 	bl	8011818 <__lshift>
 8010fd6:	1b7f      	subs	r7, r7, r5
 8010fd8:	4604      	mov	r4, r0
 8010fda:	f100 0a14 	add.w	sl, r0, #20
 8010fde:	f04f 0900 	mov.w	r9, #0
 8010fe2:	e7b8      	b.n	8010f56 <__gethex+0x1b6>
 8010fe4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010fe8:	42bd      	cmp	r5, r7
 8010fea:	dd6f      	ble.n	80110cc <__gethex+0x32c>
 8010fec:	1bed      	subs	r5, r5, r7
 8010fee:	42ae      	cmp	r6, r5
 8010ff0:	dc34      	bgt.n	801105c <__gethex+0x2bc>
 8010ff2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ff6:	2b02      	cmp	r3, #2
 8010ff8:	d022      	beq.n	8011040 <__gethex+0x2a0>
 8010ffa:	2b03      	cmp	r3, #3
 8010ffc:	d024      	beq.n	8011048 <__gethex+0x2a8>
 8010ffe:	2b01      	cmp	r3, #1
 8011000:	d115      	bne.n	801102e <__gethex+0x28e>
 8011002:	42ae      	cmp	r6, r5
 8011004:	d113      	bne.n	801102e <__gethex+0x28e>
 8011006:	2e01      	cmp	r6, #1
 8011008:	d10b      	bne.n	8011022 <__gethex+0x282>
 801100a:	9a02      	ldr	r2, [sp, #8]
 801100c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011010:	6013      	str	r3, [r2, #0]
 8011012:	2301      	movs	r3, #1
 8011014:	6123      	str	r3, [r4, #16]
 8011016:	f8ca 3000 	str.w	r3, [sl]
 801101a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801101c:	2562      	movs	r5, #98	@ 0x62
 801101e:	601c      	str	r4, [r3, #0]
 8011020:	e73a      	b.n	8010e98 <__gethex+0xf8>
 8011022:	1e71      	subs	r1, r6, #1
 8011024:	4620      	mov	r0, r4
 8011026:	f000 fe2d 	bl	8011c84 <__any_on>
 801102a:	2800      	cmp	r0, #0
 801102c:	d1ed      	bne.n	801100a <__gethex+0x26a>
 801102e:	9801      	ldr	r0, [sp, #4]
 8011030:	4621      	mov	r1, r4
 8011032:	f000 f9d9 	bl	80113e8 <_Bfree>
 8011036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011038:	2300      	movs	r3, #0
 801103a:	6013      	str	r3, [r2, #0]
 801103c:	2550      	movs	r5, #80	@ 0x50
 801103e:	e72b      	b.n	8010e98 <__gethex+0xf8>
 8011040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011042:	2b00      	cmp	r3, #0
 8011044:	d1f3      	bne.n	801102e <__gethex+0x28e>
 8011046:	e7e0      	b.n	801100a <__gethex+0x26a>
 8011048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801104a:	2b00      	cmp	r3, #0
 801104c:	d1dd      	bne.n	801100a <__gethex+0x26a>
 801104e:	e7ee      	b.n	801102e <__gethex+0x28e>
 8011050:	08013198 	.word	0x08013198
 8011054:	080132ab 	.word	0x080132ab
 8011058:	080132bc 	.word	0x080132bc
 801105c:	1e6f      	subs	r7, r5, #1
 801105e:	f1b9 0f00 	cmp.w	r9, #0
 8011062:	d130      	bne.n	80110c6 <__gethex+0x326>
 8011064:	b127      	cbz	r7, 8011070 <__gethex+0x2d0>
 8011066:	4639      	mov	r1, r7
 8011068:	4620      	mov	r0, r4
 801106a:	f000 fe0b 	bl	8011c84 <__any_on>
 801106e:	4681      	mov	r9, r0
 8011070:	117a      	asrs	r2, r7, #5
 8011072:	2301      	movs	r3, #1
 8011074:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011078:	f007 071f 	and.w	r7, r7, #31
 801107c:	40bb      	lsls	r3, r7
 801107e:	4213      	tst	r3, r2
 8011080:	4629      	mov	r1, r5
 8011082:	4620      	mov	r0, r4
 8011084:	bf18      	it	ne
 8011086:	f049 0902 	orrne.w	r9, r9, #2
 801108a:	f7ff fe21 	bl	8010cd0 <rshift>
 801108e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011092:	1b76      	subs	r6, r6, r5
 8011094:	2502      	movs	r5, #2
 8011096:	f1b9 0f00 	cmp.w	r9, #0
 801109a:	d047      	beq.n	801112c <__gethex+0x38c>
 801109c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80110a0:	2b02      	cmp	r3, #2
 80110a2:	d015      	beq.n	80110d0 <__gethex+0x330>
 80110a4:	2b03      	cmp	r3, #3
 80110a6:	d017      	beq.n	80110d8 <__gethex+0x338>
 80110a8:	2b01      	cmp	r3, #1
 80110aa:	d109      	bne.n	80110c0 <__gethex+0x320>
 80110ac:	f019 0f02 	tst.w	r9, #2
 80110b0:	d006      	beq.n	80110c0 <__gethex+0x320>
 80110b2:	f8da 3000 	ldr.w	r3, [sl]
 80110b6:	ea49 0903 	orr.w	r9, r9, r3
 80110ba:	f019 0f01 	tst.w	r9, #1
 80110be:	d10e      	bne.n	80110de <__gethex+0x33e>
 80110c0:	f045 0510 	orr.w	r5, r5, #16
 80110c4:	e032      	b.n	801112c <__gethex+0x38c>
 80110c6:	f04f 0901 	mov.w	r9, #1
 80110ca:	e7d1      	b.n	8011070 <__gethex+0x2d0>
 80110cc:	2501      	movs	r5, #1
 80110ce:	e7e2      	b.n	8011096 <__gethex+0x2f6>
 80110d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110d2:	f1c3 0301 	rsb	r3, r3, #1
 80110d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80110d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d0f0      	beq.n	80110c0 <__gethex+0x320>
 80110de:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80110e2:	f104 0314 	add.w	r3, r4, #20
 80110e6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80110ea:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80110ee:	f04f 0c00 	mov.w	ip, #0
 80110f2:	4618      	mov	r0, r3
 80110f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80110f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80110fc:	d01b      	beq.n	8011136 <__gethex+0x396>
 80110fe:	3201      	adds	r2, #1
 8011100:	6002      	str	r2, [r0, #0]
 8011102:	2d02      	cmp	r5, #2
 8011104:	f104 0314 	add.w	r3, r4, #20
 8011108:	d13c      	bne.n	8011184 <__gethex+0x3e4>
 801110a:	f8d8 2000 	ldr.w	r2, [r8]
 801110e:	3a01      	subs	r2, #1
 8011110:	42b2      	cmp	r2, r6
 8011112:	d109      	bne.n	8011128 <__gethex+0x388>
 8011114:	1171      	asrs	r1, r6, #5
 8011116:	2201      	movs	r2, #1
 8011118:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801111c:	f006 061f 	and.w	r6, r6, #31
 8011120:	fa02 f606 	lsl.w	r6, r2, r6
 8011124:	421e      	tst	r6, r3
 8011126:	d13a      	bne.n	801119e <__gethex+0x3fe>
 8011128:	f045 0520 	orr.w	r5, r5, #32
 801112c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801112e:	601c      	str	r4, [r3, #0]
 8011130:	9b02      	ldr	r3, [sp, #8]
 8011132:	601f      	str	r7, [r3, #0]
 8011134:	e6b0      	b.n	8010e98 <__gethex+0xf8>
 8011136:	4299      	cmp	r1, r3
 8011138:	f843 cc04 	str.w	ip, [r3, #-4]
 801113c:	d8d9      	bhi.n	80110f2 <__gethex+0x352>
 801113e:	68a3      	ldr	r3, [r4, #8]
 8011140:	459b      	cmp	fp, r3
 8011142:	db17      	blt.n	8011174 <__gethex+0x3d4>
 8011144:	6861      	ldr	r1, [r4, #4]
 8011146:	9801      	ldr	r0, [sp, #4]
 8011148:	3101      	adds	r1, #1
 801114a:	f000 f90d 	bl	8011368 <_Balloc>
 801114e:	4681      	mov	r9, r0
 8011150:	b918      	cbnz	r0, 801115a <__gethex+0x3ba>
 8011152:	4b1a      	ldr	r3, [pc, #104]	@ (80111bc <__gethex+0x41c>)
 8011154:	4602      	mov	r2, r0
 8011156:	2184      	movs	r1, #132	@ 0x84
 8011158:	e6c5      	b.n	8010ee6 <__gethex+0x146>
 801115a:	6922      	ldr	r2, [r4, #16]
 801115c:	3202      	adds	r2, #2
 801115e:	f104 010c 	add.w	r1, r4, #12
 8011162:	0092      	lsls	r2, r2, #2
 8011164:	300c      	adds	r0, #12
 8011166:	f7fe ff6a 	bl	801003e <memcpy>
 801116a:	4621      	mov	r1, r4
 801116c:	9801      	ldr	r0, [sp, #4]
 801116e:	f000 f93b 	bl	80113e8 <_Bfree>
 8011172:	464c      	mov	r4, r9
 8011174:	6923      	ldr	r3, [r4, #16]
 8011176:	1c5a      	adds	r2, r3, #1
 8011178:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801117c:	6122      	str	r2, [r4, #16]
 801117e:	2201      	movs	r2, #1
 8011180:	615a      	str	r2, [r3, #20]
 8011182:	e7be      	b.n	8011102 <__gethex+0x362>
 8011184:	6922      	ldr	r2, [r4, #16]
 8011186:	455a      	cmp	r2, fp
 8011188:	dd0b      	ble.n	80111a2 <__gethex+0x402>
 801118a:	2101      	movs	r1, #1
 801118c:	4620      	mov	r0, r4
 801118e:	f7ff fd9f 	bl	8010cd0 <rshift>
 8011192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011196:	3701      	adds	r7, #1
 8011198:	42bb      	cmp	r3, r7
 801119a:	f6ff aee0 	blt.w	8010f5e <__gethex+0x1be>
 801119e:	2501      	movs	r5, #1
 80111a0:	e7c2      	b.n	8011128 <__gethex+0x388>
 80111a2:	f016 061f 	ands.w	r6, r6, #31
 80111a6:	d0fa      	beq.n	801119e <__gethex+0x3fe>
 80111a8:	4453      	add	r3, sl
 80111aa:	f1c6 0620 	rsb	r6, r6, #32
 80111ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80111b2:	f000 f9cb 	bl	801154c <__hi0bits>
 80111b6:	42b0      	cmp	r0, r6
 80111b8:	dbe7      	blt.n	801118a <__gethex+0x3ea>
 80111ba:	e7f0      	b.n	801119e <__gethex+0x3fe>
 80111bc:	080132ab 	.word	0x080132ab

080111c0 <L_shift>:
 80111c0:	f1c2 0208 	rsb	r2, r2, #8
 80111c4:	0092      	lsls	r2, r2, #2
 80111c6:	b570      	push	{r4, r5, r6, lr}
 80111c8:	f1c2 0620 	rsb	r6, r2, #32
 80111cc:	6843      	ldr	r3, [r0, #4]
 80111ce:	6804      	ldr	r4, [r0, #0]
 80111d0:	fa03 f506 	lsl.w	r5, r3, r6
 80111d4:	432c      	orrs	r4, r5
 80111d6:	40d3      	lsrs	r3, r2
 80111d8:	6004      	str	r4, [r0, #0]
 80111da:	f840 3f04 	str.w	r3, [r0, #4]!
 80111de:	4288      	cmp	r0, r1
 80111e0:	d3f4      	bcc.n	80111cc <L_shift+0xc>
 80111e2:	bd70      	pop	{r4, r5, r6, pc}

080111e4 <__match>:
 80111e4:	b530      	push	{r4, r5, lr}
 80111e6:	6803      	ldr	r3, [r0, #0]
 80111e8:	3301      	adds	r3, #1
 80111ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111ee:	b914      	cbnz	r4, 80111f6 <__match+0x12>
 80111f0:	6003      	str	r3, [r0, #0]
 80111f2:	2001      	movs	r0, #1
 80111f4:	bd30      	pop	{r4, r5, pc}
 80111f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111fa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80111fe:	2d19      	cmp	r5, #25
 8011200:	bf98      	it	ls
 8011202:	3220      	addls	r2, #32
 8011204:	42a2      	cmp	r2, r4
 8011206:	d0f0      	beq.n	80111ea <__match+0x6>
 8011208:	2000      	movs	r0, #0
 801120a:	e7f3      	b.n	80111f4 <__match+0x10>

0801120c <__hexnan>:
 801120c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011210:	680b      	ldr	r3, [r1, #0]
 8011212:	6801      	ldr	r1, [r0, #0]
 8011214:	115e      	asrs	r6, r3, #5
 8011216:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801121a:	f013 031f 	ands.w	r3, r3, #31
 801121e:	b087      	sub	sp, #28
 8011220:	bf18      	it	ne
 8011222:	3604      	addne	r6, #4
 8011224:	2500      	movs	r5, #0
 8011226:	1f37      	subs	r7, r6, #4
 8011228:	4682      	mov	sl, r0
 801122a:	4690      	mov	r8, r2
 801122c:	9301      	str	r3, [sp, #4]
 801122e:	f846 5c04 	str.w	r5, [r6, #-4]
 8011232:	46b9      	mov	r9, r7
 8011234:	463c      	mov	r4, r7
 8011236:	9502      	str	r5, [sp, #8]
 8011238:	46ab      	mov	fp, r5
 801123a:	784a      	ldrb	r2, [r1, #1]
 801123c:	1c4b      	adds	r3, r1, #1
 801123e:	9303      	str	r3, [sp, #12]
 8011240:	b342      	cbz	r2, 8011294 <__hexnan+0x88>
 8011242:	4610      	mov	r0, r2
 8011244:	9105      	str	r1, [sp, #20]
 8011246:	9204      	str	r2, [sp, #16]
 8011248:	f7ff fd94 	bl	8010d74 <__hexdig_fun>
 801124c:	2800      	cmp	r0, #0
 801124e:	d151      	bne.n	80112f4 <__hexnan+0xe8>
 8011250:	9a04      	ldr	r2, [sp, #16]
 8011252:	9905      	ldr	r1, [sp, #20]
 8011254:	2a20      	cmp	r2, #32
 8011256:	d818      	bhi.n	801128a <__hexnan+0x7e>
 8011258:	9b02      	ldr	r3, [sp, #8]
 801125a:	459b      	cmp	fp, r3
 801125c:	dd13      	ble.n	8011286 <__hexnan+0x7a>
 801125e:	454c      	cmp	r4, r9
 8011260:	d206      	bcs.n	8011270 <__hexnan+0x64>
 8011262:	2d07      	cmp	r5, #7
 8011264:	dc04      	bgt.n	8011270 <__hexnan+0x64>
 8011266:	462a      	mov	r2, r5
 8011268:	4649      	mov	r1, r9
 801126a:	4620      	mov	r0, r4
 801126c:	f7ff ffa8 	bl	80111c0 <L_shift>
 8011270:	4544      	cmp	r4, r8
 8011272:	d952      	bls.n	801131a <__hexnan+0x10e>
 8011274:	2300      	movs	r3, #0
 8011276:	f1a4 0904 	sub.w	r9, r4, #4
 801127a:	f844 3c04 	str.w	r3, [r4, #-4]
 801127e:	f8cd b008 	str.w	fp, [sp, #8]
 8011282:	464c      	mov	r4, r9
 8011284:	461d      	mov	r5, r3
 8011286:	9903      	ldr	r1, [sp, #12]
 8011288:	e7d7      	b.n	801123a <__hexnan+0x2e>
 801128a:	2a29      	cmp	r2, #41	@ 0x29
 801128c:	d157      	bne.n	801133e <__hexnan+0x132>
 801128e:	3102      	adds	r1, #2
 8011290:	f8ca 1000 	str.w	r1, [sl]
 8011294:	f1bb 0f00 	cmp.w	fp, #0
 8011298:	d051      	beq.n	801133e <__hexnan+0x132>
 801129a:	454c      	cmp	r4, r9
 801129c:	d206      	bcs.n	80112ac <__hexnan+0xa0>
 801129e:	2d07      	cmp	r5, #7
 80112a0:	dc04      	bgt.n	80112ac <__hexnan+0xa0>
 80112a2:	462a      	mov	r2, r5
 80112a4:	4649      	mov	r1, r9
 80112a6:	4620      	mov	r0, r4
 80112a8:	f7ff ff8a 	bl	80111c0 <L_shift>
 80112ac:	4544      	cmp	r4, r8
 80112ae:	d936      	bls.n	801131e <__hexnan+0x112>
 80112b0:	f1a8 0204 	sub.w	r2, r8, #4
 80112b4:	4623      	mov	r3, r4
 80112b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80112ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80112be:	429f      	cmp	r7, r3
 80112c0:	d2f9      	bcs.n	80112b6 <__hexnan+0xaa>
 80112c2:	1b3b      	subs	r3, r7, r4
 80112c4:	f023 0303 	bic.w	r3, r3, #3
 80112c8:	3304      	adds	r3, #4
 80112ca:	3401      	adds	r4, #1
 80112cc:	3e03      	subs	r6, #3
 80112ce:	42b4      	cmp	r4, r6
 80112d0:	bf88      	it	hi
 80112d2:	2304      	movhi	r3, #4
 80112d4:	4443      	add	r3, r8
 80112d6:	2200      	movs	r2, #0
 80112d8:	f843 2b04 	str.w	r2, [r3], #4
 80112dc:	429f      	cmp	r7, r3
 80112de:	d2fb      	bcs.n	80112d8 <__hexnan+0xcc>
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	b91b      	cbnz	r3, 80112ec <__hexnan+0xe0>
 80112e4:	4547      	cmp	r7, r8
 80112e6:	d128      	bne.n	801133a <__hexnan+0x12e>
 80112e8:	2301      	movs	r3, #1
 80112ea:	603b      	str	r3, [r7, #0]
 80112ec:	2005      	movs	r0, #5
 80112ee:	b007      	add	sp, #28
 80112f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f4:	3501      	adds	r5, #1
 80112f6:	2d08      	cmp	r5, #8
 80112f8:	f10b 0b01 	add.w	fp, fp, #1
 80112fc:	dd06      	ble.n	801130c <__hexnan+0x100>
 80112fe:	4544      	cmp	r4, r8
 8011300:	d9c1      	bls.n	8011286 <__hexnan+0x7a>
 8011302:	2300      	movs	r3, #0
 8011304:	f844 3c04 	str.w	r3, [r4, #-4]
 8011308:	2501      	movs	r5, #1
 801130a:	3c04      	subs	r4, #4
 801130c:	6822      	ldr	r2, [r4, #0]
 801130e:	f000 000f 	and.w	r0, r0, #15
 8011312:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011316:	6020      	str	r0, [r4, #0]
 8011318:	e7b5      	b.n	8011286 <__hexnan+0x7a>
 801131a:	2508      	movs	r5, #8
 801131c:	e7b3      	b.n	8011286 <__hexnan+0x7a>
 801131e:	9b01      	ldr	r3, [sp, #4]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d0dd      	beq.n	80112e0 <__hexnan+0xd4>
 8011324:	f1c3 0320 	rsb	r3, r3, #32
 8011328:	f04f 32ff 	mov.w	r2, #4294967295
 801132c:	40da      	lsrs	r2, r3
 801132e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011332:	4013      	ands	r3, r2
 8011334:	f846 3c04 	str.w	r3, [r6, #-4]
 8011338:	e7d2      	b.n	80112e0 <__hexnan+0xd4>
 801133a:	3f04      	subs	r7, #4
 801133c:	e7d0      	b.n	80112e0 <__hexnan+0xd4>
 801133e:	2004      	movs	r0, #4
 8011340:	e7d5      	b.n	80112ee <__hexnan+0xe2>

08011342 <__ascii_mbtowc>:
 8011342:	b082      	sub	sp, #8
 8011344:	b901      	cbnz	r1, 8011348 <__ascii_mbtowc+0x6>
 8011346:	a901      	add	r1, sp, #4
 8011348:	b142      	cbz	r2, 801135c <__ascii_mbtowc+0x1a>
 801134a:	b14b      	cbz	r3, 8011360 <__ascii_mbtowc+0x1e>
 801134c:	7813      	ldrb	r3, [r2, #0]
 801134e:	600b      	str	r3, [r1, #0]
 8011350:	7812      	ldrb	r2, [r2, #0]
 8011352:	1e10      	subs	r0, r2, #0
 8011354:	bf18      	it	ne
 8011356:	2001      	movne	r0, #1
 8011358:	b002      	add	sp, #8
 801135a:	4770      	bx	lr
 801135c:	4610      	mov	r0, r2
 801135e:	e7fb      	b.n	8011358 <__ascii_mbtowc+0x16>
 8011360:	f06f 0001 	mvn.w	r0, #1
 8011364:	e7f8      	b.n	8011358 <__ascii_mbtowc+0x16>
	...

08011368 <_Balloc>:
 8011368:	b570      	push	{r4, r5, r6, lr}
 801136a:	69c6      	ldr	r6, [r0, #28]
 801136c:	4604      	mov	r4, r0
 801136e:	460d      	mov	r5, r1
 8011370:	b976      	cbnz	r6, 8011390 <_Balloc+0x28>
 8011372:	2010      	movs	r0, #16
 8011374:	f7fc ffb2 	bl	800e2dc <malloc>
 8011378:	4602      	mov	r2, r0
 801137a:	61e0      	str	r0, [r4, #28]
 801137c:	b920      	cbnz	r0, 8011388 <_Balloc+0x20>
 801137e:	4b18      	ldr	r3, [pc, #96]	@ (80113e0 <_Balloc+0x78>)
 8011380:	4818      	ldr	r0, [pc, #96]	@ (80113e4 <_Balloc+0x7c>)
 8011382:	216b      	movs	r1, #107	@ 0x6b
 8011384:	f001 fad4 	bl	8012930 <__assert_func>
 8011388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801138c:	6006      	str	r6, [r0, #0]
 801138e:	60c6      	str	r6, [r0, #12]
 8011390:	69e6      	ldr	r6, [r4, #28]
 8011392:	68f3      	ldr	r3, [r6, #12]
 8011394:	b183      	cbz	r3, 80113b8 <_Balloc+0x50>
 8011396:	69e3      	ldr	r3, [r4, #28]
 8011398:	68db      	ldr	r3, [r3, #12]
 801139a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801139e:	b9b8      	cbnz	r0, 80113d0 <_Balloc+0x68>
 80113a0:	2101      	movs	r1, #1
 80113a2:	fa01 f605 	lsl.w	r6, r1, r5
 80113a6:	1d72      	adds	r2, r6, #5
 80113a8:	0092      	lsls	r2, r2, #2
 80113aa:	4620      	mov	r0, r4
 80113ac:	f001 fade 	bl	801296c <_calloc_r>
 80113b0:	b160      	cbz	r0, 80113cc <_Balloc+0x64>
 80113b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80113b6:	e00e      	b.n	80113d6 <_Balloc+0x6e>
 80113b8:	2221      	movs	r2, #33	@ 0x21
 80113ba:	2104      	movs	r1, #4
 80113bc:	4620      	mov	r0, r4
 80113be:	f001 fad5 	bl	801296c <_calloc_r>
 80113c2:	69e3      	ldr	r3, [r4, #28]
 80113c4:	60f0      	str	r0, [r6, #12]
 80113c6:	68db      	ldr	r3, [r3, #12]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d1e4      	bne.n	8011396 <_Balloc+0x2e>
 80113cc:	2000      	movs	r0, #0
 80113ce:	bd70      	pop	{r4, r5, r6, pc}
 80113d0:	6802      	ldr	r2, [r0, #0]
 80113d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113d6:	2300      	movs	r3, #0
 80113d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80113dc:	e7f7      	b.n	80113ce <_Balloc+0x66>
 80113de:	bf00      	nop
 80113e0:	0801323c 	.word	0x0801323c
 80113e4:	0801331c 	.word	0x0801331c

080113e8 <_Bfree>:
 80113e8:	b570      	push	{r4, r5, r6, lr}
 80113ea:	69c6      	ldr	r6, [r0, #28]
 80113ec:	4605      	mov	r5, r0
 80113ee:	460c      	mov	r4, r1
 80113f0:	b976      	cbnz	r6, 8011410 <_Bfree+0x28>
 80113f2:	2010      	movs	r0, #16
 80113f4:	f7fc ff72 	bl	800e2dc <malloc>
 80113f8:	4602      	mov	r2, r0
 80113fa:	61e8      	str	r0, [r5, #28]
 80113fc:	b920      	cbnz	r0, 8011408 <_Bfree+0x20>
 80113fe:	4b09      	ldr	r3, [pc, #36]	@ (8011424 <_Bfree+0x3c>)
 8011400:	4809      	ldr	r0, [pc, #36]	@ (8011428 <_Bfree+0x40>)
 8011402:	218f      	movs	r1, #143	@ 0x8f
 8011404:	f001 fa94 	bl	8012930 <__assert_func>
 8011408:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801140c:	6006      	str	r6, [r0, #0]
 801140e:	60c6      	str	r6, [r0, #12]
 8011410:	b13c      	cbz	r4, 8011422 <_Bfree+0x3a>
 8011412:	69eb      	ldr	r3, [r5, #28]
 8011414:	6862      	ldr	r2, [r4, #4]
 8011416:	68db      	ldr	r3, [r3, #12]
 8011418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801141c:	6021      	str	r1, [r4, #0]
 801141e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011422:	bd70      	pop	{r4, r5, r6, pc}
 8011424:	0801323c 	.word	0x0801323c
 8011428:	0801331c 	.word	0x0801331c

0801142c <__multadd>:
 801142c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011430:	690d      	ldr	r5, [r1, #16]
 8011432:	4607      	mov	r7, r0
 8011434:	460c      	mov	r4, r1
 8011436:	461e      	mov	r6, r3
 8011438:	f101 0c14 	add.w	ip, r1, #20
 801143c:	2000      	movs	r0, #0
 801143e:	f8dc 3000 	ldr.w	r3, [ip]
 8011442:	b299      	uxth	r1, r3
 8011444:	fb02 6101 	mla	r1, r2, r1, r6
 8011448:	0c1e      	lsrs	r6, r3, #16
 801144a:	0c0b      	lsrs	r3, r1, #16
 801144c:	fb02 3306 	mla	r3, r2, r6, r3
 8011450:	b289      	uxth	r1, r1
 8011452:	3001      	adds	r0, #1
 8011454:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011458:	4285      	cmp	r5, r0
 801145a:	f84c 1b04 	str.w	r1, [ip], #4
 801145e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011462:	dcec      	bgt.n	801143e <__multadd+0x12>
 8011464:	b30e      	cbz	r6, 80114aa <__multadd+0x7e>
 8011466:	68a3      	ldr	r3, [r4, #8]
 8011468:	42ab      	cmp	r3, r5
 801146a:	dc19      	bgt.n	80114a0 <__multadd+0x74>
 801146c:	6861      	ldr	r1, [r4, #4]
 801146e:	4638      	mov	r0, r7
 8011470:	3101      	adds	r1, #1
 8011472:	f7ff ff79 	bl	8011368 <_Balloc>
 8011476:	4680      	mov	r8, r0
 8011478:	b928      	cbnz	r0, 8011486 <__multadd+0x5a>
 801147a:	4602      	mov	r2, r0
 801147c:	4b0c      	ldr	r3, [pc, #48]	@ (80114b0 <__multadd+0x84>)
 801147e:	480d      	ldr	r0, [pc, #52]	@ (80114b4 <__multadd+0x88>)
 8011480:	21ba      	movs	r1, #186	@ 0xba
 8011482:	f001 fa55 	bl	8012930 <__assert_func>
 8011486:	6922      	ldr	r2, [r4, #16]
 8011488:	3202      	adds	r2, #2
 801148a:	f104 010c 	add.w	r1, r4, #12
 801148e:	0092      	lsls	r2, r2, #2
 8011490:	300c      	adds	r0, #12
 8011492:	f7fe fdd4 	bl	801003e <memcpy>
 8011496:	4621      	mov	r1, r4
 8011498:	4638      	mov	r0, r7
 801149a:	f7ff ffa5 	bl	80113e8 <_Bfree>
 801149e:	4644      	mov	r4, r8
 80114a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80114a4:	3501      	adds	r5, #1
 80114a6:	615e      	str	r6, [r3, #20]
 80114a8:	6125      	str	r5, [r4, #16]
 80114aa:	4620      	mov	r0, r4
 80114ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114b0:	080132ab 	.word	0x080132ab
 80114b4:	0801331c 	.word	0x0801331c

080114b8 <__s2b>:
 80114b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114bc:	460c      	mov	r4, r1
 80114be:	4615      	mov	r5, r2
 80114c0:	461f      	mov	r7, r3
 80114c2:	2209      	movs	r2, #9
 80114c4:	3308      	adds	r3, #8
 80114c6:	4606      	mov	r6, r0
 80114c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80114cc:	2100      	movs	r1, #0
 80114ce:	2201      	movs	r2, #1
 80114d0:	429a      	cmp	r2, r3
 80114d2:	db09      	blt.n	80114e8 <__s2b+0x30>
 80114d4:	4630      	mov	r0, r6
 80114d6:	f7ff ff47 	bl	8011368 <_Balloc>
 80114da:	b940      	cbnz	r0, 80114ee <__s2b+0x36>
 80114dc:	4602      	mov	r2, r0
 80114de:	4b19      	ldr	r3, [pc, #100]	@ (8011544 <__s2b+0x8c>)
 80114e0:	4819      	ldr	r0, [pc, #100]	@ (8011548 <__s2b+0x90>)
 80114e2:	21d3      	movs	r1, #211	@ 0xd3
 80114e4:	f001 fa24 	bl	8012930 <__assert_func>
 80114e8:	0052      	lsls	r2, r2, #1
 80114ea:	3101      	adds	r1, #1
 80114ec:	e7f0      	b.n	80114d0 <__s2b+0x18>
 80114ee:	9b08      	ldr	r3, [sp, #32]
 80114f0:	6143      	str	r3, [r0, #20]
 80114f2:	2d09      	cmp	r5, #9
 80114f4:	f04f 0301 	mov.w	r3, #1
 80114f8:	6103      	str	r3, [r0, #16]
 80114fa:	dd16      	ble.n	801152a <__s2b+0x72>
 80114fc:	f104 0909 	add.w	r9, r4, #9
 8011500:	46c8      	mov	r8, r9
 8011502:	442c      	add	r4, r5
 8011504:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011508:	4601      	mov	r1, r0
 801150a:	3b30      	subs	r3, #48	@ 0x30
 801150c:	220a      	movs	r2, #10
 801150e:	4630      	mov	r0, r6
 8011510:	f7ff ff8c 	bl	801142c <__multadd>
 8011514:	45a0      	cmp	r8, r4
 8011516:	d1f5      	bne.n	8011504 <__s2b+0x4c>
 8011518:	f1a5 0408 	sub.w	r4, r5, #8
 801151c:	444c      	add	r4, r9
 801151e:	1b2d      	subs	r5, r5, r4
 8011520:	1963      	adds	r3, r4, r5
 8011522:	42bb      	cmp	r3, r7
 8011524:	db04      	blt.n	8011530 <__s2b+0x78>
 8011526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801152a:	340a      	adds	r4, #10
 801152c:	2509      	movs	r5, #9
 801152e:	e7f6      	b.n	801151e <__s2b+0x66>
 8011530:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011534:	4601      	mov	r1, r0
 8011536:	3b30      	subs	r3, #48	@ 0x30
 8011538:	220a      	movs	r2, #10
 801153a:	4630      	mov	r0, r6
 801153c:	f7ff ff76 	bl	801142c <__multadd>
 8011540:	e7ee      	b.n	8011520 <__s2b+0x68>
 8011542:	bf00      	nop
 8011544:	080132ab 	.word	0x080132ab
 8011548:	0801331c 	.word	0x0801331c

0801154c <__hi0bits>:
 801154c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011550:	4603      	mov	r3, r0
 8011552:	bf36      	itet	cc
 8011554:	0403      	lslcc	r3, r0, #16
 8011556:	2000      	movcs	r0, #0
 8011558:	2010      	movcc	r0, #16
 801155a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801155e:	bf3c      	itt	cc
 8011560:	021b      	lslcc	r3, r3, #8
 8011562:	3008      	addcc	r0, #8
 8011564:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011568:	bf3c      	itt	cc
 801156a:	011b      	lslcc	r3, r3, #4
 801156c:	3004      	addcc	r0, #4
 801156e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011572:	bf3c      	itt	cc
 8011574:	009b      	lslcc	r3, r3, #2
 8011576:	3002      	addcc	r0, #2
 8011578:	2b00      	cmp	r3, #0
 801157a:	db05      	blt.n	8011588 <__hi0bits+0x3c>
 801157c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011580:	f100 0001 	add.w	r0, r0, #1
 8011584:	bf08      	it	eq
 8011586:	2020      	moveq	r0, #32
 8011588:	4770      	bx	lr

0801158a <__lo0bits>:
 801158a:	6803      	ldr	r3, [r0, #0]
 801158c:	4602      	mov	r2, r0
 801158e:	f013 0007 	ands.w	r0, r3, #7
 8011592:	d00b      	beq.n	80115ac <__lo0bits+0x22>
 8011594:	07d9      	lsls	r1, r3, #31
 8011596:	d421      	bmi.n	80115dc <__lo0bits+0x52>
 8011598:	0798      	lsls	r0, r3, #30
 801159a:	bf49      	itett	mi
 801159c:	085b      	lsrmi	r3, r3, #1
 801159e:	089b      	lsrpl	r3, r3, #2
 80115a0:	2001      	movmi	r0, #1
 80115a2:	6013      	strmi	r3, [r2, #0]
 80115a4:	bf5c      	itt	pl
 80115a6:	6013      	strpl	r3, [r2, #0]
 80115a8:	2002      	movpl	r0, #2
 80115aa:	4770      	bx	lr
 80115ac:	b299      	uxth	r1, r3
 80115ae:	b909      	cbnz	r1, 80115b4 <__lo0bits+0x2a>
 80115b0:	0c1b      	lsrs	r3, r3, #16
 80115b2:	2010      	movs	r0, #16
 80115b4:	b2d9      	uxtb	r1, r3
 80115b6:	b909      	cbnz	r1, 80115bc <__lo0bits+0x32>
 80115b8:	3008      	adds	r0, #8
 80115ba:	0a1b      	lsrs	r3, r3, #8
 80115bc:	0719      	lsls	r1, r3, #28
 80115be:	bf04      	itt	eq
 80115c0:	091b      	lsreq	r3, r3, #4
 80115c2:	3004      	addeq	r0, #4
 80115c4:	0799      	lsls	r1, r3, #30
 80115c6:	bf04      	itt	eq
 80115c8:	089b      	lsreq	r3, r3, #2
 80115ca:	3002      	addeq	r0, #2
 80115cc:	07d9      	lsls	r1, r3, #31
 80115ce:	d403      	bmi.n	80115d8 <__lo0bits+0x4e>
 80115d0:	085b      	lsrs	r3, r3, #1
 80115d2:	f100 0001 	add.w	r0, r0, #1
 80115d6:	d003      	beq.n	80115e0 <__lo0bits+0x56>
 80115d8:	6013      	str	r3, [r2, #0]
 80115da:	4770      	bx	lr
 80115dc:	2000      	movs	r0, #0
 80115de:	4770      	bx	lr
 80115e0:	2020      	movs	r0, #32
 80115e2:	4770      	bx	lr

080115e4 <__i2b>:
 80115e4:	b510      	push	{r4, lr}
 80115e6:	460c      	mov	r4, r1
 80115e8:	2101      	movs	r1, #1
 80115ea:	f7ff febd 	bl	8011368 <_Balloc>
 80115ee:	4602      	mov	r2, r0
 80115f0:	b928      	cbnz	r0, 80115fe <__i2b+0x1a>
 80115f2:	4b05      	ldr	r3, [pc, #20]	@ (8011608 <__i2b+0x24>)
 80115f4:	4805      	ldr	r0, [pc, #20]	@ (801160c <__i2b+0x28>)
 80115f6:	f240 1145 	movw	r1, #325	@ 0x145
 80115fa:	f001 f999 	bl	8012930 <__assert_func>
 80115fe:	2301      	movs	r3, #1
 8011600:	6144      	str	r4, [r0, #20]
 8011602:	6103      	str	r3, [r0, #16]
 8011604:	bd10      	pop	{r4, pc}
 8011606:	bf00      	nop
 8011608:	080132ab 	.word	0x080132ab
 801160c:	0801331c 	.word	0x0801331c

08011610 <__multiply>:
 8011610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011614:	4614      	mov	r4, r2
 8011616:	690a      	ldr	r2, [r1, #16]
 8011618:	6923      	ldr	r3, [r4, #16]
 801161a:	429a      	cmp	r2, r3
 801161c:	bfa8      	it	ge
 801161e:	4623      	movge	r3, r4
 8011620:	460f      	mov	r7, r1
 8011622:	bfa4      	itt	ge
 8011624:	460c      	movge	r4, r1
 8011626:	461f      	movge	r7, r3
 8011628:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801162c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011630:	68a3      	ldr	r3, [r4, #8]
 8011632:	6861      	ldr	r1, [r4, #4]
 8011634:	eb0a 0609 	add.w	r6, sl, r9
 8011638:	42b3      	cmp	r3, r6
 801163a:	b085      	sub	sp, #20
 801163c:	bfb8      	it	lt
 801163e:	3101      	addlt	r1, #1
 8011640:	f7ff fe92 	bl	8011368 <_Balloc>
 8011644:	b930      	cbnz	r0, 8011654 <__multiply+0x44>
 8011646:	4602      	mov	r2, r0
 8011648:	4b44      	ldr	r3, [pc, #272]	@ (801175c <__multiply+0x14c>)
 801164a:	4845      	ldr	r0, [pc, #276]	@ (8011760 <__multiply+0x150>)
 801164c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011650:	f001 f96e 	bl	8012930 <__assert_func>
 8011654:	f100 0514 	add.w	r5, r0, #20
 8011658:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801165c:	462b      	mov	r3, r5
 801165e:	2200      	movs	r2, #0
 8011660:	4543      	cmp	r3, r8
 8011662:	d321      	bcc.n	80116a8 <__multiply+0x98>
 8011664:	f107 0114 	add.w	r1, r7, #20
 8011668:	f104 0214 	add.w	r2, r4, #20
 801166c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011670:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011674:	9302      	str	r3, [sp, #8]
 8011676:	1b13      	subs	r3, r2, r4
 8011678:	3b15      	subs	r3, #21
 801167a:	f023 0303 	bic.w	r3, r3, #3
 801167e:	3304      	adds	r3, #4
 8011680:	f104 0715 	add.w	r7, r4, #21
 8011684:	42ba      	cmp	r2, r7
 8011686:	bf38      	it	cc
 8011688:	2304      	movcc	r3, #4
 801168a:	9301      	str	r3, [sp, #4]
 801168c:	9b02      	ldr	r3, [sp, #8]
 801168e:	9103      	str	r1, [sp, #12]
 8011690:	428b      	cmp	r3, r1
 8011692:	d80c      	bhi.n	80116ae <__multiply+0x9e>
 8011694:	2e00      	cmp	r6, #0
 8011696:	dd03      	ble.n	80116a0 <__multiply+0x90>
 8011698:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801169c:	2b00      	cmp	r3, #0
 801169e:	d05b      	beq.n	8011758 <__multiply+0x148>
 80116a0:	6106      	str	r6, [r0, #16]
 80116a2:	b005      	add	sp, #20
 80116a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116a8:	f843 2b04 	str.w	r2, [r3], #4
 80116ac:	e7d8      	b.n	8011660 <__multiply+0x50>
 80116ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80116b2:	f1ba 0f00 	cmp.w	sl, #0
 80116b6:	d024      	beq.n	8011702 <__multiply+0xf2>
 80116b8:	f104 0e14 	add.w	lr, r4, #20
 80116bc:	46a9      	mov	r9, r5
 80116be:	f04f 0c00 	mov.w	ip, #0
 80116c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80116c6:	f8d9 3000 	ldr.w	r3, [r9]
 80116ca:	fa1f fb87 	uxth.w	fp, r7
 80116ce:	b29b      	uxth	r3, r3
 80116d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80116d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80116d8:	f8d9 7000 	ldr.w	r7, [r9]
 80116dc:	4463      	add	r3, ip
 80116de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80116e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80116e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80116ea:	b29b      	uxth	r3, r3
 80116ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80116f0:	4572      	cmp	r2, lr
 80116f2:	f849 3b04 	str.w	r3, [r9], #4
 80116f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80116fa:	d8e2      	bhi.n	80116c2 <__multiply+0xb2>
 80116fc:	9b01      	ldr	r3, [sp, #4]
 80116fe:	f845 c003 	str.w	ip, [r5, r3]
 8011702:	9b03      	ldr	r3, [sp, #12]
 8011704:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011708:	3104      	adds	r1, #4
 801170a:	f1b9 0f00 	cmp.w	r9, #0
 801170e:	d021      	beq.n	8011754 <__multiply+0x144>
 8011710:	682b      	ldr	r3, [r5, #0]
 8011712:	f104 0c14 	add.w	ip, r4, #20
 8011716:	46ae      	mov	lr, r5
 8011718:	f04f 0a00 	mov.w	sl, #0
 801171c:	f8bc b000 	ldrh.w	fp, [ip]
 8011720:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011724:	fb09 770b 	mla	r7, r9, fp, r7
 8011728:	4457      	add	r7, sl
 801172a:	b29b      	uxth	r3, r3
 801172c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011730:	f84e 3b04 	str.w	r3, [lr], #4
 8011734:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011738:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801173c:	f8be 3000 	ldrh.w	r3, [lr]
 8011740:	fb09 330a 	mla	r3, r9, sl, r3
 8011744:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011748:	4562      	cmp	r2, ip
 801174a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801174e:	d8e5      	bhi.n	801171c <__multiply+0x10c>
 8011750:	9f01      	ldr	r7, [sp, #4]
 8011752:	51eb      	str	r3, [r5, r7]
 8011754:	3504      	adds	r5, #4
 8011756:	e799      	b.n	801168c <__multiply+0x7c>
 8011758:	3e01      	subs	r6, #1
 801175a:	e79b      	b.n	8011694 <__multiply+0x84>
 801175c:	080132ab 	.word	0x080132ab
 8011760:	0801331c 	.word	0x0801331c

08011764 <__pow5mult>:
 8011764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011768:	4615      	mov	r5, r2
 801176a:	f012 0203 	ands.w	r2, r2, #3
 801176e:	4607      	mov	r7, r0
 8011770:	460e      	mov	r6, r1
 8011772:	d007      	beq.n	8011784 <__pow5mult+0x20>
 8011774:	4c25      	ldr	r4, [pc, #148]	@ (801180c <__pow5mult+0xa8>)
 8011776:	3a01      	subs	r2, #1
 8011778:	2300      	movs	r3, #0
 801177a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801177e:	f7ff fe55 	bl	801142c <__multadd>
 8011782:	4606      	mov	r6, r0
 8011784:	10ad      	asrs	r5, r5, #2
 8011786:	d03d      	beq.n	8011804 <__pow5mult+0xa0>
 8011788:	69fc      	ldr	r4, [r7, #28]
 801178a:	b97c      	cbnz	r4, 80117ac <__pow5mult+0x48>
 801178c:	2010      	movs	r0, #16
 801178e:	f7fc fda5 	bl	800e2dc <malloc>
 8011792:	4602      	mov	r2, r0
 8011794:	61f8      	str	r0, [r7, #28]
 8011796:	b928      	cbnz	r0, 80117a4 <__pow5mult+0x40>
 8011798:	4b1d      	ldr	r3, [pc, #116]	@ (8011810 <__pow5mult+0xac>)
 801179a:	481e      	ldr	r0, [pc, #120]	@ (8011814 <__pow5mult+0xb0>)
 801179c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80117a0:	f001 f8c6 	bl	8012930 <__assert_func>
 80117a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80117a8:	6004      	str	r4, [r0, #0]
 80117aa:	60c4      	str	r4, [r0, #12]
 80117ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80117b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80117b4:	b94c      	cbnz	r4, 80117ca <__pow5mult+0x66>
 80117b6:	f240 2171 	movw	r1, #625	@ 0x271
 80117ba:	4638      	mov	r0, r7
 80117bc:	f7ff ff12 	bl	80115e4 <__i2b>
 80117c0:	2300      	movs	r3, #0
 80117c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80117c6:	4604      	mov	r4, r0
 80117c8:	6003      	str	r3, [r0, #0]
 80117ca:	f04f 0900 	mov.w	r9, #0
 80117ce:	07eb      	lsls	r3, r5, #31
 80117d0:	d50a      	bpl.n	80117e8 <__pow5mult+0x84>
 80117d2:	4631      	mov	r1, r6
 80117d4:	4622      	mov	r2, r4
 80117d6:	4638      	mov	r0, r7
 80117d8:	f7ff ff1a 	bl	8011610 <__multiply>
 80117dc:	4631      	mov	r1, r6
 80117de:	4680      	mov	r8, r0
 80117e0:	4638      	mov	r0, r7
 80117e2:	f7ff fe01 	bl	80113e8 <_Bfree>
 80117e6:	4646      	mov	r6, r8
 80117e8:	106d      	asrs	r5, r5, #1
 80117ea:	d00b      	beq.n	8011804 <__pow5mult+0xa0>
 80117ec:	6820      	ldr	r0, [r4, #0]
 80117ee:	b938      	cbnz	r0, 8011800 <__pow5mult+0x9c>
 80117f0:	4622      	mov	r2, r4
 80117f2:	4621      	mov	r1, r4
 80117f4:	4638      	mov	r0, r7
 80117f6:	f7ff ff0b 	bl	8011610 <__multiply>
 80117fa:	6020      	str	r0, [r4, #0]
 80117fc:	f8c0 9000 	str.w	r9, [r0]
 8011800:	4604      	mov	r4, r0
 8011802:	e7e4      	b.n	80117ce <__pow5mult+0x6a>
 8011804:	4630      	mov	r0, r6
 8011806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801180a:	bf00      	nop
 801180c:	08013378 	.word	0x08013378
 8011810:	0801323c 	.word	0x0801323c
 8011814:	0801331c 	.word	0x0801331c

08011818 <__lshift>:
 8011818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801181c:	460c      	mov	r4, r1
 801181e:	6849      	ldr	r1, [r1, #4]
 8011820:	6923      	ldr	r3, [r4, #16]
 8011822:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011826:	68a3      	ldr	r3, [r4, #8]
 8011828:	4607      	mov	r7, r0
 801182a:	4691      	mov	r9, r2
 801182c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011830:	f108 0601 	add.w	r6, r8, #1
 8011834:	42b3      	cmp	r3, r6
 8011836:	db0b      	blt.n	8011850 <__lshift+0x38>
 8011838:	4638      	mov	r0, r7
 801183a:	f7ff fd95 	bl	8011368 <_Balloc>
 801183e:	4605      	mov	r5, r0
 8011840:	b948      	cbnz	r0, 8011856 <__lshift+0x3e>
 8011842:	4602      	mov	r2, r0
 8011844:	4b28      	ldr	r3, [pc, #160]	@ (80118e8 <__lshift+0xd0>)
 8011846:	4829      	ldr	r0, [pc, #164]	@ (80118ec <__lshift+0xd4>)
 8011848:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801184c:	f001 f870 	bl	8012930 <__assert_func>
 8011850:	3101      	adds	r1, #1
 8011852:	005b      	lsls	r3, r3, #1
 8011854:	e7ee      	b.n	8011834 <__lshift+0x1c>
 8011856:	2300      	movs	r3, #0
 8011858:	f100 0114 	add.w	r1, r0, #20
 801185c:	f100 0210 	add.w	r2, r0, #16
 8011860:	4618      	mov	r0, r3
 8011862:	4553      	cmp	r3, sl
 8011864:	db33      	blt.n	80118ce <__lshift+0xb6>
 8011866:	6920      	ldr	r0, [r4, #16]
 8011868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801186c:	f104 0314 	add.w	r3, r4, #20
 8011870:	f019 091f 	ands.w	r9, r9, #31
 8011874:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011878:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801187c:	d02b      	beq.n	80118d6 <__lshift+0xbe>
 801187e:	f1c9 0e20 	rsb	lr, r9, #32
 8011882:	468a      	mov	sl, r1
 8011884:	2200      	movs	r2, #0
 8011886:	6818      	ldr	r0, [r3, #0]
 8011888:	fa00 f009 	lsl.w	r0, r0, r9
 801188c:	4310      	orrs	r0, r2
 801188e:	f84a 0b04 	str.w	r0, [sl], #4
 8011892:	f853 2b04 	ldr.w	r2, [r3], #4
 8011896:	459c      	cmp	ip, r3
 8011898:	fa22 f20e 	lsr.w	r2, r2, lr
 801189c:	d8f3      	bhi.n	8011886 <__lshift+0x6e>
 801189e:	ebac 0304 	sub.w	r3, ip, r4
 80118a2:	3b15      	subs	r3, #21
 80118a4:	f023 0303 	bic.w	r3, r3, #3
 80118a8:	3304      	adds	r3, #4
 80118aa:	f104 0015 	add.w	r0, r4, #21
 80118ae:	4584      	cmp	ip, r0
 80118b0:	bf38      	it	cc
 80118b2:	2304      	movcc	r3, #4
 80118b4:	50ca      	str	r2, [r1, r3]
 80118b6:	b10a      	cbz	r2, 80118bc <__lshift+0xa4>
 80118b8:	f108 0602 	add.w	r6, r8, #2
 80118bc:	3e01      	subs	r6, #1
 80118be:	4638      	mov	r0, r7
 80118c0:	612e      	str	r6, [r5, #16]
 80118c2:	4621      	mov	r1, r4
 80118c4:	f7ff fd90 	bl	80113e8 <_Bfree>
 80118c8:	4628      	mov	r0, r5
 80118ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80118d2:	3301      	adds	r3, #1
 80118d4:	e7c5      	b.n	8011862 <__lshift+0x4a>
 80118d6:	3904      	subs	r1, #4
 80118d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80118dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80118e0:	459c      	cmp	ip, r3
 80118e2:	d8f9      	bhi.n	80118d8 <__lshift+0xc0>
 80118e4:	e7ea      	b.n	80118bc <__lshift+0xa4>
 80118e6:	bf00      	nop
 80118e8:	080132ab 	.word	0x080132ab
 80118ec:	0801331c 	.word	0x0801331c

080118f0 <__mcmp>:
 80118f0:	690a      	ldr	r2, [r1, #16]
 80118f2:	4603      	mov	r3, r0
 80118f4:	6900      	ldr	r0, [r0, #16]
 80118f6:	1a80      	subs	r0, r0, r2
 80118f8:	b530      	push	{r4, r5, lr}
 80118fa:	d10e      	bne.n	801191a <__mcmp+0x2a>
 80118fc:	3314      	adds	r3, #20
 80118fe:	3114      	adds	r1, #20
 8011900:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011904:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011908:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801190c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011910:	4295      	cmp	r5, r2
 8011912:	d003      	beq.n	801191c <__mcmp+0x2c>
 8011914:	d205      	bcs.n	8011922 <__mcmp+0x32>
 8011916:	f04f 30ff 	mov.w	r0, #4294967295
 801191a:	bd30      	pop	{r4, r5, pc}
 801191c:	42a3      	cmp	r3, r4
 801191e:	d3f3      	bcc.n	8011908 <__mcmp+0x18>
 8011920:	e7fb      	b.n	801191a <__mcmp+0x2a>
 8011922:	2001      	movs	r0, #1
 8011924:	e7f9      	b.n	801191a <__mcmp+0x2a>
	...

08011928 <__mdiff>:
 8011928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801192c:	4689      	mov	r9, r1
 801192e:	4606      	mov	r6, r0
 8011930:	4611      	mov	r1, r2
 8011932:	4648      	mov	r0, r9
 8011934:	4614      	mov	r4, r2
 8011936:	f7ff ffdb 	bl	80118f0 <__mcmp>
 801193a:	1e05      	subs	r5, r0, #0
 801193c:	d112      	bne.n	8011964 <__mdiff+0x3c>
 801193e:	4629      	mov	r1, r5
 8011940:	4630      	mov	r0, r6
 8011942:	f7ff fd11 	bl	8011368 <_Balloc>
 8011946:	4602      	mov	r2, r0
 8011948:	b928      	cbnz	r0, 8011956 <__mdiff+0x2e>
 801194a:	4b3f      	ldr	r3, [pc, #252]	@ (8011a48 <__mdiff+0x120>)
 801194c:	f240 2137 	movw	r1, #567	@ 0x237
 8011950:	483e      	ldr	r0, [pc, #248]	@ (8011a4c <__mdiff+0x124>)
 8011952:	f000 ffed 	bl	8012930 <__assert_func>
 8011956:	2301      	movs	r3, #1
 8011958:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801195c:	4610      	mov	r0, r2
 801195e:	b003      	add	sp, #12
 8011960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011964:	bfbc      	itt	lt
 8011966:	464b      	movlt	r3, r9
 8011968:	46a1      	movlt	r9, r4
 801196a:	4630      	mov	r0, r6
 801196c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011970:	bfba      	itte	lt
 8011972:	461c      	movlt	r4, r3
 8011974:	2501      	movlt	r5, #1
 8011976:	2500      	movge	r5, #0
 8011978:	f7ff fcf6 	bl	8011368 <_Balloc>
 801197c:	4602      	mov	r2, r0
 801197e:	b918      	cbnz	r0, 8011988 <__mdiff+0x60>
 8011980:	4b31      	ldr	r3, [pc, #196]	@ (8011a48 <__mdiff+0x120>)
 8011982:	f240 2145 	movw	r1, #581	@ 0x245
 8011986:	e7e3      	b.n	8011950 <__mdiff+0x28>
 8011988:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801198c:	6926      	ldr	r6, [r4, #16]
 801198e:	60c5      	str	r5, [r0, #12]
 8011990:	f109 0310 	add.w	r3, r9, #16
 8011994:	f109 0514 	add.w	r5, r9, #20
 8011998:	f104 0e14 	add.w	lr, r4, #20
 801199c:	f100 0b14 	add.w	fp, r0, #20
 80119a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80119a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80119a8:	9301      	str	r3, [sp, #4]
 80119aa:	46d9      	mov	r9, fp
 80119ac:	f04f 0c00 	mov.w	ip, #0
 80119b0:	9b01      	ldr	r3, [sp, #4]
 80119b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80119b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80119ba:	9301      	str	r3, [sp, #4]
 80119bc:	fa1f f38a 	uxth.w	r3, sl
 80119c0:	4619      	mov	r1, r3
 80119c2:	b283      	uxth	r3, r0
 80119c4:	1acb      	subs	r3, r1, r3
 80119c6:	0c00      	lsrs	r0, r0, #16
 80119c8:	4463      	add	r3, ip
 80119ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80119ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80119d8:	4576      	cmp	r6, lr
 80119da:	f849 3b04 	str.w	r3, [r9], #4
 80119de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80119e2:	d8e5      	bhi.n	80119b0 <__mdiff+0x88>
 80119e4:	1b33      	subs	r3, r6, r4
 80119e6:	3b15      	subs	r3, #21
 80119e8:	f023 0303 	bic.w	r3, r3, #3
 80119ec:	3415      	adds	r4, #21
 80119ee:	3304      	adds	r3, #4
 80119f0:	42a6      	cmp	r6, r4
 80119f2:	bf38      	it	cc
 80119f4:	2304      	movcc	r3, #4
 80119f6:	441d      	add	r5, r3
 80119f8:	445b      	add	r3, fp
 80119fa:	461e      	mov	r6, r3
 80119fc:	462c      	mov	r4, r5
 80119fe:	4544      	cmp	r4, r8
 8011a00:	d30e      	bcc.n	8011a20 <__mdiff+0xf8>
 8011a02:	f108 0103 	add.w	r1, r8, #3
 8011a06:	1b49      	subs	r1, r1, r5
 8011a08:	f021 0103 	bic.w	r1, r1, #3
 8011a0c:	3d03      	subs	r5, #3
 8011a0e:	45a8      	cmp	r8, r5
 8011a10:	bf38      	it	cc
 8011a12:	2100      	movcc	r1, #0
 8011a14:	440b      	add	r3, r1
 8011a16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a1a:	b191      	cbz	r1, 8011a42 <__mdiff+0x11a>
 8011a1c:	6117      	str	r7, [r2, #16]
 8011a1e:	e79d      	b.n	801195c <__mdiff+0x34>
 8011a20:	f854 1b04 	ldr.w	r1, [r4], #4
 8011a24:	46e6      	mov	lr, ip
 8011a26:	0c08      	lsrs	r0, r1, #16
 8011a28:	fa1c fc81 	uxtah	ip, ip, r1
 8011a2c:	4471      	add	r1, lr
 8011a2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011a32:	b289      	uxth	r1, r1
 8011a34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011a38:	f846 1b04 	str.w	r1, [r6], #4
 8011a3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011a40:	e7dd      	b.n	80119fe <__mdiff+0xd6>
 8011a42:	3f01      	subs	r7, #1
 8011a44:	e7e7      	b.n	8011a16 <__mdiff+0xee>
 8011a46:	bf00      	nop
 8011a48:	080132ab 	.word	0x080132ab
 8011a4c:	0801331c 	.word	0x0801331c

08011a50 <__ulp>:
 8011a50:	b082      	sub	sp, #8
 8011a52:	ed8d 0b00 	vstr	d0, [sp]
 8011a56:	9a01      	ldr	r2, [sp, #4]
 8011a58:	4b0f      	ldr	r3, [pc, #60]	@ (8011a98 <__ulp+0x48>)
 8011a5a:	4013      	ands	r3, r2
 8011a5c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	dc08      	bgt.n	8011a76 <__ulp+0x26>
 8011a64:	425b      	negs	r3, r3
 8011a66:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011a6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011a6e:	da04      	bge.n	8011a7a <__ulp+0x2a>
 8011a70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011a74:	4113      	asrs	r3, r2
 8011a76:	2200      	movs	r2, #0
 8011a78:	e008      	b.n	8011a8c <__ulp+0x3c>
 8011a7a:	f1a2 0314 	sub.w	r3, r2, #20
 8011a7e:	2b1e      	cmp	r3, #30
 8011a80:	bfda      	itte	le
 8011a82:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011a86:	40da      	lsrle	r2, r3
 8011a88:	2201      	movgt	r2, #1
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	4619      	mov	r1, r3
 8011a8e:	4610      	mov	r0, r2
 8011a90:	ec41 0b10 	vmov	d0, r0, r1
 8011a94:	b002      	add	sp, #8
 8011a96:	4770      	bx	lr
 8011a98:	7ff00000 	.word	0x7ff00000

08011a9c <__b2d>:
 8011a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aa0:	6906      	ldr	r6, [r0, #16]
 8011aa2:	f100 0814 	add.w	r8, r0, #20
 8011aa6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011aaa:	1f37      	subs	r7, r6, #4
 8011aac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011ab0:	4610      	mov	r0, r2
 8011ab2:	f7ff fd4b 	bl	801154c <__hi0bits>
 8011ab6:	f1c0 0320 	rsb	r3, r0, #32
 8011aba:	280a      	cmp	r0, #10
 8011abc:	600b      	str	r3, [r1, #0]
 8011abe:	491b      	ldr	r1, [pc, #108]	@ (8011b2c <__b2d+0x90>)
 8011ac0:	dc15      	bgt.n	8011aee <__b2d+0x52>
 8011ac2:	f1c0 0c0b 	rsb	ip, r0, #11
 8011ac6:	fa22 f30c 	lsr.w	r3, r2, ip
 8011aca:	45b8      	cmp	r8, r7
 8011acc:	ea43 0501 	orr.w	r5, r3, r1
 8011ad0:	bf34      	ite	cc
 8011ad2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011ad6:	2300      	movcs	r3, #0
 8011ad8:	3015      	adds	r0, #21
 8011ada:	fa02 f000 	lsl.w	r0, r2, r0
 8011ade:	fa23 f30c 	lsr.w	r3, r3, ip
 8011ae2:	4303      	orrs	r3, r0
 8011ae4:	461c      	mov	r4, r3
 8011ae6:	ec45 4b10 	vmov	d0, r4, r5
 8011aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aee:	45b8      	cmp	r8, r7
 8011af0:	bf3a      	itte	cc
 8011af2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011af6:	f1a6 0708 	subcc.w	r7, r6, #8
 8011afa:	2300      	movcs	r3, #0
 8011afc:	380b      	subs	r0, #11
 8011afe:	d012      	beq.n	8011b26 <__b2d+0x8a>
 8011b00:	f1c0 0120 	rsb	r1, r0, #32
 8011b04:	fa23 f401 	lsr.w	r4, r3, r1
 8011b08:	4082      	lsls	r2, r0
 8011b0a:	4322      	orrs	r2, r4
 8011b0c:	4547      	cmp	r7, r8
 8011b0e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011b12:	bf8c      	ite	hi
 8011b14:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011b18:	2200      	movls	r2, #0
 8011b1a:	4083      	lsls	r3, r0
 8011b1c:	40ca      	lsrs	r2, r1
 8011b1e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011b22:	4313      	orrs	r3, r2
 8011b24:	e7de      	b.n	8011ae4 <__b2d+0x48>
 8011b26:	ea42 0501 	orr.w	r5, r2, r1
 8011b2a:	e7db      	b.n	8011ae4 <__b2d+0x48>
 8011b2c:	3ff00000 	.word	0x3ff00000

08011b30 <__d2b>:
 8011b30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011b34:	460f      	mov	r7, r1
 8011b36:	2101      	movs	r1, #1
 8011b38:	ec59 8b10 	vmov	r8, r9, d0
 8011b3c:	4616      	mov	r6, r2
 8011b3e:	f7ff fc13 	bl	8011368 <_Balloc>
 8011b42:	4604      	mov	r4, r0
 8011b44:	b930      	cbnz	r0, 8011b54 <__d2b+0x24>
 8011b46:	4602      	mov	r2, r0
 8011b48:	4b23      	ldr	r3, [pc, #140]	@ (8011bd8 <__d2b+0xa8>)
 8011b4a:	4824      	ldr	r0, [pc, #144]	@ (8011bdc <__d2b+0xac>)
 8011b4c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011b50:	f000 feee 	bl	8012930 <__assert_func>
 8011b54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011b58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011b5c:	b10d      	cbz	r5, 8011b62 <__d2b+0x32>
 8011b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011b62:	9301      	str	r3, [sp, #4]
 8011b64:	f1b8 0300 	subs.w	r3, r8, #0
 8011b68:	d023      	beq.n	8011bb2 <__d2b+0x82>
 8011b6a:	4668      	mov	r0, sp
 8011b6c:	9300      	str	r3, [sp, #0]
 8011b6e:	f7ff fd0c 	bl	801158a <__lo0bits>
 8011b72:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011b76:	b1d0      	cbz	r0, 8011bae <__d2b+0x7e>
 8011b78:	f1c0 0320 	rsb	r3, r0, #32
 8011b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8011b80:	430b      	orrs	r3, r1
 8011b82:	40c2      	lsrs	r2, r0
 8011b84:	6163      	str	r3, [r4, #20]
 8011b86:	9201      	str	r2, [sp, #4]
 8011b88:	9b01      	ldr	r3, [sp, #4]
 8011b8a:	61a3      	str	r3, [r4, #24]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	bf0c      	ite	eq
 8011b90:	2201      	moveq	r2, #1
 8011b92:	2202      	movne	r2, #2
 8011b94:	6122      	str	r2, [r4, #16]
 8011b96:	b1a5      	cbz	r5, 8011bc2 <__d2b+0x92>
 8011b98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011b9c:	4405      	add	r5, r0
 8011b9e:	603d      	str	r5, [r7, #0]
 8011ba0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011ba4:	6030      	str	r0, [r6, #0]
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	b003      	add	sp, #12
 8011baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bae:	6161      	str	r1, [r4, #20]
 8011bb0:	e7ea      	b.n	8011b88 <__d2b+0x58>
 8011bb2:	a801      	add	r0, sp, #4
 8011bb4:	f7ff fce9 	bl	801158a <__lo0bits>
 8011bb8:	9b01      	ldr	r3, [sp, #4]
 8011bba:	6163      	str	r3, [r4, #20]
 8011bbc:	3020      	adds	r0, #32
 8011bbe:	2201      	movs	r2, #1
 8011bc0:	e7e8      	b.n	8011b94 <__d2b+0x64>
 8011bc2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011bc6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011bca:	6038      	str	r0, [r7, #0]
 8011bcc:	6918      	ldr	r0, [r3, #16]
 8011bce:	f7ff fcbd 	bl	801154c <__hi0bits>
 8011bd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011bd6:	e7e5      	b.n	8011ba4 <__d2b+0x74>
 8011bd8:	080132ab 	.word	0x080132ab
 8011bdc:	0801331c 	.word	0x0801331c

08011be0 <__ratio>:
 8011be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be4:	4688      	mov	r8, r1
 8011be6:	4669      	mov	r1, sp
 8011be8:	4681      	mov	r9, r0
 8011bea:	f7ff ff57 	bl	8011a9c <__b2d>
 8011bee:	a901      	add	r1, sp, #4
 8011bf0:	4640      	mov	r0, r8
 8011bf2:	ec55 4b10 	vmov	r4, r5, d0
 8011bf6:	f7ff ff51 	bl	8011a9c <__b2d>
 8011bfa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011bfe:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011c02:	1ad2      	subs	r2, r2, r3
 8011c04:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011c08:	1a5b      	subs	r3, r3, r1
 8011c0a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8011c0e:	ec57 6b10 	vmov	r6, r7, d0
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	bfd6      	itet	le
 8011c16:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011c1a:	462a      	movgt	r2, r5
 8011c1c:	463a      	movle	r2, r7
 8011c1e:	46ab      	mov	fp, r5
 8011c20:	46a2      	mov	sl, r4
 8011c22:	bfce      	itee	gt
 8011c24:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8011c28:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8011c2c:	ee00 3a90 	vmovle	s1, r3
 8011c30:	ec4b ab17 	vmov	d7, sl, fp
 8011c34:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8011c38:	b003      	add	sp, #12
 8011c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c3e <__copybits>:
 8011c3e:	3901      	subs	r1, #1
 8011c40:	b570      	push	{r4, r5, r6, lr}
 8011c42:	1149      	asrs	r1, r1, #5
 8011c44:	6914      	ldr	r4, [r2, #16]
 8011c46:	3101      	adds	r1, #1
 8011c48:	f102 0314 	add.w	r3, r2, #20
 8011c4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011c50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011c54:	1f05      	subs	r5, r0, #4
 8011c56:	42a3      	cmp	r3, r4
 8011c58:	d30c      	bcc.n	8011c74 <__copybits+0x36>
 8011c5a:	1aa3      	subs	r3, r4, r2
 8011c5c:	3b11      	subs	r3, #17
 8011c5e:	f023 0303 	bic.w	r3, r3, #3
 8011c62:	3211      	adds	r2, #17
 8011c64:	42a2      	cmp	r2, r4
 8011c66:	bf88      	it	hi
 8011c68:	2300      	movhi	r3, #0
 8011c6a:	4418      	add	r0, r3
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	4288      	cmp	r0, r1
 8011c70:	d305      	bcc.n	8011c7e <__copybits+0x40>
 8011c72:	bd70      	pop	{r4, r5, r6, pc}
 8011c74:	f853 6b04 	ldr.w	r6, [r3], #4
 8011c78:	f845 6f04 	str.w	r6, [r5, #4]!
 8011c7c:	e7eb      	b.n	8011c56 <__copybits+0x18>
 8011c7e:	f840 3b04 	str.w	r3, [r0], #4
 8011c82:	e7f4      	b.n	8011c6e <__copybits+0x30>

08011c84 <__any_on>:
 8011c84:	f100 0214 	add.w	r2, r0, #20
 8011c88:	6900      	ldr	r0, [r0, #16]
 8011c8a:	114b      	asrs	r3, r1, #5
 8011c8c:	4298      	cmp	r0, r3
 8011c8e:	b510      	push	{r4, lr}
 8011c90:	db11      	blt.n	8011cb6 <__any_on+0x32>
 8011c92:	dd0a      	ble.n	8011caa <__any_on+0x26>
 8011c94:	f011 011f 	ands.w	r1, r1, #31
 8011c98:	d007      	beq.n	8011caa <__any_on+0x26>
 8011c9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011c9e:	fa24 f001 	lsr.w	r0, r4, r1
 8011ca2:	fa00 f101 	lsl.w	r1, r0, r1
 8011ca6:	428c      	cmp	r4, r1
 8011ca8:	d10b      	bne.n	8011cc2 <__any_on+0x3e>
 8011caa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011cae:	4293      	cmp	r3, r2
 8011cb0:	d803      	bhi.n	8011cba <__any_on+0x36>
 8011cb2:	2000      	movs	r0, #0
 8011cb4:	bd10      	pop	{r4, pc}
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	e7f7      	b.n	8011caa <__any_on+0x26>
 8011cba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011cbe:	2900      	cmp	r1, #0
 8011cc0:	d0f5      	beq.n	8011cae <__any_on+0x2a>
 8011cc2:	2001      	movs	r0, #1
 8011cc4:	e7f6      	b.n	8011cb4 <__any_on+0x30>
	...

08011cc8 <_strtol_l.constprop.0>:
 8011cc8:	2b24      	cmp	r3, #36	@ 0x24
 8011cca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cce:	4686      	mov	lr, r0
 8011cd0:	4690      	mov	r8, r2
 8011cd2:	d801      	bhi.n	8011cd8 <_strtol_l.constprop.0+0x10>
 8011cd4:	2b01      	cmp	r3, #1
 8011cd6:	d106      	bne.n	8011ce6 <_strtol_l.constprop.0+0x1e>
 8011cd8:	f7fe f984 	bl	800ffe4 <__errno>
 8011cdc:	2316      	movs	r3, #22
 8011cde:	6003      	str	r3, [r0, #0]
 8011ce0:	2000      	movs	r0, #0
 8011ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ce6:	4834      	ldr	r0, [pc, #208]	@ (8011db8 <_strtol_l.constprop.0+0xf0>)
 8011ce8:	460d      	mov	r5, r1
 8011cea:	462a      	mov	r2, r5
 8011cec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011cf0:	5d06      	ldrb	r6, [r0, r4]
 8011cf2:	f016 0608 	ands.w	r6, r6, #8
 8011cf6:	d1f8      	bne.n	8011cea <_strtol_l.constprop.0+0x22>
 8011cf8:	2c2d      	cmp	r4, #45	@ 0x2d
 8011cfa:	d12d      	bne.n	8011d58 <_strtol_l.constprop.0+0x90>
 8011cfc:	782c      	ldrb	r4, [r5, #0]
 8011cfe:	2601      	movs	r6, #1
 8011d00:	1c95      	adds	r5, r2, #2
 8011d02:	f033 0210 	bics.w	r2, r3, #16
 8011d06:	d109      	bne.n	8011d1c <_strtol_l.constprop.0+0x54>
 8011d08:	2c30      	cmp	r4, #48	@ 0x30
 8011d0a:	d12a      	bne.n	8011d62 <_strtol_l.constprop.0+0x9a>
 8011d0c:	782a      	ldrb	r2, [r5, #0]
 8011d0e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011d12:	2a58      	cmp	r2, #88	@ 0x58
 8011d14:	d125      	bne.n	8011d62 <_strtol_l.constprop.0+0x9a>
 8011d16:	786c      	ldrb	r4, [r5, #1]
 8011d18:	2310      	movs	r3, #16
 8011d1a:	3502      	adds	r5, #2
 8011d1c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011d20:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011d24:	2200      	movs	r2, #0
 8011d26:	fbbc f9f3 	udiv	r9, ip, r3
 8011d2a:	4610      	mov	r0, r2
 8011d2c:	fb03 ca19 	mls	sl, r3, r9, ip
 8011d30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011d34:	2f09      	cmp	r7, #9
 8011d36:	d81b      	bhi.n	8011d70 <_strtol_l.constprop.0+0xa8>
 8011d38:	463c      	mov	r4, r7
 8011d3a:	42a3      	cmp	r3, r4
 8011d3c:	dd27      	ble.n	8011d8e <_strtol_l.constprop.0+0xc6>
 8011d3e:	1c57      	adds	r7, r2, #1
 8011d40:	d007      	beq.n	8011d52 <_strtol_l.constprop.0+0x8a>
 8011d42:	4581      	cmp	r9, r0
 8011d44:	d320      	bcc.n	8011d88 <_strtol_l.constprop.0+0xc0>
 8011d46:	d101      	bne.n	8011d4c <_strtol_l.constprop.0+0x84>
 8011d48:	45a2      	cmp	sl, r4
 8011d4a:	db1d      	blt.n	8011d88 <_strtol_l.constprop.0+0xc0>
 8011d4c:	fb00 4003 	mla	r0, r0, r3, r4
 8011d50:	2201      	movs	r2, #1
 8011d52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d56:	e7eb      	b.n	8011d30 <_strtol_l.constprop.0+0x68>
 8011d58:	2c2b      	cmp	r4, #43	@ 0x2b
 8011d5a:	bf04      	itt	eq
 8011d5c:	782c      	ldrbeq	r4, [r5, #0]
 8011d5e:	1c95      	addeq	r5, r2, #2
 8011d60:	e7cf      	b.n	8011d02 <_strtol_l.constprop.0+0x3a>
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d1da      	bne.n	8011d1c <_strtol_l.constprop.0+0x54>
 8011d66:	2c30      	cmp	r4, #48	@ 0x30
 8011d68:	bf0c      	ite	eq
 8011d6a:	2308      	moveq	r3, #8
 8011d6c:	230a      	movne	r3, #10
 8011d6e:	e7d5      	b.n	8011d1c <_strtol_l.constprop.0+0x54>
 8011d70:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011d74:	2f19      	cmp	r7, #25
 8011d76:	d801      	bhi.n	8011d7c <_strtol_l.constprop.0+0xb4>
 8011d78:	3c37      	subs	r4, #55	@ 0x37
 8011d7a:	e7de      	b.n	8011d3a <_strtol_l.constprop.0+0x72>
 8011d7c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011d80:	2f19      	cmp	r7, #25
 8011d82:	d804      	bhi.n	8011d8e <_strtol_l.constprop.0+0xc6>
 8011d84:	3c57      	subs	r4, #87	@ 0x57
 8011d86:	e7d8      	b.n	8011d3a <_strtol_l.constprop.0+0x72>
 8011d88:	f04f 32ff 	mov.w	r2, #4294967295
 8011d8c:	e7e1      	b.n	8011d52 <_strtol_l.constprop.0+0x8a>
 8011d8e:	1c53      	adds	r3, r2, #1
 8011d90:	d108      	bne.n	8011da4 <_strtol_l.constprop.0+0xdc>
 8011d92:	2322      	movs	r3, #34	@ 0x22
 8011d94:	f8ce 3000 	str.w	r3, [lr]
 8011d98:	4660      	mov	r0, ip
 8011d9a:	f1b8 0f00 	cmp.w	r8, #0
 8011d9e:	d0a0      	beq.n	8011ce2 <_strtol_l.constprop.0+0x1a>
 8011da0:	1e69      	subs	r1, r5, #1
 8011da2:	e006      	b.n	8011db2 <_strtol_l.constprop.0+0xea>
 8011da4:	b106      	cbz	r6, 8011da8 <_strtol_l.constprop.0+0xe0>
 8011da6:	4240      	negs	r0, r0
 8011da8:	f1b8 0f00 	cmp.w	r8, #0
 8011dac:	d099      	beq.n	8011ce2 <_strtol_l.constprop.0+0x1a>
 8011dae:	2a00      	cmp	r2, #0
 8011db0:	d1f6      	bne.n	8011da0 <_strtol_l.constprop.0+0xd8>
 8011db2:	f8c8 1000 	str.w	r1, [r8]
 8011db6:	e794      	b.n	8011ce2 <_strtol_l.constprop.0+0x1a>
 8011db8:	08013479 	.word	0x08013479

08011dbc <_strtol_r>:
 8011dbc:	f7ff bf84 	b.w	8011cc8 <_strtol_l.constprop.0>

08011dc0 <__ascii_wctomb>:
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	4608      	mov	r0, r1
 8011dc4:	b141      	cbz	r1, 8011dd8 <__ascii_wctomb+0x18>
 8011dc6:	2aff      	cmp	r2, #255	@ 0xff
 8011dc8:	d904      	bls.n	8011dd4 <__ascii_wctomb+0x14>
 8011dca:	228a      	movs	r2, #138	@ 0x8a
 8011dcc:	601a      	str	r2, [r3, #0]
 8011dce:	f04f 30ff 	mov.w	r0, #4294967295
 8011dd2:	4770      	bx	lr
 8011dd4:	700a      	strb	r2, [r1, #0]
 8011dd6:	2001      	movs	r0, #1
 8011dd8:	4770      	bx	lr

08011dda <__ssputs_r>:
 8011dda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dde:	688e      	ldr	r6, [r1, #8]
 8011de0:	461f      	mov	r7, r3
 8011de2:	42be      	cmp	r6, r7
 8011de4:	680b      	ldr	r3, [r1, #0]
 8011de6:	4682      	mov	sl, r0
 8011de8:	460c      	mov	r4, r1
 8011dea:	4690      	mov	r8, r2
 8011dec:	d82d      	bhi.n	8011e4a <__ssputs_r+0x70>
 8011dee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011df2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011df6:	d026      	beq.n	8011e46 <__ssputs_r+0x6c>
 8011df8:	6965      	ldr	r5, [r4, #20]
 8011dfa:	6909      	ldr	r1, [r1, #16]
 8011dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e00:	eba3 0901 	sub.w	r9, r3, r1
 8011e04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e08:	1c7b      	adds	r3, r7, #1
 8011e0a:	444b      	add	r3, r9
 8011e0c:	106d      	asrs	r5, r5, #1
 8011e0e:	429d      	cmp	r5, r3
 8011e10:	bf38      	it	cc
 8011e12:	461d      	movcc	r5, r3
 8011e14:	0553      	lsls	r3, r2, #21
 8011e16:	d527      	bpl.n	8011e68 <__ssputs_r+0x8e>
 8011e18:	4629      	mov	r1, r5
 8011e1a:	f7fc fa89 	bl	800e330 <_malloc_r>
 8011e1e:	4606      	mov	r6, r0
 8011e20:	b360      	cbz	r0, 8011e7c <__ssputs_r+0xa2>
 8011e22:	6921      	ldr	r1, [r4, #16]
 8011e24:	464a      	mov	r2, r9
 8011e26:	f7fe f90a 	bl	801003e <memcpy>
 8011e2a:	89a3      	ldrh	r3, [r4, #12]
 8011e2c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e34:	81a3      	strh	r3, [r4, #12]
 8011e36:	6126      	str	r6, [r4, #16]
 8011e38:	6165      	str	r5, [r4, #20]
 8011e3a:	444e      	add	r6, r9
 8011e3c:	eba5 0509 	sub.w	r5, r5, r9
 8011e40:	6026      	str	r6, [r4, #0]
 8011e42:	60a5      	str	r5, [r4, #8]
 8011e44:	463e      	mov	r6, r7
 8011e46:	42be      	cmp	r6, r7
 8011e48:	d900      	bls.n	8011e4c <__ssputs_r+0x72>
 8011e4a:	463e      	mov	r6, r7
 8011e4c:	6820      	ldr	r0, [r4, #0]
 8011e4e:	4632      	mov	r2, r6
 8011e50:	4641      	mov	r1, r8
 8011e52:	f000 fd52 	bl	80128fa <memmove>
 8011e56:	68a3      	ldr	r3, [r4, #8]
 8011e58:	1b9b      	subs	r3, r3, r6
 8011e5a:	60a3      	str	r3, [r4, #8]
 8011e5c:	6823      	ldr	r3, [r4, #0]
 8011e5e:	4433      	add	r3, r6
 8011e60:	6023      	str	r3, [r4, #0]
 8011e62:	2000      	movs	r0, #0
 8011e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e68:	462a      	mov	r2, r5
 8011e6a:	f000 fd93 	bl	8012994 <_realloc_r>
 8011e6e:	4606      	mov	r6, r0
 8011e70:	2800      	cmp	r0, #0
 8011e72:	d1e0      	bne.n	8011e36 <__ssputs_r+0x5c>
 8011e74:	6921      	ldr	r1, [r4, #16]
 8011e76:	4650      	mov	r0, sl
 8011e78:	f7fe fee0 	bl	8010c3c <_free_r>
 8011e7c:	230c      	movs	r3, #12
 8011e7e:	f8ca 3000 	str.w	r3, [sl]
 8011e82:	89a3      	ldrh	r3, [r4, #12]
 8011e84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e88:	81a3      	strh	r3, [r4, #12]
 8011e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e8e:	e7e9      	b.n	8011e64 <__ssputs_r+0x8a>

08011e90 <_svfiprintf_r>:
 8011e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e94:	4698      	mov	r8, r3
 8011e96:	898b      	ldrh	r3, [r1, #12]
 8011e98:	061b      	lsls	r3, r3, #24
 8011e9a:	b09d      	sub	sp, #116	@ 0x74
 8011e9c:	4607      	mov	r7, r0
 8011e9e:	460d      	mov	r5, r1
 8011ea0:	4614      	mov	r4, r2
 8011ea2:	d510      	bpl.n	8011ec6 <_svfiprintf_r+0x36>
 8011ea4:	690b      	ldr	r3, [r1, #16]
 8011ea6:	b973      	cbnz	r3, 8011ec6 <_svfiprintf_r+0x36>
 8011ea8:	2140      	movs	r1, #64	@ 0x40
 8011eaa:	f7fc fa41 	bl	800e330 <_malloc_r>
 8011eae:	6028      	str	r0, [r5, #0]
 8011eb0:	6128      	str	r0, [r5, #16]
 8011eb2:	b930      	cbnz	r0, 8011ec2 <_svfiprintf_r+0x32>
 8011eb4:	230c      	movs	r3, #12
 8011eb6:	603b      	str	r3, [r7, #0]
 8011eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ebc:	b01d      	add	sp, #116	@ 0x74
 8011ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec2:	2340      	movs	r3, #64	@ 0x40
 8011ec4:	616b      	str	r3, [r5, #20]
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	9309      	str	r3, [sp, #36]	@ 0x24
 8011eca:	2320      	movs	r3, #32
 8011ecc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ed0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ed4:	2330      	movs	r3, #48	@ 0x30
 8011ed6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012074 <_svfiprintf_r+0x1e4>
 8011eda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ede:	f04f 0901 	mov.w	r9, #1
 8011ee2:	4623      	mov	r3, r4
 8011ee4:	469a      	mov	sl, r3
 8011ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011eea:	b10a      	cbz	r2, 8011ef0 <_svfiprintf_r+0x60>
 8011eec:	2a25      	cmp	r2, #37	@ 0x25
 8011eee:	d1f9      	bne.n	8011ee4 <_svfiprintf_r+0x54>
 8011ef0:	ebba 0b04 	subs.w	fp, sl, r4
 8011ef4:	d00b      	beq.n	8011f0e <_svfiprintf_r+0x7e>
 8011ef6:	465b      	mov	r3, fp
 8011ef8:	4622      	mov	r2, r4
 8011efa:	4629      	mov	r1, r5
 8011efc:	4638      	mov	r0, r7
 8011efe:	f7ff ff6c 	bl	8011dda <__ssputs_r>
 8011f02:	3001      	adds	r0, #1
 8011f04:	f000 80a7 	beq.w	8012056 <_svfiprintf_r+0x1c6>
 8011f08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f0a:	445a      	add	r2, fp
 8011f0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	f000 809f 	beq.w	8012056 <_svfiprintf_r+0x1c6>
 8011f18:	2300      	movs	r3, #0
 8011f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f22:	f10a 0a01 	add.w	sl, sl, #1
 8011f26:	9304      	str	r3, [sp, #16]
 8011f28:	9307      	str	r3, [sp, #28]
 8011f2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f30:	4654      	mov	r4, sl
 8011f32:	2205      	movs	r2, #5
 8011f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f38:	484e      	ldr	r0, [pc, #312]	@ (8012074 <_svfiprintf_r+0x1e4>)
 8011f3a:	f7ee f9e9 	bl	8000310 <memchr>
 8011f3e:	9a04      	ldr	r2, [sp, #16]
 8011f40:	b9d8      	cbnz	r0, 8011f7a <_svfiprintf_r+0xea>
 8011f42:	06d0      	lsls	r0, r2, #27
 8011f44:	bf44      	itt	mi
 8011f46:	2320      	movmi	r3, #32
 8011f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f4c:	0711      	lsls	r1, r2, #28
 8011f4e:	bf44      	itt	mi
 8011f50:	232b      	movmi	r3, #43	@ 0x2b
 8011f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f56:	f89a 3000 	ldrb.w	r3, [sl]
 8011f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f5c:	d015      	beq.n	8011f8a <_svfiprintf_r+0xfa>
 8011f5e:	9a07      	ldr	r2, [sp, #28]
 8011f60:	4654      	mov	r4, sl
 8011f62:	2000      	movs	r0, #0
 8011f64:	f04f 0c0a 	mov.w	ip, #10
 8011f68:	4621      	mov	r1, r4
 8011f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f6e:	3b30      	subs	r3, #48	@ 0x30
 8011f70:	2b09      	cmp	r3, #9
 8011f72:	d94b      	bls.n	801200c <_svfiprintf_r+0x17c>
 8011f74:	b1b0      	cbz	r0, 8011fa4 <_svfiprintf_r+0x114>
 8011f76:	9207      	str	r2, [sp, #28]
 8011f78:	e014      	b.n	8011fa4 <_svfiprintf_r+0x114>
 8011f7a:	eba0 0308 	sub.w	r3, r0, r8
 8011f7e:	fa09 f303 	lsl.w	r3, r9, r3
 8011f82:	4313      	orrs	r3, r2
 8011f84:	9304      	str	r3, [sp, #16]
 8011f86:	46a2      	mov	sl, r4
 8011f88:	e7d2      	b.n	8011f30 <_svfiprintf_r+0xa0>
 8011f8a:	9b03      	ldr	r3, [sp, #12]
 8011f8c:	1d19      	adds	r1, r3, #4
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	9103      	str	r1, [sp, #12]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	bfbb      	ittet	lt
 8011f96:	425b      	neglt	r3, r3
 8011f98:	f042 0202 	orrlt.w	r2, r2, #2
 8011f9c:	9307      	strge	r3, [sp, #28]
 8011f9e:	9307      	strlt	r3, [sp, #28]
 8011fa0:	bfb8      	it	lt
 8011fa2:	9204      	strlt	r2, [sp, #16]
 8011fa4:	7823      	ldrb	r3, [r4, #0]
 8011fa6:	2b2e      	cmp	r3, #46	@ 0x2e
 8011fa8:	d10a      	bne.n	8011fc0 <_svfiprintf_r+0x130>
 8011faa:	7863      	ldrb	r3, [r4, #1]
 8011fac:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fae:	d132      	bne.n	8012016 <_svfiprintf_r+0x186>
 8011fb0:	9b03      	ldr	r3, [sp, #12]
 8011fb2:	1d1a      	adds	r2, r3, #4
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	9203      	str	r2, [sp, #12]
 8011fb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011fbc:	3402      	adds	r4, #2
 8011fbe:	9305      	str	r3, [sp, #20]
 8011fc0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012084 <_svfiprintf_r+0x1f4>
 8011fc4:	7821      	ldrb	r1, [r4, #0]
 8011fc6:	2203      	movs	r2, #3
 8011fc8:	4650      	mov	r0, sl
 8011fca:	f7ee f9a1 	bl	8000310 <memchr>
 8011fce:	b138      	cbz	r0, 8011fe0 <_svfiprintf_r+0x150>
 8011fd0:	9b04      	ldr	r3, [sp, #16]
 8011fd2:	eba0 000a 	sub.w	r0, r0, sl
 8011fd6:	2240      	movs	r2, #64	@ 0x40
 8011fd8:	4082      	lsls	r2, r0
 8011fda:	4313      	orrs	r3, r2
 8011fdc:	3401      	adds	r4, #1
 8011fde:	9304      	str	r3, [sp, #16]
 8011fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fe4:	4824      	ldr	r0, [pc, #144]	@ (8012078 <_svfiprintf_r+0x1e8>)
 8011fe6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011fea:	2206      	movs	r2, #6
 8011fec:	f7ee f990 	bl	8000310 <memchr>
 8011ff0:	2800      	cmp	r0, #0
 8011ff2:	d036      	beq.n	8012062 <_svfiprintf_r+0x1d2>
 8011ff4:	4b21      	ldr	r3, [pc, #132]	@ (801207c <_svfiprintf_r+0x1ec>)
 8011ff6:	bb1b      	cbnz	r3, 8012040 <_svfiprintf_r+0x1b0>
 8011ff8:	9b03      	ldr	r3, [sp, #12]
 8011ffa:	3307      	adds	r3, #7
 8011ffc:	f023 0307 	bic.w	r3, r3, #7
 8012000:	3308      	adds	r3, #8
 8012002:	9303      	str	r3, [sp, #12]
 8012004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012006:	4433      	add	r3, r6
 8012008:	9309      	str	r3, [sp, #36]	@ 0x24
 801200a:	e76a      	b.n	8011ee2 <_svfiprintf_r+0x52>
 801200c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012010:	460c      	mov	r4, r1
 8012012:	2001      	movs	r0, #1
 8012014:	e7a8      	b.n	8011f68 <_svfiprintf_r+0xd8>
 8012016:	2300      	movs	r3, #0
 8012018:	3401      	adds	r4, #1
 801201a:	9305      	str	r3, [sp, #20]
 801201c:	4619      	mov	r1, r3
 801201e:	f04f 0c0a 	mov.w	ip, #10
 8012022:	4620      	mov	r0, r4
 8012024:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012028:	3a30      	subs	r2, #48	@ 0x30
 801202a:	2a09      	cmp	r2, #9
 801202c:	d903      	bls.n	8012036 <_svfiprintf_r+0x1a6>
 801202e:	2b00      	cmp	r3, #0
 8012030:	d0c6      	beq.n	8011fc0 <_svfiprintf_r+0x130>
 8012032:	9105      	str	r1, [sp, #20]
 8012034:	e7c4      	b.n	8011fc0 <_svfiprintf_r+0x130>
 8012036:	fb0c 2101 	mla	r1, ip, r1, r2
 801203a:	4604      	mov	r4, r0
 801203c:	2301      	movs	r3, #1
 801203e:	e7f0      	b.n	8012022 <_svfiprintf_r+0x192>
 8012040:	ab03      	add	r3, sp, #12
 8012042:	9300      	str	r3, [sp, #0]
 8012044:	462a      	mov	r2, r5
 8012046:	4b0e      	ldr	r3, [pc, #56]	@ (8012080 <_svfiprintf_r+0x1f0>)
 8012048:	a904      	add	r1, sp, #16
 801204a:	4638      	mov	r0, r7
 801204c:	f7fd f844 	bl	800f0d8 <_printf_float>
 8012050:	1c42      	adds	r2, r0, #1
 8012052:	4606      	mov	r6, r0
 8012054:	d1d6      	bne.n	8012004 <_svfiprintf_r+0x174>
 8012056:	89ab      	ldrh	r3, [r5, #12]
 8012058:	065b      	lsls	r3, r3, #25
 801205a:	f53f af2d 	bmi.w	8011eb8 <_svfiprintf_r+0x28>
 801205e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012060:	e72c      	b.n	8011ebc <_svfiprintf_r+0x2c>
 8012062:	ab03      	add	r3, sp, #12
 8012064:	9300      	str	r3, [sp, #0]
 8012066:	462a      	mov	r2, r5
 8012068:	4b05      	ldr	r3, [pc, #20]	@ (8012080 <_svfiprintf_r+0x1f0>)
 801206a:	a904      	add	r1, sp, #16
 801206c:	4638      	mov	r0, r7
 801206e:	f7fd fabb 	bl	800f5e8 <_printf_i>
 8012072:	e7ed      	b.n	8012050 <_svfiprintf_r+0x1c0>
 8012074:	08013579 	.word	0x08013579
 8012078:	08013583 	.word	0x08013583
 801207c:	0800f0d9 	.word	0x0800f0d9
 8012080:	08011ddb 	.word	0x08011ddb
 8012084:	0801357f 	.word	0x0801357f

08012088 <_sungetc_r>:
 8012088:	b538      	push	{r3, r4, r5, lr}
 801208a:	1c4b      	adds	r3, r1, #1
 801208c:	4614      	mov	r4, r2
 801208e:	d103      	bne.n	8012098 <_sungetc_r+0x10>
 8012090:	f04f 35ff 	mov.w	r5, #4294967295
 8012094:	4628      	mov	r0, r5
 8012096:	bd38      	pop	{r3, r4, r5, pc}
 8012098:	8993      	ldrh	r3, [r2, #12]
 801209a:	f023 0320 	bic.w	r3, r3, #32
 801209e:	8193      	strh	r3, [r2, #12]
 80120a0:	6853      	ldr	r3, [r2, #4]
 80120a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80120a4:	b2cd      	uxtb	r5, r1
 80120a6:	b18a      	cbz	r2, 80120cc <_sungetc_r+0x44>
 80120a8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80120aa:	429a      	cmp	r2, r3
 80120ac:	dd08      	ble.n	80120c0 <_sungetc_r+0x38>
 80120ae:	6823      	ldr	r3, [r4, #0]
 80120b0:	1e5a      	subs	r2, r3, #1
 80120b2:	6022      	str	r2, [r4, #0]
 80120b4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80120b8:	6863      	ldr	r3, [r4, #4]
 80120ba:	3301      	adds	r3, #1
 80120bc:	6063      	str	r3, [r4, #4]
 80120be:	e7e9      	b.n	8012094 <_sungetc_r+0xc>
 80120c0:	4621      	mov	r1, r4
 80120c2:	f000 fbe0 	bl	8012886 <__submore>
 80120c6:	2800      	cmp	r0, #0
 80120c8:	d0f1      	beq.n	80120ae <_sungetc_r+0x26>
 80120ca:	e7e1      	b.n	8012090 <_sungetc_r+0x8>
 80120cc:	6921      	ldr	r1, [r4, #16]
 80120ce:	6822      	ldr	r2, [r4, #0]
 80120d0:	b141      	cbz	r1, 80120e4 <_sungetc_r+0x5c>
 80120d2:	4291      	cmp	r1, r2
 80120d4:	d206      	bcs.n	80120e4 <_sungetc_r+0x5c>
 80120d6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80120da:	42a9      	cmp	r1, r5
 80120dc:	d102      	bne.n	80120e4 <_sungetc_r+0x5c>
 80120de:	3a01      	subs	r2, #1
 80120e0:	6022      	str	r2, [r4, #0]
 80120e2:	e7ea      	b.n	80120ba <_sungetc_r+0x32>
 80120e4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80120e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80120ee:	2303      	movs	r3, #3
 80120f0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80120f2:	4623      	mov	r3, r4
 80120f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80120f8:	6023      	str	r3, [r4, #0]
 80120fa:	2301      	movs	r3, #1
 80120fc:	e7de      	b.n	80120bc <_sungetc_r+0x34>

080120fe <__ssrefill_r>:
 80120fe:	b510      	push	{r4, lr}
 8012100:	460c      	mov	r4, r1
 8012102:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012104:	b169      	cbz	r1, 8012122 <__ssrefill_r+0x24>
 8012106:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801210a:	4299      	cmp	r1, r3
 801210c:	d001      	beq.n	8012112 <__ssrefill_r+0x14>
 801210e:	f7fe fd95 	bl	8010c3c <_free_r>
 8012112:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012114:	6063      	str	r3, [r4, #4]
 8012116:	2000      	movs	r0, #0
 8012118:	6360      	str	r0, [r4, #52]	@ 0x34
 801211a:	b113      	cbz	r3, 8012122 <__ssrefill_r+0x24>
 801211c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801211e:	6023      	str	r3, [r4, #0]
 8012120:	bd10      	pop	{r4, pc}
 8012122:	6923      	ldr	r3, [r4, #16]
 8012124:	6023      	str	r3, [r4, #0]
 8012126:	2300      	movs	r3, #0
 8012128:	6063      	str	r3, [r4, #4]
 801212a:	89a3      	ldrh	r3, [r4, #12]
 801212c:	f043 0320 	orr.w	r3, r3, #32
 8012130:	81a3      	strh	r3, [r4, #12]
 8012132:	f04f 30ff 	mov.w	r0, #4294967295
 8012136:	e7f3      	b.n	8012120 <__ssrefill_r+0x22>

08012138 <__ssvfiscanf_r>:
 8012138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801213c:	460c      	mov	r4, r1
 801213e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012142:	2100      	movs	r1, #0
 8012144:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012148:	49a5      	ldr	r1, [pc, #660]	@ (80123e0 <__ssvfiscanf_r+0x2a8>)
 801214a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801214c:	f10d 0804 	add.w	r8, sp, #4
 8012150:	49a4      	ldr	r1, [pc, #656]	@ (80123e4 <__ssvfiscanf_r+0x2ac>)
 8012152:	4fa5      	ldr	r7, [pc, #660]	@ (80123e8 <__ssvfiscanf_r+0x2b0>)
 8012154:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8012158:	4606      	mov	r6, r0
 801215a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801215c:	9300      	str	r3, [sp, #0]
 801215e:	7813      	ldrb	r3, [r2, #0]
 8012160:	2b00      	cmp	r3, #0
 8012162:	f000 8158 	beq.w	8012416 <__ssvfiscanf_r+0x2de>
 8012166:	5cf9      	ldrb	r1, [r7, r3]
 8012168:	f011 0108 	ands.w	r1, r1, #8
 801216c:	f102 0501 	add.w	r5, r2, #1
 8012170:	d019      	beq.n	80121a6 <__ssvfiscanf_r+0x6e>
 8012172:	6863      	ldr	r3, [r4, #4]
 8012174:	2b00      	cmp	r3, #0
 8012176:	dd0f      	ble.n	8012198 <__ssvfiscanf_r+0x60>
 8012178:	6823      	ldr	r3, [r4, #0]
 801217a:	781a      	ldrb	r2, [r3, #0]
 801217c:	5cba      	ldrb	r2, [r7, r2]
 801217e:	0712      	lsls	r2, r2, #28
 8012180:	d401      	bmi.n	8012186 <__ssvfiscanf_r+0x4e>
 8012182:	462a      	mov	r2, r5
 8012184:	e7eb      	b.n	801215e <__ssvfiscanf_r+0x26>
 8012186:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012188:	3201      	adds	r2, #1
 801218a:	9245      	str	r2, [sp, #276]	@ 0x114
 801218c:	6862      	ldr	r2, [r4, #4]
 801218e:	3301      	adds	r3, #1
 8012190:	3a01      	subs	r2, #1
 8012192:	6062      	str	r2, [r4, #4]
 8012194:	6023      	str	r3, [r4, #0]
 8012196:	e7ec      	b.n	8012172 <__ssvfiscanf_r+0x3a>
 8012198:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801219a:	4621      	mov	r1, r4
 801219c:	4630      	mov	r0, r6
 801219e:	4798      	blx	r3
 80121a0:	2800      	cmp	r0, #0
 80121a2:	d0e9      	beq.n	8012178 <__ssvfiscanf_r+0x40>
 80121a4:	e7ed      	b.n	8012182 <__ssvfiscanf_r+0x4a>
 80121a6:	2b25      	cmp	r3, #37	@ 0x25
 80121a8:	d012      	beq.n	80121d0 <__ssvfiscanf_r+0x98>
 80121aa:	4699      	mov	r9, r3
 80121ac:	6863      	ldr	r3, [r4, #4]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	f340 8093 	ble.w	80122da <__ssvfiscanf_r+0x1a2>
 80121b4:	6822      	ldr	r2, [r4, #0]
 80121b6:	7813      	ldrb	r3, [r2, #0]
 80121b8:	454b      	cmp	r3, r9
 80121ba:	f040 812c 	bne.w	8012416 <__ssvfiscanf_r+0x2de>
 80121be:	6863      	ldr	r3, [r4, #4]
 80121c0:	3b01      	subs	r3, #1
 80121c2:	6063      	str	r3, [r4, #4]
 80121c4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80121c6:	3201      	adds	r2, #1
 80121c8:	3301      	adds	r3, #1
 80121ca:	6022      	str	r2, [r4, #0]
 80121cc:	9345      	str	r3, [sp, #276]	@ 0x114
 80121ce:	e7d8      	b.n	8012182 <__ssvfiscanf_r+0x4a>
 80121d0:	9141      	str	r1, [sp, #260]	@ 0x104
 80121d2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80121d4:	7853      	ldrb	r3, [r2, #1]
 80121d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80121d8:	bf02      	ittt	eq
 80121da:	2310      	moveq	r3, #16
 80121dc:	1c95      	addeq	r5, r2, #2
 80121de:	9341      	streq	r3, [sp, #260]	@ 0x104
 80121e0:	220a      	movs	r2, #10
 80121e2:	46a9      	mov	r9, r5
 80121e4:	f819 1b01 	ldrb.w	r1, [r9], #1
 80121e8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80121ec:	2b09      	cmp	r3, #9
 80121ee:	d91e      	bls.n	801222e <__ssvfiscanf_r+0xf6>
 80121f0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80123ec <__ssvfiscanf_r+0x2b4>
 80121f4:	2203      	movs	r2, #3
 80121f6:	4650      	mov	r0, sl
 80121f8:	f7ee f88a 	bl	8000310 <memchr>
 80121fc:	b138      	cbz	r0, 801220e <__ssvfiscanf_r+0xd6>
 80121fe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012200:	eba0 000a 	sub.w	r0, r0, sl
 8012204:	2301      	movs	r3, #1
 8012206:	4083      	lsls	r3, r0
 8012208:	4313      	orrs	r3, r2
 801220a:	9341      	str	r3, [sp, #260]	@ 0x104
 801220c:	464d      	mov	r5, r9
 801220e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012212:	2b78      	cmp	r3, #120	@ 0x78
 8012214:	d806      	bhi.n	8012224 <__ssvfiscanf_r+0xec>
 8012216:	2b57      	cmp	r3, #87	@ 0x57
 8012218:	d810      	bhi.n	801223c <__ssvfiscanf_r+0x104>
 801221a:	2b25      	cmp	r3, #37	@ 0x25
 801221c:	d0c5      	beq.n	80121aa <__ssvfiscanf_r+0x72>
 801221e:	d857      	bhi.n	80122d0 <__ssvfiscanf_r+0x198>
 8012220:	2b00      	cmp	r3, #0
 8012222:	d065      	beq.n	80122f0 <__ssvfiscanf_r+0x1b8>
 8012224:	2303      	movs	r3, #3
 8012226:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012228:	230a      	movs	r3, #10
 801222a:	9342      	str	r3, [sp, #264]	@ 0x108
 801222c:	e078      	b.n	8012320 <__ssvfiscanf_r+0x1e8>
 801222e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012230:	fb02 1103 	mla	r1, r2, r3, r1
 8012234:	3930      	subs	r1, #48	@ 0x30
 8012236:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012238:	464d      	mov	r5, r9
 801223a:	e7d2      	b.n	80121e2 <__ssvfiscanf_r+0xaa>
 801223c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012240:	2a20      	cmp	r2, #32
 8012242:	d8ef      	bhi.n	8012224 <__ssvfiscanf_r+0xec>
 8012244:	a101      	add	r1, pc, #4	@ (adr r1, 801224c <__ssvfiscanf_r+0x114>)
 8012246:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801224a:	bf00      	nop
 801224c:	080122ff 	.word	0x080122ff
 8012250:	08012225 	.word	0x08012225
 8012254:	08012225 	.word	0x08012225
 8012258:	08012359 	.word	0x08012359
 801225c:	08012225 	.word	0x08012225
 8012260:	08012225 	.word	0x08012225
 8012264:	08012225 	.word	0x08012225
 8012268:	08012225 	.word	0x08012225
 801226c:	08012225 	.word	0x08012225
 8012270:	08012225 	.word	0x08012225
 8012274:	08012225 	.word	0x08012225
 8012278:	0801236f 	.word	0x0801236f
 801227c:	08012355 	.word	0x08012355
 8012280:	080122d7 	.word	0x080122d7
 8012284:	080122d7 	.word	0x080122d7
 8012288:	080122d7 	.word	0x080122d7
 801228c:	08012225 	.word	0x08012225
 8012290:	08012311 	.word	0x08012311
 8012294:	08012225 	.word	0x08012225
 8012298:	08012225 	.word	0x08012225
 801229c:	08012225 	.word	0x08012225
 80122a0:	08012225 	.word	0x08012225
 80122a4:	0801237f 	.word	0x0801237f
 80122a8:	08012319 	.word	0x08012319
 80122ac:	080122f7 	.word	0x080122f7
 80122b0:	08012225 	.word	0x08012225
 80122b4:	08012225 	.word	0x08012225
 80122b8:	0801237b 	.word	0x0801237b
 80122bc:	08012225 	.word	0x08012225
 80122c0:	08012355 	.word	0x08012355
 80122c4:	08012225 	.word	0x08012225
 80122c8:	08012225 	.word	0x08012225
 80122cc:	080122ff 	.word	0x080122ff
 80122d0:	3b45      	subs	r3, #69	@ 0x45
 80122d2:	2b02      	cmp	r3, #2
 80122d4:	d8a6      	bhi.n	8012224 <__ssvfiscanf_r+0xec>
 80122d6:	2305      	movs	r3, #5
 80122d8:	e021      	b.n	801231e <__ssvfiscanf_r+0x1e6>
 80122da:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80122dc:	4621      	mov	r1, r4
 80122de:	4630      	mov	r0, r6
 80122e0:	4798      	blx	r3
 80122e2:	2800      	cmp	r0, #0
 80122e4:	f43f af66 	beq.w	80121b4 <__ssvfiscanf_r+0x7c>
 80122e8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80122ea:	2800      	cmp	r0, #0
 80122ec:	f040 808b 	bne.w	8012406 <__ssvfiscanf_r+0x2ce>
 80122f0:	f04f 30ff 	mov.w	r0, #4294967295
 80122f4:	e08b      	b.n	801240e <__ssvfiscanf_r+0x2d6>
 80122f6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80122f8:	f042 0220 	orr.w	r2, r2, #32
 80122fc:	9241      	str	r2, [sp, #260]	@ 0x104
 80122fe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012300:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012304:	9241      	str	r2, [sp, #260]	@ 0x104
 8012306:	2210      	movs	r2, #16
 8012308:	2b6e      	cmp	r3, #110	@ 0x6e
 801230a:	9242      	str	r2, [sp, #264]	@ 0x108
 801230c:	d902      	bls.n	8012314 <__ssvfiscanf_r+0x1dc>
 801230e:	e005      	b.n	801231c <__ssvfiscanf_r+0x1e4>
 8012310:	2300      	movs	r3, #0
 8012312:	9342      	str	r3, [sp, #264]	@ 0x108
 8012314:	2303      	movs	r3, #3
 8012316:	e002      	b.n	801231e <__ssvfiscanf_r+0x1e6>
 8012318:	2308      	movs	r3, #8
 801231a:	9342      	str	r3, [sp, #264]	@ 0x108
 801231c:	2304      	movs	r3, #4
 801231e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012320:	6863      	ldr	r3, [r4, #4]
 8012322:	2b00      	cmp	r3, #0
 8012324:	dd39      	ble.n	801239a <__ssvfiscanf_r+0x262>
 8012326:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012328:	0659      	lsls	r1, r3, #25
 801232a:	d404      	bmi.n	8012336 <__ssvfiscanf_r+0x1fe>
 801232c:	6823      	ldr	r3, [r4, #0]
 801232e:	781a      	ldrb	r2, [r3, #0]
 8012330:	5cba      	ldrb	r2, [r7, r2]
 8012332:	0712      	lsls	r2, r2, #28
 8012334:	d438      	bmi.n	80123a8 <__ssvfiscanf_r+0x270>
 8012336:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012338:	2b02      	cmp	r3, #2
 801233a:	dc47      	bgt.n	80123cc <__ssvfiscanf_r+0x294>
 801233c:	466b      	mov	r3, sp
 801233e:	4622      	mov	r2, r4
 8012340:	a941      	add	r1, sp, #260	@ 0x104
 8012342:	4630      	mov	r0, r6
 8012344:	f000 f86c 	bl	8012420 <_scanf_chars>
 8012348:	2801      	cmp	r0, #1
 801234a:	d064      	beq.n	8012416 <__ssvfiscanf_r+0x2de>
 801234c:	2802      	cmp	r0, #2
 801234e:	f47f af18 	bne.w	8012182 <__ssvfiscanf_r+0x4a>
 8012352:	e7c9      	b.n	80122e8 <__ssvfiscanf_r+0x1b0>
 8012354:	220a      	movs	r2, #10
 8012356:	e7d7      	b.n	8012308 <__ssvfiscanf_r+0x1d0>
 8012358:	4629      	mov	r1, r5
 801235a:	4640      	mov	r0, r8
 801235c:	f000 fa5a 	bl	8012814 <__sccl>
 8012360:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012366:	9341      	str	r3, [sp, #260]	@ 0x104
 8012368:	4605      	mov	r5, r0
 801236a:	2301      	movs	r3, #1
 801236c:	e7d7      	b.n	801231e <__ssvfiscanf_r+0x1e6>
 801236e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012374:	9341      	str	r3, [sp, #260]	@ 0x104
 8012376:	2300      	movs	r3, #0
 8012378:	e7d1      	b.n	801231e <__ssvfiscanf_r+0x1e6>
 801237a:	2302      	movs	r3, #2
 801237c:	e7cf      	b.n	801231e <__ssvfiscanf_r+0x1e6>
 801237e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8012380:	06c3      	lsls	r3, r0, #27
 8012382:	f53f aefe 	bmi.w	8012182 <__ssvfiscanf_r+0x4a>
 8012386:	9b00      	ldr	r3, [sp, #0]
 8012388:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801238a:	1d19      	adds	r1, r3, #4
 801238c:	9100      	str	r1, [sp, #0]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	07c0      	lsls	r0, r0, #31
 8012392:	bf4c      	ite	mi
 8012394:	801a      	strhmi	r2, [r3, #0]
 8012396:	601a      	strpl	r2, [r3, #0]
 8012398:	e6f3      	b.n	8012182 <__ssvfiscanf_r+0x4a>
 801239a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801239c:	4621      	mov	r1, r4
 801239e:	4630      	mov	r0, r6
 80123a0:	4798      	blx	r3
 80123a2:	2800      	cmp	r0, #0
 80123a4:	d0bf      	beq.n	8012326 <__ssvfiscanf_r+0x1ee>
 80123a6:	e79f      	b.n	80122e8 <__ssvfiscanf_r+0x1b0>
 80123a8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80123aa:	3201      	adds	r2, #1
 80123ac:	9245      	str	r2, [sp, #276]	@ 0x114
 80123ae:	6862      	ldr	r2, [r4, #4]
 80123b0:	3a01      	subs	r2, #1
 80123b2:	2a00      	cmp	r2, #0
 80123b4:	6062      	str	r2, [r4, #4]
 80123b6:	dd02      	ble.n	80123be <__ssvfiscanf_r+0x286>
 80123b8:	3301      	adds	r3, #1
 80123ba:	6023      	str	r3, [r4, #0]
 80123bc:	e7b6      	b.n	801232c <__ssvfiscanf_r+0x1f4>
 80123be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80123c0:	4621      	mov	r1, r4
 80123c2:	4630      	mov	r0, r6
 80123c4:	4798      	blx	r3
 80123c6:	2800      	cmp	r0, #0
 80123c8:	d0b0      	beq.n	801232c <__ssvfiscanf_r+0x1f4>
 80123ca:	e78d      	b.n	80122e8 <__ssvfiscanf_r+0x1b0>
 80123cc:	2b04      	cmp	r3, #4
 80123ce:	dc0f      	bgt.n	80123f0 <__ssvfiscanf_r+0x2b8>
 80123d0:	466b      	mov	r3, sp
 80123d2:	4622      	mov	r2, r4
 80123d4:	a941      	add	r1, sp, #260	@ 0x104
 80123d6:	4630      	mov	r0, r6
 80123d8:	f000 f87c 	bl	80124d4 <_scanf_i>
 80123dc:	e7b4      	b.n	8012348 <__ssvfiscanf_r+0x210>
 80123de:	bf00      	nop
 80123e0:	08012089 	.word	0x08012089
 80123e4:	080120ff 	.word	0x080120ff
 80123e8:	08013479 	.word	0x08013479
 80123ec:	0801357f 	.word	0x0801357f
 80123f0:	4b0a      	ldr	r3, [pc, #40]	@ (801241c <__ssvfiscanf_r+0x2e4>)
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	f43f aec5 	beq.w	8012182 <__ssvfiscanf_r+0x4a>
 80123f8:	466b      	mov	r3, sp
 80123fa:	4622      	mov	r2, r4
 80123fc:	a941      	add	r1, sp, #260	@ 0x104
 80123fe:	4630      	mov	r0, r6
 8012400:	f7fd fa12 	bl	800f828 <_scanf_float>
 8012404:	e7a0      	b.n	8012348 <__ssvfiscanf_r+0x210>
 8012406:	89a3      	ldrh	r3, [r4, #12]
 8012408:	065b      	lsls	r3, r3, #25
 801240a:	f53f af71 	bmi.w	80122f0 <__ssvfiscanf_r+0x1b8>
 801240e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8012412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012416:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012418:	e7f9      	b.n	801240e <__ssvfiscanf_r+0x2d6>
 801241a:	bf00      	nop
 801241c:	0800f829 	.word	0x0800f829

08012420 <_scanf_chars>:
 8012420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012424:	4615      	mov	r5, r2
 8012426:	688a      	ldr	r2, [r1, #8]
 8012428:	4680      	mov	r8, r0
 801242a:	460c      	mov	r4, r1
 801242c:	b932      	cbnz	r2, 801243c <_scanf_chars+0x1c>
 801242e:	698a      	ldr	r2, [r1, #24]
 8012430:	2a00      	cmp	r2, #0
 8012432:	bf14      	ite	ne
 8012434:	f04f 32ff 	movne.w	r2, #4294967295
 8012438:	2201      	moveq	r2, #1
 801243a:	608a      	str	r2, [r1, #8]
 801243c:	6822      	ldr	r2, [r4, #0]
 801243e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80124d0 <_scanf_chars+0xb0>
 8012442:	06d1      	lsls	r1, r2, #27
 8012444:	bf5f      	itttt	pl
 8012446:	681a      	ldrpl	r2, [r3, #0]
 8012448:	1d11      	addpl	r1, r2, #4
 801244a:	6019      	strpl	r1, [r3, #0]
 801244c:	6816      	ldrpl	r6, [r2, #0]
 801244e:	2700      	movs	r7, #0
 8012450:	69a0      	ldr	r0, [r4, #24]
 8012452:	b188      	cbz	r0, 8012478 <_scanf_chars+0x58>
 8012454:	2801      	cmp	r0, #1
 8012456:	d107      	bne.n	8012468 <_scanf_chars+0x48>
 8012458:	682b      	ldr	r3, [r5, #0]
 801245a:	781a      	ldrb	r2, [r3, #0]
 801245c:	6963      	ldr	r3, [r4, #20]
 801245e:	5c9b      	ldrb	r3, [r3, r2]
 8012460:	b953      	cbnz	r3, 8012478 <_scanf_chars+0x58>
 8012462:	2f00      	cmp	r7, #0
 8012464:	d031      	beq.n	80124ca <_scanf_chars+0xaa>
 8012466:	e022      	b.n	80124ae <_scanf_chars+0x8e>
 8012468:	2802      	cmp	r0, #2
 801246a:	d120      	bne.n	80124ae <_scanf_chars+0x8e>
 801246c:	682b      	ldr	r3, [r5, #0]
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012474:	071b      	lsls	r3, r3, #28
 8012476:	d41a      	bmi.n	80124ae <_scanf_chars+0x8e>
 8012478:	6823      	ldr	r3, [r4, #0]
 801247a:	06da      	lsls	r2, r3, #27
 801247c:	bf5e      	ittt	pl
 801247e:	682b      	ldrpl	r3, [r5, #0]
 8012480:	781b      	ldrbpl	r3, [r3, #0]
 8012482:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012486:	682a      	ldr	r2, [r5, #0]
 8012488:	686b      	ldr	r3, [r5, #4]
 801248a:	3201      	adds	r2, #1
 801248c:	602a      	str	r2, [r5, #0]
 801248e:	68a2      	ldr	r2, [r4, #8]
 8012490:	3b01      	subs	r3, #1
 8012492:	3a01      	subs	r2, #1
 8012494:	606b      	str	r3, [r5, #4]
 8012496:	3701      	adds	r7, #1
 8012498:	60a2      	str	r2, [r4, #8]
 801249a:	b142      	cbz	r2, 80124ae <_scanf_chars+0x8e>
 801249c:	2b00      	cmp	r3, #0
 801249e:	dcd7      	bgt.n	8012450 <_scanf_chars+0x30>
 80124a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80124a4:	4629      	mov	r1, r5
 80124a6:	4640      	mov	r0, r8
 80124a8:	4798      	blx	r3
 80124aa:	2800      	cmp	r0, #0
 80124ac:	d0d0      	beq.n	8012450 <_scanf_chars+0x30>
 80124ae:	6823      	ldr	r3, [r4, #0]
 80124b0:	f013 0310 	ands.w	r3, r3, #16
 80124b4:	d105      	bne.n	80124c2 <_scanf_chars+0xa2>
 80124b6:	68e2      	ldr	r2, [r4, #12]
 80124b8:	3201      	adds	r2, #1
 80124ba:	60e2      	str	r2, [r4, #12]
 80124bc:	69a2      	ldr	r2, [r4, #24]
 80124be:	b102      	cbz	r2, 80124c2 <_scanf_chars+0xa2>
 80124c0:	7033      	strb	r3, [r6, #0]
 80124c2:	6923      	ldr	r3, [r4, #16]
 80124c4:	443b      	add	r3, r7
 80124c6:	6123      	str	r3, [r4, #16]
 80124c8:	2000      	movs	r0, #0
 80124ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124ce:	bf00      	nop
 80124d0:	08013479 	.word	0x08013479

080124d4 <_scanf_i>:
 80124d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d8:	4698      	mov	r8, r3
 80124da:	4b74      	ldr	r3, [pc, #464]	@ (80126ac <_scanf_i+0x1d8>)
 80124dc:	460c      	mov	r4, r1
 80124de:	4682      	mov	sl, r0
 80124e0:	4616      	mov	r6, r2
 80124e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80124e6:	b087      	sub	sp, #28
 80124e8:	ab03      	add	r3, sp, #12
 80124ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80124ee:	4b70      	ldr	r3, [pc, #448]	@ (80126b0 <_scanf_i+0x1dc>)
 80124f0:	69a1      	ldr	r1, [r4, #24]
 80124f2:	4a70      	ldr	r2, [pc, #448]	@ (80126b4 <_scanf_i+0x1e0>)
 80124f4:	2903      	cmp	r1, #3
 80124f6:	bf08      	it	eq
 80124f8:	461a      	moveq	r2, r3
 80124fa:	68a3      	ldr	r3, [r4, #8]
 80124fc:	9201      	str	r2, [sp, #4]
 80124fe:	1e5a      	subs	r2, r3, #1
 8012500:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012504:	bf88      	it	hi
 8012506:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801250a:	4627      	mov	r7, r4
 801250c:	bf82      	ittt	hi
 801250e:	eb03 0905 	addhi.w	r9, r3, r5
 8012512:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012516:	60a3      	strhi	r3, [r4, #8]
 8012518:	f857 3b1c 	ldr.w	r3, [r7], #28
 801251c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012520:	bf98      	it	ls
 8012522:	f04f 0900 	movls.w	r9, #0
 8012526:	6023      	str	r3, [r4, #0]
 8012528:	463d      	mov	r5, r7
 801252a:	f04f 0b00 	mov.w	fp, #0
 801252e:	6831      	ldr	r1, [r6, #0]
 8012530:	ab03      	add	r3, sp, #12
 8012532:	7809      	ldrb	r1, [r1, #0]
 8012534:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012538:	2202      	movs	r2, #2
 801253a:	f7ed fee9 	bl	8000310 <memchr>
 801253e:	b328      	cbz	r0, 801258c <_scanf_i+0xb8>
 8012540:	f1bb 0f01 	cmp.w	fp, #1
 8012544:	d159      	bne.n	80125fa <_scanf_i+0x126>
 8012546:	6862      	ldr	r2, [r4, #4]
 8012548:	b92a      	cbnz	r2, 8012556 <_scanf_i+0x82>
 801254a:	6822      	ldr	r2, [r4, #0]
 801254c:	2108      	movs	r1, #8
 801254e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012552:	6061      	str	r1, [r4, #4]
 8012554:	6022      	str	r2, [r4, #0]
 8012556:	6822      	ldr	r2, [r4, #0]
 8012558:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801255c:	6022      	str	r2, [r4, #0]
 801255e:	68a2      	ldr	r2, [r4, #8]
 8012560:	1e51      	subs	r1, r2, #1
 8012562:	60a1      	str	r1, [r4, #8]
 8012564:	b192      	cbz	r2, 801258c <_scanf_i+0xb8>
 8012566:	6832      	ldr	r2, [r6, #0]
 8012568:	1c51      	adds	r1, r2, #1
 801256a:	6031      	str	r1, [r6, #0]
 801256c:	7812      	ldrb	r2, [r2, #0]
 801256e:	f805 2b01 	strb.w	r2, [r5], #1
 8012572:	6872      	ldr	r2, [r6, #4]
 8012574:	3a01      	subs	r2, #1
 8012576:	2a00      	cmp	r2, #0
 8012578:	6072      	str	r2, [r6, #4]
 801257a:	dc07      	bgt.n	801258c <_scanf_i+0xb8>
 801257c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012580:	4631      	mov	r1, r6
 8012582:	4650      	mov	r0, sl
 8012584:	4790      	blx	r2
 8012586:	2800      	cmp	r0, #0
 8012588:	f040 8085 	bne.w	8012696 <_scanf_i+0x1c2>
 801258c:	f10b 0b01 	add.w	fp, fp, #1
 8012590:	f1bb 0f03 	cmp.w	fp, #3
 8012594:	d1cb      	bne.n	801252e <_scanf_i+0x5a>
 8012596:	6863      	ldr	r3, [r4, #4]
 8012598:	b90b      	cbnz	r3, 801259e <_scanf_i+0xca>
 801259a:	230a      	movs	r3, #10
 801259c:	6063      	str	r3, [r4, #4]
 801259e:	6863      	ldr	r3, [r4, #4]
 80125a0:	4945      	ldr	r1, [pc, #276]	@ (80126b8 <_scanf_i+0x1e4>)
 80125a2:	6960      	ldr	r0, [r4, #20]
 80125a4:	1ac9      	subs	r1, r1, r3
 80125a6:	f000 f935 	bl	8012814 <__sccl>
 80125aa:	f04f 0b00 	mov.w	fp, #0
 80125ae:	68a3      	ldr	r3, [r4, #8]
 80125b0:	6822      	ldr	r2, [r4, #0]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d03d      	beq.n	8012632 <_scanf_i+0x15e>
 80125b6:	6831      	ldr	r1, [r6, #0]
 80125b8:	6960      	ldr	r0, [r4, #20]
 80125ba:	f891 c000 	ldrb.w	ip, [r1]
 80125be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80125c2:	2800      	cmp	r0, #0
 80125c4:	d035      	beq.n	8012632 <_scanf_i+0x15e>
 80125c6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80125ca:	d124      	bne.n	8012616 <_scanf_i+0x142>
 80125cc:	0510      	lsls	r0, r2, #20
 80125ce:	d522      	bpl.n	8012616 <_scanf_i+0x142>
 80125d0:	f10b 0b01 	add.w	fp, fp, #1
 80125d4:	f1b9 0f00 	cmp.w	r9, #0
 80125d8:	d003      	beq.n	80125e2 <_scanf_i+0x10e>
 80125da:	3301      	adds	r3, #1
 80125dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80125e0:	60a3      	str	r3, [r4, #8]
 80125e2:	6873      	ldr	r3, [r6, #4]
 80125e4:	3b01      	subs	r3, #1
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	6073      	str	r3, [r6, #4]
 80125ea:	dd1b      	ble.n	8012624 <_scanf_i+0x150>
 80125ec:	6833      	ldr	r3, [r6, #0]
 80125ee:	3301      	adds	r3, #1
 80125f0:	6033      	str	r3, [r6, #0]
 80125f2:	68a3      	ldr	r3, [r4, #8]
 80125f4:	3b01      	subs	r3, #1
 80125f6:	60a3      	str	r3, [r4, #8]
 80125f8:	e7d9      	b.n	80125ae <_scanf_i+0xda>
 80125fa:	f1bb 0f02 	cmp.w	fp, #2
 80125fe:	d1ae      	bne.n	801255e <_scanf_i+0x8a>
 8012600:	6822      	ldr	r2, [r4, #0]
 8012602:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012606:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801260a:	d1bf      	bne.n	801258c <_scanf_i+0xb8>
 801260c:	2110      	movs	r1, #16
 801260e:	6061      	str	r1, [r4, #4]
 8012610:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012614:	e7a2      	b.n	801255c <_scanf_i+0x88>
 8012616:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801261a:	6022      	str	r2, [r4, #0]
 801261c:	780b      	ldrb	r3, [r1, #0]
 801261e:	f805 3b01 	strb.w	r3, [r5], #1
 8012622:	e7de      	b.n	80125e2 <_scanf_i+0x10e>
 8012624:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012628:	4631      	mov	r1, r6
 801262a:	4650      	mov	r0, sl
 801262c:	4798      	blx	r3
 801262e:	2800      	cmp	r0, #0
 8012630:	d0df      	beq.n	80125f2 <_scanf_i+0x11e>
 8012632:	6823      	ldr	r3, [r4, #0]
 8012634:	05d9      	lsls	r1, r3, #23
 8012636:	d50d      	bpl.n	8012654 <_scanf_i+0x180>
 8012638:	42bd      	cmp	r5, r7
 801263a:	d909      	bls.n	8012650 <_scanf_i+0x17c>
 801263c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012640:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012644:	4632      	mov	r2, r6
 8012646:	4650      	mov	r0, sl
 8012648:	4798      	blx	r3
 801264a:	f105 39ff 	add.w	r9, r5, #4294967295
 801264e:	464d      	mov	r5, r9
 8012650:	42bd      	cmp	r5, r7
 8012652:	d028      	beq.n	80126a6 <_scanf_i+0x1d2>
 8012654:	6822      	ldr	r2, [r4, #0]
 8012656:	f012 0210 	ands.w	r2, r2, #16
 801265a:	d113      	bne.n	8012684 <_scanf_i+0x1b0>
 801265c:	702a      	strb	r2, [r5, #0]
 801265e:	6863      	ldr	r3, [r4, #4]
 8012660:	9e01      	ldr	r6, [sp, #4]
 8012662:	4639      	mov	r1, r7
 8012664:	4650      	mov	r0, sl
 8012666:	47b0      	blx	r6
 8012668:	f8d8 3000 	ldr.w	r3, [r8]
 801266c:	6821      	ldr	r1, [r4, #0]
 801266e:	1d1a      	adds	r2, r3, #4
 8012670:	f8c8 2000 	str.w	r2, [r8]
 8012674:	f011 0f20 	tst.w	r1, #32
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	d00f      	beq.n	801269c <_scanf_i+0x1c8>
 801267c:	6018      	str	r0, [r3, #0]
 801267e:	68e3      	ldr	r3, [r4, #12]
 8012680:	3301      	adds	r3, #1
 8012682:	60e3      	str	r3, [r4, #12]
 8012684:	6923      	ldr	r3, [r4, #16]
 8012686:	1bed      	subs	r5, r5, r7
 8012688:	445d      	add	r5, fp
 801268a:	442b      	add	r3, r5
 801268c:	6123      	str	r3, [r4, #16]
 801268e:	2000      	movs	r0, #0
 8012690:	b007      	add	sp, #28
 8012692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012696:	f04f 0b00 	mov.w	fp, #0
 801269a:	e7ca      	b.n	8012632 <_scanf_i+0x15e>
 801269c:	07ca      	lsls	r2, r1, #31
 801269e:	bf4c      	ite	mi
 80126a0:	8018      	strhmi	r0, [r3, #0]
 80126a2:	6018      	strpl	r0, [r3, #0]
 80126a4:	e7eb      	b.n	801267e <_scanf_i+0x1aa>
 80126a6:	2001      	movs	r0, #1
 80126a8:	e7f2      	b.n	8012690 <_scanf_i+0x1bc>
 80126aa:	bf00      	nop
 80126ac:	08013144 	.word	0x08013144
 80126b0:	08011dbd 	.word	0x08011dbd
 80126b4:	08012acd 	.word	0x08012acd
 80126b8:	0801359a 	.word	0x0801359a

080126bc <__sflush_r>:
 80126bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80126c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c4:	0716      	lsls	r6, r2, #28
 80126c6:	4605      	mov	r5, r0
 80126c8:	460c      	mov	r4, r1
 80126ca:	d454      	bmi.n	8012776 <__sflush_r+0xba>
 80126cc:	684b      	ldr	r3, [r1, #4]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	dc02      	bgt.n	80126d8 <__sflush_r+0x1c>
 80126d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	dd48      	ble.n	801276a <__sflush_r+0xae>
 80126d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126da:	2e00      	cmp	r6, #0
 80126dc:	d045      	beq.n	801276a <__sflush_r+0xae>
 80126de:	2300      	movs	r3, #0
 80126e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80126e4:	682f      	ldr	r7, [r5, #0]
 80126e6:	6a21      	ldr	r1, [r4, #32]
 80126e8:	602b      	str	r3, [r5, #0]
 80126ea:	d030      	beq.n	801274e <__sflush_r+0x92>
 80126ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80126ee:	89a3      	ldrh	r3, [r4, #12]
 80126f0:	0759      	lsls	r1, r3, #29
 80126f2:	d505      	bpl.n	8012700 <__sflush_r+0x44>
 80126f4:	6863      	ldr	r3, [r4, #4]
 80126f6:	1ad2      	subs	r2, r2, r3
 80126f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80126fa:	b10b      	cbz	r3, 8012700 <__sflush_r+0x44>
 80126fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80126fe:	1ad2      	subs	r2, r2, r3
 8012700:	2300      	movs	r3, #0
 8012702:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012704:	6a21      	ldr	r1, [r4, #32]
 8012706:	4628      	mov	r0, r5
 8012708:	47b0      	blx	r6
 801270a:	1c43      	adds	r3, r0, #1
 801270c:	89a3      	ldrh	r3, [r4, #12]
 801270e:	d106      	bne.n	801271e <__sflush_r+0x62>
 8012710:	6829      	ldr	r1, [r5, #0]
 8012712:	291d      	cmp	r1, #29
 8012714:	d82b      	bhi.n	801276e <__sflush_r+0xb2>
 8012716:	4a2a      	ldr	r2, [pc, #168]	@ (80127c0 <__sflush_r+0x104>)
 8012718:	410a      	asrs	r2, r1
 801271a:	07d6      	lsls	r6, r2, #31
 801271c:	d427      	bmi.n	801276e <__sflush_r+0xb2>
 801271e:	2200      	movs	r2, #0
 8012720:	6062      	str	r2, [r4, #4]
 8012722:	04d9      	lsls	r1, r3, #19
 8012724:	6922      	ldr	r2, [r4, #16]
 8012726:	6022      	str	r2, [r4, #0]
 8012728:	d504      	bpl.n	8012734 <__sflush_r+0x78>
 801272a:	1c42      	adds	r2, r0, #1
 801272c:	d101      	bne.n	8012732 <__sflush_r+0x76>
 801272e:	682b      	ldr	r3, [r5, #0]
 8012730:	b903      	cbnz	r3, 8012734 <__sflush_r+0x78>
 8012732:	6560      	str	r0, [r4, #84]	@ 0x54
 8012734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012736:	602f      	str	r7, [r5, #0]
 8012738:	b1b9      	cbz	r1, 801276a <__sflush_r+0xae>
 801273a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801273e:	4299      	cmp	r1, r3
 8012740:	d002      	beq.n	8012748 <__sflush_r+0x8c>
 8012742:	4628      	mov	r0, r5
 8012744:	f7fe fa7a 	bl	8010c3c <_free_r>
 8012748:	2300      	movs	r3, #0
 801274a:	6363      	str	r3, [r4, #52]	@ 0x34
 801274c:	e00d      	b.n	801276a <__sflush_r+0xae>
 801274e:	2301      	movs	r3, #1
 8012750:	4628      	mov	r0, r5
 8012752:	47b0      	blx	r6
 8012754:	4602      	mov	r2, r0
 8012756:	1c50      	adds	r0, r2, #1
 8012758:	d1c9      	bne.n	80126ee <__sflush_r+0x32>
 801275a:	682b      	ldr	r3, [r5, #0]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d0c6      	beq.n	80126ee <__sflush_r+0x32>
 8012760:	2b1d      	cmp	r3, #29
 8012762:	d001      	beq.n	8012768 <__sflush_r+0xac>
 8012764:	2b16      	cmp	r3, #22
 8012766:	d11e      	bne.n	80127a6 <__sflush_r+0xea>
 8012768:	602f      	str	r7, [r5, #0]
 801276a:	2000      	movs	r0, #0
 801276c:	e022      	b.n	80127b4 <__sflush_r+0xf8>
 801276e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012772:	b21b      	sxth	r3, r3
 8012774:	e01b      	b.n	80127ae <__sflush_r+0xf2>
 8012776:	690f      	ldr	r7, [r1, #16]
 8012778:	2f00      	cmp	r7, #0
 801277a:	d0f6      	beq.n	801276a <__sflush_r+0xae>
 801277c:	0793      	lsls	r3, r2, #30
 801277e:	680e      	ldr	r6, [r1, #0]
 8012780:	bf08      	it	eq
 8012782:	694b      	ldreq	r3, [r1, #20]
 8012784:	600f      	str	r7, [r1, #0]
 8012786:	bf18      	it	ne
 8012788:	2300      	movne	r3, #0
 801278a:	eba6 0807 	sub.w	r8, r6, r7
 801278e:	608b      	str	r3, [r1, #8]
 8012790:	f1b8 0f00 	cmp.w	r8, #0
 8012794:	dde9      	ble.n	801276a <__sflush_r+0xae>
 8012796:	6a21      	ldr	r1, [r4, #32]
 8012798:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801279a:	4643      	mov	r3, r8
 801279c:	463a      	mov	r2, r7
 801279e:	4628      	mov	r0, r5
 80127a0:	47b0      	blx	r6
 80127a2:	2800      	cmp	r0, #0
 80127a4:	dc08      	bgt.n	80127b8 <__sflush_r+0xfc>
 80127a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127ae:	81a3      	strh	r3, [r4, #12]
 80127b0:	f04f 30ff 	mov.w	r0, #4294967295
 80127b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127b8:	4407      	add	r7, r0
 80127ba:	eba8 0800 	sub.w	r8, r8, r0
 80127be:	e7e7      	b.n	8012790 <__sflush_r+0xd4>
 80127c0:	dfbffffe 	.word	0xdfbffffe

080127c4 <_fflush_r>:
 80127c4:	b538      	push	{r3, r4, r5, lr}
 80127c6:	690b      	ldr	r3, [r1, #16]
 80127c8:	4605      	mov	r5, r0
 80127ca:	460c      	mov	r4, r1
 80127cc:	b913      	cbnz	r3, 80127d4 <_fflush_r+0x10>
 80127ce:	2500      	movs	r5, #0
 80127d0:	4628      	mov	r0, r5
 80127d2:	bd38      	pop	{r3, r4, r5, pc}
 80127d4:	b118      	cbz	r0, 80127de <_fflush_r+0x1a>
 80127d6:	6a03      	ldr	r3, [r0, #32]
 80127d8:	b90b      	cbnz	r3, 80127de <_fflush_r+0x1a>
 80127da:	f7fd fabd 	bl	800fd58 <__sinit>
 80127de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d0f3      	beq.n	80127ce <_fflush_r+0xa>
 80127e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80127e8:	07d0      	lsls	r0, r2, #31
 80127ea:	d404      	bmi.n	80127f6 <_fflush_r+0x32>
 80127ec:	0599      	lsls	r1, r3, #22
 80127ee:	d402      	bmi.n	80127f6 <_fflush_r+0x32>
 80127f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127f2:	f7fd fc22 	bl	801003a <__retarget_lock_acquire_recursive>
 80127f6:	4628      	mov	r0, r5
 80127f8:	4621      	mov	r1, r4
 80127fa:	f7ff ff5f 	bl	80126bc <__sflush_r>
 80127fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012800:	07da      	lsls	r2, r3, #31
 8012802:	4605      	mov	r5, r0
 8012804:	d4e4      	bmi.n	80127d0 <_fflush_r+0xc>
 8012806:	89a3      	ldrh	r3, [r4, #12]
 8012808:	059b      	lsls	r3, r3, #22
 801280a:	d4e1      	bmi.n	80127d0 <_fflush_r+0xc>
 801280c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801280e:	f7fd fc15 	bl	801003c <__retarget_lock_release_recursive>
 8012812:	e7dd      	b.n	80127d0 <_fflush_r+0xc>

08012814 <__sccl>:
 8012814:	b570      	push	{r4, r5, r6, lr}
 8012816:	780b      	ldrb	r3, [r1, #0]
 8012818:	4604      	mov	r4, r0
 801281a:	2b5e      	cmp	r3, #94	@ 0x5e
 801281c:	bf0b      	itete	eq
 801281e:	784b      	ldrbeq	r3, [r1, #1]
 8012820:	1c4a      	addne	r2, r1, #1
 8012822:	1c8a      	addeq	r2, r1, #2
 8012824:	2100      	movne	r1, #0
 8012826:	bf08      	it	eq
 8012828:	2101      	moveq	r1, #1
 801282a:	3801      	subs	r0, #1
 801282c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012830:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012834:	42a8      	cmp	r0, r5
 8012836:	d1fb      	bne.n	8012830 <__sccl+0x1c>
 8012838:	b90b      	cbnz	r3, 801283e <__sccl+0x2a>
 801283a:	1e50      	subs	r0, r2, #1
 801283c:	bd70      	pop	{r4, r5, r6, pc}
 801283e:	f081 0101 	eor.w	r1, r1, #1
 8012842:	54e1      	strb	r1, [r4, r3]
 8012844:	4610      	mov	r0, r2
 8012846:	4602      	mov	r2, r0
 8012848:	f812 5b01 	ldrb.w	r5, [r2], #1
 801284c:	2d2d      	cmp	r5, #45	@ 0x2d
 801284e:	d005      	beq.n	801285c <__sccl+0x48>
 8012850:	2d5d      	cmp	r5, #93	@ 0x5d
 8012852:	d016      	beq.n	8012882 <__sccl+0x6e>
 8012854:	2d00      	cmp	r5, #0
 8012856:	d0f1      	beq.n	801283c <__sccl+0x28>
 8012858:	462b      	mov	r3, r5
 801285a:	e7f2      	b.n	8012842 <__sccl+0x2e>
 801285c:	7846      	ldrb	r6, [r0, #1]
 801285e:	2e5d      	cmp	r6, #93	@ 0x5d
 8012860:	d0fa      	beq.n	8012858 <__sccl+0x44>
 8012862:	42b3      	cmp	r3, r6
 8012864:	dcf8      	bgt.n	8012858 <__sccl+0x44>
 8012866:	3002      	adds	r0, #2
 8012868:	461a      	mov	r2, r3
 801286a:	3201      	adds	r2, #1
 801286c:	4296      	cmp	r6, r2
 801286e:	54a1      	strb	r1, [r4, r2]
 8012870:	dcfb      	bgt.n	801286a <__sccl+0x56>
 8012872:	1af2      	subs	r2, r6, r3
 8012874:	3a01      	subs	r2, #1
 8012876:	1c5d      	adds	r5, r3, #1
 8012878:	42b3      	cmp	r3, r6
 801287a:	bfa8      	it	ge
 801287c:	2200      	movge	r2, #0
 801287e:	18ab      	adds	r3, r5, r2
 8012880:	e7e1      	b.n	8012846 <__sccl+0x32>
 8012882:	4610      	mov	r0, r2
 8012884:	e7da      	b.n	801283c <__sccl+0x28>

08012886 <__submore>:
 8012886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801288a:	460c      	mov	r4, r1
 801288c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801288e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012892:	4299      	cmp	r1, r3
 8012894:	d11d      	bne.n	80128d2 <__submore+0x4c>
 8012896:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801289a:	f7fb fd49 	bl	800e330 <_malloc_r>
 801289e:	b918      	cbnz	r0, 80128a8 <__submore+0x22>
 80128a0:	f04f 30ff 	mov.w	r0, #4294967295
 80128a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80128ac:	63a3      	str	r3, [r4, #56]	@ 0x38
 80128ae:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80128b2:	6360      	str	r0, [r4, #52]	@ 0x34
 80128b4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80128b8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80128bc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80128c0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80128c4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80128c8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80128cc:	6020      	str	r0, [r4, #0]
 80128ce:	2000      	movs	r0, #0
 80128d0:	e7e8      	b.n	80128a4 <__submore+0x1e>
 80128d2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80128d4:	0077      	lsls	r7, r6, #1
 80128d6:	463a      	mov	r2, r7
 80128d8:	f000 f85c 	bl	8012994 <_realloc_r>
 80128dc:	4605      	mov	r5, r0
 80128de:	2800      	cmp	r0, #0
 80128e0:	d0de      	beq.n	80128a0 <__submore+0x1a>
 80128e2:	eb00 0806 	add.w	r8, r0, r6
 80128e6:	4601      	mov	r1, r0
 80128e8:	4632      	mov	r2, r6
 80128ea:	4640      	mov	r0, r8
 80128ec:	f7fd fba7 	bl	801003e <memcpy>
 80128f0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80128f4:	f8c4 8000 	str.w	r8, [r4]
 80128f8:	e7e9      	b.n	80128ce <__submore+0x48>

080128fa <memmove>:
 80128fa:	4288      	cmp	r0, r1
 80128fc:	b510      	push	{r4, lr}
 80128fe:	eb01 0402 	add.w	r4, r1, r2
 8012902:	d902      	bls.n	801290a <memmove+0x10>
 8012904:	4284      	cmp	r4, r0
 8012906:	4623      	mov	r3, r4
 8012908:	d807      	bhi.n	801291a <memmove+0x20>
 801290a:	1e43      	subs	r3, r0, #1
 801290c:	42a1      	cmp	r1, r4
 801290e:	d008      	beq.n	8012922 <memmove+0x28>
 8012910:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012914:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012918:	e7f8      	b.n	801290c <memmove+0x12>
 801291a:	4402      	add	r2, r0
 801291c:	4601      	mov	r1, r0
 801291e:	428a      	cmp	r2, r1
 8012920:	d100      	bne.n	8012924 <memmove+0x2a>
 8012922:	bd10      	pop	{r4, pc}
 8012924:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012928:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801292c:	e7f7      	b.n	801291e <memmove+0x24>
	...

08012930 <__assert_func>:
 8012930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012932:	4614      	mov	r4, r2
 8012934:	461a      	mov	r2, r3
 8012936:	4b09      	ldr	r3, [pc, #36]	@ (801295c <__assert_func+0x2c>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	4605      	mov	r5, r0
 801293c:	68d8      	ldr	r0, [r3, #12]
 801293e:	b954      	cbnz	r4, 8012956 <__assert_func+0x26>
 8012940:	4b07      	ldr	r3, [pc, #28]	@ (8012960 <__assert_func+0x30>)
 8012942:	461c      	mov	r4, r3
 8012944:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012948:	9100      	str	r1, [sp, #0]
 801294a:	462b      	mov	r3, r5
 801294c:	4905      	ldr	r1, [pc, #20]	@ (8012964 <__assert_func+0x34>)
 801294e:	f000 f8bf 	bl	8012ad0 <fiprintf>
 8012952:	f000 f8cf 	bl	8012af4 <abort>
 8012956:	4b04      	ldr	r3, [pc, #16]	@ (8012968 <__assert_func+0x38>)
 8012958:	e7f4      	b.n	8012944 <__assert_func+0x14>
 801295a:	bf00      	nop
 801295c:	240001c4 	.word	0x240001c4
 8012960:	080135e0 	.word	0x080135e0
 8012964:	080135b2 	.word	0x080135b2
 8012968:	080135a5 	.word	0x080135a5

0801296c <_calloc_r>:
 801296c:	b570      	push	{r4, r5, r6, lr}
 801296e:	fba1 5402 	umull	r5, r4, r1, r2
 8012972:	b93c      	cbnz	r4, 8012984 <_calloc_r+0x18>
 8012974:	4629      	mov	r1, r5
 8012976:	f7fb fcdb 	bl	800e330 <_malloc_r>
 801297a:	4606      	mov	r6, r0
 801297c:	b928      	cbnz	r0, 801298a <_calloc_r+0x1e>
 801297e:	2600      	movs	r6, #0
 8012980:	4630      	mov	r0, r6
 8012982:	bd70      	pop	{r4, r5, r6, pc}
 8012984:	220c      	movs	r2, #12
 8012986:	6002      	str	r2, [r0, #0]
 8012988:	e7f9      	b.n	801297e <_calloc_r+0x12>
 801298a:	462a      	mov	r2, r5
 801298c:	4621      	mov	r1, r4
 801298e:	f7fd faa8 	bl	800fee2 <memset>
 8012992:	e7f5      	b.n	8012980 <_calloc_r+0x14>

08012994 <_realloc_r>:
 8012994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012998:	4680      	mov	r8, r0
 801299a:	4615      	mov	r5, r2
 801299c:	460c      	mov	r4, r1
 801299e:	b921      	cbnz	r1, 80129aa <_realloc_r+0x16>
 80129a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129a4:	4611      	mov	r1, r2
 80129a6:	f7fb bcc3 	b.w	800e330 <_malloc_r>
 80129aa:	b92a      	cbnz	r2, 80129b8 <_realloc_r+0x24>
 80129ac:	f7fe f946 	bl	8010c3c <_free_r>
 80129b0:	2400      	movs	r4, #0
 80129b2:	4620      	mov	r0, r4
 80129b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129b8:	f000 f8a3 	bl	8012b02 <_malloc_usable_size_r>
 80129bc:	4285      	cmp	r5, r0
 80129be:	4606      	mov	r6, r0
 80129c0:	d802      	bhi.n	80129c8 <_realloc_r+0x34>
 80129c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80129c6:	d8f4      	bhi.n	80129b2 <_realloc_r+0x1e>
 80129c8:	4629      	mov	r1, r5
 80129ca:	4640      	mov	r0, r8
 80129cc:	f7fb fcb0 	bl	800e330 <_malloc_r>
 80129d0:	4607      	mov	r7, r0
 80129d2:	2800      	cmp	r0, #0
 80129d4:	d0ec      	beq.n	80129b0 <_realloc_r+0x1c>
 80129d6:	42b5      	cmp	r5, r6
 80129d8:	462a      	mov	r2, r5
 80129da:	4621      	mov	r1, r4
 80129dc:	bf28      	it	cs
 80129de:	4632      	movcs	r2, r6
 80129e0:	f7fd fb2d 	bl	801003e <memcpy>
 80129e4:	4621      	mov	r1, r4
 80129e6:	4640      	mov	r0, r8
 80129e8:	f7fe f928 	bl	8010c3c <_free_r>
 80129ec:	463c      	mov	r4, r7
 80129ee:	e7e0      	b.n	80129b2 <_realloc_r+0x1e>

080129f0 <_strtoul_l.constprop.0>:
 80129f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80129f4:	4e34      	ldr	r6, [pc, #208]	@ (8012ac8 <_strtoul_l.constprop.0+0xd8>)
 80129f6:	4686      	mov	lr, r0
 80129f8:	460d      	mov	r5, r1
 80129fa:	4628      	mov	r0, r5
 80129fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012a00:	5d37      	ldrb	r7, [r6, r4]
 8012a02:	f017 0708 	ands.w	r7, r7, #8
 8012a06:	d1f8      	bne.n	80129fa <_strtoul_l.constprop.0+0xa>
 8012a08:	2c2d      	cmp	r4, #45	@ 0x2d
 8012a0a:	d12f      	bne.n	8012a6c <_strtoul_l.constprop.0+0x7c>
 8012a0c:	782c      	ldrb	r4, [r5, #0]
 8012a0e:	2701      	movs	r7, #1
 8012a10:	1c85      	adds	r5, r0, #2
 8012a12:	f033 0010 	bics.w	r0, r3, #16
 8012a16:	d109      	bne.n	8012a2c <_strtoul_l.constprop.0+0x3c>
 8012a18:	2c30      	cmp	r4, #48	@ 0x30
 8012a1a:	d12c      	bne.n	8012a76 <_strtoul_l.constprop.0+0x86>
 8012a1c:	7828      	ldrb	r0, [r5, #0]
 8012a1e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012a22:	2858      	cmp	r0, #88	@ 0x58
 8012a24:	d127      	bne.n	8012a76 <_strtoul_l.constprop.0+0x86>
 8012a26:	786c      	ldrb	r4, [r5, #1]
 8012a28:	2310      	movs	r3, #16
 8012a2a:	3502      	adds	r5, #2
 8012a2c:	f04f 38ff 	mov.w	r8, #4294967295
 8012a30:	2600      	movs	r6, #0
 8012a32:	fbb8 f8f3 	udiv	r8, r8, r3
 8012a36:	fb03 f908 	mul.w	r9, r3, r8
 8012a3a:	ea6f 0909 	mvn.w	r9, r9
 8012a3e:	4630      	mov	r0, r6
 8012a40:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012a44:	f1bc 0f09 	cmp.w	ip, #9
 8012a48:	d81c      	bhi.n	8012a84 <_strtoul_l.constprop.0+0x94>
 8012a4a:	4664      	mov	r4, ip
 8012a4c:	42a3      	cmp	r3, r4
 8012a4e:	dd2a      	ble.n	8012aa6 <_strtoul_l.constprop.0+0xb6>
 8012a50:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012a54:	d007      	beq.n	8012a66 <_strtoul_l.constprop.0+0x76>
 8012a56:	4580      	cmp	r8, r0
 8012a58:	d322      	bcc.n	8012aa0 <_strtoul_l.constprop.0+0xb0>
 8012a5a:	d101      	bne.n	8012a60 <_strtoul_l.constprop.0+0x70>
 8012a5c:	45a1      	cmp	r9, r4
 8012a5e:	db1f      	blt.n	8012aa0 <_strtoul_l.constprop.0+0xb0>
 8012a60:	fb00 4003 	mla	r0, r0, r3, r4
 8012a64:	2601      	movs	r6, #1
 8012a66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012a6a:	e7e9      	b.n	8012a40 <_strtoul_l.constprop.0+0x50>
 8012a6c:	2c2b      	cmp	r4, #43	@ 0x2b
 8012a6e:	bf04      	itt	eq
 8012a70:	782c      	ldrbeq	r4, [r5, #0]
 8012a72:	1c85      	addeq	r5, r0, #2
 8012a74:	e7cd      	b.n	8012a12 <_strtoul_l.constprop.0+0x22>
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d1d8      	bne.n	8012a2c <_strtoul_l.constprop.0+0x3c>
 8012a7a:	2c30      	cmp	r4, #48	@ 0x30
 8012a7c:	bf0c      	ite	eq
 8012a7e:	2308      	moveq	r3, #8
 8012a80:	230a      	movne	r3, #10
 8012a82:	e7d3      	b.n	8012a2c <_strtoul_l.constprop.0+0x3c>
 8012a84:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012a88:	f1bc 0f19 	cmp.w	ip, #25
 8012a8c:	d801      	bhi.n	8012a92 <_strtoul_l.constprop.0+0xa2>
 8012a8e:	3c37      	subs	r4, #55	@ 0x37
 8012a90:	e7dc      	b.n	8012a4c <_strtoul_l.constprop.0+0x5c>
 8012a92:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012a96:	f1bc 0f19 	cmp.w	ip, #25
 8012a9a:	d804      	bhi.n	8012aa6 <_strtoul_l.constprop.0+0xb6>
 8012a9c:	3c57      	subs	r4, #87	@ 0x57
 8012a9e:	e7d5      	b.n	8012a4c <_strtoul_l.constprop.0+0x5c>
 8012aa0:	f04f 36ff 	mov.w	r6, #4294967295
 8012aa4:	e7df      	b.n	8012a66 <_strtoul_l.constprop.0+0x76>
 8012aa6:	1c73      	adds	r3, r6, #1
 8012aa8:	d106      	bne.n	8012ab8 <_strtoul_l.constprop.0+0xc8>
 8012aaa:	2322      	movs	r3, #34	@ 0x22
 8012aac:	f8ce 3000 	str.w	r3, [lr]
 8012ab0:	4630      	mov	r0, r6
 8012ab2:	b932      	cbnz	r2, 8012ac2 <_strtoul_l.constprop.0+0xd2>
 8012ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ab8:	b107      	cbz	r7, 8012abc <_strtoul_l.constprop.0+0xcc>
 8012aba:	4240      	negs	r0, r0
 8012abc:	2a00      	cmp	r2, #0
 8012abe:	d0f9      	beq.n	8012ab4 <_strtoul_l.constprop.0+0xc4>
 8012ac0:	b106      	cbz	r6, 8012ac4 <_strtoul_l.constprop.0+0xd4>
 8012ac2:	1e69      	subs	r1, r5, #1
 8012ac4:	6011      	str	r1, [r2, #0]
 8012ac6:	e7f5      	b.n	8012ab4 <_strtoul_l.constprop.0+0xc4>
 8012ac8:	08013479 	.word	0x08013479

08012acc <_strtoul_r>:
 8012acc:	f7ff bf90 	b.w	80129f0 <_strtoul_l.constprop.0>

08012ad0 <fiprintf>:
 8012ad0:	b40e      	push	{r1, r2, r3}
 8012ad2:	b503      	push	{r0, r1, lr}
 8012ad4:	4601      	mov	r1, r0
 8012ad6:	ab03      	add	r3, sp, #12
 8012ad8:	4805      	ldr	r0, [pc, #20]	@ (8012af0 <fiprintf+0x20>)
 8012ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ade:	6800      	ldr	r0, [r0, #0]
 8012ae0:	9301      	str	r3, [sp, #4]
 8012ae2:	f000 f83f 	bl	8012b64 <_vfiprintf_r>
 8012ae6:	b002      	add	sp, #8
 8012ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012aec:	b003      	add	sp, #12
 8012aee:	4770      	bx	lr
 8012af0:	240001c4 	.word	0x240001c4

08012af4 <abort>:
 8012af4:	b508      	push	{r3, lr}
 8012af6:	2006      	movs	r0, #6
 8012af8:	f000 fa08 	bl	8012f0c <raise>
 8012afc:	2001      	movs	r0, #1
 8012afe:	f7ee febb 	bl	8001878 <_exit>

08012b02 <_malloc_usable_size_r>:
 8012b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b06:	1f18      	subs	r0, r3, #4
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	bfbc      	itt	lt
 8012b0c:	580b      	ldrlt	r3, [r1, r0]
 8012b0e:	18c0      	addlt	r0, r0, r3
 8012b10:	4770      	bx	lr

08012b12 <__sfputc_r>:
 8012b12:	6893      	ldr	r3, [r2, #8]
 8012b14:	3b01      	subs	r3, #1
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	b410      	push	{r4}
 8012b1a:	6093      	str	r3, [r2, #8]
 8012b1c:	da08      	bge.n	8012b30 <__sfputc_r+0x1e>
 8012b1e:	6994      	ldr	r4, [r2, #24]
 8012b20:	42a3      	cmp	r3, r4
 8012b22:	db01      	blt.n	8012b28 <__sfputc_r+0x16>
 8012b24:	290a      	cmp	r1, #10
 8012b26:	d103      	bne.n	8012b30 <__sfputc_r+0x1e>
 8012b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b2c:	f000 b932 	b.w	8012d94 <__swbuf_r>
 8012b30:	6813      	ldr	r3, [r2, #0]
 8012b32:	1c58      	adds	r0, r3, #1
 8012b34:	6010      	str	r0, [r2, #0]
 8012b36:	7019      	strb	r1, [r3, #0]
 8012b38:	4608      	mov	r0, r1
 8012b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b3e:	4770      	bx	lr

08012b40 <__sfputs_r>:
 8012b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b42:	4606      	mov	r6, r0
 8012b44:	460f      	mov	r7, r1
 8012b46:	4614      	mov	r4, r2
 8012b48:	18d5      	adds	r5, r2, r3
 8012b4a:	42ac      	cmp	r4, r5
 8012b4c:	d101      	bne.n	8012b52 <__sfputs_r+0x12>
 8012b4e:	2000      	movs	r0, #0
 8012b50:	e007      	b.n	8012b62 <__sfputs_r+0x22>
 8012b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b56:	463a      	mov	r2, r7
 8012b58:	4630      	mov	r0, r6
 8012b5a:	f7ff ffda 	bl	8012b12 <__sfputc_r>
 8012b5e:	1c43      	adds	r3, r0, #1
 8012b60:	d1f3      	bne.n	8012b4a <__sfputs_r+0xa>
 8012b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b64 <_vfiprintf_r>:
 8012b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b68:	460d      	mov	r5, r1
 8012b6a:	b09d      	sub	sp, #116	@ 0x74
 8012b6c:	4614      	mov	r4, r2
 8012b6e:	4698      	mov	r8, r3
 8012b70:	4606      	mov	r6, r0
 8012b72:	b118      	cbz	r0, 8012b7c <_vfiprintf_r+0x18>
 8012b74:	6a03      	ldr	r3, [r0, #32]
 8012b76:	b90b      	cbnz	r3, 8012b7c <_vfiprintf_r+0x18>
 8012b78:	f7fd f8ee 	bl	800fd58 <__sinit>
 8012b7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b7e:	07d9      	lsls	r1, r3, #31
 8012b80:	d405      	bmi.n	8012b8e <_vfiprintf_r+0x2a>
 8012b82:	89ab      	ldrh	r3, [r5, #12]
 8012b84:	059a      	lsls	r2, r3, #22
 8012b86:	d402      	bmi.n	8012b8e <_vfiprintf_r+0x2a>
 8012b88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b8a:	f7fd fa56 	bl	801003a <__retarget_lock_acquire_recursive>
 8012b8e:	89ab      	ldrh	r3, [r5, #12]
 8012b90:	071b      	lsls	r3, r3, #28
 8012b92:	d501      	bpl.n	8012b98 <_vfiprintf_r+0x34>
 8012b94:	692b      	ldr	r3, [r5, #16]
 8012b96:	b99b      	cbnz	r3, 8012bc0 <_vfiprintf_r+0x5c>
 8012b98:	4629      	mov	r1, r5
 8012b9a:	4630      	mov	r0, r6
 8012b9c:	f000 f938 	bl	8012e10 <__swsetup_r>
 8012ba0:	b170      	cbz	r0, 8012bc0 <_vfiprintf_r+0x5c>
 8012ba2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012ba4:	07dc      	lsls	r4, r3, #31
 8012ba6:	d504      	bpl.n	8012bb2 <_vfiprintf_r+0x4e>
 8012ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8012bac:	b01d      	add	sp, #116	@ 0x74
 8012bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bb2:	89ab      	ldrh	r3, [r5, #12]
 8012bb4:	0598      	lsls	r0, r3, #22
 8012bb6:	d4f7      	bmi.n	8012ba8 <_vfiprintf_r+0x44>
 8012bb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012bba:	f7fd fa3f 	bl	801003c <__retarget_lock_release_recursive>
 8012bbe:	e7f3      	b.n	8012ba8 <_vfiprintf_r+0x44>
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8012bc4:	2320      	movs	r3, #32
 8012bc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012bca:	f8cd 800c 	str.w	r8, [sp, #12]
 8012bce:	2330      	movs	r3, #48	@ 0x30
 8012bd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012d80 <_vfiprintf_r+0x21c>
 8012bd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012bd8:	f04f 0901 	mov.w	r9, #1
 8012bdc:	4623      	mov	r3, r4
 8012bde:	469a      	mov	sl, r3
 8012be0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012be4:	b10a      	cbz	r2, 8012bea <_vfiprintf_r+0x86>
 8012be6:	2a25      	cmp	r2, #37	@ 0x25
 8012be8:	d1f9      	bne.n	8012bde <_vfiprintf_r+0x7a>
 8012bea:	ebba 0b04 	subs.w	fp, sl, r4
 8012bee:	d00b      	beq.n	8012c08 <_vfiprintf_r+0xa4>
 8012bf0:	465b      	mov	r3, fp
 8012bf2:	4622      	mov	r2, r4
 8012bf4:	4629      	mov	r1, r5
 8012bf6:	4630      	mov	r0, r6
 8012bf8:	f7ff ffa2 	bl	8012b40 <__sfputs_r>
 8012bfc:	3001      	adds	r0, #1
 8012bfe:	f000 80a7 	beq.w	8012d50 <_vfiprintf_r+0x1ec>
 8012c02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c04:	445a      	add	r2, fp
 8012c06:	9209      	str	r2, [sp, #36]	@ 0x24
 8012c08:	f89a 3000 	ldrb.w	r3, [sl]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	f000 809f 	beq.w	8012d50 <_vfiprintf_r+0x1ec>
 8012c12:	2300      	movs	r3, #0
 8012c14:	f04f 32ff 	mov.w	r2, #4294967295
 8012c18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c1c:	f10a 0a01 	add.w	sl, sl, #1
 8012c20:	9304      	str	r3, [sp, #16]
 8012c22:	9307      	str	r3, [sp, #28]
 8012c24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012c28:	931a      	str	r3, [sp, #104]	@ 0x68
 8012c2a:	4654      	mov	r4, sl
 8012c2c:	2205      	movs	r2, #5
 8012c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c32:	4853      	ldr	r0, [pc, #332]	@ (8012d80 <_vfiprintf_r+0x21c>)
 8012c34:	f7ed fb6c 	bl	8000310 <memchr>
 8012c38:	9a04      	ldr	r2, [sp, #16]
 8012c3a:	b9d8      	cbnz	r0, 8012c74 <_vfiprintf_r+0x110>
 8012c3c:	06d1      	lsls	r1, r2, #27
 8012c3e:	bf44      	itt	mi
 8012c40:	2320      	movmi	r3, #32
 8012c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c46:	0713      	lsls	r3, r2, #28
 8012c48:	bf44      	itt	mi
 8012c4a:	232b      	movmi	r3, #43	@ 0x2b
 8012c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c50:	f89a 3000 	ldrb.w	r3, [sl]
 8012c54:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c56:	d015      	beq.n	8012c84 <_vfiprintf_r+0x120>
 8012c58:	9a07      	ldr	r2, [sp, #28]
 8012c5a:	4654      	mov	r4, sl
 8012c5c:	2000      	movs	r0, #0
 8012c5e:	f04f 0c0a 	mov.w	ip, #10
 8012c62:	4621      	mov	r1, r4
 8012c64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c68:	3b30      	subs	r3, #48	@ 0x30
 8012c6a:	2b09      	cmp	r3, #9
 8012c6c:	d94b      	bls.n	8012d06 <_vfiprintf_r+0x1a2>
 8012c6e:	b1b0      	cbz	r0, 8012c9e <_vfiprintf_r+0x13a>
 8012c70:	9207      	str	r2, [sp, #28]
 8012c72:	e014      	b.n	8012c9e <_vfiprintf_r+0x13a>
 8012c74:	eba0 0308 	sub.w	r3, r0, r8
 8012c78:	fa09 f303 	lsl.w	r3, r9, r3
 8012c7c:	4313      	orrs	r3, r2
 8012c7e:	9304      	str	r3, [sp, #16]
 8012c80:	46a2      	mov	sl, r4
 8012c82:	e7d2      	b.n	8012c2a <_vfiprintf_r+0xc6>
 8012c84:	9b03      	ldr	r3, [sp, #12]
 8012c86:	1d19      	adds	r1, r3, #4
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	9103      	str	r1, [sp, #12]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	bfbb      	ittet	lt
 8012c90:	425b      	neglt	r3, r3
 8012c92:	f042 0202 	orrlt.w	r2, r2, #2
 8012c96:	9307      	strge	r3, [sp, #28]
 8012c98:	9307      	strlt	r3, [sp, #28]
 8012c9a:	bfb8      	it	lt
 8012c9c:	9204      	strlt	r2, [sp, #16]
 8012c9e:	7823      	ldrb	r3, [r4, #0]
 8012ca0:	2b2e      	cmp	r3, #46	@ 0x2e
 8012ca2:	d10a      	bne.n	8012cba <_vfiprintf_r+0x156>
 8012ca4:	7863      	ldrb	r3, [r4, #1]
 8012ca6:	2b2a      	cmp	r3, #42	@ 0x2a
 8012ca8:	d132      	bne.n	8012d10 <_vfiprintf_r+0x1ac>
 8012caa:	9b03      	ldr	r3, [sp, #12]
 8012cac:	1d1a      	adds	r2, r3, #4
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	9203      	str	r2, [sp, #12]
 8012cb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012cb6:	3402      	adds	r4, #2
 8012cb8:	9305      	str	r3, [sp, #20]
 8012cba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012d90 <_vfiprintf_r+0x22c>
 8012cbe:	7821      	ldrb	r1, [r4, #0]
 8012cc0:	2203      	movs	r2, #3
 8012cc2:	4650      	mov	r0, sl
 8012cc4:	f7ed fb24 	bl	8000310 <memchr>
 8012cc8:	b138      	cbz	r0, 8012cda <_vfiprintf_r+0x176>
 8012cca:	9b04      	ldr	r3, [sp, #16]
 8012ccc:	eba0 000a 	sub.w	r0, r0, sl
 8012cd0:	2240      	movs	r2, #64	@ 0x40
 8012cd2:	4082      	lsls	r2, r0
 8012cd4:	4313      	orrs	r3, r2
 8012cd6:	3401      	adds	r4, #1
 8012cd8:	9304      	str	r3, [sp, #16]
 8012cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cde:	4829      	ldr	r0, [pc, #164]	@ (8012d84 <_vfiprintf_r+0x220>)
 8012ce0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012ce4:	2206      	movs	r2, #6
 8012ce6:	f7ed fb13 	bl	8000310 <memchr>
 8012cea:	2800      	cmp	r0, #0
 8012cec:	d03f      	beq.n	8012d6e <_vfiprintf_r+0x20a>
 8012cee:	4b26      	ldr	r3, [pc, #152]	@ (8012d88 <_vfiprintf_r+0x224>)
 8012cf0:	bb1b      	cbnz	r3, 8012d3a <_vfiprintf_r+0x1d6>
 8012cf2:	9b03      	ldr	r3, [sp, #12]
 8012cf4:	3307      	adds	r3, #7
 8012cf6:	f023 0307 	bic.w	r3, r3, #7
 8012cfa:	3308      	adds	r3, #8
 8012cfc:	9303      	str	r3, [sp, #12]
 8012cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d00:	443b      	add	r3, r7
 8012d02:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d04:	e76a      	b.n	8012bdc <_vfiprintf_r+0x78>
 8012d06:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d0a:	460c      	mov	r4, r1
 8012d0c:	2001      	movs	r0, #1
 8012d0e:	e7a8      	b.n	8012c62 <_vfiprintf_r+0xfe>
 8012d10:	2300      	movs	r3, #0
 8012d12:	3401      	adds	r4, #1
 8012d14:	9305      	str	r3, [sp, #20]
 8012d16:	4619      	mov	r1, r3
 8012d18:	f04f 0c0a 	mov.w	ip, #10
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d22:	3a30      	subs	r2, #48	@ 0x30
 8012d24:	2a09      	cmp	r2, #9
 8012d26:	d903      	bls.n	8012d30 <_vfiprintf_r+0x1cc>
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d0c6      	beq.n	8012cba <_vfiprintf_r+0x156>
 8012d2c:	9105      	str	r1, [sp, #20]
 8012d2e:	e7c4      	b.n	8012cba <_vfiprintf_r+0x156>
 8012d30:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d34:	4604      	mov	r4, r0
 8012d36:	2301      	movs	r3, #1
 8012d38:	e7f0      	b.n	8012d1c <_vfiprintf_r+0x1b8>
 8012d3a:	ab03      	add	r3, sp, #12
 8012d3c:	9300      	str	r3, [sp, #0]
 8012d3e:	462a      	mov	r2, r5
 8012d40:	4b12      	ldr	r3, [pc, #72]	@ (8012d8c <_vfiprintf_r+0x228>)
 8012d42:	a904      	add	r1, sp, #16
 8012d44:	4630      	mov	r0, r6
 8012d46:	f7fc f9c7 	bl	800f0d8 <_printf_float>
 8012d4a:	4607      	mov	r7, r0
 8012d4c:	1c78      	adds	r0, r7, #1
 8012d4e:	d1d6      	bne.n	8012cfe <_vfiprintf_r+0x19a>
 8012d50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d52:	07d9      	lsls	r1, r3, #31
 8012d54:	d405      	bmi.n	8012d62 <_vfiprintf_r+0x1fe>
 8012d56:	89ab      	ldrh	r3, [r5, #12]
 8012d58:	059a      	lsls	r2, r3, #22
 8012d5a:	d402      	bmi.n	8012d62 <_vfiprintf_r+0x1fe>
 8012d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d5e:	f7fd f96d 	bl	801003c <__retarget_lock_release_recursive>
 8012d62:	89ab      	ldrh	r3, [r5, #12]
 8012d64:	065b      	lsls	r3, r3, #25
 8012d66:	f53f af1f 	bmi.w	8012ba8 <_vfiprintf_r+0x44>
 8012d6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012d6c:	e71e      	b.n	8012bac <_vfiprintf_r+0x48>
 8012d6e:	ab03      	add	r3, sp, #12
 8012d70:	9300      	str	r3, [sp, #0]
 8012d72:	462a      	mov	r2, r5
 8012d74:	4b05      	ldr	r3, [pc, #20]	@ (8012d8c <_vfiprintf_r+0x228>)
 8012d76:	a904      	add	r1, sp, #16
 8012d78:	4630      	mov	r0, r6
 8012d7a:	f7fc fc35 	bl	800f5e8 <_printf_i>
 8012d7e:	e7e4      	b.n	8012d4a <_vfiprintf_r+0x1e6>
 8012d80:	08013579 	.word	0x08013579
 8012d84:	08013583 	.word	0x08013583
 8012d88:	0800f0d9 	.word	0x0800f0d9
 8012d8c:	08012b41 	.word	0x08012b41
 8012d90:	0801357f 	.word	0x0801357f

08012d94 <__swbuf_r>:
 8012d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d96:	460e      	mov	r6, r1
 8012d98:	4614      	mov	r4, r2
 8012d9a:	4605      	mov	r5, r0
 8012d9c:	b118      	cbz	r0, 8012da6 <__swbuf_r+0x12>
 8012d9e:	6a03      	ldr	r3, [r0, #32]
 8012da0:	b90b      	cbnz	r3, 8012da6 <__swbuf_r+0x12>
 8012da2:	f7fc ffd9 	bl	800fd58 <__sinit>
 8012da6:	69a3      	ldr	r3, [r4, #24]
 8012da8:	60a3      	str	r3, [r4, #8]
 8012daa:	89a3      	ldrh	r3, [r4, #12]
 8012dac:	071a      	lsls	r2, r3, #28
 8012dae:	d501      	bpl.n	8012db4 <__swbuf_r+0x20>
 8012db0:	6923      	ldr	r3, [r4, #16]
 8012db2:	b943      	cbnz	r3, 8012dc6 <__swbuf_r+0x32>
 8012db4:	4621      	mov	r1, r4
 8012db6:	4628      	mov	r0, r5
 8012db8:	f000 f82a 	bl	8012e10 <__swsetup_r>
 8012dbc:	b118      	cbz	r0, 8012dc6 <__swbuf_r+0x32>
 8012dbe:	f04f 37ff 	mov.w	r7, #4294967295
 8012dc2:	4638      	mov	r0, r7
 8012dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dc6:	6823      	ldr	r3, [r4, #0]
 8012dc8:	6922      	ldr	r2, [r4, #16]
 8012dca:	1a98      	subs	r0, r3, r2
 8012dcc:	6963      	ldr	r3, [r4, #20]
 8012dce:	b2f6      	uxtb	r6, r6
 8012dd0:	4283      	cmp	r3, r0
 8012dd2:	4637      	mov	r7, r6
 8012dd4:	dc05      	bgt.n	8012de2 <__swbuf_r+0x4e>
 8012dd6:	4621      	mov	r1, r4
 8012dd8:	4628      	mov	r0, r5
 8012dda:	f7ff fcf3 	bl	80127c4 <_fflush_r>
 8012dde:	2800      	cmp	r0, #0
 8012de0:	d1ed      	bne.n	8012dbe <__swbuf_r+0x2a>
 8012de2:	68a3      	ldr	r3, [r4, #8]
 8012de4:	3b01      	subs	r3, #1
 8012de6:	60a3      	str	r3, [r4, #8]
 8012de8:	6823      	ldr	r3, [r4, #0]
 8012dea:	1c5a      	adds	r2, r3, #1
 8012dec:	6022      	str	r2, [r4, #0]
 8012dee:	701e      	strb	r6, [r3, #0]
 8012df0:	6962      	ldr	r2, [r4, #20]
 8012df2:	1c43      	adds	r3, r0, #1
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d004      	beq.n	8012e02 <__swbuf_r+0x6e>
 8012df8:	89a3      	ldrh	r3, [r4, #12]
 8012dfa:	07db      	lsls	r3, r3, #31
 8012dfc:	d5e1      	bpl.n	8012dc2 <__swbuf_r+0x2e>
 8012dfe:	2e0a      	cmp	r6, #10
 8012e00:	d1df      	bne.n	8012dc2 <__swbuf_r+0x2e>
 8012e02:	4621      	mov	r1, r4
 8012e04:	4628      	mov	r0, r5
 8012e06:	f7ff fcdd 	bl	80127c4 <_fflush_r>
 8012e0a:	2800      	cmp	r0, #0
 8012e0c:	d0d9      	beq.n	8012dc2 <__swbuf_r+0x2e>
 8012e0e:	e7d6      	b.n	8012dbe <__swbuf_r+0x2a>

08012e10 <__swsetup_r>:
 8012e10:	b538      	push	{r3, r4, r5, lr}
 8012e12:	4b29      	ldr	r3, [pc, #164]	@ (8012eb8 <__swsetup_r+0xa8>)
 8012e14:	4605      	mov	r5, r0
 8012e16:	6818      	ldr	r0, [r3, #0]
 8012e18:	460c      	mov	r4, r1
 8012e1a:	b118      	cbz	r0, 8012e24 <__swsetup_r+0x14>
 8012e1c:	6a03      	ldr	r3, [r0, #32]
 8012e1e:	b90b      	cbnz	r3, 8012e24 <__swsetup_r+0x14>
 8012e20:	f7fc ff9a 	bl	800fd58 <__sinit>
 8012e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e28:	0719      	lsls	r1, r3, #28
 8012e2a:	d422      	bmi.n	8012e72 <__swsetup_r+0x62>
 8012e2c:	06da      	lsls	r2, r3, #27
 8012e2e:	d407      	bmi.n	8012e40 <__swsetup_r+0x30>
 8012e30:	2209      	movs	r2, #9
 8012e32:	602a      	str	r2, [r5, #0]
 8012e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e38:	81a3      	strh	r3, [r4, #12]
 8012e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8012e3e:	e033      	b.n	8012ea8 <__swsetup_r+0x98>
 8012e40:	0758      	lsls	r0, r3, #29
 8012e42:	d512      	bpl.n	8012e6a <__swsetup_r+0x5a>
 8012e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012e46:	b141      	cbz	r1, 8012e5a <__swsetup_r+0x4a>
 8012e48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e4c:	4299      	cmp	r1, r3
 8012e4e:	d002      	beq.n	8012e56 <__swsetup_r+0x46>
 8012e50:	4628      	mov	r0, r5
 8012e52:	f7fd fef3 	bl	8010c3c <_free_r>
 8012e56:	2300      	movs	r3, #0
 8012e58:	6363      	str	r3, [r4, #52]	@ 0x34
 8012e5a:	89a3      	ldrh	r3, [r4, #12]
 8012e5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012e60:	81a3      	strh	r3, [r4, #12]
 8012e62:	2300      	movs	r3, #0
 8012e64:	6063      	str	r3, [r4, #4]
 8012e66:	6923      	ldr	r3, [r4, #16]
 8012e68:	6023      	str	r3, [r4, #0]
 8012e6a:	89a3      	ldrh	r3, [r4, #12]
 8012e6c:	f043 0308 	orr.w	r3, r3, #8
 8012e70:	81a3      	strh	r3, [r4, #12]
 8012e72:	6923      	ldr	r3, [r4, #16]
 8012e74:	b94b      	cbnz	r3, 8012e8a <__swsetup_r+0x7a>
 8012e76:	89a3      	ldrh	r3, [r4, #12]
 8012e78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e80:	d003      	beq.n	8012e8a <__swsetup_r+0x7a>
 8012e82:	4621      	mov	r1, r4
 8012e84:	4628      	mov	r0, r5
 8012e86:	f000 f883 	bl	8012f90 <__smakebuf_r>
 8012e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e8e:	f013 0201 	ands.w	r2, r3, #1
 8012e92:	d00a      	beq.n	8012eaa <__swsetup_r+0x9a>
 8012e94:	2200      	movs	r2, #0
 8012e96:	60a2      	str	r2, [r4, #8]
 8012e98:	6962      	ldr	r2, [r4, #20]
 8012e9a:	4252      	negs	r2, r2
 8012e9c:	61a2      	str	r2, [r4, #24]
 8012e9e:	6922      	ldr	r2, [r4, #16]
 8012ea0:	b942      	cbnz	r2, 8012eb4 <__swsetup_r+0xa4>
 8012ea2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012ea6:	d1c5      	bne.n	8012e34 <__swsetup_r+0x24>
 8012ea8:	bd38      	pop	{r3, r4, r5, pc}
 8012eaa:	0799      	lsls	r1, r3, #30
 8012eac:	bf58      	it	pl
 8012eae:	6962      	ldrpl	r2, [r4, #20]
 8012eb0:	60a2      	str	r2, [r4, #8]
 8012eb2:	e7f4      	b.n	8012e9e <__swsetup_r+0x8e>
 8012eb4:	2000      	movs	r0, #0
 8012eb6:	e7f7      	b.n	8012ea8 <__swsetup_r+0x98>
 8012eb8:	240001c4 	.word	0x240001c4

08012ebc <_raise_r>:
 8012ebc:	291f      	cmp	r1, #31
 8012ebe:	b538      	push	{r3, r4, r5, lr}
 8012ec0:	4605      	mov	r5, r0
 8012ec2:	460c      	mov	r4, r1
 8012ec4:	d904      	bls.n	8012ed0 <_raise_r+0x14>
 8012ec6:	2316      	movs	r3, #22
 8012ec8:	6003      	str	r3, [r0, #0]
 8012eca:	f04f 30ff 	mov.w	r0, #4294967295
 8012ece:	bd38      	pop	{r3, r4, r5, pc}
 8012ed0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012ed2:	b112      	cbz	r2, 8012eda <_raise_r+0x1e>
 8012ed4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ed8:	b94b      	cbnz	r3, 8012eee <_raise_r+0x32>
 8012eda:	4628      	mov	r0, r5
 8012edc:	f000 f830 	bl	8012f40 <_getpid_r>
 8012ee0:	4622      	mov	r2, r4
 8012ee2:	4601      	mov	r1, r0
 8012ee4:	4628      	mov	r0, r5
 8012ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012eea:	f000 b817 	b.w	8012f1c <_kill_r>
 8012eee:	2b01      	cmp	r3, #1
 8012ef0:	d00a      	beq.n	8012f08 <_raise_r+0x4c>
 8012ef2:	1c59      	adds	r1, r3, #1
 8012ef4:	d103      	bne.n	8012efe <_raise_r+0x42>
 8012ef6:	2316      	movs	r3, #22
 8012ef8:	6003      	str	r3, [r0, #0]
 8012efa:	2001      	movs	r0, #1
 8012efc:	e7e7      	b.n	8012ece <_raise_r+0x12>
 8012efe:	2100      	movs	r1, #0
 8012f00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012f04:	4620      	mov	r0, r4
 8012f06:	4798      	blx	r3
 8012f08:	2000      	movs	r0, #0
 8012f0a:	e7e0      	b.n	8012ece <_raise_r+0x12>

08012f0c <raise>:
 8012f0c:	4b02      	ldr	r3, [pc, #8]	@ (8012f18 <raise+0xc>)
 8012f0e:	4601      	mov	r1, r0
 8012f10:	6818      	ldr	r0, [r3, #0]
 8012f12:	f7ff bfd3 	b.w	8012ebc <_raise_r>
 8012f16:	bf00      	nop
 8012f18:	240001c4 	.word	0x240001c4

08012f1c <_kill_r>:
 8012f1c:	b538      	push	{r3, r4, r5, lr}
 8012f1e:	4d07      	ldr	r5, [pc, #28]	@ (8012f3c <_kill_r+0x20>)
 8012f20:	2300      	movs	r3, #0
 8012f22:	4604      	mov	r4, r0
 8012f24:	4608      	mov	r0, r1
 8012f26:	4611      	mov	r1, r2
 8012f28:	602b      	str	r3, [r5, #0]
 8012f2a:	f7ee fc95 	bl	8001858 <_kill>
 8012f2e:	1c43      	adds	r3, r0, #1
 8012f30:	d102      	bne.n	8012f38 <_kill_r+0x1c>
 8012f32:	682b      	ldr	r3, [r5, #0]
 8012f34:	b103      	cbz	r3, 8012f38 <_kill_r+0x1c>
 8012f36:	6023      	str	r3, [r4, #0]
 8012f38:	bd38      	pop	{r3, r4, r5, pc}
 8012f3a:	bf00      	nop
 8012f3c:	24000e74 	.word	0x24000e74

08012f40 <_getpid_r>:
 8012f40:	f7ee bc82 	b.w	8001848 <_getpid>

08012f44 <__swhatbuf_r>:
 8012f44:	b570      	push	{r4, r5, r6, lr}
 8012f46:	460c      	mov	r4, r1
 8012f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f4c:	2900      	cmp	r1, #0
 8012f4e:	b096      	sub	sp, #88	@ 0x58
 8012f50:	4615      	mov	r5, r2
 8012f52:	461e      	mov	r6, r3
 8012f54:	da0d      	bge.n	8012f72 <__swhatbuf_r+0x2e>
 8012f56:	89a3      	ldrh	r3, [r4, #12]
 8012f58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012f5c:	f04f 0100 	mov.w	r1, #0
 8012f60:	bf14      	ite	ne
 8012f62:	2340      	movne	r3, #64	@ 0x40
 8012f64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012f68:	2000      	movs	r0, #0
 8012f6a:	6031      	str	r1, [r6, #0]
 8012f6c:	602b      	str	r3, [r5, #0]
 8012f6e:	b016      	add	sp, #88	@ 0x58
 8012f70:	bd70      	pop	{r4, r5, r6, pc}
 8012f72:	466a      	mov	r2, sp
 8012f74:	f000 f848 	bl	8013008 <_fstat_r>
 8012f78:	2800      	cmp	r0, #0
 8012f7a:	dbec      	blt.n	8012f56 <__swhatbuf_r+0x12>
 8012f7c:	9901      	ldr	r1, [sp, #4]
 8012f7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012f82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012f86:	4259      	negs	r1, r3
 8012f88:	4159      	adcs	r1, r3
 8012f8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012f8e:	e7eb      	b.n	8012f68 <__swhatbuf_r+0x24>

08012f90 <__smakebuf_r>:
 8012f90:	898b      	ldrh	r3, [r1, #12]
 8012f92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012f94:	079d      	lsls	r5, r3, #30
 8012f96:	4606      	mov	r6, r0
 8012f98:	460c      	mov	r4, r1
 8012f9a:	d507      	bpl.n	8012fac <__smakebuf_r+0x1c>
 8012f9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012fa0:	6023      	str	r3, [r4, #0]
 8012fa2:	6123      	str	r3, [r4, #16]
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	6163      	str	r3, [r4, #20]
 8012fa8:	b003      	add	sp, #12
 8012faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fac:	ab01      	add	r3, sp, #4
 8012fae:	466a      	mov	r2, sp
 8012fb0:	f7ff ffc8 	bl	8012f44 <__swhatbuf_r>
 8012fb4:	9f00      	ldr	r7, [sp, #0]
 8012fb6:	4605      	mov	r5, r0
 8012fb8:	4639      	mov	r1, r7
 8012fba:	4630      	mov	r0, r6
 8012fbc:	f7fb f9b8 	bl	800e330 <_malloc_r>
 8012fc0:	b948      	cbnz	r0, 8012fd6 <__smakebuf_r+0x46>
 8012fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fc6:	059a      	lsls	r2, r3, #22
 8012fc8:	d4ee      	bmi.n	8012fa8 <__smakebuf_r+0x18>
 8012fca:	f023 0303 	bic.w	r3, r3, #3
 8012fce:	f043 0302 	orr.w	r3, r3, #2
 8012fd2:	81a3      	strh	r3, [r4, #12]
 8012fd4:	e7e2      	b.n	8012f9c <__smakebuf_r+0xc>
 8012fd6:	89a3      	ldrh	r3, [r4, #12]
 8012fd8:	6020      	str	r0, [r4, #0]
 8012fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012fde:	81a3      	strh	r3, [r4, #12]
 8012fe0:	9b01      	ldr	r3, [sp, #4]
 8012fe2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012fe6:	b15b      	cbz	r3, 8013000 <__smakebuf_r+0x70>
 8012fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fec:	4630      	mov	r0, r6
 8012fee:	f000 f81d 	bl	801302c <_isatty_r>
 8012ff2:	b128      	cbz	r0, 8013000 <__smakebuf_r+0x70>
 8012ff4:	89a3      	ldrh	r3, [r4, #12]
 8012ff6:	f023 0303 	bic.w	r3, r3, #3
 8012ffa:	f043 0301 	orr.w	r3, r3, #1
 8012ffe:	81a3      	strh	r3, [r4, #12]
 8013000:	89a3      	ldrh	r3, [r4, #12]
 8013002:	431d      	orrs	r5, r3
 8013004:	81a5      	strh	r5, [r4, #12]
 8013006:	e7cf      	b.n	8012fa8 <__smakebuf_r+0x18>

08013008 <_fstat_r>:
 8013008:	b538      	push	{r3, r4, r5, lr}
 801300a:	4d07      	ldr	r5, [pc, #28]	@ (8013028 <_fstat_r+0x20>)
 801300c:	2300      	movs	r3, #0
 801300e:	4604      	mov	r4, r0
 8013010:	4608      	mov	r0, r1
 8013012:	4611      	mov	r1, r2
 8013014:	602b      	str	r3, [r5, #0]
 8013016:	f7ee fc7f 	bl	8001918 <_fstat>
 801301a:	1c43      	adds	r3, r0, #1
 801301c:	d102      	bne.n	8013024 <_fstat_r+0x1c>
 801301e:	682b      	ldr	r3, [r5, #0]
 8013020:	b103      	cbz	r3, 8013024 <_fstat_r+0x1c>
 8013022:	6023      	str	r3, [r4, #0]
 8013024:	bd38      	pop	{r3, r4, r5, pc}
 8013026:	bf00      	nop
 8013028:	24000e74 	.word	0x24000e74

0801302c <_isatty_r>:
 801302c:	b538      	push	{r3, r4, r5, lr}
 801302e:	4d06      	ldr	r5, [pc, #24]	@ (8013048 <_isatty_r+0x1c>)
 8013030:	2300      	movs	r3, #0
 8013032:	4604      	mov	r4, r0
 8013034:	4608      	mov	r0, r1
 8013036:	602b      	str	r3, [r5, #0]
 8013038:	f7ee fc7e 	bl	8001938 <_isatty>
 801303c:	1c43      	adds	r3, r0, #1
 801303e:	d102      	bne.n	8013046 <_isatty_r+0x1a>
 8013040:	682b      	ldr	r3, [r5, #0]
 8013042:	b103      	cbz	r3, 8013046 <_isatty_r+0x1a>
 8013044:	6023      	str	r3, [r4, #0]
 8013046:	bd38      	pop	{r3, r4, r5, pc}
 8013048:	24000e74 	.word	0x24000e74

0801304c <_init>:
 801304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801304e:	bf00      	nop
 8013050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013052:	bc08      	pop	{r3}
 8013054:	469e      	mov	lr, r3
 8013056:	4770      	bx	lr

08013058 <_fini>:
 8013058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801305a:	bf00      	nop
 801305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801305e:	bc08      	pop	{r3}
 8013060:	469e      	mov	lr, r3
 8013062:	4770      	bx	lr
