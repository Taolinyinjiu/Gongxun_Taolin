
Gongxun_Taolin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012eac  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08013180  08013180  00014180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080136fc  080136fc  000146fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013704  08013704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013708  08013708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000214  24000000  0801370c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000cb8  24000214  08013920  00015214  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000ecc  08013920  00015ecc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015214  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021969  00000000  00000000  00015242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004660  00000000  00000000  00036bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b08  00000000  00000000  0003b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014fd  00000000  00000000  0003cd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037c80  00000000  00000000  0003e215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002605f  00000000  00000000  00075e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159940  00000000  00000000  0009bef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f5834  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008628  00000000  00000000  001f5878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004f  00000000  00000000  001fdea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000214 	.word	0x24000214
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08013164 	.word	0x08013164

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000218 	.word	0x24000218
 800030c:	08013164 	.word	0x08013164

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af02      	add	r7, sp, #8
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 8000a9e:	4b43      	ldr	r3, [pc, #268]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa0:	4a43      	ldr	r2, [pc, #268]	@ (8000bb0 <MX_FDCAN1_Init+0x118>)
 8000aa2:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000aa4:	4b41      	ldr	r3, [pc, #260]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000aaa:	4b40      	ldr	r3, [pc, #256]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000abc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 10;
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000ac8:	4b38      	ldr	r3, [pc, #224]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ace:	4b37      	ldr	r3, [pc, #220]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ad4:	4b35      	ldr	r3, [pc, #212]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8000ada:	4b34      	ldr	r3, [pc, #208]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 10;
 8000ae0:	4b32      	ldr	r3, [pc, #200]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 2;
 8000ae6:	4b31      	ldr	r3, [pc, #196]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 2;
 8000aec:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 1;
 8000afe:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8000b04:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b06:	2204      	movs	r2, #4
 8000b08:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b18:	2204      	movs	r2, #4
 8000b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b22:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b46:	4819      	ldr	r0, [pc, #100]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b48:	f003 f800 	bl	8003b4c <HAL_FDCAN_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_FDCAN1_Init+0xbe>
	{
		Error_Handler();
 8000b52:	f000 fde7 	bl	8001724 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */
//配置RX滤波
	hfdcan1_RX_Filter.IdType = FDCAN_EXTENDED_ID;       //标准 IDFDCAN_STANDARD_ID
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5c:	601a      	str	r2, [r3, #0]
	hfdcan1_RX_Filter.FilterIndex = 0;                           //滤波器索�????????
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
	hfdcan1_RX_Filter.FilterType = FDCAN_FILTER_MASK;            //滤波器类�????????
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	609a      	str	r2, [r3, #8]
	hfdcan1_RX_Filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //过滤�????????0关联到FIFO0
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
	hfdcan1_RX_Filter.FilterID1 = 0x000;                               //32位ID
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
	hfdcan1_RX_Filter.FilterID2 = 0x000; //如果FDCAN配置为传统模式的话，这里�????????32位掩�????????
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan1_RX_Filter);               //滤波器初始化
 8000b7c:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b7e:	480b      	ldr	r0, [pc, #44]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b80:	f003 f9c2 	bl	8003f08 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, ENABLE,
 8000b84:	2301      	movs	r3, #1
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b90:	f003 fa30 	bl	8003ff4 <HAL_FDCAN_ConfigGlobalFilter>
			ENABLE);
	HAL_FDCAN_Start(&hfdcan1);                               //�???启FDCAN
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b96:	f003 fa5a 	bl	800404e <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ba0:	f003 fc48 	bl	8004434 <HAL_FDCAN_ActivateNotification>
	/* USER CODE END FDCAN1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	240002a0 	.word	0x240002a0
 8000bb0:	4000a000 	.word	0x4000a000
 8000bb4:	24000230 	.word	0x24000230

08000bb8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef *fdcanHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0b8      	sub	sp, #224	@ 0xe0
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 8000bc0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	22b8      	movs	r2, #184	@ 0xb8
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f00f fa0e 	bl	800fffa <memset>
	{ 0 };
	if (fdcanHandle->Instance == FDCAN1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c8c <HAL_FDCAN_MspInit+0xd4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d14c      	bne.n	8000c82 <HAL_FDCAN_MspInit+0xca>

		/* USER CODE END FDCAN1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000be8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f005 fad7 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_FDCAN_MspInit+0x54>
		{
			Error_Handler();
 8000c08:	f000 fd8c 	bl	8001724 <Error_Handler>
		}

		/* FDCAN1 clock enable */
		__HAL_RCC_FDCAN_CLK_ENABLE();
 8000c0c:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c12:	4a1f      	ldr	r2, [pc, #124]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	4a17      	ldr	r2, [pc, #92]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
		/**FDCAN1 GPIO Configuration
		 PD0     ------> FDCAN1_RX
		 PD1     ------> FDCAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c60:	2309      	movs	r3, #9
 8000c62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <HAL_FDCAN_MspInit+0xdc>)
 8000c6e:	f004 f957 	bl	8004f20 <HAL_GPIO_Init>

		/* FDCAN1 interrupt Init */
		HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 2, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2102      	movs	r1, #2
 8000c76:	2013      	movs	r0, #19
 8000c78:	f002 f957 	bl	8002f2a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c7c:	2013      	movs	r0, #19
 8000c7e:	f002 f96e 	bl	8002f5e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN FDCAN1_MspInit 1 */

		/* USER CODE END FDCAN1_MspInit 1 */
	}
}
 8000c82:	bf00      	nop
 8000c84:	37e0      	adds	r7, #224	@ 0xe0
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	4000a000 	.word	0x4000a000
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020c00 	.word	0x58020c00

08000c98 <FDCAN_Send_Msg>:
	}
}

/* USER CODE BEGIN 1 */
void FDCAN_Send_Msg(uint8_t *msg, uint32_t len)
{
 8000c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c9c:	b087      	sub	sp, #28
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
 8000ca4:	466b      	mov	r3, sp
 8000ca6:	461e      	mov	r6, r3
	uint8_t i = 0, j = 0, k = 0, l = 0, packNum = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	75fb      	strb	r3, [r7, #23]
 8000cac:	2300      	movs	r3, #0
 8000cae:	753b      	strb	r3, [r7, #20]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	74fb      	strb	r3, [r7, #19]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75bb      	strb	r3, [r7, #22]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	757b      	strb	r3, [r7, #21]
	uint8_t TxData[len];
 8000cbc:	6839      	ldr	r1, [r7, #0]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4688      	mov	r8, r1
 8000cc8:	4699      	mov	r9, r3
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cde:	2300      	movs	r3, #0
 8000ce0:	460c      	mov	r4, r1
 8000ce2:	461d      	mov	r5, r3
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	00eb      	lsls	r3, r5, #3
 8000cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cf2:	00e2      	lsls	r2, r4, #3
 8000cf4:	1dcb      	adds	r3, r1, #7
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	ebad 0d03 	sub.w	sp, sp, r3
 8000cfe:	466b      	mov	r3, sp
 8000d00:	3300      	adds	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
	j = len - 2;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	3b02      	subs	r3, #2
 8000d0a:	753b      	strb	r3, [r7, #20]
	// 除去ID地址和功能码后的数据长度
	TxData[0] = msg[1];
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	785a      	ldrb	r2, [r3, #1]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	701a      	strb	r2, [r3, #0]
	// 发�?�数�????????
	while (i < j)
 8000d14:	e062      	b.n	8000ddc <FDCAN_Send_Msg+0x144>
	{
		// 数据个数
		k = j - i;
 8000d16:	7d3a      	ldrb	r2, [r7, #20]
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	74fb      	strb	r3, [r7, #19]
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	021a      	lsls	r2, r3, #8
				| (uint32_t) packNum;  //32位ID   0x00
 8000d24:	7d7b      	ldrb	r3, [r7, #21]
 8000d26:	4313      	orrs	r3, r2
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d28:	4a31      	ldr	r2, [pc, #196]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2a:	6013      	str	r3, [r2, #0]
		fdcan_TxHeader.IdType = FDCAN_EXTENDED_ID;      //ID   FDCAN_STANDARD_ID
 8000d2c:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d32:	605a      	str	r2, [r3, #4]
		fdcan_TxHeader.TxFrameType = FDCAN_DATA_FRAME;             //数据�????????
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
		//    fdcan_TxHeader.DataLength=len;              //数据长度
		fdcan_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
		fdcan_TxHeader.BitRateSwitch = FDCAN_BRS_OFF;               //关闭速率切换
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
		fdcan_TxHeader.FDFormat = FDCAN_CLASSIC_CAN;                //传统的CAN模式
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
		fdcan_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;  //无发送事�????????
 8000d4c:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
		fdcan_TxHeader.MessageMarker = 0;
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
		//小于8字节命令
		if (k < 8)
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	2b07      	cmp	r3, #7
 8000d5c:	d81b      	bhi.n	8000d96 <FDCAN_Send_Msg+0xfe>
		{
			for (l = 0; l < k; l++, i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75bb      	strb	r3, [r7, #22]
 8000d62:	e00e      	b.n	8000d82 <FDCAN_Send_Msg+0xea>
			{
				TxData[l + 1] = msg[i + 2];
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	3302      	adds	r3, #2
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	441a      	add	r2, r3
 8000d6c:	7dbb      	ldrb	r3, [r7, #22]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	7811      	ldrb	r1, [r2, #0]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < k; l++, i++)
 8000d76:	7dbb      	ldrb	r3, [r7, #22]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	75bb      	strb	r3, [r7, #22]
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	75fb      	strb	r3, [r7, #23]
 8000d82:	7dba      	ldrb	r2, [r7, #22]
 8000d84:	7cfb      	ldrb	r3, [r7, #19]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3ec      	bcc.n	8000d64 <FDCAN_Send_Msg+0xcc>
			}
			fdcan_TxHeader.DataLength = k + 1;
 8000d8a:	7cfb      	ldrb	r3, [r7, #19]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	e017      	b.n	8000dc6 <FDCAN_Send_Msg+0x12e>
		}
		// 大于8字节命令，分包发送，每包数据�????????多发�????????8个字�????????
		else
		{
			for (l = 0; l < 7; l++, i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	75bb      	strb	r3, [r7, #22]
 8000d9a:	e00e      	b.n	8000dba <FDCAN_Send_Msg+0x122>
			{
				TxData[l + 1] = msg[i + 2];
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	3302      	adds	r3, #2
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	441a      	add	r2, r3
 8000da4:	7dbb      	ldrb	r3, [r7, #22]
 8000da6:	3301      	adds	r3, #1
 8000da8:	7811      	ldrb	r1, [r2, #0]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < 7; l++, i++)
 8000dae:	7dbb      	ldrb	r3, [r7, #22]
 8000db0:	3301      	adds	r3, #1
 8000db2:	75bb      	strb	r3, [r7, #22]
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	3301      	adds	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
 8000dba:	7dbb      	ldrb	r3, [r7, #22]
 8000dbc:	2b06      	cmp	r3, #6
 8000dbe:	d9ed      	bls.n	8000d9c <FDCAN_Send_Msg+0x104>
			}
			fdcan_TxHeader.DataLength = 8;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	60da      	str	r2, [r3, #12]
		}

		// 发�?�数�??????
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &fdcan_TxHeader, TxData);
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	4909      	ldr	r1, [pc, #36]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dca:	480a      	ldr	r0, [pc, #40]	@ (8000df4 <FDCAN_Send_Msg+0x15c>)
 8000dcc:	f003 f96a 	bl	80040a4 <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(5);  //发第二帧数据的关键，若无延时，不发第二帧数据
 8000dd0:	2005      	movs	r0, #5
 8000dd2:	f001 ffab 	bl	8002d2c <HAL_Delay>
		// 记录发�?�的第几包的数据
		++packNum;
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	757b      	strb	r3, [r7, #21]
	while (i < j)
 8000ddc:	7dfa      	ldrb	r2, [r7, #23]
 8000dde:	7d3b      	ldrb	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d398      	bcc.n	8000d16 <FDCAN_Send_Msg+0x7e>
 8000de4:	46b5      	mov	sp, r6
	}
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df0:	24000250 	.word	0x24000250
 8000df4:	240002a0 	.word	0x240002a0

08000df8 <HAL_FDCAN_RxFifo0Callback>:
bool Base_Data = false;
bool Top_Data = false;
// 允许查询状态标志位
extern bool Call_Flag;
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
//	提取FIFO中的数据,
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &fdcan_RxHeader, rxdata);
 8000e02:	4b34      	ldr	r3, [pc, #208]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e04:	4a34      	ldr	r2, [pc, #208]	@ (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000e06:	2140      	movs	r1, #64	@ 0x40
 8000e08:	4834      	ldr	r0, [pc, #208]	@ (8000edc <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000e0a:	f003 f9a7 	bl	800415c <HAL_FDCAN_GetRxMessage>
	if (Call_Flag == true)
 8000e0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d054      	beq.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
	{
//	底盘步进电机帧头
		if (fdcan_RxHeader.Identifier / 256 == 2)
 8000e16:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8000e1e:	2bff      	cmp	r3, #255	@ 0xff
 8000e20:	d824      	bhi.n	8000e6c <HAL_FDCAN_RxFifo0Callback+0x74>
		{
			if (RxState == 0)
 8000e22:	4b30      	ldr	r3, [pc, #192]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d106      	bne.n	8000e38 <HAL_FDCAN_RxFifo0Callback+0x40>
			{
				if (rxdata[0] == 0xFD)
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e30:	d102      	bne.n	8000e38 <HAL_FDCAN_RxFifo0Callback+0x40>
				{
					RxState = 1;
 8000e32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 1)
 8000e38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d106      	bne.n	8000e4e <HAL_FDCAN_RxFifo0Callback+0x56>
			{
				if (rxdata[1] == 0x9F)
 8000e40:	4b24      	ldr	r3, [pc, #144]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e42:	785b      	ldrb	r3, [r3, #1]
 8000e44:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e46:	d102      	bne.n	8000e4e <HAL_FDCAN_RxFifo0Callback+0x56>
				{
					RxState = 2;
 8000e48:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 2)
 8000e4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d134      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
			{
				if (rxdata[2] == 0x6B)
 8000e56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e58:	789b      	ldrb	r3, [r3, #2]
 8000e5a:	2b6b      	cmp	r3, #107	@ 0x6b
 8000e5c:	d130      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
				{
//				到位数据接收完毕，底盘步进确认到位
					Base_Data = true;
 8000e5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ee8 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
					RxState = 0;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	e029      	b.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
				}
			}
		}
//	升降步进电机帧头
		else if (fdcan_RxHeader.Identifier / 256 == 5)
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8000e74:	2bff      	cmp	r3, #255	@ 0xff
 8000e76:	d823      	bhi.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
		{
			if (RxState == 0)
 8000e78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d106      	bne.n	8000e8e <HAL_FDCAN_RxFifo0Callback+0x96>
			{
				if (rxdata[0] == 0xFD)
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e86:	d102      	bne.n	8000e8e <HAL_FDCAN_RxFifo0Callback+0x96>
				{
					RxState = 1;
 8000e88:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 1)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d106      	bne.n	8000ea4 <HAL_FDCAN_RxFifo0Callback+0xac>
			{
				if (rxdata[1] == 0x9F)
 8000e96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e98:	785b      	ldrb	r3, [r3, #1]
 8000e9a:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e9c:	d102      	bne.n	8000ea4 <HAL_FDCAN_RxFifo0Callback+0xac>
				{
					RxState = 2;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 2)
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d109      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
			{
				if (rxdata[2] == 0x6B)
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000eae:	789b      	ldrb	r3, [r3, #2]
 8000eb0:	2b6b      	cmp	r3, #107	@ 0x6b
 8000eb2:	d105      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
				{
//				到位数据接收完毕，底盘步进确认到位
					Top_Data = true;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
					RxState = 0;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	HAL_FDCAN_ActivateNotification(hfdcan,
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f003 fab5 	bl	8004434 <HAL_FDCAN_ActivateNotification>
	FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	24000340 	.word	0x24000340
 8000ed8:	24000274 	.word	0x24000274
 8000edc:	240002a0 	.word	0x240002a0
 8000ee0:	24000c2e 	.word	0x24000c2e
 8000ee4:	24000348 	.word	0x24000348
 8000ee8:	24000349 	.word	0x24000349
 8000eec:	2400034a 	.word	0x2400034a

08000ef0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	4b30      	ldr	r3, [pc, #192]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	4a2e      	ldr	r2, [pc, #184]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f06:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f14:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	4a27      	ldr	r2, [pc, #156]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f24:	4b24      	ldr	r3, [pc, #144]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	4a18      	ldr	r2, [pc, #96]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	4a10      	ldr	r2, [pc, #64]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

}
 8000faa:	bf00      	nop
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	58024400 	.word	0x58024400

08000fbc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000fc2:	f000 fb83 	bl	80016cc <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fc6:	f001 fe1f 	bl	8002c08 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fca:	f000 f9a7 	bl	800131c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	//  USART10 用于Action串口转发,暂时使用无线串口将数据转发到主机
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fce:	f7ff ff8f 	bl	8000ef0 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 8000fd2:	f7ff fd61 	bl	8000a98 <MX_FDCAN1_Init>
	MX_UART4_Init();
 8000fd6:	f000 ff6b 	bl	8001eb0 <MX_UART4_Init>
	MX_UART5_Init();
 8000fda:	f000 ffb5 	bl	8001f48 <MX_UART5_Init>
	MX_UART9_Init();
 8000fde:	f001 f897 	bl	8002110 <MX_UART9_Init>
	MX_USART6_UART_Init();
 8000fe2:	f001 f9b3 	bl	800234c <MX_USART6_UART_Init>
	MX_USART10_UART_Init();
 8000fe6:	f001 f9fd 	bl	80023e4 <MX_USART10_UART_Init>
	MX_TIM2_Init();
 8000fea:	f000 fda1 	bl	8001b30 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 8000fee:	f001 f961 	bl	80022b4 <MX_USART3_UART_Init>
	MX_UART7_Init();
 8000ff2:	f000 fff5 	bl	8001fe0 <MX_UART7_Init>
	MX_UART8_Init();
 8000ff6:	f001 f83f 	bl	8002078 <MX_UART8_Init>
	MX_TIM3_Init();
 8000ffa:	f000 fde7 	bl	8001bcc <MX_TIM3_Init>
	MX_TIM5_Init();
 8000ffe:	f000 fe35 	bl	8001c6c <MX_TIM5_Init>
	MX_USART2_UART_Init();
 8001002:	f001 f8d1 	bl	80021a8 <MX_USART2_UART_Init>
	MX_TIM12_Init();
 8001006:	f000 fe81 	bl	8001d0c <MX_TIM12_Init>
	/* USER CODE BEGIN 2 */

//	清除定时器初始化过程中的更新中断标志�?
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800100a:	4ba5      	ldr	r3, [pc, #660]	@ (80012a0 <main+0x2e4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f06f 0201 	mvn.w	r2, #1
 8001012:	611a      	str	r2, [r3, #16]
//	使能定时器中�?
	HAL_TIM_Base_Start_IT(&htim2);
 8001014:	48a2      	ldr	r0, [pc, #648]	@ (80012a0 <main+0x2e4>)
 8001016:	f006 fee5 	bl	8007de4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 800101a:	48a2      	ldr	r0, [pc, #648]	@ (80012a4 <main+0x2e8>)
 800101c:	f006 fee2 	bl	8007de4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001020:	48a1      	ldr	r0, [pc, #644]	@ (80012a8 <main+0x2ec>)
 8001022:	f006 fedf 	bl	8007de4 <HAL_TIM_Base_Start_IT>
//	使能串口接收中断
	HAL_UART_Receive_IT(&huart4, &Screen_data, 1);
 8001026:	2201      	movs	r2, #1
 8001028:	49a0      	ldr	r1, [pc, #640]	@ (80012ac <main+0x2f0>)
 800102a:	48a1      	ldr	r0, [pc, #644]	@ (80012b0 <main+0x2f4>)
 800102c:	f007 fd66 	bl	8008afc <HAL_UART_Receive_IT>
//	HWT101预留中断接口
	HAL_UART_Receive_IT(&huart2, &HwtData, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	49a0      	ldr	r1, [pc, #640]	@ (80012b4 <main+0x2f8>)
 8001034:	48a0      	ldr	r0, [pc, #640]	@ (80012b8 <main+0x2fc>)
 8001036:	f007 fd61 	bl	8008afc <HAL_UART_Receive_IT>
//	TX2通信接收中断
	HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 800103a:	2201      	movs	r2, #1
 800103c:	499f      	ldr	r1, [pc, #636]	@ (80012bc <main+0x300>)
 800103e:	48a0      	ldr	r0, [pc, #640]	@ (80012c0 <main+0x304>)
 8001040:	f007 fd5c 	bl	8008afc <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart9, &data, 1);
 8001044:	2201      	movs	r2, #1
 8001046:	499f      	ldr	r1, [pc, #636]	@ (80012c4 <main+0x308>)
 8001048:	489f      	ldr	r0, [pc, #636]	@ (80012c8 <main+0x30c>)
 800104a:	f007 fd57 	bl	8008afc <HAL_UART_Receive_IT>
//	HAL_UART_Receive_IT(&huart10, &Joy_data, 1);

	PID_Init();
 800104e:	f00b f881 	bl	800c154 <PID_Init>
//			if (Joy_Flag == 1) {
//				Check_Joydata();
//				HAL_Delay(100);
//			}
//		}
		if (Ready_Flag == 1)
 8001052:	4b9e      	ldr	r3, [pc, #632]	@ (80012cc <main+0x310>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d104      	bne.n	8001064 <main+0xa8>
		{
			Ready_Flag = 0;
 800105a:	4b9c      	ldr	r3, [pc, #624]	@ (80012cc <main+0x310>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
//			整定车身
			Check_Status();
 8001060:	f00d f936 	bl	800e2d0 <Check_Status>
		}
		if (System_Flag == 1)
 8001064:	4b9a      	ldr	r3, [pc, #616]	@ (80012d0 <main+0x314>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d1f2      	bne.n	8001052 <main+0x96>
		{
			System_Flag = 0;
 800106c:	4b98      	ldr	r3, [pc, #608]	@ (80012d0 <main+0x314>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
//			向TX2发�?�字符串"e1f"
			HAL_UART_Transmit(&huart10, (uint8_t*) "e1f", sizeof("elf") - 1,
 8001072:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001076:	2203      	movs	r2, #3
 8001078:	4996      	ldr	r1, [pc, #600]	@ (80012d4 <main+0x318>)
 800107a:	4891      	ldr	r0, [pc, #580]	@ (80012c0 <main+0x304>)
 800107c:	f007 fbe8 	bl	8008850 <HAL_UART_Transmit>
//			Move_Left(50,50,8000);
///////////////////////////////////////////////////////////////////////////////////////////////////////////
			/***********************运行逻辑-状�?�机*************************/
			while (1)
			{
				switch (flag)
 8001080:	4b95      	ldr	r3, [pc, #596]	@ (80012d8 <main+0x31c>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	2b0d      	cmp	r3, #13
 8001086:	f200 8107 	bhi.w	8001298 <main+0x2dc>
 800108a:	a201      	add	r2, pc, #4	@ (adr r2, 8001090 <main+0xd4>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	080010c9 	.word	0x080010c9
 8001094:	0800110f 	.word	0x0800110f
 8001098:	08001139 	.word	0x08001139
 800109c:	08001149 	.word	0x08001149
 80010a0:	0800116b 	.word	0x0800116b
 80010a4:	0800118b 	.word	0x0800118b
 80010a8:	0800119f 	.word	0x0800119f
 80010ac:	080011cb 	.word	0x080011cb
 80010b0:	080011eb 	.word	0x080011eb
 80010b4:	08001217 	.word	0x08001217
 80010b8:	08001239 	.word	0x08001239
 80010bc:	08001259 	.word	0x08001259
 80010c0:	08001269 	.word	0x08001269
 80010c4:	08001289 	.word	0x08001289
				{
				case 0:  //发车，进入扫码区
//					X轴建议移动到150左右
					// Move_TO_Saomaqu(2400, 8250);
					bool temp = Move_Left(RunSpeed, RunAcc, 2400);
 80010c8:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80010cc:	2178      	movs	r1, #120	@ 0x78
 80010ce:	2064      	movs	r0, #100	@ 0x64
 80010d0:	f00b faee 	bl	800c6b0 <Move_Left>
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
					while(temp != true)
 80010d8:	e007      	b.n	80010ea <main+0x12e>
					{
						temp = Move_Left(RunSpeed, RunAcc, 2400);
 80010da:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80010de:	2178      	movs	r1, #120	@ 0x78
 80010e0:	2064      	movs	r0, #100	@ 0x64
 80010e2:	f00b fae5 	bl	800c6b0 <Move_Left>
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
					while(temp != true)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f083 0301 	eor.w	r3, r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f1      	bne.n	80010da <main+0x11e>
					}    
					Move_Line(RunSpeed, RunAcc, 8250);
 80010f6:	f242 023a 	movw	r2, #8250	@ 0x203a
 80010fa:	2178      	movs	r1, #120	@ 0x78
 80010fc:	2064      	movs	r0, #100	@ 0x64
 80010fe:	f00b fa7d 	bl	800c5fc <Move_Line>
					Start();    //5400�?
 8001102:	f00a fb3f 	bl	800b784 <Start>
					
					flag = 1;
 8001106:	4b74      	ldr	r3, [pc, #464]	@ (80012d8 <main+0x31c>)
 8001108:	2201      	movs	r2, #1
 800110a:	801a      	strh	r2, [r3, #0]
					break;
 800110c:	e0c7      	b.n	800129e <main+0x2e2>
//					Drop_Location_jiang(200, 120, 4000);
				case 1:  //离开扫码区，进入原料�?
//					物料理想点位 375
					Move_TO_yuanliaoqu(10500);
 800110e:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 80012dc <main+0x320>
 8001112:	f00b fd75 	bl	800cc00 <Move_TO_yuanliaoqu>

//					X参�??150 Y参�??1430
					Move_Action_Nopid_Left_Ctrl(150, 1455);  //ACTION调整
 8001116:	eddf 0a72 	vldr	s1, [pc, #456]	@ 80012e0 <main+0x324>
 800111a:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 80012e4 <main+0x328>
 800111e:	f00b fe47 	bl	800cdb0 <Move_Action_Nopid_Left_Ctrl>
//					�?查TX2是否传�?�物料�??
					while (Point_Flag != 1)
 8001122:	bf00      	nop
 8001124:	4b70      	ldr	r3, [pc, #448]	@ (80012e8 <main+0x32c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d1fb      	bne.n	8001124 <main+0x168>
					{
						;  //如果Point_Flag值不�?1,则在此处等待
					}
//					TODO:应该在物料抓取函数中实现基于TX2的物料点位闭�?
					Frist_Grab_Wuliao();
 800112c:	f00a fbd8 	bl	800b8e0 <Frist_Grab_Wuliao>
					flag = 2;
 8001130:	4b69      	ldr	r3, [pc, #420]	@ (80012d8 <main+0x31c>)
 8001132:	2202      	movs	r2, #2
 8001134:	801a      	strh	r2, [r3, #0]
					break;
 8001136:	e0b2      	b.n	800129e <main+0x2e2>

				case 2:  //离开原料区，进入加工�?

					Move_TO_jianzhi1(4500, 4335);
 8001138:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 80012ec <main+0x330>
 800113c:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 80012f0 <main+0x334>
 8001140:	f00b fd74 	bl	800cc2c <Move_TO_jianzhi1>
					while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <main+0x188>
					Move_Action_Nopid_Forward_Ctrl(160, 1070);
					flag = 3;
					break;
				case 3:    //暂存�??

					Move_TO_zancunqu(22000, 4335);
 8001148:	eddf 0a68 	vldr	s1, [pc, #416]	@ 80012ec <main+0x330>
 800114c:	ed9f 0a69 	vldr	s0, [pc, #420]	@ 80012f4 <main+0x338>
 8001150:	f00b fd91 	bl	800cc76 <Move_TO_zancunqu>
					put_wuliao_to_circular_frist();
 8001154:	f00a fc46 	bl	800b9e4 <put_wuliao_to_circular_frist>
					put_wuliao_to_Car_frist();
 8001158:	f00a fcc8 	bl	800baec <put_wuliao_to_Car_frist>
					HAL_Delay(yanshi);
 800115c:	2032      	movs	r0, #50	@ 0x32
 800115e:	f001 fde5 	bl	8002d2c <HAL_Delay>
					flag = 4;
 8001162:	4b5d      	ldr	r3, [pc, #372]	@ (80012d8 <main+0x31c>)
 8001164:	2204      	movs	r2, #4
 8001166:	801a      	strh	r2, [r3, #0]
					break;
 8001168:	e099      	b.n	800129e <main+0x2e2>
				case 4:
					Move_TO_jianzhi2(9000, 4335);     //ACTION调整
 800116a:	eddf 0a60 	vldr	s1, [pc, #384]	@ 80012ec <main+0x330>
 800116e:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80012f8 <main+0x33c>
 8001172:	f00b fda5 	bl	800ccc0 <Move_TO_jianzhi2>
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 8001176:	eddf 0a61 	vldr	s1, [pc, #388]	@ 80012fc <main+0x340>
 800117a:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 8001300 <main+0x344>
 800117e:	f00b ff77 	bl	800d070 <Move_Action_Nopid_Forward_Ctrl>
					flag = 5;
 8001182:	4b55      	ldr	r3, [pc, #340]	@ (80012d8 <main+0x31c>)
 8001184:	2205      	movs	r2, #5
 8001186:	801a      	strh	r2, [r3, #0]
					break;
 8001188:	e089      	b.n	800129e <main+0x2e2>
				case 5:       //粗加工区
					Move_TO_cujiagongqu(10000);
 800118a:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8001304 <main+0x348>
 800118e:	f00b fdbc 	bl	800cd0a <Move_TO_cujiagongqu>
					put_wuliao_to_circular_second();
 8001192:	f00a fd2f 	bl	800bbf4 <put_wuliao_to_circular_second>
					flag = 6;
 8001196:	4b50      	ldr	r3, [pc, #320]	@ (80012d8 <main+0x31c>)
 8001198:	2206      	movs	r2, #6
 800119a:	801a      	strh	r2, [r3, #0]
					break;
 800119c:	e07f      	b.n	800129e <main+0x2e2>
				case 6:
					Move_TO_jianzhi3(9000, 4335);
 800119e:	eddf 0a53 	vldr	s1, [pc, #332]	@ 80012ec <main+0x330>
 80011a2:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 80012f8 <main+0x33c>
 80011a6:	f00b fdc6 	bl	800cd36 <Move_TO_jianzhi3>
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 80011aa:	eddf 0a54 	vldr	s1, [pc, #336]	@ 80012fc <main+0x340>
 80011ae:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8001308 <main+0x34c>
 80011b2:	f00b fdfd 	bl	800cdb0 <Move_Action_Nopid_Left_Ctrl>
					Drop_Location_jiang(50, 50, 11000);
 80011b6:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80011ba:	2132      	movs	r1, #50	@ 0x32
 80011bc:	2032      	movs	r0, #50	@ 0x32
 80011be:	f00b fc81 	bl	800cac4 <Drop_Location_jiang>
					flag = 7;
 80011c2:	4b45      	ldr	r3, [pc, #276]	@ (80012d8 <main+0x31c>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	801a      	strh	r2, [r3, #0]
					break;
 80011c8:	e069      	b.n	800129e <main+0x2e2>
				case 7:      //原料�??
					Move_TO_fanyuanliaoqu(4000);
 80011ca:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 800130c <main+0x350>
 80011ce:	f00b fdd7 	bl	800cd80 <Move_TO_fanyuanliaoqu>
					Move_Action_Nopid_Left_Ctrl(160, 1400);      //ACTION调整
 80011d2:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 8001310 <main+0x354>
 80011d6:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8001314 <main+0x358>
 80011da:	f00b fde9 	bl	800cdb0 <Move_Action_Nopid_Left_Ctrl>
					Second_Run_Frist_Grab_Wuliao();
 80011de:	f00a fd95 	bl	800bd0c <Second_Run_Frist_Grab_Wuliao>
					flag = 8;
 80011e2:	4b3d      	ldr	r3, [pc, #244]	@ (80012d8 <main+0x31c>)
 80011e4:	2208      	movs	r2, #8
 80011e6:	801a      	strh	r2, [r3, #0]
					break;
 80011e8:	e059      	b.n	800129e <main+0x2e2>
				case 8:
					Move_TO_jianzhi1(4500, 4335);
 80011ea:	eddf 0a40 	vldr	s1, [pc, #256]	@ 80012ec <main+0x330>
 80011ee:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 80012f0 <main+0x334>
 80011f2:	f00b fd1b 	bl	800cc2c <Move_TO_jianzhi1>
					Drop_Location_jiang(50, 50, 11000);
 80011f6:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80011fa:	2132      	movs	r1, #50	@ 0x32
 80011fc:	2032      	movs	r0, #50	@ 0x32
 80011fe:	f00b fc61 	bl	800cac4 <Drop_Location_jiang>
					Move_Action_Nopid_Forward_Ctrl(160, 1070);
 8001202:	eddf 0a45 	vldr	s1, [pc, #276]	@ 8001318 <main+0x35c>
 8001206:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8001314 <main+0x358>
 800120a:	f00b ff31 	bl	800d070 <Move_Action_Nopid_Forward_Ctrl>
					flag = 9;
 800120e:	4b32      	ldr	r3, [pc, #200]	@ (80012d8 <main+0x31c>)
 8001210:	2209      	movs	r2, #9
 8001212:	801a      	strh	r2, [r3, #0]
					break;
 8001214:	e043      	b.n	800129e <main+0x2e2>
				case 9:    //暂存�??
					Move_TO_zancunqu(22000, 4335);
 8001216:	eddf 0a35 	vldr	s1, [pc, #212]	@ 80012ec <main+0x330>
 800121a:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 80012f4 <main+0x338>
 800121e:	f00b fd2a 	bl	800cc76 <Move_TO_zancunqu>
					Second_Run_put_wuliao_to_circular_frist();
 8001222:	f00a fe57 	bl	800bed4 <Second_Run_put_wuliao_to_circular_frist>

					Second_Run_put_wuliao_to_Car_frist();
 8001226:	f00a fdd1 	bl	800bdcc <Second_Run_put_wuliao_to_Car_frist>
					HAL_Delay(yanshi);
 800122a:	2032      	movs	r0, #50	@ 0x32
 800122c:	f001 fd7e 	bl	8002d2c <HAL_Delay>
					flag = 10;
 8001230:	4b29      	ldr	r3, [pc, #164]	@ (80012d8 <main+0x31c>)
 8001232:	220a      	movs	r2, #10
 8001234:	801a      	strh	r2, [r3, #0]
					break;
 8001236:	e032      	b.n	800129e <main+0x2e2>
				case 10:
					Move_TO_jianzhi2(9000, 4335);     //ACTION调整
 8001238:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 80012ec <main+0x330>
 800123c:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 80012f8 <main+0x33c>
 8001240:	f00b fd3e 	bl	800ccc0 <Move_TO_jianzhi2>
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 8001244:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 80012fc <main+0x340>
 8001248:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8001300 <main+0x344>
 800124c:	f00b ff10 	bl	800d070 <Move_Action_Nopid_Forward_Ctrl>
					flag = 11;
 8001250:	4b21      	ldr	r3, [pc, #132]	@ (80012d8 <main+0x31c>)
 8001252:	220b      	movs	r2, #11
 8001254:	801a      	strh	r2, [r3, #0]
					break;
 8001256:	e022      	b.n	800129e <main+0x2e2>
				case 11:       //粗加工区
					Move_TO_cujiagongqu(10000);
 8001258:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001304 <main+0x348>
 800125c:	f00b fd55 	bl	800cd0a <Move_TO_cujiagongqu>

					flag = 12;
 8001260:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <main+0x31c>)
 8001262:	220c      	movs	r2, #12
 8001264:	801a      	strh	r2, [r3, #0]
					break;
 8001266:	e01a      	b.n	800129e <main+0x2e2>
				case 12:
					Move_TO_jianzhi3(9000, 4335);
 8001268:	eddf 0a20 	vldr	s1, [pc, #128]	@ 80012ec <main+0x330>
 800126c:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80012f8 <main+0x33c>
 8001270:	f00b fd61 	bl	800cd36 <Move_TO_jianzhi3>
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 8001274:	eddf 0a21 	vldr	s1, [pc, #132]	@ 80012fc <main+0x340>
 8001278:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8001308 <main+0x34c>
 800127c:	f00b fd98 	bl	800cdb0 <Move_Action_Nopid_Left_Ctrl>
					flag = 13;
 8001280:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <main+0x31c>)
 8001282:	220d      	movs	r2, #13
 8001284:	801a      	strh	r2, [r3, #0]
					break;
 8001286:	e00a      	b.n	800129e <main+0x2e2>
				case 13:      //原料�??
					Move_TO_fanyuanliaoqu(22000);
 8001288:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 80012f4 <main+0x338>
 800128c:	f00b fd78 	bl	800cd80 <Move_TO_fanyuanliaoqu>
					flag = 14;
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <main+0x31c>)
 8001292:	220e      	movs	r2, #14
 8001294:	801a      	strh	r2, [r3, #0]
					break;
 8001296:	e002      	b.n	800129e <main+0x2e2>
				default:
					Move_Stop();
 8001298:	f00b fc9c 	bl	800cbd4 <Move_Stop>
					break;
 800129c:	bf00      	nop
				switch (flag)
 800129e:	e6ef      	b.n	8001080 <main+0xc4>
 80012a0:	24000490 	.word	0x24000490
 80012a4:	24000528 	.word	0x24000528
 80012a8:	240004dc 	.word	0x240004dc
 80012ac:	2400034c 	.word	0x2400034c
 80012b0:	240005c0 	.word	0x240005c0
 80012b4:	2400034d 	.word	0x2400034d
 80012b8:	240008a4 	.word	0x240008a4
 80012bc:	2400034e 	.word	0x2400034e
 80012c0:	24000a60 	.word	0x24000a60
 80012c4:	2400034b 	.word	0x2400034b
 80012c8:	24000810 	.word	0x24000810
 80012cc:	24000d27 	.word	0x24000d27
 80012d0:	24000d26 	.word	0x24000d26
 80012d4:	08013180 	.word	0x08013180
 80012d8:	24000478 	.word	0x24000478
 80012dc:	46241000 	.word	0x46241000
 80012e0:	44b5e000 	.word	0x44b5e000
 80012e4:	43160000 	.word	0x43160000
 80012e8:	2400045c 	.word	0x2400045c
 80012ec:	45877800 	.word	0x45877800
 80012f0:	458ca000 	.word	0x458ca000
 80012f4:	46abe000 	.word	0x46abe000
 80012f8:	460ca000 	.word	0x460ca000
 80012fc:	44e88000 	.word	0x44e88000
 8001300:	44e9c000 	.word	0x44e9c000
 8001304:	461c4000 	.word	0x461c4000
 8001308:	432a0000 	.word	0x432a0000
 800130c:	457a0000 	.word	0x457a0000
 8001310:	44af0000 	.word	0x44af0000
 8001314:	43200000 	.word	0x43200000
 8001318:	4485c000 	.word	0x4485c000

0800131c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b09c      	sub	sp, #112	@ 0x70
 8001320:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001326:	224c      	movs	r2, #76	@ 0x4c
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f00e fe65 	bl	800fffa <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2220      	movs	r2, #32
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f00e fe5f 	bl	800fffa <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800133c:	2002      	movs	r0, #2
 800133e:	f003 ff97 	bl	8005270 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <SystemClock_Config+0xd8>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a2a      	ldr	r2, [pc, #168]	@ (80013f4 <SystemClock_Config+0xd8>)
 800134c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b28      	ldr	r3, [pc, #160]	@ (80013f4 <SystemClock_Config+0xd8>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800135e:	bf00      	nop
 8001360:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <SystemClock_Config+0xd8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800136c:	d1f8      	bne.n	8001360 <SystemClock_Config+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136e:	2301      	movs	r3, #1
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001378:	2302      	movs	r3, #2
 800137a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137c:	2302      	movs	r3, #2
 800137e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 8001380:	2302      	movs	r3, #2
 8001382:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 44;
 8001384:	232c      	movs	r3, #44	@ 0x2c
 8001386:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800138c:	2302      	movs	r3, #2
 800138e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001390:	2302      	movs	r3, #2
 8001392:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001394:	230c      	movs	r3, #12
 8001396:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001398:	2300      	movs	r3, #0
 800139a:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 ff9d 	bl	80052e4 <HAL_RCC_OscConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80013b0:	f000 f9b8 	bl	8001724 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013b4:	233f      	movs	r3, #63	@ 0x3f
 80013b6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b8:	2303      	movs	r3, #3
 80013ba:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013c0:	2308      	movs	r3, #8
 80013c2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013c4:	2340      	movs	r3, #64	@ 0x40
 80013c6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013c8:	2340      	movs	r3, #64	@ 0x40
 80013ca:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013d2:	2340      	movs	r3, #64	@ 0x40
 80013d4:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2103      	movs	r1, #3
 80013da:	4618      	mov	r0, r3
 80013dc:	f004 fb5c 	bl	8005a98 <HAL_RCC_ClockConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0xce>
	{
		Error_Handler();
 80013e6:	f000 f99d 	bl	8001724 <Error_Handler>
	}
}
 80013ea:	bf00      	nop
 80013ec:	3770      	adds	r7, #112	@ 0x70
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	58024800 	.word	0x58024800

080013f8 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*) &ch, 1, 0xFFFF);
 8001400:	1d39      	adds	r1, r7, #4
 8001402:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001406:	2201      	movs	r2, #1
 8001408:	4803      	ldr	r0, [pc, #12]	@ (8001418 <__io_putchar+0x20>)
 800140a:	f007 fa21 	bl	8008850 <HAL_UART_Transmit>
	return ch;
 800140e:	687b      	ldr	r3, [r7, #4]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	240005c0 	.word	0x240005c0

0800141c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af04      	add	r7, sp, #16
 8001422:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART9)                          // 判断中断�?
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a50      	ldr	r2, [pc, #320]	@ (800156c <HAL_UART_RxCpltCallback+0x150>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d10a      	bne.n	8001444 <HAL_UART_RxCpltCallback+0x28>
	{
		Data_Analyse(data);                                // 处理Action数据
 800142e:	4b50      	ldr	r3, [pc, #320]	@ (8001570 <HAL_UART_RxCpltCallback+0x154>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f009 ffb6 	bl	800b3a4 <Data_Analyse>
		HAL_UART_Receive_IT(&huart9, &data, 1);            // 继续中断回调
 8001438:	2201      	movs	r2, #1
 800143a:	494d      	ldr	r1, [pc, #308]	@ (8001570 <HAL_UART_RxCpltCallback+0x154>)
 800143c:	484d      	ldr	r0, [pc, #308]	@ (8001574 <HAL_UART_RxCpltCallback+0x158>)
 800143e:	f007 fb5d 	bl	8008afc <HAL_UART_Receive_IT>
 8001442:	e090      	b.n	8001566 <HAL_UART_RxCpltCallback+0x14a>

	}
	else if (huart->Instance == UART4)                   // 判断中断�?
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a4b      	ldr	r2, [pc, #300]	@ (8001578 <HAL_UART_RxCpltCallback+0x15c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d10a      	bne.n	8001464 <HAL_UART_RxCpltCallback+0x48>
	{
		Check_Flag(Screen_data);                       	   // 处理串口屏数�?
 800144e:	4b4b      	ldr	r3, [pc, #300]	@ (800157c <HAL_UART_RxCpltCallback+0x160>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f00c fdc6 	bl	800dfe4 <Check_Flag>
		HAL_UART_Receive_IT(&huart4, &Screen_data, 1);     // 继续中断回调
 8001458:	2201      	movs	r2, #1
 800145a:	4948      	ldr	r1, [pc, #288]	@ (800157c <HAL_UART_RxCpltCallback+0x160>)
 800145c:	4848      	ldr	r0, [pc, #288]	@ (8001580 <HAL_UART_RxCpltCallback+0x164>)
 800145e:	f007 fb4d 	bl	8008afc <HAL_UART_Receive_IT>
 8001462:	e080      	b.n	8001566 <HAL_UART_RxCpltCallback+0x14a>
	}

	else if (huart->Instance == USART10)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a46      	ldr	r2, [pc, #280]	@ (8001584 <HAL_UART_RxCpltCallback+0x168>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d17b      	bne.n	8001566 <HAL_UART_RxCpltCallback+0x14a>
	{
		//static uint8_t RxState = 0;

		RxBuffer[Uart10_Rx_Cnt++] = aRxBuffer;
 800146e:	4b46      	ldr	r3, [pc, #280]	@ (8001588 <HAL_UART_RxCpltCallback+0x16c>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	b2d1      	uxtb	r1, r2
 8001476:	4a44      	ldr	r2, [pc, #272]	@ (8001588 <HAL_UART_RxCpltCallback+0x16c>)
 8001478:	7011      	strb	r1, [r2, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	4b43      	ldr	r3, [pc, #268]	@ (800158c <HAL_UART_RxCpltCallback+0x170>)
 800147e:	7819      	ldrb	r1, [r3, #0]
 8001480:	4b43      	ldr	r3, [pc, #268]	@ (8001590 <HAL_UART_RxCpltCallback+0x174>)
 8001482:	5499      	strb	r1, [r3, r2]
			memset(RxBuffer, 0, sizeof(RxBuffer));
			Uart10_Rx_Cnt = 0;
			return;
		}

		if (aRxBuffer == 'd')
 8001484:	4b41      	ldr	r3, [pc, #260]	@ (800158c <HAL_UART_RxCpltCallback+0x170>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b64      	cmp	r3, #100	@ 0x64
 800148a:	d12e      	bne.n	80014ea <HAL_UART_RxCpltCallback+0xce>
		{ // 如果包尾�?'d'，说明是物料和圆环点位数�?
			char *start = strchr(RxBuffer, 'a');
 800148c:	2161      	movs	r1, #97	@ 0x61
 800148e:	4840      	ldr	r0, [pc, #256]	@ (8001590 <HAL_UART_RxCpltCallback+0x174>)
 8001490:	f00e fdbb 	bl	801000a <strchr>
 8001494:	6178      	str	r0, [r7, #20]
			char *end = strchr(RxBuffer, 'd');
 8001496:	2164      	movs	r1, #100	@ 0x64
 8001498:	483d      	ldr	r0, [pc, #244]	@ (8001590 <HAL_UART_RxCpltCallback+0x174>)
 800149a:	f00e fdb6 	bl	801000a <strchr>
 800149e:	6138      	str	r0, [r7, #16]

			if (start != NULL && end != NULL && end > start)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d021      	beq.n	80014ea <HAL_UART_RxCpltCallback+0xce>
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d01e      	beq.n	80014ea <HAL_UART_RxCpltCallback+0xce>
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d91a      	bls.n	80014ea <HAL_UART_RxCpltCallback+0xce>
			{
				*end = '\0';
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
				if (sscanf(start + 1, "%f,%f,%d", &x, &y, &colour) == 3)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	1c58      	adds	r0, r3, #1
 80014be:	4b35      	ldr	r3, [pc, #212]	@ (8001594 <HAL_UART_RxCpltCallback+0x178>)
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	4b35      	ldr	r3, [pc, #212]	@ (8001598 <HAL_UART_RxCpltCallback+0x17c>)
 80014c4:	4a35      	ldr	r2, [pc, #212]	@ (800159c <HAL_UART_RxCpltCallback+0x180>)
 80014c6:	4936      	ldr	r1, [pc, #216]	@ (80015a0 <HAL_UART_RxCpltCallback+0x184>)
 80014c8:	f00e fd28 	bl	800ff1c <siscanf>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d102      	bne.n	80014d8 <HAL_UART_RxCpltCallback+0xbc>
				{
					// 数据解析成功
					Point_Flag = 1;
 80014d2:	4b34      	ldr	r3, [pc, #208]	@ (80015a4 <HAL_UART_RxCpltCallback+0x188>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
				}

				// 清空缓冲�?
				memset(RxBuffer, 0, sizeof(RxBuffer));
 80014d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014dc:	2100      	movs	r1, #0
 80014de:	482c      	ldr	r0, [pc, #176]	@ (8001590 <HAL_UART_RxCpltCallback+0x174>)
 80014e0:	f00e fd8b 	bl	800fffa <memset>
				Uart10_Rx_Cnt = 0;
 80014e4:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <HAL_UART_RxCpltCallback+0x16c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
			}
		}

		if (aRxBuffer == 'b')
 80014ea:	4b28      	ldr	r3, [pc, #160]	@ (800158c <HAL_UART_RxCpltCallback+0x170>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b62      	cmp	r3, #98	@ 0x62
 80014f0:	d134      	bne.n	800155c <HAL_UART_RxCpltCallback+0x140>
		{ // 如果包尾�?'b'，说明是二维码数�?
			char *start = strchr(RxBuffer, 'c');
 80014f2:	2163      	movs	r1, #99	@ 0x63
 80014f4:	4826      	ldr	r0, [pc, #152]	@ (8001590 <HAL_UART_RxCpltCallback+0x174>)
 80014f6:	f00e fd88 	bl	801000a <strchr>
 80014fa:	60f8      	str	r0, [r7, #12]
			char *end = strchr(RxBuffer, 'b');
 80014fc:	2162      	movs	r1, #98	@ 0x62
 80014fe:	4824      	ldr	r0, [pc, #144]	@ (8001590 <HAL_UART_RxCpltCallback+0x174>)
 8001500:	f00e fd83 	bl	801000a <strchr>
 8001504:	60b8      	str	r0, [r7, #8]

			if (start != NULL && end != NULL && end > start)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d027      	beq.n	800155c <HAL_UART_RxCpltCallback+0x140>
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d024      	beq.n	800155c <HAL_UART_RxCpltCallback+0x140>
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	429a      	cmp	r2, r3
 8001518:	d920      	bls.n	800155c <HAL_UART_RxCpltCallback+0x140>
			{
				*end = '\0';
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
//				for (int i = 0; i < 6; i++) {
//					if (sscanf(start +1+ i, "%d", &QR_data[i])) {
				if (sscanf(start + 1, "%d,%d,%d,%d,%d,%d", &QR_data[0],
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1c58      	adds	r0, r3, #1
 8001524:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <HAL_UART_RxCpltCallback+0x18c>)
 8001526:	9303      	str	r3, [sp, #12]
 8001528:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <HAL_UART_RxCpltCallback+0x190>)
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <HAL_UART_RxCpltCallback+0x194>)
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <HAL_UART_RxCpltCallback+0x198>)
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <HAL_UART_RxCpltCallback+0x19c>)
 8001536:	4a21      	ldr	r2, [pc, #132]	@ (80015bc <HAL_UART_RxCpltCallback+0x1a0>)
 8001538:	4921      	ldr	r1, [pc, #132]	@ (80015c0 <HAL_UART_RxCpltCallback+0x1a4>)
 800153a:	f00e fcef 	bl	800ff1c <siscanf>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <HAL_UART_RxCpltCallback+0x12e>
						&QR_data[1], &QR_data[2], &QR_data[3], &QR_data[4],
						&QR_data[5]))
				{
					// 数据解析成功
//						if(i==5) QR_Flag =  1;
					QR_Flag = 1;
 8001544:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <HAL_UART_RxCpltCallback+0x1a8>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]
				}
//				}
				// 清空缓冲�?
				memset(RxBuffer, 0, sizeof(RxBuffer));
 800154a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800154e:	2100      	movs	r1, #0
 8001550:	480f      	ldr	r0, [pc, #60]	@ (8001590 <HAL_UART_RxCpltCallback+0x174>)
 8001552:	f00e fd52 	bl	800fffa <memset>
				Uart10_Rx_Cnt = 0;
 8001556:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <HAL_UART_RxCpltCallback+0x16c>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
			}
		}
		// 重新启动接收
		HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 800155c:	2201      	movs	r2, #1
 800155e:	490b      	ldr	r1, [pc, #44]	@ (800158c <HAL_UART_RxCpltCallback+0x170>)
 8001560:	4819      	ldr	r0, [pc, #100]	@ (80015c8 <HAL_UART_RxCpltCallback+0x1ac>)
 8001562:	f007 facb 	bl	8008afc <HAL_UART_Receive_IT>
//	else if (huart->Instance == USART10)                            // 判断中断
//	{
//		Recive_Joydata(Joy_data);                             	// 处理Joy_data数据
//		HAL_UART_Receive_IT(&huart10, &Joy_data, 1);       // 继续中断回调
//	}
}
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40011800 	.word	0x40011800
 8001570:	2400034b 	.word	0x2400034b
 8001574:	24000810 	.word	0x24000810
 8001578:	40004c00 	.word	0x40004c00
 800157c:	2400034c 	.word	0x2400034c
 8001580:	240005c0 	.word	0x240005c0
 8001584:	40011c00 	.word	0x40011c00
 8001588:	24000450 	.word	0x24000450
 800158c:	2400034e 	.word	0x2400034e
 8001590:	24000350 	.word	0x24000350
 8001594:	2400047c 	.word	0x2400047c
 8001598:	24000458 	.word	0x24000458
 800159c:	24000454 	.word	0x24000454
 80015a0:	08013184 	.word	0x08013184
 80015a4:	2400045c 	.word	0x2400045c
 80015a8:	24000474 	.word	0x24000474
 80015ac:	24000470 	.word	0x24000470
 80015b0:	2400046c 	.word	0x2400046c
 80015b4:	24000468 	.word	0x24000468
 80015b8:	24000464 	.word	0x24000464
 80015bc:	24000460 	.word	0x24000460
 80015c0:	08013190 	.word	0x08013190
 80015c4:	24000484 	.word	0x24000484
 80015c8:	24000a60 	.word	0x24000a60

080015cc <HAL_TIM_PeriodElapsedCallback>:
extern uint16_t time_tx;
extern bool Base_Data;
extern bool Apply_Chock;
extern bool Choke_Flag;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001690 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d106      	bne.n	80015ea <HAL_TIM_PeriodElapsedCallback+0x1e>
	{

//		X_out = X_Ctrl(&XPID, x_goal);
//		Y_out = Y_Ctrl(&YPID, y_goal);
//		A_out = A_Ctrl(&APID, a_goal);
		Action_Show();
 80015dc:	f00c fbba 	bl	800dd54 <Action_Show>
		QR_Show();
 80015e0:	f00c fc34 	bl	800de4c <QR_Show>
		Point_Show();
 80015e4:	f00c fc6e 	bl	800dec4 <Point_Show>
 80015e8:	e04f      	b.n	800168a <HAL_TIM_PeriodElapsedCallback+0xbe>

	}
	else if (htim == &htim3)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a29      	ldr	r2, [pc, #164]	@ (8001694 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d126      	bne.n	8001640 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		TX_X_out = Tx_X_Ctrl(&TXPID, tx_target);
 80015f2:	4b29      	ldr	r3, [pc, #164]	@ (8001698 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015f4:	edd3 7a00 	vldr	s15, [r3]
 80015f8:	eeb0 0a67 	vmov.f32	s0, s15
 80015fc:	4827      	ldr	r0, [pc, #156]	@ (800169c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015fe:	f00a fe9d 	bl	800c33c <Tx_X_Ctrl>
 8001602:	4603      	mov	r3, r0
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160c:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800160e:	edc3 7a00 	vstr	s15, [r3]
		TX_Y_out = Tx_Y_Ctrl(&TYPID, ty_target);
 8001612:	4b24      	ldr	r3, [pc, #144]	@ (80016a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	eeb0 0a67 	vmov.f32	s0, s15
 800161c:	4822      	ldr	r0, [pc, #136]	@ (80016a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800161e:	f00a ff33 	bl	800c488 <Tx_Y_Ctrl>
 8001622:	4603      	mov	r3, r0
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800162e:	edc3 7a00 	vstr	s15, [r3]
		time_tx++;
 8001632:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800163c:	801a      	strh	r2, [r3, #0]
 800163e:	e024      	b.n	800168a <HAL_TIM_PeriodElapsedCallback+0xbe>
	}
	else if (htim == &htim5)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a1c      	ldr	r2, [pc, #112]	@ (80016b4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d109      	bne.n	800165c <HAL_TIM_PeriodElapsedCallback+0x90>
	{

		if (time5_jiancha != 0)
 8001648:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d01c      	beq.n	800168a <HAL_TIM_PeriodElapsedCallback+0xbe>
			time5_jiancha--;
 8001650:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3b01      	subs	r3, #1
 8001656:	4a18      	ldr	r2, [pc, #96]	@ (80016b8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e016      	b.n	800168a <HAL_TIM_PeriodElapsedCallback+0xbe>
	}
//	步进电机阻塞操作回调
	else if (htim == &htim12)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a17      	ldr	r2, [pc, #92]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d112      	bne.n	800168a <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		if(Apply_Chock == true)
 8001664:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00e      	beq.n	800168a <HAL_TIM_PeriodElapsedCallback+0xbe>
		{
			if(Base_Data == true)
 800166c:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d009      	beq.n	8001688 <HAL_TIM_PeriodElapsedCallback+0xbc>
			{
				Choke_Flag = false;
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
				Apply_Chock = false;
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim12);
 8001680:	480e      	ldr	r0, [pc, #56]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001682:	f006 fc35 	bl	8007ef0 <HAL_TIM_Base_Stop_IT>
 8001686:	e000      	b.n	800168a <HAL_TIM_PeriodElapsedCallback+0xbe>
			}
			else
			{
				return ;
 8001688:	bf00      	nop
			}
		}
//		根据查询情况来确定是否要继续阻塞 Choke_Flag
	}
}
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	24000490 	.word	0x24000490
 8001694:	240004dc 	.word	0x240004dc
 8001698:	24000000 	.word	0x24000000
 800169c:	24000bcc 	.word	0x24000bcc
 80016a0:	24000c24 	.word	0x24000c24
 80016a4:	24000004 	.word	0x24000004
 80016a8:	24000bf8 	.word	0x24000bf8
 80016ac:	24000c28 	.word	0x24000c28
 80016b0:	24000c34 	.word	0x24000c34
 80016b4:	24000528 	.word	0x24000528
 80016b8:	24000c30 	.word	0x24000c30
 80016bc:	24000574 	.word	0x24000574
 80016c0:	24000c2d 	.word	0x24000c2d
 80016c4:	24000349 	.word	0x24000349
 80016c8:	24000c2c 	.word	0x24000c2c

080016cc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct =
 80016d2:	463b      	mov	r3, r7
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
	{ 0 };

	/* Disables the MPU */
	HAL_MPU_Disable();
 80016de:	f001 fc59 	bl	8002f94 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016e2:	2301      	movs	r3, #1
 80016e4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80016ee:	231f      	movs	r3, #31
 80016f0:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 80016f2:	2387      	movs	r3, #135	@ 0x87
 80016f4:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80016fa:	2300      	movs	r3, #0
 80016fc:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016fe:	2301      	movs	r3, #1
 8001700:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001702:	2301      	movs	r3, #1
 8001704:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800170e:	463b      	mov	r3, r7
 8001710:	4618      	mov	r0, r3
 8001712:	f001 fc77 	bl	8003004 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001716:	2004      	movs	r0, #4
 8001718:	f001 fc54 	bl	8002fc4 <HAL_MPU_Enable>

}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <Error_Handler+0x8>

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <HAL_MspInit+0x30>)
 8001738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800173c:	4a08      	ldr	r2, [pc, #32]	@ (8001760 <HAL_MspInit+0x30>)
 800173e:	f043 0302 	orr.w	r3, r3, #2
 8001742:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_MspInit+0x30>)
 8001748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	58024400 	.word	0x58024400

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <NMI_Handler+0x4>

0800176c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <MemManage_Handler+0x4>

0800177c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <BusFault_Handler+0x4>

08001784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <UsageFault_Handler+0x4>

0800178c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ba:	f001 fa97 	bl	8002cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <FDCAN1_IT0_IRQHandler+0x10>)
 80017ca:	f002 fead 	bl	8004528 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	240002a0 	.word	0x240002a0

080017d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <TIM2_IRQHandler+0x10>)
 80017de:	f006 fbb6 	bl	8007f4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	24000490 	.word	0x24000490

080017ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017f0:	4802      	ldr	r0, [pc, #8]	@ (80017fc <TIM3_IRQHandler+0x10>)
 80017f2:	f006 fbac 	bl	8007f4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	240004dc 	.word	0x240004dc

08001800 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001804:	4802      	ldr	r0, [pc, #8]	@ (8001810 <USART2_IRQHandler+0x10>)
 8001806:	f007 f9c5 	bl	8008b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	240008a4 	.word	0x240008a4

08001814 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001818:	4802      	ldr	r0, [pc, #8]	@ (8001824 <USART3_IRQHandler+0x10>)
 800181a:	f007 f9bb 	bl	8008b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	24000938 	.word	0x24000938

08001828 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800182e:	f006 fb8e 	bl	8007f4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	24000574 	.word	0x24000574

0800183c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <TIM5_IRQHandler+0x10>)
 8001842:	f006 fb84 	bl	8007f4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	24000528 	.word	0x24000528

08001850 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <UART4_IRQHandler+0x10>)
 8001856:	f007 f99d 	bl	8008b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	240005c0 	.word	0x240005c0

08001864 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <UART7_IRQHandler+0x10>)
 800186a:	f007 f993 	bl	8008b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	240006e8 	.word	0x240006e8

08001878 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <UART8_IRQHandler+0x10>)
 800187e:	f007 f989 	bl	8008b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2400077c 	.word	0x2400077c

0800188c <UART9_IRQHandler>:

/**
  * @brief This function handles UART9 global interrupt.
  */
void UART9_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART9_IRQn 0 */

  /* USER CODE END UART9_IRQn 0 */
  HAL_UART_IRQHandler(&huart9);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <UART9_IRQHandler+0x10>)
 8001892:	f007 f97f 	bl	8008b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART9_IRQn 1 */

  /* USER CODE END UART9_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	24000810 	.word	0x24000810

080018a0 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <USART10_IRQHandler+0x10>)
 80018a6:	f007 f975 	bl	8008b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	24000a60 	.word	0x24000a60

080018b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
	return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_kill>:

int _kill(int pid, int sig)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80018ce:	f00e fc15 	bl	80100fc <__errno>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2216      	movs	r2, #22
 80018d6:	601a      	str	r2, [r3, #0]
	return -1;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_exit>:

void _exit(int status)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ffe7 	bl	80018c4 <_kill>
	while (1)
 80018f6:	bf00      	nop
 80018f8:	e7fd      	b.n	80018f6 <_exit+0x12>

080018fa <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	e00a      	b.n	8001922 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800190c:	f3af 8000 	nop.w
 8001910:	4601      	mov	r1, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	60ba      	str	r2, [r7, #8]
 8001918:	b2ca      	uxtb	r2, r1
 800191a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	3301      	adds	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	dbf0      	blt.n	800190c <_read+0x12>
	}

	return len;
 800192a:	687b      	ldr	r3, [r7, #4]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e009      	b.n	800195a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	60ba      	str	r2, [r7, #8]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fd52 	bl	80013f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	429a      	cmp	r2, r3
 8001960:	dbf1      	blt.n	8001946 <_write+0x12>
	}
	return len;
 8001962:	687b      	ldr	r3, [r7, #4]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_close>:

int _close(int file)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001994:	605a      	str	r2, [r3, #4]
	return 0;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_isatty>:

int _isatty(int file)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80019ac:	2301      	movs	r3, #1
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80019dc:	4a14      	ldr	r2, [pc, #80]	@ (8001a30 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80019de:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80019e8:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80019f0:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <_sbrk+0x64>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	@ (8001a3c <_sbrk+0x68>)
 80019f4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d207      	bcs.n	8001a14 <_sbrk+0x40>
		errno = ENOMEM;
 8001a04:	f00e fb7a 	bl	80100fc <__errno>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	e009      	b.n	8001a28 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	@ (8001a38 <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a05      	ldr	r2, [pc, #20]	@ (8001a38 <_sbrk+0x64>)
 8001a24:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	24050000 	.word	0x24050000
 8001a34:	00000400 	.word	0x00000400
 8001a38:	2400048c 	.word	0x2400048c
 8001a3c:	24000ed0 	.word	0x24000ed0

08001a40 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001a44:	4b32      	ldr	r3, [pc, #200]	@ (8001b10 <SystemInit+0xd0>)
 8001a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a4a:	4a31      	ldr	r2, [pc, #196]	@ (8001b10 <SystemInit+0xd0>)
 8001a4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a54:	4b2f      	ldr	r3, [pc, #188]	@ (8001b14 <SystemInit+0xd4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	2b06      	cmp	r3, #6
 8001a5e:	d807      	bhi.n	8001a70 <SystemInit+0x30>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001a60:	4b2c      	ldr	r3, [pc, #176]	@ (8001b14 <SystemInit+0xd4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 030f 	bic.w	r3, r3, #15
 8001a68:	4a2a      	ldr	r2, [pc, #168]	@ (8001b14 <SystemInit+0xd4>)
 8001a6a:	f043 0307 	orr.w	r3, r3, #7
 8001a6e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001a70:	4b29      	ldr	r3, [pc, #164]	@ (8001b18 <SystemInit+0xd8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a28      	ldr	r2, [pc, #160]	@ (8001b18 <SystemInit+0xd8>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001a7c:	4b26      	ldr	r3, [pc, #152]	@ (8001b18 <SystemInit+0xd8>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001a82:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <SystemInit+0xd8>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4924      	ldr	r1, [pc, #144]	@ (8001b18 <SystemInit+0xd8>)
 8001a88:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <SystemInit+0xdc>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a8e:	4b21      	ldr	r3, [pc, #132]	@ (8001b14 <SystemInit+0xd4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d007      	beq.n	8001aaa <SystemInit+0x6a>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b14 <SystemInit+0xd4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 030f 	bic.w	r3, r3, #15
 8001aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b14 <SystemInit+0xd4>)
 8001aa4:	f043 0307 	orr.w	r3, r3, #7
 8001aa8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <SystemInit+0xd8>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001ab0:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <SystemInit+0xd8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001ab6:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <SystemInit+0xd8>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001abc:	4b16      	ldr	r3, [pc, #88]	@ (8001b18 <SystemInit+0xd8>)
 8001abe:	4a18      	ldr	r2, [pc, #96]	@ (8001b20 <SystemInit+0xe0>)
 8001ac0:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <SystemInit+0xd8>)
 8001ac4:	4a17      	ldr	r2, [pc, #92]	@ (8001b24 <SystemInit+0xe4>)
 8001ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <SystemInit+0xd8>)
 8001aca:	4a17      	ldr	r2, [pc, #92]	@ (8001b28 <SystemInit+0xe8>)
 8001acc:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8001ace:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <SystemInit+0xd8>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001ad4:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <SystemInit+0xd8>)
 8001ad6:	4a14      	ldr	r2, [pc, #80]	@ (8001b28 <SystemInit+0xe8>)
 8001ad8:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8001ada:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <SystemInit+0xd8>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <SystemInit+0xd8>)
 8001ae2:	4a11      	ldr	r2, [pc, #68]	@ (8001b28 <SystemInit+0xe8>)
 8001ae4:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <SystemInit+0xd8>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8001aec:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <SystemInit+0xd8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a09      	ldr	r2, [pc, #36]	@ (8001b18 <SystemInit+0xd8>)
 8001af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af6:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001af8:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <SystemInit+0xd8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	661a      	str	r2, [r3, #96]	@ 0x60
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <SystemInit+0xec>)
 8001b00:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001b04:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00
 8001b14:	52002000 	.word	0x52002000
 8001b18:	58024400 	.word	0x58024400
 8001b1c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b20:	02020200 	.word	0x02020200
 8001b24:	01ff0000 	.word	0x01ff0000
 8001b28:	01010280 	.word	0x01010280
 8001b2c:	52004000 	.word	0x52004000

08001b30 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <MX_TIM2_Init+0x98>)
 8001b50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 550-1;
 8001b56:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <MX_TIM2_Init+0x98>)
 8001b58:	f240 2225 	movw	r2, #549	@ 0x225
 8001b5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc8 <MX_TIM2_Init+0x98>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001b64:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <MX_TIM2_Init+0x98>)
 8001b66:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001b6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6c:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <MX_TIM2_Init+0x98>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <MX_TIM2_Init+0x98>)
 8001b74:	2280      	movs	r2, #128	@ 0x80
 8001b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b78:	4813      	ldr	r0, [pc, #76]	@ (8001bc8 <MX_TIM2_Init+0x98>)
 8001b7a:	f006 f8db 	bl	8007d34 <HAL_TIM_Base_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001b84:	f7ff fdce 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	4619      	mov	r1, r3
 8001b94:	480c      	ldr	r0, [pc, #48]	@ (8001bc8 <MX_TIM2_Init+0x98>)
 8001b96:	f006 fae1 	bl	800815c <HAL_TIM_ConfigClockSource>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001ba0:	f7ff fdc0 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4805      	ldr	r0, [pc, #20]	@ (8001bc8 <MX_TIM2_Init+0x98>)
 8001bb2:	f006 fd43 	bl	800863c <HAL_TIMEx_MasterConfigSynchronization>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001bbc:	f7ff fdb2 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	3720      	adds	r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	24000490 	.word	0x24000490

08001bcc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bea:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <MX_TIM3_Init+0x98>)
 8001bec:	4a1e      	ldr	r2, [pc, #120]	@ (8001c68 <MX_TIM3_Init+0x9c>)
 8001bee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 550-1;
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c64 <MX_TIM3_Init+0x98>)
 8001bf2:	f240 2225 	movw	r2, #549	@ 0x225
 8001bf6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <MX_TIM3_Init+0x98>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001bfe:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <MX_TIM3_Init+0x98>)
 8001c00:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001c04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <MX_TIM3_Init+0x98>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <MX_TIM3_Init+0x98>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c12:	4814      	ldr	r0, [pc, #80]	@ (8001c64 <MX_TIM3_Init+0x98>)
 8001c14:	f006 f88e 	bl	8007d34 <HAL_TIM_Base_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001c1e:	f7ff fd81 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480d      	ldr	r0, [pc, #52]	@ (8001c64 <MX_TIM3_Init+0x98>)
 8001c30:	f006 fa94 	bl	800815c <HAL_TIM_ConfigClockSource>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001c3a:	f7ff fd73 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4806      	ldr	r0, [pc, #24]	@ (8001c64 <MX_TIM3_Init+0x98>)
 8001c4c:	f006 fcf6 	bl	800863c <HAL_TIMEx_MasterConfigSynchronization>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001c56:	f7ff fd65 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	240004dc 	.word	0x240004dc
 8001c68:	40000400 	.word	0x40000400

08001c6c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c72:	f107 0310 	add.w	r3, r7, #16
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d04 <MX_TIM5_Init+0x98>)
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d08 <MX_TIM5_Init+0x9c>)
 8001c8e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 550-1;
 8001c90:	4b1c      	ldr	r3, [pc, #112]	@ (8001d04 <MX_TIM5_Init+0x98>)
 8001c92:	f240 2225 	movw	r2, #549	@ 0x225
 8001c96:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <MX_TIM5_Init+0x98>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8001c9e:	4b19      	ldr	r3, [pc, #100]	@ (8001d04 <MX_TIM5_Init+0x98>)
 8001ca0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ca4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	@ (8001d04 <MX_TIM5_Init+0x98>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cac:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <MX_TIM5_Init+0x98>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001cb2:	4814      	ldr	r0, [pc, #80]	@ (8001d04 <MX_TIM5_Init+0x98>)
 8001cb4:	f006 f83e 	bl	8007d34 <HAL_TIM_Base_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001cbe:	f7ff fd31 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001cc8:	f107 0310 	add.w	r3, r7, #16
 8001ccc:	4619      	mov	r1, r3
 8001cce:	480d      	ldr	r0, [pc, #52]	@ (8001d04 <MX_TIM5_Init+0x98>)
 8001cd0:	f006 fa44 	bl	800815c <HAL_TIM_ConfigClockSource>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001cda:	f7ff fd23 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4806      	ldr	r0, [pc, #24]	@ (8001d04 <MX_TIM5_Init+0x98>)
 8001cec:	f006 fca6 	bl	800863c <HAL_TIMEx_MasterConfigSynchronization>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001cf6:	f7ff fd15 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	3720      	adds	r7, #32
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	24000528 	.word	0x24000528
 8001d08:	40000c00 	.word	0x40000c00

08001d0c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <MX_TIM12_Init+0x94>)
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001da4 <MX_TIM12_Init+0x98>)
 8001d2e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 65535;
 8001d30:	4b1b      	ldr	r3, [pc, #108]	@ (8001da0 <MX_TIM12_Init+0x94>)
 8001d32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d36:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <MX_TIM12_Init+0x94>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19;
 8001d3e:	4b18      	ldr	r3, [pc, #96]	@ (8001da0 <MX_TIM12_Init+0x94>)
 8001d40:	2213      	movs	r2, #19
 8001d42:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d44:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <MX_TIM12_Init+0x94>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <MX_TIM12_Init+0x94>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001d50:	4813      	ldr	r0, [pc, #76]	@ (8001da0 <MX_TIM12_Init+0x94>)
 8001d52:	f005 ffef 	bl	8007d34 <HAL_TIM_Base_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM12_Init+0x54>
  {
    Error_Handler();
 8001d5c:	f7ff fce2 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001d66:	f107 0310 	add.w	r3, r7, #16
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	480c      	ldr	r0, [pc, #48]	@ (8001da0 <MX_TIM12_Init+0x94>)
 8001d6e:	f006 f9f5 	bl	800815c <HAL_TIM_ConfigClockSource>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM12_Init+0x70>
  {
    Error_Handler();
 8001d78:	f7ff fcd4 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	4619      	mov	r1, r3
 8001d88:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <MX_TIM12_Init+0x94>)
 8001d8a:	f006 fc57 	bl	800863c <HAL_TIMEx_MasterConfigSynchronization>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8001d94:	f7ff fcc6 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001d98:	bf00      	nop
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	24000574 	.word	0x24000574
 8001da4:	40001800 	.word	0x40001800

08001da8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001db8:	d117      	bne.n	8001dea <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dba:	4b39      	ldr	r3, [pc, #228]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8001dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dc0:	4a37      	ldr	r2, [pc, #220]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dca:	4b35      	ldr	r3, [pc, #212]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8001dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 11, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	210b      	movs	r1, #11
 8001ddc:	201c      	movs	r0, #28
 8001dde:	f001 f8a4 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001de2:	201c      	movs	r0, #28
 8001de4:	f001 f8bb 	bl	8002f5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001de8:	e055      	b.n	8001e96 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a2d      	ldr	r2, [pc, #180]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xfc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d117      	bne.n	8001e24 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001df4:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8001df6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dfa:	4a29      	ldr	r2, [pc, #164]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e04:	4b26      	ldr	r3, [pc, #152]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2102      	movs	r1, #2
 8001e16:	201d      	movs	r0, #29
 8001e18:	f001 f887 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e1c:	201d      	movs	r0, #29
 8001e1e:	f001 f89e 	bl	8002f5e <HAL_NVIC_EnableIRQ>
}
 8001e22:	e038      	b.n	8001e96 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM5)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x100>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d117      	bne.n	8001e5e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e34:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 13, 0);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	210d      	movs	r1, #13
 8001e50:	2032      	movs	r0, #50	@ 0x32
 8001e52:	f001 f86a 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e56:	2032      	movs	r0, #50	@ 0x32
 8001e58:	f001 f881 	bl	8002f5e <HAL_NVIC_EnableIRQ>
}
 8001e5c:	e01b      	b.n	8001e96 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM12)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a12      	ldr	r2, [pc, #72]	@ (8001eac <HAL_TIM_Base_MspInit+0x104>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d116      	bne.n	8001e96 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001e68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e74:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e78:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 12, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	210c      	movs	r1, #12
 8001e8a:	202b      	movs	r0, #43	@ 0x2b
 8001e8c:	f001 f84d 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001e90:	202b      	movs	r0, #43	@ 0x2b
 8001e92:	f001 f864 	bl	8002f5e <HAL_NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	58024400 	.word	0x58024400
 8001ea4:	40000400 	.word	0x40000400
 8001ea8:	40000c00 	.word	0x40000c00
 8001eac:	40001800 	.word	0x40001800

08001eb0 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
UART_HandleTypeDef huart10;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001eb4:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <MX_UART4_Init+0x90>)
 8001eb6:	4a23      	ldr	r2, [pc, #140]	@ (8001f44 <MX_UART4_Init+0x94>)
 8001eb8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001eba:	4b21      	ldr	r3, [pc, #132]	@ (8001f40 <MX_UART4_Init+0x90>)
 8001ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ec0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f40 <MX_UART4_Init+0x90>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <MX_UART4_Init+0x90>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ece:	4b1c      	ldr	r3, [pc, #112]	@ (8001f40 <MX_UART4_Init+0x90>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <MX_UART4_Init+0x90>)
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eda:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <MX_UART4_Init+0x90>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee0:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <MX_UART4_Init+0x90>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee6:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <MX_UART4_Init+0x90>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eec:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <MX_UART4_Init+0x90>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ef2:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <MX_UART4_Init+0x90>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ef8:	4811      	ldr	r0, [pc, #68]	@ (8001f40 <MX_UART4_Init+0x90>)
 8001efa:	f006 fc59 	bl	80087b0 <HAL_UART_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001f04:	f7ff fc0e 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f08:	2100      	movs	r1, #0
 8001f0a:	480d      	ldr	r0, [pc, #52]	@ (8001f40 <MX_UART4_Init+0x90>)
 8001f0c:	f009 f97f 	bl	800b20e <HAL_UARTEx_SetTxFifoThreshold>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001f16:	f7ff fc05 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4808      	ldr	r0, [pc, #32]	@ (8001f40 <MX_UART4_Init+0x90>)
 8001f1e:	f009 f9b4 	bl	800b28a <HAL_UARTEx_SetRxFifoThreshold>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001f28:	f7ff fbfc 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001f2c:	4804      	ldr	r0, [pc, #16]	@ (8001f40 <MX_UART4_Init+0x90>)
 8001f2e:	f009 f935 	bl	800b19c <HAL_UARTEx_DisableFifoMode>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001f38:	f7ff fbf4 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	240005c0 	.word	0x240005c0
 8001f44:	40004c00 	.word	0x40004c00

08001f48 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f4c:	4b22      	ldr	r3, [pc, #136]	@ (8001fd8 <MX_UART5_Init+0x90>)
 8001f4e:	4a23      	ldr	r2, [pc, #140]	@ (8001fdc <MX_UART5_Init+0x94>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001f52:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <MX_UART5_Init+0x90>)
 8001f54:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f58:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <MX_UART5_Init+0x90>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd8 <MX_UART5_Init+0x90>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <MX_UART5_Init+0x90>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd8 <MX_UART5_Init+0x90>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <MX_UART5_Init+0x90>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b17      	ldr	r3, [pc, #92]	@ (8001fd8 <MX_UART5_Init+0x90>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f7e:	4b16      	ldr	r3, [pc, #88]	@ (8001fd8 <MX_UART5_Init+0x90>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f84:	4b14      	ldr	r3, [pc, #80]	@ (8001fd8 <MX_UART5_Init+0x90>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f8a:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <MX_UART5_Init+0x90>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f90:	4811      	ldr	r0, [pc, #68]	@ (8001fd8 <MX_UART5_Init+0x90>)
 8001f92:	f006 fc0d 	bl	80087b0 <HAL_UART_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001f9c:	f7ff fbc2 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	480d      	ldr	r0, [pc, #52]	@ (8001fd8 <MX_UART5_Init+0x90>)
 8001fa4:	f009 f933 	bl	800b20e <HAL_UARTEx_SetTxFifoThreshold>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001fae:	f7ff fbb9 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4808      	ldr	r0, [pc, #32]	@ (8001fd8 <MX_UART5_Init+0x90>)
 8001fb6:	f009 f968 	bl	800b28a <HAL_UARTEx_SetRxFifoThreshold>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001fc0:	f7ff fbb0 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001fc4:	4804      	ldr	r0, [pc, #16]	@ (8001fd8 <MX_UART5_Init+0x90>)
 8001fc6:	f009 f8e9 	bl	800b19c <HAL_UARTEx_DisableFifoMode>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001fd0:	f7ff fba8 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	24000654 	.word	0x24000654
 8001fdc:	40005000 	.word	0x40005000

08001fe0 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001fe4:	4b22      	ldr	r3, [pc, #136]	@ (8002070 <MX_UART7_Init+0x90>)
 8001fe6:	4a23      	ldr	r2, [pc, #140]	@ (8002074 <MX_UART7_Init+0x94>)
 8001fe8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001fea:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <MX_UART7_Init+0x90>)
 8001fec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ff0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <MX_UART7_Init+0x90>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <MX_UART7_Init+0x90>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8002070 <MX_UART7_Init+0x90>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002004:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <MX_UART7_Init+0x90>)
 8002006:	220c      	movs	r2, #12
 8002008:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200a:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <MX_UART7_Init+0x90>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002010:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <MX_UART7_Init+0x90>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002016:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <MX_UART7_Init+0x90>)
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800201c:	4b14      	ldr	r3, [pc, #80]	@ (8002070 <MX_UART7_Init+0x90>)
 800201e:	2200      	movs	r2, #0
 8002020:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002022:	4b13      	ldr	r3, [pc, #76]	@ (8002070 <MX_UART7_Init+0x90>)
 8002024:	2200      	movs	r2, #0
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002028:	4811      	ldr	r0, [pc, #68]	@ (8002070 <MX_UART7_Init+0x90>)
 800202a:	f006 fbc1 	bl	80087b0 <HAL_UART_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8002034:	f7ff fb76 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002038:	2100      	movs	r1, #0
 800203a:	480d      	ldr	r0, [pc, #52]	@ (8002070 <MX_UART7_Init+0x90>)
 800203c:	f009 f8e7 	bl	800b20e <HAL_UARTEx_SetTxFifoThreshold>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8002046:	f7ff fb6d 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800204a:	2100      	movs	r1, #0
 800204c:	4808      	ldr	r0, [pc, #32]	@ (8002070 <MX_UART7_Init+0x90>)
 800204e:	f009 f91c 	bl	800b28a <HAL_UARTEx_SetRxFifoThreshold>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8002058:	f7ff fb64 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800205c:	4804      	ldr	r0, [pc, #16]	@ (8002070 <MX_UART7_Init+0x90>)
 800205e:	f009 f89d 	bl	800b19c <HAL_UARTEx_DisableFifoMode>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8002068:	f7ff fb5c 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	240006e8 	.word	0x240006e8
 8002074:	40007800 	.word	0x40007800

08002078 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800207c:	4b22      	ldr	r3, [pc, #136]	@ (8002108 <MX_UART8_Init+0x90>)
 800207e:	4a23      	ldr	r2, [pc, #140]	@ (800210c <MX_UART8_Init+0x94>)
 8002080:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002082:	4b21      	ldr	r3, [pc, #132]	@ (8002108 <MX_UART8_Init+0x90>)
 8002084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002088:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800208a:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <MX_UART8_Init+0x90>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002090:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <MX_UART8_Init+0x90>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002096:	4b1c      	ldr	r3, [pc, #112]	@ (8002108 <MX_UART8_Init+0x90>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800209c:	4b1a      	ldr	r3, [pc, #104]	@ (8002108 <MX_UART8_Init+0x90>)
 800209e:	220c      	movs	r2, #12
 80020a0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a2:	4b19      	ldr	r3, [pc, #100]	@ (8002108 <MX_UART8_Init+0x90>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a8:	4b17      	ldr	r3, [pc, #92]	@ (8002108 <MX_UART8_Init+0x90>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ae:	4b16      	ldr	r3, [pc, #88]	@ (8002108 <MX_UART8_Init+0x90>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020b4:	4b14      	ldr	r3, [pc, #80]	@ (8002108 <MX_UART8_Init+0x90>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ba:	4b13      	ldr	r3, [pc, #76]	@ (8002108 <MX_UART8_Init+0x90>)
 80020bc:	2200      	movs	r2, #0
 80020be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80020c0:	4811      	ldr	r0, [pc, #68]	@ (8002108 <MX_UART8_Init+0x90>)
 80020c2:	f006 fb75 	bl	80087b0 <HAL_UART_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80020cc:	f7ff fb2a 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020d0:	2100      	movs	r1, #0
 80020d2:	480d      	ldr	r0, [pc, #52]	@ (8002108 <MX_UART8_Init+0x90>)
 80020d4:	f009 f89b 	bl	800b20e <HAL_UARTEx_SetTxFifoThreshold>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80020de:	f7ff fb21 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e2:	2100      	movs	r1, #0
 80020e4:	4808      	ldr	r0, [pc, #32]	@ (8002108 <MX_UART8_Init+0x90>)
 80020e6:	f009 f8d0 	bl	800b28a <HAL_UARTEx_SetRxFifoThreshold>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80020f0:	f7ff fb18 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80020f4:	4804      	ldr	r0, [pc, #16]	@ (8002108 <MX_UART8_Init+0x90>)
 80020f6:	f009 f851 	bl	800b19c <HAL_UARTEx_DisableFifoMode>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002100:	f7ff fb10 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	2400077c 	.word	0x2400077c
 800210c:	40007c00 	.word	0x40007c00

08002110 <MX_UART9_Init>:
/* UART9 init function */
void MX_UART9_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 8002114:	4b22      	ldr	r3, [pc, #136]	@ (80021a0 <MX_UART9_Init+0x90>)
 8002116:	4a23      	ldr	r2, [pc, #140]	@ (80021a4 <MX_UART9_Init+0x94>)
 8002118:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 115200;
 800211a:	4b21      	ldr	r3, [pc, #132]	@ (80021a0 <MX_UART9_Init+0x90>)
 800211c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002120:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 8002122:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <MX_UART9_Init+0x90>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 8002128:	4b1d      	ldr	r3, [pc, #116]	@ (80021a0 <MX_UART9_Init+0x90>)
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 800212e:	4b1c      	ldr	r3, [pc, #112]	@ (80021a0 <MX_UART9_Init+0x90>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 8002134:	4b1a      	ldr	r3, [pc, #104]	@ (80021a0 <MX_UART9_Init+0x90>)
 8002136:	220c      	movs	r2, #12
 8002138:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213a:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <MX_UART9_Init+0x90>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 8002140:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <MX_UART9_Init+0x90>)
 8002142:	2200      	movs	r2, #0
 8002144:	61da      	str	r2, [r3, #28]
  huart9.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002146:	4b16      	ldr	r3, [pc, #88]	@ (80021a0 <MX_UART9_Init+0x90>)
 8002148:	2200      	movs	r2, #0
 800214a:	621a      	str	r2, [r3, #32]
  huart9.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800214c:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <MX_UART9_Init+0x90>)
 800214e:	2200      	movs	r2, #0
 8002150:	625a      	str	r2, [r3, #36]	@ 0x24
  huart9.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002152:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <MX_UART9_Init+0x90>)
 8002154:	2200      	movs	r2, #0
 8002156:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart9) != HAL_OK)
 8002158:	4811      	ldr	r0, [pc, #68]	@ (80021a0 <MX_UART9_Init+0x90>)
 800215a:	f006 fb29 	bl	80087b0 <HAL_UART_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_UART9_Init+0x58>
  {
    Error_Handler();
 8002164:	f7ff fade 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart9, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002168:	2100      	movs	r1, #0
 800216a:	480d      	ldr	r0, [pc, #52]	@ (80021a0 <MX_UART9_Init+0x90>)
 800216c:	f009 f84f 	bl	800b20e <HAL_UARTEx_SetTxFifoThreshold>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_UART9_Init+0x6a>
  {
    Error_Handler();
 8002176:	f7ff fad5 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart9, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800217a:	2100      	movs	r1, #0
 800217c:	4808      	ldr	r0, [pc, #32]	@ (80021a0 <MX_UART9_Init+0x90>)
 800217e:	f009 f884 	bl	800b28a <HAL_UARTEx_SetRxFifoThreshold>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_UART9_Init+0x7c>
  {
    Error_Handler();
 8002188:	f7ff facc 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart9) != HAL_OK)
 800218c:	4804      	ldr	r0, [pc, #16]	@ (80021a0 <MX_UART9_Init+0x90>)
 800218e:	f009 f805 	bl	800b19c <HAL_UARTEx_DisableFifoMode>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_UART9_Init+0x8c>
  {
    Error_Handler();
 8002198:	f7ff fac4 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	24000810 	.word	0x24000810
 80021a4:	40011800 	.word	0x40011800

080021a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021ac:	4b39      	ldr	r3, [pc, #228]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 80021ae:	4a3a      	ldr	r2, [pc, #232]	@ (8002298 <MX_USART2_UART_Init+0xf0>)
 80021b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021b2:	4b38      	ldr	r3, [pc, #224]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 80021b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ba:	4b36      	ldr	r3, [pc, #216]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021c0:	4b34      	ldr	r3, [pc, #208]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021c6:	4b33      	ldr	r3, [pc, #204]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021cc:	4b31      	ldr	r3, [pc, #196]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 80021ce:	220c      	movs	r2, #12
 80021d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d2:	4b30      	ldr	r3, [pc, #192]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021de:	4b2d      	ldr	r3, [pc, #180]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021f0:	4828      	ldr	r0, [pc, #160]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 80021f2:	f006 fadd 	bl	80087b0 <HAL_UART_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80021fc:	f7ff fa92 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002200:	2100      	movs	r1, #0
 8002202:	4824      	ldr	r0, [pc, #144]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 8002204:	f009 f803 	bl	800b20e <HAL_UARTEx_SetTxFifoThreshold>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800220e:	f7ff fa89 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002212:	2100      	movs	r1, #0
 8002214:	481f      	ldr	r0, [pc, #124]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 8002216:	f009 f838 	bl	800b28a <HAL_UARTEx_SetRxFifoThreshold>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002220:	f7ff fa80 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002224:	481b      	ldr	r0, [pc, #108]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 8002226:	f008 ffb9 	bl	800b19c <HAL_UARTEx_DisableFifoMode>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002230:	f7ff fa78 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  HAL_UART_Transmit(&huart2,unlock_register, sizeof(unlock_register),1000);
 8002234:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002238:	2205      	movs	r2, #5
 800223a:	4918      	ldr	r1, [pc, #96]	@ (800229c <MX_USART2_UART_Init+0xf4>)
 800223c:	4815      	ldr	r0, [pc, #84]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 800223e:	f006 fb07 	bl	8008850 <HAL_UART_Transmit>
  HAL_Delay(5);
 8002242:	2005      	movs	r0, #5
 8002244:	f000 fd72 	bl	8002d2c <HAL_Delay>
  HAL_UART_Transmit(&huart2,reset_z_axis, sizeof(reset_z_axis),1000);
 8002248:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800224c:	2205      	movs	r2, #5
 800224e:	4914      	ldr	r1, [pc, #80]	@ (80022a0 <MX_USART2_UART_Init+0xf8>)
 8002250:	4810      	ldr	r0, [pc, #64]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 8002252:	f006 fafd 	bl	8008850 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_output_200Hz, sizeof(set_output_200Hz),1000);
 8002256:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800225a:	2205      	movs	r2, #5
 800225c:	4911      	ldr	r1, [pc, #68]	@ (80022a4 <MX_USART2_UART_Init+0xfc>)
 800225e:	480d      	ldr	r0, [pc, #52]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 8002260:	f006 faf6 	bl	8008850 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_baudrate_115200, sizeof(set_baudrate_115200),1000);
 8002264:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002268:	2205      	movs	r2, #5
 800226a:	490f      	ldr	r1, [pc, #60]	@ (80022a8 <MX_USART2_UART_Init+0x100>)
 800226c:	4809      	ldr	r0, [pc, #36]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 800226e:	f006 faef 	bl	8008850 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,save_settings, sizeof(save_settings),1000);
 8002272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002276:	2205      	movs	r2, #5
 8002278:	490c      	ldr	r1, [pc, #48]	@ (80022ac <MX_USART2_UART_Init+0x104>)
 800227a:	4806      	ldr	r0, [pc, #24]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 800227c:	f006 fae8 	bl	8008850 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,restart_device, sizeof(restart_device),1000);
 8002280:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002284:	2205      	movs	r2, #5
 8002286:	490a      	ldr	r1, [pc, #40]	@ (80022b0 <MX_USART2_UART_Init+0x108>)
 8002288:	4802      	ldr	r0, [pc, #8]	@ (8002294 <MX_USART2_UART_Init+0xec>)
 800228a:	f006 fae1 	bl	8008850 <HAL_UART_Transmit>


  /* USER CODE END USART2_Init 2 */

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	240008a4 	.word	0x240008a4
 8002298:	40004400 	.word	0x40004400
 800229c:	24000010 	.word	0x24000010
 80022a0:	24000018 	.word	0x24000018
 80022a4:	24000020 	.word	0x24000020
 80022a8:	24000028 	.word	0x24000028
 80022ac:	24000030 	.word	0x24000030
 80022b0:	24000038 	.word	0x24000038

080022b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022b8:	4b22      	ldr	r3, [pc, #136]	@ (8002344 <MX_USART3_UART_Init+0x90>)
 80022ba:	4a23      	ldr	r2, [pc, #140]	@ (8002348 <MX_USART3_UART_Init+0x94>)
 80022bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022be:	4b21      	ldr	r3, [pc, #132]	@ (8002344 <MX_USART3_UART_Init+0x90>)
 80022c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002344 <MX_USART3_UART_Init+0x90>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002344 <MX_USART3_UART_Init+0x90>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002344 <MX_USART3_UART_Init+0x90>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002344 <MX_USART3_UART_Init+0x90>)
 80022da:	220c      	movs	r2, #12
 80022dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022de:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <MX_USART3_UART_Init+0x90>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e4:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <MX_USART3_UART_Init+0x90>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ea:	4b16      	ldr	r3, [pc, #88]	@ (8002344 <MX_USART3_UART_Init+0x90>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022f0:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <MX_USART3_UART_Init+0x90>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022f6:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <MX_USART3_UART_Init+0x90>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022fc:	4811      	ldr	r0, [pc, #68]	@ (8002344 <MX_USART3_UART_Init+0x90>)
 80022fe:	f006 fa57 	bl	80087b0 <HAL_UART_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002308:	f7ff fa0c 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800230c:	2100      	movs	r1, #0
 800230e:	480d      	ldr	r0, [pc, #52]	@ (8002344 <MX_USART3_UART_Init+0x90>)
 8002310:	f008 ff7d 	bl	800b20e <HAL_UARTEx_SetTxFifoThreshold>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800231a:	f7ff fa03 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800231e:	2100      	movs	r1, #0
 8002320:	4808      	ldr	r0, [pc, #32]	@ (8002344 <MX_USART3_UART_Init+0x90>)
 8002322:	f008 ffb2 	bl	800b28a <HAL_UARTEx_SetRxFifoThreshold>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800232c:	f7ff f9fa 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002330:	4804      	ldr	r0, [pc, #16]	@ (8002344 <MX_USART3_UART_Init+0x90>)
 8002332:	f008 ff33 	bl	800b19c <HAL_UARTEx_DisableFifoMode>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800233c:	f7ff f9f2 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	24000938 	.word	0x24000938
 8002348:	40004800 	.word	0x40004800

0800234c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002350:	4b22      	ldr	r3, [pc, #136]	@ (80023dc <MX_USART6_UART_Init+0x90>)
 8002352:	4a23      	ldr	r2, [pc, #140]	@ (80023e0 <MX_USART6_UART_Init+0x94>)
 8002354:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002356:	4b21      	ldr	r3, [pc, #132]	@ (80023dc <MX_USART6_UART_Init+0x90>)
 8002358:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800235c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800235e:	4b1f      	ldr	r3, [pc, #124]	@ (80023dc <MX_USART6_UART_Init+0x90>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002364:	4b1d      	ldr	r3, [pc, #116]	@ (80023dc <MX_USART6_UART_Init+0x90>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800236a:	4b1c      	ldr	r3, [pc, #112]	@ (80023dc <MX_USART6_UART_Init+0x90>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002370:	4b1a      	ldr	r3, [pc, #104]	@ (80023dc <MX_USART6_UART_Init+0x90>)
 8002372:	220c      	movs	r2, #12
 8002374:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002376:	4b19      	ldr	r3, [pc, #100]	@ (80023dc <MX_USART6_UART_Init+0x90>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800237c:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <MX_USART6_UART_Init+0x90>)
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002382:	4b16      	ldr	r3, [pc, #88]	@ (80023dc <MX_USART6_UART_Init+0x90>)
 8002384:	2200      	movs	r2, #0
 8002386:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002388:	4b14      	ldr	r3, [pc, #80]	@ (80023dc <MX_USART6_UART_Init+0x90>)
 800238a:	2200      	movs	r2, #0
 800238c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800238e:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <MX_USART6_UART_Init+0x90>)
 8002390:	2200      	movs	r2, #0
 8002392:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002394:	4811      	ldr	r0, [pc, #68]	@ (80023dc <MX_USART6_UART_Init+0x90>)
 8002396:	f006 fa0b 	bl	80087b0 <HAL_UART_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80023a0:	f7ff f9c0 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023a4:	2100      	movs	r1, #0
 80023a6:	480d      	ldr	r0, [pc, #52]	@ (80023dc <MX_USART6_UART_Init+0x90>)
 80023a8:	f008 ff31 	bl	800b20e <HAL_UARTEx_SetTxFifoThreshold>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80023b2:	f7ff f9b7 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023b6:	2100      	movs	r1, #0
 80023b8:	4808      	ldr	r0, [pc, #32]	@ (80023dc <MX_USART6_UART_Init+0x90>)
 80023ba:	f008 ff66 	bl	800b28a <HAL_UARTEx_SetRxFifoThreshold>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80023c4:	f7ff f9ae 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80023c8:	4804      	ldr	r0, [pc, #16]	@ (80023dc <MX_USART6_UART_Init+0x90>)
 80023ca:	f008 fee7 	bl	800b19c <HAL_UARTEx_DisableFifoMode>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80023d4:	f7ff f9a6 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	240009cc 	.word	0x240009cc
 80023e0:	40011400 	.word	0x40011400

080023e4 <MX_USART10_UART_Init>:
/* USART10 init function */

void MX_USART10_UART_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80023e8:	4b22      	ldr	r3, [pc, #136]	@ (8002474 <MX_USART10_UART_Init+0x90>)
 80023ea:	4a23      	ldr	r2, [pc, #140]	@ (8002478 <MX_USART10_UART_Init+0x94>)
 80023ec:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 80023ee:	4b21      	ldr	r3, [pc, #132]	@ (8002474 <MX_USART10_UART_Init+0x90>)
 80023f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023f4:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80023f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002474 <MX_USART10_UART_Init+0x90>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80023fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002474 <MX_USART10_UART_Init+0x90>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8002402:	4b1c      	ldr	r3, [pc, #112]	@ (8002474 <MX_USART10_UART_Init+0x90>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8002408:	4b1a      	ldr	r3, [pc, #104]	@ (8002474 <MX_USART10_UART_Init+0x90>)
 800240a:	220c      	movs	r2, #12
 800240c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240e:	4b19      	ldr	r3, [pc, #100]	@ (8002474 <MX_USART10_UART_Init+0x90>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8002414:	4b17      	ldr	r3, [pc, #92]	@ (8002474 <MX_USART10_UART_Init+0x90>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800241a:	4b16      	ldr	r3, [pc, #88]	@ (8002474 <MX_USART10_UART_Init+0x90>)
 800241c:	2200      	movs	r2, #0
 800241e:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002420:	4b14      	ldr	r3, [pc, #80]	@ (8002474 <MX_USART10_UART_Init+0x90>)
 8002422:	2200      	movs	r2, #0
 8002424:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002426:	4b13      	ldr	r3, [pc, #76]	@ (8002474 <MX_USART10_UART_Init+0x90>)
 8002428:	2200      	movs	r2, #0
 800242a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 800242c:	4811      	ldr	r0, [pc, #68]	@ (8002474 <MX_USART10_UART_Init+0x90>)
 800242e:	f006 f9bf 	bl	80087b0 <HAL_UART_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8002438:	f7ff f974 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800243c:	2100      	movs	r1, #0
 800243e:	480d      	ldr	r0, [pc, #52]	@ (8002474 <MX_USART10_UART_Init+0x90>)
 8002440:	f008 fee5 	bl	800b20e <HAL_UARTEx_SetTxFifoThreshold>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 800244a:	f7ff f96b 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800244e:	2100      	movs	r1, #0
 8002450:	4808      	ldr	r0, [pc, #32]	@ (8002474 <MX_USART10_UART_Init+0x90>)
 8002452:	f008 ff1a 	bl	800b28a <HAL_UARTEx_SetRxFifoThreshold>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 800245c:	f7ff f962 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8002460:	4804      	ldr	r0, [pc, #16]	@ (8002474 <MX_USART10_UART_Init+0x90>)
 8002462:	f008 fe9b 	bl	800b19c <HAL_UARTEx_DisableFifoMode>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 800246c:	f7ff f95a 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	24000a60 	.word	0x24000a60
 8002478:	40011c00 	.word	0x40011c00

0800247c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b0c8      	sub	sp, #288	@ 0x120
 8002480:	af00      	add	r7, sp, #0
 8002482:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002486:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800248a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800249c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80024a0:	22b8      	movs	r2, #184	@ 0xb8
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f00d fda8 	bl	800fffa <memset>
  if(uartHandle->Instance==UART4)
 80024aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4aaa      	ldr	r2, [pc, #680]	@ (8002760 <HAL_UART_MspInit+0x2e4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d14e      	bne.n	800255a <HAL_UART_MspInit+0xde>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80024bc:	f04f 0202 	mov.w	r2, #2
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 fe6c 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80024de:	f7ff f921 	bl	8001724 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80024e2:	4ba0      	ldr	r3, [pc, #640]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 80024e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024e8:	4a9e      	ldr	r2, [pc, #632]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 80024ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80024ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024f2:	4b9c      	ldr	r3, [pc, #624]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 80024f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002500:	4b98      	ldr	r3, [pc, #608]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002506:	4a97      	ldr	r2, [pc, #604]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002510:	4b94      	ldr	r3, [pc, #592]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 8002512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800251c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800251e:	2303      	movs	r3, #3
 8002520:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002536:	2308      	movs	r3, #8
 8002538:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002540:	4619      	mov	r1, r3
 8002542:	4889      	ldr	r0, [pc, #548]	@ (8002768 <HAL_UART_MspInit+0x2ec>)
 8002544:	f002 fcec 	bl	8004f20 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 8002548:	2200      	movs	r2, #0
 800254a:	2108      	movs	r1, #8
 800254c:	2034      	movs	r0, #52	@ 0x34
 800254e:	f000 fcec 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002552:	2034      	movs	r0, #52	@ 0x34
 8002554:	f000 fd03 	bl	8002f5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }
}
 8002558:	e320      	b.n	8002b9c <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART5)
 800255a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800255e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a81      	ldr	r2, [pc, #516]	@ (800276c <HAL_UART_MspInit+0x2f0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d147      	bne.n	80025fc <HAL_UART_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800256c:	f04f 0202 	mov.w	r2, #2
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800257e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002582:	4618      	mov	r0, r3
 8002584:	f003 fe14 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_UART_MspInit+0x116>
      Error_Handler();
 800258e:	f7ff f8c9 	bl	8001724 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002592:	4b74      	ldr	r3, [pc, #464]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 8002594:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002598:	4a72      	ldr	r2, [pc, #456]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 800259a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800259e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025a2:	4b70      	ldr	r3, [pc, #448]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 80025a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80025ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 80025b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b6:	4a6b      	ldr	r2, [pc, #428]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 80025b8:	f043 0302 	orr.w	r3, r3, #2
 80025bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025c0:	4b68      	ldr	r3, [pc, #416]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 80025c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80025cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 80025ce:	f242 0320 	movw	r3, #8224	@ 0x2020
 80025d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80025e8:	230e      	movs	r3, #14
 80025ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ee:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80025f2:	4619      	mov	r1, r3
 80025f4:	485e      	ldr	r0, [pc, #376]	@ (8002770 <HAL_UART_MspInit+0x2f4>)
 80025f6:	f002 fc93 	bl	8004f20 <HAL_GPIO_Init>
}
 80025fa:	e2cf      	b.n	8002b9c <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART7)
 80025fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002600:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a5a      	ldr	r2, [pc, #360]	@ (8002774 <HAL_UART_MspInit+0x2f8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d14f      	bne.n	80026ae <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800260e:	f04f 0202 	mov.w	r2, #2
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800261a:	2300      	movs	r3, #0
 800261c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002620:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002624:	4618      	mov	r0, r3
 8002626:	f003 fdc3 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8002630:	f7ff f878 	bl	8001724 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002634:	4b4b      	ldr	r3, [pc, #300]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 8002636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800263a:	4a4a      	ldr	r2, [pc, #296]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 800263c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002640:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002644:	4b47      	ldr	r3, [pc, #284]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 8002646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800264a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800264e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002652:	4b44      	ldr	r3, [pc, #272]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 8002654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002658:	4a42      	ldr	r2, [pc, #264]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 800265a:	f043 0310 	orr.w	r3, r3, #16
 800265e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002662:	4b40      	ldr	r3, [pc, #256]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 8002664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002670:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002674:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800268a:	2307      	movs	r3, #7
 800268c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002690:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002694:	4619      	mov	r1, r3
 8002696:	4838      	ldr	r0, [pc, #224]	@ (8002778 <HAL_UART_MspInit+0x2fc>)
 8002698:	f002 fc42 	bl	8004f20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 6, 0);
 800269c:	2200      	movs	r2, #0
 800269e:	2106      	movs	r1, #6
 80026a0:	2052      	movs	r0, #82	@ 0x52
 80026a2:	f000 fc42 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80026a6:	2052      	movs	r0, #82	@ 0x52
 80026a8:	f000 fc59 	bl	8002f5e <HAL_NVIC_EnableIRQ>
}
 80026ac:	e276      	b.n	8002b9c <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART8)
 80026ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026b2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a30      	ldr	r2, [pc, #192]	@ (800277c <HAL_UART_MspInit+0x300>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d15f      	bne.n	8002780 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80026c0:	f04f 0202 	mov.w	r2, #2
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 fd6a 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 80026e2:	f7ff f81f 	bl	8001724 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80026e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 80026e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 80026ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 80026f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002700:	637b      	str	r3, [r7, #52]	@ 0x34
 8002702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002704:	4b17      	ldr	r3, [pc, #92]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 8002706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800270a:	4a16      	ldr	r2, [pc, #88]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 800270c:	f043 0310 	orr.w	r3, r3, #16
 8002710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002714:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <HAL_UART_MspInit+0x2e8>)
 8002716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002722:	2303      	movs	r3, #3
 8002724:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800273a:	2308      	movs	r3, #8
 800273c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002740:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002744:	4619      	mov	r1, r3
 8002746:	480c      	ldr	r0, [pc, #48]	@ (8002778 <HAL_UART_MspInit+0x2fc>)
 8002748:	f002 fbea 	bl	8004f20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 15, 0);
 800274c:	2200      	movs	r2, #0
 800274e:	210f      	movs	r1, #15
 8002750:	2053      	movs	r0, #83	@ 0x53
 8002752:	f000 fbea 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002756:	2053      	movs	r0, #83	@ 0x53
 8002758:	f000 fc01 	bl	8002f5e <HAL_NVIC_EnableIRQ>
}
 800275c:	e21e      	b.n	8002b9c <HAL_UART_MspInit+0x720>
 800275e:	bf00      	nop
 8002760:	40004c00 	.word	0x40004c00
 8002764:	58024400 	.word	0x58024400
 8002768:	58020000 	.word	0x58020000
 800276c:	40005000 	.word	0x40005000
 8002770:	58020400 	.word	0x58020400
 8002774:	40007800 	.word	0x40007800
 8002778:	58021000 	.word	0x58021000
 800277c:	40007c00 	.word	0x40007c00
  else if(uartHandle->Instance==UART9)
 8002780:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002784:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4abd      	ldr	r2, [pc, #756]	@ (8002a84 <HAL_UART_MspInit+0x608>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d14f      	bne.n	8002832 <HAL_UART_MspInit+0x3b6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART9;
 8002792:	f04f 0201 	mov.w	r2, #1
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80027a8:	4618      	mov	r0, r3
 80027aa:	f003 fd01 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 80027b4:	f7fe ffb6 	bl	8001724 <Error_Handler>
    __HAL_RCC_UART9_CLK_ENABLE();
 80027b8:	4bb3      	ldr	r3, [pc, #716]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 80027ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027be:	4ab2      	ldr	r2, [pc, #712]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 80027c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027c8:	4baf      	ldr	r3, [pc, #700]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 80027ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d6:	4bac      	ldr	r3, [pc, #688]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 80027d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027dc:	4aaa      	ldr	r2, [pc, #680]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 80027de:	f043 0308 	orr.w	r3, r3, #8
 80027e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027e6:	4ba8      	ldr	r3, [pc, #672]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 80027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80027f4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80027f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 800280e:	230b      	movs	r3, #11
 8002810:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002814:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002818:	4619      	mov	r1, r3
 800281a:	489c      	ldr	r0, [pc, #624]	@ (8002a8c <HAL_UART_MspInit+0x610>)
 800281c:	f002 fb80 	bl	8004f20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART9_IRQn, 5, 0);
 8002820:	2200      	movs	r2, #0
 8002822:	2105      	movs	r1, #5
 8002824:	209b      	movs	r0, #155	@ 0x9b
 8002826:	f000 fb80 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART9_IRQn);
 800282a:	209b      	movs	r0, #155	@ 0x9b
 800282c:	f000 fb97 	bl	8002f5e <HAL_NVIC_EnableIRQ>
}
 8002830:	e1b4      	b.n	8002b9c <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART2)
 8002832:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002836:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a94      	ldr	r2, [pc, #592]	@ (8002a90 <HAL_UART_MspInit+0x614>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d156      	bne.n	80028f2 <HAL_UART_MspInit+0x476>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002844:	f04f 0202 	mov.w	r2, #2
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002856:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800285a:	4618      	mov	r0, r3
 800285c:	f003 fca8 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_UART_MspInit+0x3ee>
      Error_Handler();
 8002866:	f7fe ff5d 	bl	8001724 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800286a:	4b87      	ldr	r3, [pc, #540]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 800286c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002870:	4a85      	ldr	r2, [pc, #532]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 8002872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002876:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800287a:	4b83      	ldr	r3, [pc, #524]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 800287c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002888:	4b7f      	ldr	r3, [pc, #508]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 800288a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800288e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002898:	4b7b      	ldr	r3, [pc, #492]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 800289a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800289e:	f003 0201 	and.w	r2, r3, #1
 80028a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028a6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028b4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028b6:	230c      	movs	r3, #12
 80028b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028ce:	2307      	movs	r3, #7
 80028d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80028d8:	4619      	mov	r1, r3
 80028da:	486e      	ldr	r0, [pc, #440]	@ (8002a94 <HAL_UART_MspInit+0x618>)
 80028dc:	f002 fb20 	bl	8004f20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80028e0:	2200      	movs	r2, #0
 80028e2:	210f      	movs	r1, #15
 80028e4:	2026      	movs	r0, #38	@ 0x26
 80028e6:	f000 fb20 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028ea:	2026      	movs	r0, #38	@ 0x26
 80028ec:	f000 fb37 	bl	8002f5e <HAL_NVIC_EnableIRQ>
}
 80028f0:	e154      	b.n	8002b9c <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART3)
 80028f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a66      	ldr	r2, [pc, #408]	@ (8002a98 <HAL_UART_MspInit+0x61c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d15f      	bne.n	80029c4 <HAL_UART_MspInit+0x548>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002904:	f04f 0202 	mov.w	r2, #2
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002910:	2300      	movs	r3, #0
 8002912:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002916:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800291a:	4618      	mov	r0, r3
 800291c:	f003 fc48 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_UART_MspInit+0x4ae>
      Error_Handler();
 8002926:	f7fe fefd 	bl	8001724 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800292a:	4b57      	ldr	r3, [pc, #348]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 800292c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002930:	4a55      	ldr	r2, [pc, #340]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 8002932:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002936:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800293a:	4b53      	ldr	r3, [pc, #332]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 800293c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002940:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002944:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002952:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002956:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002958:	4b4b      	ldr	r3, [pc, #300]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 800295a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800295e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 8002960:	f043 0308 	orr.w	r3, r3, #8
 8002964:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002968:	4b47      	ldr	r3, [pc, #284]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 800296a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296e:	f003 0208 	and.w	r2, r3, #8
 8002972:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002984:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002986:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800298a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	2302      	movs	r3, #2
 8002990:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029a0:	2307      	movs	r3, #7
 80029a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029a6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80029aa:	4619      	mov	r1, r3
 80029ac:	4837      	ldr	r0, [pc, #220]	@ (8002a8c <HAL_UART_MspInit+0x610>)
 80029ae:	f002 fab7 	bl	8004f20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	210e      	movs	r1, #14
 80029b6:	2027      	movs	r0, #39	@ 0x27
 80029b8:	f000 fab7 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029bc:	2027      	movs	r0, #39	@ 0x27
 80029be:	f000 face 	bl	8002f5e <HAL_NVIC_EnableIRQ>
}
 80029c2:	e0eb      	b.n	8002b9c <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART6)
 80029c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029c8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a32      	ldr	r2, [pc, #200]	@ (8002a9c <HAL_UART_MspInit+0x620>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d166      	bne.n	8002aa4 <HAL_UART_MspInit+0x628>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80029d6:	f04f 0201 	mov.w	r2, #1
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029e8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 fbdf 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_UART_MspInit+0x580>
      Error_Handler();
 80029f8:	f7fe fe94 	bl	8001724 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80029fc:	4b22      	ldr	r3, [pc, #136]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 80029fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a02:	4a21      	ldr	r2, [pc, #132]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 8002a04:	f043 0320 	orr.w	r3, r3, #32
 8002a08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 8002a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a12:	f003 0220 	and.w	r2, r3, #32
 8002a16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a28:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2a:	4b17      	ldr	r3, [pc, #92]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 8002a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a30:	4a15      	ldr	r2, [pc, #84]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 8002a32:	f043 0304 	orr.w	r3, r3, #4
 8002a36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a3a:	4b13      	ldr	r3, [pc, #76]	@ (8002a88 <HAL_UART_MspInit+0x60c>)
 8002a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a40:	f003 0204 	and.w	r2, r3, #4
 8002a44:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a48:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a52:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a56:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a58:	23c0      	movs	r3, #192	@ 0xc0
 8002a5a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002a70:	2307      	movs	r3, #7
 8002a72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a76:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4808      	ldr	r0, [pc, #32]	@ (8002aa0 <HAL_UART_MspInit+0x624>)
 8002a7e:	f002 fa4f 	bl	8004f20 <HAL_GPIO_Init>
}
 8002a82:	e08b      	b.n	8002b9c <HAL_UART_MspInit+0x720>
 8002a84:	40011800 	.word	0x40011800
 8002a88:	58024400 	.word	0x58024400
 8002a8c:	58020c00 	.word	0x58020c00
 8002a90:	40004400 	.word	0x40004400
 8002a94:	58020000 	.word	0x58020000
 8002a98:	40004800 	.word	0x40004800
 8002a9c:	40011400 	.word	0x40011400
 8002aa0:	58020800 	.word	0x58020800
  else if(uartHandle->Instance==USART10)
 8002aa4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002aa8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a3d      	ldr	r2, [pc, #244]	@ (8002ba8 <HAL_UART_MspInit+0x72c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d172      	bne.n	8002b9c <HAL_UART_MspInit+0x720>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8002ab6:	f04f 0201 	mov.w	r2, #1
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ac8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002acc:	4618      	mov	r0, r3
 8002ace:	f003 fb6f 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_UART_MspInit+0x660>
      Error_Handler();
 8002ad8:	f7fe fe24 	bl	8001724 <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8002adc:	4b33      	ldr	r3, [pc, #204]	@ (8002bac <HAL_UART_MspInit+0x730>)
 8002ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ae2:	4a32      	ldr	r2, [pc, #200]	@ (8002bac <HAL_UART_MspInit+0x730>)
 8002ae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ae8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002aec:	4b2f      	ldr	r3, [pc, #188]	@ (8002bac <HAL_UART_MspInit+0x730>)
 8002aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002af2:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002af6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002afa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b04:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b08:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b0a:	4b28      	ldr	r3, [pc, #160]	@ (8002bac <HAL_UART_MspInit+0x730>)
 8002b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b10:	4a26      	ldr	r2, [pc, #152]	@ (8002bac <HAL_UART_MspInit+0x730>)
 8002b12:	f043 0310 	orr.w	r3, r3, #16
 8002b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b1a:	4b24      	ldr	r3, [pc, #144]	@ (8002bac <HAL_UART_MspInit+0x730>)
 8002b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b20:	f003 0210 	and.w	r2, r3, #16
 8002b24:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b28:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b32:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002b36:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b38:	2304      	movs	r3, #4
 8002b3a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8002b50:	2304      	movs	r3, #4
 8002b52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b56:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4814      	ldr	r0, [pc, #80]	@ (8002bb0 <HAL_UART_MspInit+0x734>)
 8002b5e:	f002 f9df 	bl	8004f20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b62:	2308      	movs	r3, #8
 8002b64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8002b7a:	230b      	movs	r3, #11
 8002b7c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b80:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b84:	4619      	mov	r1, r3
 8002b86:	480a      	ldr	r0, [pc, #40]	@ (8002bb0 <HAL_UART_MspInit+0x734>)
 8002b88:	f002 f9ca 	bl	8004f20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART10_IRQn, 1, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2101      	movs	r1, #1
 8002b90:	209c      	movs	r0, #156	@ 0x9c
 8002b92:	f000 f9ca 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8002b96:	209c      	movs	r0, #156	@ 0x9c
 8002b98:	f000 f9e1 	bl	8002f5e <HAL_NVIC_EnableIRQ>
}
 8002b9c:	bf00      	nop
 8002b9e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40011c00 	.word	0x40011c00
 8002bac:	58024400 	.word	0x58024400
 8002bb0:	58021000 	.word	0x58021000

08002bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
     ldr   sp, =_estack      /* set stack pointer */
 8002bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002bb8:	f7fe ff42 	bl	8001a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bbc:	480c      	ldr	r0, [pc, #48]	@ (8002bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bbe:	490d      	ldr	r1, [pc, #52]	@ (8002bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc4:	e002      	b.n	8002bcc <LoopCopyDataInit>

08002bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bca:	3304      	adds	r3, #4

08002bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd0:	d3f9      	bcc.n	8002bc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8002c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd8:	e001      	b.n	8002bde <LoopFillZerobss>

08002bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bdc:	3204      	adds	r2, #4

08002bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be0:	d3fb      	bcc.n	8002bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002be2:	f00d fa91 	bl	8010108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002be6:	f7fe f9e9 	bl	8000fbc <main>
  bx  lr
 8002bea:	4770      	bx	lr
     ldr   sp, =_estack      /* set stack pointer */
 8002bec:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002bf0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002bf4:	24000214 	.word	0x24000214
  ldr r2, =_sidata
 8002bf8:	0801370c 	.word	0x0801370c
  ldr r2, =_sbss
 8002bfc:	24000214 	.word	0x24000214
  ldr r4, =_ebss
 8002c00:	24000ecc 	.word	0x24000ecc

08002c04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c04:	e7fe      	b.n	8002c04 <ADC3_IRQHandler>
	...

08002c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c0e:	2003      	movs	r0, #3
 8002c10:	f000 f980 	bl	8002f14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c14:	f003 f8f6 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <HAL_Init+0x68>)
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	4913      	ldr	r1, [pc, #76]	@ (8002c74 <HAL_Init+0x6c>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c32:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <HAL_Init+0x68>)
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c74 <HAL_Init+0x6c>)
 8002c3c:	5cd3      	ldrb	r3, [r2, r3]
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
 8002c48:	4a0b      	ldr	r2, [pc, #44]	@ (8002c78 <HAL_Init+0x70>)
 8002c4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c7c <HAL_Init+0x74>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c52:	200f      	movs	r0, #15
 8002c54:	f000 f814 	bl	8002c80 <HAL_InitTick>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e002      	b.n	8002c68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c62:	f7fe fd65 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	58024400 	.word	0x58024400
 8002c74:	08013268 	.word	0x08013268
 8002c78:	2400000c 	.word	0x2400000c
 8002c7c:	24000008 	.word	0x24000008

08002c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c88:	4b15      	ldr	r3, [pc, #84]	@ (8002ce0 <HAL_InitTick+0x60>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e021      	b.n	8002cd8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c94:	4b13      	ldr	r3, [pc, #76]	@ (8002ce4 <HAL_InitTick+0x64>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <HAL_InitTick+0x60>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f965 	bl	8002f7a <HAL_SYSTICK_Config>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e00e      	b.n	8002cd8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b0f      	cmp	r3, #15
 8002cbe:	d80a      	bhi.n	8002cd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc8:	f000 f92f 	bl	8002f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ccc:	4a06      	ldr	r2, [pc, #24]	@ (8002ce8 <HAL_InitTick+0x68>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e000      	b.n	8002cd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	24000044 	.word	0x24000044
 8002ce4:	24000008 	.word	0x24000008
 8002ce8:	24000040 	.word	0x24000040

08002cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cf0:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <HAL_IncTick+0x20>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <HAL_IncTick+0x24>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	4a04      	ldr	r2, [pc, #16]	@ (8002d10 <HAL_IncTick+0x24>)
 8002cfe:	6013      	str	r3, [r2, #0]
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	24000044 	.word	0x24000044
 8002d10:	24000af4 	.word	0x24000af4

08002d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return uwTick;
 8002d18:	4b03      	ldr	r3, [pc, #12]	@ (8002d28 <HAL_GetTick+0x14>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	24000af4 	.word	0x24000af4

08002d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d34:	f7ff ffee 	bl	8002d14 <HAL_GetTick>
 8002d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d005      	beq.n	8002d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d46:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <HAL_Delay+0x44>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d52:	bf00      	nop
 8002d54:	f7ff ffde 	bl	8002d14 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d8f7      	bhi.n	8002d54 <HAL_Delay+0x28>
  {
  }
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	24000044 	.word	0x24000044

08002d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <__NVIC_SetPriorityGrouping+0x40>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d90:	4013      	ands	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d9c:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002da2:	4a04      	ldr	r2, [pc, #16]	@ (8002db4 <__NVIC_SetPriorityGrouping+0x40>)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	60d3      	str	r3, [r2, #12]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000ed00 	.word	0xe000ed00
 8002db8:	05fa0000 	.word	0x05fa0000

08002dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc0:	4b04      	ldr	r3, [pc, #16]	@ (8002dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	f003 0307 	and.w	r3, r3, #7
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	db0b      	blt.n	8002e02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	f003 021f 	and.w	r2, r3, #31
 8002df0:	4907      	ldr	r1, [pc, #28]	@ (8002e10 <__NVIC_EnableIRQ+0x38>)
 8002df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2001      	movs	r0, #1
 8002dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000e100 	.word	0xe000e100

08002e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	db0a      	blt.n	8002e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	490c      	ldr	r1, [pc, #48]	@ (8002e60 <__NVIC_SetPriority+0x4c>)
 8002e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	440b      	add	r3, r1
 8002e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e3c:	e00a      	b.n	8002e54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	4908      	ldr	r1, [pc, #32]	@ (8002e64 <__NVIC_SetPriority+0x50>)
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	3b04      	subs	r3, #4
 8002e4c:	0112      	lsls	r2, r2, #4
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	440b      	add	r3, r1
 8002e52:	761a      	strb	r2, [r3, #24]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000e100 	.word	0xe000e100
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	@ 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f1c3 0307 	rsb	r3, r3, #7
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	bf28      	it	cs
 8002e86:	2304      	movcs	r3, #4
 8002e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d902      	bls.n	8002e98 <NVIC_EncodePriority+0x30>
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3b03      	subs	r3, #3
 8002e96:	e000      	b.n	8002e9a <NVIC_EncodePriority+0x32>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	401a      	ands	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	43d9      	mvns	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	4313      	orrs	r3, r2
         );
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3724      	adds	r7, #36	@ 0x24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ee0:	d301      	bcc.n	8002ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00f      	b.n	8002f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f10 <SysTick_Config+0x40>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eee:	210f      	movs	r1, #15
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef4:	f7ff ff8e 	bl	8002e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <SysTick_Config+0x40>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002efe:	4b04      	ldr	r3, [pc, #16]	@ (8002f10 <SysTick_Config+0x40>)
 8002f00:	2207      	movs	r2, #7
 8002f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	e000e010 	.word	0xe000e010

08002f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff ff29 	bl	8002d74 <__NVIC_SetPriorityGrouping>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	4603      	mov	r3, r0
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f38:	f7ff ff40 	bl	8002dbc <__NVIC_GetPriorityGrouping>
 8002f3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	6978      	ldr	r0, [r7, #20]
 8002f44:	f7ff ff90 	bl	8002e68 <NVIC_EncodePriority>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff ff5f 	bl	8002e14 <__NVIC_SetPriority>
}
 8002f56:	bf00      	nop
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4603      	mov	r3, r0
 8002f66:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff33 	bl	8002dd8 <__NVIC_EnableIRQ>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff ffa4 	bl	8002ed0 <SysTick_Config>
 8002f88:	4603      	mov	r3, r0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002f98:	f3bf 8f5f 	dmb	sy
}
 8002f9c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002f9e:	4b07      	ldr	r3, [pc, #28]	@ (8002fbc <HAL_MPU_Disable+0x28>)
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	4a06      	ldr	r2, [pc, #24]	@ (8002fbc <HAL_MPU_Disable+0x28>)
 8002fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002faa:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <HAL_MPU_Disable+0x2c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	605a      	str	r2, [r3, #4]
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e000ed00 	.word	0xe000ed00
 8002fc0:	e000ed90 	.word	0xe000ed90

08002fc4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8002ffc <HAL_MPU_Enable+0x38>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003000 <HAL_MPU_Enable+0x3c>)
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	4a09      	ldr	r2, [pc, #36]	@ (8003000 <HAL_MPU_Enable+0x3c>)
 8002fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002fe2:	f3bf 8f4f 	dsb	sy
}
 8002fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002fe8:	f3bf 8f6f 	isb	sy
}
 8002fec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000ed90 	.word	0xe000ed90
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	785a      	ldrb	r2, [r3, #1]
 8003010:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <HAL_MPU_ConfigRegion+0x7c>)
 8003012:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003014:	4b1a      	ldr	r3, [pc, #104]	@ (8003080 <HAL_MPU_ConfigRegion+0x7c>)
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	4a19      	ldr	r2, [pc, #100]	@ (8003080 <HAL_MPU_ConfigRegion+0x7c>)
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003020:	4a17      	ldr	r2, [pc, #92]	@ (8003080 <HAL_MPU_ConfigRegion+0x7c>)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	7b1b      	ldrb	r3, [r3, #12]
 800302c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7adb      	ldrb	r3, [r3, #11]
 8003032:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003034:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7a9b      	ldrb	r3, [r3, #10]
 800303a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800303c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	7b5b      	ldrb	r3, [r3, #13]
 8003042:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003044:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	7b9b      	ldrb	r3, [r3, #14]
 800304a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800304c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7bdb      	ldrb	r3, [r3, #15]
 8003052:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003054:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	7a5b      	ldrb	r3, [r3, #9]
 800305a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800305c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7a1b      	ldrb	r3, [r3, #8]
 8003062:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003064:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	7812      	ldrb	r2, [r2, #0]
 800306a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800306c:	4a04      	ldr	r2, [pc, #16]	@ (8003080 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800306e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003070:	6113      	str	r3, [r2, #16]
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000ed90 	.word	0xe000ed90

08003084 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800308c:	f7ff fe42 	bl	8002d14 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e2dc      	b.n	8003656 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d008      	beq.n	80030ba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2280      	movs	r2, #128	@ 0x80
 80030ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e2cd      	b.n	8003656 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a76      	ldr	r2, [pc, #472]	@ (8003298 <HAL_DMA_Abort+0x214>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d04a      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a74      	ldr	r2, [pc, #464]	@ (800329c <HAL_DMA_Abort+0x218>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d045      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a73      	ldr	r2, [pc, #460]	@ (80032a0 <HAL_DMA_Abort+0x21c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d040      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a71      	ldr	r2, [pc, #452]	@ (80032a4 <HAL_DMA_Abort+0x220>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d03b      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a70      	ldr	r2, [pc, #448]	@ (80032a8 <HAL_DMA_Abort+0x224>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d036      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a6e      	ldr	r2, [pc, #440]	@ (80032ac <HAL_DMA_Abort+0x228>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d031      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a6d      	ldr	r2, [pc, #436]	@ (80032b0 <HAL_DMA_Abort+0x22c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d02c      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a6b      	ldr	r2, [pc, #428]	@ (80032b4 <HAL_DMA_Abort+0x230>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d027      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6a      	ldr	r2, [pc, #424]	@ (80032b8 <HAL_DMA_Abort+0x234>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d022      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a68      	ldr	r2, [pc, #416]	@ (80032bc <HAL_DMA_Abort+0x238>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01d      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a67      	ldr	r2, [pc, #412]	@ (80032c0 <HAL_DMA_Abort+0x23c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d018      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a65      	ldr	r2, [pc, #404]	@ (80032c4 <HAL_DMA_Abort+0x240>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a64      	ldr	r2, [pc, #400]	@ (80032c8 <HAL_DMA_Abort+0x244>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00e      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a62      	ldr	r2, [pc, #392]	@ (80032cc <HAL_DMA_Abort+0x248>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d009      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a61      	ldr	r2, [pc, #388]	@ (80032d0 <HAL_DMA_Abort+0x24c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d004      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a5f      	ldr	r2, [pc, #380]	@ (80032d4 <HAL_DMA_Abort+0x250>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_DMA_Abort+0xda>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_DMA_Abort+0xdc>
 800315e:	2300      	movs	r3, #0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 021e 	bic.w	r2, r2, #30
 8003172:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003182:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e00a      	b.n	80031a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 020e 	bic.w	r2, r2, #14
 800319a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a3c      	ldr	r2, [pc, #240]	@ (8003298 <HAL_DMA_Abort+0x214>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d072      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a3a      	ldr	r2, [pc, #232]	@ (800329c <HAL_DMA_Abort+0x218>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d06d      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a39      	ldr	r2, [pc, #228]	@ (80032a0 <HAL_DMA_Abort+0x21c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d068      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a37      	ldr	r2, [pc, #220]	@ (80032a4 <HAL_DMA_Abort+0x220>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d063      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a36      	ldr	r2, [pc, #216]	@ (80032a8 <HAL_DMA_Abort+0x224>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d05e      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a34      	ldr	r2, [pc, #208]	@ (80032ac <HAL_DMA_Abort+0x228>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d059      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a33      	ldr	r2, [pc, #204]	@ (80032b0 <HAL_DMA_Abort+0x22c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d054      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a31      	ldr	r2, [pc, #196]	@ (80032b4 <HAL_DMA_Abort+0x230>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d04f      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a30      	ldr	r2, [pc, #192]	@ (80032b8 <HAL_DMA_Abort+0x234>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d04a      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a2e      	ldr	r2, [pc, #184]	@ (80032bc <HAL_DMA_Abort+0x238>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d045      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2d      	ldr	r2, [pc, #180]	@ (80032c0 <HAL_DMA_Abort+0x23c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d040      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2b      	ldr	r2, [pc, #172]	@ (80032c4 <HAL_DMA_Abort+0x240>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d03b      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2a      	ldr	r2, [pc, #168]	@ (80032c8 <HAL_DMA_Abort+0x244>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d036      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a28      	ldr	r2, [pc, #160]	@ (80032cc <HAL_DMA_Abort+0x248>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d031      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a27      	ldr	r2, [pc, #156]	@ (80032d0 <HAL_DMA_Abort+0x24c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d02c      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a25      	ldr	r2, [pc, #148]	@ (80032d4 <HAL_DMA_Abort+0x250>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d027      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a24      	ldr	r2, [pc, #144]	@ (80032d8 <HAL_DMA_Abort+0x254>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d022      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a22      	ldr	r2, [pc, #136]	@ (80032dc <HAL_DMA_Abort+0x258>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01d      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a21      	ldr	r2, [pc, #132]	@ (80032e0 <HAL_DMA_Abort+0x25c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d018      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1f      	ldr	r2, [pc, #124]	@ (80032e4 <HAL_DMA_Abort+0x260>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1e      	ldr	r2, [pc, #120]	@ (80032e8 <HAL_DMA_Abort+0x264>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00e      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1c      	ldr	r2, [pc, #112]	@ (80032ec <HAL_DMA_Abort+0x268>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d009      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1b      	ldr	r2, [pc, #108]	@ (80032f0 <HAL_DMA_Abort+0x26c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d004      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a19      	ldr	r2, [pc, #100]	@ (80032f4 <HAL_DMA_Abort+0x270>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d132      	bne.n	80032f8 <HAL_DMA_Abort+0x274>
 8003292:	2301      	movs	r3, #1
 8003294:	e031      	b.n	80032fa <HAL_DMA_Abort+0x276>
 8003296:	bf00      	nop
 8003298:	40020010 	.word	0x40020010
 800329c:	40020028 	.word	0x40020028
 80032a0:	40020040 	.word	0x40020040
 80032a4:	40020058 	.word	0x40020058
 80032a8:	40020070 	.word	0x40020070
 80032ac:	40020088 	.word	0x40020088
 80032b0:	400200a0 	.word	0x400200a0
 80032b4:	400200b8 	.word	0x400200b8
 80032b8:	40020410 	.word	0x40020410
 80032bc:	40020428 	.word	0x40020428
 80032c0:	40020440 	.word	0x40020440
 80032c4:	40020458 	.word	0x40020458
 80032c8:	40020470 	.word	0x40020470
 80032cc:	40020488 	.word	0x40020488
 80032d0:	400204a0 	.word	0x400204a0
 80032d4:	400204b8 	.word	0x400204b8
 80032d8:	58025408 	.word	0x58025408
 80032dc:	5802541c 	.word	0x5802541c
 80032e0:	58025430 	.word	0x58025430
 80032e4:	58025444 	.word	0x58025444
 80032e8:	58025458 	.word	0x58025458
 80032ec:	5802546c 	.word	0x5802546c
 80032f0:	58025480 	.word	0x58025480
 80032f4:	58025494 	.word	0x58025494
 80032f8:	2300      	movs	r3, #0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003308:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800330c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a6d      	ldr	r2, [pc, #436]	@ (80034c8 <HAL_DMA_Abort+0x444>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d04a      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6b      	ldr	r2, [pc, #428]	@ (80034cc <HAL_DMA_Abort+0x448>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d045      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a6a      	ldr	r2, [pc, #424]	@ (80034d0 <HAL_DMA_Abort+0x44c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d040      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a68      	ldr	r2, [pc, #416]	@ (80034d4 <HAL_DMA_Abort+0x450>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d03b      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a67      	ldr	r2, [pc, #412]	@ (80034d8 <HAL_DMA_Abort+0x454>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d036      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a65      	ldr	r2, [pc, #404]	@ (80034dc <HAL_DMA_Abort+0x458>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d031      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a64      	ldr	r2, [pc, #400]	@ (80034e0 <HAL_DMA_Abort+0x45c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d02c      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a62      	ldr	r2, [pc, #392]	@ (80034e4 <HAL_DMA_Abort+0x460>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d027      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a61      	ldr	r2, [pc, #388]	@ (80034e8 <HAL_DMA_Abort+0x464>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d022      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a5f      	ldr	r2, [pc, #380]	@ (80034ec <HAL_DMA_Abort+0x468>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d01d      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a5e      	ldr	r2, [pc, #376]	@ (80034f0 <HAL_DMA_Abort+0x46c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d018      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a5c      	ldr	r2, [pc, #368]	@ (80034f4 <HAL_DMA_Abort+0x470>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a5b      	ldr	r2, [pc, #364]	@ (80034f8 <HAL_DMA_Abort+0x474>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00e      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a59      	ldr	r2, [pc, #356]	@ (80034fc <HAL_DMA_Abort+0x478>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d009      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a58      	ldr	r2, [pc, #352]	@ (8003500 <HAL_DMA_Abort+0x47c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d004      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a56      	ldr	r2, [pc, #344]	@ (8003504 <HAL_DMA_Abort+0x480>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d108      	bne.n	80033c0 <HAL_DMA_Abort+0x33c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e007      	b.n	80033d0 <HAL_DMA_Abort+0x34c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0201 	bic.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033d0:	e013      	b.n	80033fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033d2:	f7ff fc9f 	bl	8002d14 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b05      	cmp	r3, #5
 80033de:	d90c      	bls.n	80033fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2203      	movs	r2, #3
 80033ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e12d      	b.n	8003656 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e5      	bne.n	80033d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2f      	ldr	r2, [pc, #188]	@ (80034c8 <HAL_DMA_Abort+0x444>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d04a      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2d      	ldr	r2, [pc, #180]	@ (80034cc <HAL_DMA_Abort+0x448>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d045      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2c      	ldr	r2, [pc, #176]	@ (80034d0 <HAL_DMA_Abort+0x44c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d040      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2a      	ldr	r2, [pc, #168]	@ (80034d4 <HAL_DMA_Abort+0x450>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d03b      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a29      	ldr	r2, [pc, #164]	@ (80034d8 <HAL_DMA_Abort+0x454>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d036      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a27      	ldr	r2, [pc, #156]	@ (80034dc <HAL_DMA_Abort+0x458>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d031      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a26      	ldr	r2, [pc, #152]	@ (80034e0 <HAL_DMA_Abort+0x45c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d02c      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a24      	ldr	r2, [pc, #144]	@ (80034e4 <HAL_DMA_Abort+0x460>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d027      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a23      	ldr	r2, [pc, #140]	@ (80034e8 <HAL_DMA_Abort+0x464>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d022      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a21      	ldr	r2, [pc, #132]	@ (80034ec <HAL_DMA_Abort+0x468>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01d      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a20      	ldr	r2, [pc, #128]	@ (80034f0 <HAL_DMA_Abort+0x46c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d018      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1e      	ldr	r2, [pc, #120]	@ (80034f4 <HAL_DMA_Abort+0x470>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1d      	ldr	r2, [pc, #116]	@ (80034f8 <HAL_DMA_Abort+0x474>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00e      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1b      	ldr	r2, [pc, #108]	@ (80034fc <HAL_DMA_Abort+0x478>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d009      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1a      	ldr	r2, [pc, #104]	@ (8003500 <HAL_DMA_Abort+0x47c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a18      	ldr	r2, [pc, #96]	@ (8003504 <HAL_DMA_Abort+0x480>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_DMA_Abort+0x426>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_DMA_Abort+0x428>
 80034aa:	2300      	movs	r3, #0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d02b      	beq.n	8003508 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	223f      	movs	r2, #63	@ 0x3f
 80034c0:	409a      	lsls	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	609a      	str	r2, [r3, #8]
 80034c6:	e02a      	b.n	800351e <HAL_DMA_Abort+0x49a>
 80034c8:	40020010 	.word	0x40020010
 80034cc:	40020028 	.word	0x40020028
 80034d0:	40020040 	.word	0x40020040
 80034d4:	40020058 	.word	0x40020058
 80034d8:	40020070 	.word	0x40020070
 80034dc:	40020088 	.word	0x40020088
 80034e0:	400200a0 	.word	0x400200a0
 80034e4:	400200b8 	.word	0x400200b8
 80034e8:	40020410 	.word	0x40020410
 80034ec:	40020428 	.word	0x40020428
 80034f0:	40020440 	.word	0x40020440
 80034f4:	40020458 	.word	0x40020458
 80034f8:	40020470 	.word	0x40020470
 80034fc:	40020488 	.word	0x40020488
 8003500:	400204a0 	.word	0x400204a0
 8003504:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2201      	movs	r2, #1
 8003518:	409a      	lsls	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a4f      	ldr	r2, [pc, #316]	@ (8003660 <HAL_DMA_Abort+0x5dc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d072      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a4d      	ldr	r2, [pc, #308]	@ (8003664 <HAL_DMA_Abort+0x5e0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d06d      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a4c      	ldr	r2, [pc, #304]	@ (8003668 <HAL_DMA_Abort+0x5e4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d068      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a4a      	ldr	r2, [pc, #296]	@ (800366c <HAL_DMA_Abort+0x5e8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d063      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a49      	ldr	r2, [pc, #292]	@ (8003670 <HAL_DMA_Abort+0x5ec>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d05e      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a47      	ldr	r2, [pc, #284]	@ (8003674 <HAL_DMA_Abort+0x5f0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d059      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a46      	ldr	r2, [pc, #280]	@ (8003678 <HAL_DMA_Abort+0x5f4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d054      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a44      	ldr	r2, [pc, #272]	@ (800367c <HAL_DMA_Abort+0x5f8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d04f      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a43      	ldr	r2, [pc, #268]	@ (8003680 <HAL_DMA_Abort+0x5fc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d04a      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a41      	ldr	r2, [pc, #260]	@ (8003684 <HAL_DMA_Abort+0x600>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d045      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a40      	ldr	r2, [pc, #256]	@ (8003688 <HAL_DMA_Abort+0x604>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d040      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a3e      	ldr	r2, [pc, #248]	@ (800368c <HAL_DMA_Abort+0x608>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d03b      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a3d      	ldr	r2, [pc, #244]	@ (8003690 <HAL_DMA_Abort+0x60c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d036      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a3b      	ldr	r2, [pc, #236]	@ (8003694 <HAL_DMA_Abort+0x610>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d031      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003698 <HAL_DMA_Abort+0x614>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d02c      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a38      	ldr	r2, [pc, #224]	@ (800369c <HAL_DMA_Abort+0x618>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d027      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a37      	ldr	r2, [pc, #220]	@ (80036a0 <HAL_DMA_Abort+0x61c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d022      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a35      	ldr	r2, [pc, #212]	@ (80036a4 <HAL_DMA_Abort+0x620>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01d      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a34      	ldr	r2, [pc, #208]	@ (80036a8 <HAL_DMA_Abort+0x624>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d018      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a32      	ldr	r2, [pc, #200]	@ (80036ac <HAL_DMA_Abort+0x628>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a31      	ldr	r2, [pc, #196]	@ (80036b0 <HAL_DMA_Abort+0x62c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00e      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a2f      	ldr	r2, [pc, #188]	@ (80036b4 <HAL_DMA_Abort+0x630>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2e      	ldr	r2, [pc, #184]	@ (80036b8 <HAL_DMA_Abort+0x634>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d004      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2c      	ldr	r2, [pc, #176]	@ (80036bc <HAL_DMA_Abort+0x638>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d101      	bne.n	8003612 <HAL_DMA_Abort+0x58e>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_DMA_Abort+0x590>
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d015      	beq.n	8003644 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003620:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00c      	beq.n	8003644 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003638:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003642:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40020010 	.word	0x40020010
 8003664:	40020028 	.word	0x40020028
 8003668:	40020040 	.word	0x40020040
 800366c:	40020058 	.word	0x40020058
 8003670:	40020070 	.word	0x40020070
 8003674:	40020088 	.word	0x40020088
 8003678:	400200a0 	.word	0x400200a0
 800367c:	400200b8 	.word	0x400200b8
 8003680:	40020410 	.word	0x40020410
 8003684:	40020428 	.word	0x40020428
 8003688:	40020440 	.word	0x40020440
 800368c:	40020458 	.word	0x40020458
 8003690:	40020470 	.word	0x40020470
 8003694:	40020488 	.word	0x40020488
 8003698:	400204a0 	.word	0x400204a0
 800369c:	400204b8 	.word	0x400204b8
 80036a0:	58025408 	.word	0x58025408
 80036a4:	5802541c 	.word	0x5802541c
 80036a8:	58025430 	.word	0x58025430
 80036ac:	58025444 	.word	0x58025444
 80036b0:	58025458 	.word	0x58025458
 80036b4:	5802546c 	.word	0x5802546c
 80036b8:	58025480 	.word	0x58025480
 80036bc:	58025494 	.word	0x58025494

080036c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e237      	b.n	8003b42 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d004      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2280      	movs	r2, #128	@ 0x80
 80036e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e22c      	b.n	8003b42 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003860 <HAL_DMA_Abort_IT+0x1a0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d04a      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003864 <HAL_DMA_Abort_IT+0x1a4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d045      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a59      	ldr	r2, [pc, #356]	@ (8003868 <HAL_DMA_Abort_IT+0x1a8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d040      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a58      	ldr	r2, [pc, #352]	@ (800386c <HAL_DMA_Abort_IT+0x1ac>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d03b      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a56      	ldr	r2, [pc, #344]	@ (8003870 <HAL_DMA_Abort_IT+0x1b0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d036      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a55      	ldr	r2, [pc, #340]	@ (8003874 <HAL_DMA_Abort_IT+0x1b4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d031      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a53      	ldr	r2, [pc, #332]	@ (8003878 <HAL_DMA_Abort_IT+0x1b8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02c      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a52      	ldr	r2, [pc, #328]	@ (800387c <HAL_DMA_Abort_IT+0x1bc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d027      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a50      	ldr	r2, [pc, #320]	@ (8003880 <HAL_DMA_Abort_IT+0x1c0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a4f      	ldr	r2, [pc, #316]	@ (8003884 <HAL_DMA_Abort_IT+0x1c4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a4d      	ldr	r2, [pc, #308]	@ (8003888 <HAL_DMA_Abort_IT+0x1c8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a4c      	ldr	r2, [pc, #304]	@ (800388c <HAL_DMA_Abort_IT+0x1cc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a4a      	ldr	r2, [pc, #296]	@ (8003890 <HAL_DMA_Abort_IT+0x1d0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a49      	ldr	r2, [pc, #292]	@ (8003894 <HAL_DMA_Abort_IT+0x1d4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a47      	ldr	r2, [pc, #284]	@ (8003898 <HAL_DMA_Abort_IT+0x1d8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a46      	ldr	r2, [pc, #280]	@ (800389c <HAL_DMA_Abort_IT+0x1dc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_DMA_Abort_IT+0xcc>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_DMA_Abort_IT+0xce>
 800378c:	2300      	movs	r3, #0
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8086 	beq.w	80038a0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2204      	movs	r2, #4
 8003798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003860 <HAL_DMA_Abort_IT+0x1a0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d04a      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003864 <HAL_DMA_Abort_IT+0x1a4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d045      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003868 <HAL_DMA_Abort_IT+0x1a8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d040      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2b      	ldr	r2, [pc, #172]	@ (800386c <HAL_DMA_Abort_IT+0x1ac>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d03b      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a29      	ldr	r2, [pc, #164]	@ (8003870 <HAL_DMA_Abort_IT+0x1b0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d036      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a28      	ldr	r2, [pc, #160]	@ (8003874 <HAL_DMA_Abort_IT+0x1b4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d031      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a26      	ldr	r2, [pc, #152]	@ (8003878 <HAL_DMA_Abort_IT+0x1b8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d02c      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a25      	ldr	r2, [pc, #148]	@ (800387c <HAL_DMA_Abort_IT+0x1bc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d027      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a23      	ldr	r2, [pc, #140]	@ (8003880 <HAL_DMA_Abort_IT+0x1c0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d022      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a22      	ldr	r2, [pc, #136]	@ (8003884 <HAL_DMA_Abort_IT+0x1c4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d01d      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a20      	ldr	r2, [pc, #128]	@ (8003888 <HAL_DMA_Abort_IT+0x1c8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d018      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1f      	ldr	r2, [pc, #124]	@ (800388c <HAL_DMA_Abort_IT+0x1cc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d013      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1d      	ldr	r2, [pc, #116]	@ (8003890 <HAL_DMA_Abort_IT+0x1d0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00e      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1c      	ldr	r2, [pc, #112]	@ (8003894 <HAL_DMA_Abort_IT+0x1d4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d009      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1a      	ldr	r2, [pc, #104]	@ (8003898 <HAL_DMA_Abort_IT+0x1d8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a19      	ldr	r2, [pc, #100]	@ (800389c <HAL_DMA_Abort_IT+0x1dc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d108      	bne.n	800384e <HAL_DMA_Abort_IT+0x18e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e178      	b.n	8003b40 <HAL_DMA_Abort_IT+0x480>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e16f      	b.n	8003b40 <HAL_DMA_Abort_IT+0x480>
 8003860:	40020010 	.word	0x40020010
 8003864:	40020028 	.word	0x40020028
 8003868:	40020040 	.word	0x40020040
 800386c:	40020058 	.word	0x40020058
 8003870:	40020070 	.word	0x40020070
 8003874:	40020088 	.word	0x40020088
 8003878:	400200a0 	.word	0x400200a0
 800387c:	400200b8 	.word	0x400200b8
 8003880:	40020410 	.word	0x40020410
 8003884:	40020428 	.word	0x40020428
 8003888:	40020440 	.word	0x40020440
 800388c:	40020458 	.word	0x40020458
 8003890:	40020470 	.word	0x40020470
 8003894:	40020488 	.word	0x40020488
 8003898:	400204a0 	.word	0x400204a0
 800389c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 020e 	bic.w	r2, r2, #14
 80038ae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a6c      	ldr	r2, [pc, #432]	@ (8003a68 <HAL_DMA_Abort_IT+0x3a8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d04a      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a6b      	ldr	r2, [pc, #428]	@ (8003a6c <HAL_DMA_Abort_IT+0x3ac>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d045      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a69      	ldr	r2, [pc, #420]	@ (8003a70 <HAL_DMA_Abort_IT+0x3b0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d040      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a68      	ldr	r2, [pc, #416]	@ (8003a74 <HAL_DMA_Abort_IT+0x3b4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d03b      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a66      	ldr	r2, [pc, #408]	@ (8003a78 <HAL_DMA_Abort_IT+0x3b8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d036      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a65      	ldr	r2, [pc, #404]	@ (8003a7c <HAL_DMA_Abort_IT+0x3bc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d031      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a63      	ldr	r2, [pc, #396]	@ (8003a80 <HAL_DMA_Abort_IT+0x3c0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d02c      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a62      	ldr	r2, [pc, #392]	@ (8003a84 <HAL_DMA_Abort_IT+0x3c4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d027      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a60      	ldr	r2, [pc, #384]	@ (8003a88 <HAL_DMA_Abort_IT+0x3c8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d022      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a5f      	ldr	r2, [pc, #380]	@ (8003a8c <HAL_DMA_Abort_IT+0x3cc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d01d      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a5d      	ldr	r2, [pc, #372]	@ (8003a90 <HAL_DMA_Abort_IT+0x3d0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d018      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a5c      	ldr	r2, [pc, #368]	@ (8003a94 <HAL_DMA_Abort_IT+0x3d4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a5a      	ldr	r2, [pc, #360]	@ (8003a98 <HAL_DMA_Abort_IT+0x3d8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00e      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a59      	ldr	r2, [pc, #356]	@ (8003a9c <HAL_DMA_Abort_IT+0x3dc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d009      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a57      	ldr	r2, [pc, #348]	@ (8003aa0 <HAL_DMA_Abort_IT+0x3e0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a56      	ldr	r2, [pc, #344]	@ (8003aa4 <HAL_DMA_Abort_IT+0x3e4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <HAL_DMA_Abort_IT+0x2a2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e007      	b.n	8003972 <HAL_DMA_Abort_IT+0x2b2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a3c      	ldr	r2, [pc, #240]	@ (8003a68 <HAL_DMA_Abort_IT+0x3a8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d072      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a3a      	ldr	r2, [pc, #232]	@ (8003a6c <HAL_DMA_Abort_IT+0x3ac>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d06d      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a39      	ldr	r2, [pc, #228]	@ (8003a70 <HAL_DMA_Abort_IT+0x3b0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d068      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a37      	ldr	r2, [pc, #220]	@ (8003a74 <HAL_DMA_Abort_IT+0x3b4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d063      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a36      	ldr	r2, [pc, #216]	@ (8003a78 <HAL_DMA_Abort_IT+0x3b8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d05e      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a34      	ldr	r2, [pc, #208]	@ (8003a7c <HAL_DMA_Abort_IT+0x3bc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d059      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a33      	ldr	r2, [pc, #204]	@ (8003a80 <HAL_DMA_Abort_IT+0x3c0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d054      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a31      	ldr	r2, [pc, #196]	@ (8003a84 <HAL_DMA_Abort_IT+0x3c4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d04f      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a30      	ldr	r2, [pc, #192]	@ (8003a88 <HAL_DMA_Abort_IT+0x3c8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d04a      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2e      	ldr	r2, [pc, #184]	@ (8003a8c <HAL_DMA_Abort_IT+0x3cc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d045      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2d      	ldr	r2, [pc, #180]	@ (8003a90 <HAL_DMA_Abort_IT+0x3d0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d040      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003a94 <HAL_DMA_Abort_IT+0x3d4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d03b      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003a98 <HAL_DMA_Abort_IT+0x3d8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d036      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a28      	ldr	r2, [pc, #160]	@ (8003a9c <HAL_DMA_Abort_IT+0x3dc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d031      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a27      	ldr	r2, [pc, #156]	@ (8003aa0 <HAL_DMA_Abort_IT+0x3e0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d02c      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a25      	ldr	r2, [pc, #148]	@ (8003aa4 <HAL_DMA_Abort_IT+0x3e4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d027      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a24      	ldr	r2, [pc, #144]	@ (8003aa8 <HAL_DMA_Abort_IT+0x3e8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d022      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a22      	ldr	r2, [pc, #136]	@ (8003aac <HAL_DMA_Abort_IT+0x3ec>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01d      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a21      	ldr	r2, [pc, #132]	@ (8003ab0 <HAL_DMA_Abort_IT+0x3f0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d018      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1f      	ldr	r2, [pc, #124]	@ (8003ab4 <HAL_DMA_Abort_IT+0x3f4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ab8 <HAL_DMA_Abort_IT+0x3f8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00e      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1c      	ldr	r2, [pc, #112]	@ (8003abc <HAL_DMA_Abort_IT+0x3fc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac0 <HAL_DMA_Abort_IT+0x400>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d004      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a19      	ldr	r2, [pc, #100]	@ (8003ac4 <HAL_DMA_Abort_IT+0x404>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d132      	bne.n	8003ac8 <HAL_DMA_Abort_IT+0x408>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e031      	b.n	8003aca <HAL_DMA_Abort_IT+0x40a>
 8003a66:	bf00      	nop
 8003a68:	40020010 	.word	0x40020010
 8003a6c:	40020028 	.word	0x40020028
 8003a70:	40020040 	.word	0x40020040
 8003a74:	40020058 	.word	0x40020058
 8003a78:	40020070 	.word	0x40020070
 8003a7c:	40020088 	.word	0x40020088
 8003a80:	400200a0 	.word	0x400200a0
 8003a84:	400200b8 	.word	0x400200b8
 8003a88:	40020410 	.word	0x40020410
 8003a8c:	40020428 	.word	0x40020428
 8003a90:	40020440 	.word	0x40020440
 8003a94:	40020458 	.word	0x40020458
 8003a98:	40020470 	.word	0x40020470
 8003a9c:	40020488 	.word	0x40020488
 8003aa0:	400204a0 	.word	0x400204a0
 8003aa4:	400204b8 	.word	0x400204b8
 8003aa8:	58025408 	.word	0x58025408
 8003aac:	5802541c 	.word	0x5802541c
 8003ab0:	58025430 	.word	0x58025430
 8003ab4:	58025444 	.word	0x58025444
 8003ab8:	58025458 	.word	0x58025458
 8003abc:	5802546c 	.word	0x5802546c
 8003ac0:	58025480 	.word	0x58025480
 8003ac4:	58025494 	.word	0x58025494
 8003ac8:	2300      	movs	r3, #0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d028      	beq.n	8003b20 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003adc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	2201      	movs	r2, #1
 8003aee:	409a      	lsls	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003afc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00c      	beq.n	8003b20 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b14:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b1e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop

08003b4c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b098      	sub	sp, #96	@ 0x60
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003b54:	4a84      	ldr	r2, [pc, #528]	@ (8003d68 <HAL_FDCAN_Init+0x21c>)
 8003b56:	f107 030c 	add.w	r3, r7, #12
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	224c      	movs	r2, #76	@ 0x4c
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f00c faf9 	bl	8010156 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e1c6      	b.n	8003efc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a7e      	ldr	r2, [pc, #504]	@ (8003d6c <HAL_FDCAN_Init+0x220>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d106      	bne.n	8003b86 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003b80:	461a      	mov	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd f80c 	bl	8000bb8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0210 	bic.w	r2, r2, #16
 8003bae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bb0:	f7ff f8b0 	bl	8002d14 <HAL_GetTick>
 8003bb4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003bb6:	e014      	b.n	8003be2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003bb8:	f7ff f8ac 	bl	8002d14 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b0a      	cmp	r3, #10
 8003bc4:	d90d      	bls.n	8003be2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bcc:	f043 0201 	orr.w	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2203      	movs	r2, #3
 8003bda:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e18c      	b.n	8003efc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d0e3      	beq.n	8003bb8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c00:	f7ff f888 	bl	8002d14 <HAL_GetTick>
 8003c04:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c06:	e014      	b.n	8003c32 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c08:	f7ff f884 	bl	8002d14 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b0a      	cmp	r3, #10
 8003c14:	d90d      	bls.n	8003c32 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c1c:	f043 0201 	orr.w	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2203      	movs	r2, #3
 8003c2a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e164      	b.n	8003efc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0e3      	beq.n	8003c08 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0202 	orr.w	r2, r2, #2
 8003c4e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7c1b      	ldrb	r3, [r3, #16]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d108      	bne.n	8003c6a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c66:	619a      	str	r2, [r3, #24]
 8003c68:	e007      	b.n	8003c7a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699a      	ldr	r2, [r3, #24]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c78:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	7c5b      	ldrb	r3, [r3, #17]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d108      	bne.n	8003c94 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699a      	ldr	r2, [r3, #24]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c90:	619a      	str	r2, [r3, #24]
 8003c92:	e007      	b.n	8003ca4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ca2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	7c9b      	ldrb	r3, [r3, #18]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d108      	bne.n	8003cbe <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003cba:	619a      	str	r2, [r3, #24]
 8003cbc:	e007      	b.n	8003cce <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699a      	ldr	r2, [r3, #24]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ccc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003cf2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0210 	bic.w	r2, r2, #16
 8003d02:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d108      	bne.n	8003d1e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0204 	orr.w	r2, r2, #4
 8003d1a:	619a      	str	r2, [r3, #24]
 8003d1c:	e030      	b.n	8003d80 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d02c      	beq.n	8003d80 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d020      	beq.n	8003d70 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699a      	ldr	r2, [r3, #24]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d3c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0210 	orr.w	r2, r2, #16
 8003d4c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d114      	bne.n	8003d80 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699a      	ldr	r2, [r3, #24]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0220 	orr.w	r2, r2, #32
 8003d64:	619a      	str	r2, [r3, #24]
 8003d66:	e00b      	b.n	8003d80 <HAL_FDCAN_Init+0x234>
 8003d68:	080131a4 	.word	0x080131a4
 8003d6c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0220 	orr.w	r2, r2, #32
 8003d7e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d90:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003d98:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003da8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003daa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003db4:	d115      	bne.n	8003de2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dba:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003dc4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003dce:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003dde:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003de0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e08:	4413      	add	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d011      	beq.n	8003e32 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003e16:	f023 0107 	bic.w	r1, r3, #7
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	3360      	adds	r3, #96	@ 0x60
 8003e22:	443b      	add	r3, r7
 8003e24:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d011      	beq.n	8003e5e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e42:	f023 0107 	bic.w	r1, r3, #7
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	3360      	adds	r3, #96	@ 0x60
 8003e4e:	443b      	add	r3, r7
 8003e50:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d012      	beq.n	8003e8c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e6e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	3360      	adds	r3, #96	@ 0x60
 8003e7a:	443b      	add	r3, r7
 8003e7c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003e80:	011a      	lsls	r2, r3, #4
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d012      	beq.n	8003eba <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e9c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	3360      	adds	r3, #96	@ 0x60
 8003ea8:	443b      	add	r3, r7
 8003eaa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003eae:	021a      	lsls	r2, r3, #8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a11      	ldr	r2, [pc, #68]	@ (8003f04 <HAL_FDCAN_Init+0x3b8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d107      	bne.n	8003ed4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f022 0203 	bic.w	r2, r2, #3
 8003ed2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fe13 	bl	8004b18 <FDCAN_CalcultateRamBlockAddresses>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003ef8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3760      	adds	r7, #96	@ 0x60
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	4000a000 	.word	0x4000a000

08003f08 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003f18:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d002      	beq.n	8003f26 <HAL_FDCAN_ConfigFilter+0x1e>
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d157      	bne.n	8003fd6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d12b      	bne.n	8003f86 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b07      	cmp	r3, #7
 8003f34:	d10d      	bne.n	8003f52 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003f42:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003f48:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003f4a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	e00e      	b.n	8003f70 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f5e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003f66:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	e025      	b.n	8003fd2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	075a      	lsls	r2, r3, #29
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2b07      	cmp	r3, #7
 8003f9a:	d103      	bne.n	8003fa4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e006      	b.n	8003fb2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	079a      	lsls	r2, r3, #30
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e008      	b.n	8003fe8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fdc:	f043 0202 	orr.w	r2, r3, #2
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
  }
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b01      	cmp	r3, #1
 800400c:	d110      	bne.n	8004030 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004016:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800401c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004028:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	e008      	b.n	8004042 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004036:	f043 0204 	orr.w	r2, r3, #4
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
  }
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	d111      	bne.n	8004086 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2202      	movs	r2, #2
 8004066:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699a      	ldr	r2, [r3, #24]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0201 	bic.w	r2, r2, #1
 8004078:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e008      	b.n	8004098 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800408c:	f043 0204 	orr.w	r2, r3, #4
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
  }
}
 8004098:	4618      	mov	r0, r3
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d141      	bne.n	8004140 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80040c4:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d109      	bne.n	80040e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040d2:	f043 0220 	orr.w	r2, r3, #32
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e038      	b.n	8004152 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80040e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e026      	b.n	8004152 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	f003 031f 	and.w	r3, r3, #31
 8004112:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fe82 	bl	8004e24 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2101      	movs	r1, #1
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	fa01 f202 	lsl.w	r2, r1, r2
 800412c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004130:	2201      	movs	r2, #1
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	409a      	lsls	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	e008      	b.n	8004152 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004146:	f043 0208 	orr.w	r2, r3, #8
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800415c:	b480      	push	{r7}
 800415e:	b08b      	sub	sp, #44	@ 0x2c
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004174:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004176:	7efb      	ldrb	r3, [r7, #27]
 8004178:	2b02      	cmp	r3, #2
 800417a:	f040 8149 	bne.w	8004410 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b40      	cmp	r3, #64	@ 0x40
 8004182:	d14c      	bne.n	800421e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800418c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800419a:	f043 0220 	orr.w	r2, r3, #32
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e13c      	b.n	8004422 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e12a      	b.n	8004422 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041d4:	0e1b      	lsrs	r3, r3, #24
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d10a      	bne.n	80041f4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041e6:	0fdb      	lsrs	r3, r3, #31
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80041f0:	2301      	movs	r3, #1
 80041f2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	4413      	add	r3, r2
 8004206:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004210:	69f9      	ldr	r1, [r7, #28]
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	627b      	str	r3, [r7, #36]	@ 0x24
 800421c:	e068      	b.n	80042f0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b41      	cmp	r3, #65	@ 0x41
 8004222:	d14c      	bne.n	80042be <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800422c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800423a:	f043 0220 	orr.w	r2, r3, #32
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0ec      	b.n	8004422 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004254:	2b00      	cmp	r3, #0
 8004256:	d109      	bne.n	800426c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800425e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0da      	b.n	8004422 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004274:	0e1b      	lsrs	r3, r3, #24
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b01      	cmp	r3, #1
 800427c:	d10a      	bne.n	8004294 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004286:	0fdb      	lsrs	r3, r3, #31
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004290:	2301      	movs	r3, #1
 8004292:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b0:	69f9      	ldr	r1, [r7, #28]
 80042b2:	fb01 f303 	mul.w	r3, r1, r3
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80042bc:	e018      	b.n	80042f0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d309      	bcc.n	80042dc <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042ce:	f043 0220 	orr.w	r2, r3, #32
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0a2      	b.n	8004422 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e4:	68b9      	ldr	r1, [r7, #8]
 80042e6:	fb01 f303 	mul.w	r3, r1, r3
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d107      	bne.n	8004314 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	0c9b      	lsrs	r3, r3, #18
 800430a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	e005      	b.n	8004320 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	3304      	adds	r3, #4
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	b29a      	uxth	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	f003 020f 	and.w	r2, r3, #15
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	0e1b      	lsrs	r3, r3, #24
 8004374:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0fda      	lsrs	r2, r3, #31
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	3304      	adds	r3, #4
 800438a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004390:	2300      	movs	r3, #0
 8004392:	623b      	str	r3, [r7, #32]
 8004394:	e00a      	b.n	80043ac <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	441a      	add	r2, r3
 800439c:	6839      	ldr	r1, [r7, #0]
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	440b      	add	r3, r1
 80043a2:	7812      	ldrb	r2, [r2, #0]
 80043a4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	3301      	adds	r3, #1
 80043aa:	623b      	str	r3, [r7, #32]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004430 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80043b2:	5cd3      	ldrb	r3, [r2, r3]
 80043b4:	461a      	mov	r2, r3
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d3ec      	bcc.n	8004396 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b40      	cmp	r3, #64	@ 0x40
 80043c0:	d105      	bne.n	80043ce <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80043cc:	e01e      	b.n	800440c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b41      	cmp	r3, #65	@ 0x41
 80043d2:	d105      	bne.n	80043e0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80043de:	e015      	b.n	800440c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b1f      	cmp	r3, #31
 80043e4:	d808      	bhi.n	80043f8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2101      	movs	r1, #1
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	fa01 f202 	lsl.w	r2, r1, r2
 80043f2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80043f6:	e009      	b.n	800440c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 021f 	and.w	r2, r3, #31
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2101      	movs	r1, #1
 8004404:	fa01 f202 	lsl.w	r2, r1, r2
 8004408:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	e008      	b.n	8004422 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004416:	f043 0208 	orr.w	r2, r3, #8
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	372c      	adds	r7, #44	@ 0x2c
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	08013278 	.word	0x08013278

08004434 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004446:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d002      	beq.n	8004454 <HAL_FDCAN_ActivateNotification+0x20>
 800444e:	7dfb      	ldrb	r3, [r7, #23]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d155      	bne.n	8004500 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d108      	bne.n	8004474 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004472:	e014      	b.n	800449e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	429a      	cmp	r2, r3
 8004482:	d108      	bne.n	8004496 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0202 	orr.w	r2, r2, #2
 8004492:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004494:	e003      	b.n	800449e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2203      	movs	r2, #3
 800449c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d009      	beq.n	80044bc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d009      	beq.n	80044da <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004520 <HAL_FDCAN_ActivateNotification+0xec>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	6812      	ldr	r2, [r2, #0]
 80044ea:	430b      	orrs	r3, r1
 80044ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80044ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <HAL_FDCAN_ActivateNotification+0xf0>)
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	0f9b      	lsrs	r3, r3, #30
 80044f6:	490b      	ldr	r1, [pc, #44]	@ (8004524 <HAL_FDCAN_ActivateNotification+0xf0>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	e008      	b.n	8004512 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004506:	f043 0202 	orr.w	r2, r3, #2
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
  }
}
 8004512:	4618      	mov	r0, r3
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	3fcfffff 	.word	0x3fcfffff
 8004524:	4000a800 	.word	0x4000a800

08004528 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b096      	sub	sp, #88	@ 0x58
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004530:	4b95      	ldr	r3, [pc, #596]	@ (8004788 <HAL_FDCAN_IRQHandler+0x260>)
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	079b      	lsls	r3, r3, #30
 8004536:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004538:	4b93      	ldr	r3, [pc, #588]	@ (8004788 <HAL_FDCAN_IRQHandler+0x260>)
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	079b      	lsls	r3, r3, #30
 800453e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004540:	4013      	ands	r3, r2
 8004542:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800454e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004556:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004558:	4013      	ands	r3, r2
 800455a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004570:	4013      	ands	r3, r2
 8004572:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800457a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800457e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004588:	4013      	ands	r3, r2
 800458a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004592:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8004596:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045a0:	4013      	ands	r3, r2
 80045a2:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045aa:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80045ae:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045b8:	4013      	ands	r3, r2
 80045ba:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80045cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00f      	beq.n	80045f6 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80045d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80045ea:	4b67      	ldr	r3, [pc, #412]	@ (8004788 <HAL_FDCAN_IRQHandler+0x260>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fa44 	bl	8004a7e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80045f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01c      	beq.n	800463a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004606:	2b00      	cmp	r3, #0
 8004608:	d017      	beq.n	800463a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004612:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800461c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800461e:	4013      	ands	r3, r2
 8004620:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800462a:	651a      	str	r2, [r3, #80]	@ 0x50
 800462c:	4b56      	ldr	r3, [pc, #344]	@ (8004788 <HAL_FDCAN_IRQHandler+0x260>)
 800462e:	2200      	movs	r2, #0
 8004630:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004632:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f9f9 	bl	8004a2c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800463a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00d      	beq.n	800465c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004646:	4b51      	ldr	r3, [pc, #324]	@ (800478c <HAL_FDCAN_IRQHandler+0x264>)
 8004648:	400b      	ands	r3, r1
 800464a:	6513      	str	r3, [r2, #80]	@ 0x50
 800464c:	4a4e      	ldr	r2, [pc, #312]	@ (8004788 <HAL_FDCAN_IRQHandler+0x260>)
 800464e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004650:	0f9b      	lsrs	r3, r3, #30
 8004652:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004654:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f9b2 	bl	80049c0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800465c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00d      	beq.n	800467e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004668:	4b48      	ldr	r3, [pc, #288]	@ (800478c <HAL_FDCAN_IRQHandler+0x264>)
 800466a:	400b      	ands	r3, r1
 800466c:	6513      	str	r3, [r2, #80]	@ 0x50
 800466e:	4a46      	ldr	r2, [pc, #280]	@ (8004788 <HAL_FDCAN_IRQHandler+0x260>)
 8004670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004672:	0f9b      	lsrs	r3, r3, #30
 8004674:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004676:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f9ac 	bl	80049d6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800467e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00d      	beq.n	80046a0 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800468a:	4b40      	ldr	r3, [pc, #256]	@ (800478c <HAL_FDCAN_IRQHandler+0x264>)
 800468c:	400b      	ands	r3, r1
 800468e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004690:	4a3d      	ldr	r2, [pc, #244]	@ (8004788 <HAL_FDCAN_IRQHandler+0x260>)
 8004692:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004694:	0f9b      	lsrs	r3, r3, #30
 8004696:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004698:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fc fbac 	bl	8000df8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80046a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80046ac:	4b37      	ldr	r3, [pc, #220]	@ (800478c <HAL_FDCAN_IRQHandler+0x264>)
 80046ae:	400b      	ands	r3, r1
 80046b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80046b2:	4a35      	ldr	r2, [pc, #212]	@ (8004788 <HAL_FDCAN_IRQHandler+0x260>)
 80046b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046b6:	0f9b      	lsrs	r3, r3, #30
 80046b8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80046ba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f995 	bl	80049ec <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80046c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00f      	beq.n	80046ec <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80046cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046de:	651a      	str	r2, [r3, #80]	@ 0x50
 80046e0:	4b29      	ldr	r3, [pc, #164]	@ (8004788 <HAL_FDCAN_IRQHandler+0x260>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f98b 	bl	8004a02 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80046ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01c      	beq.n	8004730 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80046f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d017      	beq.n	8004730 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004708:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004714:	4013      	ands	r3, r2
 8004716:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004720:	651a      	str	r2, [r3, #80]	@ 0x50
 8004722:	4b19      	ldr	r3, [pc, #100]	@ (8004788 <HAL_FDCAN_IRQHandler+0x260>)
 8004724:	2200      	movs	r2, #0
 8004726:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004728:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f973 	bl	8004a16 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004732:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00f      	beq.n	800475a <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800473a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800474c:	651a      	str	r2, [r3, #80]	@ 0x50
 800474e:	4b0e      	ldr	r3, [pc, #56]	@ (8004788 <HAL_FDCAN_IRQHandler+0x260>)
 8004750:	2200      	movs	r2, #0
 8004752:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f974 	bl	8004a42 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800475a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800475c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d015      	beq.n	8004790 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d010      	beq.n	8004790 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004776:	651a      	str	r2, [r3, #80]	@ 0x50
 8004778:	4b03      	ldr	r3, [pc, #12]	@ (8004788 <HAL_FDCAN_IRQHandler+0x260>)
 800477a:	2200      	movs	r2, #0
 800477c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f969 	bl	8004a56 <HAL_FDCAN_TimestampWraparoundCallback>
 8004784:	e004      	b.n	8004790 <HAL_FDCAN_IRQHandler+0x268>
 8004786:	bf00      	nop
 8004788:	4000a800 	.word	0x4000a800
 800478c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004792:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00f      	beq.n	80047ba <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800479a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80047ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80047ae:	4b81      	ldr	r3, [pc, #516]	@ (80049b4 <HAL_FDCAN_IRQHandler+0x48c>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f958 	bl	8004a6a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80047ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d014      	beq.n	80047ee <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80047c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00f      	beq.n	80047ee <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80047d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80047d8:	4b76      	ldr	r3, [pc, #472]	@ (80049b4 <HAL_FDCAN_IRQHandler+0x48c>)
 80047da:	2200      	movs	r2, #0
 80047dc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80047ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00d      	beq.n	8004810 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047fa:	4b6f      	ldr	r3, [pc, #444]	@ (80049b8 <HAL_FDCAN_IRQHandler+0x490>)
 80047fc:	400b      	ands	r3, r1
 80047fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004800:	4a6c      	ldr	r2, [pc, #432]	@ (80049b4 <HAL_FDCAN_IRQHandler+0x48c>)
 8004802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004804:	0f9b      	lsrs	r3, r3, #30
 8004806:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004808:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f94b 	bl	8004aa6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004812:	2b00      	cmp	r3, #0
 8004814:	d011      	beq.n	800483a <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800481c:	4b66      	ldr	r3, [pc, #408]	@ (80049b8 <HAL_FDCAN_IRQHandler+0x490>)
 800481e:	400b      	ands	r3, r1
 8004820:	6513      	str	r3, [r2, #80]	@ 0x50
 8004822:	4a64      	ldr	r2, [pc, #400]	@ (80049b4 <HAL_FDCAN_IRQHandler+0x48c>)
 8004824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004826:	0f9b      	lsrs	r3, r3, #30
 8004828:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a5f      	ldr	r2, [pc, #380]	@ (80049bc <HAL_FDCAN_IRQHandler+0x494>)
 8004840:	4293      	cmp	r3, r2
 8004842:	f040 80aa 	bne.w	800499a <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80a2 	beq.w	800499a <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800486a:	4013      	ands	r3, r2
 800486c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004878:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004882:	4013      	ands	r3, r2
 8004884:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489a:	4013      	ands	r3, r2
 800489c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80048a8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	6a3a      	ldr	r2, [r7, #32]
 80048b2:	4013      	ands	r3, r2
 80048b4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80048c0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	4013      	ands	r3, r2
 80048cc:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80048de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048ea:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80048ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8e4 	bl	8004abc <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80048f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004900:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004902:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f8e4 	bl	8004ad2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d019      	beq.n	8004948 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d014      	beq.n	8004948 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004924:	0c1b      	lsrs	r3, r3, #16
 8004926:	b29b      	uxth	r3, r3
 8004928:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004930:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004934:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2240      	movs	r2, #64	@ 0x40
 800493c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	6939      	ldr	r1, [r7, #16]
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f8d0 	bl	8004ae8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d007      	beq.n	800495e <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004954:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004956:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f8d1 	bl	8004b00 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00b      	beq.n	800497c <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	6a3a      	ldr	r2, [r7, #32]
 800496a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f874 	bl	8004a92 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80049aa:	bf00      	nop
 80049ac:	3758      	adds	r7, #88	@ 0x58
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	4000a800 	.word	0x4000a800
 80049b8:	3fcfffff 	.word	0x3fcfffff
 80049bc:	4000a000 	.word	0x4000a000

080049c0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b24:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004b2e:	4ba7      	ldr	r3, [pc, #668]	@ (8004dcc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	0091      	lsls	r1, r2, #2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b48:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b50:	041a      	lsls	r2, r3, #16
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	4413      	add	r3, r2
 8004b64:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004b6e:	4b97      	ldr	r3, [pc, #604]	@ (8004dcc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	0091      	lsls	r1, r2, #2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b88:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b90:	041a      	lsls	r2, r3, #16
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004bb0:	4b86      	ldr	r3, [pc, #536]	@ (8004dcc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	0091      	lsls	r1, r2, #2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004bca:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	041a      	lsls	r2, r3, #16
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	4413      	add	r3, r2
 8004bee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004bf8:	4b74      	ldr	r3, [pc, #464]	@ (8004dcc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	0091      	lsls	r1, r2, #2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	430b      	orrs	r3, r1
 8004c06:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c12:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c1a:	041a      	lsls	r2, r3, #16
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004c2e:	fb02 f303 	mul.w	r3, r2, r3
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	4413      	add	r3, r2
 8004c36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004c40:	4b62      	ldr	r3, [pc, #392]	@ (8004dcc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	0091      	lsls	r1, r2, #2
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	4413      	add	r3, r2
 8004c62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004c6c:	4b57      	ldr	r3, [pc, #348]	@ (8004dcc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	0091      	lsls	r1, r2, #2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c86:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8e:	041a      	lsls	r2, r3, #16
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004cae:	4b47      	ldr	r3, [pc, #284]	@ (8004dcc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	0091      	lsls	r1, r2, #2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004cc8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd0:	041a      	lsls	r2, r3, #16
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004ce4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cec:	061a      	lsls	r2, r3, #24
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cfc:	4b34      	ldr	r3, [pc, #208]	@ (8004dd0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004cfe:	4413      	add	r3, r2
 8004d00:	009a      	lsls	r2, r3, #2
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	441a      	add	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8004d32:	fb01 f303 	mul.w	r3, r1, r3
 8004d36:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004d38:	441a      	add	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8004d4a:	fb01 f303 	mul.w	r3, r1, r3
 8004d4e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004d50:	441a      	add	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004d68:	441a      	add	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	441a      	add	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	441a      	add	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004dae:	fb01 f303 	mul.w	r3, r1, r3
 8004db2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004db4:	441a      	add	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc2:	4a04      	ldr	r2, [pc, #16]	@ (8004dd4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d915      	bls.n	8004df4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004dc8:	e006      	b.n	8004dd8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004dca:	bf00      	nop
 8004dcc:	ffff0003 	.word	0xffff0003
 8004dd0:	10002b00 	.word	0x10002b00
 8004dd4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2203      	movs	r2, #3
 8004dec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e010      	b.n	8004e16 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	e005      	b.n	8004e08 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3304      	adds	r3, #4
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d3f3      	bcc.n	8004dfc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop

08004e24 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b089      	sub	sp, #36	@ 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004e42:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	e00a      	b.n	8004e66 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004e58:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004e5e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e64:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004e70:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004e76:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004e7c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e020      	b.n	8004efe <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	3303      	adds	r3, #3
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	3302      	adds	r3, #2
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	440b      	add	r3, r1
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004ed4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	440b      	add	r3, r1
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004ee2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	440a      	add	r2, r1
 8004eea:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004eec:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	3304      	adds	r3, #4
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	4a06      	ldr	r2, [pc, #24]	@ (8004f1c <FDCAN_CopyMessageToRAM+0xf8>)
 8004f04:	5cd3      	ldrb	r3, [r2, r3]
 8004f06:	461a      	mov	r2, r3
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d3d6      	bcc.n	8004ebc <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8004f0e:	bf00      	nop
 8004f10:	bf00      	nop
 8004f12:	3724      	adds	r7, #36	@ 0x24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	08013278 	.word	0x08013278

08004f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b089      	sub	sp, #36	@ 0x24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f2e:	4b86      	ldr	r3, [pc, #536]	@ (8005148 <HAL_GPIO_Init+0x228>)
 8004f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f32:	e18c      	b.n	800524e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	2101      	movs	r1, #1
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f40:	4013      	ands	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 817e 	beq.w	8005248 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f003 0303 	and.w	r3, r3, #3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d005      	beq.n	8004f64 <HAL_GPIO_Init+0x44>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d130      	bne.n	8004fc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	2203      	movs	r2, #3
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	43db      	mvns	r3, r3
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	091b      	lsrs	r3, r3, #4
 8004fb0:	f003 0201 	and.w	r2, r3, #1
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d017      	beq.n	8005002 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	2203      	movs	r2, #3
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d123      	bne.n	8005056 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	08da      	lsrs	r2, r3, #3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3208      	adds	r2, #8
 8005016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	220f      	movs	r2, #15
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	43db      	mvns	r3, r3
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	4013      	ands	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4313      	orrs	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	08da      	lsrs	r2, r3, #3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3208      	adds	r2, #8
 8005050:	69b9      	ldr	r1, [r7, #24]
 8005052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	2203      	movs	r2, #3
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43db      	mvns	r3, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4013      	ands	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f003 0203 	and.w	r2, r3, #3
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4313      	orrs	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 80d8 	beq.w	8005248 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005098:	4b2c      	ldr	r3, [pc, #176]	@ (800514c <HAL_GPIO_Init+0x22c>)
 800509a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800509e:	4a2b      	ldr	r2, [pc, #172]	@ (800514c <HAL_GPIO_Init+0x22c>)
 80050a0:	f043 0302 	orr.w	r3, r3, #2
 80050a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80050a8:	4b28      	ldr	r3, [pc, #160]	@ (800514c <HAL_GPIO_Init+0x22c>)
 80050aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050b6:	4a26      	ldr	r2, [pc, #152]	@ (8005150 <HAL_GPIO_Init+0x230>)
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	089b      	lsrs	r3, r3, #2
 80050bc:	3302      	adds	r3, #2
 80050be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	220f      	movs	r2, #15
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43db      	mvns	r3, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4013      	ands	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005154 <HAL_GPIO_Init+0x234>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d04a      	beq.n	8005178 <HAL_GPIO_Init+0x258>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005158 <HAL_GPIO_Init+0x238>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d02b      	beq.n	8005142 <HAL_GPIO_Init+0x222>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a1b      	ldr	r2, [pc, #108]	@ (800515c <HAL_GPIO_Init+0x23c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d025      	beq.n	800513e <HAL_GPIO_Init+0x21e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005160 <HAL_GPIO_Init+0x240>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d01f      	beq.n	800513a <HAL_GPIO_Init+0x21a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a19      	ldr	r2, [pc, #100]	@ (8005164 <HAL_GPIO_Init+0x244>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d019      	beq.n	8005136 <HAL_GPIO_Init+0x216>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a18      	ldr	r2, [pc, #96]	@ (8005168 <HAL_GPIO_Init+0x248>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d013      	beq.n	8005132 <HAL_GPIO_Init+0x212>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a17      	ldr	r2, [pc, #92]	@ (800516c <HAL_GPIO_Init+0x24c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00d      	beq.n	800512e <HAL_GPIO_Init+0x20e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a16      	ldr	r2, [pc, #88]	@ (8005170 <HAL_GPIO_Init+0x250>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <HAL_GPIO_Init+0x20a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a15      	ldr	r2, [pc, #84]	@ (8005174 <HAL_GPIO_Init+0x254>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d101      	bne.n	8005126 <HAL_GPIO_Init+0x206>
 8005122:	2309      	movs	r3, #9
 8005124:	e029      	b.n	800517a <HAL_GPIO_Init+0x25a>
 8005126:	230a      	movs	r3, #10
 8005128:	e027      	b.n	800517a <HAL_GPIO_Init+0x25a>
 800512a:	2307      	movs	r3, #7
 800512c:	e025      	b.n	800517a <HAL_GPIO_Init+0x25a>
 800512e:	2306      	movs	r3, #6
 8005130:	e023      	b.n	800517a <HAL_GPIO_Init+0x25a>
 8005132:	2305      	movs	r3, #5
 8005134:	e021      	b.n	800517a <HAL_GPIO_Init+0x25a>
 8005136:	2304      	movs	r3, #4
 8005138:	e01f      	b.n	800517a <HAL_GPIO_Init+0x25a>
 800513a:	2303      	movs	r3, #3
 800513c:	e01d      	b.n	800517a <HAL_GPIO_Init+0x25a>
 800513e:	2302      	movs	r3, #2
 8005140:	e01b      	b.n	800517a <HAL_GPIO_Init+0x25a>
 8005142:	2301      	movs	r3, #1
 8005144:	e019      	b.n	800517a <HAL_GPIO_Init+0x25a>
 8005146:	bf00      	nop
 8005148:	58000080 	.word	0x58000080
 800514c:	58024400 	.word	0x58024400
 8005150:	58000400 	.word	0x58000400
 8005154:	58020000 	.word	0x58020000
 8005158:	58020400 	.word	0x58020400
 800515c:	58020800 	.word	0x58020800
 8005160:	58020c00 	.word	0x58020c00
 8005164:	58021000 	.word	0x58021000
 8005168:	58021400 	.word	0x58021400
 800516c:	58021800 	.word	0x58021800
 8005170:	58021c00 	.word	0x58021c00
 8005174:	58022400 	.word	0x58022400
 8005178:	2300      	movs	r3, #0
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	f002 0203 	and.w	r2, r2, #3
 8005180:	0092      	lsls	r2, r2, #2
 8005182:	4093      	lsls	r3, r2
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	4313      	orrs	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800518a:	4938      	ldr	r1, [pc, #224]	@ (800526c <HAL_GPIO_Init+0x34c>)
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	089b      	lsrs	r3, r3, #2
 8005190:	3302      	adds	r3, #2
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	43db      	mvns	r3, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4013      	ands	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	43db      	mvns	r3, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4013      	ands	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80051ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	43db      	mvns	r3, r3
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4013      	ands	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	43db      	mvns	r3, r3
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4013      	ands	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	3301      	adds	r3, #1
 800524c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	fa22 f303 	lsr.w	r3, r2, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	f47f ae6b 	bne.w	8004f34 <HAL_GPIO_Init+0x14>
  }
}
 800525e:	bf00      	nop
 8005260:	bf00      	nop
 8005262:	3724      	adds	r7, #36	@ 0x24
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	58000400 	.word	0x58000400

08005270 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005278:	4b19      	ldr	r3, [pc, #100]	@ (80052e0 <HAL_PWREx_ConfigSupply+0x70>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b04      	cmp	r3, #4
 8005282:	d00a      	beq.n	800529a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005284:	4b16      	ldr	r3, [pc, #88]	@ (80052e0 <HAL_PWREx_ConfigSupply+0x70>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	429a      	cmp	r2, r3
 8005290:	d001      	beq.n	8005296 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e01f      	b.n	80052d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e01d      	b.n	80052d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800529a:	4b11      	ldr	r3, [pc, #68]	@ (80052e0 <HAL_PWREx_ConfigSupply+0x70>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f023 0207 	bic.w	r2, r3, #7
 80052a2:	490f      	ldr	r1, [pc, #60]	@ (80052e0 <HAL_PWREx_ConfigSupply+0x70>)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052aa:	f7fd fd33 	bl	8002d14 <HAL_GetTick>
 80052ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052b0:	e009      	b.n	80052c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052b2:	f7fd fd2f 	bl	8002d14 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052c0:	d901      	bls.n	80052c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e007      	b.n	80052d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052c6:	4b06      	ldr	r3, [pc, #24]	@ (80052e0 <HAL_PWREx_ConfigSupply+0x70>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052d2:	d1ee      	bne.n	80052b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	58024800 	.word	0x58024800

080052e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08c      	sub	sp, #48	@ 0x30
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e3c8      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 8087 	beq.w	8005412 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005304:	4b88      	ldr	r3, [pc, #544]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800530c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800530e:	4b86      	ldr	r3, [pc, #536]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005312:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005316:	2b10      	cmp	r3, #16
 8005318:	d007      	beq.n	800532a <HAL_RCC_OscConfig+0x46>
 800531a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531c:	2b18      	cmp	r3, #24
 800531e:	d110      	bne.n	8005342 <HAL_RCC_OscConfig+0x5e>
 8005320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d10b      	bne.n	8005342 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800532a:	4b7f      	ldr	r3, [pc, #508]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d06c      	beq.n	8005410 <HAL_RCC_OscConfig+0x12c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d168      	bne.n	8005410 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e3a2      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800534a:	d106      	bne.n	800535a <HAL_RCC_OscConfig+0x76>
 800534c:	4b76      	ldr	r3, [pc, #472]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a75      	ldr	r2, [pc, #468]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	e02e      	b.n	80053b8 <HAL_RCC_OscConfig+0xd4>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10c      	bne.n	800537c <HAL_RCC_OscConfig+0x98>
 8005362:	4b71      	ldr	r3, [pc, #452]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a70      	ldr	r2, [pc, #448]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	4b6e      	ldr	r3, [pc, #440]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a6d      	ldr	r2, [pc, #436]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005374:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	e01d      	b.n	80053b8 <HAL_RCC_OscConfig+0xd4>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005384:	d10c      	bne.n	80053a0 <HAL_RCC_OscConfig+0xbc>
 8005386:	4b68      	ldr	r3, [pc, #416]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a67      	ldr	r2, [pc, #412]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 800538c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	4b65      	ldr	r3, [pc, #404]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a64      	ldr	r2, [pc, #400]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e00b      	b.n	80053b8 <HAL_RCC_OscConfig+0xd4>
 80053a0:	4b61      	ldr	r3, [pc, #388]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a60      	ldr	r2, [pc, #384]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 80053a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	4b5e      	ldr	r3, [pc, #376]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a5d      	ldr	r2, [pc, #372]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 80053b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d013      	beq.n	80053e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c0:	f7fd fca8 	bl	8002d14 <HAL_GetTick>
 80053c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c8:	f7fd fca4 	bl	8002d14 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b64      	cmp	r3, #100	@ 0x64
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e356      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053da:	4b53      	ldr	r3, [pc, #332]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0f0      	beq.n	80053c8 <HAL_RCC_OscConfig+0xe4>
 80053e6:	e014      	b.n	8005412 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e8:	f7fd fc94 	bl	8002d14 <HAL_GetTick>
 80053ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053f0:	f7fd fc90 	bl	8002d14 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b64      	cmp	r3, #100	@ 0x64
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e342      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005402:	4b49      	ldr	r3, [pc, #292]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x10c>
 800540e:	e000      	b.n	8005412 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 808c 	beq.w	8005538 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005420:	4b41      	ldr	r3, [pc, #260]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005428:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800542a:	4b3f      	ldr	r3, [pc, #252]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 800542c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d007      	beq.n	8005446 <HAL_RCC_OscConfig+0x162>
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	2b18      	cmp	r3, #24
 800543a:	d137      	bne.n	80054ac <HAL_RCC_OscConfig+0x1c8>
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d132      	bne.n	80054ac <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005446:	4b38      	ldr	r3, [pc, #224]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	d005      	beq.n	800545e <HAL_RCC_OscConfig+0x17a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e314      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800545e:	4b32      	ldr	r3, [pc, #200]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f023 0219 	bic.w	r2, r3, #25
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	492f      	ldr	r1, [pc, #188]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 800546c:	4313      	orrs	r3, r2
 800546e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005470:	f7fd fc50 	bl	8002d14 <HAL_GetTick>
 8005474:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005478:	f7fd fc4c 	bl	8002d14 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e2fe      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800548a:	4b27      	ldr	r3, [pc, #156]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005496:	4b24      	ldr	r3, [pc, #144]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	061b      	lsls	r3, r3, #24
 80054a4:	4920      	ldr	r1, [pc, #128]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054aa:	e045      	b.n	8005538 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d026      	beq.n	8005502 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f023 0219 	bic.w	r2, r3, #25
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	4919      	ldr	r1, [pc, #100]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c6:	f7fd fc25 	bl	8002d14 <HAL_GetTick>
 80054ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ce:	f7fd fc21 	bl	8002d14 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e2d3      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054e0:	4b11      	ldr	r3, [pc, #68]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	061b      	lsls	r3, r3, #24
 80054fa:	490b      	ldr	r1, [pc, #44]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	604b      	str	r3, [r1, #4]
 8005500:	e01a      	b.n	8005538 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005502:	4b09      	ldr	r3, [pc, #36]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a08      	ldr	r2, [pc, #32]	@ (8005528 <HAL_RCC_OscConfig+0x244>)
 8005508:	f023 0301 	bic.w	r3, r3, #1
 800550c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550e:	f7fd fc01 	bl	8002d14 <HAL_GetTick>
 8005512:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005514:	e00a      	b.n	800552c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005516:	f7fd fbfd 	bl	8002d14 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d903      	bls.n	800552c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e2af      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
 8005528:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800552c:	4b96      	ldr	r3, [pc, #600]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1ee      	bne.n	8005516 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b00      	cmp	r3, #0
 8005542:	d06a      	beq.n	800561a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005544:	4b90      	ldr	r3, [pc, #576]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800554c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800554e:	4b8e      	ldr	r3, [pc, #568]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 8005550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005552:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b08      	cmp	r3, #8
 8005558:	d007      	beq.n	800556a <HAL_RCC_OscConfig+0x286>
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2b18      	cmp	r3, #24
 800555e:	d11b      	bne.n	8005598 <HAL_RCC_OscConfig+0x2b4>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	2b01      	cmp	r3, #1
 8005568:	d116      	bne.n	8005598 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800556a:	4b87      	ldr	r3, [pc, #540]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <HAL_RCC_OscConfig+0x29e>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	2b80      	cmp	r3, #128	@ 0x80
 800557c:	d001      	beq.n	8005582 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e282      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005582:	4b81      	ldr	r3, [pc, #516]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	061b      	lsls	r3, r3, #24
 8005590:	497d      	ldr	r1, [pc, #500]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 8005592:	4313      	orrs	r3, r2
 8005594:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005596:	e040      	b.n	800561a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d023      	beq.n	80055e8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055a0:	4b79      	ldr	r3, [pc, #484]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a78      	ldr	r2, [pc, #480]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 80055a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ac:	f7fd fbb2 	bl	8002d14 <HAL_GetTick>
 80055b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80055b4:	f7fd fbae 	bl	8002d14 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e260      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055c6:	4b70      	ldr	r3, [pc, #448]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055d2:	4b6d      	ldr	r3, [pc, #436]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	061b      	lsls	r3, r3, #24
 80055e0:	4969      	ldr	r1, [pc, #420]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60cb      	str	r3, [r1, #12]
 80055e6:	e018      	b.n	800561a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80055e8:	4b67      	ldr	r3, [pc, #412]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a66      	ldr	r2, [pc, #408]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 80055ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fd fb8e 	bl	8002d14 <HAL_GetTick>
 80055f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80055fc:	f7fd fb8a 	bl	8002d14 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e23c      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800560e:	4b5e      	ldr	r3, [pc, #376]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d036      	beq.n	8005694 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d019      	beq.n	8005662 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800562e:	4b56      	ldr	r3, [pc, #344]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 8005630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005632:	4a55      	ldr	r2, [pc, #340]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563a:	f7fd fb6b 	bl	8002d14 <HAL_GetTick>
 800563e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005642:	f7fd fb67 	bl	8002d14 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e219      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005654:	4b4c      	ldr	r3, [pc, #304]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 8005656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f0      	beq.n	8005642 <HAL_RCC_OscConfig+0x35e>
 8005660:	e018      	b.n	8005694 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005662:	4b49      	ldr	r3, [pc, #292]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 8005664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005666:	4a48      	ldr	r2, [pc, #288]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566e:	f7fd fb51 	bl	8002d14 <HAL_GetTick>
 8005672:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005674:	e008      	b.n	8005688 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005676:	f7fd fb4d 	bl	8002d14 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e1ff      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005688:	4b3f      	ldr	r3, [pc, #252]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 800568a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1f0      	bne.n	8005676 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	2b00      	cmp	r3, #0
 800569e:	d036      	beq.n	800570e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d019      	beq.n	80056dc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056a8:	4b37      	ldr	r3, [pc, #220]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a36      	ldr	r2, [pc, #216]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 80056ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80056b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056b4:	f7fd fb2e 	bl	8002d14 <HAL_GetTick>
 80056b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056bc:	f7fd fb2a 	bl	8002d14 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e1dc      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056ce:	4b2e      	ldr	r3, [pc, #184]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0f0      	beq.n	80056bc <HAL_RCC_OscConfig+0x3d8>
 80056da:	e018      	b.n	800570e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a29      	ldr	r2, [pc, #164]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 80056e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056e8:	f7fd fb14 	bl	8002d14 <HAL_GetTick>
 80056ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056f0:	f7fd fb10 	bl	8002d14 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e1c2      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005702:	4b21      	ldr	r3, [pc, #132]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 8086 	beq.w	8005828 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800571c:	4b1b      	ldr	r3, [pc, #108]	@ (800578c <HAL_RCC_OscConfig+0x4a8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a1a      	ldr	r2, [pc, #104]	@ (800578c <HAL_RCC_OscConfig+0x4a8>)
 8005722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005726:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005728:	f7fd faf4 	bl	8002d14 <HAL_GetTick>
 800572c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005730:	f7fd faf0 	bl	8002d14 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b64      	cmp	r3, #100	@ 0x64
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e1a2      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005742:	4b12      	ldr	r3, [pc, #72]	@ (800578c <HAL_RCC_OscConfig+0x4a8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d106      	bne.n	8005764 <HAL_RCC_OscConfig+0x480>
 8005756:	4b0c      	ldr	r3, [pc, #48]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 8005758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800575a:	4a0b      	ldr	r2, [pc, #44]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	6713      	str	r3, [r2, #112]	@ 0x70
 8005762:	e032      	b.n	80057ca <HAL_RCC_OscConfig+0x4e6>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d111      	bne.n	8005790 <HAL_RCC_OscConfig+0x4ac>
 800576c:	4b06      	ldr	r3, [pc, #24]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005770:	4a05      	ldr	r2, [pc, #20]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 8005772:	f023 0301 	bic.w	r3, r3, #1
 8005776:	6713      	str	r3, [r2, #112]	@ 0x70
 8005778:	4b03      	ldr	r3, [pc, #12]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 800577a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577c:	4a02      	ldr	r2, [pc, #8]	@ (8005788 <HAL_RCC_OscConfig+0x4a4>)
 800577e:	f023 0304 	bic.w	r3, r3, #4
 8005782:	6713      	str	r3, [r2, #112]	@ 0x70
 8005784:	e021      	b.n	80057ca <HAL_RCC_OscConfig+0x4e6>
 8005786:	bf00      	nop
 8005788:	58024400 	.word	0x58024400
 800578c:	58024800 	.word	0x58024800
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	2b05      	cmp	r3, #5
 8005796:	d10c      	bne.n	80057b2 <HAL_RCC_OscConfig+0x4ce>
 8005798:	4b83      	ldr	r3, [pc, #524]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800579c:	4a82      	ldr	r2, [pc, #520]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 800579e:	f043 0304 	orr.w	r3, r3, #4
 80057a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057a4:	4b80      	ldr	r3, [pc, #512]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 80057a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a8:	4a7f      	ldr	r2, [pc, #508]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 80057aa:	f043 0301 	orr.w	r3, r3, #1
 80057ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80057b0:	e00b      	b.n	80057ca <HAL_RCC_OscConfig+0x4e6>
 80057b2:	4b7d      	ldr	r3, [pc, #500]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 80057b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b6:	4a7c      	ldr	r2, [pc, #496]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 80057b8:	f023 0301 	bic.w	r3, r3, #1
 80057bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80057be:	4b7a      	ldr	r3, [pc, #488]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 80057c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c2:	4a79      	ldr	r2, [pc, #484]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 80057c4:	f023 0304 	bic.w	r3, r3, #4
 80057c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d015      	beq.n	80057fe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d2:	f7fd fa9f 	bl	8002d14 <HAL_GetTick>
 80057d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057d8:	e00a      	b.n	80057f0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057da:	f7fd fa9b 	bl	8002d14 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e14b      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057f0:	4b6d      	ldr	r3, [pc, #436]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 80057f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0ee      	beq.n	80057da <HAL_RCC_OscConfig+0x4f6>
 80057fc:	e014      	b.n	8005828 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fe:	f7fd fa89 	bl	8002d14 <HAL_GetTick>
 8005802:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005804:	e00a      	b.n	800581c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005806:	f7fd fa85 	bl	8002d14 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005814:	4293      	cmp	r3, r2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e135      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800581c:	4b62      	ldr	r3, [pc, #392]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 800581e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1ee      	bne.n	8005806 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 812a 	beq.w	8005a86 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005832:	4b5d      	ldr	r3, [pc, #372]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800583a:	2b18      	cmp	r3, #24
 800583c:	f000 80ba 	beq.w	80059b4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005844:	2b02      	cmp	r3, #2
 8005846:	f040 8095 	bne.w	8005974 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584a:	4b57      	ldr	r3, [pc, #348]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a56      	ldr	r2, [pc, #344]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 8005850:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005856:	f7fd fa5d 	bl	8002d14 <HAL_GetTick>
 800585a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800585e:	f7fd fa59 	bl	8002d14 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e10b      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005870:	4b4d      	ldr	r3, [pc, #308]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1f0      	bne.n	800585e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800587c:	4b4a      	ldr	r3, [pc, #296]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 800587e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005880:	4b4a      	ldr	r3, [pc, #296]	@ (80059ac <HAL_RCC_OscConfig+0x6c8>)
 8005882:	4013      	ands	r3, r2
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800588c:	0112      	lsls	r2, r2, #4
 800588e:	430a      	orrs	r2, r1
 8005890:	4945      	ldr	r1, [pc, #276]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 8005892:	4313      	orrs	r3, r2
 8005894:	628b      	str	r3, [r1, #40]	@ 0x28
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	3b01      	subs	r3, #1
 800589c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a4:	3b01      	subs	r3, #1
 80058a6:	025b      	lsls	r3, r3, #9
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b0:	3b01      	subs	r3, #1
 80058b2:	041b      	lsls	r3, r3, #16
 80058b4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058be:	3b01      	subs	r3, #1
 80058c0:	061b      	lsls	r3, r3, #24
 80058c2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058c6:	4938      	ldr	r1, [pc, #224]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80058cc:	4b36      	ldr	r3, [pc, #216]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 80058ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d0:	4a35      	ldr	r2, [pc, #212]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 80058d2:	f023 0301 	bic.w	r3, r3, #1
 80058d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058d8:	4b33      	ldr	r3, [pc, #204]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 80058da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058dc:	4b34      	ldr	r3, [pc, #208]	@ (80059b0 <HAL_RCC_OscConfig+0x6cc>)
 80058de:	4013      	ands	r3, r2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80058e4:	00d2      	lsls	r2, r2, #3
 80058e6:	4930      	ldr	r1, [pc, #192]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80058ec:	4b2e      	ldr	r3, [pc, #184]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 80058ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f0:	f023 020c 	bic.w	r2, r3, #12
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f8:	492b      	ldr	r1, [pc, #172]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80058fe:	4b2a      	ldr	r3, [pc, #168]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 8005900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005902:	f023 0202 	bic.w	r2, r3, #2
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590a:	4927      	ldr	r1, [pc, #156]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 800590c:	4313      	orrs	r3, r2
 800590e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005910:	4b25      	ldr	r3, [pc, #148]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 8005912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005914:	4a24      	ldr	r2, [pc, #144]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 8005916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800591a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800591c:	4b22      	ldr	r3, [pc, #136]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 800591e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005920:	4a21      	ldr	r2, [pc, #132]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 8005922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005928:	4b1f      	ldr	r3, [pc, #124]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 800592a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592c:	4a1e      	ldr	r2, [pc, #120]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 800592e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005934:	4b1c      	ldr	r3, [pc, #112]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 8005936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005938:	4a1b      	ldr	r2, [pc, #108]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005940:	4b19      	ldr	r3, [pc, #100]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a18      	ldr	r2, [pc, #96]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 8005946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800594a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fd f9e2 	bl	8002d14 <HAL_GetTick>
 8005950:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005954:	f7fd f9de 	bl	8002d14 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e090      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005966:	4b10      	ldr	r3, [pc, #64]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCC_OscConfig+0x670>
 8005972:	e088      	b.n	8005a86 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005974:	4b0c      	ldr	r3, [pc, #48]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a0b      	ldr	r2, [pc, #44]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 800597a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800597e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005980:	f7fd f9c8 	bl	8002d14 <HAL_GetTick>
 8005984:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005988:	f7fd f9c4 	bl	8002d14 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e076      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800599a:	4b03      	ldr	r3, [pc, #12]	@ (80059a8 <HAL_RCC_OscConfig+0x6c4>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f0      	bne.n	8005988 <HAL_RCC_OscConfig+0x6a4>
 80059a6:	e06e      	b.n	8005a86 <HAL_RCC_OscConfig+0x7a2>
 80059a8:	58024400 	.word	0x58024400
 80059ac:	fffffc0c 	.word	0xfffffc0c
 80059b0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059b4:	4b36      	ldr	r3, [pc, #216]	@ (8005a90 <HAL_RCC_OscConfig+0x7ac>)
 80059b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059ba:	4b35      	ldr	r3, [pc, #212]	@ (8005a90 <HAL_RCC_OscConfig+0x7ac>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d031      	beq.n	8005a2c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f003 0203 	and.w	r2, r3, #3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d12a      	bne.n	8005a2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	091b      	lsrs	r3, r3, #4
 80059da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d122      	bne.n	8005a2c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d11a      	bne.n	8005a2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	0a5b      	lsrs	r3, r3, #9
 80059fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d111      	bne.n	8005a2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	0c1b      	lsrs	r3, r3, #16
 8005a0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d108      	bne.n	8005a2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	0e1b      	lsrs	r3, r3, #24
 8005a1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d001      	beq.n	8005a30 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e02b      	b.n	8005a88 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005a30:	4b17      	ldr	r3, [pc, #92]	@ (8005a90 <HAL_RCC_OscConfig+0x7ac>)
 8005a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a34:	08db      	lsrs	r3, r3, #3
 8005a36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a3a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d01f      	beq.n	8005a86 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005a46:	4b12      	ldr	r3, [pc, #72]	@ (8005a90 <HAL_RCC_OscConfig+0x7ac>)
 8005a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4a:	4a11      	ldr	r2, [pc, #68]	@ (8005a90 <HAL_RCC_OscConfig+0x7ac>)
 8005a4c:	f023 0301 	bic.w	r3, r3, #1
 8005a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a52:	f7fd f95f 	bl	8002d14 <HAL_GetTick>
 8005a56:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005a58:	bf00      	nop
 8005a5a:	f7fd f95b 	bl	8002d14 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d0f9      	beq.n	8005a5a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a66:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <HAL_RCC_OscConfig+0x7ac>)
 8005a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a94 <HAL_RCC_OscConfig+0x7b0>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a72:	00d2      	lsls	r2, r2, #3
 8005a74:	4906      	ldr	r1, [pc, #24]	@ (8005a90 <HAL_RCC_OscConfig+0x7ac>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005a7a:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <HAL_RCC_OscConfig+0x7ac>)
 8005a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7e:	4a04      	ldr	r2, [pc, #16]	@ (8005a90 <HAL_RCC_OscConfig+0x7ac>)
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3730      	adds	r7, #48	@ 0x30
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	58024400 	.word	0x58024400
 8005a94:	ffff0007 	.word	0xffff0007

08005a98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e19c      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005aac:	4b8a      	ldr	r3, [pc, #552]	@ (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 030f 	and.w	r3, r3, #15
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d910      	bls.n	8005adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aba:	4b87      	ldr	r3, [pc, #540]	@ (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 020f 	bic.w	r2, r3, #15
 8005ac2:	4985      	ldr	r1, [pc, #532]	@ (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aca:	4b83      	ldr	r3, [pc, #524]	@ (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d001      	beq.n	8005adc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e184      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d010      	beq.n	8005b0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	4b7b      	ldr	r3, [pc, #492]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d908      	bls.n	8005b0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005af8:	4b78      	ldr	r3, [pc, #480]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	4975      	ldr	r1, [pc, #468]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d010      	beq.n	8005b38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	4b70      	ldr	r3, [pc, #448]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d908      	bls.n	8005b38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b26:	4b6d      	ldr	r3, [pc, #436]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	496a      	ldr	r1, [pc, #424]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d010      	beq.n	8005b66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699a      	ldr	r2, [r3, #24]
 8005b48:	4b64      	ldr	r3, [pc, #400]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d908      	bls.n	8005b66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b54:	4b61      	ldr	r3, [pc, #388]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	495e      	ldr	r1, [pc, #376]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d010      	beq.n	8005b94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69da      	ldr	r2, [r3, #28]
 8005b76:	4b59      	ldr	r3, [pc, #356]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d908      	bls.n	8005b94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b82:	4b56      	ldr	r3, [pc, #344]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	4953      	ldr	r1, [pc, #332]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d010      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d908      	bls.n	8005bc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	f023 020f 	bic.w	r2, r3, #15
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	4947      	ldr	r1, [pc, #284]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d055      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bce:	4b43      	ldr	r3, [pc, #268]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	4940      	ldr	r1, [pc, #256]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d107      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005be8:	4b3c      	ldr	r3, [pc, #240]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d121      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0f6      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d107      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c00:	4b36      	ldr	r3, [pc, #216]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d115      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0ea      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d107      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c18:	4b30      	ldr	r3, [pc, #192]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e0de      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c28:	4b2c      	ldr	r3, [pc, #176]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0d6      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c38:	4b28      	ldr	r3, [pc, #160]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f023 0207 	bic.w	r2, r3, #7
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	4925      	ldr	r1, [pc, #148]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c4a:	f7fd f863 	bl	8002d14 <HAL_GetTick>
 8005c4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c50:	e00a      	b.n	8005c68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c52:	f7fd f85f 	bl	8002d14 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e0be      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c68:	4b1c      	ldr	r3, [pc, #112]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d1eb      	bne.n	8005c52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d010      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	4b14      	ldr	r3, [pc, #80]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d208      	bcs.n	8005ca8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c96:	4b11      	ldr	r3, [pc, #68]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f023 020f 	bic.w	r2, r3, #15
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	490e      	ldr	r1, [pc, #56]	@ (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d214      	bcs.n	8005ce0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb6:	4b08      	ldr	r3, [pc, #32]	@ (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f023 020f 	bic.w	r2, r3, #15
 8005cbe:	4906      	ldr	r1, [pc, #24]	@ (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc6:	4b04      	ldr	r3, [pc, #16]	@ (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d005      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e086      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
 8005cd8:	52002000 	.word	0x52002000
 8005cdc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d010      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691a      	ldr	r2, [r3, #16]
 8005cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d208      	bcs.n	8005d0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	4939      	ldr	r1, [pc, #228]	@ (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d010      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695a      	ldr	r2, [r3, #20]
 8005d1e:	4b34      	ldr	r3, [pc, #208]	@ (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d208      	bcs.n	8005d3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d2a:	4b31      	ldr	r3, [pc, #196]	@ (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	492e      	ldr	r1, [pc, #184]	@ (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d010      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699a      	ldr	r2, [r3, #24]
 8005d4c:	4b28      	ldr	r3, [pc, #160]	@ (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d208      	bcs.n	8005d6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d58:	4b25      	ldr	r3, [pc, #148]	@ (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	4922      	ldr	r1, [pc, #136]	@ (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d010      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69da      	ldr	r2, [r3, #28]
 8005d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d208      	bcs.n	8005d98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d86:	4b1a      	ldr	r3, [pc, #104]	@ (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	4917      	ldr	r1, [pc, #92]	@ (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d98:	f000 f834 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	4b14      	ldr	r3, [pc, #80]	@ (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	0a1b      	lsrs	r3, r3, #8
 8005da4:	f003 030f 	and.w	r3, r3, #15
 8005da8:	4912      	ldr	r1, [pc, #72]	@ (8005df4 <HAL_RCC_ClockConfig+0x35c>)
 8005daa:	5ccb      	ldrb	r3, [r1, r3]
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
 8005db4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005db6:	4b0e      	ldr	r3, [pc, #56]	@ (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8005df4 <HAL_RCC_ClockConfig+0x35c>)
 8005dc0:	5cd3      	ldrb	r3, [r2, r3]
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8005df8 <HAL_RCC_ClockConfig+0x360>)
 8005dce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8005dfc <HAL_RCC_ClockConfig+0x364>)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8005e00 <HAL_RCC_ClockConfig+0x368>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fc ff50 	bl	8002c80 <HAL_InitTick>
 8005de0:	4603      	mov	r3, r0
 8005de2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	58024400 	.word	0x58024400
 8005df4:	08013268 	.word	0x08013268
 8005df8:	2400000c 	.word	0x2400000c
 8005dfc:	24000008 	.word	0x24000008
 8005e00:	24000040 	.word	0x24000040

08005e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b089      	sub	sp, #36	@ 0x24
 8005e08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e0a:	4bb3      	ldr	r3, [pc, #716]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e12:	2b18      	cmp	r3, #24
 8005e14:	f200 8155 	bhi.w	80060c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005e18:	a201      	add	r2, pc, #4	@ (adr r2, 8005e20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005e85 	.word	0x08005e85
 8005e24:	080060c3 	.word	0x080060c3
 8005e28:	080060c3 	.word	0x080060c3
 8005e2c:	080060c3 	.word	0x080060c3
 8005e30:	080060c3 	.word	0x080060c3
 8005e34:	080060c3 	.word	0x080060c3
 8005e38:	080060c3 	.word	0x080060c3
 8005e3c:	080060c3 	.word	0x080060c3
 8005e40:	08005eab 	.word	0x08005eab
 8005e44:	080060c3 	.word	0x080060c3
 8005e48:	080060c3 	.word	0x080060c3
 8005e4c:	080060c3 	.word	0x080060c3
 8005e50:	080060c3 	.word	0x080060c3
 8005e54:	080060c3 	.word	0x080060c3
 8005e58:	080060c3 	.word	0x080060c3
 8005e5c:	080060c3 	.word	0x080060c3
 8005e60:	08005eb1 	.word	0x08005eb1
 8005e64:	080060c3 	.word	0x080060c3
 8005e68:	080060c3 	.word	0x080060c3
 8005e6c:	080060c3 	.word	0x080060c3
 8005e70:	080060c3 	.word	0x080060c3
 8005e74:	080060c3 	.word	0x080060c3
 8005e78:	080060c3 	.word	0x080060c3
 8005e7c:	080060c3 	.word	0x080060c3
 8005e80:	08005eb7 	.word	0x08005eb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e84:	4b94      	ldr	r3, [pc, #592]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d009      	beq.n	8005ea4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e90:	4b91      	ldr	r3, [pc, #580]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	08db      	lsrs	r3, r3, #3
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	4a90      	ldr	r2, [pc, #576]	@ (80060dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005ea2:	e111      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ea4:	4b8d      	ldr	r3, [pc, #564]	@ (80060dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ea6:	61bb      	str	r3, [r7, #24]
      break;
 8005ea8:	e10e      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005eaa:	4b8d      	ldr	r3, [pc, #564]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005eac:	61bb      	str	r3, [r7, #24]
      break;
 8005eae:	e10b      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005eb0:	4b8c      	ldr	r3, [pc, #560]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005eb2:	61bb      	str	r3, [r7, #24]
      break;
 8005eb4:	e108      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005eb6:	4b88      	ldr	r3, [pc, #544]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005ec0:	4b85      	ldr	r3, [pc, #532]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec4:	091b      	lsrs	r3, r3, #4
 8005ec6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ecc:	4b82      	ldr	r3, [pc, #520]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005ed6:	4b80      	ldr	r3, [pc, #512]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eda:	08db      	lsrs	r3, r3, #3
 8005edc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	fb02 f303 	mul.w	r3, r2, r3
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 80e1 	beq.w	80060bc <HAL_RCC_GetSysClockFreq+0x2b8>
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	f000 8083 	beq.w	8006008 <HAL_RCC_GetSysClockFreq+0x204>
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	f200 80a1 	bhi.w	800604c <HAL_RCC_GetSysClockFreq+0x248>
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_RCC_GetSysClockFreq+0x114>
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d056      	beq.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f16:	e099      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f18:	4b6f      	ldr	r3, [pc, #444]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d02d      	beq.n	8005f80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f24:	4b6c      	ldr	r3, [pc, #432]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	08db      	lsrs	r3, r3, #3
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	4a6b      	ldr	r2, [pc, #428]	@ (80060dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
 8005f34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	ee07 3a90 	vmov	s15, r3
 8005f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4e:	4b62      	ldr	r3, [pc, #392]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f62:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80060e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005f7e:	e087      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80060ec <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f92:	4b51      	ldr	r3, [pc, #324]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fa6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80060e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fc2:	e065      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fce:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80060f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd6:	4b40      	ldr	r3, [pc, #256]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80060e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006002:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006006:	e043      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006012:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80060f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800601a:	4b2f      	ldr	r3, [pc, #188]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800601c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602a:	ed97 6a02 	vldr	s12, [r7, #8]
 800602e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80060e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800603e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006046:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800604a:	e021      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006056:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80060f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800605a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605e:	4b1e      	ldr	r3, [pc, #120]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006072:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80060e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800608e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006090:	4b11      	ldr	r3, [pc, #68]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006094:	0a5b      	lsrs	r3, r3, #9
 8006096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800609a:	3301      	adds	r3, #1
 800609c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b4:	ee17 3a90 	vmov	r3, s15
 80060b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80060ba:	e005      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	61bb      	str	r3, [r7, #24]
      break;
 80060c0:	e002      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80060c2:	4b07      	ldr	r3, [pc, #28]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060c4:	61bb      	str	r3, [r7, #24]
      break;
 80060c6:	bf00      	nop
  }

  return sysclockfreq;
 80060c8:	69bb      	ldr	r3, [r7, #24]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3724      	adds	r7, #36	@ 0x24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	58024400 	.word	0x58024400
 80060dc:	03d09000 	.word	0x03d09000
 80060e0:	003d0900 	.word	0x003d0900
 80060e4:	017d7840 	.word	0x017d7840
 80060e8:	46000000 	.word	0x46000000
 80060ec:	4c742400 	.word	0x4c742400
 80060f0:	4a742400 	.word	0x4a742400
 80060f4:	4bbebc20 	.word	0x4bbebc20

080060f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80060fe:	f7ff fe81 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8006102:	4602      	mov	r2, r0
 8006104:	4b10      	ldr	r3, [pc, #64]	@ (8006148 <HAL_RCC_GetHCLKFreq+0x50>)
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	0a1b      	lsrs	r3, r3, #8
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	490f      	ldr	r1, [pc, #60]	@ (800614c <HAL_RCC_GetHCLKFreq+0x54>)
 8006110:	5ccb      	ldrb	r3, [r1, r3]
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800611c:	4b0a      	ldr	r3, [pc, #40]	@ (8006148 <HAL_RCC_GetHCLKFreq+0x50>)
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	4a09      	ldr	r2, [pc, #36]	@ (800614c <HAL_RCC_GetHCLKFreq+0x54>)
 8006126:	5cd3      	ldrb	r3, [r2, r3]
 8006128:	f003 031f 	and.w	r3, r3, #31
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	fa22 f303 	lsr.w	r3, r2, r3
 8006132:	4a07      	ldr	r2, [pc, #28]	@ (8006150 <HAL_RCC_GetHCLKFreq+0x58>)
 8006134:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006136:	4a07      	ldr	r2, [pc, #28]	@ (8006154 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800613c:	4b04      	ldr	r3, [pc, #16]	@ (8006150 <HAL_RCC_GetHCLKFreq+0x58>)
 800613e:	681b      	ldr	r3, [r3, #0]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	58024400 	.word	0x58024400
 800614c:	08013268 	.word	0x08013268
 8006150:	2400000c 	.word	0x2400000c
 8006154:	24000008 	.word	0x24000008

08006158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800615c:	f7ff ffcc 	bl	80060f8 <HAL_RCC_GetHCLKFreq>
 8006160:	4602      	mov	r2, r0
 8006162:	4b06      	ldr	r3, [pc, #24]	@ (800617c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	091b      	lsrs	r3, r3, #4
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	4904      	ldr	r1, [pc, #16]	@ (8006180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800616e:	5ccb      	ldrb	r3, [r1, r3]
 8006170:	f003 031f 	and.w	r3, r3, #31
 8006174:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006178:	4618      	mov	r0, r3
 800617a:	bd80      	pop	{r7, pc}
 800617c:	58024400 	.word	0x58024400
 8006180:	08013268 	.word	0x08013268

08006184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006188:	f7ff ffb6 	bl	80060f8 <HAL_RCC_GetHCLKFreq>
 800618c:	4602      	mov	r2, r0
 800618e:	4b06      	ldr	r3, [pc, #24]	@ (80061a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	4904      	ldr	r1, [pc, #16]	@ (80061ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800619a:	5ccb      	ldrb	r3, [r1, r3]
 800619c:	f003 031f 	and.w	r3, r3, #31
 80061a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	58024400 	.word	0x58024400
 80061ac:	08013268 	.word	0x08013268

080061b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061b4:	b0c6      	sub	sp, #280	@ 0x118
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061bc:	2300      	movs	r3, #0
 80061be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061c2:	2300      	movs	r3, #0
 80061c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80061d4:	2500      	movs	r5, #0
 80061d6:	ea54 0305 	orrs.w	r3, r4, r5
 80061da:	d049      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80061dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061e6:	d02f      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80061e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061ec:	d828      	bhi.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80061ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061f2:	d01a      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80061f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061f8:	d822      	bhi.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80061fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006202:	d007      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006204:	e01c      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006206:	4bab      	ldr	r3, [pc, #684]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620a:	4aaa      	ldr	r2, [pc, #680]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800620c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006210:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006212:	e01a      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006218:	3308      	adds	r3, #8
 800621a:	2102      	movs	r1, #2
 800621c:	4618      	mov	r0, r3
 800621e:	f001 fc25 	bl	8007a6c <RCCEx_PLL2_Config>
 8006222:	4603      	mov	r3, r0
 8006224:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006228:	e00f      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800622a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622e:	3328      	adds	r3, #40	@ 0x28
 8006230:	2102      	movs	r1, #2
 8006232:	4618      	mov	r0, r3
 8006234:	f001 fccc 	bl	8007bd0 <RCCEx_PLL3_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800623e:	e004      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006246:	e000      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800624a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006252:	4b98      	ldr	r3, [pc, #608]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006256:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800625a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006260:	4a94      	ldr	r2, [pc, #592]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006262:	430b      	orrs	r3, r1
 8006264:	6513      	str	r3, [r2, #80]	@ 0x50
 8006266:	e003      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006268:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800626c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800627c:	f04f 0900 	mov.w	r9, #0
 8006280:	ea58 0309 	orrs.w	r3, r8, r9
 8006284:	d047      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628c:	2b04      	cmp	r3, #4
 800628e:	d82a      	bhi.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006290:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	080062ad 	.word	0x080062ad
 800629c:	080062bb 	.word	0x080062bb
 80062a0:	080062d1 	.word	0x080062d1
 80062a4:	080062ef 	.word	0x080062ef
 80062a8:	080062ef 	.word	0x080062ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ac:	4b81      	ldr	r3, [pc, #516]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b0:	4a80      	ldr	r2, [pc, #512]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062b8:	e01a      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062be:	3308      	adds	r3, #8
 80062c0:	2100      	movs	r1, #0
 80062c2:	4618      	mov	r0, r3
 80062c4:	f001 fbd2 	bl	8007a6c <RCCEx_PLL2_Config>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062ce:	e00f      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d4:	3328      	adds	r3, #40	@ 0x28
 80062d6:	2100      	movs	r1, #0
 80062d8:	4618      	mov	r0, r3
 80062da:	f001 fc79 	bl	8007bd0 <RCCEx_PLL3_Config>
 80062de:	4603      	mov	r3, r0
 80062e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062e4:	e004      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062ec:	e000      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80062ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062f8:	4b6e      	ldr	r3, [pc, #440]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062fc:	f023 0107 	bic.w	r1, r3, #7
 8006300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006306:	4a6b      	ldr	r2, [pc, #428]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006308:	430b      	orrs	r3, r1
 800630a:	6513      	str	r3, [r2, #80]	@ 0x50
 800630c:	e003      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006312:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006322:	f04f 0b00 	mov.w	fp, #0
 8006326:	ea5a 030b 	orrs.w	r3, sl, fp
 800632a:	d05b      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800632c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006334:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006338:	d03b      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800633a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800633e:	d834      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006340:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006344:	d037      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006346:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800634a:	d82e      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800634c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006350:	d033      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006352:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006356:	d828      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006358:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800635c:	d01a      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800635e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006362:	d822      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006368:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800636c:	d007      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800636e:	e01c      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006370:	4b50      	ldr	r3, [pc, #320]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006374:	4a4f      	ldr	r2, [pc, #316]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800637a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800637c:	e01e      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800637e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006382:	3308      	adds	r3, #8
 8006384:	2100      	movs	r1, #0
 8006386:	4618      	mov	r0, r3
 8006388:	f001 fb70 	bl	8007a6c <RCCEx_PLL2_Config>
 800638c:	4603      	mov	r3, r0
 800638e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006392:	e013      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006398:	3328      	adds	r3, #40	@ 0x28
 800639a:	2100      	movs	r1, #0
 800639c:	4618      	mov	r0, r3
 800639e:	f001 fc17 	bl	8007bd0 <RCCEx_PLL3_Config>
 80063a2:	4603      	mov	r3, r0
 80063a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063a8:	e008      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063b0:	e004      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80063b2:	bf00      	nop
 80063b4:	e002      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80063b6:	bf00      	nop
 80063b8:	e000      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80063ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10b      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063c4:	4b3b      	ldr	r3, [pc, #236]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80063cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80063d4:	4a37      	ldr	r2, [pc, #220]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063d6:	430b      	orrs	r3, r1
 80063d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80063da:	e003      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80063f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80063f4:	2300      	movs	r3, #0
 80063f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80063fe:	460b      	mov	r3, r1
 8006400:	4313      	orrs	r3, r2
 8006402:	d05d      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006408:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800640c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006410:	d03b      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006412:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006416:	d834      	bhi.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006418:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800641c:	d037      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800641e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006422:	d82e      	bhi.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006424:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006428:	d033      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800642a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800642e:	d828      	bhi.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006430:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006434:	d01a      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006436:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800643a:	d822      	bhi.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006440:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006444:	d007      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006446:	e01c      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006448:	4b1a      	ldr	r3, [pc, #104]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800644a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644c:	4a19      	ldr	r2, [pc, #100]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800644e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006454:	e01e      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645a:	3308      	adds	r3, #8
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f001 fb04 	bl	8007a6c <RCCEx_PLL2_Config>
 8006464:	4603      	mov	r3, r0
 8006466:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800646a:	e013      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800646c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006470:	3328      	adds	r3, #40	@ 0x28
 8006472:	2100      	movs	r1, #0
 8006474:	4618      	mov	r0, r3
 8006476:	f001 fbab 	bl	8007bd0 <RCCEx_PLL3_Config>
 800647a:	4603      	mov	r3, r0
 800647c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006480:	e008      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006488:	e004      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800648a:	bf00      	nop
 800648c:	e002      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800648e:	bf00      	nop
 8006490:	e000      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006494:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10d      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800649c:	4b05      	ldr	r3, [pc, #20]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800649e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80064a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80064ac:	4a01      	ldr	r2, [pc, #4]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064ae:	430b      	orrs	r3, r1
 80064b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80064b2:	e005      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80064b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80064cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80064d0:	2300      	movs	r3, #0
 80064d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80064d6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80064da:	460b      	mov	r3, r1
 80064dc:	4313      	orrs	r3, r2
 80064de:	d03a      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80064e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064e6:	2b30      	cmp	r3, #48	@ 0x30
 80064e8:	d01f      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80064ea:	2b30      	cmp	r3, #48	@ 0x30
 80064ec:	d819      	bhi.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d00c      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d815      	bhi.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d019      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80064fa:	2b10      	cmp	r3, #16
 80064fc:	d111      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064fe:	4baa      	ldr	r3, [pc, #680]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006502:	4aa9      	ldr	r2, [pc, #676]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006508:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800650a:	e011      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800650c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006510:	3308      	adds	r3, #8
 8006512:	2102      	movs	r1, #2
 8006514:	4618      	mov	r0, r3
 8006516:	f001 faa9 	bl	8007a6c <RCCEx_PLL2_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006520:	e006      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006528:	e002      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800652a:	bf00      	nop
 800652c:	e000      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800652e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006530:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10a      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006538:	4b9b      	ldr	r3, [pc, #620]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800653a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800653c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006546:	4a98      	ldr	r2, [pc, #608]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006548:	430b      	orrs	r3, r1
 800654a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800654c:	e003      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006552:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006562:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006566:	2300      	movs	r3, #0
 8006568:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800656c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006570:	460b      	mov	r3, r1
 8006572:	4313      	orrs	r3, r2
 8006574:	d051      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800657c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006580:	d035      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006582:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006586:	d82e      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006588:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800658c:	d031      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800658e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006592:	d828      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006594:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006598:	d01a      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800659a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800659e:	d822      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80065a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065a8:	d007      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80065aa:	e01c      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ac:	4b7e      	ldr	r3, [pc, #504]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b0:	4a7d      	ldr	r2, [pc, #500]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065b8:	e01c      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065be:	3308      	adds	r3, #8
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 fa52 	bl	8007a6c <RCCEx_PLL2_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065ce:	e011      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d4:	3328      	adds	r3, #40	@ 0x28
 80065d6:	2100      	movs	r1, #0
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 faf9 	bl	8007bd0 <RCCEx_PLL3_Config>
 80065de:	4603      	mov	r3, r0
 80065e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065e4:	e006      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065ec:	e002      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80065ee:	bf00      	nop
 80065f0:	e000      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80065f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80065fc:	4b6a      	ldr	r3, [pc, #424]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006600:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800660a:	4a67      	ldr	r2, [pc, #412]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800660c:	430b      	orrs	r3, r1
 800660e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006610:	e003      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006612:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006616:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800661a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006626:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800662a:	2300      	movs	r3, #0
 800662c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006630:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006634:	460b      	mov	r3, r1
 8006636:	4313      	orrs	r3, r2
 8006638:	d053      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800663a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006640:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006644:	d033      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006646:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800664a:	d82c      	bhi.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800664c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006650:	d02f      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006652:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006656:	d826      	bhi.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006658:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800665c:	d02b      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800665e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006662:	d820      	bhi.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006664:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006668:	d012      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800666a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800666e:	d81a      	bhi.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006670:	2b00      	cmp	r3, #0
 8006672:	d022      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006678:	d115      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800667a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800667e:	3308      	adds	r3, #8
 8006680:	2101      	movs	r1, #1
 8006682:	4618      	mov	r0, r3
 8006684:	f001 f9f2 	bl	8007a6c <RCCEx_PLL2_Config>
 8006688:	4603      	mov	r3, r0
 800668a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800668e:	e015      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006694:	3328      	adds	r3, #40	@ 0x28
 8006696:	2101      	movs	r1, #1
 8006698:	4618      	mov	r0, r3
 800669a:	f001 fa99 	bl	8007bd0 <RCCEx_PLL3_Config>
 800669e:	4603      	mov	r3, r0
 80066a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066a4:	e00a      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066ac:	e006      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066ae:	bf00      	nop
 80066b0:	e004      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066b2:	bf00      	nop
 80066b4:	e002      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066b6:	bf00      	nop
 80066b8:	e000      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80066c4:	4b38      	ldr	r3, [pc, #224]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066d2:	4a35      	ldr	r2, [pc, #212]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066d4:	430b      	orrs	r3, r1
 80066d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80066d8:	e003      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80066ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066f2:	2300      	movs	r3, #0
 80066f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066f8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80066fc:	460b      	mov	r3, r1
 80066fe:	4313      	orrs	r3, r2
 8006700:	d058      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006706:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800670a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800670e:	d033      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006710:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006714:	d82c      	bhi.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800671a:	d02f      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800671c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006720:	d826      	bhi.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006722:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006726:	d02b      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006728:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800672c:	d820      	bhi.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800672e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006732:	d012      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006734:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006738:	d81a      	bhi.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d022      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800673e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006742:	d115      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006748:	3308      	adds	r3, #8
 800674a:	2101      	movs	r1, #1
 800674c:	4618      	mov	r0, r3
 800674e:	f001 f98d 	bl	8007a6c <RCCEx_PLL2_Config>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006758:	e015      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800675a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675e:	3328      	adds	r3, #40	@ 0x28
 8006760:	2101      	movs	r1, #1
 8006762:	4618      	mov	r0, r3
 8006764:	f001 fa34 	bl	8007bd0 <RCCEx_PLL3_Config>
 8006768:	4603      	mov	r3, r0
 800676a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800676e:	e00a      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006776:	e006      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006778:	bf00      	nop
 800677a:	e004      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800677c:	bf00      	nop
 800677e:	e002      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006780:	bf00      	nop
 8006782:	e000      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006786:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10e      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800678e:	4b06      	ldr	r3, [pc, #24]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006792:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800679e:	4a02      	ldr	r2, [pc, #8]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067a0:	430b      	orrs	r3, r1
 80067a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80067a4:	e006      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80067a6:	bf00      	nop
 80067a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80067c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067c4:	2300      	movs	r3, #0
 80067c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4313      	orrs	r3, r2
 80067d2:	d037      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80067d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067de:	d00e      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80067e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067e4:	d816      	bhi.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d018      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80067ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067ee:	d111      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f0:	4bc4      	ldr	r3, [pc, #784]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f4:	4ac3      	ldr	r2, [pc, #780]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067fc:	e00f      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006802:	3308      	adds	r3, #8
 8006804:	2101      	movs	r1, #1
 8006806:	4618      	mov	r0, r3
 8006808:	f001 f930 	bl	8007a6c <RCCEx_PLL2_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006812:	e004      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800681a:	e000      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800681c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800681e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10a      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006826:	4bb7      	ldr	r3, [pc, #732]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800682a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800682e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006834:	4ab3      	ldr	r2, [pc, #716]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006836:	430b      	orrs	r3, r1
 8006838:	6513      	str	r3, [r2, #80]	@ 0x50
 800683a:	e003      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006840:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006850:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006854:	2300      	movs	r3, #0
 8006856:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800685a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800685e:	460b      	mov	r3, r1
 8006860:	4313      	orrs	r3, r2
 8006862:	d039      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800686a:	2b03      	cmp	r3, #3
 800686c:	d81c      	bhi.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800686e:	a201      	add	r2, pc, #4	@ (adr r2, 8006874 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	080068b1 	.word	0x080068b1
 8006878:	08006885 	.word	0x08006885
 800687c:	08006893 	.word	0x08006893
 8006880:	080068b1 	.word	0x080068b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006884:	4b9f      	ldr	r3, [pc, #636]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006888:	4a9e      	ldr	r2, [pc, #632]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800688a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800688e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006890:	e00f      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006896:	3308      	adds	r3, #8
 8006898:	2102      	movs	r1, #2
 800689a:	4618      	mov	r0, r3
 800689c:	f001 f8e6 	bl	8007a6c <RCCEx_PLL2_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068a6:	e004      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068ae:	e000      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80068b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068ba:	4b92      	ldr	r3, [pc, #584]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068be:	f023 0103 	bic.w	r1, r3, #3
 80068c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068c8:	4a8e      	ldr	r2, [pc, #568]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068ca:	430b      	orrs	r3, r1
 80068cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068ce:	e003      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80068e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068e8:	2300      	movs	r3, #0
 80068ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4313      	orrs	r3, r2
 80068f6:	f000 8099 	beq.w	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068fa:	4b83      	ldr	r3, [pc, #524]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a82      	ldr	r2, [pc, #520]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006904:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006906:	f7fc fa05 	bl	8002d14 <HAL_GetTick>
 800690a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800690e:	e00b      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006910:	f7fc fa00 	bl	8002d14 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b64      	cmp	r3, #100	@ 0x64
 800691e:	d903      	bls.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006926:	e005      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006928:	4b77      	ldr	r3, [pc, #476]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0ed      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006934:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006938:	2b00      	cmp	r3, #0
 800693a:	d173      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800693c:	4b71      	ldr	r3, [pc, #452]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800693e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006944:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006948:	4053      	eors	r3, r2
 800694a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800694e:	2b00      	cmp	r3, #0
 8006950:	d015      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006952:	4b6c      	ldr	r3, [pc, #432]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800695a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800695e:	4b69      	ldr	r3, [pc, #420]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006962:	4a68      	ldr	r2, [pc, #416]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006968:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800696a:	4b66      	ldr	r3, [pc, #408]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800696c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696e:	4a65      	ldr	r2, [pc, #404]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006974:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006976:	4a63      	ldr	r2, [pc, #396]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800697c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800697e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006982:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800698a:	d118      	bne.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698c:	f7fc f9c2 	bl	8002d14 <HAL_GetTick>
 8006990:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006994:	e00d      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006996:	f7fc f9bd 	bl	8002d14 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80069a0:	1ad2      	subs	r2, r2, r3
 80069a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d903      	bls.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80069b0:	e005      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069b2:	4b54      	ldr	r3, [pc, #336]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0eb      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80069be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d129      	bne.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069d6:	d10e      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80069d8:	4b4a      	ldr	r3, [pc, #296]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80069e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069e8:	091a      	lsrs	r2, r3, #4
 80069ea:	4b48      	ldr	r3, [pc, #288]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80069ec:	4013      	ands	r3, r2
 80069ee:	4a45      	ldr	r2, [pc, #276]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069f0:	430b      	orrs	r3, r1
 80069f2:	6113      	str	r3, [r2, #16]
 80069f4:	e005      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80069f6:	4b43      	ldr	r3, [pc, #268]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	4a42      	ldr	r2, [pc, #264]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a00:	6113      	str	r3, [r2, #16]
 8006a02:	4b40      	ldr	r3, [pc, #256]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a04:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a12:	4a3c      	ldr	r2, [pc, #240]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a14:	430b      	orrs	r3, r1
 8006a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a18:	e008      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006a22:	e003      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	f002 0301 	and.w	r3, r2, #1
 8006a38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a42:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a46:	460b      	mov	r3, r1
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	f000 808f 	beq.w	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a54:	2b28      	cmp	r3, #40	@ 0x28
 8006a56:	d871      	bhi.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006a58:	a201      	add	r2, pc, #4	@ (adr r2, 8006a60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006b45 	.word	0x08006b45
 8006a64:	08006b3d 	.word	0x08006b3d
 8006a68:	08006b3d 	.word	0x08006b3d
 8006a6c:	08006b3d 	.word	0x08006b3d
 8006a70:	08006b3d 	.word	0x08006b3d
 8006a74:	08006b3d 	.word	0x08006b3d
 8006a78:	08006b3d 	.word	0x08006b3d
 8006a7c:	08006b3d 	.word	0x08006b3d
 8006a80:	08006b11 	.word	0x08006b11
 8006a84:	08006b3d 	.word	0x08006b3d
 8006a88:	08006b3d 	.word	0x08006b3d
 8006a8c:	08006b3d 	.word	0x08006b3d
 8006a90:	08006b3d 	.word	0x08006b3d
 8006a94:	08006b3d 	.word	0x08006b3d
 8006a98:	08006b3d 	.word	0x08006b3d
 8006a9c:	08006b3d 	.word	0x08006b3d
 8006aa0:	08006b27 	.word	0x08006b27
 8006aa4:	08006b3d 	.word	0x08006b3d
 8006aa8:	08006b3d 	.word	0x08006b3d
 8006aac:	08006b3d 	.word	0x08006b3d
 8006ab0:	08006b3d 	.word	0x08006b3d
 8006ab4:	08006b3d 	.word	0x08006b3d
 8006ab8:	08006b3d 	.word	0x08006b3d
 8006abc:	08006b3d 	.word	0x08006b3d
 8006ac0:	08006b45 	.word	0x08006b45
 8006ac4:	08006b3d 	.word	0x08006b3d
 8006ac8:	08006b3d 	.word	0x08006b3d
 8006acc:	08006b3d 	.word	0x08006b3d
 8006ad0:	08006b3d 	.word	0x08006b3d
 8006ad4:	08006b3d 	.word	0x08006b3d
 8006ad8:	08006b3d 	.word	0x08006b3d
 8006adc:	08006b3d 	.word	0x08006b3d
 8006ae0:	08006b45 	.word	0x08006b45
 8006ae4:	08006b3d 	.word	0x08006b3d
 8006ae8:	08006b3d 	.word	0x08006b3d
 8006aec:	08006b3d 	.word	0x08006b3d
 8006af0:	08006b3d 	.word	0x08006b3d
 8006af4:	08006b3d 	.word	0x08006b3d
 8006af8:	08006b3d 	.word	0x08006b3d
 8006afc:	08006b3d 	.word	0x08006b3d
 8006b00:	08006b45 	.word	0x08006b45
 8006b04:	58024400 	.word	0x58024400
 8006b08:	58024800 	.word	0x58024800
 8006b0c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b14:	3308      	adds	r3, #8
 8006b16:	2101      	movs	r1, #1
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 ffa7 	bl	8007a6c <RCCEx_PLL2_Config>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b24:	e00f      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2a:	3328      	adds	r3, #40	@ 0x28
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f001 f84e 	bl	8007bd0 <RCCEx_PLL3_Config>
 8006b34:	4603      	mov	r3, r0
 8006b36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b3a:	e004      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b42:	e000      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10a      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b4e:	4bbf      	ldr	r3, [pc, #764]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b52:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b5c:	4abb      	ldr	r2, [pc, #748]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b62:	e003      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	f002 0302 	and.w	r3, r2, #2
 8006b78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b82:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006b86:	460b      	mov	r3, r1
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	d041      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b92:	2b05      	cmp	r3, #5
 8006b94:	d824      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006b96:	a201      	add	r2, pc, #4	@ (adr r2, 8006b9c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9c:	08006be9 	.word	0x08006be9
 8006ba0:	08006bb5 	.word	0x08006bb5
 8006ba4:	08006bcb 	.word	0x08006bcb
 8006ba8:	08006be9 	.word	0x08006be9
 8006bac:	08006be9 	.word	0x08006be9
 8006bb0:	08006be9 	.word	0x08006be9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb8:	3308      	adds	r3, #8
 8006bba:	2101      	movs	r1, #1
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 ff55 	bl	8007a6c <RCCEx_PLL2_Config>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006bc8:	e00f      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bce:	3328      	adds	r3, #40	@ 0x28
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fffc 	bl	8007bd0 <RCCEx_PLL3_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006bde:	e004      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006be6:	e000      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006bf2:	4b96      	ldr	r3, [pc, #600]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf6:	f023 0107 	bic.w	r1, r3, #7
 8006bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c00:	4a92      	ldr	r2, [pc, #584]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c02:	430b      	orrs	r3, r1
 8006c04:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c06:	e003      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f002 0304 	and.w	r3, r2, #4
 8006c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c20:	2300      	movs	r3, #0
 8006c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c26:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	d044      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c38:	2b05      	cmp	r3, #5
 8006c3a:	d825      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c44 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006c91 	.word	0x08006c91
 8006c48:	08006c5d 	.word	0x08006c5d
 8006c4c:	08006c73 	.word	0x08006c73
 8006c50:	08006c91 	.word	0x08006c91
 8006c54:	08006c91 	.word	0x08006c91
 8006c58:	08006c91 	.word	0x08006c91
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c60:	3308      	adds	r3, #8
 8006c62:	2101      	movs	r1, #1
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 ff01 	bl	8007a6c <RCCEx_PLL2_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c70:	e00f      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c76:	3328      	adds	r3, #40	@ 0x28
 8006c78:	2101      	movs	r1, #1
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 ffa8 	bl	8007bd0 <RCCEx_PLL3_Config>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c86:	e004      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c8e:	e000      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10b      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c9a:	4b6c      	ldr	r3, [pc, #432]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c9e:	f023 0107 	bic.w	r1, r3, #7
 8006ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006caa:	4a68      	ldr	r2, [pc, #416]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cac:	430b      	orrs	r3, r1
 8006cae:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cb0:	e003      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	f002 0320 	and.w	r3, r2, #32
 8006cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006cd0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	d055      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ce6:	d033      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cec:	d82c      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf2:	d02f      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf8:	d826      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006cfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006cfe:	d02b      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006d00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d04:	d820      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d0a:	d012      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006d0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d10:	d81a      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d022      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006d16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d1a:	d115      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d20:	3308      	adds	r3, #8
 8006d22:	2100      	movs	r1, #0
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fea1 	bl	8007a6c <RCCEx_PLL2_Config>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d30:	e015      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d36:	3328      	adds	r3, #40	@ 0x28
 8006d38:	2102      	movs	r1, #2
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 ff48 	bl	8007bd0 <RCCEx_PLL3_Config>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d46:	e00a      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d4e:	e006      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d50:	bf00      	nop
 8006d52:	e004      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d54:	bf00      	nop
 8006d56:	e002      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d58:	bf00      	nop
 8006d5a:	e000      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10b      	bne.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d66:	4b39      	ldr	r3, [pc, #228]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d6a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d76:	4a35      	ldr	r2, [pc, #212]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d7c:	e003      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006d92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d96:	2300      	movs	r3, #0
 8006d98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d9c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006da0:	460b      	mov	r3, r1
 8006da2:	4313      	orrs	r3, r2
 8006da4:	d058      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006db2:	d033      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006db4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006db8:	d82c      	bhi.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dbe:	d02f      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc4:	d826      	bhi.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006dc6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dca:	d02b      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006dcc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dd0:	d820      	bhi.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006dd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dd6:	d012      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006dd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ddc:	d81a      	bhi.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d022      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de6:	d115      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dec:	3308      	adds	r3, #8
 8006dee:	2100      	movs	r1, #0
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fe3b 	bl	8007a6c <RCCEx_PLL2_Config>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006dfc:	e015      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e02:	3328      	adds	r3, #40	@ 0x28
 8006e04:	2102      	movs	r1, #2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fee2 	bl	8007bd0 <RCCEx_PLL3_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e12:	e00a      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e1a:	e006      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e1c:	bf00      	nop
 8006e1e:	e004      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e20:	bf00      	nop
 8006e22:	e002      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e24:	bf00      	nop
 8006e26:	e000      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10e      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e32:	4b06      	ldr	r3, [pc, #24]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e36:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e42:	4a02      	ldr	r2, [pc, #8]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e44:	430b      	orrs	r3, r1
 8006e46:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e48:	e006      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006e4a:	bf00      	nop
 8006e4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006e64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e6e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006e72:	460b      	mov	r3, r1
 8006e74:	4313      	orrs	r3, r2
 8006e76:	d055      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e80:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e84:	d033      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006e86:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e8a:	d82c      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006e8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e90:	d02f      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006e92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e96:	d826      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006e98:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e9c:	d02b      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006e9e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ea2:	d820      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ea4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ea8:	d012      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006eaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eae:	d81a      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d022      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eb8:	d115      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 fdd2 	bl	8007a6c <RCCEx_PLL2_Config>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ece:	e015      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed4:	3328      	adds	r3, #40	@ 0x28
 8006ed6:	2102      	movs	r1, #2
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 fe79 	bl	8007bd0 <RCCEx_PLL3_Config>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ee4:	e00a      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006eec:	e006      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006eee:	bf00      	nop
 8006ef0:	e004      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006ef2:	bf00      	nop
 8006ef4:	e002      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006ef6:	bf00      	nop
 8006ef8:	e000      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006efc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10b      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f04:	4ba0      	ldr	r3, [pc, #640]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f08:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f14:	4a9c      	ldr	r2, [pc, #624]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f16:	430b      	orrs	r3, r1
 8006f18:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f1a:	e003      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	f002 0308 	and.w	r3, r2, #8
 8006f30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f34:	2300      	movs	r3, #0
 8006f36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f3a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4313      	orrs	r3, r2
 8006f42:	d01e      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f50:	d10c      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f56:	3328      	adds	r3, #40	@ 0x28
 8006f58:	2102      	movs	r1, #2
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fe38 	bl	8007bd0 <RCCEx_PLL3_Config>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d002      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006f6c:	4b86      	ldr	r3, [pc, #536]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f70:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f7c:	4a82      	ldr	r2, [pc, #520]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f7e:	430b      	orrs	r3, r1
 8006f80:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8a:	f002 0310 	and.w	r3, r2, #16
 8006f8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f92:	2300      	movs	r3, #0
 8006f94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f98:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	d01e      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fae:	d10c      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb4:	3328      	adds	r3, #40	@ 0x28
 8006fb6:	2102      	movs	r1, #2
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 fe09 	bl	8007bd0 <RCCEx_PLL3_Config>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fca:	4b6f      	ldr	r3, [pc, #444]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fda:	4a6b      	ldr	r2, [pc, #428]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fdc:	430b      	orrs	r3, r1
 8006fde:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006fec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fee:	2300      	movs	r3, #0
 8006ff0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ff2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	d03e      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007000:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007004:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007008:	d022      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800700a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800700e:	d81b      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007018:	d00b      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800701a:	e015      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800701c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007020:	3308      	adds	r3, #8
 8007022:	2100      	movs	r1, #0
 8007024:	4618      	mov	r0, r3
 8007026:	f000 fd21 	bl	8007a6c <RCCEx_PLL2_Config>
 800702a:	4603      	mov	r3, r0
 800702c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007030:	e00f      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007036:	3328      	adds	r3, #40	@ 0x28
 8007038:	2102      	movs	r1, #2
 800703a:	4618      	mov	r0, r3
 800703c:	f000 fdc8 	bl	8007bd0 <RCCEx_PLL3_Config>
 8007040:	4603      	mov	r3, r0
 8007042:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007046:	e004      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800704e:	e000      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007052:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10b      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800705a:	4b4b      	ldr	r3, [pc, #300]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800705c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800705e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007066:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800706a:	4a47      	ldr	r2, [pc, #284]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800706c:	430b      	orrs	r3, r1
 800706e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007070:	e003      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007072:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007076:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800707a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007086:	673b      	str	r3, [r7, #112]	@ 0x70
 8007088:	2300      	movs	r3, #0
 800708a:	677b      	str	r3, [r7, #116]	@ 0x74
 800708c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007090:	460b      	mov	r3, r1
 8007092:	4313      	orrs	r3, r2
 8007094:	d03b      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800709e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070a2:	d01f      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80070a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070a8:	d818      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80070aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070ae:	d003      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80070b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070b4:	d007      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80070b6:	e011      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070b8:	4b33      	ldr	r3, [pc, #204]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070bc:	4a32      	ldr	r2, [pc, #200]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80070c4:	e00f      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ca:	3328      	adds	r3, #40	@ 0x28
 80070cc:	2101      	movs	r1, #1
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fd7e 	bl	8007bd0 <RCCEx_PLL3_Config>
 80070d4:	4603      	mov	r3, r0
 80070d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80070da:	e004      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070e2:	e000      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80070e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10b      	bne.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070ee:	4b26      	ldr	r3, [pc, #152]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80070f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070fe:	4a22      	ldr	r2, [pc, #136]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007100:	430b      	orrs	r3, r1
 8007102:	6553      	str	r3, [r2, #84]	@ 0x54
 8007104:	e003      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007106:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800710a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800710e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800711a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800711c:	2300      	movs	r3, #0
 800711e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007120:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007124:	460b      	mov	r3, r1
 8007126:	4313      	orrs	r3, r2
 8007128:	d034      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800712a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007138:	d007      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800713a:	e011      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800713c:	4b12      	ldr	r3, [pc, #72]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800713e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007140:	4a11      	ldr	r2, [pc, #68]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007142:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007146:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007148:	e00e      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800714a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800714e:	3308      	adds	r3, #8
 8007150:	2102      	movs	r1, #2
 8007152:	4618      	mov	r0, r3
 8007154:	f000 fc8a 	bl	8007a6c <RCCEx_PLL2_Config>
 8007158:	4603      	mov	r3, r0
 800715a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800715e:	e003      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007166:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007168:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10d      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007170:	4b05      	ldr	r3, [pc, #20]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007174:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800717e:	4a02      	ldr	r2, [pc, #8]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007180:	430b      	orrs	r3, r1
 8007182:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007184:	e006      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007186:	bf00      	nop
 8007188:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007190:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80071a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80071a2:	2300      	movs	r3, #0
 80071a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80071a6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80071aa:	460b      	mov	r3, r1
 80071ac:	4313      	orrs	r3, r2
 80071ae:	d00c      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b4:	3328      	adds	r3, #40	@ 0x28
 80071b6:	2102      	movs	r1, #2
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fd09 	bl	8007bd0 <RCCEx_PLL3_Config>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80071ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80071d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071d8:	2300      	movs	r3, #0
 80071da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071dc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80071e0:	460b      	mov	r3, r1
 80071e2:	4313      	orrs	r3, r2
 80071e4:	d036      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80071e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071f0:	d018      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80071f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071f6:	d811      	bhi.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80071f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071fc:	d014      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80071fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007202:	d80b      	bhi.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007204:	2b00      	cmp	r3, #0
 8007206:	d011      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800720c:	d106      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800720e:	4bb7      	ldr	r3, [pc, #732]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007212:	4ab6      	ldr	r2, [pc, #728]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007218:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800721a:	e008      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007222:	e004      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007224:	bf00      	nop
 8007226:	e002      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007228:	bf00      	nop
 800722a:	e000      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800722c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800722e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10a      	bne.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007236:	4bad      	ldr	r3, [pc, #692]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800723e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007242:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007244:	4aa9      	ldr	r2, [pc, #676]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007246:	430b      	orrs	r3, r1
 8007248:	6553      	str	r3, [r2, #84]	@ 0x54
 800724a:	e003      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800724c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007250:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007260:	653b      	str	r3, [r7, #80]	@ 0x50
 8007262:	2300      	movs	r3, #0
 8007264:	657b      	str	r3, [r7, #84]	@ 0x54
 8007266:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800726a:	460b      	mov	r3, r1
 800726c:	4313      	orrs	r3, r2
 800726e:	d009      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007270:	4b9e      	ldr	r3, [pc, #632]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007274:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800727e:	4a9b      	ldr	r2, [pc, #620]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007280:	430b      	orrs	r3, r1
 8007282:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007290:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007292:	2300      	movs	r3, #0
 8007294:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007296:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800729a:	460b      	mov	r3, r1
 800729c:	4313      	orrs	r3, r2
 800729e:	d009      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072a0:	4b92      	ldr	r3, [pc, #584]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072a4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80072a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072ae:	4a8f      	ldr	r2, [pc, #572]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072b0:	430b      	orrs	r3, r1
 80072b2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80072c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80072c2:	2300      	movs	r3, #0
 80072c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072c6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80072ca:	460b      	mov	r3, r1
 80072cc:	4313      	orrs	r3, r2
 80072ce:	d00e      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072d0:	4b86      	ldr	r3, [pc, #536]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	4a85      	ldr	r2, [pc, #532]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072da:	6113      	str	r3, [r2, #16]
 80072dc:	4b83      	ldr	r3, [pc, #524]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072de:	6919      	ldr	r1, [r3, #16]
 80072e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072e8:	4a80      	ldr	r2, [pc, #512]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072ea:	430b      	orrs	r3, r1
 80072ec:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80072ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80072fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072fc:	2300      	movs	r3, #0
 80072fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007300:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007304:	460b      	mov	r3, r1
 8007306:	4313      	orrs	r3, r2
 8007308:	d009      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800730a:	4b78      	ldr	r3, [pc, #480]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800730c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800730e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007318:	4a74      	ldr	r2, [pc, #464]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800731a:	430b      	orrs	r3, r1
 800731c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800731e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800732a:	633b      	str	r3, [r7, #48]	@ 0x30
 800732c:	2300      	movs	r3, #0
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007330:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007334:	460b      	mov	r3, r1
 8007336:	4313      	orrs	r3, r2
 8007338:	d00a      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800733a:	4b6c      	ldr	r3, [pc, #432]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800733c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800733e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800734a:	4a68      	ldr	r2, [pc, #416]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800734c:	430b      	orrs	r3, r1
 800734e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	2100      	movs	r1, #0
 800735a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007362:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007366:	460b      	mov	r3, r1
 8007368:	4313      	orrs	r3, r2
 800736a:	d011      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800736c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007370:	3308      	adds	r3, #8
 8007372:	2100      	movs	r1, #0
 8007374:	4618      	mov	r0, r3
 8007376:	f000 fb79 	bl	8007a6c <RCCEx_PLL2_Config>
 800737a:	4603      	mov	r3, r0
 800737c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007388:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800738c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	2100      	movs	r1, #0
 800739a:	6239      	str	r1, [r7, #32]
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073a2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80073a6:	460b      	mov	r3, r1
 80073a8:	4313      	orrs	r3, r2
 80073aa:	d011      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b0:	3308      	adds	r3, #8
 80073b2:	2101      	movs	r1, #1
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 fb59 	bl	8007a6c <RCCEx_PLL2_Config>
 80073ba:	4603      	mov	r3, r0
 80073bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80073c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80073d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	2100      	movs	r1, #0
 80073da:	61b9      	str	r1, [r7, #24]
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	61fb      	str	r3, [r7, #28]
 80073e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80073e6:	460b      	mov	r3, r1
 80073e8:	4313      	orrs	r3, r2
 80073ea:	d011      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f0:	3308      	adds	r3, #8
 80073f2:	2102      	movs	r1, #2
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 fb39 	bl	8007a6c <RCCEx_PLL2_Config>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007404:	2b00      	cmp	r3, #0
 8007406:	d003      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800740c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007418:	2100      	movs	r1, #0
 800741a:	6139      	str	r1, [r7, #16]
 800741c:	f003 0308 	and.w	r3, r3, #8
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007426:	460b      	mov	r3, r1
 8007428:	4313      	orrs	r3, r2
 800742a:	d011      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800742c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007430:	3328      	adds	r3, #40	@ 0x28
 8007432:	2100      	movs	r1, #0
 8007434:	4618      	mov	r0, r3
 8007436:	f000 fbcb 	bl	8007bd0 <RCCEx_PLL3_Config>
 800743a:	4603      	mov	r3, r0
 800743c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007440:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800744c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007458:	2100      	movs	r1, #0
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	f003 0310 	and.w	r3, r3, #16
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007466:	460b      	mov	r3, r1
 8007468:	4313      	orrs	r3, r2
 800746a:	d011      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800746c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007470:	3328      	adds	r3, #40	@ 0x28
 8007472:	2101      	movs	r1, #1
 8007474:	4618      	mov	r0, r3
 8007476:	f000 fbab 	bl	8007bd0 <RCCEx_PLL3_Config>
 800747a:	4603      	mov	r3, r0
 800747c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007480:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800748c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	2100      	movs	r1, #0
 800749a:	6039      	str	r1, [r7, #0]
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	607b      	str	r3, [r7, #4]
 80074a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80074a6:	460b      	mov	r3, r1
 80074a8:	4313      	orrs	r3, r2
 80074aa:	d011      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b0:	3328      	adds	r3, #40	@ 0x28
 80074b2:	2102      	movs	r1, #2
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 fb8b 	bl	8007bd0 <RCCEx_PLL3_Config>
 80074ba:	4603      	mov	r3, r0
 80074bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80074c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80074d0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	e000      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
}
 80074de:	4618      	mov	r0, r3
 80074e0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80074e4:	46bd      	mov	sp, r7
 80074e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ea:	bf00      	nop
 80074ec:	58024400 	.word	0x58024400

080074f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80074f4:	f7fe fe00 	bl	80060f8 <HAL_RCC_GetHCLKFreq>
 80074f8:	4602      	mov	r2, r0
 80074fa:	4b06      	ldr	r3, [pc, #24]	@ (8007514 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	091b      	lsrs	r3, r3, #4
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	4904      	ldr	r1, [pc, #16]	@ (8007518 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007506:	5ccb      	ldrb	r3, [r1, r3]
 8007508:	f003 031f 	and.w	r3, r3, #31
 800750c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007510:	4618      	mov	r0, r3
 8007512:	bd80      	pop	{r7, pc}
 8007514:	58024400 	.word	0x58024400
 8007518:	08013268 	.word	0x08013268

0800751c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800751c:	b480      	push	{r7}
 800751e:	b089      	sub	sp, #36	@ 0x24
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007524:	4ba1      	ldr	r3, [pc, #644]	@ (80077ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007528:	f003 0303 	and.w	r3, r3, #3
 800752c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800752e:	4b9f      	ldr	r3, [pc, #636]	@ (80077ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007532:	0b1b      	lsrs	r3, r3, #12
 8007534:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007538:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800753a:	4b9c      	ldr	r3, [pc, #624]	@ (80077ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800753c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753e:	091b      	lsrs	r3, r3, #4
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007546:	4b99      	ldr	r3, [pc, #612]	@ (80077ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800754a:	08db      	lsrs	r3, r3, #3
 800754c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	fb02 f303 	mul.w	r3, r2, r3
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 8111 	beq.w	800778c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	2b02      	cmp	r3, #2
 800756e:	f000 8083 	beq.w	8007678 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	2b02      	cmp	r3, #2
 8007576:	f200 80a1 	bhi.w	80076bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d056      	beq.n	8007634 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007586:	e099      	b.n	80076bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007588:	4b88      	ldr	r3, [pc, #544]	@ (80077ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	2b00      	cmp	r3, #0
 8007592:	d02d      	beq.n	80075f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007594:	4b85      	ldr	r3, [pc, #532]	@ (80077ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	08db      	lsrs	r3, r3, #3
 800759a:	f003 0303 	and.w	r3, r3, #3
 800759e:	4a84      	ldr	r2, [pc, #528]	@ (80077b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80075a0:	fa22 f303 	lsr.w	r3, r2, r3
 80075a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	ee07 3a90 	vmov	s15, r3
 80075ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075be:	4b7b      	ldr	r3, [pc, #492]	@ (80077ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80075d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80077b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075ee:	e087      	b.n	8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80077b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80075fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007602:	4b6a      	ldr	r3, [pc, #424]	@ (80077ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007612:	ed97 6a03 	vldr	s12, [r7, #12]
 8007616:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80077b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800761a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800761e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800762a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800762e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007632:	e065      	b.n	8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007646:	4b59      	ldr	r3, [pc, #356]	@ (80077ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800764a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007656:	ed97 6a03 	vldr	s12, [r7, #12]
 800765a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80077b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800765e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800766a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800766e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007676:	e043      	b.n	8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007682:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800768a:	4b48      	ldr	r3, [pc, #288]	@ (80077ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800768c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007692:	ee07 3a90 	vmov	s15, r3
 8007696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769a:	ed97 6a03 	vldr	s12, [r7, #12]
 800769e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80077b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ba:	e021      	b.n	8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ce:	4b37      	ldr	r3, [pc, #220]	@ (80077ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076de:	ed97 6a03 	vldr	s12, [r7, #12]
 80076e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80077b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007700:	4b2a      	ldr	r3, [pc, #168]	@ (80077ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007704:	0a5b      	lsrs	r3, r3, #9
 8007706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007712:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007716:	ee37 7a87 	vadd.f32	s14, s15, s14
 800771a:	edd7 6a07 	vldr	s13, [r7, #28]
 800771e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007726:	ee17 2a90 	vmov	r2, s15
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800772e:	4b1f      	ldr	r3, [pc, #124]	@ (80077ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007732:	0c1b      	lsrs	r3, r3, #16
 8007734:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007738:	ee07 3a90 	vmov	s15, r3
 800773c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007740:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007744:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007748:	edd7 6a07 	vldr	s13, [r7, #28]
 800774c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007754:	ee17 2a90 	vmov	r2, s15
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800775c:	4b13      	ldr	r3, [pc, #76]	@ (80077ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800775e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007760:	0e1b      	lsrs	r3, r3, #24
 8007762:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007772:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007776:	edd7 6a07 	vldr	s13, [r7, #28]
 800777a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800777e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007782:	ee17 2a90 	vmov	r2, s15
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800778a:	e008      	b.n	800779e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	609a      	str	r2, [r3, #8]
}
 800779e:	bf00      	nop
 80077a0:	3724      	adds	r7, #36	@ 0x24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	58024400 	.word	0x58024400
 80077b0:	03d09000 	.word	0x03d09000
 80077b4:	46000000 	.word	0x46000000
 80077b8:	4c742400 	.word	0x4c742400
 80077bc:	4a742400 	.word	0x4a742400
 80077c0:	4bbebc20 	.word	0x4bbebc20

080077c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b089      	sub	sp, #36	@ 0x24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077cc:	4ba1      	ldr	r3, [pc, #644]	@ (8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d0:	f003 0303 	and.w	r3, r3, #3
 80077d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80077d6:	4b9f      	ldr	r3, [pc, #636]	@ (8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077da:	0d1b      	lsrs	r3, r3, #20
 80077dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80077e2:	4b9c      	ldr	r3, [pc, #624]	@ (8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e6:	0a1b      	lsrs	r3, r3, #8
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80077ee:	4b99      	ldr	r3, [pc, #612]	@ (8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f2:	08db      	lsrs	r3, r3, #3
 80077f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	fb02 f303 	mul.w	r3, r2, r3
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007806:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 8111 	beq.w	8007a34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	2b02      	cmp	r3, #2
 8007816:	f000 8083 	beq.w	8007920 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	2b02      	cmp	r3, #2
 800781e:	f200 80a1 	bhi.w	8007964 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d056      	beq.n	80078dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800782e:	e099      	b.n	8007964 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007830:	4b88      	ldr	r3, [pc, #544]	@ (8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0320 	and.w	r3, r3, #32
 8007838:	2b00      	cmp	r3, #0
 800783a:	d02d      	beq.n	8007898 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800783c:	4b85      	ldr	r3, [pc, #532]	@ (8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	08db      	lsrs	r3, r3, #3
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	4a84      	ldr	r2, [pc, #528]	@ (8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007848:	fa22 f303 	lsr.w	r3, r2, r3
 800784c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	ee07 3a90 	vmov	s15, r3
 8007854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007866:	4b7b      	ldr	r3, [pc, #492]	@ (8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800786a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007876:	ed97 6a03 	vldr	s12, [r7, #12]
 800787a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800787e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800788a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800788e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007892:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007896:	e087      	b.n	80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80078a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078aa:	4b6a      	ldr	r3, [pc, #424]	@ (8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80078be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007a5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078da:	e065      	b.n	80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80078ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ee:	4b59      	ldr	r3, [pc, #356]	@ (8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007902:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007a5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800790a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800791a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800791e:	e043      	b.n	80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800792e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007932:	4b48      	ldr	r3, [pc, #288]	@ (8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793a:	ee07 3a90 	vmov	s15, r3
 800793e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007942:	ed97 6a03 	vldr	s12, [r7, #12]
 8007946:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007a5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800794a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800795a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007962:	e021      	b.n	80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007976:	4b37      	ldr	r3, [pc, #220]	@ (8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007986:	ed97 6a03 	vldr	s12, [r7, #12]
 800798a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007a5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800798e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800799a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80079a8:	4b2a      	ldr	r3, [pc, #168]	@ (8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ac:	0a5b      	lsrs	r3, r3, #9
 80079ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079b2:	ee07 3a90 	vmov	s15, r3
 80079b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80079c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ce:	ee17 2a90 	vmov	r2, s15
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80079d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079da:	0c1b      	lsrs	r3, r3, #16
 80079dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079e0:	ee07 3a90 	vmov	s15, r3
 80079e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079fc:	ee17 2a90 	vmov	r2, s15
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007a04:	4b13      	ldr	r3, [pc, #76]	@ (8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a08:	0e1b      	lsrs	r3, r3, #24
 8007a0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a0e:	ee07 3a90 	vmov	s15, r3
 8007a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a2a:	ee17 2a90 	vmov	r2, s15
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a32:	e008      	b.n	8007a46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	609a      	str	r2, [r3, #8]
}
 8007a46:	bf00      	nop
 8007a48:	3724      	adds	r7, #36	@ 0x24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	58024400 	.word	0x58024400
 8007a58:	03d09000 	.word	0x03d09000
 8007a5c:	46000000 	.word	0x46000000
 8007a60:	4c742400 	.word	0x4c742400
 8007a64:	4a742400 	.word	0x4a742400
 8007a68:	4bbebc20 	.word	0x4bbebc20

08007a6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a7a:	4b53      	ldr	r3, [pc, #332]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d101      	bne.n	8007a8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e099      	b.n	8007bbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a8a:	4b4f      	ldr	r3, [pc, #316]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a4e      	ldr	r2, [pc, #312]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007a90:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a96:	f7fb f93d 	bl	8002d14 <HAL_GetTick>
 8007a9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a9c:	e008      	b.n	8007ab0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a9e:	f7fb f939 	bl	8002d14 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d901      	bls.n	8007ab0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e086      	b.n	8007bbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ab0:	4b45      	ldr	r3, [pc, #276]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1f0      	bne.n	8007a9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007abc:	4b42      	ldr	r3, [pc, #264]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	031b      	lsls	r3, r3, #12
 8007aca:	493f      	ldr	r1, [pc, #252]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	628b      	str	r3, [r1, #40]	@ 0x28
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	025b      	lsls	r3, r3, #9
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	041b      	lsls	r3, r3, #16
 8007aee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007af2:	431a      	orrs	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	061b      	lsls	r3, r3, #24
 8007afc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b00:	4931      	ldr	r1, [pc, #196]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b06:	4b30      	ldr	r3, [pc, #192]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	492d      	ldr	r1, [pc, #180]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b18:	4b2b      	ldr	r3, [pc, #172]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1c:	f023 0220 	bic.w	r2, r3, #32
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	4928      	ldr	r1, [pc, #160]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b2a:	4b27      	ldr	r3, [pc, #156]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2e:	4a26      	ldr	r2, [pc, #152]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b30:	f023 0310 	bic.w	r3, r3, #16
 8007b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b36:	4b24      	ldr	r3, [pc, #144]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b3a:	4b24      	ldr	r3, [pc, #144]	@ (8007bcc <RCCEx_PLL2_Config+0x160>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	69d2      	ldr	r2, [r2, #28]
 8007b42:	00d2      	lsls	r2, r2, #3
 8007b44:	4920      	ldr	r1, [pc, #128]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b50:	f043 0310 	orr.w	r3, r3, #16
 8007b54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d106      	bne.n	8007b6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b60:	4a19      	ldr	r2, [pc, #100]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b68:	e00f      	b.n	8007b8a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d106      	bne.n	8007b7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b70:	4b15      	ldr	r3, [pc, #84]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b74:	4a14      	ldr	r2, [pc, #80]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b7c:	e005      	b.n	8007b8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b7e:	4b12      	ldr	r3, [pc, #72]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b82:	4a11      	ldr	r2, [pc, #68]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b88:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007b90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b96:	f7fb f8bd 	bl	8002d14 <HAL_GetTick>
 8007b9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b9c:	e008      	b.n	8007bb0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b9e:	f7fb f8b9 	bl	8002d14 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d901      	bls.n	8007bb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e006      	b.n	8007bbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bb0:	4b05      	ldr	r3, [pc, #20]	@ (8007bc8 <RCCEx_PLL2_Config+0x15c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0f0      	beq.n	8007b9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	58024400 	.word	0x58024400
 8007bcc:	ffff0007 	.word	0xffff0007

08007bd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bde:	4b53      	ldr	r3, [pc, #332]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be2:	f003 0303 	and.w	r3, r3, #3
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d101      	bne.n	8007bee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e099      	b.n	8007d22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007bee:	4b4f      	ldr	r3, [pc, #316]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a4e      	ldr	r2, [pc, #312]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007bf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bfa:	f7fb f88b 	bl	8002d14 <HAL_GetTick>
 8007bfe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c00:	e008      	b.n	8007c14 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c02:	f7fb f887 	bl	8002d14 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d901      	bls.n	8007c14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e086      	b.n	8007d22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c14:	4b45      	ldr	r3, [pc, #276]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1f0      	bne.n	8007c02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c20:	4b42      	ldr	r3, [pc, #264]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c24:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	051b      	lsls	r3, r3, #20
 8007c2e:	493f      	ldr	r1, [pc, #252]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	025b      	lsls	r3, r3, #9
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	041b      	lsls	r3, r3, #16
 8007c52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c56:	431a      	orrs	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	061b      	lsls	r3, r3, #24
 8007c60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c64:	4931      	ldr	r1, [pc, #196]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c6a:	4b30      	ldr	r3, [pc, #192]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	492d      	ldr	r1, [pc, #180]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c80:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	4928      	ldr	r1, [pc, #160]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c8e:	4b27      	ldr	r3, [pc, #156]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c92:	4a26      	ldr	r2, [pc, #152]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c9a:	4b24      	ldr	r3, [pc, #144]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007c9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c9e:	4b24      	ldr	r3, [pc, #144]	@ (8007d30 <RCCEx_PLL3_Config+0x160>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	69d2      	ldr	r2, [r2, #28]
 8007ca6:	00d2      	lsls	r2, r2, #3
 8007ca8:	4920      	ldr	r1, [pc, #128]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007cae:	4b1f      	ldr	r3, [pc, #124]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d106      	bne.n	8007cce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc4:	4a19      	ldr	r2, [pc, #100]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007cc6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007cca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ccc:	e00f      	b.n	8007cee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d106      	bne.n	8007ce2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007cd4:	4b15      	ldr	r3, [pc, #84]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd8:	4a14      	ldr	r2, [pc, #80]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007cda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007cde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ce0:	e005      	b.n	8007cee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007ce2:	4b12      	ldr	r3, [pc, #72]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce6:	4a11      	ldr	r2, [pc, #68]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007ce8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007cee:	4b0f      	ldr	r3, [pc, #60]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cfa:	f7fb f80b 	bl	8002d14 <HAL_GetTick>
 8007cfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d00:	e008      	b.n	8007d14 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d02:	f7fb f807 	bl	8002d14 <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d901      	bls.n	8007d14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e006      	b.n	8007d22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d14:	4b05      	ldr	r3, [pc, #20]	@ (8007d2c <RCCEx_PLL3_Config+0x15c>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0f0      	beq.n	8007d02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	58024400 	.word	0x58024400
 8007d30:	ffff0007 	.word	0xffff0007

08007d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e049      	b.n	8007dda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d106      	bne.n	8007d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7fa f824 	bl	8001da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	4619      	mov	r1, r3
 8007d72:	4610      	mov	r0, r2
 8007d74:	f000 fb12 	bl	800839c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
	...

08007de4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d001      	beq.n	8007dfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e05e      	b.n	8007eba <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68da      	ldr	r2, [r3, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f042 0201 	orr.w	r2, r2, #1
 8007e12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a2b      	ldr	r2, [pc, #172]	@ (8007ec8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d02c      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x94>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e26:	d027      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x94>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a27      	ldr	r2, [pc, #156]	@ (8007ecc <HAL_TIM_Base_Start_IT+0xe8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d022      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x94>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a26      	ldr	r2, [pc, #152]	@ (8007ed0 <HAL_TIM_Base_Start_IT+0xec>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d01d      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x94>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a24      	ldr	r2, [pc, #144]	@ (8007ed4 <HAL_TIM_Base_Start_IT+0xf0>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d018      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x94>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a23      	ldr	r2, [pc, #140]	@ (8007ed8 <HAL_TIM_Base_Start_IT+0xf4>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d013      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x94>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a21      	ldr	r2, [pc, #132]	@ (8007edc <HAL_TIM_Base_Start_IT+0xf8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d00e      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x94>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a20      	ldr	r2, [pc, #128]	@ (8007ee0 <HAL_TIM_Base_Start_IT+0xfc>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d009      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x94>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a1e      	ldr	r2, [pc, #120]	@ (8007ee4 <HAL_TIM_Base_Start_IT+0x100>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d004      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x94>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee8 <HAL_TIM_Base_Start_IT+0x104>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d115      	bne.n	8007ea4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8007eec <HAL_TIM_Base_Start_IT+0x108>)
 8007e80:	4013      	ands	r3, r2
 8007e82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b06      	cmp	r3, #6
 8007e88:	d015      	beq.n	8007eb6 <HAL_TIM_Base_Start_IT+0xd2>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e90:	d011      	beq.n	8007eb6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f042 0201 	orr.w	r2, r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea2:	e008      	b.n	8007eb6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f042 0201 	orr.w	r2, r2, #1
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	e000      	b.n	8007eb8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	40010000 	.word	0x40010000
 8007ecc:	40000400 	.word	0x40000400
 8007ed0:	40000800 	.word	0x40000800
 8007ed4:	40000c00 	.word	0x40000c00
 8007ed8:	40010400 	.word	0x40010400
 8007edc:	40001800 	.word	0x40001800
 8007ee0:	40014000 	.word	0x40014000
 8007ee4:	4000e000 	.word	0x4000e000
 8007ee8:	4000e400 	.word	0x4000e400
 8007eec:	00010007 	.word	0x00010007

08007ef0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0201 	bic.w	r2, r2, #1
 8007f06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6a1a      	ldr	r2, [r3, #32]
 8007f0e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007f12:	4013      	ands	r3, r2
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10f      	bne.n	8007f38 <HAL_TIM_Base_Stop_IT+0x48>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6a1a      	ldr	r2, [r3, #32]
 8007f1e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007f22:	4013      	ands	r3, r2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d107      	bne.n	8007f38 <HAL_TIM_Base_Stop_IT+0x48>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 0201 	bic.w	r2, r2, #1
 8007f36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d020      	beq.n	8007fb2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d01b      	beq.n	8007fb2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f06f 0202 	mvn.w	r2, #2
 8007f82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	f003 0303 	and.w	r3, r3, #3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f9e1 	bl	8008360 <HAL_TIM_IC_CaptureCallback>
 8007f9e:	e005      	b.n	8007fac <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f9d3 	bl	800834c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f9e4 	bl	8008374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d020      	beq.n	8007ffe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d01b      	beq.n	8007ffe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f06f 0204 	mvn.w	r2, #4
 8007fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f9bb 	bl	8008360 <HAL_TIM_IC_CaptureCallback>
 8007fea:	e005      	b.n	8007ff8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f9ad 	bl	800834c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f9be 	bl	8008374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f003 0308 	and.w	r3, r3, #8
 8008004:	2b00      	cmp	r3, #0
 8008006:	d020      	beq.n	800804a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f003 0308 	and.w	r3, r3, #8
 800800e:	2b00      	cmp	r3, #0
 8008010:	d01b      	beq.n	800804a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f06f 0208 	mvn.w	r2, #8
 800801a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2204      	movs	r2, #4
 8008020:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	f003 0303 	and.w	r3, r3, #3
 800802c:	2b00      	cmp	r3, #0
 800802e:	d003      	beq.n	8008038 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f995 	bl	8008360 <HAL_TIM_IC_CaptureCallback>
 8008036:	e005      	b.n	8008044 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f987 	bl	800834c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f998 	bl	8008374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f003 0310 	and.w	r3, r3, #16
 8008050:	2b00      	cmp	r3, #0
 8008052:	d020      	beq.n	8008096 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f003 0310 	and.w	r3, r3, #16
 800805a:	2b00      	cmp	r3, #0
 800805c:	d01b      	beq.n	8008096 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f06f 0210 	mvn.w	r2, #16
 8008066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2208      	movs	r2, #8
 800806c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f96f 	bl	8008360 <HAL_TIM_IC_CaptureCallback>
 8008082:	e005      	b.n	8008090 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f961 	bl	800834c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f972 	bl	8008374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00c      	beq.n	80080ba <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d007      	beq.n	80080ba <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f06f 0201 	mvn.w	r2, #1
 80080b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7f9 fa89 	bl	80015cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d104      	bne.n	80080ce <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00c      	beq.n	80080e8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d007      	beq.n	80080e8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80080e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fb50 	bl	8008788 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00c      	beq.n	800810c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d007      	beq.n	800810c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fb48 	bl	800879c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00c      	beq.n	8008130 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800811c:	2b00      	cmp	r3, #0
 800811e:	d007      	beq.n	8008130 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f92c 	bl	8008388 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00c      	beq.n	8008154 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f003 0320 	and.w	r3, r3, #32
 8008140:	2b00      	cmp	r3, #0
 8008142:	d007      	beq.n	8008154 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f06f 0220 	mvn.w	r2, #32
 800814c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fb10 	bl	8008774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008166:	2300      	movs	r3, #0
 8008168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <HAL_TIM_ConfigClockSource+0x1c>
 8008174:	2302      	movs	r3, #2
 8008176:	e0dc      	b.n	8008332 <HAL_TIM_ConfigClockSource+0x1d6>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2202      	movs	r2, #2
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	4b6a      	ldr	r3, [pc, #424]	@ (800833c <HAL_TIM_ConfigClockSource+0x1e0>)
 8008194:	4013      	ands	r3, r2
 8008196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800819e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a64      	ldr	r2, [pc, #400]	@ (8008340 <HAL_TIM_ConfigClockSource+0x1e4>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	f000 80a9 	beq.w	8008306 <HAL_TIM_ConfigClockSource+0x1aa>
 80081b4:	4a62      	ldr	r2, [pc, #392]	@ (8008340 <HAL_TIM_ConfigClockSource+0x1e4>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	f200 80ae 	bhi.w	8008318 <HAL_TIM_ConfigClockSource+0x1bc>
 80081bc:	4a61      	ldr	r2, [pc, #388]	@ (8008344 <HAL_TIM_ConfigClockSource+0x1e8>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	f000 80a1 	beq.w	8008306 <HAL_TIM_ConfigClockSource+0x1aa>
 80081c4:	4a5f      	ldr	r2, [pc, #380]	@ (8008344 <HAL_TIM_ConfigClockSource+0x1e8>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	f200 80a6 	bhi.w	8008318 <HAL_TIM_ConfigClockSource+0x1bc>
 80081cc:	4a5e      	ldr	r2, [pc, #376]	@ (8008348 <HAL_TIM_ConfigClockSource+0x1ec>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	f000 8099 	beq.w	8008306 <HAL_TIM_ConfigClockSource+0x1aa>
 80081d4:	4a5c      	ldr	r2, [pc, #368]	@ (8008348 <HAL_TIM_ConfigClockSource+0x1ec>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	f200 809e 	bhi.w	8008318 <HAL_TIM_ConfigClockSource+0x1bc>
 80081dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081e0:	f000 8091 	beq.w	8008306 <HAL_TIM_ConfigClockSource+0x1aa>
 80081e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081e8:	f200 8096 	bhi.w	8008318 <HAL_TIM_ConfigClockSource+0x1bc>
 80081ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081f0:	f000 8089 	beq.w	8008306 <HAL_TIM_ConfigClockSource+0x1aa>
 80081f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081f8:	f200 808e 	bhi.w	8008318 <HAL_TIM_ConfigClockSource+0x1bc>
 80081fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008200:	d03e      	beq.n	8008280 <HAL_TIM_ConfigClockSource+0x124>
 8008202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008206:	f200 8087 	bhi.w	8008318 <HAL_TIM_ConfigClockSource+0x1bc>
 800820a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800820e:	f000 8086 	beq.w	800831e <HAL_TIM_ConfigClockSource+0x1c2>
 8008212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008216:	d87f      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x1bc>
 8008218:	2b70      	cmp	r3, #112	@ 0x70
 800821a:	d01a      	beq.n	8008252 <HAL_TIM_ConfigClockSource+0xf6>
 800821c:	2b70      	cmp	r3, #112	@ 0x70
 800821e:	d87b      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x1bc>
 8008220:	2b60      	cmp	r3, #96	@ 0x60
 8008222:	d050      	beq.n	80082c6 <HAL_TIM_ConfigClockSource+0x16a>
 8008224:	2b60      	cmp	r3, #96	@ 0x60
 8008226:	d877      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x1bc>
 8008228:	2b50      	cmp	r3, #80	@ 0x50
 800822a:	d03c      	beq.n	80082a6 <HAL_TIM_ConfigClockSource+0x14a>
 800822c:	2b50      	cmp	r3, #80	@ 0x50
 800822e:	d873      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x1bc>
 8008230:	2b40      	cmp	r3, #64	@ 0x40
 8008232:	d058      	beq.n	80082e6 <HAL_TIM_ConfigClockSource+0x18a>
 8008234:	2b40      	cmp	r3, #64	@ 0x40
 8008236:	d86f      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x1bc>
 8008238:	2b30      	cmp	r3, #48	@ 0x30
 800823a:	d064      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0x1aa>
 800823c:	2b30      	cmp	r3, #48	@ 0x30
 800823e:	d86b      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x1bc>
 8008240:	2b20      	cmp	r3, #32
 8008242:	d060      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0x1aa>
 8008244:	2b20      	cmp	r3, #32
 8008246:	d867      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x1bc>
 8008248:	2b00      	cmp	r3, #0
 800824a:	d05c      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0x1aa>
 800824c:	2b10      	cmp	r3, #16
 800824e:	d05a      	beq.n	8008306 <HAL_TIM_ConfigClockSource+0x1aa>
 8008250:	e062      	b.n	8008318 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008262:	f000 f9cb 	bl	80085fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	609a      	str	r2, [r3, #8]
      break;
 800827e:	e04f      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008290:	f000 f9b4 	bl	80085fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082a2:	609a      	str	r2, [r3, #8]
      break;
 80082a4:	e03c      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082b2:	461a      	mov	r2, r3
 80082b4:	f000 f924 	bl	8008500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2150      	movs	r1, #80	@ 0x50
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 f97e 	bl	80085c0 <TIM_ITRx_SetConfig>
      break;
 80082c4:	e02c      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082d2:	461a      	mov	r2, r3
 80082d4:	f000 f943 	bl	800855e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2160      	movs	r1, #96	@ 0x60
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 f96e 	bl	80085c0 <TIM_ITRx_SetConfig>
      break;
 80082e4:	e01c      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082f2:	461a      	mov	r2, r3
 80082f4:	f000 f904 	bl	8008500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2140      	movs	r1, #64	@ 0x40
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 f95e 	bl	80085c0 <TIM_ITRx_SetConfig>
      break;
 8008304:	e00c      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4619      	mov	r1, r3
 8008310:	4610      	mov	r0, r2
 8008312:	f000 f955 	bl	80085c0 <TIM_ITRx_SetConfig>
      break;
 8008316:	e003      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	73fb      	strb	r3, [r7, #15]
      break;
 800831c:	e000      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800831e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	ffceff88 	.word	0xffceff88
 8008340:	00100040 	.word	0x00100040
 8008344:	00100030 	.word	0x00100030
 8008348:	00100020 	.word	0x00100020

0800834c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a4a      	ldr	r2, [pc, #296]	@ (80084d8 <TIM_Base_SetConfig+0x13c>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d013      	beq.n	80083dc <TIM_Base_SetConfig+0x40>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ba:	d00f      	beq.n	80083dc <TIM_Base_SetConfig+0x40>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a47      	ldr	r2, [pc, #284]	@ (80084dc <TIM_Base_SetConfig+0x140>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d00b      	beq.n	80083dc <TIM_Base_SetConfig+0x40>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a46      	ldr	r2, [pc, #280]	@ (80084e0 <TIM_Base_SetConfig+0x144>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d007      	beq.n	80083dc <TIM_Base_SetConfig+0x40>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a45      	ldr	r2, [pc, #276]	@ (80084e4 <TIM_Base_SetConfig+0x148>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d003      	beq.n	80083dc <TIM_Base_SetConfig+0x40>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a44      	ldr	r2, [pc, #272]	@ (80084e8 <TIM_Base_SetConfig+0x14c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d108      	bne.n	80083ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a39      	ldr	r2, [pc, #228]	@ (80084d8 <TIM_Base_SetConfig+0x13c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d027      	beq.n	8008446 <TIM_Base_SetConfig+0xaa>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083fc:	d023      	beq.n	8008446 <TIM_Base_SetConfig+0xaa>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a36      	ldr	r2, [pc, #216]	@ (80084dc <TIM_Base_SetConfig+0x140>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d01f      	beq.n	8008446 <TIM_Base_SetConfig+0xaa>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a35      	ldr	r2, [pc, #212]	@ (80084e0 <TIM_Base_SetConfig+0x144>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d01b      	beq.n	8008446 <TIM_Base_SetConfig+0xaa>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a34      	ldr	r2, [pc, #208]	@ (80084e4 <TIM_Base_SetConfig+0x148>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d017      	beq.n	8008446 <TIM_Base_SetConfig+0xaa>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a33      	ldr	r2, [pc, #204]	@ (80084e8 <TIM_Base_SetConfig+0x14c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d013      	beq.n	8008446 <TIM_Base_SetConfig+0xaa>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a32      	ldr	r2, [pc, #200]	@ (80084ec <TIM_Base_SetConfig+0x150>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d00f      	beq.n	8008446 <TIM_Base_SetConfig+0xaa>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a31      	ldr	r2, [pc, #196]	@ (80084f0 <TIM_Base_SetConfig+0x154>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d00b      	beq.n	8008446 <TIM_Base_SetConfig+0xaa>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a30      	ldr	r2, [pc, #192]	@ (80084f4 <TIM_Base_SetConfig+0x158>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d007      	beq.n	8008446 <TIM_Base_SetConfig+0xaa>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a2f      	ldr	r2, [pc, #188]	@ (80084f8 <TIM_Base_SetConfig+0x15c>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d003      	beq.n	8008446 <TIM_Base_SetConfig+0xaa>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a2e      	ldr	r2, [pc, #184]	@ (80084fc <TIM_Base_SetConfig+0x160>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d108      	bne.n	8008458 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800844c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	4313      	orrs	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	4313      	orrs	r3, r2
 8008464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a16      	ldr	r2, [pc, #88]	@ (80084d8 <TIM_Base_SetConfig+0x13c>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d00f      	beq.n	80084a4 <TIM_Base_SetConfig+0x108>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a18      	ldr	r2, [pc, #96]	@ (80084e8 <TIM_Base_SetConfig+0x14c>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d00b      	beq.n	80084a4 <TIM_Base_SetConfig+0x108>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a17      	ldr	r2, [pc, #92]	@ (80084ec <TIM_Base_SetConfig+0x150>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d007      	beq.n	80084a4 <TIM_Base_SetConfig+0x108>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a16      	ldr	r2, [pc, #88]	@ (80084f0 <TIM_Base_SetConfig+0x154>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d003      	beq.n	80084a4 <TIM_Base_SetConfig+0x108>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a15      	ldr	r2, [pc, #84]	@ (80084f4 <TIM_Base_SetConfig+0x158>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d103      	bne.n	80084ac <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	691a      	ldr	r2, [r3, #16]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d105      	bne.n	80084ca <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	f023 0201 	bic.w	r2, r3, #1
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	611a      	str	r2, [r3, #16]
  }
}
 80084ca:	bf00      	nop
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	40010000 	.word	0x40010000
 80084dc:	40000400 	.word	0x40000400
 80084e0:	40000800 	.word	0x40000800
 80084e4:	40000c00 	.word	0x40000c00
 80084e8:	40010400 	.word	0x40010400
 80084ec:	40014000 	.word	0x40014000
 80084f0:	40014400 	.word	0x40014400
 80084f4:	40014800 	.word	0x40014800
 80084f8:	4000e000 	.word	0x4000e000
 80084fc:	4000e400 	.word	0x4000e400

08008500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008500:	b480      	push	{r7}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	f023 0201 	bic.w	r2, r3, #1
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800852a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	4313      	orrs	r3, r2
 8008534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f023 030a 	bic.w	r3, r3, #10
 800853c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	4313      	orrs	r3, r2
 8008544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	621a      	str	r2, [r3, #32]
}
 8008552:	bf00      	nop
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800855e:	b480      	push	{r7}
 8008560:	b087      	sub	sp, #28
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	f023 0210 	bic.w	r2, r3, #16
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008588:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	031b      	lsls	r3, r3, #12
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	4313      	orrs	r3, r2
 8008592:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800859a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	621a      	str	r2, [r3, #32]
}
 80085b2:	bf00      	nop
 80085b4:	371c      	adds	r7, #28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
	...

080085c0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	4b09      	ldr	r3, [pc, #36]	@ (80085f8 <TIM_ITRx_SetConfig+0x38>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	4313      	orrs	r3, r2
 80085de:	f043 0307 	orr.w	r3, r3, #7
 80085e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	609a      	str	r2, [r3, #8]
}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	ffcfff8f 	.word	0xffcfff8f

080085fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	021a      	lsls	r2, r3, #8
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	431a      	orrs	r2, r3
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	4313      	orrs	r3, r2
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	4313      	orrs	r3, r2
 8008628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	609a      	str	r2, [r3, #8]
}
 8008630:	bf00      	nop
 8008632:	371c      	adds	r7, #28
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800864c:	2b01      	cmp	r3, #1
 800864e:	d101      	bne.n	8008654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008650:	2302      	movs	r3, #2
 8008652:	e077      	b.n	8008744 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2202      	movs	r2, #2
 8008660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a35      	ldr	r2, [pc, #212]	@ (8008750 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d004      	beq.n	8008688 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a34      	ldr	r2, [pc, #208]	@ (8008754 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d108      	bne.n	800869a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800868e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a25      	ldr	r2, [pc, #148]	@ (8008750 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d02c      	beq.n	8008718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086c6:	d027      	beq.n	8008718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a22      	ldr	r2, [pc, #136]	@ (8008758 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d022      	beq.n	8008718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a21      	ldr	r2, [pc, #132]	@ (800875c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d01d      	beq.n	8008718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a1f      	ldr	r2, [pc, #124]	@ (8008760 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d018      	beq.n	8008718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008754 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d013      	beq.n	8008718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a1b      	ldr	r2, [pc, #108]	@ (8008764 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d00e      	beq.n	8008718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a1a      	ldr	r2, [pc, #104]	@ (8008768 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d009      	beq.n	8008718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a18      	ldr	r2, [pc, #96]	@ (800876c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d004      	beq.n	8008718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a17      	ldr	r2, [pc, #92]	@ (8008770 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d10c      	bne.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800871e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	4313      	orrs	r3, r2
 8008728:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	40010000 	.word	0x40010000
 8008754:	40010400 	.word	0x40010400
 8008758:	40000400 	.word	0x40000400
 800875c:	40000800 	.word	0x40000800
 8008760:	40000c00 	.word	0x40000c00
 8008764:	40001800 	.word	0x40001800
 8008768:	40014000 	.word	0x40014000
 800876c:	4000e000 	.word	0x4000e000
 8008770:	4000e400 	.word	0x4000e400

08008774 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d101      	bne.n	80087c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e042      	b.n	8008848 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d106      	bne.n	80087da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7f9 fe51 	bl	800247c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2224      	movs	r2, #36	@ 0x24
 80087de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f022 0201 	bic.w	r2, r2, #1
 80087f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d002      	beq.n	8008800 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f001 fc10 	bl	800a020 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fda1 	bl	8009348 <UART_SetConfig>
 8008806:	4603      	mov	r3, r0
 8008808:	2b01      	cmp	r3, #1
 800880a:	d101      	bne.n	8008810 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e01b      	b.n	8008848 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800881e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689a      	ldr	r2, [r3, #8]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800882e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0201 	orr.w	r2, r2, #1
 800883e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 fc8f 	bl	800a164 <UART_CheckIdleState>
 8008846:	4603      	mov	r3, r0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08a      	sub	sp, #40	@ 0x28
 8008854:	af02      	add	r7, sp, #8
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	4613      	mov	r3, r2
 800885e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008866:	2b20      	cmp	r3, #32
 8008868:	d17b      	bne.n	8008962 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <HAL_UART_Transmit+0x26>
 8008870:	88fb      	ldrh	r3, [r7, #6]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e074      	b.n	8008964 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2221      	movs	r2, #33	@ 0x21
 8008886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800888a:	f7fa fa43 	bl	8002d14 <HAL_GetTick>
 800888e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	88fa      	ldrh	r2, [r7, #6]
 8008894:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	88fa      	ldrh	r2, [r7, #6]
 800889c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088a8:	d108      	bne.n	80088bc <HAL_UART_Transmit+0x6c>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d104      	bne.n	80088bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80088b2:	2300      	movs	r3, #0
 80088b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	61bb      	str	r3, [r7, #24]
 80088ba:	e003      	b.n	80088c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088c0:	2300      	movs	r3, #0
 80088c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088c4:	e030      	b.n	8008928 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	2200      	movs	r2, #0
 80088ce:	2180      	movs	r1, #128	@ 0x80
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f001 fcf1 	bl	800a2b8 <UART_WaitOnFlagUntilTimeout>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d005      	beq.n	80088e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2220      	movs	r2, #32
 80088e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e03d      	b.n	8008964 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10b      	bne.n	8008906 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	3302      	adds	r3, #2
 8008902:	61bb      	str	r3, [r7, #24]
 8008904:	e007      	b.n	8008916 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	781a      	ldrb	r2, [r3, #0]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	3301      	adds	r3, #1
 8008914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800891c:	b29b      	uxth	r3, r3
 800891e:	3b01      	subs	r3, #1
 8008920:	b29a      	uxth	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800892e:	b29b      	uxth	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1c8      	bne.n	80088c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2200      	movs	r2, #0
 800893c:	2140      	movs	r1, #64	@ 0x40
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f001 fcba 	bl	800a2b8 <UART_WaitOnFlagUntilTimeout>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d005      	beq.n	8008956 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2220      	movs	r2, #32
 800894e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e006      	b.n	8008964 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2220      	movs	r2, #32
 800895a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	e000      	b.n	8008964 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008962:	2302      	movs	r3, #2
  }
}
 8008964:	4618      	mov	r0, r3
 8008966:	3720      	adds	r7, #32
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b08a      	sub	sp, #40	@ 0x28
 8008970:	af02      	add	r7, sp, #8
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	603b      	str	r3, [r7, #0]
 8008978:	4613      	mov	r3, r2
 800897a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008982:	2b20      	cmp	r3, #32
 8008984:	f040 80b5 	bne.w	8008af2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <HAL_UART_Receive+0x28>
 800898e:	88fb      	ldrh	r3, [r7, #6]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e0ad      	b.n	8008af4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2222      	movs	r2, #34	@ 0x22
 80089a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089ae:	f7fa f9b1 	bl	8002d14 <HAL_GetTick>
 80089b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	88fa      	ldrh	r2, [r7, #6]
 80089b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	88fa      	ldrh	r2, [r7, #6]
 80089c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089cc:	d10e      	bne.n	80089ec <HAL_UART_Receive+0x80>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d105      	bne.n	80089e2 <HAL_UART_Receive+0x76>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80089dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80089e0:	e02d      	b.n	8008a3e <HAL_UART_Receive+0xd2>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	22ff      	movs	r2, #255	@ 0xff
 80089e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80089ea:	e028      	b.n	8008a3e <HAL_UART_Receive+0xd2>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10d      	bne.n	8008a10 <HAL_UART_Receive+0xa4>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d104      	bne.n	8008a06 <HAL_UART_Receive+0x9a>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	22ff      	movs	r2, #255	@ 0xff
 8008a00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a04:	e01b      	b.n	8008a3e <HAL_UART_Receive+0xd2>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	227f      	movs	r2, #127	@ 0x7f
 8008a0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a0e:	e016      	b.n	8008a3e <HAL_UART_Receive+0xd2>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a18:	d10d      	bne.n	8008a36 <HAL_UART_Receive+0xca>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d104      	bne.n	8008a2c <HAL_UART_Receive+0xc0>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	227f      	movs	r2, #127	@ 0x7f
 8008a26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a2a:	e008      	b.n	8008a3e <HAL_UART_Receive+0xd2>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	223f      	movs	r2, #63	@ 0x3f
 8008a30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a34:	e003      	b.n	8008a3e <HAL_UART_Receive+0xd2>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a44:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a4e:	d108      	bne.n	8008a62 <HAL_UART_Receive+0xf6>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d104      	bne.n	8008a62 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	61bb      	str	r3, [r7, #24]
 8008a60:	e003      	b.n	8008a6a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008a6a:	e036      	b.n	8008ada <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	2200      	movs	r2, #0
 8008a74:	2120      	movs	r1, #32
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f001 fc1e 	bl	800a2b8 <UART_WaitOnFlagUntilTimeout>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d005      	beq.n	8008a8e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2220      	movs	r2, #32
 8008a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e032      	b.n	8008af4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10c      	bne.n	8008aae <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	8a7b      	ldrh	r3, [r7, #18]
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	3302      	adds	r3, #2
 8008aaa:	61bb      	str	r3, [r7, #24]
 8008aac:	e00c      	b.n	8008ac8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	8a7b      	ldrh	r3, [r7, #18]
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	4013      	ands	r3, r2
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1c2      	bne.n	8008a6c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2220      	movs	r2, #32
 8008aea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	e000      	b.n	8008af4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008af2:	2302      	movs	r3, #2
  }
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3720      	adds	r7, #32
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b08a      	sub	sp, #40	@ 0x28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	4613      	mov	r3, r2
 8008b08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b10:	2b20      	cmp	r3, #32
 8008b12:	d137      	bne.n	8008b84 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d002      	beq.n	8008b20 <HAL_UART_Receive_IT+0x24>
 8008b1a:	88fb      	ldrh	r3, [r7, #6]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e030      	b.n	8008b86 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a18      	ldr	r2, [pc, #96]	@ (8008b90 <HAL_UART_Receive_IT+0x94>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d01f      	beq.n	8008b74 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d018      	beq.n	8008b74 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	e853 3f00 	ldrex	r3, [r3]
 8008b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b60:	623b      	str	r3, [r7, #32]
 8008b62:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b64:	69f9      	ldr	r1, [r7, #28]
 8008b66:	6a3a      	ldr	r2, [r7, #32]
 8008b68:	e841 2300 	strex	r3, r2, [r1]
 8008b6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1e6      	bne.n	8008b42 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b74:	88fb      	ldrh	r3, [r7, #6]
 8008b76:	461a      	mov	r2, r3
 8008b78:	68b9      	ldr	r1, [r7, #8]
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f001 fc0a 	bl	800a394 <UART_Start_Receive_IT>
 8008b80:	4603      	mov	r3, r0
 8008b82:	e000      	b.n	8008b86 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b84:	2302      	movs	r3, #2
  }
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3728      	adds	r7, #40	@ 0x28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	58000c00 	.word	0x58000c00

08008b94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b0ba      	sub	sp, #232	@ 0xe8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008bbe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d11b      	bne.n	8008c08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd4:	f003 0320 	and.w	r3, r3, #32
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d015      	beq.n	8008c08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008be0:	f003 0320 	and.w	r3, r3, #32
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d105      	bne.n	8008bf4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d009      	beq.n	8008c08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 8377 	beq.w	80092ec <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	4798      	blx	r3
      }
      return;
 8008c06:	e371      	b.n	80092ec <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 8123 	beq.w	8008e58 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008c16:	4b8d      	ldr	r3, [pc, #564]	@ (8008e4c <HAL_UART_IRQHandler+0x2b8>)
 8008c18:	4013      	ands	r3, r2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d106      	bne.n	8008c2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008c22:	4b8b      	ldr	r3, [pc, #556]	@ (8008e50 <HAL_UART_IRQHandler+0x2bc>)
 8008c24:	4013      	ands	r3, r2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 8116 	beq.w	8008e58 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c30:	f003 0301 	and.w	r3, r3, #1
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d011      	beq.n	8008c5c <HAL_UART_IRQHandler+0xc8>
 8008c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00b      	beq.n	8008c5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c52:	f043 0201 	orr.w	r2, r3, #1
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c60:	f003 0302 	and.w	r3, r3, #2
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d011      	beq.n	8008c8c <HAL_UART_IRQHandler+0xf8>
 8008c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00b      	beq.n	8008c8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2202      	movs	r2, #2
 8008c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c82:	f043 0204 	orr.w	r2, r3, #4
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d011      	beq.n	8008cbc <HAL_UART_IRQHandler+0x128>
 8008c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c9c:	f003 0301 	and.w	r3, r3, #1
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00b      	beq.n	8008cbc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2204      	movs	r2, #4
 8008caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cb2:	f043 0202 	orr.w	r2, r3, #2
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cc0:	f003 0308 	and.w	r3, r3, #8
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d017      	beq.n	8008cf8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ccc:	f003 0320 	and.w	r3, r3, #32
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d105      	bne.n	8008ce0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008cd4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008cd8:	4b5c      	ldr	r3, [pc, #368]	@ (8008e4c <HAL_UART_IRQHandler+0x2b8>)
 8008cda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00b      	beq.n	8008cf8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2208      	movs	r2, #8
 8008ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cee:	f043 0208 	orr.w	r2, r3, #8
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d012      	beq.n	8008d2a <HAL_UART_IRQHandler+0x196>
 8008d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00c      	beq.n	8008d2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d20:	f043 0220 	orr.w	r2, r3, #32
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 82dd 	beq.w	80092f0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d3a:	f003 0320 	and.w	r3, r3, #32
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d013      	beq.n	8008d6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d46:	f003 0320 	and.w	r3, r3, #32
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d105      	bne.n	8008d5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d007      	beq.n	8008d6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7e:	2b40      	cmp	r3, #64	@ 0x40
 8008d80:	d005      	beq.n	8008d8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d054      	beq.n	8008e38 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f001 fc22 	bl	800a5d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d9e:	2b40      	cmp	r3, #64	@ 0x40
 8008da0:	d146      	bne.n	8008e30 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3308      	adds	r3, #8
 8008da8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008db0:	e853 3f00 	ldrex	r3, [r3]
 8008db4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008dbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	3308      	adds	r3, #8
 8008dca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008dce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008dda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008dde:	e841 2300 	strex	r3, r2, [r1]
 8008de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1d9      	bne.n	8008da2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d017      	beq.n	8008e28 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dfe:	4a15      	ldr	r2, [pc, #84]	@ (8008e54 <HAL_UART_IRQHandler+0x2c0>)
 8008e00:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7fa fc59 	bl	80036c0 <HAL_DMA_Abort_IT>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d019      	beq.n	8008e48 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008e22:	4610      	mov	r0, r2
 8008e24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e26:	e00f      	b.n	8008e48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fa77 	bl	800931c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e2e:	e00b      	b.n	8008e48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fa73 	bl	800931c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e36:	e007      	b.n	8008e48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fa6f 	bl	800931c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008e46:	e253      	b.n	80092f0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e48:	bf00      	nop
    return;
 8008e4a:	e251      	b.n	80092f0 <HAL_UART_IRQHandler+0x75c>
 8008e4c:	10000001 	.word	0x10000001
 8008e50:	04000120 	.word	0x04000120
 8008e54:	0800a6a5 	.word	0x0800a6a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	f040 81e7 	bne.w	8009230 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e66:	f003 0310 	and.w	r3, r3, #16
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 81e0 	beq.w	8009230 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e74:	f003 0310 	and.w	r3, r3, #16
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 81d9 	beq.w	8009230 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2210      	movs	r2, #16
 8008e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e90:	2b40      	cmp	r3, #64	@ 0x40
 8008e92:	f040 8151 	bne.w	8009138 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a96      	ldr	r2, [pc, #600]	@ (80090f8 <HAL_UART_IRQHandler+0x564>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d068      	beq.n	8008f76 <HAL_UART_IRQHandler+0x3e2>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a93      	ldr	r2, [pc, #588]	@ (80090fc <HAL_UART_IRQHandler+0x568>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d061      	beq.n	8008f76 <HAL_UART_IRQHandler+0x3e2>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a91      	ldr	r2, [pc, #580]	@ (8009100 <HAL_UART_IRQHandler+0x56c>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d05a      	beq.n	8008f76 <HAL_UART_IRQHandler+0x3e2>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a8e      	ldr	r2, [pc, #568]	@ (8009104 <HAL_UART_IRQHandler+0x570>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d053      	beq.n	8008f76 <HAL_UART_IRQHandler+0x3e2>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a8c      	ldr	r2, [pc, #560]	@ (8009108 <HAL_UART_IRQHandler+0x574>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d04c      	beq.n	8008f76 <HAL_UART_IRQHandler+0x3e2>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a89      	ldr	r2, [pc, #548]	@ (800910c <HAL_UART_IRQHandler+0x578>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d045      	beq.n	8008f76 <HAL_UART_IRQHandler+0x3e2>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a87      	ldr	r2, [pc, #540]	@ (8009110 <HAL_UART_IRQHandler+0x57c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d03e      	beq.n	8008f76 <HAL_UART_IRQHandler+0x3e2>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a84      	ldr	r2, [pc, #528]	@ (8009114 <HAL_UART_IRQHandler+0x580>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d037      	beq.n	8008f76 <HAL_UART_IRQHandler+0x3e2>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a82      	ldr	r2, [pc, #520]	@ (8009118 <HAL_UART_IRQHandler+0x584>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d030      	beq.n	8008f76 <HAL_UART_IRQHandler+0x3e2>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a7f      	ldr	r2, [pc, #508]	@ (800911c <HAL_UART_IRQHandler+0x588>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d029      	beq.n	8008f76 <HAL_UART_IRQHandler+0x3e2>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a7d      	ldr	r2, [pc, #500]	@ (8009120 <HAL_UART_IRQHandler+0x58c>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d022      	beq.n	8008f76 <HAL_UART_IRQHandler+0x3e2>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a7a      	ldr	r2, [pc, #488]	@ (8009124 <HAL_UART_IRQHandler+0x590>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d01b      	beq.n	8008f76 <HAL_UART_IRQHandler+0x3e2>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a78      	ldr	r2, [pc, #480]	@ (8009128 <HAL_UART_IRQHandler+0x594>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d014      	beq.n	8008f76 <HAL_UART_IRQHandler+0x3e2>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a75      	ldr	r2, [pc, #468]	@ (800912c <HAL_UART_IRQHandler+0x598>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d00d      	beq.n	8008f76 <HAL_UART_IRQHandler+0x3e2>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a73      	ldr	r2, [pc, #460]	@ (8009130 <HAL_UART_IRQHandler+0x59c>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d006      	beq.n	8008f76 <HAL_UART_IRQHandler+0x3e2>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a70      	ldr	r2, [pc, #448]	@ (8009134 <HAL_UART_IRQHandler+0x5a0>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d106      	bne.n	8008f84 <HAL_UART_IRQHandler+0x3f0>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	e005      	b.n	8008f90 <HAL_UART_IRQHandler+0x3fc>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 81ab 	beq.w	80092f4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	f080 81a3 	bcs.w	80092f4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fb4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fc4:	f000 8087 	beq.w	80090d6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008fd4:	e853 3f00 	ldrex	r3, [r3]
 8008fd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	461a      	mov	r2, r3
 8008fee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ff2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ff6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ffe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009002:	e841 2300 	strex	r3, r2, [r1]
 8009006:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800900a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1da      	bne.n	8008fc8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3308      	adds	r3, #8
 8009018:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800901c:	e853 3f00 	ldrex	r3, [r3]
 8009020:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009022:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009024:	f023 0301 	bic.w	r3, r3, #1
 8009028:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3308      	adds	r3, #8
 8009032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009036:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800903a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800903e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009042:	e841 2300 	strex	r3, r2, [r1]
 8009046:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009048:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1e1      	bne.n	8009012 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3308      	adds	r3, #8
 8009054:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009056:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009058:	e853 3f00 	ldrex	r3, [r3]
 800905c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800905e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009064:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3308      	adds	r3, #8
 800906e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009072:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009074:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009076:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009078:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009080:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e3      	bne.n	800904e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2220      	movs	r2, #32
 800908a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090a4:	f023 0310 	bic.w	r3, r3, #16
 80090a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	461a      	mov	r2, r3
 80090b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e4      	bne.n	8009094 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7f9 ffd7 	bl	8003084 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2202      	movs	r2, #2
 80090da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f91d 	bl	8009330 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090f6:	e0fd      	b.n	80092f4 <HAL_UART_IRQHandler+0x760>
 80090f8:	40020010 	.word	0x40020010
 80090fc:	40020028 	.word	0x40020028
 8009100:	40020040 	.word	0x40020040
 8009104:	40020058 	.word	0x40020058
 8009108:	40020070 	.word	0x40020070
 800910c:	40020088 	.word	0x40020088
 8009110:	400200a0 	.word	0x400200a0
 8009114:	400200b8 	.word	0x400200b8
 8009118:	40020410 	.word	0x40020410
 800911c:	40020428 	.word	0x40020428
 8009120:	40020440 	.word	0x40020440
 8009124:	40020458 	.word	0x40020458
 8009128:	40020470 	.word	0x40020470
 800912c:	40020488 	.word	0x40020488
 8009130:	400204a0 	.word	0x400204a0
 8009134:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009144:	b29b      	uxth	r3, r3
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009152:	b29b      	uxth	r3, r3
 8009154:	2b00      	cmp	r3, #0
 8009156:	f000 80cf 	beq.w	80092f8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800915a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800915e:	2b00      	cmp	r3, #0
 8009160:	f000 80ca 	beq.w	80092f8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916c:	e853 3f00 	ldrex	r3, [r3]
 8009170:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009178:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	461a      	mov	r2, r3
 8009182:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009186:	647b      	str	r3, [r7, #68]	@ 0x44
 8009188:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800918c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e4      	bne.n	8009164 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3308      	adds	r3, #8
 80091a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a4:	e853 3f00 	ldrex	r3, [r3]
 80091a8:	623b      	str	r3, [r7, #32]
   return(result);
 80091aa:	6a3a      	ldr	r2, [r7, #32]
 80091ac:	4b55      	ldr	r3, [pc, #340]	@ (8009304 <HAL_UART_IRQHandler+0x770>)
 80091ae:	4013      	ands	r3, r2
 80091b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3308      	adds	r3, #8
 80091ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091be:	633a      	str	r2, [r7, #48]	@ 0x30
 80091c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1e3      	bne.n	800919a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2220      	movs	r2, #32
 80091d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0310 	bic.w	r3, r3, #16
 80091fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009208:	61fb      	str	r3, [r7, #28]
 800920a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920c:	69b9      	ldr	r1, [r7, #24]
 800920e:	69fa      	ldr	r2, [r7, #28]
 8009210:	e841 2300 	strex	r3, r2, [r1]
 8009214:	617b      	str	r3, [r7, #20]
   return(result);
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e4      	bne.n	80091e6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2202      	movs	r2, #2
 8009220:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009222:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f881 	bl	8009330 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800922e:	e063      	b.n	80092f8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00e      	beq.n	800925a <HAL_UART_IRQHandler+0x6c6>
 800923c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009240:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d008      	beq.n	800925a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009250:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f001 ff84 	bl	800b160 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009258:	e051      	b.n	80092fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800925a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800925e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009262:	2b00      	cmp	r3, #0
 8009264:	d014      	beq.n	8009290 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800926a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800926e:	2b00      	cmp	r3, #0
 8009270:	d105      	bne.n	800927e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d008      	beq.n	8009290 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009282:	2b00      	cmp	r3, #0
 8009284:	d03a      	beq.n	80092fc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	4798      	blx	r3
    }
    return;
 800928e:	e035      	b.n	80092fc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009298:	2b00      	cmp	r3, #0
 800929a:	d009      	beq.n	80092b0 <HAL_UART_IRQHandler+0x71c>
 800929c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f001 fa11 	bl	800a6d0 <UART_EndTransmit_IT>
    return;
 80092ae:	e026      	b.n	80092fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80092b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d009      	beq.n	80092d0 <HAL_UART_IRQHandler+0x73c>
 80092bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d003      	beq.n	80092d0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 ff5d 	bl	800b188 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092ce:	e016      	b.n	80092fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80092d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d010      	beq.n	80092fe <HAL_UART_IRQHandler+0x76a>
 80092dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	da0c      	bge.n	80092fe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f001 ff45 	bl	800b174 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092ea:	e008      	b.n	80092fe <HAL_UART_IRQHandler+0x76a>
      return;
 80092ec:	bf00      	nop
 80092ee:	e006      	b.n	80092fe <HAL_UART_IRQHandler+0x76a>
    return;
 80092f0:	bf00      	nop
 80092f2:	e004      	b.n	80092fe <HAL_UART_IRQHandler+0x76a>
      return;
 80092f4:	bf00      	nop
 80092f6:	e002      	b.n	80092fe <HAL_UART_IRQHandler+0x76a>
      return;
 80092f8:	bf00      	nop
 80092fa:	e000      	b.n	80092fe <HAL_UART_IRQHandler+0x76a>
    return;
 80092fc:	bf00      	nop
  }
}
 80092fe:	37e8      	adds	r7, #232	@ 0xe8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	effffffe 	.word	0xeffffffe

08009308 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800934c:	b092      	sub	sp, #72	@ 0x48
 800934e:	af00      	add	r7, sp, #0
 8009350:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	689a      	ldr	r2, [r3, #8]
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	431a      	orrs	r2, r3
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	431a      	orrs	r2, r3
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	69db      	ldr	r3, [r3, #28]
 800936c:	4313      	orrs	r3, r2
 800936e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	4bbe      	ldr	r3, [pc, #760]	@ (8009670 <UART_SetConfig+0x328>)
 8009378:	4013      	ands	r3, r2
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	6812      	ldr	r2, [r2, #0]
 800937e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009380:	430b      	orrs	r3, r1
 8009382:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	68da      	ldr	r2, [r3, #12]
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	430a      	orrs	r2, r1
 8009398:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4ab3      	ldr	r2, [pc, #716]	@ (8009674 <UART_SetConfig+0x32c>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d004      	beq.n	80093b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093b0:	4313      	orrs	r3, r2
 80093b2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	4baf      	ldr	r3, [pc, #700]	@ (8009678 <UART_SetConfig+0x330>)
 80093bc:	4013      	ands	r3, r2
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	6812      	ldr	r2, [r2, #0]
 80093c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80093c4:	430b      	orrs	r3, r1
 80093c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ce:	f023 010f 	bic.w	r1, r3, #15
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4aa6      	ldr	r2, [pc, #664]	@ (800967c <UART_SetConfig+0x334>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d177      	bne.n	80094d8 <UART_SetConfig+0x190>
 80093e8:	4ba5      	ldr	r3, [pc, #660]	@ (8009680 <UART_SetConfig+0x338>)
 80093ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093f0:	2b28      	cmp	r3, #40	@ 0x28
 80093f2:	d86d      	bhi.n	80094d0 <UART_SetConfig+0x188>
 80093f4:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <UART_SetConfig+0xb4>)
 80093f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fa:	bf00      	nop
 80093fc:	080094a1 	.word	0x080094a1
 8009400:	080094d1 	.word	0x080094d1
 8009404:	080094d1 	.word	0x080094d1
 8009408:	080094d1 	.word	0x080094d1
 800940c:	080094d1 	.word	0x080094d1
 8009410:	080094d1 	.word	0x080094d1
 8009414:	080094d1 	.word	0x080094d1
 8009418:	080094d1 	.word	0x080094d1
 800941c:	080094a9 	.word	0x080094a9
 8009420:	080094d1 	.word	0x080094d1
 8009424:	080094d1 	.word	0x080094d1
 8009428:	080094d1 	.word	0x080094d1
 800942c:	080094d1 	.word	0x080094d1
 8009430:	080094d1 	.word	0x080094d1
 8009434:	080094d1 	.word	0x080094d1
 8009438:	080094d1 	.word	0x080094d1
 800943c:	080094b1 	.word	0x080094b1
 8009440:	080094d1 	.word	0x080094d1
 8009444:	080094d1 	.word	0x080094d1
 8009448:	080094d1 	.word	0x080094d1
 800944c:	080094d1 	.word	0x080094d1
 8009450:	080094d1 	.word	0x080094d1
 8009454:	080094d1 	.word	0x080094d1
 8009458:	080094d1 	.word	0x080094d1
 800945c:	080094b9 	.word	0x080094b9
 8009460:	080094d1 	.word	0x080094d1
 8009464:	080094d1 	.word	0x080094d1
 8009468:	080094d1 	.word	0x080094d1
 800946c:	080094d1 	.word	0x080094d1
 8009470:	080094d1 	.word	0x080094d1
 8009474:	080094d1 	.word	0x080094d1
 8009478:	080094d1 	.word	0x080094d1
 800947c:	080094c1 	.word	0x080094c1
 8009480:	080094d1 	.word	0x080094d1
 8009484:	080094d1 	.word	0x080094d1
 8009488:	080094d1 	.word	0x080094d1
 800948c:	080094d1 	.word	0x080094d1
 8009490:	080094d1 	.word	0x080094d1
 8009494:	080094d1 	.word	0x080094d1
 8009498:	080094d1 	.word	0x080094d1
 800949c:	080094c9 	.word	0x080094c9
 80094a0:	2301      	movs	r3, #1
 80094a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a6:	e326      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80094a8:	2304      	movs	r3, #4
 80094aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ae:	e322      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80094b0:	2308      	movs	r3, #8
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b6:	e31e      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80094b8:	2310      	movs	r3, #16
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094be:	e31a      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80094c0:	2320      	movs	r3, #32
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c6:	e316      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80094c8:	2340      	movs	r3, #64	@ 0x40
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ce:	e312      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80094d0:	2380      	movs	r3, #128	@ 0x80
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e30e      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a69      	ldr	r2, [pc, #420]	@ (8009684 <UART_SetConfig+0x33c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d130      	bne.n	8009544 <UART_SetConfig+0x1fc>
 80094e2:	4b67      	ldr	r3, [pc, #412]	@ (8009680 <UART_SetConfig+0x338>)
 80094e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e6:	f003 0307 	and.w	r3, r3, #7
 80094ea:	2b05      	cmp	r3, #5
 80094ec:	d826      	bhi.n	800953c <UART_SetConfig+0x1f4>
 80094ee:	a201      	add	r2, pc, #4	@ (adr r2, 80094f4 <UART_SetConfig+0x1ac>)
 80094f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f4:	0800950d 	.word	0x0800950d
 80094f8:	08009515 	.word	0x08009515
 80094fc:	0800951d 	.word	0x0800951d
 8009500:	08009525 	.word	0x08009525
 8009504:	0800952d 	.word	0x0800952d
 8009508:	08009535 	.word	0x08009535
 800950c:	2300      	movs	r3, #0
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009512:	e2f0      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009514:	2304      	movs	r3, #4
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951a:	e2ec      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800951c:	2308      	movs	r3, #8
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009522:	e2e8      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009524:	2310      	movs	r3, #16
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952a:	e2e4      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800952c:	2320      	movs	r3, #32
 800952e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009532:	e2e0      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009534:	2340      	movs	r3, #64	@ 0x40
 8009536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953a:	e2dc      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800953c:	2380      	movs	r3, #128	@ 0x80
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e2d8      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a4f      	ldr	r2, [pc, #316]	@ (8009688 <UART_SetConfig+0x340>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d130      	bne.n	80095b0 <UART_SetConfig+0x268>
 800954e:	4b4c      	ldr	r3, [pc, #304]	@ (8009680 <UART_SetConfig+0x338>)
 8009550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009552:	f003 0307 	and.w	r3, r3, #7
 8009556:	2b05      	cmp	r3, #5
 8009558:	d826      	bhi.n	80095a8 <UART_SetConfig+0x260>
 800955a:	a201      	add	r2, pc, #4	@ (adr r2, 8009560 <UART_SetConfig+0x218>)
 800955c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009560:	08009579 	.word	0x08009579
 8009564:	08009581 	.word	0x08009581
 8009568:	08009589 	.word	0x08009589
 800956c:	08009591 	.word	0x08009591
 8009570:	08009599 	.word	0x08009599
 8009574:	080095a1 	.word	0x080095a1
 8009578:	2300      	movs	r3, #0
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957e:	e2ba      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009580:	2304      	movs	r3, #4
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009586:	e2b6      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009588:	2308      	movs	r3, #8
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958e:	e2b2      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009590:	2310      	movs	r3, #16
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009596:	e2ae      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009598:	2320      	movs	r3, #32
 800959a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959e:	e2aa      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80095a0:	2340      	movs	r3, #64	@ 0x40
 80095a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a6:	e2a6      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80095a8:	2380      	movs	r3, #128	@ 0x80
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e2a2      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a35      	ldr	r2, [pc, #212]	@ (800968c <UART_SetConfig+0x344>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d130      	bne.n	800961c <UART_SetConfig+0x2d4>
 80095ba:	4b31      	ldr	r3, [pc, #196]	@ (8009680 <UART_SetConfig+0x338>)
 80095bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095be:	f003 0307 	and.w	r3, r3, #7
 80095c2:	2b05      	cmp	r3, #5
 80095c4:	d826      	bhi.n	8009614 <UART_SetConfig+0x2cc>
 80095c6:	a201      	add	r2, pc, #4	@ (adr r2, 80095cc <UART_SetConfig+0x284>)
 80095c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095cc:	080095e5 	.word	0x080095e5
 80095d0:	080095ed 	.word	0x080095ed
 80095d4:	080095f5 	.word	0x080095f5
 80095d8:	080095fd 	.word	0x080095fd
 80095dc:	08009605 	.word	0x08009605
 80095e0:	0800960d 	.word	0x0800960d
 80095e4:	2300      	movs	r3, #0
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ea:	e284      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80095ec:	2304      	movs	r3, #4
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e280      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80095f4:	2308      	movs	r3, #8
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e27c      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80095fc:	2310      	movs	r3, #16
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e278      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009604:	2320      	movs	r3, #32
 8009606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960a:	e274      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800960c:	2340      	movs	r3, #64	@ 0x40
 800960e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009612:	e270      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009614:	2380      	movs	r3, #128	@ 0x80
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e26c      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a1b      	ldr	r2, [pc, #108]	@ (8009690 <UART_SetConfig+0x348>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d142      	bne.n	80096ac <UART_SetConfig+0x364>
 8009626:	4b16      	ldr	r3, [pc, #88]	@ (8009680 <UART_SetConfig+0x338>)
 8009628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800962a:	f003 0307 	and.w	r3, r3, #7
 800962e:	2b05      	cmp	r3, #5
 8009630:	d838      	bhi.n	80096a4 <UART_SetConfig+0x35c>
 8009632:	a201      	add	r2, pc, #4	@ (adr r2, 8009638 <UART_SetConfig+0x2f0>)
 8009634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009638:	08009651 	.word	0x08009651
 800963c:	08009659 	.word	0x08009659
 8009640:	08009661 	.word	0x08009661
 8009644:	08009669 	.word	0x08009669
 8009648:	08009695 	.word	0x08009695
 800964c:	0800969d 	.word	0x0800969d
 8009650:	2300      	movs	r3, #0
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009656:	e24e      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009658:	2304      	movs	r3, #4
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965e:	e24a      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009660:	2308      	movs	r3, #8
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009666:	e246      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009668:	2310      	movs	r3, #16
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966e:	e242      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009670:	cfff69f3 	.word	0xcfff69f3
 8009674:	58000c00 	.word	0x58000c00
 8009678:	11fff4ff 	.word	0x11fff4ff
 800967c:	40011000 	.word	0x40011000
 8009680:	58024400 	.word	0x58024400
 8009684:	40004400 	.word	0x40004400
 8009688:	40004800 	.word	0x40004800
 800968c:	40004c00 	.word	0x40004c00
 8009690:	40005000 	.word	0x40005000
 8009694:	2320      	movs	r3, #32
 8009696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969a:	e22c      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800969c:	2340      	movs	r3, #64	@ 0x40
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a2:	e228      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80096a4:	2380      	movs	r3, #128	@ 0x80
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096aa:	e224      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4ab1      	ldr	r2, [pc, #708]	@ (8009978 <UART_SetConfig+0x630>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d176      	bne.n	80097a4 <UART_SetConfig+0x45c>
 80096b6:	4bb1      	ldr	r3, [pc, #708]	@ (800997c <UART_SetConfig+0x634>)
 80096b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096be:	2b28      	cmp	r3, #40	@ 0x28
 80096c0:	d86c      	bhi.n	800979c <UART_SetConfig+0x454>
 80096c2:	a201      	add	r2, pc, #4	@ (adr r2, 80096c8 <UART_SetConfig+0x380>)
 80096c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c8:	0800976d 	.word	0x0800976d
 80096cc:	0800979d 	.word	0x0800979d
 80096d0:	0800979d 	.word	0x0800979d
 80096d4:	0800979d 	.word	0x0800979d
 80096d8:	0800979d 	.word	0x0800979d
 80096dc:	0800979d 	.word	0x0800979d
 80096e0:	0800979d 	.word	0x0800979d
 80096e4:	0800979d 	.word	0x0800979d
 80096e8:	08009775 	.word	0x08009775
 80096ec:	0800979d 	.word	0x0800979d
 80096f0:	0800979d 	.word	0x0800979d
 80096f4:	0800979d 	.word	0x0800979d
 80096f8:	0800979d 	.word	0x0800979d
 80096fc:	0800979d 	.word	0x0800979d
 8009700:	0800979d 	.word	0x0800979d
 8009704:	0800979d 	.word	0x0800979d
 8009708:	0800977d 	.word	0x0800977d
 800970c:	0800979d 	.word	0x0800979d
 8009710:	0800979d 	.word	0x0800979d
 8009714:	0800979d 	.word	0x0800979d
 8009718:	0800979d 	.word	0x0800979d
 800971c:	0800979d 	.word	0x0800979d
 8009720:	0800979d 	.word	0x0800979d
 8009724:	0800979d 	.word	0x0800979d
 8009728:	08009785 	.word	0x08009785
 800972c:	0800979d 	.word	0x0800979d
 8009730:	0800979d 	.word	0x0800979d
 8009734:	0800979d 	.word	0x0800979d
 8009738:	0800979d 	.word	0x0800979d
 800973c:	0800979d 	.word	0x0800979d
 8009740:	0800979d 	.word	0x0800979d
 8009744:	0800979d 	.word	0x0800979d
 8009748:	0800978d 	.word	0x0800978d
 800974c:	0800979d 	.word	0x0800979d
 8009750:	0800979d 	.word	0x0800979d
 8009754:	0800979d 	.word	0x0800979d
 8009758:	0800979d 	.word	0x0800979d
 800975c:	0800979d 	.word	0x0800979d
 8009760:	0800979d 	.word	0x0800979d
 8009764:	0800979d 	.word	0x0800979d
 8009768:	08009795 	.word	0x08009795
 800976c:	2301      	movs	r3, #1
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009772:	e1c0      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009774:	2304      	movs	r3, #4
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977a:	e1bc      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800977c:	2308      	movs	r3, #8
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009782:	e1b8      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009784:	2310      	movs	r3, #16
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978a:	e1b4      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800978c:	2320      	movs	r3, #32
 800978e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009792:	e1b0      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009794:	2340      	movs	r3, #64	@ 0x40
 8009796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979a:	e1ac      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800979c:	2380      	movs	r3, #128	@ 0x80
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e1a8      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a75      	ldr	r2, [pc, #468]	@ (8009980 <UART_SetConfig+0x638>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d130      	bne.n	8009810 <UART_SetConfig+0x4c8>
 80097ae:	4b73      	ldr	r3, [pc, #460]	@ (800997c <UART_SetConfig+0x634>)
 80097b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097b2:	f003 0307 	and.w	r3, r3, #7
 80097b6:	2b05      	cmp	r3, #5
 80097b8:	d826      	bhi.n	8009808 <UART_SetConfig+0x4c0>
 80097ba:	a201      	add	r2, pc, #4	@ (adr r2, 80097c0 <UART_SetConfig+0x478>)
 80097bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c0:	080097d9 	.word	0x080097d9
 80097c4:	080097e1 	.word	0x080097e1
 80097c8:	080097e9 	.word	0x080097e9
 80097cc:	080097f1 	.word	0x080097f1
 80097d0:	080097f9 	.word	0x080097f9
 80097d4:	08009801 	.word	0x08009801
 80097d8:	2300      	movs	r3, #0
 80097da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097de:	e18a      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80097e0:	2304      	movs	r3, #4
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e6:	e186      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80097e8:	2308      	movs	r3, #8
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ee:	e182      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80097f0:	2310      	movs	r3, #16
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f6:	e17e      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80097f8:	2320      	movs	r3, #32
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fe:	e17a      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009800:	2340      	movs	r3, #64	@ 0x40
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009806:	e176      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009808:	2380      	movs	r3, #128	@ 0x80
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980e:	e172      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a5b      	ldr	r2, [pc, #364]	@ (8009984 <UART_SetConfig+0x63c>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d130      	bne.n	800987c <UART_SetConfig+0x534>
 800981a:	4b58      	ldr	r3, [pc, #352]	@ (800997c <UART_SetConfig+0x634>)
 800981c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800981e:	f003 0307 	and.w	r3, r3, #7
 8009822:	2b05      	cmp	r3, #5
 8009824:	d826      	bhi.n	8009874 <UART_SetConfig+0x52c>
 8009826:	a201      	add	r2, pc, #4	@ (adr r2, 800982c <UART_SetConfig+0x4e4>)
 8009828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982c:	08009845 	.word	0x08009845
 8009830:	0800984d 	.word	0x0800984d
 8009834:	08009855 	.word	0x08009855
 8009838:	0800985d 	.word	0x0800985d
 800983c:	08009865 	.word	0x08009865
 8009840:	0800986d 	.word	0x0800986d
 8009844:	2300      	movs	r3, #0
 8009846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984a:	e154      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800984c:	2304      	movs	r3, #4
 800984e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009852:	e150      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009854:	2308      	movs	r3, #8
 8009856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985a:	e14c      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800985c:	2310      	movs	r3, #16
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009862:	e148      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009864:	2320      	movs	r3, #32
 8009866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986a:	e144      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800986c:	2340      	movs	r3, #64	@ 0x40
 800986e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009872:	e140      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009874:	2380      	movs	r3, #128	@ 0x80
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987a:	e13c      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a41      	ldr	r2, [pc, #260]	@ (8009988 <UART_SetConfig+0x640>)
 8009882:	4293      	cmp	r3, r2
 8009884:	f040 8082 	bne.w	800998c <UART_SetConfig+0x644>
 8009888:	4b3c      	ldr	r3, [pc, #240]	@ (800997c <UART_SetConfig+0x634>)
 800988a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009890:	2b28      	cmp	r3, #40	@ 0x28
 8009892:	d86d      	bhi.n	8009970 <UART_SetConfig+0x628>
 8009894:	a201      	add	r2, pc, #4	@ (adr r2, 800989c <UART_SetConfig+0x554>)
 8009896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989a:	bf00      	nop
 800989c:	08009941 	.word	0x08009941
 80098a0:	08009971 	.word	0x08009971
 80098a4:	08009971 	.word	0x08009971
 80098a8:	08009971 	.word	0x08009971
 80098ac:	08009971 	.word	0x08009971
 80098b0:	08009971 	.word	0x08009971
 80098b4:	08009971 	.word	0x08009971
 80098b8:	08009971 	.word	0x08009971
 80098bc:	08009949 	.word	0x08009949
 80098c0:	08009971 	.word	0x08009971
 80098c4:	08009971 	.word	0x08009971
 80098c8:	08009971 	.word	0x08009971
 80098cc:	08009971 	.word	0x08009971
 80098d0:	08009971 	.word	0x08009971
 80098d4:	08009971 	.word	0x08009971
 80098d8:	08009971 	.word	0x08009971
 80098dc:	08009951 	.word	0x08009951
 80098e0:	08009971 	.word	0x08009971
 80098e4:	08009971 	.word	0x08009971
 80098e8:	08009971 	.word	0x08009971
 80098ec:	08009971 	.word	0x08009971
 80098f0:	08009971 	.word	0x08009971
 80098f4:	08009971 	.word	0x08009971
 80098f8:	08009971 	.word	0x08009971
 80098fc:	08009959 	.word	0x08009959
 8009900:	08009971 	.word	0x08009971
 8009904:	08009971 	.word	0x08009971
 8009908:	08009971 	.word	0x08009971
 800990c:	08009971 	.word	0x08009971
 8009910:	08009971 	.word	0x08009971
 8009914:	08009971 	.word	0x08009971
 8009918:	08009971 	.word	0x08009971
 800991c:	08009961 	.word	0x08009961
 8009920:	08009971 	.word	0x08009971
 8009924:	08009971 	.word	0x08009971
 8009928:	08009971 	.word	0x08009971
 800992c:	08009971 	.word	0x08009971
 8009930:	08009971 	.word	0x08009971
 8009934:	08009971 	.word	0x08009971
 8009938:	08009971 	.word	0x08009971
 800993c:	08009969 	.word	0x08009969
 8009940:	2301      	movs	r3, #1
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009946:	e0d6      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009948:	2304      	movs	r3, #4
 800994a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994e:	e0d2      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009950:	2308      	movs	r3, #8
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009956:	e0ce      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009958:	2310      	movs	r3, #16
 800995a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995e:	e0ca      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009960:	2320      	movs	r3, #32
 8009962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009966:	e0c6      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009968:	2340      	movs	r3, #64	@ 0x40
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996e:	e0c2      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009970:	2380      	movs	r3, #128	@ 0x80
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009976:	e0be      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009978:	40011400 	.word	0x40011400
 800997c:	58024400 	.word	0x58024400
 8009980:	40007800 	.word	0x40007800
 8009984:	40007c00 	.word	0x40007c00
 8009988:	40011800 	.word	0x40011800
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4aad      	ldr	r2, [pc, #692]	@ (8009c48 <UART_SetConfig+0x900>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d176      	bne.n	8009a84 <UART_SetConfig+0x73c>
 8009996:	4bad      	ldr	r3, [pc, #692]	@ (8009c4c <UART_SetConfig+0x904>)
 8009998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800999a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800999e:	2b28      	cmp	r3, #40	@ 0x28
 80099a0:	d86c      	bhi.n	8009a7c <UART_SetConfig+0x734>
 80099a2:	a201      	add	r2, pc, #4	@ (adr r2, 80099a8 <UART_SetConfig+0x660>)
 80099a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a8:	08009a4d 	.word	0x08009a4d
 80099ac:	08009a7d 	.word	0x08009a7d
 80099b0:	08009a7d 	.word	0x08009a7d
 80099b4:	08009a7d 	.word	0x08009a7d
 80099b8:	08009a7d 	.word	0x08009a7d
 80099bc:	08009a7d 	.word	0x08009a7d
 80099c0:	08009a7d 	.word	0x08009a7d
 80099c4:	08009a7d 	.word	0x08009a7d
 80099c8:	08009a55 	.word	0x08009a55
 80099cc:	08009a7d 	.word	0x08009a7d
 80099d0:	08009a7d 	.word	0x08009a7d
 80099d4:	08009a7d 	.word	0x08009a7d
 80099d8:	08009a7d 	.word	0x08009a7d
 80099dc:	08009a7d 	.word	0x08009a7d
 80099e0:	08009a7d 	.word	0x08009a7d
 80099e4:	08009a7d 	.word	0x08009a7d
 80099e8:	08009a5d 	.word	0x08009a5d
 80099ec:	08009a7d 	.word	0x08009a7d
 80099f0:	08009a7d 	.word	0x08009a7d
 80099f4:	08009a7d 	.word	0x08009a7d
 80099f8:	08009a7d 	.word	0x08009a7d
 80099fc:	08009a7d 	.word	0x08009a7d
 8009a00:	08009a7d 	.word	0x08009a7d
 8009a04:	08009a7d 	.word	0x08009a7d
 8009a08:	08009a65 	.word	0x08009a65
 8009a0c:	08009a7d 	.word	0x08009a7d
 8009a10:	08009a7d 	.word	0x08009a7d
 8009a14:	08009a7d 	.word	0x08009a7d
 8009a18:	08009a7d 	.word	0x08009a7d
 8009a1c:	08009a7d 	.word	0x08009a7d
 8009a20:	08009a7d 	.word	0x08009a7d
 8009a24:	08009a7d 	.word	0x08009a7d
 8009a28:	08009a6d 	.word	0x08009a6d
 8009a2c:	08009a7d 	.word	0x08009a7d
 8009a30:	08009a7d 	.word	0x08009a7d
 8009a34:	08009a7d 	.word	0x08009a7d
 8009a38:	08009a7d 	.word	0x08009a7d
 8009a3c:	08009a7d 	.word	0x08009a7d
 8009a40:	08009a7d 	.word	0x08009a7d
 8009a44:	08009a7d 	.word	0x08009a7d
 8009a48:	08009a75 	.word	0x08009a75
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a52:	e050      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009a54:	2304      	movs	r3, #4
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a5a:	e04c      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a62:	e048      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009a64:	2310      	movs	r3, #16
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a6a:	e044      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009a6c:	2320      	movs	r3, #32
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a72:	e040      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009a74:	2340      	movs	r3, #64	@ 0x40
 8009a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a7a:	e03c      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009a7c:	2380      	movs	r3, #128	@ 0x80
 8009a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a82:	e038      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a71      	ldr	r2, [pc, #452]	@ (8009c50 <UART_SetConfig+0x908>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d130      	bne.n	8009af0 <UART_SetConfig+0x7a8>
 8009a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8009c4c <UART_SetConfig+0x904>)
 8009a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a92:	f003 0307 	and.w	r3, r3, #7
 8009a96:	2b05      	cmp	r3, #5
 8009a98:	d826      	bhi.n	8009ae8 <UART_SetConfig+0x7a0>
 8009a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa0 <UART_SetConfig+0x758>)
 8009a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa0:	08009ab9 	.word	0x08009ab9
 8009aa4:	08009ac1 	.word	0x08009ac1
 8009aa8:	08009ac9 	.word	0x08009ac9
 8009aac:	08009ad1 	.word	0x08009ad1
 8009ab0:	08009ad9 	.word	0x08009ad9
 8009ab4:	08009ae1 	.word	0x08009ae1
 8009ab8:	2302      	movs	r3, #2
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009abe:	e01a      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009ac0:	2304      	movs	r3, #4
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac6:	e016      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009ac8:	2308      	movs	r3, #8
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ace:	e012      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad6:	e00e      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009ad8:	2320      	movs	r3, #32
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ade:	e00a      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009ae0:	2340      	movs	r3, #64	@ 0x40
 8009ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae6:	e006      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009ae8:	2380      	movs	r3, #128	@ 0x80
 8009aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aee:	e002      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009af0:	2380      	movs	r3, #128	@ 0x80
 8009af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a55      	ldr	r2, [pc, #340]	@ (8009c50 <UART_SetConfig+0x908>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	f040 80f8 	bne.w	8009cf2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	dc46      	bgt.n	8009b98 <UART_SetConfig+0x850>
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	db75      	blt.n	8009bfa <UART_SetConfig+0x8b2>
 8009b0e:	3b02      	subs	r3, #2
 8009b10:	2b1e      	cmp	r3, #30
 8009b12:	d872      	bhi.n	8009bfa <UART_SetConfig+0x8b2>
 8009b14:	a201      	add	r2, pc, #4	@ (adr r2, 8009b1c <UART_SetConfig+0x7d4>)
 8009b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1a:	bf00      	nop
 8009b1c:	08009b9f 	.word	0x08009b9f
 8009b20:	08009bfb 	.word	0x08009bfb
 8009b24:	08009ba7 	.word	0x08009ba7
 8009b28:	08009bfb 	.word	0x08009bfb
 8009b2c:	08009bfb 	.word	0x08009bfb
 8009b30:	08009bfb 	.word	0x08009bfb
 8009b34:	08009bb7 	.word	0x08009bb7
 8009b38:	08009bfb 	.word	0x08009bfb
 8009b3c:	08009bfb 	.word	0x08009bfb
 8009b40:	08009bfb 	.word	0x08009bfb
 8009b44:	08009bfb 	.word	0x08009bfb
 8009b48:	08009bfb 	.word	0x08009bfb
 8009b4c:	08009bfb 	.word	0x08009bfb
 8009b50:	08009bfb 	.word	0x08009bfb
 8009b54:	08009bc7 	.word	0x08009bc7
 8009b58:	08009bfb 	.word	0x08009bfb
 8009b5c:	08009bfb 	.word	0x08009bfb
 8009b60:	08009bfb 	.word	0x08009bfb
 8009b64:	08009bfb 	.word	0x08009bfb
 8009b68:	08009bfb 	.word	0x08009bfb
 8009b6c:	08009bfb 	.word	0x08009bfb
 8009b70:	08009bfb 	.word	0x08009bfb
 8009b74:	08009bfb 	.word	0x08009bfb
 8009b78:	08009bfb 	.word	0x08009bfb
 8009b7c:	08009bfb 	.word	0x08009bfb
 8009b80:	08009bfb 	.word	0x08009bfb
 8009b84:	08009bfb 	.word	0x08009bfb
 8009b88:	08009bfb 	.word	0x08009bfb
 8009b8c:	08009bfb 	.word	0x08009bfb
 8009b90:	08009bfb 	.word	0x08009bfb
 8009b94:	08009bed 	.word	0x08009bed
 8009b98:	2b40      	cmp	r3, #64	@ 0x40
 8009b9a:	d02a      	beq.n	8009bf2 <UART_SetConfig+0x8aa>
 8009b9c:	e02d      	b.n	8009bfa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009b9e:	f7fd fca7 	bl	80074f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ba2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ba4:	e02f      	b.n	8009c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fd fcb6 	bl	800751c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bb4:	e027      	b.n	8009c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bb6:	f107 0318 	add.w	r3, r7, #24
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fd fe02 	bl	80077c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bc4:	e01f      	b.n	8009c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bc6:	4b21      	ldr	r3, [pc, #132]	@ (8009c4c <UART_SetConfig+0x904>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0320 	and.w	r3, r3, #32
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d009      	beq.n	8009be6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c4c <UART_SetConfig+0x904>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	08db      	lsrs	r3, r3, #3
 8009bd8:	f003 0303 	and.w	r3, r3, #3
 8009bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8009c54 <UART_SetConfig+0x90c>)
 8009bde:	fa22 f303 	lsr.w	r3, r2, r3
 8009be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009be4:	e00f      	b.n	8009c06 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009be6:	4b1b      	ldr	r3, [pc, #108]	@ (8009c54 <UART_SetConfig+0x90c>)
 8009be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bea:	e00c      	b.n	8009c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bec:	4b1a      	ldr	r3, [pc, #104]	@ (8009c58 <UART_SetConfig+0x910>)
 8009bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf0:	e009      	b.n	8009c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf8:	e005      	b.n	8009c06 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 81ee 	beq.w	8009fea <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c12:	4a12      	ldr	r2, [pc, #72]	@ (8009c5c <UART_SetConfig+0x914>)
 8009c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c20:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	4613      	mov	r3, r2
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	4413      	add	r3, r2
 8009c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d305      	bcc.n	8009c3e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d910      	bls.n	8009c60 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c44:	e1d1      	b.n	8009fea <UART_SetConfig+0xca2>
 8009c46:	bf00      	nop
 8009c48:	40011c00 	.word	0x40011c00
 8009c4c:	58024400 	.word	0x58024400
 8009c50:	58000c00 	.word	0x58000c00
 8009c54:	03d09000 	.word	0x03d09000
 8009c58:	003d0900 	.word	0x003d0900
 8009c5c:	08013288 	.word	0x08013288
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c62:	2200      	movs	r2, #0
 8009c64:	60bb      	str	r3, [r7, #8]
 8009c66:	60fa      	str	r2, [r7, #12]
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c6c:	4ac0      	ldr	r2, [pc, #768]	@ (8009f70 <UART_SetConfig+0xc28>)
 8009c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	2200      	movs	r2, #0
 8009c76:	603b      	str	r3, [r7, #0]
 8009c78:	607a      	str	r2, [r7, #4]
 8009c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c82:	f7f6 fd59 	bl	8000738 <__aeabi_uldivmod>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	f04f 0200 	mov.w	r2, #0
 8009c92:	f04f 0300 	mov.w	r3, #0
 8009c96:	020b      	lsls	r3, r1, #8
 8009c98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c9c:	0202      	lsls	r2, r0, #8
 8009c9e:	6979      	ldr	r1, [r7, #20]
 8009ca0:	6849      	ldr	r1, [r1, #4]
 8009ca2:	0849      	lsrs	r1, r1, #1
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	4605      	mov	r5, r0
 8009caa:	eb12 0804 	adds.w	r8, r2, r4
 8009cae:	eb43 0905 	adc.w	r9, r3, r5
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	469a      	mov	sl, r3
 8009cba:	4693      	mov	fp, r2
 8009cbc:	4652      	mov	r2, sl
 8009cbe:	465b      	mov	r3, fp
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	f7f6 fd38 	bl	8000738 <__aeabi_uldivmod>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4613      	mov	r3, r2
 8009cce:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cd6:	d308      	bcc.n	8009cea <UART_SetConfig+0x9a2>
 8009cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cde:	d204      	bcs.n	8009cea <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ce6:	60da      	str	r2, [r3, #12]
 8009ce8:	e17f      	b.n	8009fea <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009cf0:	e17b      	b.n	8009fea <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	69db      	ldr	r3, [r3, #28]
 8009cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cfa:	f040 80bd 	bne.w	8009e78 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009cfe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	dc48      	bgt.n	8009d98 <UART_SetConfig+0xa50>
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	db7b      	blt.n	8009e02 <UART_SetConfig+0xaba>
 8009d0a:	2b20      	cmp	r3, #32
 8009d0c:	d879      	bhi.n	8009e02 <UART_SetConfig+0xaba>
 8009d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d14 <UART_SetConfig+0x9cc>)
 8009d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d14:	08009d9f 	.word	0x08009d9f
 8009d18:	08009da7 	.word	0x08009da7
 8009d1c:	08009e03 	.word	0x08009e03
 8009d20:	08009e03 	.word	0x08009e03
 8009d24:	08009daf 	.word	0x08009daf
 8009d28:	08009e03 	.word	0x08009e03
 8009d2c:	08009e03 	.word	0x08009e03
 8009d30:	08009e03 	.word	0x08009e03
 8009d34:	08009dbf 	.word	0x08009dbf
 8009d38:	08009e03 	.word	0x08009e03
 8009d3c:	08009e03 	.word	0x08009e03
 8009d40:	08009e03 	.word	0x08009e03
 8009d44:	08009e03 	.word	0x08009e03
 8009d48:	08009e03 	.word	0x08009e03
 8009d4c:	08009e03 	.word	0x08009e03
 8009d50:	08009e03 	.word	0x08009e03
 8009d54:	08009dcf 	.word	0x08009dcf
 8009d58:	08009e03 	.word	0x08009e03
 8009d5c:	08009e03 	.word	0x08009e03
 8009d60:	08009e03 	.word	0x08009e03
 8009d64:	08009e03 	.word	0x08009e03
 8009d68:	08009e03 	.word	0x08009e03
 8009d6c:	08009e03 	.word	0x08009e03
 8009d70:	08009e03 	.word	0x08009e03
 8009d74:	08009e03 	.word	0x08009e03
 8009d78:	08009e03 	.word	0x08009e03
 8009d7c:	08009e03 	.word	0x08009e03
 8009d80:	08009e03 	.word	0x08009e03
 8009d84:	08009e03 	.word	0x08009e03
 8009d88:	08009e03 	.word	0x08009e03
 8009d8c:	08009e03 	.word	0x08009e03
 8009d90:	08009e03 	.word	0x08009e03
 8009d94:	08009df5 	.word	0x08009df5
 8009d98:	2b40      	cmp	r3, #64	@ 0x40
 8009d9a:	d02e      	beq.n	8009dfa <UART_SetConfig+0xab2>
 8009d9c:	e031      	b.n	8009e02 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d9e:	f7fc f9db 	bl	8006158 <HAL_RCC_GetPCLK1Freq>
 8009da2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009da4:	e033      	b.n	8009e0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009da6:	f7fc f9ed 	bl	8006184 <HAL_RCC_GetPCLK2Freq>
 8009daa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009dac:	e02f      	b.n	8009e0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fd fbb2 	bl	800751c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dbc:	e027      	b.n	8009e0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dbe:	f107 0318 	add.w	r3, r7, #24
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fd fcfe 	bl	80077c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dcc:	e01f      	b.n	8009e0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dce:	4b69      	ldr	r3, [pc, #420]	@ (8009f74 <UART_SetConfig+0xc2c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0320 	and.w	r3, r3, #32
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d009      	beq.n	8009dee <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dda:	4b66      	ldr	r3, [pc, #408]	@ (8009f74 <UART_SetConfig+0xc2c>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	08db      	lsrs	r3, r3, #3
 8009de0:	f003 0303 	and.w	r3, r3, #3
 8009de4:	4a64      	ldr	r2, [pc, #400]	@ (8009f78 <UART_SetConfig+0xc30>)
 8009de6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dec:	e00f      	b.n	8009e0e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009dee:	4b62      	ldr	r3, [pc, #392]	@ (8009f78 <UART_SetConfig+0xc30>)
 8009df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009df2:	e00c      	b.n	8009e0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009df4:	4b61      	ldr	r3, [pc, #388]	@ (8009f7c <UART_SetConfig+0xc34>)
 8009df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009df8:	e009      	b.n	8009e0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e00:	e005      	b.n	8009e0e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 80ea 	beq.w	8009fea <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e1a:	4a55      	ldr	r2, [pc, #340]	@ (8009f70 <UART_SetConfig+0xc28>)
 8009e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e20:	461a      	mov	r2, r3
 8009e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e28:	005a      	lsls	r2, r3, #1
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	085b      	lsrs	r3, r3, #1
 8009e30:	441a      	add	r2, r3
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3e:	2b0f      	cmp	r3, #15
 8009e40:	d916      	bls.n	8009e70 <UART_SetConfig+0xb28>
 8009e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e48:	d212      	bcs.n	8009e70 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	f023 030f 	bic.w	r3, r3, #15
 8009e52:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e56:	085b      	lsrs	r3, r3, #1
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	f003 0307 	and.w	r3, r3, #7
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009e62:	4313      	orrs	r3, r2
 8009e64:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009e6c:	60da      	str	r2, [r3, #12]
 8009e6e:	e0bc      	b.n	8009fea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009e76:	e0b8      	b.n	8009fea <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e78:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e7c:	2b20      	cmp	r3, #32
 8009e7e:	dc4b      	bgt.n	8009f18 <UART_SetConfig+0xbd0>
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f2c0 8087 	blt.w	8009f94 <UART_SetConfig+0xc4c>
 8009e86:	2b20      	cmp	r3, #32
 8009e88:	f200 8084 	bhi.w	8009f94 <UART_SetConfig+0xc4c>
 8009e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e94 <UART_SetConfig+0xb4c>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009f1f 	.word	0x08009f1f
 8009e98:	08009f27 	.word	0x08009f27
 8009e9c:	08009f95 	.word	0x08009f95
 8009ea0:	08009f95 	.word	0x08009f95
 8009ea4:	08009f2f 	.word	0x08009f2f
 8009ea8:	08009f95 	.word	0x08009f95
 8009eac:	08009f95 	.word	0x08009f95
 8009eb0:	08009f95 	.word	0x08009f95
 8009eb4:	08009f3f 	.word	0x08009f3f
 8009eb8:	08009f95 	.word	0x08009f95
 8009ebc:	08009f95 	.word	0x08009f95
 8009ec0:	08009f95 	.word	0x08009f95
 8009ec4:	08009f95 	.word	0x08009f95
 8009ec8:	08009f95 	.word	0x08009f95
 8009ecc:	08009f95 	.word	0x08009f95
 8009ed0:	08009f95 	.word	0x08009f95
 8009ed4:	08009f4f 	.word	0x08009f4f
 8009ed8:	08009f95 	.word	0x08009f95
 8009edc:	08009f95 	.word	0x08009f95
 8009ee0:	08009f95 	.word	0x08009f95
 8009ee4:	08009f95 	.word	0x08009f95
 8009ee8:	08009f95 	.word	0x08009f95
 8009eec:	08009f95 	.word	0x08009f95
 8009ef0:	08009f95 	.word	0x08009f95
 8009ef4:	08009f95 	.word	0x08009f95
 8009ef8:	08009f95 	.word	0x08009f95
 8009efc:	08009f95 	.word	0x08009f95
 8009f00:	08009f95 	.word	0x08009f95
 8009f04:	08009f95 	.word	0x08009f95
 8009f08:	08009f95 	.word	0x08009f95
 8009f0c:	08009f95 	.word	0x08009f95
 8009f10:	08009f95 	.word	0x08009f95
 8009f14:	08009f87 	.word	0x08009f87
 8009f18:	2b40      	cmp	r3, #64	@ 0x40
 8009f1a:	d037      	beq.n	8009f8c <UART_SetConfig+0xc44>
 8009f1c:	e03a      	b.n	8009f94 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f1e:	f7fc f91b 	bl	8006158 <HAL_RCC_GetPCLK1Freq>
 8009f22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f24:	e03c      	b.n	8009fa0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f26:	f7fc f92d 	bl	8006184 <HAL_RCC_GetPCLK2Freq>
 8009f2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f2c:	e038      	b.n	8009fa0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fd faf2 	bl	800751c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f3c:	e030      	b.n	8009fa0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f3e:	f107 0318 	add.w	r3, r7, #24
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fd fc3e 	bl	80077c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f4c:	e028      	b.n	8009fa0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f4e:	4b09      	ldr	r3, [pc, #36]	@ (8009f74 <UART_SetConfig+0xc2c>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0320 	and.w	r3, r3, #32
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d012      	beq.n	8009f80 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f5a:	4b06      	ldr	r3, [pc, #24]	@ (8009f74 <UART_SetConfig+0xc2c>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	08db      	lsrs	r3, r3, #3
 8009f60:	f003 0303 	and.w	r3, r3, #3
 8009f64:	4a04      	ldr	r2, [pc, #16]	@ (8009f78 <UART_SetConfig+0xc30>)
 8009f66:	fa22 f303 	lsr.w	r3, r2, r3
 8009f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f6c:	e018      	b.n	8009fa0 <UART_SetConfig+0xc58>
 8009f6e:	bf00      	nop
 8009f70:	08013288 	.word	0x08013288
 8009f74:	58024400 	.word	0x58024400
 8009f78:	03d09000 	.word	0x03d09000
 8009f7c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009f80:	4b24      	ldr	r3, [pc, #144]	@ (800a014 <UART_SetConfig+0xccc>)
 8009f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f84:	e00c      	b.n	8009fa0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f86:	4b24      	ldr	r3, [pc, #144]	@ (800a018 <UART_SetConfig+0xcd0>)
 8009f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f8a:	e009      	b.n	8009fa0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f92:	e005      	b.n	8009fa0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009f94:	2300      	movs	r3, #0
 8009f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f9e:	bf00      	nop
    }

    if (pclk != 0U)
 8009fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d021      	beq.n	8009fea <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009faa:	4a1c      	ldr	r2, [pc, #112]	@ (800a01c <UART_SetConfig+0xcd4>)
 8009fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	085b      	lsrs	r3, r3, #1
 8009fbe:	441a      	add	r2, r3
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fcc:	2b0f      	cmp	r3, #15
 8009fce:	d909      	bls.n	8009fe4 <UART_SetConfig+0xc9c>
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fd6:	d205      	bcs.n	8009fe4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	60da      	str	r2, [r3, #12]
 8009fe2:	e002      	b.n	8009fea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2200      	movs	r2, #0
 800a004:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a006:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3748      	adds	r7, #72	@ 0x48
 800a00e:	46bd      	mov	sp, r7
 800a010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a014:	03d09000 	.word	0x03d09000
 800a018:	003d0900 	.word	0x003d0900
 800a01c:	08013288 	.word	0x08013288

0800a020 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a02c:	f003 0308 	and.w	r3, r3, #8
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00a      	beq.n	800a04a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	430a      	orrs	r2, r1
 800a048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00a      	beq.n	800a06c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	430a      	orrs	r2, r1
 800a06a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a070:	f003 0302 	and.w	r3, r3, #2
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00a      	beq.n	800a08e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	430a      	orrs	r2, r1
 800a08c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a092:	f003 0304 	and.w	r3, r3, #4
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00a      	beq.n	800a0b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	430a      	orrs	r2, r1
 800a0ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b4:	f003 0310 	and.w	r3, r3, #16
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00a      	beq.n	800a0d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	430a      	orrs	r2, r1
 800a0d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d6:	f003 0320 	and.w	r3, r3, #32
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00a      	beq.n	800a0f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d01a      	beq.n	800a136 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	430a      	orrs	r2, r1
 800a114:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a11a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a11e:	d10a      	bne.n	800a136 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	430a      	orrs	r2, r1
 800a134:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00a      	beq.n	800a158 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	430a      	orrs	r2, r1
 800a156:	605a      	str	r2, [r3, #4]
  }
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b098      	sub	sp, #96	@ 0x60
 800a168:	af02      	add	r7, sp, #8
 800a16a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a174:	f7f8 fdce 	bl	8002d14 <HAL_GetTick>
 800a178:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0308 	and.w	r3, r3, #8
 800a184:	2b08      	cmp	r3, #8
 800a186:	d12f      	bne.n	800a1e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a188:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a190:	2200      	movs	r2, #0
 800a192:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f88e 	bl	800a2b8 <UART_WaitOnFlagUntilTimeout>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d022      	beq.n	800a1e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1aa:	e853 3f00 	ldrex	r3, [r3]
 800a1ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	461a      	mov	r2, r3
 800a1be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1c8:	e841 2300 	strex	r3, r2, [r1]
 800a1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1e6      	bne.n	800a1a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2220      	movs	r2, #32
 800a1d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e063      	b.n	800a2b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 0304 	and.w	r3, r3, #4
 800a1f2:	2b04      	cmp	r3, #4
 800a1f4:	d149      	bne.n	800a28a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1fe:	2200      	movs	r2, #0
 800a200:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 f857 	bl	800a2b8 <UART_WaitOnFlagUntilTimeout>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d03c      	beq.n	800a28a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a218:	e853 3f00 	ldrex	r3, [r3]
 800a21c:	623b      	str	r3, [r7, #32]
   return(result);
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a224:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	461a      	mov	r2, r3
 800a22c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a22e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a230:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a232:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a236:	e841 2300 	strex	r3, r2, [r1]
 800a23a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1e6      	bne.n	800a210 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3308      	adds	r3, #8
 800a248:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	e853 3f00 	ldrex	r3, [r3]
 800a250:	60fb      	str	r3, [r7, #12]
   return(result);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f023 0301 	bic.w	r3, r3, #1
 800a258:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3308      	adds	r3, #8
 800a260:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a262:	61fa      	str	r2, [r7, #28]
 800a264:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a266:	69b9      	ldr	r1, [r7, #24]
 800a268:	69fa      	ldr	r2, [r7, #28]
 800a26a:	e841 2300 	strex	r3, r2, [r1]
 800a26e:	617b      	str	r3, [r7, #20]
   return(result);
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1e5      	bne.n	800a242 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2220      	movs	r2, #32
 800a27a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e012      	b.n	800a2b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2220      	movs	r2, #32
 800a28e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2220      	movs	r2, #32
 800a296:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3758      	adds	r7, #88	@ 0x58
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2c8:	e04f      	b.n	800a36a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d0:	d04b      	beq.n	800a36a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2d2:	f7f8 fd1f 	bl	8002d14 <HAL_GetTick>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	69ba      	ldr	r2, [r7, #24]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d302      	bcc.n	800a2e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d101      	bne.n	800a2ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	e04e      	b.n	800a38a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 0304 	and.w	r3, r3, #4
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d037      	beq.n	800a36a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	2b80      	cmp	r3, #128	@ 0x80
 800a2fe:	d034      	beq.n	800a36a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	2b40      	cmp	r3, #64	@ 0x40
 800a304:	d031      	beq.n	800a36a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	69db      	ldr	r3, [r3, #28]
 800a30c:	f003 0308 	and.w	r3, r3, #8
 800a310:	2b08      	cmp	r3, #8
 800a312:	d110      	bne.n	800a336 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2208      	movs	r2, #8
 800a31a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 f95b 	bl	800a5d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2208      	movs	r2, #8
 800a326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e029      	b.n	800a38a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	69db      	ldr	r3, [r3, #28]
 800a33c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a344:	d111      	bne.n	800a36a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a34e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f000 f941 	bl	800a5d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2220      	movs	r2, #32
 800a35a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a366:	2303      	movs	r3, #3
 800a368:	e00f      	b.n	800a38a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	69da      	ldr	r2, [r3, #28]
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	4013      	ands	r3, r2
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	429a      	cmp	r2, r3
 800a378:	bf0c      	ite	eq
 800a37a:	2301      	moveq	r3, #1
 800a37c:	2300      	movne	r3, #0
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	461a      	mov	r2, r3
 800a382:	79fb      	ldrb	r3, [r7, #7]
 800a384:	429a      	cmp	r2, r3
 800a386:	d0a0      	beq.n	800a2ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
	...

0800a394 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a394:	b480      	push	{r7}
 800a396:	b0a3      	sub	sp, #140	@ 0x8c
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	88fa      	ldrh	r2, [r7, #6]
 800a3ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	88fa      	ldrh	r2, [r7, #6]
 800a3b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3c6:	d10e      	bne.n	800a3e6 <UART_Start_Receive_IT+0x52>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d105      	bne.n	800a3dc <UART_Start_Receive_IT+0x48>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a3d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a3da:	e02d      	b.n	800a438 <UART_Start_Receive_IT+0xa4>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	22ff      	movs	r2, #255	@ 0xff
 800a3e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a3e4:	e028      	b.n	800a438 <UART_Start_Receive_IT+0xa4>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10d      	bne.n	800a40a <UART_Start_Receive_IT+0x76>
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d104      	bne.n	800a400 <UART_Start_Receive_IT+0x6c>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	22ff      	movs	r2, #255	@ 0xff
 800a3fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a3fe:	e01b      	b.n	800a438 <UART_Start_Receive_IT+0xa4>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	227f      	movs	r2, #127	@ 0x7f
 800a404:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a408:	e016      	b.n	800a438 <UART_Start_Receive_IT+0xa4>
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a412:	d10d      	bne.n	800a430 <UART_Start_Receive_IT+0x9c>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d104      	bne.n	800a426 <UART_Start_Receive_IT+0x92>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	227f      	movs	r2, #127	@ 0x7f
 800a420:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a424:	e008      	b.n	800a438 <UART_Start_Receive_IT+0xa4>
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	223f      	movs	r2, #63	@ 0x3f
 800a42a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a42e:	e003      	b.n	800a438 <UART_Start_Receive_IT+0xa4>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2222      	movs	r2, #34	@ 0x22
 800a444:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3308      	adds	r3, #8
 800a44e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a452:	e853 3f00 	ldrex	r3, [r3]
 800a456:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a458:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a45a:	f043 0301 	orr.w	r3, r3, #1
 800a45e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	3308      	adds	r3, #8
 800a468:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a46c:	673a      	str	r2, [r7, #112]	@ 0x70
 800a46e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a470:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a472:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a474:	e841 2300 	strex	r3, r2, [r1]
 800a478:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a47a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1e3      	bne.n	800a448 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a488:	d14f      	bne.n	800a52a <UART_Start_Receive_IT+0x196>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a490:	88fa      	ldrh	r2, [r7, #6]
 800a492:	429a      	cmp	r2, r3
 800a494:	d349      	bcc.n	800a52a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a49e:	d107      	bne.n	800a4b0 <UART_Start_Receive_IT+0x11c>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d103      	bne.n	800a4b0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4a47      	ldr	r2, [pc, #284]	@ (800a5c8 <UART_Start_Receive_IT+0x234>)
 800a4ac:	675a      	str	r2, [r3, #116]	@ 0x74
 800a4ae:	e002      	b.n	800a4b6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4a46      	ldr	r2, [pc, #280]	@ (800a5cc <UART_Start_Receive_IT+0x238>)
 800a4b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d01a      	beq.n	800a4f4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a4cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a4e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a4e2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a4e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a4e8:	e841 2300 	strex	r3, r2, [r1]
 800a4ec:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a4ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1e4      	bne.n	800a4be <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3308      	adds	r3, #8
 800a4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4fe:	e853 3f00 	ldrex	r3, [r3]
 800a502:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a506:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a50a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	3308      	adds	r3, #8
 800a512:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a514:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a516:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a518:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a51a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a51c:	e841 2300 	strex	r3, r2, [r1]
 800a520:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1e5      	bne.n	800a4f4 <UART_Start_Receive_IT+0x160>
 800a528:	e046      	b.n	800a5b8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a532:	d107      	bne.n	800a544 <UART_Start_Receive_IT+0x1b0>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d103      	bne.n	800a544 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4a24      	ldr	r2, [pc, #144]	@ (800a5d0 <UART_Start_Receive_IT+0x23c>)
 800a540:	675a      	str	r2, [r3, #116]	@ 0x74
 800a542:	e002      	b.n	800a54a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4a23      	ldr	r2, [pc, #140]	@ (800a5d4 <UART_Start_Receive_IT+0x240>)
 800a548:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d019      	beq.n	800a586 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55a:	e853 3f00 	ldrex	r3, [r3]
 800a55e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a562:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a566:	677b      	str	r3, [r7, #116]	@ 0x74
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	461a      	mov	r2, r3
 800a56e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a570:	637b      	str	r3, [r7, #52]	@ 0x34
 800a572:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a574:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a576:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a578:	e841 2300 	strex	r3, r2, [r1]
 800a57c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1e6      	bne.n	800a552 <UART_Start_Receive_IT+0x1be>
 800a584:	e018      	b.n	800a5b8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	e853 3f00 	ldrex	r3, [r3]
 800a592:	613b      	str	r3, [r7, #16]
   return(result);
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	f043 0320 	orr.w	r3, r3, #32
 800a59a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5a4:	623b      	str	r3, [r7, #32]
 800a5a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a8:	69f9      	ldr	r1, [r7, #28]
 800a5aa:	6a3a      	ldr	r2, [r7, #32]
 800a5ac:	e841 2300 	strex	r3, r2, [r1]
 800a5b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1e6      	bne.n	800a586 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	378c      	adds	r7, #140	@ 0x8c
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	0800adf9 	.word	0x0800adf9
 800a5cc:	0800aa99 	.word	0x0800aa99
 800a5d0:	0800a8e1 	.word	0x0800a8e1
 800a5d4:	0800a729 	.word	0x0800a729

0800a5d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b095      	sub	sp, #84	@ 0x54
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e8:	e853 3f00 	ldrex	r3, [r3]
 800a5ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800a600:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a602:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a604:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a606:	e841 2300 	strex	r3, r2, [r1]
 800a60a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1e6      	bne.n	800a5e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	3308      	adds	r3, #8
 800a618:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61a:	6a3b      	ldr	r3, [r7, #32]
 800a61c:	e853 3f00 	ldrex	r3, [r3]
 800a620:	61fb      	str	r3, [r7, #28]
   return(result);
 800a622:	69fa      	ldr	r2, [r7, #28]
 800a624:	4b1e      	ldr	r3, [pc, #120]	@ (800a6a0 <UART_EndRxTransfer+0xc8>)
 800a626:	4013      	ands	r3, r2
 800a628:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	3308      	adds	r3, #8
 800a630:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a632:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a634:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a636:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a63a:	e841 2300 	strex	r3, r2, [r1]
 800a63e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1e5      	bne.n	800a612 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d118      	bne.n	800a680 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	e853 3f00 	ldrex	r3, [r3]
 800a65a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	f023 0310 	bic.w	r3, r3, #16
 800a662:	647b      	str	r3, [r7, #68]	@ 0x44
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	461a      	mov	r2, r3
 800a66a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a66c:	61bb      	str	r3, [r7, #24]
 800a66e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a670:	6979      	ldr	r1, [r7, #20]
 800a672:	69ba      	ldr	r2, [r7, #24]
 800a674:	e841 2300 	strex	r3, r2, [r1]
 800a678:	613b      	str	r3, [r7, #16]
   return(result);
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1e6      	bne.n	800a64e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2220      	movs	r2, #32
 800a684:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a694:	bf00      	nop
 800a696:	3754      	adds	r7, #84	@ 0x54
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	effffffe 	.word	0xeffffffe

0800a6a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f7fe fe2a 	bl	800931c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6c8:	bf00      	nop
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b088      	sub	sp, #32
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	e853 3f00 	ldrex	r3, [r3]
 800a6e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6ec:	61fb      	str	r3, [r7, #28]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	61bb      	str	r3, [r7, #24]
 800a6f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fa:	6979      	ldr	r1, [r7, #20]
 800a6fc:	69ba      	ldr	r2, [r7, #24]
 800a6fe:	e841 2300 	strex	r3, r2, [r1]
 800a702:	613b      	str	r3, [r7, #16]
   return(result);
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1e6      	bne.n	800a6d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2220      	movs	r2, #32
 800a70e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f7fe fdf5 	bl	8009308 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a71e:	bf00      	nop
 800a720:	3720      	adds	r7, #32
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
	...

0800a728 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b09c      	sub	sp, #112	@ 0x70
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a736:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a740:	2b22      	cmp	r3, #34	@ 0x22
 800a742:	f040 80be 	bne.w	800a8c2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a74c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a750:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a754:	b2d9      	uxtb	r1, r3
 800a756:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a760:	400a      	ands	r2, r1
 800a762:	b2d2      	uxtb	r2, r2
 800a764:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a76a:	1c5a      	adds	r2, r3, #1
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a776:	b29b      	uxth	r3, r3
 800a778:	3b01      	subs	r3, #1
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a788:	b29b      	uxth	r3, r3
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f040 80a1 	bne.w	800a8d2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a798:	e853 3f00 	ldrex	r3, [r3]
 800a79c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a79e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7b6:	e841 2300 	strex	r3, r2, [r1]
 800a7ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1e6      	bne.n	800a790 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	3308      	adds	r3, #8
 800a7c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7cc:	e853 3f00 	ldrex	r3, [r3]
 800a7d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d4:	f023 0301 	bic.w	r3, r3, #1
 800a7d8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3308      	adds	r3, #8
 800a7e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a7e2:	647a      	str	r2, [r7, #68]	@ 0x44
 800a7e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7ea:	e841 2300 	strex	r3, r2, [r1]
 800a7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1e5      	bne.n	800a7c2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2220      	movs	r2, #32
 800a7fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a33      	ldr	r2, [pc, #204]	@ (800a8dc <UART_RxISR_8BIT+0x1b4>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d01f      	beq.n	800a854 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d018      	beq.n	800a854 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82a:	e853 3f00 	ldrex	r3, [r3]
 800a82e:	623b      	str	r3, [r7, #32]
   return(result);
 800a830:	6a3b      	ldr	r3, [r7, #32]
 800a832:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a836:	663b      	str	r3, [r7, #96]	@ 0x60
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	461a      	mov	r2, r3
 800a83e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a840:	633b      	str	r3, [r7, #48]	@ 0x30
 800a842:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a848:	e841 2300 	strex	r3, r2, [r1]
 800a84c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1e6      	bne.n	800a822 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d12e      	bne.n	800a8ba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	e853 3f00 	ldrex	r3, [r3]
 800a86e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f023 0310 	bic.w	r3, r3, #16
 800a876:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	461a      	mov	r2, r3
 800a87e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a880:	61fb      	str	r3, [r7, #28]
 800a882:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a884:	69b9      	ldr	r1, [r7, #24]
 800a886:	69fa      	ldr	r2, [r7, #28]
 800a888:	e841 2300 	strex	r3, r2, [r1]
 800a88c:	617b      	str	r3, [r7, #20]
   return(result);
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d1e6      	bne.n	800a862 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	69db      	ldr	r3, [r3, #28]
 800a89a:	f003 0310 	and.w	r3, r3, #16
 800a89e:	2b10      	cmp	r3, #16
 800a8a0:	d103      	bne.n	800a8aa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2210      	movs	r2, #16
 800a8a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f7fe fd3c 	bl	8009330 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a8b8:	e00b      	b.n	800a8d2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7f6 fdae 	bl	800141c <HAL_UART_RxCpltCallback>
}
 800a8c0:	e007      	b.n	800a8d2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	699a      	ldr	r2, [r3, #24]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f042 0208 	orr.w	r2, r2, #8
 800a8d0:	619a      	str	r2, [r3, #24]
}
 800a8d2:	bf00      	nop
 800a8d4:	3770      	adds	r7, #112	@ 0x70
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	58000c00 	.word	0x58000c00

0800a8e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b09c      	sub	sp, #112	@ 0x70
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a8ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8f8:	2b22      	cmp	r3, #34	@ 0x22
 800a8fa:	f040 80be 	bne.w	800aa7a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a904:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a90c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a90e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a912:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a916:	4013      	ands	r3, r2
 800a918:	b29a      	uxth	r2, r3
 800a91a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a91c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a922:	1c9a      	adds	r2, r3, #2
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a92e:	b29b      	uxth	r3, r3
 800a930:	3b01      	subs	r3, #1
 800a932:	b29a      	uxth	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a940:	b29b      	uxth	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	f040 80a1 	bne.w	800aa8a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a950:	e853 3f00 	ldrex	r3, [r3]
 800a954:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a958:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a95c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	461a      	mov	r2, r3
 800a964:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a966:	657b      	str	r3, [r7, #84]	@ 0x54
 800a968:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a96c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a96e:	e841 2300 	strex	r3, r2, [r1]
 800a972:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1e6      	bne.n	800a948 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	3308      	adds	r3, #8
 800a980:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a984:	e853 3f00 	ldrex	r3, [r3]
 800a988:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98c:	f023 0301 	bic.w	r3, r3, #1
 800a990:	663b      	str	r3, [r7, #96]	@ 0x60
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	3308      	adds	r3, #8
 800a998:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a99a:	643a      	str	r2, [r7, #64]	@ 0x40
 800a99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a9a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a9a2:	e841 2300 	strex	r3, r2, [r1]
 800a9a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1e5      	bne.n	800a97a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2220      	movs	r2, #32
 800a9b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a33      	ldr	r2, [pc, #204]	@ (800aa94 <UART_RxISR_16BIT+0x1b4>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d01f      	beq.n	800aa0c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d018      	beq.n	800aa0c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e0:	6a3b      	ldr	r3, [r7, #32]
 800a9e2:	e853 3f00 	ldrex	r3, [r3]
 800a9e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a9ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9fa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa00:	e841 2300 	strex	r3, r2, [r1]
 800aa04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1e6      	bne.n	800a9da <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d12e      	bne.n	800aa72 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	e853 3f00 	ldrex	r3, [r3]
 800aa26:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	f023 0310 	bic.w	r3, r3, #16
 800aa2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	461a      	mov	r2, r3
 800aa36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa38:	61bb      	str	r3, [r7, #24]
 800aa3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3c:	6979      	ldr	r1, [r7, #20]
 800aa3e:	69ba      	ldr	r2, [r7, #24]
 800aa40:	e841 2300 	strex	r3, r2, [r1]
 800aa44:	613b      	str	r3, [r7, #16]
   return(result);
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e6      	bne.n	800aa1a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	69db      	ldr	r3, [r3, #28]
 800aa52:	f003 0310 	and.w	r3, r3, #16
 800aa56:	2b10      	cmp	r3, #16
 800aa58:	d103      	bne.n	800aa62 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2210      	movs	r2, #16
 800aa60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f7fe fc60 	bl	8009330 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa70:	e00b      	b.n	800aa8a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f7f6 fcd2 	bl	800141c <HAL_UART_RxCpltCallback>
}
 800aa78:	e007      	b.n	800aa8a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	699a      	ldr	r2, [r3, #24]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f042 0208 	orr.w	r2, r2, #8
 800aa88:	619a      	str	r2, [r3, #24]
}
 800aa8a:	bf00      	nop
 800aa8c:	3770      	adds	r7, #112	@ 0x70
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	58000c00 	.word	0x58000c00

0800aa98 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b0ac      	sub	sp, #176	@ 0xb0
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aaa6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	69db      	ldr	r3, [r3, #28]
 800aab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aace:	2b22      	cmp	r3, #34	@ 0x22
 800aad0:	f040 8180 	bne.w	800add4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aada:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aade:	e123      	b.n	800ad28 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aae6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aaea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800aaee:	b2d9      	uxtb	r1, r3
 800aaf0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aafa:	400a      	ands	r2, r1
 800aafc:	b2d2      	uxtb	r2, r2
 800aafe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab04:	1c5a      	adds	r2, r3, #1
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	3b01      	subs	r3, #1
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	69db      	ldr	r3, [r3, #28]
 800ab22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ab26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab2a:	f003 0307 	and.w	r3, r3, #7
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d053      	beq.n	800abda <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab36:	f003 0301 	and.w	r3, r3, #1
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d011      	beq.n	800ab62 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ab3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ab42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00b      	beq.n	800ab62 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab58:	f043 0201 	orr.w	r2, r3, #1
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab66:	f003 0302 	and.w	r3, r3, #2
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d011      	beq.n	800ab92 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ab6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00b      	beq.n	800ab92 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2202      	movs	r2, #2
 800ab80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab88:	f043 0204 	orr.w	r2, r3, #4
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab96:	f003 0304 	and.w	r3, r3, #4
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d011      	beq.n	800abc2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ab9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00b      	beq.n	800abc2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2204      	movs	r2, #4
 800abb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abb8:	f043 0202 	orr.w	r2, r3, #2
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d006      	beq.n	800abda <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7fe fba5 	bl	800931c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f040 80a0 	bne.w	800ad28 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abf0:	e853 3f00 	ldrex	r3, [r3]
 800abf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800abf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	461a      	mov	r2, r3
 800ac06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac0c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac0e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ac10:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ac12:	e841 2300 	strex	r3, r2, [r1]
 800ac16:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ac18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1e4      	bne.n	800abe8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	3308      	adds	r3, #8
 800ac24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac28:	e853 3f00 	ldrex	r3, [r3]
 800ac2c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ac2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac30:	4b6e      	ldr	r3, [pc, #440]	@ (800adec <UART_RxISR_8BIT_FIFOEN+0x354>)
 800ac32:	4013      	ands	r3, r2
 800ac34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3308      	adds	r3, #8
 800ac3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ac42:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ac44:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac46:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ac48:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ac4a:	e841 2300 	strex	r3, r2, [r1]
 800ac4e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ac50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1e3      	bne.n	800ac1e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2220      	movs	r2, #32
 800ac5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a60      	ldr	r2, [pc, #384]	@ (800adf0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d021      	beq.n	800acb8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d01a      	beq.n	800acb8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac8a:	e853 3f00 	ldrex	r3, [r3]
 800ac8e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ac90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ac96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aca4:	657b      	str	r3, [r7, #84]	@ 0x54
 800aca6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800acaa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800acac:	e841 2300 	strex	r3, r2, [r1]
 800acb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800acb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d1e4      	bne.n	800ac82 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d130      	bne.n	800ad22 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800accc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acce:	e853 3f00 	ldrex	r3, [r3]
 800acd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800acd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd6:	f023 0310 	bic.w	r3, r3, #16
 800acda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	461a      	mov	r2, r3
 800ace4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ace8:	643b      	str	r3, [r7, #64]	@ 0x40
 800acea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acf0:	e841 2300 	strex	r3, r2, [r1]
 800acf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800acf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1e4      	bne.n	800acc6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	69db      	ldr	r3, [r3, #28]
 800ad02:	f003 0310 	and.w	r3, r3, #16
 800ad06:	2b10      	cmp	r3, #16
 800ad08:	d103      	bne.n	800ad12 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2210      	movs	r2, #16
 800ad10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad18:	4619      	mov	r1, r3
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7fe fb08 	bl	8009330 <HAL_UARTEx_RxEventCallback>
 800ad20:	e002      	b.n	800ad28 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7f6 fb7a 	bl	800141c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad28:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d006      	beq.n	800ad3e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ad30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad34:	f003 0320 	and.w	r3, r3, #32
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f47f aed1 	bne.w	800aae0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad44:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ad48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d049      	beq.n	800ade4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad56:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d242      	bcs.n	800ade4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3308      	adds	r3, #8
 800ad64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad66:	6a3b      	ldr	r3, [r7, #32]
 800ad68:	e853 3f00 	ldrex	r3, [r3]
 800ad6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3308      	adds	r3, #8
 800ad7e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ad82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad8a:	e841 2300 	strex	r3, r2, [r1]
 800ad8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1e3      	bne.n	800ad5e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a16      	ldr	r2, [pc, #88]	@ (800adf4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ad9a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	e853 3f00 	ldrex	r3, [r3]
 800ada8:	60bb      	str	r3, [r7, #8]
   return(result);
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	f043 0320 	orr.w	r3, r3, #32
 800adb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	461a      	mov	r2, r3
 800adba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800adbe:	61bb      	str	r3, [r7, #24]
 800adc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc2:	6979      	ldr	r1, [r7, #20]
 800adc4:	69ba      	ldr	r2, [r7, #24]
 800adc6:	e841 2300 	strex	r3, r2, [r1]
 800adca:	613b      	str	r3, [r7, #16]
   return(result);
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1e4      	bne.n	800ad9c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800add2:	e007      	b.n	800ade4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	699a      	ldr	r2, [r3, #24]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f042 0208 	orr.w	r2, r2, #8
 800ade2:	619a      	str	r2, [r3, #24]
}
 800ade4:	bf00      	nop
 800ade6:	37b0      	adds	r7, #176	@ 0xb0
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	effffffe 	.word	0xeffffffe
 800adf0:	58000c00 	.word	0x58000c00
 800adf4:	0800a729 	.word	0x0800a729

0800adf8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b0ae      	sub	sp, #184	@ 0xb8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae06:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	69db      	ldr	r3, [r3, #28]
 800ae10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae2e:	2b22      	cmp	r3, #34	@ 0x22
 800ae30:	f040 8184 	bne.w	800b13c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ae3a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ae3e:	e127      	b.n	800b090 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae46:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ae52:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ae56:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	b29a      	uxth	r2, r3
 800ae5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ae62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae68:	1c9a      	adds	r2, r3, #2
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	3b01      	subs	r3, #1
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ae8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae8e:	f003 0307 	and.w	r3, r3, #7
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d053      	beq.n	800af3e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae9a:	f003 0301 	and.w	r3, r3, #1
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d011      	beq.n	800aec6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800aea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00b      	beq.n	800aec6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aebc:	f043 0201 	orr.w	r2, r3, #1
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aec6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aeca:	f003 0302 	and.w	r3, r3, #2
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d011      	beq.n	800aef6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800aed2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aed6:	f003 0301 	and.w	r3, r3, #1
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00b      	beq.n	800aef6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2202      	movs	r2, #2
 800aee4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeec:	f043 0204 	orr.w	r2, r3, #4
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aef6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aefa:	f003 0304 	and.w	r3, r3, #4
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d011      	beq.n	800af26 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800af02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00b      	beq.n	800af26 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2204      	movs	r2, #4
 800af14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af1c:	f043 0202 	orr.w	r2, r3, #2
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d006      	beq.n	800af3e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7fe f9f3 	bl	800931c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af44:	b29b      	uxth	r3, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	f040 80a2 	bne.w	800b090 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af54:	e853 3f00 	ldrex	r3, [r3]
 800af58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800af5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	461a      	mov	r2, r3
 800af6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800af72:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800af76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800af7a:	e841 2300 	strex	r3, r2, [r1]
 800af7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800af80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1e2      	bne.n	800af4c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	3308      	adds	r3, #8
 800af8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af90:	e853 3f00 	ldrex	r3, [r3]
 800af94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800af96:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800af98:	4b6e      	ldr	r3, [pc, #440]	@ (800b154 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800af9a:	4013      	ands	r3, r2
 800af9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3308      	adds	r3, #8
 800afa6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800afaa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800afac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800afb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800afb2:	e841 2300 	strex	r3, r2, [r1]
 800afb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800afb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1e3      	bne.n	800af86 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2220      	movs	r2, #32
 800afc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a60      	ldr	r2, [pc, #384]	@ (800b158 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d021      	beq.n	800b020 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d01a      	beq.n	800b020 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aff2:	e853 3f00 	ldrex	r3, [r3]
 800aff6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aff8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800affa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800affe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	461a      	mov	r2, r3
 800b008:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b00c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b00e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b010:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b012:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b014:	e841 2300 	strex	r3, r2, [r1]
 800b018:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b01a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1e4      	bne.n	800afea <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b024:	2b01      	cmp	r3, #1
 800b026:	d130      	bne.n	800b08a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b036:	e853 3f00 	ldrex	r3, [r3]
 800b03a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b03c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b03e:	f023 0310 	bic.w	r3, r3, #16
 800b042:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	461a      	mov	r2, r3
 800b04c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b050:	647b      	str	r3, [r7, #68]	@ 0x44
 800b052:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b058:	e841 2300 	strex	r3, r2, [r1]
 800b05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1e4      	bne.n	800b02e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	69db      	ldr	r3, [r3, #28]
 800b06a:	f003 0310 	and.w	r3, r3, #16
 800b06e:	2b10      	cmp	r3, #16
 800b070:	d103      	bne.n	800b07a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2210      	movs	r2, #16
 800b078:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b080:	4619      	mov	r1, r3
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7fe f954 	bl	8009330 <HAL_UARTEx_RxEventCallback>
 800b088:	e002      	b.n	800b090 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7f6 f9c6 	bl	800141c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b090:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b094:	2b00      	cmp	r3, #0
 800b096:	d006      	beq.n	800b0a6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b098:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b09c:	f003 0320 	and.w	r3, r3, #32
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f47f aecd 	bne.w	800ae40 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0ac:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b0b0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d049      	beq.n	800b14c <UART_RxISR_16BIT_FIFOEN+0x354>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b0be:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d242      	bcs.n	800b14c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d0:	e853 3f00 	ldrex	r3, [r3]
 800b0d4:	623b      	str	r3, [r7, #32]
   return(result);
 800b0d6:	6a3b      	ldr	r3, [r7, #32]
 800b0d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b0ea:	633a      	str	r2, [r7, #48]	@ 0x30
 800b0ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0f2:	e841 2300 	strex	r3, r2, [r1]
 800b0f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1e3      	bne.n	800b0c6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4a16      	ldr	r2, [pc, #88]	@ (800b15c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b102:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	e853 3f00 	ldrex	r3, [r3]
 800b110:	60fb      	str	r3, [r7, #12]
   return(result);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f043 0320 	orr.w	r3, r3, #32
 800b118:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	461a      	mov	r2, r3
 800b122:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b126:	61fb      	str	r3, [r7, #28]
 800b128:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12a:	69b9      	ldr	r1, [r7, #24]
 800b12c:	69fa      	ldr	r2, [r7, #28]
 800b12e:	e841 2300 	strex	r3, r2, [r1]
 800b132:	617b      	str	r3, [r7, #20]
   return(result);
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1e4      	bne.n	800b104 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b13a:	e007      	b.n	800b14c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	699a      	ldr	r2, [r3, #24]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f042 0208 	orr.w	r2, r2, #8
 800b14a:	619a      	str	r2, [r3, #24]
}
 800b14c:	bf00      	nop
 800b14e:	37b8      	adds	r7, #184	@ 0xb8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	effffffe 	.word	0xeffffffe
 800b158:	58000c00 	.word	0x58000c00
 800b15c:	0800a8e1 	.word	0x0800a8e1

0800b160 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b168:	bf00      	nop
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d101      	bne.n	800b1b2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b1ae:	2302      	movs	r3, #2
 800b1b0:	e027      	b.n	800b202 <HAL_UARTEx_DisableFifoMode+0x66>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2224      	movs	r2, #36	@ 0x24
 800b1be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f022 0201 	bic.w	r2, r2, #1
 800b1d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b1e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2220      	movs	r2, #32
 800b1f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b084      	sub	sp, #16
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d101      	bne.n	800b226 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b222:	2302      	movs	r3, #2
 800b224:	e02d      	b.n	800b282 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2201      	movs	r2, #1
 800b22a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2224      	movs	r2, #36	@ 0x24
 800b232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f022 0201 	bic.w	r2, r2, #1
 800b24c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	430a      	orrs	r2, r1
 800b260:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f850 	bl	800b308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2220      	movs	r2, #32
 800b274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b084      	sub	sp, #16
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d101      	bne.n	800b2a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b29e:	2302      	movs	r3, #2
 800b2a0:	e02d      	b.n	800b2fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2224      	movs	r2, #36	@ 0x24
 800b2ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f022 0201 	bic.w	r2, r2, #1
 800b2c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	430a      	orrs	r2, r1
 800b2dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f812 	bl	800b308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2220      	movs	r2, #32
 800b2f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
	...

0800b308 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b308:	b480      	push	{r7}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b314:	2b00      	cmp	r3, #0
 800b316:	d108      	bne.n	800b32a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b328:	e031      	b.n	800b38e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b32a:	2310      	movs	r3, #16
 800b32c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b32e:	2310      	movs	r3, #16
 800b330:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	0e5b      	lsrs	r3, r3, #25
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	f003 0307 	and.w	r3, r3, #7
 800b340:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	0f5b      	lsrs	r3, r3, #29
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	f003 0307 	and.w	r3, r3, #7
 800b350:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b352:	7bbb      	ldrb	r3, [r7, #14]
 800b354:	7b3a      	ldrb	r2, [r7, #12]
 800b356:	4911      	ldr	r1, [pc, #68]	@ (800b39c <UARTEx_SetNbDataToProcess+0x94>)
 800b358:	5c8a      	ldrb	r2, [r1, r2]
 800b35a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b35e:	7b3a      	ldrb	r2, [r7, #12]
 800b360:	490f      	ldr	r1, [pc, #60]	@ (800b3a0 <UARTEx_SetNbDataToProcess+0x98>)
 800b362:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b364:	fb93 f3f2 	sdiv	r3, r3, r2
 800b368:	b29a      	uxth	r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b370:	7bfb      	ldrb	r3, [r7, #15]
 800b372:	7b7a      	ldrb	r2, [r7, #13]
 800b374:	4909      	ldr	r1, [pc, #36]	@ (800b39c <UARTEx_SetNbDataToProcess+0x94>)
 800b376:	5c8a      	ldrb	r2, [r1, r2]
 800b378:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b37c:	7b7a      	ldrb	r2, [r7, #13]
 800b37e:	4908      	ldr	r1, [pc, #32]	@ (800b3a0 <UARTEx_SetNbDataToProcess+0x98>)
 800b380:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b382:	fb93 f3f2 	sdiv	r3, r3, r2
 800b386:	b29a      	uxth	r2, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b38e:	bf00      	nop
 800b390:	3714      	adds	r7, #20
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	080132a0 	.word	0x080132a0
 800b3a0:	080132a8 	.word	0x080132a8

0800b3a4 <Data_Analyse>:
/**
 * @brief 数据解析函数  如更换MCU平台或更换软件库，只需将串口接收到的值传入该函数即可解析
 * @param  rec 串口接收到的字节数据
 */
void Data_Analyse(uint8_t rec)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	71fb      	strb	r3, [r7, #7]
		float ActVal[6];
	} posture;
	static uint8_t count = 0;
	static uint8_t i = 0;

	ch = rec;
 800b3ae:	4a48      	ldr	r2, [pc, #288]	@ (800b4d0 <Data_Analyse+0x12c>)
 800b3b0:	79fb      	ldrb	r3, [r7, #7]
 800b3b2:	7013      	strb	r3, [r2, #0]
//	HAL_UART_Transmit(&huart10, &ch, 1, 0xff);
//	HAL_UART_Transmit(&huart10, (uint8_t*) ch, 1, 0xff);
	switch (count)
 800b3b4:	4b47      	ldr	r3, [pc, #284]	@ (800b4d4 <Data_Analyse+0x130>)
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	2b04      	cmp	r3, #4
 800b3ba:	d87c      	bhi.n	800b4b6 <Data_Analyse+0x112>
 800b3bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c4 <Data_Analyse+0x20>)
 800b3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c2:	bf00      	nop
 800b3c4:	0800b3d9 	.word	0x0800b3d9
 800b3c8:	0800b3f7 	.word	0x0800b3f7
 800b3cc:	0800b423 	.word	0x0800b423
 800b3d0:	0800b459 	.word	0x0800b459
 800b3d4:	0800b477 	.word	0x0800b477
	{
	case 0:
		if (ch == 0x0d)
 800b3d8:	4b3d      	ldr	r3, [pc, #244]	@ (800b4d0 <Data_Analyse+0x12c>)
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	2b0d      	cmp	r3, #13
 800b3de:	d106      	bne.n	800b3ee <Data_Analyse+0x4a>
			count++;
 800b3e0:	4b3c      	ldr	r3, [pc, #240]	@ (800b4d4 <Data_Analyse+0x130>)
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	b2da      	uxtb	r2, r3
 800b3e8:	4b3a      	ldr	r3, [pc, #232]	@ (800b4d4 <Data_Analyse+0x130>)
 800b3ea:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b3ec:	e06a      	b.n	800b4c4 <Data_Analyse+0x120>
			count = 0;
 800b3ee:	4b39      	ldr	r3, [pc, #228]	@ (800b4d4 <Data_Analyse+0x130>)
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	701a      	strb	r2, [r3, #0]
		break;
 800b3f4:	e066      	b.n	800b4c4 <Data_Analyse+0x120>
	case 1:
		if (ch == 0x0a)
 800b3f6:	4b36      	ldr	r3, [pc, #216]	@ (800b4d0 <Data_Analyse+0x12c>)
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	2b0a      	cmp	r3, #10
 800b3fc:	d109      	bne.n	800b412 <Data_Analyse+0x6e>
		{
			i = 0;
 800b3fe:	4b36      	ldr	r3, [pc, #216]	@ (800b4d8 <Data_Analyse+0x134>)
 800b400:	2200      	movs	r2, #0
 800b402:	701a      	strb	r2, [r3, #0]
			count++;
 800b404:	4b33      	ldr	r3, [pc, #204]	@ (800b4d4 <Data_Analyse+0x130>)
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	3301      	adds	r3, #1
 800b40a:	b2da      	uxtb	r2, r3
 800b40c:	4b31      	ldr	r3, [pc, #196]	@ (800b4d4 <Data_Analyse+0x130>)
 800b40e:	701a      	strb	r2, [r3, #0]
		}
		else if (ch == 0x0d)
			;
		else
			count = 0;
		break;
 800b410:	e055      	b.n	800b4be <Data_Analyse+0x11a>
		else if (ch == 0x0d)
 800b412:	4b2f      	ldr	r3, [pc, #188]	@ (800b4d0 <Data_Analyse+0x12c>)
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	2b0d      	cmp	r3, #13
 800b418:	d051      	beq.n	800b4be <Data_Analyse+0x11a>
			count = 0;
 800b41a:	4b2e      	ldr	r3, [pc, #184]	@ (800b4d4 <Data_Analyse+0x130>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	701a      	strb	r2, [r3, #0]
		break;
 800b420:	e04d      	b.n	800b4be <Data_Analyse+0x11a>
	case 2:
		posture.date[i] = ch;
 800b422:	4b2d      	ldr	r3, [pc, #180]	@ (800b4d8 <Data_Analyse+0x134>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	461a      	mov	r2, r3
 800b428:	4b29      	ldr	r3, [pc, #164]	@ (800b4d0 <Data_Analyse+0x12c>)
 800b42a:	7819      	ldrb	r1, [r3, #0]
 800b42c:	4b2b      	ldr	r3, [pc, #172]	@ (800b4dc <Data_Analyse+0x138>)
 800b42e:	5499      	strb	r1, [r3, r2]
		i++;
 800b430:	4b29      	ldr	r3, [pc, #164]	@ (800b4d8 <Data_Analyse+0x134>)
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	3301      	adds	r3, #1
 800b436:	b2da      	uxtb	r2, r3
 800b438:	4b27      	ldr	r3, [pc, #156]	@ (800b4d8 <Data_Analyse+0x134>)
 800b43a:	701a      	strb	r2, [r3, #0]
		if (i >= 24)
 800b43c:	4b26      	ldr	r3, [pc, #152]	@ (800b4d8 <Data_Analyse+0x134>)
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	2b17      	cmp	r3, #23
 800b442:	d93e      	bls.n	800b4c2 <Data_Analyse+0x11e>
		{
			i = 0;
 800b444:	4b24      	ldr	r3, [pc, #144]	@ (800b4d8 <Data_Analyse+0x134>)
 800b446:	2200      	movs	r2, #0
 800b448:	701a      	strb	r2, [r3, #0]
			count++;
 800b44a:	4b22      	ldr	r3, [pc, #136]	@ (800b4d4 <Data_Analyse+0x130>)
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	3301      	adds	r3, #1
 800b450:	b2da      	uxtb	r2, r3
 800b452:	4b20      	ldr	r3, [pc, #128]	@ (800b4d4 <Data_Analyse+0x130>)
 800b454:	701a      	strb	r2, [r3, #0]
		}
		break;
 800b456:	e034      	b.n	800b4c2 <Data_Analyse+0x11e>
	case 3:
		if (ch == 0x0a)
 800b458:	4b1d      	ldr	r3, [pc, #116]	@ (800b4d0 <Data_Analyse+0x12c>)
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	2b0a      	cmp	r3, #10
 800b45e:	d106      	bne.n	800b46e <Data_Analyse+0xca>
			count++;
 800b460:	4b1c      	ldr	r3, [pc, #112]	@ (800b4d4 <Data_Analyse+0x130>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	3301      	adds	r3, #1
 800b466:	b2da      	uxtb	r2, r3
 800b468:	4b1a      	ldr	r3, [pc, #104]	@ (800b4d4 <Data_Analyse+0x130>)
 800b46a:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b46c:	e02a      	b.n	800b4c4 <Data_Analyse+0x120>
			count = 0;
 800b46e:	4b19      	ldr	r3, [pc, #100]	@ (800b4d4 <Data_Analyse+0x130>)
 800b470:	2200      	movs	r2, #0
 800b472:	701a      	strb	r2, [r3, #0]
		break;
 800b474:	e026      	b.n	800b4c4 <Data_Analyse+0x120>
	case 4:
		if (ch == 0x0d)
 800b476:	4b16      	ldr	r3, [pc, #88]	@ (800b4d0 <Data_Analyse+0x12c>)
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	2b0d      	cmp	r3, #13
 800b47c:	d117      	bne.n	800b4ae <Data_Analyse+0x10a>
		{
			zangle = posture.ActVal[0];
 800b47e:	4b17      	ldr	r3, [pc, #92]	@ (800b4dc <Data_Analyse+0x138>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a17      	ldr	r2, [pc, #92]	@ (800b4e0 <Data_Analyse+0x13c>)
 800b484:	6013      	str	r3, [r2, #0]
			xangle = posture.ActVal[1];
 800b486:	4b15      	ldr	r3, [pc, #84]	@ (800b4dc <Data_Analyse+0x138>)
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	4a16      	ldr	r2, [pc, #88]	@ (800b4e4 <Data_Analyse+0x140>)
 800b48c:	6013      	str	r3, [r2, #0]
			yangle = posture.ActVal[2];
 800b48e:	4b13      	ldr	r3, [pc, #76]	@ (800b4dc <Data_Analyse+0x138>)
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	4a15      	ldr	r2, [pc, #84]	@ (800b4e8 <Data_Analyse+0x144>)
 800b494:	6013      	str	r3, [r2, #0]
			pos_x = posture.ActVal[3];
 800b496:	4b11      	ldr	r3, [pc, #68]	@ (800b4dc <Data_Analyse+0x138>)
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	4a14      	ldr	r2, [pc, #80]	@ (800b4ec <Data_Analyse+0x148>)
 800b49c:	6013      	str	r3, [r2, #0]
			pos_y = posture.ActVal[4];
 800b49e:	4b0f      	ldr	r3, [pc, #60]	@ (800b4dc <Data_Analyse+0x138>)
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	4a13      	ldr	r2, [pc, #76]	@ (800b4f0 <Data_Analyse+0x14c>)
 800b4a4:	6013      	str	r3, [r2, #0]
			w_z = posture.ActVal[5];
 800b4a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b4dc <Data_Analyse+0x138>)
 800b4a8:	695b      	ldr	r3, [r3, #20]
 800b4aa:	4a12      	ldr	r2, [pc, #72]	@ (800b4f4 <Data_Analyse+0x150>)
 800b4ac:	6013      	str	r3, [r2, #0]
		}
		count = 0;
 800b4ae:	4b09      	ldr	r3, [pc, #36]	@ (800b4d4 <Data_Analyse+0x130>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	701a      	strb	r2, [r3, #0]
		break;
 800b4b4:	e006      	b.n	800b4c4 <Data_Analyse+0x120>
	default:
		count = 0;
 800b4b6:	4b07      	ldr	r3, [pc, #28]	@ (800b4d4 <Data_Analyse+0x130>)
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	701a      	strb	r2, [r3, #0]
		break;
 800b4bc:	e002      	b.n	800b4c4 <Data_Analyse+0x120>
		break;
 800b4be:	bf00      	nop
 800b4c0:	e000      	b.n	800b4c4 <Data_Analyse+0x120>
		break;
 800b4c2:	bf00      	nop
	}
}
 800b4c4:	bf00      	nop
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	24000b10 	.word	0x24000b10
 800b4d4:	24000b11 	.word	0x24000b11
 800b4d8:	24000b12 	.word	0x24000b12
 800b4dc:	24000b14 	.word	0x24000b14
 800b4e0:	24000b00 	.word	0x24000b00
 800b4e4:	24000b04 	.word	0x24000b04
 800b4e8:	24000b08 	.word	0x24000b08
 800b4ec:	24000af8 	.word	0x24000af8
 800b4f0:	24000afc 	.word	0x24000afc
 800b4f4:	24000b0c 	.word	0x24000b0c

0800b4f8 <Move_Arm>:
extern float tx_target;
extern float ty_target;

//控制单个舵机运动
//参数：sevoID:舵机ID，Position:转动角度（这里以270°为例）,Time:转动时间
void Move_Arm(uint8_t servoID, int16_t Position, uint16_t Time) {
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	4603      	mov	r3, r0
 800b500:	71fb      	strb	r3, [r7, #7]
 800b502:	460b      	mov	r3, r1
 800b504:	80bb      	strh	r3, [r7, #4]
 800b506:	4613      	mov	r3, r2
 800b508:	807b      	strh	r3, [r7, #2]
	uint8_t TxBuf[11];
	if (servoID > 31 || !(Time > 0) || Position > 32767) {
 800b50a:	79fb      	ldrb	r3, [r7, #7]
 800b50c:	2b1f      	cmp	r3, #31
 800b50e:	d82b      	bhi.n	800b568 <Move_Arm+0x70>
 800b510:	887b      	ldrh	r3, [r7, #2]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d028      	beq.n	800b568 <Move_Arm+0x70>
		return;
	}
	TxBuf[0] = FRAME_HEADER;
 800b516:	2355      	movs	r3, #85	@ 0x55
 800b518:	733b      	strb	r3, [r7, #12]
	TxBuf[1] = FRAME_HEADER;
 800b51a:	2355      	movs	r3, #85	@ 0x55
 800b51c:	737b      	strb	r3, [r7, #13]
	TxBuf[2] = 8;
 800b51e:	2308      	movs	r3, #8
 800b520:	73bb      	strb	r3, [r7, #14]
	TxBuf[3] = CMD_SERVO_MOVE;
 800b522:	2303      	movs	r3, #3
 800b524:	73fb      	strb	r3, [r7, #15]
	TxBuf[4] = 1;
 800b526:	2301      	movs	r3, #1
 800b528:	743b      	strb	r3, [r7, #16]
	TxBuf[5] = (uint8_t) Time;
 800b52a:	887b      	ldrh	r3, [r7, #2]
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	747b      	strb	r3, [r7, #17]
	TxBuf[6] = (uint8_t) (Time >> 8);
 800b530:	887b      	ldrh	r3, [r7, #2]
 800b532:	0a1b      	lsrs	r3, r3, #8
 800b534:	b29b      	uxth	r3, r3
 800b536:	b2db      	uxtb	r3, r3
 800b538:	74bb      	strb	r3, [r7, #18]
	TxBuf[7] = servoID;
 800b53a:	79fb      	ldrb	r3, [r7, #7]
 800b53c:	74fb      	strb	r3, [r7, #19]
	TxBuf[8] = (uint8_t) Position;
 800b53e:	88bb      	ldrh	r3, [r7, #4]
 800b540:	b2db      	uxtb	r3, r3
 800b542:	753b      	strb	r3, [r7, #20]
	TxBuf[9] = (uint8_t) (Position >> 8);
 800b544:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b548:	121b      	asrs	r3, r3, #8
 800b54a:	b21b      	sxth	r3, r3
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&jixiebi_usart, TxBuf, 10, 0xffff);
 800b550:	f107 010c 	add.w	r1, r7, #12
 800b554:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b558:	220a      	movs	r2, #10
 800b55a:	4805      	ldr	r0, [pc, #20]	@ (800b570 <Move_Arm+0x78>)
 800b55c:	f7fd f978 	bl	8008850 <HAL_UART_Transmit>
	HAL_Delay(5);
 800b560:	2005      	movs	r0, #5
 800b562:	f7f7 fbe3 	bl	8002d2c <HAL_Delay>
 800b566:	e000      	b.n	800b56a <Move_Arm+0x72>
		return;
 800b568:	bf00      	nop

}
 800b56a:	3718      	adds	r7, #24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	24000654 	.word	0x24000654

0800b574 <catch_Frist>:

}
//步进上升1800  下降1800
extern float x, y;
void catch_Frist(uint16_t Pos1, uint16_t Pos2) //5400
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	460a      	mov	r2, r1
 800b57e:	80fb      	strh	r3, [r7, #6]
 800b580:	4613      	mov	r3, r2
 800b582:	80bb      	strh	r3, [r7, #4]
	WritePosEx(0, Pos1, 500, 50); //物料底盘移动
 800b584:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b588:	2332      	movs	r3, #50	@ 0x32
 800b58a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b58e:	2000      	movs	r0, #0
 800b590:	f002 fb6c 	bl	800dc6c <WritePosEx>

	Move_Arm(1, Arm_close, time); //爪子闭合
 800b594:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b598:	2114      	movs	r1, #20
 800b59a:	2001      	movs	r0, #1
 800b59c:	f7ff ffac 	bl	800b4f8 <Move_Arm>
	HAL_Delay(time);
 800b5a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b5a4:	f7f7 fbc2 	bl	8002d2c <HAL_Delay>
	Drop_Location_Sheng(Emm_Speed, Emm_Acc, 500);
 800b5a8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b5ac:	2132      	movs	r1, #50	@ 0x32
 800b5ae:	2032      	movs	r0, #50	@ 0x32
 800b5b0:	f001 facc 	bl	800cb4c <Drop_Location_Sheng>
//	HAL_Delay(3000);
	WritePosEx(1, Pos2, 500, 50); //爪子底盘向左
 800b5b4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b5b8:	2332      	movs	r3, #50	@ 0x32
 800b5ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b5be:	2001      	movs	r0, #1
 800b5c0:	f002 fb54 	bl	800dc6c <WritePosEx>
	HAL_Delay(3000);
 800b5c4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800b5c8:	f7f7 fbb0 	bl	8002d2c <HAL_Delay>
//	{
//		WritePosEx(1, 4045, 500, 50); //爪子底盘向左
//		HAL_Delay(1500);
//		Grab_count--;
//	}
	Move_Arm(6, 550, time); //爪子下降
 800b5cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b5d0:	f240 2126 	movw	r1, #550	@ 0x226
 800b5d4:	2006      	movs	r0, #6
 800b5d6:	f7ff ff8f 	bl	800b4f8 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 4500);
 800b5da:	f241 1294 	movw	r2, #4500	@ 0x1194
 800b5de:	2132      	movs	r1, #50	@ 0x32
 800b5e0:	2032      	movs	r0, #50	@ 0x32
 800b5e2:	f001 fa6f 	bl	800cac4 <Drop_Location_jiang>
	Move_Arm(1, 190, time); //爪子张开
 800b5e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b5ea:	21be      	movs	r1, #190	@ 0xbe
 800b5ec:	2001      	movs	r0, #1
 800b5ee:	f7ff ff83 	bl	800b4f8 <Move_Arm>
	HAL_Delay(time);
 800b5f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b5f6:	f7f7 fb99 	bl	8002d2c <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b5fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b5fe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b602:	2006      	movs	r0, #6
 800b604:	f7ff ff78 	bl	800b4f8 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 500);
 800b608:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b60c:	2132      	movs	r1, #50	@ 0x32
 800b60e:	2032      	movs	r0, #50	@ 0x32
 800b610:	f001 fa58 	bl	800cac4 <Drop_Location_jiang>

	WritePosEx(1, 4050, 500, 50); //爪子底盘向左
 800b614:	2332      	movs	r3, #50	@ 0x32
 800b616:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b61a:	f640 71d2 	movw	r1, #4050	@ 0xfd2
 800b61e:	2001      	movs	r0, #1
 800b620:	f002 fb24 	bl	800dc6c <WritePosEx>
	HAL_Delay(1500);
 800b624:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800b628:	f7f7 fb80 	bl	8002d2c <HAL_Delay>
	Move_Arm(1, 500, time); //爪子张开
 800b62c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b630:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b634:	2001      	movs	r0, #1
 800b636:	f7ff ff5f 	bl	800b4f8 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 8600);
 800b63a:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b63e:	2132      	movs	r1, #50	@ 0x32
 800b640:	2032      	movs	r0, #50	@ 0x32
 800b642:	f001 fa3f 	bl	800cac4 <Drop_Location_jiang>
}
 800b646:	bf00      	nop
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <catch_Second>:
//上升1800，下降1800
void catch_Second(uint16_t Pos1, uint16_t Pos2) //从地上抓取到车上
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b082      	sub	sp, #8
 800b652:	af00      	add	r7, sp, #0
 800b654:	4603      	mov	r3, r0
 800b656:	460a      	mov	r2, r1
 800b658:	80fb      	strh	r3, [r7, #6]
 800b65a:	4613      	mov	r3, r2
 800b65c:	80bb      	strh	r3, [r7, #4]

	WritePosEx(0, Pos1, 500, 50); //物料底盘移动
 800b65e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b662:	2332      	movs	r3, #50	@ 0x32
 800b664:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b668:	2000      	movs	r0, #0
 800b66a:	f002 faff 	bl	800dc6c <WritePosEx>
	Move_Arm(1, 500, time); //爪子张开
 800b66e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b672:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b676:	2001      	movs	r0, #1
 800b678:	f7ff ff3e 	bl	800b4f8 <Move_Arm>
	HAL_Delay(time);
 800b67c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b680:	f7f7 fb54 	bl	8002d2c <HAL_Delay>
	Move_Arm(6, 360, time); //爪子下降
 800b684:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b688:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800b68c:	2006      	movs	r0, #6
 800b68e:	f7ff ff33 	bl	800b4f8 <Move_Arm>
	HAL_Delay(time);
 800b692:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b696:	f7f7 fb49 	bl	8002d2c <HAL_Delay>

	Move_Arm(1, Arm_close, time); //爪子闭合
 800b69a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b69e:	2114      	movs	r1, #20
 800b6a0:	2001      	movs	r0, #1
 800b6a2:	f7ff ff29 	bl	800b4f8 <Move_Arm>
	HAL_Delay(time);
 800b6a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6aa:	f7f7 fb3f 	bl	8002d2c <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b6ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6b2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b6b6:	2006      	movs	r0, #6
 800b6b8:	f7ff ff1e 	bl	800b4f8 <Move_Arm>
	HAL_Delay(time);
 800b6bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6c0:	f7f7 fb34 	bl	8002d2c <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 1000);
 800b6c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6c8:	2132      	movs	r1, #50	@ 0x32
 800b6ca:	2032      	movs	r0, #50	@ 0x32
 800b6cc:	f001 f9fa 	bl	800cac4 <Drop_Location_jiang>
	WritePosEx(1, Pos2, 500, 50); //爪子底盘向左
 800b6d0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b6d4:	2332      	movs	r3, #50	@ 0x32
 800b6d6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b6da:	2001      	movs	r0, #1
 800b6dc:	f002 fac6 	bl	800dc6c <WritePosEx>
	HAL_Delay(5000);
 800b6e0:	f241 3088 	movw	r0, #5000	@ 0x1388
 800b6e4:	f7f7 fb22 	bl	8002d2c <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 5000);
 800b6e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6ec:	2132      	movs	r1, #50	@ 0x32
 800b6ee:	2032      	movs	r0, #50	@ 0x32
 800b6f0:	f001 f9e8 	bl	800cac4 <Drop_Location_jiang>
	Move_Arm(6, 550, time); //爪子下降
 800b6f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6f8:	f240 2126 	movw	r1, #550	@ 0x226
 800b6fc:	2006      	movs	r0, #6
 800b6fe:	f7ff fefb 	bl	800b4f8 <Move_Arm>
	HAL_Delay(time);
 800b702:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b706:	f7f7 fb11 	bl	8002d2c <HAL_Delay>
	Move_Arm(1, 190, time); //爪子张开
 800b70a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b70e:	21be      	movs	r1, #190	@ 0xbe
 800b710:	2001      	movs	r0, #1
 800b712:	f7ff fef1 	bl	800b4f8 <Move_Arm>
	HAL_Delay(time);
 800b716:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b71a:	f7f7 fb07 	bl	8002d2c <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b71e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b722:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b726:	2006      	movs	r0, #6
 800b728:	f7ff fee6 	bl	800b4f8 <Move_Arm>
	HAL_Delay(time);
 800b72c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b730:	f7f7 fafc 	bl	8002d2c <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 5000);
 800b734:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b738:	2132      	movs	r1, #50	@ 0x32
 800b73a:	2032      	movs	r0, #50	@ 0x32
 800b73c:	f001 f9c2 	bl	800cac4 <Drop_Location_jiang>
	WritePosEx(1, 4045, 500, 50); //爪子底盘向左
 800b740:	2332      	movs	r3, #50	@ 0x32
 800b742:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b746:	f640 71cd 	movw	r1, #4045	@ 0xfcd
 800b74a:	2001      	movs	r0, #1
 800b74c:	f002 fa8e 	bl	800dc6c <WritePosEx>
	HAL_Delay(1500);
 800b750:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800b754:	f7f7 faea 	bl	8002d2c <HAL_Delay>
	Move_Arm(1, 500, time); //爪子张开
 800b758:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b75c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b760:	2001      	movs	r0, #1
 800b762:	f7ff fec9 	bl	800b4f8 <Move_Arm>
	HAL_Delay(time);
 800b766:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b76a:	f7f7 fadf 	bl	8002d2c <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 11000);
 800b76e:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800b772:	2132      	movs	r1, #50	@ 0x32
 800b774:	2032      	movs	r0, #50	@ 0x32
 800b776:	f001 f9a5 	bl	800cac4 <Drop_Location_jiang>

}
 800b77a:	bf00      	nop
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
	...

0800b784 <Start>:

extern int QR_Flag;
void Start(void) //下降14000
{
 800b784:	b580      	push	{r7, lr}
 800b786:	af00      	add	r7, sp, #0
//	先将爪子升起来，避免打到TX2或者物料盘
	Drop_Location_jiang(200, 120, 4000);
 800b788:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800b78c:	2178      	movs	r1, #120	@ 0x78
 800b78e:	20c8      	movs	r0, #200	@ 0xc8
 800b790:	f001 f998 	bl	800cac4 <Drop_Location_jiang>
//	将舵机向外转动
	FT_Servo_Orth();
 800b794:	f002 fddd 	bl	800e352 <FT_Servo_Orth>
//	HAL_Delay(2000);
	Drop_Location_jiang(200, 120, 12000);
 800b798:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800b79c:	2178      	movs	r1, #120	@ 0x78
 800b79e:	20c8      	movs	r0, #200	@ 0xc8
 800b7a0:	f001 f990 	bl	800cac4 <Drop_Location_jiang>
	Move_Arm(1, 500, 300); //爪子张开
 800b7a4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b7a8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b7ac:	2001      	movs	r0, #1
 800b7ae:	f7ff fea3 	bl	800b4f8 <Move_Arm>
	Move_Arm(6, 500, 300);
 800b7b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b7b6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b7ba:	2006      	movs	r0, #6
 800b7bc:	f7ff fe9c 	bl	800b4f8 <Move_Arm>
	while (!QR_Flag)
 800b7c0:	bf00      	nop
 800b7c2:	4b09      	ldr	r3, [pc, #36]	@ (800b7e8 <Start+0x64>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d0fb      	beq.n	800b7c2 <Start+0x3e>
		;  //等待扫码完成
//	扫码完成后将爪子提起俩
	Drop_Location_jiang(200, 120, 8600);
 800b7ca:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b7ce:	2178      	movs	r1, #120	@ 0x78
 800b7d0:	20c8      	movs	r0, #200	@ 0xc8
 800b7d2:	f001 f977 	bl	800cac4 <Drop_Location_jiang>
	Move_Arm(6, 900, 300);
 800b7d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b7da:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800b7de:	2006      	movs	r0, #6
 800b7e0:	f7ff fe8a 	bl	800b4f8 <Move_Arm>
}
 800b7e4:	bf00      	nop
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	24000484 	.word	0x24000484

0800b7ec <put>:
void put(uint16_t Pos1, uint16_t Pos2) {
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	460a      	mov	r2, r1
 800b7f6:	80fb      	strh	r3, [r7, #6]
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	80bb      	strh	r3, [r7, #4]
	WritePosEx(0, Pos1, 1000, 100); //物料底盘移动
 800b7fc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b800:	2364      	movs	r3, #100	@ 0x64
 800b802:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b806:	2000      	movs	r0, #0
 800b808:	f002 fa30 	bl	800dc6c <WritePosEx>
	Move_Arm(6, 1000, time); //爪子上升
 800b80c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b810:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b814:	2006      	movs	r0, #6
 800b816:	f7ff fe6f 	bl	800b4f8 <Move_Arm>
	Move_Arm(1, 150, time); //爪子张开
 800b81a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b81e:	2196      	movs	r1, #150	@ 0x96
 800b820:	2001      	movs	r0, #1
 800b822:	f7ff fe69 	bl	800b4f8 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 3500);
 800b826:	f640 52ac 	movw	r2, #3500	@ 0xdac
 800b82a:	2132      	movs	r1, #50	@ 0x32
 800b82c:	2032      	movs	r0, #50	@ 0x32
 800b82e:	f001 f949 	bl	800cac4 <Drop_Location_jiang>
	HAL_Delay(1000);
 800b832:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b836:	f7f7 fa79 	bl	8002d2c <HAL_Delay>
	WritePosEx(1, Pos2, 800, 50); //爪子底盘向左
 800b83a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b83e:	2332      	movs	r3, #50	@ 0x32
 800b840:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800b844:	2001      	movs	r0, #1
 800b846:	f002 fa11 	bl	800dc6c <WritePosEx>
	HAL_Delay(2000);                                       //延时是为了抓取底盘降下来，防止变转变降
 800b84a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b84e:	f7f7 fa6d 	bl	8002d2c <HAL_Delay>
	Move_Arm(6, 410, time); //爪子下降
 800b852:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b856:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800b85a:	2006      	movs	r0, #6
 800b85c:	f7ff fe4c 	bl	800b4f8 <Move_Arm>
	HAL_Delay(time);
 800b860:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b864:	f7f7 fa62 	bl	8002d2c <HAL_Delay>
	Move_Arm(1, Arm_close, time); //爪子闭合
 800b868:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b86c:	2114      	movs	r1, #20
 800b86e:	2001      	movs	r0, #1
 800b870:	f7ff fe42 	bl	800b4f8 <Move_Arm>
	HAL_Delay(time);
 800b874:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b878:	f7f7 fa58 	bl	8002d2c <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b87c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b880:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b884:	2006      	movs	r0, #6
 800b886:	f7ff fe37 	bl	800b4f8 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 1000);
 800b88a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b88e:	2132      	movs	r1, #50	@ 0x32
 800b890:	2032      	movs	r0, #50	@ 0x32
 800b892:	f001 f917 	bl	800cac4 <Drop_Location_jiang>
	WritePosEx(1, 4100, 800, 50); //抓取底盘向摆放位置
 800b896:	2332      	movs	r3, #50	@ 0x32
 800b898:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800b89c:	f241 0104 	movw	r1, #4100	@ 0x1004
 800b8a0:	2001      	movs	r0, #1
 800b8a2:	f002 f9e3 	bl	800dc6c <WritePosEx>
	HAL_Delay(2000);                                        //延时是为了让抓取底盘转过来
 800b8a6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b8aa:	f7f7 fa3f 	bl	8002d2c <HAL_Delay>
	Move_Arm(6, 360, time); //爪子下降
 800b8ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b8b2:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800b8b6:	2006      	movs	r0, #6
 800b8b8:	f7ff fe1e 	bl	800b4f8 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 11000);
 800b8bc:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800b8c0:	2132      	movs	r1, #50	@ 0x32
 800b8c2:	2032      	movs	r0, #50	@ 0x32
 800b8c4:	f001 f8fe 	bl	800cac4 <Drop_Location_jiang>
	Move_Arm(1, 500, time); //爪子张开
 800b8c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b8cc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b8d0:	2001      	movs	r0, #1
 800b8d2:	f7ff fe11 	bl	800b4f8 <Move_Arm>

}
 800b8d6:	bf00      	nop
 800b8d8:	3708      	adds	r7, #8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
	...

0800b8e0 <Frist_Grab_Wuliao>:
}
// 抓取过程标志位
extern char Match_Flag;
// 抓取计算稳定性标志位，0为识别有故障,1为正常计算
extern char Check_flag;
void Frist_Grab_Wuliao(void) {
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	af00      	add	r7, sp, #0
//	FIXME:在每一次抓取前都应该判断物料停止与基于TX2坐标闭环
//	Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
	static uint8_t Grab_count = 1;
	while (Grab_count < 4) {
 800b8e4:	e066      	b.n	800b9b4 <Frist_Grab_Wuliao+0xd4>
//		抓取物料过程，置标志位,标志位为颜色
	Match_Flag = Grab_count;
 800b8e6:	4b38      	ldr	r3, [pc, #224]	@ (800b9c8 <Frist_Grab_Wuliao+0xe8>)
 800b8e8:	781a      	ldrb	r2, [r3, #0]
 800b8ea:	4b38      	ldr	r3, [pc, #224]	@ (800b9cc <Frist_Grab_Wuliao+0xec>)
 800b8ec:	701a      	strb	r2, [r3, #0]
//		if (QR_data[0] == colour && wuliao_falg == 0) {
//			先判断物料是否停止
	while(Check_Stability(x,y,Check_flag) == 2)
 800b8ee:	e002      	b.n	800b8f6 <Frist_Grab_Wuliao+0x16>
	{
		HAL_Delay(30);
 800b8f0:	201e      	movs	r0, #30
 800b8f2:	f7f7 fa1b 	bl	8002d2c <HAL_Delay>
	while(Check_Stability(x,y,Check_flag) == 2)
 800b8f6:	4b36      	ldr	r3, [pc, #216]	@ (800b9d0 <Frist_Grab_Wuliao+0xf0>)
 800b8f8:	edd3 7a00 	vldr	s15, [r3]
 800b8fc:	4b35      	ldr	r3, [pc, #212]	@ (800b9d4 <Frist_Grab_Wuliao+0xf4>)
 800b8fe:	ed93 7a00 	vldr	s14, [r3]
 800b902:	4b35      	ldr	r3, [pc, #212]	@ (800b9d8 <Frist_Grab_Wuliao+0xf8>)
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	4618      	mov	r0, r3
 800b908:	eef0 0a47 	vmov.f32	s1, s14
 800b90c:	eeb0 0a67 	vmov.f32	s0, s15
 800b910:	f002 fc7a 	bl	800e208 <Check_Stability>
 800b914:	4603      	mov	r3, r0
 800b916:	2b02      	cmp	r3, #2
 800b918:	d0ea      	beq.n	800b8f0 <Frist_Grab_Wuliao+0x10>
	}
//			Realize_Stop();
//			基于TX2坐标进行闭环
	Move_Tx_Pid_Ctrl(tx_target, ty_target);
 800b91a:	4b30      	ldr	r3, [pc, #192]	@ (800b9dc <Frist_Grab_Wuliao+0xfc>)
 800b91c:	edd3 7a00 	vldr	s15, [r3]
 800b920:	4b2f      	ldr	r3, [pc, #188]	@ (800b9e0 <Frist_Grab_Wuliao+0x100>)
 800b922:	ed93 7a00 	vldr	s14, [r3]
 800b926:	eef0 0a47 	vmov.f32	s1, s14
 800b92a:	eeb0 0a67 	vmov.f32	s0, s15
 800b92e:	f001 fe5f 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
//			抓取第一个物料
//			物料盘先转动到目标位置
	FT_Servo_Put(0,Grab_count);
 800b932:	4b25      	ldr	r3, [pc, #148]	@ (800b9c8 <Frist_Grab_Wuliao+0xe8>)
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	4619      	mov	r1, r3
 800b938:	2000      	movs	r0, #0
 800b93a:	f002 fd16 	bl	800e36a <FT_Servo_Put>

	Move_Arm(1, 50, 300);
 800b93e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b942:	2132      	movs	r1, #50	@ 0x32
 800b944:	2001      	movs	r0, #1
 800b946:	f7ff fdd7 	bl	800b4f8 <Move_Arm>
//			上升
	Drop_Location_jiang(200, 120, 1000);
 800b94a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b94e:	2178      	movs	r1, #120	@ 0x78
 800b950:	20c8      	movs	r0, #200	@ 0xc8
 800b952:	f001 f8b7 	bl	800cac4 <Drop_Location_jiang>
//			catch_Frist(860, 2375);
//			爪子舵机转动到放置物料到车上的角度
	FT_Servo_Put(1,Grab_count);
 800b956:	4b1c      	ldr	r3, [pc, #112]	@ (800b9c8 <Frist_Grab_Wuliao+0xe8>)
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	4619      	mov	r1, r3
 800b95c:	2001      	movs	r0, #1
 800b95e:	f002 fd04 	bl	800e36a <FT_Servo_Put>
//			TODO:调试，失能五号舵机
	Drop_Location_jiang(200, 120, 6000);
 800b962:	f241 7270 	movw	r2, #6000	@ 0x1770
 800b966:	2178      	movs	r1, #120	@ 0x78
 800b968:	20c8      	movs	r0, #200	@ 0xc8
 800b96a:	f001 f8ab 	bl	800cac4 <Drop_Location_jiang>
//			while(1)
//			{
//				;
//			}
//			松开爪子
	Move_Arm(1, 300, 300);
 800b96e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b972:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800b976:	2001      	movs	r0, #1
 800b978:	f7ff fdbe 	bl	800b4f8 <Move_Arm>
//			上升
	Drop_Location_jiang(200, 120, 1000);
 800b97c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b980:	2178      	movs	r1, #120	@ 0x78
 800b982:	20c8      	movs	r0, #200	@ 0xc8
 800b984:	f001 f89e 	bl	800cac4 <Drop_Location_jiang>
//			向右转，与车身正交
	if(Grab_count < 3)
 800b988:	4b0f      	ldr	r3, [pc, #60]	@ (800b9c8 <Frist_Grab_Wuliao+0xe8>)
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d808      	bhi.n	800b9a2 <Frist_Grab_Wuliao+0xc2>
	{
		FT_Servo_Orth();
 800b990:	f002 fcdf 	bl	800e352 <FT_Servo_Orth>
		Drop_Location_jiang(200, 120, 8600);
 800b994:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b998:	2178      	movs	r1, #120	@ 0x78
 800b99a:	20c8      	movs	r0, #200	@ 0xc8
 800b99c:	f001 f892 	bl	800cac4 <Drop_Location_jiang>
 800b9a0:	e002      	b.n	800b9a8 <Frist_Grab_Wuliao+0xc8>
	}
	else
		FT_Servo_Zero(1);
 800b9a2:	2001      	movs	r0, #1
 800b9a4:	f002 fcb7 	bl	800e316 <FT_Servo_Zero>
	Grab_count += 1;
 800b9a8:	4b07      	ldr	r3, [pc, #28]	@ (800b9c8 <Frist_Grab_Wuliao+0xe8>)
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	b2da      	uxtb	r2, r3
 800b9b0:	4b05      	ldr	r3, [pc, #20]	@ (800b9c8 <Frist_Grab_Wuliao+0xe8>)
 800b9b2:	701a      	strb	r2, [r3, #0]
	while (Grab_count < 4) {
 800b9b4:	4b04      	ldr	r3, [pc, #16]	@ (800b9c8 <Frist_Grab_Wuliao+0xe8>)
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	2b03      	cmp	r3, #3
 800b9ba:	d994      	bls.n	800b8e6 <Frist_Grab_Wuliao+0x6>
	}
	Grab_count = 0;
 800b9bc:	4b02      	ldr	r3, [pc, #8]	@ (800b9c8 <Frist_Grab_Wuliao+0xe8>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	701a      	strb	r2, [r3, #0]
}
 800b9c2:	bf00      	nop
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	24000045 	.word	0x24000045
 800b9cc:	24000488 	.word	0x24000488
 800b9d0:	24000454 	.word	0x24000454
 800b9d4:	24000458 	.word	0x24000458
 800b9d8:	24000489 	.word	0x24000489
 800b9dc:	24000000 	.word	0x24000000
 800b9e0:	24000004 	.word	0x24000004

0800b9e4 <put_wuliao_to_circular_frist>:
////		}
//
//	}
//}

void put_wuliao_to_circular_frist(void) {
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0

	for (int i = 0; i < 3; i++) {
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	607b      	str	r3, [r7, #4]
 800b9ee:	e067      	b.n	800bac0 <put_wuliao_to_circular_frist+0xdc>
		if (QR_data[i] + 3 == 4) {
 800b9f0:	4a37      	ldr	r2, [pc, #220]	@ (800bad0 <put_wuliao_to_circular_frist+0xec>)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d105      	bne.n	800ba08 <put_wuliao_to_circular_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800b9fc:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800bad4 <put_wuliao_to_circular_frist+0xf0>
 800ba00:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800bad8 <put_wuliao_to_circular_frist+0xf4>
 800ba04:	f001 fc94 	bl	800d330 <Move_Action_Nopid_Right_Ctrl>

		}
		if (QR_data[i] + 3 == 5) {
 800ba08:	4a31      	ldr	r2, [pc, #196]	@ (800bad0 <put_wuliao_to_circular_frist+0xec>)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d105      	bne.n	800ba20 <put_wuliao_to_circular_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800ba14:	eddf 0a31 	vldr	s1, [pc, #196]	@ 800badc <put_wuliao_to_circular_frist+0xf8>
 800ba18:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800bad8 <put_wuliao_to_circular_frist+0xf4>
 800ba1c:	f001 fc88 	bl	800d330 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] + 3 == 6) {
 800ba20:	4a2b      	ldr	r2, [pc, #172]	@ (800bad0 <put_wuliao_to_circular_frist+0xec>)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba28:	2b03      	cmp	r3, #3
 800ba2a:	d105      	bne.n	800ba38 <put_wuliao_to_circular_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800ba2c:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800bae0 <put_wuliao_to_circular_frist+0xfc>
 800ba30:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800bad8 <put_wuliao_to_circular_frist+0xf4>
 800ba34:	f001 fc7c 	bl	800d330 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 0) {
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d112      	bne.n	800ba64 <put_wuliao_to_circular_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800ba3e:	4b29      	ldr	r3, [pc, #164]	@ (800bae4 <put_wuliao_to_circular_frist+0x100>)
 800ba40:	edd3 7a00 	vldr	s15, [r3]
 800ba44:	4b28      	ldr	r3, [pc, #160]	@ (800bae8 <put_wuliao_to_circular_frist+0x104>)
 800ba46:	ed93 7a00 	vldr	s14, [r3]
 800ba4a:	eef0 0a47 	vmov.f32	s1, s14
 800ba4e:	eeb0 0a67 	vmov.f32	s0, s15
 800ba52:	f001 fdcd 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800ba56:	f640 2178 	movw	r1, #2680	@ 0xa78
 800ba5a:	f640 0066 	movw	r0, #2150	@ 0x866
 800ba5e:	f7ff fec5 	bl	800b7ec <put>
 800ba62:	e02a      	b.n	800baba <put_wuliao_to_circular_frist+0xd6>
		} else if (i == 1) {
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d112      	bne.n	800ba90 <put_wuliao_to_circular_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800ba6a:	4b1e      	ldr	r3, [pc, #120]	@ (800bae4 <put_wuliao_to_circular_frist+0x100>)
 800ba6c:	edd3 7a00 	vldr	s15, [r3]
 800ba70:	4b1d      	ldr	r3, [pc, #116]	@ (800bae8 <put_wuliao_to_circular_frist+0x104>)
 800ba72:	ed93 7a00 	vldr	s14, [r3]
 800ba76:	eef0 0a47 	vmov.f32	s1, s14
 800ba7a:	eeb0 0a67 	vmov.f32	s0, s15
 800ba7e:	f001 fdb7 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800ba82:	f640 2178 	movw	r1, #2680	@ 0xa78
 800ba86:	f640 4085 	movw	r0, #3205	@ 0xc85
 800ba8a:	f7ff feaf 	bl	800b7ec <put>
 800ba8e:	e014      	b.n	800baba <put_wuliao_to_circular_frist+0xd6>
		} else if (i == 2) {
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	d111      	bne.n	800baba <put_wuliao_to_circular_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800ba96:	4b13      	ldr	r3, [pc, #76]	@ (800bae4 <put_wuliao_to_circular_frist+0x100>)
 800ba98:	edd3 7a00 	vldr	s15, [r3]
 800ba9c:	4b12      	ldr	r3, [pc, #72]	@ (800bae8 <put_wuliao_to_circular_frist+0x104>)
 800ba9e:	ed93 7a00 	vldr	s14, [r3]
 800baa2:	eef0 0a47 	vmov.f32	s1, s14
 800baa6:	eeb0 0a67 	vmov.f32	s0, s15
 800baaa:	f001 fda1 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800baae:	f640 1142 	movw	r1, #2370	@ 0x942
 800bab2:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bab6:	f7ff fe99 	bl	800b7ec <put>
	for (int i = 0; i < 3; i++) {
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	3301      	adds	r3, #1
 800babe:	607b      	str	r3, [r7, #4]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	dd94      	ble.n	800b9f0 <put_wuliao_to_circular_frist+0xc>
		}

	}
}
 800bac6:	bf00      	nop
 800bac8:	bf00      	nop
 800baca:	3708      	adds	r7, #8
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	24000460 	.word	0x24000460
 800bad4:	44960000 	.word	0x44960000
 800bad8:	44e74000 	.word	0x44e74000
 800badc:	44834000 	.word	0x44834000
 800bae0:	445d4000 	.word	0x445d4000
 800bae4:	24000000 	.word	0x24000000
 800bae8:	24000004 	.word	0x24000004

0800baec <put_wuliao_to_Car_frist>:

void put_wuliao_to_Car_frist(void) {
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 800baf2:	2300      	movs	r3, #0
 800baf4:	607b      	str	r3, [r7, #4]
 800baf6:	e067      	b.n	800bbc8 <put_wuliao_to_Car_frist+0xdc>
		if (QR_data[i] == 1) {
 800baf8:	4a37      	ldr	r2, [pc, #220]	@ (800bbd8 <put_wuliao_to_Car_frist+0xec>)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d105      	bne.n	800bb10 <put_wuliao_to_Car_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800bb04:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800bbdc <put_wuliao_to_Car_frist+0xf0>
 800bb08:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800bbe0 <put_wuliao_to_Car_frist+0xf4>
 800bb0c:	f001 fc10 	bl	800d330 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 2) {
 800bb10:	4a31      	ldr	r2, [pc, #196]	@ (800bbd8 <put_wuliao_to_Car_frist+0xec>)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d105      	bne.n	800bb28 <put_wuliao_to_Car_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800bb1c:	eddf 0a31 	vldr	s1, [pc, #196]	@ 800bbe4 <put_wuliao_to_Car_frist+0xf8>
 800bb20:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800bbe0 <put_wuliao_to_Car_frist+0xf4>
 800bb24:	f001 fc04 	bl	800d330 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800bb28:	4a2b      	ldr	r2, [pc, #172]	@ (800bbd8 <put_wuliao_to_Car_frist+0xec>)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb30:	2b03      	cmp	r3, #3
 800bb32:	d105      	bne.n	800bb40 <put_wuliao_to_Car_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800bb34:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800bbe8 <put_wuliao_to_Car_frist+0xfc>
 800bb38:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800bbe0 <put_wuliao_to_Car_frist+0xf4>
 800bb3c:	f001 fbf8 	bl	800d330 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 0) {
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d112      	bne.n	800bb6c <put_wuliao_to_Car_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bb46:	4b29      	ldr	r3, [pc, #164]	@ (800bbec <put_wuliao_to_Car_frist+0x100>)
 800bb48:	edd3 7a00 	vldr	s15, [r3]
 800bb4c:	4b28      	ldr	r3, [pc, #160]	@ (800bbf0 <put_wuliao_to_Car_frist+0x104>)
 800bb4e:	ed93 7a00 	vldr	s14, [r3]
 800bb52:	eef0 0a47 	vmov.f32	s1, s14
 800bb56:	eeb0 0a67 	vmov.f32	s0, s15
 800bb5a:	f001 fd49 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
			catch_Second(860, 2375);
 800bb5e:	f640 1147 	movw	r1, #2375	@ 0x947
 800bb62:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800bb66:	f7ff fd72 	bl	800b64e <catch_Second>
 800bb6a:	e02a      	b.n	800bbc2 <put_wuliao_to_Car_frist+0xd6>

		} else if (i == 1) {
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d112      	bne.n	800bb98 <put_wuliao_to_Car_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bb72:	4b1e      	ldr	r3, [pc, #120]	@ (800bbec <put_wuliao_to_Car_frist+0x100>)
 800bb74:	edd3 7a00 	vldr	s15, [r3]
 800bb78:	4b1d      	ldr	r3, [pc, #116]	@ (800bbf0 <put_wuliao_to_Car_frist+0x104>)
 800bb7a:	ed93 7a00 	vldr	s14, [r3]
 800bb7e:	eef0 0a47 	vmov.f32	s1, s14
 800bb82:	eeb0 0a67 	vmov.f32	s0, s15
 800bb86:	f001 fd33 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
			catch_Second(1910, 2370);
 800bb8a:	f640 1142 	movw	r1, #2370	@ 0x942
 800bb8e:	f240 7076 	movw	r0, #1910	@ 0x776
 800bb92:	f7ff fd5c 	bl	800b64e <catch_Second>
 800bb96:	e014      	b.n	800bbc2 <put_wuliao_to_Car_frist+0xd6>
		} else if (i == 2) {
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d111      	bne.n	800bbc2 <put_wuliao_to_Car_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bb9e:	4b13      	ldr	r3, [pc, #76]	@ (800bbec <put_wuliao_to_Car_frist+0x100>)
 800bba0:	edd3 7a00 	vldr	s15, [r3]
 800bba4:	4b12      	ldr	r3, [pc, #72]	@ (800bbf0 <put_wuliao_to_Car_frist+0x104>)
 800bba6:	ed93 7a00 	vldr	s14, [r3]
 800bbaa:	eef0 0a47 	vmov.f32	s1, s14
 800bbae:	eeb0 0a67 	vmov.f32	s0, s15
 800bbb2:	f001 fd1d 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
			catch_Second(2960, 2370);
 800bbb6:	f640 1142 	movw	r1, #2370	@ 0x942
 800bbba:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bbbe:	f7ff fd46 	bl	800b64e <catch_Second>
	for (int i = 0; i < 3; i++) {
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	607b      	str	r3, [r7, #4]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	dd94      	ble.n	800baf8 <put_wuliao_to_Car_frist+0xc>
		}

	}
}
 800bbce:	bf00      	nop
 800bbd0:	bf00      	nop
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	24000460 	.word	0x24000460
 800bbdc:	44960000 	.word	0x44960000
 800bbe0:	44e74000 	.word	0x44e74000
 800bbe4:	44834000 	.word	0x44834000
 800bbe8:	445d4000 	.word	0x445d4000
 800bbec:	24000000 	.word	0x24000000
 800bbf0:	24000004 	.word	0x24000004

0800bbf4 <put_wuliao_to_circular_second>:

void put_wuliao_to_circular_second(void) {
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	607b      	str	r3, [r7, #4]
 800bbfe:	e067      	b.n	800bcd0 <put_wuliao_to_circular_second+0xdc>
		if (QR_data[i] + 3 == 4) {
 800bc00:	4a3a      	ldr	r2, [pc, #232]	@ (800bcec <put_wuliao_to_circular_second+0xf8>)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d105      	bne.n	800bc18 <put_wuliao_to_circular_second+0x24>
			Move_Action_Nopid_Forward_Ctrl(954, 1850);
 800bc0c:	eddf 0a38 	vldr	s1, [pc, #224]	@ 800bcf0 <put_wuliao_to_circular_second+0xfc>
 800bc10:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800bcf4 <put_wuliao_to_circular_second+0x100>
 800bc14:	f001 fa2c 	bl	800d070 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (QR_data[i] + 3 == 5) {
 800bc18:	4a34      	ldr	r2, [pc, #208]	@ (800bcec <put_wuliao_to_circular_second+0xf8>)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d105      	bne.n	800bc30 <put_wuliao_to_circular_second+0x3c>
			Move_Action_Nopid_Forward_Ctrl(1050, 1850);
 800bc24:	eddf 0a32 	vldr	s1, [pc, #200]	@ 800bcf0 <put_wuliao_to_circular_second+0xfc>
 800bc28:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 800bcf8 <put_wuliao_to_circular_second+0x104>
 800bc2c:	f001 fa20 	bl	800d070 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (QR_data[i] + 3 == 6) {
 800bc30:	4a2e      	ldr	r2, [pc, #184]	@ (800bcec <put_wuliao_to_circular_second+0xf8>)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc38:	2b03      	cmp	r3, #3
 800bc3a:	d105      	bne.n	800bc48 <put_wuliao_to_circular_second+0x54>
			Move_Action_Nopid_Forward_Ctrl(1208, 1850);
 800bc3c:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800bcf0 <put_wuliao_to_circular_second+0xfc>
 800bc40:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 800bcfc <put_wuliao_to_circular_second+0x108>
 800bc44:	f001 fa14 	bl	800d070 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (i == 0) {
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d112      	bne.n	800bc74 <put_wuliao_to_circular_second+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bc4e:	4b2c      	ldr	r3, [pc, #176]	@ (800bd00 <put_wuliao_to_circular_second+0x10c>)
 800bc50:	edd3 7a00 	vldr	s15, [r3]
 800bc54:	4b2b      	ldr	r3, [pc, #172]	@ (800bd04 <put_wuliao_to_circular_second+0x110>)
 800bc56:	ed93 7a00 	vldr	s14, [r3]
 800bc5a:	eef0 0a47 	vmov.f32	s1, s14
 800bc5e:	eeb0 0a67 	vmov.f32	s0, s15
 800bc62:	f001 fcc5 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800bc66:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bc6a:	f640 0066 	movw	r0, #2150	@ 0x866
 800bc6e:	f7ff fdbd 	bl	800b7ec <put>
 800bc72:	e02a      	b.n	800bcca <put_wuliao_to_circular_second+0xd6>

		} else if (i == 1) {
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d112      	bne.n	800bca0 <put_wuliao_to_circular_second+0xac>

			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bc7a:	4b21      	ldr	r3, [pc, #132]	@ (800bd00 <put_wuliao_to_circular_second+0x10c>)
 800bc7c:	edd3 7a00 	vldr	s15, [r3]
 800bc80:	4b20      	ldr	r3, [pc, #128]	@ (800bd04 <put_wuliao_to_circular_second+0x110>)
 800bc82:	ed93 7a00 	vldr	s14, [r3]
 800bc86:	eef0 0a47 	vmov.f32	s1, s14
 800bc8a:	eeb0 0a67 	vmov.f32	s0, s15
 800bc8e:	f001 fcaf 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800bc92:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bc96:	f640 4085 	movw	r0, #3205	@ 0xc85
 800bc9a:	f7ff fda7 	bl	800b7ec <put>
 800bc9e:	e014      	b.n	800bcca <put_wuliao_to_circular_second+0xd6>
		} else if (i == 2) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d111      	bne.n	800bcca <put_wuliao_to_circular_second+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bca6:	4b16      	ldr	r3, [pc, #88]	@ (800bd00 <put_wuliao_to_circular_second+0x10c>)
 800bca8:	edd3 7a00 	vldr	s15, [r3]
 800bcac:	4b15      	ldr	r3, [pc, #84]	@ (800bd04 <put_wuliao_to_circular_second+0x110>)
 800bcae:	ed93 7a00 	vldr	s14, [r3]
 800bcb2:	eef0 0a47 	vmov.f32	s1, s14
 800bcb6:	eeb0 0a67 	vmov.f32	s0, s15
 800bcba:	f001 fc99 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800bcbe:	f640 1142 	movw	r1, #2370	@ 0x942
 800bcc2:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bcc6:	f7ff fd91 	bl	800b7ec <put>
	for (int i = 0; i < 3; i++) {
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	3301      	adds	r3, #1
 800bcce:	607b      	str	r3, [r7, #4]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	dd94      	ble.n	800bc00 <put_wuliao_to_circular_second+0xc>
		}

	}
	Move_Action_Nopid_Forward_Ctrl(1000, 1850);
 800bcd6:	eddf 0a06 	vldr	s1, [pc, #24]	@ 800bcf0 <put_wuliao_to_circular_second+0xfc>
 800bcda:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800bd08 <put_wuliao_to_circular_second+0x114>
 800bcde:	f001 f9c7 	bl	800d070 <Move_Action_Nopid_Forward_Ctrl>
}
 800bce2:	bf00      	nop
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	24000460 	.word	0x24000460
 800bcf0:	44e74000 	.word	0x44e74000
 800bcf4:	446e8000 	.word	0x446e8000
 800bcf8:	44834000 	.word	0x44834000
 800bcfc:	44970000 	.word	0x44970000
 800bd00:	24000000 	.word	0x24000000
 800bd04:	24000004 	.word	0x24000004
 800bd08:	447a0000 	.word	0x447a0000

0800bd0c <Second_Run_Frist_Grab_Wuliao>:

/*************************第二次抓取***********************************************/
void Second_Run_Frist_Grab_Wuliao(void) {
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	af00      	add	r7, sp, #0
	static uint8_t Grab_count = 0;
	wuliao_falg = 0;
 800bd10:	4b2a      	ldr	r3, [pc, #168]	@ (800bdbc <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	601a      	str	r2, [r3, #0]
	while (Grab_count < 3) {
 800bd16:	e04a      	b.n	800bdae <Second_Run_Frist_Grab_Wuliao+0xa2>
		if (QR_data[3] == colour && wuliao_falg == 0) {
 800bd18:	4b29      	ldr	r3, [pc, #164]	@ (800bdc0 <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800bd1a:	68da      	ldr	r2, [r3, #12]
 800bd1c:	4b29      	ldr	r3, [pc, #164]	@ (800bdc4 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d112      	bne.n	800bd4a <Second_Run_Frist_Grab_Wuliao+0x3e>
 800bd24:	4b25      	ldr	r3, [pc, #148]	@ (800bdbc <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d10e      	bne.n	800bd4a <Second_Run_Frist_Grab_Wuliao+0x3e>
			catch_Frist(860, 2375);
 800bd2c:	f640 1147 	movw	r1, #2375	@ 0x947
 800bd30:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800bd34:	f7ff fc1e 	bl	800b574 <catch_Frist>
			wuliao_falg = 1;
 800bd38:	4b20      	ldr	r3, [pc, #128]	@ (800bdbc <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bd3e:	4b22      	ldr	r3, [pc, #136]	@ (800bdc8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	3301      	adds	r3, #1
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	4b20      	ldr	r3, [pc, #128]	@ (800bdc8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bd48:	701a      	strb	r2, [r3, #0]
		}
		if (QR_data[4] == colour && wuliao_falg == 1) {
 800bd4a:	4b1d      	ldr	r3, [pc, #116]	@ (800bdc0 <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800bd4c:	691a      	ldr	r2, [r3, #16]
 800bd4e:	4b1d      	ldr	r3, [pc, #116]	@ (800bdc4 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d112      	bne.n	800bd7c <Second_Run_Frist_Grab_Wuliao+0x70>
 800bd56:	4b19      	ldr	r3, [pc, #100]	@ (800bdbc <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d10e      	bne.n	800bd7c <Second_Run_Frist_Grab_Wuliao+0x70>
			catch_Frist(1910, 2370);
 800bd5e:	f640 1142 	movw	r1, #2370	@ 0x942
 800bd62:	f240 7076 	movw	r0, #1910	@ 0x776
 800bd66:	f7ff fc05 	bl	800b574 <catch_Frist>
			wuliao_falg = 2;
 800bd6a:	4b14      	ldr	r3, [pc, #80]	@ (800bdbc <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd6c:	2202      	movs	r2, #2
 800bd6e:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bd70:	4b15      	ldr	r3, [pc, #84]	@ (800bdc8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	3301      	adds	r3, #1
 800bd76:	b2da      	uxtb	r2, r3
 800bd78:	4b13      	ldr	r3, [pc, #76]	@ (800bdc8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bd7a:	701a      	strb	r2, [r3, #0]
		}
		if (QR_data[5] == colour && wuliao_falg == 2) {
 800bd7c:	4b10      	ldr	r3, [pc, #64]	@ (800bdc0 <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800bd7e:	695a      	ldr	r2, [r3, #20]
 800bd80:	4b10      	ldr	r3, [pc, #64]	@ (800bdc4 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d112      	bne.n	800bdae <Second_Run_Frist_Grab_Wuliao+0xa2>
 800bd88:	4b0c      	ldr	r3, [pc, #48]	@ (800bdbc <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2b02      	cmp	r3, #2
 800bd8e:	d10e      	bne.n	800bdae <Second_Run_Frist_Grab_Wuliao+0xa2>
			catch_Frist(2960, 2370);
 800bd90:	f640 1142 	movw	r1, #2370	@ 0x942
 800bd94:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bd98:	f7ff fbec 	bl	800b574 <catch_Frist>
			wuliao_falg = 0;
 800bd9c:	4b07      	ldr	r3, [pc, #28]	@ (800bdbc <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd9e:	2200      	movs	r2, #0
 800bda0:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bda2:	4b09      	ldr	r3, [pc, #36]	@ (800bdc8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	3301      	adds	r3, #1
 800bda8:	b2da      	uxtb	r2, r3
 800bdaa:	4b07      	ldr	r3, [pc, #28]	@ (800bdc8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bdac:	701a      	strb	r2, [r3, #0]
	while (Grab_count < 3) {
 800bdae:	4b06      	ldr	r3, [pc, #24]	@ (800bdc8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	d9b0      	bls.n	800bd18 <Second_Run_Frist_Grab_Wuliao+0xc>
		}

	}
}
 800bdb6:	bf00      	nop
 800bdb8:	bf00      	nop
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	24000480 	.word	0x24000480
 800bdc0:	24000460 	.word	0x24000460
 800bdc4:	2400047c 	.word	0x2400047c
 800bdc8:	24000b2c 	.word	0x24000b2c

0800bdcc <Second_Run_put_wuliao_to_Car_frist>:
void Second_Run_put_wuliao_to_Car_frist(void) {
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
	for (int i = 3; i < 6; i++) {
 800bdd2:	2303      	movs	r3, #3
 800bdd4:	607b      	str	r3, [r7, #4]
 800bdd6:	e067      	b.n	800bea8 <Second_Run_put_wuliao_to_Car_frist+0xdc>
		if (QR_data[i] == 1) {
 800bdd8:	4a37      	ldr	r2, [pc, #220]	@ (800beb8 <Second_Run_put_wuliao_to_Car_frist+0xec>)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d105      	bne.n	800bdf0 <Second_Run_put_wuliao_to_Car_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800bde4:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800bebc <Second_Run_put_wuliao_to_Car_frist+0xf0>
 800bde8:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800bec0 <Second_Run_put_wuliao_to_Car_frist+0xf4>
 800bdec:	f001 faa0 	bl	800d330 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 2) {
 800bdf0:	4a31      	ldr	r2, [pc, #196]	@ (800beb8 <Second_Run_put_wuliao_to_Car_frist+0xec>)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d105      	bne.n	800be08 <Second_Run_put_wuliao_to_Car_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800bdfc:	eddf 0a31 	vldr	s1, [pc, #196]	@ 800bec4 <Second_Run_put_wuliao_to_Car_frist+0xf8>
 800be00:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800bec0 <Second_Run_put_wuliao_to_Car_frist+0xf4>
 800be04:	f001 fa94 	bl	800d330 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800be08:	4a2b      	ldr	r2, [pc, #172]	@ (800beb8 <Second_Run_put_wuliao_to_Car_frist+0xec>)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be10:	2b03      	cmp	r3, #3
 800be12:	d105      	bne.n	800be20 <Second_Run_put_wuliao_to_Car_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800be14:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800bec8 <Second_Run_put_wuliao_to_Car_frist+0xfc>
 800be18:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800bec0 <Second_Run_put_wuliao_to_Car_frist+0xf4>
 800be1c:	f001 fa88 	bl	800d330 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 3) {
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b03      	cmp	r3, #3
 800be24:	d112      	bne.n	800be4c <Second_Run_put_wuliao_to_Car_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800be26:	4b29      	ldr	r3, [pc, #164]	@ (800becc <Second_Run_put_wuliao_to_Car_frist+0x100>)
 800be28:	edd3 7a00 	vldr	s15, [r3]
 800be2c:	4b28      	ldr	r3, [pc, #160]	@ (800bed0 <Second_Run_put_wuliao_to_Car_frist+0x104>)
 800be2e:	ed93 7a00 	vldr	s14, [r3]
 800be32:	eef0 0a47 	vmov.f32	s1, s14
 800be36:	eeb0 0a67 	vmov.f32	s0, s15
 800be3a:	f001 fbd9 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
			catch_Second(860, 2375);
 800be3e:	f640 1147 	movw	r1, #2375	@ 0x947
 800be42:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800be46:	f7ff fc02 	bl	800b64e <catch_Second>
 800be4a:	e02a      	b.n	800bea2 <Second_Run_put_wuliao_to_Car_frist+0xd6>

		} else if (i == 4) {
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b04      	cmp	r3, #4
 800be50:	d112      	bne.n	800be78 <Second_Run_put_wuliao_to_Car_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800be52:	4b1e      	ldr	r3, [pc, #120]	@ (800becc <Second_Run_put_wuliao_to_Car_frist+0x100>)
 800be54:	edd3 7a00 	vldr	s15, [r3]
 800be58:	4b1d      	ldr	r3, [pc, #116]	@ (800bed0 <Second_Run_put_wuliao_to_Car_frist+0x104>)
 800be5a:	ed93 7a00 	vldr	s14, [r3]
 800be5e:	eef0 0a47 	vmov.f32	s1, s14
 800be62:	eeb0 0a67 	vmov.f32	s0, s15
 800be66:	f001 fbc3 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
			catch_Second(1910, 2370);
 800be6a:	f640 1142 	movw	r1, #2370	@ 0x942
 800be6e:	f240 7076 	movw	r0, #1910	@ 0x776
 800be72:	f7ff fbec 	bl	800b64e <catch_Second>
 800be76:	e014      	b.n	800bea2 <Second_Run_put_wuliao_to_Car_frist+0xd6>
		} else if (i == 5) {
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b05      	cmp	r3, #5
 800be7c:	d111      	bne.n	800bea2 <Second_Run_put_wuliao_to_Car_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800be7e:	4b13      	ldr	r3, [pc, #76]	@ (800becc <Second_Run_put_wuliao_to_Car_frist+0x100>)
 800be80:	edd3 7a00 	vldr	s15, [r3]
 800be84:	4b12      	ldr	r3, [pc, #72]	@ (800bed0 <Second_Run_put_wuliao_to_Car_frist+0x104>)
 800be86:	ed93 7a00 	vldr	s14, [r3]
 800be8a:	eef0 0a47 	vmov.f32	s1, s14
 800be8e:	eeb0 0a67 	vmov.f32	s0, s15
 800be92:	f001 fbad 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
			catch_Second(2960, 2370);
 800be96:	f640 1142 	movw	r1, #2370	@ 0x942
 800be9a:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800be9e:	f7ff fbd6 	bl	800b64e <catch_Second>
	for (int i = 3; i < 6; i++) {
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	3301      	adds	r3, #1
 800bea6:	607b      	str	r3, [r7, #4]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b05      	cmp	r3, #5
 800beac:	dd94      	ble.n	800bdd8 <Second_Run_put_wuliao_to_Car_frist+0xc>
		}

	}
}
 800beae:	bf00      	nop
 800beb0:	bf00      	nop
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	24000460 	.word	0x24000460
 800bebc:	44960000 	.word	0x44960000
 800bec0:	44e74000 	.word	0x44e74000
 800bec4:	44834000 	.word	0x44834000
 800bec8:	445d4000 	.word	0x445d4000
 800becc:	24000000 	.word	0x24000000
 800bed0:	24000004 	.word	0x24000004

0800bed4 <Second_Run_put_wuliao_to_circular_frist>:

void Second_Run_put_wuliao_to_circular_frist(void) {
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0

	for (int i = 3; i < 6; i++) {
 800beda:	2303      	movs	r3, #3
 800bedc:	607b      	str	r3, [r7, #4]
 800bede:	e067      	b.n	800bfb0 <Second_Run_put_wuliao_to_circular_frist+0xdc>
		if (QR_data[i] == 1) {
 800bee0:	4a37      	ldr	r2, [pc, #220]	@ (800bfc0 <Second_Run_put_wuliao_to_circular_frist+0xec>)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d105      	bne.n	800bef8 <Second_Run_put_wuliao_to_circular_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(910, 1910);
 800beec:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800bfc4 <Second_Run_put_wuliao_to_circular_frist+0xf0>
 800bef0:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800bfc8 <Second_Run_put_wuliao_to_circular_frist+0xf4>
 800bef4:	f001 fa1c 	bl	800d330 <Move_Action_Nopid_Right_Ctrl>

		}
		if (QR_data[i] == 2) {
 800bef8:	4a31      	ldr	r2, [pc, #196]	@ (800bfc0 <Second_Run_put_wuliao_to_circular_frist+0xec>)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d105      	bne.n	800bf10 <Second_Run_put_wuliao_to_circular_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1060, 1910);
 800bf04:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 800bfc4 <Second_Run_put_wuliao_to_circular_frist+0xf0>
 800bf08:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 800bfcc <Second_Run_put_wuliao_to_circular_frist+0xf8>
 800bf0c:	f001 fa10 	bl	800d330 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800bf10:	4a2b      	ldr	r2, [pc, #172]	@ (800bfc0 <Second_Run_put_wuliao_to_circular_frist+0xec>)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf18:	2b03      	cmp	r3, #3
 800bf1a:	d105      	bne.n	800bf28 <Second_Run_put_wuliao_to_circular_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1185, 1910);
 800bf1c:	eddf 0a29 	vldr	s1, [pc, #164]	@ 800bfc4 <Second_Run_put_wuliao_to_circular_frist+0xf0>
 800bf20:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800bfd0 <Second_Run_put_wuliao_to_circular_frist+0xfc>
 800bf24:	f001 fa04 	bl	800d330 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 3) {
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b03      	cmp	r3, #3
 800bf2c:	d112      	bne.n	800bf54 <Second_Run_put_wuliao_to_circular_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bf2e:	4b29      	ldr	r3, [pc, #164]	@ (800bfd4 <Second_Run_put_wuliao_to_circular_frist+0x100>)
 800bf30:	edd3 7a00 	vldr	s15, [r3]
 800bf34:	4b28      	ldr	r3, [pc, #160]	@ (800bfd8 <Second_Run_put_wuliao_to_circular_frist+0x104>)
 800bf36:	ed93 7a00 	vldr	s14, [r3]
 800bf3a:	eef0 0a47 	vmov.f32	s1, s14
 800bf3e:	eeb0 0a67 	vmov.f32	s0, s15
 800bf42:	f001 fb55 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800bf46:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bf4a:	f640 0066 	movw	r0, #2150	@ 0x866
 800bf4e:	f7ff fc4d 	bl	800b7ec <put>
 800bf52:	e02a      	b.n	800bfaa <Second_Run_put_wuliao_to_circular_frist+0xd6>
		} else if (i == 4) {
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b04      	cmp	r3, #4
 800bf58:	d112      	bne.n	800bf80 <Second_Run_put_wuliao_to_circular_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bf5a:	4b1e      	ldr	r3, [pc, #120]	@ (800bfd4 <Second_Run_put_wuliao_to_circular_frist+0x100>)
 800bf5c:	edd3 7a00 	vldr	s15, [r3]
 800bf60:	4b1d      	ldr	r3, [pc, #116]	@ (800bfd8 <Second_Run_put_wuliao_to_circular_frist+0x104>)
 800bf62:	ed93 7a00 	vldr	s14, [r3]
 800bf66:	eef0 0a47 	vmov.f32	s1, s14
 800bf6a:	eeb0 0a67 	vmov.f32	s0, s15
 800bf6e:	f001 fb3f 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800bf72:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bf76:	f640 4085 	movw	r0, #3205	@ 0xc85
 800bf7a:	f7ff fc37 	bl	800b7ec <put>
 800bf7e:	e014      	b.n	800bfaa <Second_Run_put_wuliao_to_circular_frist+0xd6>
		} else if (i == 5) {
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b05      	cmp	r3, #5
 800bf84:	d111      	bne.n	800bfaa <Second_Run_put_wuliao_to_circular_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bf86:	4b13      	ldr	r3, [pc, #76]	@ (800bfd4 <Second_Run_put_wuliao_to_circular_frist+0x100>)
 800bf88:	edd3 7a00 	vldr	s15, [r3]
 800bf8c:	4b12      	ldr	r3, [pc, #72]	@ (800bfd8 <Second_Run_put_wuliao_to_circular_frist+0x104>)
 800bf8e:	ed93 7a00 	vldr	s14, [r3]
 800bf92:	eef0 0a47 	vmov.f32	s1, s14
 800bf96:	eeb0 0a67 	vmov.f32	s0, s15
 800bf9a:	f001 fb29 	bl	800d5f0 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800bf9e:	f640 1142 	movw	r1, #2370	@ 0x942
 800bfa2:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bfa6:	f7ff fc21 	bl	800b7ec <put>
	for (int i = 3; i < 6; i++) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	3301      	adds	r3, #1
 800bfae:	607b      	str	r3, [r7, #4]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2b05      	cmp	r3, #5
 800bfb4:	dd94      	ble.n	800bee0 <Second_Run_put_wuliao_to_circular_frist+0xc>
		}

	}
}
 800bfb6:	bf00      	nop
 800bfb8:	bf00      	nop
 800bfba:	3708      	adds	r7, #8
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	24000460 	.word	0x24000460
 800bfc4:	44eec000 	.word	0x44eec000
 800bfc8:	44638000 	.word	0x44638000
 800bfcc:	44848000 	.word	0x44848000
 800bfd0:	44942000 	.word	0x44942000
 800bfd4:	24000000 	.word	0x24000000
 800bfd8:	24000004 	.word	0x24000004

0800bfdc <Emm_V5_Pos_Control>:
 * @param    raF ：相位/绝对标志，false为相对运动，true为绝对值运动
 * @param    snF ：多机同步标志 ，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Pos_Control(uint8_t addr, uint8_t dir, uint16_t vel, uint8_t acc,
		uint32_t clk, bool raF, bool snF) {
 800bfdc:	b590      	push	{r4, r7, lr}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	4608      	mov	r0, r1
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	461a      	mov	r2, r3
 800bfea:	4623      	mov	r3, r4
 800bfec:	71fb      	strb	r3, [r7, #7]
 800bfee:	4603      	mov	r3, r0
 800bff0:	71bb      	strb	r3, [r7, #6]
 800bff2:	460b      	mov	r3, r1
 800bff4:	80bb      	strh	r3, [r7, #4]
 800bff6:	4613      	mov	r3, r2
 800bff8:	70fb      	strb	r3, [r7, #3]

	// 装载命令
	cmd[0] = addr;                      // 地址
 800bffa:	4a20      	ldr	r2, [pc, #128]	@ (800c07c <Emm_V5_Pos_Control+0xa0>)
 800bffc:	79fb      	ldrb	r3, [r7, #7]
 800bffe:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFD;                      // 功能码
 800c000:	4b1e      	ldr	r3, [pc, #120]	@ (800c07c <Emm_V5_Pos_Control+0xa0>)
 800c002:	22fd      	movs	r2, #253	@ 0xfd
 800c004:	705a      	strb	r2, [r3, #1]
	cmd[2] = dir;                       // 方向
 800c006:	4a1d      	ldr	r2, [pc, #116]	@ (800c07c <Emm_V5_Pos_Control+0xa0>)
 800c008:	79bb      	ldrb	r3, [r7, #6]
 800c00a:	7093      	strb	r3, [r2, #2]
	cmd[3] = (uint8_t) (vel >> 8);       // 速度(RPM)高8位字节
 800c00c:	88bb      	ldrh	r3, [r7, #4]
 800c00e:	0a1b      	lsrs	r3, r3, #8
 800c010:	b29b      	uxth	r3, r3
 800c012:	b2da      	uxtb	r2, r3
 800c014:	4b19      	ldr	r3, [pc, #100]	@ (800c07c <Emm_V5_Pos_Control+0xa0>)
 800c016:	70da      	strb	r2, [r3, #3]
	cmd[4] = (uint8_t) (vel >> 0);       // 速度(RPM)低8位字节
 800c018:	88bb      	ldrh	r3, [r7, #4]
 800c01a:	b2da      	uxtb	r2, r3
 800c01c:	4b17      	ldr	r3, [pc, #92]	@ (800c07c <Emm_V5_Pos_Control+0xa0>)
 800c01e:	711a      	strb	r2, [r3, #4]
	cmd[5] = acc;                       // 加速度，注意：0是直接启动
 800c020:	4a16      	ldr	r2, [pc, #88]	@ (800c07c <Emm_V5_Pos_Control+0xa0>)
 800c022:	78fb      	ldrb	r3, [r7, #3]
 800c024:	7153      	strb	r3, [r2, #5]
	cmd[6] = (uint8_t) (clk >> 24);      // 脉冲数(bit24 - bit31)
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	0e1b      	lsrs	r3, r3, #24
 800c02a:	b2da      	uxtb	r2, r3
 800c02c:	4b13      	ldr	r3, [pc, #76]	@ (800c07c <Emm_V5_Pos_Control+0xa0>)
 800c02e:	719a      	strb	r2, [r3, #6]
	cmd[7] = (uint8_t) (clk >> 16);      // 脉冲数(bit16 - bit23)
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	0c1b      	lsrs	r3, r3, #16
 800c034:	b2da      	uxtb	r2, r3
 800c036:	4b11      	ldr	r3, [pc, #68]	@ (800c07c <Emm_V5_Pos_Control+0xa0>)
 800c038:	71da      	strb	r2, [r3, #7]
	cmd[8] = (uint8_t) (clk >> 8);       // 脉冲数(bit8  - bit15)
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	0a1b      	lsrs	r3, r3, #8
 800c03e:	b2da      	uxtb	r2, r3
 800c040:	4b0e      	ldr	r3, [pc, #56]	@ (800c07c <Emm_V5_Pos_Control+0xa0>)
 800c042:	721a      	strb	r2, [r3, #8]
	cmd[9] = (uint8_t) (clk >> 0);       // 脉冲数(bit0  - bit7 )
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	b2da      	uxtb	r2, r3
 800c048:	4b0c      	ldr	r3, [pc, #48]	@ (800c07c <Emm_V5_Pos_Control+0xa0>)
 800c04a:	725a      	strb	r2, [r3, #9]
	cmd[10] = raF;                       // 相位/绝对标志，false为相对运动，true为绝对值运动
 800c04c:	7f3a      	ldrb	r2, [r7, #28]
 800c04e:	4b0b      	ldr	r3, [pc, #44]	@ (800c07c <Emm_V5_Pos_Control+0xa0>)
 800c050:	729a      	strb	r2, [r3, #10]
	cmd[11] = snF;                       // 多机同步运动标志，false为不启用，true为启用
 800c052:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c056:	4b09      	ldr	r3, [pc, #36]	@ (800c07c <Emm_V5_Pos_Control+0xa0>)
 800c058:	72da      	strb	r2, [r3, #11]
	cmd[12] = 0x6B;                      // 校验字节
 800c05a:	4b08      	ldr	r3, [pc, #32]	@ (800c07c <Emm_V5_Pos_Control+0xa0>)
 800c05c:	226b      	movs	r2, #107	@ 0x6b
 800c05e:	731a      	strb	r2, [r3, #12]

	// 发送命令
	FDCAN_Send_Msg(cmd, 13);
 800c060:	210d      	movs	r1, #13
 800c062:	4806      	ldr	r0, [pc, #24]	@ (800c07c <Emm_V5_Pos_Control+0xa0>)
 800c064:	f7f4 fe18 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(10);
 800c068:	200a      	movs	r0, #10
 800c06a:	f7f6 fe5f 	bl	8002d2c <HAL_Delay>
	Emm_mode = 1;
 800c06e:	4b04      	ldr	r3, [pc, #16]	@ (800c080 <Emm_V5_Pos_Control+0xa4>)
 800c070:	2201      	movs	r2, #1
 800c072:	701a      	strb	r2, [r3, #0]
}
 800c074:	bf00      	nop
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd90      	pop	{r4, r7, pc}
 800c07c:	24000b30 	.word	0x24000b30
 800c080:	2400029c 	.word	0x2400029c

0800c084 <Emm_V5_Stop_Now>:
 * @brief    立即停止（所有控制模式都通用）
 * @param    addr  ：电机地址
 * @param    snF   ：多机同步标志，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Stop_Now(uint8_t addr, bool snF) {
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	4603      	mov	r3, r0
 800c08c:	460a      	mov	r2, r1
 800c08e:	71fb      	strb	r3, [r7, #7]
 800c090:	4613      	mov	r3, r2
 800c092:	71bb      	strb	r3, [r7, #6]

	// 装载命令
	cmd[0] = addr;                       // 地址
 800c094:	4a0b      	ldr	r2, [pc, #44]	@ (800c0c4 <Emm_V5_Stop_Now+0x40>)
 800c096:	79fb      	ldrb	r3, [r7, #7]
 800c098:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFE;                       // 功能码
 800c09a:	4b0a      	ldr	r3, [pc, #40]	@ (800c0c4 <Emm_V5_Stop_Now+0x40>)
 800c09c:	22fe      	movs	r2, #254	@ 0xfe
 800c09e:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x98;                       // 辅助码
 800c0a0:	4b08      	ldr	r3, [pc, #32]	@ (800c0c4 <Emm_V5_Stop_Now+0x40>)
 800c0a2:	2298      	movs	r2, #152	@ 0x98
 800c0a4:	709a      	strb	r2, [r3, #2]
	cmd[3] = snF;                        // 多机同步运动标志
 800c0a6:	79ba      	ldrb	r2, [r7, #6]
 800c0a8:	4b06      	ldr	r3, [pc, #24]	@ (800c0c4 <Emm_V5_Stop_Now+0x40>)
 800c0aa:	70da      	strb	r2, [r3, #3]
	cmd[4] = 0x6B;                       // 校验字节
 800c0ac:	4b05      	ldr	r3, [pc, #20]	@ (800c0c4 <Emm_V5_Stop_Now+0x40>)
 800c0ae:	226b      	movs	r2, #107	@ 0x6b
 800c0b0:	711a      	strb	r2, [r3, #4]

	// 发送命令
	FDCAN_Send_Msg(cmd, 5);
 800c0b2:	2105      	movs	r1, #5
 800c0b4:	4803      	ldr	r0, [pc, #12]	@ (800c0c4 <Emm_V5_Stop_Now+0x40>)
 800c0b6:	f7f4 fdef 	bl	8000c98 <FDCAN_Send_Msg>
}
 800c0ba:	bf00      	nop
 800c0bc:	3708      	adds	r7, #8
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	24000b30 	.word	0x24000b30

0800c0c8 <Emm_V5_Synchronous_motion>:
/**
 * @brief    多机同步运动
 * @param    addr  ：电机地址
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Synchronous_motion(void) {
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	af00      	add	r7, sp, #0

	// 装载命令
	cmd[0] = 0x00;                       // 地址
 800c0cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c0f8 <Emm_V5_Synchronous_motion+0x30>)
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0xFF;                       // 功能码
 800c0d2:	4b09      	ldr	r3, [pc, #36]	@ (800c0f8 <Emm_V5_Synchronous_motion+0x30>)
 800c0d4:	22ff      	movs	r2, #255	@ 0xff
 800c0d6:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x66;                       // 辅助码
 800c0d8:	4b07      	ldr	r3, [pc, #28]	@ (800c0f8 <Emm_V5_Synchronous_motion+0x30>)
 800c0da:	2266      	movs	r2, #102	@ 0x66
 800c0dc:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6B;                       // 校验字节
 800c0de:	4b06      	ldr	r3, [pc, #24]	@ (800c0f8 <Emm_V5_Synchronous_motion+0x30>)
 800c0e0:	226b      	movs	r2, #107	@ 0x6b
 800c0e2:	70da      	strb	r2, [r3, #3]

	// 发送命令
	FDCAN_Send_Msg(cmd, 4);
 800c0e4:	2104      	movs	r1, #4
 800c0e6:	4804      	ldr	r0, [pc, #16]	@ (800c0f8 <Emm_V5_Synchronous_motion+0x30>)
 800c0e8:	f7f4 fdd6 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(5);
 800c0ec:	2005      	movs	r0, #5
 800c0ee:	f7f6 fe1d 	bl	8002d2c <HAL_Delay>
}
 800c0f2:	bf00      	nop
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	24000b30 	.word	0x24000b30

0800c0fc <limit>:
float A_out;
float TX_X_out;
float TX_Y_out;

// 输出限幅
float limit(float x, float min, float max) {
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
 800c102:	ed87 0a03 	vstr	s0, [r7, #12]
 800c106:	edc7 0a02 	vstr	s1, [r7, #8]
 800c10a:	ed87 1a01 	vstr	s2, [r7, #4]
	x = (x > max) ? max : ((x < min) ? min : x);
 800c10e:	ed97 7a03 	vldr	s14, [r7, #12]
 800c112:	edd7 7a01 	vldr	s15, [r7, #4]
 800c116:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c11e:	dd01      	ble.n	800c124 <limit+0x28>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	e00b      	b.n	800c13c <limit+0x40>
 800c124:	ed97 7a03 	vldr	s14, [r7, #12]
 800c128:	edd7 7a02 	vldr	s15, [r7, #8]
 800c12c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c134:	d501      	bpl.n	800c13a <limit+0x3e>
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	e000      	b.n	800c13c <limit+0x40>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	60fb      	str	r3, [r7, #12]
	return x;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	ee07 3a90 	vmov	s15, r3
}
 800c144:	eeb0 0a67 	vmov.f32	s0, s15
 800c148:	3714      	adds	r7, #20
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
	...

0800c154 <PID_Init>:
		return in;
	}
}

//	初始化PID结构体
void PID_Init(void) {
 800c154:	b480      	push	{r7}
 800c156:	af00      	add	r7, sp, #0
	//======================X=====================//   20   60
	XPID.P = 20;    //0.57    0  0.1
 800c158:	4b69      	ldr	r3, [pc, #420]	@ (800c300 <PID_Init+0x1ac>)
 800c15a:	4a6a      	ldr	r2, [pc, #424]	@ (800c304 <PID_Init+0x1b0>)
 800c15c:	601a      	str	r2, [r3, #0]
	XPID.I = 0;
 800c15e:	4b68      	ldr	r3, [pc, #416]	@ (800c300 <PID_Init+0x1ac>)
 800c160:	f04f 0200 	mov.w	r2, #0
 800c164:	609a      	str	r2, [r3, #8]
	XPID.D = 60;
 800c166:	4b66      	ldr	r3, [pc, #408]	@ (800c300 <PID_Init+0x1ac>)
 800c168:	4a67      	ldr	r2, [pc, #412]	@ (800c308 <PID_Init+0x1b4>)
 800c16a:	615a      	str	r2, [r3, #20]

	XPID.I_LIMIT = 100.0;
 800c16c:	4b64      	ldr	r3, [pc, #400]	@ (800c300 <PID_Init+0x1ac>)
 800c16e:	4a67      	ldr	r2, [pc, #412]	@ (800c30c <PID_Init+0x1b8>)
 800c170:	611a      	str	r2, [r3, #16]
	XPID.OUT_LIMIT = 100.0;
 800c172:	4b63      	ldr	r3, [pc, #396]	@ (800c300 <PID_Init+0x1ac>)
 800c174:	4a65      	ldr	r2, [pc, #404]	@ (800c30c <PID_Init+0x1b8>)
 800c176:	621a      	str	r2, [r3, #32]

	XPID.P_OUT = 0.0;
 800c178:	4b61      	ldr	r3, [pc, #388]	@ (800c300 <PID_Init+0x1ac>)
 800c17a:	f04f 0200 	mov.w	r2, #0
 800c17e:	605a      	str	r2, [r3, #4]
	XPID.I_OUT = 0.0;
 800c180:	4b5f      	ldr	r3, [pc, #380]	@ (800c300 <PID_Init+0x1ac>)
 800c182:	f04f 0200 	mov.w	r2, #0
 800c186:	60da      	str	r2, [r3, #12]
	XPID.D_OUT = 0.0;
 800c188:	4b5d      	ldr	r3, [pc, #372]	@ (800c300 <PID_Init+0x1ac>)
 800c18a:	f04f 0200 	mov.w	r2, #0
 800c18e:	619a      	str	r2, [r3, #24]

	XPID.OUT = 0.0;
 800c190:	4b5b      	ldr	r3, [pc, #364]	@ (800c300 <PID_Init+0x1ac>)
 800c192:	f04f 0200 	mov.w	r2, #0
 800c196:	61da      	str	r2, [r3, #28]

	XPID.err = 0.0;
 800c198:	4b59      	ldr	r3, [pc, #356]	@ (800c300 <PID_Init+0x1ac>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	849a      	strh	r2, [r3, #36]	@ 0x24
	XPID.err_err = 0.0;
 800c19e:	4b58      	ldr	r3, [pc, #352]	@ (800c300 <PID_Init+0x1ac>)
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	84da      	strh	r2, [r3, #38]	@ 0x26
	XPID.err_old = 0.0;
 800c1a4:	4b56      	ldr	r3, [pc, #344]	@ (800c300 <PID_Init+0x1ac>)
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	851a      	strh	r2, [r3, #40]	@ 0x28

	//========= =============Y=====================//
	YPID.P = 20;    //0.89                     //0.8 0 0.01
 800c1aa:	4b59      	ldr	r3, [pc, #356]	@ (800c310 <PID_Init+0x1bc>)
 800c1ac:	4a55      	ldr	r2, [pc, #340]	@ (800c304 <PID_Init+0x1b0>)
 800c1ae:	601a      	str	r2, [r3, #0]
	YPID.I = 0;
 800c1b0:	4b57      	ldr	r3, [pc, #348]	@ (800c310 <PID_Init+0x1bc>)
 800c1b2:	f04f 0200 	mov.w	r2, #0
 800c1b6:	609a      	str	r2, [r3, #8]
	YPID.D = 60;    //60
 800c1b8:	4b55      	ldr	r3, [pc, #340]	@ (800c310 <PID_Init+0x1bc>)
 800c1ba:	4a53      	ldr	r2, [pc, #332]	@ (800c308 <PID_Init+0x1b4>)
 800c1bc:	615a      	str	r2, [r3, #20]
	YPID.I_LIMIT = 100.0;
 800c1be:	4b54      	ldr	r3, [pc, #336]	@ (800c310 <PID_Init+0x1bc>)
 800c1c0:	4a52      	ldr	r2, [pc, #328]	@ (800c30c <PID_Init+0x1b8>)
 800c1c2:	611a      	str	r2, [r3, #16]
	YPID.OUT_LIMIT = 100.0;
 800c1c4:	4b52      	ldr	r3, [pc, #328]	@ (800c310 <PID_Init+0x1bc>)
 800c1c6:	4a51      	ldr	r2, [pc, #324]	@ (800c30c <PID_Init+0x1b8>)
 800c1c8:	621a      	str	r2, [r3, #32]

	YPID.P_OUT = 0.0;
 800c1ca:	4b51      	ldr	r3, [pc, #324]	@ (800c310 <PID_Init+0x1bc>)
 800c1cc:	f04f 0200 	mov.w	r2, #0
 800c1d0:	605a      	str	r2, [r3, #4]
	YPID.I_OUT = 0.0;
 800c1d2:	4b4f      	ldr	r3, [pc, #316]	@ (800c310 <PID_Init+0x1bc>)
 800c1d4:	f04f 0200 	mov.w	r2, #0
 800c1d8:	60da      	str	r2, [r3, #12]
	YPID.D_OUT = 0.0;
 800c1da:	4b4d      	ldr	r3, [pc, #308]	@ (800c310 <PID_Init+0x1bc>)
 800c1dc:	f04f 0200 	mov.w	r2, #0
 800c1e0:	619a      	str	r2, [r3, #24]

	YPID.OUT = 0.0;
 800c1e2:	4b4b      	ldr	r3, [pc, #300]	@ (800c310 <PID_Init+0x1bc>)
 800c1e4:	f04f 0200 	mov.w	r2, #0
 800c1e8:	61da      	str	r2, [r3, #28]

	YPID.err = 0.0;
 800c1ea:	4b49      	ldr	r3, [pc, #292]	@ (800c310 <PID_Init+0x1bc>)
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	849a      	strh	r2, [r3, #36]	@ 0x24
	YPID.err_err = 0.0;
 800c1f0:	4b47      	ldr	r3, [pc, #284]	@ (800c310 <PID_Init+0x1bc>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	84da      	strh	r2, [r3, #38]	@ 0x26
	YPID.err_old = 0.0;
 800c1f6:	4b46      	ldr	r3, [pc, #280]	@ (800c310 <PID_Init+0x1bc>)
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================A=====================//
	APID.P = 0.9;
 800c1fc:	4b45      	ldr	r3, [pc, #276]	@ (800c314 <PID_Init+0x1c0>)
 800c1fe:	4a46      	ldr	r2, [pc, #280]	@ (800c318 <PID_Init+0x1c4>)
 800c200:	601a      	str	r2, [r3, #0]
	APID.I = 0.0;
 800c202:	4b44      	ldr	r3, [pc, #272]	@ (800c314 <PID_Init+0x1c0>)
 800c204:	f04f 0200 	mov.w	r2, #0
 800c208:	609a      	str	r2, [r3, #8]
	APID.D = 0.0;
 800c20a:	4b42      	ldr	r3, [pc, #264]	@ (800c314 <PID_Init+0x1c0>)
 800c20c:	f04f 0200 	mov.w	r2, #0
 800c210:	615a      	str	r2, [r3, #20]

	APID.I_LIMIT = 1000.0;
 800c212:	4b40      	ldr	r3, [pc, #256]	@ (800c314 <PID_Init+0x1c0>)
 800c214:	4a41      	ldr	r2, [pc, #260]	@ (800c31c <PID_Init+0x1c8>)
 800c216:	611a      	str	r2, [r3, #16]
	APID.OUT_LIMIT = 2350.0;
 800c218:	4b3e      	ldr	r3, [pc, #248]	@ (800c314 <PID_Init+0x1c0>)
 800c21a:	4a41      	ldr	r2, [pc, #260]	@ (800c320 <PID_Init+0x1cc>)
 800c21c:	621a      	str	r2, [r3, #32]

	APID.P_OUT = 0.0;
 800c21e:	4b3d      	ldr	r3, [pc, #244]	@ (800c314 <PID_Init+0x1c0>)
 800c220:	f04f 0200 	mov.w	r2, #0
 800c224:	605a      	str	r2, [r3, #4]
	APID.I_OUT = 0.0;
 800c226:	4b3b      	ldr	r3, [pc, #236]	@ (800c314 <PID_Init+0x1c0>)
 800c228:	f04f 0200 	mov.w	r2, #0
 800c22c:	60da      	str	r2, [r3, #12]
	APID.D_OUT = 0.0;
 800c22e:	4b39      	ldr	r3, [pc, #228]	@ (800c314 <PID_Init+0x1c0>)
 800c230:	f04f 0200 	mov.w	r2, #0
 800c234:	619a      	str	r2, [r3, #24]

	APID.OUT = 0.0;
 800c236:	4b37      	ldr	r3, [pc, #220]	@ (800c314 <PID_Init+0x1c0>)
 800c238:	f04f 0200 	mov.w	r2, #0
 800c23c:	61da      	str	r2, [r3, #28]

	APID.err = 0.0;
 800c23e:	4b35      	ldr	r3, [pc, #212]	@ (800c314 <PID_Init+0x1c0>)
 800c240:	2200      	movs	r2, #0
 800c242:	849a      	strh	r2, [r3, #36]	@ 0x24
	APID.err_err = 0.0;
 800c244:	4b33      	ldr	r3, [pc, #204]	@ (800c314 <PID_Init+0x1c0>)
 800c246:	2200      	movs	r2, #0
 800c248:	84da      	strh	r2, [r3, #38]	@ 0x26
	APID.err_old = 0.0;
 800c24a:	4b32      	ldr	r3, [pc, #200]	@ (800c314 <PID_Init+0x1c0>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	851a      	strh	r2, [r3, #40]	@ 0x28
	//======================TX=====================//
	TXPID.P = 1;
 800c250:	4b34      	ldr	r3, [pc, #208]	@ (800c324 <PID_Init+0x1d0>)
 800c252:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c256:	601a      	str	r2, [r3, #0]
	TXPID.I = 0;
 800c258:	4b32      	ldr	r3, [pc, #200]	@ (800c324 <PID_Init+0x1d0>)
 800c25a:	f04f 0200 	mov.w	r2, #0
 800c25e:	609a      	str	r2, [r3, #8]
	TXPID.D = 0.3;
 800c260:	4b30      	ldr	r3, [pc, #192]	@ (800c324 <PID_Init+0x1d0>)
 800c262:	4a31      	ldr	r2, [pc, #196]	@ (800c328 <PID_Init+0x1d4>)
 800c264:	615a      	str	r2, [r3, #20]

	TXPID.I_LIMIT = 100.0;
 800c266:	4b2f      	ldr	r3, [pc, #188]	@ (800c324 <PID_Init+0x1d0>)
 800c268:	4a28      	ldr	r2, [pc, #160]	@ (800c30c <PID_Init+0x1b8>)
 800c26a:	611a      	str	r2, [r3, #16]
	TXPID.OUT_LIMIT = 300.0;
 800c26c:	4b2d      	ldr	r3, [pc, #180]	@ (800c324 <PID_Init+0x1d0>)
 800c26e:	4a2f      	ldr	r2, [pc, #188]	@ (800c32c <PID_Init+0x1d8>)
 800c270:	621a      	str	r2, [r3, #32]

	TXPID.P_OUT = 0.0;
 800c272:	4b2c      	ldr	r3, [pc, #176]	@ (800c324 <PID_Init+0x1d0>)
 800c274:	f04f 0200 	mov.w	r2, #0
 800c278:	605a      	str	r2, [r3, #4]
	TXPID.I_OUT = 0.0;
 800c27a:	4b2a      	ldr	r3, [pc, #168]	@ (800c324 <PID_Init+0x1d0>)
 800c27c:	f04f 0200 	mov.w	r2, #0
 800c280:	60da      	str	r2, [r3, #12]
	TXPID.D_OUT = 0.0;
 800c282:	4b28      	ldr	r3, [pc, #160]	@ (800c324 <PID_Init+0x1d0>)
 800c284:	f04f 0200 	mov.w	r2, #0
 800c288:	619a      	str	r2, [r3, #24]

	TXPID.OUT = 0.0;
 800c28a:	4b26      	ldr	r3, [pc, #152]	@ (800c324 <PID_Init+0x1d0>)
 800c28c:	f04f 0200 	mov.w	r2, #0
 800c290:	61da      	str	r2, [r3, #28]

	TXPID.err = 0.0;
 800c292:	4b24      	ldr	r3, [pc, #144]	@ (800c324 <PID_Init+0x1d0>)
 800c294:	2200      	movs	r2, #0
 800c296:	849a      	strh	r2, [r3, #36]	@ 0x24
	TXPID.err_err = 0.0;
 800c298:	4b22      	ldr	r3, [pc, #136]	@ (800c324 <PID_Init+0x1d0>)
 800c29a:	2200      	movs	r2, #0
 800c29c:	84da      	strh	r2, [r3, #38]	@ 0x26
	TXPID.err_old = 0.0;
 800c29e:	4b21      	ldr	r3, [pc, #132]	@ (800c324 <PID_Init+0x1d0>)
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================TY=====================//
	TYPID.P = -1;
 800c2a4:	4b22      	ldr	r3, [pc, #136]	@ (800c330 <PID_Init+0x1dc>)
 800c2a6:	4a23      	ldr	r2, [pc, #140]	@ (800c334 <PID_Init+0x1e0>)
 800c2a8:	601a      	str	r2, [r3, #0]
	TYPID.I = -0;      //0.9  0.01   0.3
 800c2aa:	4b21      	ldr	r3, [pc, #132]	@ (800c330 <PID_Init+0x1dc>)
 800c2ac:	f04f 0200 	mov.w	r2, #0
 800c2b0:	609a      	str	r2, [r3, #8]
	//0.9 0 0.2
	TYPID.D = -0.3;
 800c2b2:	4b1f      	ldr	r3, [pc, #124]	@ (800c330 <PID_Init+0x1dc>)
 800c2b4:	4a20      	ldr	r2, [pc, #128]	@ (800c338 <PID_Init+0x1e4>)
 800c2b6:	615a      	str	r2, [r3, #20]

	TYPID.I_LIMIT = 100.0;
 800c2b8:	4b1d      	ldr	r3, [pc, #116]	@ (800c330 <PID_Init+0x1dc>)
 800c2ba:	4a14      	ldr	r2, [pc, #80]	@ (800c30c <PID_Init+0x1b8>)
 800c2bc:	611a      	str	r2, [r3, #16]
	TYPID.OUT_LIMIT = 300.0;
 800c2be:	4b1c      	ldr	r3, [pc, #112]	@ (800c330 <PID_Init+0x1dc>)
 800c2c0:	4a1a      	ldr	r2, [pc, #104]	@ (800c32c <PID_Init+0x1d8>)
 800c2c2:	621a      	str	r2, [r3, #32]

	TYPID.P_OUT = 0.0;
 800c2c4:	4b1a      	ldr	r3, [pc, #104]	@ (800c330 <PID_Init+0x1dc>)
 800c2c6:	f04f 0200 	mov.w	r2, #0
 800c2ca:	605a      	str	r2, [r3, #4]
	TYPID.I_OUT = 0.0;
 800c2cc:	4b18      	ldr	r3, [pc, #96]	@ (800c330 <PID_Init+0x1dc>)
 800c2ce:	f04f 0200 	mov.w	r2, #0
 800c2d2:	60da      	str	r2, [r3, #12]
	TYPID.D_OUT = 0.0;
 800c2d4:	4b16      	ldr	r3, [pc, #88]	@ (800c330 <PID_Init+0x1dc>)
 800c2d6:	f04f 0200 	mov.w	r2, #0
 800c2da:	619a      	str	r2, [r3, #24]

	TYPID.OUT = 0.0;
 800c2dc:	4b14      	ldr	r3, [pc, #80]	@ (800c330 <PID_Init+0x1dc>)
 800c2de:	f04f 0200 	mov.w	r2, #0
 800c2e2:	61da      	str	r2, [r3, #28]

	TYPID.err = 0.0;
 800c2e4:	4b12      	ldr	r3, [pc, #72]	@ (800c330 <PID_Init+0x1dc>)
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	849a      	strh	r2, [r3, #36]	@ 0x24
	TYPID.err_err = 0.0;
 800c2ea:	4b11      	ldr	r3, [pc, #68]	@ (800c330 <PID_Init+0x1dc>)
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	84da      	strh	r2, [r3, #38]	@ 0x26
	TYPID.err_old = 0.0;
 800c2f0:	4b0f      	ldr	r3, [pc, #60]	@ (800c330 <PID_Init+0x1dc>)
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800c2f6:	bf00      	nop
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr
 800c300:	24000b48 	.word	0x24000b48
 800c304:	41a00000 	.word	0x41a00000
 800c308:	42700000 	.word	0x42700000
 800c30c:	42c80000 	.word	0x42c80000
 800c310:	24000b74 	.word	0x24000b74
 800c314:	24000ba0 	.word	0x24000ba0
 800c318:	3f666666 	.word	0x3f666666
 800c31c:	447a0000 	.word	0x447a0000
 800c320:	4512e000 	.word	0x4512e000
 800c324:	24000bcc 	.word	0x24000bcc
 800c328:	3e99999a 	.word	0x3e99999a
 800c32c:	43960000 	.word	0x43960000
 800c330:	24000bf8 	.word	0x24000bf8
 800c334:	bf800000 	.word	0xbf800000
 800c338:	be99999a 	.word	0xbe99999a

0800c33c <Tx_X_Ctrl>:
	PID->err_old = PID->err;

	return PID->OUT;
}
/* TX的X轴调整 */
short Tx_X_Ctrl(_PID *PID, float goal) {
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Tx_NOW - goal;
 800c348:	4b4e      	ldr	r3, [pc, #312]	@ (800c484 <Tx_X_Ctrl+0x148>)
 800c34a:	ed93 7a00 	vldr	s14, [r3]
 800c34e:	edd7 7a00 	vldr	s15, [r7]
 800c352:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c35a:	ee17 3a90 	vmov	r3, s15
 800c35e:	b21a      	sxth	r2, r3
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c36a:	b29a      	uxth	r2, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800c372:	b29b      	uxth	r3, r3
 800c374:	1ad3      	subs	r3, r2, r3
 800c376:	b29b      	uxth	r3, r3
 800c378:	b21a      	sxth	r2, r3
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	ed93 7a00 	vldr	s14, [r3]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c38a:	ee07 3a90 	vmov	s15, r3
 800c38e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c392:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	ed93 7a03 	vldr	s14, [r3, #12]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	edd3 6a02 	vldr	s13, [r3, #8]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c3ae:	ee07 3a90 	vmov	s15, r3
 800c3b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c3ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	ed93 7a05 	vldr	s14, [r3, #20]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c3d0:	ee07 3a90 	vmov	s15, r3
 800c3d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	ed93 7a03 	vldr	s14, [r3, #12]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	edd3 7a04 	vldr	s15, [r3, #16]
 800c3ee:	eef1 7a67 	vneg.f32	s15, s15
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	edd3 6a04 	vldr	s13, [r3, #16]
 800c3f8:	eeb0 1a66 	vmov.f32	s2, s13
 800c3fc:	eef0 0a67 	vmov.f32	s1, s15
 800c400:	eeb0 0a47 	vmov.f32	s0, s14
 800c404:	f7ff fe7a 	bl	800c0fc <limit>
 800c408:	eef0 7a40 	vmov.f32	s15, s0
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	ed93 7a01 	vldr	s14, [r3, #4]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	edd3 7a03 	vldr	s15, [r3, #12]
 800c41e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	edd3 7a06 	vldr	s15, [r3, #24]
 800c428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	ed93 7a07 	vldr	s14, [r3, #28]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	edd3 7a08 	vldr	s15, [r3, #32]
 800c43e:	eef1 7a67 	vneg.f32	s15, s15
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	edd3 6a08 	vldr	s13, [r3, #32]
 800c448:	eeb0 1a66 	vmov.f32	s2, s13
 800c44c:	eef0 0a67 	vmov.f32	s1, s15
 800c450:	eeb0 0a47 	vmov.f32	s0, s14
 800c454:	f7ff fe52 	bl	800c0fc <limit>
 800c458:	eef0 7a40 	vmov.f32	s15, s0
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c476:	ee17 3a90 	vmov	r3, s15
 800c47a:	b21b      	sxth	r3, r3
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	24000454 	.word	0x24000454

0800c488 <Tx_Y_Ctrl>:

/* TX的Y轴调整 */
short Tx_Y_Ctrl(_PID *PID, float goal) {
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Ty_NOW - goal;
 800c494:	4b4e      	ldr	r3, [pc, #312]	@ (800c5d0 <Tx_Y_Ctrl+0x148>)
 800c496:	ed93 7a00 	vldr	s14, [r3]
 800c49a:	edd7 7a00 	vldr	s15, [r7]
 800c49e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4a6:	ee17 3a90 	vmov	r3, s15
 800c4aa:	b21a      	sxth	r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	b21a      	sxth	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	ed93 7a00 	vldr	s14, [r3]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c4d6:	ee07 3a90 	vmov	s15, r3
 800c4da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	ed93 7a03 	vldr	s14, [r3, #12]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	edd3 6a02 	vldr	s13, [r3, #8]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c4fa:	ee07 3a90 	vmov	s15, r3
 800c4fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	ed93 7a05 	vldr	s14, [r3, #20]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c51c:	ee07 3a90 	vmov	s15, r3
 800c520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c524:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	ed93 7a03 	vldr	s14, [r3, #12]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	edd3 7a04 	vldr	s15, [r3, #16]
 800c53a:	eef1 7a67 	vneg.f32	s15, s15
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	edd3 6a04 	vldr	s13, [r3, #16]
 800c544:	eeb0 1a66 	vmov.f32	s2, s13
 800c548:	eef0 0a67 	vmov.f32	s1, s15
 800c54c:	eeb0 0a47 	vmov.f32	s0, s14
 800c550:	f7ff fdd4 	bl	800c0fc <limit>
 800c554:	eef0 7a40 	vmov.f32	s15, s0
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	ed93 7a01 	vldr	s14, [r3, #4]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	edd3 7a03 	vldr	s15, [r3, #12]
 800c56a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	edd3 7a06 	vldr	s15, [r3, #24]
 800c574:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	ed93 7a07 	vldr	s14, [r3, #28]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	edd3 7a08 	vldr	s15, [r3, #32]
 800c58a:	eef1 7a67 	vneg.f32	s15, s15
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	edd3 6a08 	vldr	s13, [r3, #32]
 800c594:	eeb0 1a66 	vmov.f32	s2, s13
 800c598:	eef0 0a67 	vmov.f32	s1, s15
 800c59c:	eeb0 0a47 	vmov.f32	s0, s14
 800c5a0:	f7ff fdac 	bl	800c0fc <limit>
 800c5a4:	eef0 7a40 	vmov.f32	s15, s0
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	edd3 7a07 	vldr	s15, [r3, #28]
 800c5be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c5c2:	ee17 3a90 	vmov	r3, s15
 800c5c6:	b21b      	sxth	r3, r3
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3708      	adds	r7, #8
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	24000458 	.word	0x24000458

0800c5d4 <GetRxFlag>:



int time5_jiancha = 0;

uint8_t GetRxFlag(void) {
 800c5d4:	b480      	push	{r7}
 800c5d6:	af00      	add	r7, sp, #0
	if (RxFlag == 1) {
 800c5d8:	4b07      	ldr	r3, [pc, #28]	@ (800c5f8 <GetRxFlag+0x24>)
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d104      	bne.n	800c5ea <GetRxFlag+0x16>
		RxFlag = 0;
 800c5e0:	4b05      	ldr	r3, [pc, #20]	@ (800c5f8 <GetRxFlag+0x24>)
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	701a      	strb	r2, [r3, #0]
		return 1;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e000      	b.n	800c5ec <GetRxFlag+0x18>
	}
	return 0;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop
 800c5f8:	2400029d 	.word	0x2400029d

0800c5fc <Move_Line>:
// 		;
// //	RxFlag = 0;·
// 	HAL_Delay(30);
// }

bool Move_Line(u16 speed, u8 acc, u32 length) {
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af04      	add	r7, sp, #16
 800c602:	4603      	mov	r3, r0
 800c604:	603a      	str	r2, [r7, #0]
 800c606:	80fb      	strh	r3, [r7, #6]
 800c608:	460b      	mov	r3, r1
 800c60a:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if(Choke_Flag == true)
 800c60c:	4b24      	ldr	r3, [pc, #144]	@ (800c6a0 <Move_Line+0xa4>)
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d001      	beq.n	800c618 <Move_Line+0x1c>
		return  false;
 800c614:	2300      	movs	r3, #0
 800c616:	e03f      	b.n	800c698 <Move_Line+0x9c>
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c618:	4b22      	ldr	r3, [pc, #136]	@ (800c6a4 <Move_Line+0xa8>)
 800c61a:	2201      	movs	r2, #1
 800c61c:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c61e:	7979      	ldrb	r1, [r7, #5]
 800c620:	88fa      	ldrh	r2, [r7, #6]
 800c622:	2301      	movs	r3, #1
 800c624:	9302      	str	r3, [sp, #8]
 800c626:	2300      	movs	r3, #0
 800c628:	9301      	str	r3, [sp, #4]
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	9300      	str	r3, [sp, #0]
 800c62e:	460b      	mov	r3, r1
 800c630:	2100      	movs	r1, #0
 800c632:	2001      	movs	r0, #1
 800c634:	f7ff fcd2 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c638:	7979      	ldrb	r1, [r7, #5]
 800c63a:	88fa      	ldrh	r2, [r7, #6]
 800c63c:	2301      	movs	r3, #1
 800c63e:	9302      	str	r3, [sp, #8]
 800c640:	2300      	movs	r3, #0
 800c642:	9301      	str	r3, [sp, #4]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	460b      	mov	r3, r1
 800c64a:	2100      	movs	r1, #0
 800c64c:	2002      	movs	r0, #2
 800c64e:	f7ff fcc5 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c652:	7979      	ldrb	r1, [r7, #5]
 800c654:	88fa      	ldrh	r2, [r7, #6]
 800c656:	2301      	movs	r3, #1
 800c658:	9302      	str	r3, [sp, #8]
 800c65a:	2300      	movs	r3, #0
 800c65c:	9301      	str	r3, [sp, #4]
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	460b      	mov	r3, r1
 800c664:	2100      	movs	r1, #0
 800c666:	2003      	movs	r0, #3
 800c668:	f7ff fcb8 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c66c:	7979      	ldrb	r1, [r7, #5]
 800c66e:	88fa      	ldrh	r2, [r7, #6]
 800c670:	2301      	movs	r3, #1
 800c672:	9302      	str	r3, [sp, #8]
 800c674:	2300      	movs	r3, #0
 800c676:	9301      	str	r3, [sp, #4]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	9300      	str	r3, [sp, #0]
 800c67c:	460b      	mov	r3, r1
 800c67e:	2100      	movs	r1, #0
 800c680:	2004      	movs	r0, #4
 800c682:	f7ff fcab 	bl	800bfdc <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c686:	f7ff fd1f 	bl	800c0c8 <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c68a:	4807      	ldr	r0, [pc, #28]	@ (800c6a8 <Move_Line+0xac>)
 800c68c:	f7fb fbaa 	bl	8007de4 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c690:	4b06      	ldr	r3, [pc, #24]	@ (800c6ac <Move_Line+0xb0>)
 800c692:	2201      	movs	r2, #1
 800c694:	701a      	strb	r2, [r3, #0]
	return true;
 800c696:	2301      	movs	r3, #1
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3708      	adds	r7, #8
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	24000c2c 	.word	0x24000c2c
 800c6a4:	24000c2d 	.word	0x24000c2d
 800c6a8:	24000574 	.word	0x24000574
 800c6ac:	24000c2e 	.word	0x24000c2e

0800c6b0 <Move_Left>:

bool Move_Left(u16 speed, u8 acc, u32 length) {
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af04      	add	r7, sp, #16
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	603a      	str	r2, [r7, #0]
 800c6ba:	80fb      	strh	r3, [r7, #6]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if(Choke_Flag == true)
 800c6c0:	4b24      	ldr	r3, [pc, #144]	@ (800c754 <Move_Left+0xa4>)
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d001      	beq.n	800c6cc <Move_Left+0x1c>
		return  false;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	e03f      	b.n	800c74c <Move_Left+0x9c>
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c6cc:	4b22      	ldr	r3, [pc, #136]	@ (800c758 <Move_Left+0xa8>)
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c6d2:	7979      	ldrb	r1, [r7, #5]
 800c6d4:	88fa      	ldrh	r2, [r7, #6]
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	9302      	str	r3, [sp, #8]
 800c6da:	2300      	movs	r3, #0
 800c6dc:	9301      	str	r3, [sp, #4]
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	9300      	str	r3, [sp, #0]
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	2101      	movs	r1, #1
 800c6e6:	2001      	movs	r0, #1
 800c6e8:	f7ff fc78 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c6ec:	7979      	ldrb	r1, [r7, #5]
 800c6ee:	88fa      	ldrh	r2, [r7, #6]
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	9302      	str	r3, [sp, #8]
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	9301      	str	r3, [sp, #4]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	2100      	movs	r1, #0
 800c700:	2002      	movs	r0, #2
 800c702:	f7ff fc6b 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c706:	7979      	ldrb	r1, [r7, #5]
 800c708:	88fa      	ldrh	r2, [r7, #6]
 800c70a:	2301      	movs	r3, #1
 800c70c:	9302      	str	r3, [sp, #8]
 800c70e:	2300      	movs	r3, #0
 800c710:	9301      	str	r3, [sp, #4]
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	9300      	str	r3, [sp, #0]
 800c716:	460b      	mov	r3, r1
 800c718:	2101      	movs	r1, #1
 800c71a:	2003      	movs	r0, #3
 800c71c:	f7ff fc5e 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c720:	7979      	ldrb	r1, [r7, #5]
 800c722:	88fa      	ldrh	r2, [r7, #6]
 800c724:	2301      	movs	r3, #1
 800c726:	9302      	str	r3, [sp, #8]
 800c728:	2300      	movs	r3, #0
 800c72a:	9301      	str	r3, [sp, #4]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	9300      	str	r3, [sp, #0]
 800c730:	460b      	mov	r3, r1
 800c732:	2100      	movs	r1, #0
 800c734:	2004      	movs	r0, #4
 800c736:	f7ff fc51 	bl	800bfdc <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c73a:	f7ff fcc5 	bl	800c0c8 <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c73e:	4807      	ldr	r0, [pc, #28]	@ (800c75c <Move_Left+0xac>)
 800c740:	f7fb fb50 	bl	8007de4 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c744:	4b06      	ldr	r3, [pc, #24]	@ (800c760 <Move_Left+0xb0>)
 800c746:	2201      	movs	r2, #1
 800c748:	701a      	strb	r2, [r3, #0]
	return true;
 800c74a:	2301      	movs	r3, #1
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3708      	adds	r7, #8
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	24000c2c 	.word	0x24000c2c
 800c758:	24000c2d 	.word	0x24000c2d
 800c75c:	24000574 	.word	0x24000574
 800c760:	24000c2e 	.word	0x24000c2e

0800c764 <Move_Back>:
// 		;
// //	RxFlag = 0;
// 	HAL_Delay(30);
// }

void Move_Back(u16 speed, u8 acc, u32 length) {
 800c764:	b580      	push	{r7, lr}
 800c766:	b088      	sub	sp, #32
 800c768:	af04      	add	r7, sp, #16
 800c76a:	4603      	mov	r3, r0
 800c76c:	603a      	str	r2, [r7, #0]
 800c76e:	80fb      	strh	r3, [r7, #6]
 800c770:	460b      	mov	r3, r1
 800c772:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c774:	88fb      	ldrh	r3, [r7, #6]
 800c776:	683a      	ldr	r2, [r7, #0]
 800c778:	fbb2 f2f3 	udiv	r2, r2, r3
 800c77c:	4613      	mov	r3, r2
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	4413      	add	r3, r2
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c786:	7979      	ldrb	r1, [r7, #5]
 800c788:	88fa      	ldrh	r2, [r7, #6]
 800c78a:	2301      	movs	r3, #1
 800c78c:	9302      	str	r3, [sp, #8]
 800c78e:	2300      	movs	r3, #0
 800c790:	9301      	str	r3, [sp, #4]
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	9300      	str	r3, [sp, #0]
 800c796:	460b      	mov	r3, r1
 800c798:	2101      	movs	r1, #1
 800c79a:	2001      	movs	r0, #1
 800c79c:	f7ff fc1e 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c7a0:	7979      	ldrb	r1, [r7, #5]
 800c7a2:	88fa      	ldrh	r2, [r7, #6]
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	9302      	str	r3, [sp, #8]
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	9301      	str	r3, [sp, #4]
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	9300      	str	r3, [sp, #0]
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	2101      	movs	r1, #1
 800c7b4:	2002      	movs	r0, #2
 800c7b6:	f7ff fc11 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c7ba:	7979      	ldrb	r1, [r7, #5]
 800c7bc:	88fa      	ldrh	r2, [r7, #6]
 800c7be:	2301      	movs	r3, #1
 800c7c0:	9302      	str	r3, [sp, #8]
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	9301      	str	r3, [sp, #4]
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	9300      	str	r3, [sp, #0]
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	2101      	movs	r1, #1
 800c7ce:	2003      	movs	r0, #3
 800c7d0:	f7ff fc04 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c7d4:	7979      	ldrb	r1, [r7, #5]
 800c7d6:	88fa      	ldrh	r2, [r7, #6]
 800c7d8:	2301      	movs	r3, #1
 800c7da:	9302      	str	r3, [sp, #8]
 800c7dc:	2300      	movs	r3, #0
 800c7de:	9301      	str	r3, [sp, #4]
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	9300      	str	r3, [sp, #0]
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	2101      	movs	r1, #1
 800c7e8:	2004      	movs	r0, #4
 800c7ea:	f7ff fbf7 	bl	800bfdc <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800c7ee:	f7ff fc6b 	bl	800c0c8 <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800c7f2:	4b0f      	ldr	r3, [pc, #60]	@ (800c830 <Move_Back+0xcc>)
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c7fe:	4a0d      	ldr	r2, [pc, #52]	@ (800c834 <Move_Back+0xd0>)
 800c800:	fb82 1203 	smull	r1, r2, r2, r3
 800c804:	1092      	asrs	r2, r2, #2
 800c806:	17db      	asrs	r3, r3, #31
 800c808:	1ad3      	subs	r3, r2, r3
 800c80a:	4a0b      	ldr	r2, [pc, #44]	@ (800c838 <Move_Back+0xd4>)
 800c80c:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c80e:	bf00      	nop
 800c810:	f7ff fee0 	bl	800c5d4 <GetRxFlag>
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d103      	bne.n	800c822 <Move_Back+0xbe>
 800c81a:	4b07      	ldr	r3, [pc, #28]	@ (800c838 <Move_Back+0xd4>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d1f6      	bne.n	800c810 <Move_Back+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c822:	201e      	movs	r0, #30
 800c824:	f7f6 fa82 	bl	8002d2c <HAL_Delay>
}
 800c828:	bf00      	nop
 800c82a:	3710      	adds	r7, #16
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	2400029c 	.word	0x2400029c
 800c834:	66666667 	.word	0x66666667
 800c838:	24000c30 	.word	0x24000c30

0800c83c <Move_Right>:

void Move_Right(u16 speed, u8 acc, u32 length) {
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b088      	sub	sp, #32
 800c840:	af04      	add	r7, sp, #16
 800c842:	4603      	mov	r3, r0
 800c844:	603a      	str	r2, [r7, #0]
 800c846:	80fb      	strh	r3, [r7, #6]
 800c848:	460b      	mov	r3, r1
 800c84a:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c84c:	88fb      	ldrh	r3, [r7, #6]
 800c84e:	683a      	ldr	r2, [r7, #0]
 800c850:	fbb2 f2f3 	udiv	r2, r2, r3
 800c854:	4613      	mov	r3, r2
 800c856:	009b      	lsls	r3, r3, #2
 800c858:	4413      	add	r3, r2
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c85e:	7979      	ldrb	r1, [r7, #5]
 800c860:	88fa      	ldrh	r2, [r7, #6]
 800c862:	2301      	movs	r3, #1
 800c864:	9302      	str	r3, [sp, #8]
 800c866:	2300      	movs	r3, #0
 800c868:	9301      	str	r3, [sp, #4]
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	460b      	mov	r3, r1
 800c870:	2100      	movs	r1, #0
 800c872:	2001      	movs	r0, #1
 800c874:	f7ff fbb2 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c878:	7979      	ldrb	r1, [r7, #5]
 800c87a:	88fa      	ldrh	r2, [r7, #6]
 800c87c:	2301      	movs	r3, #1
 800c87e:	9302      	str	r3, [sp, #8]
 800c880:	2300      	movs	r3, #0
 800c882:	9301      	str	r3, [sp, #4]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	460b      	mov	r3, r1
 800c88a:	2101      	movs	r1, #1
 800c88c:	2002      	movs	r0, #2
 800c88e:	f7ff fba5 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c892:	7979      	ldrb	r1, [r7, #5]
 800c894:	88fa      	ldrh	r2, [r7, #6]
 800c896:	2301      	movs	r3, #1
 800c898:	9302      	str	r3, [sp, #8]
 800c89a:	2300      	movs	r3, #0
 800c89c:	9301      	str	r3, [sp, #4]
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	9300      	str	r3, [sp, #0]
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	2003      	movs	r0, #3
 800c8a8:	f7ff fb98 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c8ac:	7979      	ldrb	r1, [r7, #5]
 800c8ae:	88fa      	ldrh	r2, [r7, #6]
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	9302      	str	r3, [sp, #8]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	9301      	str	r3, [sp, #4]
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	9300      	str	r3, [sp, #0]
 800c8bc:	460b      	mov	r3, r1
 800c8be:	2101      	movs	r1, #1
 800c8c0:	2004      	movs	r0, #4
 800c8c2:	f7ff fb8b 	bl	800bfdc <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion();
 800c8c6:	f7ff fbff 	bl	800c0c8 <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800c8ca:	4b0f      	ldr	r3, [pc, #60]	@ (800c908 <Move_Right+0xcc>)
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c8d6:	4a0d      	ldr	r2, [pc, #52]	@ (800c90c <Move_Right+0xd0>)
 800c8d8:	fb82 1203 	smull	r1, r2, r2, r3
 800c8dc:	1092      	asrs	r2, r2, #2
 800c8de:	17db      	asrs	r3, r3, #31
 800c8e0:	1ad3      	subs	r3, r2, r3
 800c8e2:	4a0b      	ldr	r2, [pc, #44]	@ (800c910 <Move_Right+0xd4>)
 800c8e4:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c8e6:	bf00      	nop
 800c8e8:	f7ff fe74 	bl	800c5d4 <GetRxFlag>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d103      	bne.n	800c8fa <Move_Right+0xbe>
 800c8f2:	4b07      	ldr	r3, [pc, #28]	@ (800c910 <Move_Right+0xd4>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1f6      	bne.n	800c8e8 <Move_Right+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c8fa:	201e      	movs	r0, #30
 800c8fc:	f7f6 fa16 	bl	8002d2c <HAL_Delay>
}
 800c900:	bf00      	nop
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	2400029c 	.word	0x2400029c
 800c90c:	66666667 	.word	0x66666667
 800c910:	24000c30 	.word	0x24000c30

0800c914 <Move_zhengxuzhuan>:
void Move_zhengxuzhuan(u16 speed, u8 acc, u32 length) {
 800c914:	b580      	push	{r7, lr}
 800c916:	b088      	sub	sp, #32
 800c918:	af04      	add	r7, sp, #16
 800c91a:	4603      	mov	r3, r0
 800c91c:	603a      	str	r2, [r7, #0]
 800c91e:	80fb      	strh	r3, [r7, #6]
 800c920:	460b      	mov	r3, r1
 800c922:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c924:	88fb      	ldrh	r3, [r7, #6]
 800c926:	683a      	ldr	r2, [r7, #0]
 800c928:	fbb2 f2f3 	udiv	r2, r2, r3
 800c92c:	4613      	mov	r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	4413      	add	r3, r2
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c936:	7979      	ldrb	r1, [r7, #5]
 800c938:	88fa      	ldrh	r2, [r7, #6]
 800c93a:	2301      	movs	r3, #1
 800c93c:	9302      	str	r3, [sp, #8]
 800c93e:	2300      	movs	r3, #0
 800c940:	9301      	str	r3, [sp, #4]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	460b      	mov	r3, r1
 800c948:	2100      	movs	r1, #0
 800c94a:	2001      	movs	r0, #1
 800c94c:	f7ff fb46 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c950:	7979      	ldrb	r1, [r7, #5]
 800c952:	88fa      	ldrh	r2, [r7, #6]
 800c954:	2301      	movs	r3, #1
 800c956:	9302      	str	r3, [sp, #8]
 800c958:	2300      	movs	r3, #0
 800c95a:	9301      	str	r3, [sp, #4]
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	9300      	str	r3, [sp, #0]
 800c960:	460b      	mov	r3, r1
 800c962:	2101      	movs	r1, #1
 800c964:	2002      	movs	r0, #2
 800c966:	f7ff fb39 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c96a:	7979      	ldrb	r1, [r7, #5]
 800c96c:	88fa      	ldrh	r2, [r7, #6]
 800c96e:	2301      	movs	r3, #1
 800c970:	9302      	str	r3, [sp, #8]
 800c972:	2300      	movs	r3, #0
 800c974:	9301      	str	r3, [sp, #4]
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	9300      	str	r3, [sp, #0]
 800c97a:	460b      	mov	r3, r1
 800c97c:	2101      	movs	r1, #1
 800c97e:	2003      	movs	r0, #3
 800c980:	f7ff fb2c 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c984:	7979      	ldrb	r1, [r7, #5]
 800c986:	88fa      	ldrh	r2, [r7, #6]
 800c988:	2301      	movs	r3, #1
 800c98a:	9302      	str	r3, [sp, #8]
 800c98c:	2300      	movs	r3, #0
 800c98e:	9301      	str	r3, [sp, #4]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	9300      	str	r3, [sp, #0]
 800c994:	460b      	mov	r3, r1
 800c996:	2100      	movs	r1, #0
 800c998:	2004      	movs	r0, #4
 800c99a:	f7ff fb1f 	bl	800bfdc <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800c99e:	f7ff fb93 	bl	800c0c8 <Emm_V5_Synchronous_motion>

	Emm_mode = 1;
 800c9a2:	4b0f      	ldr	r3, [pc, #60]	@ (800c9e0 <Move_zhengxuzhuan+0xcc>)
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c9ae:	4a0d      	ldr	r2, [pc, #52]	@ (800c9e4 <Move_zhengxuzhuan+0xd0>)
 800c9b0:	fb82 1203 	smull	r1, r2, r2, r3
 800c9b4:	1092      	asrs	r2, r2, #2
 800c9b6:	17db      	asrs	r3, r3, #31
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	4a0b      	ldr	r2, [pc, #44]	@ (800c9e8 <Move_zhengxuzhuan+0xd4>)
 800c9bc:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c9be:	bf00      	nop
 800c9c0:	f7ff fe08 	bl	800c5d4 <GetRxFlag>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d103      	bne.n	800c9d2 <Move_zhengxuzhuan+0xbe>
 800c9ca:	4b07      	ldr	r3, [pc, #28]	@ (800c9e8 <Move_zhengxuzhuan+0xd4>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d1f6      	bne.n	800c9c0 <Move_zhengxuzhuan+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c9d2:	201e      	movs	r0, #30
 800c9d4:	f7f6 f9aa 	bl	8002d2c <HAL_Delay>
}
 800c9d8:	bf00      	nop
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	2400029c 	.word	0x2400029c
 800c9e4:	66666667 	.word	0x66666667
 800c9e8:	24000c30 	.word	0x24000c30

0800c9ec <Move_fanxuzhuan>:

void Move_fanxuzhuan(u16 speed, u8 acc, u32 length) //4340是90度
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b088      	sub	sp, #32
 800c9f0:	af04      	add	r7, sp, #16
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	603a      	str	r2, [r7, #0]
 800c9f6:	80fb      	strh	r3, [r7, #6]
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c9fc:	88fb      	ldrh	r3, [r7, #6]
 800c9fe:	683a      	ldr	r2, [r7, #0]
 800ca00:	fbb2 f2f3 	udiv	r2, r2, r3
 800ca04:	4613      	mov	r3, r2
 800ca06:	009b      	lsls	r3, r3, #2
 800ca08:	4413      	add	r3, r2
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	60fb      	str	r3, [r7, #12]

	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800ca0e:	7979      	ldrb	r1, [r7, #5]
 800ca10:	88fa      	ldrh	r2, [r7, #6]
 800ca12:	2301      	movs	r3, #1
 800ca14:	9302      	str	r3, [sp, #8]
 800ca16:	2300      	movs	r3, #0
 800ca18:	9301      	str	r3, [sp, #4]
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	9300      	str	r3, [sp, #0]
 800ca1e:	460b      	mov	r3, r1
 800ca20:	2101      	movs	r1, #1
 800ca22:	2001      	movs	r0, #1
 800ca24:	f7ff fada 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800ca28:	7979      	ldrb	r1, [r7, #5]
 800ca2a:	88fa      	ldrh	r2, [r7, #6]
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	9302      	str	r3, [sp, #8]
 800ca30:	2300      	movs	r3, #0
 800ca32:	9301      	str	r3, [sp, #4]
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	460b      	mov	r3, r1
 800ca3a:	2100      	movs	r1, #0
 800ca3c:	2002      	movs	r0, #2
 800ca3e:	f7ff facd 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800ca42:	7979      	ldrb	r1, [r7, #5]
 800ca44:	88fa      	ldrh	r2, [r7, #6]
 800ca46:	2301      	movs	r3, #1
 800ca48:	9302      	str	r3, [sp, #8]
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	9301      	str	r3, [sp, #4]
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	460b      	mov	r3, r1
 800ca54:	2100      	movs	r1, #0
 800ca56:	2003      	movs	r0, #3
 800ca58:	f7ff fac0 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800ca5c:	7979      	ldrb	r1, [r7, #5]
 800ca5e:	88fa      	ldrh	r2, [r7, #6]
 800ca60:	2301      	movs	r3, #1
 800ca62:	9302      	str	r3, [sp, #8]
 800ca64:	2300      	movs	r3, #0
 800ca66:	9301      	str	r3, [sp, #4]
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	2101      	movs	r1, #1
 800ca70:	2004      	movs	r0, #4
 800ca72:	f7ff fab3 	bl	800bfdc <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800ca76:	f7ff fb27 	bl	800c0c8 <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800ca7a:	4b0f      	ldr	r3, [pc, #60]	@ (800cab8 <Move_fanxuzhuan+0xcc>)
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800ca86:	4a0d      	ldr	r2, [pc, #52]	@ (800cabc <Move_fanxuzhuan+0xd0>)
 800ca88:	fb82 1203 	smull	r1, r2, r2, r3
 800ca8c:	1092      	asrs	r2, r2, #2
 800ca8e:	17db      	asrs	r3, r3, #31
 800ca90:	1ad3      	subs	r3, r2, r3
 800ca92:	4a0b      	ldr	r2, [pc, #44]	@ (800cac0 <Move_fanxuzhuan+0xd4>)
 800ca94:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800ca96:	bf00      	nop
 800ca98:	f7ff fd9c 	bl	800c5d4 <GetRxFlag>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d103      	bne.n	800caaa <Move_fanxuzhuan+0xbe>
 800caa2:	4b07      	ldr	r3, [pc, #28]	@ (800cac0 <Move_fanxuzhuan+0xd4>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d1f6      	bne.n	800ca98 <Move_fanxuzhuan+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800caaa:	201e      	movs	r0, #30
 800caac:	f7f6 f93e 	bl	8002d2c <HAL_Delay>
}
 800cab0:	bf00      	nop
 800cab2:	3710      	adds	r7, #16
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	2400029c 	.word	0x2400029c
 800cabc:	66666667 	.word	0x66666667
 800cac0:	24000c30 	.word	0x24000c30

0800cac4 <Drop_Location_jiang>:
////	RxFlag = 0;
//	if(High_Length>=14000)
//		Emm_V5_Stop_Now(5,0);
//	HAL_Delay(30);
//}
void Drop_Location_jiang(u16 speed, u8 acc, u32 length) {
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b088      	sub	sp, #32
 800cac8:	af04      	add	r7, sp, #16
 800caca:	4603      	mov	r3, r0
 800cacc:	603a      	str	r2, [r7, #0]
 800cace:	80fb      	strh	r3, [r7, #6]
 800cad0:	460b      	mov	r3, r1
 800cad2:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800cad4:	88fb      	ldrh	r3, [r7, #6]
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	fbb2 f2f3 	udiv	r2, r2, r3
 800cadc:	4613      	mov	r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	4413      	add	r3, r2
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(5, 1, speed, acc, length, 1, 0);
 800cae6:	7979      	ldrb	r1, [r7, #5]
 800cae8:	88fa      	ldrh	r2, [r7, #6]
 800caea:	2300      	movs	r3, #0
 800caec:	9302      	str	r3, [sp, #8]
 800caee:	2301      	movs	r3, #1
 800caf0:	9301      	str	r3, [sp, #4]
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	460b      	mov	r3, r1
 800caf8:	2101      	movs	r1, #1
 800cafa:	2005      	movs	r0, #5
 800cafc:	f7ff fa6e 	bl	800bfdc <Emm_V5_Pos_Control>
//	检查到位回读
	Emm_mode = 1;
 800cb00:	4b0f      	ldr	r3, [pc, #60]	@ (800cb40 <Drop_Location_jiang+0x7c>)
 800cb02:	2201      	movs	r2, #1
 800cb04:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800cb0c:	4a0d      	ldr	r2, [pc, #52]	@ (800cb44 <Drop_Location_jiang+0x80>)
 800cb0e:	fb82 1203 	smull	r1, r2, r2, r3
 800cb12:	1092      	asrs	r2, r2, #2
 800cb14:	17db      	asrs	r3, r3, #31
 800cb16:	1ad3      	subs	r3, r2, r3
 800cb18:	4a0b      	ldr	r2, [pc, #44]	@ (800cb48 <Drop_Location_jiang+0x84>)
 800cb1a:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800cb1c:	bf00      	nop
 800cb1e:	f7ff fd59 	bl	800c5d4 <GetRxFlag>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d103      	bne.n	800cb30 <Drop_Location_jiang+0x6c>
 800cb28:	4b07      	ldr	r3, [pc, #28]	@ (800cb48 <Drop_Location_jiang+0x84>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1f6      	bne.n	800cb1e <Drop_Location_jiang+0x5a>
		;
	HAL_Delay(30);
 800cb30:	201e      	movs	r0, #30
 800cb32:	f7f6 f8fb 	bl	8002d2c <HAL_Delay>
}
 800cb36:	bf00      	nop
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	2400029c 	.word	0x2400029c
 800cb44:	66666667 	.word	0x66666667
 800cb48:	24000c30 	.word	0x24000c30

0800cb4c <Drop_Location_Sheng>:
void Drop_Location_Sheng(u16 speed, u8 acc, u32 length) {
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b088      	sub	sp, #32
 800cb50:	af04      	add	r7, sp, #16
 800cb52:	4603      	mov	r3, r0
 800cb54:	603a      	str	r2, [r7, #0]
 800cb56:	80fb      	strh	r3, [r7, #6]
 800cb58:	460b      	mov	r3, r1
 800cb5a:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800cb5c:	88fb      	ldrh	r3, [r7, #6]
 800cb5e:	683a      	ldr	r2, [r7, #0]
 800cb60:	fbb2 f2f3 	udiv	r2, r2, r3
 800cb64:	4613      	mov	r3, r2
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	4413      	add	r3, r2
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(5, 1, speed, acc, length, 1, 0);
 800cb6e:	7979      	ldrb	r1, [r7, #5]
 800cb70:	88fa      	ldrh	r2, [r7, #6]
 800cb72:	2300      	movs	r3, #0
 800cb74:	9302      	str	r3, [sp, #8]
 800cb76:	2301      	movs	r3, #1
 800cb78:	9301      	str	r3, [sp, #4]
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	460b      	mov	r3, r1
 800cb80:	2101      	movs	r1, #1
 800cb82:	2005      	movs	r0, #5
 800cb84:	f7ff fa2a 	bl	800bfdc <Emm_V5_Pos_Control>
	Emm_mode = 1;
 800cb88:	4b0f      	ldr	r3, [pc, #60]	@ (800cbc8 <Drop_Location_Sheng+0x7c>)
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800cb94:	4a0d      	ldr	r2, [pc, #52]	@ (800cbcc <Drop_Location_Sheng+0x80>)
 800cb96:	fb82 1203 	smull	r1, r2, r2, r3
 800cb9a:	1092      	asrs	r2, r2, #2
 800cb9c:	17db      	asrs	r3, r3, #31
 800cb9e:	1ad3      	subs	r3, r2, r3
 800cba0:	4a0b      	ldr	r2, [pc, #44]	@ (800cbd0 <Drop_Location_Sheng+0x84>)
 800cba2:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800cba4:	bf00      	nop
 800cba6:	f7ff fd15 	bl	800c5d4 <GetRxFlag>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d103      	bne.n	800cbb8 <Drop_Location_Sheng+0x6c>
 800cbb0:	4b07      	ldr	r3, [pc, #28]	@ (800cbd0 <Drop_Location_Sheng+0x84>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d1f6      	bne.n	800cba6 <Drop_Location_Sheng+0x5a>
		;

	HAL_Delay(30);
 800cbb8:	201e      	movs	r0, #30
 800cbba:	f7f6 f8b7 	bl	8002d2c <HAL_Delay>
}
 800cbbe:	bf00      	nop
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	2400029c 	.word	0x2400029c
 800cbcc:	66666667 	.word	0x66666667
 800cbd0:	24000c30 	.word	0x24000c30

0800cbd4 <Move_Stop>:
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动

}

void Move_Stop(void)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	af00      	add	r7, sp, #0
	Emm_V5_Stop_Now(1,true);
 800cbd8:	2101      	movs	r1, #1
 800cbda:	2001      	movs	r0, #1
 800cbdc:	f7ff fa52 	bl	800c084 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(2,true);
 800cbe0:	2101      	movs	r1, #1
 800cbe2:	2002      	movs	r0, #2
 800cbe4:	f7ff fa4e 	bl	800c084 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(3,true);
 800cbe8:	2101      	movs	r1, #1
 800cbea:	2003      	movs	r0, #3
 800cbec:	f7ff fa4a 	bl	800c084 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(4,true);
 800cbf0:	2101      	movs	r1, #1
 800cbf2:	2004      	movs	r0, #4
 800cbf4:	f7ff fa46 	bl	800c084 <Emm_V5_Stop_Now>
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动
 800cbf8:	f7ff fa66 	bl	800c0c8 <Emm_V5_Synchronous_motion>
}
 800cbfc:	bf00      	nop
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <Move_TO_yuanliaoqu>:
	
	Move_Line(RunSpeed, RunAcc, Lineclk); ////130.5
//	HAL_Delay(yanshi);
}
void Move_TO_yuanliaoqu(float Lineclk) //物料区
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	ed87 0a01 	vstr	s0, [r7, #4]
	Move_Line(RunSpeed, RunAcc, Lineclk);
 800cc0a:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc12:	ee17 2a90 	vmov	r2, s15
 800cc16:	2178      	movs	r1, #120	@ 0x78
 800cc18:	2064      	movs	r0, #100	@ 0x64
 800cc1a:	f7ff fcef 	bl	800c5fc <Move_Line>
	HAL_Delay(yanshi);
 800cc1e:	2032      	movs	r0, #50	@ 0x32
 800cc20:	f7f6 f884 	bl	8002d2c <HAL_Delay>
}
 800cc24:	bf00      	nop
 800cc26:	3708      	adds	r7, #8
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <Move_TO_jianzhi1>:

void Move_TO_jianzhi1(float Backclk, float fanzhuanclk) //粗加工区
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	ed87 0a01 	vstr	s0, [r7, #4]
 800cc36:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cc3a:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc42:	ee17 2a90 	vmov	r2, s15
 800cc46:	2178      	movs	r1, #120	@ 0x78
 800cc48:	2064      	movs	r0, #100	@ 0x64
 800cc4a:	f7ff fd8b 	bl	800c764 <Move_Back>
	HAL_Delay(yanshi);
 800cc4e:	2032      	movs	r0, #50	@ 0x32
 800cc50:	f7f6 f86c 	bl	8002d2c <HAL_Delay>
	Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800cc54:	edd7 7a00 	vldr	s15, [r7]
 800cc58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc5c:	ee17 2a90 	vmov	r2, s15
 800cc60:	2178      	movs	r1, #120	@ 0x78
 800cc62:	2064      	movs	r0, #100	@ 0x64
 800cc64:	f7ff fec2 	bl	800c9ec <Move_fanxuzhuan>
	HAL_Delay(yanshi);
 800cc68:	2032      	movs	r0, #50	@ 0x32
 800cc6a:	f7f6 f85f 	bl	8002d2c <HAL_Delay>
}
 800cc6e:	bf00      	nop
 800cc70:	3708      	adds	r7, #8
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <Move_TO_zancunqu>:

void Move_TO_zancunqu(float Lineclk, float fanzhuanclk) //暂存区
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b082      	sub	sp, #8
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	ed87 0a01 	vstr	s0, [r7, #4]
 800cc80:	edc7 0a00 	vstr	s1, [r7]
	Move_Line(RunSpeed, RunAcc, Lineclk);
 800cc84:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc8c:	ee17 2a90 	vmov	r2, s15
 800cc90:	2178      	movs	r1, #120	@ 0x78
 800cc92:	2064      	movs	r0, #100	@ 0x64
 800cc94:	f7ff fcb2 	bl	800c5fc <Move_Line>
	HAL_Delay(yanshi);
 800cc98:	2032      	movs	r0, #50	@ 0x32
 800cc9a:	f7f6 f847 	bl	8002d2c <HAL_Delay>
	Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800cc9e:	edd7 7a00 	vldr	s15, [r7]
 800cca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cca6:	ee17 2a90 	vmov	r2, s15
 800ccaa:	2178      	movs	r1, #120	@ 0x78
 800ccac:	2064      	movs	r0, #100	@ 0x64
 800ccae:	f7ff fe9d 	bl	800c9ec <Move_fanxuzhuan>
	HAL_Delay(yanshi);
 800ccb2:	2032      	movs	r0, #50	@ 0x32
 800ccb4:	f7f6 f83a 	bl	8002d2c <HAL_Delay>
}
 800ccb8:	bf00      	nop
 800ccba:	3708      	adds	r7, #8
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <Move_TO_jianzhi2>:
void Move_TO_jianzhi2(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	ed87 0a01 	vstr	s0, [r7, #4]
 800ccca:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800ccce:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccd6:	ee17 2a90 	vmov	r2, s15
 800ccda:	2178      	movs	r1, #120	@ 0x78
 800ccdc:	2064      	movs	r0, #100	@ 0x64
 800ccde:	f7ff fd41 	bl	800c764 <Move_Back>
	HAL_Delay(yanshi);
 800cce2:	2032      	movs	r0, #50	@ 0x32
 800cce4:	f7f6 f822 	bl	8002d2c <HAL_Delay>
	Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800cce8:	edd7 7a00 	vldr	s15, [r7]
 800ccec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccf0:	ee17 2a90 	vmov	r2, s15
 800ccf4:	2178      	movs	r1, #120	@ 0x78
 800ccf6:	2064      	movs	r0, #100	@ 0x64
 800ccf8:	f7ff fe0c 	bl	800c914 <Move_zhengxuzhuan>
	HAL_Delay(yanshi);
 800ccfc:	2032      	movs	r0, #50	@ 0x32
 800ccfe:	f7f6 f815 	bl	8002d2c <HAL_Delay>
}
 800cd02:	bf00      	nop
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <Move_TO_cujiagongqu>:
void Move_TO_cujiagongqu(float Backclk) //粗加工区
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b082      	sub	sp, #8
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	ed87 0a01 	vstr	s0, [r7, #4]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cd14:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd1c:	ee17 2a90 	vmov	r2, s15
 800cd20:	2178      	movs	r1, #120	@ 0x78
 800cd22:	2064      	movs	r0, #100	@ 0x64
 800cd24:	f7ff fd1e 	bl	800c764 <Move_Back>
	HAL_Delay(yanshi);
 800cd28:	2032      	movs	r0, #50	@ 0x32
 800cd2a:	f7f5 ffff 	bl	8002d2c <HAL_Delay>
}
 800cd2e:	bf00      	nop
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}

0800cd36 <Move_TO_jianzhi3>:
void Move_TO_jianzhi3(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800cd36:	b580      	push	{r7, lr}
 800cd38:	b082      	sub	sp, #8
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	ed87 0a01 	vstr	s0, [r7, #4]
 800cd40:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cd44:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd4c:	ee17 2a90 	vmov	r2, s15
 800cd50:	2178      	movs	r1, #120	@ 0x78
 800cd52:	2064      	movs	r0, #100	@ 0x64
 800cd54:	f7ff fd06 	bl	800c764 <Move_Back>
	HAL_Delay(yanshi);
 800cd58:	2032      	movs	r0, #50	@ 0x32
 800cd5a:	f7f5 ffe7 	bl	8002d2c <HAL_Delay>
	Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800cd5e:	edd7 7a00 	vldr	s15, [r7]
 800cd62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd66:	ee17 2a90 	vmov	r2, s15
 800cd6a:	2178      	movs	r1, #120	@ 0x78
 800cd6c:	2064      	movs	r0, #100	@ 0x64
 800cd6e:	f7ff fdd1 	bl	800c914 <Move_zhengxuzhuan>
	HAL_Delay(yanshi);
 800cd72:	2032      	movs	r0, #50	@ 0x32
 800cd74:	f7f5 ffda 	bl	8002d2c <HAL_Delay>
}
 800cd78:	bf00      	nop
 800cd7a:	3708      	adds	r7, #8
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <Move_TO_fanyuanliaoqu>:
void Move_TO_fanyuanliaoqu(float Lineclk) //物料区
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	ed87 0a01 	vstr	s0, [r7, #4]
	Move_Back(RunSpeed, RunAcc, Lineclk);
 800cd8a:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd92:	ee17 2a90 	vmov	r2, s15
 800cd96:	2178      	movs	r1, #120	@ 0x78
 800cd98:	2064      	movs	r0, #100	@ 0x64
 800cd9a:	f7ff fce3 	bl	800c764 <Move_Back>
	HAL_Delay(20000);
 800cd9e:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800cda2:	f7f5 ffc3 	bl	8002d2c <HAL_Delay>
}
 800cda6:	bf00      	nop
 800cda8:	3708      	adds	r7, #8
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
	...

0800cdb0 <Move_Action_Nopid_Left_Ctrl>:
	} else {
		Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
		HAL_Delay(yanshi);
	}
}
void Move_Action_Nopid_Left_Ctrl(float x_goal, float y_goal) {
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	ed87 0a01 	vstr	s0, [r7, #4]
 800cdba:	edc7 0a00 	vstr	s1, [r7]
	while (1) {
		if ((X_NOW - x_goal) < 0) {
 800cdbe:	4baa      	ldr	r3, [pc, #680]	@ (800d068 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cdc0:	ed93 7a00 	vldr	s14, [r3]
 800cdc4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cdc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cdd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd4:	d52e      	bpl.n	800ce34 <Move_Action_Nopid_Left_Ctrl+0x84>
			Move_Left(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800cdd6:	4ba4      	ldr	r3, [pc, #656]	@ (800d068 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cdd8:	ed93 7a00 	vldr	s14, [r3]
 800cddc:	edd7 7a01 	vldr	s15, [r7, #4]
 800cde0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cde4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdec:	dd07      	ble.n	800cdfe <Move_Action_Nopid_Left_Ctrl+0x4e>
 800cdee:	4b9e      	ldr	r3, [pc, #632]	@ (800d068 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cdf0:	ed93 7a00 	vldr	s14, [r3]
 800cdf4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cdf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdfc:	e008      	b.n	800ce10 <Move_Action_Nopid_Left_Ctrl+0x60>
 800cdfe:	4b9a      	ldr	r3, [pc, #616]	@ (800d068 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce00:	ed93 7a00 	vldr	s14, [r3]
 800ce04:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce0c:	eef1 7a67 	vneg.f32	s15, s15
 800ce10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ce14:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800d060 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800ce18:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ce20:	ee17 2a90 	vmov	r2, s15
 800ce24:	2164      	movs	r1, #100	@ 0x64
 800ce26:	2064      	movs	r0, #100	@ 0x64
 800ce28:	f7ff fc42 	bl	800c6b0 <Move_Left>
			HAL_Delay(yanshi);
 800ce2c:	2032      	movs	r0, #50	@ 0x32
 800ce2e:	f7f5 ff7d 	bl	8002d2c <HAL_Delay>
 800ce32:	e02d      	b.n	800ce90 <Move_Action_Nopid_Left_Ctrl+0xe0>
		} else {
			Move_Right(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800ce34:	4b8c      	ldr	r3, [pc, #560]	@ (800d068 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce36:	ed93 7a00 	vldr	s14, [r3]
 800ce3a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce4a:	dd07      	ble.n	800ce5c <Move_Action_Nopid_Left_Ctrl+0xac>
 800ce4c:	4b86      	ldr	r3, [pc, #536]	@ (800d068 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce4e:	ed93 7a00 	vldr	s14, [r3]
 800ce52:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce5a:	e008      	b.n	800ce6e <Move_Action_Nopid_Left_Ctrl+0xbe>
 800ce5c:	4b82      	ldr	r3, [pc, #520]	@ (800d068 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce5e:	ed93 7a00 	vldr	s14, [r3]
 800ce62:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce66:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce6a:	eef1 7a67 	vneg.f32	s15, s15
 800ce6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ce72:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800d060 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800ce76:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce7a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ce7e:	ee17 2a90 	vmov	r2, s15
 800ce82:	2164      	movs	r1, #100	@ 0x64
 800ce84:	2064      	movs	r0, #100	@ 0x64
 800ce86:	f7ff fcd9 	bl	800c83c <Move_Right>
			HAL_Delay(yanshi);
 800ce8a:	2032      	movs	r0, #50	@ 0x32
 800ce8c:	f7f5 ff4e 	bl	8002d2c <HAL_Delay>
		}
		if (Y_NOW - y_goal < 0) {
 800ce90:	4b76      	ldr	r3, [pc, #472]	@ (800d06c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ce92:	edd3 7a00 	vldr	s15, [r3]
 800ce96:	eeb1 7a67 	vneg.f32	s14, s15
 800ce9a:	edd7 7a00 	vldr	s15, [r7]
 800ce9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cea2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceaa:	d534      	bpl.n	800cf16 <Move_Action_Nopid_Left_Ctrl+0x166>
			Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800ceac:	4b6f      	ldr	r3, [pc, #444]	@ (800d06c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ceae:	edd3 7a00 	vldr	s15, [r3]
 800ceb2:	eeb1 7a67 	vneg.f32	s14, s15
 800ceb6:	edd7 7a00 	vldr	s15, [r7]
 800ceba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cebe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cec6:	dd09      	ble.n	800cedc <Move_Action_Nopid_Left_Ctrl+0x12c>
 800cec8:	4b68      	ldr	r3, [pc, #416]	@ (800d06c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ceca:	edd3 7a00 	vldr	s15, [r3]
 800cece:	eeb1 7a67 	vneg.f32	s14, s15
 800ced2:	edd7 7a00 	vldr	s15, [r7]
 800ced6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceda:	e00a      	b.n	800cef2 <Move_Action_Nopid_Left_Ctrl+0x142>
 800cedc:	4b63      	ldr	r3, [pc, #396]	@ (800d06c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cede:	edd3 7a00 	vldr	s15, [r3]
 800cee2:	eeb1 7a67 	vneg.f32	s14, s15
 800cee6:	edd7 7a00 	vldr	s15, [r7]
 800ceea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceee:	eef1 7a67 	vneg.f32	s15, s15
 800cef2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cef6:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800d060 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800cefa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cefe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cf02:	ee17 2a90 	vmov	r2, s15
 800cf06:	2164      	movs	r1, #100	@ 0x64
 800cf08:	2064      	movs	r0, #100	@ 0x64
 800cf0a:	f7ff fb77 	bl	800c5fc <Move_Line>
			HAL_Delay(yanshi);
 800cf0e:	2032      	movs	r0, #50	@ 0x32
 800cf10:	f7f5 ff0c 	bl	8002d2c <HAL_Delay>
 800cf14:	e033      	b.n	800cf7e <Move_Action_Nopid_Left_Ctrl+0x1ce>
		} else {
			Move_Back(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800cf16:	4b55      	ldr	r3, [pc, #340]	@ (800d06c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cf18:	edd3 7a00 	vldr	s15, [r3]
 800cf1c:	eeb1 7a67 	vneg.f32	s14, s15
 800cf20:	edd7 7a00 	vldr	s15, [r7]
 800cf24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf30:	dd09      	ble.n	800cf46 <Move_Action_Nopid_Left_Ctrl+0x196>
 800cf32:	4b4e      	ldr	r3, [pc, #312]	@ (800d06c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cf34:	edd3 7a00 	vldr	s15, [r3]
 800cf38:	eeb1 7a67 	vneg.f32	s14, s15
 800cf3c:	edd7 7a00 	vldr	s15, [r7]
 800cf40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf44:	e00a      	b.n	800cf5c <Move_Action_Nopid_Left_Ctrl+0x1ac>
 800cf46:	4b49      	ldr	r3, [pc, #292]	@ (800d06c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cf48:	edd3 7a00 	vldr	s15, [r3]
 800cf4c:	eeb1 7a67 	vneg.f32	s14, s15
 800cf50:	edd7 7a00 	vldr	s15, [r7]
 800cf54:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf58:	eef1 7a67 	vneg.f32	s15, s15
 800cf5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cf60:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800d060 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800cf64:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cf6c:	ee17 2a90 	vmov	r2, s15
 800cf70:	2164      	movs	r1, #100	@ 0x64
 800cf72:	2064      	movs	r0, #100	@ 0x64
 800cf74:	f7ff fbf6 	bl	800c764 <Move_Back>
			HAL_Delay(yanshi);
 800cf78:	2032      	movs	r0, #50	@ 0x32
 800cf7a:	f7f5 fed7 	bl	8002d2c <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 2 && ABS(Y_NOW - y_goal) < 2) {
 800cf7e:	4b3a      	ldr	r3, [pc, #232]	@ (800d068 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cf80:	ed93 7a00 	vldr	s14, [r3]
 800cf84:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf94:	dd11      	ble.n	800cfba <Move_Action_Nopid_Left_Ctrl+0x20a>
 800cf96:	4b34      	ldr	r3, [pc, #208]	@ (800d068 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cf98:	ed93 7a00 	vldr	s14, [r3]
 800cf9c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cfa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfa4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800cfa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cfac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb0:	bf4c      	ite	mi
 800cfb2:	2301      	movmi	r3, #1
 800cfb4:	2300      	movpl	r3, #0
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	e010      	b.n	800cfdc <Move_Action_Nopid_Left_Ctrl+0x22c>
 800cfba:	4b2b      	ldr	r3, [pc, #172]	@ (800d068 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cfbc:	ed93 7a00 	vldr	s14, [r3]
 800cfc0:	edd7 7a01 	vldr	s15, [r7, #4]
 800cfc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfc8:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800cfcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cfd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfd4:	bfcc      	ite	gt
 800cfd6:	2301      	movgt	r3, #1
 800cfd8:	2300      	movle	r3, #0
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f43f aeee 	beq.w	800cdbe <Move_Action_Nopid_Left_Ctrl+0xe>
 800cfe2:	4b22      	ldr	r3, [pc, #136]	@ (800d06c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cfe4:	edd3 7a00 	vldr	s15, [r3]
 800cfe8:	eeb1 7a67 	vneg.f32	s14, s15
 800cfec:	edd7 7a00 	vldr	s15, [r7]
 800cff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cff4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cffc:	dd13      	ble.n	800d026 <Move_Action_Nopid_Left_Ctrl+0x276>
 800cffe:	4b1b      	ldr	r3, [pc, #108]	@ (800d06c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800d000:	edd3 7a00 	vldr	s15, [r3]
 800d004:	eeb1 7a67 	vneg.f32	s14, s15
 800d008:	edd7 7a00 	vldr	s15, [r7]
 800d00c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d010:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800d014:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d01c:	bf4c      	ite	mi
 800d01e:	2301      	movmi	r3, #1
 800d020:	2300      	movpl	r3, #0
 800d022:	b2db      	uxtb	r3, r3
 800d024:	e012      	b.n	800d04c <Move_Action_Nopid_Left_Ctrl+0x29c>
 800d026:	4b11      	ldr	r3, [pc, #68]	@ (800d06c <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800d028:	edd3 7a00 	vldr	s15, [r3]
 800d02c:	eeb1 7a67 	vneg.f32	s14, s15
 800d030:	edd7 7a00 	vldr	s15, [r7]
 800d034:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d038:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800d03c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d044:	bfcc      	ite	gt
 800d046:	2301      	movgt	r3, #1
 800d048:	2300      	movle	r3, #0
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d100      	bne.n	800d052 <Move_Action_Nopid_Left_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800d050:	e6b5      	b.n	800cdbe <Move_Action_Nopid_Left_Ctrl+0xe>
			break; /* 到达目标 */
 800d052:	bf00      	nop
		}
	}
}
 800d054:	bf00      	nop
 800d056:	3708      	adds	r7, #8
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	f3af 8000 	nop.w
 800d060:	9999999a 	.word	0x9999999a
 800d064:	402b9999 	.word	0x402b9999
 800d068:	24000af8 	.word	0x24000af8
 800d06c:	24000afc 	.word	0x24000afc

0800d070 <Move_Action_Nopid_Forward_Ctrl>:
void Move_Action_Nopid_Forward_Ctrl(float x_goal, float y_goal) {
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	ed87 0a01 	vstr	s0, [r7, #4]
 800d07a:	edc7 0a00 	vstr	s1, [r7]
	//ACTION调整
	while (1) {

		if ((X_NOW - x_goal) < 0) {
 800d07e:	4baa      	ldr	r3, [pc, #680]	@ (800d328 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d080:	ed93 7a00 	vldr	s14, [r3]
 800d084:	edd7 7a01 	vldr	s15, [r7, #4]
 800d088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d08c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d094:	d52e      	bpl.n	800d0f4 <Move_Action_Nopid_Forward_Ctrl+0x84>
			Move_Line(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d096:	4ba4      	ldr	r3, [pc, #656]	@ (800d328 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d098:	ed93 7a00 	vldr	s14, [r3]
 800d09c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ac:	dd07      	ble.n	800d0be <Move_Action_Nopid_Forward_Ctrl+0x4e>
 800d0ae:	4b9e      	ldr	r3, [pc, #632]	@ (800d328 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d0b0:	ed93 7a00 	vldr	s14, [r3]
 800d0b4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0bc:	e008      	b.n	800d0d0 <Move_Action_Nopid_Forward_Ctrl+0x60>
 800d0be:	4b9a      	ldr	r3, [pc, #616]	@ (800d328 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d0c0:	ed93 7a00 	vldr	s14, [r3]
 800d0c4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0cc:	eef1 7a67 	vneg.f32	s15, s15
 800d0d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d0d4:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800d320 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d0d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d0dc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d0e0:	ee17 2a90 	vmov	r2, s15
 800d0e4:	2164      	movs	r1, #100	@ 0x64
 800d0e6:	2064      	movs	r0, #100	@ 0x64
 800d0e8:	f7ff fa88 	bl	800c5fc <Move_Line>
			HAL_Delay(yanshi);
 800d0ec:	2032      	movs	r0, #50	@ 0x32
 800d0ee:	f7f5 fe1d 	bl	8002d2c <HAL_Delay>
 800d0f2:	e02d      	b.n	800d150 <Move_Action_Nopid_Forward_Ctrl+0xe0>
		} else {
			Move_Back(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d0f4:	4b8c      	ldr	r3, [pc, #560]	@ (800d328 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d0f6:	ed93 7a00 	vldr	s14, [r3]
 800d0fa:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d102:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d10a:	dd07      	ble.n	800d11c <Move_Action_Nopid_Forward_Ctrl+0xac>
 800d10c:	4b86      	ldr	r3, [pc, #536]	@ (800d328 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d10e:	ed93 7a00 	vldr	s14, [r3]
 800d112:	edd7 7a01 	vldr	s15, [r7, #4]
 800d116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d11a:	e008      	b.n	800d12e <Move_Action_Nopid_Forward_Ctrl+0xbe>
 800d11c:	4b82      	ldr	r3, [pc, #520]	@ (800d328 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d11e:	ed93 7a00 	vldr	s14, [r3]
 800d122:	edd7 7a01 	vldr	s15, [r7, #4]
 800d126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d12a:	eef1 7a67 	vneg.f32	s15, s15
 800d12e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d132:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800d320 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d136:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d13a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d13e:	ee17 2a90 	vmov	r2, s15
 800d142:	2164      	movs	r1, #100	@ 0x64
 800d144:	2064      	movs	r0, #100	@ 0x64
 800d146:	f7ff fb0d 	bl	800c764 <Move_Back>
			HAL_Delay(yanshi);
 800d14a:	2032      	movs	r0, #50	@ 0x32
 800d14c:	f7f5 fdee 	bl	8002d2c <HAL_Delay>
		}
		if ((Y_NOW - y_goal) < 0) {
 800d150:	4b76      	ldr	r3, [pc, #472]	@ (800d32c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d152:	edd3 7a00 	vldr	s15, [r3]
 800d156:	eeb1 7a67 	vneg.f32	s14, s15
 800d15a:	edd7 7a00 	vldr	s15, [r7]
 800d15e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d162:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d16a:	d534      	bpl.n	800d1d6 <Move_Action_Nopid_Forward_Ctrl+0x166>
			Move_Right(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d16c:	4b6f      	ldr	r3, [pc, #444]	@ (800d32c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d16e:	edd3 7a00 	vldr	s15, [r3]
 800d172:	eeb1 7a67 	vneg.f32	s14, s15
 800d176:	edd7 7a00 	vldr	s15, [r7]
 800d17a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d17e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d186:	dd09      	ble.n	800d19c <Move_Action_Nopid_Forward_Ctrl+0x12c>
 800d188:	4b68      	ldr	r3, [pc, #416]	@ (800d32c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d18a:	edd3 7a00 	vldr	s15, [r3]
 800d18e:	eeb1 7a67 	vneg.f32	s14, s15
 800d192:	edd7 7a00 	vldr	s15, [r7]
 800d196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d19a:	e00a      	b.n	800d1b2 <Move_Action_Nopid_Forward_Ctrl+0x142>
 800d19c:	4b63      	ldr	r3, [pc, #396]	@ (800d32c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d19e:	edd3 7a00 	vldr	s15, [r3]
 800d1a2:	eeb1 7a67 	vneg.f32	s14, s15
 800d1a6:	edd7 7a00 	vldr	s15, [r7]
 800d1aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1ae:	eef1 7a67 	vneg.f32	s15, s15
 800d1b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d1b6:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800d320 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d1ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d1be:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d1c2:	ee17 2a90 	vmov	r2, s15
 800d1c6:	2164      	movs	r1, #100	@ 0x64
 800d1c8:	2064      	movs	r0, #100	@ 0x64
 800d1ca:	f7ff fb37 	bl	800c83c <Move_Right>
			HAL_Delay(yanshi);
 800d1ce:	2032      	movs	r0, #50	@ 0x32
 800d1d0:	f7f5 fdac 	bl	8002d2c <HAL_Delay>
 800d1d4:	e033      	b.n	800d23e <Move_Action_Nopid_Forward_Ctrl+0x1ce>
		} else {
			Move_Left(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d1d6:	4b55      	ldr	r3, [pc, #340]	@ (800d32c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d1d8:	edd3 7a00 	vldr	s15, [r3]
 800d1dc:	eeb1 7a67 	vneg.f32	s14, s15
 800d1e0:	edd7 7a00 	vldr	s15, [r7]
 800d1e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1f0:	dd09      	ble.n	800d206 <Move_Action_Nopid_Forward_Ctrl+0x196>
 800d1f2:	4b4e      	ldr	r3, [pc, #312]	@ (800d32c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d1f4:	edd3 7a00 	vldr	s15, [r3]
 800d1f8:	eeb1 7a67 	vneg.f32	s14, s15
 800d1fc:	edd7 7a00 	vldr	s15, [r7]
 800d200:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d204:	e00a      	b.n	800d21c <Move_Action_Nopid_Forward_Ctrl+0x1ac>
 800d206:	4b49      	ldr	r3, [pc, #292]	@ (800d32c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d208:	edd3 7a00 	vldr	s15, [r3]
 800d20c:	eeb1 7a67 	vneg.f32	s14, s15
 800d210:	edd7 7a00 	vldr	s15, [r7]
 800d214:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d218:	eef1 7a67 	vneg.f32	s15, s15
 800d21c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d220:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800d320 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d224:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d228:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d22c:	ee17 2a90 	vmov	r2, s15
 800d230:	2164      	movs	r1, #100	@ 0x64
 800d232:	2064      	movs	r0, #100	@ 0x64
 800d234:	f7ff fa3c 	bl	800c6b0 <Move_Left>
			HAL_Delay(yanshi);
 800d238:	2032      	movs	r0, #50	@ 0x32
 800d23a:	f7f5 fd77 	bl	8002d2c <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 5 && ABS(Y_NOW - y_goal) < 5) {
 800d23e:	4b3a      	ldr	r3, [pc, #232]	@ (800d328 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d240:	ed93 7a00 	vldr	s14, [r3]
 800d244:	edd7 7a01 	vldr	s15, [r7, #4]
 800d248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d24c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d254:	dd11      	ble.n	800d27a <Move_Action_Nopid_Forward_Ctrl+0x20a>
 800d256:	4b34      	ldr	r3, [pc, #208]	@ (800d328 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d258:	ed93 7a00 	vldr	s14, [r3]
 800d25c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d260:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d264:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d270:	bf4c      	ite	mi
 800d272:	2301      	movmi	r3, #1
 800d274:	2300      	movpl	r3, #0
 800d276:	b2db      	uxtb	r3, r3
 800d278:	e010      	b.n	800d29c <Move_Action_Nopid_Forward_Ctrl+0x22c>
 800d27a:	4b2b      	ldr	r3, [pc, #172]	@ (800d328 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d27c:	ed93 7a00 	vldr	s14, [r3]
 800d280:	edd7 7a01 	vldr	s15, [r7, #4]
 800d284:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d288:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d28c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d294:	bfcc      	ite	gt
 800d296:	2301      	movgt	r3, #1
 800d298:	2300      	movle	r3, #0
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	f43f aeee 	beq.w	800d07e <Move_Action_Nopid_Forward_Ctrl+0xe>
 800d2a2:	4b22      	ldr	r3, [pc, #136]	@ (800d32c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d2a4:	edd3 7a00 	vldr	s15, [r3]
 800d2a8:	eeb1 7a67 	vneg.f32	s14, s15
 800d2ac:	edd7 7a00 	vldr	s15, [r7]
 800d2b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2bc:	dd13      	ble.n	800d2e6 <Move_Action_Nopid_Forward_Ctrl+0x276>
 800d2be:	4b1b      	ldr	r3, [pc, #108]	@ (800d32c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d2c0:	edd3 7a00 	vldr	s15, [r3]
 800d2c4:	eeb1 7a67 	vneg.f32	s14, s15
 800d2c8:	edd7 7a00 	vldr	s15, [r7]
 800d2cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2d0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d2d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2dc:	bf4c      	ite	mi
 800d2de:	2301      	movmi	r3, #1
 800d2e0:	2300      	movpl	r3, #0
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	e012      	b.n	800d30c <Move_Action_Nopid_Forward_Ctrl+0x29c>
 800d2e6:	4b11      	ldr	r3, [pc, #68]	@ (800d32c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d2e8:	edd3 7a00 	vldr	s15, [r3]
 800d2ec:	eeb1 7a67 	vneg.f32	s14, s15
 800d2f0:	edd7 7a00 	vldr	s15, [r7]
 800d2f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2f8:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d2fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d304:	bfcc      	ite	gt
 800d306:	2301      	movgt	r3, #1
 800d308:	2300      	movle	r3, #0
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d100      	bne.n	800d312 <Move_Action_Nopid_Forward_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800d310:	e6b5      	b.n	800d07e <Move_Action_Nopid_Forward_Ctrl+0xe>
			break; /* 到达目标 */
 800d312:	bf00      	nop
		}
	}
}
 800d314:	bf00      	nop
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	f3af 8000 	nop.w
 800d320:	9999999a 	.word	0x9999999a
 800d324:	402b9999 	.word	0x402b9999
 800d328:	24000af8 	.word	0x24000af8
 800d32c:	24000afc 	.word	0x24000afc

0800d330 <Move_Action_Nopid_Right_Ctrl>:

void Move_Action_Nopid_Right_Ctrl(float x_goal, float y_goal) {
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	ed87 0a01 	vstr	s0, [r7, #4]
 800d33a:	edc7 0a00 	vstr	s1, [r7]
	while (1) {
		if ((X_NOW - x_goal) < 0) {
 800d33e:	4baa      	ldr	r3, [pc, #680]	@ (800d5e8 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d340:	ed93 7a00 	vldr	s14, [r3]
 800d344:	edd7 7a01 	vldr	s15, [r7, #4]
 800d348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d34c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d354:	d52e      	bpl.n	800d3b4 <Move_Action_Nopid_Right_Ctrl+0x84>

			Move_Right(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d356:	4ba4      	ldr	r3, [pc, #656]	@ (800d5e8 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d358:	ed93 7a00 	vldr	s14, [r3]
 800d35c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d360:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d364:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d36c:	dd07      	ble.n	800d37e <Move_Action_Nopid_Right_Ctrl+0x4e>
 800d36e:	4b9e      	ldr	r3, [pc, #632]	@ (800d5e8 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d370:	ed93 7a00 	vldr	s14, [r3]
 800d374:	edd7 7a01 	vldr	s15, [r7, #4]
 800d378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d37c:	e008      	b.n	800d390 <Move_Action_Nopid_Right_Ctrl+0x60>
 800d37e:	4b9a      	ldr	r3, [pc, #616]	@ (800d5e8 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d380:	ed93 7a00 	vldr	s14, [r3]
 800d384:	edd7 7a01 	vldr	s15, [r7, #4]
 800d388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d38c:	eef1 7a67 	vneg.f32	s15, s15
 800d390:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d394:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800d5e0 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d398:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d39c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d3a0:	ee17 2a90 	vmov	r2, s15
 800d3a4:	2164      	movs	r1, #100	@ 0x64
 800d3a6:	2064      	movs	r0, #100	@ 0x64
 800d3a8:	f7ff fa48 	bl	800c83c <Move_Right>
			HAL_Delay(yanshi);
 800d3ac:	2032      	movs	r0, #50	@ 0x32
 800d3ae:	f7f5 fcbd 	bl	8002d2c <HAL_Delay>
 800d3b2:	e02d      	b.n	800d410 <Move_Action_Nopid_Right_Ctrl+0xe0>
		} else {
			Move_Left(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d3b4:	4b8c      	ldr	r3, [pc, #560]	@ (800d5e8 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d3b6:	ed93 7a00 	vldr	s14, [r3]
 800d3ba:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ca:	dd07      	ble.n	800d3dc <Move_Action_Nopid_Right_Ctrl+0xac>
 800d3cc:	4b86      	ldr	r3, [pc, #536]	@ (800d5e8 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d3ce:	ed93 7a00 	vldr	s14, [r3]
 800d3d2:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3da:	e008      	b.n	800d3ee <Move_Action_Nopid_Right_Ctrl+0xbe>
 800d3dc:	4b82      	ldr	r3, [pc, #520]	@ (800d5e8 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d3de:	ed93 7a00 	vldr	s14, [r3]
 800d3e2:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3ea:	eef1 7a67 	vneg.f32	s15, s15
 800d3ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d3f2:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800d5e0 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d3f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d3fe:	ee17 2a90 	vmov	r2, s15
 800d402:	2164      	movs	r1, #100	@ 0x64
 800d404:	2064      	movs	r0, #100	@ 0x64
 800d406:	f7ff f953 	bl	800c6b0 <Move_Left>
			HAL_Delay(yanshi);
 800d40a:	2032      	movs	r0, #50	@ 0x32
 800d40c:	f7f5 fc8e 	bl	8002d2c <HAL_Delay>
		}
		if ((Y_NOW - y_goal) < 0) {
 800d410:	4b76      	ldr	r3, [pc, #472]	@ (800d5ec <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d412:	edd3 7a00 	vldr	s15, [r3]
 800d416:	eeb1 7a67 	vneg.f32	s14, s15
 800d41a:	edd7 7a00 	vldr	s15, [r7]
 800d41e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d422:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d42a:	d534      	bpl.n	800d496 <Move_Action_Nopid_Right_Ctrl+0x166>
			Move_Back(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d42c:	4b6f      	ldr	r3, [pc, #444]	@ (800d5ec <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d42e:	edd3 7a00 	vldr	s15, [r3]
 800d432:	eeb1 7a67 	vneg.f32	s14, s15
 800d436:	edd7 7a00 	vldr	s15, [r7]
 800d43a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d43e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d446:	dd09      	ble.n	800d45c <Move_Action_Nopid_Right_Ctrl+0x12c>
 800d448:	4b68      	ldr	r3, [pc, #416]	@ (800d5ec <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d44a:	edd3 7a00 	vldr	s15, [r3]
 800d44e:	eeb1 7a67 	vneg.f32	s14, s15
 800d452:	edd7 7a00 	vldr	s15, [r7]
 800d456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d45a:	e00a      	b.n	800d472 <Move_Action_Nopid_Right_Ctrl+0x142>
 800d45c:	4b63      	ldr	r3, [pc, #396]	@ (800d5ec <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d45e:	edd3 7a00 	vldr	s15, [r3]
 800d462:	eeb1 7a67 	vneg.f32	s14, s15
 800d466:	edd7 7a00 	vldr	s15, [r7]
 800d46a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d46e:	eef1 7a67 	vneg.f32	s15, s15
 800d472:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d476:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800d5e0 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d47a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d47e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d482:	ee17 2a90 	vmov	r2, s15
 800d486:	2164      	movs	r1, #100	@ 0x64
 800d488:	2064      	movs	r0, #100	@ 0x64
 800d48a:	f7ff f96b 	bl	800c764 <Move_Back>
			HAL_Delay(yanshi);
 800d48e:	2032      	movs	r0, #50	@ 0x32
 800d490:	f7f5 fc4c 	bl	8002d2c <HAL_Delay>
 800d494:	e033      	b.n	800d4fe <Move_Action_Nopid_Right_Ctrl+0x1ce>
		} else {
			Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d496:	4b55      	ldr	r3, [pc, #340]	@ (800d5ec <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d498:	edd3 7a00 	vldr	s15, [r3]
 800d49c:	eeb1 7a67 	vneg.f32	s14, s15
 800d4a0:	edd7 7a00 	vldr	s15, [r7]
 800d4a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4b0:	dd09      	ble.n	800d4c6 <Move_Action_Nopid_Right_Ctrl+0x196>
 800d4b2:	4b4e      	ldr	r3, [pc, #312]	@ (800d5ec <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d4b4:	edd3 7a00 	vldr	s15, [r3]
 800d4b8:	eeb1 7a67 	vneg.f32	s14, s15
 800d4bc:	edd7 7a00 	vldr	s15, [r7]
 800d4c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4c4:	e00a      	b.n	800d4dc <Move_Action_Nopid_Right_Ctrl+0x1ac>
 800d4c6:	4b49      	ldr	r3, [pc, #292]	@ (800d5ec <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d4c8:	edd3 7a00 	vldr	s15, [r3]
 800d4cc:	eeb1 7a67 	vneg.f32	s14, s15
 800d4d0:	edd7 7a00 	vldr	s15, [r7]
 800d4d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4d8:	eef1 7a67 	vneg.f32	s15, s15
 800d4dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d4e0:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800d5e0 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d4e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d4e8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d4ec:	ee17 2a90 	vmov	r2, s15
 800d4f0:	2164      	movs	r1, #100	@ 0x64
 800d4f2:	2064      	movs	r0, #100	@ 0x64
 800d4f4:	f7ff f882 	bl	800c5fc <Move_Line>
			HAL_Delay(yanshi);
 800d4f8:	2032      	movs	r0, #50	@ 0x32
 800d4fa:	f7f5 fc17 	bl	8002d2c <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 5 && ABS(Y_NOW - y_goal) < 5) {
 800d4fe:	4b3a      	ldr	r3, [pc, #232]	@ (800d5e8 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d500:	ed93 7a00 	vldr	s14, [r3]
 800d504:	edd7 7a01 	vldr	s15, [r7, #4]
 800d508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d50c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d514:	dd11      	ble.n	800d53a <Move_Action_Nopid_Right_Ctrl+0x20a>
 800d516:	4b34      	ldr	r3, [pc, #208]	@ (800d5e8 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d518:	ed93 7a00 	vldr	s14, [r3]
 800d51c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d520:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d524:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d530:	bf4c      	ite	mi
 800d532:	2301      	movmi	r3, #1
 800d534:	2300      	movpl	r3, #0
 800d536:	b2db      	uxtb	r3, r3
 800d538:	e010      	b.n	800d55c <Move_Action_Nopid_Right_Ctrl+0x22c>
 800d53a:	4b2b      	ldr	r3, [pc, #172]	@ (800d5e8 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d53c:	ed93 7a00 	vldr	s14, [r3]
 800d540:	edd7 7a01 	vldr	s15, [r7, #4]
 800d544:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d548:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d54c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d554:	bfcc      	ite	gt
 800d556:	2301      	movgt	r3, #1
 800d558:	2300      	movle	r3, #0
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	f43f aeee 	beq.w	800d33e <Move_Action_Nopid_Right_Ctrl+0xe>
 800d562:	4b22      	ldr	r3, [pc, #136]	@ (800d5ec <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d564:	edd3 7a00 	vldr	s15, [r3]
 800d568:	eeb1 7a67 	vneg.f32	s14, s15
 800d56c:	edd7 7a00 	vldr	s15, [r7]
 800d570:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d57c:	dd13      	ble.n	800d5a6 <Move_Action_Nopid_Right_Ctrl+0x276>
 800d57e:	4b1b      	ldr	r3, [pc, #108]	@ (800d5ec <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d580:	edd3 7a00 	vldr	s15, [r3]
 800d584:	eeb1 7a67 	vneg.f32	s14, s15
 800d588:	edd7 7a00 	vldr	s15, [r7]
 800d58c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d590:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d594:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d59c:	bf4c      	ite	mi
 800d59e:	2301      	movmi	r3, #1
 800d5a0:	2300      	movpl	r3, #0
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	e012      	b.n	800d5cc <Move_Action_Nopid_Right_Ctrl+0x29c>
 800d5a6:	4b11      	ldr	r3, [pc, #68]	@ (800d5ec <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d5a8:	edd3 7a00 	vldr	s15, [r3]
 800d5ac:	eeb1 7a67 	vneg.f32	s14, s15
 800d5b0:	edd7 7a00 	vldr	s15, [r7]
 800d5b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5b8:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d5bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5c4:	bfcc      	ite	gt
 800d5c6:	2301      	movgt	r3, #1
 800d5c8:	2300      	movle	r3, #0
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d100      	bne.n	800d5d2 <Move_Action_Nopid_Right_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800d5d0:	e6b5      	b.n	800d33e <Move_Action_Nopid_Right_Ctrl+0xe>
			break; /* 到达目标 */
 800d5d2:	bf00      	nop
		}
	}
}
 800d5d4:	bf00      	nop
 800d5d6:	3708      	adds	r7, #8
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	f3af 8000 	nop.w
 800d5e0:	9999999a 	.word	0x9999999a
 800d5e4:	402b9999 	.word	0x402b9999
 800d5e8:	24000af8 	.word	0x24000af8
 800d5ec:	24000afc 	.word	0x24000afc

0800d5f0 <Move_Tx_Pid_Ctrl>:

/* Tx姿态调整 */
uint16_t time_tx=0;
void Move_Tx_Pid_Ctrl(float TX_X_Goal,float TX_Y_Goal) {
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	ed87 0a01 	vstr	s0, [r7, #4]
 800d5fa:	edc7 0a00 	vstr	s1, [r7]

	while (1) {
	if (TX_Y_out >= 0) {
 800d5fe:	4b72      	ldr	r3, [pc, #456]	@ (800d7c8 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d600:	edd3 7a00 	vldr	s15, [r3]
 800d604:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d60c:	db12      	blt.n	800d634 <Move_Tx_Pid_Ctrl+0x44>
			Move_Right(80, 80, TX_Y_out * 5);
 800d60e:	4b6e      	ldr	r3, [pc, #440]	@ (800d7c8 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d610:	edd3 7a00 	vldr	s15, [r3]
 800d614:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d61c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d620:	ee17 2a90 	vmov	r2, s15
 800d624:	2150      	movs	r1, #80	@ 0x50
 800d626:	2050      	movs	r0, #80	@ 0x50
 800d628:	f7ff f908 	bl	800c83c <Move_Right>
			HAL_Delay(5);
 800d62c:	2005      	movs	r0, #5
 800d62e:	f7f5 fb7d 	bl	8002d2c <HAL_Delay>
 800d632:	e013      	b.n	800d65c <Move_Tx_Pid_Ctrl+0x6c>
		} else {
			Move_Left(80, 80, -TX_Y_out * 5);
 800d634:	4b64      	ldr	r3, [pc, #400]	@ (800d7c8 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d636:	edd3 7a00 	vldr	s15, [r3]
 800d63a:	eef1 7a67 	vneg.f32	s15, s15
 800d63e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d642:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d64a:	ee17 2a90 	vmov	r2, s15
 800d64e:	2150      	movs	r1, #80	@ 0x50
 800d650:	2050      	movs	r0, #80	@ 0x50
 800d652:	f7ff f82d 	bl	800c6b0 <Move_Left>
			HAL_Delay(5);
 800d656:	2005      	movs	r0, #5
 800d658:	f7f5 fb68 	bl	8002d2c <HAL_Delay>
		}

		if (TX_X_out >= 0) {
 800d65c:	4b5b      	ldr	r3, [pc, #364]	@ (800d7cc <Move_Tx_Pid_Ctrl+0x1dc>)
 800d65e:	edd3 7a00 	vldr	s15, [r3]
 800d662:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d66a:	db12      	blt.n	800d692 <Move_Tx_Pid_Ctrl+0xa2>
			Move_Back(80, 80, TX_X_out * 5);
 800d66c:	4b57      	ldr	r3, [pc, #348]	@ (800d7cc <Move_Tx_Pid_Ctrl+0x1dc>)
 800d66e:	edd3 7a00 	vldr	s15, [r3]
 800d672:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d67a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d67e:	ee17 2a90 	vmov	r2, s15
 800d682:	2150      	movs	r1, #80	@ 0x50
 800d684:	2050      	movs	r0, #80	@ 0x50
 800d686:	f7ff f86d 	bl	800c764 <Move_Back>
			HAL_Delay(5);
 800d68a:	2005      	movs	r0, #5
 800d68c:	f7f5 fb4e 	bl	8002d2c <HAL_Delay>
 800d690:	e013      	b.n	800d6ba <Move_Tx_Pid_Ctrl+0xca>
		} else {
			Move_Line(80, 80, -TX_X_out * 5);
 800d692:	4b4e      	ldr	r3, [pc, #312]	@ (800d7cc <Move_Tx_Pid_Ctrl+0x1dc>)
 800d694:	edd3 7a00 	vldr	s15, [r3]
 800d698:	eef1 7a67 	vneg.f32	s15, s15
 800d69c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d6a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6a8:	ee17 2a90 	vmov	r2, s15
 800d6ac:	2150      	movs	r1, #80	@ 0x50
 800d6ae:	2050      	movs	r0, #80	@ 0x50
 800d6b0:	f7fe ffa4 	bl	800c5fc <Move_Line>
			HAL_Delay(5);
 800d6b4:	2005      	movs	r0, #5
 800d6b6:	f7f5 fb39 	bl	8002d2c <HAL_Delay>
		}

		if (ABS(Tx_NOW - 370.5) < 5 && ABS(Ty_NOW -230.5) < 5) {
 800d6ba:	4b45      	ldr	r3, [pc, #276]	@ (800d7d0 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d6bc:	edd3 7a00 	vldr	s15, [r3]
 800d6c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d6c4:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800d7b8 <Move_Tx_Pid_Ctrl+0x1c8>
 800d6c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d6cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d4:	dd13      	ble.n	800d6fe <Move_Tx_Pid_Ctrl+0x10e>
 800d6d6:	4b3e      	ldr	r3, [pc, #248]	@ (800d7d0 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d6d8:	edd3 7a00 	vldr	s15, [r3]
 800d6dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d6e0:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 800d7b8 <Move_Tx_Pid_Ctrl+0x1c8>
 800d6e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d6e8:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 800d6ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6f4:	bf4c      	ite	mi
 800d6f6:	2301      	movmi	r3, #1
 800d6f8:	2300      	movpl	r3, #0
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	e012      	b.n	800d724 <Move_Tx_Pid_Ctrl+0x134>
 800d6fe:	4b34      	ldr	r3, [pc, #208]	@ (800d7d0 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d700:	edd3 7a00 	vldr	s15, [r3]
 800d704:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d708:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 800d7b8 <Move_Tx_Pid_Ctrl+0x1c8>
 800d70c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d710:	eeb9 6b04 	vmov.f64	d6, #148	@ 0xc0a00000 -5.0
 800d714:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d71c:	bfcc      	ite	gt
 800d71e:	2301      	movgt	r3, #1
 800d720:	2300      	movle	r3, #0
 800d722:	b2db      	uxtb	r3, r3
 800d724:	2b00      	cmp	r3, #0
 800d726:	d036      	beq.n	800d796 <Move_Tx_Pid_Ctrl+0x1a6>
 800d728:	4b2a      	ldr	r3, [pc, #168]	@ (800d7d4 <Move_Tx_Pid_Ctrl+0x1e4>)
 800d72a:	edd3 7a00 	vldr	s15, [r3]
 800d72e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d732:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 800d7c0 <Move_Tx_Pid_Ctrl+0x1d0>
 800d736:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d73a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d742:	dd13      	ble.n	800d76c <Move_Tx_Pid_Ctrl+0x17c>
 800d744:	4b23      	ldr	r3, [pc, #140]	@ (800d7d4 <Move_Tx_Pid_Ctrl+0x1e4>)
 800d746:	edd3 7a00 	vldr	s15, [r3]
 800d74a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d74e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 800d7c0 <Move_Tx_Pid_Ctrl+0x1d0>
 800d752:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d756:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 800d75a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d762:	bf4c      	ite	mi
 800d764:	2301      	movmi	r3, #1
 800d766:	2300      	movpl	r3, #0
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	e012      	b.n	800d792 <Move_Tx_Pid_Ctrl+0x1a2>
 800d76c:	4b19      	ldr	r3, [pc, #100]	@ (800d7d4 <Move_Tx_Pid_Ctrl+0x1e4>)
 800d76e:	edd3 7a00 	vldr	s15, [r3]
 800d772:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d776:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 800d7c0 <Move_Tx_Pid_Ctrl+0x1d0>
 800d77a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d77e:	eeb9 6b04 	vmov.f64	d6, #148	@ 0xc0a00000 -5.0
 800d782:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d78a:	bfcc      	ite	gt
 800d78c:	2301      	movgt	r3, #1
 800d78e:	2300      	movle	r3, #0
 800d790:	b2db      	uxtb	r3, r3
 800d792:	2b00      	cmp	r3, #0
 800d794:	d108      	bne.n	800d7a8 <Move_Tx_Pid_Ctrl+0x1b8>
			break;
		}
		if(time_tx>=250)
 800d796:	4b10      	ldr	r3, [pc, #64]	@ (800d7d8 <Move_Tx_Pid_Ctrl+0x1e8>)
 800d798:	881b      	ldrh	r3, [r3, #0]
 800d79a:	2bf9      	cmp	r3, #249	@ 0xf9
 800d79c:	f67f af2f 	bls.w	800d5fe <Move_Tx_Pid_Ctrl+0xe>
		{time_tx=0;
 800d7a0:	4b0d      	ldr	r3, [pc, #52]	@ (800d7d8 <Move_Tx_Pid_Ctrl+0x1e8>)
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	801a      	strh	r2, [r3, #0]
			break;
 800d7a6:	e000      	b.n	800d7aa <Move_Tx_Pid_Ctrl+0x1ba>
			break;
 800d7a8:	bf00      	nop
		}
	}

}
 800d7aa:	bf00      	nop
 800d7ac:	3708      	adds	r7, #8
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	f3af 8000 	nop.w
 800d7b8:	00000000 	.word	0x00000000
 800d7bc:	40772800 	.word	0x40772800
 800d7c0:	00000000 	.word	0x00000000
 800d7c4:	406cd000 	.word	0x406cd000
 800d7c8:	24000c28 	.word	0x24000c28
 800d7cc:	24000c24 	.word	0x24000c24
 800d7d0:	24000454 	.word	0x24000454
 800d7d4:	24000458 	.word	0x24000458
 800d7d8:	24000c34 	.word	0x24000c34

0800d7dc <Host2SCS>:
}

//1个16位数拆分为2个8位数
//DataL为低位，DataH为高位
void Host2SCS(uint8_t *DataL, uint8_t *DataH, int Data)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
	if (End)
 800d7e8:	4b0e      	ldr	r3, [pc, #56]	@ (800d824 <Host2SCS+0x48>)
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d009      	beq.n	800d804 <Host2SCS+0x28>
	{
		*DataL = (Data >> 8);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	121b      	asrs	r3, r3, #8
 800d7f4:	b2da      	uxtb	r2, r3
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	701a      	strb	r2, [r3, #0]
		*DataH = (Data & 0xff);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	b2da      	uxtb	r2, r3
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	701a      	strb	r2, [r3, #0]
	else
	{
		*DataH = (Data >> 8);
		*DataL = (Data & 0xff);
	}
}
 800d802:	e008      	b.n	800d816 <Host2SCS+0x3a>
		*DataH = (Data >> 8);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	121b      	asrs	r3, r3, #8
 800d808:	b2da      	uxtb	r2, r3
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	701a      	strb	r2, [r3, #0]
		*DataL = (Data & 0xff);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	b2da      	uxtb	r2, r3
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	701a      	strb	r2, [r3, #0]
}
 800d816:	bf00      	nop
 800d818:	3714      	adds	r7, #20
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop
 800d824:	24000c36 	.word	0x24000c36

0800d828 <writeBuf>:
	return Data;
}

void writeBuf(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen,
		uint8_t Fun)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b086      	sub	sp, #24
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	603a      	str	r2, [r7, #0]
 800d830:	461a      	mov	r2, r3
 800d832:	4603      	mov	r3, r0
 800d834:	71fb      	strb	r3, [r7, #7]
 800d836:	460b      	mov	r3, r1
 800d838:	71bb      	strb	r3, [r7, #6]
 800d83a:	4613      	mov	r3, r2
 800d83c:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t msgLen = 2;
 800d83e:	2302      	movs	r3, #2
 800d840:	75bb      	strb	r3, [r7, #22]
	uint8_t bBuf[6];
	uint8_t CheckSum = 0;
 800d842:	2300      	movs	r3, #0
 800d844:	73fb      	strb	r3, [r7, #15]
	bBuf[0] = 0xff;
 800d846:	23ff      	movs	r3, #255	@ 0xff
 800d848:	743b      	strb	r3, [r7, #16]
	bBuf[1] = 0xff;
 800d84a:	23ff      	movs	r3, #255	@ 0xff
 800d84c:	747b      	strb	r3, [r7, #17]
	bBuf[2] = ID;
 800d84e:	79fb      	ldrb	r3, [r7, #7]
 800d850:	74bb      	strb	r3, [r7, #18]
	bBuf[4] = Fun;
 800d852:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d856:	753b      	strb	r3, [r7, #20]
	if (nDat)
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d010      	beq.n	800d880 <writeBuf+0x58>
	{
		msgLen += nLen + 1;
 800d85e:	797a      	ldrb	r2, [r7, #5]
 800d860:	7dbb      	ldrb	r3, [r7, #22]
 800d862:	4413      	add	r3, r2
 800d864:	b2db      	uxtb	r3, r3
 800d866:	3301      	adds	r3, #1
 800d868:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = msgLen;
 800d86a:	7dbb      	ldrb	r3, [r7, #22]
 800d86c:	74fb      	strb	r3, [r7, #19]
		bBuf[5] = MemAddr;
 800d86e:	79bb      	ldrb	r3, [r7, #6]
 800d870:	757b      	strb	r3, [r7, #21]
		writeSCS(bBuf, 6);
 800d872:	f107 0310 	add.w	r3, r7, #16
 800d876:	2106      	movs	r1, #6
 800d878:	4618      	mov	r0, r3
 800d87a:	f000 f99b 	bl	800dbb4 <writeSCS>
 800d87e:	e007      	b.n	800d890 <writeBuf+0x68>

	}
	else
	{
		bBuf[3] = msgLen;
 800d880:	7dbb      	ldrb	r3, [r7, #22]
 800d882:	74fb      	strb	r3, [r7, #19]
		writeSCS(bBuf, 5);
 800d884:	f107 0310 	add.w	r3, r7, #16
 800d888:	2105      	movs	r1, #5
 800d88a:	4618      	mov	r0, r3
 800d88c:	f000 f992 	bl	800dbb4 <writeSCS>
	}
	CheckSum = ID + msgLen + Fun + MemAddr;
 800d890:	79fa      	ldrb	r2, [r7, #7]
 800d892:	7dbb      	ldrb	r3, [r7, #22]
 800d894:	4413      	add	r3, r2
 800d896:	b2da      	uxtb	r2, r3
 800d898:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d89c:	4413      	add	r3, r2
 800d89e:	b2da      	uxtb	r2, r3
 800d8a0:	79bb      	ldrb	r3, [r7, #6]
 800d8a2:	4413      	add	r3, r2
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	73fb      	strb	r3, [r7, #15]
	if (nDat)
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d016      	beq.n	800d8dc <writeBuf+0xb4>
	{
		for (i = 0; i < nLen; i++)
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	75fb      	strb	r3, [r7, #23]
 800d8b2:	e00a      	b.n	800d8ca <writeBuf+0xa2>
		{
			CheckSum += nDat[i];
 800d8b4:	7dfb      	ldrb	r3, [r7, #23]
 800d8b6:	683a      	ldr	r2, [r7, #0]
 800d8b8:	4413      	add	r3, r2
 800d8ba:	781a      	ldrb	r2, [r3, #0]
 800d8bc:	7bfb      	ldrb	r3, [r7, #15]
 800d8be:	4413      	add	r3, r2
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < nLen; i++)
 800d8c4:	7dfb      	ldrb	r3, [r7, #23]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	75fb      	strb	r3, [r7, #23]
 800d8ca:	7dfa      	ldrb	r2, [r7, #23]
 800d8cc:	797b      	ldrb	r3, [r7, #5]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d3f0      	bcc.n	800d8b4 <writeBuf+0x8c>
		}
		writeSCS(nDat, nLen);
 800d8d2:	797b      	ldrb	r3, [r7, #5]
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	6838      	ldr	r0, [r7, #0]
 800d8d8:	f000 f96c 	bl	800dbb4 <writeSCS>
	}
	CheckSum = ~CheckSum;
 800d8dc:	7bfb      	ldrb	r3, [r7, #15]
 800d8de:	43db      	mvns	r3, r3
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	73fb      	strb	r3, [r7, #15]
	writeSCS(&CheckSum, 1);
 800d8e4:	f107 030f 	add.w	r3, r7, #15
 800d8e8:	2101      	movs	r1, #1
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f000 f962 	bl	800dbb4 <writeSCS>
}
 800d8f0:	bf00      	nop
 800d8f2:	3718      	adds	r7, #24
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <genWrite>:

//普通写指令
//舵机ID，MemAddr内存表地址，写入数据，写入长度
int genWrite(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af02      	add	r7, sp, #8
 800d8fe:	603a      	str	r2, [r7, #0]
 800d900:	461a      	mov	r2, r3
 800d902:	4603      	mov	r3, r0
 800d904:	71fb      	strb	r3, [r7, #7]
 800d906:	460b      	mov	r3, r1
 800d908:	71bb      	strb	r3, [r7, #6]
 800d90a:	4613      	mov	r3, r2
 800d90c:	717b      	strb	r3, [r7, #5]
	rFlushSCS();
 800d90e:	f000 f990 	bl	800dc32 <rFlushSCS>
	writeBuf(ID, MemAddr, nDat, nLen, INST_WRITE);
 800d912:	797b      	ldrb	r3, [r7, #5]
 800d914:	79b9      	ldrb	r1, [r7, #6]
 800d916:	79f8      	ldrb	r0, [r7, #7]
 800d918:	2203      	movs	r2, #3
 800d91a:	9200      	str	r2, [sp, #0]
 800d91c:	683a      	ldr	r2, [r7, #0]
 800d91e:	f7ff ff83 	bl	800d828 <writeBuf>
	wFlushSCS();
 800d922:	f000 f98d 	bl	800dc40 <wFlushSCS>
	return Ack(ID);
 800d926:	79fb      	ldrb	r3, [r7, #7]
 800d928:	4618      	mov	r0, r3
 800d92a:	f000 f8b9 	bl	800daa0 <Ack>
 800d92e:	4603      	mov	r3, r0
}
 800d930:	4618      	mov	r0, r3
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <Read>:
}

//读指令
//舵机ID，MemAddr内存表地址，返回数据nData，数据长度nLen
int Read(uint8_t ID, uint8_t MemAddr, uint8_t *nData, uint8_t nLen)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b088      	sub	sp, #32
 800d93c:	af02      	add	r7, sp, #8
 800d93e:	603a      	str	r2, [r7, #0]
 800d940:	461a      	mov	r2, r3
 800d942:	4603      	mov	r3, r0
 800d944:	71fb      	strb	r3, [r7, #7]
 800d946:	460b      	mov	r3, r1
 800d948:	71bb      	strb	r3, [r7, #6]
 800d94a:	4613      	mov	r3, r2
 800d94c:	717b      	strb	r3, [r7, #5]
	int Size;
	uint8_t bBuf[4];
	uint8_t calSum;
	uint8_t i;
	rFlushSCS();
 800d94e:	f000 f970 	bl	800dc32 <rFlushSCS>
	writeBuf(ID, MemAddr, &nLen, 1, INST_READ);
 800d952:	1d7a      	adds	r2, r7, #5
 800d954:	79b9      	ldrb	r1, [r7, #6]
 800d956:	79f8      	ldrb	r0, [r7, #7]
 800d958:	2302      	movs	r3, #2
 800d95a:	9300      	str	r3, [sp, #0]
 800d95c:	2301      	movs	r3, #1
 800d95e:	f7ff ff63 	bl	800d828 <writeBuf>
	wFlushSCS();
 800d962:	f000 f96d 	bl	800dc40 <wFlushSCS>
	if (!checkHead())
 800d966:	f000 f872 	bl	800da4e <checkHead>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d101      	bne.n	800d974 <Read+0x3c>
	{
		return 0;
 800d970:	2300      	movs	r3, #0
 800d972:	e04b      	b.n	800da0c <Read+0xd4>
	}
	Error = 0;
 800d974:	4b27      	ldr	r3, [pc, #156]	@ (800da14 <Read+0xdc>)
 800d976:	2200      	movs	r2, #0
 800d978:	701a      	strb	r2, [r3, #0]
	if (readSCS(bBuf, 3) != 3)
 800d97a:	f107 030c 	add.w	r3, r7, #12
 800d97e:	2103      	movs	r1, #3
 800d980:	4618      	mov	r0, r3
 800d982:	f000 f903 	bl	800db8c <readSCS>
 800d986:	4603      	mov	r3, r0
 800d988:	2b03      	cmp	r3, #3
 800d98a:	d001      	beq.n	800d990 <Read+0x58>
	{
		return 0;
 800d98c:	2300      	movs	r3, #0
 800d98e:	e03d      	b.n	800da0c <Read+0xd4>
	}
	Size = readSCS(nData, nLen);
 800d990:	797b      	ldrb	r3, [r7, #5]
 800d992:	4619      	mov	r1, r3
 800d994:	6838      	ldr	r0, [r7, #0]
 800d996:	f000 f8f9 	bl	800db8c <readSCS>
 800d99a:	6138      	str	r0, [r7, #16]
	if (Size != nLen)
 800d99c:	797b      	ldrb	r3, [r7, #5]
 800d99e:	461a      	mov	r2, r3
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d001      	beq.n	800d9aa <Read+0x72>
	{
		return 0;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	e030      	b.n	800da0c <Read+0xd4>
	}
	if (readSCS(bBuf + 3, 1) != 1)
 800d9aa:	f107 030c 	add.w	r3, r7, #12
 800d9ae:	3303      	adds	r3, #3
 800d9b0:	2101      	movs	r1, #1
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f000 f8ea 	bl	800db8c <readSCS>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d001      	beq.n	800d9c2 <Read+0x8a>
	{
		return 0;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	e024      	b.n	800da0c <Read+0xd4>
	}
	calSum = bBuf[0] + bBuf[1] + bBuf[2];
 800d9c2:	7b3a      	ldrb	r2, [r7, #12]
 800d9c4:	7b7b      	ldrb	r3, [r7, #13]
 800d9c6:	4413      	add	r3, r2
 800d9c8:	b2da      	uxtb	r2, r3
 800d9ca:	7bbb      	ldrb	r3, [r7, #14]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < Size; i++)
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	75bb      	strb	r3, [r7, #22]
 800d9d4:	e009      	b.n	800d9ea <Read+0xb2>
	{
		calSum += nData[i];
 800d9d6:	7dbb      	ldrb	r3, [r7, #22]
 800d9d8:	683a      	ldr	r2, [r7, #0]
 800d9da:	4413      	add	r3, r2
 800d9dc:	781a      	ldrb	r2, [r3, #0]
 800d9de:	7dfb      	ldrb	r3, [r7, #23]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < Size; i++)
 800d9e4:	7dbb      	ldrb	r3, [r7, #22]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	75bb      	strb	r3, [r7, #22]
 800d9ea:	7dbb      	ldrb	r3, [r7, #22]
 800d9ec:	693a      	ldr	r2, [r7, #16]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	dcf1      	bgt.n	800d9d6 <Read+0x9e>
	}
	calSum = ~calSum;
 800d9f2:	7dfb      	ldrb	r3, [r7, #23]
 800d9f4:	43db      	mvns	r3, r3
 800d9f6:	75fb      	strb	r3, [r7, #23]
	if (calSum != bBuf[3])
 800d9f8:	7bfb      	ldrb	r3, [r7, #15]
 800d9fa:	7dfa      	ldrb	r2, [r7, #23]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d001      	beq.n	800da04 <Read+0xcc>
	{
		return 0;
 800da00:	2300      	movs	r3, #0
 800da02:	e003      	b.n	800da0c <Read+0xd4>
	}
	Error = bBuf[2];
 800da04:	7bba      	ldrb	r2, [r7, #14]
 800da06:	4b03      	ldr	r3, [pc, #12]	@ (800da14 <Read+0xdc>)
 800da08:	701a      	strb	r2, [r3, #0]
	return Size;
 800da0a:	693b      	ldr	r3, [r7, #16]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3718      	adds	r7, #24
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	24000c37 	.word	0x24000c37

0800da18 <readByte>:

//读1字节，超时返回-1
int readByte(uint8_t ID, uint8_t MemAddr)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	4603      	mov	r3, r0
 800da20:	460a      	mov	r2, r1
 800da22:	71fb      	strb	r3, [r7, #7]
 800da24:	4613      	mov	r3, r2
 800da26:	71bb      	strb	r3, [r7, #6]
	uint8_t bDat;
	int Size = Read(ID, MemAddr, &bDat, 1);
 800da28:	f107 020b 	add.w	r2, r7, #11
 800da2c:	79b9      	ldrb	r1, [r7, #6]
 800da2e:	79f8      	ldrb	r0, [r7, #7]
 800da30:	2301      	movs	r3, #1
 800da32:	f7ff ff81 	bl	800d938 <Read>
 800da36:	60f8      	str	r0, [r7, #12]
	if (Size != 1)
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d002      	beq.n	800da44 <readByte+0x2c>
	{
		return -1;
 800da3e:	f04f 33ff 	mov.w	r3, #4294967295
 800da42:	e000      	b.n	800da46 <readByte+0x2e>
	}
	else
	{
		return bDat;
 800da44:	7afb      	ldrb	r3, [r7, #11]
	}
}
 800da46:	4618      	mov	r0, r3
 800da48:	3710      	adds	r7, #16
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}

0800da4e <checkHead>:
	Error = bBuf[2];
	return bBuf[0];
}

int checkHead(void)
{
 800da4e:	b580      	push	{r7, lr}
 800da50:	b082      	sub	sp, #8
 800da52:	af00      	add	r7, sp, #0
	uint8_t bDat;
	uint8_t bBuf[2] =
 800da54:	2300      	movs	r3, #0
 800da56:	80bb      	strh	r3, [r7, #4]
	{ 0, 0 };
	uint8_t Cnt = 0;
 800da58:	2300      	movs	r3, #0
 800da5a:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		if (!readSCS(&bDat, 1))
 800da5c:	1dbb      	adds	r3, r7, #6
 800da5e:	2101      	movs	r1, #1
 800da60:	4618      	mov	r0, r3
 800da62:	f000 f893 	bl	800db8c <readSCS>
 800da66:	4603      	mov	r3, r0
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d101      	bne.n	800da70 <checkHead+0x22>
		{
			return 0;
 800da6c:	2300      	movs	r3, #0
 800da6e:	e013      	b.n	800da98 <checkHead+0x4a>
		}
		bBuf[1] = bBuf[0];
 800da70:	793b      	ldrb	r3, [r7, #4]
 800da72:	717b      	strb	r3, [r7, #5]
		bBuf[0] = bDat;
 800da74:	79bb      	ldrb	r3, [r7, #6]
 800da76:	713b      	strb	r3, [r7, #4]
		if (bBuf[0] == 0xff && bBuf[1] == 0xff)
 800da78:	793b      	ldrb	r3, [r7, #4]
 800da7a:	2bff      	cmp	r3, #255	@ 0xff
 800da7c:	d102      	bne.n	800da84 <checkHead+0x36>
 800da7e:	797b      	ldrb	r3, [r7, #5]
 800da80:	2bff      	cmp	r3, #255	@ 0xff
 800da82:	d007      	beq.n	800da94 <checkHead+0x46>
		{
			break;
		}
		Cnt++;
 800da84:	79fb      	ldrb	r3, [r7, #7]
 800da86:	3301      	adds	r3, #1
 800da88:	71fb      	strb	r3, [r7, #7]
		if (Cnt > 10)
 800da8a:	79fb      	ldrb	r3, [r7, #7]
 800da8c:	2b0a      	cmp	r3, #10
 800da8e:	d9e5      	bls.n	800da5c <checkHead+0xe>
		{
			return 0;
 800da90:	2300      	movs	r3, #0
 800da92:	e001      	b.n	800da98 <checkHead+0x4a>
			break;
 800da94:	bf00      	nop
		}
	}
	return 1;
 800da96:	2301      	movs	r3, #1
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3708      	adds	r7, #8
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <Ack>:

//指令应答
int Ack(uint8_t ID)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	4603      	mov	r3, r0
 800daa8:	71fb      	strb	r3, [r7, #7]
	uint8_t bBuf[4];
	uint8_t calSum;
	Error = 0;
 800daaa:	4b1f      	ldr	r3, [pc, #124]	@ (800db28 <Ack+0x88>)
 800daac:	2200      	movs	r2, #0
 800daae:	701a      	strb	r2, [r3, #0]
	if (ID != 0xfe && Level)
 800dab0:	79fb      	ldrb	r3, [r7, #7]
 800dab2:	2bfe      	cmp	r3, #254	@ 0xfe
 800dab4:	d032      	beq.n	800db1c <Ack+0x7c>
 800dab6:	4b1d      	ldr	r3, [pc, #116]	@ (800db2c <Ack+0x8c>)
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d02e      	beq.n	800db1c <Ack+0x7c>
	{
		if (!checkHead())
 800dabe:	f7ff ffc6 	bl	800da4e <checkHead>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d101      	bne.n	800dacc <Ack+0x2c>
		{
			return 0;
 800dac8:	2300      	movs	r3, #0
 800daca:	e028      	b.n	800db1e <Ack+0x7e>
		}
		if (readSCS(bBuf, 4) != 4)
 800dacc:	f107 0308 	add.w	r3, r7, #8
 800dad0:	2104      	movs	r1, #4
 800dad2:	4618      	mov	r0, r3
 800dad4:	f000 f85a 	bl	800db8c <readSCS>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b04      	cmp	r3, #4
 800dadc:	d001      	beq.n	800dae2 <Ack+0x42>
		{
			return 0;
 800dade:	2300      	movs	r3, #0
 800dae0:	e01d      	b.n	800db1e <Ack+0x7e>
		}
		if (bBuf[0] != ID)
 800dae2:	7a3b      	ldrb	r3, [r7, #8]
 800dae4:	79fa      	ldrb	r2, [r7, #7]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d001      	beq.n	800daee <Ack+0x4e>
		{
			return 0;
 800daea:	2300      	movs	r3, #0
 800daec:	e017      	b.n	800db1e <Ack+0x7e>
		}
		if (bBuf[1] != 2)
 800daee:	7a7b      	ldrb	r3, [r7, #9]
 800daf0:	2b02      	cmp	r3, #2
 800daf2:	d001      	beq.n	800daf8 <Ack+0x58>
		{
			return 0;
 800daf4:	2300      	movs	r3, #0
 800daf6:	e012      	b.n	800db1e <Ack+0x7e>
		}
		calSum = ~(bBuf[0] + bBuf[1] + bBuf[2]);
 800daf8:	7a3a      	ldrb	r2, [r7, #8]
 800dafa:	7a7b      	ldrb	r3, [r7, #9]
 800dafc:	4413      	add	r3, r2
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	7abb      	ldrb	r3, [r7, #10]
 800db02:	4413      	add	r3, r2
 800db04:	b2db      	uxtb	r3, r3
 800db06:	43db      	mvns	r3, r3
 800db08:	73fb      	strb	r3, [r7, #15]
		if (calSum != bBuf[3])
 800db0a:	7afb      	ldrb	r3, [r7, #11]
 800db0c:	7bfa      	ldrb	r2, [r7, #15]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d001      	beq.n	800db16 <Ack+0x76>
		{
			return 0;
 800db12:	2300      	movs	r3, #0
 800db14:	e003      	b.n	800db1e <Ack+0x7e>
		}
		Error = bBuf[2];
 800db16:	7aba      	ldrb	r2, [r7, #10]
 800db18:	4b03      	ldr	r3, [pc, #12]	@ (800db28 <Ack+0x88>)
 800db1a:	701a      	strb	r2, [r3, #0]
	}
	return 1;
 800db1c:	2301      	movs	r3, #1
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3710      	adds	r7, #16
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	24000c37 	.word	0x24000c37
 800db2c:	24000046 	.word	0x24000046

0800db30 <Uart_Send>:
#include "stm32h7xx_hal.h"
#include "SCS_Uart.h"
#include "usart.h"

void Uart_Send(uint8_t *buf, uint16_t len)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	460b      	mov	r3, r1
 800db3a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart6, buf, len, HAL_MAX_DELAY);
 800db3c:	887a      	ldrh	r2, [r7, #2]
 800db3e:	f04f 33ff 	mov.w	r3, #4294967295
 800db42:	6879      	ldr	r1, [r7, #4]
 800db44:	4803      	ldr	r0, [pc, #12]	@ (800db54 <Uart_Send+0x24>)
 800db46:	f7fa fe83 	bl	8008850 <HAL_UART_Transmit>
}
 800db4a:	bf00      	nop
 800db4c:	3708      	adds	r7, #8
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	240009cc 	.word	0x240009cc

0800db58 <Uart_Read>:

int16_t Uart_Read(uint8_t *buf, uint16_t len, uint32_t timeout)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	60f8      	str	r0, [r7, #12]
 800db60:	460b      	mov	r3, r1
 800db62:	607a      	str	r2, [r7, #4]
 800db64:	817b      	strh	r3, [r7, #10]
	if (HAL_UART_Receive(&huart6, buf, len, timeout) == HAL_OK)
 800db66:	897a      	ldrh	r2, [r7, #10]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	68f9      	ldr	r1, [r7, #12]
 800db6c:	4806      	ldr	r0, [pc, #24]	@ (800db88 <Uart_Read+0x30>)
 800db6e:	f7fa fefd 	bl	800896c <HAL_UART_Receive>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d102      	bne.n	800db7e <Uart_Read+0x26>
	{
		return len;
 800db78:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800db7c:	e000      	b.n	800db80 <Uart_Read+0x28>
	}
	else
	{
		return 0;
 800db7e:	2300      	movs	r3, #0
	}
}
 800db80:	4618      	mov	r0, r3
 800db82:	3710      	adds	r7, #16
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}
 800db88:	240009cc 	.word	0x240009cc

0800db8c <readSCS>:
uint8_t wBuf[128];
uint8_t wLen = 0;

//UART 接收数据接口
int readSCS(unsigned char *nDat, int nLen)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
	return Uart_Read(nDat, nLen, IOTimeOut);
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	b29b      	uxth	r3, r3
 800db9a:	4a05      	ldr	r2, [pc, #20]	@ (800dbb0 <readSCS+0x24>)
 800db9c:	6812      	ldr	r2, [r2, #0]
 800db9e:	4619      	mov	r1, r3
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7ff ffd9 	bl	800db58 <Uart_Read>
 800dba6:	4603      	mov	r3, r0
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3708      	adds	r7, #8
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}
 800dbb0:	24000048 	.word	0x24000048

0800dbb4 <writeSCS>:

//UART 发送数据接口
int writeSCS(unsigned char *nDat, int nLen)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b083      	sub	sp, #12
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
	while (nLen--)
 800dbbe:	e014      	b.n	800dbea <writeSCS+0x36>
	{
		if (wLen < sizeof(wBuf))
 800dbc0:	4b10      	ldr	r3, [pc, #64]	@ (800dc04 <writeSCS+0x50>)
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	b25b      	sxtb	r3, r3
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	db0f      	blt.n	800dbea <writeSCS+0x36>
		{
			wBuf[wLen] = *nDat;
 800dbca:	4b0e      	ldr	r3, [pc, #56]	@ (800dc04 <writeSCS+0x50>)
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	461a      	mov	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	7819      	ldrb	r1, [r3, #0]
 800dbd4:	4b0c      	ldr	r3, [pc, #48]	@ (800dc08 <writeSCS+0x54>)
 800dbd6:	5499      	strb	r1, [r3, r2]
			wLen++;
 800dbd8:	4b0a      	ldr	r3, [pc, #40]	@ (800dc04 <writeSCS+0x50>)
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	b2da      	uxtb	r2, r3
 800dbe0:	4b08      	ldr	r3, [pc, #32]	@ (800dc04 <writeSCS+0x50>)
 800dbe2:	701a      	strb	r2, [r3, #0]
			nDat++;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	607b      	str	r3, [r7, #4]
	while (nLen--)
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	1e5a      	subs	r2, r3, #1
 800dbee:	603a      	str	r2, [r7, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d1e5      	bne.n	800dbc0 <writeSCS+0xc>
		}
	}
	return wLen;
 800dbf4:	4b03      	ldr	r3, [pc, #12]	@ (800dc04 <writeSCS+0x50>)
 800dbf6:	781b      	ldrb	r3, [r3, #0]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	370c      	adds	r7, #12
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr
 800dc04:	24000cb8 	.word	0x24000cb8
 800dc08:	24000c38 	.word	0x24000c38

0800dc0c <nopDelay>:
	return wLen;
}

//等待舵机总线切换(约8us)
void nopDelay(void)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
	uint16_t i = 500;
 800dc12:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800dc16:	80fb      	strh	r3, [r7, #6]
	while (i--)
 800dc18:	bf00      	nop
 800dc1a:	88fb      	ldrh	r3, [r7, #6]
 800dc1c:	1e5a      	subs	r2, r3, #1
 800dc1e:	80fa      	strh	r2, [r7, #6]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1fa      	bne.n	800dc1a <nopDelay+0xe>
		;
}
 800dc24:	bf00      	nop
 800dc26:	bf00      	nop
 800dc28:	370c      	adds	r7, #12
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr

0800dc32 <rFlushSCS>:

//接收缓冲区刷新
void rFlushSCS()
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	af00      	add	r7, sp, #0
	nopDelay();
 800dc36:	f7ff ffe9 	bl	800dc0c <nopDelay>
}
 800dc3a:	bf00      	nop
 800dc3c:	bd80      	pop	{r7, pc}
	...

0800dc40 <wFlushSCS>:

//发送缓冲区刷新
void wFlushSCS()
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	af00      	add	r7, sp, #0
	if (wLen)
 800dc44:	4b07      	ldr	r3, [pc, #28]	@ (800dc64 <wFlushSCS+0x24>)
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d008      	beq.n	800dc5e <wFlushSCS+0x1e>
	{
		Uart_Send(wBuf, wLen);
 800dc4c:	4b05      	ldr	r3, [pc, #20]	@ (800dc64 <wFlushSCS+0x24>)
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	4619      	mov	r1, r3
 800dc52:	4805      	ldr	r0, [pc, #20]	@ (800dc68 <wFlushSCS+0x28>)
 800dc54:	f7ff ff6c 	bl	800db30 <Uart_Send>
		wLen = 0;
 800dc58:	4b02      	ldr	r3, [pc, #8]	@ (800dc64 <wFlushSCS+0x24>)
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	701a      	strb	r2, [r3, #0]
	}
}
 800dc5e:	bf00      	nop
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	24000cb8 	.word	0x24000cb8
 800dc68:	24000c38 	.word	0x24000c38

0800dc6c <WritePosEx>:
{
	return Err;
}

int WritePosEx(uint8_t ID, int16_t Position, uint16_t Speed, uint8_t ACC)
{
 800dc6c:	b590      	push	{r4, r7, lr}
 800dc6e:	b085      	sub	sp, #20
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	4604      	mov	r4, r0
 800dc74:	4608      	mov	r0, r1
 800dc76:	4611      	mov	r1, r2
 800dc78:	461a      	mov	r2, r3
 800dc7a:	4623      	mov	r3, r4
 800dc7c:	71fb      	strb	r3, [r7, #7]
 800dc7e:	4603      	mov	r3, r0
 800dc80:	80bb      	strh	r3, [r7, #4]
 800dc82:	460b      	mov	r3, r1
 800dc84:	807b      	strh	r3, [r7, #2]
 800dc86:	4613      	mov	r3, r2
 800dc88:	71bb      	strb	r3, [r7, #6]
	uint8_t bBuf[7];
	if (Position < 0)
 800dc8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	da09      	bge.n	800dca6 <WritePosEx+0x3a>
	{
		Position = -Position;
 800dc92:	88bb      	ldrh	r3, [r7, #4]
 800dc94:	425b      	negs	r3, r3
 800dc96:	b29b      	uxth	r3, r3
 800dc98:	80bb      	strh	r3, [r7, #4]
		Position |= (1 << 15);
 800dc9a:	88bb      	ldrh	r3, [r7, #4]
 800dc9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dca4:	80bb      	strh	r3, [r7, #4]
	}

	bBuf[0] = ACC;
 800dca6:	79bb      	ldrb	r3, [r7, #6]
 800dca8:	723b      	strb	r3, [r7, #8]
	Host2SCS(bBuf + 1, bBuf + 2, Position);
 800dcaa:	f107 0308 	add.w	r3, r7, #8
 800dcae:	3301      	adds	r3, #1
 800dcb0:	f107 0108 	add.w	r1, r7, #8
 800dcb4:	3102      	adds	r1, #2
 800dcb6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7ff fd8e 	bl	800d7dc <Host2SCS>
	Host2SCS(bBuf + 3, bBuf + 4, 0);
 800dcc0:	f107 0308 	add.w	r3, r7, #8
 800dcc4:	3303      	adds	r3, #3
 800dcc6:	f107 0108 	add.w	r1, r7, #8
 800dcca:	3104      	adds	r1, #4
 800dccc:	2200      	movs	r2, #0
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7ff fd84 	bl	800d7dc <Host2SCS>
	Host2SCS(bBuf + 5, bBuf + 6, Speed);
 800dcd4:	f107 0308 	add.w	r3, r7, #8
 800dcd8:	3305      	adds	r3, #5
 800dcda:	f107 0108 	add.w	r1, r7, #8
 800dcde:	3106      	adds	r1, #6
 800dce0:	887a      	ldrh	r2, [r7, #2]
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7ff fd7a 	bl	800d7dc <Host2SCS>

	return genWrite(ID, SMS_STS_ACC, bBuf, 7);
 800dce8:	f107 0208 	add.w	r2, r7, #8
 800dcec:	79f8      	ldrb	r0, [r7, #7]
 800dcee:	2307      	movs	r3, #7
 800dcf0:	2129      	movs	r1, #41	@ 0x29
 800dcf2:	f7ff fe01 	bl	800d8f8 <genWrite>
 800dcf6:	4603      	mov	r3, r0
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3714      	adds	r7, #20
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd90      	pop	{r4, r7, pc}

0800dd00 <ReadMove>:
	}
	return Temper;
}

int ReadMove(int ID)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
	int Move = -1;
 800dd08:	f04f 33ff 	mov.w	r3, #4294967295
 800dd0c:	60fb      	str	r3, [r7, #12]
	if (ID == -1)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd14:	d103      	bne.n	800dd1e <ReadMove+0x1e>
	{
		Move = Mem[SMS_STS_MOVING - SMS_STS_PRESENT_POSITION_L];
 800dd16:	4b0d      	ldr	r3, [pc, #52]	@ (800dd4c <ReadMove+0x4c>)
 800dd18:	7a9b      	ldrb	r3, [r3, #10]
 800dd1a:	60fb      	str	r3, [r7, #12]
 800dd1c:	e010      	b.n	800dd40 <ReadMove+0x40>
	}
	else
	{
		Err = 0;
 800dd1e:	4b0c      	ldr	r3, [pc, #48]	@ (800dd50 <ReadMove+0x50>)
 800dd20:	2200      	movs	r2, #0
 800dd22:	601a      	str	r2, [r3, #0]
		Move = readByte(ID, SMS_STS_MOVING);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	2142      	movs	r1, #66	@ 0x42
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7ff fe74 	bl	800da18 <readByte>
 800dd30:	60f8      	str	r0, [r7, #12]
		if (Move == -1)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd38:	d102      	bne.n	800dd40 <ReadMove+0x40>
		{
			Err = 1;
 800dd3a:	4b05      	ldr	r3, [pc, #20]	@ (800dd50 <ReadMove+0x50>)
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	601a      	str	r2, [r3, #0]
		}
	}
	return Move;
 800dd40:	68fb      	ldr	r3, [r7, #12]
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	24000cbc 	.word	0x24000cbc
 800dd50:	24000ccc 	.word	0x24000ccc

0800dd54 <Action_Show>:
extern float x;
extern float y;
extern int colour;
extern char Point_Flag;

void Action_Show(void) {
 800dd54:	b580      	push	{r7, lr}
 800dd56:	af00      	add	r7, sp, #0
	sprintf(Z_str, "%.2f", zangle);
 800dd58:	4b30      	ldr	r3, [pc, #192]	@ (800de1c <Action_Show+0xc8>)
 800dd5a:	edd3 7a00 	vldr	s15, [r3]
 800dd5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dd62:	ec53 2b17 	vmov	r2, r3, d7
 800dd66:	492e      	ldr	r1, [pc, #184]	@ (800de20 <Action_Show+0xcc>)
 800dd68:	482e      	ldr	r0, [pc, #184]	@ (800de24 <Action_Show+0xd0>)
 800dd6a:	f002 f8b7 	bl	800fedc <siprintf>
	sprintf(X_srt, "%.2f", pos_x);
 800dd6e:	4b2e      	ldr	r3, [pc, #184]	@ (800de28 <Action_Show+0xd4>)
 800dd70:	edd3 7a00 	vldr	s15, [r3]
 800dd74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dd78:	ec53 2b17 	vmov	r2, r3, d7
 800dd7c:	4928      	ldr	r1, [pc, #160]	@ (800de20 <Action_Show+0xcc>)
 800dd7e:	482b      	ldr	r0, [pc, #172]	@ (800de2c <Action_Show+0xd8>)
 800dd80:	f002 f8ac 	bl	800fedc <siprintf>
	sprintf(Y_srt, "%.2f", pos_y);
 800dd84:	4b2a      	ldr	r3, [pc, #168]	@ (800de30 <Action_Show+0xdc>)
 800dd86:	edd3 7a00 	vldr	s15, [r3]
 800dd8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dd8e:	ec53 2b17 	vmov	r2, r3, d7
 800dd92:	4923      	ldr	r1, [pc, #140]	@ (800de20 <Action_Show+0xcc>)
 800dd94:	4827      	ldr	r0, [pc, #156]	@ (800de34 <Action_Show+0xe0>)
 800dd96:	f002 f8a1 	bl	800fedc <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) "Z_Angle.txt=\"",
 800dd9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd9e:	220d      	movs	r2, #13
 800dda0:	4925      	ldr	r1, [pc, #148]	@ (800de38 <Action_Show+0xe4>)
 800dda2:	4826      	ldr	r0, [pc, #152]	@ (800de3c <Action_Show+0xe8>)
 800dda4:	f7fa fd54 	bl	8008850 <HAL_UART_Transmit>
			sizeof("Z_Angle.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Z_str, sizeof(X_srt) - 1, 0xffff);
 800dda8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ddac:	2213      	movs	r2, #19
 800ddae:	491d      	ldr	r1, [pc, #116]	@ (800de24 <Action_Show+0xd0>)
 800ddb0:	4822      	ldr	r0, [pc, #136]	@ (800de3c <Action_Show+0xe8>)
 800ddb2:	f7fa fd4d 	bl	8008850 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800ddb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ddba:	2204      	movs	r2, #4
 800ddbc:	4920      	ldr	r1, [pc, #128]	@ (800de40 <Action_Show+0xec>)
 800ddbe:	481f      	ldr	r0, [pc, #124]	@ (800de3c <Action_Show+0xe8>)
 800ddc0:	f7fa fd46 	bl	8008850 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "X_Point.txt=\"",
 800ddc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ddc8:	220d      	movs	r2, #13
 800ddca:	491e      	ldr	r1, [pc, #120]	@ (800de44 <Action_Show+0xf0>)
 800ddcc:	481b      	ldr	r0, [pc, #108]	@ (800de3c <Action_Show+0xe8>)
 800ddce:	f7fa fd3f 	bl	8008850 <HAL_UART_Transmit>
			sizeof("X_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) X_srt, sizeof(X_srt) - 1, 0xffff);
 800ddd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ddd6:	2213      	movs	r2, #19
 800ddd8:	4914      	ldr	r1, [pc, #80]	@ (800de2c <Action_Show+0xd8>)
 800ddda:	4818      	ldr	r0, [pc, #96]	@ (800de3c <Action_Show+0xe8>)
 800dddc:	f7fa fd38 	bl	8008850 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800dde0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dde4:	2204      	movs	r2, #4
 800dde6:	4916      	ldr	r1, [pc, #88]	@ (800de40 <Action_Show+0xec>)
 800dde8:	4814      	ldr	r0, [pc, #80]	@ (800de3c <Action_Show+0xe8>)
 800ddea:	f7fa fd31 	bl	8008850 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "Y_Point.txt=\"",
 800ddee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ddf2:	220d      	movs	r2, #13
 800ddf4:	4914      	ldr	r1, [pc, #80]	@ (800de48 <Action_Show+0xf4>)
 800ddf6:	4811      	ldr	r0, [pc, #68]	@ (800de3c <Action_Show+0xe8>)
 800ddf8:	f7fa fd2a 	bl	8008850 <HAL_UART_Transmit>
			sizeof("Y_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_srt, sizeof(X_srt) - 1, 0xffff);
 800ddfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de00:	2213      	movs	r2, #19
 800de02:	490c      	ldr	r1, [pc, #48]	@ (800de34 <Action_Show+0xe0>)
 800de04:	480d      	ldr	r0, [pc, #52]	@ (800de3c <Action_Show+0xe8>)
 800de06:	f7fa fd23 	bl	8008850 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800de0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de0e:	2204      	movs	r2, #4
 800de10:	490b      	ldr	r1, [pc, #44]	@ (800de40 <Action_Show+0xec>)
 800de12:	480a      	ldr	r0, [pc, #40]	@ (800de3c <Action_Show+0xe8>)
 800de14:	f7fa fd1c 	bl	8008850 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);
}
 800de18:	bf00      	nop
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	24000b00 	.word	0x24000b00
 800de20:	080131f0 	.word	0x080131f0
 800de24:	24000cd0 	.word	0x24000cd0
 800de28:	24000af8 	.word	0x24000af8
 800de2c:	24000cd8 	.word	0x24000cd8
 800de30:	24000afc 	.word	0x24000afc
 800de34:	24000cec 	.word	0x24000cec
 800de38:	080131f8 	.word	0x080131f8
 800de3c:	240005c0 	.word	0x240005c0
 800de40:	08013208 	.word	0x08013208
 800de44:	08013210 	.word	0x08013210
 800de48:	08013220 	.word	0x08013220

0800de4c <QR_Show>:
extern int QR_data[6];
void QR_Show(void) {
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++) {
 800de52:	2300      	movs	r3, #0
 800de54:	607b      	str	r3, [r7, #4]
 800de56:	e00d      	b.n	800de74 <QR_Show+0x28>
		sprintf(&Y_pid[i], "%d", QR_data[i]);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4a14      	ldr	r2, [pc, #80]	@ (800deac <QR_Show+0x60>)
 800de5c:	1898      	adds	r0, r3, r2
 800de5e:	4a14      	ldr	r2, [pc, #80]	@ (800deb0 <QR_Show+0x64>)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de66:	461a      	mov	r2, r3
 800de68:	4912      	ldr	r1, [pc, #72]	@ (800deb4 <QR_Show+0x68>)
 800de6a:	f002 f837 	bl	800fedc <siprintf>
	for (int i = 0; i < 6; i++) {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	3301      	adds	r3, #1
 800de72:	607b      	str	r3, [r7, #4]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2b05      	cmp	r3, #5
 800de78:	ddee      	ble.n	800de58 <QR_Show+0xc>
	}
	HAL_UART_Transmit(&huart4, (uint8_t*) "QR.txt=\"", sizeof("QR.txt=\"") - 1,
 800de7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de7e:	2208      	movs	r2, #8
 800de80:	490d      	ldr	r1, [pc, #52]	@ (800deb8 <QR_Show+0x6c>)
 800de82:	480e      	ldr	r0, [pc, #56]	@ (800debc <QR_Show+0x70>)
 800de84:	f7fa fce4 	bl	8008850 <HAL_UART_Transmit>
			0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_pid, sizeof(Y_pid) - 1, 0xffff);
 800de88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de8c:	2213      	movs	r2, #19
 800de8e:	4907      	ldr	r1, [pc, #28]	@ (800deac <QR_Show+0x60>)
 800de90:	480a      	ldr	r0, [pc, #40]	@ (800debc <QR_Show+0x70>)
 800de92:	f7fa fcdd 	bl	8008850 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800de96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de9a:	2204      	movs	r2, #4
 800de9c:	4908      	ldr	r1, [pc, #32]	@ (800dec0 <QR_Show+0x74>)
 800de9e:	4807      	ldr	r0, [pc, #28]	@ (800debc <QR_Show+0x70>)
 800dea0:	f7fa fcd6 	bl	8008850 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart4, (uint8_t*) QR_data, sizeof(QR_data) - 1, 0xffff);
	 HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
	 sizeof("\"\xff\xff\xff") - 1, 0xffff);
	 */

}
 800dea4:	bf00      	nop
 800dea6:	3708      	adds	r7, #8
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	24000d00 	.word	0x24000d00
 800deb0:	24000460 	.word	0x24000460
 800deb4:	08013230 	.word	0x08013230
 800deb8:	08013234 	.word	0x08013234
 800debc:	240005c0 	.word	0x240005c0
 800dec0:	08013208 	.word	0x08013208

0800dec4 <Point_Show>:
// 抓取过程标志位，值为目标颜色
extern char Match_Flag;
// 抓取计算稳定性标志位，0为识别有故障,1为正常计算
extern char Check_flag;
// TODO：屏幕缺失字符"+",暂时判断为编码格式问题，需要通过串口助手确定编码格式
void Point_Show(void) {
 800dec4:	b580      	push	{r7, lr}
 800dec6:	af00      	add	r7, sp, #0
	if(Point_Flag == 0)
 800dec8:	4b36      	ldr	r3, [pc, #216]	@ (800dfa4 <Point_Show+0xe0>)
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d066      	beq.n	800df9e <Point_Show+0xda>
	{
//		TX2点位数据还未接收，结束该函数
		return ;
	}
	Point_Flag = 0;
 800ded0:	4b34      	ldr	r3, [pc, #208]	@ (800dfa4 <Point_Show+0xe0>)
 800ded2:	2200      	movs	r2, #0
 800ded4:	701a      	strb	r2, [r3, #0]
//	在抓取过程中,进行颜色校验，如果颜色与抓取目标颜色不同，则放弃该帧数据，并传递放弃稳定性计算标志位
	if(Match_Flag != colour)
 800ded6:	4b34      	ldr	r3, [pc, #208]	@ (800dfa8 <Point_Show+0xe4>)
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	461a      	mov	r2, r3
 800dedc:	4b33      	ldr	r3, [pc, #204]	@ (800dfac <Point_Show+0xe8>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d003      	beq.n	800deec <Point_Show+0x28>
		Check_flag = 0;
 800dee4:	4b32      	ldr	r3, [pc, #200]	@ (800dfb0 <Point_Show+0xec>)
 800dee6:	2200      	movs	r2, #0
 800dee8:	701a      	strb	r2, [r3, #0]
 800deea:	e002      	b.n	800def2 <Point_Show+0x2e>
	else
		Check_flag = 1;
 800deec:	4b30      	ldr	r3, [pc, #192]	@ (800dfb0 <Point_Show+0xec>)
 800deee:	2201      	movs	r2, #1
 800def0:	701a      	strb	r2, [r3, #0]
	sprintf(TX2_X_Point, "%.2f", x);
 800def2:	4b30      	ldr	r3, [pc, #192]	@ (800dfb4 <Point_Show+0xf0>)
 800def4:	edd3 7a00 	vldr	s15, [r3]
 800def8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800defc:	ec53 2b17 	vmov	r2, r3, d7
 800df00:	492d      	ldr	r1, [pc, #180]	@ (800dfb8 <Point_Show+0xf4>)
 800df02:	482e      	ldr	r0, [pc, #184]	@ (800dfbc <Point_Show+0xf8>)
 800df04:	f001 ffea 	bl	800fedc <siprintf>
	sprintf(TX2_Y_Point, "%.2f", y);
 800df08:	4b2d      	ldr	r3, [pc, #180]	@ (800dfc0 <Point_Show+0xfc>)
 800df0a:	edd3 7a00 	vldr	s15, [r3]
 800df0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800df12:	ec53 2b17 	vmov	r2, r3, d7
 800df16:	4928      	ldr	r1, [pc, #160]	@ (800dfb8 <Point_Show+0xf4>)
 800df18:	482a      	ldr	r0, [pc, #168]	@ (800dfc4 <Point_Show+0x100>)
 800df1a:	f001 ffdf 	bl	800fedc <siprintf>
	sprintf(TX2_Color, "%d", colour);
 800df1e:	4b23      	ldr	r3, [pc, #140]	@ (800dfac <Point_Show+0xe8>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	461a      	mov	r2, r3
 800df24:	4928      	ldr	r1, [pc, #160]	@ (800dfc8 <Point_Show+0x104>)
 800df26:	4829      	ldr	r0, [pc, #164]	@ (800dfcc <Point_Show+0x108>)
 800df28:	f001 ffd8 	bl	800fedc <siprintf>
//	开始发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Point.txt=\"",sizeof("Point.txt=\"") - 1, 0xffff);
 800df2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df30:	220b      	movs	r2, #11
 800df32:	4927      	ldr	r1, [pc, #156]	@ (800dfd0 <Point_Show+0x10c>)
 800df34:	4827      	ldr	r0, [pc, #156]	@ (800dfd4 <Point_Show+0x110>)
 800df36:	f7fa fc8b 	bl	8008850 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_X_Point, sizeof(TX2_X_Point) - 2, 0xffff);
 800df3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df3e:	2206      	movs	r2, #6
 800df40:	491e      	ldr	r1, [pc, #120]	@ (800dfbc <Point_Show+0xf8>)
 800df42:	4824      	ldr	r0, [pc, #144]	@ (800dfd4 <Point_Show+0x110>)
 800df44:	f7fa fc84 	bl	8008850 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "+", sizeof("+")-2, 0xffff);
 800df48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df4c:	2200      	movs	r2, #0
 800df4e:	4922      	ldr	r1, [pc, #136]	@ (800dfd8 <Point_Show+0x114>)
 800df50:	4820      	ldr	r0, [pc, #128]	@ (800dfd4 <Point_Show+0x110>)
 800df52:	f7fa fc7d 	bl	8008850 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Y_Point, sizeof(TX2_Y_Point) - 1, 0xffff);
 800df56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df5a:	2207      	movs	r2, #7
 800df5c:	4919      	ldr	r1, [pc, #100]	@ (800dfc4 <Point_Show+0x100>)
 800df5e:	481d      	ldr	r0, [pc, #116]	@ (800dfd4 <Point_Show+0x110>)
 800df60:	f7fa fc76 	bl	8008850 <HAL_UART_Transmit>
//	结束发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800df64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df68:	2204      	movs	r2, #4
 800df6a:	491c      	ldr	r1, [pc, #112]	@ (800dfdc <Point_Show+0x118>)
 800df6c:	4819      	ldr	r0, [pc, #100]	@ (800dfd4 <Point_Show+0x110>)
 800df6e:	f7fa fc6f 	bl	8008850 <HAL_UART_Transmit>

//	开始发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Color.txt=\"",sizeof("Color.txt=\"") - 1, 0xffff);
 800df72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df76:	220b      	movs	r2, #11
 800df78:	4919      	ldr	r1, [pc, #100]	@ (800dfe0 <Point_Show+0x11c>)
 800df7a:	4816      	ldr	r0, [pc, #88]	@ (800dfd4 <Point_Show+0x110>)
 800df7c:	f7fa fc68 	bl	8008850 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Color, sizeof(TX2_Color)-1 , 0xffff);
 800df80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df84:	2201      	movs	r2, #1
 800df86:	4911      	ldr	r1, [pc, #68]	@ (800dfcc <Point_Show+0x108>)
 800df88:	4812      	ldr	r0, [pc, #72]	@ (800dfd4 <Point_Show+0x110>)
 800df8a:	f7fa fc61 	bl	8008850 <HAL_UART_Transmit>

//	结束发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800df8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df92:	2204      	movs	r2, #4
 800df94:	4911      	ldr	r1, [pc, #68]	@ (800dfdc <Point_Show+0x118>)
 800df96:	480f      	ldr	r0, [pc, #60]	@ (800dfd4 <Point_Show+0x110>)
 800df98:	f7fa fc5a 	bl	8008850 <HAL_UART_Transmit>
 800df9c:	e000      	b.n	800dfa0 <Point_Show+0xdc>
		return ;
 800df9e:	bf00      	nop
}
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	2400045c 	.word	0x2400045c
 800dfa8:	24000488 	.word	0x24000488
 800dfac:	2400047c 	.word	0x2400047c
 800dfb0:	24000489 	.word	0x24000489
 800dfb4:	24000454 	.word	0x24000454
 800dfb8:	080131f0 	.word	0x080131f0
 800dfbc:	24000d14 	.word	0x24000d14
 800dfc0:	24000458 	.word	0x24000458
 800dfc4:	24000d1c 	.word	0x24000d1c
 800dfc8:	08013230 	.word	0x08013230
 800dfcc:	24000d24 	.word	0x24000d24
 800dfd0:	08013240 	.word	0x08013240
 800dfd4:	240005c0 	.word	0x240005c0
 800dfd8:	0801324c 	.word	0x0801324c
 800dfdc:	08013208 	.word	0x08013208
 800dfe0:	08013250 	.word	0x08013250

0800dfe4 <Check_Flag>:

void Check_Flag(uint8_t rec) {
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	4603      	mov	r3, r0
 800dfec:	71fb      	strb	r3, [r7, #7]
	static uint8_t ch;
	static uint8_t count = 0;

	ch = rec;
 800dfee:	4a45      	ldr	r2, [pc, #276]	@ (800e104 <Check_Flag+0x120>)
 800dff0:	79fb      	ldrb	r3, [r7, #7]
 800dff2:	7013      	strb	r3, [r2, #0]

	switch (count) {
 800dff4:	4b44      	ldr	r3, [pc, #272]	@ (800e108 <Check_Flag+0x124>)
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	2b05      	cmp	r3, #5
 800dffa:	d876      	bhi.n	800e0ea <Check_Flag+0x106>
 800dffc:	a201      	add	r2, pc, #4	@ (adr r2, 800e004 <Check_Flag+0x20>)
 800dffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e002:	bf00      	nop
 800e004:	0800e01d 	.word	0x0800e01d
 800e008:	0800e055 	.word	0x0800e055
 800e00c:	0800e07b 	.word	0x0800e07b
 800e010:	0800e099 	.word	0x0800e099
 800e014:	0800e0b7 	.word	0x0800e0b7
 800e018:	0800e0d5 	.word	0x0800e0d5
	case 0:
		if (ch == 'G')
 800e01c:	4b39      	ldr	r3, [pc, #228]	@ (800e104 <Check_Flag+0x120>)
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	2b47      	cmp	r3, #71	@ 0x47
 800e022:	d103      	bne.n	800e02c <Check_Flag+0x48>
			count = 1;
 800e024:	4b38      	ldr	r3, [pc, #224]	@ (800e108 <Check_Flag+0x124>)
 800e026:	2201      	movs	r2, #1
 800e028:	701a      	strb	r2, [r3, #0]
			count = 2;
		else if (ch == 'M')
			count = 4;
		else
			count = 0;
		break;
 800e02a:	e065      	b.n	800e0f8 <Check_Flag+0x114>
		else if (ch == 'R')
 800e02c:	4b35      	ldr	r3, [pc, #212]	@ (800e104 <Check_Flag+0x120>)
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	2b52      	cmp	r3, #82	@ 0x52
 800e032:	d103      	bne.n	800e03c <Check_Flag+0x58>
			count = 2;
 800e034:	4b34      	ldr	r3, [pc, #208]	@ (800e108 <Check_Flag+0x124>)
 800e036:	2202      	movs	r2, #2
 800e038:	701a      	strb	r2, [r3, #0]
		break;
 800e03a:	e05d      	b.n	800e0f8 <Check_Flag+0x114>
		else if (ch == 'M')
 800e03c:	4b31      	ldr	r3, [pc, #196]	@ (800e104 <Check_Flag+0x120>)
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	2b4d      	cmp	r3, #77	@ 0x4d
 800e042:	d103      	bne.n	800e04c <Check_Flag+0x68>
			count = 4;
 800e044:	4b30      	ldr	r3, [pc, #192]	@ (800e108 <Check_Flag+0x124>)
 800e046:	2204      	movs	r2, #4
 800e048:	701a      	strb	r2, [r3, #0]
		break;
 800e04a:	e055      	b.n	800e0f8 <Check_Flag+0x114>
			count = 0;
 800e04c:	4b2e      	ldr	r3, [pc, #184]	@ (800e108 <Check_Flag+0x124>)
 800e04e:	2200      	movs	r2, #0
 800e050:	701a      	strb	r2, [r3, #0]
		break;
 800e052:	e051      	b.n	800e0f8 <Check_Flag+0x114>
	case 1:
		if (ch == 'o') {
 800e054:	4b2b      	ldr	r3, [pc, #172]	@ (800e104 <Check_Flag+0x120>)
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	2b6f      	cmp	r3, #111	@ 0x6f
 800e05a:	d106      	bne.n	800e06a <Check_Flag+0x86>
			System_Flag = 1;
 800e05c:	4b2b      	ldr	r3, [pc, #172]	@ (800e10c <Check_Flag+0x128>)
 800e05e:	2201      	movs	r2, #1
 800e060:	701a      	strb	r2, [r3, #0]
			count = 0;
 800e062:	4b29      	ldr	r3, [pc, #164]	@ (800e108 <Check_Flag+0x124>)
 800e064:	2200      	movs	r2, #0
 800e066:	701a      	strb	r2, [r3, #0]
		} else if (ch == 'G')
			;
		else
			count = 0;
		break;
 800e068:	e043      	b.n	800e0f2 <Check_Flag+0x10e>
		} else if (ch == 'G')
 800e06a:	4b26      	ldr	r3, [pc, #152]	@ (800e104 <Check_Flag+0x120>)
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	2b47      	cmp	r3, #71	@ 0x47
 800e070:	d03f      	beq.n	800e0f2 <Check_Flag+0x10e>
			count = 0;
 800e072:	4b25      	ldr	r3, [pc, #148]	@ (800e108 <Check_Flag+0x124>)
 800e074:	2200      	movs	r2, #0
 800e076:	701a      	strb	r2, [r3, #0]
		break;
 800e078:	e03b      	b.n	800e0f2 <Check_Flag+0x10e>
	case 2:
//		此处用于判断是否进入准备模式，调整车身姿态
		if (ch == 'e')
 800e07a:	4b22      	ldr	r3, [pc, #136]	@ (800e104 <Check_Flag+0x120>)
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	2b65      	cmp	r3, #101	@ 0x65
 800e080:	d106      	bne.n	800e090 <Check_Flag+0xac>
			count++;
 800e082:	4b21      	ldr	r3, [pc, #132]	@ (800e108 <Check_Flag+0x124>)
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	3301      	adds	r3, #1
 800e088:	b2da      	uxtb	r2, r3
 800e08a:	4b1f      	ldr	r3, [pc, #124]	@ (800e108 <Check_Flag+0x124>)
 800e08c:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800e08e:	e033      	b.n	800e0f8 <Check_Flag+0x114>
			count = 0;
 800e090:	4b1d      	ldr	r3, [pc, #116]	@ (800e108 <Check_Flag+0x124>)
 800e092:	2200      	movs	r2, #0
 800e094:	701a      	strb	r2, [r3, #0]
		break;
 800e096:	e02f      	b.n	800e0f8 <Check_Flag+0x114>
	case 3:
		if (ch == 'a') {
 800e098:	4b1a      	ldr	r3, [pc, #104]	@ (800e104 <Check_Flag+0x120>)
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	2b61      	cmp	r3, #97	@ 0x61
 800e09e:	d106      	bne.n	800e0ae <Check_Flag+0xca>
			Ready_Flag = 1;
 800e0a0:	4b1b      	ldr	r3, [pc, #108]	@ (800e110 <Check_Flag+0x12c>)
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	701a      	strb	r2, [r3, #0]
			count = 0;
 800e0a6:	4b18      	ldr	r3, [pc, #96]	@ (800e108 <Check_Flag+0x124>)
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	701a      	strb	r2, [r3, #0]
		} else
			count = 0;
		break;
 800e0ac:	e024      	b.n	800e0f8 <Check_Flag+0x114>
			count = 0;
 800e0ae:	4b16      	ldr	r3, [pc, #88]	@ (800e108 <Check_Flag+0x124>)
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	701a      	strb	r2, [r3, #0]
		break;
 800e0b4:	e020      	b.n	800e0f8 <Check_Flag+0x114>
	case 4:
		if (ch == 'a')
 800e0b6:	4b13      	ldr	r3, [pc, #76]	@ (800e104 <Check_Flag+0x120>)
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	2b61      	cmp	r3, #97	@ 0x61
 800e0bc:	d106      	bne.n	800e0cc <Check_Flag+0xe8>
			count++;
 800e0be:	4b12      	ldr	r3, [pc, #72]	@ (800e108 <Check_Flag+0x124>)
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	b2da      	uxtb	r2, r3
 800e0c6:	4b10      	ldr	r3, [pc, #64]	@ (800e108 <Check_Flag+0x124>)
 800e0c8:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800e0ca:	e015      	b.n	800e0f8 <Check_Flag+0x114>
			count = 0;
 800e0cc:	4b0e      	ldr	r3, [pc, #56]	@ (800e108 <Check_Flag+0x124>)
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	701a      	strb	r2, [r3, #0]
		break;
 800e0d2:	e011      	b.n	800e0f8 <Check_Flag+0x114>
	case 5:
		if (ch == 't') {
 800e0d4:	4b0b      	ldr	r3, [pc, #44]	@ (800e104 <Check_Flag+0x120>)
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	2b74      	cmp	r3, #116	@ 0x74
 800e0da:	d10c      	bne.n	800e0f6 <Check_Flag+0x112>
			System_Flag = 1;
 800e0dc:	4b0b      	ldr	r3, [pc, #44]	@ (800e10c <Check_Flag+0x128>)
 800e0de:	2201      	movs	r2, #1
 800e0e0:	701a      	strb	r2, [r3, #0]
			count = 0;
 800e0e2:	4b09      	ldr	r3, [pc, #36]	@ (800e108 <Check_Flag+0x124>)
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	701a      	strb	r2, [r3, #0]
		}
		break;
 800e0e8:	e005      	b.n	800e0f6 <Check_Flag+0x112>
	default:
		count = 0;
 800e0ea:	4b07      	ldr	r3, [pc, #28]	@ (800e108 <Check_Flag+0x124>)
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	701a      	strb	r2, [r3, #0]
		break;
 800e0f0:	e002      	b.n	800e0f8 <Check_Flag+0x114>
		break;
 800e0f2:	bf00      	nop
 800e0f4:	e000      	b.n	800e0f8 <Check_Flag+0x114>
		break;
 800e0f6:	bf00      	nop
	}

}
 800e0f8:	bf00      	nop
 800e0fa:	370c      	adds	r7, #12
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr
 800e104:	24000d28 	.word	0x24000d28
 800e108:	24000d29 	.word	0x24000d29
 800e10c:	24000d26 	.word	0x24000d26
 800e110:	24000d27 	.word	0x24000d27

0800e114 <calculate_mean>:

#include "Stability.h"
#include "Stability_sub.h"

// 计算平均值
double calculate_mean(double data[], int n) {
 800e114:	b480      	push	{r7}
 800e116:	b087      	sub	sp, #28
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
    double sum = 0.0;
 800e11e:	f04f 0200 	mov.w	r2, #0
 800e122:	f04f 0300 	mov.w	r3, #0
 800e126:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < n; i++) {
 800e12a:	2300      	movs	r3, #0
 800e12c:	60fb      	str	r3, [r7, #12]
 800e12e:	e00e      	b.n	800e14e <calculate_mean+0x3a>
        sum += data[i];
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	00db      	lsls	r3, r3, #3
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	4413      	add	r3, r2
 800e138:	ed93 7b00 	vldr	d7, [r3]
 800e13c:	ed97 6b04 	vldr	d6, [r7, #16]
 800e140:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e144:	ed87 7b04 	vstr	d7, [r7, #16]
    for (int i = 0; i < n; i++) {
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	3301      	adds	r3, #1
 800e14c:	60fb      	str	r3, [r7, #12]
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	429a      	cmp	r2, r3
 800e154:	dbec      	blt.n	800e130 <calculate_mean+0x1c>
    }
    return sum / n;
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	ee07 3a90 	vmov	s15, r3
 800e15c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e160:	ed97 6b04 	vldr	d6, [r7, #16]
 800e164:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800e168:	eeb0 7b45 	vmov.f64	d7, d5
}
 800e16c:	eeb0 0b47 	vmov.f64	d0, d7
 800e170:	371c      	adds	r7, #28
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr

0800e17a <calculate_variance>:

 // 计算方差
double calculate_variance(double data[], int n) {
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b088      	sub	sp, #32
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
 800e182:	6039      	str	r1, [r7, #0]
     double mean = calculate_mean(data, n);
 800e184:	6839      	ldr	r1, [r7, #0]
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f7ff ffc4 	bl	800e114 <calculate_mean>
 800e18c:	ed87 0b02 	vstr	d0, [r7, #8]
     double sum_of_squares = 0.0;
 800e190:	f04f 0200 	mov.w	r2, #0
 800e194:	f04f 0300 	mov.w	r3, #0
 800e198:	e9c7 2306 	strd	r2, r3, [r7, #24]
     for (int i = 0; i < n; i++) {
 800e19c:	2300      	movs	r3, #0
 800e19e:	617b      	str	r3, [r7, #20]
 800e1a0:	e01e      	b.n	800e1e0 <calculate_variance+0x66>
         sum_of_squares += (data[i] - mean) * (data[i] - mean);
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	00db      	lsls	r3, r3, #3
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	4413      	add	r3, r2
 800e1aa:	ed93 6b00 	vldr	d6, [r3]
 800e1ae:	ed97 7b02 	vldr	d7, [r7, #8]
 800e1b2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	00db      	lsls	r3, r3, #3
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	4413      	add	r3, r2
 800e1be:	ed93 5b00 	vldr	d5, [r3]
 800e1c2:	ed97 7b02 	vldr	d7, [r7, #8]
 800e1c6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e1ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e1ce:	ed97 6b06 	vldr	d6, [r7, #24]
 800e1d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e1d6:	ed87 7b06 	vstr	d7, [r7, #24]
     for (int i = 0; i < n; i++) {
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	3301      	adds	r3, #1
 800e1de:	617b      	str	r3, [r7, #20]
 800e1e0:	697a      	ldr	r2, [r7, #20]
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	dbdc      	blt.n	800e1a2 <calculate_variance+0x28>
     }
     return sum_of_squares / n;
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	ee07 3a90 	vmov	s15, r3
 800e1ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e1f2:	ed97 6b06 	vldr	d6, [r7, #24]
 800e1f6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800e1fa:	eeb0 7b45 	vmov.f64	d7, d5
}
 800e1fe:	eeb0 0b47 	vmov.f64	d0, d7
 800e202:	3720      	adds	r7, #32
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <Check_Stability>:

//  使用方差判断稳定性
uint8_t Check_Stability(float check_x,float check_y,uint8_t Check_flag)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b08a      	sub	sp, #40	@ 0x28
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	ed87 0a03 	vstr	s0, [r7, #12]
 800e212:	edc7 0a02 	vstr	s1, [r7, #8]
 800e216:	4603      	mov	r3, r0
 800e218:	71fb      	strb	r3, [r7, #7]
	static float data_x[10];
	static float data_y[10];
	static uint8_t frequency = 0;
//	不满足计算稳定性的条件，清空缓冲区并结束
	if(Check_flag != 1)
 800e21a:	79fb      	ldrb	r3, [r7, #7]
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d018      	beq.n	800e252 <Check_Stability+0x4a>
	{
		for(int i = 0;i<10;i++)
 800e220:	2300      	movs	r3, #0
 800e222:	627b      	str	r3, [r7, #36]	@ 0x24
 800e224:	e010      	b.n	800e248 <Check_Stability+0x40>
		{
			data_x[i] = 0;
 800e226:	4a27      	ldr	r2, [pc, #156]	@ (800e2c4 <Check_Stability+0xbc>)
 800e228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	4413      	add	r3, r2
 800e22e:	f04f 0200 	mov.w	r2, #0
 800e232:	601a      	str	r2, [r3, #0]
			data_y[i] = 0;
 800e234:	4a24      	ldr	r2, [pc, #144]	@ (800e2c8 <Check_Stability+0xc0>)
 800e236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	4413      	add	r3, r2
 800e23c:	f04f 0200 	mov.w	r2, #0
 800e240:	601a      	str	r2, [r3, #0]
		for(int i = 0;i<10;i++)
 800e242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e244:	3301      	adds	r3, #1
 800e246:	627b      	str	r3, [r7, #36]	@ 0x24
 800e248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24a:	2b09      	cmp	r3, #9
 800e24c:	ddeb      	ble.n	800e226 <Check_Stability+0x1e>
		}
		return 1;
 800e24e:	2301      	movs	r3, #1
 800e250:	e034      	b.n	800e2bc <Check_Stability+0xb4>
	}
	if(frequency <= 9)
 800e252:	4b1e      	ldr	r3, [pc, #120]	@ (800e2cc <Check_Stability+0xc4>)
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	2b09      	cmp	r3, #9
 800e258:	d80f      	bhi.n	800e27a <Check_Stability+0x72>
	{
		data_x[frequency] = check_x;
 800e25a:	4b1c      	ldr	r3, [pc, #112]	@ (800e2cc <Check_Stability+0xc4>)
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	4a19      	ldr	r2, [pc, #100]	@ (800e2c4 <Check_Stability+0xbc>)
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	4413      	add	r3, r2
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	601a      	str	r2, [r3, #0]
		data_y[frequency] = check_y;
 800e268:	4b18      	ldr	r3, [pc, #96]	@ (800e2cc <Check_Stability+0xc4>)
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	4a16      	ldr	r2, [pc, #88]	@ (800e2c8 <Check_Stability+0xc0>)
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	4413      	add	r3, r2
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	601a      	str	r2, [r3, #0]
//		0说明数据量过少
		return 0;
 800e276:	2300      	movs	r3, #0
 800e278:	e020      	b.n	800e2bc <Check_Stability+0xb4>
	}
//	显式类型转换，调用函数获得方差
	double variance_x = calculate_variance((double*)data_x, 10);
 800e27a:	210a      	movs	r1, #10
 800e27c:	4811      	ldr	r0, [pc, #68]	@ (800e2c4 <Check_Stability+0xbc>)
 800e27e:	f7ff ff7c 	bl	800e17a <calculate_variance>
 800e282:	ed87 0b06 	vstr	d0, [r7, #24]
	double variance_y = calculate_variance((double*)data_y, 10);
 800e286:	210a      	movs	r1, #10
 800e288:	480f      	ldr	r0, [pc, #60]	@ (800e2c8 <Check_Stability+0xc0>)
 800e28a:	f7ff ff76 	bl	800e17a <calculate_variance>
 800e28e:	ed87 0b04 	vstr	d0, [r7, #16]
	if((variance_x > 2) || (variance_y >2))
 800e292:	ed97 7b06 	vldr	d7, [r7, #24]
 800e296:	eeb0 6b00 	vmov.f64	d6, #0	@ 0x40000000  2.0
 800e29a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2a2:	dc08      	bgt.n	800e2b6 <Check_Stability+0xae>
 800e2a4:	ed97 7b04 	vldr	d7, [r7, #16]
 800e2a8:	eeb0 6b00 	vmov.f64	d6, #0	@ 0x40000000  2.0
 800e2ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b4:	dd01      	ble.n	800e2ba <Check_Stability+0xb2>
	{
//		1说明还未稳定
		return 1;
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e000      	b.n	800e2bc <Check_Stability+0xb4>
	}
	else
		return 2;
 800e2ba:	2302      	movs	r3, #2
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3728      	adds	r7, #40	@ 0x28
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}
 800e2c4:	24000d2c 	.word	0x24000d2c
 800e2c8:	24000d54 	.word	0x24000d54
 800e2cc:	24000d7c 	.word	0x24000d7c

0800e2d0 <Check_Status>:
	首先，在步进电机上电以后，需要进行调零，找到一个零位用来确定后面一切操作的参考点，因此5号步进电机设置为上电回零
	但是在比赛过程中，要求车身及其垂直投影部分在未发车前全部处于发车区域，这就要求爪子在发车前是在车体内侧的，同时爪子不能处于太高处，否则违规
	因此在Check_Status()函数用于在回零操作已完成后进行调整，以满足发车条件，
*/
uint8_t Check_Status(void)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	af00      	add	r7, sp, #0
//  首先控制步进电机,回到零点
	Drop_Location_jiang(200, 120, 0);
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	2178      	movs	r1, #120	@ 0x78
 800e2d8:	20c8      	movs	r0, #200	@ 0xc8
 800e2da:	f7fe fbf3 	bl	800cac4 <Drop_Location_jiang>
	Move_Arm(1, 50, 300);
 800e2de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800e2e2:	2132      	movs	r1, #50	@ 0x32
 800e2e4:	2001      	movs	r0, #1
 800e2e6:	f7fd f907 	bl	800b4f8 <Move_Arm>
//  6号舵机900
	Move_Arm(6, 900, 300);
 800e2ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800e2ee:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800e2f2:	2006      	movs	r0, #6
 800e2f4:	f7fd f900 	bl	800b4f8 <Move_Arm>
//  旋转物料结构的支撑舵机
	FT_Servo_Zero(0);
 800e2f8:	2000      	movs	r0, #0
 800e2fa:	f000 f80c 	bl	800e316 <FT_Servo_Zero>
//  旋转爪子结构的支撑舵机
	FT_Servo_Zero(1);
 800e2fe:	2001      	movs	r0, #1
 800e300:	f000 f809 	bl	800e316 <FT_Servo_Zero>
//  步进电机下降,将位置调整为最最低点
	Drop_Location_jiang(200, 120, 9000);
 800e304:	f242 3228 	movw	r2, #9000	@ 0x2328
 800e308:	2178      	movs	r1, #120	@ 0x78
 800e30a:	20c8      	movs	r0, #200	@ 0xc8
 800e30c:	f7fe fbda 	bl	800cac4 <Drop_Location_jiang>
	return 1;
 800e310:	2301      	movs	r3, #1
}
 800e312:	4618      	mov	r0, r3
 800e314:	bd80      	pop	{r7, pc}

0800e316 <FT_Servo_Zero>:

// 将目标舵机回零
uint8_t FT_Servo_Zero(uint8_t Number)
{
 800e316:	b580      	push	{r7, lr}
 800e318:	b082      	sub	sp, #8
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	4603      	mov	r3, r0
 800e31e:	71fb      	strb	r3, [r7, #7]
	if(Number == 0)
 800e320:	79fb      	ldrb	r3, [r7, #7]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d106      	bne.n	800e334 <FT_Servo_Zero+0x1e>
		WritePosEx(0, 0, 0, 0);
 800e326:	2300      	movs	r3, #0
 800e328:	2200      	movs	r2, #0
 800e32a:	2100      	movs	r1, #0
 800e32c:	2000      	movs	r0, #0
 800e32e:	f7ff fc9d 	bl	800dc6c <WritePosEx>
 800e332:	e009      	b.n	800e348 <FT_Servo_Zero+0x32>
	else if (Number == 1)
 800e334:	79fb      	ldrb	r3, [r7, #7]
 800e336:	2b01      	cmp	r3, #1
 800e338:	d106      	bne.n	800e348 <FT_Servo_Zero+0x32>
		WritePosEx(1, 1020, 0, 0);
 800e33a:	2300      	movs	r3, #0
 800e33c:	2200      	movs	r2, #0
 800e33e:	f44f 717f 	mov.w	r1, #1020	@ 0x3fc
 800e342:	2001      	movs	r0, #1
 800e344:	f7ff fc92 	bl	800dc6c <WritePosEx>
	return 1;
 800e348:	2301      	movs	r3, #1
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3708      	adds	r7, #8
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}

0800e352 <FT_Servo_Orth>:

// 将爪子处飞特舵机调整为向外，正交于车身
uint8_t FT_Servo_Orth(void)
{
 800e352:	b580      	push	{r7, lr}
 800e354:	af00      	add	r7, sp, #0
	WritePosEx(1, 3087, 0, 0);
 800e356:	2300      	movs	r3, #0
 800e358:	2200      	movs	r2, #0
 800e35a:	f640 410f 	movw	r1, #3087	@ 0xc0f
 800e35e:	2001      	movs	r0, #1
 800e360:	f7ff fc84 	bl	800dc6c <WritePosEx>
	return 1;
 800e364:	2301      	movs	r3, #1
}
 800e366:	4618      	mov	r0, r3
 800e368:	bd80      	pop	{r7, pc}

0800e36a <FT_Servo_Put>:

// 物料摆放
uint8_t FT_Servo_Put(uint8_t Servo_ID, uint8_t Pub_Number)
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b082      	sub	sp, #8
 800e36e:	af00      	add	r7, sp, #0
 800e370:	4603      	mov	r3, r0
 800e372:	460a      	mov	r2, r1
 800e374:	71fb      	strb	r3, [r7, #7]
 800e376:	4613      	mov	r3, r2
 800e378:	71bb      	strb	r3, [r7, #6]
	if(Servo_ID == 0)
 800e37a:	79fb      	ldrb	r3, [r7, #7]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d121      	bne.n	800e3c4 <FT_Servo_Put+0x5a>
	{
		switch (Pub_Number)
 800e380:	79bb      	ldrb	r3, [r7, #6]
 800e382:	2b03      	cmp	r3, #3
 800e384:	d016      	beq.n	800e3b4 <FT_Servo_Put+0x4a>
 800e386:	2b03      	cmp	r3, #3
 800e388:	dc26      	bgt.n	800e3d8 <FT_Servo_Put+0x6e>
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	d002      	beq.n	800e394 <FT_Servo_Put+0x2a>
 800e38e:	2b02      	cmp	r3, #2
 800e390:	d008      	beq.n	800e3a4 <FT_Servo_Put+0x3a>
 800e392:	e021      	b.n	800e3d8 <FT_Servo_Put+0x6e>
		{
			case 1:WritePosEx(0, 1180, 0, 0);break;
 800e394:	2300      	movs	r3, #0
 800e396:	2200      	movs	r2, #0
 800e398:	f240 419c 	movw	r1, #1180	@ 0x49c
 800e39c:	2000      	movs	r0, #0
 800e39e:	f7ff fc65 	bl	800dc6c <WritePosEx>
 800e3a2:	e019      	b.n	800e3d8 <FT_Servo_Put+0x6e>
			case 2:WritePosEx(0, 2245, 0, 0);break;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f640 01c5 	movw	r1, #2245	@ 0x8c5
 800e3ac:	2000      	movs	r0, #0
 800e3ae:	f7ff fc5d 	bl	800dc6c <WritePosEx>
 800e3b2:	e011      	b.n	800e3d8 <FT_Servo_Put+0x6e>
			case 3:WritePosEx(0, 3292, 0, 0);break;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f640 41dc 	movw	r1, #3292	@ 0xcdc
 800e3bc:	2000      	movs	r0, #0
 800e3be:	f7ff fc55 	bl	800dc6c <WritePosEx>
 800e3c2:	e009      	b.n	800e3d8 <FT_Servo_Put+0x6e>
		}
	}
	else if (Servo_ID == 1)
 800e3c4:	79fb      	ldrb	r3, [r7, #7]
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	d106      	bne.n	800e3d8 <FT_Servo_Put+0x6e>
	{
		WritePosEx(1, 1716, 0, 0);
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f240 61b4 	movw	r1, #1716	@ 0x6b4
 800e3d2:	2001      	movs	r0, #1
 800e3d4:	f7ff fc4a 	bl	800dc6c <WritePosEx>
	}
	while(ReadMove(Servo_ID))
 800e3d8:	bf00      	nop
 800e3da:	79fb      	ldrb	r3, [r7, #7]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7ff fc8f 	bl	800dd00 <ReadMove>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d1f8      	bne.n	800e3da <FT_Servo_Put+0x70>
	{
		;
	}
	return 1;
 800e3e8:	2301      	movs	r3, #1
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3708      	adds	r7, #8
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
	...

0800e3f4 <malloc>:
 800e3f4:	4b02      	ldr	r3, [pc, #8]	@ (800e400 <malloc+0xc>)
 800e3f6:	4601      	mov	r1, r0
 800e3f8:	6818      	ldr	r0, [r3, #0]
 800e3fa:	f000 b825 	b.w	800e448 <_malloc_r>
 800e3fe:	bf00      	nop
 800e400:	240001c4 	.word	0x240001c4

0800e404 <sbrk_aligned>:
 800e404:	b570      	push	{r4, r5, r6, lr}
 800e406:	4e0f      	ldr	r6, [pc, #60]	@ (800e444 <sbrk_aligned+0x40>)
 800e408:	460c      	mov	r4, r1
 800e40a:	6831      	ldr	r1, [r6, #0]
 800e40c:	4605      	mov	r5, r0
 800e40e:	b911      	cbnz	r1, 800e416 <sbrk_aligned+0x12>
 800e410:	f001 fe52 	bl	80100b8 <_sbrk_r>
 800e414:	6030      	str	r0, [r6, #0]
 800e416:	4621      	mov	r1, r4
 800e418:	4628      	mov	r0, r5
 800e41a:	f001 fe4d 	bl	80100b8 <_sbrk_r>
 800e41e:	1c43      	adds	r3, r0, #1
 800e420:	d103      	bne.n	800e42a <sbrk_aligned+0x26>
 800e422:	f04f 34ff 	mov.w	r4, #4294967295
 800e426:	4620      	mov	r0, r4
 800e428:	bd70      	pop	{r4, r5, r6, pc}
 800e42a:	1cc4      	adds	r4, r0, #3
 800e42c:	f024 0403 	bic.w	r4, r4, #3
 800e430:	42a0      	cmp	r0, r4
 800e432:	d0f8      	beq.n	800e426 <sbrk_aligned+0x22>
 800e434:	1a21      	subs	r1, r4, r0
 800e436:	4628      	mov	r0, r5
 800e438:	f001 fe3e 	bl	80100b8 <_sbrk_r>
 800e43c:	3001      	adds	r0, #1
 800e43e:	d1f2      	bne.n	800e426 <sbrk_aligned+0x22>
 800e440:	e7ef      	b.n	800e422 <sbrk_aligned+0x1e>
 800e442:	bf00      	nop
 800e444:	24000d80 	.word	0x24000d80

0800e448 <_malloc_r>:
 800e448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e44c:	1ccd      	adds	r5, r1, #3
 800e44e:	f025 0503 	bic.w	r5, r5, #3
 800e452:	3508      	adds	r5, #8
 800e454:	2d0c      	cmp	r5, #12
 800e456:	bf38      	it	cc
 800e458:	250c      	movcc	r5, #12
 800e45a:	2d00      	cmp	r5, #0
 800e45c:	4606      	mov	r6, r0
 800e45e:	db01      	blt.n	800e464 <_malloc_r+0x1c>
 800e460:	42a9      	cmp	r1, r5
 800e462:	d904      	bls.n	800e46e <_malloc_r+0x26>
 800e464:	230c      	movs	r3, #12
 800e466:	6033      	str	r3, [r6, #0]
 800e468:	2000      	movs	r0, #0
 800e46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e46e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e544 <_malloc_r+0xfc>
 800e472:	f000 f869 	bl	800e548 <__malloc_lock>
 800e476:	f8d8 3000 	ldr.w	r3, [r8]
 800e47a:	461c      	mov	r4, r3
 800e47c:	bb44      	cbnz	r4, 800e4d0 <_malloc_r+0x88>
 800e47e:	4629      	mov	r1, r5
 800e480:	4630      	mov	r0, r6
 800e482:	f7ff ffbf 	bl	800e404 <sbrk_aligned>
 800e486:	1c43      	adds	r3, r0, #1
 800e488:	4604      	mov	r4, r0
 800e48a:	d158      	bne.n	800e53e <_malloc_r+0xf6>
 800e48c:	f8d8 4000 	ldr.w	r4, [r8]
 800e490:	4627      	mov	r7, r4
 800e492:	2f00      	cmp	r7, #0
 800e494:	d143      	bne.n	800e51e <_malloc_r+0xd6>
 800e496:	2c00      	cmp	r4, #0
 800e498:	d04b      	beq.n	800e532 <_malloc_r+0xea>
 800e49a:	6823      	ldr	r3, [r4, #0]
 800e49c:	4639      	mov	r1, r7
 800e49e:	4630      	mov	r0, r6
 800e4a0:	eb04 0903 	add.w	r9, r4, r3
 800e4a4:	f001 fe08 	bl	80100b8 <_sbrk_r>
 800e4a8:	4581      	cmp	r9, r0
 800e4aa:	d142      	bne.n	800e532 <_malloc_r+0xea>
 800e4ac:	6821      	ldr	r1, [r4, #0]
 800e4ae:	1a6d      	subs	r5, r5, r1
 800e4b0:	4629      	mov	r1, r5
 800e4b2:	4630      	mov	r0, r6
 800e4b4:	f7ff ffa6 	bl	800e404 <sbrk_aligned>
 800e4b8:	3001      	adds	r0, #1
 800e4ba:	d03a      	beq.n	800e532 <_malloc_r+0xea>
 800e4bc:	6823      	ldr	r3, [r4, #0]
 800e4be:	442b      	add	r3, r5
 800e4c0:	6023      	str	r3, [r4, #0]
 800e4c2:	f8d8 3000 	ldr.w	r3, [r8]
 800e4c6:	685a      	ldr	r2, [r3, #4]
 800e4c8:	bb62      	cbnz	r2, 800e524 <_malloc_r+0xdc>
 800e4ca:	f8c8 7000 	str.w	r7, [r8]
 800e4ce:	e00f      	b.n	800e4f0 <_malloc_r+0xa8>
 800e4d0:	6822      	ldr	r2, [r4, #0]
 800e4d2:	1b52      	subs	r2, r2, r5
 800e4d4:	d420      	bmi.n	800e518 <_malloc_r+0xd0>
 800e4d6:	2a0b      	cmp	r2, #11
 800e4d8:	d917      	bls.n	800e50a <_malloc_r+0xc2>
 800e4da:	1961      	adds	r1, r4, r5
 800e4dc:	42a3      	cmp	r3, r4
 800e4de:	6025      	str	r5, [r4, #0]
 800e4e0:	bf18      	it	ne
 800e4e2:	6059      	strne	r1, [r3, #4]
 800e4e4:	6863      	ldr	r3, [r4, #4]
 800e4e6:	bf08      	it	eq
 800e4e8:	f8c8 1000 	streq.w	r1, [r8]
 800e4ec:	5162      	str	r2, [r4, r5]
 800e4ee:	604b      	str	r3, [r1, #4]
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	f000 f82f 	bl	800e554 <__malloc_unlock>
 800e4f6:	f104 000b 	add.w	r0, r4, #11
 800e4fa:	1d23      	adds	r3, r4, #4
 800e4fc:	f020 0007 	bic.w	r0, r0, #7
 800e500:	1ac2      	subs	r2, r0, r3
 800e502:	bf1c      	itt	ne
 800e504:	1a1b      	subne	r3, r3, r0
 800e506:	50a3      	strne	r3, [r4, r2]
 800e508:	e7af      	b.n	800e46a <_malloc_r+0x22>
 800e50a:	6862      	ldr	r2, [r4, #4]
 800e50c:	42a3      	cmp	r3, r4
 800e50e:	bf0c      	ite	eq
 800e510:	f8c8 2000 	streq.w	r2, [r8]
 800e514:	605a      	strne	r2, [r3, #4]
 800e516:	e7eb      	b.n	800e4f0 <_malloc_r+0xa8>
 800e518:	4623      	mov	r3, r4
 800e51a:	6864      	ldr	r4, [r4, #4]
 800e51c:	e7ae      	b.n	800e47c <_malloc_r+0x34>
 800e51e:	463c      	mov	r4, r7
 800e520:	687f      	ldr	r7, [r7, #4]
 800e522:	e7b6      	b.n	800e492 <_malloc_r+0x4a>
 800e524:	461a      	mov	r2, r3
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	42a3      	cmp	r3, r4
 800e52a:	d1fb      	bne.n	800e524 <_malloc_r+0xdc>
 800e52c:	2300      	movs	r3, #0
 800e52e:	6053      	str	r3, [r2, #4]
 800e530:	e7de      	b.n	800e4f0 <_malloc_r+0xa8>
 800e532:	230c      	movs	r3, #12
 800e534:	6033      	str	r3, [r6, #0]
 800e536:	4630      	mov	r0, r6
 800e538:	f000 f80c 	bl	800e554 <__malloc_unlock>
 800e53c:	e794      	b.n	800e468 <_malloc_r+0x20>
 800e53e:	6005      	str	r5, [r0, #0]
 800e540:	e7d6      	b.n	800e4f0 <_malloc_r+0xa8>
 800e542:	bf00      	nop
 800e544:	24000d84 	.word	0x24000d84

0800e548 <__malloc_lock>:
 800e548:	4801      	ldr	r0, [pc, #4]	@ (800e550 <__malloc_lock+0x8>)
 800e54a:	f001 be02 	b.w	8010152 <__retarget_lock_acquire_recursive>
 800e54e:	bf00      	nop
 800e550:	24000ec8 	.word	0x24000ec8

0800e554 <__malloc_unlock>:
 800e554:	4801      	ldr	r0, [pc, #4]	@ (800e55c <__malloc_unlock+0x8>)
 800e556:	f001 bdfd 	b.w	8010154 <__retarget_lock_release_recursive>
 800e55a:	bf00      	nop
 800e55c:	24000ec8 	.word	0x24000ec8

0800e560 <sulp>:
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	4604      	mov	r4, r0
 800e564:	460d      	mov	r5, r1
 800e566:	4616      	mov	r6, r2
 800e568:	ec45 4b10 	vmov	d0, r4, r5
 800e56c:	f003 fafc 	bl	8011b68 <__ulp>
 800e570:	b17e      	cbz	r6, 800e592 <sulp+0x32>
 800e572:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e576:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	dd09      	ble.n	800e592 <sulp+0x32>
 800e57e:	051b      	lsls	r3, r3, #20
 800e580:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e584:	2000      	movs	r0, #0
 800e586:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800e58a:	ec41 0b17 	vmov	d7, r0, r1
 800e58e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e592:	bd70      	pop	{r4, r5, r6, pc}
 800e594:	0000      	movs	r0, r0
	...

0800e598 <_strtod_l>:
 800e598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e59c:	ed2d 8b0a 	vpush	{d8-d12}
 800e5a0:	b097      	sub	sp, #92	@ 0x5c
 800e5a2:	4688      	mov	r8, r1
 800e5a4:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	9212      	str	r2, [sp, #72]	@ 0x48
 800e5aa:	9005      	str	r0, [sp, #20]
 800e5ac:	f04f 0a00 	mov.w	sl, #0
 800e5b0:	f04f 0b00 	mov.w	fp, #0
 800e5b4:	460a      	mov	r2, r1
 800e5b6:	9211      	str	r2, [sp, #68]	@ 0x44
 800e5b8:	7811      	ldrb	r1, [r2, #0]
 800e5ba:	292b      	cmp	r1, #43	@ 0x2b
 800e5bc:	d04c      	beq.n	800e658 <_strtod_l+0xc0>
 800e5be:	d839      	bhi.n	800e634 <_strtod_l+0x9c>
 800e5c0:	290d      	cmp	r1, #13
 800e5c2:	d833      	bhi.n	800e62c <_strtod_l+0x94>
 800e5c4:	2908      	cmp	r1, #8
 800e5c6:	d833      	bhi.n	800e630 <_strtod_l+0x98>
 800e5c8:	2900      	cmp	r1, #0
 800e5ca:	d03c      	beq.n	800e646 <_strtod_l+0xae>
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	9208      	str	r2, [sp, #32]
 800e5d0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e5d2:	782a      	ldrb	r2, [r5, #0]
 800e5d4:	2a30      	cmp	r2, #48	@ 0x30
 800e5d6:	f040 80b5 	bne.w	800e744 <_strtod_l+0x1ac>
 800e5da:	786a      	ldrb	r2, [r5, #1]
 800e5dc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e5e0:	2a58      	cmp	r2, #88	@ 0x58
 800e5e2:	d170      	bne.n	800e6c6 <_strtod_l+0x12e>
 800e5e4:	9302      	str	r3, [sp, #8]
 800e5e6:	9b08      	ldr	r3, [sp, #32]
 800e5e8:	9301      	str	r3, [sp, #4]
 800e5ea:	ab12      	add	r3, sp, #72	@ 0x48
 800e5ec:	9300      	str	r3, [sp, #0]
 800e5ee:	4a8b      	ldr	r2, [pc, #556]	@ (800e81c <_strtod_l+0x284>)
 800e5f0:	9805      	ldr	r0, [sp, #20]
 800e5f2:	ab13      	add	r3, sp, #76	@ 0x4c
 800e5f4:	a911      	add	r1, sp, #68	@ 0x44
 800e5f6:	f002 fc5f 	bl	8010eb8 <__gethex>
 800e5fa:	f010 060f 	ands.w	r6, r0, #15
 800e5fe:	4604      	mov	r4, r0
 800e600:	d005      	beq.n	800e60e <_strtod_l+0x76>
 800e602:	2e06      	cmp	r6, #6
 800e604:	d12a      	bne.n	800e65c <_strtod_l+0xc4>
 800e606:	3501      	adds	r5, #1
 800e608:	2300      	movs	r3, #0
 800e60a:	9511      	str	r5, [sp, #68]	@ 0x44
 800e60c:	9308      	str	r3, [sp, #32]
 800e60e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e610:	2b00      	cmp	r3, #0
 800e612:	f040 852f 	bne.w	800f074 <_strtod_l+0xadc>
 800e616:	9b08      	ldr	r3, [sp, #32]
 800e618:	ec4b ab10 	vmov	d0, sl, fp
 800e61c:	b1cb      	cbz	r3, 800e652 <_strtod_l+0xba>
 800e61e:	eeb1 0b40 	vneg.f64	d0, d0
 800e622:	b017      	add	sp, #92	@ 0x5c
 800e624:	ecbd 8b0a 	vpop	{d8-d12}
 800e628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e62c:	2920      	cmp	r1, #32
 800e62e:	d1cd      	bne.n	800e5cc <_strtod_l+0x34>
 800e630:	3201      	adds	r2, #1
 800e632:	e7c0      	b.n	800e5b6 <_strtod_l+0x1e>
 800e634:	292d      	cmp	r1, #45	@ 0x2d
 800e636:	d1c9      	bne.n	800e5cc <_strtod_l+0x34>
 800e638:	2101      	movs	r1, #1
 800e63a:	9108      	str	r1, [sp, #32]
 800e63c:	1c51      	adds	r1, r2, #1
 800e63e:	9111      	str	r1, [sp, #68]	@ 0x44
 800e640:	7852      	ldrb	r2, [r2, #1]
 800e642:	2a00      	cmp	r2, #0
 800e644:	d1c4      	bne.n	800e5d0 <_strtod_l+0x38>
 800e646:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e648:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f040 850f 	bne.w	800f070 <_strtod_l+0xad8>
 800e652:	ec4b ab10 	vmov	d0, sl, fp
 800e656:	e7e4      	b.n	800e622 <_strtod_l+0x8a>
 800e658:	2100      	movs	r1, #0
 800e65a:	e7ee      	b.n	800e63a <_strtod_l+0xa2>
 800e65c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e65e:	b13a      	cbz	r2, 800e670 <_strtod_l+0xd8>
 800e660:	2135      	movs	r1, #53	@ 0x35
 800e662:	a814      	add	r0, sp, #80	@ 0x50
 800e664:	f003 fb77 	bl	8011d56 <__copybits>
 800e668:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e66a:	9805      	ldr	r0, [sp, #20]
 800e66c:	f002 ff48 	bl	8011500 <_Bfree>
 800e670:	1e73      	subs	r3, r6, #1
 800e672:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e674:	2b04      	cmp	r3, #4
 800e676:	d806      	bhi.n	800e686 <_strtod_l+0xee>
 800e678:	e8df f003 	tbb	[pc, r3]
 800e67c:	201d0314 	.word	0x201d0314
 800e680:	14          	.byte	0x14
 800e681:	00          	.byte	0x00
 800e682:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800e686:	05e3      	lsls	r3, r4, #23
 800e688:	bf48      	it	mi
 800e68a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e68e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e692:	0d1b      	lsrs	r3, r3, #20
 800e694:	051b      	lsls	r3, r3, #20
 800e696:	2b00      	cmp	r3, #0
 800e698:	d1b9      	bne.n	800e60e <_strtod_l+0x76>
 800e69a:	f001 fd2f 	bl	80100fc <__errno>
 800e69e:	2322      	movs	r3, #34	@ 0x22
 800e6a0:	6003      	str	r3, [r0, #0]
 800e6a2:	e7b4      	b.n	800e60e <_strtod_l+0x76>
 800e6a4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800e6a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e6ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e6b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e6b4:	e7e7      	b.n	800e686 <_strtod_l+0xee>
 800e6b6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800e824 <_strtod_l+0x28c>
 800e6ba:	e7e4      	b.n	800e686 <_strtod_l+0xee>
 800e6bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e6c0:	f04f 3aff 	mov.w	sl, #4294967295
 800e6c4:	e7df      	b.n	800e686 <_strtod_l+0xee>
 800e6c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e6c8:	1c5a      	adds	r2, r3, #1
 800e6ca:	9211      	str	r2, [sp, #68]	@ 0x44
 800e6cc:	785b      	ldrb	r3, [r3, #1]
 800e6ce:	2b30      	cmp	r3, #48	@ 0x30
 800e6d0:	d0f9      	beq.n	800e6c6 <_strtod_l+0x12e>
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d09b      	beq.n	800e60e <_strtod_l+0x76>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	2600      	movs	r6, #0
 800e6da:	9307      	str	r3, [sp, #28]
 800e6dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e6de:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6e0:	46b1      	mov	r9, r6
 800e6e2:	4635      	mov	r5, r6
 800e6e4:	220a      	movs	r2, #10
 800e6e6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e6e8:	7804      	ldrb	r4, [r0, #0]
 800e6ea:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e6ee:	b2d9      	uxtb	r1, r3
 800e6f0:	2909      	cmp	r1, #9
 800e6f2:	d929      	bls.n	800e748 <_strtod_l+0x1b0>
 800e6f4:	494a      	ldr	r1, [pc, #296]	@ (800e820 <_strtod_l+0x288>)
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	f001 fc94 	bl	8010024 <strncmp>
 800e6fc:	b378      	cbz	r0, 800e75e <_strtod_l+0x1c6>
 800e6fe:	2000      	movs	r0, #0
 800e700:	4622      	mov	r2, r4
 800e702:	462b      	mov	r3, r5
 800e704:	4607      	mov	r7, r0
 800e706:	9006      	str	r0, [sp, #24]
 800e708:	2a65      	cmp	r2, #101	@ 0x65
 800e70a:	d001      	beq.n	800e710 <_strtod_l+0x178>
 800e70c:	2a45      	cmp	r2, #69	@ 0x45
 800e70e:	d117      	bne.n	800e740 <_strtod_l+0x1a8>
 800e710:	b91b      	cbnz	r3, 800e71a <_strtod_l+0x182>
 800e712:	9b07      	ldr	r3, [sp, #28]
 800e714:	4303      	orrs	r3, r0
 800e716:	d096      	beq.n	800e646 <_strtod_l+0xae>
 800e718:	2300      	movs	r3, #0
 800e71a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800e71e:	f108 0201 	add.w	r2, r8, #1
 800e722:	9211      	str	r2, [sp, #68]	@ 0x44
 800e724:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e728:	2a2b      	cmp	r2, #43	@ 0x2b
 800e72a:	d06b      	beq.n	800e804 <_strtod_l+0x26c>
 800e72c:	2a2d      	cmp	r2, #45	@ 0x2d
 800e72e:	d071      	beq.n	800e814 <_strtod_l+0x27c>
 800e730:	f04f 0e00 	mov.w	lr, #0
 800e734:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e738:	2c09      	cmp	r4, #9
 800e73a:	d979      	bls.n	800e830 <_strtod_l+0x298>
 800e73c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e740:	2400      	movs	r4, #0
 800e742:	e094      	b.n	800e86e <_strtod_l+0x2d6>
 800e744:	2300      	movs	r3, #0
 800e746:	e7c7      	b.n	800e6d8 <_strtod_l+0x140>
 800e748:	2d08      	cmp	r5, #8
 800e74a:	f100 0001 	add.w	r0, r0, #1
 800e74e:	bfd4      	ite	le
 800e750:	fb02 3909 	mlale	r9, r2, r9, r3
 800e754:	fb02 3606 	mlagt	r6, r2, r6, r3
 800e758:	3501      	adds	r5, #1
 800e75a:	9011      	str	r0, [sp, #68]	@ 0x44
 800e75c:	e7c3      	b.n	800e6e6 <_strtod_l+0x14e>
 800e75e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e760:	1c5a      	adds	r2, r3, #1
 800e762:	9211      	str	r2, [sp, #68]	@ 0x44
 800e764:	785a      	ldrb	r2, [r3, #1]
 800e766:	b375      	cbz	r5, 800e7c6 <_strtod_l+0x22e>
 800e768:	4607      	mov	r7, r0
 800e76a:	462b      	mov	r3, r5
 800e76c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e770:	2909      	cmp	r1, #9
 800e772:	d913      	bls.n	800e79c <_strtod_l+0x204>
 800e774:	2101      	movs	r1, #1
 800e776:	9106      	str	r1, [sp, #24]
 800e778:	e7c6      	b.n	800e708 <_strtod_l+0x170>
 800e77a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e77c:	1c5a      	adds	r2, r3, #1
 800e77e:	9211      	str	r2, [sp, #68]	@ 0x44
 800e780:	785a      	ldrb	r2, [r3, #1]
 800e782:	3001      	adds	r0, #1
 800e784:	2a30      	cmp	r2, #48	@ 0x30
 800e786:	d0f8      	beq.n	800e77a <_strtod_l+0x1e2>
 800e788:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e78c:	2b08      	cmp	r3, #8
 800e78e:	f200 8476 	bhi.w	800f07e <_strtod_l+0xae6>
 800e792:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e794:	930a      	str	r3, [sp, #40]	@ 0x28
 800e796:	4607      	mov	r7, r0
 800e798:	2000      	movs	r0, #0
 800e79a:	4603      	mov	r3, r0
 800e79c:	3a30      	subs	r2, #48	@ 0x30
 800e79e:	f100 0101 	add.w	r1, r0, #1
 800e7a2:	d023      	beq.n	800e7ec <_strtod_l+0x254>
 800e7a4:	440f      	add	r7, r1
 800e7a6:	eb00 0c03 	add.w	ip, r0, r3
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	240a      	movs	r4, #10
 800e7ae:	4561      	cmp	r1, ip
 800e7b0:	d10b      	bne.n	800e7ca <_strtod_l+0x232>
 800e7b2:	1c5c      	adds	r4, r3, #1
 800e7b4:	4403      	add	r3, r0
 800e7b6:	2b08      	cmp	r3, #8
 800e7b8:	4404      	add	r4, r0
 800e7ba:	dc11      	bgt.n	800e7e0 <_strtod_l+0x248>
 800e7bc:	230a      	movs	r3, #10
 800e7be:	fb03 2909 	mla	r9, r3, r9, r2
 800e7c2:	2100      	movs	r1, #0
 800e7c4:	e013      	b.n	800e7ee <_strtod_l+0x256>
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	e7dc      	b.n	800e784 <_strtod_l+0x1ec>
 800e7ca:	2908      	cmp	r1, #8
 800e7cc:	f101 0101 	add.w	r1, r1, #1
 800e7d0:	dc02      	bgt.n	800e7d8 <_strtod_l+0x240>
 800e7d2:	fb04 f909 	mul.w	r9, r4, r9
 800e7d6:	e7ea      	b.n	800e7ae <_strtod_l+0x216>
 800e7d8:	2910      	cmp	r1, #16
 800e7da:	bfd8      	it	le
 800e7dc:	4366      	mulle	r6, r4
 800e7de:	e7e6      	b.n	800e7ae <_strtod_l+0x216>
 800e7e0:	2b0f      	cmp	r3, #15
 800e7e2:	dcee      	bgt.n	800e7c2 <_strtod_l+0x22a>
 800e7e4:	230a      	movs	r3, #10
 800e7e6:	fb03 2606 	mla	r6, r3, r6, r2
 800e7ea:	e7ea      	b.n	800e7c2 <_strtod_l+0x22a>
 800e7ec:	461c      	mov	r4, r3
 800e7ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e7f0:	1c5a      	adds	r2, r3, #1
 800e7f2:	9211      	str	r2, [sp, #68]	@ 0x44
 800e7f4:	785a      	ldrb	r2, [r3, #1]
 800e7f6:	4608      	mov	r0, r1
 800e7f8:	4623      	mov	r3, r4
 800e7fa:	e7b7      	b.n	800e76c <_strtod_l+0x1d4>
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	2700      	movs	r7, #0
 800e800:	9306      	str	r3, [sp, #24]
 800e802:	e786      	b.n	800e712 <_strtod_l+0x17a>
 800e804:	f04f 0e00 	mov.w	lr, #0
 800e808:	f108 0202 	add.w	r2, r8, #2
 800e80c:	9211      	str	r2, [sp, #68]	@ 0x44
 800e80e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e812:	e78f      	b.n	800e734 <_strtod_l+0x19c>
 800e814:	f04f 0e01 	mov.w	lr, #1
 800e818:	e7f6      	b.n	800e808 <_strtod_l+0x270>
 800e81a:	bf00      	nop
 800e81c:	080132c8 	.word	0x080132c8
 800e820:	080132b0 	.word	0x080132b0
 800e824:	7ff00000 	.word	0x7ff00000
 800e828:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e82a:	1c54      	adds	r4, r2, #1
 800e82c:	9411      	str	r4, [sp, #68]	@ 0x44
 800e82e:	7852      	ldrb	r2, [r2, #1]
 800e830:	2a30      	cmp	r2, #48	@ 0x30
 800e832:	d0f9      	beq.n	800e828 <_strtod_l+0x290>
 800e834:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e838:	2c08      	cmp	r4, #8
 800e83a:	d881      	bhi.n	800e740 <_strtod_l+0x1a8>
 800e83c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e840:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e842:	9209      	str	r2, [sp, #36]	@ 0x24
 800e844:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e846:	1c51      	adds	r1, r2, #1
 800e848:	9111      	str	r1, [sp, #68]	@ 0x44
 800e84a:	7852      	ldrb	r2, [r2, #1]
 800e84c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e850:	2c09      	cmp	r4, #9
 800e852:	d938      	bls.n	800e8c6 <_strtod_l+0x32e>
 800e854:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e856:	1b0c      	subs	r4, r1, r4
 800e858:	2c08      	cmp	r4, #8
 800e85a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800e85e:	dc02      	bgt.n	800e866 <_strtod_l+0x2ce>
 800e860:	4564      	cmp	r4, ip
 800e862:	bfa8      	it	ge
 800e864:	4664      	movge	r4, ip
 800e866:	f1be 0f00 	cmp.w	lr, #0
 800e86a:	d000      	beq.n	800e86e <_strtod_l+0x2d6>
 800e86c:	4264      	negs	r4, r4
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d14e      	bne.n	800e910 <_strtod_l+0x378>
 800e872:	9b07      	ldr	r3, [sp, #28]
 800e874:	4318      	orrs	r0, r3
 800e876:	f47f aeca 	bne.w	800e60e <_strtod_l+0x76>
 800e87a:	9b06      	ldr	r3, [sp, #24]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	f47f aee2 	bne.w	800e646 <_strtod_l+0xae>
 800e882:	2a69      	cmp	r2, #105	@ 0x69
 800e884:	d027      	beq.n	800e8d6 <_strtod_l+0x33e>
 800e886:	dc24      	bgt.n	800e8d2 <_strtod_l+0x33a>
 800e888:	2a49      	cmp	r2, #73	@ 0x49
 800e88a:	d024      	beq.n	800e8d6 <_strtod_l+0x33e>
 800e88c:	2a4e      	cmp	r2, #78	@ 0x4e
 800e88e:	f47f aeda 	bne.w	800e646 <_strtod_l+0xae>
 800e892:	4997      	ldr	r1, [pc, #604]	@ (800eaf0 <_strtod_l+0x558>)
 800e894:	a811      	add	r0, sp, #68	@ 0x44
 800e896:	f002 fd31 	bl	80112fc <__match>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	f43f aed3 	beq.w	800e646 <_strtod_l+0xae>
 800e8a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	2b28      	cmp	r3, #40	@ 0x28
 800e8a6:	d12d      	bne.n	800e904 <_strtod_l+0x36c>
 800e8a8:	4992      	ldr	r1, [pc, #584]	@ (800eaf4 <_strtod_l+0x55c>)
 800e8aa:	aa14      	add	r2, sp, #80	@ 0x50
 800e8ac:	a811      	add	r0, sp, #68	@ 0x44
 800e8ae:	f002 fd39 	bl	8011324 <__hexnan>
 800e8b2:	2805      	cmp	r0, #5
 800e8b4:	d126      	bne.n	800e904 <_strtod_l+0x36c>
 800e8b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e8b8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e8bc:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e8c0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e8c4:	e6a3      	b.n	800e60e <_strtod_l+0x76>
 800e8c6:	240a      	movs	r4, #10
 800e8c8:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e8cc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e8d0:	e7b8      	b.n	800e844 <_strtod_l+0x2ac>
 800e8d2:	2a6e      	cmp	r2, #110	@ 0x6e
 800e8d4:	e7db      	b.n	800e88e <_strtod_l+0x2f6>
 800e8d6:	4988      	ldr	r1, [pc, #544]	@ (800eaf8 <_strtod_l+0x560>)
 800e8d8:	a811      	add	r0, sp, #68	@ 0x44
 800e8da:	f002 fd0f 	bl	80112fc <__match>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	f43f aeb1 	beq.w	800e646 <_strtod_l+0xae>
 800e8e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e8e6:	4985      	ldr	r1, [pc, #532]	@ (800eafc <_strtod_l+0x564>)
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	a811      	add	r0, sp, #68	@ 0x44
 800e8ec:	9311      	str	r3, [sp, #68]	@ 0x44
 800e8ee:	f002 fd05 	bl	80112fc <__match>
 800e8f2:	b910      	cbnz	r0, 800e8fa <_strtod_l+0x362>
 800e8f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e8fa:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800eb10 <_strtod_l+0x578>
 800e8fe:	f04f 0a00 	mov.w	sl, #0
 800e902:	e684      	b.n	800e60e <_strtod_l+0x76>
 800e904:	487e      	ldr	r0, [pc, #504]	@ (800eb00 <_strtod_l+0x568>)
 800e906:	f001 fc37 	bl	8010178 <nan>
 800e90a:	ec5b ab10 	vmov	sl, fp, d0
 800e90e:	e67e      	b.n	800e60e <_strtod_l+0x76>
 800e910:	ee07 9a90 	vmov	s15, r9
 800e914:	1be2      	subs	r2, r4, r7
 800e916:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e91a:	2d00      	cmp	r5, #0
 800e91c:	bf08      	it	eq
 800e91e:	461d      	moveq	r5, r3
 800e920:	2b10      	cmp	r3, #16
 800e922:	9209      	str	r2, [sp, #36]	@ 0x24
 800e924:	461a      	mov	r2, r3
 800e926:	bfa8      	it	ge
 800e928:	2210      	movge	r2, #16
 800e92a:	2b09      	cmp	r3, #9
 800e92c:	ec5b ab17 	vmov	sl, fp, d7
 800e930:	dc15      	bgt.n	800e95e <_strtod_l+0x3c6>
 800e932:	1be1      	subs	r1, r4, r7
 800e934:	2900      	cmp	r1, #0
 800e936:	f43f ae6a 	beq.w	800e60e <_strtod_l+0x76>
 800e93a:	eba4 0107 	sub.w	r1, r4, r7
 800e93e:	dd72      	ble.n	800ea26 <_strtod_l+0x48e>
 800e940:	2916      	cmp	r1, #22
 800e942:	dc59      	bgt.n	800e9f8 <_strtod_l+0x460>
 800e944:	4b6f      	ldr	r3, [pc, #444]	@ (800eb04 <_strtod_l+0x56c>)
 800e946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e94c:	ed93 7b00 	vldr	d7, [r3]
 800e950:	ec4b ab16 	vmov	d6, sl, fp
 800e954:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e958:	ec5b ab17 	vmov	sl, fp, d7
 800e95c:	e657      	b.n	800e60e <_strtod_l+0x76>
 800e95e:	4969      	ldr	r1, [pc, #420]	@ (800eb04 <_strtod_l+0x56c>)
 800e960:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e964:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e968:	ee06 6a90 	vmov	s13, r6
 800e96c:	2b0f      	cmp	r3, #15
 800e96e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e972:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e976:	ec5b ab16 	vmov	sl, fp, d6
 800e97a:	ddda      	ble.n	800e932 <_strtod_l+0x39a>
 800e97c:	1a9a      	subs	r2, r3, r2
 800e97e:	1be1      	subs	r1, r4, r7
 800e980:	440a      	add	r2, r1
 800e982:	2a00      	cmp	r2, #0
 800e984:	f340 8094 	ble.w	800eab0 <_strtod_l+0x518>
 800e988:	f012 000f 	ands.w	r0, r2, #15
 800e98c:	d00a      	beq.n	800e9a4 <_strtod_l+0x40c>
 800e98e:	495d      	ldr	r1, [pc, #372]	@ (800eb04 <_strtod_l+0x56c>)
 800e990:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e994:	ed91 7b00 	vldr	d7, [r1]
 800e998:	ec4b ab16 	vmov	d6, sl, fp
 800e99c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e9a0:	ec5b ab17 	vmov	sl, fp, d7
 800e9a4:	f032 020f 	bics.w	r2, r2, #15
 800e9a8:	d073      	beq.n	800ea92 <_strtod_l+0x4fa>
 800e9aa:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e9ae:	dd47      	ble.n	800ea40 <_strtod_l+0x4a8>
 800e9b0:	2400      	movs	r4, #0
 800e9b2:	4625      	mov	r5, r4
 800e9b4:	9407      	str	r4, [sp, #28]
 800e9b6:	4626      	mov	r6, r4
 800e9b8:	9a05      	ldr	r2, [sp, #20]
 800e9ba:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800eb10 <_strtod_l+0x578>
 800e9be:	2322      	movs	r3, #34	@ 0x22
 800e9c0:	6013      	str	r3, [r2, #0]
 800e9c2:	f04f 0a00 	mov.w	sl, #0
 800e9c6:	9b07      	ldr	r3, [sp, #28]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f43f ae20 	beq.w	800e60e <_strtod_l+0x76>
 800e9ce:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e9d0:	9805      	ldr	r0, [sp, #20]
 800e9d2:	f002 fd95 	bl	8011500 <_Bfree>
 800e9d6:	9805      	ldr	r0, [sp, #20]
 800e9d8:	4631      	mov	r1, r6
 800e9da:	f002 fd91 	bl	8011500 <_Bfree>
 800e9de:	9805      	ldr	r0, [sp, #20]
 800e9e0:	4629      	mov	r1, r5
 800e9e2:	f002 fd8d 	bl	8011500 <_Bfree>
 800e9e6:	9907      	ldr	r1, [sp, #28]
 800e9e8:	9805      	ldr	r0, [sp, #20]
 800e9ea:	f002 fd89 	bl	8011500 <_Bfree>
 800e9ee:	9805      	ldr	r0, [sp, #20]
 800e9f0:	4621      	mov	r1, r4
 800e9f2:	f002 fd85 	bl	8011500 <_Bfree>
 800e9f6:	e60a      	b.n	800e60e <_strtod_l+0x76>
 800e9f8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e9fc:	1be0      	subs	r0, r4, r7
 800e9fe:	4281      	cmp	r1, r0
 800ea00:	dbbc      	blt.n	800e97c <_strtod_l+0x3e4>
 800ea02:	4a40      	ldr	r2, [pc, #256]	@ (800eb04 <_strtod_l+0x56c>)
 800ea04:	f1c3 030f 	rsb	r3, r3, #15
 800ea08:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ea0c:	ed91 7b00 	vldr	d7, [r1]
 800ea10:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea12:	ec4b ab16 	vmov	d6, sl, fp
 800ea16:	1acb      	subs	r3, r1, r3
 800ea18:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ea1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea20:	ed92 6b00 	vldr	d6, [r2]
 800ea24:	e796      	b.n	800e954 <_strtod_l+0x3bc>
 800ea26:	3116      	adds	r1, #22
 800ea28:	dba8      	blt.n	800e97c <_strtod_l+0x3e4>
 800ea2a:	4b36      	ldr	r3, [pc, #216]	@ (800eb04 <_strtod_l+0x56c>)
 800ea2c:	1b3c      	subs	r4, r7, r4
 800ea2e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ea32:	ed94 7b00 	vldr	d7, [r4]
 800ea36:	ec4b ab16 	vmov	d6, sl, fp
 800ea3a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ea3e:	e78b      	b.n	800e958 <_strtod_l+0x3c0>
 800ea40:	2000      	movs	r0, #0
 800ea42:	ec4b ab17 	vmov	d7, sl, fp
 800ea46:	4e30      	ldr	r6, [pc, #192]	@ (800eb08 <_strtod_l+0x570>)
 800ea48:	1112      	asrs	r2, r2, #4
 800ea4a:	4601      	mov	r1, r0
 800ea4c:	2a01      	cmp	r2, #1
 800ea4e:	dc23      	bgt.n	800ea98 <_strtod_l+0x500>
 800ea50:	b108      	cbz	r0, 800ea56 <_strtod_l+0x4be>
 800ea52:	ec5b ab17 	vmov	sl, fp, d7
 800ea56:	4a2c      	ldr	r2, [pc, #176]	@ (800eb08 <_strtod_l+0x570>)
 800ea58:	482c      	ldr	r0, [pc, #176]	@ (800eb0c <_strtod_l+0x574>)
 800ea5a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ea5e:	ed92 7b00 	vldr	d7, [r2]
 800ea62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ea66:	ec4b ab16 	vmov	d6, sl, fp
 800ea6a:	4a29      	ldr	r2, [pc, #164]	@ (800eb10 <_strtod_l+0x578>)
 800ea6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea70:	ee17 1a90 	vmov	r1, s15
 800ea74:	400a      	ands	r2, r1
 800ea76:	4282      	cmp	r2, r0
 800ea78:	ec5b ab17 	vmov	sl, fp, d7
 800ea7c:	d898      	bhi.n	800e9b0 <_strtod_l+0x418>
 800ea7e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800ea82:	4282      	cmp	r2, r0
 800ea84:	bf86      	itte	hi
 800ea86:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800eb14 <_strtod_l+0x57c>
 800ea8a:	f04f 3aff 	movhi.w	sl, #4294967295
 800ea8e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800ea92:	2200      	movs	r2, #0
 800ea94:	9206      	str	r2, [sp, #24]
 800ea96:	e076      	b.n	800eb86 <_strtod_l+0x5ee>
 800ea98:	f012 0f01 	tst.w	r2, #1
 800ea9c:	d004      	beq.n	800eaa8 <_strtod_l+0x510>
 800ea9e:	ed96 6b00 	vldr	d6, [r6]
 800eaa2:	2001      	movs	r0, #1
 800eaa4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eaa8:	3101      	adds	r1, #1
 800eaaa:	1052      	asrs	r2, r2, #1
 800eaac:	3608      	adds	r6, #8
 800eaae:	e7cd      	b.n	800ea4c <_strtod_l+0x4b4>
 800eab0:	d0ef      	beq.n	800ea92 <_strtod_l+0x4fa>
 800eab2:	4252      	negs	r2, r2
 800eab4:	f012 000f 	ands.w	r0, r2, #15
 800eab8:	d00a      	beq.n	800ead0 <_strtod_l+0x538>
 800eaba:	4912      	ldr	r1, [pc, #72]	@ (800eb04 <_strtod_l+0x56c>)
 800eabc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800eac0:	ed91 7b00 	vldr	d7, [r1]
 800eac4:	ec4b ab16 	vmov	d6, sl, fp
 800eac8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800eacc:	ec5b ab17 	vmov	sl, fp, d7
 800ead0:	1112      	asrs	r2, r2, #4
 800ead2:	d0de      	beq.n	800ea92 <_strtod_l+0x4fa>
 800ead4:	2a1f      	cmp	r2, #31
 800ead6:	dd1f      	ble.n	800eb18 <_strtod_l+0x580>
 800ead8:	2400      	movs	r4, #0
 800eada:	4625      	mov	r5, r4
 800eadc:	9407      	str	r4, [sp, #28]
 800eade:	4626      	mov	r6, r4
 800eae0:	9a05      	ldr	r2, [sp, #20]
 800eae2:	2322      	movs	r3, #34	@ 0x22
 800eae4:	f04f 0a00 	mov.w	sl, #0
 800eae8:	f04f 0b00 	mov.w	fp, #0
 800eaec:	6013      	str	r3, [r2, #0]
 800eaee:	e76a      	b.n	800e9c6 <_strtod_l+0x42e>
 800eaf0:	08013315 	.word	0x08013315
 800eaf4:	080132b4 	.word	0x080132b4
 800eaf8:	0801330d 	.word	0x0801330d
 800eafc:	0801334a 	.word	0x0801334a
 800eb00:	080136f8 	.word	0x080136f8
 800eb04:	080134c8 	.word	0x080134c8
 800eb08:	080134a0 	.word	0x080134a0
 800eb0c:	7ca00000 	.word	0x7ca00000
 800eb10:	7ff00000 	.word	0x7ff00000
 800eb14:	7fefffff 	.word	0x7fefffff
 800eb18:	f012 0110 	ands.w	r1, r2, #16
 800eb1c:	bf18      	it	ne
 800eb1e:	216a      	movne	r1, #106	@ 0x6a
 800eb20:	9106      	str	r1, [sp, #24]
 800eb22:	ec4b ab17 	vmov	d7, sl, fp
 800eb26:	49b0      	ldr	r1, [pc, #704]	@ (800ede8 <_strtod_l+0x850>)
 800eb28:	2000      	movs	r0, #0
 800eb2a:	07d6      	lsls	r6, r2, #31
 800eb2c:	d504      	bpl.n	800eb38 <_strtod_l+0x5a0>
 800eb2e:	ed91 6b00 	vldr	d6, [r1]
 800eb32:	2001      	movs	r0, #1
 800eb34:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eb38:	1052      	asrs	r2, r2, #1
 800eb3a:	f101 0108 	add.w	r1, r1, #8
 800eb3e:	d1f4      	bne.n	800eb2a <_strtod_l+0x592>
 800eb40:	b108      	cbz	r0, 800eb46 <_strtod_l+0x5ae>
 800eb42:	ec5b ab17 	vmov	sl, fp, d7
 800eb46:	9a06      	ldr	r2, [sp, #24]
 800eb48:	b1b2      	cbz	r2, 800eb78 <_strtod_l+0x5e0>
 800eb4a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800eb4e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800eb52:	2a00      	cmp	r2, #0
 800eb54:	4658      	mov	r0, fp
 800eb56:	dd0f      	ble.n	800eb78 <_strtod_l+0x5e0>
 800eb58:	2a1f      	cmp	r2, #31
 800eb5a:	dd55      	ble.n	800ec08 <_strtod_l+0x670>
 800eb5c:	2a34      	cmp	r2, #52	@ 0x34
 800eb5e:	bfde      	ittt	le
 800eb60:	f04f 32ff 	movle.w	r2, #4294967295
 800eb64:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800eb68:	408a      	lslle	r2, r1
 800eb6a:	f04f 0a00 	mov.w	sl, #0
 800eb6e:	bfcc      	ite	gt
 800eb70:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800eb74:	ea02 0b00 	andle.w	fp, r2, r0
 800eb78:	ec4b ab17 	vmov	d7, sl, fp
 800eb7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb84:	d0a8      	beq.n	800ead8 <_strtod_l+0x540>
 800eb86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eb88:	9805      	ldr	r0, [sp, #20]
 800eb8a:	f8cd 9000 	str.w	r9, [sp]
 800eb8e:	462a      	mov	r2, r5
 800eb90:	f002 fd1e 	bl	80115d0 <__s2b>
 800eb94:	9007      	str	r0, [sp, #28]
 800eb96:	2800      	cmp	r0, #0
 800eb98:	f43f af0a 	beq.w	800e9b0 <_strtod_l+0x418>
 800eb9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb9e:	1b3f      	subs	r7, r7, r4
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	bfb4      	ite	lt
 800eba4:	463b      	movlt	r3, r7
 800eba6:	2300      	movge	r3, #0
 800eba8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebac:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800edd8 <_strtod_l+0x840>
 800ebb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ebb4:	2400      	movs	r4, #0
 800ebb6:	930d      	str	r3, [sp, #52]	@ 0x34
 800ebb8:	4625      	mov	r5, r4
 800ebba:	9b07      	ldr	r3, [sp, #28]
 800ebbc:	9805      	ldr	r0, [sp, #20]
 800ebbe:	6859      	ldr	r1, [r3, #4]
 800ebc0:	f002 fc5e 	bl	8011480 <_Balloc>
 800ebc4:	4606      	mov	r6, r0
 800ebc6:	2800      	cmp	r0, #0
 800ebc8:	f43f aef6 	beq.w	800e9b8 <_strtod_l+0x420>
 800ebcc:	9b07      	ldr	r3, [sp, #28]
 800ebce:	691a      	ldr	r2, [r3, #16]
 800ebd0:	ec4b ab19 	vmov	d9, sl, fp
 800ebd4:	3202      	adds	r2, #2
 800ebd6:	f103 010c 	add.w	r1, r3, #12
 800ebda:	0092      	lsls	r2, r2, #2
 800ebdc:	300c      	adds	r0, #12
 800ebde:	f001 faba 	bl	8010156 <memcpy>
 800ebe2:	eeb0 0b49 	vmov.f64	d0, d9
 800ebe6:	9805      	ldr	r0, [sp, #20]
 800ebe8:	aa14      	add	r2, sp, #80	@ 0x50
 800ebea:	a913      	add	r1, sp, #76	@ 0x4c
 800ebec:	f003 f82c 	bl	8011c48 <__d2b>
 800ebf0:	9012      	str	r0, [sp, #72]	@ 0x48
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	f43f aee0 	beq.w	800e9b8 <_strtod_l+0x420>
 800ebf8:	9805      	ldr	r0, [sp, #20]
 800ebfa:	2101      	movs	r1, #1
 800ebfc:	f002 fd7e 	bl	80116fc <__i2b>
 800ec00:	4605      	mov	r5, r0
 800ec02:	b940      	cbnz	r0, 800ec16 <_strtod_l+0x67e>
 800ec04:	2500      	movs	r5, #0
 800ec06:	e6d7      	b.n	800e9b8 <_strtod_l+0x420>
 800ec08:	f04f 31ff 	mov.w	r1, #4294967295
 800ec0c:	fa01 f202 	lsl.w	r2, r1, r2
 800ec10:	ea02 0a0a 	and.w	sl, r2, sl
 800ec14:	e7b0      	b.n	800eb78 <_strtod_l+0x5e0>
 800ec16:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800ec18:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ec1a:	2f00      	cmp	r7, #0
 800ec1c:	bfab      	itete	ge
 800ec1e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800ec20:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800ec22:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800ec26:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800ec2a:	bfac      	ite	ge
 800ec2c:	eb07 0903 	addge.w	r9, r7, r3
 800ec30:	eba3 0807 	sublt.w	r8, r3, r7
 800ec34:	9b06      	ldr	r3, [sp, #24]
 800ec36:	1aff      	subs	r7, r7, r3
 800ec38:	4417      	add	r7, r2
 800ec3a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800ec3e:	4a6b      	ldr	r2, [pc, #428]	@ (800edec <_strtod_l+0x854>)
 800ec40:	3f01      	subs	r7, #1
 800ec42:	4297      	cmp	r7, r2
 800ec44:	da51      	bge.n	800ecea <_strtod_l+0x752>
 800ec46:	1bd1      	subs	r1, r2, r7
 800ec48:	291f      	cmp	r1, #31
 800ec4a:	eba3 0301 	sub.w	r3, r3, r1
 800ec4e:	f04f 0201 	mov.w	r2, #1
 800ec52:	dc3e      	bgt.n	800ecd2 <_strtod_l+0x73a>
 800ec54:	408a      	lsls	r2, r1
 800ec56:	920c      	str	r2, [sp, #48]	@ 0x30
 800ec58:	2200      	movs	r2, #0
 800ec5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ec5c:	eb09 0703 	add.w	r7, r9, r3
 800ec60:	4498      	add	r8, r3
 800ec62:	9b06      	ldr	r3, [sp, #24]
 800ec64:	45b9      	cmp	r9, r7
 800ec66:	4498      	add	r8, r3
 800ec68:	464b      	mov	r3, r9
 800ec6a:	bfa8      	it	ge
 800ec6c:	463b      	movge	r3, r7
 800ec6e:	4543      	cmp	r3, r8
 800ec70:	bfa8      	it	ge
 800ec72:	4643      	movge	r3, r8
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	bfc2      	ittt	gt
 800ec78:	1aff      	subgt	r7, r7, r3
 800ec7a:	eba8 0803 	subgt.w	r8, r8, r3
 800ec7e:	eba9 0903 	subgt.w	r9, r9, r3
 800ec82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	dd16      	ble.n	800ecb6 <_strtod_l+0x71e>
 800ec88:	4629      	mov	r1, r5
 800ec8a:	9805      	ldr	r0, [sp, #20]
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	f002 fdf5 	bl	801187c <__pow5mult>
 800ec92:	4605      	mov	r5, r0
 800ec94:	2800      	cmp	r0, #0
 800ec96:	d0b5      	beq.n	800ec04 <_strtod_l+0x66c>
 800ec98:	4601      	mov	r1, r0
 800ec9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ec9c:	9805      	ldr	r0, [sp, #20]
 800ec9e:	f002 fd43 	bl	8011728 <__multiply>
 800eca2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800eca4:	2800      	cmp	r0, #0
 800eca6:	f43f ae87 	beq.w	800e9b8 <_strtod_l+0x420>
 800ecaa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ecac:	9805      	ldr	r0, [sp, #20]
 800ecae:	f002 fc27 	bl	8011500 <_Bfree>
 800ecb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecb4:	9312      	str	r3, [sp, #72]	@ 0x48
 800ecb6:	2f00      	cmp	r7, #0
 800ecb8:	dc1b      	bgt.n	800ecf2 <_strtod_l+0x75a>
 800ecba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	dd21      	ble.n	800ed04 <_strtod_l+0x76c>
 800ecc0:	4631      	mov	r1, r6
 800ecc2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ecc4:	9805      	ldr	r0, [sp, #20]
 800ecc6:	f002 fdd9 	bl	801187c <__pow5mult>
 800ecca:	4606      	mov	r6, r0
 800eccc:	b9d0      	cbnz	r0, 800ed04 <_strtod_l+0x76c>
 800ecce:	2600      	movs	r6, #0
 800ecd0:	e672      	b.n	800e9b8 <_strtod_l+0x420>
 800ecd2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800ecd6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800ecda:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800ecde:	37e2      	adds	r7, #226	@ 0xe2
 800ece0:	fa02 f107 	lsl.w	r1, r2, r7
 800ece4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ece6:	920c      	str	r2, [sp, #48]	@ 0x30
 800ece8:	e7b8      	b.n	800ec5c <_strtod_l+0x6c4>
 800ecea:	2200      	movs	r2, #0
 800ecec:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ecee:	2201      	movs	r2, #1
 800ecf0:	e7f9      	b.n	800ece6 <_strtod_l+0x74e>
 800ecf2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ecf4:	9805      	ldr	r0, [sp, #20]
 800ecf6:	463a      	mov	r2, r7
 800ecf8:	f002 fe1a 	bl	8011930 <__lshift>
 800ecfc:	9012      	str	r0, [sp, #72]	@ 0x48
 800ecfe:	2800      	cmp	r0, #0
 800ed00:	d1db      	bne.n	800ecba <_strtod_l+0x722>
 800ed02:	e659      	b.n	800e9b8 <_strtod_l+0x420>
 800ed04:	f1b8 0f00 	cmp.w	r8, #0
 800ed08:	dd07      	ble.n	800ed1a <_strtod_l+0x782>
 800ed0a:	4631      	mov	r1, r6
 800ed0c:	9805      	ldr	r0, [sp, #20]
 800ed0e:	4642      	mov	r2, r8
 800ed10:	f002 fe0e 	bl	8011930 <__lshift>
 800ed14:	4606      	mov	r6, r0
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d0d9      	beq.n	800ecce <_strtod_l+0x736>
 800ed1a:	f1b9 0f00 	cmp.w	r9, #0
 800ed1e:	dd08      	ble.n	800ed32 <_strtod_l+0x79a>
 800ed20:	4629      	mov	r1, r5
 800ed22:	9805      	ldr	r0, [sp, #20]
 800ed24:	464a      	mov	r2, r9
 800ed26:	f002 fe03 	bl	8011930 <__lshift>
 800ed2a:	4605      	mov	r5, r0
 800ed2c:	2800      	cmp	r0, #0
 800ed2e:	f43f ae43 	beq.w	800e9b8 <_strtod_l+0x420>
 800ed32:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ed34:	9805      	ldr	r0, [sp, #20]
 800ed36:	4632      	mov	r2, r6
 800ed38:	f002 fe82 	bl	8011a40 <__mdiff>
 800ed3c:	4604      	mov	r4, r0
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	f43f ae3a 	beq.w	800e9b8 <_strtod_l+0x420>
 800ed44:	2300      	movs	r3, #0
 800ed46:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800ed4a:	60c3      	str	r3, [r0, #12]
 800ed4c:	4629      	mov	r1, r5
 800ed4e:	f002 fe5b 	bl	8011a08 <__mcmp>
 800ed52:	2800      	cmp	r0, #0
 800ed54:	da4e      	bge.n	800edf4 <_strtod_l+0x85c>
 800ed56:	ea58 080a 	orrs.w	r8, r8, sl
 800ed5a:	d174      	bne.n	800ee46 <_strtod_l+0x8ae>
 800ed5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d170      	bne.n	800ee46 <_strtod_l+0x8ae>
 800ed64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed68:	0d1b      	lsrs	r3, r3, #20
 800ed6a:	051b      	lsls	r3, r3, #20
 800ed6c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ed70:	d969      	bls.n	800ee46 <_strtod_l+0x8ae>
 800ed72:	6963      	ldr	r3, [r4, #20]
 800ed74:	b913      	cbnz	r3, 800ed7c <_strtod_l+0x7e4>
 800ed76:	6923      	ldr	r3, [r4, #16]
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	dd64      	ble.n	800ee46 <_strtod_l+0x8ae>
 800ed7c:	4621      	mov	r1, r4
 800ed7e:	2201      	movs	r2, #1
 800ed80:	9805      	ldr	r0, [sp, #20]
 800ed82:	f002 fdd5 	bl	8011930 <__lshift>
 800ed86:	4629      	mov	r1, r5
 800ed88:	4604      	mov	r4, r0
 800ed8a:	f002 fe3d 	bl	8011a08 <__mcmp>
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	dd59      	ble.n	800ee46 <_strtod_l+0x8ae>
 800ed92:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed96:	9a06      	ldr	r2, [sp, #24]
 800ed98:	0d1b      	lsrs	r3, r3, #20
 800ed9a:	051b      	lsls	r3, r3, #20
 800ed9c:	2a00      	cmp	r2, #0
 800ed9e:	d070      	beq.n	800ee82 <_strtod_l+0x8ea>
 800eda0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eda4:	d86d      	bhi.n	800ee82 <_strtod_l+0x8ea>
 800eda6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800edaa:	f67f ae99 	bls.w	800eae0 <_strtod_l+0x548>
 800edae:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800ede0 <_strtod_l+0x848>
 800edb2:	ec4b ab16 	vmov	d6, sl, fp
 800edb6:	4b0e      	ldr	r3, [pc, #56]	@ (800edf0 <_strtod_l+0x858>)
 800edb8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800edbc:	ee17 2a90 	vmov	r2, s15
 800edc0:	4013      	ands	r3, r2
 800edc2:	ec5b ab17 	vmov	sl, fp, d7
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	f47f ae01 	bne.w	800e9ce <_strtod_l+0x436>
 800edcc:	9a05      	ldr	r2, [sp, #20]
 800edce:	2322      	movs	r3, #34	@ 0x22
 800edd0:	6013      	str	r3, [r2, #0]
 800edd2:	e5fc      	b.n	800e9ce <_strtod_l+0x436>
 800edd4:	f3af 8000 	nop.w
 800edd8:	ffc00000 	.word	0xffc00000
 800eddc:	41dfffff 	.word	0x41dfffff
 800ede0:	00000000 	.word	0x00000000
 800ede4:	39500000 	.word	0x39500000
 800ede8:	080132e0 	.word	0x080132e0
 800edec:	fffffc02 	.word	0xfffffc02
 800edf0:	7ff00000 	.word	0x7ff00000
 800edf4:	46d9      	mov	r9, fp
 800edf6:	d15d      	bne.n	800eeb4 <_strtod_l+0x91c>
 800edf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800edfc:	f1b8 0f00 	cmp.w	r8, #0
 800ee00:	d02a      	beq.n	800ee58 <_strtod_l+0x8c0>
 800ee02:	4aab      	ldr	r2, [pc, #684]	@ (800f0b0 <_strtod_l+0xb18>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d12a      	bne.n	800ee5e <_strtod_l+0x8c6>
 800ee08:	9b06      	ldr	r3, [sp, #24]
 800ee0a:	4652      	mov	r2, sl
 800ee0c:	b1fb      	cbz	r3, 800ee4e <_strtod_l+0x8b6>
 800ee0e:	4ba9      	ldr	r3, [pc, #676]	@ (800f0b4 <_strtod_l+0xb1c>)
 800ee10:	ea0b 0303 	and.w	r3, fp, r3
 800ee14:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ee18:	f04f 31ff 	mov.w	r1, #4294967295
 800ee1c:	d81a      	bhi.n	800ee54 <_strtod_l+0x8bc>
 800ee1e:	0d1b      	lsrs	r3, r3, #20
 800ee20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ee24:	fa01 f303 	lsl.w	r3, r1, r3
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d118      	bne.n	800ee5e <_strtod_l+0x8c6>
 800ee2c:	4ba2      	ldr	r3, [pc, #648]	@ (800f0b8 <_strtod_l+0xb20>)
 800ee2e:	4599      	cmp	r9, r3
 800ee30:	d102      	bne.n	800ee38 <_strtod_l+0x8a0>
 800ee32:	3201      	adds	r2, #1
 800ee34:	f43f adc0 	beq.w	800e9b8 <_strtod_l+0x420>
 800ee38:	4b9e      	ldr	r3, [pc, #632]	@ (800f0b4 <_strtod_l+0xb1c>)
 800ee3a:	ea09 0303 	and.w	r3, r9, r3
 800ee3e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ee42:	f04f 0a00 	mov.w	sl, #0
 800ee46:	9b06      	ldr	r3, [sp, #24]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d1b0      	bne.n	800edae <_strtod_l+0x816>
 800ee4c:	e5bf      	b.n	800e9ce <_strtod_l+0x436>
 800ee4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee52:	e7e9      	b.n	800ee28 <_strtod_l+0x890>
 800ee54:	460b      	mov	r3, r1
 800ee56:	e7e7      	b.n	800ee28 <_strtod_l+0x890>
 800ee58:	ea53 030a 	orrs.w	r3, r3, sl
 800ee5c:	d099      	beq.n	800ed92 <_strtod_l+0x7fa>
 800ee5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee60:	b1c3      	cbz	r3, 800ee94 <_strtod_l+0x8fc>
 800ee62:	ea13 0f09 	tst.w	r3, r9
 800ee66:	d0ee      	beq.n	800ee46 <_strtod_l+0x8ae>
 800ee68:	9a06      	ldr	r2, [sp, #24]
 800ee6a:	4650      	mov	r0, sl
 800ee6c:	4659      	mov	r1, fp
 800ee6e:	f1b8 0f00 	cmp.w	r8, #0
 800ee72:	d013      	beq.n	800ee9c <_strtod_l+0x904>
 800ee74:	f7ff fb74 	bl	800e560 <sulp>
 800ee78:	ee39 7b00 	vadd.f64	d7, d9, d0
 800ee7c:	ec5b ab17 	vmov	sl, fp, d7
 800ee80:	e7e1      	b.n	800ee46 <_strtod_l+0x8ae>
 800ee82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ee86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ee8a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ee8e:	f04f 3aff 	mov.w	sl, #4294967295
 800ee92:	e7d8      	b.n	800ee46 <_strtod_l+0x8ae>
 800ee94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee96:	ea13 0f0a 	tst.w	r3, sl
 800ee9a:	e7e4      	b.n	800ee66 <_strtod_l+0x8ce>
 800ee9c:	f7ff fb60 	bl	800e560 <sulp>
 800eea0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800eea4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800eea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeac:	ec5b ab10 	vmov	sl, fp, d0
 800eeb0:	d1c9      	bne.n	800ee46 <_strtod_l+0x8ae>
 800eeb2:	e615      	b.n	800eae0 <_strtod_l+0x548>
 800eeb4:	4629      	mov	r1, r5
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	f002 ff1e 	bl	8011cf8 <__ratio>
 800eebc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800eec0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800eec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec8:	d85d      	bhi.n	800ef86 <_strtod_l+0x9ee>
 800eeca:	f1b8 0f00 	cmp.w	r8, #0
 800eece:	d164      	bne.n	800ef9a <_strtod_l+0xa02>
 800eed0:	f1ba 0f00 	cmp.w	sl, #0
 800eed4:	d14b      	bne.n	800ef6e <_strtod_l+0x9d6>
 800eed6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eeda:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d160      	bne.n	800efa4 <_strtod_l+0xa0c>
 800eee2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800eee6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800eeea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeee:	d401      	bmi.n	800eef4 <_strtod_l+0x95c>
 800eef0:	ee20 8b08 	vmul.f64	d8, d0, d8
 800eef4:	eeb1 ab48 	vneg.f64	d10, d8
 800eef8:	486e      	ldr	r0, [pc, #440]	@ (800f0b4 <_strtod_l+0xb1c>)
 800eefa:	4970      	ldr	r1, [pc, #448]	@ (800f0bc <_strtod_l+0xb24>)
 800eefc:	ea09 0700 	and.w	r7, r9, r0
 800ef00:	428f      	cmp	r7, r1
 800ef02:	ec53 2b1a 	vmov	r2, r3, d10
 800ef06:	d17d      	bne.n	800f004 <_strtod_l+0xa6c>
 800ef08:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800ef0c:	ec4b ab1c 	vmov	d12, sl, fp
 800ef10:	eeb0 0b4c 	vmov.f64	d0, d12
 800ef14:	f002 fe28 	bl	8011b68 <__ulp>
 800ef18:	4866      	ldr	r0, [pc, #408]	@ (800f0b4 <_strtod_l+0xb1c>)
 800ef1a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800ef1e:	ee1c 3a90 	vmov	r3, s25
 800ef22:	4a67      	ldr	r2, [pc, #412]	@ (800f0c0 <_strtod_l+0xb28>)
 800ef24:	ea03 0100 	and.w	r1, r3, r0
 800ef28:	4291      	cmp	r1, r2
 800ef2a:	ec5b ab1c 	vmov	sl, fp, d12
 800ef2e:	d93c      	bls.n	800efaa <_strtod_l+0xa12>
 800ef30:	ee19 2a90 	vmov	r2, s19
 800ef34:	4b60      	ldr	r3, [pc, #384]	@ (800f0b8 <_strtod_l+0xb20>)
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d104      	bne.n	800ef44 <_strtod_l+0x9ac>
 800ef3a:	ee19 3a10 	vmov	r3, s18
 800ef3e:	3301      	adds	r3, #1
 800ef40:	f43f ad3a 	beq.w	800e9b8 <_strtod_l+0x420>
 800ef44:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800f0b8 <_strtod_l+0xb20>
 800ef48:	f04f 3aff 	mov.w	sl, #4294967295
 800ef4c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ef4e:	9805      	ldr	r0, [sp, #20]
 800ef50:	f002 fad6 	bl	8011500 <_Bfree>
 800ef54:	9805      	ldr	r0, [sp, #20]
 800ef56:	4631      	mov	r1, r6
 800ef58:	f002 fad2 	bl	8011500 <_Bfree>
 800ef5c:	9805      	ldr	r0, [sp, #20]
 800ef5e:	4629      	mov	r1, r5
 800ef60:	f002 face 	bl	8011500 <_Bfree>
 800ef64:	9805      	ldr	r0, [sp, #20]
 800ef66:	4621      	mov	r1, r4
 800ef68:	f002 faca 	bl	8011500 <_Bfree>
 800ef6c:	e625      	b.n	800ebba <_strtod_l+0x622>
 800ef6e:	f1ba 0f01 	cmp.w	sl, #1
 800ef72:	d103      	bne.n	800ef7c <_strtod_l+0x9e4>
 800ef74:	f1bb 0f00 	cmp.w	fp, #0
 800ef78:	f43f adb2 	beq.w	800eae0 <_strtod_l+0x548>
 800ef7c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ef80:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ef84:	e7b8      	b.n	800eef8 <_strtod_l+0x960>
 800ef86:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ef8a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ef8e:	f1b8 0f00 	cmp.w	r8, #0
 800ef92:	d0af      	beq.n	800eef4 <_strtod_l+0x95c>
 800ef94:	eeb0 ab48 	vmov.f64	d10, d8
 800ef98:	e7ae      	b.n	800eef8 <_strtod_l+0x960>
 800ef9a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800ef9e:	eeb0 8b4a 	vmov.f64	d8, d10
 800efa2:	e7a9      	b.n	800eef8 <_strtod_l+0x960>
 800efa4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800efa8:	e7a6      	b.n	800eef8 <_strtod_l+0x960>
 800efaa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800efae:	9b06      	ldr	r3, [sp, #24]
 800efb0:	46d9      	mov	r9, fp
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d1ca      	bne.n	800ef4c <_strtod_l+0x9b4>
 800efb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800efba:	0d1b      	lsrs	r3, r3, #20
 800efbc:	051b      	lsls	r3, r3, #20
 800efbe:	429f      	cmp	r7, r3
 800efc0:	d1c4      	bne.n	800ef4c <_strtod_l+0x9b4>
 800efc2:	ec51 0b18 	vmov	r0, r1, d8
 800efc6:	f7f1 fbcf 	bl	8000768 <__aeabi_d2lz>
 800efca:	f7f1 fb87 	bl	80006dc <__aeabi_l2d>
 800efce:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800efd2:	ec41 0b17 	vmov	d7, r0, r1
 800efd6:	ea49 090a 	orr.w	r9, r9, sl
 800efda:	ea59 0908 	orrs.w	r9, r9, r8
 800efde:	ee38 8b47 	vsub.f64	d8, d8, d7
 800efe2:	d03c      	beq.n	800f05e <_strtod_l+0xac6>
 800efe4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800f098 <_strtod_l+0xb00>
 800efe8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800efec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff0:	f53f aced 	bmi.w	800e9ce <_strtod_l+0x436>
 800eff4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800f0a0 <_strtod_l+0xb08>
 800eff8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800effc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f000:	dda4      	ble.n	800ef4c <_strtod_l+0x9b4>
 800f002:	e4e4      	b.n	800e9ce <_strtod_l+0x436>
 800f004:	9906      	ldr	r1, [sp, #24]
 800f006:	b1e1      	cbz	r1, 800f042 <_strtod_l+0xaaa>
 800f008:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800f00c:	d819      	bhi.n	800f042 <_strtod_l+0xaaa>
 800f00e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800f012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f016:	d811      	bhi.n	800f03c <_strtod_l+0xaa4>
 800f018:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800f01c:	ee18 3a10 	vmov	r3, s16
 800f020:	2b01      	cmp	r3, #1
 800f022:	bf38      	it	cc
 800f024:	2301      	movcc	r3, #1
 800f026:	ee08 3a10 	vmov	s16, r3
 800f02a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800f02e:	f1b8 0f00 	cmp.w	r8, #0
 800f032:	d111      	bne.n	800f058 <_strtod_l+0xac0>
 800f034:	eeb1 7b48 	vneg.f64	d7, d8
 800f038:	ec53 2b17 	vmov	r2, r3, d7
 800f03c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800f040:	1bcb      	subs	r3, r1, r7
 800f042:	eeb0 0b49 	vmov.f64	d0, d9
 800f046:	ec43 2b1a 	vmov	d10, r2, r3
 800f04a:	f002 fd8d 	bl	8011b68 <__ulp>
 800f04e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800f052:	ec5b ab19 	vmov	sl, fp, d9
 800f056:	e7aa      	b.n	800efae <_strtod_l+0xa16>
 800f058:	eeb0 7b48 	vmov.f64	d7, d8
 800f05c:	e7ec      	b.n	800f038 <_strtod_l+0xaa0>
 800f05e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800f0a8 <_strtod_l+0xb10>
 800f062:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f06a:	f57f af6f 	bpl.w	800ef4c <_strtod_l+0x9b4>
 800f06e:	e4ae      	b.n	800e9ce <_strtod_l+0x436>
 800f070:	2300      	movs	r3, #0
 800f072:	9308      	str	r3, [sp, #32]
 800f074:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f076:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f078:	6013      	str	r3, [r2, #0]
 800f07a:	f7ff bacc 	b.w	800e616 <_strtod_l+0x7e>
 800f07e:	2a65      	cmp	r2, #101	@ 0x65
 800f080:	f43f abbc 	beq.w	800e7fc <_strtod_l+0x264>
 800f084:	2a45      	cmp	r2, #69	@ 0x45
 800f086:	f43f abb9 	beq.w	800e7fc <_strtod_l+0x264>
 800f08a:	2301      	movs	r3, #1
 800f08c:	9306      	str	r3, [sp, #24]
 800f08e:	f7ff bbf0 	b.w	800e872 <_strtod_l+0x2da>
 800f092:	bf00      	nop
 800f094:	f3af 8000 	nop.w
 800f098:	94a03595 	.word	0x94a03595
 800f09c:	3fdfffff 	.word	0x3fdfffff
 800f0a0:	35afe535 	.word	0x35afe535
 800f0a4:	3fe00000 	.word	0x3fe00000
 800f0a8:	94a03595 	.word	0x94a03595
 800f0ac:	3fcfffff 	.word	0x3fcfffff
 800f0b0:	000fffff 	.word	0x000fffff
 800f0b4:	7ff00000 	.word	0x7ff00000
 800f0b8:	7fefffff 	.word	0x7fefffff
 800f0bc:	7fe00000 	.word	0x7fe00000
 800f0c0:	7c9fffff 	.word	0x7c9fffff

0800f0c4 <_strtod_r>:
 800f0c4:	4b01      	ldr	r3, [pc, #4]	@ (800f0cc <_strtod_r+0x8>)
 800f0c6:	f7ff ba67 	b.w	800e598 <_strtod_l>
 800f0ca:	bf00      	nop
 800f0cc:	24000058 	.word	0x24000058

0800f0d0 <__cvt>:
 800f0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0d2:	ed2d 8b02 	vpush	{d8}
 800f0d6:	eeb0 8b40 	vmov.f64	d8, d0
 800f0da:	b085      	sub	sp, #20
 800f0dc:	4617      	mov	r7, r2
 800f0de:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f0e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f0e2:	ee18 2a90 	vmov	r2, s17
 800f0e6:	f025 0520 	bic.w	r5, r5, #32
 800f0ea:	2a00      	cmp	r2, #0
 800f0ec:	bfb6      	itet	lt
 800f0ee:	222d      	movlt	r2, #45	@ 0x2d
 800f0f0:	2200      	movge	r2, #0
 800f0f2:	eeb1 8b40 	vneglt.f64	d8, d0
 800f0f6:	2d46      	cmp	r5, #70	@ 0x46
 800f0f8:	460c      	mov	r4, r1
 800f0fa:	701a      	strb	r2, [r3, #0]
 800f0fc:	d004      	beq.n	800f108 <__cvt+0x38>
 800f0fe:	2d45      	cmp	r5, #69	@ 0x45
 800f100:	d100      	bne.n	800f104 <__cvt+0x34>
 800f102:	3401      	adds	r4, #1
 800f104:	2102      	movs	r1, #2
 800f106:	e000      	b.n	800f10a <__cvt+0x3a>
 800f108:	2103      	movs	r1, #3
 800f10a:	ab03      	add	r3, sp, #12
 800f10c:	9301      	str	r3, [sp, #4]
 800f10e:	ab02      	add	r3, sp, #8
 800f110:	9300      	str	r3, [sp, #0]
 800f112:	4622      	mov	r2, r4
 800f114:	4633      	mov	r3, r6
 800f116:	eeb0 0b48 	vmov.f64	d0, d8
 800f11a:	f001 f8c5 	bl	80102a8 <_dtoa_r>
 800f11e:	2d47      	cmp	r5, #71	@ 0x47
 800f120:	d114      	bne.n	800f14c <__cvt+0x7c>
 800f122:	07fb      	lsls	r3, r7, #31
 800f124:	d50a      	bpl.n	800f13c <__cvt+0x6c>
 800f126:	1902      	adds	r2, r0, r4
 800f128:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f130:	bf08      	it	eq
 800f132:	9203      	streq	r2, [sp, #12]
 800f134:	2130      	movs	r1, #48	@ 0x30
 800f136:	9b03      	ldr	r3, [sp, #12]
 800f138:	4293      	cmp	r3, r2
 800f13a:	d319      	bcc.n	800f170 <__cvt+0xa0>
 800f13c:	9b03      	ldr	r3, [sp, #12]
 800f13e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f140:	1a1b      	subs	r3, r3, r0
 800f142:	6013      	str	r3, [r2, #0]
 800f144:	b005      	add	sp, #20
 800f146:	ecbd 8b02 	vpop	{d8}
 800f14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f14c:	2d46      	cmp	r5, #70	@ 0x46
 800f14e:	eb00 0204 	add.w	r2, r0, r4
 800f152:	d1e9      	bne.n	800f128 <__cvt+0x58>
 800f154:	7803      	ldrb	r3, [r0, #0]
 800f156:	2b30      	cmp	r3, #48	@ 0x30
 800f158:	d107      	bne.n	800f16a <__cvt+0x9a>
 800f15a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f162:	bf1c      	itt	ne
 800f164:	f1c4 0401 	rsbne	r4, r4, #1
 800f168:	6034      	strne	r4, [r6, #0]
 800f16a:	6833      	ldr	r3, [r6, #0]
 800f16c:	441a      	add	r2, r3
 800f16e:	e7db      	b.n	800f128 <__cvt+0x58>
 800f170:	1c5c      	adds	r4, r3, #1
 800f172:	9403      	str	r4, [sp, #12]
 800f174:	7019      	strb	r1, [r3, #0]
 800f176:	e7de      	b.n	800f136 <__cvt+0x66>

0800f178 <__exponent>:
 800f178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f17a:	2900      	cmp	r1, #0
 800f17c:	bfba      	itte	lt
 800f17e:	4249      	neglt	r1, r1
 800f180:	232d      	movlt	r3, #45	@ 0x2d
 800f182:	232b      	movge	r3, #43	@ 0x2b
 800f184:	2909      	cmp	r1, #9
 800f186:	7002      	strb	r2, [r0, #0]
 800f188:	7043      	strb	r3, [r0, #1]
 800f18a:	dd29      	ble.n	800f1e0 <__exponent+0x68>
 800f18c:	f10d 0307 	add.w	r3, sp, #7
 800f190:	461d      	mov	r5, r3
 800f192:	270a      	movs	r7, #10
 800f194:	461a      	mov	r2, r3
 800f196:	fbb1 f6f7 	udiv	r6, r1, r7
 800f19a:	fb07 1416 	mls	r4, r7, r6, r1
 800f19e:	3430      	adds	r4, #48	@ 0x30
 800f1a0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f1a4:	460c      	mov	r4, r1
 800f1a6:	2c63      	cmp	r4, #99	@ 0x63
 800f1a8:	f103 33ff 	add.w	r3, r3, #4294967295
 800f1ac:	4631      	mov	r1, r6
 800f1ae:	dcf1      	bgt.n	800f194 <__exponent+0x1c>
 800f1b0:	3130      	adds	r1, #48	@ 0x30
 800f1b2:	1e94      	subs	r4, r2, #2
 800f1b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f1b8:	1c41      	adds	r1, r0, #1
 800f1ba:	4623      	mov	r3, r4
 800f1bc:	42ab      	cmp	r3, r5
 800f1be:	d30a      	bcc.n	800f1d6 <__exponent+0x5e>
 800f1c0:	f10d 0309 	add.w	r3, sp, #9
 800f1c4:	1a9b      	subs	r3, r3, r2
 800f1c6:	42ac      	cmp	r4, r5
 800f1c8:	bf88      	it	hi
 800f1ca:	2300      	movhi	r3, #0
 800f1cc:	3302      	adds	r3, #2
 800f1ce:	4403      	add	r3, r0
 800f1d0:	1a18      	subs	r0, r3, r0
 800f1d2:	b003      	add	sp, #12
 800f1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1d6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f1da:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f1de:	e7ed      	b.n	800f1bc <__exponent+0x44>
 800f1e0:	2330      	movs	r3, #48	@ 0x30
 800f1e2:	3130      	adds	r1, #48	@ 0x30
 800f1e4:	7083      	strb	r3, [r0, #2]
 800f1e6:	70c1      	strb	r1, [r0, #3]
 800f1e8:	1d03      	adds	r3, r0, #4
 800f1ea:	e7f1      	b.n	800f1d0 <__exponent+0x58>
 800f1ec:	0000      	movs	r0, r0
	...

0800f1f0 <_printf_float>:
 800f1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f4:	b08d      	sub	sp, #52	@ 0x34
 800f1f6:	460c      	mov	r4, r1
 800f1f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f1fc:	4616      	mov	r6, r2
 800f1fe:	461f      	mov	r7, r3
 800f200:	4605      	mov	r5, r0
 800f202:	f000 ff21 	bl	8010048 <_localeconv_r>
 800f206:	f8d0 b000 	ldr.w	fp, [r0]
 800f20a:	4658      	mov	r0, fp
 800f20c:	f7f1 f8d0 	bl	80003b0 <strlen>
 800f210:	2300      	movs	r3, #0
 800f212:	930a      	str	r3, [sp, #40]	@ 0x28
 800f214:	f8d8 3000 	ldr.w	r3, [r8]
 800f218:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f21c:	6822      	ldr	r2, [r4, #0]
 800f21e:	9005      	str	r0, [sp, #20]
 800f220:	3307      	adds	r3, #7
 800f222:	f023 0307 	bic.w	r3, r3, #7
 800f226:	f103 0108 	add.w	r1, r3, #8
 800f22a:	f8c8 1000 	str.w	r1, [r8]
 800f22e:	ed93 0b00 	vldr	d0, [r3]
 800f232:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f490 <_printf_float+0x2a0>
 800f236:	eeb0 7bc0 	vabs.f64	d7, d0
 800f23a:	eeb4 7b46 	vcmp.f64	d7, d6
 800f23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f242:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800f246:	dd24      	ble.n	800f292 <_printf_float+0xa2>
 800f248:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f250:	d502      	bpl.n	800f258 <_printf_float+0x68>
 800f252:	232d      	movs	r3, #45	@ 0x2d
 800f254:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f258:	498f      	ldr	r1, [pc, #572]	@ (800f498 <_printf_float+0x2a8>)
 800f25a:	4b90      	ldr	r3, [pc, #576]	@ (800f49c <_printf_float+0x2ac>)
 800f25c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f260:	bf94      	ite	ls
 800f262:	4688      	movls	r8, r1
 800f264:	4698      	movhi	r8, r3
 800f266:	f022 0204 	bic.w	r2, r2, #4
 800f26a:	2303      	movs	r3, #3
 800f26c:	6123      	str	r3, [r4, #16]
 800f26e:	6022      	str	r2, [r4, #0]
 800f270:	f04f 0a00 	mov.w	sl, #0
 800f274:	9700      	str	r7, [sp, #0]
 800f276:	4633      	mov	r3, r6
 800f278:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f27a:	4621      	mov	r1, r4
 800f27c:	4628      	mov	r0, r5
 800f27e:	f000 f9d1 	bl	800f624 <_printf_common>
 800f282:	3001      	adds	r0, #1
 800f284:	f040 8089 	bne.w	800f39a <_printf_float+0x1aa>
 800f288:	f04f 30ff 	mov.w	r0, #4294967295
 800f28c:	b00d      	add	sp, #52	@ 0x34
 800f28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f292:	eeb4 0b40 	vcmp.f64	d0, d0
 800f296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f29a:	d709      	bvc.n	800f2b0 <_printf_float+0xc0>
 800f29c:	ee10 3a90 	vmov	r3, s1
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	bfbc      	itt	lt
 800f2a4:	232d      	movlt	r3, #45	@ 0x2d
 800f2a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f2aa:	497d      	ldr	r1, [pc, #500]	@ (800f4a0 <_printf_float+0x2b0>)
 800f2ac:	4b7d      	ldr	r3, [pc, #500]	@ (800f4a4 <_printf_float+0x2b4>)
 800f2ae:	e7d5      	b.n	800f25c <_printf_float+0x6c>
 800f2b0:	6863      	ldr	r3, [r4, #4]
 800f2b2:	1c59      	adds	r1, r3, #1
 800f2b4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f2b8:	d139      	bne.n	800f32e <_printf_float+0x13e>
 800f2ba:	2306      	movs	r3, #6
 800f2bc:	6063      	str	r3, [r4, #4]
 800f2be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	6022      	str	r2, [r4, #0]
 800f2c6:	9303      	str	r3, [sp, #12]
 800f2c8:	ab0a      	add	r3, sp, #40	@ 0x28
 800f2ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f2ce:	ab09      	add	r3, sp, #36	@ 0x24
 800f2d0:	9300      	str	r3, [sp, #0]
 800f2d2:	6861      	ldr	r1, [r4, #4]
 800f2d4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f2d8:	4628      	mov	r0, r5
 800f2da:	f7ff fef9 	bl	800f0d0 <__cvt>
 800f2de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f2e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f2e4:	4680      	mov	r8, r0
 800f2e6:	d129      	bne.n	800f33c <_printf_float+0x14c>
 800f2e8:	1cc8      	adds	r0, r1, #3
 800f2ea:	db02      	blt.n	800f2f2 <_printf_float+0x102>
 800f2ec:	6863      	ldr	r3, [r4, #4]
 800f2ee:	4299      	cmp	r1, r3
 800f2f0:	dd41      	ble.n	800f376 <_printf_float+0x186>
 800f2f2:	f1a9 0902 	sub.w	r9, r9, #2
 800f2f6:	fa5f f989 	uxtb.w	r9, r9
 800f2fa:	3901      	subs	r1, #1
 800f2fc:	464a      	mov	r2, r9
 800f2fe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f302:	9109      	str	r1, [sp, #36]	@ 0x24
 800f304:	f7ff ff38 	bl	800f178 <__exponent>
 800f308:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f30a:	1813      	adds	r3, r2, r0
 800f30c:	2a01      	cmp	r2, #1
 800f30e:	4682      	mov	sl, r0
 800f310:	6123      	str	r3, [r4, #16]
 800f312:	dc02      	bgt.n	800f31a <_printf_float+0x12a>
 800f314:	6822      	ldr	r2, [r4, #0]
 800f316:	07d2      	lsls	r2, r2, #31
 800f318:	d501      	bpl.n	800f31e <_printf_float+0x12e>
 800f31a:	3301      	adds	r3, #1
 800f31c:	6123      	str	r3, [r4, #16]
 800f31e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f322:	2b00      	cmp	r3, #0
 800f324:	d0a6      	beq.n	800f274 <_printf_float+0x84>
 800f326:	232d      	movs	r3, #45	@ 0x2d
 800f328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f32c:	e7a2      	b.n	800f274 <_printf_float+0x84>
 800f32e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f332:	d1c4      	bne.n	800f2be <_printf_float+0xce>
 800f334:	2b00      	cmp	r3, #0
 800f336:	d1c2      	bne.n	800f2be <_printf_float+0xce>
 800f338:	2301      	movs	r3, #1
 800f33a:	e7bf      	b.n	800f2bc <_printf_float+0xcc>
 800f33c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f340:	d9db      	bls.n	800f2fa <_printf_float+0x10a>
 800f342:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f346:	d118      	bne.n	800f37a <_printf_float+0x18a>
 800f348:	2900      	cmp	r1, #0
 800f34a:	6863      	ldr	r3, [r4, #4]
 800f34c:	dd0b      	ble.n	800f366 <_printf_float+0x176>
 800f34e:	6121      	str	r1, [r4, #16]
 800f350:	b913      	cbnz	r3, 800f358 <_printf_float+0x168>
 800f352:	6822      	ldr	r2, [r4, #0]
 800f354:	07d0      	lsls	r0, r2, #31
 800f356:	d502      	bpl.n	800f35e <_printf_float+0x16e>
 800f358:	3301      	adds	r3, #1
 800f35a:	440b      	add	r3, r1
 800f35c:	6123      	str	r3, [r4, #16]
 800f35e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f360:	f04f 0a00 	mov.w	sl, #0
 800f364:	e7db      	b.n	800f31e <_printf_float+0x12e>
 800f366:	b913      	cbnz	r3, 800f36e <_printf_float+0x17e>
 800f368:	6822      	ldr	r2, [r4, #0]
 800f36a:	07d2      	lsls	r2, r2, #31
 800f36c:	d501      	bpl.n	800f372 <_printf_float+0x182>
 800f36e:	3302      	adds	r3, #2
 800f370:	e7f4      	b.n	800f35c <_printf_float+0x16c>
 800f372:	2301      	movs	r3, #1
 800f374:	e7f2      	b.n	800f35c <_printf_float+0x16c>
 800f376:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f37a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f37c:	4299      	cmp	r1, r3
 800f37e:	db05      	blt.n	800f38c <_printf_float+0x19c>
 800f380:	6823      	ldr	r3, [r4, #0]
 800f382:	6121      	str	r1, [r4, #16]
 800f384:	07d8      	lsls	r0, r3, #31
 800f386:	d5ea      	bpl.n	800f35e <_printf_float+0x16e>
 800f388:	1c4b      	adds	r3, r1, #1
 800f38a:	e7e7      	b.n	800f35c <_printf_float+0x16c>
 800f38c:	2900      	cmp	r1, #0
 800f38e:	bfd4      	ite	le
 800f390:	f1c1 0202 	rsble	r2, r1, #2
 800f394:	2201      	movgt	r2, #1
 800f396:	4413      	add	r3, r2
 800f398:	e7e0      	b.n	800f35c <_printf_float+0x16c>
 800f39a:	6823      	ldr	r3, [r4, #0]
 800f39c:	055a      	lsls	r2, r3, #21
 800f39e:	d407      	bmi.n	800f3b0 <_printf_float+0x1c0>
 800f3a0:	6923      	ldr	r3, [r4, #16]
 800f3a2:	4642      	mov	r2, r8
 800f3a4:	4631      	mov	r1, r6
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	47b8      	blx	r7
 800f3aa:	3001      	adds	r0, #1
 800f3ac:	d12a      	bne.n	800f404 <_printf_float+0x214>
 800f3ae:	e76b      	b.n	800f288 <_printf_float+0x98>
 800f3b0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f3b4:	f240 80e0 	bls.w	800f578 <_printf_float+0x388>
 800f3b8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f3bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c4:	d133      	bne.n	800f42e <_printf_float+0x23e>
 800f3c6:	4a38      	ldr	r2, [pc, #224]	@ (800f4a8 <_printf_float+0x2b8>)
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	4631      	mov	r1, r6
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	47b8      	blx	r7
 800f3d0:	3001      	adds	r0, #1
 800f3d2:	f43f af59 	beq.w	800f288 <_printf_float+0x98>
 800f3d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f3da:	4543      	cmp	r3, r8
 800f3dc:	db02      	blt.n	800f3e4 <_printf_float+0x1f4>
 800f3de:	6823      	ldr	r3, [r4, #0]
 800f3e0:	07d8      	lsls	r0, r3, #31
 800f3e2:	d50f      	bpl.n	800f404 <_printf_float+0x214>
 800f3e4:	9b05      	ldr	r3, [sp, #20]
 800f3e6:	465a      	mov	r2, fp
 800f3e8:	4631      	mov	r1, r6
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	47b8      	blx	r7
 800f3ee:	3001      	adds	r0, #1
 800f3f0:	f43f af4a 	beq.w	800f288 <_printf_float+0x98>
 800f3f4:	f04f 0900 	mov.w	r9, #0
 800f3f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800f3fc:	f104 0a1a 	add.w	sl, r4, #26
 800f400:	45c8      	cmp	r8, r9
 800f402:	dc09      	bgt.n	800f418 <_printf_float+0x228>
 800f404:	6823      	ldr	r3, [r4, #0]
 800f406:	079b      	lsls	r3, r3, #30
 800f408:	f100 8107 	bmi.w	800f61a <_printf_float+0x42a>
 800f40c:	68e0      	ldr	r0, [r4, #12]
 800f40e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f410:	4298      	cmp	r0, r3
 800f412:	bfb8      	it	lt
 800f414:	4618      	movlt	r0, r3
 800f416:	e739      	b.n	800f28c <_printf_float+0x9c>
 800f418:	2301      	movs	r3, #1
 800f41a:	4652      	mov	r2, sl
 800f41c:	4631      	mov	r1, r6
 800f41e:	4628      	mov	r0, r5
 800f420:	47b8      	blx	r7
 800f422:	3001      	adds	r0, #1
 800f424:	f43f af30 	beq.w	800f288 <_printf_float+0x98>
 800f428:	f109 0901 	add.w	r9, r9, #1
 800f42c:	e7e8      	b.n	800f400 <_printf_float+0x210>
 800f42e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f430:	2b00      	cmp	r3, #0
 800f432:	dc3b      	bgt.n	800f4ac <_printf_float+0x2bc>
 800f434:	4a1c      	ldr	r2, [pc, #112]	@ (800f4a8 <_printf_float+0x2b8>)
 800f436:	2301      	movs	r3, #1
 800f438:	4631      	mov	r1, r6
 800f43a:	4628      	mov	r0, r5
 800f43c:	47b8      	blx	r7
 800f43e:	3001      	adds	r0, #1
 800f440:	f43f af22 	beq.w	800f288 <_printf_float+0x98>
 800f444:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f448:	ea59 0303 	orrs.w	r3, r9, r3
 800f44c:	d102      	bne.n	800f454 <_printf_float+0x264>
 800f44e:	6823      	ldr	r3, [r4, #0]
 800f450:	07d9      	lsls	r1, r3, #31
 800f452:	d5d7      	bpl.n	800f404 <_printf_float+0x214>
 800f454:	9b05      	ldr	r3, [sp, #20]
 800f456:	465a      	mov	r2, fp
 800f458:	4631      	mov	r1, r6
 800f45a:	4628      	mov	r0, r5
 800f45c:	47b8      	blx	r7
 800f45e:	3001      	adds	r0, #1
 800f460:	f43f af12 	beq.w	800f288 <_printf_float+0x98>
 800f464:	f04f 0a00 	mov.w	sl, #0
 800f468:	f104 0b1a 	add.w	fp, r4, #26
 800f46c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f46e:	425b      	negs	r3, r3
 800f470:	4553      	cmp	r3, sl
 800f472:	dc01      	bgt.n	800f478 <_printf_float+0x288>
 800f474:	464b      	mov	r3, r9
 800f476:	e794      	b.n	800f3a2 <_printf_float+0x1b2>
 800f478:	2301      	movs	r3, #1
 800f47a:	465a      	mov	r2, fp
 800f47c:	4631      	mov	r1, r6
 800f47e:	4628      	mov	r0, r5
 800f480:	47b8      	blx	r7
 800f482:	3001      	adds	r0, #1
 800f484:	f43f af00 	beq.w	800f288 <_printf_float+0x98>
 800f488:	f10a 0a01 	add.w	sl, sl, #1
 800f48c:	e7ee      	b.n	800f46c <_printf_float+0x27c>
 800f48e:	bf00      	nop
 800f490:	ffffffff 	.word	0xffffffff
 800f494:	7fefffff 	.word	0x7fefffff
 800f498:	08013308 	.word	0x08013308
 800f49c:	0801330c 	.word	0x0801330c
 800f4a0:	08013310 	.word	0x08013310
 800f4a4:	08013314 	.word	0x08013314
 800f4a8:	080136b8 	.word	0x080136b8
 800f4ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f4ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f4b2:	4553      	cmp	r3, sl
 800f4b4:	bfa8      	it	ge
 800f4b6:	4653      	movge	r3, sl
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	4699      	mov	r9, r3
 800f4bc:	dc37      	bgt.n	800f52e <_printf_float+0x33e>
 800f4be:	2300      	movs	r3, #0
 800f4c0:	9307      	str	r3, [sp, #28]
 800f4c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4c6:	f104 021a 	add.w	r2, r4, #26
 800f4ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f4cc:	9907      	ldr	r1, [sp, #28]
 800f4ce:	9306      	str	r3, [sp, #24]
 800f4d0:	eba3 0309 	sub.w	r3, r3, r9
 800f4d4:	428b      	cmp	r3, r1
 800f4d6:	dc31      	bgt.n	800f53c <_printf_float+0x34c>
 800f4d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4da:	459a      	cmp	sl, r3
 800f4dc:	dc3b      	bgt.n	800f556 <_printf_float+0x366>
 800f4de:	6823      	ldr	r3, [r4, #0]
 800f4e0:	07da      	lsls	r2, r3, #31
 800f4e2:	d438      	bmi.n	800f556 <_printf_float+0x366>
 800f4e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4e6:	ebaa 0903 	sub.w	r9, sl, r3
 800f4ea:	9b06      	ldr	r3, [sp, #24]
 800f4ec:	ebaa 0303 	sub.w	r3, sl, r3
 800f4f0:	4599      	cmp	r9, r3
 800f4f2:	bfa8      	it	ge
 800f4f4:	4699      	movge	r9, r3
 800f4f6:	f1b9 0f00 	cmp.w	r9, #0
 800f4fa:	dc34      	bgt.n	800f566 <_printf_float+0x376>
 800f4fc:	f04f 0800 	mov.w	r8, #0
 800f500:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f504:	f104 0b1a 	add.w	fp, r4, #26
 800f508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f50a:	ebaa 0303 	sub.w	r3, sl, r3
 800f50e:	eba3 0309 	sub.w	r3, r3, r9
 800f512:	4543      	cmp	r3, r8
 800f514:	f77f af76 	ble.w	800f404 <_printf_float+0x214>
 800f518:	2301      	movs	r3, #1
 800f51a:	465a      	mov	r2, fp
 800f51c:	4631      	mov	r1, r6
 800f51e:	4628      	mov	r0, r5
 800f520:	47b8      	blx	r7
 800f522:	3001      	adds	r0, #1
 800f524:	f43f aeb0 	beq.w	800f288 <_printf_float+0x98>
 800f528:	f108 0801 	add.w	r8, r8, #1
 800f52c:	e7ec      	b.n	800f508 <_printf_float+0x318>
 800f52e:	4642      	mov	r2, r8
 800f530:	4631      	mov	r1, r6
 800f532:	4628      	mov	r0, r5
 800f534:	47b8      	blx	r7
 800f536:	3001      	adds	r0, #1
 800f538:	d1c1      	bne.n	800f4be <_printf_float+0x2ce>
 800f53a:	e6a5      	b.n	800f288 <_printf_float+0x98>
 800f53c:	2301      	movs	r3, #1
 800f53e:	4631      	mov	r1, r6
 800f540:	4628      	mov	r0, r5
 800f542:	9206      	str	r2, [sp, #24]
 800f544:	47b8      	blx	r7
 800f546:	3001      	adds	r0, #1
 800f548:	f43f ae9e 	beq.w	800f288 <_printf_float+0x98>
 800f54c:	9b07      	ldr	r3, [sp, #28]
 800f54e:	9a06      	ldr	r2, [sp, #24]
 800f550:	3301      	adds	r3, #1
 800f552:	9307      	str	r3, [sp, #28]
 800f554:	e7b9      	b.n	800f4ca <_printf_float+0x2da>
 800f556:	9b05      	ldr	r3, [sp, #20]
 800f558:	465a      	mov	r2, fp
 800f55a:	4631      	mov	r1, r6
 800f55c:	4628      	mov	r0, r5
 800f55e:	47b8      	blx	r7
 800f560:	3001      	adds	r0, #1
 800f562:	d1bf      	bne.n	800f4e4 <_printf_float+0x2f4>
 800f564:	e690      	b.n	800f288 <_printf_float+0x98>
 800f566:	9a06      	ldr	r2, [sp, #24]
 800f568:	464b      	mov	r3, r9
 800f56a:	4442      	add	r2, r8
 800f56c:	4631      	mov	r1, r6
 800f56e:	4628      	mov	r0, r5
 800f570:	47b8      	blx	r7
 800f572:	3001      	adds	r0, #1
 800f574:	d1c2      	bne.n	800f4fc <_printf_float+0x30c>
 800f576:	e687      	b.n	800f288 <_printf_float+0x98>
 800f578:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f57c:	f1b9 0f01 	cmp.w	r9, #1
 800f580:	dc01      	bgt.n	800f586 <_printf_float+0x396>
 800f582:	07db      	lsls	r3, r3, #31
 800f584:	d536      	bpl.n	800f5f4 <_printf_float+0x404>
 800f586:	2301      	movs	r3, #1
 800f588:	4642      	mov	r2, r8
 800f58a:	4631      	mov	r1, r6
 800f58c:	4628      	mov	r0, r5
 800f58e:	47b8      	blx	r7
 800f590:	3001      	adds	r0, #1
 800f592:	f43f ae79 	beq.w	800f288 <_printf_float+0x98>
 800f596:	9b05      	ldr	r3, [sp, #20]
 800f598:	465a      	mov	r2, fp
 800f59a:	4631      	mov	r1, r6
 800f59c:	4628      	mov	r0, r5
 800f59e:	47b8      	blx	r7
 800f5a0:	3001      	adds	r0, #1
 800f5a2:	f43f ae71 	beq.w	800f288 <_printf_float+0x98>
 800f5a6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f5aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b2:	f109 39ff 	add.w	r9, r9, #4294967295
 800f5b6:	d018      	beq.n	800f5ea <_printf_float+0x3fa>
 800f5b8:	464b      	mov	r3, r9
 800f5ba:	f108 0201 	add.w	r2, r8, #1
 800f5be:	4631      	mov	r1, r6
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	47b8      	blx	r7
 800f5c4:	3001      	adds	r0, #1
 800f5c6:	d10c      	bne.n	800f5e2 <_printf_float+0x3f2>
 800f5c8:	e65e      	b.n	800f288 <_printf_float+0x98>
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	465a      	mov	r2, fp
 800f5ce:	4631      	mov	r1, r6
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	47b8      	blx	r7
 800f5d4:	3001      	adds	r0, #1
 800f5d6:	f43f ae57 	beq.w	800f288 <_printf_float+0x98>
 800f5da:	f108 0801 	add.w	r8, r8, #1
 800f5de:	45c8      	cmp	r8, r9
 800f5e0:	dbf3      	blt.n	800f5ca <_printf_float+0x3da>
 800f5e2:	4653      	mov	r3, sl
 800f5e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f5e8:	e6dc      	b.n	800f3a4 <_printf_float+0x1b4>
 800f5ea:	f04f 0800 	mov.w	r8, #0
 800f5ee:	f104 0b1a 	add.w	fp, r4, #26
 800f5f2:	e7f4      	b.n	800f5de <_printf_float+0x3ee>
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	4642      	mov	r2, r8
 800f5f8:	e7e1      	b.n	800f5be <_printf_float+0x3ce>
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	464a      	mov	r2, r9
 800f5fe:	4631      	mov	r1, r6
 800f600:	4628      	mov	r0, r5
 800f602:	47b8      	blx	r7
 800f604:	3001      	adds	r0, #1
 800f606:	f43f ae3f 	beq.w	800f288 <_printf_float+0x98>
 800f60a:	f108 0801 	add.w	r8, r8, #1
 800f60e:	68e3      	ldr	r3, [r4, #12]
 800f610:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f612:	1a5b      	subs	r3, r3, r1
 800f614:	4543      	cmp	r3, r8
 800f616:	dcf0      	bgt.n	800f5fa <_printf_float+0x40a>
 800f618:	e6f8      	b.n	800f40c <_printf_float+0x21c>
 800f61a:	f04f 0800 	mov.w	r8, #0
 800f61e:	f104 0919 	add.w	r9, r4, #25
 800f622:	e7f4      	b.n	800f60e <_printf_float+0x41e>

0800f624 <_printf_common>:
 800f624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f628:	4616      	mov	r6, r2
 800f62a:	4698      	mov	r8, r3
 800f62c:	688a      	ldr	r2, [r1, #8]
 800f62e:	690b      	ldr	r3, [r1, #16]
 800f630:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f634:	4293      	cmp	r3, r2
 800f636:	bfb8      	it	lt
 800f638:	4613      	movlt	r3, r2
 800f63a:	6033      	str	r3, [r6, #0]
 800f63c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f640:	4607      	mov	r7, r0
 800f642:	460c      	mov	r4, r1
 800f644:	b10a      	cbz	r2, 800f64a <_printf_common+0x26>
 800f646:	3301      	adds	r3, #1
 800f648:	6033      	str	r3, [r6, #0]
 800f64a:	6823      	ldr	r3, [r4, #0]
 800f64c:	0699      	lsls	r1, r3, #26
 800f64e:	bf42      	ittt	mi
 800f650:	6833      	ldrmi	r3, [r6, #0]
 800f652:	3302      	addmi	r3, #2
 800f654:	6033      	strmi	r3, [r6, #0]
 800f656:	6825      	ldr	r5, [r4, #0]
 800f658:	f015 0506 	ands.w	r5, r5, #6
 800f65c:	d106      	bne.n	800f66c <_printf_common+0x48>
 800f65e:	f104 0a19 	add.w	sl, r4, #25
 800f662:	68e3      	ldr	r3, [r4, #12]
 800f664:	6832      	ldr	r2, [r6, #0]
 800f666:	1a9b      	subs	r3, r3, r2
 800f668:	42ab      	cmp	r3, r5
 800f66a:	dc26      	bgt.n	800f6ba <_printf_common+0x96>
 800f66c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f670:	6822      	ldr	r2, [r4, #0]
 800f672:	3b00      	subs	r3, #0
 800f674:	bf18      	it	ne
 800f676:	2301      	movne	r3, #1
 800f678:	0692      	lsls	r2, r2, #26
 800f67a:	d42b      	bmi.n	800f6d4 <_printf_common+0xb0>
 800f67c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f680:	4641      	mov	r1, r8
 800f682:	4638      	mov	r0, r7
 800f684:	47c8      	blx	r9
 800f686:	3001      	adds	r0, #1
 800f688:	d01e      	beq.n	800f6c8 <_printf_common+0xa4>
 800f68a:	6823      	ldr	r3, [r4, #0]
 800f68c:	6922      	ldr	r2, [r4, #16]
 800f68e:	f003 0306 	and.w	r3, r3, #6
 800f692:	2b04      	cmp	r3, #4
 800f694:	bf02      	ittt	eq
 800f696:	68e5      	ldreq	r5, [r4, #12]
 800f698:	6833      	ldreq	r3, [r6, #0]
 800f69a:	1aed      	subeq	r5, r5, r3
 800f69c:	68a3      	ldr	r3, [r4, #8]
 800f69e:	bf0c      	ite	eq
 800f6a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f6a4:	2500      	movne	r5, #0
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	bfc4      	itt	gt
 800f6aa:	1a9b      	subgt	r3, r3, r2
 800f6ac:	18ed      	addgt	r5, r5, r3
 800f6ae:	2600      	movs	r6, #0
 800f6b0:	341a      	adds	r4, #26
 800f6b2:	42b5      	cmp	r5, r6
 800f6b4:	d11a      	bne.n	800f6ec <_printf_common+0xc8>
 800f6b6:	2000      	movs	r0, #0
 800f6b8:	e008      	b.n	800f6cc <_printf_common+0xa8>
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	4652      	mov	r2, sl
 800f6be:	4641      	mov	r1, r8
 800f6c0:	4638      	mov	r0, r7
 800f6c2:	47c8      	blx	r9
 800f6c4:	3001      	adds	r0, #1
 800f6c6:	d103      	bne.n	800f6d0 <_printf_common+0xac>
 800f6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6d0:	3501      	adds	r5, #1
 800f6d2:	e7c6      	b.n	800f662 <_printf_common+0x3e>
 800f6d4:	18e1      	adds	r1, r4, r3
 800f6d6:	1c5a      	adds	r2, r3, #1
 800f6d8:	2030      	movs	r0, #48	@ 0x30
 800f6da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f6de:	4422      	add	r2, r4
 800f6e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f6e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f6e8:	3302      	adds	r3, #2
 800f6ea:	e7c7      	b.n	800f67c <_printf_common+0x58>
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	4622      	mov	r2, r4
 800f6f0:	4641      	mov	r1, r8
 800f6f2:	4638      	mov	r0, r7
 800f6f4:	47c8      	blx	r9
 800f6f6:	3001      	adds	r0, #1
 800f6f8:	d0e6      	beq.n	800f6c8 <_printf_common+0xa4>
 800f6fa:	3601      	adds	r6, #1
 800f6fc:	e7d9      	b.n	800f6b2 <_printf_common+0x8e>
	...

0800f700 <_printf_i>:
 800f700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f704:	7e0f      	ldrb	r7, [r1, #24]
 800f706:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f708:	2f78      	cmp	r7, #120	@ 0x78
 800f70a:	4691      	mov	r9, r2
 800f70c:	4680      	mov	r8, r0
 800f70e:	460c      	mov	r4, r1
 800f710:	469a      	mov	sl, r3
 800f712:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f716:	d807      	bhi.n	800f728 <_printf_i+0x28>
 800f718:	2f62      	cmp	r7, #98	@ 0x62
 800f71a:	d80a      	bhi.n	800f732 <_printf_i+0x32>
 800f71c:	2f00      	cmp	r7, #0
 800f71e:	f000 80d2 	beq.w	800f8c6 <_printf_i+0x1c6>
 800f722:	2f58      	cmp	r7, #88	@ 0x58
 800f724:	f000 80b9 	beq.w	800f89a <_printf_i+0x19a>
 800f728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f72c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f730:	e03a      	b.n	800f7a8 <_printf_i+0xa8>
 800f732:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f736:	2b15      	cmp	r3, #21
 800f738:	d8f6      	bhi.n	800f728 <_printf_i+0x28>
 800f73a:	a101      	add	r1, pc, #4	@ (adr r1, 800f740 <_printf_i+0x40>)
 800f73c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f740:	0800f799 	.word	0x0800f799
 800f744:	0800f7ad 	.word	0x0800f7ad
 800f748:	0800f729 	.word	0x0800f729
 800f74c:	0800f729 	.word	0x0800f729
 800f750:	0800f729 	.word	0x0800f729
 800f754:	0800f729 	.word	0x0800f729
 800f758:	0800f7ad 	.word	0x0800f7ad
 800f75c:	0800f729 	.word	0x0800f729
 800f760:	0800f729 	.word	0x0800f729
 800f764:	0800f729 	.word	0x0800f729
 800f768:	0800f729 	.word	0x0800f729
 800f76c:	0800f8ad 	.word	0x0800f8ad
 800f770:	0800f7d7 	.word	0x0800f7d7
 800f774:	0800f867 	.word	0x0800f867
 800f778:	0800f729 	.word	0x0800f729
 800f77c:	0800f729 	.word	0x0800f729
 800f780:	0800f8cf 	.word	0x0800f8cf
 800f784:	0800f729 	.word	0x0800f729
 800f788:	0800f7d7 	.word	0x0800f7d7
 800f78c:	0800f729 	.word	0x0800f729
 800f790:	0800f729 	.word	0x0800f729
 800f794:	0800f86f 	.word	0x0800f86f
 800f798:	6833      	ldr	r3, [r6, #0]
 800f79a:	1d1a      	adds	r2, r3, #4
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	6032      	str	r2, [r6, #0]
 800f7a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f7a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	e09d      	b.n	800f8e8 <_printf_i+0x1e8>
 800f7ac:	6833      	ldr	r3, [r6, #0]
 800f7ae:	6820      	ldr	r0, [r4, #0]
 800f7b0:	1d19      	adds	r1, r3, #4
 800f7b2:	6031      	str	r1, [r6, #0]
 800f7b4:	0606      	lsls	r6, r0, #24
 800f7b6:	d501      	bpl.n	800f7bc <_printf_i+0xbc>
 800f7b8:	681d      	ldr	r5, [r3, #0]
 800f7ba:	e003      	b.n	800f7c4 <_printf_i+0xc4>
 800f7bc:	0645      	lsls	r5, r0, #25
 800f7be:	d5fb      	bpl.n	800f7b8 <_printf_i+0xb8>
 800f7c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f7c4:	2d00      	cmp	r5, #0
 800f7c6:	da03      	bge.n	800f7d0 <_printf_i+0xd0>
 800f7c8:	232d      	movs	r3, #45	@ 0x2d
 800f7ca:	426d      	negs	r5, r5
 800f7cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f7d0:	4859      	ldr	r0, [pc, #356]	@ (800f938 <_printf_i+0x238>)
 800f7d2:	230a      	movs	r3, #10
 800f7d4:	e011      	b.n	800f7fa <_printf_i+0xfa>
 800f7d6:	6821      	ldr	r1, [r4, #0]
 800f7d8:	6833      	ldr	r3, [r6, #0]
 800f7da:	0608      	lsls	r0, r1, #24
 800f7dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800f7e0:	d402      	bmi.n	800f7e8 <_printf_i+0xe8>
 800f7e2:	0649      	lsls	r1, r1, #25
 800f7e4:	bf48      	it	mi
 800f7e6:	b2ad      	uxthmi	r5, r5
 800f7e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f7ea:	4853      	ldr	r0, [pc, #332]	@ (800f938 <_printf_i+0x238>)
 800f7ec:	6033      	str	r3, [r6, #0]
 800f7ee:	bf14      	ite	ne
 800f7f0:	230a      	movne	r3, #10
 800f7f2:	2308      	moveq	r3, #8
 800f7f4:	2100      	movs	r1, #0
 800f7f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f7fa:	6866      	ldr	r6, [r4, #4]
 800f7fc:	60a6      	str	r6, [r4, #8]
 800f7fe:	2e00      	cmp	r6, #0
 800f800:	bfa2      	ittt	ge
 800f802:	6821      	ldrge	r1, [r4, #0]
 800f804:	f021 0104 	bicge.w	r1, r1, #4
 800f808:	6021      	strge	r1, [r4, #0]
 800f80a:	b90d      	cbnz	r5, 800f810 <_printf_i+0x110>
 800f80c:	2e00      	cmp	r6, #0
 800f80e:	d04b      	beq.n	800f8a8 <_printf_i+0x1a8>
 800f810:	4616      	mov	r6, r2
 800f812:	fbb5 f1f3 	udiv	r1, r5, r3
 800f816:	fb03 5711 	mls	r7, r3, r1, r5
 800f81a:	5dc7      	ldrb	r7, [r0, r7]
 800f81c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f820:	462f      	mov	r7, r5
 800f822:	42bb      	cmp	r3, r7
 800f824:	460d      	mov	r5, r1
 800f826:	d9f4      	bls.n	800f812 <_printf_i+0x112>
 800f828:	2b08      	cmp	r3, #8
 800f82a:	d10b      	bne.n	800f844 <_printf_i+0x144>
 800f82c:	6823      	ldr	r3, [r4, #0]
 800f82e:	07df      	lsls	r7, r3, #31
 800f830:	d508      	bpl.n	800f844 <_printf_i+0x144>
 800f832:	6923      	ldr	r3, [r4, #16]
 800f834:	6861      	ldr	r1, [r4, #4]
 800f836:	4299      	cmp	r1, r3
 800f838:	bfde      	ittt	le
 800f83a:	2330      	movle	r3, #48	@ 0x30
 800f83c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f840:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f844:	1b92      	subs	r2, r2, r6
 800f846:	6122      	str	r2, [r4, #16]
 800f848:	f8cd a000 	str.w	sl, [sp]
 800f84c:	464b      	mov	r3, r9
 800f84e:	aa03      	add	r2, sp, #12
 800f850:	4621      	mov	r1, r4
 800f852:	4640      	mov	r0, r8
 800f854:	f7ff fee6 	bl	800f624 <_printf_common>
 800f858:	3001      	adds	r0, #1
 800f85a:	d14a      	bne.n	800f8f2 <_printf_i+0x1f2>
 800f85c:	f04f 30ff 	mov.w	r0, #4294967295
 800f860:	b004      	add	sp, #16
 800f862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f866:	6823      	ldr	r3, [r4, #0]
 800f868:	f043 0320 	orr.w	r3, r3, #32
 800f86c:	6023      	str	r3, [r4, #0]
 800f86e:	4833      	ldr	r0, [pc, #204]	@ (800f93c <_printf_i+0x23c>)
 800f870:	2778      	movs	r7, #120	@ 0x78
 800f872:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f876:	6823      	ldr	r3, [r4, #0]
 800f878:	6831      	ldr	r1, [r6, #0]
 800f87a:	061f      	lsls	r7, r3, #24
 800f87c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f880:	d402      	bmi.n	800f888 <_printf_i+0x188>
 800f882:	065f      	lsls	r7, r3, #25
 800f884:	bf48      	it	mi
 800f886:	b2ad      	uxthmi	r5, r5
 800f888:	6031      	str	r1, [r6, #0]
 800f88a:	07d9      	lsls	r1, r3, #31
 800f88c:	bf44      	itt	mi
 800f88e:	f043 0320 	orrmi.w	r3, r3, #32
 800f892:	6023      	strmi	r3, [r4, #0]
 800f894:	b11d      	cbz	r5, 800f89e <_printf_i+0x19e>
 800f896:	2310      	movs	r3, #16
 800f898:	e7ac      	b.n	800f7f4 <_printf_i+0xf4>
 800f89a:	4827      	ldr	r0, [pc, #156]	@ (800f938 <_printf_i+0x238>)
 800f89c:	e7e9      	b.n	800f872 <_printf_i+0x172>
 800f89e:	6823      	ldr	r3, [r4, #0]
 800f8a0:	f023 0320 	bic.w	r3, r3, #32
 800f8a4:	6023      	str	r3, [r4, #0]
 800f8a6:	e7f6      	b.n	800f896 <_printf_i+0x196>
 800f8a8:	4616      	mov	r6, r2
 800f8aa:	e7bd      	b.n	800f828 <_printf_i+0x128>
 800f8ac:	6833      	ldr	r3, [r6, #0]
 800f8ae:	6825      	ldr	r5, [r4, #0]
 800f8b0:	6961      	ldr	r1, [r4, #20]
 800f8b2:	1d18      	adds	r0, r3, #4
 800f8b4:	6030      	str	r0, [r6, #0]
 800f8b6:	062e      	lsls	r6, r5, #24
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	d501      	bpl.n	800f8c0 <_printf_i+0x1c0>
 800f8bc:	6019      	str	r1, [r3, #0]
 800f8be:	e002      	b.n	800f8c6 <_printf_i+0x1c6>
 800f8c0:	0668      	lsls	r0, r5, #25
 800f8c2:	d5fb      	bpl.n	800f8bc <_printf_i+0x1bc>
 800f8c4:	8019      	strh	r1, [r3, #0]
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	6123      	str	r3, [r4, #16]
 800f8ca:	4616      	mov	r6, r2
 800f8cc:	e7bc      	b.n	800f848 <_printf_i+0x148>
 800f8ce:	6833      	ldr	r3, [r6, #0]
 800f8d0:	1d1a      	adds	r2, r3, #4
 800f8d2:	6032      	str	r2, [r6, #0]
 800f8d4:	681e      	ldr	r6, [r3, #0]
 800f8d6:	6862      	ldr	r2, [r4, #4]
 800f8d8:	2100      	movs	r1, #0
 800f8da:	4630      	mov	r0, r6
 800f8dc:	f7f0 fd18 	bl	8000310 <memchr>
 800f8e0:	b108      	cbz	r0, 800f8e6 <_printf_i+0x1e6>
 800f8e2:	1b80      	subs	r0, r0, r6
 800f8e4:	6060      	str	r0, [r4, #4]
 800f8e6:	6863      	ldr	r3, [r4, #4]
 800f8e8:	6123      	str	r3, [r4, #16]
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f8f0:	e7aa      	b.n	800f848 <_printf_i+0x148>
 800f8f2:	6923      	ldr	r3, [r4, #16]
 800f8f4:	4632      	mov	r2, r6
 800f8f6:	4649      	mov	r1, r9
 800f8f8:	4640      	mov	r0, r8
 800f8fa:	47d0      	blx	sl
 800f8fc:	3001      	adds	r0, #1
 800f8fe:	d0ad      	beq.n	800f85c <_printf_i+0x15c>
 800f900:	6823      	ldr	r3, [r4, #0]
 800f902:	079b      	lsls	r3, r3, #30
 800f904:	d413      	bmi.n	800f92e <_printf_i+0x22e>
 800f906:	68e0      	ldr	r0, [r4, #12]
 800f908:	9b03      	ldr	r3, [sp, #12]
 800f90a:	4298      	cmp	r0, r3
 800f90c:	bfb8      	it	lt
 800f90e:	4618      	movlt	r0, r3
 800f910:	e7a6      	b.n	800f860 <_printf_i+0x160>
 800f912:	2301      	movs	r3, #1
 800f914:	4632      	mov	r2, r6
 800f916:	4649      	mov	r1, r9
 800f918:	4640      	mov	r0, r8
 800f91a:	47d0      	blx	sl
 800f91c:	3001      	adds	r0, #1
 800f91e:	d09d      	beq.n	800f85c <_printf_i+0x15c>
 800f920:	3501      	adds	r5, #1
 800f922:	68e3      	ldr	r3, [r4, #12]
 800f924:	9903      	ldr	r1, [sp, #12]
 800f926:	1a5b      	subs	r3, r3, r1
 800f928:	42ab      	cmp	r3, r5
 800f92a:	dcf2      	bgt.n	800f912 <_printf_i+0x212>
 800f92c:	e7eb      	b.n	800f906 <_printf_i+0x206>
 800f92e:	2500      	movs	r5, #0
 800f930:	f104 0619 	add.w	r6, r4, #25
 800f934:	e7f5      	b.n	800f922 <_printf_i+0x222>
 800f936:	bf00      	nop
 800f938:	08013318 	.word	0x08013318
 800f93c:	08013329 	.word	0x08013329

0800f940 <_scanf_float>:
 800f940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f944:	b087      	sub	sp, #28
 800f946:	4617      	mov	r7, r2
 800f948:	9303      	str	r3, [sp, #12]
 800f94a:	688b      	ldr	r3, [r1, #8]
 800f94c:	1e5a      	subs	r2, r3, #1
 800f94e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f952:	bf81      	itttt	hi
 800f954:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f958:	eb03 0b05 	addhi.w	fp, r3, r5
 800f95c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f960:	608b      	strhi	r3, [r1, #8]
 800f962:	680b      	ldr	r3, [r1, #0]
 800f964:	460a      	mov	r2, r1
 800f966:	f04f 0500 	mov.w	r5, #0
 800f96a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f96e:	f842 3b1c 	str.w	r3, [r2], #28
 800f972:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f976:	4680      	mov	r8, r0
 800f978:	460c      	mov	r4, r1
 800f97a:	bf98      	it	ls
 800f97c:	f04f 0b00 	movls.w	fp, #0
 800f980:	9201      	str	r2, [sp, #4]
 800f982:	4616      	mov	r6, r2
 800f984:	46aa      	mov	sl, r5
 800f986:	46a9      	mov	r9, r5
 800f988:	9502      	str	r5, [sp, #8]
 800f98a:	68a2      	ldr	r2, [r4, #8]
 800f98c:	b152      	cbz	r2, 800f9a4 <_scanf_float+0x64>
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	2b4e      	cmp	r3, #78	@ 0x4e
 800f994:	d864      	bhi.n	800fa60 <_scanf_float+0x120>
 800f996:	2b40      	cmp	r3, #64	@ 0x40
 800f998:	d83c      	bhi.n	800fa14 <_scanf_float+0xd4>
 800f99a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f99e:	b2c8      	uxtb	r0, r1
 800f9a0:	280e      	cmp	r0, #14
 800f9a2:	d93a      	bls.n	800fa1a <_scanf_float+0xda>
 800f9a4:	f1b9 0f00 	cmp.w	r9, #0
 800f9a8:	d003      	beq.n	800f9b2 <_scanf_float+0x72>
 800f9aa:	6823      	ldr	r3, [r4, #0]
 800f9ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f9b0:	6023      	str	r3, [r4, #0]
 800f9b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f9b6:	f1ba 0f01 	cmp.w	sl, #1
 800f9ba:	f200 8117 	bhi.w	800fbec <_scanf_float+0x2ac>
 800f9be:	9b01      	ldr	r3, [sp, #4]
 800f9c0:	429e      	cmp	r6, r3
 800f9c2:	f200 8108 	bhi.w	800fbd6 <_scanf_float+0x296>
 800f9c6:	2001      	movs	r0, #1
 800f9c8:	b007      	add	sp, #28
 800f9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ce:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f9d2:	2a0d      	cmp	r2, #13
 800f9d4:	d8e6      	bhi.n	800f9a4 <_scanf_float+0x64>
 800f9d6:	a101      	add	r1, pc, #4	@ (adr r1, 800f9dc <_scanf_float+0x9c>)
 800f9d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f9dc:	0800fb23 	.word	0x0800fb23
 800f9e0:	0800f9a5 	.word	0x0800f9a5
 800f9e4:	0800f9a5 	.word	0x0800f9a5
 800f9e8:	0800f9a5 	.word	0x0800f9a5
 800f9ec:	0800fb83 	.word	0x0800fb83
 800f9f0:	0800fb5b 	.word	0x0800fb5b
 800f9f4:	0800f9a5 	.word	0x0800f9a5
 800f9f8:	0800f9a5 	.word	0x0800f9a5
 800f9fc:	0800fb31 	.word	0x0800fb31
 800fa00:	0800f9a5 	.word	0x0800f9a5
 800fa04:	0800f9a5 	.word	0x0800f9a5
 800fa08:	0800f9a5 	.word	0x0800f9a5
 800fa0c:	0800f9a5 	.word	0x0800f9a5
 800fa10:	0800fae9 	.word	0x0800fae9
 800fa14:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800fa18:	e7db      	b.n	800f9d2 <_scanf_float+0x92>
 800fa1a:	290e      	cmp	r1, #14
 800fa1c:	d8c2      	bhi.n	800f9a4 <_scanf_float+0x64>
 800fa1e:	a001      	add	r0, pc, #4	@ (adr r0, 800fa24 <_scanf_float+0xe4>)
 800fa20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fa24:	0800fad9 	.word	0x0800fad9
 800fa28:	0800f9a5 	.word	0x0800f9a5
 800fa2c:	0800fad9 	.word	0x0800fad9
 800fa30:	0800fb6f 	.word	0x0800fb6f
 800fa34:	0800f9a5 	.word	0x0800f9a5
 800fa38:	0800fa81 	.word	0x0800fa81
 800fa3c:	0800fabf 	.word	0x0800fabf
 800fa40:	0800fabf 	.word	0x0800fabf
 800fa44:	0800fabf 	.word	0x0800fabf
 800fa48:	0800fabf 	.word	0x0800fabf
 800fa4c:	0800fabf 	.word	0x0800fabf
 800fa50:	0800fabf 	.word	0x0800fabf
 800fa54:	0800fabf 	.word	0x0800fabf
 800fa58:	0800fabf 	.word	0x0800fabf
 800fa5c:	0800fabf 	.word	0x0800fabf
 800fa60:	2b6e      	cmp	r3, #110	@ 0x6e
 800fa62:	d809      	bhi.n	800fa78 <_scanf_float+0x138>
 800fa64:	2b60      	cmp	r3, #96	@ 0x60
 800fa66:	d8b2      	bhi.n	800f9ce <_scanf_float+0x8e>
 800fa68:	2b54      	cmp	r3, #84	@ 0x54
 800fa6a:	d07b      	beq.n	800fb64 <_scanf_float+0x224>
 800fa6c:	2b59      	cmp	r3, #89	@ 0x59
 800fa6e:	d199      	bne.n	800f9a4 <_scanf_float+0x64>
 800fa70:	2d07      	cmp	r5, #7
 800fa72:	d197      	bne.n	800f9a4 <_scanf_float+0x64>
 800fa74:	2508      	movs	r5, #8
 800fa76:	e02c      	b.n	800fad2 <_scanf_float+0x192>
 800fa78:	2b74      	cmp	r3, #116	@ 0x74
 800fa7a:	d073      	beq.n	800fb64 <_scanf_float+0x224>
 800fa7c:	2b79      	cmp	r3, #121	@ 0x79
 800fa7e:	e7f6      	b.n	800fa6e <_scanf_float+0x12e>
 800fa80:	6821      	ldr	r1, [r4, #0]
 800fa82:	05c8      	lsls	r0, r1, #23
 800fa84:	d51b      	bpl.n	800fabe <_scanf_float+0x17e>
 800fa86:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800fa8a:	6021      	str	r1, [r4, #0]
 800fa8c:	f109 0901 	add.w	r9, r9, #1
 800fa90:	f1bb 0f00 	cmp.w	fp, #0
 800fa94:	d003      	beq.n	800fa9e <_scanf_float+0x15e>
 800fa96:	3201      	adds	r2, #1
 800fa98:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fa9c:	60a2      	str	r2, [r4, #8]
 800fa9e:	68a3      	ldr	r3, [r4, #8]
 800faa0:	3b01      	subs	r3, #1
 800faa2:	60a3      	str	r3, [r4, #8]
 800faa4:	6923      	ldr	r3, [r4, #16]
 800faa6:	3301      	adds	r3, #1
 800faa8:	6123      	str	r3, [r4, #16]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	3b01      	subs	r3, #1
 800faae:	2b00      	cmp	r3, #0
 800fab0:	607b      	str	r3, [r7, #4]
 800fab2:	f340 8087 	ble.w	800fbc4 <_scanf_float+0x284>
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	3301      	adds	r3, #1
 800faba:	603b      	str	r3, [r7, #0]
 800fabc:	e765      	b.n	800f98a <_scanf_float+0x4a>
 800fabe:	eb1a 0105 	adds.w	r1, sl, r5
 800fac2:	f47f af6f 	bne.w	800f9a4 <_scanf_float+0x64>
 800fac6:	6822      	ldr	r2, [r4, #0]
 800fac8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800facc:	6022      	str	r2, [r4, #0]
 800face:	460d      	mov	r5, r1
 800fad0:	468a      	mov	sl, r1
 800fad2:	f806 3b01 	strb.w	r3, [r6], #1
 800fad6:	e7e2      	b.n	800fa9e <_scanf_float+0x15e>
 800fad8:	6822      	ldr	r2, [r4, #0]
 800fada:	0610      	lsls	r0, r2, #24
 800fadc:	f57f af62 	bpl.w	800f9a4 <_scanf_float+0x64>
 800fae0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fae4:	6022      	str	r2, [r4, #0]
 800fae6:	e7f4      	b.n	800fad2 <_scanf_float+0x192>
 800fae8:	f1ba 0f00 	cmp.w	sl, #0
 800faec:	d10e      	bne.n	800fb0c <_scanf_float+0x1cc>
 800faee:	f1b9 0f00 	cmp.w	r9, #0
 800faf2:	d10e      	bne.n	800fb12 <_scanf_float+0x1d2>
 800faf4:	6822      	ldr	r2, [r4, #0]
 800faf6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fafa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fafe:	d108      	bne.n	800fb12 <_scanf_float+0x1d2>
 800fb00:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fb04:	6022      	str	r2, [r4, #0]
 800fb06:	f04f 0a01 	mov.w	sl, #1
 800fb0a:	e7e2      	b.n	800fad2 <_scanf_float+0x192>
 800fb0c:	f1ba 0f02 	cmp.w	sl, #2
 800fb10:	d055      	beq.n	800fbbe <_scanf_float+0x27e>
 800fb12:	2d01      	cmp	r5, #1
 800fb14:	d002      	beq.n	800fb1c <_scanf_float+0x1dc>
 800fb16:	2d04      	cmp	r5, #4
 800fb18:	f47f af44 	bne.w	800f9a4 <_scanf_float+0x64>
 800fb1c:	3501      	adds	r5, #1
 800fb1e:	b2ed      	uxtb	r5, r5
 800fb20:	e7d7      	b.n	800fad2 <_scanf_float+0x192>
 800fb22:	f1ba 0f01 	cmp.w	sl, #1
 800fb26:	f47f af3d 	bne.w	800f9a4 <_scanf_float+0x64>
 800fb2a:	f04f 0a02 	mov.w	sl, #2
 800fb2e:	e7d0      	b.n	800fad2 <_scanf_float+0x192>
 800fb30:	b97d      	cbnz	r5, 800fb52 <_scanf_float+0x212>
 800fb32:	f1b9 0f00 	cmp.w	r9, #0
 800fb36:	f47f af38 	bne.w	800f9aa <_scanf_float+0x6a>
 800fb3a:	6822      	ldr	r2, [r4, #0]
 800fb3c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fb40:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fb44:	f040 8101 	bne.w	800fd4a <_scanf_float+0x40a>
 800fb48:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fb4c:	6022      	str	r2, [r4, #0]
 800fb4e:	2501      	movs	r5, #1
 800fb50:	e7bf      	b.n	800fad2 <_scanf_float+0x192>
 800fb52:	2d03      	cmp	r5, #3
 800fb54:	d0e2      	beq.n	800fb1c <_scanf_float+0x1dc>
 800fb56:	2d05      	cmp	r5, #5
 800fb58:	e7de      	b.n	800fb18 <_scanf_float+0x1d8>
 800fb5a:	2d02      	cmp	r5, #2
 800fb5c:	f47f af22 	bne.w	800f9a4 <_scanf_float+0x64>
 800fb60:	2503      	movs	r5, #3
 800fb62:	e7b6      	b.n	800fad2 <_scanf_float+0x192>
 800fb64:	2d06      	cmp	r5, #6
 800fb66:	f47f af1d 	bne.w	800f9a4 <_scanf_float+0x64>
 800fb6a:	2507      	movs	r5, #7
 800fb6c:	e7b1      	b.n	800fad2 <_scanf_float+0x192>
 800fb6e:	6822      	ldr	r2, [r4, #0]
 800fb70:	0591      	lsls	r1, r2, #22
 800fb72:	f57f af17 	bpl.w	800f9a4 <_scanf_float+0x64>
 800fb76:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fb7a:	6022      	str	r2, [r4, #0]
 800fb7c:	f8cd 9008 	str.w	r9, [sp, #8]
 800fb80:	e7a7      	b.n	800fad2 <_scanf_float+0x192>
 800fb82:	6822      	ldr	r2, [r4, #0]
 800fb84:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fb88:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fb8c:	d006      	beq.n	800fb9c <_scanf_float+0x25c>
 800fb8e:	0550      	lsls	r0, r2, #21
 800fb90:	f57f af08 	bpl.w	800f9a4 <_scanf_float+0x64>
 800fb94:	f1b9 0f00 	cmp.w	r9, #0
 800fb98:	f000 80d7 	beq.w	800fd4a <_scanf_float+0x40a>
 800fb9c:	0591      	lsls	r1, r2, #22
 800fb9e:	bf58      	it	pl
 800fba0:	9902      	ldrpl	r1, [sp, #8]
 800fba2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fba6:	bf58      	it	pl
 800fba8:	eba9 0101 	subpl.w	r1, r9, r1
 800fbac:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800fbb0:	bf58      	it	pl
 800fbb2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fbb6:	6022      	str	r2, [r4, #0]
 800fbb8:	f04f 0900 	mov.w	r9, #0
 800fbbc:	e789      	b.n	800fad2 <_scanf_float+0x192>
 800fbbe:	f04f 0a03 	mov.w	sl, #3
 800fbc2:	e786      	b.n	800fad2 <_scanf_float+0x192>
 800fbc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fbc8:	4639      	mov	r1, r7
 800fbca:	4640      	mov	r0, r8
 800fbcc:	4798      	blx	r3
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	f43f aedb 	beq.w	800f98a <_scanf_float+0x4a>
 800fbd4:	e6e6      	b.n	800f9a4 <_scanf_float+0x64>
 800fbd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fbda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fbde:	463a      	mov	r2, r7
 800fbe0:	4640      	mov	r0, r8
 800fbe2:	4798      	blx	r3
 800fbe4:	6923      	ldr	r3, [r4, #16]
 800fbe6:	3b01      	subs	r3, #1
 800fbe8:	6123      	str	r3, [r4, #16]
 800fbea:	e6e8      	b.n	800f9be <_scanf_float+0x7e>
 800fbec:	1e6b      	subs	r3, r5, #1
 800fbee:	2b06      	cmp	r3, #6
 800fbf0:	d824      	bhi.n	800fc3c <_scanf_float+0x2fc>
 800fbf2:	2d02      	cmp	r5, #2
 800fbf4:	d836      	bhi.n	800fc64 <_scanf_float+0x324>
 800fbf6:	9b01      	ldr	r3, [sp, #4]
 800fbf8:	429e      	cmp	r6, r3
 800fbfa:	f67f aee4 	bls.w	800f9c6 <_scanf_float+0x86>
 800fbfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fc06:	463a      	mov	r2, r7
 800fc08:	4640      	mov	r0, r8
 800fc0a:	4798      	blx	r3
 800fc0c:	6923      	ldr	r3, [r4, #16]
 800fc0e:	3b01      	subs	r3, #1
 800fc10:	6123      	str	r3, [r4, #16]
 800fc12:	e7f0      	b.n	800fbf6 <_scanf_float+0x2b6>
 800fc14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc18:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fc1c:	463a      	mov	r2, r7
 800fc1e:	4640      	mov	r0, r8
 800fc20:	4798      	blx	r3
 800fc22:	6923      	ldr	r3, [r4, #16]
 800fc24:	3b01      	subs	r3, #1
 800fc26:	6123      	str	r3, [r4, #16]
 800fc28:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc2c:	fa5f fa8a 	uxtb.w	sl, sl
 800fc30:	f1ba 0f02 	cmp.w	sl, #2
 800fc34:	d1ee      	bne.n	800fc14 <_scanf_float+0x2d4>
 800fc36:	3d03      	subs	r5, #3
 800fc38:	b2ed      	uxtb	r5, r5
 800fc3a:	1b76      	subs	r6, r6, r5
 800fc3c:	6823      	ldr	r3, [r4, #0]
 800fc3e:	05da      	lsls	r2, r3, #23
 800fc40:	d530      	bpl.n	800fca4 <_scanf_float+0x364>
 800fc42:	055b      	lsls	r3, r3, #21
 800fc44:	d511      	bpl.n	800fc6a <_scanf_float+0x32a>
 800fc46:	9b01      	ldr	r3, [sp, #4]
 800fc48:	429e      	cmp	r6, r3
 800fc4a:	f67f aebc 	bls.w	800f9c6 <_scanf_float+0x86>
 800fc4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fc56:	463a      	mov	r2, r7
 800fc58:	4640      	mov	r0, r8
 800fc5a:	4798      	blx	r3
 800fc5c:	6923      	ldr	r3, [r4, #16]
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	6123      	str	r3, [r4, #16]
 800fc62:	e7f0      	b.n	800fc46 <_scanf_float+0x306>
 800fc64:	46aa      	mov	sl, r5
 800fc66:	46b3      	mov	fp, r6
 800fc68:	e7de      	b.n	800fc28 <_scanf_float+0x2e8>
 800fc6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fc6e:	6923      	ldr	r3, [r4, #16]
 800fc70:	2965      	cmp	r1, #101	@ 0x65
 800fc72:	f103 33ff 	add.w	r3, r3, #4294967295
 800fc76:	f106 35ff 	add.w	r5, r6, #4294967295
 800fc7a:	6123      	str	r3, [r4, #16]
 800fc7c:	d00c      	beq.n	800fc98 <_scanf_float+0x358>
 800fc7e:	2945      	cmp	r1, #69	@ 0x45
 800fc80:	d00a      	beq.n	800fc98 <_scanf_float+0x358>
 800fc82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc86:	463a      	mov	r2, r7
 800fc88:	4640      	mov	r0, r8
 800fc8a:	4798      	blx	r3
 800fc8c:	6923      	ldr	r3, [r4, #16]
 800fc8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fc92:	3b01      	subs	r3, #1
 800fc94:	1eb5      	subs	r5, r6, #2
 800fc96:	6123      	str	r3, [r4, #16]
 800fc98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc9c:	463a      	mov	r2, r7
 800fc9e:	4640      	mov	r0, r8
 800fca0:	4798      	blx	r3
 800fca2:	462e      	mov	r6, r5
 800fca4:	6822      	ldr	r2, [r4, #0]
 800fca6:	f012 0210 	ands.w	r2, r2, #16
 800fcaa:	d001      	beq.n	800fcb0 <_scanf_float+0x370>
 800fcac:	2000      	movs	r0, #0
 800fcae:	e68b      	b.n	800f9c8 <_scanf_float+0x88>
 800fcb0:	7032      	strb	r2, [r6, #0]
 800fcb2:	6823      	ldr	r3, [r4, #0]
 800fcb4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fcb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fcbc:	d11a      	bne.n	800fcf4 <_scanf_float+0x3b4>
 800fcbe:	9b02      	ldr	r3, [sp, #8]
 800fcc0:	454b      	cmp	r3, r9
 800fcc2:	eba3 0209 	sub.w	r2, r3, r9
 800fcc6:	d121      	bne.n	800fd0c <_scanf_float+0x3cc>
 800fcc8:	9901      	ldr	r1, [sp, #4]
 800fcca:	2200      	movs	r2, #0
 800fccc:	4640      	mov	r0, r8
 800fcce:	f7ff f9f9 	bl	800f0c4 <_strtod_r>
 800fcd2:	9b03      	ldr	r3, [sp, #12]
 800fcd4:	6821      	ldr	r1, [r4, #0]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f011 0f02 	tst.w	r1, #2
 800fcdc:	f103 0204 	add.w	r2, r3, #4
 800fce0:	d01f      	beq.n	800fd22 <_scanf_float+0x3e2>
 800fce2:	9903      	ldr	r1, [sp, #12]
 800fce4:	600a      	str	r2, [r1, #0]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	ed83 0b00 	vstr	d0, [r3]
 800fcec:	68e3      	ldr	r3, [r4, #12]
 800fcee:	3301      	adds	r3, #1
 800fcf0:	60e3      	str	r3, [r4, #12]
 800fcf2:	e7db      	b.n	800fcac <_scanf_float+0x36c>
 800fcf4:	9b04      	ldr	r3, [sp, #16]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d0e6      	beq.n	800fcc8 <_scanf_float+0x388>
 800fcfa:	9905      	ldr	r1, [sp, #20]
 800fcfc:	230a      	movs	r3, #10
 800fcfe:	3101      	adds	r1, #1
 800fd00:	4640      	mov	r0, r8
 800fd02:	f002 f8e7 	bl	8011ed4 <_strtol_r>
 800fd06:	9b04      	ldr	r3, [sp, #16]
 800fd08:	9e05      	ldr	r6, [sp, #20]
 800fd0a:	1ac2      	subs	r2, r0, r3
 800fd0c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fd10:	429e      	cmp	r6, r3
 800fd12:	bf28      	it	cs
 800fd14:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fd18:	490d      	ldr	r1, [pc, #52]	@ (800fd50 <_scanf_float+0x410>)
 800fd1a:	4630      	mov	r0, r6
 800fd1c:	f000 f8de 	bl	800fedc <siprintf>
 800fd20:	e7d2      	b.n	800fcc8 <_scanf_float+0x388>
 800fd22:	f011 0f04 	tst.w	r1, #4
 800fd26:	9903      	ldr	r1, [sp, #12]
 800fd28:	600a      	str	r2, [r1, #0]
 800fd2a:	d1dc      	bne.n	800fce6 <_scanf_float+0x3a6>
 800fd2c:	eeb4 0b40 	vcmp.f64	d0, d0
 800fd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd34:	681d      	ldr	r5, [r3, #0]
 800fd36:	d705      	bvc.n	800fd44 <_scanf_float+0x404>
 800fd38:	4806      	ldr	r0, [pc, #24]	@ (800fd54 <_scanf_float+0x414>)
 800fd3a:	f000 fa25 	bl	8010188 <nanf>
 800fd3e:	ed85 0a00 	vstr	s0, [r5]
 800fd42:	e7d3      	b.n	800fcec <_scanf_float+0x3ac>
 800fd44:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800fd48:	e7f9      	b.n	800fd3e <_scanf_float+0x3fe>
 800fd4a:	f04f 0900 	mov.w	r9, #0
 800fd4e:	e630      	b.n	800f9b2 <_scanf_float+0x72>
 800fd50:	0801333a 	.word	0x0801333a
 800fd54:	080136f8 	.word	0x080136f8

0800fd58 <std>:
 800fd58:	2300      	movs	r3, #0
 800fd5a:	b510      	push	{r4, lr}
 800fd5c:	4604      	mov	r4, r0
 800fd5e:	e9c0 3300 	strd	r3, r3, [r0]
 800fd62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd66:	6083      	str	r3, [r0, #8]
 800fd68:	8181      	strh	r1, [r0, #12]
 800fd6a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fd6c:	81c2      	strh	r2, [r0, #14]
 800fd6e:	6183      	str	r3, [r0, #24]
 800fd70:	4619      	mov	r1, r3
 800fd72:	2208      	movs	r2, #8
 800fd74:	305c      	adds	r0, #92	@ 0x5c
 800fd76:	f000 f940 	bl	800fffa <memset>
 800fd7a:	4b0d      	ldr	r3, [pc, #52]	@ (800fdb0 <std+0x58>)
 800fd7c:	6263      	str	r3, [r4, #36]	@ 0x24
 800fd7e:	4b0d      	ldr	r3, [pc, #52]	@ (800fdb4 <std+0x5c>)
 800fd80:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fd82:	4b0d      	ldr	r3, [pc, #52]	@ (800fdb8 <std+0x60>)
 800fd84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fd86:	4b0d      	ldr	r3, [pc, #52]	@ (800fdbc <std+0x64>)
 800fd88:	6323      	str	r3, [r4, #48]	@ 0x30
 800fd8a:	4b0d      	ldr	r3, [pc, #52]	@ (800fdc0 <std+0x68>)
 800fd8c:	6224      	str	r4, [r4, #32]
 800fd8e:	429c      	cmp	r4, r3
 800fd90:	d006      	beq.n	800fda0 <std+0x48>
 800fd92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fd96:	4294      	cmp	r4, r2
 800fd98:	d002      	beq.n	800fda0 <std+0x48>
 800fd9a:	33d0      	adds	r3, #208	@ 0xd0
 800fd9c:	429c      	cmp	r4, r3
 800fd9e:	d105      	bne.n	800fdac <std+0x54>
 800fda0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fda4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fda8:	f000 b9d2 	b.w	8010150 <__retarget_lock_init_recursive>
 800fdac:	bd10      	pop	{r4, pc}
 800fdae:	bf00      	nop
 800fdb0:	0800ff71 	.word	0x0800ff71
 800fdb4:	0800ff97 	.word	0x0800ff97
 800fdb8:	0800ffcf 	.word	0x0800ffcf
 800fdbc:	0800fff3 	.word	0x0800fff3
 800fdc0:	24000d88 	.word	0x24000d88

0800fdc4 <stdio_exit_handler>:
 800fdc4:	4a02      	ldr	r2, [pc, #8]	@ (800fdd0 <stdio_exit_handler+0xc>)
 800fdc6:	4903      	ldr	r1, [pc, #12]	@ (800fdd4 <stdio_exit_handler+0x10>)
 800fdc8:	4803      	ldr	r0, [pc, #12]	@ (800fdd8 <stdio_exit_handler+0x14>)
 800fdca:	f000 b869 	b.w	800fea0 <_fwalk_sglue>
 800fdce:	bf00      	nop
 800fdd0:	2400004c 	.word	0x2400004c
 800fdd4:	080128dd 	.word	0x080128dd
 800fdd8:	240001c8 	.word	0x240001c8

0800fddc <cleanup_stdio>:
 800fddc:	6841      	ldr	r1, [r0, #4]
 800fdde:	4b0c      	ldr	r3, [pc, #48]	@ (800fe10 <cleanup_stdio+0x34>)
 800fde0:	4299      	cmp	r1, r3
 800fde2:	b510      	push	{r4, lr}
 800fde4:	4604      	mov	r4, r0
 800fde6:	d001      	beq.n	800fdec <cleanup_stdio+0x10>
 800fde8:	f002 fd78 	bl	80128dc <_fflush_r>
 800fdec:	68a1      	ldr	r1, [r4, #8]
 800fdee:	4b09      	ldr	r3, [pc, #36]	@ (800fe14 <cleanup_stdio+0x38>)
 800fdf0:	4299      	cmp	r1, r3
 800fdf2:	d002      	beq.n	800fdfa <cleanup_stdio+0x1e>
 800fdf4:	4620      	mov	r0, r4
 800fdf6:	f002 fd71 	bl	80128dc <_fflush_r>
 800fdfa:	68e1      	ldr	r1, [r4, #12]
 800fdfc:	4b06      	ldr	r3, [pc, #24]	@ (800fe18 <cleanup_stdio+0x3c>)
 800fdfe:	4299      	cmp	r1, r3
 800fe00:	d004      	beq.n	800fe0c <cleanup_stdio+0x30>
 800fe02:	4620      	mov	r0, r4
 800fe04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe08:	f002 bd68 	b.w	80128dc <_fflush_r>
 800fe0c:	bd10      	pop	{r4, pc}
 800fe0e:	bf00      	nop
 800fe10:	24000d88 	.word	0x24000d88
 800fe14:	24000df0 	.word	0x24000df0
 800fe18:	24000e58 	.word	0x24000e58

0800fe1c <global_stdio_init.part.0>:
 800fe1c:	b510      	push	{r4, lr}
 800fe1e:	4b0b      	ldr	r3, [pc, #44]	@ (800fe4c <global_stdio_init.part.0+0x30>)
 800fe20:	4c0b      	ldr	r4, [pc, #44]	@ (800fe50 <global_stdio_init.part.0+0x34>)
 800fe22:	4a0c      	ldr	r2, [pc, #48]	@ (800fe54 <global_stdio_init.part.0+0x38>)
 800fe24:	601a      	str	r2, [r3, #0]
 800fe26:	4620      	mov	r0, r4
 800fe28:	2200      	movs	r2, #0
 800fe2a:	2104      	movs	r1, #4
 800fe2c:	f7ff ff94 	bl	800fd58 <std>
 800fe30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fe34:	2201      	movs	r2, #1
 800fe36:	2109      	movs	r1, #9
 800fe38:	f7ff ff8e 	bl	800fd58 <std>
 800fe3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fe40:	2202      	movs	r2, #2
 800fe42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe46:	2112      	movs	r1, #18
 800fe48:	f7ff bf86 	b.w	800fd58 <std>
 800fe4c:	24000ec0 	.word	0x24000ec0
 800fe50:	24000d88 	.word	0x24000d88
 800fe54:	0800fdc5 	.word	0x0800fdc5

0800fe58 <__sfp_lock_acquire>:
 800fe58:	4801      	ldr	r0, [pc, #4]	@ (800fe60 <__sfp_lock_acquire+0x8>)
 800fe5a:	f000 b97a 	b.w	8010152 <__retarget_lock_acquire_recursive>
 800fe5e:	bf00      	nop
 800fe60:	24000ec9 	.word	0x24000ec9

0800fe64 <__sfp_lock_release>:
 800fe64:	4801      	ldr	r0, [pc, #4]	@ (800fe6c <__sfp_lock_release+0x8>)
 800fe66:	f000 b975 	b.w	8010154 <__retarget_lock_release_recursive>
 800fe6a:	bf00      	nop
 800fe6c:	24000ec9 	.word	0x24000ec9

0800fe70 <__sinit>:
 800fe70:	b510      	push	{r4, lr}
 800fe72:	4604      	mov	r4, r0
 800fe74:	f7ff fff0 	bl	800fe58 <__sfp_lock_acquire>
 800fe78:	6a23      	ldr	r3, [r4, #32]
 800fe7a:	b11b      	cbz	r3, 800fe84 <__sinit+0x14>
 800fe7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe80:	f7ff bff0 	b.w	800fe64 <__sfp_lock_release>
 800fe84:	4b04      	ldr	r3, [pc, #16]	@ (800fe98 <__sinit+0x28>)
 800fe86:	6223      	str	r3, [r4, #32]
 800fe88:	4b04      	ldr	r3, [pc, #16]	@ (800fe9c <__sinit+0x2c>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d1f5      	bne.n	800fe7c <__sinit+0xc>
 800fe90:	f7ff ffc4 	bl	800fe1c <global_stdio_init.part.0>
 800fe94:	e7f2      	b.n	800fe7c <__sinit+0xc>
 800fe96:	bf00      	nop
 800fe98:	0800fddd 	.word	0x0800fddd
 800fe9c:	24000ec0 	.word	0x24000ec0

0800fea0 <_fwalk_sglue>:
 800fea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fea4:	4607      	mov	r7, r0
 800fea6:	4688      	mov	r8, r1
 800fea8:	4614      	mov	r4, r2
 800feaa:	2600      	movs	r6, #0
 800feac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800feb0:	f1b9 0901 	subs.w	r9, r9, #1
 800feb4:	d505      	bpl.n	800fec2 <_fwalk_sglue+0x22>
 800feb6:	6824      	ldr	r4, [r4, #0]
 800feb8:	2c00      	cmp	r4, #0
 800feba:	d1f7      	bne.n	800feac <_fwalk_sglue+0xc>
 800febc:	4630      	mov	r0, r6
 800febe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fec2:	89ab      	ldrh	r3, [r5, #12]
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d907      	bls.n	800fed8 <_fwalk_sglue+0x38>
 800fec8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fecc:	3301      	adds	r3, #1
 800fece:	d003      	beq.n	800fed8 <_fwalk_sglue+0x38>
 800fed0:	4629      	mov	r1, r5
 800fed2:	4638      	mov	r0, r7
 800fed4:	47c0      	blx	r8
 800fed6:	4306      	orrs	r6, r0
 800fed8:	3568      	adds	r5, #104	@ 0x68
 800feda:	e7e9      	b.n	800feb0 <_fwalk_sglue+0x10>

0800fedc <siprintf>:
 800fedc:	b40e      	push	{r1, r2, r3}
 800fede:	b500      	push	{lr}
 800fee0:	b09c      	sub	sp, #112	@ 0x70
 800fee2:	ab1d      	add	r3, sp, #116	@ 0x74
 800fee4:	9002      	str	r0, [sp, #8]
 800fee6:	9006      	str	r0, [sp, #24]
 800fee8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800feec:	4809      	ldr	r0, [pc, #36]	@ (800ff14 <siprintf+0x38>)
 800feee:	9107      	str	r1, [sp, #28]
 800fef0:	9104      	str	r1, [sp, #16]
 800fef2:	4909      	ldr	r1, [pc, #36]	@ (800ff18 <siprintf+0x3c>)
 800fef4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fef8:	9105      	str	r1, [sp, #20]
 800fefa:	6800      	ldr	r0, [r0, #0]
 800fefc:	9301      	str	r3, [sp, #4]
 800fefe:	a902      	add	r1, sp, #8
 800ff00:	f002 f852 	bl	8011fa8 <_svfiprintf_r>
 800ff04:	9b02      	ldr	r3, [sp, #8]
 800ff06:	2200      	movs	r2, #0
 800ff08:	701a      	strb	r2, [r3, #0]
 800ff0a:	b01c      	add	sp, #112	@ 0x70
 800ff0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff10:	b003      	add	sp, #12
 800ff12:	4770      	bx	lr
 800ff14:	240001c4 	.word	0x240001c4
 800ff18:	ffff0208 	.word	0xffff0208

0800ff1c <siscanf>:
 800ff1c:	b40e      	push	{r1, r2, r3}
 800ff1e:	b530      	push	{r4, r5, lr}
 800ff20:	b09c      	sub	sp, #112	@ 0x70
 800ff22:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ff24:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800ff28:	f854 5b04 	ldr.w	r5, [r4], #4
 800ff2c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ff30:	9002      	str	r0, [sp, #8]
 800ff32:	9006      	str	r0, [sp, #24]
 800ff34:	f7f0 fa3c 	bl	80003b0 <strlen>
 800ff38:	4b0b      	ldr	r3, [pc, #44]	@ (800ff68 <siscanf+0x4c>)
 800ff3a:	9003      	str	r0, [sp, #12]
 800ff3c:	9007      	str	r0, [sp, #28]
 800ff3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff40:	480a      	ldr	r0, [pc, #40]	@ (800ff6c <siscanf+0x50>)
 800ff42:	9401      	str	r4, [sp, #4]
 800ff44:	2300      	movs	r3, #0
 800ff46:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ff48:	9314      	str	r3, [sp, #80]	@ 0x50
 800ff4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ff4e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ff52:	462a      	mov	r2, r5
 800ff54:	4623      	mov	r3, r4
 800ff56:	a902      	add	r1, sp, #8
 800ff58:	6800      	ldr	r0, [r0, #0]
 800ff5a:	f002 f979 	bl	8012250 <__ssvfiscanf_r>
 800ff5e:	b01c      	add	sp, #112	@ 0x70
 800ff60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff64:	b003      	add	sp, #12
 800ff66:	4770      	bx	lr
 800ff68:	0800ff93 	.word	0x0800ff93
 800ff6c:	240001c4 	.word	0x240001c4

0800ff70 <__sread>:
 800ff70:	b510      	push	{r4, lr}
 800ff72:	460c      	mov	r4, r1
 800ff74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff78:	f000 f88c 	bl	8010094 <_read_r>
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	bfab      	itete	ge
 800ff80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ff82:	89a3      	ldrhlt	r3, [r4, #12]
 800ff84:	181b      	addge	r3, r3, r0
 800ff86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ff8a:	bfac      	ite	ge
 800ff8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ff8e:	81a3      	strhlt	r3, [r4, #12]
 800ff90:	bd10      	pop	{r4, pc}

0800ff92 <__seofread>:
 800ff92:	2000      	movs	r0, #0
 800ff94:	4770      	bx	lr

0800ff96 <__swrite>:
 800ff96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff9a:	461f      	mov	r7, r3
 800ff9c:	898b      	ldrh	r3, [r1, #12]
 800ff9e:	05db      	lsls	r3, r3, #23
 800ffa0:	4605      	mov	r5, r0
 800ffa2:	460c      	mov	r4, r1
 800ffa4:	4616      	mov	r6, r2
 800ffa6:	d505      	bpl.n	800ffb4 <__swrite+0x1e>
 800ffa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffac:	2302      	movs	r3, #2
 800ffae:	2200      	movs	r2, #0
 800ffb0:	f000 f85e 	bl	8010070 <_lseek_r>
 800ffb4:	89a3      	ldrh	r3, [r4, #12]
 800ffb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ffbe:	81a3      	strh	r3, [r4, #12]
 800ffc0:	4632      	mov	r2, r6
 800ffc2:	463b      	mov	r3, r7
 800ffc4:	4628      	mov	r0, r5
 800ffc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffca:	f000 b885 	b.w	80100d8 <_write_r>

0800ffce <__sseek>:
 800ffce:	b510      	push	{r4, lr}
 800ffd0:	460c      	mov	r4, r1
 800ffd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffd6:	f000 f84b 	bl	8010070 <_lseek_r>
 800ffda:	1c43      	adds	r3, r0, #1
 800ffdc:	89a3      	ldrh	r3, [r4, #12]
 800ffde:	bf15      	itete	ne
 800ffe0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ffe2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ffe6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ffea:	81a3      	strheq	r3, [r4, #12]
 800ffec:	bf18      	it	ne
 800ffee:	81a3      	strhne	r3, [r4, #12]
 800fff0:	bd10      	pop	{r4, pc}

0800fff2 <__sclose>:
 800fff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fff6:	f000 b82b 	b.w	8010050 <_close_r>

0800fffa <memset>:
 800fffa:	4402      	add	r2, r0
 800fffc:	4603      	mov	r3, r0
 800fffe:	4293      	cmp	r3, r2
 8010000:	d100      	bne.n	8010004 <memset+0xa>
 8010002:	4770      	bx	lr
 8010004:	f803 1b01 	strb.w	r1, [r3], #1
 8010008:	e7f9      	b.n	800fffe <memset+0x4>

0801000a <strchr>:
 801000a:	b2c9      	uxtb	r1, r1
 801000c:	4603      	mov	r3, r0
 801000e:	4618      	mov	r0, r3
 8010010:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010014:	b112      	cbz	r2, 801001c <strchr+0x12>
 8010016:	428a      	cmp	r2, r1
 8010018:	d1f9      	bne.n	801000e <strchr+0x4>
 801001a:	4770      	bx	lr
 801001c:	2900      	cmp	r1, #0
 801001e:	bf18      	it	ne
 8010020:	2000      	movne	r0, #0
 8010022:	4770      	bx	lr

08010024 <strncmp>:
 8010024:	b510      	push	{r4, lr}
 8010026:	b16a      	cbz	r2, 8010044 <strncmp+0x20>
 8010028:	3901      	subs	r1, #1
 801002a:	1884      	adds	r4, r0, r2
 801002c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010030:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010034:	429a      	cmp	r2, r3
 8010036:	d103      	bne.n	8010040 <strncmp+0x1c>
 8010038:	42a0      	cmp	r0, r4
 801003a:	d001      	beq.n	8010040 <strncmp+0x1c>
 801003c:	2a00      	cmp	r2, #0
 801003e:	d1f5      	bne.n	801002c <strncmp+0x8>
 8010040:	1ad0      	subs	r0, r2, r3
 8010042:	bd10      	pop	{r4, pc}
 8010044:	4610      	mov	r0, r2
 8010046:	e7fc      	b.n	8010042 <strncmp+0x1e>

08010048 <_localeconv_r>:
 8010048:	4800      	ldr	r0, [pc, #0]	@ (801004c <_localeconv_r+0x4>)
 801004a:	4770      	bx	lr
 801004c:	24000148 	.word	0x24000148

08010050 <_close_r>:
 8010050:	b538      	push	{r3, r4, r5, lr}
 8010052:	4d06      	ldr	r5, [pc, #24]	@ (801006c <_close_r+0x1c>)
 8010054:	2300      	movs	r3, #0
 8010056:	4604      	mov	r4, r0
 8010058:	4608      	mov	r0, r1
 801005a:	602b      	str	r3, [r5, #0]
 801005c:	f7f1 fc86 	bl	800196c <_close>
 8010060:	1c43      	adds	r3, r0, #1
 8010062:	d102      	bne.n	801006a <_close_r+0x1a>
 8010064:	682b      	ldr	r3, [r5, #0]
 8010066:	b103      	cbz	r3, 801006a <_close_r+0x1a>
 8010068:	6023      	str	r3, [r4, #0]
 801006a:	bd38      	pop	{r3, r4, r5, pc}
 801006c:	24000ec4 	.word	0x24000ec4

08010070 <_lseek_r>:
 8010070:	b538      	push	{r3, r4, r5, lr}
 8010072:	4d07      	ldr	r5, [pc, #28]	@ (8010090 <_lseek_r+0x20>)
 8010074:	4604      	mov	r4, r0
 8010076:	4608      	mov	r0, r1
 8010078:	4611      	mov	r1, r2
 801007a:	2200      	movs	r2, #0
 801007c:	602a      	str	r2, [r5, #0]
 801007e:	461a      	mov	r2, r3
 8010080:	f7f1 fc9b 	bl	80019ba <_lseek>
 8010084:	1c43      	adds	r3, r0, #1
 8010086:	d102      	bne.n	801008e <_lseek_r+0x1e>
 8010088:	682b      	ldr	r3, [r5, #0]
 801008a:	b103      	cbz	r3, 801008e <_lseek_r+0x1e>
 801008c:	6023      	str	r3, [r4, #0]
 801008e:	bd38      	pop	{r3, r4, r5, pc}
 8010090:	24000ec4 	.word	0x24000ec4

08010094 <_read_r>:
 8010094:	b538      	push	{r3, r4, r5, lr}
 8010096:	4d07      	ldr	r5, [pc, #28]	@ (80100b4 <_read_r+0x20>)
 8010098:	4604      	mov	r4, r0
 801009a:	4608      	mov	r0, r1
 801009c:	4611      	mov	r1, r2
 801009e:	2200      	movs	r2, #0
 80100a0:	602a      	str	r2, [r5, #0]
 80100a2:	461a      	mov	r2, r3
 80100a4:	f7f1 fc29 	bl	80018fa <_read>
 80100a8:	1c43      	adds	r3, r0, #1
 80100aa:	d102      	bne.n	80100b2 <_read_r+0x1e>
 80100ac:	682b      	ldr	r3, [r5, #0]
 80100ae:	b103      	cbz	r3, 80100b2 <_read_r+0x1e>
 80100b0:	6023      	str	r3, [r4, #0]
 80100b2:	bd38      	pop	{r3, r4, r5, pc}
 80100b4:	24000ec4 	.word	0x24000ec4

080100b8 <_sbrk_r>:
 80100b8:	b538      	push	{r3, r4, r5, lr}
 80100ba:	4d06      	ldr	r5, [pc, #24]	@ (80100d4 <_sbrk_r+0x1c>)
 80100bc:	2300      	movs	r3, #0
 80100be:	4604      	mov	r4, r0
 80100c0:	4608      	mov	r0, r1
 80100c2:	602b      	str	r3, [r5, #0]
 80100c4:	f7f1 fc86 	bl	80019d4 <_sbrk>
 80100c8:	1c43      	adds	r3, r0, #1
 80100ca:	d102      	bne.n	80100d2 <_sbrk_r+0x1a>
 80100cc:	682b      	ldr	r3, [r5, #0]
 80100ce:	b103      	cbz	r3, 80100d2 <_sbrk_r+0x1a>
 80100d0:	6023      	str	r3, [r4, #0]
 80100d2:	bd38      	pop	{r3, r4, r5, pc}
 80100d4:	24000ec4 	.word	0x24000ec4

080100d8 <_write_r>:
 80100d8:	b538      	push	{r3, r4, r5, lr}
 80100da:	4d07      	ldr	r5, [pc, #28]	@ (80100f8 <_write_r+0x20>)
 80100dc:	4604      	mov	r4, r0
 80100de:	4608      	mov	r0, r1
 80100e0:	4611      	mov	r1, r2
 80100e2:	2200      	movs	r2, #0
 80100e4:	602a      	str	r2, [r5, #0]
 80100e6:	461a      	mov	r2, r3
 80100e8:	f7f1 fc24 	bl	8001934 <_write>
 80100ec:	1c43      	adds	r3, r0, #1
 80100ee:	d102      	bne.n	80100f6 <_write_r+0x1e>
 80100f0:	682b      	ldr	r3, [r5, #0]
 80100f2:	b103      	cbz	r3, 80100f6 <_write_r+0x1e>
 80100f4:	6023      	str	r3, [r4, #0]
 80100f6:	bd38      	pop	{r3, r4, r5, pc}
 80100f8:	24000ec4 	.word	0x24000ec4

080100fc <__errno>:
 80100fc:	4b01      	ldr	r3, [pc, #4]	@ (8010104 <__errno+0x8>)
 80100fe:	6818      	ldr	r0, [r3, #0]
 8010100:	4770      	bx	lr
 8010102:	bf00      	nop
 8010104:	240001c4 	.word	0x240001c4

08010108 <__libc_init_array>:
 8010108:	b570      	push	{r4, r5, r6, lr}
 801010a:	4d0d      	ldr	r5, [pc, #52]	@ (8010140 <__libc_init_array+0x38>)
 801010c:	4c0d      	ldr	r4, [pc, #52]	@ (8010144 <__libc_init_array+0x3c>)
 801010e:	1b64      	subs	r4, r4, r5
 8010110:	10a4      	asrs	r4, r4, #2
 8010112:	2600      	movs	r6, #0
 8010114:	42a6      	cmp	r6, r4
 8010116:	d109      	bne.n	801012c <__libc_init_array+0x24>
 8010118:	4d0b      	ldr	r5, [pc, #44]	@ (8010148 <__libc_init_array+0x40>)
 801011a:	4c0c      	ldr	r4, [pc, #48]	@ (801014c <__libc_init_array+0x44>)
 801011c:	f003 f822 	bl	8013164 <_init>
 8010120:	1b64      	subs	r4, r4, r5
 8010122:	10a4      	asrs	r4, r4, #2
 8010124:	2600      	movs	r6, #0
 8010126:	42a6      	cmp	r6, r4
 8010128:	d105      	bne.n	8010136 <__libc_init_array+0x2e>
 801012a:	bd70      	pop	{r4, r5, r6, pc}
 801012c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010130:	4798      	blx	r3
 8010132:	3601      	adds	r6, #1
 8010134:	e7ee      	b.n	8010114 <__libc_init_array+0xc>
 8010136:	f855 3b04 	ldr.w	r3, [r5], #4
 801013a:	4798      	blx	r3
 801013c:	3601      	adds	r6, #1
 801013e:	e7f2      	b.n	8010126 <__libc_init_array+0x1e>
 8010140:	08013704 	.word	0x08013704
 8010144:	08013704 	.word	0x08013704
 8010148:	08013704 	.word	0x08013704
 801014c:	08013708 	.word	0x08013708

08010150 <__retarget_lock_init_recursive>:
 8010150:	4770      	bx	lr

08010152 <__retarget_lock_acquire_recursive>:
 8010152:	4770      	bx	lr

08010154 <__retarget_lock_release_recursive>:
 8010154:	4770      	bx	lr

08010156 <memcpy>:
 8010156:	440a      	add	r2, r1
 8010158:	4291      	cmp	r1, r2
 801015a:	f100 33ff 	add.w	r3, r0, #4294967295
 801015e:	d100      	bne.n	8010162 <memcpy+0xc>
 8010160:	4770      	bx	lr
 8010162:	b510      	push	{r4, lr}
 8010164:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010168:	f803 4f01 	strb.w	r4, [r3, #1]!
 801016c:	4291      	cmp	r1, r2
 801016e:	d1f9      	bne.n	8010164 <memcpy+0xe>
 8010170:	bd10      	pop	{r4, pc}
 8010172:	0000      	movs	r0, r0
 8010174:	0000      	movs	r0, r0
	...

08010178 <nan>:
 8010178:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010180 <nan+0x8>
 801017c:	4770      	bx	lr
 801017e:	bf00      	nop
 8010180:	00000000 	.word	0x00000000
 8010184:	7ff80000 	.word	0x7ff80000

08010188 <nanf>:
 8010188:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010190 <nanf+0x8>
 801018c:	4770      	bx	lr
 801018e:	bf00      	nop
 8010190:	7fc00000 	.word	0x7fc00000

08010194 <quorem>:
 8010194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010198:	6903      	ldr	r3, [r0, #16]
 801019a:	690c      	ldr	r4, [r1, #16]
 801019c:	42a3      	cmp	r3, r4
 801019e:	4607      	mov	r7, r0
 80101a0:	db7e      	blt.n	80102a0 <quorem+0x10c>
 80101a2:	3c01      	subs	r4, #1
 80101a4:	f101 0814 	add.w	r8, r1, #20
 80101a8:	00a3      	lsls	r3, r4, #2
 80101aa:	f100 0514 	add.w	r5, r0, #20
 80101ae:	9300      	str	r3, [sp, #0]
 80101b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80101b4:	9301      	str	r3, [sp, #4]
 80101b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80101ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80101be:	3301      	adds	r3, #1
 80101c0:	429a      	cmp	r2, r3
 80101c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80101c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80101ca:	d32e      	bcc.n	801022a <quorem+0x96>
 80101cc:	f04f 0a00 	mov.w	sl, #0
 80101d0:	46c4      	mov	ip, r8
 80101d2:	46ae      	mov	lr, r5
 80101d4:	46d3      	mov	fp, sl
 80101d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80101da:	b298      	uxth	r0, r3
 80101dc:	fb06 a000 	mla	r0, r6, r0, sl
 80101e0:	0c02      	lsrs	r2, r0, #16
 80101e2:	0c1b      	lsrs	r3, r3, #16
 80101e4:	fb06 2303 	mla	r3, r6, r3, r2
 80101e8:	f8de 2000 	ldr.w	r2, [lr]
 80101ec:	b280      	uxth	r0, r0
 80101ee:	b292      	uxth	r2, r2
 80101f0:	1a12      	subs	r2, r2, r0
 80101f2:	445a      	add	r2, fp
 80101f4:	f8de 0000 	ldr.w	r0, [lr]
 80101f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80101fc:	b29b      	uxth	r3, r3
 80101fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010202:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010206:	b292      	uxth	r2, r2
 8010208:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801020c:	45e1      	cmp	r9, ip
 801020e:	f84e 2b04 	str.w	r2, [lr], #4
 8010212:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010216:	d2de      	bcs.n	80101d6 <quorem+0x42>
 8010218:	9b00      	ldr	r3, [sp, #0]
 801021a:	58eb      	ldr	r3, [r5, r3]
 801021c:	b92b      	cbnz	r3, 801022a <quorem+0x96>
 801021e:	9b01      	ldr	r3, [sp, #4]
 8010220:	3b04      	subs	r3, #4
 8010222:	429d      	cmp	r5, r3
 8010224:	461a      	mov	r2, r3
 8010226:	d32f      	bcc.n	8010288 <quorem+0xf4>
 8010228:	613c      	str	r4, [r7, #16]
 801022a:	4638      	mov	r0, r7
 801022c:	f001 fbec 	bl	8011a08 <__mcmp>
 8010230:	2800      	cmp	r0, #0
 8010232:	db25      	blt.n	8010280 <quorem+0xec>
 8010234:	4629      	mov	r1, r5
 8010236:	2000      	movs	r0, #0
 8010238:	f858 2b04 	ldr.w	r2, [r8], #4
 801023c:	f8d1 c000 	ldr.w	ip, [r1]
 8010240:	fa1f fe82 	uxth.w	lr, r2
 8010244:	fa1f f38c 	uxth.w	r3, ip
 8010248:	eba3 030e 	sub.w	r3, r3, lr
 801024c:	4403      	add	r3, r0
 801024e:	0c12      	lsrs	r2, r2, #16
 8010250:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010254:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010258:	b29b      	uxth	r3, r3
 801025a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801025e:	45c1      	cmp	r9, r8
 8010260:	f841 3b04 	str.w	r3, [r1], #4
 8010264:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010268:	d2e6      	bcs.n	8010238 <quorem+0xa4>
 801026a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801026e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010272:	b922      	cbnz	r2, 801027e <quorem+0xea>
 8010274:	3b04      	subs	r3, #4
 8010276:	429d      	cmp	r5, r3
 8010278:	461a      	mov	r2, r3
 801027a:	d30b      	bcc.n	8010294 <quorem+0x100>
 801027c:	613c      	str	r4, [r7, #16]
 801027e:	3601      	adds	r6, #1
 8010280:	4630      	mov	r0, r6
 8010282:	b003      	add	sp, #12
 8010284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010288:	6812      	ldr	r2, [r2, #0]
 801028a:	3b04      	subs	r3, #4
 801028c:	2a00      	cmp	r2, #0
 801028e:	d1cb      	bne.n	8010228 <quorem+0x94>
 8010290:	3c01      	subs	r4, #1
 8010292:	e7c6      	b.n	8010222 <quorem+0x8e>
 8010294:	6812      	ldr	r2, [r2, #0]
 8010296:	3b04      	subs	r3, #4
 8010298:	2a00      	cmp	r2, #0
 801029a:	d1ef      	bne.n	801027c <quorem+0xe8>
 801029c:	3c01      	subs	r4, #1
 801029e:	e7ea      	b.n	8010276 <quorem+0xe2>
 80102a0:	2000      	movs	r0, #0
 80102a2:	e7ee      	b.n	8010282 <quorem+0xee>
 80102a4:	0000      	movs	r0, r0
	...

080102a8 <_dtoa_r>:
 80102a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ac:	ed2d 8b02 	vpush	{d8}
 80102b0:	69c7      	ldr	r7, [r0, #28]
 80102b2:	b091      	sub	sp, #68	@ 0x44
 80102b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80102b8:	ec55 4b10 	vmov	r4, r5, d0
 80102bc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80102be:	9107      	str	r1, [sp, #28]
 80102c0:	4681      	mov	r9, r0
 80102c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80102c4:	930d      	str	r3, [sp, #52]	@ 0x34
 80102c6:	b97f      	cbnz	r7, 80102e8 <_dtoa_r+0x40>
 80102c8:	2010      	movs	r0, #16
 80102ca:	f7fe f893 	bl	800e3f4 <malloc>
 80102ce:	4602      	mov	r2, r0
 80102d0:	f8c9 001c 	str.w	r0, [r9, #28]
 80102d4:	b920      	cbnz	r0, 80102e0 <_dtoa_r+0x38>
 80102d6:	4ba0      	ldr	r3, [pc, #640]	@ (8010558 <_dtoa_r+0x2b0>)
 80102d8:	21ef      	movs	r1, #239	@ 0xef
 80102da:	48a0      	ldr	r0, [pc, #640]	@ (801055c <_dtoa_r+0x2b4>)
 80102dc:	f002 fbb4 	bl	8012a48 <__assert_func>
 80102e0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80102e4:	6007      	str	r7, [r0, #0]
 80102e6:	60c7      	str	r7, [r0, #12]
 80102e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80102ec:	6819      	ldr	r1, [r3, #0]
 80102ee:	b159      	cbz	r1, 8010308 <_dtoa_r+0x60>
 80102f0:	685a      	ldr	r2, [r3, #4]
 80102f2:	604a      	str	r2, [r1, #4]
 80102f4:	2301      	movs	r3, #1
 80102f6:	4093      	lsls	r3, r2
 80102f8:	608b      	str	r3, [r1, #8]
 80102fa:	4648      	mov	r0, r9
 80102fc:	f001 f900 	bl	8011500 <_Bfree>
 8010300:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010304:	2200      	movs	r2, #0
 8010306:	601a      	str	r2, [r3, #0]
 8010308:	1e2b      	subs	r3, r5, #0
 801030a:	bfbb      	ittet	lt
 801030c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010310:	9303      	strlt	r3, [sp, #12]
 8010312:	2300      	movge	r3, #0
 8010314:	2201      	movlt	r2, #1
 8010316:	bfac      	ite	ge
 8010318:	6033      	strge	r3, [r6, #0]
 801031a:	6032      	strlt	r2, [r6, #0]
 801031c:	4b90      	ldr	r3, [pc, #576]	@ (8010560 <_dtoa_r+0x2b8>)
 801031e:	9e03      	ldr	r6, [sp, #12]
 8010320:	43b3      	bics	r3, r6
 8010322:	d110      	bne.n	8010346 <_dtoa_r+0x9e>
 8010324:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010326:	f242 730f 	movw	r3, #9999	@ 0x270f
 801032a:	6013      	str	r3, [r2, #0]
 801032c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010330:	4323      	orrs	r3, r4
 8010332:	f000 84de 	beq.w	8010cf2 <_dtoa_r+0xa4a>
 8010336:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010338:	4f8a      	ldr	r7, [pc, #552]	@ (8010564 <_dtoa_r+0x2bc>)
 801033a:	2b00      	cmp	r3, #0
 801033c:	f000 84e0 	beq.w	8010d00 <_dtoa_r+0xa58>
 8010340:	1cfb      	adds	r3, r7, #3
 8010342:	f000 bcdb 	b.w	8010cfc <_dtoa_r+0xa54>
 8010346:	ed9d 8b02 	vldr	d8, [sp, #8]
 801034a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801034e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010352:	d10a      	bne.n	801036a <_dtoa_r+0xc2>
 8010354:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010356:	2301      	movs	r3, #1
 8010358:	6013      	str	r3, [r2, #0]
 801035a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801035c:	b113      	cbz	r3, 8010364 <_dtoa_r+0xbc>
 801035e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010360:	4b81      	ldr	r3, [pc, #516]	@ (8010568 <_dtoa_r+0x2c0>)
 8010362:	6013      	str	r3, [r2, #0]
 8010364:	4f81      	ldr	r7, [pc, #516]	@ (801056c <_dtoa_r+0x2c4>)
 8010366:	f000 bccb 	b.w	8010d00 <_dtoa_r+0xa58>
 801036a:	aa0e      	add	r2, sp, #56	@ 0x38
 801036c:	a90f      	add	r1, sp, #60	@ 0x3c
 801036e:	4648      	mov	r0, r9
 8010370:	eeb0 0b48 	vmov.f64	d0, d8
 8010374:	f001 fc68 	bl	8011c48 <__d2b>
 8010378:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801037c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801037e:	9001      	str	r0, [sp, #4]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d045      	beq.n	8010410 <_dtoa_r+0x168>
 8010384:	eeb0 7b48 	vmov.f64	d7, d8
 8010388:	ee18 1a90 	vmov	r1, s17
 801038c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010390:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8010394:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010398:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801039c:	2500      	movs	r5, #0
 801039e:	ee07 1a90 	vmov	s15, r1
 80103a2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80103a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010540 <_dtoa_r+0x298>
 80103aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80103ae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010548 <_dtoa_r+0x2a0>
 80103b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80103b6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010550 <_dtoa_r+0x2a8>
 80103ba:	ee07 3a90 	vmov	s15, r3
 80103be:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80103c2:	eeb0 7b46 	vmov.f64	d7, d6
 80103c6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80103ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80103ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80103d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103d6:	ee16 8a90 	vmov	r8, s13
 80103da:	d508      	bpl.n	80103ee <_dtoa_r+0x146>
 80103dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80103e0:	eeb4 6b47 	vcmp.f64	d6, d7
 80103e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103e8:	bf18      	it	ne
 80103ea:	f108 38ff 	addne.w	r8, r8, #4294967295
 80103ee:	f1b8 0f16 	cmp.w	r8, #22
 80103f2:	d82b      	bhi.n	801044c <_dtoa_r+0x1a4>
 80103f4:	495e      	ldr	r1, [pc, #376]	@ (8010570 <_dtoa_r+0x2c8>)
 80103f6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80103fa:	ed91 7b00 	vldr	d7, [r1]
 80103fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010406:	d501      	bpl.n	801040c <_dtoa_r+0x164>
 8010408:	f108 38ff 	add.w	r8, r8, #4294967295
 801040c:	2100      	movs	r1, #0
 801040e:	e01e      	b.n	801044e <_dtoa_r+0x1a6>
 8010410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010412:	4413      	add	r3, r2
 8010414:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010418:	2920      	cmp	r1, #32
 801041a:	bfc1      	itttt	gt
 801041c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010420:	408e      	lslgt	r6, r1
 8010422:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8010426:	fa24 f101 	lsrgt.w	r1, r4, r1
 801042a:	bfd6      	itet	le
 801042c:	f1c1 0120 	rsble	r1, r1, #32
 8010430:	4331      	orrgt	r1, r6
 8010432:	fa04 f101 	lslle.w	r1, r4, r1
 8010436:	ee07 1a90 	vmov	s15, r1
 801043a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801043e:	3b01      	subs	r3, #1
 8010440:	ee17 1a90 	vmov	r1, s15
 8010444:	2501      	movs	r5, #1
 8010446:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801044a:	e7a8      	b.n	801039e <_dtoa_r+0xf6>
 801044c:	2101      	movs	r1, #1
 801044e:	1ad2      	subs	r2, r2, r3
 8010450:	1e53      	subs	r3, r2, #1
 8010452:	9306      	str	r3, [sp, #24]
 8010454:	bf45      	ittet	mi
 8010456:	f1c2 0301 	rsbmi	r3, r2, #1
 801045a:	9305      	strmi	r3, [sp, #20]
 801045c:	2300      	movpl	r3, #0
 801045e:	2300      	movmi	r3, #0
 8010460:	bf4c      	ite	mi
 8010462:	9306      	strmi	r3, [sp, #24]
 8010464:	9305      	strpl	r3, [sp, #20]
 8010466:	f1b8 0f00 	cmp.w	r8, #0
 801046a:	910c      	str	r1, [sp, #48]	@ 0x30
 801046c:	db18      	blt.n	80104a0 <_dtoa_r+0x1f8>
 801046e:	9b06      	ldr	r3, [sp, #24]
 8010470:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8010474:	4443      	add	r3, r8
 8010476:	9306      	str	r3, [sp, #24]
 8010478:	2300      	movs	r3, #0
 801047a:	9a07      	ldr	r2, [sp, #28]
 801047c:	2a09      	cmp	r2, #9
 801047e:	d849      	bhi.n	8010514 <_dtoa_r+0x26c>
 8010480:	2a05      	cmp	r2, #5
 8010482:	bfc4      	itt	gt
 8010484:	3a04      	subgt	r2, #4
 8010486:	9207      	strgt	r2, [sp, #28]
 8010488:	9a07      	ldr	r2, [sp, #28]
 801048a:	f1a2 0202 	sub.w	r2, r2, #2
 801048e:	bfcc      	ite	gt
 8010490:	2400      	movgt	r4, #0
 8010492:	2401      	movle	r4, #1
 8010494:	2a03      	cmp	r2, #3
 8010496:	d848      	bhi.n	801052a <_dtoa_r+0x282>
 8010498:	e8df f002 	tbb	[pc, r2]
 801049c:	3a2c2e0b 	.word	0x3a2c2e0b
 80104a0:	9b05      	ldr	r3, [sp, #20]
 80104a2:	2200      	movs	r2, #0
 80104a4:	eba3 0308 	sub.w	r3, r3, r8
 80104a8:	9305      	str	r3, [sp, #20]
 80104aa:	920a      	str	r2, [sp, #40]	@ 0x28
 80104ac:	f1c8 0300 	rsb	r3, r8, #0
 80104b0:	e7e3      	b.n	801047a <_dtoa_r+0x1d2>
 80104b2:	2200      	movs	r2, #0
 80104b4:	9208      	str	r2, [sp, #32]
 80104b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104b8:	2a00      	cmp	r2, #0
 80104ba:	dc39      	bgt.n	8010530 <_dtoa_r+0x288>
 80104bc:	f04f 0b01 	mov.w	fp, #1
 80104c0:	46da      	mov	sl, fp
 80104c2:	465a      	mov	r2, fp
 80104c4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80104c8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80104cc:	2100      	movs	r1, #0
 80104ce:	2004      	movs	r0, #4
 80104d0:	f100 0614 	add.w	r6, r0, #20
 80104d4:	4296      	cmp	r6, r2
 80104d6:	d930      	bls.n	801053a <_dtoa_r+0x292>
 80104d8:	6079      	str	r1, [r7, #4]
 80104da:	4648      	mov	r0, r9
 80104dc:	9304      	str	r3, [sp, #16]
 80104de:	f000 ffcf 	bl	8011480 <_Balloc>
 80104e2:	9b04      	ldr	r3, [sp, #16]
 80104e4:	4607      	mov	r7, r0
 80104e6:	2800      	cmp	r0, #0
 80104e8:	d146      	bne.n	8010578 <_dtoa_r+0x2d0>
 80104ea:	4b22      	ldr	r3, [pc, #136]	@ (8010574 <_dtoa_r+0x2cc>)
 80104ec:	4602      	mov	r2, r0
 80104ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80104f2:	e6f2      	b.n	80102da <_dtoa_r+0x32>
 80104f4:	2201      	movs	r2, #1
 80104f6:	e7dd      	b.n	80104b4 <_dtoa_r+0x20c>
 80104f8:	2200      	movs	r2, #0
 80104fa:	9208      	str	r2, [sp, #32]
 80104fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104fe:	eb08 0b02 	add.w	fp, r8, r2
 8010502:	f10b 0a01 	add.w	sl, fp, #1
 8010506:	4652      	mov	r2, sl
 8010508:	2a01      	cmp	r2, #1
 801050a:	bfb8      	it	lt
 801050c:	2201      	movlt	r2, #1
 801050e:	e7db      	b.n	80104c8 <_dtoa_r+0x220>
 8010510:	2201      	movs	r2, #1
 8010512:	e7f2      	b.n	80104fa <_dtoa_r+0x252>
 8010514:	2401      	movs	r4, #1
 8010516:	2200      	movs	r2, #0
 8010518:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801051c:	f04f 3bff 	mov.w	fp, #4294967295
 8010520:	2100      	movs	r1, #0
 8010522:	46da      	mov	sl, fp
 8010524:	2212      	movs	r2, #18
 8010526:	9109      	str	r1, [sp, #36]	@ 0x24
 8010528:	e7ce      	b.n	80104c8 <_dtoa_r+0x220>
 801052a:	2201      	movs	r2, #1
 801052c:	9208      	str	r2, [sp, #32]
 801052e:	e7f5      	b.n	801051c <_dtoa_r+0x274>
 8010530:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8010534:	46da      	mov	sl, fp
 8010536:	465a      	mov	r2, fp
 8010538:	e7c6      	b.n	80104c8 <_dtoa_r+0x220>
 801053a:	3101      	adds	r1, #1
 801053c:	0040      	lsls	r0, r0, #1
 801053e:	e7c7      	b.n	80104d0 <_dtoa_r+0x228>
 8010540:	636f4361 	.word	0x636f4361
 8010544:	3fd287a7 	.word	0x3fd287a7
 8010548:	8b60c8b3 	.word	0x8b60c8b3
 801054c:	3fc68a28 	.word	0x3fc68a28
 8010550:	509f79fb 	.word	0x509f79fb
 8010554:	3fd34413 	.word	0x3fd34413
 8010558:	08013354 	.word	0x08013354
 801055c:	0801336b 	.word	0x0801336b
 8010560:	7ff00000 	.word	0x7ff00000
 8010564:	08013350 	.word	0x08013350
 8010568:	080136b9 	.word	0x080136b9
 801056c:	080136b8 	.word	0x080136b8
 8010570:	080134c8 	.word	0x080134c8
 8010574:	080133c3 	.word	0x080133c3
 8010578:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801057c:	f1ba 0f0e 	cmp.w	sl, #14
 8010580:	6010      	str	r0, [r2, #0]
 8010582:	d86f      	bhi.n	8010664 <_dtoa_r+0x3bc>
 8010584:	2c00      	cmp	r4, #0
 8010586:	d06d      	beq.n	8010664 <_dtoa_r+0x3bc>
 8010588:	f1b8 0f00 	cmp.w	r8, #0
 801058c:	f340 80c2 	ble.w	8010714 <_dtoa_r+0x46c>
 8010590:	4aca      	ldr	r2, [pc, #808]	@ (80108bc <_dtoa_r+0x614>)
 8010592:	f008 010f 	and.w	r1, r8, #15
 8010596:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801059a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801059e:	ed92 7b00 	vldr	d7, [r2]
 80105a2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80105a6:	f000 80a9 	beq.w	80106fc <_dtoa_r+0x454>
 80105aa:	4ac5      	ldr	r2, [pc, #788]	@ (80108c0 <_dtoa_r+0x618>)
 80105ac:	ed92 6b08 	vldr	d6, [r2, #32]
 80105b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80105b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80105b8:	f001 010f 	and.w	r1, r1, #15
 80105bc:	2203      	movs	r2, #3
 80105be:	48c0      	ldr	r0, [pc, #768]	@ (80108c0 <_dtoa_r+0x618>)
 80105c0:	2900      	cmp	r1, #0
 80105c2:	f040 809d 	bne.w	8010700 <_dtoa_r+0x458>
 80105c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80105ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80105ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80105d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80105d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80105d8:	2900      	cmp	r1, #0
 80105da:	f000 80c1 	beq.w	8010760 <_dtoa_r+0x4b8>
 80105de:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80105e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80105e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ea:	f140 80b9 	bpl.w	8010760 <_dtoa_r+0x4b8>
 80105ee:	f1ba 0f00 	cmp.w	sl, #0
 80105f2:	f000 80b5 	beq.w	8010760 <_dtoa_r+0x4b8>
 80105f6:	f1bb 0f00 	cmp.w	fp, #0
 80105fa:	dd31      	ble.n	8010660 <_dtoa_r+0x3b8>
 80105fc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010600:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010604:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010608:	f108 31ff 	add.w	r1, r8, #4294967295
 801060c:	9104      	str	r1, [sp, #16]
 801060e:	3201      	adds	r2, #1
 8010610:	465c      	mov	r4, fp
 8010612:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010616:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801061a:	ee07 2a90 	vmov	s15, r2
 801061e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010622:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010626:	ee15 2a90 	vmov	r2, s11
 801062a:	ec51 0b15 	vmov	r0, r1, d5
 801062e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8010632:	2c00      	cmp	r4, #0
 8010634:	f040 8098 	bne.w	8010768 <_dtoa_r+0x4c0>
 8010638:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801063c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010640:	ec41 0b17 	vmov	d7, r0, r1
 8010644:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801064c:	f300 8261 	bgt.w	8010b12 <_dtoa_r+0x86a>
 8010650:	eeb1 7b47 	vneg.f64	d7, d7
 8010654:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801065c:	f100 80f5 	bmi.w	801084a <_dtoa_r+0x5a2>
 8010660:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010664:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010666:	2a00      	cmp	r2, #0
 8010668:	f2c0 812c 	blt.w	80108c4 <_dtoa_r+0x61c>
 801066c:	f1b8 0f0e 	cmp.w	r8, #14
 8010670:	f300 8128 	bgt.w	80108c4 <_dtoa_r+0x61c>
 8010674:	4b91      	ldr	r3, [pc, #580]	@ (80108bc <_dtoa_r+0x614>)
 8010676:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801067a:	ed93 6b00 	vldr	d6, [r3]
 801067e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010680:	2b00      	cmp	r3, #0
 8010682:	da03      	bge.n	801068c <_dtoa_r+0x3e4>
 8010684:	f1ba 0f00 	cmp.w	sl, #0
 8010688:	f340 80d2 	ble.w	8010830 <_dtoa_r+0x588>
 801068c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010690:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010694:	463e      	mov	r6, r7
 8010696:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801069a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801069e:	ee15 3a10 	vmov	r3, s10
 80106a2:	3330      	adds	r3, #48	@ 0x30
 80106a4:	f806 3b01 	strb.w	r3, [r6], #1
 80106a8:	1bf3      	subs	r3, r6, r7
 80106aa:	459a      	cmp	sl, r3
 80106ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80106b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80106b4:	f040 80f8 	bne.w	80108a8 <_dtoa_r+0x600>
 80106b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80106bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80106c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106c4:	f300 80dd 	bgt.w	8010882 <_dtoa_r+0x5da>
 80106c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80106cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106d0:	d104      	bne.n	80106dc <_dtoa_r+0x434>
 80106d2:	ee15 3a10 	vmov	r3, s10
 80106d6:	07db      	lsls	r3, r3, #31
 80106d8:	f100 80d3 	bmi.w	8010882 <_dtoa_r+0x5da>
 80106dc:	9901      	ldr	r1, [sp, #4]
 80106de:	4648      	mov	r0, r9
 80106e0:	f000 ff0e 	bl	8011500 <_Bfree>
 80106e4:	2300      	movs	r3, #0
 80106e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80106e8:	7033      	strb	r3, [r6, #0]
 80106ea:	f108 0301 	add.w	r3, r8, #1
 80106ee:	6013      	str	r3, [r2, #0]
 80106f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	f000 8304 	beq.w	8010d00 <_dtoa_r+0xa58>
 80106f8:	601e      	str	r6, [r3, #0]
 80106fa:	e301      	b.n	8010d00 <_dtoa_r+0xa58>
 80106fc:	2202      	movs	r2, #2
 80106fe:	e75e      	b.n	80105be <_dtoa_r+0x316>
 8010700:	07cc      	lsls	r4, r1, #31
 8010702:	d504      	bpl.n	801070e <_dtoa_r+0x466>
 8010704:	ed90 6b00 	vldr	d6, [r0]
 8010708:	3201      	adds	r2, #1
 801070a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801070e:	1049      	asrs	r1, r1, #1
 8010710:	3008      	adds	r0, #8
 8010712:	e755      	b.n	80105c0 <_dtoa_r+0x318>
 8010714:	d022      	beq.n	801075c <_dtoa_r+0x4b4>
 8010716:	f1c8 0100 	rsb	r1, r8, #0
 801071a:	4a68      	ldr	r2, [pc, #416]	@ (80108bc <_dtoa_r+0x614>)
 801071c:	f001 000f 	and.w	r0, r1, #15
 8010720:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010724:	ed92 7b00 	vldr	d7, [r2]
 8010728:	ee28 7b07 	vmul.f64	d7, d8, d7
 801072c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010730:	4863      	ldr	r0, [pc, #396]	@ (80108c0 <_dtoa_r+0x618>)
 8010732:	1109      	asrs	r1, r1, #4
 8010734:	2400      	movs	r4, #0
 8010736:	2202      	movs	r2, #2
 8010738:	b929      	cbnz	r1, 8010746 <_dtoa_r+0x49e>
 801073a:	2c00      	cmp	r4, #0
 801073c:	f43f af49 	beq.w	80105d2 <_dtoa_r+0x32a>
 8010740:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010744:	e745      	b.n	80105d2 <_dtoa_r+0x32a>
 8010746:	07ce      	lsls	r6, r1, #31
 8010748:	d505      	bpl.n	8010756 <_dtoa_r+0x4ae>
 801074a:	ed90 6b00 	vldr	d6, [r0]
 801074e:	3201      	adds	r2, #1
 8010750:	2401      	movs	r4, #1
 8010752:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010756:	1049      	asrs	r1, r1, #1
 8010758:	3008      	adds	r0, #8
 801075a:	e7ed      	b.n	8010738 <_dtoa_r+0x490>
 801075c:	2202      	movs	r2, #2
 801075e:	e738      	b.n	80105d2 <_dtoa_r+0x32a>
 8010760:	f8cd 8010 	str.w	r8, [sp, #16]
 8010764:	4654      	mov	r4, sl
 8010766:	e754      	b.n	8010612 <_dtoa_r+0x36a>
 8010768:	4a54      	ldr	r2, [pc, #336]	@ (80108bc <_dtoa_r+0x614>)
 801076a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801076e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010772:	9a08      	ldr	r2, [sp, #32]
 8010774:	ec41 0b17 	vmov	d7, r0, r1
 8010778:	443c      	add	r4, r7
 801077a:	b34a      	cbz	r2, 80107d0 <_dtoa_r+0x528>
 801077c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010780:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010784:	463e      	mov	r6, r7
 8010786:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801078a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801078e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010792:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010796:	ee14 2a90 	vmov	r2, s9
 801079a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801079e:	3230      	adds	r2, #48	@ 0x30
 80107a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80107a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80107a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ac:	f806 2b01 	strb.w	r2, [r6], #1
 80107b0:	d438      	bmi.n	8010824 <_dtoa_r+0x57c>
 80107b2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80107b6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80107ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107be:	d462      	bmi.n	8010886 <_dtoa_r+0x5de>
 80107c0:	42a6      	cmp	r6, r4
 80107c2:	f43f af4d 	beq.w	8010660 <_dtoa_r+0x3b8>
 80107c6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80107ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 80107ce:	e7e0      	b.n	8010792 <_dtoa_r+0x4ea>
 80107d0:	4621      	mov	r1, r4
 80107d2:	463e      	mov	r6, r7
 80107d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80107d8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80107dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80107e0:	ee14 2a90 	vmov	r2, s9
 80107e4:	3230      	adds	r2, #48	@ 0x30
 80107e6:	f806 2b01 	strb.w	r2, [r6], #1
 80107ea:	42a6      	cmp	r6, r4
 80107ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80107f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80107f4:	d119      	bne.n	801082a <_dtoa_r+0x582>
 80107f6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80107fa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80107fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010806:	dc3e      	bgt.n	8010886 <_dtoa_r+0x5de>
 8010808:	ee35 5b47 	vsub.f64	d5, d5, d7
 801080c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010814:	f57f af24 	bpl.w	8010660 <_dtoa_r+0x3b8>
 8010818:	460e      	mov	r6, r1
 801081a:	3901      	subs	r1, #1
 801081c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010820:	2b30      	cmp	r3, #48	@ 0x30
 8010822:	d0f9      	beq.n	8010818 <_dtoa_r+0x570>
 8010824:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010828:	e758      	b.n	80106dc <_dtoa_r+0x434>
 801082a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801082e:	e7d5      	b.n	80107dc <_dtoa_r+0x534>
 8010830:	d10b      	bne.n	801084a <_dtoa_r+0x5a2>
 8010832:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010836:	ee26 6b07 	vmul.f64	d6, d6, d7
 801083a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801083e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010846:	f2c0 8161 	blt.w	8010b0c <_dtoa_r+0x864>
 801084a:	2400      	movs	r4, #0
 801084c:	4625      	mov	r5, r4
 801084e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010850:	43db      	mvns	r3, r3
 8010852:	9304      	str	r3, [sp, #16]
 8010854:	463e      	mov	r6, r7
 8010856:	f04f 0800 	mov.w	r8, #0
 801085a:	4621      	mov	r1, r4
 801085c:	4648      	mov	r0, r9
 801085e:	f000 fe4f 	bl	8011500 <_Bfree>
 8010862:	2d00      	cmp	r5, #0
 8010864:	d0de      	beq.n	8010824 <_dtoa_r+0x57c>
 8010866:	f1b8 0f00 	cmp.w	r8, #0
 801086a:	d005      	beq.n	8010878 <_dtoa_r+0x5d0>
 801086c:	45a8      	cmp	r8, r5
 801086e:	d003      	beq.n	8010878 <_dtoa_r+0x5d0>
 8010870:	4641      	mov	r1, r8
 8010872:	4648      	mov	r0, r9
 8010874:	f000 fe44 	bl	8011500 <_Bfree>
 8010878:	4629      	mov	r1, r5
 801087a:	4648      	mov	r0, r9
 801087c:	f000 fe40 	bl	8011500 <_Bfree>
 8010880:	e7d0      	b.n	8010824 <_dtoa_r+0x57c>
 8010882:	f8cd 8010 	str.w	r8, [sp, #16]
 8010886:	4633      	mov	r3, r6
 8010888:	461e      	mov	r6, r3
 801088a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801088e:	2a39      	cmp	r2, #57	@ 0x39
 8010890:	d106      	bne.n	80108a0 <_dtoa_r+0x5f8>
 8010892:	429f      	cmp	r7, r3
 8010894:	d1f8      	bne.n	8010888 <_dtoa_r+0x5e0>
 8010896:	9a04      	ldr	r2, [sp, #16]
 8010898:	3201      	adds	r2, #1
 801089a:	9204      	str	r2, [sp, #16]
 801089c:	2230      	movs	r2, #48	@ 0x30
 801089e:	703a      	strb	r2, [r7, #0]
 80108a0:	781a      	ldrb	r2, [r3, #0]
 80108a2:	3201      	adds	r2, #1
 80108a4:	701a      	strb	r2, [r3, #0]
 80108a6:	e7bd      	b.n	8010824 <_dtoa_r+0x57c>
 80108a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80108ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80108b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b4:	f47f aeef 	bne.w	8010696 <_dtoa_r+0x3ee>
 80108b8:	e710      	b.n	80106dc <_dtoa_r+0x434>
 80108ba:	bf00      	nop
 80108bc:	080134c8 	.word	0x080134c8
 80108c0:	080134a0 	.word	0x080134a0
 80108c4:	9908      	ldr	r1, [sp, #32]
 80108c6:	2900      	cmp	r1, #0
 80108c8:	f000 80e3 	beq.w	8010a92 <_dtoa_r+0x7ea>
 80108cc:	9907      	ldr	r1, [sp, #28]
 80108ce:	2901      	cmp	r1, #1
 80108d0:	f300 80c8 	bgt.w	8010a64 <_dtoa_r+0x7bc>
 80108d4:	2d00      	cmp	r5, #0
 80108d6:	f000 80c1 	beq.w	8010a5c <_dtoa_r+0x7b4>
 80108da:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80108de:	9e05      	ldr	r6, [sp, #20]
 80108e0:	461c      	mov	r4, r3
 80108e2:	9304      	str	r3, [sp, #16]
 80108e4:	9b05      	ldr	r3, [sp, #20]
 80108e6:	4413      	add	r3, r2
 80108e8:	9305      	str	r3, [sp, #20]
 80108ea:	9b06      	ldr	r3, [sp, #24]
 80108ec:	2101      	movs	r1, #1
 80108ee:	4413      	add	r3, r2
 80108f0:	4648      	mov	r0, r9
 80108f2:	9306      	str	r3, [sp, #24]
 80108f4:	f000 ff02 	bl	80116fc <__i2b>
 80108f8:	9b04      	ldr	r3, [sp, #16]
 80108fa:	4605      	mov	r5, r0
 80108fc:	b166      	cbz	r6, 8010918 <_dtoa_r+0x670>
 80108fe:	9a06      	ldr	r2, [sp, #24]
 8010900:	2a00      	cmp	r2, #0
 8010902:	dd09      	ble.n	8010918 <_dtoa_r+0x670>
 8010904:	42b2      	cmp	r2, r6
 8010906:	9905      	ldr	r1, [sp, #20]
 8010908:	bfa8      	it	ge
 801090a:	4632      	movge	r2, r6
 801090c:	1a89      	subs	r1, r1, r2
 801090e:	9105      	str	r1, [sp, #20]
 8010910:	9906      	ldr	r1, [sp, #24]
 8010912:	1ab6      	subs	r6, r6, r2
 8010914:	1a8a      	subs	r2, r1, r2
 8010916:	9206      	str	r2, [sp, #24]
 8010918:	b1fb      	cbz	r3, 801095a <_dtoa_r+0x6b2>
 801091a:	9a08      	ldr	r2, [sp, #32]
 801091c:	2a00      	cmp	r2, #0
 801091e:	f000 80bc 	beq.w	8010a9a <_dtoa_r+0x7f2>
 8010922:	b19c      	cbz	r4, 801094c <_dtoa_r+0x6a4>
 8010924:	4629      	mov	r1, r5
 8010926:	4622      	mov	r2, r4
 8010928:	4648      	mov	r0, r9
 801092a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801092c:	f000 ffa6 	bl	801187c <__pow5mult>
 8010930:	9a01      	ldr	r2, [sp, #4]
 8010932:	4601      	mov	r1, r0
 8010934:	4605      	mov	r5, r0
 8010936:	4648      	mov	r0, r9
 8010938:	f000 fef6 	bl	8011728 <__multiply>
 801093c:	9901      	ldr	r1, [sp, #4]
 801093e:	9004      	str	r0, [sp, #16]
 8010940:	4648      	mov	r0, r9
 8010942:	f000 fddd 	bl	8011500 <_Bfree>
 8010946:	9a04      	ldr	r2, [sp, #16]
 8010948:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801094a:	9201      	str	r2, [sp, #4]
 801094c:	1b1a      	subs	r2, r3, r4
 801094e:	d004      	beq.n	801095a <_dtoa_r+0x6b2>
 8010950:	9901      	ldr	r1, [sp, #4]
 8010952:	4648      	mov	r0, r9
 8010954:	f000 ff92 	bl	801187c <__pow5mult>
 8010958:	9001      	str	r0, [sp, #4]
 801095a:	2101      	movs	r1, #1
 801095c:	4648      	mov	r0, r9
 801095e:	f000 fecd 	bl	80116fc <__i2b>
 8010962:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010964:	4604      	mov	r4, r0
 8010966:	2b00      	cmp	r3, #0
 8010968:	f000 81d0 	beq.w	8010d0c <_dtoa_r+0xa64>
 801096c:	461a      	mov	r2, r3
 801096e:	4601      	mov	r1, r0
 8010970:	4648      	mov	r0, r9
 8010972:	f000 ff83 	bl	801187c <__pow5mult>
 8010976:	9b07      	ldr	r3, [sp, #28]
 8010978:	2b01      	cmp	r3, #1
 801097a:	4604      	mov	r4, r0
 801097c:	f300 8095 	bgt.w	8010aaa <_dtoa_r+0x802>
 8010980:	9b02      	ldr	r3, [sp, #8]
 8010982:	2b00      	cmp	r3, #0
 8010984:	f040 808b 	bne.w	8010a9e <_dtoa_r+0x7f6>
 8010988:	9b03      	ldr	r3, [sp, #12]
 801098a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801098e:	2a00      	cmp	r2, #0
 8010990:	f040 8087 	bne.w	8010aa2 <_dtoa_r+0x7fa>
 8010994:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010998:	0d12      	lsrs	r2, r2, #20
 801099a:	0512      	lsls	r2, r2, #20
 801099c:	2a00      	cmp	r2, #0
 801099e:	f000 8082 	beq.w	8010aa6 <_dtoa_r+0x7fe>
 80109a2:	9b05      	ldr	r3, [sp, #20]
 80109a4:	3301      	adds	r3, #1
 80109a6:	9305      	str	r3, [sp, #20]
 80109a8:	9b06      	ldr	r3, [sp, #24]
 80109aa:	3301      	adds	r3, #1
 80109ac:	9306      	str	r3, [sp, #24]
 80109ae:	2301      	movs	r3, #1
 80109b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80109b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	f000 81af 	beq.w	8010d18 <_dtoa_r+0xa70>
 80109ba:	6922      	ldr	r2, [r4, #16]
 80109bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80109c0:	6910      	ldr	r0, [r2, #16]
 80109c2:	f000 fe4f 	bl	8011664 <__hi0bits>
 80109c6:	f1c0 0020 	rsb	r0, r0, #32
 80109ca:	9b06      	ldr	r3, [sp, #24]
 80109cc:	4418      	add	r0, r3
 80109ce:	f010 001f 	ands.w	r0, r0, #31
 80109d2:	d076      	beq.n	8010ac2 <_dtoa_r+0x81a>
 80109d4:	f1c0 0220 	rsb	r2, r0, #32
 80109d8:	2a04      	cmp	r2, #4
 80109da:	dd69      	ble.n	8010ab0 <_dtoa_r+0x808>
 80109dc:	9b05      	ldr	r3, [sp, #20]
 80109de:	f1c0 001c 	rsb	r0, r0, #28
 80109e2:	4403      	add	r3, r0
 80109e4:	9305      	str	r3, [sp, #20]
 80109e6:	9b06      	ldr	r3, [sp, #24]
 80109e8:	4406      	add	r6, r0
 80109ea:	4403      	add	r3, r0
 80109ec:	9306      	str	r3, [sp, #24]
 80109ee:	9b05      	ldr	r3, [sp, #20]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	dd05      	ble.n	8010a00 <_dtoa_r+0x758>
 80109f4:	9901      	ldr	r1, [sp, #4]
 80109f6:	461a      	mov	r2, r3
 80109f8:	4648      	mov	r0, r9
 80109fa:	f000 ff99 	bl	8011930 <__lshift>
 80109fe:	9001      	str	r0, [sp, #4]
 8010a00:	9b06      	ldr	r3, [sp, #24]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	dd05      	ble.n	8010a12 <_dtoa_r+0x76a>
 8010a06:	4621      	mov	r1, r4
 8010a08:	461a      	mov	r2, r3
 8010a0a:	4648      	mov	r0, r9
 8010a0c:	f000 ff90 	bl	8011930 <__lshift>
 8010a10:	4604      	mov	r4, r0
 8010a12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d056      	beq.n	8010ac6 <_dtoa_r+0x81e>
 8010a18:	9801      	ldr	r0, [sp, #4]
 8010a1a:	4621      	mov	r1, r4
 8010a1c:	f000 fff4 	bl	8011a08 <__mcmp>
 8010a20:	2800      	cmp	r0, #0
 8010a22:	da50      	bge.n	8010ac6 <_dtoa_r+0x81e>
 8010a24:	f108 33ff 	add.w	r3, r8, #4294967295
 8010a28:	9304      	str	r3, [sp, #16]
 8010a2a:	9901      	ldr	r1, [sp, #4]
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	220a      	movs	r2, #10
 8010a30:	4648      	mov	r0, r9
 8010a32:	f000 fd87 	bl	8011544 <__multadd>
 8010a36:	9b08      	ldr	r3, [sp, #32]
 8010a38:	9001      	str	r0, [sp, #4]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	f000 816e 	beq.w	8010d1c <_dtoa_r+0xa74>
 8010a40:	4629      	mov	r1, r5
 8010a42:	2300      	movs	r3, #0
 8010a44:	220a      	movs	r2, #10
 8010a46:	4648      	mov	r0, r9
 8010a48:	f000 fd7c 	bl	8011544 <__multadd>
 8010a4c:	f1bb 0f00 	cmp.w	fp, #0
 8010a50:	4605      	mov	r5, r0
 8010a52:	dc64      	bgt.n	8010b1e <_dtoa_r+0x876>
 8010a54:	9b07      	ldr	r3, [sp, #28]
 8010a56:	2b02      	cmp	r3, #2
 8010a58:	dc3e      	bgt.n	8010ad8 <_dtoa_r+0x830>
 8010a5a:	e060      	b.n	8010b1e <_dtoa_r+0x876>
 8010a5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a5e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010a62:	e73c      	b.n	80108de <_dtoa_r+0x636>
 8010a64:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010a68:	42a3      	cmp	r3, r4
 8010a6a:	bfbf      	itttt	lt
 8010a6c:	1ae2      	sublt	r2, r4, r3
 8010a6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010a70:	189b      	addlt	r3, r3, r2
 8010a72:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010a74:	bfae      	itee	ge
 8010a76:	1b1c      	subge	r4, r3, r4
 8010a78:	4623      	movlt	r3, r4
 8010a7a:	2400      	movlt	r4, #0
 8010a7c:	f1ba 0f00 	cmp.w	sl, #0
 8010a80:	bfb5      	itete	lt
 8010a82:	9a05      	ldrlt	r2, [sp, #20]
 8010a84:	9e05      	ldrge	r6, [sp, #20]
 8010a86:	eba2 060a 	sublt.w	r6, r2, sl
 8010a8a:	4652      	movge	r2, sl
 8010a8c:	bfb8      	it	lt
 8010a8e:	2200      	movlt	r2, #0
 8010a90:	e727      	b.n	80108e2 <_dtoa_r+0x63a>
 8010a92:	9e05      	ldr	r6, [sp, #20]
 8010a94:	9d08      	ldr	r5, [sp, #32]
 8010a96:	461c      	mov	r4, r3
 8010a98:	e730      	b.n	80108fc <_dtoa_r+0x654>
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	e758      	b.n	8010950 <_dtoa_r+0x6a8>
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	e786      	b.n	80109b0 <_dtoa_r+0x708>
 8010aa2:	9b02      	ldr	r3, [sp, #8]
 8010aa4:	e784      	b.n	80109b0 <_dtoa_r+0x708>
 8010aa6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010aa8:	e783      	b.n	80109b2 <_dtoa_r+0x70a>
 8010aaa:	2300      	movs	r3, #0
 8010aac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010aae:	e784      	b.n	80109ba <_dtoa_r+0x712>
 8010ab0:	d09d      	beq.n	80109ee <_dtoa_r+0x746>
 8010ab2:	9b05      	ldr	r3, [sp, #20]
 8010ab4:	321c      	adds	r2, #28
 8010ab6:	4413      	add	r3, r2
 8010ab8:	9305      	str	r3, [sp, #20]
 8010aba:	9b06      	ldr	r3, [sp, #24]
 8010abc:	4416      	add	r6, r2
 8010abe:	4413      	add	r3, r2
 8010ac0:	e794      	b.n	80109ec <_dtoa_r+0x744>
 8010ac2:	4602      	mov	r2, r0
 8010ac4:	e7f5      	b.n	8010ab2 <_dtoa_r+0x80a>
 8010ac6:	f1ba 0f00 	cmp.w	sl, #0
 8010aca:	f8cd 8010 	str.w	r8, [sp, #16]
 8010ace:	46d3      	mov	fp, sl
 8010ad0:	dc21      	bgt.n	8010b16 <_dtoa_r+0x86e>
 8010ad2:	9b07      	ldr	r3, [sp, #28]
 8010ad4:	2b02      	cmp	r3, #2
 8010ad6:	dd1e      	ble.n	8010b16 <_dtoa_r+0x86e>
 8010ad8:	f1bb 0f00 	cmp.w	fp, #0
 8010adc:	f47f aeb7 	bne.w	801084e <_dtoa_r+0x5a6>
 8010ae0:	4621      	mov	r1, r4
 8010ae2:	465b      	mov	r3, fp
 8010ae4:	2205      	movs	r2, #5
 8010ae6:	4648      	mov	r0, r9
 8010ae8:	f000 fd2c 	bl	8011544 <__multadd>
 8010aec:	4601      	mov	r1, r0
 8010aee:	4604      	mov	r4, r0
 8010af0:	9801      	ldr	r0, [sp, #4]
 8010af2:	f000 ff89 	bl	8011a08 <__mcmp>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	f77f aea9 	ble.w	801084e <_dtoa_r+0x5a6>
 8010afc:	463e      	mov	r6, r7
 8010afe:	2331      	movs	r3, #49	@ 0x31
 8010b00:	f806 3b01 	strb.w	r3, [r6], #1
 8010b04:	9b04      	ldr	r3, [sp, #16]
 8010b06:	3301      	adds	r3, #1
 8010b08:	9304      	str	r3, [sp, #16]
 8010b0a:	e6a4      	b.n	8010856 <_dtoa_r+0x5ae>
 8010b0c:	f8cd 8010 	str.w	r8, [sp, #16]
 8010b10:	4654      	mov	r4, sl
 8010b12:	4625      	mov	r5, r4
 8010b14:	e7f2      	b.n	8010afc <_dtoa_r+0x854>
 8010b16:	9b08      	ldr	r3, [sp, #32]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	f000 8103 	beq.w	8010d24 <_dtoa_r+0xa7c>
 8010b1e:	2e00      	cmp	r6, #0
 8010b20:	dd05      	ble.n	8010b2e <_dtoa_r+0x886>
 8010b22:	4629      	mov	r1, r5
 8010b24:	4632      	mov	r2, r6
 8010b26:	4648      	mov	r0, r9
 8010b28:	f000 ff02 	bl	8011930 <__lshift>
 8010b2c:	4605      	mov	r5, r0
 8010b2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d058      	beq.n	8010be6 <_dtoa_r+0x93e>
 8010b34:	6869      	ldr	r1, [r5, #4]
 8010b36:	4648      	mov	r0, r9
 8010b38:	f000 fca2 	bl	8011480 <_Balloc>
 8010b3c:	4606      	mov	r6, r0
 8010b3e:	b928      	cbnz	r0, 8010b4c <_dtoa_r+0x8a4>
 8010b40:	4b82      	ldr	r3, [pc, #520]	@ (8010d4c <_dtoa_r+0xaa4>)
 8010b42:	4602      	mov	r2, r0
 8010b44:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010b48:	f7ff bbc7 	b.w	80102da <_dtoa_r+0x32>
 8010b4c:	692a      	ldr	r2, [r5, #16]
 8010b4e:	3202      	adds	r2, #2
 8010b50:	0092      	lsls	r2, r2, #2
 8010b52:	f105 010c 	add.w	r1, r5, #12
 8010b56:	300c      	adds	r0, #12
 8010b58:	f7ff fafd 	bl	8010156 <memcpy>
 8010b5c:	2201      	movs	r2, #1
 8010b5e:	4631      	mov	r1, r6
 8010b60:	4648      	mov	r0, r9
 8010b62:	f000 fee5 	bl	8011930 <__lshift>
 8010b66:	1c7b      	adds	r3, r7, #1
 8010b68:	9305      	str	r3, [sp, #20]
 8010b6a:	eb07 030b 	add.w	r3, r7, fp
 8010b6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b70:	9b02      	ldr	r3, [sp, #8]
 8010b72:	f003 0301 	and.w	r3, r3, #1
 8010b76:	46a8      	mov	r8, r5
 8010b78:	9308      	str	r3, [sp, #32]
 8010b7a:	4605      	mov	r5, r0
 8010b7c:	9b05      	ldr	r3, [sp, #20]
 8010b7e:	9801      	ldr	r0, [sp, #4]
 8010b80:	4621      	mov	r1, r4
 8010b82:	f103 3bff 	add.w	fp, r3, #4294967295
 8010b86:	f7ff fb05 	bl	8010194 <quorem>
 8010b8a:	4641      	mov	r1, r8
 8010b8c:	9002      	str	r0, [sp, #8]
 8010b8e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010b92:	9801      	ldr	r0, [sp, #4]
 8010b94:	f000 ff38 	bl	8011a08 <__mcmp>
 8010b98:	462a      	mov	r2, r5
 8010b9a:	9006      	str	r0, [sp, #24]
 8010b9c:	4621      	mov	r1, r4
 8010b9e:	4648      	mov	r0, r9
 8010ba0:	f000 ff4e 	bl	8011a40 <__mdiff>
 8010ba4:	68c2      	ldr	r2, [r0, #12]
 8010ba6:	4606      	mov	r6, r0
 8010ba8:	b9fa      	cbnz	r2, 8010bea <_dtoa_r+0x942>
 8010baa:	4601      	mov	r1, r0
 8010bac:	9801      	ldr	r0, [sp, #4]
 8010bae:	f000 ff2b 	bl	8011a08 <__mcmp>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	4631      	mov	r1, r6
 8010bb6:	4648      	mov	r0, r9
 8010bb8:	920a      	str	r2, [sp, #40]	@ 0x28
 8010bba:	f000 fca1 	bl	8011500 <_Bfree>
 8010bbe:	9b07      	ldr	r3, [sp, #28]
 8010bc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010bc2:	9e05      	ldr	r6, [sp, #20]
 8010bc4:	ea43 0102 	orr.w	r1, r3, r2
 8010bc8:	9b08      	ldr	r3, [sp, #32]
 8010bca:	4319      	orrs	r1, r3
 8010bcc:	d10f      	bne.n	8010bee <_dtoa_r+0x946>
 8010bce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010bd2:	d028      	beq.n	8010c26 <_dtoa_r+0x97e>
 8010bd4:	9b06      	ldr	r3, [sp, #24]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	dd02      	ble.n	8010be0 <_dtoa_r+0x938>
 8010bda:	9b02      	ldr	r3, [sp, #8]
 8010bdc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010be0:	f88b a000 	strb.w	sl, [fp]
 8010be4:	e639      	b.n	801085a <_dtoa_r+0x5b2>
 8010be6:	4628      	mov	r0, r5
 8010be8:	e7bd      	b.n	8010b66 <_dtoa_r+0x8be>
 8010bea:	2201      	movs	r2, #1
 8010bec:	e7e2      	b.n	8010bb4 <_dtoa_r+0x90c>
 8010bee:	9b06      	ldr	r3, [sp, #24]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	db04      	blt.n	8010bfe <_dtoa_r+0x956>
 8010bf4:	9907      	ldr	r1, [sp, #28]
 8010bf6:	430b      	orrs	r3, r1
 8010bf8:	9908      	ldr	r1, [sp, #32]
 8010bfa:	430b      	orrs	r3, r1
 8010bfc:	d120      	bne.n	8010c40 <_dtoa_r+0x998>
 8010bfe:	2a00      	cmp	r2, #0
 8010c00:	ddee      	ble.n	8010be0 <_dtoa_r+0x938>
 8010c02:	9901      	ldr	r1, [sp, #4]
 8010c04:	2201      	movs	r2, #1
 8010c06:	4648      	mov	r0, r9
 8010c08:	f000 fe92 	bl	8011930 <__lshift>
 8010c0c:	4621      	mov	r1, r4
 8010c0e:	9001      	str	r0, [sp, #4]
 8010c10:	f000 fefa 	bl	8011a08 <__mcmp>
 8010c14:	2800      	cmp	r0, #0
 8010c16:	dc03      	bgt.n	8010c20 <_dtoa_r+0x978>
 8010c18:	d1e2      	bne.n	8010be0 <_dtoa_r+0x938>
 8010c1a:	f01a 0f01 	tst.w	sl, #1
 8010c1e:	d0df      	beq.n	8010be0 <_dtoa_r+0x938>
 8010c20:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010c24:	d1d9      	bne.n	8010bda <_dtoa_r+0x932>
 8010c26:	2339      	movs	r3, #57	@ 0x39
 8010c28:	f88b 3000 	strb.w	r3, [fp]
 8010c2c:	4633      	mov	r3, r6
 8010c2e:	461e      	mov	r6, r3
 8010c30:	3b01      	subs	r3, #1
 8010c32:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010c36:	2a39      	cmp	r2, #57	@ 0x39
 8010c38:	d053      	beq.n	8010ce2 <_dtoa_r+0xa3a>
 8010c3a:	3201      	adds	r2, #1
 8010c3c:	701a      	strb	r2, [r3, #0]
 8010c3e:	e60c      	b.n	801085a <_dtoa_r+0x5b2>
 8010c40:	2a00      	cmp	r2, #0
 8010c42:	dd07      	ble.n	8010c54 <_dtoa_r+0x9ac>
 8010c44:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010c48:	d0ed      	beq.n	8010c26 <_dtoa_r+0x97e>
 8010c4a:	f10a 0301 	add.w	r3, sl, #1
 8010c4e:	f88b 3000 	strb.w	r3, [fp]
 8010c52:	e602      	b.n	801085a <_dtoa_r+0x5b2>
 8010c54:	9b05      	ldr	r3, [sp, #20]
 8010c56:	9a05      	ldr	r2, [sp, #20]
 8010c58:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d029      	beq.n	8010cb6 <_dtoa_r+0xa0e>
 8010c62:	9901      	ldr	r1, [sp, #4]
 8010c64:	2300      	movs	r3, #0
 8010c66:	220a      	movs	r2, #10
 8010c68:	4648      	mov	r0, r9
 8010c6a:	f000 fc6b 	bl	8011544 <__multadd>
 8010c6e:	45a8      	cmp	r8, r5
 8010c70:	9001      	str	r0, [sp, #4]
 8010c72:	f04f 0300 	mov.w	r3, #0
 8010c76:	f04f 020a 	mov.w	r2, #10
 8010c7a:	4641      	mov	r1, r8
 8010c7c:	4648      	mov	r0, r9
 8010c7e:	d107      	bne.n	8010c90 <_dtoa_r+0x9e8>
 8010c80:	f000 fc60 	bl	8011544 <__multadd>
 8010c84:	4680      	mov	r8, r0
 8010c86:	4605      	mov	r5, r0
 8010c88:	9b05      	ldr	r3, [sp, #20]
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	9305      	str	r3, [sp, #20]
 8010c8e:	e775      	b.n	8010b7c <_dtoa_r+0x8d4>
 8010c90:	f000 fc58 	bl	8011544 <__multadd>
 8010c94:	4629      	mov	r1, r5
 8010c96:	4680      	mov	r8, r0
 8010c98:	2300      	movs	r3, #0
 8010c9a:	220a      	movs	r2, #10
 8010c9c:	4648      	mov	r0, r9
 8010c9e:	f000 fc51 	bl	8011544 <__multadd>
 8010ca2:	4605      	mov	r5, r0
 8010ca4:	e7f0      	b.n	8010c88 <_dtoa_r+0x9e0>
 8010ca6:	f1bb 0f00 	cmp.w	fp, #0
 8010caa:	bfcc      	ite	gt
 8010cac:	465e      	movgt	r6, fp
 8010cae:	2601      	movle	r6, #1
 8010cb0:	443e      	add	r6, r7
 8010cb2:	f04f 0800 	mov.w	r8, #0
 8010cb6:	9901      	ldr	r1, [sp, #4]
 8010cb8:	2201      	movs	r2, #1
 8010cba:	4648      	mov	r0, r9
 8010cbc:	f000 fe38 	bl	8011930 <__lshift>
 8010cc0:	4621      	mov	r1, r4
 8010cc2:	9001      	str	r0, [sp, #4]
 8010cc4:	f000 fea0 	bl	8011a08 <__mcmp>
 8010cc8:	2800      	cmp	r0, #0
 8010cca:	dcaf      	bgt.n	8010c2c <_dtoa_r+0x984>
 8010ccc:	d102      	bne.n	8010cd4 <_dtoa_r+0xa2c>
 8010cce:	f01a 0f01 	tst.w	sl, #1
 8010cd2:	d1ab      	bne.n	8010c2c <_dtoa_r+0x984>
 8010cd4:	4633      	mov	r3, r6
 8010cd6:	461e      	mov	r6, r3
 8010cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010cdc:	2a30      	cmp	r2, #48	@ 0x30
 8010cde:	d0fa      	beq.n	8010cd6 <_dtoa_r+0xa2e>
 8010ce0:	e5bb      	b.n	801085a <_dtoa_r+0x5b2>
 8010ce2:	429f      	cmp	r7, r3
 8010ce4:	d1a3      	bne.n	8010c2e <_dtoa_r+0x986>
 8010ce6:	9b04      	ldr	r3, [sp, #16]
 8010ce8:	3301      	adds	r3, #1
 8010cea:	9304      	str	r3, [sp, #16]
 8010cec:	2331      	movs	r3, #49	@ 0x31
 8010cee:	703b      	strb	r3, [r7, #0]
 8010cf0:	e5b3      	b.n	801085a <_dtoa_r+0x5b2>
 8010cf2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010cf4:	4f16      	ldr	r7, [pc, #88]	@ (8010d50 <_dtoa_r+0xaa8>)
 8010cf6:	b11b      	cbz	r3, 8010d00 <_dtoa_r+0xa58>
 8010cf8:	f107 0308 	add.w	r3, r7, #8
 8010cfc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010cfe:	6013      	str	r3, [r2, #0]
 8010d00:	4638      	mov	r0, r7
 8010d02:	b011      	add	sp, #68	@ 0x44
 8010d04:	ecbd 8b02 	vpop	{d8}
 8010d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d0c:	9b07      	ldr	r3, [sp, #28]
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	f77f ae36 	ble.w	8010980 <_dtoa_r+0x6d8>
 8010d14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d18:	2001      	movs	r0, #1
 8010d1a:	e656      	b.n	80109ca <_dtoa_r+0x722>
 8010d1c:	f1bb 0f00 	cmp.w	fp, #0
 8010d20:	f77f aed7 	ble.w	8010ad2 <_dtoa_r+0x82a>
 8010d24:	463e      	mov	r6, r7
 8010d26:	9801      	ldr	r0, [sp, #4]
 8010d28:	4621      	mov	r1, r4
 8010d2a:	f7ff fa33 	bl	8010194 <quorem>
 8010d2e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010d32:	f806 ab01 	strb.w	sl, [r6], #1
 8010d36:	1bf2      	subs	r2, r6, r7
 8010d38:	4593      	cmp	fp, r2
 8010d3a:	ddb4      	ble.n	8010ca6 <_dtoa_r+0x9fe>
 8010d3c:	9901      	ldr	r1, [sp, #4]
 8010d3e:	2300      	movs	r3, #0
 8010d40:	220a      	movs	r2, #10
 8010d42:	4648      	mov	r0, r9
 8010d44:	f000 fbfe 	bl	8011544 <__multadd>
 8010d48:	9001      	str	r0, [sp, #4]
 8010d4a:	e7ec      	b.n	8010d26 <_dtoa_r+0xa7e>
 8010d4c:	080133c3 	.word	0x080133c3
 8010d50:	08013347 	.word	0x08013347

08010d54 <_free_r>:
 8010d54:	b538      	push	{r3, r4, r5, lr}
 8010d56:	4605      	mov	r5, r0
 8010d58:	2900      	cmp	r1, #0
 8010d5a:	d041      	beq.n	8010de0 <_free_r+0x8c>
 8010d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d60:	1f0c      	subs	r4, r1, #4
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	bfb8      	it	lt
 8010d66:	18e4      	addlt	r4, r4, r3
 8010d68:	f7fd fbee 	bl	800e548 <__malloc_lock>
 8010d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8010de4 <_free_r+0x90>)
 8010d6e:	6813      	ldr	r3, [r2, #0]
 8010d70:	b933      	cbnz	r3, 8010d80 <_free_r+0x2c>
 8010d72:	6063      	str	r3, [r4, #4]
 8010d74:	6014      	str	r4, [r2, #0]
 8010d76:	4628      	mov	r0, r5
 8010d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d7c:	f7fd bbea 	b.w	800e554 <__malloc_unlock>
 8010d80:	42a3      	cmp	r3, r4
 8010d82:	d908      	bls.n	8010d96 <_free_r+0x42>
 8010d84:	6820      	ldr	r0, [r4, #0]
 8010d86:	1821      	adds	r1, r4, r0
 8010d88:	428b      	cmp	r3, r1
 8010d8a:	bf01      	itttt	eq
 8010d8c:	6819      	ldreq	r1, [r3, #0]
 8010d8e:	685b      	ldreq	r3, [r3, #4]
 8010d90:	1809      	addeq	r1, r1, r0
 8010d92:	6021      	streq	r1, [r4, #0]
 8010d94:	e7ed      	b.n	8010d72 <_free_r+0x1e>
 8010d96:	461a      	mov	r2, r3
 8010d98:	685b      	ldr	r3, [r3, #4]
 8010d9a:	b10b      	cbz	r3, 8010da0 <_free_r+0x4c>
 8010d9c:	42a3      	cmp	r3, r4
 8010d9e:	d9fa      	bls.n	8010d96 <_free_r+0x42>
 8010da0:	6811      	ldr	r1, [r2, #0]
 8010da2:	1850      	adds	r0, r2, r1
 8010da4:	42a0      	cmp	r0, r4
 8010da6:	d10b      	bne.n	8010dc0 <_free_r+0x6c>
 8010da8:	6820      	ldr	r0, [r4, #0]
 8010daa:	4401      	add	r1, r0
 8010dac:	1850      	adds	r0, r2, r1
 8010dae:	4283      	cmp	r3, r0
 8010db0:	6011      	str	r1, [r2, #0]
 8010db2:	d1e0      	bne.n	8010d76 <_free_r+0x22>
 8010db4:	6818      	ldr	r0, [r3, #0]
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	6053      	str	r3, [r2, #4]
 8010dba:	4408      	add	r0, r1
 8010dbc:	6010      	str	r0, [r2, #0]
 8010dbe:	e7da      	b.n	8010d76 <_free_r+0x22>
 8010dc0:	d902      	bls.n	8010dc8 <_free_r+0x74>
 8010dc2:	230c      	movs	r3, #12
 8010dc4:	602b      	str	r3, [r5, #0]
 8010dc6:	e7d6      	b.n	8010d76 <_free_r+0x22>
 8010dc8:	6820      	ldr	r0, [r4, #0]
 8010dca:	1821      	adds	r1, r4, r0
 8010dcc:	428b      	cmp	r3, r1
 8010dce:	bf04      	itt	eq
 8010dd0:	6819      	ldreq	r1, [r3, #0]
 8010dd2:	685b      	ldreq	r3, [r3, #4]
 8010dd4:	6063      	str	r3, [r4, #4]
 8010dd6:	bf04      	itt	eq
 8010dd8:	1809      	addeq	r1, r1, r0
 8010dda:	6021      	streq	r1, [r4, #0]
 8010ddc:	6054      	str	r4, [r2, #4]
 8010dde:	e7ca      	b.n	8010d76 <_free_r+0x22>
 8010de0:	bd38      	pop	{r3, r4, r5, pc}
 8010de2:	bf00      	nop
 8010de4:	24000d84 	.word	0x24000d84

08010de8 <rshift>:
 8010de8:	6903      	ldr	r3, [r0, #16]
 8010dea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010dee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010df2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010df6:	f100 0414 	add.w	r4, r0, #20
 8010dfa:	dd45      	ble.n	8010e88 <rshift+0xa0>
 8010dfc:	f011 011f 	ands.w	r1, r1, #31
 8010e00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010e04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010e08:	d10c      	bne.n	8010e24 <rshift+0x3c>
 8010e0a:	f100 0710 	add.w	r7, r0, #16
 8010e0e:	4629      	mov	r1, r5
 8010e10:	42b1      	cmp	r1, r6
 8010e12:	d334      	bcc.n	8010e7e <rshift+0x96>
 8010e14:	1a9b      	subs	r3, r3, r2
 8010e16:	009b      	lsls	r3, r3, #2
 8010e18:	1eea      	subs	r2, r5, #3
 8010e1a:	4296      	cmp	r6, r2
 8010e1c:	bf38      	it	cc
 8010e1e:	2300      	movcc	r3, #0
 8010e20:	4423      	add	r3, r4
 8010e22:	e015      	b.n	8010e50 <rshift+0x68>
 8010e24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010e28:	f1c1 0820 	rsb	r8, r1, #32
 8010e2c:	40cf      	lsrs	r7, r1
 8010e2e:	f105 0e04 	add.w	lr, r5, #4
 8010e32:	46a1      	mov	r9, r4
 8010e34:	4576      	cmp	r6, lr
 8010e36:	46f4      	mov	ip, lr
 8010e38:	d815      	bhi.n	8010e66 <rshift+0x7e>
 8010e3a:	1a9a      	subs	r2, r3, r2
 8010e3c:	0092      	lsls	r2, r2, #2
 8010e3e:	3a04      	subs	r2, #4
 8010e40:	3501      	adds	r5, #1
 8010e42:	42ae      	cmp	r6, r5
 8010e44:	bf38      	it	cc
 8010e46:	2200      	movcc	r2, #0
 8010e48:	18a3      	adds	r3, r4, r2
 8010e4a:	50a7      	str	r7, [r4, r2]
 8010e4c:	b107      	cbz	r7, 8010e50 <rshift+0x68>
 8010e4e:	3304      	adds	r3, #4
 8010e50:	1b1a      	subs	r2, r3, r4
 8010e52:	42a3      	cmp	r3, r4
 8010e54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010e58:	bf08      	it	eq
 8010e5a:	2300      	moveq	r3, #0
 8010e5c:	6102      	str	r2, [r0, #16]
 8010e5e:	bf08      	it	eq
 8010e60:	6143      	streq	r3, [r0, #20]
 8010e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e66:	f8dc c000 	ldr.w	ip, [ip]
 8010e6a:	fa0c fc08 	lsl.w	ip, ip, r8
 8010e6e:	ea4c 0707 	orr.w	r7, ip, r7
 8010e72:	f849 7b04 	str.w	r7, [r9], #4
 8010e76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010e7a:	40cf      	lsrs	r7, r1
 8010e7c:	e7da      	b.n	8010e34 <rshift+0x4c>
 8010e7e:	f851 cb04 	ldr.w	ip, [r1], #4
 8010e82:	f847 cf04 	str.w	ip, [r7, #4]!
 8010e86:	e7c3      	b.n	8010e10 <rshift+0x28>
 8010e88:	4623      	mov	r3, r4
 8010e8a:	e7e1      	b.n	8010e50 <rshift+0x68>

08010e8c <__hexdig_fun>:
 8010e8c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010e90:	2b09      	cmp	r3, #9
 8010e92:	d802      	bhi.n	8010e9a <__hexdig_fun+0xe>
 8010e94:	3820      	subs	r0, #32
 8010e96:	b2c0      	uxtb	r0, r0
 8010e98:	4770      	bx	lr
 8010e9a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010e9e:	2b05      	cmp	r3, #5
 8010ea0:	d801      	bhi.n	8010ea6 <__hexdig_fun+0x1a>
 8010ea2:	3847      	subs	r0, #71	@ 0x47
 8010ea4:	e7f7      	b.n	8010e96 <__hexdig_fun+0xa>
 8010ea6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010eaa:	2b05      	cmp	r3, #5
 8010eac:	d801      	bhi.n	8010eb2 <__hexdig_fun+0x26>
 8010eae:	3827      	subs	r0, #39	@ 0x27
 8010eb0:	e7f1      	b.n	8010e96 <__hexdig_fun+0xa>
 8010eb2:	2000      	movs	r0, #0
 8010eb4:	4770      	bx	lr
	...

08010eb8 <__gethex>:
 8010eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ebc:	b085      	sub	sp, #20
 8010ebe:	468a      	mov	sl, r1
 8010ec0:	9302      	str	r3, [sp, #8]
 8010ec2:	680b      	ldr	r3, [r1, #0]
 8010ec4:	9001      	str	r0, [sp, #4]
 8010ec6:	4690      	mov	r8, r2
 8010ec8:	1c9c      	adds	r4, r3, #2
 8010eca:	46a1      	mov	r9, r4
 8010ecc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010ed0:	2830      	cmp	r0, #48	@ 0x30
 8010ed2:	d0fa      	beq.n	8010eca <__gethex+0x12>
 8010ed4:	eba9 0303 	sub.w	r3, r9, r3
 8010ed8:	f1a3 0b02 	sub.w	fp, r3, #2
 8010edc:	f7ff ffd6 	bl	8010e8c <__hexdig_fun>
 8010ee0:	4605      	mov	r5, r0
 8010ee2:	2800      	cmp	r0, #0
 8010ee4:	d168      	bne.n	8010fb8 <__gethex+0x100>
 8010ee6:	49a0      	ldr	r1, [pc, #640]	@ (8011168 <__gethex+0x2b0>)
 8010ee8:	2201      	movs	r2, #1
 8010eea:	4648      	mov	r0, r9
 8010eec:	f7ff f89a 	bl	8010024 <strncmp>
 8010ef0:	4607      	mov	r7, r0
 8010ef2:	2800      	cmp	r0, #0
 8010ef4:	d167      	bne.n	8010fc6 <__gethex+0x10e>
 8010ef6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010efa:	4626      	mov	r6, r4
 8010efc:	f7ff ffc6 	bl	8010e8c <__hexdig_fun>
 8010f00:	2800      	cmp	r0, #0
 8010f02:	d062      	beq.n	8010fca <__gethex+0x112>
 8010f04:	4623      	mov	r3, r4
 8010f06:	7818      	ldrb	r0, [r3, #0]
 8010f08:	2830      	cmp	r0, #48	@ 0x30
 8010f0a:	4699      	mov	r9, r3
 8010f0c:	f103 0301 	add.w	r3, r3, #1
 8010f10:	d0f9      	beq.n	8010f06 <__gethex+0x4e>
 8010f12:	f7ff ffbb 	bl	8010e8c <__hexdig_fun>
 8010f16:	fab0 f580 	clz	r5, r0
 8010f1a:	096d      	lsrs	r5, r5, #5
 8010f1c:	f04f 0b01 	mov.w	fp, #1
 8010f20:	464a      	mov	r2, r9
 8010f22:	4616      	mov	r6, r2
 8010f24:	3201      	adds	r2, #1
 8010f26:	7830      	ldrb	r0, [r6, #0]
 8010f28:	f7ff ffb0 	bl	8010e8c <__hexdig_fun>
 8010f2c:	2800      	cmp	r0, #0
 8010f2e:	d1f8      	bne.n	8010f22 <__gethex+0x6a>
 8010f30:	498d      	ldr	r1, [pc, #564]	@ (8011168 <__gethex+0x2b0>)
 8010f32:	2201      	movs	r2, #1
 8010f34:	4630      	mov	r0, r6
 8010f36:	f7ff f875 	bl	8010024 <strncmp>
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	d13f      	bne.n	8010fbe <__gethex+0x106>
 8010f3e:	b944      	cbnz	r4, 8010f52 <__gethex+0x9a>
 8010f40:	1c74      	adds	r4, r6, #1
 8010f42:	4622      	mov	r2, r4
 8010f44:	4616      	mov	r6, r2
 8010f46:	3201      	adds	r2, #1
 8010f48:	7830      	ldrb	r0, [r6, #0]
 8010f4a:	f7ff ff9f 	bl	8010e8c <__hexdig_fun>
 8010f4e:	2800      	cmp	r0, #0
 8010f50:	d1f8      	bne.n	8010f44 <__gethex+0x8c>
 8010f52:	1ba4      	subs	r4, r4, r6
 8010f54:	00a7      	lsls	r7, r4, #2
 8010f56:	7833      	ldrb	r3, [r6, #0]
 8010f58:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010f5c:	2b50      	cmp	r3, #80	@ 0x50
 8010f5e:	d13e      	bne.n	8010fde <__gethex+0x126>
 8010f60:	7873      	ldrb	r3, [r6, #1]
 8010f62:	2b2b      	cmp	r3, #43	@ 0x2b
 8010f64:	d033      	beq.n	8010fce <__gethex+0x116>
 8010f66:	2b2d      	cmp	r3, #45	@ 0x2d
 8010f68:	d034      	beq.n	8010fd4 <__gethex+0x11c>
 8010f6a:	1c71      	adds	r1, r6, #1
 8010f6c:	2400      	movs	r4, #0
 8010f6e:	7808      	ldrb	r0, [r1, #0]
 8010f70:	f7ff ff8c 	bl	8010e8c <__hexdig_fun>
 8010f74:	1e43      	subs	r3, r0, #1
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	2b18      	cmp	r3, #24
 8010f7a:	d830      	bhi.n	8010fde <__gethex+0x126>
 8010f7c:	f1a0 0210 	sub.w	r2, r0, #16
 8010f80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010f84:	f7ff ff82 	bl	8010e8c <__hexdig_fun>
 8010f88:	f100 3cff 	add.w	ip, r0, #4294967295
 8010f8c:	fa5f fc8c 	uxtb.w	ip, ip
 8010f90:	f1bc 0f18 	cmp.w	ip, #24
 8010f94:	f04f 030a 	mov.w	r3, #10
 8010f98:	d91e      	bls.n	8010fd8 <__gethex+0x120>
 8010f9a:	b104      	cbz	r4, 8010f9e <__gethex+0xe6>
 8010f9c:	4252      	negs	r2, r2
 8010f9e:	4417      	add	r7, r2
 8010fa0:	f8ca 1000 	str.w	r1, [sl]
 8010fa4:	b1ed      	cbz	r5, 8010fe2 <__gethex+0x12a>
 8010fa6:	f1bb 0f00 	cmp.w	fp, #0
 8010faa:	bf0c      	ite	eq
 8010fac:	2506      	moveq	r5, #6
 8010fae:	2500      	movne	r5, #0
 8010fb0:	4628      	mov	r0, r5
 8010fb2:	b005      	add	sp, #20
 8010fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fb8:	2500      	movs	r5, #0
 8010fba:	462c      	mov	r4, r5
 8010fbc:	e7b0      	b.n	8010f20 <__gethex+0x68>
 8010fbe:	2c00      	cmp	r4, #0
 8010fc0:	d1c7      	bne.n	8010f52 <__gethex+0x9a>
 8010fc2:	4627      	mov	r7, r4
 8010fc4:	e7c7      	b.n	8010f56 <__gethex+0x9e>
 8010fc6:	464e      	mov	r6, r9
 8010fc8:	462f      	mov	r7, r5
 8010fca:	2501      	movs	r5, #1
 8010fcc:	e7c3      	b.n	8010f56 <__gethex+0x9e>
 8010fce:	2400      	movs	r4, #0
 8010fd0:	1cb1      	adds	r1, r6, #2
 8010fd2:	e7cc      	b.n	8010f6e <__gethex+0xb6>
 8010fd4:	2401      	movs	r4, #1
 8010fd6:	e7fb      	b.n	8010fd0 <__gethex+0x118>
 8010fd8:	fb03 0002 	mla	r0, r3, r2, r0
 8010fdc:	e7ce      	b.n	8010f7c <__gethex+0xc4>
 8010fde:	4631      	mov	r1, r6
 8010fe0:	e7de      	b.n	8010fa0 <__gethex+0xe8>
 8010fe2:	eba6 0309 	sub.w	r3, r6, r9
 8010fe6:	3b01      	subs	r3, #1
 8010fe8:	4629      	mov	r1, r5
 8010fea:	2b07      	cmp	r3, #7
 8010fec:	dc0a      	bgt.n	8011004 <__gethex+0x14c>
 8010fee:	9801      	ldr	r0, [sp, #4]
 8010ff0:	f000 fa46 	bl	8011480 <_Balloc>
 8010ff4:	4604      	mov	r4, r0
 8010ff6:	b940      	cbnz	r0, 801100a <__gethex+0x152>
 8010ff8:	4b5c      	ldr	r3, [pc, #368]	@ (801116c <__gethex+0x2b4>)
 8010ffa:	4602      	mov	r2, r0
 8010ffc:	21e4      	movs	r1, #228	@ 0xe4
 8010ffe:	485c      	ldr	r0, [pc, #368]	@ (8011170 <__gethex+0x2b8>)
 8011000:	f001 fd22 	bl	8012a48 <__assert_func>
 8011004:	3101      	adds	r1, #1
 8011006:	105b      	asrs	r3, r3, #1
 8011008:	e7ef      	b.n	8010fea <__gethex+0x132>
 801100a:	f100 0a14 	add.w	sl, r0, #20
 801100e:	2300      	movs	r3, #0
 8011010:	4655      	mov	r5, sl
 8011012:	469b      	mov	fp, r3
 8011014:	45b1      	cmp	r9, r6
 8011016:	d337      	bcc.n	8011088 <__gethex+0x1d0>
 8011018:	f845 bb04 	str.w	fp, [r5], #4
 801101c:	eba5 050a 	sub.w	r5, r5, sl
 8011020:	10ad      	asrs	r5, r5, #2
 8011022:	6125      	str	r5, [r4, #16]
 8011024:	4658      	mov	r0, fp
 8011026:	f000 fb1d 	bl	8011664 <__hi0bits>
 801102a:	016d      	lsls	r5, r5, #5
 801102c:	f8d8 6000 	ldr.w	r6, [r8]
 8011030:	1a2d      	subs	r5, r5, r0
 8011032:	42b5      	cmp	r5, r6
 8011034:	dd54      	ble.n	80110e0 <__gethex+0x228>
 8011036:	1bad      	subs	r5, r5, r6
 8011038:	4629      	mov	r1, r5
 801103a:	4620      	mov	r0, r4
 801103c:	f000 feae 	bl	8011d9c <__any_on>
 8011040:	4681      	mov	r9, r0
 8011042:	b178      	cbz	r0, 8011064 <__gethex+0x1ac>
 8011044:	1e6b      	subs	r3, r5, #1
 8011046:	1159      	asrs	r1, r3, #5
 8011048:	f003 021f 	and.w	r2, r3, #31
 801104c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011050:	f04f 0901 	mov.w	r9, #1
 8011054:	fa09 f202 	lsl.w	r2, r9, r2
 8011058:	420a      	tst	r2, r1
 801105a:	d003      	beq.n	8011064 <__gethex+0x1ac>
 801105c:	454b      	cmp	r3, r9
 801105e:	dc36      	bgt.n	80110ce <__gethex+0x216>
 8011060:	f04f 0902 	mov.w	r9, #2
 8011064:	4629      	mov	r1, r5
 8011066:	4620      	mov	r0, r4
 8011068:	f7ff febe 	bl	8010de8 <rshift>
 801106c:	442f      	add	r7, r5
 801106e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011072:	42bb      	cmp	r3, r7
 8011074:	da42      	bge.n	80110fc <__gethex+0x244>
 8011076:	9801      	ldr	r0, [sp, #4]
 8011078:	4621      	mov	r1, r4
 801107a:	f000 fa41 	bl	8011500 <_Bfree>
 801107e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011080:	2300      	movs	r3, #0
 8011082:	6013      	str	r3, [r2, #0]
 8011084:	25a3      	movs	r5, #163	@ 0xa3
 8011086:	e793      	b.n	8010fb0 <__gethex+0xf8>
 8011088:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801108c:	2a2e      	cmp	r2, #46	@ 0x2e
 801108e:	d012      	beq.n	80110b6 <__gethex+0x1fe>
 8011090:	2b20      	cmp	r3, #32
 8011092:	d104      	bne.n	801109e <__gethex+0x1e6>
 8011094:	f845 bb04 	str.w	fp, [r5], #4
 8011098:	f04f 0b00 	mov.w	fp, #0
 801109c:	465b      	mov	r3, fp
 801109e:	7830      	ldrb	r0, [r6, #0]
 80110a0:	9303      	str	r3, [sp, #12]
 80110a2:	f7ff fef3 	bl	8010e8c <__hexdig_fun>
 80110a6:	9b03      	ldr	r3, [sp, #12]
 80110a8:	f000 000f 	and.w	r0, r0, #15
 80110ac:	4098      	lsls	r0, r3
 80110ae:	ea4b 0b00 	orr.w	fp, fp, r0
 80110b2:	3304      	adds	r3, #4
 80110b4:	e7ae      	b.n	8011014 <__gethex+0x15c>
 80110b6:	45b1      	cmp	r9, r6
 80110b8:	d8ea      	bhi.n	8011090 <__gethex+0x1d8>
 80110ba:	492b      	ldr	r1, [pc, #172]	@ (8011168 <__gethex+0x2b0>)
 80110bc:	9303      	str	r3, [sp, #12]
 80110be:	2201      	movs	r2, #1
 80110c0:	4630      	mov	r0, r6
 80110c2:	f7fe ffaf 	bl	8010024 <strncmp>
 80110c6:	9b03      	ldr	r3, [sp, #12]
 80110c8:	2800      	cmp	r0, #0
 80110ca:	d1e1      	bne.n	8011090 <__gethex+0x1d8>
 80110cc:	e7a2      	b.n	8011014 <__gethex+0x15c>
 80110ce:	1ea9      	subs	r1, r5, #2
 80110d0:	4620      	mov	r0, r4
 80110d2:	f000 fe63 	bl	8011d9c <__any_on>
 80110d6:	2800      	cmp	r0, #0
 80110d8:	d0c2      	beq.n	8011060 <__gethex+0x1a8>
 80110da:	f04f 0903 	mov.w	r9, #3
 80110de:	e7c1      	b.n	8011064 <__gethex+0x1ac>
 80110e0:	da09      	bge.n	80110f6 <__gethex+0x23e>
 80110e2:	1b75      	subs	r5, r6, r5
 80110e4:	4621      	mov	r1, r4
 80110e6:	9801      	ldr	r0, [sp, #4]
 80110e8:	462a      	mov	r2, r5
 80110ea:	f000 fc21 	bl	8011930 <__lshift>
 80110ee:	1b7f      	subs	r7, r7, r5
 80110f0:	4604      	mov	r4, r0
 80110f2:	f100 0a14 	add.w	sl, r0, #20
 80110f6:	f04f 0900 	mov.w	r9, #0
 80110fa:	e7b8      	b.n	801106e <__gethex+0x1b6>
 80110fc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011100:	42bd      	cmp	r5, r7
 8011102:	dd6f      	ble.n	80111e4 <__gethex+0x32c>
 8011104:	1bed      	subs	r5, r5, r7
 8011106:	42ae      	cmp	r6, r5
 8011108:	dc34      	bgt.n	8011174 <__gethex+0x2bc>
 801110a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801110e:	2b02      	cmp	r3, #2
 8011110:	d022      	beq.n	8011158 <__gethex+0x2a0>
 8011112:	2b03      	cmp	r3, #3
 8011114:	d024      	beq.n	8011160 <__gethex+0x2a8>
 8011116:	2b01      	cmp	r3, #1
 8011118:	d115      	bne.n	8011146 <__gethex+0x28e>
 801111a:	42ae      	cmp	r6, r5
 801111c:	d113      	bne.n	8011146 <__gethex+0x28e>
 801111e:	2e01      	cmp	r6, #1
 8011120:	d10b      	bne.n	801113a <__gethex+0x282>
 8011122:	9a02      	ldr	r2, [sp, #8]
 8011124:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011128:	6013      	str	r3, [r2, #0]
 801112a:	2301      	movs	r3, #1
 801112c:	6123      	str	r3, [r4, #16]
 801112e:	f8ca 3000 	str.w	r3, [sl]
 8011132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011134:	2562      	movs	r5, #98	@ 0x62
 8011136:	601c      	str	r4, [r3, #0]
 8011138:	e73a      	b.n	8010fb0 <__gethex+0xf8>
 801113a:	1e71      	subs	r1, r6, #1
 801113c:	4620      	mov	r0, r4
 801113e:	f000 fe2d 	bl	8011d9c <__any_on>
 8011142:	2800      	cmp	r0, #0
 8011144:	d1ed      	bne.n	8011122 <__gethex+0x26a>
 8011146:	9801      	ldr	r0, [sp, #4]
 8011148:	4621      	mov	r1, r4
 801114a:	f000 f9d9 	bl	8011500 <_Bfree>
 801114e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011150:	2300      	movs	r3, #0
 8011152:	6013      	str	r3, [r2, #0]
 8011154:	2550      	movs	r5, #80	@ 0x50
 8011156:	e72b      	b.n	8010fb0 <__gethex+0xf8>
 8011158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801115a:	2b00      	cmp	r3, #0
 801115c:	d1f3      	bne.n	8011146 <__gethex+0x28e>
 801115e:	e7e0      	b.n	8011122 <__gethex+0x26a>
 8011160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011162:	2b00      	cmp	r3, #0
 8011164:	d1dd      	bne.n	8011122 <__gethex+0x26a>
 8011166:	e7ee      	b.n	8011146 <__gethex+0x28e>
 8011168:	080132b0 	.word	0x080132b0
 801116c:	080133c3 	.word	0x080133c3
 8011170:	080133d4 	.word	0x080133d4
 8011174:	1e6f      	subs	r7, r5, #1
 8011176:	f1b9 0f00 	cmp.w	r9, #0
 801117a:	d130      	bne.n	80111de <__gethex+0x326>
 801117c:	b127      	cbz	r7, 8011188 <__gethex+0x2d0>
 801117e:	4639      	mov	r1, r7
 8011180:	4620      	mov	r0, r4
 8011182:	f000 fe0b 	bl	8011d9c <__any_on>
 8011186:	4681      	mov	r9, r0
 8011188:	117a      	asrs	r2, r7, #5
 801118a:	2301      	movs	r3, #1
 801118c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011190:	f007 071f 	and.w	r7, r7, #31
 8011194:	40bb      	lsls	r3, r7
 8011196:	4213      	tst	r3, r2
 8011198:	4629      	mov	r1, r5
 801119a:	4620      	mov	r0, r4
 801119c:	bf18      	it	ne
 801119e:	f049 0902 	orrne.w	r9, r9, #2
 80111a2:	f7ff fe21 	bl	8010de8 <rshift>
 80111a6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80111aa:	1b76      	subs	r6, r6, r5
 80111ac:	2502      	movs	r5, #2
 80111ae:	f1b9 0f00 	cmp.w	r9, #0
 80111b2:	d047      	beq.n	8011244 <__gethex+0x38c>
 80111b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80111b8:	2b02      	cmp	r3, #2
 80111ba:	d015      	beq.n	80111e8 <__gethex+0x330>
 80111bc:	2b03      	cmp	r3, #3
 80111be:	d017      	beq.n	80111f0 <__gethex+0x338>
 80111c0:	2b01      	cmp	r3, #1
 80111c2:	d109      	bne.n	80111d8 <__gethex+0x320>
 80111c4:	f019 0f02 	tst.w	r9, #2
 80111c8:	d006      	beq.n	80111d8 <__gethex+0x320>
 80111ca:	f8da 3000 	ldr.w	r3, [sl]
 80111ce:	ea49 0903 	orr.w	r9, r9, r3
 80111d2:	f019 0f01 	tst.w	r9, #1
 80111d6:	d10e      	bne.n	80111f6 <__gethex+0x33e>
 80111d8:	f045 0510 	orr.w	r5, r5, #16
 80111dc:	e032      	b.n	8011244 <__gethex+0x38c>
 80111de:	f04f 0901 	mov.w	r9, #1
 80111e2:	e7d1      	b.n	8011188 <__gethex+0x2d0>
 80111e4:	2501      	movs	r5, #1
 80111e6:	e7e2      	b.n	80111ae <__gethex+0x2f6>
 80111e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111ea:	f1c3 0301 	rsb	r3, r3, #1
 80111ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80111f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d0f0      	beq.n	80111d8 <__gethex+0x320>
 80111f6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80111fa:	f104 0314 	add.w	r3, r4, #20
 80111fe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011202:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011206:	f04f 0c00 	mov.w	ip, #0
 801120a:	4618      	mov	r0, r3
 801120c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011210:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011214:	d01b      	beq.n	801124e <__gethex+0x396>
 8011216:	3201      	adds	r2, #1
 8011218:	6002      	str	r2, [r0, #0]
 801121a:	2d02      	cmp	r5, #2
 801121c:	f104 0314 	add.w	r3, r4, #20
 8011220:	d13c      	bne.n	801129c <__gethex+0x3e4>
 8011222:	f8d8 2000 	ldr.w	r2, [r8]
 8011226:	3a01      	subs	r2, #1
 8011228:	42b2      	cmp	r2, r6
 801122a:	d109      	bne.n	8011240 <__gethex+0x388>
 801122c:	1171      	asrs	r1, r6, #5
 801122e:	2201      	movs	r2, #1
 8011230:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011234:	f006 061f 	and.w	r6, r6, #31
 8011238:	fa02 f606 	lsl.w	r6, r2, r6
 801123c:	421e      	tst	r6, r3
 801123e:	d13a      	bne.n	80112b6 <__gethex+0x3fe>
 8011240:	f045 0520 	orr.w	r5, r5, #32
 8011244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011246:	601c      	str	r4, [r3, #0]
 8011248:	9b02      	ldr	r3, [sp, #8]
 801124a:	601f      	str	r7, [r3, #0]
 801124c:	e6b0      	b.n	8010fb0 <__gethex+0xf8>
 801124e:	4299      	cmp	r1, r3
 8011250:	f843 cc04 	str.w	ip, [r3, #-4]
 8011254:	d8d9      	bhi.n	801120a <__gethex+0x352>
 8011256:	68a3      	ldr	r3, [r4, #8]
 8011258:	459b      	cmp	fp, r3
 801125a:	db17      	blt.n	801128c <__gethex+0x3d4>
 801125c:	6861      	ldr	r1, [r4, #4]
 801125e:	9801      	ldr	r0, [sp, #4]
 8011260:	3101      	adds	r1, #1
 8011262:	f000 f90d 	bl	8011480 <_Balloc>
 8011266:	4681      	mov	r9, r0
 8011268:	b918      	cbnz	r0, 8011272 <__gethex+0x3ba>
 801126a:	4b1a      	ldr	r3, [pc, #104]	@ (80112d4 <__gethex+0x41c>)
 801126c:	4602      	mov	r2, r0
 801126e:	2184      	movs	r1, #132	@ 0x84
 8011270:	e6c5      	b.n	8010ffe <__gethex+0x146>
 8011272:	6922      	ldr	r2, [r4, #16]
 8011274:	3202      	adds	r2, #2
 8011276:	f104 010c 	add.w	r1, r4, #12
 801127a:	0092      	lsls	r2, r2, #2
 801127c:	300c      	adds	r0, #12
 801127e:	f7fe ff6a 	bl	8010156 <memcpy>
 8011282:	4621      	mov	r1, r4
 8011284:	9801      	ldr	r0, [sp, #4]
 8011286:	f000 f93b 	bl	8011500 <_Bfree>
 801128a:	464c      	mov	r4, r9
 801128c:	6923      	ldr	r3, [r4, #16]
 801128e:	1c5a      	adds	r2, r3, #1
 8011290:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011294:	6122      	str	r2, [r4, #16]
 8011296:	2201      	movs	r2, #1
 8011298:	615a      	str	r2, [r3, #20]
 801129a:	e7be      	b.n	801121a <__gethex+0x362>
 801129c:	6922      	ldr	r2, [r4, #16]
 801129e:	455a      	cmp	r2, fp
 80112a0:	dd0b      	ble.n	80112ba <__gethex+0x402>
 80112a2:	2101      	movs	r1, #1
 80112a4:	4620      	mov	r0, r4
 80112a6:	f7ff fd9f 	bl	8010de8 <rshift>
 80112aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80112ae:	3701      	adds	r7, #1
 80112b0:	42bb      	cmp	r3, r7
 80112b2:	f6ff aee0 	blt.w	8011076 <__gethex+0x1be>
 80112b6:	2501      	movs	r5, #1
 80112b8:	e7c2      	b.n	8011240 <__gethex+0x388>
 80112ba:	f016 061f 	ands.w	r6, r6, #31
 80112be:	d0fa      	beq.n	80112b6 <__gethex+0x3fe>
 80112c0:	4453      	add	r3, sl
 80112c2:	f1c6 0620 	rsb	r6, r6, #32
 80112c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80112ca:	f000 f9cb 	bl	8011664 <__hi0bits>
 80112ce:	42b0      	cmp	r0, r6
 80112d0:	dbe7      	blt.n	80112a2 <__gethex+0x3ea>
 80112d2:	e7f0      	b.n	80112b6 <__gethex+0x3fe>
 80112d4:	080133c3 	.word	0x080133c3

080112d8 <L_shift>:
 80112d8:	f1c2 0208 	rsb	r2, r2, #8
 80112dc:	0092      	lsls	r2, r2, #2
 80112de:	b570      	push	{r4, r5, r6, lr}
 80112e0:	f1c2 0620 	rsb	r6, r2, #32
 80112e4:	6843      	ldr	r3, [r0, #4]
 80112e6:	6804      	ldr	r4, [r0, #0]
 80112e8:	fa03 f506 	lsl.w	r5, r3, r6
 80112ec:	432c      	orrs	r4, r5
 80112ee:	40d3      	lsrs	r3, r2
 80112f0:	6004      	str	r4, [r0, #0]
 80112f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80112f6:	4288      	cmp	r0, r1
 80112f8:	d3f4      	bcc.n	80112e4 <L_shift+0xc>
 80112fa:	bd70      	pop	{r4, r5, r6, pc}

080112fc <__match>:
 80112fc:	b530      	push	{r4, r5, lr}
 80112fe:	6803      	ldr	r3, [r0, #0]
 8011300:	3301      	adds	r3, #1
 8011302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011306:	b914      	cbnz	r4, 801130e <__match+0x12>
 8011308:	6003      	str	r3, [r0, #0]
 801130a:	2001      	movs	r0, #1
 801130c:	bd30      	pop	{r4, r5, pc}
 801130e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011312:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011316:	2d19      	cmp	r5, #25
 8011318:	bf98      	it	ls
 801131a:	3220      	addls	r2, #32
 801131c:	42a2      	cmp	r2, r4
 801131e:	d0f0      	beq.n	8011302 <__match+0x6>
 8011320:	2000      	movs	r0, #0
 8011322:	e7f3      	b.n	801130c <__match+0x10>

08011324 <__hexnan>:
 8011324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011328:	680b      	ldr	r3, [r1, #0]
 801132a:	6801      	ldr	r1, [r0, #0]
 801132c:	115e      	asrs	r6, r3, #5
 801132e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011332:	f013 031f 	ands.w	r3, r3, #31
 8011336:	b087      	sub	sp, #28
 8011338:	bf18      	it	ne
 801133a:	3604      	addne	r6, #4
 801133c:	2500      	movs	r5, #0
 801133e:	1f37      	subs	r7, r6, #4
 8011340:	4682      	mov	sl, r0
 8011342:	4690      	mov	r8, r2
 8011344:	9301      	str	r3, [sp, #4]
 8011346:	f846 5c04 	str.w	r5, [r6, #-4]
 801134a:	46b9      	mov	r9, r7
 801134c:	463c      	mov	r4, r7
 801134e:	9502      	str	r5, [sp, #8]
 8011350:	46ab      	mov	fp, r5
 8011352:	784a      	ldrb	r2, [r1, #1]
 8011354:	1c4b      	adds	r3, r1, #1
 8011356:	9303      	str	r3, [sp, #12]
 8011358:	b342      	cbz	r2, 80113ac <__hexnan+0x88>
 801135a:	4610      	mov	r0, r2
 801135c:	9105      	str	r1, [sp, #20]
 801135e:	9204      	str	r2, [sp, #16]
 8011360:	f7ff fd94 	bl	8010e8c <__hexdig_fun>
 8011364:	2800      	cmp	r0, #0
 8011366:	d151      	bne.n	801140c <__hexnan+0xe8>
 8011368:	9a04      	ldr	r2, [sp, #16]
 801136a:	9905      	ldr	r1, [sp, #20]
 801136c:	2a20      	cmp	r2, #32
 801136e:	d818      	bhi.n	80113a2 <__hexnan+0x7e>
 8011370:	9b02      	ldr	r3, [sp, #8]
 8011372:	459b      	cmp	fp, r3
 8011374:	dd13      	ble.n	801139e <__hexnan+0x7a>
 8011376:	454c      	cmp	r4, r9
 8011378:	d206      	bcs.n	8011388 <__hexnan+0x64>
 801137a:	2d07      	cmp	r5, #7
 801137c:	dc04      	bgt.n	8011388 <__hexnan+0x64>
 801137e:	462a      	mov	r2, r5
 8011380:	4649      	mov	r1, r9
 8011382:	4620      	mov	r0, r4
 8011384:	f7ff ffa8 	bl	80112d8 <L_shift>
 8011388:	4544      	cmp	r4, r8
 801138a:	d952      	bls.n	8011432 <__hexnan+0x10e>
 801138c:	2300      	movs	r3, #0
 801138e:	f1a4 0904 	sub.w	r9, r4, #4
 8011392:	f844 3c04 	str.w	r3, [r4, #-4]
 8011396:	f8cd b008 	str.w	fp, [sp, #8]
 801139a:	464c      	mov	r4, r9
 801139c:	461d      	mov	r5, r3
 801139e:	9903      	ldr	r1, [sp, #12]
 80113a0:	e7d7      	b.n	8011352 <__hexnan+0x2e>
 80113a2:	2a29      	cmp	r2, #41	@ 0x29
 80113a4:	d157      	bne.n	8011456 <__hexnan+0x132>
 80113a6:	3102      	adds	r1, #2
 80113a8:	f8ca 1000 	str.w	r1, [sl]
 80113ac:	f1bb 0f00 	cmp.w	fp, #0
 80113b0:	d051      	beq.n	8011456 <__hexnan+0x132>
 80113b2:	454c      	cmp	r4, r9
 80113b4:	d206      	bcs.n	80113c4 <__hexnan+0xa0>
 80113b6:	2d07      	cmp	r5, #7
 80113b8:	dc04      	bgt.n	80113c4 <__hexnan+0xa0>
 80113ba:	462a      	mov	r2, r5
 80113bc:	4649      	mov	r1, r9
 80113be:	4620      	mov	r0, r4
 80113c0:	f7ff ff8a 	bl	80112d8 <L_shift>
 80113c4:	4544      	cmp	r4, r8
 80113c6:	d936      	bls.n	8011436 <__hexnan+0x112>
 80113c8:	f1a8 0204 	sub.w	r2, r8, #4
 80113cc:	4623      	mov	r3, r4
 80113ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80113d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80113d6:	429f      	cmp	r7, r3
 80113d8:	d2f9      	bcs.n	80113ce <__hexnan+0xaa>
 80113da:	1b3b      	subs	r3, r7, r4
 80113dc:	f023 0303 	bic.w	r3, r3, #3
 80113e0:	3304      	adds	r3, #4
 80113e2:	3401      	adds	r4, #1
 80113e4:	3e03      	subs	r6, #3
 80113e6:	42b4      	cmp	r4, r6
 80113e8:	bf88      	it	hi
 80113ea:	2304      	movhi	r3, #4
 80113ec:	4443      	add	r3, r8
 80113ee:	2200      	movs	r2, #0
 80113f0:	f843 2b04 	str.w	r2, [r3], #4
 80113f4:	429f      	cmp	r7, r3
 80113f6:	d2fb      	bcs.n	80113f0 <__hexnan+0xcc>
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	b91b      	cbnz	r3, 8011404 <__hexnan+0xe0>
 80113fc:	4547      	cmp	r7, r8
 80113fe:	d128      	bne.n	8011452 <__hexnan+0x12e>
 8011400:	2301      	movs	r3, #1
 8011402:	603b      	str	r3, [r7, #0]
 8011404:	2005      	movs	r0, #5
 8011406:	b007      	add	sp, #28
 8011408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801140c:	3501      	adds	r5, #1
 801140e:	2d08      	cmp	r5, #8
 8011410:	f10b 0b01 	add.w	fp, fp, #1
 8011414:	dd06      	ble.n	8011424 <__hexnan+0x100>
 8011416:	4544      	cmp	r4, r8
 8011418:	d9c1      	bls.n	801139e <__hexnan+0x7a>
 801141a:	2300      	movs	r3, #0
 801141c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011420:	2501      	movs	r5, #1
 8011422:	3c04      	subs	r4, #4
 8011424:	6822      	ldr	r2, [r4, #0]
 8011426:	f000 000f 	and.w	r0, r0, #15
 801142a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801142e:	6020      	str	r0, [r4, #0]
 8011430:	e7b5      	b.n	801139e <__hexnan+0x7a>
 8011432:	2508      	movs	r5, #8
 8011434:	e7b3      	b.n	801139e <__hexnan+0x7a>
 8011436:	9b01      	ldr	r3, [sp, #4]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d0dd      	beq.n	80113f8 <__hexnan+0xd4>
 801143c:	f1c3 0320 	rsb	r3, r3, #32
 8011440:	f04f 32ff 	mov.w	r2, #4294967295
 8011444:	40da      	lsrs	r2, r3
 8011446:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801144a:	4013      	ands	r3, r2
 801144c:	f846 3c04 	str.w	r3, [r6, #-4]
 8011450:	e7d2      	b.n	80113f8 <__hexnan+0xd4>
 8011452:	3f04      	subs	r7, #4
 8011454:	e7d0      	b.n	80113f8 <__hexnan+0xd4>
 8011456:	2004      	movs	r0, #4
 8011458:	e7d5      	b.n	8011406 <__hexnan+0xe2>

0801145a <__ascii_mbtowc>:
 801145a:	b082      	sub	sp, #8
 801145c:	b901      	cbnz	r1, 8011460 <__ascii_mbtowc+0x6>
 801145e:	a901      	add	r1, sp, #4
 8011460:	b142      	cbz	r2, 8011474 <__ascii_mbtowc+0x1a>
 8011462:	b14b      	cbz	r3, 8011478 <__ascii_mbtowc+0x1e>
 8011464:	7813      	ldrb	r3, [r2, #0]
 8011466:	600b      	str	r3, [r1, #0]
 8011468:	7812      	ldrb	r2, [r2, #0]
 801146a:	1e10      	subs	r0, r2, #0
 801146c:	bf18      	it	ne
 801146e:	2001      	movne	r0, #1
 8011470:	b002      	add	sp, #8
 8011472:	4770      	bx	lr
 8011474:	4610      	mov	r0, r2
 8011476:	e7fb      	b.n	8011470 <__ascii_mbtowc+0x16>
 8011478:	f06f 0001 	mvn.w	r0, #1
 801147c:	e7f8      	b.n	8011470 <__ascii_mbtowc+0x16>
	...

08011480 <_Balloc>:
 8011480:	b570      	push	{r4, r5, r6, lr}
 8011482:	69c6      	ldr	r6, [r0, #28]
 8011484:	4604      	mov	r4, r0
 8011486:	460d      	mov	r5, r1
 8011488:	b976      	cbnz	r6, 80114a8 <_Balloc+0x28>
 801148a:	2010      	movs	r0, #16
 801148c:	f7fc ffb2 	bl	800e3f4 <malloc>
 8011490:	4602      	mov	r2, r0
 8011492:	61e0      	str	r0, [r4, #28]
 8011494:	b920      	cbnz	r0, 80114a0 <_Balloc+0x20>
 8011496:	4b18      	ldr	r3, [pc, #96]	@ (80114f8 <_Balloc+0x78>)
 8011498:	4818      	ldr	r0, [pc, #96]	@ (80114fc <_Balloc+0x7c>)
 801149a:	216b      	movs	r1, #107	@ 0x6b
 801149c:	f001 fad4 	bl	8012a48 <__assert_func>
 80114a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114a4:	6006      	str	r6, [r0, #0]
 80114a6:	60c6      	str	r6, [r0, #12]
 80114a8:	69e6      	ldr	r6, [r4, #28]
 80114aa:	68f3      	ldr	r3, [r6, #12]
 80114ac:	b183      	cbz	r3, 80114d0 <_Balloc+0x50>
 80114ae:	69e3      	ldr	r3, [r4, #28]
 80114b0:	68db      	ldr	r3, [r3, #12]
 80114b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114b6:	b9b8      	cbnz	r0, 80114e8 <_Balloc+0x68>
 80114b8:	2101      	movs	r1, #1
 80114ba:	fa01 f605 	lsl.w	r6, r1, r5
 80114be:	1d72      	adds	r2, r6, #5
 80114c0:	0092      	lsls	r2, r2, #2
 80114c2:	4620      	mov	r0, r4
 80114c4:	f001 fade 	bl	8012a84 <_calloc_r>
 80114c8:	b160      	cbz	r0, 80114e4 <_Balloc+0x64>
 80114ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114ce:	e00e      	b.n	80114ee <_Balloc+0x6e>
 80114d0:	2221      	movs	r2, #33	@ 0x21
 80114d2:	2104      	movs	r1, #4
 80114d4:	4620      	mov	r0, r4
 80114d6:	f001 fad5 	bl	8012a84 <_calloc_r>
 80114da:	69e3      	ldr	r3, [r4, #28]
 80114dc:	60f0      	str	r0, [r6, #12]
 80114de:	68db      	ldr	r3, [r3, #12]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d1e4      	bne.n	80114ae <_Balloc+0x2e>
 80114e4:	2000      	movs	r0, #0
 80114e6:	bd70      	pop	{r4, r5, r6, pc}
 80114e8:	6802      	ldr	r2, [r0, #0]
 80114ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80114ee:	2300      	movs	r3, #0
 80114f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80114f4:	e7f7      	b.n	80114e6 <_Balloc+0x66>
 80114f6:	bf00      	nop
 80114f8:	08013354 	.word	0x08013354
 80114fc:	08013434 	.word	0x08013434

08011500 <_Bfree>:
 8011500:	b570      	push	{r4, r5, r6, lr}
 8011502:	69c6      	ldr	r6, [r0, #28]
 8011504:	4605      	mov	r5, r0
 8011506:	460c      	mov	r4, r1
 8011508:	b976      	cbnz	r6, 8011528 <_Bfree+0x28>
 801150a:	2010      	movs	r0, #16
 801150c:	f7fc ff72 	bl	800e3f4 <malloc>
 8011510:	4602      	mov	r2, r0
 8011512:	61e8      	str	r0, [r5, #28]
 8011514:	b920      	cbnz	r0, 8011520 <_Bfree+0x20>
 8011516:	4b09      	ldr	r3, [pc, #36]	@ (801153c <_Bfree+0x3c>)
 8011518:	4809      	ldr	r0, [pc, #36]	@ (8011540 <_Bfree+0x40>)
 801151a:	218f      	movs	r1, #143	@ 0x8f
 801151c:	f001 fa94 	bl	8012a48 <__assert_func>
 8011520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011524:	6006      	str	r6, [r0, #0]
 8011526:	60c6      	str	r6, [r0, #12]
 8011528:	b13c      	cbz	r4, 801153a <_Bfree+0x3a>
 801152a:	69eb      	ldr	r3, [r5, #28]
 801152c:	6862      	ldr	r2, [r4, #4]
 801152e:	68db      	ldr	r3, [r3, #12]
 8011530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011534:	6021      	str	r1, [r4, #0]
 8011536:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801153a:	bd70      	pop	{r4, r5, r6, pc}
 801153c:	08013354 	.word	0x08013354
 8011540:	08013434 	.word	0x08013434

08011544 <__multadd>:
 8011544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011548:	690d      	ldr	r5, [r1, #16]
 801154a:	4607      	mov	r7, r0
 801154c:	460c      	mov	r4, r1
 801154e:	461e      	mov	r6, r3
 8011550:	f101 0c14 	add.w	ip, r1, #20
 8011554:	2000      	movs	r0, #0
 8011556:	f8dc 3000 	ldr.w	r3, [ip]
 801155a:	b299      	uxth	r1, r3
 801155c:	fb02 6101 	mla	r1, r2, r1, r6
 8011560:	0c1e      	lsrs	r6, r3, #16
 8011562:	0c0b      	lsrs	r3, r1, #16
 8011564:	fb02 3306 	mla	r3, r2, r6, r3
 8011568:	b289      	uxth	r1, r1
 801156a:	3001      	adds	r0, #1
 801156c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011570:	4285      	cmp	r5, r0
 8011572:	f84c 1b04 	str.w	r1, [ip], #4
 8011576:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801157a:	dcec      	bgt.n	8011556 <__multadd+0x12>
 801157c:	b30e      	cbz	r6, 80115c2 <__multadd+0x7e>
 801157e:	68a3      	ldr	r3, [r4, #8]
 8011580:	42ab      	cmp	r3, r5
 8011582:	dc19      	bgt.n	80115b8 <__multadd+0x74>
 8011584:	6861      	ldr	r1, [r4, #4]
 8011586:	4638      	mov	r0, r7
 8011588:	3101      	adds	r1, #1
 801158a:	f7ff ff79 	bl	8011480 <_Balloc>
 801158e:	4680      	mov	r8, r0
 8011590:	b928      	cbnz	r0, 801159e <__multadd+0x5a>
 8011592:	4602      	mov	r2, r0
 8011594:	4b0c      	ldr	r3, [pc, #48]	@ (80115c8 <__multadd+0x84>)
 8011596:	480d      	ldr	r0, [pc, #52]	@ (80115cc <__multadd+0x88>)
 8011598:	21ba      	movs	r1, #186	@ 0xba
 801159a:	f001 fa55 	bl	8012a48 <__assert_func>
 801159e:	6922      	ldr	r2, [r4, #16]
 80115a0:	3202      	adds	r2, #2
 80115a2:	f104 010c 	add.w	r1, r4, #12
 80115a6:	0092      	lsls	r2, r2, #2
 80115a8:	300c      	adds	r0, #12
 80115aa:	f7fe fdd4 	bl	8010156 <memcpy>
 80115ae:	4621      	mov	r1, r4
 80115b0:	4638      	mov	r0, r7
 80115b2:	f7ff ffa5 	bl	8011500 <_Bfree>
 80115b6:	4644      	mov	r4, r8
 80115b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80115bc:	3501      	adds	r5, #1
 80115be:	615e      	str	r6, [r3, #20]
 80115c0:	6125      	str	r5, [r4, #16]
 80115c2:	4620      	mov	r0, r4
 80115c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115c8:	080133c3 	.word	0x080133c3
 80115cc:	08013434 	.word	0x08013434

080115d0 <__s2b>:
 80115d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115d4:	460c      	mov	r4, r1
 80115d6:	4615      	mov	r5, r2
 80115d8:	461f      	mov	r7, r3
 80115da:	2209      	movs	r2, #9
 80115dc:	3308      	adds	r3, #8
 80115de:	4606      	mov	r6, r0
 80115e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80115e4:	2100      	movs	r1, #0
 80115e6:	2201      	movs	r2, #1
 80115e8:	429a      	cmp	r2, r3
 80115ea:	db09      	blt.n	8011600 <__s2b+0x30>
 80115ec:	4630      	mov	r0, r6
 80115ee:	f7ff ff47 	bl	8011480 <_Balloc>
 80115f2:	b940      	cbnz	r0, 8011606 <__s2b+0x36>
 80115f4:	4602      	mov	r2, r0
 80115f6:	4b19      	ldr	r3, [pc, #100]	@ (801165c <__s2b+0x8c>)
 80115f8:	4819      	ldr	r0, [pc, #100]	@ (8011660 <__s2b+0x90>)
 80115fa:	21d3      	movs	r1, #211	@ 0xd3
 80115fc:	f001 fa24 	bl	8012a48 <__assert_func>
 8011600:	0052      	lsls	r2, r2, #1
 8011602:	3101      	adds	r1, #1
 8011604:	e7f0      	b.n	80115e8 <__s2b+0x18>
 8011606:	9b08      	ldr	r3, [sp, #32]
 8011608:	6143      	str	r3, [r0, #20]
 801160a:	2d09      	cmp	r5, #9
 801160c:	f04f 0301 	mov.w	r3, #1
 8011610:	6103      	str	r3, [r0, #16]
 8011612:	dd16      	ble.n	8011642 <__s2b+0x72>
 8011614:	f104 0909 	add.w	r9, r4, #9
 8011618:	46c8      	mov	r8, r9
 801161a:	442c      	add	r4, r5
 801161c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011620:	4601      	mov	r1, r0
 8011622:	3b30      	subs	r3, #48	@ 0x30
 8011624:	220a      	movs	r2, #10
 8011626:	4630      	mov	r0, r6
 8011628:	f7ff ff8c 	bl	8011544 <__multadd>
 801162c:	45a0      	cmp	r8, r4
 801162e:	d1f5      	bne.n	801161c <__s2b+0x4c>
 8011630:	f1a5 0408 	sub.w	r4, r5, #8
 8011634:	444c      	add	r4, r9
 8011636:	1b2d      	subs	r5, r5, r4
 8011638:	1963      	adds	r3, r4, r5
 801163a:	42bb      	cmp	r3, r7
 801163c:	db04      	blt.n	8011648 <__s2b+0x78>
 801163e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011642:	340a      	adds	r4, #10
 8011644:	2509      	movs	r5, #9
 8011646:	e7f6      	b.n	8011636 <__s2b+0x66>
 8011648:	f814 3b01 	ldrb.w	r3, [r4], #1
 801164c:	4601      	mov	r1, r0
 801164e:	3b30      	subs	r3, #48	@ 0x30
 8011650:	220a      	movs	r2, #10
 8011652:	4630      	mov	r0, r6
 8011654:	f7ff ff76 	bl	8011544 <__multadd>
 8011658:	e7ee      	b.n	8011638 <__s2b+0x68>
 801165a:	bf00      	nop
 801165c:	080133c3 	.word	0x080133c3
 8011660:	08013434 	.word	0x08013434

08011664 <__hi0bits>:
 8011664:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011668:	4603      	mov	r3, r0
 801166a:	bf36      	itet	cc
 801166c:	0403      	lslcc	r3, r0, #16
 801166e:	2000      	movcs	r0, #0
 8011670:	2010      	movcc	r0, #16
 8011672:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011676:	bf3c      	itt	cc
 8011678:	021b      	lslcc	r3, r3, #8
 801167a:	3008      	addcc	r0, #8
 801167c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011680:	bf3c      	itt	cc
 8011682:	011b      	lslcc	r3, r3, #4
 8011684:	3004      	addcc	r0, #4
 8011686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801168a:	bf3c      	itt	cc
 801168c:	009b      	lslcc	r3, r3, #2
 801168e:	3002      	addcc	r0, #2
 8011690:	2b00      	cmp	r3, #0
 8011692:	db05      	blt.n	80116a0 <__hi0bits+0x3c>
 8011694:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011698:	f100 0001 	add.w	r0, r0, #1
 801169c:	bf08      	it	eq
 801169e:	2020      	moveq	r0, #32
 80116a0:	4770      	bx	lr

080116a2 <__lo0bits>:
 80116a2:	6803      	ldr	r3, [r0, #0]
 80116a4:	4602      	mov	r2, r0
 80116a6:	f013 0007 	ands.w	r0, r3, #7
 80116aa:	d00b      	beq.n	80116c4 <__lo0bits+0x22>
 80116ac:	07d9      	lsls	r1, r3, #31
 80116ae:	d421      	bmi.n	80116f4 <__lo0bits+0x52>
 80116b0:	0798      	lsls	r0, r3, #30
 80116b2:	bf49      	itett	mi
 80116b4:	085b      	lsrmi	r3, r3, #1
 80116b6:	089b      	lsrpl	r3, r3, #2
 80116b8:	2001      	movmi	r0, #1
 80116ba:	6013      	strmi	r3, [r2, #0]
 80116bc:	bf5c      	itt	pl
 80116be:	6013      	strpl	r3, [r2, #0]
 80116c0:	2002      	movpl	r0, #2
 80116c2:	4770      	bx	lr
 80116c4:	b299      	uxth	r1, r3
 80116c6:	b909      	cbnz	r1, 80116cc <__lo0bits+0x2a>
 80116c8:	0c1b      	lsrs	r3, r3, #16
 80116ca:	2010      	movs	r0, #16
 80116cc:	b2d9      	uxtb	r1, r3
 80116ce:	b909      	cbnz	r1, 80116d4 <__lo0bits+0x32>
 80116d0:	3008      	adds	r0, #8
 80116d2:	0a1b      	lsrs	r3, r3, #8
 80116d4:	0719      	lsls	r1, r3, #28
 80116d6:	bf04      	itt	eq
 80116d8:	091b      	lsreq	r3, r3, #4
 80116da:	3004      	addeq	r0, #4
 80116dc:	0799      	lsls	r1, r3, #30
 80116de:	bf04      	itt	eq
 80116e0:	089b      	lsreq	r3, r3, #2
 80116e2:	3002      	addeq	r0, #2
 80116e4:	07d9      	lsls	r1, r3, #31
 80116e6:	d403      	bmi.n	80116f0 <__lo0bits+0x4e>
 80116e8:	085b      	lsrs	r3, r3, #1
 80116ea:	f100 0001 	add.w	r0, r0, #1
 80116ee:	d003      	beq.n	80116f8 <__lo0bits+0x56>
 80116f0:	6013      	str	r3, [r2, #0]
 80116f2:	4770      	bx	lr
 80116f4:	2000      	movs	r0, #0
 80116f6:	4770      	bx	lr
 80116f8:	2020      	movs	r0, #32
 80116fa:	4770      	bx	lr

080116fc <__i2b>:
 80116fc:	b510      	push	{r4, lr}
 80116fe:	460c      	mov	r4, r1
 8011700:	2101      	movs	r1, #1
 8011702:	f7ff febd 	bl	8011480 <_Balloc>
 8011706:	4602      	mov	r2, r0
 8011708:	b928      	cbnz	r0, 8011716 <__i2b+0x1a>
 801170a:	4b05      	ldr	r3, [pc, #20]	@ (8011720 <__i2b+0x24>)
 801170c:	4805      	ldr	r0, [pc, #20]	@ (8011724 <__i2b+0x28>)
 801170e:	f240 1145 	movw	r1, #325	@ 0x145
 8011712:	f001 f999 	bl	8012a48 <__assert_func>
 8011716:	2301      	movs	r3, #1
 8011718:	6144      	str	r4, [r0, #20]
 801171a:	6103      	str	r3, [r0, #16]
 801171c:	bd10      	pop	{r4, pc}
 801171e:	bf00      	nop
 8011720:	080133c3 	.word	0x080133c3
 8011724:	08013434 	.word	0x08013434

08011728 <__multiply>:
 8011728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801172c:	4614      	mov	r4, r2
 801172e:	690a      	ldr	r2, [r1, #16]
 8011730:	6923      	ldr	r3, [r4, #16]
 8011732:	429a      	cmp	r2, r3
 8011734:	bfa8      	it	ge
 8011736:	4623      	movge	r3, r4
 8011738:	460f      	mov	r7, r1
 801173a:	bfa4      	itt	ge
 801173c:	460c      	movge	r4, r1
 801173e:	461f      	movge	r7, r3
 8011740:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011744:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011748:	68a3      	ldr	r3, [r4, #8]
 801174a:	6861      	ldr	r1, [r4, #4]
 801174c:	eb0a 0609 	add.w	r6, sl, r9
 8011750:	42b3      	cmp	r3, r6
 8011752:	b085      	sub	sp, #20
 8011754:	bfb8      	it	lt
 8011756:	3101      	addlt	r1, #1
 8011758:	f7ff fe92 	bl	8011480 <_Balloc>
 801175c:	b930      	cbnz	r0, 801176c <__multiply+0x44>
 801175e:	4602      	mov	r2, r0
 8011760:	4b44      	ldr	r3, [pc, #272]	@ (8011874 <__multiply+0x14c>)
 8011762:	4845      	ldr	r0, [pc, #276]	@ (8011878 <__multiply+0x150>)
 8011764:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011768:	f001 f96e 	bl	8012a48 <__assert_func>
 801176c:	f100 0514 	add.w	r5, r0, #20
 8011770:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011774:	462b      	mov	r3, r5
 8011776:	2200      	movs	r2, #0
 8011778:	4543      	cmp	r3, r8
 801177a:	d321      	bcc.n	80117c0 <__multiply+0x98>
 801177c:	f107 0114 	add.w	r1, r7, #20
 8011780:	f104 0214 	add.w	r2, r4, #20
 8011784:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011788:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801178c:	9302      	str	r3, [sp, #8]
 801178e:	1b13      	subs	r3, r2, r4
 8011790:	3b15      	subs	r3, #21
 8011792:	f023 0303 	bic.w	r3, r3, #3
 8011796:	3304      	adds	r3, #4
 8011798:	f104 0715 	add.w	r7, r4, #21
 801179c:	42ba      	cmp	r2, r7
 801179e:	bf38      	it	cc
 80117a0:	2304      	movcc	r3, #4
 80117a2:	9301      	str	r3, [sp, #4]
 80117a4:	9b02      	ldr	r3, [sp, #8]
 80117a6:	9103      	str	r1, [sp, #12]
 80117a8:	428b      	cmp	r3, r1
 80117aa:	d80c      	bhi.n	80117c6 <__multiply+0x9e>
 80117ac:	2e00      	cmp	r6, #0
 80117ae:	dd03      	ble.n	80117b8 <__multiply+0x90>
 80117b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d05b      	beq.n	8011870 <__multiply+0x148>
 80117b8:	6106      	str	r6, [r0, #16]
 80117ba:	b005      	add	sp, #20
 80117bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117c0:	f843 2b04 	str.w	r2, [r3], #4
 80117c4:	e7d8      	b.n	8011778 <__multiply+0x50>
 80117c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80117ca:	f1ba 0f00 	cmp.w	sl, #0
 80117ce:	d024      	beq.n	801181a <__multiply+0xf2>
 80117d0:	f104 0e14 	add.w	lr, r4, #20
 80117d4:	46a9      	mov	r9, r5
 80117d6:	f04f 0c00 	mov.w	ip, #0
 80117da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80117de:	f8d9 3000 	ldr.w	r3, [r9]
 80117e2:	fa1f fb87 	uxth.w	fp, r7
 80117e6:	b29b      	uxth	r3, r3
 80117e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80117ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80117f0:	f8d9 7000 	ldr.w	r7, [r9]
 80117f4:	4463      	add	r3, ip
 80117f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80117fa:	fb0a c70b 	mla	r7, sl, fp, ip
 80117fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011802:	b29b      	uxth	r3, r3
 8011804:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011808:	4572      	cmp	r2, lr
 801180a:	f849 3b04 	str.w	r3, [r9], #4
 801180e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011812:	d8e2      	bhi.n	80117da <__multiply+0xb2>
 8011814:	9b01      	ldr	r3, [sp, #4]
 8011816:	f845 c003 	str.w	ip, [r5, r3]
 801181a:	9b03      	ldr	r3, [sp, #12]
 801181c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011820:	3104      	adds	r1, #4
 8011822:	f1b9 0f00 	cmp.w	r9, #0
 8011826:	d021      	beq.n	801186c <__multiply+0x144>
 8011828:	682b      	ldr	r3, [r5, #0]
 801182a:	f104 0c14 	add.w	ip, r4, #20
 801182e:	46ae      	mov	lr, r5
 8011830:	f04f 0a00 	mov.w	sl, #0
 8011834:	f8bc b000 	ldrh.w	fp, [ip]
 8011838:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801183c:	fb09 770b 	mla	r7, r9, fp, r7
 8011840:	4457      	add	r7, sl
 8011842:	b29b      	uxth	r3, r3
 8011844:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011848:	f84e 3b04 	str.w	r3, [lr], #4
 801184c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011850:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011854:	f8be 3000 	ldrh.w	r3, [lr]
 8011858:	fb09 330a 	mla	r3, r9, sl, r3
 801185c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011860:	4562      	cmp	r2, ip
 8011862:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011866:	d8e5      	bhi.n	8011834 <__multiply+0x10c>
 8011868:	9f01      	ldr	r7, [sp, #4]
 801186a:	51eb      	str	r3, [r5, r7]
 801186c:	3504      	adds	r5, #4
 801186e:	e799      	b.n	80117a4 <__multiply+0x7c>
 8011870:	3e01      	subs	r6, #1
 8011872:	e79b      	b.n	80117ac <__multiply+0x84>
 8011874:	080133c3 	.word	0x080133c3
 8011878:	08013434 	.word	0x08013434

0801187c <__pow5mult>:
 801187c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011880:	4615      	mov	r5, r2
 8011882:	f012 0203 	ands.w	r2, r2, #3
 8011886:	4607      	mov	r7, r0
 8011888:	460e      	mov	r6, r1
 801188a:	d007      	beq.n	801189c <__pow5mult+0x20>
 801188c:	4c25      	ldr	r4, [pc, #148]	@ (8011924 <__pow5mult+0xa8>)
 801188e:	3a01      	subs	r2, #1
 8011890:	2300      	movs	r3, #0
 8011892:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011896:	f7ff fe55 	bl	8011544 <__multadd>
 801189a:	4606      	mov	r6, r0
 801189c:	10ad      	asrs	r5, r5, #2
 801189e:	d03d      	beq.n	801191c <__pow5mult+0xa0>
 80118a0:	69fc      	ldr	r4, [r7, #28]
 80118a2:	b97c      	cbnz	r4, 80118c4 <__pow5mult+0x48>
 80118a4:	2010      	movs	r0, #16
 80118a6:	f7fc fda5 	bl	800e3f4 <malloc>
 80118aa:	4602      	mov	r2, r0
 80118ac:	61f8      	str	r0, [r7, #28]
 80118ae:	b928      	cbnz	r0, 80118bc <__pow5mult+0x40>
 80118b0:	4b1d      	ldr	r3, [pc, #116]	@ (8011928 <__pow5mult+0xac>)
 80118b2:	481e      	ldr	r0, [pc, #120]	@ (801192c <__pow5mult+0xb0>)
 80118b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80118b8:	f001 f8c6 	bl	8012a48 <__assert_func>
 80118bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118c0:	6004      	str	r4, [r0, #0]
 80118c2:	60c4      	str	r4, [r0, #12]
 80118c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80118c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80118cc:	b94c      	cbnz	r4, 80118e2 <__pow5mult+0x66>
 80118ce:	f240 2171 	movw	r1, #625	@ 0x271
 80118d2:	4638      	mov	r0, r7
 80118d4:	f7ff ff12 	bl	80116fc <__i2b>
 80118d8:	2300      	movs	r3, #0
 80118da:	f8c8 0008 	str.w	r0, [r8, #8]
 80118de:	4604      	mov	r4, r0
 80118e0:	6003      	str	r3, [r0, #0]
 80118e2:	f04f 0900 	mov.w	r9, #0
 80118e6:	07eb      	lsls	r3, r5, #31
 80118e8:	d50a      	bpl.n	8011900 <__pow5mult+0x84>
 80118ea:	4631      	mov	r1, r6
 80118ec:	4622      	mov	r2, r4
 80118ee:	4638      	mov	r0, r7
 80118f0:	f7ff ff1a 	bl	8011728 <__multiply>
 80118f4:	4631      	mov	r1, r6
 80118f6:	4680      	mov	r8, r0
 80118f8:	4638      	mov	r0, r7
 80118fa:	f7ff fe01 	bl	8011500 <_Bfree>
 80118fe:	4646      	mov	r6, r8
 8011900:	106d      	asrs	r5, r5, #1
 8011902:	d00b      	beq.n	801191c <__pow5mult+0xa0>
 8011904:	6820      	ldr	r0, [r4, #0]
 8011906:	b938      	cbnz	r0, 8011918 <__pow5mult+0x9c>
 8011908:	4622      	mov	r2, r4
 801190a:	4621      	mov	r1, r4
 801190c:	4638      	mov	r0, r7
 801190e:	f7ff ff0b 	bl	8011728 <__multiply>
 8011912:	6020      	str	r0, [r4, #0]
 8011914:	f8c0 9000 	str.w	r9, [r0]
 8011918:	4604      	mov	r4, r0
 801191a:	e7e4      	b.n	80118e6 <__pow5mult+0x6a>
 801191c:	4630      	mov	r0, r6
 801191e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011922:	bf00      	nop
 8011924:	08013490 	.word	0x08013490
 8011928:	08013354 	.word	0x08013354
 801192c:	08013434 	.word	0x08013434

08011930 <__lshift>:
 8011930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011934:	460c      	mov	r4, r1
 8011936:	6849      	ldr	r1, [r1, #4]
 8011938:	6923      	ldr	r3, [r4, #16]
 801193a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801193e:	68a3      	ldr	r3, [r4, #8]
 8011940:	4607      	mov	r7, r0
 8011942:	4691      	mov	r9, r2
 8011944:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011948:	f108 0601 	add.w	r6, r8, #1
 801194c:	42b3      	cmp	r3, r6
 801194e:	db0b      	blt.n	8011968 <__lshift+0x38>
 8011950:	4638      	mov	r0, r7
 8011952:	f7ff fd95 	bl	8011480 <_Balloc>
 8011956:	4605      	mov	r5, r0
 8011958:	b948      	cbnz	r0, 801196e <__lshift+0x3e>
 801195a:	4602      	mov	r2, r0
 801195c:	4b28      	ldr	r3, [pc, #160]	@ (8011a00 <__lshift+0xd0>)
 801195e:	4829      	ldr	r0, [pc, #164]	@ (8011a04 <__lshift+0xd4>)
 8011960:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011964:	f001 f870 	bl	8012a48 <__assert_func>
 8011968:	3101      	adds	r1, #1
 801196a:	005b      	lsls	r3, r3, #1
 801196c:	e7ee      	b.n	801194c <__lshift+0x1c>
 801196e:	2300      	movs	r3, #0
 8011970:	f100 0114 	add.w	r1, r0, #20
 8011974:	f100 0210 	add.w	r2, r0, #16
 8011978:	4618      	mov	r0, r3
 801197a:	4553      	cmp	r3, sl
 801197c:	db33      	blt.n	80119e6 <__lshift+0xb6>
 801197e:	6920      	ldr	r0, [r4, #16]
 8011980:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011984:	f104 0314 	add.w	r3, r4, #20
 8011988:	f019 091f 	ands.w	r9, r9, #31
 801198c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011990:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011994:	d02b      	beq.n	80119ee <__lshift+0xbe>
 8011996:	f1c9 0e20 	rsb	lr, r9, #32
 801199a:	468a      	mov	sl, r1
 801199c:	2200      	movs	r2, #0
 801199e:	6818      	ldr	r0, [r3, #0]
 80119a0:	fa00 f009 	lsl.w	r0, r0, r9
 80119a4:	4310      	orrs	r0, r2
 80119a6:	f84a 0b04 	str.w	r0, [sl], #4
 80119aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80119ae:	459c      	cmp	ip, r3
 80119b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80119b4:	d8f3      	bhi.n	801199e <__lshift+0x6e>
 80119b6:	ebac 0304 	sub.w	r3, ip, r4
 80119ba:	3b15      	subs	r3, #21
 80119bc:	f023 0303 	bic.w	r3, r3, #3
 80119c0:	3304      	adds	r3, #4
 80119c2:	f104 0015 	add.w	r0, r4, #21
 80119c6:	4584      	cmp	ip, r0
 80119c8:	bf38      	it	cc
 80119ca:	2304      	movcc	r3, #4
 80119cc:	50ca      	str	r2, [r1, r3]
 80119ce:	b10a      	cbz	r2, 80119d4 <__lshift+0xa4>
 80119d0:	f108 0602 	add.w	r6, r8, #2
 80119d4:	3e01      	subs	r6, #1
 80119d6:	4638      	mov	r0, r7
 80119d8:	612e      	str	r6, [r5, #16]
 80119da:	4621      	mov	r1, r4
 80119dc:	f7ff fd90 	bl	8011500 <_Bfree>
 80119e0:	4628      	mov	r0, r5
 80119e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80119ea:	3301      	adds	r3, #1
 80119ec:	e7c5      	b.n	801197a <__lshift+0x4a>
 80119ee:	3904      	subs	r1, #4
 80119f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80119f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80119f8:	459c      	cmp	ip, r3
 80119fa:	d8f9      	bhi.n	80119f0 <__lshift+0xc0>
 80119fc:	e7ea      	b.n	80119d4 <__lshift+0xa4>
 80119fe:	bf00      	nop
 8011a00:	080133c3 	.word	0x080133c3
 8011a04:	08013434 	.word	0x08013434

08011a08 <__mcmp>:
 8011a08:	690a      	ldr	r2, [r1, #16]
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	6900      	ldr	r0, [r0, #16]
 8011a0e:	1a80      	subs	r0, r0, r2
 8011a10:	b530      	push	{r4, r5, lr}
 8011a12:	d10e      	bne.n	8011a32 <__mcmp+0x2a>
 8011a14:	3314      	adds	r3, #20
 8011a16:	3114      	adds	r1, #20
 8011a18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011a1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011a20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011a24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011a28:	4295      	cmp	r5, r2
 8011a2a:	d003      	beq.n	8011a34 <__mcmp+0x2c>
 8011a2c:	d205      	bcs.n	8011a3a <__mcmp+0x32>
 8011a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a32:	bd30      	pop	{r4, r5, pc}
 8011a34:	42a3      	cmp	r3, r4
 8011a36:	d3f3      	bcc.n	8011a20 <__mcmp+0x18>
 8011a38:	e7fb      	b.n	8011a32 <__mcmp+0x2a>
 8011a3a:	2001      	movs	r0, #1
 8011a3c:	e7f9      	b.n	8011a32 <__mcmp+0x2a>
	...

08011a40 <__mdiff>:
 8011a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a44:	4689      	mov	r9, r1
 8011a46:	4606      	mov	r6, r0
 8011a48:	4611      	mov	r1, r2
 8011a4a:	4648      	mov	r0, r9
 8011a4c:	4614      	mov	r4, r2
 8011a4e:	f7ff ffdb 	bl	8011a08 <__mcmp>
 8011a52:	1e05      	subs	r5, r0, #0
 8011a54:	d112      	bne.n	8011a7c <__mdiff+0x3c>
 8011a56:	4629      	mov	r1, r5
 8011a58:	4630      	mov	r0, r6
 8011a5a:	f7ff fd11 	bl	8011480 <_Balloc>
 8011a5e:	4602      	mov	r2, r0
 8011a60:	b928      	cbnz	r0, 8011a6e <__mdiff+0x2e>
 8011a62:	4b3f      	ldr	r3, [pc, #252]	@ (8011b60 <__mdiff+0x120>)
 8011a64:	f240 2137 	movw	r1, #567	@ 0x237
 8011a68:	483e      	ldr	r0, [pc, #248]	@ (8011b64 <__mdiff+0x124>)
 8011a6a:	f000 ffed 	bl	8012a48 <__assert_func>
 8011a6e:	2301      	movs	r3, #1
 8011a70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a74:	4610      	mov	r0, r2
 8011a76:	b003      	add	sp, #12
 8011a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a7c:	bfbc      	itt	lt
 8011a7e:	464b      	movlt	r3, r9
 8011a80:	46a1      	movlt	r9, r4
 8011a82:	4630      	mov	r0, r6
 8011a84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011a88:	bfba      	itte	lt
 8011a8a:	461c      	movlt	r4, r3
 8011a8c:	2501      	movlt	r5, #1
 8011a8e:	2500      	movge	r5, #0
 8011a90:	f7ff fcf6 	bl	8011480 <_Balloc>
 8011a94:	4602      	mov	r2, r0
 8011a96:	b918      	cbnz	r0, 8011aa0 <__mdiff+0x60>
 8011a98:	4b31      	ldr	r3, [pc, #196]	@ (8011b60 <__mdiff+0x120>)
 8011a9a:	f240 2145 	movw	r1, #581	@ 0x245
 8011a9e:	e7e3      	b.n	8011a68 <__mdiff+0x28>
 8011aa0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011aa4:	6926      	ldr	r6, [r4, #16]
 8011aa6:	60c5      	str	r5, [r0, #12]
 8011aa8:	f109 0310 	add.w	r3, r9, #16
 8011aac:	f109 0514 	add.w	r5, r9, #20
 8011ab0:	f104 0e14 	add.w	lr, r4, #20
 8011ab4:	f100 0b14 	add.w	fp, r0, #20
 8011ab8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011abc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011ac0:	9301      	str	r3, [sp, #4]
 8011ac2:	46d9      	mov	r9, fp
 8011ac4:	f04f 0c00 	mov.w	ip, #0
 8011ac8:	9b01      	ldr	r3, [sp, #4]
 8011aca:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011ace:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011ad2:	9301      	str	r3, [sp, #4]
 8011ad4:	fa1f f38a 	uxth.w	r3, sl
 8011ad8:	4619      	mov	r1, r3
 8011ada:	b283      	uxth	r3, r0
 8011adc:	1acb      	subs	r3, r1, r3
 8011ade:	0c00      	lsrs	r0, r0, #16
 8011ae0:	4463      	add	r3, ip
 8011ae2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011ae6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011af0:	4576      	cmp	r6, lr
 8011af2:	f849 3b04 	str.w	r3, [r9], #4
 8011af6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011afa:	d8e5      	bhi.n	8011ac8 <__mdiff+0x88>
 8011afc:	1b33      	subs	r3, r6, r4
 8011afe:	3b15      	subs	r3, #21
 8011b00:	f023 0303 	bic.w	r3, r3, #3
 8011b04:	3415      	adds	r4, #21
 8011b06:	3304      	adds	r3, #4
 8011b08:	42a6      	cmp	r6, r4
 8011b0a:	bf38      	it	cc
 8011b0c:	2304      	movcc	r3, #4
 8011b0e:	441d      	add	r5, r3
 8011b10:	445b      	add	r3, fp
 8011b12:	461e      	mov	r6, r3
 8011b14:	462c      	mov	r4, r5
 8011b16:	4544      	cmp	r4, r8
 8011b18:	d30e      	bcc.n	8011b38 <__mdiff+0xf8>
 8011b1a:	f108 0103 	add.w	r1, r8, #3
 8011b1e:	1b49      	subs	r1, r1, r5
 8011b20:	f021 0103 	bic.w	r1, r1, #3
 8011b24:	3d03      	subs	r5, #3
 8011b26:	45a8      	cmp	r8, r5
 8011b28:	bf38      	it	cc
 8011b2a:	2100      	movcc	r1, #0
 8011b2c:	440b      	add	r3, r1
 8011b2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b32:	b191      	cbz	r1, 8011b5a <__mdiff+0x11a>
 8011b34:	6117      	str	r7, [r2, #16]
 8011b36:	e79d      	b.n	8011a74 <__mdiff+0x34>
 8011b38:	f854 1b04 	ldr.w	r1, [r4], #4
 8011b3c:	46e6      	mov	lr, ip
 8011b3e:	0c08      	lsrs	r0, r1, #16
 8011b40:	fa1c fc81 	uxtah	ip, ip, r1
 8011b44:	4471      	add	r1, lr
 8011b46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011b4a:	b289      	uxth	r1, r1
 8011b4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011b50:	f846 1b04 	str.w	r1, [r6], #4
 8011b54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b58:	e7dd      	b.n	8011b16 <__mdiff+0xd6>
 8011b5a:	3f01      	subs	r7, #1
 8011b5c:	e7e7      	b.n	8011b2e <__mdiff+0xee>
 8011b5e:	bf00      	nop
 8011b60:	080133c3 	.word	0x080133c3
 8011b64:	08013434 	.word	0x08013434

08011b68 <__ulp>:
 8011b68:	b082      	sub	sp, #8
 8011b6a:	ed8d 0b00 	vstr	d0, [sp]
 8011b6e:	9a01      	ldr	r2, [sp, #4]
 8011b70:	4b0f      	ldr	r3, [pc, #60]	@ (8011bb0 <__ulp+0x48>)
 8011b72:	4013      	ands	r3, r2
 8011b74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	dc08      	bgt.n	8011b8e <__ulp+0x26>
 8011b7c:	425b      	negs	r3, r3
 8011b7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011b82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011b86:	da04      	bge.n	8011b92 <__ulp+0x2a>
 8011b88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011b8c:	4113      	asrs	r3, r2
 8011b8e:	2200      	movs	r2, #0
 8011b90:	e008      	b.n	8011ba4 <__ulp+0x3c>
 8011b92:	f1a2 0314 	sub.w	r3, r2, #20
 8011b96:	2b1e      	cmp	r3, #30
 8011b98:	bfda      	itte	le
 8011b9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011b9e:	40da      	lsrle	r2, r3
 8011ba0:	2201      	movgt	r2, #1
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	4619      	mov	r1, r3
 8011ba6:	4610      	mov	r0, r2
 8011ba8:	ec41 0b10 	vmov	d0, r0, r1
 8011bac:	b002      	add	sp, #8
 8011bae:	4770      	bx	lr
 8011bb0:	7ff00000 	.word	0x7ff00000

08011bb4 <__b2d>:
 8011bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bb8:	6906      	ldr	r6, [r0, #16]
 8011bba:	f100 0814 	add.w	r8, r0, #20
 8011bbe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011bc2:	1f37      	subs	r7, r6, #4
 8011bc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011bc8:	4610      	mov	r0, r2
 8011bca:	f7ff fd4b 	bl	8011664 <__hi0bits>
 8011bce:	f1c0 0320 	rsb	r3, r0, #32
 8011bd2:	280a      	cmp	r0, #10
 8011bd4:	600b      	str	r3, [r1, #0]
 8011bd6:	491b      	ldr	r1, [pc, #108]	@ (8011c44 <__b2d+0x90>)
 8011bd8:	dc15      	bgt.n	8011c06 <__b2d+0x52>
 8011bda:	f1c0 0c0b 	rsb	ip, r0, #11
 8011bde:	fa22 f30c 	lsr.w	r3, r2, ip
 8011be2:	45b8      	cmp	r8, r7
 8011be4:	ea43 0501 	orr.w	r5, r3, r1
 8011be8:	bf34      	ite	cc
 8011bea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011bee:	2300      	movcs	r3, #0
 8011bf0:	3015      	adds	r0, #21
 8011bf2:	fa02 f000 	lsl.w	r0, r2, r0
 8011bf6:	fa23 f30c 	lsr.w	r3, r3, ip
 8011bfa:	4303      	orrs	r3, r0
 8011bfc:	461c      	mov	r4, r3
 8011bfe:	ec45 4b10 	vmov	d0, r4, r5
 8011c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c06:	45b8      	cmp	r8, r7
 8011c08:	bf3a      	itte	cc
 8011c0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c0e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011c12:	2300      	movcs	r3, #0
 8011c14:	380b      	subs	r0, #11
 8011c16:	d012      	beq.n	8011c3e <__b2d+0x8a>
 8011c18:	f1c0 0120 	rsb	r1, r0, #32
 8011c1c:	fa23 f401 	lsr.w	r4, r3, r1
 8011c20:	4082      	lsls	r2, r0
 8011c22:	4322      	orrs	r2, r4
 8011c24:	4547      	cmp	r7, r8
 8011c26:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011c2a:	bf8c      	ite	hi
 8011c2c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011c30:	2200      	movls	r2, #0
 8011c32:	4083      	lsls	r3, r0
 8011c34:	40ca      	lsrs	r2, r1
 8011c36:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011c3a:	4313      	orrs	r3, r2
 8011c3c:	e7de      	b.n	8011bfc <__b2d+0x48>
 8011c3e:	ea42 0501 	orr.w	r5, r2, r1
 8011c42:	e7db      	b.n	8011bfc <__b2d+0x48>
 8011c44:	3ff00000 	.word	0x3ff00000

08011c48 <__d2b>:
 8011c48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c4c:	460f      	mov	r7, r1
 8011c4e:	2101      	movs	r1, #1
 8011c50:	ec59 8b10 	vmov	r8, r9, d0
 8011c54:	4616      	mov	r6, r2
 8011c56:	f7ff fc13 	bl	8011480 <_Balloc>
 8011c5a:	4604      	mov	r4, r0
 8011c5c:	b930      	cbnz	r0, 8011c6c <__d2b+0x24>
 8011c5e:	4602      	mov	r2, r0
 8011c60:	4b23      	ldr	r3, [pc, #140]	@ (8011cf0 <__d2b+0xa8>)
 8011c62:	4824      	ldr	r0, [pc, #144]	@ (8011cf4 <__d2b+0xac>)
 8011c64:	f240 310f 	movw	r1, #783	@ 0x30f
 8011c68:	f000 feee 	bl	8012a48 <__assert_func>
 8011c6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011c70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c74:	b10d      	cbz	r5, 8011c7a <__d2b+0x32>
 8011c76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c7a:	9301      	str	r3, [sp, #4]
 8011c7c:	f1b8 0300 	subs.w	r3, r8, #0
 8011c80:	d023      	beq.n	8011cca <__d2b+0x82>
 8011c82:	4668      	mov	r0, sp
 8011c84:	9300      	str	r3, [sp, #0]
 8011c86:	f7ff fd0c 	bl	80116a2 <__lo0bits>
 8011c8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011c8e:	b1d0      	cbz	r0, 8011cc6 <__d2b+0x7e>
 8011c90:	f1c0 0320 	rsb	r3, r0, #32
 8011c94:	fa02 f303 	lsl.w	r3, r2, r3
 8011c98:	430b      	orrs	r3, r1
 8011c9a:	40c2      	lsrs	r2, r0
 8011c9c:	6163      	str	r3, [r4, #20]
 8011c9e:	9201      	str	r2, [sp, #4]
 8011ca0:	9b01      	ldr	r3, [sp, #4]
 8011ca2:	61a3      	str	r3, [r4, #24]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	bf0c      	ite	eq
 8011ca8:	2201      	moveq	r2, #1
 8011caa:	2202      	movne	r2, #2
 8011cac:	6122      	str	r2, [r4, #16]
 8011cae:	b1a5      	cbz	r5, 8011cda <__d2b+0x92>
 8011cb0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011cb4:	4405      	add	r5, r0
 8011cb6:	603d      	str	r5, [r7, #0]
 8011cb8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011cbc:	6030      	str	r0, [r6, #0]
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	b003      	add	sp, #12
 8011cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cc6:	6161      	str	r1, [r4, #20]
 8011cc8:	e7ea      	b.n	8011ca0 <__d2b+0x58>
 8011cca:	a801      	add	r0, sp, #4
 8011ccc:	f7ff fce9 	bl	80116a2 <__lo0bits>
 8011cd0:	9b01      	ldr	r3, [sp, #4]
 8011cd2:	6163      	str	r3, [r4, #20]
 8011cd4:	3020      	adds	r0, #32
 8011cd6:	2201      	movs	r2, #1
 8011cd8:	e7e8      	b.n	8011cac <__d2b+0x64>
 8011cda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011cde:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011ce2:	6038      	str	r0, [r7, #0]
 8011ce4:	6918      	ldr	r0, [r3, #16]
 8011ce6:	f7ff fcbd 	bl	8011664 <__hi0bits>
 8011cea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011cee:	e7e5      	b.n	8011cbc <__d2b+0x74>
 8011cf0:	080133c3 	.word	0x080133c3
 8011cf4:	08013434 	.word	0x08013434

08011cf8 <__ratio>:
 8011cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cfc:	4688      	mov	r8, r1
 8011cfe:	4669      	mov	r1, sp
 8011d00:	4681      	mov	r9, r0
 8011d02:	f7ff ff57 	bl	8011bb4 <__b2d>
 8011d06:	a901      	add	r1, sp, #4
 8011d08:	4640      	mov	r0, r8
 8011d0a:	ec55 4b10 	vmov	r4, r5, d0
 8011d0e:	f7ff ff51 	bl	8011bb4 <__b2d>
 8011d12:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011d16:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011d1a:	1ad2      	subs	r2, r2, r3
 8011d1c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011d20:	1a5b      	subs	r3, r3, r1
 8011d22:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8011d26:	ec57 6b10 	vmov	r6, r7, d0
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	bfd6      	itet	le
 8011d2e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d32:	462a      	movgt	r2, r5
 8011d34:	463a      	movle	r2, r7
 8011d36:	46ab      	mov	fp, r5
 8011d38:	46a2      	mov	sl, r4
 8011d3a:	bfce      	itee	gt
 8011d3c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8011d40:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8011d44:	ee00 3a90 	vmovle	s1, r3
 8011d48:	ec4b ab17 	vmov	d7, sl, fp
 8011d4c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8011d50:	b003      	add	sp, #12
 8011d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d56 <__copybits>:
 8011d56:	3901      	subs	r1, #1
 8011d58:	b570      	push	{r4, r5, r6, lr}
 8011d5a:	1149      	asrs	r1, r1, #5
 8011d5c:	6914      	ldr	r4, [r2, #16]
 8011d5e:	3101      	adds	r1, #1
 8011d60:	f102 0314 	add.w	r3, r2, #20
 8011d64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011d68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011d6c:	1f05      	subs	r5, r0, #4
 8011d6e:	42a3      	cmp	r3, r4
 8011d70:	d30c      	bcc.n	8011d8c <__copybits+0x36>
 8011d72:	1aa3      	subs	r3, r4, r2
 8011d74:	3b11      	subs	r3, #17
 8011d76:	f023 0303 	bic.w	r3, r3, #3
 8011d7a:	3211      	adds	r2, #17
 8011d7c:	42a2      	cmp	r2, r4
 8011d7e:	bf88      	it	hi
 8011d80:	2300      	movhi	r3, #0
 8011d82:	4418      	add	r0, r3
 8011d84:	2300      	movs	r3, #0
 8011d86:	4288      	cmp	r0, r1
 8011d88:	d305      	bcc.n	8011d96 <__copybits+0x40>
 8011d8a:	bd70      	pop	{r4, r5, r6, pc}
 8011d8c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011d90:	f845 6f04 	str.w	r6, [r5, #4]!
 8011d94:	e7eb      	b.n	8011d6e <__copybits+0x18>
 8011d96:	f840 3b04 	str.w	r3, [r0], #4
 8011d9a:	e7f4      	b.n	8011d86 <__copybits+0x30>

08011d9c <__any_on>:
 8011d9c:	f100 0214 	add.w	r2, r0, #20
 8011da0:	6900      	ldr	r0, [r0, #16]
 8011da2:	114b      	asrs	r3, r1, #5
 8011da4:	4298      	cmp	r0, r3
 8011da6:	b510      	push	{r4, lr}
 8011da8:	db11      	blt.n	8011dce <__any_on+0x32>
 8011daa:	dd0a      	ble.n	8011dc2 <__any_on+0x26>
 8011dac:	f011 011f 	ands.w	r1, r1, #31
 8011db0:	d007      	beq.n	8011dc2 <__any_on+0x26>
 8011db2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011db6:	fa24 f001 	lsr.w	r0, r4, r1
 8011dba:	fa00 f101 	lsl.w	r1, r0, r1
 8011dbe:	428c      	cmp	r4, r1
 8011dc0:	d10b      	bne.n	8011dda <__any_on+0x3e>
 8011dc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	d803      	bhi.n	8011dd2 <__any_on+0x36>
 8011dca:	2000      	movs	r0, #0
 8011dcc:	bd10      	pop	{r4, pc}
 8011dce:	4603      	mov	r3, r0
 8011dd0:	e7f7      	b.n	8011dc2 <__any_on+0x26>
 8011dd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011dd6:	2900      	cmp	r1, #0
 8011dd8:	d0f5      	beq.n	8011dc6 <__any_on+0x2a>
 8011dda:	2001      	movs	r0, #1
 8011ddc:	e7f6      	b.n	8011dcc <__any_on+0x30>
	...

08011de0 <_strtol_l.constprop.0>:
 8011de0:	2b24      	cmp	r3, #36	@ 0x24
 8011de2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011de6:	4686      	mov	lr, r0
 8011de8:	4690      	mov	r8, r2
 8011dea:	d801      	bhi.n	8011df0 <_strtol_l.constprop.0+0x10>
 8011dec:	2b01      	cmp	r3, #1
 8011dee:	d106      	bne.n	8011dfe <_strtol_l.constprop.0+0x1e>
 8011df0:	f7fe f984 	bl	80100fc <__errno>
 8011df4:	2316      	movs	r3, #22
 8011df6:	6003      	str	r3, [r0, #0]
 8011df8:	2000      	movs	r0, #0
 8011dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dfe:	4834      	ldr	r0, [pc, #208]	@ (8011ed0 <_strtol_l.constprop.0+0xf0>)
 8011e00:	460d      	mov	r5, r1
 8011e02:	462a      	mov	r2, r5
 8011e04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e08:	5d06      	ldrb	r6, [r0, r4]
 8011e0a:	f016 0608 	ands.w	r6, r6, #8
 8011e0e:	d1f8      	bne.n	8011e02 <_strtol_l.constprop.0+0x22>
 8011e10:	2c2d      	cmp	r4, #45	@ 0x2d
 8011e12:	d12d      	bne.n	8011e70 <_strtol_l.constprop.0+0x90>
 8011e14:	782c      	ldrb	r4, [r5, #0]
 8011e16:	2601      	movs	r6, #1
 8011e18:	1c95      	adds	r5, r2, #2
 8011e1a:	f033 0210 	bics.w	r2, r3, #16
 8011e1e:	d109      	bne.n	8011e34 <_strtol_l.constprop.0+0x54>
 8011e20:	2c30      	cmp	r4, #48	@ 0x30
 8011e22:	d12a      	bne.n	8011e7a <_strtol_l.constprop.0+0x9a>
 8011e24:	782a      	ldrb	r2, [r5, #0]
 8011e26:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011e2a:	2a58      	cmp	r2, #88	@ 0x58
 8011e2c:	d125      	bne.n	8011e7a <_strtol_l.constprop.0+0x9a>
 8011e2e:	786c      	ldrb	r4, [r5, #1]
 8011e30:	2310      	movs	r3, #16
 8011e32:	3502      	adds	r5, #2
 8011e34:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011e38:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	fbbc f9f3 	udiv	r9, ip, r3
 8011e42:	4610      	mov	r0, r2
 8011e44:	fb03 ca19 	mls	sl, r3, r9, ip
 8011e48:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011e4c:	2f09      	cmp	r7, #9
 8011e4e:	d81b      	bhi.n	8011e88 <_strtol_l.constprop.0+0xa8>
 8011e50:	463c      	mov	r4, r7
 8011e52:	42a3      	cmp	r3, r4
 8011e54:	dd27      	ble.n	8011ea6 <_strtol_l.constprop.0+0xc6>
 8011e56:	1c57      	adds	r7, r2, #1
 8011e58:	d007      	beq.n	8011e6a <_strtol_l.constprop.0+0x8a>
 8011e5a:	4581      	cmp	r9, r0
 8011e5c:	d320      	bcc.n	8011ea0 <_strtol_l.constprop.0+0xc0>
 8011e5e:	d101      	bne.n	8011e64 <_strtol_l.constprop.0+0x84>
 8011e60:	45a2      	cmp	sl, r4
 8011e62:	db1d      	blt.n	8011ea0 <_strtol_l.constprop.0+0xc0>
 8011e64:	fb00 4003 	mla	r0, r0, r3, r4
 8011e68:	2201      	movs	r2, #1
 8011e6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e6e:	e7eb      	b.n	8011e48 <_strtol_l.constprop.0+0x68>
 8011e70:	2c2b      	cmp	r4, #43	@ 0x2b
 8011e72:	bf04      	itt	eq
 8011e74:	782c      	ldrbeq	r4, [r5, #0]
 8011e76:	1c95      	addeq	r5, r2, #2
 8011e78:	e7cf      	b.n	8011e1a <_strtol_l.constprop.0+0x3a>
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d1da      	bne.n	8011e34 <_strtol_l.constprop.0+0x54>
 8011e7e:	2c30      	cmp	r4, #48	@ 0x30
 8011e80:	bf0c      	ite	eq
 8011e82:	2308      	moveq	r3, #8
 8011e84:	230a      	movne	r3, #10
 8011e86:	e7d5      	b.n	8011e34 <_strtol_l.constprop.0+0x54>
 8011e88:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011e8c:	2f19      	cmp	r7, #25
 8011e8e:	d801      	bhi.n	8011e94 <_strtol_l.constprop.0+0xb4>
 8011e90:	3c37      	subs	r4, #55	@ 0x37
 8011e92:	e7de      	b.n	8011e52 <_strtol_l.constprop.0+0x72>
 8011e94:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011e98:	2f19      	cmp	r7, #25
 8011e9a:	d804      	bhi.n	8011ea6 <_strtol_l.constprop.0+0xc6>
 8011e9c:	3c57      	subs	r4, #87	@ 0x57
 8011e9e:	e7d8      	b.n	8011e52 <_strtol_l.constprop.0+0x72>
 8011ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ea4:	e7e1      	b.n	8011e6a <_strtol_l.constprop.0+0x8a>
 8011ea6:	1c53      	adds	r3, r2, #1
 8011ea8:	d108      	bne.n	8011ebc <_strtol_l.constprop.0+0xdc>
 8011eaa:	2322      	movs	r3, #34	@ 0x22
 8011eac:	f8ce 3000 	str.w	r3, [lr]
 8011eb0:	4660      	mov	r0, ip
 8011eb2:	f1b8 0f00 	cmp.w	r8, #0
 8011eb6:	d0a0      	beq.n	8011dfa <_strtol_l.constprop.0+0x1a>
 8011eb8:	1e69      	subs	r1, r5, #1
 8011eba:	e006      	b.n	8011eca <_strtol_l.constprop.0+0xea>
 8011ebc:	b106      	cbz	r6, 8011ec0 <_strtol_l.constprop.0+0xe0>
 8011ebe:	4240      	negs	r0, r0
 8011ec0:	f1b8 0f00 	cmp.w	r8, #0
 8011ec4:	d099      	beq.n	8011dfa <_strtol_l.constprop.0+0x1a>
 8011ec6:	2a00      	cmp	r2, #0
 8011ec8:	d1f6      	bne.n	8011eb8 <_strtol_l.constprop.0+0xd8>
 8011eca:	f8c8 1000 	str.w	r1, [r8]
 8011ece:	e794      	b.n	8011dfa <_strtol_l.constprop.0+0x1a>
 8011ed0:	08013591 	.word	0x08013591

08011ed4 <_strtol_r>:
 8011ed4:	f7ff bf84 	b.w	8011de0 <_strtol_l.constprop.0>

08011ed8 <__ascii_wctomb>:
 8011ed8:	4603      	mov	r3, r0
 8011eda:	4608      	mov	r0, r1
 8011edc:	b141      	cbz	r1, 8011ef0 <__ascii_wctomb+0x18>
 8011ede:	2aff      	cmp	r2, #255	@ 0xff
 8011ee0:	d904      	bls.n	8011eec <__ascii_wctomb+0x14>
 8011ee2:	228a      	movs	r2, #138	@ 0x8a
 8011ee4:	601a      	str	r2, [r3, #0]
 8011ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8011eea:	4770      	bx	lr
 8011eec:	700a      	strb	r2, [r1, #0]
 8011eee:	2001      	movs	r0, #1
 8011ef0:	4770      	bx	lr

08011ef2 <__ssputs_r>:
 8011ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ef6:	688e      	ldr	r6, [r1, #8]
 8011ef8:	461f      	mov	r7, r3
 8011efa:	42be      	cmp	r6, r7
 8011efc:	680b      	ldr	r3, [r1, #0]
 8011efe:	4682      	mov	sl, r0
 8011f00:	460c      	mov	r4, r1
 8011f02:	4690      	mov	r8, r2
 8011f04:	d82d      	bhi.n	8011f62 <__ssputs_r+0x70>
 8011f06:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011f0a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011f0e:	d026      	beq.n	8011f5e <__ssputs_r+0x6c>
 8011f10:	6965      	ldr	r5, [r4, #20]
 8011f12:	6909      	ldr	r1, [r1, #16]
 8011f14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f18:	eba3 0901 	sub.w	r9, r3, r1
 8011f1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f20:	1c7b      	adds	r3, r7, #1
 8011f22:	444b      	add	r3, r9
 8011f24:	106d      	asrs	r5, r5, #1
 8011f26:	429d      	cmp	r5, r3
 8011f28:	bf38      	it	cc
 8011f2a:	461d      	movcc	r5, r3
 8011f2c:	0553      	lsls	r3, r2, #21
 8011f2e:	d527      	bpl.n	8011f80 <__ssputs_r+0x8e>
 8011f30:	4629      	mov	r1, r5
 8011f32:	f7fc fa89 	bl	800e448 <_malloc_r>
 8011f36:	4606      	mov	r6, r0
 8011f38:	b360      	cbz	r0, 8011f94 <__ssputs_r+0xa2>
 8011f3a:	6921      	ldr	r1, [r4, #16]
 8011f3c:	464a      	mov	r2, r9
 8011f3e:	f7fe f90a 	bl	8010156 <memcpy>
 8011f42:	89a3      	ldrh	r3, [r4, #12]
 8011f44:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f4c:	81a3      	strh	r3, [r4, #12]
 8011f4e:	6126      	str	r6, [r4, #16]
 8011f50:	6165      	str	r5, [r4, #20]
 8011f52:	444e      	add	r6, r9
 8011f54:	eba5 0509 	sub.w	r5, r5, r9
 8011f58:	6026      	str	r6, [r4, #0]
 8011f5a:	60a5      	str	r5, [r4, #8]
 8011f5c:	463e      	mov	r6, r7
 8011f5e:	42be      	cmp	r6, r7
 8011f60:	d900      	bls.n	8011f64 <__ssputs_r+0x72>
 8011f62:	463e      	mov	r6, r7
 8011f64:	6820      	ldr	r0, [r4, #0]
 8011f66:	4632      	mov	r2, r6
 8011f68:	4641      	mov	r1, r8
 8011f6a:	f000 fd52 	bl	8012a12 <memmove>
 8011f6e:	68a3      	ldr	r3, [r4, #8]
 8011f70:	1b9b      	subs	r3, r3, r6
 8011f72:	60a3      	str	r3, [r4, #8]
 8011f74:	6823      	ldr	r3, [r4, #0]
 8011f76:	4433      	add	r3, r6
 8011f78:	6023      	str	r3, [r4, #0]
 8011f7a:	2000      	movs	r0, #0
 8011f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f80:	462a      	mov	r2, r5
 8011f82:	f000 fd93 	bl	8012aac <_realloc_r>
 8011f86:	4606      	mov	r6, r0
 8011f88:	2800      	cmp	r0, #0
 8011f8a:	d1e0      	bne.n	8011f4e <__ssputs_r+0x5c>
 8011f8c:	6921      	ldr	r1, [r4, #16]
 8011f8e:	4650      	mov	r0, sl
 8011f90:	f7fe fee0 	bl	8010d54 <_free_r>
 8011f94:	230c      	movs	r3, #12
 8011f96:	f8ca 3000 	str.w	r3, [sl]
 8011f9a:	89a3      	ldrh	r3, [r4, #12]
 8011f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fa0:	81a3      	strh	r3, [r4, #12]
 8011fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fa6:	e7e9      	b.n	8011f7c <__ssputs_r+0x8a>

08011fa8 <_svfiprintf_r>:
 8011fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fac:	4698      	mov	r8, r3
 8011fae:	898b      	ldrh	r3, [r1, #12]
 8011fb0:	061b      	lsls	r3, r3, #24
 8011fb2:	b09d      	sub	sp, #116	@ 0x74
 8011fb4:	4607      	mov	r7, r0
 8011fb6:	460d      	mov	r5, r1
 8011fb8:	4614      	mov	r4, r2
 8011fba:	d510      	bpl.n	8011fde <_svfiprintf_r+0x36>
 8011fbc:	690b      	ldr	r3, [r1, #16]
 8011fbe:	b973      	cbnz	r3, 8011fde <_svfiprintf_r+0x36>
 8011fc0:	2140      	movs	r1, #64	@ 0x40
 8011fc2:	f7fc fa41 	bl	800e448 <_malloc_r>
 8011fc6:	6028      	str	r0, [r5, #0]
 8011fc8:	6128      	str	r0, [r5, #16]
 8011fca:	b930      	cbnz	r0, 8011fda <_svfiprintf_r+0x32>
 8011fcc:	230c      	movs	r3, #12
 8011fce:	603b      	str	r3, [r7, #0]
 8011fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8011fd4:	b01d      	add	sp, #116	@ 0x74
 8011fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fda:	2340      	movs	r3, #64	@ 0x40
 8011fdc:	616b      	str	r3, [r5, #20]
 8011fde:	2300      	movs	r3, #0
 8011fe0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fe2:	2320      	movs	r3, #32
 8011fe4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011fe8:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fec:	2330      	movs	r3, #48	@ 0x30
 8011fee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801218c <_svfiprintf_r+0x1e4>
 8011ff2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ff6:	f04f 0901 	mov.w	r9, #1
 8011ffa:	4623      	mov	r3, r4
 8011ffc:	469a      	mov	sl, r3
 8011ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012002:	b10a      	cbz	r2, 8012008 <_svfiprintf_r+0x60>
 8012004:	2a25      	cmp	r2, #37	@ 0x25
 8012006:	d1f9      	bne.n	8011ffc <_svfiprintf_r+0x54>
 8012008:	ebba 0b04 	subs.w	fp, sl, r4
 801200c:	d00b      	beq.n	8012026 <_svfiprintf_r+0x7e>
 801200e:	465b      	mov	r3, fp
 8012010:	4622      	mov	r2, r4
 8012012:	4629      	mov	r1, r5
 8012014:	4638      	mov	r0, r7
 8012016:	f7ff ff6c 	bl	8011ef2 <__ssputs_r>
 801201a:	3001      	adds	r0, #1
 801201c:	f000 80a7 	beq.w	801216e <_svfiprintf_r+0x1c6>
 8012020:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012022:	445a      	add	r2, fp
 8012024:	9209      	str	r2, [sp, #36]	@ 0x24
 8012026:	f89a 3000 	ldrb.w	r3, [sl]
 801202a:	2b00      	cmp	r3, #0
 801202c:	f000 809f 	beq.w	801216e <_svfiprintf_r+0x1c6>
 8012030:	2300      	movs	r3, #0
 8012032:	f04f 32ff 	mov.w	r2, #4294967295
 8012036:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801203a:	f10a 0a01 	add.w	sl, sl, #1
 801203e:	9304      	str	r3, [sp, #16]
 8012040:	9307      	str	r3, [sp, #28]
 8012042:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012046:	931a      	str	r3, [sp, #104]	@ 0x68
 8012048:	4654      	mov	r4, sl
 801204a:	2205      	movs	r2, #5
 801204c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012050:	484e      	ldr	r0, [pc, #312]	@ (801218c <_svfiprintf_r+0x1e4>)
 8012052:	f7ee f95d 	bl	8000310 <memchr>
 8012056:	9a04      	ldr	r2, [sp, #16]
 8012058:	b9d8      	cbnz	r0, 8012092 <_svfiprintf_r+0xea>
 801205a:	06d0      	lsls	r0, r2, #27
 801205c:	bf44      	itt	mi
 801205e:	2320      	movmi	r3, #32
 8012060:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012064:	0711      	lsls	r1, r2, #28
 8012066:	bf44      	itt	mi
 8012068:	232b      	movmi	r3, #43	@ 0x2b
 801206a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801206e:	f89a 3000 	ldrb.w	r3, [sl]
 8012072:	2b2a      	cmp	r3, #42	@ 0x2a
 8012074:	d015      	beq.n	80120a2 <_svfiprintf_r+0xfa>
 8012076:	9a07      	ldr	r2, [sp, #28]
 8012078:	4654      	mov	r4, sl
 801207a:	2000      	movs	r0, #0
 801207c:	f04f 0c0a 	mov.w	ip, #10
 8012080:	4621      	mov	r1, r4
 8012082:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012086:	3b30      	subs	r3, #48	@ 0x30
 8012088:	2b09      	cmp	r3, #9
 801208a:	d94b      	bls.n	8012124 <_svfiprintf_r+0x17c>
 801208c:	b1b0      	cbz	r0, 80120bc <_svfiprintf_r+0x114>
 801208e:	9207      	str	r2, [sp, #28]
 8012090:	e014      	b.n	80120bc <_svfiprintf_r+0x114>
 8012092:	eba0 0308 	sub.w	r3, r0, r8
 8012096:	fa09 f303 	lsl.w	r3, r9, r3
 801209a:	4313      	orrs	r3, r2
 801209c:	9304      	str	r3, [sp, #16]
 801209e:	46a2      	mov	sl, r4
 80120a0:	e7d2      	b.n	8012048 <_svfiprintf_r+0xa0>
 80120a2:	9b03      	ldr	r3, [sp, #12]
 80120a4:	1d19      	adds	r1, r3, #4
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	9103      	str	r1, [sp, #12]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	bfbb      	ittet	lt
 80120ae:	425b      	neglt	r3, r3
 80120b0:	f042 0202 	orrlt.w	r2, r2, #2
 80120b4:	9307      	strge	r3, [sp, #28]
 80120b6:	9307      	strlt	r3, [sp, #28]
 80120b8:	bfb8      	it	lt
 80120ba:	9204      	strlt	r2, [sp, #16]
 80120bc:	7823      	ldrb	r3, [r4, #0]
 80120be:	2b2e      	cmp	r3, #46	@ 0x2e
 80120c0:	d10a      	bne.n	80120d8 <_svfiprintf_r+0x130>
 80120c2:	7863      	ldrb	r3, [r4, #1]
 80120c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80120c6:	d132      	bne.n	801212e <_svfiprintf_r+0x186>
 80120c8:	9b03      	ldr	r3, [sp, #12]
 80120ca:	1d1a      	adds	r2, r3, #4
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	9203      	str	r2, [sp, #12]
 80120d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80120d4:	3402      	adds	r4, #2
 80120d6:	9305      	str	r3, [sp, #20]
 80120d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801219c <_svfiprintf_r+0x1f4>
 80120dc:	7821      	ldrb	r1, [r4, #0]
 80120de:	2203      	movs	r2, #3
 80120e0:	4650      	mov	r0, sl
 80120e2:	f7ee f915 	bl	8000310 <memchr>
 80120e6:	b138      	cbz	r0, 80120f8 <_svfiprintf_r+0x150>
 80120e8:	9b04      	ldr	r3, [sp, #16]
 80120ea:	eba0 000a 	sub.w	r0, r0, sl
 80120ee:	2240      	movs	r2, #64	@ 0x40
 80120f0:	4082      	lsls	r2, r0
 80120f2:	4313      	orrs	r3, r2
 80120f4:	3401      	adds	r4, #1
 80120f6:	9304      	str	r3, [sp, #16]
 80120f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120fc:	4824      	ldr	r0, [pc, #144]	@ (8012190 <_svfiprintf_r+0x1e8>)
 80120fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012102:	2206      	movs	r2, #6
 8012104:	f7ee f904 	bl	8000310 <memchr>
 8012108:	2800      	cmp	r0, #0
 801210a:	d036      	beq.n	801217a <_svfiprintf_r+0x1d2>
 801210c:	4b21      	ldr	r3, [pc, #132]	@ (8012194 <_svfiprintf_r+0x1ec>)
 801210e:	bb1b      	cbnz	r3, 8012158 <_svfiprintf_r+0x1b0>
 8012110:	9b03      	ldr	r3, [sp, #12]
 8012112:	3307      	adds	r3, #7
 8012114:	f023 0307 	bic.w	r3, r3, #7
 8012118:	3308      	adds	r3, #8
 801211a:	9303      	str	r3, [sp, #12]
 801211c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801211e:	4433      	add	r3, r6
 8012120:	9309      	str	r3, [sp, #36]	@ 0x24
 8012122:	e76a      	b.n	8011ffa <_svfiprintf_r+0x52>
 8012124:	fb0c 3202 	mla	r2, ip, r2, r3
 8012128:	460c      	mov	r4, r1
 801212a:	2001      	movs	r0, #1
 801212c:	e7a8      	b.n	8012080 <_svfiprintf_r+0xd8>
 801212e:	2300      	movs	r3, #0
 8012130:	3401      	adds	r4, #1
 8012132:	9305      	str	r3, [sp, #20]
 8012134:	4619      	mov	r1, r3
 8012136:	f04f 0c0a 	mov.w	ip, #10
 801213a:	4620      	mov	r0, r4
 801213c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012140:	3a30      	subs	r2, #48	@ 0x30
 8012142:	2a09      	cmp	r2, #9
 8012144:	d903      	bls.n	801214e <_svfiprintf_r+0x1a6>
 8012146:	2b00      	cmp	r3, #0
 8012148:	d0c6      	beq.n	80120d8 <_svfiprintf_r+0x130>
 801214a:	9105      	str	r1, [sp, #20]
 801214c:	e7c4      	b.n	80120d8 <_svfiprintf_r+0x130>
 801214e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012152:	4604      	mov	r4, r0
 8012154:	2301      	movs	r3, #1
 8012156:	e7f0      	b.n	801213a <_svfiprintf_r+0x192>
 8012158:	ab03      	add	r3, sp, #12
 801215a:	9300      	str	r3, [sp, #0]
 801215c:	462a      	mov	r2, r5
 801215e:	4b0e      	ldr	r3, [pc, #56]	@ (8012198 <_svfiprintf_r+0x1f0>)
 8012160:	a904      	add	r1, sp, #16
 8012162:	4638      	mov	r0, r7
 8012164:	f7fd f844 	bl	800f1f0 <_printf_float>
 8012168:	1c42      	adds	r2, r0, #1
 801216a:	4606      	mov	r6, r0
 801216c:	d1d6      	bne.n	801211c <_svfiprintf_r+0x174>
 801216e:	89ab      	ldrh	r3, [r5, #12]
 8012170:	065b      	lsls	r3, r3, #25
 8012172:	f53f af2d 	bmi.w	8011fd0 <_svfiprintf_r+0x28>
 8012176:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012178:	e72c      	b.n	8011fd4 <_svfiprintf_r+0x2c>
 801217a:	ab03      	add	r3, sp, #12
 801217c:	9300      	str	r3, [sp, #0]
 801217e:	462a      	mov	r2, r5
 8012180:	4b05      	ldr	r3, [pc, #20]	@ (8012198 <_svfiprintf_r+0x1f0>)
 8012182:	a904      	add	r1, sp, #16
 8012184:	4638      	mov	r0, r7
 8012186:	f7fd fabb 	bl	800f700 <_printf_i>
 801218a:	e7ed      	b.n	8012168 <_svfiprintf_r+0x1c0>
 801218c:	08013691 	.word	0x08013691
 8012190:	0801369b 	.word	0x0801369b
 8012194:	0800f1f1 	.word	0x0800f1f1
 8012198:	08011ef3 	.word	0x08011ef3
 801219c:	08013697 	.word	0x08013697

080121a0 <_sungetc_r>:
 80121a0:	b538      	push	{r3, r4, r5, lr}
 80121a2:	1c4b      	adds	r3, r1, #1
 80121a4:	4614      	mov	r4, r2
 80121a6:	d103      	bne.n	80121b0 <_sungetc_r+0x10>
 80121a8:	f04f 35ff 	mov.w	r5, #4294967295
 80121ac:	4628      	mov	r0, r5
 80121ae:	bd38      	pop	{r3, r4, r5, pc}
 80121b0:	8993      	ldrh	r3, [r2, #12]
 80121b2:	f023 0320 	bic.w	r3, r3, #32
 80121b6:	8193      	strh	r3, [r2, #12]
 80121b8:	6853      	ldr	r3, [r2, #4]
 80121ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80121bc:	b2cd      	uxtb	r5, r1
 80121be:	b18a      	cbz	r2, 80121e4 <_sungetc_r+0x44>
 80121c0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80121c2:	429a      	cmp	r2, r3
 80121c4:	dd08      	ble.n	80121d8 <_sungetc_r+0x38>
 80121c6:	6823      	ldr	r3, [r4, #0]
 80121c8:	1e5a      	subs	r2, r3, #1
 80121ca:	6022      	str	r2, [r4, #0]
 80121cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80121d0:	6863      	ldr	r3, [r4, #4]
 80121d2:	3301      	adds	r3, #1
 80121d4:	6063      	str	r3, [r4, #4]
 80121d6:	e7e9      	b.n	80121ac <_sungetc_r+0xc>
 80121d8:	4621      	mov	r1, r4
 80121da:	f000 fbe0 	bl	801299e <__submore>
 80121de:	2800      	cmp	r0, #0
 80121e0:	d0f1      	beq.n	80121c6 <_sungetc_r+0x26>
 80121e2:	e7e1      	b.n	80121a8 <_sungetc_r+0x8>
 80121e4:	6921      	ldr	r1, [r4, #16]
 80121e6:	6822      	ldr	r2, [r4, #0]
 80121e8:	b141      	cbz	r1, 80121fc <_sungetc_r+0x5c>
 80121ea:	4291      	cmp	r1, r2
 80121ec:	d206      	bcs.n	80121fc <_sungetc_r+0x5c>
 80121ee:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80121f2:	42a9      	cmp	r1, r5
 80121f4:	d102      	bne.n	80121fc <_sungetc_r+0x5c>
 80121f6:	3a01      	subs	r2, #1
 80121f8:	6022      	str	r2, [r4, #0]
 80121fa:	e7ea      	b.n	80121d2 <_sungetc_r+0x32>
 80121fc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8012200:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012204:	6363      	str	r3, [r4, #52]	@ 0x34
 8012206:	2303      	movs	r3, #3
 8012208:	63a3      	str	r3, [r4, #56]	@ 0x38
 801220a:	4623      	mov	r3, r4
 801220c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012210:	6023      	str	r3, [r4, #0]
 8012212:	2301      	movs	r3, #1
 8012214:	e7de      	b.n	80121d4 <_sungetc_r+0x34>

08012216 <__ssrefill_r>:
 8012216:	b510      	push	{r4, lr}
 8012218:	460c      	mov	r4, r1
 801221a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801221c:	b169      	cbz	r1, 801223a <__ssrefill_r+0x24>
 801221e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012222:	4299      	cmp	r1, r3
 8012224:	d001      	beq.n	801222a <__ssrefill_r+0x14>
 8012226:	f7fe fd95 	bl	8010d54 <_free_r>
 801222a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801222c:	6063      	str	r3, [r4, #4]
 801222e:	2000      	movs	r0, #0
 8012230:	6360      	str	r0, [r4, #52]	@ 0x34
 8012232:	b113      	cbz	r3, 801223a <__ssrefill_r+0x24>
 8012234:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012236:	6023      	str	r3, [r4, #0]
 8012238:	bd10      	pop	{r4, pc}
 801223a:	6923      	ldr	r3, [r4, #16]
 801223c:	6023      	str	r3, [r4, #0]
 801223e:	2300      	movs	r3, #0
 8012240:	6063      	str	r3, [r4, #4]
 8012242:	89a3      	ldrh	r3, [r4, #12]
 8012244:	f043 0320 	orr.w	r3, r3, #32
 8012248:	81a3      	strh	r3, [r4, #12]
 801224a:	f04f 30ff 	mov.w	r0, #4294967295
 801224e:	e7f3      	b.n	8012238 <__ssrefill_r+0x22>

08012250 <__ssvfiscanf_r>:
 8012250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012254:	460c      	mov	r4, r1
 8012256:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801225a:	2100      	movs	r1, #0
 801225c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012260:	49a5      	ldr	r1, [pc, #660]	@ (80124f8 <__ssvfiscanf_r+0x2a8>)
 8012262:	91a0      	str	r1, [sp, #640]	@ 0x280
 8012264:	f10d 0804 	add.w	r8, sp, #4
 8012268:	49a4      	ldr	r1, [pc, #656]	@ (80124fc <__ssvfiscanf_r+0x2ac>)
 801226a:	4fa5      	ldr	r7, [pc, #660]	@ (8012500 <__ssvfiscanf_r+0x2b0>)
 801226c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8012270:	4606      	mov	r6, r0
 8012272:	91a1      	str	r1, [sp, #644]	@ 0x284
 8012274:	9300      	str	r3, [sp, #0]
 8012276:	7813      	ldrb	r3, [r2, #0]
 8012278:	2b00      	cmp	r3, #0
 801227a:	f000 8158 	beq.w	801252e <__ssvfiscanf_r+0x2de>
 801227e:	5cf9      	ldrb	r1, [r7, r3]
 8012280:	f011 0108 	ands.w	r1, r1, #8
 8012284:	f102 0501 	add.w	r5, r2, #1
 8012288:	d019      	beq.n	80122be <__ssvfiscanf_r+0x6e>
 801228a:	6863      	ldr	r3, [r4, #4]
 801228c:	2b00      	cmp	r3, #0
 801228e:	dd0f      	ble.n	80122b0 <__ssvfiscanf_r+0x60>
 8012290:	6823      	ldr	r3, [r4, #0]
 8012292:	781a      	ldrb	r2, [r3, #0]
 8012294:	5cba      	ldrb	r2, [r7, r2]
 8012296:	0712      	lsls	r2, r2, #28
 8012298:	d401      	bmi.n	801229e <__ssvfiscanf_r+0x4e>
 801229a:	462a      	mov	r2, r5
 801229c:	e7eb      	b.n	8012276 <__ssvfiscanf_r+0x26>
 801229e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80122a0:	3201      	adds	r2, #1
 80122a2:	9245      	str	r2, [sp, #276]	@ 0x114
 80122a4:	6862      	ldr	r2, [r4, #4]
 80122a6:	3301      	adds	r3, #1
 80122a8:	3a01      	subs	r2, #1
 80122aa:	6062      	str	r2, [r4, #4]
 80122ac:	6023      	str	r3, [r4, #0]
 80122ae:	e7ec      	b.n	801228a <__ssvfiscanf_r+0x3a>
 80122b0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80122b2:	4621      	mov	r1, r4
 80122b4:	4630      	mov	r0, r6
 80122b6:	4798      	blx	r3
 80122b8:	2800      	cmp	r0, #0
 80122ba:	d0e9      	beq.n	8012290 <__ssvfiscanf_r+0x40>
 80122bc:	e7ed      	b.n	801229a <__ssvfiscanf_r+0x4a>
 80122be:	2b25      	cmp	r3, #37	@ 0x25
 80122c0:	d012      	beq.n	80122e8 <__ssvfiscanf_r+0x98>
 80122c2:	4699      	mov	r9, r3
 80122c4:	6863      	ldr	r3, [r4, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	f340 8093 	ble.w	80123f2 <__ssvfiscanf_r+0x1a2>
 80122cc:	6822      	ldr	r2, [r4, #0]
 80122ce:	7813      	ldrb	r3, [r2, #0]
 80122d0:	454b      	cmp	r3, r9
 80122d2:	f040 812c 	bne.w	801252e <__ssvfiscanf_r+0x2de>
 80122d6:	6863      	ldr	r3, [r4, #4]
 80122d8:	3b01      	subs	r3, #1
 80122da:	6063      	str	r3, [r4, #4]
 80122dc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80122de:	3201      	adds	r2, #1
 80122e0:	3301      	adds	r3, #1
 80122e2:	6022      	str	r2, [r4, #0]
 80122e4:	9345      	str	r3, [sp, #276]	@ 0x114
 80122e6:	e7d8      	b.n	801229a <__ssvfiscanf_r+0x4a>
 80122e8:	9141      	str	r1, [sp, #260]	@ 0x104
 80122ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 80122ec:	7853      	ldrb	r3, [r2, #1]
 80122ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80122f0:	bf02      	ittt	eq
 80122f2:	2310      	moveq	r3, #16
 80122f4:	1c95      	addeq	r5, r2, #2
 80122f6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80122f8:	220a      	movs	r2, #10
 80122fa:	46a9      	mov	r9, r5
 80122fc:	f819 1b01 	ldrb.w	r1, [r9], #1
 8012300:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8012304:	2b09      	cmp	r3, #9
 8012306:	d91e      	bls.n	8012346 <__ssvfiscanf_r+0xf6>
 8012308:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8012504 <__ssvfiscanf_r+0x2b4>
 801230c:	2203      	movs	r2, #3
 801230e:	4650      	mov	r0, sl
 8012310:	f7ed fffe 	bl	8000310 <memchr>
 8012314:	b138      	cbz	r0, 8012326 <__ssvfiscanf_r+0xd6>
 8012316:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012318:	eba0 000a 	sub.w	r0, r0, sl
 801231c:	2301      	movs	r3, #1
 801231e:	4083      	lsls	r3, r0
 8012320:	4313      	orrs	r3, r2
 8012322:	9341      	str	r3, [sp, #260]	@ 0x104
 8012324:	464d      	mov	r5, r9
 8012326:	f815 3b01 	ldrb.w	r3, [r5], #1
 801232a:	2b78      	cmp	r3, #120	@ 0x78
 801232c:	d806      	bhi.n	801233c <__ssvfiscanf_r+0xec>
 801232e:	2b57      	cmp	r3, #87	@ 0x57
 8012330:	d810      	bhi.n	8012354 <__ssvfiscanf_r+0x104>
 8012332:	2b25      	cmp	r3, #37	@ 0x25
 8012334:	d0c5      	beq.n	80122c2 <__ssvfiscanf_r+0x72>
 8012336:	d857      	bhi.n	80123e8 <__ssvfiscanf_r+0x198>
 8012338:	2b00      	cmp	r3, #0
 801233a:	d065      	beq.n	8012408 <__ssvfiscanf_r+0x1b8>
 801233c:	2303      	movs	r3, #3
 801233e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012340:	230a      	movs	r3, #10
 8012342:	9342      	str	r3, [sp, #264]	@ 0x108
 8012344:	e078      	b.n	8012438 <__ssvfiscanf_r+0x1e8>
 8012346:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012348:	fb02 1103 	mla	r1, r2, r3, r1
 801234c:	3930      	subs	r1, #48	@ 0x30
 801234e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012350:	464d      	mov	r5, r9
 8012352:	e7d2      	b.n	80122fa <__ssvfiscanf_r+0xaa>
 8012354:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012358:	2a20      	cmp	r2, #32
 801235a:	d8ef      	bhi.n	801233c <__ssvfiscanf_r+0xec>
 801235c:	a101      	add	r1, pc, #4	@ (adr r1, 8012364 <__ssvfiscanf_r+0x114>)
 801235e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012362:	bf00      	nop
 8012364:	08012417 	.word	0x08012417
 8012368:	0801233d 	.word	0x0801233d
 801236c:	0801233d 	.word	0x0801233d
 8012370:	08012471 	.word	0x08012471
 8012374:	0801233d 	.word	0x0801233d
 8012378:	0801233d 	.word	0x0801233d
 801237c:	0801233d 	.word	0x0801233d
 8012380:	0801233d 	.word	0x0801233d
 8012384:	0801233d 	.word	0x0801233d
 8012388:	0801233d 	.word	0x0801233d
 801238c:	0801233d 	.word	0x0801233d
 8012390:	08012487 	.word	0x08012487
 8012394:	0801246d 	.word	0x0801246d
 8012398:	080123ef 	.word	0x080123ef
 801239c:	080123ef 	.word	0x080123ef
 80123a0:	080123ef 	.word	0x080123ef
 80123a4:	0801233d 	.word	0x0801233d
 80123a8:	08012429 	.word	0x08012429
 80123ac:	0801233d 	.word	0x0801233d
 80123b0:	0801233d 	.word	0x0801233d
 80123b4:	0801233d 	.word	0x0801233d
 80123b8:	0801233d 	.word	0x0801233d
 80123bc:	08012497 	.word	0x08012497
 80123c0:	08012431 	.word	0x08012431
 80123c4:	0801240f 	.word	0x0801240f
 80123c8:	0801233d 	.word	0x0801233d
 80123cc:	0801233d 	.word	0x0801233d
 80123d0:	08012493 	.word	0x08012493
 80123d4:	0801233d 	.word	0x0801233d
 80123d8:	0801246d 	.word	0x0801246d
 80123dc:	0801233d 	.word	0x0801233d
 80123e0:	0801233d 	.word	0x0801233d
 80123e4:	08012417 	.word	0x08012417
 80123e8:	3b45      	subs	r3, #69	@ 0x45
 80123ea:	2b02      	cmp	r3, #2
 80123ec:	d8a6      	bhi.n	801233c <__ssvfiscanf_r+0xec>
 80123ee:	2305      	movs	r3, #5
 80123f0:	e021      	b.n	8012436 <__ssvfiscanf_r+0x1e6>
 80123f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80123f4:	4621      	mov	r1, r4
 80123f6:	4630      	mov	r0, r6
 80123f8:	4798      	blx	r3
 80123fa:	2800      	cmp	r0, #0
 80123fc:	f43f af66 	beq.w	80122cc <__ssvfiscanf_r+0x7c>
 8012400:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012402:	2800      	cmp	r0, #0
 8012404:	f040 808b 	bne.w	801251e <__ssvfiscanf_r+0x2ce>
 8012408:	f04f 30ff 	mov.w	r0, #4294967295
 801240c:	e08b      	b.n	8012526 <__ssvfiscanf_r+0x2d6>
 801240e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012410:	f042 0220 	orr.w	r2, r2, #32
 8012414:	9241      	str	r2, [sp, #260]	@ 0x104
 8012416:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801241c:	9241      	str	r2, [sp, #260]	@ 0x104
 801241e:	2210      	movs	r2, #16
 8012420:	2b6e      	cmp	r3, #110	@ 0x6e
 8012422:	9242      	str	r2, [sp, #264]	@ 0x108
 8012424:	d902      	bls.n	801242c <__ssvfiscanf_r+0x1dc>
 8012426:	e005      	b.n	8012434 <__ssvfiscanf_r+0x1e4>
 8012428:	2300      	movs	r3, #0
 801242a:	9342      	str	r3, [sp, #264]	@ 0x108
 801242c:	2303      	movs	r3, #3
 801242e:	e002      	b.n	8012436 <__ssvfiscanf_r+0x1e6>
 8012430:	2308      	movs	r3, #8
 8012432:	9342      	str	r3, [sp, #264]	@ 0x108
 8012434:	2304      	movs	r3, #4
 8012436:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012438:	6863      	ldr	r3, [r4, #4]
 801243a:	2b00      	cmp	r3, #0
 801243c:	dd39      	ble.n	80124b2 <__ssvfiscanf_r+0x262>
 801243e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012440:	0659      	lsls	r1, r3, #25
 8012442:	d404      	bmi.n	801244e <__ssvfiscanf_r+0x1fe>
 8012444:	6823      	ldr	r3, [r4, #0]
 8012446:	781a      	ldrb	r2, [r3, #0]
 8012448:	5cba      	ldrb	r2, [r7, r2]
 801244a:	0712      	lsls	r2, r2, #28
 801244c:	d438      	bmi.n	80124c0 <__ssvfiscanf_r+0x270>
 801244e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012450:	2b02      	cmp	r3, #2
 8012452:	dc47      	bgt.n	80124e4 <__ssvfiscanf_r+0x294>
 8012454:	466b      	mov	r3, sp
 8012456:	4622      	mov	r2, r4
 8012458:	a941      	add	r1, sp, #260	@ 0x104
 801245a:	4630      	mov	r0, r6
 801245c:	f000 f86c 	bl	8012538 <_scanf_chars>
 8012460:	2801      	cmp	r0, #1
 8012462:	d064      	beq.n	801252e <__ssvfiscanf_r+0x2de>
 8012464:	2802      	cmp	r0, #2
 8012466:	f47f af18 	bne.w	801229a <__ssvfiscanf_r+0x4a>
 801246a:	e7c9      	b.n	8012400 <__ssvfiscanf_r+0x1b0>
 801246c:	220a      	movs	r2, #10
 801246e:	e7d7      	b.n	8012420 <__ssvfiscanf_r+0x1d0>
 8012470:	4629      	mov	r1, r5
 8012472:	4640      	mov	r0, r8
 8012474:	f000 fa5a 	bl	801292c <__sccl>
 8012478:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801247a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801247e:	9341      	str	r3, [sp, #260]	@ 0x104
 8012480:	4605      	mov	r5, r0
 8012482:	2301      	movs	r3, #1
 8012484:	e7d7      	b.n	8012436 <__ssvfiscanf_r+0x1e6>
 8012486:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801248c:	9341      	str	r3, [sp, #260]	@ 0x104
 801248e:	2300      	movs	r3, #0
 8012490:	e7d1      	b.n	8012436 <__ssvfiscanf_r+0x1e6>
 8012492:	2302      	movs	r3, #2
 8012494:	e7cf      	b.n	8012436 <__ssvfiscanf_r+0x1e6>
 8012496:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8012498:	06c3      	lsls	r3, r0, #27
 801249a:	f53f aefe 	bmi.w	801229a <__ssvfiscanf_r+0x4a>
 801249e:	9b00      	ldr	r3, [sp, #0]
 80124a0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80124a2:	1d19      	adds	r1, r3, #4
 80124a4:	9100      	str	r1, [sp, #0]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	07c0      	lsls	r0, r0, #31
 80124aa:	bf4c      	ite	mi
 80124ac:	801a      	strhmi	r2, [r3, #0]
 80124ae:	601a      	strpl	r2, [r3, #0]
 80124b0:	e6f3      	b.n	801229a <__ssvfiscanf_r+0x4a>
 80124b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80124b4:	4621      	mov	r1, r4
 80124b6:	4630      	mov	r0, r6
 80124b8:	4798      	blx	r3
 80124ba:	2800      	cmp	r0, #0
 80124bc:	d0bf      	beq.n	801243e <__ssvfiscanf_r+0x1ee>
 80124be:	e79f      	b.n	8012400 <__ssvfiscanf_r+0x1b0>
 80124c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80124c2:	3201      	adds	r2, #1
 80124c4:	9245      	str	r2, [sp, #276]	@ 0x114
 80124c6:	6862      	ldr	r2, [r4, #4]
 80124c8:	3a01      	subs	r2, #1
 80124ca:	2a00      	cmp	r2, #0
 80124cc:	6062      	str	r2, [r4, #4]
 80124ce:	dd02      	ble.n	80124d6 <__ssvfiscanf_r+0x286>
 80124d0:	3301      	adds	r3, #1
 80124d2:	6023      	str	r3, [r4, #0]
 80124d4:	e7b6      	b.n	8012444 <__ssvfiscanf_r+0x1f4>
 80124d6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80124d8:	4621      	mov	r1, r4
 80124da:	4630      	mov	r0, r6
 80124dc:	4798      	blx	r3
 80124de:	2800      	cmp	r0, #0
 80124e0:	d0b0      	beq.n	8012444 <__ssvfiscanf_r+0x1f4>
 80124e2:	e78d      	b.n	8012400 <__ssvfiscanf_r+0x1b0>
 80124e4:	2b04      	cmp	r3, #4
 80124e6:	dc0f      	bgt.n	8012508 <__ssvfiscanf_r+0x2b8>
 80124e8:	466b      	mov	r3, sp
 80124ea:	4622      	mov	r2, r4
 80124ec:	a941      	add	r1, sp, #260	@ 0x104
 80124ee:	4630      	mov	r0, r6
 80124f0:	f000 f87c 	bl	80125ec <_scanf_i>
 80124f4:	e7b4      	b.n	8012460 <__ssvfiscanf_r+0x210>
 80124f6:	bf00      	nop
 80124f8:	080121a1 	.word	0x080121a1
 80124fc:	08012217 	.word	0x08012217
 8012500:	08013591 	.word	0x08013591
 8012504:	08013697 	.word	0x08013697
 8012508:	4b0a      	ldr	r3, [pc, #40]	@ (8012534 <__ssvfiscanf_r+0x2e4>)
 801250a:	2b00      	cmp	r3, #0
 801250c:	f43f aec5 	beq.w	801229a <__ssvfiscanf_r+0x4a>
 8012510:	466b      	mov	r3, sp
 8012512:	4622      	mov	r2, r4
 8012514:	a941      	add	r1, sp, #260	@ 0x104
 8012516:	4630      	mov	r0, r6
 8012518:	f7fd fa12 	bl	800f940 <_scanf_float>
 801251c:	e7a0      	b.n	8012460 <__ssvfiscanf_r+0x210>
 801251e:	89a3      	ldrh	r3, [r4, #12]
 8012520:	065b      	lsls	r3, r3, #25
 8012522:	f53f af71 	bmi.w	8012408 <__ssvfiscanf_r+0x1b8>
 8012526:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801252a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801252e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012530:	e7f9      	b.n	8012526 <__ssvfiscanf_r+0x2d6>
 8012532:	bf00      	nop
 8012534:	0800f941 	.word	0x0800f941

08012538 <_scanf_chars>:
 8012538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801253c:	4615      	mov	r5, r2
 801253e:	688a      	ldr	r2, [r1, #8]
 8012540:	4680      	mov	r8, r0
 8012542:	460c      	mov	r4, r1
 8012544:	b932      	cbnz	r2, 8012554 <_scanf_chars+0x1c>
 8012546:	698a      	ldr	r2, [r1, #24]
 8012548:	2a00      	cmp	r2, #0
 801254a:	bf14      	ite	ne
 801254c:	f04f 32ff 	movne.w	r2, #4294967295
 8012550:	2201      	moveq	r2, #1
 8012552:	608a      	str	r2, [r1, #8]
 8012554:	6822      	ldr	r2, [r4, #0]
 8012556:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80125e8 <_scanf_chars+0xb0>
 801255a:	06d1      	lsls	r1, r2, #27
 801255c:	bf5f      	itttt	pl
 801255e:	681a      	ldrpl	r2, [r3, #0]
 8012560:	1d11      	addpl	r1, r2, #4
 8012562:	6019      	strpl	r1, [r3, #0]
 8012564:	6816      	ldrpl	r6, [r2, #0]
 8012566:	2700      	movs	r7, #0
 8012568:	69a0      	ldr	r0, [r4, #24]
 801256a:	b188      	cbz	r0, 8012590 <_scanf_chars+0x58>
 801256c:	2801      	cmp	r0, #1
 801256e:	d107      	bne.n	8012580 <_scanf_chars+0x48>
 8012570:	682b      	ldr	r3, [r5, #0]
 8012572:	781a      	ldrb	r2, [r3, #0]
 8012574:	6963      	ldr	r3, [r4, #20]
 8012576:	5c9b      	ldrb	r3, [r3, r2]
 8012578:	b953      	cbnz	r3, 8012590 <_scanf_chars+0x58>
 801257a:	2f00      	cmp	r7, #0
 801257c:	d031      	beq.n	80125e2 <_scanf_chars+0xaa>
 801257e:	e022      	b.n	80125c6 <_scanf_chars+0x8e>
 8012580:	2802      	cmp	r0, #2
 8012582:	d120      	bne.n	80125c6 <_scanf_chars+0x8e>
 8012584:	682b      	ldr	r3, [r5, #0]
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	f819 3003 	ldrb.w	r3, [r9, r3]
 801258c:	071b      	lsls	r3, r3, #28
 801258e:	d41a      	bmi.n	80125c6 <_scanf_chars+0x8e>
 8012590:	6823      	ldr	r3, [r4, #0]
 8012592:	06da      	lsls	r2, r3, #27
 8012594:	bf5e      	ittt	pl
 8012596:	682b      	ldrpl	r3, [r5, #0]
 8012598:	781b      	ldrbpl	r3, [r3, #0]
 801259a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801259e:	682a      	ldr	r2, [r5, #0]
 80125a0:	686b      	ldr	r3, [r5, #4]
 80125a2:	3201      	adds	r2, #1
 80125a4:	602a      	str	r2, [r5, #0]
 80125a6:	68a2      	ldr	r2, [r4, #8]
 80125a8:	3b01      	subs	r3, #1
 80125aa:	3a01      	subs	r2, #1
 80125ac:	606b      	str	r3, [r5, #4]
 80125ae:	3701      	adds	r7, #1
 80125b0:	60a2      	str	r2, [r4, #8]
 80125b2:	b142      	cbz	r2, 80125c6 <_scanf_chars+0x8e>
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	dcd7      	bgt.n	8012568 <_scanf_chars+0x30>
 80125b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80125bc:	4629      	mov	r1, r5
 80125be:	4640      	mov	r0, r8
 80125c0:	4798      	blx	r3
 80125c2:	2800      	cmp	r0, #0
 80125c4:	d0d0      	beq.n	8012568 <_scanf_chars+0x30>
 80125c6:	6823      	ldr	r3, [r4, #0]
 80125c8:	f013 0310 	ands.w	r3, r3, #16
 80125cc:	d105      	bne.n	80125da <_scanf_chars+0xa2>
 80125ce:	68e2      	ldr	r2, [r4, #12]
 80125d0:	3201      	adds	r2, #1
 80125d2:	60e2      	str	r2, [r4, #12]
 80125d4:	69a2      	ldr	r2, [r4, #24]
 80125d6:	b102      	cbz	r2, 80125da <_scanf_chars+0xa2>
 80125d8:	7033      	strb	r3, [r6, #0]
 80125da:	6923      	ldr	r3, [r4, #16]
 80125dc:	443b      	add	r3, r7
 80125de:	6123      	str	r3, [r4, #16]
 80125e0:	2000      	movs	r0, #0
 80125e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125e6:	bf00      	nop
 80125e8:	08013591 	.word	0x08013591

080125ec <_scanf_i>:
 80125ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125f0:	4698      	mov	r8, r3
 80125f2:	4b74      	ldr	r3, [pc, #464]	@ (80127c4 <_scanf_i+0x1d8>)
 80125f4:	460c      	mov	r4, r1
 80125f6:	4682      	mov	sl, r0
 80125f8:	4616      	mov	r6, r2
 80125fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80125fe:	b087      	sub	sp, #28
 8012600:	ab03      	add	r3, sp, #12
 8012602:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012606:	4b70      	ldr	r3, [pc, #448]	@ (80127c8 <_scanf_i+0x1dc>)
 8012608:	69a1      	ldr	r1, [r4, #24]
 801260a:	4a70      	ldr	r2, [pc, #448]	@ (80127cc <_scanf_i+0x1e0>)
 801260c:	2903      	cmp	r1, #3
 801260e:	bf08      	it	eq
 8012610:	461a      	moveq	r2, r3
 8012612:	68a3      	ldr	r3, [r4, #8]
 8012614:	9201      	str	r2, [sp, #4]
 8012616:	1e5a      	subs	r2, r3, #1
 8012618:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801261c:	bf88      	it	hi
 801261e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012622:	4627      	mov	r7, r4
 8012624:	bf82      	ittt	hi
 8012626:	eb03 0905 	addhi.w	r9, r3, r5
 801262a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801262e:	60a3      	strhi	r3, [r4, #8]
 8012630:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012634:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012638:	bf98      	it	ls
 801263a:	f04f 0900 	movls.w	r9, #0
 801263e:	6023      	str	r3, [r4, #0]
 8012640:	463d      	mov	r5, r7
 8012642:	f04f 0b00 	mov.w	fp, #0
 8012646:	6831      	ldr	r1, [r6, #0]
 8012648:	ab03      	add	r3, sp, #12
 801264a:	7809      	ldrb	r1, [r1, #0]
 801264c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012650:	2202      	movs	r2, #2
 8012652:	f7ed fe5d 	bl	8000310 <memchr>
 8012656:	b328      	cbz	r0, 80126a4 <_scanf_i+0xb8>
 8012658:	f1bb 0f01 	cmp.w	fp, #1
 801265c:	d159      	bne.n	8012712 <_scanf_i+0x126>
 801265e:	6862      	ldr	r2, [r4, #4]
 8012660:	b92a      	cbnz	r2, 801266e <_scanf_i+0x82>
 8012662:	6822      	ldr	r2, [r4, #0]
 8012664:	2108      	movs	r1, #8
 8012666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801266a:	6061      	str	r1, [r4, #4]
 801266c:	6022      	str	r2, [r4, #0]
 801266e:	6822      	ldr	r2, [r4, #0]
 8012670:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012674:	6022      	str	r2, [r4, #0]
 8012676:	68a2      	ldr	r2, [r4, #8]
 8012678:	1e51      	subs	r1, r2, #1
 801267a:	60a1      	str	r1, [r4, #8]
 801267c:	b192      	cbz	r2, 80126a4 <_scanf_i+0xb8>
 801267e:	6832      	ldr	r2, [r6, #0]
 8012680:	1c51      	adds	r1, r2, #1
 8012682:	6031      	str	r1, [r6, #0]
 8012684:	7812      	ldrb	r2, [r2, #0]
 8012686:	f805 2b01 	strb.w	r2, [r5], #1
 801268a:	6872      	ldr	r2, [r6, #4]
 801268c:	3a01      	subs	r2, #1
 801268e:	2a00      	cmp	r2, #0
 8012690:	6072      	str	r2, [r6, #4]
 8012692:	dc07      	bgt.n	80126a4 <_scanf_i+0xb8>
 8012694:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012698:	4631      	mov	r1, r6
 801269a:	4650      	mov	r0, sl
 801269c:	4790      	blx	r2
 801269e:	2800      	cmp	r0, #0
 80126a0:	f040 8085 	bne.w	80127ae <_scanf_i+0x1c2>
 80126a4:	f10b 0b01 	add.w	fp, fp, #1
 80126a8:	f1bb 0f03 	cmp.w	fp, #3
 80126ac:	d1cb      	bne.n	8012646 <_scanf_i+0x5a>
 80126ae:	6863      	ldr	r3, [r4, #4]
 80126b0:	b90b      	cbnz	r3, 80126b6 <_scanf_i+0xca>
 80126b2:	230a      	movs	r3, #10
 80126b4:	6063      	str	r3, [r4, #4]
 80126b6:	6863      	ldr	r3, [r4, #4]
 80126b8:	4945      	ldr	r1, [pc, #276]	@ (80127d0 <_scanf_i+0x1e4>)
 80126ba:	6960      	ldr	r0, [r4, #20]
 80126bc:	1ac9      	subs	r1, r1, r3
 80126be:	f000 f935 	bl	801292c <__sccl>
 80126c2:	f04f 0b00 	mov.w	fp, #0
 80126c6:	68a3      	ldr	r3, [r4, #8]
 80126c8:	6822      	ldr	r2, [r4, #0]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d03d      	beq.n	801274a <_scanf_i+0x15e>
 80126ce:	6831      	ldr	r1, [r6, #0]
 80126d0:	6960      	ldr	r0, [r4, #20]
 80126d2:	f891 c000 	ldrb.w	ip, [r1]
 80126d6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80126da:	2800      	cmp	r0, #0
 80126dc:	d035      	beq.n	801274a <_scanf_i+0x15e>
 80126de:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80126e2:	d124      	bne.n	801272e <_scanf_i+0x142>
 80126e4:	0510      	lsls	r0, r2, #20
 80126e6:	d522      	bpl.n	801272e <_scanf_i+0x142>
 80126e8:	f10b 0b01 	add.w	fp, fp, #1
 80126ec:	f1b9 0f00 	cmp.w	r9, #0
 80126f0:	d003      	beq.n	80126fa <_scanf_i+0x10e>
 80126f2:	3301      	adds	r3, #1
 80126f4:	f109 39ff 	add.w	r9, r9, #4294967295
 80126f8:	60a3      	str	r3, [r4, #8]
 80126fa:	6873      	ldr	r3, [r6, #4]
 80126fc:	3b01      	subs	r3, #1
 80126fe:	2b00      	cmp	r3, #0
 8012700:	6073      	str	r3, [r6, #4]
 8012702:	dd1b      	ble.n	801273c <_scanf_i+0x150>
 8012704:	6833      	ldr	r3, [r6, #0]
 8012706:	3301      	adds	r3, #1
 8012708:	6033      	str	r3, [r6, #0]
 801270a:	68a3      	ldr	r3, [r4, #8]
 801270c:	3b01      	subs	r3, #1
 801270e:	60a3      	str	r3, [r4, #8]
 8012710:	e7d9      	b.n	80126c6 <_scanf_i+0xda>
 8012712:	f1bb 0f02 	cmp.w	fp, #2
 8012716:	d1ae      	bne.n	8012676 <_scanf_i+0x8a>
 8012718:	6822      	ldr	r2, [r4, #0]
 801271a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801271e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012722:	d1bf      	bne.n	80126a4 <_scanf_i+0xb8>
 8012724:	2110      	movs	r1, #16
 8012726:	6061      	str	r1, [r4, #4]
 8012728:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801272c:	e7a2      	b.n	8012674 <_scanf_i+0x88>
 801272e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012732:	6022      	str	r2, [r4, #0]
 8012734:	780b      	ldrb	r3, [r1, #0]
 8012736:	f805 3b01 	strb.w	r3, [r5], #1
 801273a:	e7de      	b.n	80126fa <_scanf_i+0x10e>
 801273c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012740:	4631      	mov	r1, r6
 8012742:	4650      	mov	r0, sl
 8012744:	4798      	blx	r3
 8012746:	2800      	cmp	r0, #0
 8012748:	d0df      	beq.n	801270a <_scanf_i+0x11e>
 801274a:	6823      	ldr	r3, [r4, #0]
 801274c:	05d9      	lsls	r1, r3, #23
 801274e:	d50d      	bpl.n	801276c <_scanf_i+0x180>
 8012750:	42bd      	cmp	r5, r7
 8012752:	d909      	bls.n	8012768 <_scanf_i+0x17c>
 8012754:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012758:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801275c:	4632      	mov	r2, r6
 801275e:	4650      	mov	r0, sl
 8012760:	4798      	blx	r3
 8012762:	f105 39ff 	add.w	r9, r5, #4294967295
 8012766:	464d      	mov	r5, r9
 8012768:	42bd      	cmp	r5, r7
 801276a:	d028      	beq.n	80127be <_scanf_i+0x1d2>
 801276c:	6822      	ldr	r2, [r4, #0]
 801276e:	f012 0210 	ands.w	r2, r2, #16
 8012772:	d113      	bne.n	801279c <_scanf_i+0x1b0>
 8012774:	702a      	strb	r2, [r5, #0]
 8012776:	6863      	ldr	r3, [r4, #4]
 8012778:	9e01      	ldr	r6, [sp, #4]
 801277a:	4639      	mov	r1, r7
 801277c:	4650      	mov	r0, sl
 801277e:	47b0      	blx	r6
 8012780:	f8d8 3000 	ldr.w	r3, [r8]
 8012784:	6821      	ldr	r1, [r4, #0]
 8012786:	1d1a      	adds	r2, r3, #4
 8012788:	f8c8 2000 	str.w	r2, [r8]
 801278c:	f011 0f20 	tst.w	r1, #32
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	d00f      	beq.n	80127b4 <_scanf_i+0x1c8>
 8012794:	6018      	str	r0, [r3, #0]
 8012796:	68e3      	ldr	r3, [r4, #12]
 8012798:	3301      	adds	r3, #1
 801279a:	60e3      	str	r3, [r4, #12]
 801279c:	6923      	ldr	r3, [r4, #16]
 801279e:	1bed      	subs	r5, r5, r7
 80127a0:	445d      	add	r5, fp
 80127a2:	442b      	add	r3, r5
 80127a4:	6123      	str	r3, [r4, #16]
 80127a6:	2000      	movs	r0, #0
 80127a8:	b007      	add	sp, #28
 80127aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127ae:	f04f 0b00 	mov.w	fp, #0
 80127b2:	e7ca      	b.n	801274a <_scanf_i+0x15e>
 80127b4:	07ca      	lsls	r2, r1, #31
 80127b6:	bf4c      	ite	mi
 80127b8:	8018      	strhmi	r0, [r3, #0]
 80127ba:	6018      	strpl	r0, [r3, #0]
 80127bc:	e7eb      	b.n	8012796 <_scanf_i+0x1aa>
 80127be:	2001      	movs	r0, #1
 80127c0:	e7f2      	b.n	80127a8 <_scanf_i+0x1bc>
 80127c2:	bf00      	nop
 80127c4:	0801325c 	.word	0x0801325c
 80127c8:	08011ed5 	.word	0x08011ed5
 80127cc:	08012be5 	.word	0x08012be5
 80127d0:	080136b2 	.word	0x080136b2

080127d4 <__sflush_r>:
 80127d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80127d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127dc:	0716      	lsls	r6, r2, #28
 80127de:	4605      	mov	r5, r0
 80127e0:	460c      	mov	r4, r1
 80127e2:	d454      	bmi.n	801288e <__sflush_r+0xba>
 80127e4:	684b      	ldr	r3, [r1, #4]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	dc02      	bgt.n	80127f0 <__sflush_r+0x1c>
 80127ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	dd48      	ble.n	8012882 <__sflush_r+0xae>
 80127f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80127f2:	2e00      	cmp	r6, #0
 80127f4:	d045      	beq.n	8012882 <__sflush_r+0xae>
 80127f6:	2300      	movs	r3, #0
 80127f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80127fc:	682f      	ldr	r7, [r5, #0]
 80127fe:	6a21      	ldr	r1, [r4, #32]
 8012800:	602b      	str	r3, [r5, #0]
 8012802:	d030      	beq.n	8012866 <__sflush_r+0x92>
 8012804:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012806:	89a3      	ldrh	r3, [r4, #12]
 8012808:	0759      	lsls	r1, r3, #29
 801280a:	d505      	bpl.n	8012818 <__sflush_r+0x44>
 801280c:	6863      	ldr	r3, [r4, #4]
 801280e:	1ad2      	subs	r2, r2, r3
 8012810:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012812:	b10b      	cbz	r3, 8012818 <__sflush_r+0x44>
 8012814:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012816:	1ad2      	subs	r2, r2, r3
 8012818:	2300      	movs	r3, #0
 801281a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801281c:	6a21      	ldr	r1, [r4, #32]
 801281e:	4628      	mov	r0, r5
 8012820:	47b0      	blx	r6
 8012822:	1c43      	adds	r3, r0, #1
 8012824:	89a3      	ldrh	r3, [r4, #12]
 8012826:	d106      	bne.n	8012836 <__sflush_r+0x62>
 8012828:	6829      	ldr	r1, [r5, #0]
 801282a:	291d      	cmp	r1, #29
 801282c:	d82b      	bhi.n	8012886 <__sflush_r+0xb2>
 801282e:	4a2a      	ldr	r2, [pc, #168]	@ (80128d8 <__sflush_r+0x104>)
 8012830:	410a      	asrs	r2, r1
 8012832:	07d6      	lsls	r6, r2, #31
 8012834:	d427      	bmi.n	8012886 <__sflush_r+0xb2>
 8012836:	2200      	movs	r2, #0
 8012838:	6062      	str	r2, [r4, #4]
 801283a:	04d9      	lsls	r1, r3, #19
 801283c:	6922      	ldr	r2, [r4, #16]
 801283e:	6022      	str	r2, [r4, #0]
 8012840:	d504      	bpl.n	801284c <__sflush_r+0x78>
 8012842:	1c42      	adds	r2, r0, #1
 8012844:	d101      	bne.n	801284a <__sflush_r+0x76>
 8012846:	682b      	ldr	r3, [r5, #0]
 8012848:	b903      	cbnz	r3, 801284c <__sflush_r+0x78>
 801284a:	6560      	str	r0, [r4, #84]	@ 0x54
 801284c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801284e:	602f      	str	r7, [r5, #0]
 8012850:	b1b9      	cbz	r1, 8012882 <__sflush_r+0xae>
 8012852:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012856:	4299      	cmp	r1, r3
 8012858:	d002      	beq.n	8012860 <__sflush_r+0x8c>
 801285a:	4628      	mov	r0, r5
 801285c:	f7fe fa7a 	bl	8010d54 <_free_r>
 8012860:	2300      	movs	r3, #0
 8012862:	6363      	str	r3, [r4, #52]	@ 0x34
 8012864:	e00d      	b.n	8012882 <__sflush_r+0xae>
 8012866:	2301      	movs	r3, #1
 8012868:	4628      	mov	r0, r5
 801286a:	47b0      	blx	r6
 801286c:	4602      	mov	r2, r0
 801286e:	1c50      	adds	r0, r2, #1
 8012870:	d1c9      	bne.n	8012806 <__sflush_r+0x32>
 8012872:	682b      	ldr	r3, [r5, #0]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d0c6      	beq.n	8012806 <__sflush_r+0x32>
 8012878:	2b1d      	cmp	r3, #29
 801287a:	d001      	beq.n	8012880 <__sflush_r+0xac>
 801287c:	2b16      	cmp	r3, #22
 801287e:	d11e      	bne.n	80128be <__sflush_r+0xea>
 8012880:	602f      	str	r7, [r5, #0]
 8012882:	2000      	movs	r0, #0
 8012884:	e022      	b.n	80128cc <__sflush_r+0xf8>
 8012886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801288a:	b21b      	sxth	r3, r3
 801288c:	e01b      	b.n	80128c6 <__sflush_r+0xf2>
 801288e:	690f      	ldr	r7, [r1, #16]
 8012890:	2f00      	cmp	r7, #0
 8012892:	d0f6      	beq.n	8012882 <__sflush_r+0xae>
 8012894:	0793      	lsls	r3, r2, #30
 8012896:	680e      	ldr	r6, [r1, #0]
 8012898:	bf08      	it	eq
 801289a:	694b      	ldreq	r3, [r1, #20]
 801289c:	600f      	str	r7, [r1, #0]
 801289e:	bf18      	it	ne
 80128a0:	2300      	movne	r3, #0
 80128a2:	eba6 0807 	sub.w	r8, r6, r7
 80128a6:	608b      	str	r3, [r1, #8]
 80128a8:	f1b8 0f00 	cmp.w	r8, #0
 80128ac:	dde9      	ble.n	8012882 <__sflush_r+0xae>
 80128ae:	6a21      	ldr	r1, [r4, #32]
 80128b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80128b2:	4643      	mov	r3, r8
 80128b4:	463a      	mov	r2, r7
 80128b6:	4628      	mov	r0, r5
 80128b8:	47b0      	blx	r6
 80128ba:	2800      	cmp	r0, #0
 80128bc:	dc08      	bgt.n	80128d0 <__sflush_r+0xfc>
 80128be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128c6:	81a3      	strh	r3, [r4, #12]
 80128c8:	f04f 30ff 	mov.w	r0, #4294967295
 80128cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128d0:	4407      	add	r7, r0
 80128d2:	eba8 0800 	sub.w	r8, r8, r0
 80128d6:	e7e7      	b.n	80128a8 <__sflush_r+0xd4>
 80128d8:	dfbffffe 	.word	0xdfbffffe

080128dc <_fflush_r>:
 80128dc:	b538      	push	{r3, r4, r5, lr}
 80128de:	690b      	ldr	r3, [r1, #16]
 80128e0:	4605      	mov	r5, r0
 80128e2:	460c      	mov	r4, r1
 80128e4:	b913      	cbnz	r3, 80128ec <_fflush_r+0x10>
 80128e6:	2500      	movs	r5, #0
 80128e8:	4628      	mov	r0, r5
 80128ea:	bd38      	pop	{r3, r4, r5, pc}
 80128ec:	b118      	cbz	r0, 80128f6 <_fflush_r+0x1a>
 80128ee:	6a03      	ldr	r3, [r0, #32]
 80128f0:	b90b      	cbnz	r3, 80128f6 <_fflush_r+0x1a>
 80128f2:	f7fd fabd 	bl	800fe70 <__sinit>
 80128f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d0f3      	beq.n	80128e6 <_fflush_r+0xa>
 80128fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012900:	07d0      	lsls	r0, r2, #31
 8012902:	d404      	bmi.n	801290e <_fflush_r+0x32>
 8012904:	0599      	lsls	r1, r3, #22
 8012906:	d402      	bmi.n	801290e <_fflush_r+0x32>
 8012908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801290a:	f7fd fc22 	bl	8010152 <__retarget_lock_acquire_recursive>
 801290e:	4628      	mov	r0, r5
 8012910:	4621      	mov	r1, r4
 8012912:	f7ff ff5f 	bl	80127d4 <__sflush_r>
 8012916:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012918:	07da      	lsls	r2, r3, #31
 801291a:	4605      	mov	r5, r0
 801291c:	d4e4      	bmi.n	80128e8 <_fflush_r+0xc>
 801291e:	89a3      	ldrh	r3, [r4, #12]
 8012920:	059b      	lsls	r3, r3, #22
 8012922:	d4e1      	bmi.n	80128e8 <_fflush_r+0xc>
 8012924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012926:	f7fd fc15 	bl	8010154 <__retarget_lock_release_recursive>
 801292a:	e7dd      	b.n	80128e8 <_fflush_r+0xc>

0801292c <__sccl>:
 801292c:	b570      	push	{r4, r5, r6, lr}
 801292e:	780b      	ldrb	r3, [r1, #0]
 8012930:	4604      	mov	r4, r0
 8012932:	2b5e      	cmp	r3, #94	@ 0x5e
 8012934:	bf0b      	itete	eq
 8012936:	784b      	ldrbeq	r3, [r1, #1]
 8012938:	1c4a      	addne	r2, r1, #1
 801293a:	1c8a      	addeq	r2, r1, #2
 801293c:	2100      	movne	r1, #0
 801293e:	bf08      	it	eq
 8012940:	2101      	moveq	r1, #1
 8012942:	3801      	subs	r0, #1
 8012944:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012948:	f800 1f01 	strb.w	r1, [r0, #1]!
 801294c:	42a8      	cmp	r0, r5
 801294e:	d1fb      	bne.n	8012948 <__sccl+0x1c>
 8012950:	b90b      	cbnz	r3, 8012956 <__sccl+0x2a>
 8012952:	1e50      	subs	r0, r2, #1
 8012954:	bd70      	pop	{r4, r5, r6, pc}
 8012956:	f081 0101 	eor.w	r1, r1, #1
 801295a:	54e1      	strb	r1, [r4, r3]
 801295c:	4610      	mov	r0, r2
 801295e:	4602      	mov	r2, r0
 8012960:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012964:	2d2d      	cmp	r5, #45	@ 0x2d
 8012966:	d005      	beq.n	8012974 <__sccl+0x48>
 8012968:	2d5d      	cmp	r5, #93	@ 0x5d
 801296a:	d016      	beq.n	801299a <__sccl+0x6e>
 801296c:	2d00      	cmp	r5, #0
 801296e:	d0f1      	beq.n	8012954 <__sccl+0x28>
 8012970:	462b      	mov	r3, r5
 8012972:	e7f2      	b.n	801295a <__sccl+0x2e>
 8012974:	7846      	ldrb	r6, [r0, #1]
 8012976:	2e5d      	cmp	r6, #93	@ 0x5d
 8012978:	d0fa      	beq.n	8012970 <__sccl+0x44>
 801297a:	42b3      	cmp	r3, r6
 801297c:	dcf8      	bgt.n	8012970 <__sccl+0x44>
 801297e:	3002      	adds	r0, #2
 8012980:	461a      	mov	r2, r3
 8012982:	3201      	adds	r2, #1
 8012984:	4296      	cmp	r6, r2
 8012986:	54a1      	strb	r1, [r4, r2]
 8012988:	dcfb      	bgt.n	8012982 <__sccl+0x56>
 801298a:	1af2      	subs	r2, r6, r3
 801298c:	3a01      	subs	r2, #1
 801298e:	1c5d      	adds	r5, r3, #1
 8012990:	42b3      	cmp	r3, r6
 8012992:	bfa8      	it	ge
 8012994:	2200      	movge	r2, #0
 8012996:	18ab      	adds	r3, r5, r2
 8012998:	e7e1      	b.n	801295e <__sccl+0x32>
 801299a:	4610      	mov	r0, r2
 801299c:	e7da      	b.n	8012954 <__sccl+0x28>

0801299e <__submore>:
 801299e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129a2:	460c      	mov	r4, r1
 80129a4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80129a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80129aa:	4299      	cmp	r1, r3
 80129ac:	d11d      	bne.n	80129ea <__submore+0x4c>
 80129ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80129b2:	f7fb fd49 	bl	800e448 <_malloc_r>
 80129b6:	b918      	cbnz	r0, 80129c0 <__submore+0x22>
 80129b8:	f04f 30ff 	mov.w	r0, #4294967295
 80129bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80129c4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80129c6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80129ca:	6360      	str	r0, [r4, #52]	@ 0x34
 80129cc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80129d0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80129d4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80129d8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80129dc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80129e0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80129e4:	6020      	str	r0, [r4, #0]
 80129e6:	2000      	movs	r0, #0
 80129e8:	e7e8      	b.n	80129bc <__submore+0x1e>
 80129ea:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80129ec:	0077      	lsls	r7, r6, #1
 80129ee:	463a      	mov	r2, r7
 80129f0:	f000 f85c 	bl	8012aac <_realloc_r>
 80129f4:	4605      	mov	r5, r0
 80129f6:	2800      	cmp	r0, #0
 80129f8:	d0de      	beq.n	80129b8 <__submore+0x1a>
 80129fa:	eb00 0806 	add.w	r8, r0, r6
 80129fe:	4601      	mov	r1, r0
 8012a00:	4632      	mov	r2, r6
 8012a02:	4640      	mov	r0, r8
 8012a04:	f7fd fba7 	bl	8010156 <memcpy>
 8012a08:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012a0c:	f8c4 8000 	str.w	r8, [r4]
 8012a10:	e7e9      	b.n	80129e6 <__submore+0x48>

08012a12 <memmove>:
 8012a12:	4288      	cmp	r0, r1
 8012a14:	b510      	push	{r4, lr}
 8012a16:	eb01 0402 	add.w	r4, r1, r2
 8012a1a:	d902      	bls.n	8012a22 <memmove+0x10>
 8012a1c:	4284      	cmp	r4, r0
 8012a1e:	4623      	mov	r3, r4
 8012a20:	d807      	bhi.n	8012a32 <memmove+0x20>
 8012a22:	1e43      	subs	r3, r0, #1
 8012a24:	42a1      	cmp	r1, r4
 8012a26:	d008      	beq.n	8012a3a <memmove+0x28>
 8012a28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a30:	e7f8      	b.n	8012a24 <memmove+0x12>
 8012a32:	4402      	add	r2, r0
 8012a34:	4601      	mov	r1, r0
 8012a36:	428a      	cmp	r2, r1
 8012a38:	d100      	bne.n	8012a3c <memmove+0x2a>
 8012a3a:	bd10      	pop	{r4, pc}
 8012a3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a40:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a44:	e7f7      	b.n	8012a36 <memmove+0x24>
	...

08012a48 <__assert_func>:
 8012a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a4a:	4614      	mov	r4, r2
 8012a4c:	461a      	mov	r2, r3
 8012a4e:	4b09      	ldr	r3, [pc, #36]	@ (8012a74 <__assert_func+0x2c>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	4605      	mov	r5, r0
 8012a54:	68d8      	ldr	r0, [r3, #12]
 8012a56:	b954      	cbnz	r4, 8012a6e <__assert_func+0x26>
 8012a58:	4b07      	ldr	r3, [pc, #28]	@ (8012a78 <__assert_func+0x30>)
 8012a5a:	461c      	mov	r4, r3
 8012a5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012a60:	9100      	str	r1, [sp, #0]
 8012a62:	462b      	mov	r3, r5
 8012a64:	4905      	ldr	r1, [pc, #20]	@ (8012a7c <__assert_func+0x34>)
 8012a66:	f000 f8bf 	bl	8012be8 <fiprintf>
 8012a6a:	f000 f8cf 	bl	8012c0c <abort>
 8012a6e:	4b04      	ldr	r3, [pc, #16]	@ (8012a80 <__assert_func+0x38>)
 8012a70:	e7f4      	b.n	8012a5c <__assert_func+0x14>
 8012a72:	bf00      	nop
 8012a74:	240001c4 	.word	0x240001c4
 8012a78:	080136f8 	.word	0x080136f8
 8012a7c:	080136ca 	.word	0x080136ca
 8012a80:	080136bd 	.word	0x080136bd

08012a84 <_calloc_r>:
 8012a84:	b570      	push	{r4, r5, r6, lr}
 8012a86:	fba1 5402 	umull	r5, r4, r1, r2
 8012a8a:	b93c      	cbnz	r4, 8012a9c <_calloc_r+0x18>
 8012a8c:	4629      	mov	r1, r5
 8012a8e:	f7fb fcdb 	bl	800e448 <_malloc_r>
 8012a92:	4606      	mov	r6, r0
 8012a94:	b928      	cbnz	r0, 8012aa2 <_calloc_r+0x1e>
 8012a96:	2600      	movs	r6, #0
 8012a98:	4630      	mov	r0, r6
 8012a9a:	bd70      	pop	{r4, r5, r6, pc}
 8012a9c:	220c      	movs	r2, #12
 8012a9e:	6002      	str	r2, [r0, #0]
 8012aa0:	e7f9      	b.n	8012a96 <_calloc_r+0x12>
 8012aa2:	462a      	mov	r2, r5
 8012aa4:	4621      	mov	r1, r4
 8012aa6:	f7fd faa8 	bl	800fffa <memset>
 8012aaa:	e7f5      	b.n	8012a98 <_calloc_r+0x14>

08012aac <_realloc_r>:
 8012aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab0:	4680      	mov	r8, r0
 8012ab2:	4615      	mov	r5, r2
 8012ab4:	460c      	mov	r4, r1
 8012ab6:	b921      	cbnz	r1, 8012ac2 <_realloc_r+0x16>
 8012ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012abc:	4611      	mov	r1, r2
 8012abe:	f7fb bcc3 	b.w	800e448 <_malloc_r>
 8012ac2:	b92a      	cbnz	r2, 8012ad0 <_realloc_r+0x24>
 8012ac4:	f7fe f946 	bl	8010d54 <_free_r>
 8012ac8:	2400      	movs	r4, #0
 8012aca:	4620      	mov	r0, r4
 8012acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad0:	f000 f8a3 	bl	8012c1a <_malloc_usable_size_r>
 8012ad4:	4285      	cmp	r5, r0
 8012ad6:	4606      	mov	r6, r0
 8012ad8:	d802      	bhi.n	8012ae0 <_realloc_r+0x34>
 8012ada:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012ade:	d8f4      	bhi.n	8012aca <_realloc_r+0x1e>
 8012ae0:	4629      	mov	r1, r5
 8012ae2:	4640      	mov	r0, r8
 8012ae4:	f7fb fcb0 	bl	800e448 <_malloc_r>
 8012ae8:	4607      	mov	r7, r0
 8012aea:	2800      	cmp	r0, #0
 8012aec:	d0ec      	beq.n	8012ac8 <_realloc_r+0x1c>
 8012aee:	42b5      	cmp	r5, r6
 8012af0:	462a      	mov	r2, r5
 8012af2:	4621      	mov	r1, r4
 8012af4:	bf28      	it	cs
 8012af6:	4632      	movcs	r2, r6
 8012af8:	f7fd fb2d 	bl	8010156 <memcpy>
 8012afc:	4621      	mov	r1, r4
 8012afe:	4640      	mov	r0, r8
 8012b00:	f7fe f928 	bl	8010d54 <_free_r>
 8012b04:	463c      	mov	r4, r7
 8012b06:	e7e0      	b.n	8012aca <_realloc_r+0x1e>

08012b08 <_strtoul_l.constprop.0>:
 8012b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b0c:	4e34      	ldr	r6, [pc, #208]	@ (8012be0 <_strtoul_l.constprop.0+0xd8>)
 8012b0e:	4686      	mov	lr, r0
 8012b10:	460d      	mov	r5, r1
 8012b12:	4628      	mov	r0, r5
 8012b14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b18:	5d37      	ldrb	r7, [r6, r4]
 8012b1a:	f017 0708 	ands.w	r7, r7, #8
 8012b1e:	d1f8      	bne.n	8012b12 <_strtoul_l.constprop.0+0xa>
 8012b20:	2c2d      	cmp	r4, #45	@ 0x2d
 8012b22:	d12f      	bne.n	8012b84 <_strtoul_l.constprop.0+0x7c>
 8012b24:	782c      	ldrb	r4, [r5, #0]
 8012b26:	2701      	movs	r7, #1
 8012b28:	1c85      	adds	r5, r0, #2
 8012b2a:	f033 0010 	bics.w	r0, r3, #16
 8012b2e:	d109      	bne.n	8012b44 <_strtoul_l.constprop.0+0x3c>
 8012b30:	2c30      	cmp	r4, #48	@ 0x30
 8012b32:	d12c      	bne.n	8012b8e <_strtoul_l.constprop.0+0x86>
 8012b34:	7828      	ldrb	r0, [r5, #0]
 8012b36:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012b3a:	2858      	cmp	r0, #88	@ 0x58
 8012b3c:	d127      	bne.n	8012b8e <_strtoul_l.constprop.0+0x86>
 8012b3e:	786c      	ldrb	r4, [r5, #1]
 8012b40:	2310      	movs	r3, #16
 8012b42:	3502      	adds	r5, #2
 8012b44:	f04f 38ff 	mov.w	r8, #4294967295
 8012b48:	2600      	movs	r6, #0
 8012b4a:	fbb8 f8f3 	udiv	r8, r8, r3
 8012b4e:	fb03 f908 	mul.w	r9, r3, r8
 8012b52:	ea6f 0909 	mvn.w	r9, r9
 8012b56:	4630      	mov	r0, r6
 8012b58:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012b5c:	f1bc 0f09 	cmp.w	ip, #9
 8012b60:	d81c      	bhi.n	8012b9c <_strtoul_l.constprop.0+0x94>
 8012b62:	4664      	mov	r4, ip
 8012b64:	42a3      	cmp	r3, r4
 8012b66:	dd2a      	ble.n	8012bbe <_strtoul_l.constprop.0+0xb6>
 8012b68:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012b6c:	d007      	beq.n	8012b7e <_strtoul_l.constprop.0+0x76>
 8012b6e:	4580      	cmp	r8, r0
 8012b70:	d322      	bcc.n	8012bb8 <_strtoul_l.constprop.0+0xb0>
 8012b72:	d101      	bne.n	8012b78 <_strtoul_l.constprop.0+0x70>
 8012b74:	45a1      	cmp	r9, r4
 8012b76:	db1f      	blt.n	8012bb8 <_strtoul_l.constprop.0+0xb0>
 8012b78:	fb00 4003 	mla	r0, r0, r3, r4
 8012b7c:	2601      	movs	r6, #1
 8012b7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b82:	e7e9      	b.n	8012b58 <_strtoul_l.constprop.0+0x50>
 8012b84:	2c2b      	cmp	r4, #43	@ 0x2b
 8012b86:	bf04      	itt	eq
 8012b88:	782c      	ldrbeq	r4, [r5, #0]
 8012b8a:	1c85      	addeq	r5, r0, #2
 8012b8c:	e7cd      	b.n	8012b2a <_strtoul_l.constprop.0+0x22>
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d1d8      	bne.n	8012b44 <_strtoul_l.constprop.0+0x3c>
 8012b92:	2c30      	cmp	r4, #48	@ 0x30
 8012b94:	bf0c      	ite	eq
 8012b96:	2308      	moveq	r3, #8
 8012b98:	230a      	movne	r3, #10
 8012b9a:	e7d3      	b.n	8012b44 <_strtoul_l.constprop.0+0x3c>
 8012b9c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012ba0:	f1bc 0f19 	cmp.w	ip, #25
 8012ba4:	d801      	bhi.n	8012baa <_strtoul_l.constprop.0+0xa2>
 8012ba6:	3c37      	subs	r4, #55	@ 0x37
 8012ba8:	e7dc      	b.n	8012b64 <_strtoul_l.constprop.0+0x5c>
 8012baa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012bae:	f1bc 0f19 	cmp.w	ip, #25
 8012bb2:	d804      	bhi.n	8012bbe <_strtoul_l.constprop.0+0xb6>
 8012bb4:	3c57      	subs	r4, #87	@ 0x57
 8012bb6:	e7d5      	b.n	8012b64 <_strtoul_l.constprop.0+0x5c>
 8012bb8:	f04f 36ff 	mov.w	r6, #4294967295
 8012bbc:	e7df      	b.n	8012b7e <_strtoul_l.constprop.0+0x76>
 8012bbe:	1c73      	adds	r3, r6, #1
 8012bc0:	d106      	bne.n	8012bd0 <_strtoul_l.constprop.0+0xc8>
 8012bc2:	2322      	movs	r3, #34	@ 0x22
 8012bc4:	f8ce 3000 	str.w	r3, [lr]
 8012bc8:	4630      	mov	r0, r6
 8012bca:	b932      	cbnz	r2, 8012bda <_strtoul_l.constprop.0+0xd2>
 8012bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bd0:	b107      	cbz	r7, 8012bd4 <_strtoul_l.constprop.0+0xcc>
 8012bd2:	4240      	negs	r0, r0
 8012bd4:	2a00      	cmp	r2, #0
 8012bd6:	d0f9      	beq.n	8012bcc <_strtoul_l.constprop.0+0xc4>
 8012bd8:	b106      	cbz	r6, 8012bdc <_strtoul_l.constprop.0+0xd4>
 8012bda:	1e69      	subs	r1, r5, #1
 8012bdc:	6011      	str	r1, [r2, #0]
 8012bde:	e7f5      	b.n	8012bcc <_strtoul_l.constprop.0+0xc4>
 8012be0:	08013591 	.word	0x08013591

08012be4 <_strtoul_r>:
 8012be4:	f7ff bf90 	b.w	8012b08 <_strtoul_l.constprop.0>

08012be8 <fiprintf>:
 8012be8:	b40e      	push	{r1, r2, r3}
 8012bea:	b503      	push	{r0, r1, lr}
 8012bec:	4601      	mov	r1, r0
 8012bee:	ab03      	add	r3, sp, #12
 8012bf0:	4805      	ldr	r0, [pc, #20]	@ (8012c08 <fiprintf+0x20>)
 8012bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bf6:	6800      	ldr	r0, [r0, #0]
 8012bf8:	9301      	str	r3, [sp, #4]
 8012bfa:	f000 f83f 	bl	8012c7c <_vfiprintf_r>
 8012bfe:	b002      	add	sp, #8
 8012c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c04:	b003      	add	sp, #12
 8012c06:	4770      	bx	lr
 8012c08:	240001c4 	.word	0x240001c4

08012c0c <abort>:
 8012c0c:	b508      	push	{r3, lr}
 8012c0e:	2006      	movs	r0, #6
 8012c10:	f000 fa08 	bl	8013024 <raise>
 8012c14:	2001      	movs	r0, #1
 8012c16:	f7ee fe65 	bl	80018e4 <_exit>

08012c1a <_malloc_usable_size_r>:
 8012c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c1e:	1f18      	subs	r0, r3, #4
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	bfbc      	itt	lt
 8012c24:	580b      	ldrlt	r3, [r1, r0]
 8012c26:	18c0      	addlt	r0, r0, r3
 8012c28:	4770      	bx	lr

08012c2a <__sfputc_r>:
 8012c2a:	6893      	ldr	r3, [r2, #8]
 8012c2c:	3b01      	subs	r3, #1
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	b410      	push	{r4}
 8012c32:	6093      	str	r3, [r2, #8]
 8012c34:	da08      	bge.n	8012c48 <__sfputc_r+0x1e>
 8012c36:	6994      	ldr	r4, [r2, #24]
 8012c38:	42a3      	cmp	r3, r4
 8012c3a:	db01      	blt.n	8012c40 <__sfputc_r+0x16>
 8012c3c:	290a      	cmp	r1, #10
 8012c3e:	d103      	bne.n	8012c48 <__sfputc_r+0x1e>
 8012c40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c44:	f000 b932 	b.w	8012eac <__swbuf_r>
 8012c48:	6813      	ldr	r3, [r2, #0]
 8012c4a:	1c58      	adds	r0, r3, #1
 8012c4c:	6010      	str	r0, [r2, #0]
 8012c4e:	7019      	strb	r1, [r3, #0]
 8012c50:	4608      	mov	r0, r1
 8012c52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c56:	4770      	bx	lr

08012c58 <__sfputs_r>:
 8012c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c5a:	4606      	mov	r6, r0
 8012c5c:	460f      	mov	r7, r1
 8012c5e:	4614      	mov	r4, r2
 8012c60:	18d5      	adds	r5, r2, r3
 8012c62:	42ac      	cmp	r4, r5
 8012c64:	d101      	bne.n	8012c6a <__sfputs_r+0x12>
 8012c66:	2000      	movs	r0, #0
 8012c68:	e007      	b.n	8012c7a <__sfputs_r+0x22>
 8012c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c6e:	463a      	mov	r2, r7
 8012c70:	4630      	mov	r0, r6
 8012c72:	f7ff ffda 	bl	8012c2a <__sfputc_r>
 8012c76:	1c43      	adds	r3, r0, #1
 8012c78:	d1f3      	bne.n	8012c62 <__sfputs_r+0xa>
 8012c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012c7c <_vfiprintf_r>:
 8012c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c80:	460d      	mov	r5, r1
 8012c82:	b09d      	sub	sp, #116	@ 0x74
 8012c84:	4614      	mov	r4, r2
 8012c86:	4698      	mov	r8, r3
 8012c88:	4606      	mov	r6, r0
 8012c8a:	b118      	cbz	r0, 8012c94 <_vfiprintf_r+0x18>
 8012c8c:	6a03      	ldr	r3, [r0, #32]
 8012c8e:	b90b      	cbnz	r3, 8012c94 <_vfiprintf_r+0x18>
 8012c90:	f7fd f8ee 	bl	800fe70 <__sinit>
 8012c94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012c96:	07d9      	lsls	r1, r3, #31
 8012c98:	d405      	bmi.n	8012ca6 <_vfiprintf_r+0x2a>
 8012c9a:	89ab      	ldrh	r3, [r5, #12]
 8012c9c:	059a      	lsls	r2, r3, #22
 8012c9e:	d402      	bmi.n	8012ca6 <_vfiprintf_r+0x2a>
 8012ca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ca2:	f7fd fa56 	bl	8010152 <__retarget_lock_acquire_recursive>
 8012ca6:	89ab      	ldrh	r3, [r5, #12]
 8012ca8:	071b      	lsls	r3, r3, #28
 8012caa:	d501      	bpl.n	8012cb0 <_vfiprintf_r+0x34>
 8012cac:	692b      	ldr	r3, [r5, #16]
 8012cae:	b99b      	cbnz	r3, 8012cd8 <_vfiprintf_r+0x5c>
 8012cb0:	4629      	mov	r1, r5
 8012cb2:	4630      	mov	r0, r6
 8012cb4:	f000 f938 	bl	8012f28 <__swsetup_r>
 8012cb8:	b170      	cbz	r0, 8012cd8 <_vfiprintf_r+0x5c>
 8012cba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012cbc:	07dc      	lsls	r4, r3, #31
 8012cbe:	d504      	bpl.n	8012cca <_vfiprintf_r+0x4e>
 8012cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8012cc4:	b01d      	add	sp, #116	@ 0x74
 8012cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cca:	89ab      	ldrh	r3, [r5, #12]
 8012ccc:	0598      	lsls	r0, r3, #22
 8012cce:	d4f7      	bmi.n	8012cc0 <_vfiprintf_r+0x44>
 8012cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012cd2:	f7fd fa3f 	bl	8010154 <__retarget_lock_release_recursive>
 8012cd6:	e7f3      	b.n	8012cc0 <_vfiprintf_r+0x44>
 8012cd8:	2300      	movs	r3, #0
 8012cda:	9309      	str	r3, [sp, #36]	@ 0x24
 8012cdc:	2320      	movs	r3, #32
 8012cde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012ce2:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ce6:	2330      	movs	r3, #48	@ 0x30
 8012ce8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012e98 <_vfiprintf_r+0x21c>
 8012cec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012cf0:	f04f 0901 	mov.w	r9, #1
 8012cf4:	4623      	mov	r3, r4
 8012cf6:	469a      	mov	sl, r3
 8012cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cfc:	b10a      	cbz	r2, 8012d02 <_vfiprintf_r+0x86>
 8012cfe:	2a25      	cmp	r2, #37	@ 0x25
 8012d00:	d1f9      	bne.n	8012cf6 <_vfiprintf_r+0x7a>
 8012d02:	ebba 0b04 	subs.w	fp, sl, r4
 8012d06:	d00b      	beq.n	8012d20 <_vfiprintf_r+0xa4>
 8012d08:	465b      	mov	r3, fp
 8012d0a:	4622      	mov	r2, r4
 8012d0c:	4629      	mov	r1, r5
 8012d0e:	4630      	mov	r0, r6
 8012d10:	f7ff ffa2 	bl	8012c58 <__sfputs_r>
 8012d14:	3001      	adds	r0, #1
 8012d16:	f000 80a7 	beq.w	8012e68 <_vfiprintf_r+0x1ec>
 8012d1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d1c:	445a      	add	r2, fp
 8012d1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d20:	f89a 3000 	ldrb.w	r3, [sl]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	f000 809f 	beq.w	8012e68 <_vfiprintf_r+0x1ec>
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8012d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d34:	f10a 0a01 	add.w	sl, sl, #1
 8012d38:	9304      	str	r3, [sp, #16]
 8012d3a:	9307      	str	r3, [sp, #28]
 8012d3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012d40:	931a      	str	r3, [sp, #104]	@ 0x68
 8012d42:	4654      	mov	r4, sl
 8012d44:	2205      	movs	r2, #5
 8012d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d4a:	4853      	ldr	r0, [pc, #332]	@ (8012e98 <_vfiprintf_r+0x21c>)
 8012d4c:	f7ed fae0 	bl	8000310 <memchr>
 8012d50:	9a04      	ldr	r2, [sp, #16]
 8012d52:	b9d8      	cbnz	r0, 8012d8c <_vfiprintf_r+0x110>
 8012d54:	06d1      	lsls	r1, r2, #27
 8012d56:	bf44      	itt	mi
 8012d58:	2320      	movmi	r3, #32
 8012d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d5e:	0713      	lsls	r3, r2, #28
 8012d60:	bf44      	itt	mi
 8012d62:	232b      	movmi	r3, #43	@ 0x2b
 8012d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d68:	f89a 3000 	ldrb.w	r3, [sl]
 8012d6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d6e:	d015      	beq.n	8012d9c <_vfiprintf_r+0x120>
 8012d70:	9a07      	ldr	r2, [sp, #28]
 8012d72:	4654      	mov	r4, sl
 8012d74:	2000      	movs	r0, #0
 8012d76:	f04f 0c0a 	mov.w	ip, #10
 8012d7a:	4621      	mov	r1, r4
 8012d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d80:	3b30      	subs	r3, #48	@ 0x30
 8012d82:	2b09      	cmp	r3, #9
 8012d84:	d94b      	bls.n	8012e1e <_vfiprintf_r+0x1a2>
 8012d86:	b1b0      	cbz	r0, 8012db6 <_vfiprintf_r+0x13a>
 8012d88:	9207      	str	r2, [sp, #28]
 8012d8a:	e014      	b.n	8012db6 <_vfiprintf_r+0x13a>
 8012d8c:	eba0 0308 	sub.w	r3, r0, r8
 8012d90:	fa09 f303 	lsl.w	r3, r9, r3
 8012d94:	4313      	orrs	r3, r2
 8012d96:	9304      	str	r3, [sp, #16]
 8012d98:	46a2      	mov	sl, r4
 8012d9a:	e7d2      	b.n	8012d42 <_vfiprintf_r+0xc6>
 8012d9c:	9b03      	ldr	r3, [sp, #12]
 8012d9e:	1d19      	adds	r1, r3, #4
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	9103      	str	r1, [sp, #12]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	bfbb      	ittet	lt
 8012da8:	425b      	neglt	r3, r3
 8012daa:	f042 0202 	orrlt.w	r2, r2, #2
 8012dae:	9307      	strge	r3, [sp, #28]
 8012db0:	9307      	strlt	r3, [sp, #28]
 8012db2:	bfb8      	it	lt
 8012db4:	9204      	strlt	r2, [sp, #16]
 8012db6:	7823      	ldrb	r3, [r4, #0]
 8012db8:	2b2e      	cmp	r3, #46	@ 0x2e
 8012dba:	d10a      	bne.n	8012dd2 <_vfiprintf_r+0x156>
 8012dbc:	7863      	ldrb	r3, [r4, #1]
 8012dbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8012dc0:	d132      	bne.n	8012e28 <_vfiprintf_r+0x1ac>
 8012dc2:	9b03      	ldr	r3, [sp, #12]
 8012dc4:	1d1a      	adds	r2, r3, #4
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	9203      	str	r2, [sp, #12]
 8012dca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012dce:	3402      	adds	r4, #2
 8012dd0:	9305      	str	r3, [sp, #20]
 8012dd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012ea8 <_vfiprintf_r+0x22c>
 8012dd6:	7821      	ldrb	r1, [r4, #0]
 8012dd8:	2203      	movs	r2, #3
 8012dda:	4650      	mov	r0, sl
 8012ddc:	f7ed fa98 	bl	8000310 <memchr>
 8012de0:	b138      	cbz	r0, 8012df2 <_vfiprintf_r+0x176>
 8012de2:	9b04      	ldr	r3, [sp, #16]
 8012de4:	eba0 000a 	sub.w	r0, r0, sl
 8012de8:	2240      	movs	r2, #64	@ 0x40
 8012dea:	4082      	lsls	r2, r0
 8012dec:	4313      	orrs	r3, r2
 8012dee:	3401      	adds	r4, #1
 8012df0:	9304      	str	r3, [sp, #16]
 8012df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012df6:	4829      	ldr	r0, [pc, #164]	@ (8012e9c <_vfiprintf_r+0x220>)
 8012df8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012dfc:	2206      	movs	r2, #6
 8012dfe:	f7ed fa87 	bl	8000310 <memchr>
 8012e02:	2800      	cmp	r0, #0
 8012e04:	d03f      	beq.n	8012e86 <_vfiprintf_r+0x20a>
 8012e06:	4b26      	ldr	r3, [pc, #152]	@ (8012ea0 <_vfiprintf_r+0x224>)
 8012e08:	bb1b      	cbnz	r3, 8012e52 <_vfiprintf_r+0x1d6>
 8012e0a:	9b03      	ldr	r3, [sp, #12]
 8012e0c:	3307      	adds	r3, #7
 8012e0e:	f023 0307 	bic.w	r3, r3, #7
 8012e12:	3308      	adds	r3, #8
 8012e14:	9303      	str	r3, [sp, #12]
 8012e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e18:	443b      	add	r3, r7
 8012e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e1c:	e76a      	b.n	8012cf4 <_vfiprintf_r+0x78>
 8012e1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e22:	460c      	mov	r4, r1
 8012e24:	2001      	movs	r0, #1
 8012e26:	e7a8      	b.n	8012d7a <_vfiprintf_r+0xfe>
 8012e28:	2300      	movs	r3, #0
 8012e2a:	3401      	adds	r4, #1
 8012e2c:	9305      	str	r3, [sp, #20]
 8012e2e:	4619      	mov	r1, r3
 8012e30:	f04f 0c0a 	mov.w	ip, #10
 8012e34:	4620      	mov	r0, r4
 8012e36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e3a:	3a30      	subs	r2, #48	@ 0x30
 8012e3c:	2a09      	cmp	r2, #9
 8012e3e:	d903      	bls.n	8012e48 <_vfiprintf_r+0x1cc>
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d0c6      	beq.n	8012dd2 <_vfiprintf_r+0x156>
 8012e44:	9105      	str	r1, [sp, #20]
 8012e46:	e7c4      	b.n	8012dd2 <_vfiprintf_r+0x156>
 8012e48:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e4c:	4604      	mov	r4, r0
 8012e4e:	2301      	movs	r3, #1
 8012e50:	e7f0      	b.n	8012e34 <_vfiprintf_r+0x1b8>
 8012e52:	ab03      	add	r3, sp, #12
 8012e54:	9300      	str	r3, [sp, #0]
 8012e56:	462a      	mov	r2, r5
 8012e58:	4b12      	ldr	r3, [pc, #72]	@ (8012ea4 <_vfiprintf_r+0x228>)
 8012e5a:	a904      	add	r1, sp, #16
 8012e5c:	4630      	mov	r0, r6
 8012e5e:	f7fc f9c7 	bl	800f1f0 <_printf_float>
 8012e62:	4607      	mov	r7, r0
 8012e64:	1c78      	adds	r0, r7, #1
 8012e66:	d1d6      	bne.n	8012e16 <_vfiprintf_r+0x19a>
 8012e68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e6a:	07d9      	lsls	r1, r3, #31
 8012e6c:	d405      	bmi.n	8012e7a <_vfiprintf_r+0x1fe>
 8012e6e:	89ab      	ldrh	r3, [r5, #12]
 8012e70:	059a      	lsls	r2, r3, #22
 8012e72:	d402      	bmi.n	8012e7a <_vfiprintf_r+0x1fe>
 8012e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e76:	f7fd f96d 	bl	8010154 <__retarget_lock_release_recursive>
 8012e7a:	89ab      	ldrh	r3, [r5, #12]
 8012e7c:	065b      	lsls	r3, r3, #25
 8012e7e:	f53f af1f 	bmi.w	8012cc0 <_vfiprintf_r+0x44>
 8012e82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012e84:	e71e      	b.n	8012cc4 <_vfiprintf_r+0x48>
 8012e86:	ab03      	add	r3, sp, #12
 8012e88:	9300      	str	r3, [sp, #0]
 8012e8a:	462a      	mov	r2, r5
 8012e8c:	4b05      	ldr	r3, [pc, #20]	@ (8012ea4 <_vfiprintf_r+0x228>)
 8012e8e:	a904      	add	r1, sp, #16
 8012e90:	4630      	mov	r0, r6
 8012e92:	f7fc fc35 	bl	800f700 <_printf_i>
 8012e96:	e7e4      	b.n	8012e62 <_vfiprintf_r+0x1e6>
 8012e98:	08013691 	.word	0x08013691
 8012e9c:	0801369b 	.word	0x0801369b
 8012ea0:	0800f1f1 	.word	0x0800f1f1
 8012ea4:	08012c59 	.word	0x08012c59
 8012ea8:	08013697 	.word	0x08013697

08012eac <__swbuf_r>:
 8012eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eae:	460e      	mov	r6, r1
 8012eb0:	4614      	mov	r4, r2
 8012eb2:	4605      	mov	r5, r0
 8012eb4:	b118      	cbz	r0, 8012ebe <__swbuf_r+0x12>
 8012eb6:	6a03      	ldr	r3, [r0, #32]
 8012eb8:	b90b      	cbnz	r3, 8012ebe <__swbuf_r+0x12>
 8012eba:	f7fc ffd9 	bl	800fe70 <__sinit>
 8012ebe:	69a3      	ldr	r3, [r4, #24]
 8012ec0:	60a3      	str	r3, [r4, #8]
 8012ec2:	89a3      	ldrh	r3, [r4, #12]
 8012ec4:	071a      	lsls	r2, r3, #28
 8012ec6:	d501      	bpl.n	8012ecc <__swbuf_r+0x20>
 8012ec8:	6923      	ldr	r3, [r4, #16]
 8012eca:	b943      	cbnz	r3, 8012ede <__swbuf_r+0x32>
 8012ecc:	4621      	mov	r1, r4
 8012ece:	4628      	mov	r0, r5
 8012ed0:	f000 f82a 	bl	8012f28 <__swsetup_r>
 8012ed4:	b118      	cbz	r0, 8012ede <__swbuf_r+0x32>
 8012ed6:	f04f 37ff 	mov.w	r7, #4294967295
 8012eda:	4638      	mov	r0, r7
 8012edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ede:	6823      	ldr	r3, [r4, #0]
 8012ee0:	6922      	ldr	r2, [r4, #16]
 8012ee2:	1a98      	subs	r0, r3, r2
 8012ee4:	6963      	ldr	r3, [r4, #20]
 8012ee6:	b2f6      	uxtb	r6, r6
 8012ee8:	4283      	cmp	r3, r0
 8012eea:	4637      	mov	r7, r6
 8012eec:	dc05      	bgt.n	8012efa <__swbuf_r+0x4e>
 8012eee:	4621      	mov	r1, r4
 8012ef0:	4628      	mov	r0, r5
 8012ef2:	f7ff fcf3 	bl	80128dc <_fflush_r>
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	d1ed      	bne.n	8012ed6 <__swbuf_r+0x2a>
 8012efa:	68a3      	ldr	r3, [r4, #8]
 8012efc:	3b01      	subs	r3, #1
 8012efe:	60a3      	str	r3, [r4, #8]
 8012f00:	6823      	ldr	r3, [r4, #0]
 8012f02:	1c5a      	adds	r2, r3, #1
 8012f04:	6022      	str	r2, [r4, #0]
 8012f06:	701e      	strb	r6, [r3, #0]
 8012f08:	6962      	ldr	r2, [r4, #20]
 8012f0a:	1c43      	adds	r3, r0, #1
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	d004      	beq.n	8012f1a <__swbuf_r+0x6e>
 8012f10:	89a3      	ldrh	r3, [r4, #12]
 8012f12:	07db      	lsls	r3, r3, #31
 8012f14:	d5e1      	bpl.n	8012eda <__swbuf_r+0x2e>
 8012f16:	2e0a      	cmp	r6, #10
 8012f18:	d1df      	bne.n	8012eda <__swbuf_r+0x2e>
 8012f1a:	4621      	mov	r1, r4
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	f7ff fcdd 	bl	80128dc <_fflush_r>
 8012f22:	2800      	cmp	r0, #0
 8012f24:	d0d9      	beq.n	8012eda <__swbuf_r+0x2e>
 8012f26:	e7d6      	b.n	8012ed6 <__swbuf_r+0x2a>

08012f28 <__swsetup_r>:
 8012f28:	b538      	push	{r3, r4, r5, lr}
 8012f2a:	4b29      	ldr	r3, [pc, #164]	@ (8012fd0 <__swsetup_r+0xa8>)
 8012f2c:	4605      	mov	r5, r0
 8012f2e:	6818      	ldr	r0, [r3, #0]
 8012f30:	460c      	mov	r4, r1
 8012f32:	b118      	cbz	r0, 8012f3c <__swsetup_r+0x14>
 8012f34:	6a03      	ldr	r3, [r0, #32]
 8012f36:	b90b      	cbnz	r3, 8012f3c <__swsetup_r+0x14>
 8012f38:	f7fc ff9a 	bl	800fe70 <__sinit>
 8012f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f40:	0719      	lsls	r1, r3, #28
 8012f42:	d422      	bmi.n	8012f8a <__swsetup_r+0x62>
 8012f44:	06da      	lsls	r2, r3, #27
 8012f46:	d407      	bmi.n	8012f58 <__swsetup_r+0x30>
 8012f48:	2209      	movs	r2, #9
 8012f4a:	602a      	str	r2, [r5, #0]
 8012f4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f50:	81a3      	strh	r3, [r4, #12]
 8012f52:	f04f 30ff 	mov.w	r0, #4294967295
 8012f56:	e033      	b.n	8012fc0 <__swsetup_r+0x98>
 8012f58:	0758      	lsls	r0, r3, #29
 8012f5a:	d512      	bpl.n	8012f82 <__swsetup_r+0x5a>
 8012f5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f5e:	b141      	cbz	r1, 8012f72 <__swsetup_r+0x4a>
 8012f60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f64:	4299      	cmp	r1, r3
 8012f66:	d002      	beq.n	8012f6e <__swsetup_r+0x46>
 8012f68:	4628      	mov	r0, r5
 8012f6a:	f7fd fef3 	bl	8010d54 <_free_r>
 8012f6e:	2300      	movs	r3, #0
 8012f70:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f72:	89a3      	ldrh	r3, [r4, #12]
 8012f74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012f78:	81a3      	strh	r3, [r4, #12]
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	6063      	str	r3, [r4, #4]
 8012f7e:	6923      	ldr	r3, [r4, #16]
 8012f80:	6023      	str	r3, [r4, #0]
 8012f82:	89a3      	ldrh	r3, [r4, #12]
 8012f84:	f043 0308 	orr.w	r3, r3, #8
 8012f88:	81a3      	strh	r3, [r4, #12]
 8012f8a:	6923      	ldr	r3, [r4, #16]
 8012f8c:	b94b      	cbnz	r3, 8012fa2 <__swsetup_r+0x7a>
 8012f8e:	89a3      	ldrh	r3, [r4, #12]
 8012f90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f98:	d003      	beq.n	8012fa2 <__swsetup_r+0x7a>
 8012f9a:	4621      	mov	r1, r4
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	f000 f883 	bl	80130a8 <__smakebuf_r>
 8012fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fa6:	f013 0201 	ands.w	r2, r3, #1
 8012faa:	d00a      	beq.n	8012fc2 <__swsetup_r+0x9a>
 8012fac:	2200      	movs	r2, #0
 8012fae:	60a2      	str	r2, [r4, #8]
 8012fb0:	6962      	ldr	r2, [r4, #20]
 8012fb2:	4252      	negs	r2, r2
 8012fb4:	61a2      	str	r2, [r4, #24]
 8012fb6:	6922      	ldr	r2, [r4, #16]
 8012fb8:	b942      	cbnz	r2, 8012fcc <__swsetup_r+0xa4>
 8012fba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012fbe:	d1c5      	bne.n	8012f4c <__swsetup_r+0x24>
 8012fc0:	bd38      	pop	{r3, r4, r5, pc}
 8012fc2:	0799      	lsls	r1, r3, #30
 8012fc4:	bf58      	it	pl
 8012fc6:	6962      	ldrpl	r2, [r4, #20]
 8012fc8:	60a2      	str	r2, [r4, #8]
 8012fca:	e7f4      	b.n	8012fb6 <__swsetup_r+0x8e>
 8012fcc:	2000      	movs	r0, #0
 8012fce:	e7f7      	b.n	8012fc0 <__swsetup_r+0x98>
 8012fd0:	240001c4 	.word	0x240001c4

08012fd4 <_raise_r>:
 8012fd4:	291f      	cmp	r1, #31
 8012fd6:	b538      	push	{r3, r4, r5, lr}
 8012fd8:	4605      	mov	r5, r0
 8012fda:	460c      	mov	r4, r1
 8012fdc:	d904      	bls.n	8012fe8 <_raise_r+0x14>
 8012fde:	2316      	movs	r3, #22
 8012fe0:	6003      	str	r3, [r0, #0]
 8012fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8012fe6:	bd38      	pop	{r3, r4, r5, pc}
 8012fe8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012fea:	b112      	cbz	r2, 8012ff2 <_raise_r+0x1e>
 8012fec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ff0:	b94b      	cbnz	r3, 8013006 <_raise_r+0x32>
 8012ff2:	4628      	mov	r0, r5
 8012ff4:	f000 f830 	bl	8013058 <_getpid_r>
 8012ff8:	4622      	mov	r2, r4
 8012ffa:	4601      	mov	r1, r0
 8012ffc:	4628      	mov	r0, r5
 8012ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013002:	f000 b817 	b.w	8013034 <_kill_r>
 8013006:	2b01      	cmp	r3, #1
 8013008:	d00a      	beq.n	8013020 <_raise_r+0x4c>
 801300a:	1c59      	adds	r1, r3, #1
 801300c:	d103      	bne.n	8013016 <_raise_r+0x42>
 801300e:	2316      	movs	r3, #22
 8013010:	6003      	str	r3, [r0, #0]
 8013012:	2001      	movs	r0, #1
 8013014:	e7e7      	b.n	8012fe6 <_raise_r+0x12>
 8013016:	2100      	movs	r1, #0
 8013018:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801301c:	4620      	mov	r0, r4
 801301e:	4798      	blx	r3
 8013020:	2000      	movs	r0, #0
 8013022:	e7e0      	b.n	8012fe6 <_raise_r+0x12>

08013024 <raise>:
 8013024:	4b02      	ldr	r3, [pc, #8]	@ (8013030 <raise+0xc>)
 8013026:	4601      	mov	r1, r0
 8013028:	6818      	ldr	r0, [r3, #0]
 801302a:	f7ff bfd3 	b.w	8012fd4 <_raise_r>
 801302e:	bf00      	nop
 8013030:	240001c4 	.word	0x240001c4

08013034 <_kill_r>:
 8013034:	b538      	push	{r3, r4, r5, lr}
 8013036:	4d07      	ldr	r5, [pc, #28]	@ (8013054 <_kill_r+0x20>)
 8013038:	2300      	movs	r3, #0
 801303a:	4604      	mov	r4, r0
 801303c:	4608      	mov	r0, r1
 801303e:	4611      	mov	r1, r2
 8013040:	602b      	str	r3, [r5, #0]
 8013042:	f7ee fc3f 	bl	80018c4 <_kill>
 8013046:	1c43      	adds	r3, r0, #1
 8013048:	d102      	bne.n	8013050 <_kill_r+0x1c>
 801304a:	682b      	ldr	r3, [r5, #0]
 801304c:	b103      	cbz	r3, 8013050 <_kill_r+0x1c>
 801304e:	6023      	str	r3, [r4, #0]
 8013050:	bd38      	pop	{r3, r4, r5, pc}
 8013052:	bf00      	nop
 8013054:	24000ec4 	.word	0x24000ec4

08013058 <_getpid_r>:
 8013058:	f7ee bc2c 	b.w	80018b4 <_getpid>

0801305c <__swhatbuf_r>:
 801305c:	b570      	push	{r4, r5, r6, lr}
 801305e:	460c      	mov	r4, r1
 8013060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013064:	2900      	cmp	r1, #0
 8013066:	b096      	sub	sp, #88	@ 0x58
 8013068:	4615      	mov	r5, r2
 801306a:	461e      	mov	r6, r3
 801306c:	da0d      	bge.n	801308a <__swhatbuf_r+0x2e>
 801306e:	89a3      	ldrh	r3, [r4, #12]
 8013070:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013074:	f04f 0100 	mov.w	r1, #0
 8013078:	bf14      	ite	ne
 801307a:	2340      	movne	r3, #64	@ 0x40
 801307c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013080:	2000      	movs	r0, #0
 8013082:	6031      	str	r1, [r6, #0]
 8013084:	602b      	str	r3, [r5, #0]
 8013086:	b016      	add	sp, #88	@ 0x58
 8013088:	bd70      	pop	{r4, r5, r6, pc}
 801308a:	466a      	mov	r2, sp
 801308c:	f000 f848 	bl	8013120 <_fstat_r>
 8013090:	2800      	cmp	r0, #0
 8013092:	dbec      	blt.n	801306e <__swhatbuf_r+0x12>
 8013094:	9901      	ldr	r1, [sp, #4]
 8013096:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801309a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801309e:	4259      	negs	r1, r3
 80130a0:	4159      	adcs	r1, r3
 80130a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80130a6:	e7eb      	b.n	8013080 <__swhatbuf_r+0x24>

080130a8 <__smakebuf_r>:
 80130a8:	898b      	ldrh	r3, [r1, #12]
 80130aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130ac:	079d      	lsls	r5, r3, #30
 80130ae:	4606      	mov	r6, r0
 80130b0:	460c      	mov	r4, r1
 80130b2:	d507      	bpl.n	80130c4 <__smakebuf_r+0x1c>
 80130b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80130b8:	6023      	str	r3, [r4, #0]
 80130ba:	6123      	str	r3, [r4, #16]
 80130bc:	2301      	movs	r3, #1
 80130be:	6163      	str	r3, [r4, #20]
 80130c0:	b003      	add	sp, #12
 80130c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130c4:	ab01      	add	r3, sp, #4
 80130c6:	466a      	mov	r2, sp
 80130c8:	f7ff ffc8 	bl	801305c <__swhatbuf_r>
 80130cc:	9f00      	ldr	r7, [sp, #0]
 80130ce:	4605      	mov	r5, r0
 80130d0:	4639      	mov	r1, r7
 80130d2:	4630      	mov	r0, r6
 80130d4:	f7fb f9b8 	bl	800e448 <_malloc_r>
 80130d8:	b948      	cbnz	r0, 80130ee <__smakebuf_r+0x46>
 80130da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130de:	059a      	lsls	r2, r3, #22
 80130e0:	d4ee      	bmi.n	80130c0 <__smakebuf_r+0x18>
 80130e2:	f023 0303 	bic.w	r3, r3, #3
 80130e6:	f043 0302 	orr.w	r3, r3, #2
 80130ea:	81a3      	strh	r3, [r4, #12]
 80130ec:	e7e2      	b.n	80130b4 <__smakebuf_r+0xc>
 80130ee:	89a3      	ldrh	r3, [r4, #12]
 80130f0:	6020      	str	r0, [r4, #0]
 80130f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80130f6:	81a3      	strh	r3, [r4, #12]
 80130f8:	9b01      	ldr	r3, [sp, #4]
 80130fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80130fe:	b15b      	cbz	r3, 8013118 <__smakebuf_r+0x70>
 8013100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013104:	4630      	mov	r0, r6
 8013106:	f000 f81d 	bl	8013144 <_isatty_r>
 801310a:	b128      	cbz	r0, 8013118 <__smakebuf_r+0x70>
 801310c:	89a3      	ldrh	r3, [r4, #12]
 801310e:	f023 0303 	bic.w	r3, r3, #3
 8013112:	f043 0301 	orr.w	r3, r3, #1
 8013116:	81a3      	strh	r3, [r4, #12]
 8013118:	89a3      	ldrh	r3, [r4, #12]
 801311a:	431d      	orrs	r5, r3
 801311c:	81a5      	strh	r5, [r4, #12]
 801311e:	e7cf      	b.n	80130c0 <__smakebuf_r+0x18>

08013120 <_fstat_r>:
 8013120:	b538      	push	{r3, r4, r5, lr}
 8013122:	4d07      	ldr	r5, [pc, #28]	@ (8013140 <_fstat_r+0x20>)
 8013124:	2300      	movs	r3, #0
 8013126:	4604      	mov	r4, r0
 8013128:	4608      	mov	r0, r1
 801312a:	4611      	mov	r1, r2
 801312c:	602b      	str	r3, [r5, #0]
 801312e:	f7ee fc29 	bl	8001984 <_fstat>
 8013132:	1c43      	adds	r3, r0, #1
 8013134:	d102      	bne.n	801313c <_fstat_r+0x1c>
 8013136:	682b      	ldr	r3, [r5, #0]
 8013138:	b103      	cbz	r3, 801313c <_fstat_r+0x1c>
 801313a:	6023      	str	r3, [r4, #0]
 801313c:	bd38      	pop	{r3, r4, r5, pc}
 801313e:	bf00      	nop
 8013140:	24000ec4 	.word	0x24000ec4

08013144 <_isatty_r>:
 8013144:	b538      	push	{r3, r4, r5, lr}
 8013146:	4d06      	ldr	r5, [pc, #24]	@ (8013160 <_isatty_r+0x1c>)
 8013148:	2300      	movs	r3, #0
 801314a:	4604      	mov	r4, r0
 801314c:	4608      	mov	r0, r1
 801314e:	602b      	str	r3, [r5, #0]
 8013150:	f7ee fc28 	bl	80019a4 <_isatty>
 8013154:	1c43      	adds	r3, r0, #1
 8013156:	d102      	bne.n	801315e <_isatty_r+0x1a>
 8013158:	682b      	ldr	r3, [r5, #0]
 801315a:	b103      	cbz	r3, 801315e <_isatty_r+0x1a>
 801315c:	6023      	str	r3, [r4, #0]
 801315e:	bd38      	pop	{r3, r4, r5, pc}
 8013160:	24000ec4 	.word	0x24000ec4

08013164 <_init>:
 8013164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013166:	bf00      	nop
 8013168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801316a:	bc08      	pop	{r3}
 801316c:	469e      	mov	lr, r3
 801316e:	4770      	bx	lr

08013170 <_fini>:
 8013170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013172:	bf00      	nop
 8013174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013176:	bc08      	pop	{r3}
 8013178:	469e      	mov	lr, r3
 801317a:	4770      	bx	lr
