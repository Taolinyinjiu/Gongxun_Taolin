
Gongxun_Taolin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001285c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08012b30  08012b30  00013b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080130ac  080130ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080130b4  080130b4  000140b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080130b8  080130b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000214  24000000  080130bc  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c50  24000214  080132d0  00015214  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e64  080132d0  00015e64  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015214  2**0
                  CONTENTS, READONLY
 10 .debug_info   000219f0  00000000  00000000  00015242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004642  00000000  00000000  00036c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b10  00000000  00000000  0003b278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001505  00000000  00000000  0003cd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037d9a  00000000  00000000  0003e28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026146  00000000  00000000  00076027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015994c  00000000  00000000  0009c16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f5ab9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000864c  00000000  00000000  001f5afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004f  00000000  00000000  001fe148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000214 	.word	0x24000214
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012b14 	.word	0x08012b14

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000218 	.word	0x24000218
 800030c:	08012b14 	.word	0x08012b14

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af02      	add	r7, sp, #8
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 8000a9e:	4b43      	ldr	r3, [pc, #268]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa0:	4a43      	ldr	r2, [pc, #268]	@ (8000bb0 <MX_FDCAN1_Init+0x118>)
 8000aa2:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000aa4:	4b41      	ldr	r3, [pc, #260]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000aaa:	4b40      	ldr	r3, [pc, #256]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000abc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 10;
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000ac8:	4b38      	ldr	r3, [pc, #224]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ace:	4b37      	ldr	r3, [pc, #220]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ad4:	4b35      	ldr	r3, [pc, #212]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8000ada:	4b34      	ldr	r3, [pc, #208]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 10;
 8000ae0:	4b32      	ldr	r3, [pc, #200]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 2;
 8000ae6:	4b31      	ldr	r3, [pc, #196]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 2;
 8000aec:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 1;
 8000afe:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8000b04:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b06:	2204      	movs	r2, #4
 8000b08:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b18:	2204      	movs	r2, #4
 8000b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b22:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b46:	4819      	ldr	r0, [pc, #100]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b48:	f003 f808 	bl	8003b5c <HAL_FDCAN_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_FDCAN1_Init+0xbe>
	{
		Error_Handler();
 8000b52:	f000 fdef 	bl	8001734 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */
//配置RX滤波
	hfdcan1_RX_Filter.IdType = FDCAN_EXTENDED_ID;       //标准 IDFDCAN_STANDARD_ID
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5c:	601a      	str	r2, [r3, #0]
	hfdcan1_RX_Filter.FilterIndex = 0;                           //滤波器索�????????
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
	hfdcan1_RX_Filter.FilterType = FDCAN_FILTER_MASK;            //滤波器类�????????
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	609a      	str	r2, [r3, #8]
	hfdcan1_RX_Filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //过滤�????????0关联到FIFO0
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
	hfdcan1_RX_Filter.FilterID1 = 0x000;                               //32位ID
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
	hfdcan1_RX_Filter.FilterID2 = 0x000; //如果FDCAN配置为传统模式的话，这里�????????32位掩�????????
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan1_RX_Filter);               //滤波器初始化
 8000b7c:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b7e:	480b      	ldr	r0, [pc, #44]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b80:	f003 f9ca 	bl	8003f18 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, ENABLE,
 8000b84:	2301      	movs	r3, #1
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b90:	f003 fa38 	bl	8004004 <HAL_FDCAN_ConfigGlobalFilter>
			ENABLE);
	HAL_FDCAN_Start(&hfdcan1);                               //�???启FDCAN
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b96:	f003 fa62 	bl	800405e <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ba0:	f003 fc50 	bl	8004444 <HAL_FDCAN_ActivateNotification>
	/* USER CODE END FDCAN1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	240002a0 	.word	0x240002a0
 8000bb0:	4000a000 	.word	0x4000a000
 8000bb4:	24000230 	.word	0x24000230

08000bb8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef *fdcanHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0b8      	sub	sp, #224	@ 0xe0
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 8000bc0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	22b8      	movs	r2, #184	@ 0xb8
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f00e fee6 	bl	800f9aa <memset>
	{ 0 };
	if (fdcanHandle->Instance == FDCAN1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c8c <HAL_FDCAN_MspInit+0xd4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d14c      	bne.n	8000c82 <HAL_FDCAN_MspInit+0xca>

		/* USER CODE END FDCAN1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000be8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f005 fadf 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_FDCAN_MspInit+0x54>
		{
			Error_Handler();
 8000c08:	f000 fd94 	bl	8001734 <Error_Handler>
		}

		/* FDCAN1 clock enable */
		__HAL_RCC_FDCAN_CLK_ENABLE();
 8000c0c:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c12:	4a1f      	ldr	r2, [pc, #124]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	4a17      	ldr	r2, [pc, #92]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
		/**FDCAN1 GPIO Configuration
		 PD0     ------> FDCAN1_RX
		 PD1     ------> FDCAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c60:	2309      	movs	r3, #9
 8000c62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <HAL_FDCAN_MspInit+0xdc>)
 8000c6e:	f004 f95f 	bl	8004f30 <HAL_GPIO_Init>

		/* FDCAN1 interrupt Init */
		HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 2, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2102      	movs	r1, #2
 8000c76:	2013      	movs	r0, #19
 8000c78:	f002 f95f 	bl	8002f3a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c7c:	2013      	movs	r0, #19
 8000c7e:	f002 f976 	bl	8002f6e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN FDCAN1_MspInit 1 */

		/* USER CODE END FDCAN1_MspInit 1 */
	}
}
 8000c82:	bf00      	nop
 8000c84:	37e0      	adds	r7, #224	@ 0xe0
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	4000a000 	.word	0x4000a000
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020c00 	.word	0x58020c00

08000c98 <FDCAN_Send_Msg>:
	}
}

/* USER CODE BEGIN 1 */
void FDCAN_Send_Msg(uint8_t *msg, uint32_t len)
{
 8000c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c9c:	b087      	sub	sp, #28
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
 8000ca4:	466b      	mov	r3, sp
 8000ca6:	461e      	mov	r6, r3
	uint8_t i = 0, j = 0, k = 0, l = 0, packNum = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	75fb      	strb	r3, [r7, #23]
 8000cac:	2300      	movs	r3, #0
 8000cae:	753b      	strb	r3, [r7, #20]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	74fb      	strb	r3, [r7, #19]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75bb      	strb	r3, [r7, #22]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	757b      	strb	r3, [r7, #21]
	uint8_t TxData[len];
 8000cbc:	6839      	ldr	r1, [r7, #0]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4688      	mov	r8, r1
 8000cc8:	4699      	mov	r9, r3
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cde:	2300      	movs	r3, #0
 8000ce0:	460c      	mov	r4, r1
 8000ce2:	461d      	mov	r5, r3
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	00eb      	lsls	r3, r5, #3
 8000cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cf2:	00e2      	lsls	r2, r4, #3
 8000cf4:	1dcb      	adds	r3, r1, #7
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	ebad 0d03 	sub.w	sp, sp, r3
 8000cfe:	466b      	mov	r3, sp
 8000d00:	3300      	adds	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
	j = len - 2;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	3b02      	subs	r3, #2
 8000d0a:	753b      	strb	r3, [r7, #20]
	// 除去ID地址和功能码后的数据长度
	TxData[0] = msg[1];
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	785a      	ldrb	r2, [r3, #1]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	701a      	strb	r2, [r3, #0]
	// 发�?�数�????????
	while (i < j)
 8000d14:	e062      	b.n	8000ddc <FDCAN_Send_Msg+0x144>
	{
		// 数据个数
		k = j - i;
 8000d16:	7d3a      	ldrb	r2, [r7, #20]
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	74fb      	strb	r3, [r7, #19]
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	021a      	lsls	r2, r3, #8
				| (uint32_t) packNum;  //32位ID   0x00
 8000d24:	7d7b      	ldrb	r3, [r7, #21]
 8000d26:	4313      	orrs	r3, r2
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d28:	4a31      	ldr	r2, [pc, #196]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2a:	6013      	str	r3, [r2, #0]
		fdcan_TxHeader.IdType = FDCAN_EXTENDED_ID;      //ID   FDCAN_STANDARD_ID
 8000d2c:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d32:	605a      	str	r2, [r3, #4]
		fdcan_TxHeader.TxFrameType = FDCAN_DATA_FRAME;             //数据�????????
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
		//    fdcan_TxHeader.DataLength=len;              //数据长度
		fdcan_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
		fdcan_TxHeader.BitRateSwitch = FDCAN_BRS_OFF;               //关闭速率切换
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
		fdcan_TxHeader.FDFormat = FDCAN_CLASSIC_CAN;                //传统的CAN模式
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
		fdcan_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;  //无发送事�????????
 8000d4c:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
		fdcan_TxHeader.MessageMarker = 0;
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
		//小于8字节命令
		if (k < 8)
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	2b07      	cmp	r3, #7
 8000d5c:	d81b      	bhi.n	8000d96 <FDCAN_Send_Msg+0xfe>
		{
			for (l = 0; l < k; l++, i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75bb      	strb	r3, [r7, #22]
 8000d62:	e00e      	b.n	8000d82 <FDCAN_Send_Msg+0xea>
			{
				TxData[l + 1] = msg[i + 2];
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	3302      	adds	r3, #2
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	441a      	add	r2, r3
 8000d6c:	7dbb      	ldrb	r3, [r7, #22]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	7811      	ldrb	r1, [r2, #0]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < k; l++, i++)
 8000d76:	7dbb      	ldrb	r3, [r7, #22]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	75bb      	strb	r3, [r7, #22]
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	75fb      	strb	r3, [r7, #23]
 8000d82:	7dba      	ldrb	r2, [r7, #22]
 8000d84:	7cfb      	ldrb	r3, [r7, #19]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3ec      	bcc.n	8000d64 <FDCAN_Send_Msg+0xcc>
			}
			fdcan_TxHeader.DataLength = k + 1;
 8000d8a:	7cfb      	ldrb	r3, [r7, #19]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	e017      	b.n	8000dc6 <FDCAN_Send_Msg+0x12e>
		}
		// 大于8字节命令，分包发送，每包数据�????????多发�????????8个字�????????
		else
		{
			for (l = 0; l < 7; l++, i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	75bb      	strb	r3, [r7, #22]
 8000d9a:	e00e      	b.n	8000dba <FDCAN_Send_Msg+0x122>
			{
				TxData[l + 1] = msg[i + 2];
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	3302      	adds	r3, #2
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	441a      	add	r2, r3
 8000da4:	7dbb      	ldrb	r3, [r7, #22]
 8000da6:	3301      	adds	r3, #1
 8000da8:	7811      	ldrb	r1, [r2, #0]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < 7; l++, i++)
 8000dae:	7dbb      	ldrb	r3, [r7, #22]
 8000db0:	3301      	adds	r3, #1
 8000db2:	75bb      	strb	r3, [r7, #22]
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	3301      	adds	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
 8000dba:	7dbb      	ldrb	r3, [r7, #22]
 8000dbc:	2b06      	cmp	r3, #6
 8000dbe:	d9ed      	bls.n	8000d9c <FDCAN_Send_Msg+0x104>
			}
			fdcan_TxHeader.DataLength = 8;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	60da      	str	r2, [r3, #12]
		}

		// 发�?�数�??????
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &fdcan_TxHeader, TxData);
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	4909      	ldr	r1, [pc, #36]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dca:	480a      	ldr	r0, [pc, #40]	@ (8000df4 <FDCAN_Send_Msg+0x15c>)
 8000dcc:	f003 f972 	bl	80040b4 <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(5);  //发第二帧数据的关键，若无延时，不发第二帧数据
 8000dd0:	2005      	movs	r0, #5
 8000dd2:	f001 ffb3 	bl	8002d3c <HAL_Delay>
		// 记录发�?�的第几包的数据
		++packNum;
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	757b      	strb	r3, [r7, #21]
	while (i < j)
 8000ddc:	7dfa      	ldrb	r2, [r7, #23]
 8000dde:	7d3b      	ldrb	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d398      	bcc.n	8000d16 <FDCAN_Send_Msg+0x7e>
 8000de4:	46b5      	mov	sp, r6
	}
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df0:	24000250 	.word	0x24000250
 8000df4:	240002a0 	.word	0x240002a0

08000df8 <HAL_FDCAN_RxFifo0Callback>:
bool Base_Data = false;
bool Top_Data = false;
// 允许查询状态标志位
extern bool Call_Flag;
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
//	提取FIFO中的数据,
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &fdcan_RxHeader, rxdata);
 8000e02:	4b34      	ldr	r3, [pc, #208]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e04:	4a34      	ldr	r2, [pc, #208]	@ (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000e06:	2140      	movs	r1, #64	@ 0x40
 8000e08:	4834      	ldr	r0, [pc, #208]	@ (8000edc <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000e0a:	f003 f9af 	bl	800416c <HAL_FDCAN_GetRxMessage>
	if (Call_Flag == true)
 8000e0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d054      	beq.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
	{
//	底盘步进电机帧头
		if (fdcan_RxHeader.Identifier / 256 == 2)
 8000e16:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8000e1e:	2bff      	cmp	r3, #255	@ 0xff
 8000e20:	d824      	bhi.n	8000e6c <HAL_FDCAN_RxFifo0Callback+0x74>
		{
			if (RxState == 0)
 8000e22:	4b30      	ldr	r3, [pc, #192]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d106      	bne.n	8000e38 <HAL_FDCAN_RxFifo0Callback+0x40>
			{
				if (rxdata[0] == 0xFD)
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e30:	d102      	bne.n	8000e38 <HAL_FDCAN_RxFifo0Callback+0x40>
				{
					RxState = 1;
 8000e32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 1)
 8000e38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d106      	bne.n	8000e4e <HAL_FDCAN_RxFifo0Callback+0x56>
			{
				if (rxdata[1] == 0x9F)
 8000e40:	4b24      	ldr	r3, [pc, #144]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e42:	785b      	ldrb	r3, [r3, #1]
 8000e44:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e46:	d102      	bne.n	8000e4e <HAL_FDCAN_RxFifo0Callback+0x56>
				{
					RxState = 2;
 8000e48:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 2)
 8000e4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d134      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
			{
				if (rxdata[2] == 0x6B)
 8000e56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e58:	789b      	ldrb	r3, [r3, #2]
 8000e5a:	2b6b      	cmp	r3, #107	@ 0x6b
 8000e5c:	d130      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
				{
//				到位数据接收完毕，底盘步进确认到位
					Base_Data = true;
 8000e5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ee8 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
					RxState = 0;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	e029      	b.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
				}
			}
		}
//	升降步进电机帧头
		else if (fdcan_RxHeader.Identifier / 256 == 5)
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8000e74:	2bff      	cmp	r3, #255	@ 0xff
 8000e76:	d823      	bhi.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
		{
			if (RxState == 0)
 8000e78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d106      	bne.n	8000e8e <HAL_FDCAN_RxFifo0Callback+0x96>
			{
				if (rxdata[0] == 0xFD)
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e86:	d102      	bne.n	8000e8e <HAL_FDCAN_RxFifo0Callback+0x96>
				{
					RxState = 1;
 8000e88:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 1)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d106      	bne.n	8000ea4 <HAL_FDCAN_RxFifo0Callback+0xac>
			{
				if (rxdata[1] == 0x9F)
 8000e96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e98:	785b      	ldrb	r3, [r3, #1]
 8000e9a:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e9c:	d102      	bne.n	8000ea4 <HAL_FDCAN_RxFifo0Callback+0xac>
				{
					RxState = 2;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 2)
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d109      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
			{
				if (rxdata[2] == 0x6B)
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000eae:	789b      	ldrb	r3, [r3, #2]
 8000eb0:	2b6b      	cmp	r3, #107	@ 0x6b
 8000eb2:	d105      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
				{
//				到位数据接收完毕，底盘步进确认到位
					Top_Data = true;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
					RxState = 0;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	HAL_FDCAN_ActivateNotification(hfdcan,
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f003 fabd 	bl	8004444 <HAL_FDCAN_ActivateNotification>
	FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	24000340 	.word	0x24000340
 8000ed8:	24000274 	.word	0x24000274
 8000edc:	240002a0 	.word	0x240002a0
 8000ee0:	24000c2e 	.word	0x24000c2e
 8000ee4:	24000348 	.word	0x24000348
 8000ee8:	24000349 	.word	0x24000349
 8000eec:	2400034a 	.word	0x2400034a

08000ef0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	4b30      	ldr	r3, [pc, #192]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	4a2e      	ldr	r2, [pc, #184]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f06:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f14:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	4a27      	ldr	r2, [pc, #156]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f24:	4b24      	ldr	r3, [pc, #144]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	4a18      	ldr	r2, [pc, #96]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	4a10      	ldr	r2, [pc, #64]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

}
 8000faa:	bf00      	nop
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	58024400 	.word	0x58024400

08000fbc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000fc2:	f000 fb8b 	bl	80016dc <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fc6:	f001 fe27 	bl	8002c18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fca:	f000 f9ab 	bl	8001324 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	//  USART10 用于Action串口转发,暂时使用无线串口将数据转发到主机
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fce:	f7ff ff8f 	bl	8000ef0 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 8000fd2:	f7ff fd61 	bl	8000a98 <MX_FDCAN1_Init>
	MX_UART4_Init();
 8000fd6:	f000 ff73 	bl	8001ec0 <MX_UART4_Init>
	MX_UART5_Init();
 8000fda:	f000 ffbd 	bl	8001f58 <MX_UART5_Init>
	MX_UART9_Init();
 8000fde:	f001 f89f 	bl	8002120 <MX_UART9_Init>
	MX_USART6_UART_Init();
 8000fe2:	f001 f9bb 	bl	800235c <MX_USART6_UART_Init>
	MX_USART10_UART_Init();
 8000fe6:	f001 fa05 	bl	80023f4 <MX_USART10_UART_Init>
	MX_TIM2_Init();
 8000fea:	f000 fda9 	bl	8001b40 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 8000fee:	f001 f969 	bl	80022c4 <MX_USART3_UART_Init>
	MX_UART7_Init();
 8000ff2:	f000 fffd 	bl	8001ff0 <MX_UART7_Init>
	MX_UART8_Init();
 8000ff6:	f001 f847 	bl	8002088 <MX_UART8_Init>
	MX_TIM3_Init();
 8000ffa:	f000 fdef 	bl	8001bdc <MX_TIM3_Init>
	MX_TIM5_Init();
 8000ffe:	f000 fe3d 	bl	8001c7c <MX_TIM5_Init>
	MX_USART2_UART_Init();
 8001002:	f001 f8d9 	bl	80021b8 <MX_USART2_UART_Init>
	MX_TIM12_Init();
 8001006:	f000 fe89 	bl	8001d1c <MX_TIM12_Init>
	/* USER CODE BEGIN 2 */

//	清除定时器初始化过程中的更新中断标志�?
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800100a:	4ba9      	ldr	r3, [pc, #676]	@ (80012b0 <main+0x2f4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f06f 0201 	mvn.w	r2, #1
 8001012:	611a      	str	r2, [r3, #16]
//	使能定时器中�?
	HAL_TIM_Base_Start_IT(&htim2);
 8001014:	48a6      	ldr	r0, [pc, #664]	@ (80012b0 <main+0x2f4>)
 8001016:	f006 feed 	bl	8007df4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 800101a:	48a6      	ldr	r0, [pc, #664]	@ (80012b4 <main+0x2f8>)
 800101c:	f006 feea 	bl	8007df4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001020:	48a5      	ldr	r0, [pc, #660]	@ (80012b8 <main+0x2fc>)
 8001022:	f006 fee7 	bl	8007df4 <HAL_TIM_Base_Start_IT>
//	使能串口接收中断
	HAL_UART_Receive_IT(&huart4, &Screen_data, 1);
 8001026:	2201      	movs	r2, #1
 8001028:	49a4      	ldr	r1, [pc, #656]	@ (80012bc <main+0x300>)
 800102a:	48a5      	ldr	r0, [pc, #660]	@ (80012c0 <main+0x304>)
 800102c:	f007 fd6e 	bl	8008b0c <HAL_UART_Receive_IT>
//	HWT101预留中断接口
	HAL_UART_Receive_IT(&huart2, &HwtData, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	49a4      	ldr	r1, [pc, #656]	@ (80012c4 <main+0x308>)
 8001034:	48a4      	ldr	r0, [pc, #656]	@ (80012c8 <main+0x30c>)
 8001036:	f007 fd69 	bl	8008b0c <HAL_UART_Receive_IT>
//	TX2通信接收中断
	HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 800103a:	2201      	movs	r2, #1
 800103c:	49a3      	ldr	r1, [pc, #652]	@ (80012cc <main+0x310>)
 800103e:	48a4      	ldr	r0, [pc, #656]	@ (80012d0 <main+0x314>)
 8001040:	f007 fd64 	bl	8008b0c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart9, &data, 1);
 8001044:	2201      	movs	r2, #1
 8001046:	49a3      	ldr	r1, [pc, #652]	@ (80012d4 <main+0x318>)
 8001048:	48a3      	ldr	r0, [pc, #652]	@ (80012d8 <main+0x31c>)
 800104a:	f007 fd5f 	bl	8008b0c <HAL_UART_Receive_IT>
//	HAL_UART_Receive_IT(&huart10, &Joy_data, 1);

	PID_Init();
 800104e:	f00a ff11 	bl	800be74 <PID_Init>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
// 		按下准备发车后进入该段函数
		if (Ready_Flag == 1)
 8001052:	4ba2      	ldr	r3, [pc, #648]	@ (80012dc <main+0x320>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d104      	bne.n	8001064 <main+0xa8>
		{
			Ready_Flag = 0;
 800105a:	4ba0      	ldr	r3, [pc, #640]	@ (80012dc <main+0x320>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
//			整定车身
			Check_Status();
 8001060:	f00c fe30 	bl	800dcc4 <Check_Status>
		}
// 		按下发车后进入该段函数
		if (System_Flag == 1)
 8001064:	4b9e      	ldr	r3, [pc, #632]	@ (80012e0 <main+0x324>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d1f2      	bne.n	8001052 <main+0x96>
		{
			System_Flag = 0;
 800106c:	4b9c      	ldr	r3, [pc, #624]	@ (80012e0 <main+0x324>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
//			向TX2发送字符串"e1f"
			HAL_UART_Transmit(&huart10, (uint8_t*) "e1f", sizeof("elf") - 1,0x1000);
 8001072:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001076:	2203      	movs	r2, #3
 8001078:	499a      	ldr	r1, [pc, #616]	@ (80012e4 <main+0x328>)
 800107a:	4895      	ldr	r0, [pc, #596]	@ (80012d0 <main+0x314>)
 800107c:	f007 fbf0 	bl	8008860 <HAL_UART_Transmit>
			/***********************进入运行逻辑状态机*************************/
			while (1)
			{
				switch (flag)
 8001080:	4b99      	ldr	r3, [pc, #612]	@ (80012e8 <main+0x32c>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	2b0d      	cmp	r3, #13
 8001086:	f200 810f 	bhi.w	80012a8 <main+0x2ec>
 800108a:	a201      	add	r2, pc, #4	@ (adr r2, 8001090 <main+0xd4>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	080010c9 	.word	0x080010c9
 8001094:	08001103 	.word	0x08001103
 8001098:	0800114d 	.word	0x0800114d
 800109c:	0800116b 	.word	0x0800116b
 80010a0:	0800117b 	.word	0x0800117b
 80010a4:	0800119b 	.word	0x0800119b
 80010a8:	080011af 	.word	0x080011af
 80010ac:	080011db 	.word	0x080011db
 80010b0:	080011fb 	.word	0x080011fb
 80010b4:	08001227 	.word	0x08001227
 80010b8:	08001249 	.word	0x08001249
 80010bc:	08001269 	.word	0x08001269
 80010c0:	08001279 	.word	0x08001279
 80010c4:	08001299 	.word	0x08001299
				{
				case 0:  //发车，进入扫码区
//					X轴建议移动到150左右
					// Move_TO_Saomaqu(2400, 8250);
					bool temp = Move_Left(RunSpeed, RunAcc, 2400);
 80010c8:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80010cc:	2178      	movs	r1, #120	@ 0x78
 80010ce:	2064      	movs	r0, #100	@ 0x64
 80010d0:	f00b f982 	bl	800c3d8 <Move_Left>
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
					while(temp != true)
 80010d8:	e007      	b.n	80010ea <main+0x12e>
					{
						temp = Move_Left(RunSpeed, RunAcc, 2400);
 80010da:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80010de:	2178      	movs	r1, #120	@ 0x78
 80010e0:	2064      	movs	r0, #100	@ 0x64
 80010e2:	f00b f979 	bl	800c3d8 <Move_Left>
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
					while(temp != true)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f083 0301 	eor.w	r3, r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f1      	bne.n	80010da <main+0x11e>
					}    
					Start();
 80010f6:	f00a fb4c 	bl	800b792 <Start>
					flag = 1;
 80010fa:	4b7b      	ldr	r3, [pc, #492]	@ (80012e8 <main+0x32c>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	801a      	strh	r2, [r3, #0]
					break;
 8001100:	e0d5      	b.n	80012ae <main+0x2f2>
//					Drop_Location_jiang(200, 120, 4000);
				case 1:  //离开扫码区，进入原料�?
//					物料理想点位 375
					temp = Move_Line(RunSpeed, RunAcc, 10500);
 8001102:	f642 1204 	movw	r2, #10500	@ 0x2904
 8001106:	2178      	movs	r1, #120	@ 0x78
 8001108:	2064      	movs	r0, #100	@ 0x64
 800110a:	f00b f907 	bl	800c31c <Move_Line>
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
					while(temp != true)
 8001112:	e007      	b.n	8001124 <main+0x168>
					{
// 						如果该段被阻塞，则一直重发
						temp = Move_Line(RunSpeed, RunAcc, 10500);
 8001114:	f642 1204 	movw	r2, #10500	@ 0x2904
 8001118:	2178      	movs	r1, #120	@ 0x78
 800111a:	2064      	movs	r0, #100	@ 0x64
 800111c:	f00b f8fe 	bl	800c31c <Move_Line>
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
					while(temp != true)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f083 0301 	eor.w	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f1      	bne.n	8001114 <main+0x158>
					}
//					Choke_Flag = false确定Move_Line已经执行完毕，可以开始进入PID整定阶段
					while(Choke_Flag == true)
 8001130:	bf00      	nop
 8001132:	4b6e      	ldr	r3, [pc, #440]	@ (80012ec <main+0x330>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1fb      	bne.n	8001132 <main+0x176>
						;
					}
//					Action点位调整 X参数150 Y参数1455
//					Move_Action_Nopid_Left_Ctrl(150, 1455);
//					检查TX2是否传递物料点位信息
					while (Point_Flag != 1)
 800113a:	bf00      	nop
 800113c:	4b6c      	ldr	r3, [pc, #432]	@ (80012f0 <main+0x334>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d1fb      	bne.n	800113c <main+0x180>
					{
						;  //如果Point_Flag值不为1,即没有识别到物料，则进入等待状态
					}
//					TODO:应该在物料抓取函数中实现基于TX2的物料点位闭环
//					Frist_Grab_Wuliao();
					flag = 2;
 8001144:	4b68      	ldr	r3, [pc, #416]	@ (80012e8 <main+0x32c>)
 8001146:	2202      	movs	r2, #2
 8001148:	801a      	strh	r2, [r3, #0]
					break;
 800114a:	e0b0      	b.n	80012ae <main+0x2f2>

				case 2:  //离开原料区，进入十字前方，进行姿态校准
					Move_TO_jianzhi1(4500, 4335);
 800114c:	eddf 0a69 	vldr	s1, [pc, #420]	@ 80012f4 <main+0x338>
 8001150:	ed9f 0a69 	vldr	s0, [pc, #420]	@ 80012f8 <main+0x33c>
 8001154:	f00b fbd0 	bl	800c8f8 <Move_TO_jianzhi1>
					Roll_Status();
 8001158:	f00c fdd7 	bl	800dd0a <Roll_Status>
					HAL_Delay(50);
 800115c:	2032      	movs	r0, #50	@ 0x32
 800115e:	f001 fded 	bl	8002d3c <HAL_Delay>
//					Move_Action_Nopid_Forward_Ctrl(160, 1070);
					flag = 3;
 8001162:	4b61      	ldr	r3, [pc, #388]	@ (80012e8 <main+0x32c>)
 8001164:	2203      	movs	r2, #3
 8001166:	801a      	strh	r2, [r3, #0]
					break;
 8001168:	e0a1      	b.n	80012ae <main+0x2f2>
				case 3:    //暂存�??
					Move_TO_zancunqu(22000, 4335);
 800116a:	eddf 0a62 	vldr	s1, [pc, #392]	@ 80012f4 <main+0x338>
 800116e:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 80012fc <main+0x340>
 8001172:	f00b fc0b 	bl	800c98c <Move_TO_zancunqu>
					while(1)
 8001176:	bf00      	nop
 8001178:	e7fd      	b.n	8001176 <main+0x1ba>
					put_wuliao_to_Car_frist();
					HAL_Delay(yanshi);
					flag = 4;
					break;
				case 4:
					Move_TO_jianzhi2(9000, 4335);     //ACTION调整
 800117a:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 80012f4 <main+0x338>
 800117e:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 8001300 <main+0x344>
 8001182:	f00b fc29 	bl	800c9d8 <Move_TO_jianzhi2>
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 8001186:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001304 <main+0x348>
 800118a:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8001308 <main+0x34c>
 800118e:	f00b fdfb 	bl	800cd88 <Move_Action_Nopid_Forward_Ctrl>
					flag = 5;
 8001192:	4b55      	ldr	r3, [pc, #340]	@ (80012e8 <main+0x32c>)
 8001194:	2205      	movs	r2, #5
 8001196:	801a      	strh	r2, [r3, #0]
					break;
 8001198:	e089      	b.n	80012ae <main+0x2f2>
				case 5:       //粗加工区
					Move_TO_cujiagongqu(10000);
 800119a:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 800130c <main+0x350>
 800119e:	f00b fc40 	bl	800ca22 <Move_TO_cujiagongqu>
					put_wuliao_to_circular_second();
 80011a2:	f00a fbb7 	bl	800b914 <put_wuliao_to_circular_second>
					flag = 6;
 80011a6:	4b50      	ldr	r3, [pc, #320]	@ (80012e8 <main+0x32c>)
 80011a8:	2206      	movs	r2, #6
 80011aa:	801a      	strh	r2, [r3, #0]
					break;
 80011ac:	e07f      	b.n	80012ae <main+0x2f2>
				case 6:
					Move_TO_jianzhi3(9000, 4335);
 80011ae:	eddf 0a51 	vldr	s1, [pc, #324]	@ 80012f4 <main+0x338>
 80011b2:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8001300 <main+0x344>
 80011b6:	f00b fc4a 	bl	800ca4e <Move_TO_jianzhi3>
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 80011ba:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8001304 <main+0x348>
 80011be:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8001310 <main+0x354>
 80011c2:	f00b fc81 	bl	800cac8 <Move_Action_Nopid_Left_Ctrl>
					Drop_Location_jiang(50, 50, 11000);
 80011c6:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80011ca:	2132      	movs	r1, #50	@ 0x32
 80011cc:	2032      	movs	r0, #50	@ 0x32
 80011ce:	f00b faf5 	bl	800c7bc <Drop_Location_jiang>
					flag = 7;
 80011d2:	4b45      	ldr	r3, [pc, #276]	@ (80012e8 <main+0x32c>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	801a      	strh	r2, [r3, #0]
					break;
 80011d8:	e069      	b.n	80012ae <main+0x2f2>
				case 7:      //原料�??
					Move_TO_fanyuanliaoqu(4000);
 80011da:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8001314 <main+0x358>
 80011de:	f00b fc5b 	bl	800ca98 <Move_TO_fanyuanliaoqu>
					Move_Action_Nopid_Left_Ctrl(160, 1400);      //ACTION调整
 80011e2:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 8001318 <main+0x35c>
 80011e6:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 800131c <main+0x360>
 80011ea:	f00b fc6d 	bl	800cac8 <Move_Action_Nopid_Left_Ctrl>
					Second_Run_Frist_Grab_Wuliao();
 80011ee:	f00a fc1d 	bl	800ba2c <Second_Run_Frist_Grab_Wuliao>
					flag = 8;
 80011f2:	4b3d      	ldr	r3, [pc, #244]	@ (80012e8 <main+0x32c>)
 80011f4:	2208      	movs	r2, #8
 80011f6:	801a      	strh	r2, [r3, #0]
					break;
 80011f8:	e059      	b.n	80012ae <main+0x2f2>
				case 8:
					Move_TO_jianzhi1(4500, 4335);
 80011fa:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 80012f4 <main+0x338>
 80011fe:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 80012f8 <main+0x33c>
 8001202:	f00b fb79 	bl	800c8f8 <Move_TO_jianzhi1>
					Drop_Location_jiang(50, 50, 11000);
 8001206:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800120a:	2132      	movs	r1, #50	@ 0x32
 800120c:	2032      	movs	r0, #50	@ 0x32
 800120e:	f00b fad5 	bl	800c7bc <Drop_Location_jiang>
					Move_Action_Nopid_Forward_Ctrl(160, 1070);
 8001212:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8001320 <main+0x364>
 8001216:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 800131c <main+0x360>
 800121a:	f00b fdb5 	bl	800cd88 <Move_Action_Nopid_Forward_Ctrl>
					flag = 9;
 800121e:	4b32      	ldr	r3, [pc, #200]	@ (80012e8 <main+0x32c>)
 8001220:	2209      	movs	r2, #9
 8001222:	801a      	strh	r2, [r3, #0]
					break;
 8001224:	e043      	b.n	80012ae <main+0x2f2>
				case 9:    //暂存�??
					Move_TO_zancunqu(22000, 4335);
 8001226:	eddf 0a33 	vldr	s1, [pc, #204]	@ 80012f4 <main+0x338>
 800122a:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 80012fc <main+0x340>
 800122e:	f00b fbad 	bl	800c98c <Move_TO_zancunqu>
					Second_Run_put_wuliao_to_circular_frist();
 8001232:	f00a fcdf 	bl	800bbf4 <Second_Run_put_wuliao_to_circular_frist>

					Second_Run_put_wuliao_to_Car_frist();
 8001236:	f00a fc59 	bl	800baec <Second_Run_put_wuliao_to_Car_frist>
					HAL_Delay(yanshi);
 800123a:	2032      	movs	r0, #50	@ 0x32
 800123c:	f001 fd7e 	bl	8002d3c <HAL_Delay>
					flag = 10;
 8001240:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <main+0x32c>)
 8001242:	220a      	movs	r2, #10
 8001244:	801a      	strh	r2, [r3, #0]
					break;
 8001246:	e032      	b.n	80012ae <main+0x2f2>
				case 10:
					Move_TO_jianzhi2(9000, 4335);     //ACTION调整
 8001248:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 80012f4 <main+0x338>
 800124c:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001300 <main+0x344>
 8001250:	f00b fbc2 	bl	800c9d8 <Move_TO_jianzhi2>
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 8001254:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8001304 <main+0x348>
 8001258:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8001308 <main+0x34c>
 800125c:	f00b fd94 	bl	800cd88 <Move_Action_Nopid_Forward_Ctrl>
					flag = 11;
 8001260:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <main+0x32c>)
 8001262:	220b      	movs	r2, #11
 8001264:	801a      	strh	r2, [r3, #0]
					break;
 8001266:	e022      	b.n	80012ae <main+0x2f2>
				case 11:       //粗加工区
					Move_TO_cujiagongqu(10000);
 8001268:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800130c <main+0x350>
 800126c:	f00b fbd9 	bl	800ca22 <Move_TO_cujiagongqu>

					flag = 12;
 8001270:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <main+0x32c>)
 8001272:	220c      	movs	r2, #12
 8001274:	801a      	strh	r2, [r3, #0]
					break;
 8001276:	e01a      	b.n	80012ae <main+0x2f2>
				case 12:
					Move_TO_jianzhi3(9000, 4335);
 8001278:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 80012f4 <main+0x338>
 800127c:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8001300 <main+0x344>
 8001280:	f00b fbe5 	bl	800ca4e <Move_TO_jianzhi3>
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 8001284:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8001304 <main+0x348>
 8001288:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8001310 <main+0x354>
 800128c:	f00b fc1c 	bl	800cac8 <Move_Action_Nopid_Left_Ctrl>
					flag = 13;
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <main+0x32c>)
 8001292:	220d      	movs	r2, #13
 8001294:	801a      	strh	r2, [r3, #0]
					break;
 8001296:	e00a      	b.n	80012ae <main+0x2f2>
				case 13:      //原料�??
					Move_TO_fanyuanliaoqu(22000);
 8001298:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80012fc <main+0x340>
 800129c:	f00b fbfc 	bl	800ca98 <Move_TO_fanyuanliaoqu>
					flag = 14;
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <main+0x32c>)
 80012a2:	220e      	movs	r2, #14
 80012a4:	801a      	strh	r2, [r3, #0]
					break;
 80012a6:	e002      	b.n	80012ae <main+0x2f2>
				default:
					Move_Stop();
 80012a8:	f00b fb10 	bl	800c8cc <Move_Stop>
					break;
 80012ac:	bf00      	nop
				switch (flag)
 80012ae:	e6e7      	b.n	8001080 <main+0xc4>
 80012b0:	24000490 	.word	0x24000490
 80012b4:	24000528 	.word	0x24000528
 80012b8:	240004dc 	.word	0x240004dc
 80012bc:	2400034c 	.word	0x2400034c
 80012c0:	240005c0 	.word	0x240005c0
 80012c4:	2400034d 	.word	0x2400034d
 80012c8:	240008a4 	.word	0x240008a4
 80012cc:	2400034e 	.word	0x2400034e
 80012d0:	24000a60 	.word	0x24000a60
 80012d4:	2400034b 	.word	0x2400034b
 80012d8:	24000810 	.word	0x24000810
 80012dc:	24000d13 	.word	0x24000d13
 80012e0:	24000d12 	.word	0x24000d12
 80012e4:	08012b30 	.word	0x08012b30
 80012e8:	24000478 	.word	0x24000478
 80012ec:	24000c2c 	.word	0x24000c2c
 80012f0:	2400045c 	.word	0x2400045c
 80012f4:	45877800 	.word	0x45877800
 80012f8:	458ca000 	.word	0x458ca000
 80012fc:	46abe000 	.word	0x46abe000
 8001300:	460ca000 	.word	0x460ca000
 8001304:	44e88000 	.word	0x44e88000
 8001308:	44e9c000 	.word	0x44e9c000
 800130c:	461c4000 	.word	0x461c4000
 8001310:	432a0000 	.word	0x432a0000
 8001314:	457a0000 	.word	0x457a0000
 8001318:	44af0000 	.word	0x44af0000
 800131c:	43200000 	.word	0x43200000
 8001320:	4485c000 	.word	0x4485c000

08001324 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b09c      	sub	sp, #112	@ 0x70
 8001328:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800132a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132e:	224c      	movs	r2, #76	@ 0x4c
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f00e fb39 	bl	800f9aa <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2220      	movs	r2, #32
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f00e fb33 	bl	800f9aa <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001344:	2002      	movs	r0, #2
 8001346:	f003 ff9b 	bl	8005280 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4b2b      	ldr	r3, [pc, #172]	@ (80013fc <SystemClock_Config+0xd8>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	4a2a      	ldr	r2, [pc, #168]	@ (80013fc <SystemClock_Config+0xd8>)
 8001354:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001358:	6193      	str	r3, [r2, #24]
 800135a:	4b28      	ldr	r3, [pc, #160]	@ (80013fc <SystemClock_Config+0xd8>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8001366:	bf00      	nop
 8001368:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <SystemClock_Config+0xd8>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001374:	d1f8      	bne.n	8001368 <SystemClock_Config+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001376:	2301      	movs	r3, #1
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001380:	2302      	movs	r3, #2
 8001382:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001384:	2302      	movs	r3, #2
 8001386:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 8001388:	2302      	movs	r3, #2
 800138a:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 44;
 800138c:	232c      	movs	r3, #44	@ 0x2c
 800138e:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8001390:	2301      	movs	r3, #1
 8001392:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001394:	2302      	movs	r3, #2
 8001396:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001398:	2302      	movs	r3, #2
 800139a:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800139c:	230c      	movs	r3, #12
 800139e:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 ffa1 	bl	80052f4 <HAL_RCC_OscConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0x98>
	{
		Error_Handler();
 80013b8:	f000 f9bc 	bl	8001734 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013bc:	233f      	movs	r3, #63	@ 0x3f
 80013be:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c0:	2303      	movs	r3, #3
 80013c2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013c8:	2308      	movs	r3, #8
 80013ca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013cc:	2340      	movs	r3, #64	@ 0x40
 80013ce:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013d0:	2340      	movs	r3, #64	@ 0x40
 80013d2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013da:	2340      	movs	r3, #64	@ 0x40
 80013dc:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2103      	movs	r1, #3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f004 fb60 	bl	8005aa8 <HAL_RCC_ClockConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0xce>
	{
		Error_Handler();
 80013ee:	f000 f9a1 	bl	8001734 <Error_Handler>
	}
}
 80013f2:	bf00      	nop
 80013f4:	3770      	adds	r7, #112	@ 0x70
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	58024800 	.word	0x58024800

08001400 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*) &ch, 1, 0xFFFF);
 8001408:	1d39      	adds	r1, r7, #4
 800140a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800140e:	2201      	movs	r2, #1
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <__io_putchar+0x20>)
 8001412:	f007 fa25 	bl	8008860 <HAL_UART_Transmit>
	return ch;
 8001416:	687b      	ldr	r3, [r7, #4]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	240005c0 	.word	0x240005c0

08001424 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af04      	add	r7, sp, #16
 800142a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART9)                          // 判断中断�?
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a50      	ldr	r2, [pc, #320]	@ (8001574 <HAL_UART_RxCpltCallback+0x150>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d10a      	bne.n	800144c <HAL_UART_RxCpltCallback+0x28>
	{
		Data_Analyse(data);                                // 处理Action数据
 8001436:	4b50      	ldr	r3, [pc, #320]	@ (8001578 <HAL_UART_RxCpltCallback+0x154>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f009 ffba 	bl	800b3b4 <Data_Analyse>
		HAL_UART_Receive_IT(&huart9, &data, 1);            // 继续中断回调
 8001440:	2201      	movs	r2, #1
 8001442:	494d      	ldr	r1, [pc, #308]	@ (8001578 <HAL_UART_RxCpltCallback+0x154>)
 8001444:	484d      	ldr	r0, [pc, #308]	@ (800157c <HAL_UART_RxCpltCallback+0x158>)
 8001446:	f007 fb61 	bl	8008b0c <HAL_UART_Receive_IT>
 800144a:	e090      	b.n	800156e <HAL_UART_RxCpltCallback+0x14a>

	}
	else if (huart->Instance == UART4)                   // 判断中断�?
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a4b      	ldr	r2, [pc, #300]	@ (8001580 <HAL_UART_RxCpltCallback+0x15c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d10a      	bne.n	800146c <HAL_UART_RxCpltCallback+0x48>
	{
		Check_Flag(Screen_data);                       	   // 处理串口屏数�?
 8001456:	4b4b      	ldr	r3, [pc, #300]	@ (8001584 <HAL_UART_RxCpltCallback+0x160>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f00c fb9a 	bl	800db94 <Check_Flag>
		HAL_UART_Receive_IT(&huart4, &Screen_data, 1);     // 继续中断回调
 8001460:	2201      	movs	r2, #1
 8001462:	4948      	ldr	r1, [pc, #288]	@ (8001584 <HAL_UART_RxCpltCallback+0x160>)
 8001464:	4848      	ldr	r0, [pc, #288]	@ (8001588 <HAL_UART_RxCpltCallback+0x164>)
 8001466:	f007 fb51 	bl	8008b0c <HAL_UART_Receive_IT>
 800146a:	e080      	b.n	800156e <HAL_UART_RxCpltCallback+0x14a>
	}

	else if (huart->Instance == USART10)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a46      	ldr	r2, [pc, #280]	@ (800158c <HAL_UART_RxCpltCallback+0x168>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d17b      	bne.n	800156e <HAL_UART_RxCpltCallback+0x14a>
	{
		//static uint8_t RxState = 0;

		RxBuffer[Uart10_Rx_Cnt++] = aRxBuffer;
 8001476:	4b46      	ldr	r3, [pc, #280]	@ (8001590 <HAL_UART_RxCpltCallback+0x16c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	b2d1      	uxtb	r1, r2
 800147e:	4a44      	ldr	r2, [pc, #272]	@ (8001590 <HAL_UART_RxCpltCallback+0x16c>)
 8001480:	7011      	strb	r1, [r2, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4b43      	ldr	r3, [pc, #268]	@ (8001594 <HAL_UART_RxCpltCallback+0x170>)
 8001486:	7819      	ldrb	r1, [r3, #0]
 8001488:	4b43      	ldr	r3, [pc, #268]	@ (8001598 <HAL_UART_RxCpltCallback+0x174>)
 800148a:	5499      	strb	r1, [r3, r2]
			memset(RxBuffer, 0, sizeof(RxBuffer));
			Uart10_Rx_Cnt = 0;
			return;
		}

		if (aRxBuffer == 'd')
 800148c:	4b41      	ldr	r3, [pc, #260]	@ (8001594 <HAL_UART_RxCpltCallback+0x170>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b64      	cmp	r3, #100	@ 0x64
 8001492:	d12e      	bne.n	80014f2 <HAL_UART_RxCpltCallback+0xce>
		{ // 如果包尾�?'d'，说明是物料和圆环点位数�?
			char *start = strchr(RxBuffer, 'a');
 8001494:	2161      	movs	r1, #97	@ 0x61
 8001496:	4840      	ldr	r0, [pc, #256]	@ (8001598 <HAL_UART_RxCpltCallback+0x174>)
 8001498:	f00e fa8f 	bl	800f9ba <strchr>
 800149c:	6178      	str	r0, [r7, #20]
			char *end = strchr(RxBuffer, 'd');
 800149e:	2164      	movs	r1, #100	@ 0x64
 80014a0:	483d      	ldr	r0, [pc, #244]	@ (8001598 <HAL_UART_RxCpltCallback+0x174>)
 80014a2:	f00e fa8a 	bl	800f9ba <strchr>
 80014a6:	6138      	str	r0, [r7, #16]

			if (start != NULL && end != NULL && end > start)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d021      	beq.n	80014f2 <HAL_UART_RxCpltCallback+0xce>
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01e      	beq.n	80014f2 <HAL_UART_RxCpltCallback+0xce>
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d91a      	bls.n	80014f2 <HAL_UART_RxCpltCallback+0xce>
			{
				*end = '\0';
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
				if (sscanf(start + 1, "%f,%f,%d", &x, &y, &colour) == 3)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	1c58      	adds	r0, r3, #1
 80014c6:	4b35      	ldr	r3, [pc, #212]	@ (800159c <HAL_UART_RxCpltCallback+0x178>)
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	4b35      	ldr	r3, [pc, #212]	@ (80015a0 <HAL_UART_RxCpltCallback+0x17c>)
 80014cc:	4a35      	ldr	r2, [pc, #212]	@ (80015a4 <HAL_UART_RxCpltCallback+0x180>)
 80014ce:	4936      	ldr	r1, [pc, #216]	@ (80015a8 <HAL_UART_RxCpltCallback+0x184>)
 80014d0:	f00e f9fc 	bl	800f8cc <siscanf>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d102      	bne.n	80014e0 <HAL_UART_RxCpltCallback+0xbc>
				{
					// 数据解析成功
					Point_Flag = 1;
 80014da:	4b34      	ldr	r3, [pc, #208]	@ (80015ac <HAL_UART_RxCpltCallback+0x188>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
				}

				// 清空缓冲�?
				memset(RxBuffer, 0, sizeof(RxBuffer));
 80014e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014e4:	2100      	movs	r1, #0
 80014e6:	482c      	ldr	r0, [pc, #176]	@ (8001598 <HAL_UART_RxCpltCallback+0x174>)
 80014e8:	f00e fa5f 	bl	800f9aa <memset>
				Uart10_Rx_Cnt = 0;
 80014ec:	4b28      	ldr	r3, [pc, #160]	@ (8001590 <HAL_UART_RxCpltCallback+0x16c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
			}
		}

		if (aRxBuffer == 'b')
 80014f2:	4b28      	ldr	r3, [pc, #160]	@ (8001594 <HAL_UART_RxCpltCallback+0x170>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b62      	cmp	r3, #98	@ 0x62
 80014f8:	d134      	bne.n	8001564 <HAL_UART_RxCpltCallback+0x140>
		{ // 如果包尾�?'b'，说明是二维码数�?
			char *start = strchr(RxBuffer, 'c');
 80014fa:	2163      	movs	r1, #99	@ 0x63
 80014fc:	4826      	ldr	r0, [pc, #152]	@ (8001598 <HAL_UART_RxCpltCallback+0x174>)
 80014fe:	f00e fa5c 	bl	800f9ba <strchr>
 8001502:	60f8      	str	r0, [r7, #12]
			char *end = strchr(RxBuffer, 'b');
 8001504:	2162      	movs	r1, #98	@ 0x62
 8001506:	4824      	ldr	r0, [pc, #144]	@ (8001598 <HAL_UART_RxCpltCallback+0x174>)
 8001508:	f00e fa57 	bl	800f9ba <strchr>
 800150c:	60b8      	str	r0, [r7, #8]

			if (start != NULL && end != NULL && end > start)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d027      	beq.n	8001564 <HAL_UART_RxCpltCallback+0x140>
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d024      	beq.n	8001564 <HAL_UART_RxCpltCallback+0x140>
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	429a      	cmp	r2, r3
 8001520:	d920      	bls.n	8001564 <HAL_UART_RxCpltCallback+0x140>
			{
				*end = '\0';
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
//				for (int i = 0; i < 6; i++) {
//					if (sscanf(start +1+ i, "%d", &QR_data[i])) {
				if (sscanf(start + 1, "%d,%d,%d,%d,%d,%d", &QR_data[0],
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1c58      	adds	r0, r3, #1
 800152c:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <HAL_UART_RxCpltCallback+0x18c>)
 800152e:	9303      	str	r3, [sp, #12]
 8001530:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <HAL_UART_RxCpltCallback+0x190>)
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <HAL_UART_RxCpltCallback+0x194>)
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	4b20      	ldr	r3, [pc, #128]	@ (80015bc <HAL_UART_RxCpltCallback+0x198>)
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <HAL_UART_RxCpltCallback+0x19c>)
 800153e:	4a21      	ldr	r2, [pc, #132]	@ (80015c4 <HAL_UART_RxCpltCallback+0x1a0>)
 8001540:	4921      	ldr	r1, [pc, #132]	@ (80015c8 <HAL_UART_RxCpltCallback+0x1a4>)
 8001542:	f00e f9c3 	bl	800f8cc <siscanf>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <HAL_UART_RxCpltCallback+0x12e>
						&QR_data[1], &QR_data[2], &QR_data[3], &QR_data[4],
						&QR_data[5]))
				{
					// 数据解析成功
//						if(i==5) QR_Flag =  1;
					QR_Flag = 1;
 800154c:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <HAL_UART_RxCpltCallback+0x1a8>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]
				}
//				}
				// 清空缓冲�?
				memset(RxBuffer, 0, sizeof(RxBuffer));
 8001552:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001556:	2100      	movs	r1, #0
 8001558:	480f      	ldr	r0, [pc, #60]	@ (8001598 <HAL_UART_RxCpltCallback+0x174>)
 800155a:	f00e fa26 	bl	800f9aa <memset>
				Uart10_Rx_Cnt = 0;
 800155e:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <HAL_UART_RxCpltCallback+0x16c>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
			}
		}
		// 重新启动接收
		HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 8001564:	2201      	movs	r2, #1
 8001566:	490b      	ldr	r1, [pc, #44]	@ (8001594 <HAL_UART_RxCpltCallback+0x170>)
 8001568:	4819      	ldr	r0, [pc, #100]	@ (80015d0 <HAL_UART_RxCpltCallback+0x1ac>)
 800156a:	f007 facf 	bl	8008b0c <HAL_UART_Receive_IT>
//	else if (huart->Instance == USART10)                            // 判断中断
//	{
//		Recive_Joydata(Joy_data);                             	// 处理Joy_data数据
//		HAL_UART_Receive_IT(&huart10, &Joy_data, 1);       // 继续中断回调
//	}
}
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40011800 	.word	0x40011800
 8001578:	2400034b 	.word	0x2400034b
 800157c:	24000810 	.word	0x24000810
 8001580:	40004c00 	.word	0x40004c00
 8001584:	2400034c 	.word	0x2400034c
 8001588:	240005c0 	.word	0x240005c0
 800158c:	40011c00 	.word	0x40011c00
 8001590:	24000450 	.word	0x24000450
 8001594:	2400034e 	.word	0x2400034e
 8001598:	24000350 	.word	0x24000350
 800159c:	2400047c 	.word	0x2400047c
 80015a0:	24000458 	.word	0x24000458
 80015a4:	24000454 	.word	0x24000454
 80015a8:	08012b34 	.word	0x08012b34
 80015ac:	2400045c 	.word	0x2400045c
 80015b0:	24000474 	.word	0x24000474
 80015b4:	24000470 	.word	0x24000470
 80015b8:	2400046c 	.word	0x2400046c
 80015bc:	24000468 	.word	0x24000468
 80015c0:	24000464 	.word	0x24000464
 80015c4:	24000460 	.word	0x24000460
 80015c8:	08012b40 	.word	0x08012b40
 80015cc:	24000484 	.word	0x24000484
 80015d0:	24000a60 	.word	0x24000a60

080015d4 <HAL_TIM_PeriodElapsedCallback>:
extern uint16_t time_tx;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a30      	ldr	r2, [pc, #192]	@ (80016a0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d106      	bne.n	80015f2 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{

//		X_out = X_Ctrl(&XPID, x_goal);
//		Y_out = Y_Ctrl(&YPID, y_goal);
//		A_out = A_Ctrl(&APID, a_goal);
		Action_Show();
 80015e4:	f00c f98e 	bl	800d904 <Action_Show>
		QR_Show();
 80015e8:	f00c fa08 	bl	800d9fc <QR_Show>
		Point_Show();
 80015ec:	f00c fa42 	bl	800da74 <Point_Show>
 80015f0:	e052      	b.n	8001698 <HAL_TIM_PeriodElapsedCallback+0xc4>

	}
	else if (htim == &htim3)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a2b      	ldr	r2, [pc, #172]	@ (80016a4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d126      	bne.n	8001648 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		TX_X_out = Tx_X_Ctrl(&TXPID, tx_target);
 80015fa:	4b2b      	ldr	r3, [pc, #172]	@ (80016a8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	eeb0 0a67 	vmov.f32	s0, s15
 8001604:	4829      	ldr	r0, [pc, #164]	@ (80016ac <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001606:	f00a fd29 	bl	800c05c <Tx_X_Ctrl>
 800160a:	4603      	mov	r3, r0
 800160c:	ee07 3a90 	vmov	s15, r3
 8001610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001614:	4b26      	ldr	r3, [pc, #152]	@ (80016b0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001616:	edc3 7a00 	vstr	s15, [r3]
		TX_Y_out = Tx_Y_Ctrl(&TYPID, ty_target);
 800161a:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	eeb0 0a67 	vmov.f32	s0, s15
 8001624:	4824      	ldr	r0, [pc, #144]	@ (80016b8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001626:	f00a fdbf 	bl	800c1a8 <Tx_Y_Ctrl>
 800162a:	4603      	mov	r3, r0
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001634:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001636:	edc3 7a00 	vstr	s15, [r3]
		time_tx++;
 800163a:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	b29a      	uxth	r2, r3
 8001642:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001644:	801a      	strh	r2, [r3, #0]
 8001646:	e027      	b.n	8001698 <HAL_TIM_PeriodElapsedCallback+0xc4>
	}
	else if (htim == &htim5)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a1e      	ldr	r2, [pc, #120]	@ (80016c4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d109      	bne.n	8001664 <HAL_TIM_PeriodElapsedCallback+0x90>
	{

		if (time5_jiancha != 0)
 8001650:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d01f      	beq.n	8001698 <HAL_TIM_PeriodElapsedCallback+0xc4>
			time5_jiancha--;
 8001658:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	4a1a      	ldr	r2, [pc, #104]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e019      	b.n	8001698 <HAL_TIM_PeriodElapsedCallback+0xc4>
	}
//	步进电机阻塞操作回调
	else if (htim == &htim12)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a19      	ldr	r2, [pc, #100]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d115      	bne.n	8001698 <HAL_TIM_PeriodElapsedCallback+0xc4>
	{
		if(Apply_Chock == true)
 800166c:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d011      	beq.n	8001698 <HAL_TIM_PeriodElapsedCallback+0xc4>
		{
			if(Base_Data == true)
 8001674:	4b17      	ldr	r3, [pc, #92]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00c      	beq.n	8001696 <HAL_TIM_PeriodElapsedCallback+0xc2>
			{
				Choke_Flag = false;
 800167c:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
				Apply_Chock = false;
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim12);
 8001688:	4810      	ldr	r0, [pc, #64]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800168a:	f006 fc39 	bl	8007f00 <HAL_TIM_Base_Stop_IT>
				Base_Data = false;
 800168e:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	e000      	b.n	8001698 <HAL_TIM_PeriodElapsedCallback+0xc4>
			}
			else
			{
				return ;
 8001696:	bf00      	nop
			}
		}
//		根据查询情况来确定是否要继续阻塞 Choke_Flag
	}
}
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	24000490 	.word	0x24000490
 80016a4:	240004dc 	.word	0x240004dc
 80016a8:	24000000 	.word	0x24000000
 80016ac:	24000bcc 	.word	0x24000bcc
 80016b0:	24000c24 	.word	0x24000c24
 80016b4:	24000004 	.word	0x24000004
 80016b8:	24000bf8 	.word	0x24000bf8
 80016bc:	24000c28 	.word	0x24000c28
 80016c0:	24000c34 	.word	0x24000c34
 80016c4:	24000528 	.word	0x24000528
 80016c8:	24000c30 	.word	0x24000c30
 80016cc:	24000574 	.word	0x24000574
 80016d0:	24000c2d 	.word	0x24000c2d
 80016d4:	24000349 	.word	0x24000349
 80016d8:	24000c2c 	.word	0x24000c2c

080016dc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct =
 80016e2:	463b      	mov	r3, r7
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
	{ 0 };

	/* Disables the MPU */
	HAL_MPU_Disable();
 80016ee:	f001 fc59 	bl	8002fa4 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016f2:	2301      	movs	r3, #1
 80016f4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80016fe:	231f      	movs	r3, #31
 8001700:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8001702:	2387      	movs	r3, #135	@ 0x87
 8001704:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001706:	2300      	movs	r3, #0
 8001708:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800170a:	2300      	movs	r3, #0
 800170c:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800170e:	2301      	movs	r3, #1
 8001710:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001712:	2301      	movs	r3, #1
 8001714:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800171e:	463b      	mov	r3, r7
 8001720:	4618      	mov	r0, r3
 8001722:	f001 fc77 	bl	8003014 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001726:	2004      	movs	r0, #4
 8001728:	f001 fc54 	bl	8002fd4 <HAL_MPU_Enable>

}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <Error_Handler+0x8>

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <HAL_MspInit+0x30>)
 8001748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800174c:	4a08      	ldr	r2, [pc, #32]	@ (8001770 <HAL_MspInit+0x30>)
 800174e:	f043 0302 	orr.w	r3, r3, #2
 8001752:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_MspInit+0x30>)
 8001758:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	58024400 	.word	0x58024400

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <NMI_Handler+0x4>

0800177c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <HardFault_Handler+0x4>

08001784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <MemManage_Handler+0x4>

0800178c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <UsageFault_Handler+0x4>

0800179c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ca:	f001 fa97 	bl	8002cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <FDCAN1_IT0_IRQHandler+0x10>)
 80017da:	f002 fead 	bl	8004538 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	240002a0 	.word	0x240002a0

080017e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <TIM2_IRQHandler+0x10>)
 80017ee:	f006 fbb6 	bl	8007f5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	24000490 	.word	0x24000490

080017fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <TIM3_IRQHandler+0x10>)
 8001802:	f006 fbac 	bl	8007f5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	240004dc 	.word	0x240004dc

08001810 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <USART2_IRQHandler+0x10>)
 8001816:	f007 f9c5 	bl	8008ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	240008a4 	.word	0x240008a4

08001824 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <USART3_IRQHandler+0x10>)
 800182a:	f007 f9bb 	bl	8008ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	24000938 	.word	0x24000938

08001838 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800183e:	f006 fb8e 	bl	8007f5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	24000574 	.word	0x24000574

0800184c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <TIM5_IRQHandler+0x10>)
 8001852:	f006 fb84 	bl	8007f5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	24000528 	.word	0x24000528

08001860 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <UART4_IRQHandler+0x10>)
 8001866:	f007 f99d 	bl	8008ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	240005c0 	.word	0x240005c0

08001874 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <UART7_IRQHandler+0x10>)
 800187a:	f007 f993 	bl	8008ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	240006e8 	.word	0x240006e8

08001888 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800188c:	4802      	ldr	r0, [pc, #8]	@ (8001898 <UART8_IRQHandler+0x10>)
 800188e:	f007 f989 	bl	8008ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2400077c 	.word	0x2400077c

0800189c <UART9_IRQHandler>:

/**
  * @brief This function handles UART9 global interrupt.
  */
void UART9_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART9_IRQn 0 */

  /* USER CODE END UART9_IRQn 0 */
  HAL_UART_IRQHandler(&huart9);
 80018a0:	4802      	ldr	r0, [pc, #8]	@ (80018ac <UART9_IRQHandler+0x10>)
 80018a2:	f007 f97f 	bl	8008ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART9_IRQn 1 */

  /* USER CODE END UART9_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	24000810 	.word	0x24000810

080018b0 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 80018b4:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <USART10_IRQHandler+0x10>)
 80018b6:	f007 f975 	bl	8008ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	24000a60 	.word	0x24000a60

080018c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
	return 1;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_kill>:

int _kill(int pid, int sig)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80018de:	f00e f8e5 	bl	800faac <__errno>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2216      	movs	r2, #22
 80018e6:	601a      	str	r2, [r3, #0]
	return -1;
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_exit>:

void _exit(int status)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ffe7 	bl	80018d4 <_kill>
	while (1)
 8001906:	bf00      	nop
 8001908:	e7fd      	b.n	8001906 <_exit+0x12>

0800190a <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e00a      	b.n	8001932 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800191c:	f3af 8000 	nop.w
 8001920:	4601      	mov	r1, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	60ba      	str	r2, [r7, #8]
 8001928:	b2ca      	uxtb	r2, r1
 800192a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	3301      	adds	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	dbf0      	blt.n	800191c <_read+0x12>
	}

	return len;
 800193a:	687b      	ldr	r3, [r7, #4]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	e009      	b.n	800196a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	60ba      	str	r2, [r7, #8]
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fd4e 	bl	8001400 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3301      	adds	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	429a      	cmp	r2, r3
 8001970:	dbf1      	blt.n	8001956 <_write+0x12>
	}
	return len;
 8001972:	687b      	ldr	r3, [r7, #4]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_close>:

int _close(int file)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019a4:	605a      	str	r2, [r3, #4]
	return 0;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_isatty>:

int _isatty(int file)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80019bc:	2301      	movs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80019ec:	4a14      	ldr	r2, [pc, #80]	@ (8001a40 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80019ee:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80019f8:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <_sbrk+0x64>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	@ (8001a4c <_sbrk+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d207      	bcs.n	8001a24 <_sbrk+0x40>
		errno = ENOMEM;
 8001a14:	f00e f84a 	bl	800faac <__errno>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	e009      	b.n	8001a38 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001a24:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a05      	ldr	r2, [pc, #20]	@ (8001a48 <_sbrk+0x64>)
 8001a34:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	24050000 	.word	0x24050000
 8001a44:	00000400 	.word	0x00000400
 8001a48:	2400048c 	.word	0x2400048c
 8001a4c:	24000e68 	.word	0x24000e68

08001a50 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001a54:	4b32      	ldr	r3, [pc, #200]	@ (8001b20 <SystemInit+0xd0>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a5a:	4a31      	ldr	r2, [pc, #196]	@ (8001b20 <SystemInit+0xd0>)
 8001a5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a64:	4b2f      	ldr	r3, [pc, #188]	@ (8001b24 <SystemInit+0xd4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	2b06      	cmp	r3, #6
 8001a6e:	d807      	bhi.n	8001a80 <SystemInit+0x30>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001a70:	4b2c      	ldr	r3, [pc, #176]	@ (8001b24 <SystemInit+0xd4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 030f 	bic.w	r3, r3, #15
 8001a78:	4a2a      	ldr	r2, [pc, #168]	@ (8001b24 <SystemInit+0xd4>)
 8001a7a:	f043 0307 	orr.w	r3, r3, #7
 8001a7e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001a80:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <SystemInit+0xd8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a28      	ldr	r2, [pc, #160]	@ (8001b28 <SystemInit+0xd8>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001a8c:	4b26      	ldr	r3, [pc, #152]	@ (8001b28 <SystemInit+0xd8>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001a92:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <SystemInit+0xd8>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4924      	ldr	r1, [pc, #144]	@ (8001b28 <SystemInit+0xd8>)
 8001a98:	4b24      	ldr	r3, [pc, #144]	@ (8001b2c <SystemInit+0xdc>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a9e:	4b21      	ldr	r3, [pc, #132]	@ (8001b24 <SystemInit+0xd4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <SystemInit+0x6a>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b24 <SystemInit+0xd4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 030f 	bic.w	r3, r3, #15
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b24 <SystemInit+0xd4>)
 8001ab4:	f043 0307 	orr.w	r3, r3, #7
 8001ab8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001aba:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <SystemInit+0xd8>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001ac0:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <SystemInit+0xd8>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001ac6:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <SystemInit+0xd8>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001acc:	4b16      	ldr	r3, [pc, #88]	@ (8001b28 <SystemInit+0xd8>)
 8001ace:	4a18      	ldr	r2, [pc, #96]	@ (8001b30 <SystemInit+0xe0>)
 8001ad0:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001ad2:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <SystemInit+0xd8>)
 8001ad4:	4a17      	ldr	r2, [pc, #92]	@ (8001b34 <SystemInit+0xe4>)
 8001ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001ad8:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <SystemInit+0xd8>)
 8001ada:	4a17      	ldr	r2, [pc, #92]	@ (8001b38 <SystemInit+0xe8>)
 8001adc:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8001ade:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <SystemInit+0xd8>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001ae4:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <SystemInit+0xd8>)
 8001ae6:	4a14      	ldr	r2, [pc, #80]	@ (8001b38 <SystemInit+0xe8>)
 8001ae8:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <SystemInit+0xd8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8001af0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b28 <SystemInit+0xd8>)
 8001af2:	4a11      	ldr	r2, [pc, #68]	@ (8001b38 <SystemInit+0xe8>)
 8001af4:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001af6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <SystemInit+0xd8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <SystemInit+0xd8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a09      	ldr	r2, [pc, #36]	@ (8001b28 <SystemInit+0xd8>)
 8001b02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b06:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001b08:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <SystemInit+0xd8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	661a      	str	r2, [r3, #96]	@ 0x60
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <SystemInit+0xec>)
 8001b10:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001b14:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00
 8001b24:	52002000 	.word	0x52002000
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b30:	02020200 	.word	0x02020200
 8001b34:	01ff0000 	.word	0x01ff0000
 8001b38:	01010280 	.word	0x01010280
 8001b3c:	52004000 	.word	0x52004000

08001b40 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001b60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 550-1;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001b68:	f240 2225 	movw	r2, #549	@ 0x225
 8001b6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001b74:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001b76:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001b7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b82:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001b84:	2280      	movs	r2, #128	@ 0x80
 8001b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b88:	4813      	ldr	r0, [pc, #76]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001b8a:	f006 f8db 	bl	8007d44 <HAL_TIM_Base_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001b94:	f7ff fdce 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b9e:	f107 0310 	add.w	r3, r7, #16
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001ba6:	f006 fae1 	bl	800816c <HAL_TIM_ConfigClockSource>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001bb0:	f7ff fdc0 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	@ (8001bd8 <MX_TIM2_Init+0x98>)
 8001bc2:	f006 fd43 	bl	800864c <HAL_TIMEx_MasterConfigSynchronization>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001bcc:	f7ff fdb2 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	24000490 	.word	0x24000490

08001bdc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <MX_TIM3_Init+0x98>)
 8001bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c78 <MX_TIM3_Init+0x9c>)
 8001bfe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 550-1;
 8001c00:	4b1c      	ldr	r3, [pc, #112]	@ (8001c74 <MX_TIM3_Init+0x98>)
 8001c02:	f240 2225 	movw	r2, #549	@ 0x225
 8001c06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <MX_TIM3_Init+0x98>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <MX_TIM3_Init+0x98>)
 8001c10:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001c14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c16:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <MX_TIM3_Init+0x98>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1c:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <MX_TIM3_Init+0x98>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c22:	4814      	ldr	r0, [pc, #80]	@ (8001c74 <MX_TIM3_Init+0x98>)
 8001c24:	f006 f88e 	bl	8007d44 <HAL_TIM_Base_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001c2e:	f7ff fd81 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480d      	ldr	r0, [pc, #52]	@ (8001c74 <MX_TIM3_Init+0x98>)
 8001c40:	f006 fa94 	bl	800816c <HAL_TIM_ConfigClockSource>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001c4a:	f7ff fd73 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	@ (8001c74 <MX_TIM3_Init+0x98>)
 8001c5c:	f006 fcf6 	bl	800864c <HAL_TIMEx_MasterConfigSynchronization>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001c66:	f7ff fd65 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	3720      	adds	r7, #32
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	240004dc 	.word	0x240004dc
 8001c78:	40000400 	.word	0x40000400

08001c7c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c82:	f107 0310 	add.w	r3, r7, #16
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <MX_TIM5_Init+0x98>)
 8001c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d18 <MX_TIM5_Init+0x9c>)
 8001c9e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 550-1;
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <MX_TIM5_Init+0x98>)
 8001ca2:	f240 2225 	movw	r2, #549	@ 0x225
 8001ca6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d14 <MX_TIM5_Init+0x98>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8001cae:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <MX_TIM5_Init+0x98>)
 8001cb0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001cb4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <MX_TIM5_Init+0x98>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <MX_TIM5_Init+0x98>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001cc2:	4814      	ldr	r0, [pc, #80]	@ (8001d14 <MX_TIM5_Init+0x98>)
 8001cc4:	f006 f83e 	bl	8007d44 <HAL_TIM_Base_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001cce:	f7ff fd31 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480d      	ldr	r0, [pc, #52]	@ (8001d14 <MX_TIM5_Init+0x98>)
 8001ce0:	f006 fa44 	bl	800816c <HAL_TIM_ConfigClockSource>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001cea:	f7ff fd23 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4806      	ldr	r0, [pc, #24]	@ (8001d14 <MX_TIM5_Init+0x98>)
 8001cfc:	f006 fca6 	bl	800864c <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001d06:	f7ff fd15 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	3720      	adds	r7, #32
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	24000528 	.word	0x24000528
 8001d18:	40000c00 	.word	0x40000c00

08001d1c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <MX_TIM12_Init+0x94>)
 8001d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001db4 <MX_TIM12_Init+0x98>)
 8001d3e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 65535;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	@ (8001db0 <MX_TIM12_Init+0x94>)
 8001d42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d46:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <MX_TIM12_Init+0x94>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19;
 8001d4e:	4b18      	ldr	r3, [pc, #96]	@ (8001db0 <MX_TIM12_Init+0x94>)
 8001d50:	2213      	movs	r2, #19
 8001d52:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d54:	4b16      	ldr	r3, [pc, #88]	@ (8001db0 <MX_TIM12_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5a:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <MX_TIM12_Init+0x94>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001d60:	4813      	ldr	r0, [pc, #76]	@ (8001db0 <MX_TIM12_Init+0x94>)
 8001d62:	f005 ffef 	bl	8007d44 <HAL_TIM_Base_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM12_Init+0x54>
  {
    Error_Handler();
 8001d6c:	f7ff fce2 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001d76:	f107 0310 	add.w	r3, r7, #16
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <MX_TIM12_Init+0x94>)
 8001d7e:	f006 f9f5 	bl	800816c <HAL_TIM_ConfigClockSource>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM12_Init+0x70>
  {
    Error_Handler();
 8001d88:	f7ff fcd4 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	@ (8001db0 <MX_TIM12_Init+0x94>)
 8001d9a:	f006 fc57 	bl	800864c <HAL_TIMEx_MasterConfigSynchronization>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8001da4:	f7ff fcc6 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	24000574 	.word	0x24000574
 8001db4:	40001800 	.word	0x40001800

08001db8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc8:	d117      	bne.n	8001dfa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dca:	4b39      	ldr	r3, [pc, #228]	@ (8001eb0 <HAL_TIM_Base_MspInit+0xf8>)
 8001dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dd0:	4a37      	ldr	r2, [pc, #220]	@ (8001eb0 <HAL_TIM_Base_MspInit+0xf8>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dda:	4b35      	ldr	r3, [pc, #212]	@ (8001eb0 <HAL_TIM_Base_MspInit+0xf8>)
 8001ddc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 11, 0);
 8001de8:	2200      	movs	r2, #0
 8001dea:	210b      	movs	r1, #11
 8001dec:	201c      	movs	r0, #28
 8001dee:	f001 f8a4 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001df2:	201c      	movs	r0, #28
 8001df4:	f001 f8bb 	bl	8002f6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001df8:	e055      	b.n	8001ea6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8001eb4 <HAL_TIM_Base_MspInit+0xfc>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d117      	bne.n	8001e34 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e04:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e0a:	4a29      	ldr	r2, [pc, #164]	@ (8001eb0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e14:	4b26      	ldr	r3, [pc, #152]	@ (8001eb0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2102      	movs	r1, #2
 8001e26:	201d      	movs	r0, #29
 8001e28:	f001 f887 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e2c:	201d      	movs	r0, #29
 8001e2e:	f001 f89e 	bl	8002f6e <HAL_NVIC_EnableIRQ>
}
 8001e32:	e038      	b.n	8001ea6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM5)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb8 <HAL_TIM_Base_MspInit+0x100>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d117      	bne.n	8001e6e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e44:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e46:	f043 0308 	orr.w	r3, r3, #8
 8001e4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e4e:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 13, 0);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	210d      	movs	r1, #13
 8001e60:	2032      	movs	r0, #50	@ 0x32
 8001e62:	f001 f86a 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e66:	2032      	movs	r0, #50	@ 0x32
 8001e68:	f001 f881 	bl	8002f6e <HAL_NVIC_EnableIRQ>
}
 8001e6c:	e01b      	b.n	8001ea6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM12)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a12      	ldr	r2, [pc, #72]	@ (8001ebc <HAL_TIM_Base_MspInit+0x104>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d116      	bne.n	8001ea6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001e78:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e88:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 12, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	210c      	movs	r1, #12
 8001e9a:	202b      	movs	r0, #43	@ 0x2b
 8001e9c:	f001 f84d 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001ea0:	202b      	movs	r0, #43	@ 0x2b
 8001ea2:	f001 f864 	bl	8002f6e <HAL_NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	58024400 	.word	0x58024400
 8001eb4:	40000400 	.word	0x40000400
 8001eb8:	40000c00 	.word	0x40000c00
 8001ebc:	40001800 	.word	0x40001800

08001ec0 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
UART_HandleTypeDef huart10;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ec4:	4b22      	ldr	r3, [pc, #136]	@ (8001f50 <MX_UART4_Init+0x90>)
 8001ec6:	4a23      	ldr	r2, [pc, #140]	@ (8001f54 <MX_UART4_Init+0x94>)
 8001ec8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001eca:	4b21      	ldr	r3, [pc, #132]	@ (8001f50 <MX_UART4_Init+0x90>)
 8001ecc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ed0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f50 <MX_UART4_Init+0x90>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f50 <MX_UART4_Init+0x90>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ede:	4b1c      	ldr	r3, [pc, #112]	@ (8001f50 <MX_UART4_Init+0x90>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f50 <MX_UART4_Init+0x90>)
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eea:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <MX_UART4_Init+0x90>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef0:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <MX_UART4_Init+0x90>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ef6:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <MX_UART4_Init+0x90>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001efc:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <MX_UART4_Init+0x90>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f02:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <MX_UART4_Init+0x90>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f08:	4811      	ldr	r0, [pc, #68]	@ (8001f50 <MX_UART4_Init+0x90>)
 8001f0a:	f006 fc59 	bl	80087c0 <HAL_UART_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001f14:	f7ff fc0e 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f18:	2100      	movs	r1, #0
 8001f1a:	480d      	ldr	r0, [pc, #52]	@ (8001f50 <MX_UART4_Init+0x90>)
 8001f1c:	f009 f97f 	bl	800b21e <HAL_UARTEx_SetTxFifoThreshold>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001f26:	f7ff fc05 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4808      	ldr	r0, [pc, #32]	@ (8001f50 <MX_UART4_Init+0x90>)
 8001f2e:	f009 f9b4 	bl	800b29a <HAL_UARTEx_SetRxFifoThreshold>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001f38:	f7ff fbfc 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001f3c:	4804      	ldr	r0, [pc, #16]	@ (8001f50 <MX_UART4_Init+0x90>)
 8001f3e:	f009 f935 	bl	800b1ac <HAL_UARTEx_DisableFifoMode>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001f48:	f7ff fbf4 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	240005c0 	.word	0x240005c0
 8001f54:	40004c00 	.word	0x40004c00

08001f58 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f5c:	4b22      	ldr	r3, [pc, #136]	@ (8001fe8 <MX_UART5_Init+0x90>)
 8001f5e:	4a23      	ldr	r2, [pc, #140]	@ (8001fec <MX_UART5_Init+0x94>)
 8001f60:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001f62:	4b21      	ldr	r3, [pc, #132]	@ (8001fe8 <MX_UART5_Init+0x90>)
 8001f64:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f68:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe8 <MX_UART5_Init+0x90>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f70:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe8 <MX_UART5_Init+0x90>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f76:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <MX_UART5_Init+0x90>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe8 <MX_UART5_Init+0x90>)
 8001f7e:	220c      	movs	r2, #12
 8001f80:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f82:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <MX_UART5_Init+0x90>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f88:	4b17      	ldr	r3, [pc, #92]	@ (8001fe8 <MX_UART5_Init+0x90>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f8e:	4b16      	ldr	r3, [pc, #88]	@ (8001fe8 <MX_UART5_Init+0x90>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f94:	4b14      	ldr	r3, [pc, #80]	@ (8001fe8 <MX_UART5_Init+0x90>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f9a:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <MX_UART5_Init+0x90>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001fa0:	4811      	ldr	r0, [pc, #68]	@ (8001fe8 <MX_UART5_Init+0x90>)
 8001fa2:	f006 fc0d 	bl	80087c0 <HAL_UART_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001fac:	f7ff fbc2 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	480d      	ldr	r0, [pc, #52]	@ (8001fe8 <MX_UART5_Init+0x90>)
 8001fb4:	f009 f933 	bl	800b21e <HAL_UARTEx_SetTxFifoThreshold>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001fbe:	f7ff fbb9 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4808      	ldr	r0, [pc, #32]	@ (8001fe8 <MX_UART5_Init+0x90>)
 8001fc6:	f009 f968 	bl	800b29a <HAL_UARTEx_SetRxFifoThreshold>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001fd0:	f7ff fbb0 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001fd4:	4804      	ldr	r0, [pc, #16]	@ (8001fe8 <MX_UART5_Init+0x90>)
 8001fd6:	f009 f8e9 	bl	800b1ac <HAL_UARTEx_DisableFifoMode>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001fe0:	f7ff fba8 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	24000654 	.word	0x24000654
 8001fec:	40005000 	.word	0x40005000

08001ff0 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001ff4:	4b22      	ldr	r3, [pc, #136]	@ (8002080 <MX_UART7_Init+0x90>)
 8001ff6:	4a23      	ldr	r2, [pc, #140]	@ (8002084 <MX_UART7_Init+0x94>)
 8001ff8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	@ (8002080 <MX_UART7_Init+0x90>)
 8001ffc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002000:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002002:	4b1f      	ldr	r3, [pc, #124]	@ (8002080 <MX_UART7_Init+0x90>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002008:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <MX_UART7_Init+0x90>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800200e:	4b1c      	ldr	r3, [pc, #112]	@ (8002080 <MX_UART7_Init+0x90>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002014:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <MX_UART7_Init+0x90>)
 8002016:	220c      	movs	r2, #12
 8002018:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201a:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <MX_UART7_Init+0x90>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002020:	4b17      	ldr	r3, [pc, #92]	@ (8002080 <MX_UART7_Init+0x90>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002026:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <MX_UART7_Init+0x90>)
 8002028:	2200      	movs	r2, #0
 800202a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800202c:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <MX_UART7_Init+0x90>)
 800202e:	2200      	movs	r2, #0
 8002030:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002032:	4b13      	ldr	r3, [pc, #76]	@ (8002080 <MX_UART7_Init+0x90>)
 8002034:	2200      	movs	r2, #0
 8002036:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002038:	4811      	ldr	r0, [pc, #68]	@ (8002080 <MX_UART7_Init+0x90>)
 800203a:	f006 fbc1 	bl	80087c0 <HAL_UART_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8002044:	f7ff fb76 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002048:	2100      	movs	r1, #0
 800204a:	480d      	ldr	r0, [pc, #52]	@ (8002080 <MX_UART7_Init+0x90>)
 800204c:	f009 f8e7 	bl	800b21e <HAL_UARTEx_SetTxFifoThreshold>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8002056:	f7ff fb6d 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800205a:	2100      	movs	r1, #0
 800205c:	4808      	ldr	r0, [pc, #32]	@ (8002080 <MX_UART7_Init+0x90>)
 800205e:	f009 f91c 	bl	800b29a <HAL_UARTEx_SetRxFifoThreshold>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8002068:	f7ff fb64 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800206c:	4804      	ldr	r0, [pc, #16]	@ (8002080 <MX_UART7_Init+0x90>)
 800206e:	f009 f89d 	bl	800b1ac <HAL_UARTEx_DisableFifoMode>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8002078:	f7ff fb5c 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	240006e8 	.word	0x240006e8
 8002084:	40007800 	.word	0x40007800

08002088 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800208c:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <MX_UART8_Init+0x90>)
 800208e:	4a23      	ldr	r2, [pc, #140]	@ (800211c <MX_UART8_Init+0x94>)
 8002090:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002092:	4b21      	ldr	r3, [pc, #132]	@ (8002118 <MX_UART8_Init+0x90>)
 8002094:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002098:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800209a:	4b1f      	ldr	r3, [pc, #124]	@ (8002118 <MX_UART8_Init+0x90>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <MX_UART8_Init+0x90>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80020a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002118 <MX_UART8_Init+0x90>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80020ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002118 <MX_UART8_Init+0x90>)
 80020ae:	220c      	movs	r2, #12
 80020b0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b2:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <MX_UART8_Init+0x90>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b8:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <MX_UART8_Init+0x90>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020be:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <MX_UART8_Init+0x90>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020c4:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <MX_UART8_Init+0x90>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ca:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <MX_UART8_Init+0x90>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80020d0:	4811      	ldr	r0, [pc, #68]	@ (8002118 <MX_UART8_Init+0x90>)
 80020d2:	f006 fb75 	bl	80087c0 <HAL_UART_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80020dc:	f7ff fb2a 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e0:	2100      	movs	r1, #0
 80020e2:	480d      	ldr	r0, [pc, #52]	@ (8002118 <MX_UART8_Init+0x90>)
 80020e4:	f009 f89b 	bl	800b21e <HAL_UARTEx_SetTxFifoThreshold>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80020ee:	f7ff fb21 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020f2:	2100      	movs	r1, #0
 80020f4:	4808      	ldr	r0, [pc, #32]	@ (8002118 <MX_UART8_Init+0x90>)
 80020f6:	f009 f8d0 	bl	800b29a <HAL_UARTEx_SetRxFifoThreshold>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002100:	f7ff fb18 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002104:	4804      	ldr	r0, [pc, #16]	@ (8002118 <MX_UART8_Init+0x90>)
 8002106:	f009 f851 	bl	800b1ac <HAL_UARTEx_DisableFifoMode>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002110:	f7ff fb10 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	2400077c 	.word	0x2400077c
 800211c:	40007c00 	.word	0x40007c00

08002120 <MX_UART9_Init>:
/* UART9 init function */
void MX_UART9_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 8002124:	4b22      	ldr	r3, [pc, #136]	@ (80021b0 <MX_UART9_Init+0x90>)
 8002126:	4a23      	ldr	r2, [pc, #140]	@ (80021b4 <MX_UART9_Init+0x94>)
 8002128:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 115200;
 800212a:	4b21      	ldr	r3, [pc, #132]	@ (80021b0 <MX_UART9_Init+0x90>)
 800212c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002130:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 8002132:	4b1f      	ldr	r3, [pc, #124]	@ (80021b0 <MX_UART9_Init+0x90>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 8002138:	4b1d      	ldr	r3, [pc, #116]	@ (80021b0 <MX_UART9_Init+0x90>)
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 800213e:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <MX_UART9_Init+0x90>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 8002144:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <MX_UART9_Init+0x90>)
 8002146:	220c      	movs	r2, #12
 8002148:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800214a:	4b19      	ldr	r3, [pc, #100]	@ (80021b0 <MX_UART9_Init+0x90>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 8002150:	4b17      	ldr	r3, [pc, #92]	@ (80021b0 <MX_UART9_Init+0x90>)
 8002152:	2200      	movs	r2, #0
 8002154:	61da      	str	r2, [r3, #28]
  huart9.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002156:	4b16      	ldr	r3, [pc, #88]	@ (80021b0 <MX_UART9_Init+0x90>)
 8002158:	2200      	movs	r2, #0
 800215a:	621a      	str	r2, [r3, #32]
  huart9.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800215c:	4b14      	ldr	r3, [pc, #80]	@ (80021b0 <MX_UART9_Init+0x90>)
 800215e:	2200      	movs	r2, #0
 8002160:	625a      	str	r2, [r3, #36]	@ 0x24
  huart9.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002162:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <MX_UART9_Init+0x90>)
 8002164:	2200      	movs	r2, #0
 8002166:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart9) != HAL_OK)
 8002168:	4811      	ldr	r0, [pc, #68]	@ (80021b0 <MX_UART9_Init+0x90>)
 800216a:	f006 fb29 	bl	80087c0 <HAL_UART_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_UART9_Init+0x58>
  {
    Error_Handler();
 8002174:	f7ff fade 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart9, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002178:	2100      	movs	r1, #0
 800217a:	480d      	ldr	r0, [pc, #52]	@ (80021b0 <MX_UART9_Init+0x90>)
 800217c:	f009 f84f 	bl	800b21e <HAL_UARTEx_SetTxFifoThreshold>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_UART9_Init+0x6a>
  {
    Error_Handler();
 8002186:	f7ff fad5 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart9, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800218a:	2100      	movs	r1, #0
 800218c:	4808      	ldr	r0, [pc, #32]	@ (80021b0 <MX_UART9_Init+0x90>)
 800218e:	f009 f884 	bl	800b29a <HAL_UARTEx_SetRxFifoThreshold>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_UART9_Init+0x7c>
  {
    Error_Handler();
 8002198:	f7ff facc 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart9) != HAL_OK)
 800219c:	4804      	ldr	r0, [pc, #16]	@ (80021b0 <MX_UART9_Init+0x90>)
 800219e:	f009 f805 	bl	800b1ac <HAL_UARTEx_DisableFifoMode>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_UART9_Init+0x8c>
  {
    Error_Handler();
 80021a8:	f7ff fac4 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	24000810 	.word	0x24000810
 80021b4:	40011800 	.word	0x40011800

080021b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021bc:	4b39      	ldr	r3, [pc, #228]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 80021be:	4a3a      	ldr	r2, [pc, #232]	@ (80022a8 <MX_USART2_UART_Init+0xf0>)
 80021c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021c2:	4b38      	ldr	r3, [pc, #224]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 80021c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ca:	4b36      	ldr	r3, [pc, #216]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021d0:	4b34      	ldr	r3, [pc, #208]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021d6:	4b33      	ldr	r3, [pc, #204]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021dc:	4b31      	ldr	r3, [pc, #196]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 80021de:	220c      	movs	r2, #12
 80021e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e2:	4b30      	ldr	r3, [pc, #192]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e8:	4b2e      	ldr	r3, [pc, #184]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ee:	4b2d      	ldr	r3, [pc, #180]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021f4:	4b2b      	ldr	r3, [pc, #172]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021fa:	4b2a      	ldr	r3, [pc, #168]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002200:	4828      	ldr	r0, [pc, #160]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 8002202:	f006 fadd 	bl	80087c0 <HAL_UART_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800220c:	f7ff fa92 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002210:	2100      	movs	r1, #0
 8002212:	4824      	ldr	r0, [pc, #144]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 8002214:	f009 f803 	bl	800b21e <HAL_UARTEx_SetTxFifoThreshold>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800221e:	f7ff fa89 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002222:	2100      	movs	r1, #0
 8002224:	481f      	ldr	r0, [pc, #124]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 8002226:	f009 f838 	bl	800b29a <HAL_UARTEx_SetRxFifoThreshold>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002230:	f7ff fa80 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002234:	481b      	ldr	r0, [pc, #108]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 8002236:	f008 ffb9 	bl	800b1ac <HAL_UARTEx_DisableFifoMode>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002240:	f7ff fa78 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  HAL_UART_Transmit(&huart2,unlock_register, sizeof(unlock_register),1000);
 8002244:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002248:	2205      	movs	r2, #5
 800224a:	4918      	ldr	r1, [pc, #96]	@ (80022ac <MX_USART2_UART_Init+0xf4>)
 800224c:	4815      	ldr	r0, [pc, #84]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 800224e:	f006 fb07 	bl	8008860 <HAL_UART_Transmit>
  HAL_Delay(5);
 8002252:	2005      	movs	r0, #5
 8002254:	f000 fd72 	bl	8002d3c <HAL_Delay>
  HAL_UART_Transmit(&huart2,reset_z_axis, sizeof(reset_z_axis),1000);
 8002258:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800225c:	2205      	movs	r2, #5
 800225e:	4914      	ldr	r1, [pc, #80]	@ (80022b0 <MX_USART2_UART_Init+0xf8>)
 8002260:	4810      	ldr	r0, [pc, #64]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 8002262:	f006 fafd 	bl	8008860 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_output_200Hz, sizeof(set_output_200Hz),1000);
 8002266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800226a:	2205      	movs	r2, #5
 800226c:	4911      	ldr	r1, [pc, #68]	@ (80022b4 <MX_USART2_UART_Init+0xfc>)
 800226e:	480d      	ldr	r0, [pc, #52]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 8002270:	f006 faf6 	bl	8008860 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_baudrate_115200, sizeof(set_baudrate_115200),1000);
 8002274:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002278:	2205      	movs	r2, #5
 800227a:	490f      	ldr	r1, [pc, #60]	@ (80022b8 <MX_USART2_UART_Init+0x100>)
 800227c:	4809      	ldr	r0, [pc, #36]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 800227e:	f006 faef 	bl	8008860 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,save_settings, sizeof(save_settings),1000);
 8002282:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002286:	2205      	movs	r2, #5
 8002288:	490c      	ldr	r1, [pc, #48]	@ (80022bc <MX_USART2_UART_Init+0x104>)
 800228a:	4806      	ldr	r0, [pc, #24]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 800228c:	f006 fae8 	bl	8008860 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,restart_device, sizeof(restart_device),1000);
 8002290:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002294:	2205      	movs	r2, #5
 8002296:	490a      	ldr	r1, [pc, #40]	@ (80022c0 <MX_USART2_UART_Init+0x108>)
 8002298:	4802      	ldr	r0, [pc, #8]	@ (80022a4 <MX_USART2_UART_Init+0xec>)
 800229a:	f006 fae1 	bl	8008860 <HAL_UART_Transmit>


  /* USER CODE END USART2_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	240008a4 	.word	0x240008a4
 80022a8:	40004400 	.word	0x40004400
 80022ac:	24000010 	.word	0x24000010
 80022b0:	24000018 	.word	0x24000018
 80022b4:	24000020 	.word	0x24000020
 80022b8:	24000028 	.word	0x24000028
 80022bc:	24000030 	.word	0x24000030
 80022c0:	24000038 	.word	0x24000038

080022c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022c8:	4b22      	ldr	r3, [pc, #136]	@ (8002354 <MX_USART3_UART_Init+0x90>)
 80022ca:	4a23      	ldr	r2, [pc, #140]	@ (8002358 <MX_USART3_UART_Init+0x94>)
 80022cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022ce:	4b21      	ldr	r3, [pc, #132]	@ (8002354 <MX_USART3_UART_Init+0x90>)
 80022d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002354 <MX_USART3_UART_Init+0x90>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002354 <MX_USART3_UART_Init+0x90>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002354 <MX_USART3_UART_Init+0x90>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <MX_USART3_UART_Init+0x90>)
 80022ea:	220c      	movs	r2, #12
 80022ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ee:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <MX_USART3_UART_Init+0x90>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f4:	4b17      	ldr	r3, [pc, #92]	@ (8002354 <MX_USART3_UART_Init+0x90>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022fa:	4b16      	ldr	r3, [pc, #88]	@ (8002354 <MX_USART3_UART_Init+0x90>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002300:	4b14      	ldr	r3, [pc, #80]	@ (8002354 <MX_USART3_UART_Init+0x90>)
 8002302:	2200      	movs	r2, #0
 8002304:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002306:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <MX_USART3_UART_Init+0x90>)
 8002308:	2200      	movs	r2, #0
 800230a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800230c:	4811      	ldr	r0, [pc, #68]	@ (8002354 <MX_USART3_UART_Init+0x90>)
 800230e:	f006 fa57 	bl	80087c0 <HAL_UART_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002318:	f7ff fa0c 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800231c:	2100      	movs	r1, #0
 800231e:	480d      	ldr	r0, [pc, #52]	@ (8002354 <MX_USART3_UART_Init+0x90>)
 8002320:	f008 ff7d 	bl	800b21e <HAL_UARTEx_SetTxFifoThreshold>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800232a:	f7ff fa03 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800232e:	2100      	movs	r1, #0
 8002330:	4808      	ldr	r0, [pc, #32]	@ (8002354 <MX_USART3_UART_Init+0x90>)
 8002332:	f008 ffb2 	bl	800b29a <HAL_UARTEx_SetRxFifoThreshold>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800233c:	f7ff f9fa 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002340:	4804      	ldr	r0, [pc, #16]	@ (8002354 <MX_USART3_UART_Init+0x90>)
 8002342:	f008 ff33 	bl	800b1ac <HAL_UARTEx_DisableFifoMode>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800234c:	f7ff f9f2 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}
 8002354:	24000938 	.word	0x24000938
 8002358:	40004800 	.word	0x40004800

0800235c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002360:	4b22      	ldr	r3, [pc, #136]	@ (80023ec <MX_USART6_UART_Init+0x90>)
 8002362:	4a23      	ldr	r2, [pc, #140]	@ (80023f0 <MX_USART6_UART_Init+0x94>)
 8002364:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002366:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <MX_USART6_UART_Init+0x90>)
 8002368:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800236c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800236e:	4b1f      	ldr	r3, [pc, #124]	@ (80023ec <MX_USART6_UART_Init+0x90>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002374:	4b1d      	ldr	r3, [pc, #116]	@ (80023ec <MX_USART6_UART_Init+0x90>)
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800237a:	4b1c      	ldr	r3, [pc, #112]	@ (80023ec <MX_USART6_UART_Init+0x90>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002380:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <MX_USART6_UART_Init+0x90>)
 8002382:	220c      	movs	r2, #12
 8002384:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002386:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <MX_USART6_UART_Init+0x90>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800238c:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <MX_USART6_UART_Init+0x90>)
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002392:	4b16      	ldr	r3, [pc, #88]	@ (80023ec <MX_USART6_UART_Init+0x90>)
 8002394:	2200      	movs	r2, #0
 8002396:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002398:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <MX_USART6_UART_Init+0x90>)
 800239a:	2200      	movs	r2, #0
 800239c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800239e:	4b13      	ldr	r3, [pc, #76]	@ (80023ec <MX_USART6_UART_Init+0x90>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023a4:	4811      	ldr	r0, [pc, #68]	@ (80023ec <MX_USART6_UART_Init+0x90>)
 80023a6:	f006 fa0b 	bl	80087c0 <HAL_UART_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80023b0:	f7ff f9c0 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023b4:	2100      	movs	r1, #0
 80023b6:	480d      	ldr	r0, [pc, #52]	@ (80023ec <MX_USART6_UART_Init+0x90>)
 80023b8:	f008 ff31 	bl	800b21e <HAL_UARTEx_SetTxFifoThreshold>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80023c2:	f7ff f9b7 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023c6:	2100      	movs	r1, #0
 80023c8:	4808      	ldr	r0, [pc, #32]	@ (80023ec <MX_USART6_UART_Init+0x90>)
 80023ca:	f008 ff66 	bl	800b29a <HAL_UARTEx_SetRxFifoThreshold>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80023d4:	f7ff f9ae 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80023d8:	4804      	ldr	r0, [pc, #16]	@ (80023ec <MX_USART6_UART_Init+0x90>)
 80023da:	f008 fee7 	bl	800b1ac <HAL_UARTEx_DisableFifoMode>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80023e4:	f7ff f9a6 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	240009cc 	.word	0x240009cc
 80023f0:	40011400 	.word	0x40011400

080023f4 <MX_USART10_UART_Init>:
/* USART10 init function */

void MX_USART10_UART_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80023f8:	4b22      	ldr	r3, [pc, #136]	@ (8002484 <MX_USART10_UART_Init+0x90>)
 80023fa:	4a23      	ldr	r2, [pc, #140]	@ (8002488 <MX_USART10_UART_Init+0x94>)
 80023fc:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 80023fe:	4b21      	ldr	r3, [pc, #132]	@ (8002484 <MX_USART10_UART_Init+0x90>)
 8002400:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002404:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8002406:	4b1f      	ldr	r3, [pc, #124]	@ (8002484 <MX_USART10_UART_Init+0x90>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 800240c:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <MX_USART10_UART_Init+0x90>)
 800240e:	2200      	movs	r2, #0
 8002410:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8002412:	4b1c      	ldr	r3, [pc, #112]	@ (8002484 <MX_USART10_UART_Init+0x90>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8002418:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <MX_USART10_UART_Init+0x90>)
 800241a:	220c      	movs	r2, #12
 800241c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241e:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <MX_USART10_UART_Init+0x90>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8002424:	4b17      	ldr	r3, [pc, #92]	@ (8002484 <MX_USART10_UART_Init+0x90>)
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800242a:	4b16      	ldr	r3, [pc, #88]	@ (8002484 <MX_USART10_UART_Init+0x90>)
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002430:	4b14      	ldr	r3, [pc, #80]	@ (8002484 <MX_USART10_UART_Init+0x90>)
 8002432:	2200      	movs	r2, #0
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002436:	4b13      	ldr	r3, [pc, #76]	@ (8002484 <MX_USART10_UART_Init+0x90>)
 8002438:	2200      	movs	r2, #0
 800243a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 800243c:	4811      	ldr	r0, [pc, #68]	@ (8002484 <MX_USART10_UART_Init+0x90>)
 800243e:	f006 f9bf 	bl	80087c0 <HAL_UART_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8002448:	f7ff f974 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800244c:	2100      	movs	r1, #0
 800244e:	480d      	ldr	r0, [pc, #52]	@ (8002484 <MX_USART10_UART_Init+0x90>)
 8002450:	f008 fee5 	bl	800b21e <HAL_UARTEx_SetTxFifoThreshold>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 800245a:	f7ff f96b 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800245e:	2100      	movs	r1, #0
 8002460:	4808      	ldr	r0, [pc, #32]	@ (8002484 <MX_USART10_UART_Init+0x90>)
 8002462:	f008 ff1a 	bl	800b29a <HAL_UARTEx_SetRxFifoThreshold>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 800246c:	f7ff f962 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8002470:	4804      	ldr	r0, [pc, #16]	@ (8002484 <MX_USART10_UART_Init+0x90>)
 8002472:	f008 fe9b 	bl	800b1ac <HAL_UARTEx_DisableFifoMode>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 800247c:	f7ff f95a 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}
 8002484:	24000a60 	.word	0x24000a60
 8002488:	40011c00 	.word	0x40011c00

0800248c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b0c8      	sub	sp, #288	@ 0x120
 8002490:	af00      	add	r7, sp, #0
 8002492:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002496:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800249a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024ac:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80024b0:	22b8      	movs	r2, #184	@ 0xb8
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f00d fa78 	bl	800f9aa <memset>
  if(uartHandle->Instance==UART4)
 80024ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4aaa      	ldr	r2, [pc, #680]	@ (8002770 <HAL_UART_MspInit+0x2e4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d14e      	bne.n	800256a <HAL_UART_MspInit+0xde>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80024cc:	f04f 0202 	mov.w	r2, #2
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024de:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80024e2:	4618      	mov	r0, r3
 80024e4:	f003 fe6c 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80024ee:	f7ff f921 	bl	8001734 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80024f2:	4ba0      	ldr	r3, [pc, #640]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 80024f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024f8:	4a9e      	ldr	r2, [pc, #632]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 80024fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80024fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002502:	4b9c      	ldr	r3, [pc, #624]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 8002504:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002508:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800250c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800250e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002510:	4b98      	ldr	r3, [pc, #608]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 8002512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002516:	4a97      	ldr	r2, [pc, #604]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002520:	4b94      	ldr	r3, [pc, #592]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 8002522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800252c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800252e:	2303      	movs	r3, #3
 8002530:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002546:	2308      	movs	r3, #8
 8002548:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002550:	4619      	mov	r1, r3
 8002552:	4889      	ldr	r0, [pc, #548]	@ (8002778 <HAL_UART_MspInit+0x2ec>)
 8002554:	f002 fcec 	bl	8004f30 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 8002558:	2200      	movs	r2, #0
 800255a:	2108      	movs	r1, #8
 800255c:	2034      	movs	r0, #52	@ 0x34
 800255e:	f000 fcec 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002562:	2034      	movs	r0, #52	@ 0x34
 8002564:	f000 fd03 	bl	8002f6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }
}
 8002568:	e320      	b.n	8002bac <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART5)
 800256a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800256e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a81      	ldr	r2, [pc, #516]	@ (800277c <HAL_UART_MspInit+0x2f0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d147      	bne.n	800260c <HAL_UART_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800257c:	f04f 0202 	mov.w	r2, #2
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800258e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002592:	4618      	mov	r0, r3
 8002594:	f003 fe14 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_UART_MspInit+0x116>
      Error_Handler();
 800259e:	f7ff f8c9 	bl	8001734 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80025a2:	4b74      	ldr	r3, [pc, #464]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 80025a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025a8:	4a72      	ldr	r2, [pc, #456]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 80025aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025b2:	4b70      	ldr	r3, [pc, #448]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 80025b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80025be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 80025c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c6:	4a6b      	ldr	r2, [pc, #428]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025d0:	4b68      	ldr	r3, [pc, #416]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 80025d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	643b      	str	r3, [r7, #64]	@ 0x40
 80025dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 80025de:	f242 0320 	movw	r3, #8224	@ 0x2020
 80025e2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80025f8:	230e      	movs	r3, #14
 80025fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002602:	4619      	mov	r1, r3
 8002604:	485e      	ldr	r0, [pc, #376]	@ (8002780 <HAL_UART_MspInit+0x2f4>)
 8002606:	f002 fc93 	bl	8004f30 <HAL_GPIO_Init>
}
 800260a:	e2cf      	b.n	8002bac <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART7)
 800260c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002610:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a5a      	ldr	r2, [pc, #360]	@ (8002784 <HAL_UART_MspInit+0x2f8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d14f      	bne.n	80026be <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800261e:	f04f 0202 	mov.w	r2, #2
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800262a:	2300      	movs	r3, #0
 800262c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002630:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002634:	4618      	mov	r0, r3
 8002636:	f003 fdc3 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8002640:	f7ff f878 	bl	8001734 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002644:	4b4b      	ldr	r3, [pc, #300]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 8002646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800264a:	4a4a      	ldr	r2, [pc, #296]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 800264c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002650:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002654:	4b47      	ldr	r3, [pc, #284]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 8002656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800265a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800265e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002662:	4b44      	ldr	r3, [pc, #272]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 8002664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002668:	4a42      	ldr	r2, [pc, #264]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 800266a:	f043 0310 	orr.w	r3, r3, #16
 800266e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002672:	4b40      	ldr	r3, [pc, #256]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 8002674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800267e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002680:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002684:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800269a:	2307      	movs	r3, #7
 800269c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026a0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80026a4:	4619      	mov	r1, r3
 80026a6:	4838      	ldr	r0, [pc, #224]	@ (8002788 <HAL_UART_MspInit+0x2fc>)
 80026a8:	f002 fc42 	bl	8004f30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 6, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2106      	movs	r1, #6
 80026b0:	2052      	movs	r0, #82	@ 0x52
 80026b2:	f000 fc42 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80026b6:	2052      	movs	r0, #82	@ 0x52
 80026b8:	f000 fc59 	bl	8002f6e <HAL_NVIC_EnableIRQ>
}
 80026bc:	e276      	b.n	8002bac <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART8)
 80026be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a30      	ldr	r2, [pc, #192]	@ (800278c <HAL_UART_MspInit+0x300>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d15f      	bne.n	8002790 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80026d0:	f04f 0202 	mov.w	r2, #2
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026e2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 fd6a 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 80026f2:	f7ff f81f 	bl	8001734 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80026f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 80026f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 80026fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002702:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002706:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 8002708:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800270c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002710:	637b      	str	r3, [r7, #52]	@ 0x34
 8002712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002714:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 8002716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800271a:	4a16      	ldr	r2, [pc, #88]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 800271c:	f043 0310 	orr.w	r3, r3, #16
 8002720:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002724:	4b13      	ldr	r3, [pc, #76]	@ (8002774 <HAL_UART_MspInit+0x2e8>)
 8002726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002732:	2303      	movs	r3, #3
 8002734:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800274a:	2308      	movs	r3, #8
 800274c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002750:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002754:	4619      	mov	r1, r3
 8002756:	480c      	ldr	r0, [pc, #48]	@ (8002788 <HAL_UART_MspInit+0x2fc>)
 8002758:	f002 fbea 	bl	8004f30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 15, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	210f      	movs	r1, #15
 8002760:	2053      	movs	r0, #83	@ 0x53
 8002762:	f000 fbea 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002766:	2053      	movs	r0, #83	@ 0x53
 8002768:	f000 fc01 	bl	8002f6e <HAL_NVIC_EnableIRQ>
}
 800276c:	e21e      	b.n	8002bac <HAL_UART_MspInit+0x720>
 800276e:	bf00      	nop
 8002770:	40004c00 	.word	0x40004c00
 8002774:	58024400 	.word	0x58024400
 8002778:	58020000 	.word	0x58020000
 800277c:	40005000 	.word	0x40005000
 8002780:	58020400 	.word	0x58020400
 8002784:	40007800 	.word	0x40007800
 8002788:	58021000 	.word	0x58021000
 800278c:	40007c00 	.word	0x40007c00
  else if(uartHandle->Instance==UART9)
 8002790:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002794:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4abd      	ldr	r2, [pc, #756]	@ (8002a94 <HAL_UART_MspInit+0x608>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d14f      	bne.n	8002842 <HAL_UART_MspInit+0x3b6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART9;
 80027a2:	f04f 0201 	mov.w	r2, #1
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80027b8:	4618      	mov	r0, r3
 80027ba:	f003 fd01 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 80027c4:	f7fe ffb6 	bl	8001734 <Error_Handler>
    __HAL_RCC_UART9_CLK_ENABLE();
 80027c8:	4bb3      	ldr	r3, [pc, #716]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 80027ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027ce:	4ab2      	ldr	r2, [pc, #712]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 80027d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027d8:	4baf      	ldr	r3, [pc, #700]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 80027da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027e6:	4bac      	ldr	r3, [pc, #688]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 80027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ec:	4aaa      	ldr	r2, [pc, #680]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 80027ee:	f043 0308 	orr.w	r3, r3, #8
 80027f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027f6:	4ba8      	ldr	r3, [pc, #672]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 80027f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002804:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002808:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 800281e:	230b      	movs	r3, #11
 8002820:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002824:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002828:	4619      	mov	r1, r3
 800282a:	489c      	ldr	r0, [pc, #624]	@ (8002a9c <HAL_UART_MspInit+0x610>)
 800282c:	f002 fb80 	bl	8004f30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART9_IRQn, 5, 0);
 8002830:	2200      	movs	r2, #0
 8002832:	2105      	movs	r1, #5
 8002834:	209b      	movs	r0, #155	@ 0x9b
 8002836:	f000 fb80 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART9_IRQn);
 800283a:	209b      	movs	r0, #155	@ 0x9b
 800283c:	f000 fb97 	bl	8002f6e <HAL_NVIC_EnableIRQ>
}
 8002840:	e1b4      	b.n	8002bac <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART2)
 8002842:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002846:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a94      	ldr	r2, [pc, #592]	@ (8002aa0 <HAL_UART_MspInit+0x614>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d156      	bne.n	8002902 <HAL_UART_MspInit+0x476>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002854:	f04f 0202 	mov.w	r2, #2
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002860:	2300      	movs	r3, #0
 8002862:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002866:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800286a:	4618      	mov	r0, r3
 800286c:	f003 fca8 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_UART_MspInit+0x3ee>
      Error_Handler();
 8002876:	f7fe ff5d 	bl	8001734 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800287a:	4b87      	ldr	r3, [pc, #540]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 800287c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002880:	4a85      	ldr	r2, [pc, #532]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 8002882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002886:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800288a:	4b83      	ldr	r3, [pc, #524]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 800288c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002898:	4b7f      	ldr	r3, [pc, #508]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 800289a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800289e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 80028aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ae:	f003 0201 	and.w	r2, r3, #1
 80028b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028b6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028c4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028c6:	230c      	movs	r3, #12
 80028c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028de:	2307      	movs	r3, #7
 80028e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80028e8:	4619      	mov	r1, r3
 80028ea:	486e      	ldr	r0, [pc, #440]	@ (8002aa4 <HAL_UART_MspInit+0x618>)
 80028ec:	f002 fb20 	bl	8004f30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80028f0:	2200      	movs	r2, #0
 80028f2:	210f      	movs	r1, #15
 80028f4:	2026      	movs	r0, #38	@ 0x26
 80028f6:	f000 fb20 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028fa:	2026      	movs	r0, #38	@ 0x26
 80028fc:	f000 fb37 	bl	8002f6e <HAL_NVIC_EnableIRQ>
}
 8002900:	e154      	b.n	8002bac <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART3)
 8002902:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002906:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a66      	ldr	r2, [pc, #408]	@ (8002aa8 <HAL_UART_MspInit+0x61c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d15f      	bne.n	80029d4 <HAL_UART_MspInit+0x548>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002914:	f04f 0202 	mov.w	r2, #2
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002926:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800292a:	4618      	mov	r0, r3
 800292c:	f003 fc48 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_UART_MspInit+0x4ae>
      Error_Handler();
 8002936:	f7fe fefd 	bl	8001734 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800293a:	4b57      	ldr	r3, [pc, #348]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 800293c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002940:	4a55      	ldr	r2, [pc, #340]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 8002942:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002946:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800294a:	4b53      	ldr	r3, [pc, #332]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 800294c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002950:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002954:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002958:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002966:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002968:	4b4b      	ldr	r3, [pc, #300]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 800296a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 8002970:	f043 0308 	orr.w	r3, r3, #8
 8002974:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002978:	4b47      	ldr	r3, [pc, #284]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 800297a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800297e:	f003 0208 	and.w	r2, r3, #8
 8002982:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002994:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002996:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800299a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029b0:	2307      	movs	r3, #7
 80029b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80029ba:	4619      	mov	r1, r3
 80029bc:	4837      	ldr	r0, [pc, #220]	@ (8002a9c <HAL_UART_MspInit+0x610>)
 80029be:	f002 fab7 	bl	8004f30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	210e      	movs	r1, #14
 80029c6:	2027      	movs	r0, #39	@ 0x27
 80029c8:	f000 fab7 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029cc:	2027      	movs	r0, #39	@ 0x27
 80029ce:	f000 face 	bl	8002f6e <HAL_NVIC_EnableIRQ>
}
 80029d2:	e0eb      	b.n	8002bac <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART6)
 80029d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029d8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a32      	ldr	r2, [pc, #200]	@ (8002aac <HAL_UART_MspInit+0x620>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d166      	bne.n	8002ab4 <HAL_UART_MspInit+0x628>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80029e6:	f04f 0201 	mov.w	r2, #1
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029f8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80029fc:	4618      	mov	r0, r3
 80029fe:	f003 fbdf 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_UART_MspInit+0x580>
      Error_Handler();
 8002a08:	f7fe fe94 	bl	8001734 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a0c:	4b22      	ldr	r3, [pc, #136]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 8002a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a12:	4a21      	ldr	r2, [pc, #132]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 8002a14:	f043 0320 	orr.w	r3, r3, #32
 8002a18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 8002a1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a22:	f003 0220 	and.w	r2, r3, #32
 8002a26:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a38:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3a:	4b17      	ldr	r3, [pc, #92]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 8002a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a40:	4a15      	ldr	r2, [pc, #84]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 8002a42:	f043 0304 	orr.w	r3, r3, #4
 8002a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a4a:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <HAL_UART_MspInit+0x60c>)
 8002a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a50:	f003 0204 	and.w	r2, r3, #4
 8002a54:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a58:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a62:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a66:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a68:	23c0      	movs	r3, #192	@ 0xc0
 8002a6a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002a80:	2307      	movs	r3, #7
 8002a82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a86:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4808      	ldr	r0, [pc, #32]	@ (8002ab0 <HAL_UART_MspInit+0x624>)
 8002a8e:	f002 fa4f 	bl	8004f30 <HAL_GPIO_Init>
}
 8002a92:	e08b      	b.n	8002bac <HAL_UART_MspInit+0x720>
 8002a94:	40011800 	.word	0x40011800
 8002a98:	58024400 	.word	0x58024400
 8002a9c:	58020c00 	.word	0x58020c00
 8002aa0:	40004400 	.word	0x40004400
 8002aa4:	58020000 	.word	0x58020000
 8002aa8:	40004800 	.word	0x40004800
 8002aac:	40011400 	.word	0x40011400
 8002ab0:	58020800 	.word	0x58020800
  else if(uartHandle->Instance==USART10)
 8002ab4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ab8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a3d      	ldr	r2, [pc, #244]	@ (8002bb8 <HAL_UART_MspInit+0x72c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d172      	bne.n	8002bac <HAL_UART_MspInit+0x720>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8002ac6:	f04f 0201 	mov.w	r2, #1
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ad8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002adc:	4618      	mov	r0, r3
 8002ade:	f003 fb6f 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_UART_MspInit+0x660>
      Error_Handler();
 8002ae8:	f7fe fe24 	bl	8001734 <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8002aec:	4b33      	ldr	r3, [pc, #204]	@ (8002bbc <HAL_UART_MspInit+0x730>)
 8002aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002af2:	4a32      	ldr	r2, [pc, #200]	@ (8002bbc <HAL_UART_MspInit+0x730>)
 8002af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002af8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002afc:	4b2f      	ldr	r3, [pc, #188]	@ (8002bbc <HAL_UART_MspInit+0x730>)
 8002afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b02:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002b06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b14:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b18:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b1a:	4b28      	ldr	r3, [pc, #160]	@ (8002bbc <HAL_UART_MspInit+0x730>)
 8002b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b20:	4a26      	ldr	r2, [pc, #152]	@ (8002bbc <HAL_UART_MspInit+0x730>)
 8002b22:	f043 0310 	orr.w	r3, r3, #16
 8002b26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b2a:	4b24      	ldr	r3, [pc, #144]	@ (8002bbc <HAL_UART_MspInit+0x730>)
 8002b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b30:	f003 0210 	and.w	r2, r3, #16
 8002b34:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b38:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b42:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002b46:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b48:	2304      	movs	r3, #4
 8002b4a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8002b60:	2304      	movs	r3, #4
 8002b62:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b66:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4814      	ldr	r0, [pc, #80]	@ (8002bc0 <HAL_UART_MspInit+0x734>)
 8002b6e:	f002 f9df 	bl	8004f30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b72:	2308      	movs	r3, #8
 8002b74:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8002b8a:	230b      	movs	r3, #11
 8002b8c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b90:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b94:	4619      	mov	r1, r3
 8002b96:	480a      	ldr	r0, [pc, #40]	@ (8002bc0 <HAL_UART_MspInit+0x734>)
 8002b98:	f002 f9ca 	bl	8004f30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART10_IRQn, 1, 0);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	209c      	movs	r0, #156	@ 0x9c
 8002ba2:	f000 f9ca 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8002ba6:	209c      	movs	r0, #156	@ 0x9c
 8002ba8:	f000 f9e1 	bl	8002f6e <HAL_NVIC_EnableIRQ>
}
 8002bac:	bf00      	nop
 8002bae:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40011c00 	.word	0x40011c00
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	58021000 	.word	0x58021000

08002bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
     ldr   sp, =_estack      /* set stack pointer */
 8002bc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002bc8:	f7fe ff42 	bl	8001a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bcc:	480c      	ldr	r0, [pc, #48]	@ (8002c00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bce:	490d      	ldr	r1, [pc, #52]	@ (8002c04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd4:	e002      	b.n	8002bdc <LoopCopyDataInit>

08002bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bda:	3304      	adds	r3, #4

08002bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be0:	d3f9      	bcc.n	8002bd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002be2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002be4:	4c0a      	ldr	r4, [pc, #40]	@ (8002c10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be8:	e001      	b.n	8002bee <LoopFillZerobss>

08002bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bec:	3204      	adds	r2, #4

08002bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf0:	d3fb      	bcc.n	8002bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bf2:	f00c ff61 	bl	800fab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bf6:	f7fe f9e1 	bl	8000fbc <main>
  bx  lr
 8002bfa:	4770      	bx	lr
     ldr   sp, =_estack      /* set stack pointer */
 8002bfc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002c00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002c04:	24000214 	.word	0x24000214
  ldr r2, =_sidata
 8002c08:	080130bc 	.word	0x080130bc
  ldr r2, =_sbss
 8002c0c:	24000214 	.word	0x24000214
  ldr r4, =_ebss
 8002c10:	24000e64 	.word	0x24000e64

08002c14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c14:	e7fe      	b.n	8002c14 <ADC3_IRQHandler>
	...

08002c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c1e:	2003      	movs	r0, #3
 8002c20:	f000 f980 	bl	8002f24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c24:	f003 f8f6 	bl	8005e14 <HAL_RCC_GetSysClockFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <HAL_Init+0x68>)
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	4913      	ldr	r1, [pc, #76]	@ (8002c84 <HAL_Init+0x6c>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c42:	4b0f      	ldr	r3, [pc, #60]	@ (8002c80 <HAL_Init+0x68>)
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c84 <HAL_Init+0x6c>)
 8002c4c:	5cd3      	ldrb	r3, [r2, r3]
 8002c4e:	f003 031f 	and.w	r3, r3, #31
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
 8002c58:	4a0b      	ldr	r2, [pc, #44]	@ (8002c88 <HAL_Init+0x70>)
 8002c5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c8c <HAL_Init+0x74>)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c62:	200f      	movs	r0, #15
 8002c64:	f000 f814 	bl	8002c90 <HAL_InitTick>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e002      	b.n	8002c78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c72:	f7fe fd65 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	58024400 	.word	0x58024400
 8002c84:	08012c18 	.word	0x08012c18
 8002c88:	2400000c 	.word	0x2400000c
 8002c8c:	24000008 	.word	0x24000008

08002c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c98:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <HAL_InitTick+0x60>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e021      	b.n	8002ce8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ca4:	4b13      	ldr	r3, [pc, #76]	@ (8002cf4 <HAL_InitTick+0x64>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <HAL_InitTick+0x60>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f965 	bl	8002f8a <HAL_SYSTICK_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00e      	b.n	8002ce8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b0f      	cmp	r3, #15
 8002cce:	d80a      	bhi.n	8002ce6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f000 f92f 	bl	8002f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cdc:	4a06      	ldr	r2, [pc, #24]	@ (8002cf8 <HAL_InitTick+0x68>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e000      	b.n	8002ce8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	24000044 	.word	0x24000044
 8002cf4:	24000008 	.word	0x24000008
 8002cf8:	24000040 	.word	0x24000040

08002cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <HAL_IncTick+0x20>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_IncTick+0x24>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a04      	ldr	r2, [pc, #16]	@ (8002d20 <HAL_IncTick+0x24>)
 8002d0e:	6013      	str	r3, [r2, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	24000044 	.word	0x24000044
 8002d20:	24000af4 	.word	0x24000af4

08002d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return uwTick;
 8002d28:	4b03      	ldr	r3, [pc, #12]	@ (8002d38 <HAL_GetTick+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	24000af4 	.word	0x24000af4

08002d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d44:	f7ff ffee 	bl	8002d24 <HAL_GetTick>
 8002d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d005      	beq.n	8002d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d56:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <HAL_Delay+0x44>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d62:	bf00      	nop
 8002d64:	f7ff ffde 	bl	8002d24 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d8f7      	bhi.n	8002d64 <HAL_Delay+0x28>
  {
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	24000044 	.word	0x24000044

08002d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002da0:	4013      	ands	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dac:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db2:	4a04      	ldr	r2, [pc, #16]	@ (8002dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	60d3      	str	r3, [r2, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00
 8002dc8:	05fa0000 	.word	0x05fa0000

08002dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd0:	4b04      	ldr	r3, [pc, #16]	@ (8002de4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	f003 0307 	and.w	r3, r3, #7
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	db0b      	blt.n	8002e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	4907      	ldr	r1, [pc, #28]	@ (8002e20 <__NVIC_EnableIRQ+0x38>)
 8002e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2001      	movs	r0, #1
 8002e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000e100 	.word	0xe000e100

08002e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	6039      	str	r1, [r7, #0]
 8002e2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	db0a      	blt.n	8002e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	490c      	ldr	r1, [pc, #48]	@ (8002e70 <__NVIC_SetPriority+0x4c>)
 8002e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e42:	0112      	lsls	r2, r2, #4
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	440b      	add	r3, r1
 8002e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e4c:	e00a      	b.n	8002e64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4908      	ldr	r1, [pc, #32]	@ (8002e74 <__NVIC_SetPriority+0x50>)
 8002e54:	88fb      	ldrh	r3, [r7, #6]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	3b04      	subs	r3, #4
 8002e5c:	0112      	lsls	r2, r2, #4
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	440b      	add	r3, r1
 8002e62:	761a      	strb	r2, [r3, #24]
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000e100 	.word	0xe000e100
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	@ 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f1c3 0307 	rsb	r3, r3, #7
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	bf28      	it	cs
 8002e96:	2304      	movcs	r3, #4
 8002e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2b06      	cmp	r3, #6
 8002ea0:	d902      	bls.n	8002ea8 <NVIC_EncodePriority+0x30>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3b03      	subs	r3, #3
 8002ea6:	e000      	b.n	8002eaa <NVIC_EncodePriority+0x32>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	401a      	ands	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eca:	43d9      	mvns	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	4313      	orrs	r3, r2
         );
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3724      	adds	r7, #36	@ 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ef0:	d301      	bcc.n	8002ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e00f      	b.n	8002f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f20 <SysTick_Config+0x40>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efe:	210f      	movs	r1, #15
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295
 8002f04:	f7ff ff8e 	bl	8002e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <SysTick_Config+0x40>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0e:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <SysTick_Config+0x40>)
 8002f10:	2207      	movs	r2, #7
 8002f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	e000e010 	.word	0xe000e010

08002f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff29 	bl	8002d84 <__NVIC_SetPriorityGrouping>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f48:	f7ff ff40 	bl	8002dcc <__NVIC_GetPriorityGrouping>
 8002f4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	6978      	ldr	r0, [r7, #20]
 8002f54:	f7ff ff90 	bl	8002e78 <NVIC_EncodePriority>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff5f 	bl	8002e24 <__NVIC_SetPriority>
}
 8002f66:	bf00      	nop
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	4603      	mov	r3, r0
 8002f76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff33 	bl	8002de8 <__NVIC_EnableIRQ>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ffa4 	bl	8002ee0 <SysTick_Config>
 8002f98:	4603      	mov	r3, r0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002fa8:	f3bf 8f5f 	dmb	sy
}
 8002fac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002fae:	4b07      	ldr	r3, [pc, #28]	@ (8002fcc <HAL_MPU_Disable+0x28>)
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb2:	4a06      	ldr	r2, [pc, #24]	@ (8002fcc <HAL_MPU_Disable+0x28>)
 8002fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fb8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002fba:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <HAL_MPU_Disable+0x2c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	605a      	str	r2, [r3, #4]
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000ed00 	.word	0xe000ed00
 8002fd0:	e000ed90 	.word	0xe000ed90

08002fd4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800300c <HAL_MPU_Enable+0x38>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8003010 <HAL_MPU_Enable+0x3c>)
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	4a09      	ldr	r2, [pc, #36]	@ (8003010 <HAL_MPU_Enable+0x3c>)
 8002fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002ff2:	f3bf 8f4f 	dsb	sy
}
 8002ff6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ff8:	f3bf 8f6f 	isb	sy
}
 8002ffc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000ed90 	.word	0xe000ed90
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	785a      	ldrb	r2, [r3, #1]
 8003020:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <HAL_MPU_ConfigRegion+0x7c>)
 8003022:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003024:	4b1a      	ldr	r3, [pc, #104]	@ (8003090 <HAL_MPU_ConfigRegion+0x7c>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	4a19      	ldr	r2, [pc, #100]	@ (8003090 <HAL_MPU_ConfigRegion+0x7c>)
 800302a:	f023 0301 	bic.w	r3, r3, #1
 800302e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003030:	4a17      	ldr	r2, [pc, #92]	@ (8003090 <HAL_MPU_ConfigRegion+0x7c>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7b1b      	ldrb	r3, [r3, #12]
 800303c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	7adb      	ldrb	r3, [r3, #11]
 8003042:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003044:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	7a9b      	ldrb	r3, [r3, #10]
 800304a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800304c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7b5b      	ldrb	r3, [r3, #13]
 8003052:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003054:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	7b9b      	ldrb	r3, [r3, #14]
 800305a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800305c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7bdb      	ldrb	r3, [r3, #15]
 8003062:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003064:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	7a5b      	ldrb	r3, [r3, #9]
 800306a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800306c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	7a1b      	ldrb	r3, [r3, #8]
 8003072:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003074:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	7812      	ldrb	r2, [r2, #0]
 800307a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800307c:	4a04      	ldr	r2, [pc, #16]	@ (8003090 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800307e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003080:	6113      	str	r3, [r2, #16]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000ed90 	.word	0xe000ed90

08003094 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800309c:	f7ff fe42 	bl	8002d24 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e2dc      	b.n	8003666 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d008      	beq.n	80030ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2280      	movs	r2, #128	@ 0x80
 80030bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e2cd      	b.n	8003666 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a76      	ldr	r2, [pc, #472]	@ (80032a8 <HAL_DMA_Abort+0x214>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d04a      	beq.n	800316a <HAL_DMA_Abort+0xd6>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a74      	ldr	r2, [pc, #464]	@ (80032ac <HAL_DMA_Abort+0x218>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d045      	beq.n	800316a <HAL_DMA_Abort+0xd6>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a73      	ldr	r2, [pc, #460]	@ (80032b0 <HAL_DMA_Abort+0x21c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d040      	beq.n	800316a <HAL_DMA_Abort+0xd6>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a71      	ldr	r2, [pc, #452]	@ (80032b4 <HAL_DMA_Abort+0x220>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d03b      	beq.n	800316a <HAL_DMA_Abort+0xd6>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a70      	ldr	r2, [pc, #448]	@ (80032b8 <HAL_DMA_Abort+0x224>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d036      	beq.n	800316a <HAL_DMA_Abort+0xd6>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6e      	ldr	r2, [pc, #440]	@ (80032bc <HAL_DMA_Abort+0x228>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d031      	beq.n	800316a <HAL_DMA_Abort+0xd6>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6d      	ldr	r2, [pc, #436]	@ (80032c0 <HAL_DMA_Abort+0x22c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d02c      	beq.n	800316a <HAL_DMA_Abort+0xd6>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a6b      	ldr	r2, [pc, #428]	@ (80032c4 <HAL_DMA_Abort+0x230>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d027      	beq.n	800316a <HAL_DMA_Abort+0xd6>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6a      	ldr	r2, [pc, #424]	@ (80032c8 <HAL_DMA_Abort+0x234>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d022      	beq.n	800316a <HAL_DMA_Abort+0xd6>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a68      	ldr	r2, [pc, #416]	@ (80032cc <HAL_DMA_Abort+0x238>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01d      	beq.n	800316a <HAL_DMA_Abort+0xd6>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a67      	ldr	r2, [pc, #412]	@ (80032d0 <HAL_DMA_Abort+0x23c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d018      	beq.n	800316a <HAL_DMA_Abort+0xd6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a65      	ldr	r2, [pc, #404]	@ (80032d4 <HAL_DMA_Abort+0x240>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_DMA_Abort+0xd6>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a64      	ldr	r2, [pc, #400]	@ (80032d8 <HAL_DMA_Abort+0x244>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00e      	beq.n	800316a <HAL_DMA_Abort+0xd6>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a62      	ldr	r2, [pc, #392]	@ (80032dc <HAL_DMA_Abort+0x248>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_DMA_Abort+0xd6>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a61      	ldr	r2, [pc, #388]	@ (80032e0 <HAL_DMA_Abort+0x24c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d004      	beq.n	800316a <HAL_DMA_Abort+0xd6>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a5f      	ldr	r2, [pc, #380]	@ (80032e4 <HAL_DMA_Abort+0x250>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_DMA_Abort+0xda>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_DMA_Abort+0xdc>
 800316e:	2300      	movs	r3, #0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 021e 	bic.w	r2, r2, #30
 8003182:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003192:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	e00a      	b.n	80031b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 020e 	bic.w	r2, r2, #14
 80031aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a3c      	ldr	r2, [pc, #240]	@ (80032a8 <HAL_DMA_Abort+0x214>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d072      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a3a      	ldr	r2, [pc, #232]	@ (80032ac <HAL_DMA_Abort+0x218>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d06d      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a39      	ldr	r2, [pc, #228]	@ (80032b0 <HAL_DMA_Abort+0x21c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d068      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a37      	ldr	r2, [pc, #220]	@ (80032b4 <HAL_DMA_Abort+0x220>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d063      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a36      	ldr	r2, [pc, #216]	@ (80032b8 <HAL_DMA_Abort+0x224>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d05e      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a34      	ldr	r2, [pc, #208]	@ (80032bc <HAL_DMA_Abort+0x228>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d059      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a33      	ldr	r2, [pc, #204]	@ (80032c0 <HAL_DMA_Abort+0x22c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d054      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a31      	ldr	r2, [pc, #196]	@ (80032c4 <HAL_DMA_Abort+0x230>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d04f      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a30      	ldr	r2, [pc, #192]	@ (80032c8 <HAL_DMA_Abort+0x234>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d04a      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2e      	ldr	r2, [pc, #184]	@ (80032cc <HAL_DMA_Abort+0x238>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d045      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2d      	ldr	r2, [pc, #180]	@ (80032d0 <HAL_DMA_Abort+0x23c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d040      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a2b      	ldr	r2, [pc, #172]	@ (80032d4 <HAL_DMA_Abort+0x240>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d03b      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a2a      	ldr	r2, [pc, #168]	@ (80032d8 <HAL_DMA_Abort+0x244>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d036      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a28      	ldr	r2, [pc, #160]	@ (80032dc <HAL_DMA_Abort+0x248>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d031      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a27      	ldr	r2, [pc, #156]	@ (80032e0 <HAL_DMA_Abort+0x24c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d02c      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a25      	ldr	r2, [pc, #148]	@ (80032e4 <HAL_DMA_Abort+0x250>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d027      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a24      	ldr	r2, [pc, #144]	@ (80032e8 <HAL_DMA_Abort+0x254>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d022      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a22      	ldr	r2, [pc, #136]	@ (80032ec <HAL_DMA_Abort+0x258>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01d      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a21      	ldr	r2, [pc, #132]	@ (80032f0 <HAL_DMA_Abort+0x25c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d018      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1f      	ldr	r2, [pc, #124]	@ (80032f4 <HAL_DMA_Abort+0x260>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1e      	ldr	r2, [pc, #120]	@ (80032f8 <HAL_DMA_Abort+0x264>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00e      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1c      	ldr	r2, [pc, #112]	@ (80032fc <HAL_DMA_Abort+0x268>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d009      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1b      	ldr	r2, [pc, #108]	@ (8003300 <HAL_DMA_Abort+0x26c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_DMA_Abort+0x20e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a19      	ldr	r2, [pc, #100]	@ (8003304 <HAL_DMA_Abort+0x270>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d132      	bne.n	8003308 <HAL_DMA_Abort+0x274>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e031      	b.n	800330a <HAL_DMA_Abort+0x276>
 80032a6:	bf00      	nop
 80032a8:	40020010 	.word	0x40020010
 80032ac:	40020028 	.word	0x40020028
 80032b0:	40020040 	.word	0x40020040
 80032b4:	40020058 	.word	0x40020058
 80032b8:	40020070 	.word	0x40020070
 80032bc:	40020088 	.word	0x40020088
 80032c0:	400200a0 	.word	0x400200a0
 80032c4:	400200b8 	.word	0x400200b8
 80032c8:	40020410 	.word	0x40020410
 80032cc:	40020428 	.word	0x40020428
 80032d0:	40020440 	.word	0x40020440
 80032d4:	40020458 	.word	0x40020458
 80032d8:	40020470 	.word	0x40020470
 80032dc:	40020488 	.word	0x40020488
 80032e0:	400204a0 	.word	0x400204a0
 80032e4:	400204b8 	.word	0x400204b8
 80032e8:	58025408 	.word	0x58025408
 80032ec:	5802541c 	.word	0x5802541c
 80032f0:	58025430 	.word	0x58025430
 80032f4:	58025444 	.word	0x58025444
 80032f8:	58025458 	.word	0x58025458
 80032fc:	5802546c 	.word	0x5802546c
 8003300:	58025480 	.word	0x58025480
 8003304:	58025494 	.word	0x58025494
 8003308:	2300      	movs	r3, #0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003318:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800331c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a6d      	ldr	r2, [pc, #436]	@ (80034d8 <HAL_DMA_Abort+0x444>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d04a      	beq.n	80033be <HAL_DMA_Abort+0x32a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a6b      	ldr	r2, [pc, #428]	@ (80034dc <HAL_DMA_Abort+0x448>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d045      	beq.n	80033be <HAL_DMA_Abort+0x32a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a6a      	ldr	r2, [pc, #424]	@ (80034e0 <HAL_DMA_Abort+0x44c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d040      	beq.n	80033be <HAL_DMA_Abort+0x32a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a68      	ldr	r2, [pc, #416]	@ (80034e4 <HAL_DMA_Abort+0x450>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d03b      	beq.n	80033be <HAL_DMA_Abort+0x32a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a67      	ldr	r2, [pc, #412]	@ (80034e8 <HAL_DMA_Abort+0x454>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d036      	beq.n	80033be <HAL_DMA_Abort+0x32a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a65      	ldr	r2, [pc, #404]	@ (80034ec <HAL_DMA_Abort+0x458>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d031      	beq.n	80033be <HAL_DMA_Abort+0x32a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a64      	ldr	r2, [pc, #400]	@ (80034f0 <HAL_DMA_Abort+0x45c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d02c      	beq.n	80033be <HAL_DMA_Abort+0x32a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a62      	ldr	r2, [pc, #392]	@ (80034f4 <HAL_DMA_Abort+0x460>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d027      	beq.n	80033be <HAL_DMA_Abort+0x32a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a61      	ldr	r2, [pc, #388]	@ (80034f8 <HAL_DMA_Abort+0x464>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d022      	beq.n	80033be <HAL_DMA_Abort+0x32a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a5f      	ldr	r2, [pc, #380]	@ (80034fc <HAL_DMA_Abort+0x468>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d01d      	beq.n	80033be <HAL_DMA_Abort+0x32a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a5e      	ldr	r2, [pc, #376]	@ (8003500 <HAL_DMA_Abort+0x46c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d018      	beq.n	80033be <HAL_DMA_Abort+0x32a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a5c      	ldr	r2, [pc, #368]	@ (8003504 <HAL_DMA_Abort+0x470>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_DMA_Abort+0x32a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a5b      	ldr	r2, [pc, #364]	@ (8003508 <HAL_DMA_Abort+0x474>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00e      	beq.n	80033be <HAL_DMA_Abort+0x32a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a59      	ldr	r2, [pc, #356]	@ (800350c <HAL_DMA_Abort+0x478>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d009      	beq.n	80033be <HAL_DMA_Abort+0x32a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a58      	ldr	r2, [pc, #352]	@ (8003510 <HAL_DMA_Abort+0x47c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d004      	beq.n	80033be <HAL_DMA_Abort+0x32a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a56      	ldr	r2, [pc, #344]	@ (8003514 <HAL_DMA_Abort+0x480>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d108      	bne.n	80033d0 <HAL_DMA_Abort+0x33c>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0201 	bic.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	e007      	b.n	80033e0 <HAL_DMA_Abort+0x34c>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033e0:	e013      	b.n	800340a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033e2:	f7ff fc9f 	bl	8002d24 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b05      	cmp	r3, #5
 80033ee:	d90c      	bls.n	800340a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2203      	movs	r2, #3
 80033fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e12d      	b.n	8003666 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e5      	bne.n	80033e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2f      	ldr	r2, [pc, #188]	@ (80034d8 <HAL_DMA_Abort+0x444>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d04a      	beq.n	80034b6 <HAL_DMA_Abort+0x422>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a2d      	ldr	r2, [pc, #180]	@ (80034dc <HAL_DMA_Abort+0x448>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d045      	beq.n	80034b6 <HAL_DMA_Abort+0x422>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a2c      	ldr	r2, [pc, #176]	@ (80034e0 <HAL_DMA_Abort+0x44c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d040      	beq.n	80034b6 <HAL_DMA_Abort+0x422>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a2a      	ldr	r2, [pc, #168]	@ (80034e4 <HAL_DMA_Abort+0x450>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d03b      	beq.n	80034b6 <HAL_DMA_Abort+0x422>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a29      	ldr	r2, [pc, #164]	@ (80034e8 <HAL_DMA_Abort+0x454>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d036      	beq.n	80034b6 <HAL_DMA_Abort+0x422>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a27      	ldr	r2, [pc, #156]	@ (80034ec <HAL_DMA_Abort+0x458>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d031      	beq.n	80034b6 <HAL_DMA_Abort+0x422>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a26      	ldr	r2, [pc, #152]	@ (80034f0 <HAL_DMA_Abort+0x45c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d02c      	beq.n	80034b6 <HAL_DMA_Abort+0x422>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a24      	ldr	r2, [pc, #144]	@ (80034f4 <HAL_DMA_Abort+0x460>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d027      	beq.n	80034b6 <HAL_DMA_Abort+0x422>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a23      	ldr	r2, [pc, #140]	@ (80034f8 <HAL_DMA_Abort+0x464>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d022      	beq.n	80034b6 <HAL_DMA_Abort+0x422>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a21      	ldr	r2, [pc, #132]	@ (80034fc <HAL_DMA_Abort+0x468>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01d      	beq.n	80034b6 <HAL_DMA_Abort+0x422>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a20      	ldr	r2, [pc, #128]	@ (8003500 <HAL_DMA_Abort+0x46c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d018      	beq.n	80034b6 <HAL_DMA_Abort+0x422>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1e      	ldr	r2, [pc, #120]	@ (8003504 <HAL_DMA_Abort+0x470>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <HAL_DMA_Abort+0x422>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1d      	ldr	r2, [pc, #116]	@ (8003508 <HAL_DMA_Abort+0x474>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00e      	beq.n	80034b6 <HAL_DMA_Abort+0x422>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1b      	ldr	r2, [pc, #108]	@ (800350c <HAL_DMA_Abort+0x478>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d009      	beq.n	80034b6 <HAL_DMA_Abort+0x422>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003510 <HAL_DMA_Abort+0x47c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d004      	beq.n	80034b6 <HAL_DMA_Abort+0x422>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a18      	ldr	r2, [pc, #96]	@ (8003514 <HAL_DMA_Abort+0x480>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d101      	bne.n	80034ba <HAL_DMA_Abort+0x426>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_DMA_Abort+0x428>
 80034ba:	2300      	movs	r3, #0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d02b      	beq.n	8003518 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	223f      	movs	r2, #63	@ 0x3f
 80034d0:	409a      	lsls	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	609a      	str	r2, [r3, #8]
 80034d6:	e02a      	b.n	800352e <HAL_DMA_Abort+0x49a>
 80034d8:	40020010 	.word	0x40020010
 80034dc:	40020028 	.word	0x40020028
 80034e0:	40020040 	.word	0x40020040
 80034e4:	40020058 	.word	0x40020058
 80034e8:	40020070 	.word	0x40020070
 80034ec:	40020088 	.word	0x40020088
 80034f0:	400200a0 	.word	0x400200a0
 80034f4:	400200b8 	.word	0x400200b8
 80034f8:	40020410 	.word	0x40020410
 80034fc:	40020428 	.word	0x40020428
 8003500:	40020440 	.word	0x40020440
 8003504:	40020458 	.word	0x40020458
 8003508:	40020470 	.word	0x40020470
 800350c:	40020488 	.word	0x40020488
 8003510:	400204a0 	.word	0x400204a0
 8003514:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2201      	movs	r2, #1
 8003528:	409a      	lsls	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a4f      	ldr	r2, [pc, #316]	@ (8003670 <HAL_DMA_Abort+0x5dc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d072      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a4d      	ldr	r2, [pc, #308]	@ (8003674 <HAL_DMA_Abort+0x5e0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d06d      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a4c      	ldr	r2, [pc, #304]	@ (8003678 <HAL_DMA_Abort+0x5e4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d068      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a4a      	ldr	r2, [pc, #296]	@ (800367c <HAL_DMA_Abort+0x5e8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d063      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a49      	ldr	r2, [pc, #292]	@ (8003680 <HAL_DMA_Abort+0x5ec>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d05e      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a47      	ldr	r2, [pc, #284]	@ (8003684 <HAL_DMA_Abort+0x5f0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d059      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a46      	ldr	r2, [pc, #280]	@ (8003688 <HAL_DMA_Abort+0x5f4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d054      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a44      	ldr	r2, [pc, #272]	@ (800368c <HAL_DMA_Abort+0x5f8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d04f      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a43      	ldr	r2, [pc, #268]	@ (8003690 <HAL_DMA_Abort+0x5fc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d04a      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a41      	ldr	r2, [pc, #260]	@ (8003694 <HAL_DMA_Abort+0x600>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d045      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a40      	ldr	r2, [pc, #256]	@ (8003698 <HAL_DMA_Abort+0x604>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d040      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a3e      	ldr	r2, [pc, #248]	@ (800369c <HAL_DMA_Abort+0x608>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d03b      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a3d      	ldr	r2, [pc, #244]	@ (80036a0 <HAL_DMA_Abort+0x60c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d036      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a3b      	ldr	r2, [pc, #236]	@ (80036a4 <HAL_DMA_Abort+0x610>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d031      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a3a      	ldr	r2, [pc, #232]	@ (80036a8 <HAL_DMA_Abort+0x614>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d02c      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a38      	ldr	r2, [pc, #224]	@ (80036ac <HAL_DMA_Abort+0x618>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d027      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a37      	ldr	r2, [pc, #220]	@ (80036b0 <HAL_DMA_Abort+0x61c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d022      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a35      	ldr	r2, [pc, #212]	@ (80036b4 <HAL_DMA_Abort+0x620>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01d      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a34      	ldr	r2, [pc, #208]	@ (80036b8 <HAL_DMA_Abort+0x624>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d018      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a32      	ldr	r2, [pc, #200]	@ (80036bc <HAL_DMA_Abort+0x628>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a31      	ldr	r2, [pc, #196]	@ (80036c0 <HAL_DMA_Abort+0x62c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00e      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a2f      	ldr	r2, [pc, #188]	@ (80036c4 <HAL_DMA_Abort+0x630>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a2e      	ldr	r2, [pc, #184]	@ (80036c8 <HAL_DMA_Abort+0x634>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_DMA_Abort+0x58a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a2c      	ldr	r2, [pc, #176]	@ (80036cc <HAL_DMA_Abort+0x638>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_DMA_Abort+0x58e>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_DMA_Abort+0x590>
 8003622:	2300      	movs	r3, #0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d015      	beq.n	8003654 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003630:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00c      	beq.n	8003654 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003644:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003648:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003652:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40020010 	.word	0x40020010
 8003674:	40020028 	.word	0x40020028
 8003678:	40020040 	.word	0x40020040
 800367c:	40020058 	.word	0x40020058
 8003680:	40020070 	.word	0x40020070
 8003684:	40020088 	.word	0x40020088
 8003688:	400200a0 	.word	0x400200a0
 800368c:	400200b8 	.word	0x400200b8
 8003690:	40020410 	.word	0x40020410
 8003694:	40020428 	.word	0x40020428
 8003698:	40020440 	.word	0x40020440
 800369c:	40020458 	.word	0x40020458
 80036a0:	40020470 	.word	0x40020470
 80036a4:	40020488 	.word	0x40020488
 80036a8:	400204a0 	.word	0x400204a0
 80036ac:	400204b8 	.word	0x400204b8
 80036b0:	58025408 	.word	0x58025408
 80036b4:	5802541c 	.word	0x5802541c
 80036b8:	58025430 	.word	0x58025430
 80036bc:	58025444 	.word	0x58025444
 80036c0:	58025458 	.word	0x58025458
 80036c4:	5802546c 	.word	0x5802546c
 80036c8:	58025480 	.word	0x58025480
 80036cc:	58025494 	.word	0x58025494

080036d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e237      	b.n	8003b52 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d004      	beq.n	80036f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2280      	movs	r2, #128	@ 0x80
 80036f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e22c      	b.n	8003b52 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a5c      	ldr	r2, [pc, #368]	@ (8003870 <HAL_DMA_Abort_IT+0x1a0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d04a      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a5b      	ldr	r2, [pc, #364]	@ (8003874 <HAL_DMA_Abort_IT+0x1a4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d045      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a59      	ldr	r2, [pc, #356]	@ (8003878 <HAL_DMA_Abort_IT+0x1a8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d040      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a58      	ldr	r2, [pc, #352]	@ (800387c <HAL_DMA_Abort_IT+0x1ac>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d03b      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a56      	ldr	r2, [pc, #344]	@ (8003880 <HAL_DMA_Abort_IT+0x1b0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d036      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a55      	ldr	r2, [pc, #340]	@ (8003884 <HAL_DMA_Abort_IT+0x1b4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d031      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a53      	ldr	r2, [pc, #332]	@ (8003888 <HAL_DMA_Abort_IT+0x1b8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d02c      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a52      	ldr	r2, [pc, #328]	@ (800388c <HAL_DMA_Abort_IT+0x1bc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d027      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a50      	ldr	r2, [pc, #320]	@ (8003890 <HAL_DMA_Abort_IT+0x1c0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d022      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a4f      	ldr	r2, [pc, #316]	@ (8003894 <HAL_DMA_Abort_IT+0x1c4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d01d      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a4d      	ldr	r2, [pc, #308]	@ (8003898 <HAL_DMA_Abort_IT+0x1c8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d018      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a4c      	ldr	r2, [pc, #304]	@ (800389c <HAL_DMA_Abort_IT+0x1cc>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d013      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a4a      	ldr	r2, [pc, #296]	@ (80038a0 <HAL_DMA_Abort_IT+0x1d0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00e      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a49      	ldr	r2, [pc, #292]	@ (80038a4 <HAL_DMA_Abort_IT+0x1d4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d009      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a47      	ldr	r2, [pc, #284]	@ (80038a8 <HAL_DMA_Abort_IT+0x1d8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d004      	beq.n	8003798 <HAL_DMA_Abort_IT+0xc8>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a46      	ldr	r2, [pc, #280]	@ (80038ac <HAL_DMA_Abort_IT+0x1dc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d101      	bne.n	800379c <HAL_DMA_Abort_IT+0xcc>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_DMA_Abort_IT+0xce>
 800379c:	2300      	movs	r3, #0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 8086 	beq.w	80038b0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2204      	movs	r2, #4
 80037a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003870 <HAL_DMA_Abort_IT+0x1a0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d04a      	beq.n	800384c <HAL_DMA_Abort_IT+0x17c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2e      	ldr	r2, [pc, #184]	@ (8003874 <HAL_DMA_Abort_IT+0x1a4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d045      	beq.n	800384c <HAL_DMA_Abort_IT+0x17c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003878 <HAL_DMA_Abort_IT+0x1a8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d040      	beq.n	800384c <HAL_DMA_Abort_IT+0x17c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a2b      	ldr	r2, [pc, #172]	@ (800387c <HAL_DMA_Abort_IT+0x1ac>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d03b      	beq.n	800384c <HAL_DMA_Abort_IT+0x17c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a29      	ldr	r2, [pc, #164]	@ (8003880 <HAL_DMA_Abort_IT+0x1b0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d036      	beq.n	800384c <HAL_DMA_Abort_IT+0x17c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a28      	ldr	r2, [pc, #160]	@ (8003884 <HAL_DMA_Abort_IT+0x1b4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d031      	beq.n	800384c <HAL_DMA_Abort_IT+0x17c>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a26      	ldr	r2, [pc, #152]	@ (8003888 <HAL_DMA_Abort_IT+0x1b8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d02c      	beq.n	800384c <HAL_DMA_Abort_IT+0x17c>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a25      	ldr	r2, [pc, #148]	@ (800388c <HAL_DMA_Abort_IT+0x1bc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d027      	beq.n	800384c <HAL_DMA_Abort_IT+0x17c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a23      	ldr	r2, [pc, #140]	@ (8003890 <HAL_DMA_Abort_IT+0x1c0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d022      	beq.n	800384c <HAL_DMA_Abort_IT+0x17c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a22      	ldr	r2, [pc, #136]	@ (8003894 <HAL_DMA_Abort_IT+0x1c4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d01d      	beq.n	800384c <HAL_DMA_Abort_IT+0x17c>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a20      	ldr	r2, [pc, #128]	@ (8003898 <HAL_DMA_Abort_IT+0x1c8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d018      	beq.n	800384c <HAL_DMA_Abort_IT+0x17c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1f      	ldr	r2, [pc, #124]	@ (800389c <HAL_DMA_Abort_IT+0x1cc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_DMA_Abort_IT+0x17c>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1d      	ldr	r2, [pc, #116]	@ (80038a0 <HAL_DMA_Abort_IT+0x1d0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00e      	beq.n	800384c <HAL_DMA_Abort_IT+0x17c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1c      	ldr	r2, [pc, #112]	@ (80038a4 <HAL_DMA_Abort_IT+0x1d4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_DMA_Abort_IT+0x17c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1a      	ldr	r2, [pc, #104]	@ (80038a8 <HAL_DMA_Abort_IT+0x1d8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_DMA_Abort_IT+0x17c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a19      	ldr	r2, [pc, #100]	@ (80038ac <HAL_DMA_Abort_IT+0x1dc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d108      	bne.n	800385e <HAL_DMA_Abort_IT+0x18e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e178      	b.n	8003b50 <HAL_DMA_Abort_IT+0x480>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0201 	bic.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e16f      	b.n	8003b50 <HAL_DMA_Abort_IT+0x480>
 8003870:	40020010 	.word	0x40020010
 8003874:	40020028 	.word	0x40020028
 8003878:	40020040 	.word	0x40020040
 800387c:	40020058 	.word	0x40020058
 8003880:	40020070 	.word	0x40020070
 8003884:	40020088 	.word	0x40020088
 8003888:	400200a0 	.word	0x400200a0
 800388c:	400200b8 	.word	0x400200b8
 8003890:	40020410 	.word	0x40020410
 8003894:	40020428 	.word	0x40020428
 8003898:	40020440 	.word	0x40020440
 800389c:	40020458 	.word	0x40020458
 80038a0:	40020470 	.word	0x40020470
 80038a4:	40020488 	.word	0x40020488
 80038a8:	400204a0 	.word	0x400204a0
 80038ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 020e 	bic.w	r2, r2, #14
 80038be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a6c      	ldr	r2, [pc, #432]	@ (8003a78 <HAL_DMA_Abort_IT+0x3a8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d04a      	beq.n	8003960 <HAL_DMA_Abort_IT+0x290>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6b      	ldr	r2, [pc, #428]	@ (8003a7c <HAL_DMA_Abort_IT+0x3ac>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d045      	beq.n	8003960 <HAL_DMA_Abort_IT+0x290>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a69      	ldr	r2, [pc, #420]	@ (8003a80 <HAL_DMA_Abort_IT+0x3b0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d040      	beq.n	8003960 <HAL_DMA_Abort_IT+0x290>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a68      	ldr	r2, [pc, #416]	@ (8003a84 <HAL_DMA_Abort_IT+0x3b4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d03b      	beq.n	8003960 <HAL_DMA_Abort_IT+0x290>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a66      	ldr	r2, [pc, #408]	@ (8003a88 <HAL_DMA_Abort_IT+0x3b8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d036      	beq.n	8003960 <HAL_DMA_Abort_IT+0x290>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a65      	ldr	r2, [pc, #404]	@ (8003a8c <HAL_DMA_Abort_IT+0x3bc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d031      	beq.n	8003960 <HAL_DMA_Abort_IT+0x290>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a63      	ldr	r2, [pc, #396]	@ (8003a90 <HAL_DMA_Abort_IT+0x3c0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d02c      	beq.n	8003960 <HAL_DMA_Abort_IT+0x290>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a62      	ldr	r2, [pc, #392]	@ (8003a94 <HAL_DMA_Abort_IT+0x3c4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d027      	beq.n	8003960 <HAL_DMA_Abort_IT+0x290>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a60      	ldr	r2, [pc, #384]	@ (8003a98 <HAL_DMA_Abort_IT+0x3c8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d022      	beq.n	8003960 <HAL_DMA_Abort_IT+0x290>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a5f      	ldr	r2, [pc, #380]	@ (8003a9c <HAL_DMA_Abort_IT+0x3cc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d01d      	beq.n	8003960 <HAL_DMA_Abort_IT+0x290>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a5d      	ldr	r2, [pc, #372]	@ (8003aa0 <HAL_DMA_Abort_IT+0x3d0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d018      	beq.n	8003960 <HAL_DMA_Abort_IT+0x290>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a5c      	ldr	r2, [pc, #368]	@ (8003aa4 <HAL_DMA_Abort_IT+0x3d4>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d013      	beq.n	8003960 <HAL_DMA_Abort_IT+0x290>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a5a      	ldr	r2, [pc, #360]	@ (8003aa8 <HAL_DMA_Abort_IT+0x3d8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00e      	beq.n	8003960 <HAL_DMA_Abort_IT+0x290>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a59      	ldr	r2, [pc, #356]	@ (8003aac <HAL_DMA_Abort_IT+0x3dc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d009      	beq.n	8003960 <HAL_DMA_Abort_IT+0x290>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a57      	ldr	r2, [pc, #348]	@ (8003ab0 <HAL_DMA_Abort_IT+0x3e0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d004      	beq.n	8003960 <HAL_DMA_Abort_IT+0x290>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a56      	ldr	r2, [pc, #344]	@ (8003ab4 <HAL_DMA_Abort_IT+0x3e4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d108      	bne.n	8003972 <HAL_DMA_Abort_IT+0x2a2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e007      	b.n	8003982 <HAL_DMA_Abort_IT+0x2b2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0201 	bic.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a3c      	ldr	r2, [pc, #240]	@ (8003a78 <HAL_DMA_Abort_IT+0x3a8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d072      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a3a      	ldr	r2, [pc, #232]	@ (8003a7c <HAL_DMA_Abort_IT+0x3ac>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d06d      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a39      	ldr	r2, [pc, #228]	@ (8003a80 <HAL_DMA_Abort_IT+0x3b0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d068      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a37      	ldr	r2, [pc, #220]	@ (8003a84 <HAL_DMA_Abort_IT+0x3b4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d063      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a36      	ldr	r2, [pc, #216]	@ (8003a88 <HAL_DMA_Abort_IT+0x3b8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d05e      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a34      	ldr	r2, [pc, #208]	@ (8003a8c <HAL_DMA_Abort_IT+0x3bc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d059      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a33      	ldr	r2, [pc, #204]	@ (8003a90 <HAL_DMA_Abort_IT+0x3c0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d054      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a31      	ldr	r2, [pc, #196]	@ (8003a94 <HAL_DMA_Abort_IT+0x3c4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d04f      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a30      	ldr	r2, [pc, #192]	@ (8003a98 <HAL_DMA_Abort_IT+0x3c8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d04a      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a2e      	ldr	r2, [pc, #184]	@ (8003a9c <HAL_DMA_Abort_IT+0x3cc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d045      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a2d      	ldr	r2, [pc, #180]	@ (8003aa0 <HAL_DMA_Abort_IT+0x3d0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d040      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa4 <HAL_DMA_Abort_IT+0x3d4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d03b      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa8 <HAL_DMA_Abort_IT+0x3d8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d036      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a28      	ldr	r2, [pc, #160]	@ (8003aac <HAL_DMA_Abort_IT+0x3dc>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d031      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a27      	ldr	r2, [pc, #156]	@ (8003ab0 <HAL_DMA_Abort_IT+0x3e0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d02c      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a25      	ldr	r2, [pc, #148]	@ (8003ab4 <HAL_DMA_Abort_IT+0x3e4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d027      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a24      	ldr	r2, [pc, #144]	@ (8003ab8 <HAL_DMA_Abort_IT+0x3e8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d022      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a22      	ldr	r2, [pc, #136]	@ (8003abc <HAL_DMA_Abort_IT+0x3ec>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d01d      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a21      	ldr	r2, [pc, #132]	@ (8003ac0 <HAL_DMA_Abort_IT+0x3f0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d018      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac4 <HAL_DMA_Abort_IT+0x3f4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ac8 <HAL_DMA_Abort_IT+0x3f8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00e      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1c      	ldr	r2, [pc, #112]	@ (8003acc <HAL_DMA_Abort_IT+0x3fc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d009      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad0 <HAL_DMA_Abort_IT+0x400>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d004      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x3a2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a19      	ldr	r2, [pc, #100]	@ (8003ad4 <HAL_DMA_Abort_IT+0x404>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d132      	bne.n	8003ad8 <HAL_DMA_Abort_IT+0x408>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e031      	b.n	8003ada <HAL_DMA_Abort_IT+0x40a>
 8003a76:	bf00      	nop
 8003a78:	40020010 	.word	0x40020010
 8003a7c:	40020028 	.word	0x40020028
 8003a80:	40020040 	.word	0x40020040
 8003a84:	40020058 	.word	0x40020058
 8003a88:	40020070 	.word	0x40020070
 8003a8c:	40020088 	.word	0x40020088
 8003a90:	400200a0 	.word	0x400200a0
 8003a94:	400200b8 	.word	0x400200b8
 8003a98:	40020410 	.word	0x40020410
 8003a9c:	40020428 	.word	0x40020428
 8003aa0:	40020440 	.word	0x40020440
 8003aa4:	40020458 	.word	0x40020458
 8003aa8:	40020470 	.word	0x40020470
 8003aac:	40020488 	.word	0x40020488
 8003ab0:	400204a0 	.word	0x400204a0
 8003ab4:	400204b8 	.word	0x400204b8
 8003ab8:	58025408 	.word	0x58025408
 8003abc:	5802541c 	.word	0x5802541c
 8003ac0:	58025430 	.word	0x58025430
 8003ac4:	58025444 	.word	0x58025444
 8003ac8:	58025458 	.word	0x58025458
 8003acc:	5802546c 	.word	0x5802546c
 8003ad0:	58025480 	.word	0x58025480
 8003ad4:	58025494 	.word	0x58025494
 8003ad8:	2300      	movs	r3, #0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d028      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	2201      	movs	r2, #1
 8003afe:	409a      	lsls	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b0c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00c      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b24:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b2e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop

08003b5c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b098      	sub	sp, #96	@ 0x60
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003b64:	4a84      	ldr	r2, [pc, #528]	@ (8003d78 <HAL_FDCAN_Init+0x21c>)
 8003b66:	f107 030c 	add.w	r3, r7, #12
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	224c      	movs	r2, #76	@ 0x4c
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f00b ffc9 	bl	800fb06 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e1c6      	b.n	8003f0c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a7e      	ldr	r2, [pc, #504]	@ (8003d7c <HAL_FDCAN_Init+0x220>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d106      	bne.n	8003b96 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003b90:	461a      	mov	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fd f804 	bl	8000bb8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0210 	bic.w	r2, r2, #16
 8003bbe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bc0:	f7ff f8b0 	bl	8002d24 <HAL_GetTick>
 8003bc4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003bc6:	e014      	b.n	8003bf2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003bc8:	f7ff f8ac 	bl	8002d24 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b0a      	cmp	r3, #10
 8003bd4:	d90d      	bls.n	8003bf2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bdc:	f043 0201 	orr.w	r2, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2203      	movs	r2, #3
 8003bea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e18c      	b.n	8003f0c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d0e3      	beq.n	8003bc8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c10:	f7ff f888 	bl	8002d24 <HAL_GetTick>
 8003c14:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c16:	e014      	b.n	8003c42 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c18:	f7ff f884 	bl	8002d24 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b0a      	cmp	r3, #10
 8003c24:	d90d      	bls.n	8003c42 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c2c:	f043 0201 	orr.w	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e164      	b.n	8003f0c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0e3      	beq.n	8003c18 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0202 	orr.w	r2, r2, #2
 8003c5e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	7c1b      	ldrb	r3, [r3, #16]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d108      	bne.n	8003c7a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c76:	619a      	str	r2, [r3, #24]
 8003c78:	e007      	b.n	8003c8a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699a      	ldr	r2, [r3, #24]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c88:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	7c5b      	ldrb	r3, [r3, #17]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d108      	bne.n	8003ca4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699a      	ldr	r2, [r3, #24]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ca0:	619a      	str	r2, [r3, #24]
 8003ca2:	e007      	b.n	8003cb4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003cb2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	7c9b      	ldrb	r3, [r3, #18]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d108      	bne.n	8003cce <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003cca:	619a      	str	r2, [r3, #24]
 8003ccc:	e007      	b.n	8003cde <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003cdc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003d02:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0210 	bic.w	r2, r2, #16
 8003d12:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d108      	bne.n	8003d2e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0204 	orr.w	r2, r2, #4
 8003d2a:	619a      	str	r2, [r3, #24]
 8003d2c:	e030      	b.n	8003d90 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d02c      	beq.n	8003d90 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d020      	beq.n	8003d80 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699a      	ldr	r2, [r3, #24]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d4c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0210 	orr.w	r2, r2, #16
 8003d5c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d114      	bne.n	8003d90 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699a      	ldr	r2, [r3, #24]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0220 	orr.w	r2, r2, #32
 8003d74:	619a      	str	r2, [r3, #24]
 8003d76:	e00b      	b.n	8003d90 <HAL_FDCAN_Init+0x234>
 8003d78:	08012b54 	.word	0x08012b54
 8003d7c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0220 	orr.w	r2, r2, #32
 8003d8e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003da0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003da8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	3b01      	subs	r3, #1
 8003db2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003db8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003dba:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dc4:	d115      	bne.n	8003df2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003dd4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003dde:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	3b01      	subs	r3, #1
 8003de8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003dee:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003df0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e18:	4413      	add	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d011      	beq.n	8003e42 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003e26:	f023 0107 	bic.w	r1, r3, #7
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	3360      	adds	r3, #96	@ 0x60
 8003e32:	443b      	add	r3, r7
 8003e34:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d011      	beq.n	8003e6e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e52:	f023 0107 	bic.w	r1, r3, #7
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	3360      	adds	r3, #96	@ 0x60
 8003e5e:	443b      	add	r3, r7
 8003e60:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d012      	beq.n	8003e9c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e7e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	3360      	adds	r3, #96	@ 0x60
 8003e8a:	443b      	add	r3, r7
 8003e8c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003e90:	011a      	lsls	r2, r3, #4
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d012      	beq.n	8003eca <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003eac:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	3360      	adds	r3, #96	@ 0x60
 8003eb8:	443b      	add	r3, r7
 8003eba:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003ebe:	021a      	lsls	r2, r3, #8
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a11      	ldr	r2, [pc, #68]	@ (8003f14 <HAL_FDCAN_Init+0x3b8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d107      	bne.n	8003ee4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f022 0203 	bic.w	r2, r2, #3
 8003ee2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fe13 	bl	8004b28 <FDCAN_CalcultateRamBlockAddresses>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003f08:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3760      	adds	r7, #96	@ 0x60
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	4000a000 	.word	0x4000a000

08003f18 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003f28:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d002      	beq.n	8003f36 <HAL_FDCAN_ConfigFilter+0x1e>
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d157      	bne.n	8003fe6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d12b      	bne.n	8003f96 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	2b07      	cmp	r3, #7
 8003f44:	d10d      	bne.n	8003f62 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003f52:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003f58:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003f5a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	e00e      	b.n	8003f80 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f6e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003f76:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	e025      	b.n	8003fe2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	075a      	lsls	r2, r3, #29
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	2b07      	cmp	r3, #7
 8003faa:	d103      	bne.n	8003fb4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	e006      	b.n	8003fc2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	079a      	lsls	r2, r3, #30
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4413      	add	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e008      	b.n	8003ff8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fec:	f043 0202 	orr.w	r2, r3, #2
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
  }
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	371c      	adds	r7, #28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	d110      	bne.n	8004040 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004026:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800402c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004038:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	e008      	b.n	8004052 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004046:	f043 0204 	orr.w	r2, r3, #4
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d111      	bne.n	8004096 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699a      	ldr	r2, [r3, #24]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	e008      	b.n	80040a8 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800409c:	f043 0204 	orr.w	r2, r3, #4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
  }
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d141      	bne.n	8004150 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80040d4:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040e2:	f043 0220 	orr.w	r2, r3, #32
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e038      	b.n	8004162 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80040f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d009      	beq.n	8004114 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004106:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e026      	b.n	8004162 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 fe82 	bl	8004e34 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2101      	movs	r1, #1
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	fa01 f202 	lsl.w	r2, r1, r2
 800413c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004140:	2201      	movs	r2, #1
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	409a      	lsls	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e008      	b.n	8004162 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004156:	f043 0208 	orr.w	r2, r3, #8
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
  }
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800416c:	b480      	push	{r7}
 800416e:	b08b      	sub	sp, #44	@ 0x2c
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004184:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004186:	7efb      	ldrb	r3, [r7, #27]
 8004188:	2b02      	cmp	r3, #2
 800418a:	f040 8149 	bne.w	8004420 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b40      	cmp	r3, #64	@ 0x40
 8004192:	d14c      	bne.n	800422e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800419c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041aa:	f043 0220 	orr.w	r2, r3, #32
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e13c      	b.n	8004432 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d109      	bne.n	80041dc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e12a      	b.n	8004432 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041e4:	0e1b      	lsrs	r3, r3, #24
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d10a      	bne.n	8004204 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041f6:	0fdb      	lsrs	r3, r3, #31
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004200:	2301      	movs	r3, #1
 8004202:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	4413      	add	r3, r2
 8004216:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004220:	69f9      	ldr	r1, [r7, #28]
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	627b      	str	r3, [r7, #36]	@ 0x24
 800422c:	e068      	b.n	8004300 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b41      	cmp	r3, #65	@ 0x41
 8004232:	d14c      	bne.n	80042ce <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800423c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d109      	bne.n	8004258 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800424a:	f043 0220 	orr.w	r2, r3, #32
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0ec      	b.n	8004432 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004264:	2b00      	cmp	r3, #0
 8004266:	d109      	bne.n	800427c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800426e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0da      	b.n	8004432 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004284:	0e1b      	lsrs	r3, r3, #24
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b01      	cmp	r3, #1
 800428c:	d10a      	bne.n	80042a4 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004296:	0fdb      	lsrs	r3, r3, #31
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80042a0:	2301      	movs	r3, #1
 80042a2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042ac:	0a1b      	lsrs	r3, r3, #8
 80042ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c0:	69f9      	ldr	r1, [r7, #28]
 80042c2:	fb01 f303 	mul.w	r3, r1, r3
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80042cc:	e018      	b.n	8004300 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d309      	bcc.n	80042ec <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0a2      	b.n	8004432 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d107      	bne.n	8004324 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	0c9b      	lsrs	r3, r3, #18
 800431a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	e005      	b.n	8004330 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434a:	3304      	adds	r3, #4
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	0c1b      	lsrs	r3, r3, #16
 800435e:	f003 020f 	and.w	r2, r3, #15
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	0e1b      	lsrs	r3, r3, #24
 8004384:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0fda      	lsrs	r2, r3, #31
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	3304      	adds	r3, #4
 800439a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80043a0:	2300      	movs	r3, #0
 80043a2:	623b      	str	r3, [r7, #32]
 80043a4:	e00a      	b.n	80043bc <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	441a      	add	r2, r3
 80043ac:	6839      	ldr	r1, [r7, #0]
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	440b      	add	r3, r1
 80043b2:	7812      	ldrb	r2, [r2, #0]
 80043b4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	3301      	adds	r3, #1
 80043ba:	623b      	str	r3, [r7, #32]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004440 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80043c2:	5cd3      	ldrb	r3, [r2, r3]
 80043c4:	461a      	mov	r2, r3
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d3ec      	bcc.n	80043a6 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b40      	cmp	r3, #64	@ 0x40
 80043d0:	d105      	bne.n	80043de <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80043dc:	e01e      	b.n	800441c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b41      	cmp	r3, #65	@ 0x41
 80043e2:	d105      	bne.n	80043f0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80043ee:	e015      	b.n	800441c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b1f      	cmp	r3, #31
 80043f4:	d808      	bhi.n	8004408 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2101      	movs	r1, #1
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004402:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8004406:	e009      	b.n	800441c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 021f 	and.w	r2, r3, #31
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f202 	lsl.w	r2, r1, r2
 8004418:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	e008      	b.n	8004432 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004426:	f043 0208 	orr.w	r2, r3, #8
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
  }
}
 8004432:	4618      	mov	r0, r3
 8004434:	372c      	adds	r7, #44	@ 0x2c
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	08012c28 	.word	0x08012c28

08004444 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004456:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004458:	7dfb      	ldrb	r3, [r7, #23]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d002      	beq.n	8004464 <HAL_FDCAN_ActivateNotification+0x20>
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d155      	bne.n	8004510 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4013      	ands	r3, r2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d108      	bne.n	8004484 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0201 	orr.w	r2, r2, #1
 8004480:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004482:	e014      	b.n	80044ae <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4013      	ands	r3, r2
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	429a      	cmp	r2, r3
 8004492:	d108      	bne.n	80044a6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0202 	orr.w	r2, r2, #2
 80044a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044a4:	e003      	b.n	80044ae <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2203      	movs	r2, #3
 80044ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d009      	beq.n	80044cc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004530 <HAL_FDCAN_ActivateNotification+0xec>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	430b      	orrs	r3, r1
 80044fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80044fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	0f9b      	lsrs	r3, r3, #30
 8004506:	490b      	ldr	r1, [pc, #44]	@ (8004534 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004508:	4313      	orrs	r3, r2
 800450a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	e008      	b.n	8004522 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004516:	f043 0202 	orr.w	r2, r3, #2
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
  }
}
 8004522:	4618      	mov	r0, r3
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	3fcfffff 	.word	0x3fcfffff
 8004534:	4000a800 	.word	0x4000a800

08004538 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b096      	sub	sp, #88	@ 0x58
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004540:	4b95      	ldr	r3, [pc, #596]	@ (8004798 <HAL_FDCAN_IRQHandler+0x260>)
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	079b      	lsls	r3, r3, #30
 8004546:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004548:	4b93      	ldr	r3, [pc, #588]	@ (8004798 <HAL_FDCAN_IRQHandler+0x260>)
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	079b      	lsls	r3, r3, #30
 800454e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004550:	4013      	ands	r3, r2
 8004552:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800455a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800455e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004566:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004568:	4013      	ands	r3, r2
 800456a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004580:	4013      	ands	r3, r2
 8004582:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800458a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800458e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004596:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004598:	4013      	ands	r3, r2
 800459a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a2:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80045a6:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045b0:	4013      	ands	r3, r2
 80045b2:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ba:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80045be:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045c8:	4013      	ands	r3, r2
 80045ca:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80045dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00f      	beq.n	8004606 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80045e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80045fa:	4b67      	ldr	r3, [pc, #412]	@ (8004798 <HAL_FDCAN_IRQHandler+0x260>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fa44 	bl	8004a8e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01c      	beq.n	800464a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004616:	2b00      	cmp	r3, #0
 8004618:	d017      	beq.n	800464a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004622:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800462c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800462e:	4013      	ands	r3, r2
 8004630:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800463a:	651a      	str	r2, [r3, #80]	@ 0x50
 800463c:	4b56      	ldr	r3, [pc, #344]	@ (8004798 <HAL_FDCAN_IRQHandler+0x260>)
 800463e:	2200      	movs	r2, #0
 8004640:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004642:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f9f9 	bl	8004a3c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800464a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00d      	beq.n	800466c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004656:	4b51      	ldr	r3, [pc, #324]	@ (800479c <HAL_FDCAN_IRQHandler+0x264>)
 8004658:	400b      	ands	r3, r1
 800465a:	6513      	str	r3, [r2, #80]	@ 0x50
 800465c:	4a4e      	ldr	r2, [pc, #312]	@ (8004798 <HAL_FDCAN_IRQHandler+0x260>)
 800465e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004660:	0f9b      	lsrs	r3, r3, #30
 8004662:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004664:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f9b2 	bl	80049d0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800466c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00d      	beq.n	800468e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004678:	4b48      	ldr	r3, [pc, #288]	@ (800479c <HAL_FDCAN_IRQHandler+0x264>)
 800467a:	400b      	ands	r3, r1
 800467c:	6513      	str	r3, [r2, #80]	@ 0x50
 800467e:	4a46      	ldr	r2, [pc, #280]	@ (8004798 <HAL_FDCAN_IRQHandler+0x260>)
 8004680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004682:	0f9b      	lsrs	r3, r3, #30
 8004684:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004686:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f9ac 	bl	80049e6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800468e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800469a:	4b40      	ldr	r3, [pc, #256]	@ (800479c <HAL_FDCAN_IRQHandler+0x264>)
 800469c:	400b      	ands	r3, r1
 800469e:	6513      	str	r3, [r2, #80]	@ 0x50
 80046a0:	4a3d      	ldr	r2, [pc, #244]	@ (8004798 <HAL_FDCAN_IRQHandler+0x260>)
 80046a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046a4:	0f9b      	lsrs	r3, r3, #30
 80046a6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80046a8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fc fba4 	bl	8000df8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80046b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00d      	beq.n	80046d2 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80046bc:	4b37      	ldr	r3, [pc, #220]	@ (800479c <HAL_FDCAN_IRQHandler+0x264>)
 80046be:	400b      	ands	r3, r1
 80046c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80046c2:	4a35      	ldr	r2, [pc, #212]	@ (8004798 <HAL_FDCAN_IRQHandler+0x260>)
 80046c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046c6:	0f9b      	lsrs	r3, r3, #30
 80046c8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80046ca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f995 	bl	80049fc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80046d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00f      	beq.n	80046fc <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80046dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80046f0:	4b29      	ldr	r3, [pc, #164]	@ (8004798 <HAL_FDCAN_IRQHandler+0x260>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f98b 	bl	8004a12 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80046fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01c      	beq.n	8004740 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800470c:	2b00      	cmp	r3, #0
 800470e:	d017      	beq.n	8004740 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004718:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004724:	4013      	ands	r3, r2
 8004726:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004730:	651a      	str	r2, [r3, #80]	@ 0x50
 8004732:	4b19      	ldr	r3, [pc, #100]	@ (8004798 <HAL_FDCAN_IRQHandler+0x260>)
 8004734:	2200      	movs	r2, #0
 8004736:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004738:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f973 	bl	8004a26 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004742:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00f      	beq.n	800476a <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800474a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800475c:	651a      	str	r2, [r3, #80]	@ 0x50
 800475e:	4b0e      	ldr	r3, [pc, #56]	@ (8004798 <HAL_FDCAN_IRQHandler+0x260>)
 8004760:	2200      	movs	r2, #0
 8004762:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f974 	bl	8004a52 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800476a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800476c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d015      	beq.n	80047a0 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d010      	beq.n	80047a0 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004786:	651a      	str	r2, [r3, #80]	@ 0x50
 8004788:	4b03      	ldr	r3, [pc, #12]	@ (8004798 <HAL_FDCAN_IRQHandler+0x260>)
 800478a:	2200      	movs	r2, #0
 800478c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f969 	bl	8004a66 <HAL_FDCAN_TimestampWraparoundCallback>
 8004794:	e004      	b.n	80047a0 <HAL_FDCAN_IRQHandler+0x268>
 8004796:	bf00      	nop
 8004798:	4000a800 	.word	0x4000a800
 800479c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80047a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00f      	beq.n	80047ca <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80047aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80047bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80047be:	4b81      	ldr	r3, [pc, #516]	@ (80049c4 <HAL_FDCAN_IRQHandler+0x48c>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f958 	bl	8004a7a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80047ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d014      	beq.n	80047fe <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80047d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00f      	beq.n	80047fe <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80047e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80047e8:	4b76      	ldr	r3, [pc, #472]	@ (80049c4 <HAL_FDCAN_IRQHandler+0x48c>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80047fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00d      	beq.n	8004820 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800480a:	4b6f      	ldr	r3, [pc, #444]	@ (80049c8 <HAL_FDCAN_IRQHandler+0x490>)
 800480c:	400b      	ands	r3, r1
 800480e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004810:	4a6c      	ldr	r2, [pc, #432]	@ (80049c4 <HAL_FDCAN_IRQHandler+0x48c>)
 8004812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004814:	0f9b      	lsrs	r3, r3, #30
 8004816:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004818:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f94b 	bl	8004ab6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004822:	2b00      	cmp	r3, #0
 8004824:	d011      	beq.n	800484a <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800482c:	4b66      	ldr	r3, [pc, #408]	@ (80049c8 <HAL_FDCAN_IRQHandler+0x490>)
 800482e:	400b      	ands	r3, r1
 8004830:	6513      	str	r3, [r2, #80]	@ 0x50
 8004832:	4a64      	ldr	r2, [pc, #400]	@ (80049c4 <HAL_FDCAN_IRQHandler+0x48c>)
 8004834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004836:	0f9b      	lsrs	r3, r3, #30
 8004838:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a5f      	ldr	r2, [pc, #380]	@ (80049cc <HAL_FDCAN_IRQHandler+0x494>)
 8004850:	4293      	cmp	r3, r2
 8004852:	f040 80aa 	bne.w	80049aa <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80a2 	beq.w	80049aa <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800487a:	4013      	ands	r3, r2
 800487c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004888:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004892:	4013      	ands	r3, r2
 8004894:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048aa:	4013      	ands	r3, r2
 80048ac:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80048b8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	6a3a      	ldr	r2, [r7, #32]
 80048c2:	4013      	ands	r3, r2
 80048c4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80048d0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	4013      	ands	r3, r2
 80048dc:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80048ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d007      	beq.n	8004904 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048fa:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80048fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f8e4 	bl	8004acc <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004910:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004912:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f8e4 	bl	8004ae2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d019      	beq.n	8004958 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d014      	beq.n	8004958 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004934:	0c1b      	lsrs	r3, r3, #16
 8004936:	b29b      	uxth	r3, r3
 8004938:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004940:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004944:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2240      	movs	r2, #64	@ 0x40
 800494c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	6939      	ldr	r1, [r7, #16]
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f8d0 	bl	8004af8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004964:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004966:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f8d1 	bl	8004b10 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00b      	beq.n	800498c <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	6a3a      	ldr	r2, [r7, #32]
 800497a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f874 	bl	8004aa2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80049ba:	bf00      	nop
 80049bc:	3758      	adds	r7, #88	@ 0x58
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	4000a800 	.word	0x4000a800
 80049c8:	3fcfffff 	.word	0x3fcfffff
 80049cc:	4000a000 	.word	0x4000a000

080049d0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
	...

08004b28 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b34:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004b3e:	4ba7      	ldr	r3, [pc, #668]	@ (8004ddc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	0091      	lsls	r1, r2, #2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b58:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b60:	041a      	lsls	r2, r3, #16
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	4413      	add	r3, r2
 8004b74:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004b7e:	4b97      	ldr	r3, [pc, #604]	@ (8004ddc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	0091      	lsls	r1, r2, #2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b98:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba0:	041a      	lsls	r2, r3, #16
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004bc0:	4b86      	ldr	r3, [pc, #536]	@ (8004ddc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	0091      	lsls	r1, r2, #2
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6812      	ldr	r2, [r2, #0]
 8004bcc:	430b      	orrs	r3, r1
 8004bce:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004bda:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	041a      	lsls	r2, r3, #16
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004bf6:	fb02 f303 	mul.w	r3, r2, r3
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004c08:	4b74      	ldr	r3, [pc, #464]	@ (8004ddc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	0091      	lsls	r1, r2, #2
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	430b      	orrs	r3, r1
 8004c16:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c22:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c2a:	041a      	lsls	r2, r3, #16
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004c3e:	fb02 f303 	mul.w	r3, r2, r3
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	4413      	add	r3, r2
 8004c46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004c50:	4b62      	ldr	r3, [pc, #392]	@ (8004ddc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c52:	4013      	ands	r3, r2
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	0091      	lsls	r1, r2, #2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	4413      	add	r3, r2
 8004c72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004c7c:	4b57      	ldr	r3, [pc, #348]	@ (8004ddc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	0091      	lsls	r1, r2, #2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c96:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9e:	041a      	lsls	r2, r3, #16
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004cbe:	4b47      	ldr	r3, [pc, #284]	@ (8004ddc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	0091      	lsls	r1, r2, #2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004cd8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce0:	041a      	lsls	r2, r3, #16
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004cf4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cfc:	061a      	lsls	r2, r3, #24
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d0c:	4b34      	ldr	r3, [pc, #208]	@ (8004de0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004d0e:	4413      	add	r3, r2
 8004d10:	009a      	lsls	r2, r3, #2
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	441a      	add	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004d48:	441a      	add	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8004d5a:	fb01 f303 	mul.w	r3, r1, r3
 8004d5e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004d60:	441a      	add	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8004d72:	fb01 f303 	mul.w	r3, r1, r3
 8004d76:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004d78:	441a      	add	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	441a      	add	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004da2:	fb01 f303 	mul.w	r3, r1, r3
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004dbe:	fb01 f303 	mul.w	r3, r1, r3
 8004dc2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004dc4:	441a      	add	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd2:	4a04      	ldr	r2, [pc, #16]	@ (8004de4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d915      	bls.n	8004e04 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004dd8:	e006      	b.n	8004de8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004dda:	bf00      	nop
 8004ddc:	ffff0003 	.word	0xffff0003
 8004de0:	10002b00 	.word	0x10002b00
 8004de4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dee:	f043 0220 	orr.w	r2, r3, #32
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e010      	b.n	8004e26 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	e005      	b.n	8004e18 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3304      	adds	r3, #4
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d3f3      	bcc.n	8004e0c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop

08004e34 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b089      	sub	sp, #36	@ 0x24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004e52:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	e00a      	b.n	8004e76 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004e68:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004e6e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e74:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004e80:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004e86:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004e8c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ea2:	6839      	ldr	r1, [r7, #0]
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	e020      	b.n	8004f0e <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	3303      	adds	r3, #3
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	3302      	adds	r3, #2
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	440b      	add	r3, r1
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004ee4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	440b      	add	r3, r1
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004ef2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	440a      	add	r2, r1
 8004efa:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004efc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	3304      	adds	r3, #4
 8004f06:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	4a06      	ldr	r2, [pc, #24]	@ (8004f2c <FDCAN_CopyMessageToRAM+0xf8>)
 8004f14:	5cd3      	ldrb	r3, [r2, r3]
 8004f16:	461a      	mov	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d3d6      	bcc.n	8004ecc <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	3724      	adds	r7, #36	@ 0x24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	08012c28 	.word	0x08012c28

08004f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b089      	sub	sp, #36	@ 0x24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f3e:	4b86      	ldr	r3, [pc, #536]	@ (8005158 <HAL_GPIO_Init+0x228>)
 8004f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f42:	e18c      	b.n	800525e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	2101      	movs	r1, #1
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f50:	4013      	ands	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 817e 	beq.w	8005258 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d005      	beq.n	8004f74 <HAL_GPIO_Init+0x44>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d130      	bne.n	8004fd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	2203      	movs	r2, #3
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004faa:	2201      	movs	r2, #1
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	091b      	lsrs	r3, r3, #4
 8004fc0:	f003 0201 	and.w	r2, r3, #1
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d017      	beq.n	8005012 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	2203      	movs	r2, #3
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4313      	orrs	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d123      	bne.n	8005066 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	08da      	lsrs	r2, r3, #3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3208      	adds	r2, #8
 8005026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800502a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	220f      	movs	r2, #15
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	43db      	mvns	r3, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4013      	ands	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	691a      	ldr	r2, [r3, #16]
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4313      	orrs	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	08da      	lsrs	r2, r3, #3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3208      	adds	r2, #8
 8005060:	69b9      	ldr	r1, [r7, #24]
 8005062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	2203      	movs	r2, #3
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f003 0203 	and.w	r2, r3, #3
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4313      	orrs	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 80d8 	beq.w	8005258 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050a8:	4b2c      	ldr	r3, [pc, #176]	@ (800515c <HAL_GPIO_Init+0x22c>)
 80050aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050ae:	4a2b      	ldr	r2, [pc, #172]	@ (800515c <HAL_GPIO_Init+0x22c>)
 80050b0:	f043 0302 	orr.w	r3, r3, #2
 80050b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80050b8:	4b28      	ldr	r3, [pc, #160]	@ (800515c <HAL_GPIO_Init+0x22c>)
 80050ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050c6:	4a26      	ldr	r2, [pc, #152]	@ (8005160 <HAL_GPIO_Init+0x230>)
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	089b      	lsrs	r3, r3, #2
 80050cc:	3302      	adds	r3, #2
 80050ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	220f      	movs	r2, #15
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43db      	mvns	r3, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4013      	ands	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005164 <HAL_GPIO_Init+0x234>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d04a      	beq.n	8005188 <HAL_GPIO_Init+0x258>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005168 <HAL_GPIO_Init+0x238>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d02b      	beq.n	8005152 <HAL_GPIO_Init+0x222>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1b      	ldr	r2, [pc, #108]	@ (800516c <HAL_GPIO_Init+0x23c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d025      	beq.n	800514e <HAL_GPIO_Init+0x21e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a1a      	ldr	r2, [pc, #104]	@ (8005170 <HAL_GPIO_Init+0x240>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d01f      	beq.n	800514a <HAL_GPIO_Init+0x21a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a19      	ldr	r2, [pc, #100]	@ (8005174 <HAL_GPIO_Init+0x244>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d019      	beq.n	8005146 <HAL_GPIO_Init+0x216>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a18      	ldr	r2, [pc, #96]	@ (8005178 <HAL_GPIO_Init+0x248>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <HAL_GPIO_Init+0x212>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a17      	ldr	r2, [pc, #92]	@ (800517c <HAL_GPIO_Init+0x24c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00d      	beq.n	800513e <HAL_GPIO_Init+0x20e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a16      	ldr	r2, [pc, #88]	@ (8005180 <HAL_GPIO_Init+0x250>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d007      	beq.n	800513a <HAL_GPIO_Init+0x20a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a15      	ldr	r2, [pc, #84]	@ (8005184 <HAL_GPIO_Init+0x254>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d101      	bne.n	8005136 <HAL_GPIO_Init+0x206>
 8005132:	2309      	movs	r3, #9
 8005134:	e029      	b.n	800518a <HAL_GPIO_Init+0x25a>
 8005136:	230a      	movs	r3, #10
 8005138:	e027      	b.n	800518a <HAL_GPIO_Init+0x25a>
 800513a:	2307      	movs	r3, #7
 800513c:	e025      	b.n	800518a <HAL_GPIO_Init+0x25a>
 800513e:	2306      	movs	r3, #6
 8005140:	e023      	b.n	800518a <HAL_GPIO_Init+0x25a>
 8005142:	2305      	movs	r3, #5
 8005144:	e021      	b.n	800518a <HAL_GPIO_Init+0x25a>
 8005146:	2304      	movs	r3, #4
 8005148:	e01f      	b.n	800518a <HAL_GPIO_Init+0x25a>
 800514a:	2303      	movs	r3, #3
 800514c:	e01d      	b.n	800518a <HAL_GPIO_Init+0x25a>
 800514e:	2302      	movs	r3, #2
 8005150:	e01b      	b.n	800518a <HAL_GPIO_Init+0x25a>
 8005152:	2301      	movs	r3, #1
 8005154:	e019      	b.n	800518a <HAL_GPIO_Init+0x25a>
 8005156:	bf00      	nop
 8005158:	58000080 	.word	0x58000080
 800515c:	58024400 	.word	0x58024400
 8005160:	58000400 	.word	0x58000400
 8005164:	58020000 	.word	0x58020000
 8005168:	58020400 	.word	0x58020400
 800516c:	58020800 	.word	0x58020800
 8005170:	58020c00 	.word	0x58020c00
 8005174:	58021000 	.word	0x58021000
 8005178:	58021400 	.word	0x58021400
 800517c:	58021800 	.word	0x58021800
 8005180:	58021c00 	.word	0x58021c00
 8005184:	58022400 	.word	0x58022400
 8005188:	2300      	movs	r3, #0
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	f002 0203 	and.w	r2, r2, #3
 8005190:	0092      	lsls	r2, r2, #2
 8005192:	4093      	lsls	r3, r2
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4313      	orrs	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800519a:	4938      	ldr	r1, [pc, #224]	@ (800527c <HAL_GPIO_Init+0x34c>)
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	089b      	lsrs	r3, r3, #2
 80051a0:	3302      	adds	r3, #2
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	43db      	mvns	r3, r3
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	4013      	ands	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	43db      	mvns	r3, r3
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	4013      	ands	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80051fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	43db      	mvns	r3, r3
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	4013      	ands	r3, r2
 8005212:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	43db      	mvns	r3, r3
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	4013      	ands	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	3301      	adds	r3, #1
 800525c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	fa22 f303 	lsr.w	r3, r2, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	f47f ae6b 	bne.w	8004f44 <HAL_GPIO_Init+0x14>
  }
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	3724      	adds	r7, #36	@ 0x24
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	58000400 	.word	0x58000400

08005280 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005288:	4b19      	ldr	r3, [pc, #100]	@ (80052f0 <HAL_PWREx_ConfigSupply+0x70>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b04      	cmp	r3, #4
 8005292:	d00a      	beq.n	80052aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005294:	4b16      	ldr	r3, [pc, #88]	@ (80052f0 <HAL_PWREx_ConfigSupply+0x70>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d001      	beq.n	80052a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e01f      	b.n	80052e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e01d      	b.n	80052e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052aa:	4b11      	ldr	r3, [pc, #68]	@ (80052f0 <HAL_PWREx_ConfigSupply+0x70>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f023 0207 	bic.w	r2, r3, #7
 80052b2:	490f      	ldr	r1, [pc, #60]	@ (80052f0 <HAL_PWREx_ConfigSupply+0x70>)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052ba:	f7fd fd33 	bl	8002d24 <HAL_GetTick>
 80052be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052c0:	e009      	b.n	80052d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052c2:	f7fd fd2f 	bl	8002d24 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052d0:	d901      	bls.n	80052d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e007      	b.n	80052e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052d6:	4b06      	ldr	r3, [pc, #24]	@ (80052f0 <HAL_PWREx_ConfigSupply+0x70>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e2:	d1ee      	bne.n	80052c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	58024800 	.word	0x58024800

080052f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08c      	sub	sp, #48	@ 0x30
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e3c8      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 8087 	beq.w	8005422 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005314:	4b88      	ldr	r3, [pc, #544]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800531c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800531e:	4b86      	ldr	r3, [pc, #536]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 8005320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005322:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005326:	2b10      	cmp	r3, #16
 8005328:	d007      	beq.n	800533a <HAL_RCC_OscConfig+0x46>
 800532a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532c:	2b18      	cmp	r3, #24
 800532e:	d110      	bne.n	8005352 <HAL_RCC_OscConfig+0x5e>
 8005330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d10b      	bne.n	8005352 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800533a:	4b7f      	ldr	r3, [pc, #508]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d06c      	beq.n	8005420 <HAL_RCC_OscConfig+0x12c>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d168      	bne.n	8005420 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e3a2      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800535a:	d106      	bne.n	800536a <HAL_RCC_OscConfig+0x76>
 800535c:	4b76      	ldr	r3, [pc, #472]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a75      	ldr	r2, [pc, #468]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 8005362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	e02e      	b.n	80053c8 <HAL_RCC_OscConfig+0xd4>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10c      	bne.n	800538c <HAL_RCC_OscConfig+0x98>
 8005372:	4b71      	ldr	r3, [pc, #452]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a70      	ldr	r2, [pc, #448]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 8005378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	4b6e      	ldr	r3, [pc, #440]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a6d      	ldr	r2, [pc, #436]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 8005384:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	e01d      	b.n	80053c8 <HAL_RCC_OscConfig+0xd4>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005394:	d10c      	bne.n	80053b0 <HAL_RCC_OscConfig+0xbc>
 8005396:	4b68      	ldr	r3, [pc, #416]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a67      	ldr	r2, [pc, #412]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 800539c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	4b65      	ldr	r3, [pc, #404]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a64      	ldr	r2, [pc, #400]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 80053a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	e00b      	b.n	80053c8 <HAL_RCC_OscConfig+0xd4>
 80053b0:	4b61      	ldr	r3, [pc, #388]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a60      	ldr	r2, [pc, #384]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 80053b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	4b5e      	ldr	r3, [pc, #376]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a5d      	ldr	r2, [pc, #372]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 80053c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d013      	beq.n	80053f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fd fca8 	bl	8002d24 <HAL_GetTick>
 80053d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053d8:	f7fd fca4 	bl	8002d24 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b64      	cmp	r3, #100	@ 0x64
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e356      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053ea:	4b53      	ldr	r3, [pc, #332]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0f0      	beq.n	80053d8 <HAL_RCC_OscConfig+0xe4>
 80053f6:	e014      	b.n	8005422 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f8:	f7fd fc94 	bl	8002d24 <HAL_GetTick>
 80053fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005400:	f7fd fc90 	bl	8002d24 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b64      	cmp	r3, #100	@ 0x64
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e342      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005412:	4b49      	ldr	r3, [pc, #292]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f0      	bne.n	8005400 <HAL_RCC_OscConfig+0x10c>
 800541e:	e000      	b.n	8005422 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 808c 	beq.w	8005548 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005430:	4b41      	ldr	r3, [pc, #260]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005438:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800543a:	4b3f      	ldr	r3, [pc, #252]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 800543c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_RCC_OscConfig+0x162>
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	2b18      	cmp	r3, #24
 800544a:	d137      	bne.n	80054bc <HAL_RCC_OscConfig+0x1c8>
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d132      	bne.n	80054bc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005456:	4b38      	ldr	r3, [pc, #224]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <HAL_RCC_OscConfig+0x17a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e314      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800546e:	4b32      	ldr	r3, [pc, #200]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 0219 	bic.w	r2, r3, #25
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	492f      	ldr	r1, [pc, #188]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fd fc50 	bl	8002d24 <HAL_GetTick>
 8005484:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005488:	f7fd fc4c 	bl	8002d24 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e2fe      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800549a:	4b27      	ldr	r3, [pc, #156]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a6:	4b24      	ldr	r3, [pc, #144]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	061b      	lsls	r3, r3, #24
 80054b4:	4920      	ldr	r1, [pc, #128]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054ba:	e045      	b.n	8005548 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d026      	beq.n	8005512 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f023 0219 	bic.w	r2, r3, #25
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	4919      	ldr	r1, [pc, #100]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d6:	f7fd fc25 	bl	8002d24 <HAL_GetTick>
 80054da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054de:	f7fd fc21 	bl	8002d24 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e2d3      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054f0:	4b11      	ldr	r3, [pc, #68]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	061b      	lsls	r3, r3, #24
 800550a:	490b      	ldr	r1, [pc, #44]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 800550c:	4313      	orrs	r3, r2
 800550e:	604b      	str	r3, [r1, #4]
 8005510:	e01a      	b.n	8005548 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005512:	4b09      	ldr	r3, [pc, #36]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a08      	ldr	r2, [pc, #32]	@ (8005538 <HAL_RCC_OscConfig+0x244>)
 8005518:	f023 0301 	bic.w	r3, r3, #1
 800551c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551e:	f7fd fc01 	bl	8002d24 <HAL_GetTick>
 8005522:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005524:	e00a      	b.n	800553c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005526:	f7fd fbfd 	bl	8002d24 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d903      	bls.n	800553c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e2af      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
 8005538:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800553c:	4b96      	ldr	r3, [pc, #600]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1ee      	bne.n	8005526 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	2b00      	cmp	r3, #0
 8005552:	d06a      	beq.n	800562a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005554:	4b90      	ldr	r3, [pc, #576]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800555c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800555e:	4b8e      	ldr	r3, [pc, #568]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 8005560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005562:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2b08      	cmp	r3, #8
 8005568:	d007      	beq.n	800557a <HAL_RCC_OscConfig+0x286>
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2b18      	cmp	r3, #24
 800556e:	d11b      	bne.n	80055a8 <HAL_RCC_OscConfig+0x2b4>
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	2b01      	cmp	r3, #1
 8005578:	d116      	bne.n	80055a8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800557a:	4b87      	ldr	r3, [pc, #540]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005582:	2b00      	cmp	r3, #0
 8005584:	d005      	beq.n	8005592 <HAL_RCC_OscConfig+0x29e>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	2b80      	cmp	r3, #128	@ 0x80
 800558c:	d001      	beq.n	8005592 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e282      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005592:	4b81      	ldr	r3, [pc, #516]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	061b      	lsls	r3, r3, #24
 80055a0:	497d      	ldr	r1, [pc, #500]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055a6:	e040      	b.n	800562a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d023      	beq.n	80055f8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055b0:	4b79      	ldr	r3, [pc, #484]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a78      	ldr	r2, [pc, #480]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 80055b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055bc:	f7fd fbb2 	bl	8002d24 <HAL_GetTick>
 80055c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80055c4:	f7fd fbae 	bl	8002d24 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e260      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055d6:	4b70      	ldr	r3, [pc, #448]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f0      	beq.n	80055c4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	061b      	lsls	r3, r3, #24
 80055f0:	4969      	ldr	r1, [pc, #420]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60cb      	str	r3, [r1, #12]
 80055f6:	e018      	b.n	800562a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80055f8:	4b67      	ldr	r3, [pc, #412]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a66      	ldr	r2, [pc, #408]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 80055fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fd fb8e 	bl	8002d24 <HAL_GetTick>
 8005608:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800560c:	f7fd fb8a 	bl	8002d24 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e23c      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800561e:	4b5e      	ldr	r3, [pc, #376]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b00      	cmp	r3, #0
 8005634:	d036      	beq.n	80056a4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d019      	beq.n	8005672 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800563e:	4b56      	ldr	r3, [pc, #344]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 8005640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005642:	4a55      	ldr	r2, [pc, #340]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 8005644:	f043 0301 	orr.w	r3, r3, #1
 8005648:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564a:	f7fd fb6b 	bl	8002d24 <HAL_GetTick>
 800564e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005652:	f7fd fb67 	bl	8002d24 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e219      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005664:	4b4c      	ldr	r3, [pc, #304]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 8005666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0f0      	beq.n	8005652 <HAL_RCC_OscConfig+0x35e>
 8005670:	e018      	b.n	80056a4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005672:	4b49      	ldr	r3, [pc, #292]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 8005674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005676:	4a48      	ldr	r2, [pc, #288]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 8005678:	f023 0301 	bic.w	r3, r3, #1
 800567c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567e:	f7fd fb51 	bl	8002d24 <HAL_GetTick>
 8005682:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005686:	f7fd fb4d 	bl	8002d24 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e1ff      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005698:	4b3f      	ldr	r3, [pc, #252]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 800569a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f0      	bne.n	8005686 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d036      	beq.n	800571e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d019      	beq.n	80056ec <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056b8:	4b37      	ldr	r3, [pc, #220]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a36      	ldr	r2, [pc, #216]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 80056be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80056c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056c4:	f7fd fb2e 	bl	8002d24 <HAL_GetTick>
 80056c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056cc:	f7fd fb2a 	bl	8002d24 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e1dc      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056de:	4b2e      	ldr	r3, [pc, #184]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCC_OscConfig+0x3d8>
 80056ea:	e018      	b.n	800571e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a29      	ldr	r2, [pc, #164]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 80056f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056f8:	f7fd fb14 	bl	8002d24 <HAL_GetTick>
 80056fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005700:	f7fd fb10 	bl	8002d24 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e1c2      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005712:	4b21      	ldr	r3, [pc, #132]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 8086 	beq.w	8005838 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800572c:	4b1b      	ldr	r3, [pc, #108]	@ (800579c <HAL_RCC_OscConfig+0x4a8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1a      	ldr	r2, [pc, #104]	@ (800579c <HAL_RCC_OscConfig+0x4a8>)
 8005732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005736:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005738:	f7fd faf4 	bl	8002d24 <HAL_GetTick>
 800573c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005740:	f7fd faf0 	bl	8002d24 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b64      	cmp	r3, #100	@ 0x64
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e1a2      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005752:	4b12      	ldr	r3, [pc, #72]	@ (800579c <HAL_RCC_OscConfig+0x4a8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0f0      	beq.n	8005740 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d106      	bne.n	8005774 <HAL_RCC_OscConfig+0x480>
 8005766:	4b0c      	ldr	r3, [pc, #48]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576a:	4a0b      	ldr	r2, [pc, #44]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 800576c:	f043 0301 	orr.w	r3, r3, #1
 8005770:	6713      	str	r3, [r2, #112]	@ 0x70
 8005772:	e032      	b.n	80057da <HAL_RCC_OscConfig+0x4e6>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d111      	bne.n	80057a0 <HAL_RCC_OscConfig+0x4ac>
 800577c:	4b06      	ldr	r3, [pc, #24]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 800577e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005780:	4a05      	ldr	r2, [pc, #20]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 8005782:	f023 0301 	bic.w	r3, r3, #1
 8005786:	6713      	str	r3, [r2, #112]	@ 0x70
 8005788:	4b03      	ldr	r3, [pc, #12]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 800578a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800578c:	4a02      	ldr	r2, [pc, #8]	@ (8005798 <HAL_RCC_OscConfig+0x4a4>)
 800578e:	f023 0304 	bic.w	r3, r3, #4
 8005792:	6713      	str	r3, [r2, #112]	@ 0x70
 8005794:	e021      	b.n	80057da <HAL_RCC_OscConfig+0x4e6>
 8005796:	bf00      	nop
 8005798:	58024400 	.word	0x58024400
 800579c:	58024800 	.word	0x58024800
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	2b05      	cmp	r3, #5
 80057a6:	d10c      	bne.n	80057c2 <HAL_RCC_OscConfig+0x4ce>
 80057a8:	4b83      	ldr	r3, [pc, #524]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80057aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ac:	4a82      	ldr	r2, [pc, #520]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80057ae:	f043 0304 	orr.w	r3, r3, #4
 80057b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057b4:	4b80      	ldr	r3, [pc, #512]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80057b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b8:	4a7f      	ldr	r2, [pc, #508]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	6713      	str	r3, [r2, #112]	@ 0x70
 80057c0:	e00b      	b.n	80057da <HAL_RCC_OscConfig+0x4e6>
 80057c2:	4b7d      	ldr	r3, [pc, #500]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80057c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c6:	4a7c      	ldr	r2, [pc, #496]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80057c8:	f023 0301 	bic.w	r3, r3, #1
 80057cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ce:	4b7a      	ldr	r3, [pc, #488]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d2:	4a79      	ldr	r2, [pc, #484]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80057d4:	f023 0304 	bic.w	r3, r3, #4
 80057d8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d015      	beq.n	800580e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e2:	f7fd fa9f 	bl	8002d24 <HAL_GetTick>
 80057e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057e8:	e00a      	b.n	8005800 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ea:	f7fd fa9b 	bl	8002d24 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e14b      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005800:	4b6d      	ldr	r3, [pc, #436]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0ee      	beq.n	80057ea <HAL_RCC_OscConfig+0x4f6>
 800580c:	e014      	b.n	8005838 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580e:	f7fd fa89 	bl	8002d24 <HAL_GetTick>
 8005812:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005814:	e00a      	b.n	800582c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005816:	f7fd fa85 	bl	8002d24 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005824:	4293      	cmp	r3, r2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e135      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800582c:	4b62      	ldr	r3, [pc, #392]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 800582e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1ee      	bne.n	8005816 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 812a 	beq.w	8005a96 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005842:	4b5d      	ldr	r3, [pc, #372]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800584a:	2b18      	cmp	r3, #24
 800584c:	f000 80ba 	beq.w	80059c4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005854:	2b02      	cmp	r3, #2
 8005856:	f040 8095 	bne.w	8005984 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585a:	4b57      	ldr	r3, [pc, #348]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a56      	ldr	r2, [pc, #344]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 8005860:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005866:	f7fd fa5d 	bl	8002d24 <HAL_GetTick>
 800586a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800586c:	e008      	b.n	8005880 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800586e:	f7fd fa59 	bl	8002d24 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e10b      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005880:	4b4d      	ldr	r3, [pc, #308]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f0      	bne.n	800586e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800588c:	4b4a      	ldr	r3, [pc, #296]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 800588e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005890:	4b4a      	ldr	r3, [pc, #296]	@ (80059bc <HAL_RCC_OscConfig+0x6c8>)
 8005892:	4013      	ands	r3, r2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800589c:	0112      	lsls	r2, r2, #4
 800589e:	430a      	orrs	r2, r1
 80058a0:	4945      	ldr	r1, [pc, #276]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	628b      	str	r3, [r1, #40]	@ 0x28
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058aa:	3b01      	subs	r3, #1
 80058ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058b4:	3b01      	subs	r3, #1
 80058b6:	025b      	lsls	r3, r3, #9
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c0:	3b01      	subs	r3, #1
 80058c2:	041b      	lsls	r3, r3, #16
 80058c4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ce:	3b01      	subs	r3, #1
 80058d0:	061b      	lsls	r3, r3, #24
 80058d2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058d6:	4938      	ldr	r1, [pc, #224]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80058dc:	4b36      	ldr	r3, [pc, #216]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80058de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e0:	4a35      	ldr	r2, [pc, #212]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80058e2:	f023 0301 	bic.w	r3, r3, #1
 80058e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058e8:	4b33      	ldr	r3, [pc, #204]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80058ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ec:	4b34      	ldr	r3, [pc, #208]	@ (80059c0 <HAL_RCC_OscConfig+0x6cc>)
 80058ee:	4013      	ands	r3, r2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80058f4:	00d2      	lsls	r2, r2, #3
 80058f6:	4930      	ldr	r1, [pc, #192]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80058fc:	4b2e      	ldr	r3, [pc, #184]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	f023 020c 	bic.w	r2, r3, #12
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005908:	492b      	ldr	r1, [pc, #172]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 800590a:	4313      	orrs	r3, r2
 800590c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800590e:	4b2a      	ldr	r3, [pc, #168]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 8005910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005912:	f023 0202 	bic.w	r2, r3, #2
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591a:	4927      	ldr	r1, [pc, #156]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 800591c:	4313      	orrs	r3, r2
 800591e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005920:	4b25      	ldr	r3, [pc, #148]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 8005922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005924:	4a24      	ldr	r2, [pc, #144]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 8005926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800592a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800592c:	4b22      	ldr	r3, [pc, #136]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 800592e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005930:	4a21      	ldr	r2, [pc, #132]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 8005932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005936:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005938:	4b1f      	ldr	r3, [pc, #124]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 800593a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593c:	4a1e      	ldr	r2, [pc, #120]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 800593e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005944:	4b1c      	ldr	r3, [pc, #112]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	4a1b      	ldr	r2, [pc, #108]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005950:	4b19      	ldr	r3, [pc, #100]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a18      	ldr	r2, [pc, #96]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 8005956:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800595a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595c:	f7fd f9e2 	bl	8002d24 <HAL_GetTick>
 8005960:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005964:	f7fd f9de 	bl	8002d24 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e090      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005976:	4b10      	ldr	r3, [pc, #64]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCC_OscConfig+0x670>
 8005982:	e088      	b.n	8005a96 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005984:	4b0c      	ldr	r3, [pc, #48]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a0b      	ldr	r2, [pc, #44]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 800598a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800598e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fd f9c8 	bl	8002d24 <HAL_GetTick>
 8005994:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005998:	f7fd f9c4 	bl	8002d24 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e076      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059aa:	4b03      	ldr	r3, [pc, #12]	@ (80059b8 <HAL_RCC_OscConfig+0x6c4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x6a4>
 80059b6:	e06e      	b.n	8005a96 <HAL_RCC_OscConfig+0x7a2>
 80059b8:	58024400 	.word	0x58024400
 80059bc:	fffffc0c 	.word	0xfffffc0c
 80059c0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059c4:	4b36      	ldr	r3, [pc, #216]	@ (8005aa0 <HAL_RCC_OscConfig+0x7ac>)
 80059c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059ca:	4b35      	ldr	r3, [pc, #212]	@ (8005aa0 <HAL_RCC_OscConfig+0x7ac>)
 80059cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d031      	beq.n	8005a3c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f003 0203 	and.w	r2, r3, #3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d12a      	bne.n	8005a3c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	091b      	lsrs	r3, r3, #4
 80059ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d122      	bne.n	8005a3c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a00:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d11a      	bne.n	8005a3c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	0a5b      	lsrs	r3, r3, #9
 8005a0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a12:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d111      	bne.n	8005a3c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	0c1b      	lsrs	r3, r3, #16
 8005a1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a24:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d108      	bne.n	8005a3c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	0e1b      	lsrs	r3, r3, #24
 8005a2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a36:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e02b      	b.n	8005a98 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005a40:	4b17      	ldr	r3, [pc, #92]	@ (8005aa0 <HAL_RCC_OscConfig+0x7ac>)
 8005a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a44:	08db      	lsrs	r3, r3, #3
 8005a46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a4a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d01f      	beq.n	8005a96 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005a56:	4b12      	ldr	r3, [pc, #72]	@ (8005aa0 <HAL_RCC_OscConfig+0x7ac>)
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	4a11      	ldr	r2, [pc, #68]	@ (8005aa0 <HAL_RCC_OscConfig+0x7ac>)
 8005a5c:	f023 0301 	bic.w	r3, r3, #1
 8005a60:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a62:	f7fd f95f 	bl	8002d24 <HAL_GetTick>
 8005a66:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005a68:	bf00      	nop
 8005a6a:	f7fd f95b 	bl	8002d24 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d0f9      	beq.n	8005a6a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a76:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa0 <HAL_RCC_OscConfig+0x7ac>)
 8005a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa4 <HAL_RCC_OscConfig+0x7b0>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a82:	00d2      	lsls	r2, r2, #3
 8005a84:	4906      	ldr	r1, [pc, #24]	@ (8005aa0 <HAL_RCC_OscConfig+0x7ac>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005a8a:	4b05      	ldr	r3, [pc, #20]	@ (8005aa0 <HAL_RCC_OscConfig+0x7ac>)
 8005a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8e:	4a04      	ldr	r2, [pc, #16]	@ (8005aa0 <HAL_RCC_OscConfig+0x7ac>)
 8005a90:	f043 0301 	orr.w	r3, r3, #1
 8005a94:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3730      	adds	r7, #48	@ 0x30
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	58024400 	.word	0x58024400
 8005aa4:	ffff0007 	.word	0xffff0007

08005aa8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e19c      	b.n	8005df6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005abc:	4b8a      	ldr	r3, [pc, #552]	@ (8005ce8 <HAL_RCC_ClockConfig+0x240>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d910      	bls.n	8005aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aca:	4b87      	ldr	r3, [pc, #540]	@ (8005ce8 <HAL_RCC_ClockConfig+0x240>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f023 020f 	bic.w	r2, r3, #15
 8005ad2:	4985      	ldr	r1, [pc, #532]	@ (8005ce8 <HAL_RCC_ClockConfig+0x240>)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ada:	4b83      	ldr	r3, [pc, #524]	@ (8005ce8 <HAL_RCC_ClockConfig+0x240>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d001      	beq.n	8005aec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e184      	b.n	8005df6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d010      	beq.n	8005b1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691a      	ldr	r2, [r3, #16]
 8005afc:	4b7b      	ldr	r3, [pc, #492]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d908      	bls.n	8005b1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b08:	4b78      	ldr	r3, [pc, #480]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	4975      	ldr	r1, [pc, #468]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d010      	beq.n	8005b48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695a      	ldr	r2, [r3, #20]
 8005b2a:	4b70      	ldr	r3, [pc, #448]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d908      	bls.n	8005b48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b36:	4b6d      	ldr	r3, [pc, #436]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	496a      	ldr	r1, [pc, #424]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0310 	and.w	r3, r3, #16
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d010      	beq.n	8005b76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	699a      	ldr	r2, [r3, #24]
 8005b58:	4b64      	ldr	r3, [pc, #400]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d908      	bls.n	8005b76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b64:	4b61      	ldr	r3, [pc, #388]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	495e      	ldr	r1, [pc, #376]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d010      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69da      	ldr	r2, [r3, #28]
 8005b86:	4b59      	ldr	r3, [pc, #356]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d908      	bls.n	8005ba4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b92:	4b56      	ldr	r3, [pc, #344]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	4953      	ldr	r1, [pc, #332]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d010      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d908      	bls.n	8005bd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	f023 020f 	bic.w	r2, r3, #15
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	4947      	ldr	r1, [pc, #284]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d055      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bde:	4b43      	ldr	r3, [pc, #268]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	4940      	ldr	r1, [pc, #256]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d107      	bne.n	8005c08 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d121      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e0f6      	b.n	8005df6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d107      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c10:	4b36      	ldr	r3, [pc, #216]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d115      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0ea      	b.n	8005df6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d107      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c28:	4b30      	ldr	r3, [pc, #192]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d109      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0de      	b.n	8005df6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c38:	4b2c      	ldr	r3, [pc, #176]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0d6      	b.n	8005df6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c48:	4b28      	ldr	r3, [pc, #160]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f023 0207 	bic.w	r2, r3, #7
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	4925      	ldr	r1, [pc, #148]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c5a:	f7fd f863 	bl	8002d24 <HAL_GetTick>
 8005c5e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c60:	e00a      	b.n	8005c78 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c62:	f7fd f85f 	bl	8002d24 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e0be      	b.n	8005df6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c78:	4b1c      	ldr	r3, [pc, #112]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d1eb      	bne.n	8005c62 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d010      	beq.n	8005cb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	4b14      	ldr	r3, [pc, #80]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d208      	bcs.n	8005cb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca6:	4b11      	ldr	r3, [pc, #68]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	f023 020f 	bic.w	r2, r3, #15
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	490e      	ldr	r1, [pc, #56]	@ (8005cec <HAL_RCC_ClockConfig+0x244>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce8 <HAL_RCC_ClockConfig+0x240>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 030f 	and.w	r3, r3, #15
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d214      	bcs.n	8005cf0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc6:	4b08      	ldr	r3, [pc, #32]	@ (8005ce8 <HAL_RCC_ClockConfig+0x240>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f023 020f 	bic.w	r2, r3, #15
 8005cce:	4906      	ldr	r1, [pc, #24]	@ (8005ce8 <HAL_RCC_ClockConfig+0x240>)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd6:	4b04      	ldr	r3, [pc, #16]	@ (8005ce8 <HAL_RCC_ClockConfig+0x240>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d005      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e086      	b.n	8005df6 <HAL_RCC_ClockConfig+0x34e>
 8005ce8:	52002000 	.word	0x52002000
 8005cec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d010      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	4b3f      	ldr	r3, [pc, #252]	@ (8005e00 <HAL_RCC_ClockConfig+0x358>)
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d208      	bcs.n	8005d1e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d0c:	4b3c      	ldr	r3, [pc, #240]	@ (8005e00 <HAL_RCC_ClockConfig+0x358>)
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	4939      	ldr	r1, [pc, #228]	@ (8005e00 <HAL_RCC_ClockConfig+0x358>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d010      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695a      	ldr	r2, [r3, #20]
 8005d2e:	4b34      	ldr	r3, [pc, #208]	@ (8005e00 <HAL_RCC_ClockConfig+0x358>)
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d208      	bcs.n	8005d4c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d3a:	4b31      	ldr	r3, [pc, #196]	@ (8005e00 <HAL_RCC_ClockConfig+0x358>)
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	492e      	ldr	r1, [pc, #184]	@ (8005e00 <HAL_RCC_ClockConfig+0x358>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d010      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699a      	ldr	r2, [r3, #24]
 8005d5c:	4b28      	ldr	r3, [pc, #160]	@ (8005e00 <HAL_RCC_ClockConfig+0x358>)
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d208      	bcs.n	8005d7a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d68:	4b25      	ldr	r3, [pc, #148]	@ (8005e00 <HAL_RCC_ClockConfig+0x358>)
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	4922      	ldr	r1, [pc, #136]	@ (8005e00 <HAL_RCC_ClockConfig+0x358>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0320 	and.w	r3, r3, #32
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d010      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69da      	ldr	r2, [r3, #28]
 8005d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8005e00 <HAL_RCC_ClockConfig+0x358>)
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d208      	bcs.n	8005da8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d96:	4b1a      	ldr	r3, [pc, #104]	@ (8005e00 <HAL_RCC_ClockConfig+0x358>)
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	4917      	ldr	r1, [pc, #92]	@ (8005e00 <HAL_RCC_ClockConfig+0x358>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005da8:	f000 f834 	bl	8005e14 <HAL_RCC_GetSysClockFreq>
 8005dac:	4602      	mov	r2, r0
 8005dae:	4b14      	ldr	r3, [pc, #80]	@ (8005e00 <HAL_RCC_ClockConfig+0x358>)
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	4912      	ldr	r1, [pc, #72]	@ (8005e04 <HAL_RCC_ClockConfig+0x35c>)
 8005dba:	5ccb      	ldrb	r3, [r1, r3]
 8005dbc:	f003 031f 	and.w	r3, r3, #31
 8005dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005e00 <HAL_RCC_ClockConfig+0x358>)
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	4a0d      	ldr	r2, [pc, #52]	@ (8005e04 <HAL_RCC_ClockConfig+0x35c>)
 8005dd0:	5cd3      	ldrb	r3, [r2, r3]
 8005dd2:	f003 031f 	and.w	r3, r3, #31
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8005e08 <HAL_RCC_ClockConfig+0x360>)
 8005dde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005de0:	4a0a      	ldr	r2, [pc, #40]	@ (8005e0c <HAL_RCC_ClockConfig+0x364>)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005de6:	4b0a      	ldr	r3, [pc, #40]	@ (8005e10 <HAL_RCC_ClockConfig+0x368>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fc ff50 	bl	8002c90 <HAL_InitTick>
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	58024400 	.word	0x58024400
 8005e04:	08012c18 	.word	0x08012c18
 8005e08:	2400000c 	.word	0x2400000c
 8005e0c:	24000008 	.word	0x24000008
 8005e10:	24000040 	.word	0x24000040

08005e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b089      	sub	sp, #36	@ 0x24
 8005e18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e1a:	4bb3      	ldr	r3, [pc, #716]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e22:	2b18      	cmp	r3, #24
 8005e24:	f200 8155 	bhi.w	80060d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005e28:	a201      	add	r2, pc, #4	@ (adr r2, 8005e30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2e:	bf00      	nop
 8005e30:	08005e95 	.word	0x08005e95
 8005e34:	080060d3 	.word	0x080060d3
 8005e38:	080060d3 	.word	0x080060d3
 8005e3c:	080060d3 	.word	0x080060d3
 8005e40:	080060d3 	.word	0x080060d3
 8005e44:	080060d3 	.word	0x080060d3
 8005e48:	080060d3 	.word	0x080060d3
 8005e4c:	080060d3 	.word	0x080060d3
 8005e50:	08005ebb 	.word	0x08005ebb
 8005e54:	080060d3 	.word	0x080060d3
 8005e58:	080060d3 	.word	0x080060d3
 8005e5c:	080060d3 	.word	0x080060d3
 8005e60:	080060d3 	.word	0x080060d3
 8005e64:	080060d3 	.word	0x080060d3
 8005e68:	080060d3 	.word	0x080060d3
 8005e6c:	080060d3 	.word	0x080060d3
 8005e70:	08005ec1 	.word	0x08005ec1
 8005e74:	080060d3 	.word	0x080060d3
 8005e78:	080060d3 	.word	0x080060d3
 8005e7c:	080060d3 	.word	0x080060d3
 8005e80:	080060d3 	.word	0x080060d3
 8005e84:	080060d3 	.word	0x080060d3
 8005e88:	080060d3 	.word	0x080060d3
 8005e8c:	080060d3 	.word	0x080060d3
 8005e90:	08005ec7 	.word	0x08005ec7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e94:	4b94      	ldr	r3, [pc, #592]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0320 	and.w	r3, r3, #32
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d009      	beq.n	8005eb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ea0:	4b91      	ldr	r3, [pc, #580]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	08db      	lsrs	r3, r3, #3
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	4a90      	ldr	r2, [pc, #576]	@ (80060ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005eac:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005eb2:	e111      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005eb4:	4b8d      	ldr	r3, [pc, #564]	@ (80060ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005eb6:	61bb      	str	r3, [r7, #24]
      break;
 8005eb8:	e10e      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005eba:	4b8d      	ldr	r3, [pc, #564]	@ (80060f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ebc:	61bb      	str	r3, [r7, #24]
      break;
 8005ebe:	e10b      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005ec0:	4b8c      	ldr	r3, [pc, #560]	@ (80060f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005ec2:	61bb      	str	r3, [r7, #24]
      break;
 8005ec4:	e108      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ec6:	4b88      	ldr	r3, [pc, #544]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005ed0:	4b85      	ldr	r3, [pc, #532]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed4:	091b      	lsrs	r3, r3, #4
 8005ed6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eda:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005edc:	4b82      	ldr	r3, [pc, #520]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005ee6:	4b80      	ldr	r3, [pc, #512]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eea:	08db      	lsrs	r3, r3, #3
 8005eec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	fb02 f303 	mul.w	r3, r2, r3
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 80e1 	beq.w	80060cc <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	f000 8083 	beq.w	8006018 <HAL_RCC_GetSysClockFreq+0x204>
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	f200 80a1 	bhi.w	800605c <HAL_RCC_GetSysClockFreq+0x248>
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_RCC_GetSysClockFreq+0x114>
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d056      	beq.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f26:	e099      	b.n	800605c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f28:	4b6f      	ldr	r3, [pc, #444]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d02d      	beq.n	8005f90 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f34:	4b6c      	ldr	r3, [pc, #432]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	08db      	lsrs	r3, r3, #3
 8005f3a:	f003 0303 	and.w	r3, r3, #3
 8005f3e:	4a6b      	ldr	r2, [pc, #428]	@ (80060ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f40:	fa22 f303 	lsr.w	r3, r2, r3
 8005f44:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	ee07 3a90 	vmov	s15, r3
 8005f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f5e:	4b62      	ldr	r3, [pc, #392]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f72:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80060f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005f8e:	e087      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	ee07 3a90 	vmov	s15, r3
 8005f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80060fc <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa2:	4b51      	ldr	r3, [pc, #324]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fb6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80060f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fd2:	e065      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006100 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe6:	4b40      	ldr	r3, [pc, #256]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ffa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80060f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800600a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006012:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006016:	e043      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006022:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006104 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602a:	4b2f      	ldr	r3, [pc, #188]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800602c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603a:	ed97 6a02 	vldr	s12, [r7, #8]
 800603e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80060f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800604a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800604e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006056:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800605a:	e021      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006066:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006100 <HAL_RCC_GetSysClockFreq+0x2ec>
 800606a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606e:	4b1e      	ldr	r3, [pc, #120]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006082:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80060f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800608a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800609e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80060a0:	4b11      	ldr	r3, [pc, #68]	@ (80060e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a4:	0a5b      	lsrs	r3, r3, #9
 80060a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060aa:	3301      	adds	r3, #1
 80060ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	ee07 3a90 	vmov	s15, r3
 80060b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060c4:	ee17 3a90 	vmov	r3, s15
 80060c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80060ca:	e005      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	61bb      	str	r3, [r7, #24]
      break;
 80060d0:	e002      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80060d2:	4b07      	ldr	r3, [pc, #28]	@ (80060f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060d4:	61bb      	str	r3, [r7, #24]
      break;
 80060d6:	bf00      	nop
  }

  return sysclockfreq;
 80060d8:	69bb      	ldr	r3, [r7, #24]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3724      	adds	r7, #36	@ 0x24
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	58024400 	.word	0x58024400
 80060ec:	03d09000 	.word	0x03d09000
 80060f0:	003d0900 	.word	0x003d0900
 80060f4:	017d7840 	.word	0x017d7840
 80060f8:	46000000 	.word	0x46000000
 80060fc:	4c742400 	.word	0x4c742400
 8006100:	4a742400 	.word	0x4a742400
 8006104:	4bbebc20 	.word	0x4bbebc20

08006108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800610e:	f7ff fe81 	bl	8005e14 <HAL_RCC_GetSysClockFreq>
 8006112:	4602      	mov	r2, r0
 8006114:	4b10      	ldr	r3, [pc, #64]	@ (8006158 <HAL_RCC_GetHCLKFreq+0x50>)
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	0a1b      	lsrs	r3, r3, #8
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	490f      	ldr	r1, [pc, #60]	@ (800615c <HAL_RCC_GetHCLKFreq+0x54>)
 8006120:	5ccb      	ldrb	r3, [r1, r3]
 8006122:	f003 031f 	and.w	r3, r3, #31
 8006126:	fa22 f303 	lsr.w	r3, r2, r3
 800612a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800612c:	4b0a      	ldr	r3, [pc, #40]	@ (8006158 <HAL_RCC_GetHCLKFreq+0x50>)
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	4a09      	ldr	r2, [pc, #36]	@ (800615c <HAL_RCC_GetHCLKFreq+0x54>)
 8006136:	5cd3      	ldrb	r3, [r2, r3]
 8006138:	f003 031f 	and.w	r3, r3, #31
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	fa22 f303 	lsr.w	r3, r2, r3
 8006142:	4a07      	ldr	r2, [pc, #28]	@ (8006160 <HAL_RCC_GetHCLKFreq+0x58>)
 8006144:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006146:	4a07      	ldr	r2, [pc, #28]	@ (8006164 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800614c:	4b04      	ldr	r3, [pc, #16]	@ (8006160 <HAL_RCC_GetHCLKFreq+0x58>)
 800614e:	681b      	ldr	r3, [r3, #0]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	58024400 	.word	0x58024400
 800615c:	08012c18 	.word	0x08012c18
 8006160:	2400000c 	.word	0x2400000c
 8006164:	24000008 	.word	0x24000008

08006168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800616c:	f7ff ffcc 	bl	8006108 <HAL_RCC_GetHCLKFreq>
 8006170:	4602      	mov	r2, r0
 8006172:	4b06      	ldr	r3, [pc, #24]	@ (800618c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	091b      	lsrs	r3, r3, #4
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	4904      	ldr	r1, [pc, #16]	@ (8006190 <HAL_RCC_GetPCLK1Freq+0x28>)
 800617e:	5ccb      	ldrb	r3, [r1, r3]
 8006180:	f003 031f 	and.w	r3, r3, #31
 8006184:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006188:	4618      	mov	r0, r3
 800618a:	bd80      	pop	{r7, pc}
 800618c:	58024400 	.word	0x58024400
 8006190:	08012c18 	.word	0x08012c18

08006194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006198:	f7ff ffb6 	bl	8006108 <HAL_RCC_GetHCLKFreq>
 800619c:	4602      	mov	r2, r0
 800619e:	4b06      	ldr	r3, [pc, #24]	@ (80061b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	0a1b      	lsrs	r3, r3, #8
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	4904      	ldr	r1, [pc, #16]	@ (80061bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80061aa:	5ccb      	ldrb	r3, [r1, r3]
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	58024400 	.word	0x58024400
 80061bc:	08012c18 	.word	0x08012c18

080061c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061c4:	b0c6      	sub	sp, #280	@ 0x118
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061cc:	2300      	movs	r3, #0
 80061ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061d2:	2300      	movs	r3, #0
 80061d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80061e4:	2500      	movs	r5, #0
 80061e6:	ea54 0305 	orrs.w	r3, r4, r5
 80061ea:	d049      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80061ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061f6:	d02f      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80061f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061fc:	d828      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80061fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006202:	d01a      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006204:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006208:	d822      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800620e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006212:	d007      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006214:	e01c      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006216:	4bab      	ldr	r3, [pc, #684]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621a:	4aaa      	ldr	r2, [pc, #680]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800621c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006220:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006222:	e01a      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006228:	3308      	adds	r3, #8
 800622a:	2102      	movs	r1, #2
 800622c:	4618      	mov	r0, r3
 800622e:	f001 fc25 	bl	8007a7c <RCCEx_PLL2_Config>
 8006232:	4603      	mov	r3, r0
 8006234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006238:	e00f      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800623a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800623e:	3328      	adds	r3, #40	@ 0x28
 8006240:	2102      	movs	r1, #2
 8006242:	4618      	mov	r0, r3
 8006244:	f001 fccc 	bl	8007be0 <RCCEx_PLL3_Config>
 8006248:	4603      	mov	r3, r0
 800624a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800624e:	e004      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006256:	e000      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006262:	4b98      	ldr	r3, [pc, #608]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006266:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800626a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800626e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006270:	4a94      	ldr	r2, [pc, #592]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006272:	430b      	orrs	r3, r1
 8006274:	6513      	str	r3, [r2, #80]	@ 0x50
 8006276:	e003      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006278:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800627c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006288:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800628c:	f04f 0900 	mov.w	r9, #0
 8006290:	ea58 0309 	orrs.w	r3, r8, r9
 8006294:	d047      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629c:	2b04      	cmp	r3, #4
 800629e:	d82a      	bhi.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80062a0:	a201      	add	r2, pc, #4	@ (adr r2, 80062a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80062a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a6:	bf00      	nop
 80062a8:	080062bd 	.word	0x080062bd
 80062ac:	080062cb 	.word	0x080062cb
 80062b0:	080062e1 	.word	0x080062e1
 80062b4:	080062ff 	.word	0x080062ff
 80062b8:	080062ff 	.word	0x080062ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062bc:	4b81      	ldr	r3, [pc, #516]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c0:	4a80      	ldr	r2, [pc, #512]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062c8:	e01a      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ce:	3308      	adds	r3, #8
 80062d0:	2100      	movs	r1, #0
 80062d2:	4618      	mov	r0, r3
 80062d4:	f001 fbd2 	bl	8007a7c <RCCEx_PLL2_Config>
 80062d8:	4603      	mov	r3, r0
 80062da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062de:	e00f      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e4:	3328      	adds	r3, #40	@ 0x28
 80062e6:	2100      	movs	r1, #0
 80062e8:	4618      	mov	r0, r3
 80062ea:	f001 fc79 	bl	8007be0 <RCCEx_PLL3_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062f4:	e004      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062fc:	e000      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80062fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006308:	4b6e      	ldr	r3, [pc, #440]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800630a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800630c:	f023 0107 	bic.w	r1, r3, #7
 8006310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006316:	4a6b      	ldr	r2, [pc, #428]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006318:	430b      	orrs	r3, r1
 800631a:	6513      	str	r3, [r2, #80]	@ 0x50
 800631c:	e003      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006322:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006332:	f04f 0b00 	mov.w	fp, #0
 8006336:	ea5a 030b 	orrs.w	r3, sl, fp
 800633a:	d05b      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800633c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006340:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006344:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006348:	d03b      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800634a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800634e:	d834      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006350:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006354:	d037      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006356:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800635a:	d82e      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800635c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006360:	d033      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006362:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006366:	d828      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006368:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800636c:	d01a      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800636e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006372:	d822      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006378:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800637c:	d007      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800637e:	e01c      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006380:	4b50      	ldr	r3, [pc, #320]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006384:	4a4f      	ldr	r2, [pc, #316]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800638a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800638c:	e01e      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800638e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006392:	3308      	adds	r3, #8
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f001 fb70 	bl	8007a7c <RCCEx_PLL2_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80063a2:	e013      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a8:	3328      	adds	r3, #40	@ 0x28
 80063aa:	2100      	movs	r1, #0
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 fc17 	bl	8007be0 <RCCEx_PLL3_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063b8:	e008      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063c0:	e004      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80063c2:	bf00      	nop
 80063c4:	e002      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80063c6:	bf00      	nop
 80063c8:	e000      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80063ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10b      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063d4:	4b3b      	ldr	r3, [pc, #236]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80063dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80063e4:	4a37      	ldr	r2, [pc, #220]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063e6:	430b      	orrs	r3, r1
 80063e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80063ea:	e003      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006400:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006404:	2300      	movs	r3, #0
 8006406:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800640a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800640e:	460b      	mov	r3, r1
 8006410:	4313      	orrs	r3, r2
 8006412:	d05d      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006418:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800641c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006420:	d03b      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006422:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006426:	d834      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006428:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800642c:	d037      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800642e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006432:	d82e      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006434:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006438:	d033      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800643a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800643e:	d828      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006440:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006444:	d01a      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800644a:	d822      	bhi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006454:	d007      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006456:	e01c      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006458:	4b1a      	ldr	r3, [pc, #104]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800645a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645c:	4a19      	ldr	r2, [pc, #100]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800645e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006464:	e01e      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646a:	3308      	adds	r3, #8
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f001 fb04 	bl	8007a7c <RCCEx_PLL2_Config>
 8006474:	4603      	mov	r3, r0
 8006476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800647a:	e013      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800647c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006480:	3328      	adds	r3, #40	@ 0x28
 8006482:	2100      	movs	r1, #0
 8006484:	4618      	mov	r0, r3
 8006486:	f001 fbab 	bl	8007be0 <RCCEx_PLL3_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006490:	e008      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006498:	e004      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800649a:	bf00      	nop
 800649c:	e002      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800649e:	bf00      	nop
 80064a0:	e000      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80064a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10d      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064ac:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80064b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80064bc:	4a01      	ldr	r2, [pc, #4]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064be:	430b      	orrs	r3, r1
 80064c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80064c2:	e005      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80064c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80064d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80064dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80064e0:	2300      	movs	r3, #0
 80064e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80064e6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4313      	orrs	r3, r2
 80064ee:	d03a      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f6:	2b30      	cmp	r3, #48	@ 0x30
 80064f8:	d01f      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80064fa:	2b30      	cmp	r3, #48	@ 0x30
 80064fc:	d819      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80064fe:	2b20      	cmp	r3, #32
 8006500:	d00c      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006502:	2b20      	cmp	r3, #32
 8006504:	d815      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d019      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800650a:	2b10      	cmp	r3, #16
 800650c:	d111      	bne.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650e:	4baa      	ldr	r3, [pc, #680]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006512:	4aa9      	ldr	r2, [pc, #676]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006518:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800651a:	e011      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800651c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006520:	3308      	adds	r3, #8
 8006522:	2102      	movs	r1, #2
 8006524:	4618      	mov	r0, r3
 8006526:	f001 faa9 	bl	8007a7c <RCCEx_PLL2_Config>
 800652a:	4603      	mov	r3, r0
 800652c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006530:	e006      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006538:	e002      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800653a:	bf00      	nop
 800653c:	e000      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800653e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006548:	4b9b      	ldr	r3, [pc, #620]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800654a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800654c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006556:	4a98      	ldr	r2, [pc, #608]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006558:	430b      	orrs	r3, r1
 800655a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800655c:	e003      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006562:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006572:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006576:	2300      	movs	r3, #0
 8006578:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800657c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006580:	460b      	mov	r3, r1
 8006582:	4313      	orrs	r3, r2
 8006584:	d051      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800658c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006590:	d035      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006592:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006596:	d82e      	bhi.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006598:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800659c:	d031      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800659e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065a2:	d828      	bhi.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80065a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065a8:	d01a      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80065aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ae:	d822      	bhi.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80065b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065b8:	d007      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80065ba:	e01c      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065bc:	4b7e      	ldr	r3, [pc, #504]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c0:	4a7d      	ldr	r2, [pc, #500]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065c8:	e01c      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ce:	3308      	adds	r3, #8
 80065d0:	2100      	movs	r1, #0
 80065d2:	4618      	mov	r0, r3
 80065d4:	f001 fa52 	bl	8007a7c <RCCEx_PLL2_Config>
 80065d8:	4603      	mov	r3, r0
 80065da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065de:	e011      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e4:	3328      	adds	r3, #40	@ 0x28
 80065e6:	2100      	movs	r1, #0
 80065e8:	4618      	mov	r0, r3
 80065ea:	f001 faf9 	bl	8007be0 <RCCEx_PLL3_Config>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065f4:	e006      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065fc:	e002      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80065fe:	bf00      	nop
 8006600:	e000      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006604:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10a      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800660c:	4b6a      	ldr	r3, [pc, #424]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800660e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006610:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800661a:	4a67      	ldr	r2, [pc, #412]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800661c:	430b      	orrs	r3, r1
 800661e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006620:	e003      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006622:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006626:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006636:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800663a:	2300      	movs	r3, #0
 800663c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006640:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006644:	460b      	mov	r3, r1
 8006646:	4313      	orrs	r3, r2
 8006648:	d053      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800664a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006654:	d033      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006656:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800665a:	d82c      	bhi.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800665c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006660:	d02f      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006662:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006666:	d826      	bhi.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006668:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800666c:	d02b      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800666e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006672:	d820      	bhi.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006674:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006678:	d012      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800667a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800667e:	d81a      	bhi.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d022      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006688:	d115      	bne.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668e:	3308      	adds	r3, #8
 8006690:	2101      	movs	r1, #1
 8006692:	4618      	mov	r0, r3
 8006694:	f001 f9f2 	bl	8007a7c <RCCEx_PLL2_Config>
 8006698:	4603      	mov	r3, r0
 800669a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800669e:	e015      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a4:	3328      	adds	r3, #40	@ 0x28
 80066a6:	2101      	movs	r1, #1
 80066a8:	4618      	mov	r0, r3
 80066aa:	f001 fa99 	bl	8007be0 <RCCEx_PLL3_Config>
 80066ae:	4603      	mov	r3, r0
 80066b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066b4:	e00a      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066bc:	e006      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066be:	bf00      	nop
 80066c0:	e004      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066c2:	bf00      	nop
 80066c4:	e002      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066c6:	bf00      	nop
 80066c8:	e000      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80066d4:	4b38      	ldr	r3, [pc, #224]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80066dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e2:	4a35      	ldr	r2, [pc, #212]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066e4:	430b      	orrs	r3, r1
 80066e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80066e8:	e003      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80066fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006702:	2300      	movs	r3, #0
 8006704:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006708:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800670c:	460b      	mov	r3, r1
 800670e:	4313      	orrs	r3, r2
 8006710:	d058      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006716:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800671a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800671e:	d033      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006720:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006724:	d82c      	bhi.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800672a:	d02f      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800672c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006730:	d826      	bhi.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006732:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006736:	d02b      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006738:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800673c:	d820      	bhi.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800673e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006742:	d012      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006748:	d81a      	bhi.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d022      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800674e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006752:	d115      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006758:	3308      	adds	r3, #8
 800675a:	2101      	movs	r1, #1
 800675c:	4618      	mov	r0, r3
 800675e:	f001 f98d 	bl	8007a7c <RCCEx_PLL2_Config>
 8006762:	4603      	mov	r3, r0
 8006764:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006768:	e015      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800676a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676e:	3328      	adds	r3, #40	@ 0x28
 8006770:	2101      	movs	r1, #1
 8006772:	4618      	mov	r0, r3
 8006774:	f001 fa34 	bl	8007be0 <RCCEx_PLL3_Config>
 8006778:	4603      	mov	r3, r0
 800677a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800677e:	e00a      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006786:	e006      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006788:	bf00      	nop
 800678a:	e004      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800678c:	bf00      	nop
 800678e:	e002      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006790:	bf00      	nop
 8006792:	e000      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006796:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10e      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800679e:	4b06      	ldr	r3, [pc, #24]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80067a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80067ae:	4a02      	ldr	r2, [pc, #8]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067b0:	430b      	orrs	r3, r1
 80067b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80067b4:	e006      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80067b6:	bf00      	nop
 80067b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80067d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067d4:	2300      	movs	r3, #0
 80067d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80067de:	460b      	mov	r3, r1
 80067e0:	4313      	orrs	r3, r2
 80067e2:	d037      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ee:	d00e      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80067f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067f4:	d816      	bhi.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d018      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80067fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067fe:	d111      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006800:	4bc4      	ldr	r3, [pc, #784]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006804:	4ac3      	ldr	r2, [pc, #780]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800680a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800680c:	e00f      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800680e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006812:	3308      	adds	r3, #8
 8006814:	2101      	movs	r1, #1
 8006816:	4618      	mov	r0, r3
 8006818:	f001 f930 	bl	8007a7c <RCCEx_PLL2_Config>
 800681c:	4603      	mov	r3, r0
 800681e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006822:	e004      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800682a:	e000      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800682c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800682e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10a      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006836:	4bb7      	ldr	r3, [pc, #732]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800683a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800683e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006844:	4ab3      	ldr	r2, [pc, #716]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006846:	430b      	orrs	r3, r1
 8006848:	6513      	str	r3, [r2, #80]	@ 0x50
 800684a:	e003      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006850:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006864:	2300      	movs	r3, #0
 8006866:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800686a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800686e:	460b      	mov	r3, r1
 8006870:	4313      	orrs	r3, r2
 8006872:	d039      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800687a:	2b03      	cmp	r3, #3
 800687c:	d81c      	bhi.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800687e:	a201      	add	r2, pc, #4	@ (adr r2, 8006884 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	080068c1 	.word	0x080068c1
 8006888:	08006895 	.word	0x08006895
 800688c:	080068a3 	.word	0x080068a3
 8006890:	080068c1 	.word	0x080068c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006894:	4b9f      	ldr	r3, [pc, #636]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006898:	4a9e      	ldr	r2, [pc, #632]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800689a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800689e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068a0:	e00f      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a6:	3308      	adds	r3, #8
 80068a8:	2102      	movs	r1, #2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f001 f8e6 	bl	8007a7c <RCCEx_PLL2_Config>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068b6:	e004      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068be:	e000      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80068c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10a      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068ca:	4b92      	ldr	r3, [pc, #584]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ce:	f023 0103 	bic.w	r1, r3, #3
 80068d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068d8:	4a8e      	ldr	r2, [pc, #568]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068da:	430b      	orrs	r3, r1
 80068dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068de:	e003      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80068f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068f8:	2300      	movs	r3, #0
 80068fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006902:	460b      	mov	r3, r1
 8006904:	4313      	orrs	r3, r2
 8006906:	f000 8099 	beq.w	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800690a:	4b83      	ldr	r3, [pc, #524]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a82      	ldr	r2, [pc, #520]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006914:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006916:	f7fc fa05 	bl	8002d24 <HAL_GetTick>
 800691a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800691e:	e00b      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006920:	f7fc fa00 	bl	8002d24 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b64      	cmp	r3, #100	@ 0x64
 800692e:	d903      	bls.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006936:	e005      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006938:	4b77      	ldr	r3, [pc, #476]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0ed      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006944:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006948:	2b00      	cmp	r3, #0
 800694a:	d173      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800694c:	4b71      	ldr	r3, [pc, #452]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800694e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006954:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006958:	4053      	eors	r3, r2
 800695a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800695e:	2b00      	cmp	r3, #0
 8006960:	d015      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006962:	4b6c      	ldr	r3, [pc, #432]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800696a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800696e:	4b69      	ldr	r3, [pc, #420]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006972:	4a68      	ldr	r2, [pc, #416]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006978:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800697a:	4b66      	ldr	r3, [pc, #408]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800697c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697e:	4a65      	ldr	r2, [pc, #404]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006980:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006984:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006986:	4a63      	ldr	r2, [pc, #396]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800698c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800698e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006992:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800699a:	d118      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699c:	f7fc f9c2 	bl	8002d24 <HAL_GetTick>
 80069a0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069a4:	e00d      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a6:	f7fc f9bd 	bl	8002d24 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80069b0:	1ad2      	subs	r2, r2, r3
 80069b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d903      	bls.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80069c0:	e005      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069c2:	4b54      	ldr	r3, [pc, #336]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0eb      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80069ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d129      	bne.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069e6:	d10e      	bne.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80069e8:	4b4a      	ldr	r3, [pc, #296]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80069f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069f8:	091a      	lsrs	r2, r3, #4
 80069fa:	4b48      	ldr	r3, [pc, #288]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	4a45      	ldr	r2, [pc, #276]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a00:	430b      	orrs	r3, r1
 8006a02:	6113      	str	r3, [r2, #16]
 8006a04:	e005      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006a06:	4b43      	ldr	r3, [pc, #268]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	4a42      	ldr	r2, [pc, #264]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a10:	6113      	str	r3, [r2, #16]
 8006a12:	4b40      	ldr	r3, [pc, #256]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a14:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a22:	4a3c      	ldr	r2, [pc, #240]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a24:	430b      	orrs	r3, r1
 8006a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a28:	e008      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006a32:	e003      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f002 0301 	and.w	r3, r2, #1
 8006a48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a56:	460b      	mov	r3, r1
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	f000 808f 	beq.w	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a64:	2b28      	cmp	r3, #40	@ 0x28
 8006a66:	d871      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006a68:	a201      	add	r2, pc, #4	@ (adr r2, 8006a70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6e:	bf00      	nop
 8006a70:	08006b55 	.word	0x08006b55
 8006a74:	08006b4d 	.word	0x08006b4d
 8006a78:	08006b4d 	.word	0x08006b4d
 8006a7c:	08006b4d 	.word	0x08006b4d
 8006a80:	08006b4d 	.word	0x08006b4d
 8006a84:	08006b4d 	.word	0x08006b4d
 8006a88:	08006b4d 	.word	0x08006b4d
 8006a8c:	08006b4d 	.word	0x08006b4d
 8006a90:	08006b21 	.word	0x08006b21
 8006a94:	08006b4d 	.word	0x08006b4d
 8006a98:	08006b4d 	.word	0x08006b4d
 8006a9c:	08006b4d 	.word	0x08006b4d
 8006aa0:	08006b4d 	.word	0x08006b4d
 8006aa4:	08006b4d 	.word	0x08006b4d
 8006aa8:	08006b4d 	.word	0x08006b4d
 8006aac:	08006b4d 	.word	0x08006b4d
 8006ab0:	08006b37 	.word	0x08006b37
 8006ab4:	08006b4d 	.word	0x08006b4d
 8006ab8:	08006b4d 	.word	0x08006b4d
 8006abc:	08006b4d 	.word	0x08006b4d
 8006ac0:	08006b4d 	.word	0x08006b4d
 8006ac4:	08006b4d 	.word	0x08006b4d
 8006ac8:	08006b4d 	.word	0x08006b4d
 8006acc:	08006b4d 	.word	0x08006b4d
 8006ad0:	08006b55 	.word	0x08006b55
 8006ad4:	08006b4d 	.word	0x08006b4d
 8006ad8:	08006b4d 	.word	0x08006b4d
 8006adc:	08006b4d 	.word	0x08006b4d
 8006ae0:	08006b4d 	.word	0x08006b4d
 8006ae4:	08006b4d 	.word	0x08006b4d
 8006ae8:	08006b4d 	.word	0x08006b4d
 8006aec:	08006b4d 	.word	0x08006b4d
 8006af0:	08006b55 	.word	0x08006b55
 8006af4:	08006b4d 	.word	0x08006b4d
 8006af8:	08006b4d 	.word	0x08006b4d
 8006afc:	08006b4d 	.word	0x08006b4d
 8006b00:	08006b4d 	.word	0x08006b4d
 8006b04:	08006b4d 	.word	0x08006b4d
 8006b08:	08006b4d 	.word	0x08006b4d
 8006b0c:	08006b4d 	.word	0x08006b4d
 8006b10:	08006b55 	.word	0x08006b55
 8006b14:	58024400 	.word	0x58024400
 8006b18:	58024800 	.word	0x58024800
 8006b1c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b24:	3308      	adds	r3, #8
 8006b26:	2101      	movs	r1, #1
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 ffa7 	bl	8007a7c <RCCEx_PLL2_Config>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b34:	e00f      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3a:	3328      	adds	r3, #40	@ 0x28
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 f84e 	bl	8007be0 <RCCEx_PLL3_Config>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b4a:	e004      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b52:	e000      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10a      	bne.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b5e:	4bbf      	ldr	r3, [pc, #764]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b62:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b6c:	4abb      	ldr	r2, [pc, #748]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b6e:	430b      	orrs	r3, r1
 8006b70:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b72:	e003      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	f002 0302 	and.w	r3, r2, #2
 8006b88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	d041      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ba2:	2b05      	cmp	r3, #5
 8006ba4:	d824      	bhi.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bac:	08006bf9 	.word	0x08006bf9
 8006bb0:	08006bc5 	.word	0x08006bc5
 8006bb4:	08006bdb 	.word	0x08006bdb
 8006bb8:	08006bf9 	.word	0x08006bf9
 8006bbc:	08006bf9 	.word	0x08006bf9
 8006bc0:	08006bf9 	.word	0x08006bf9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc8:	3308      	adds	r3, #8
 8006bca:	2101      	movs	r1, #1
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 ff55 	bl	8007a7c <RCCEx_PLL2_Config>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006bd8:	e00f      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bde:	3328      	adds	r3, #40	@ 0x28
 8006be0:	2101      	movs	r1, #1
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fffc 	bl	8007be0 <RCCEx_PLL3_Config>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006bee:	e004      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bf6:	e000      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c02:	4b96      	ldr	r3, [pc, #600]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c06:	f023 0107 	bic.w	r1, r3, #7
 8006c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c10:	4a92      	ldr	r2, [pc, #584]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c12:	430b      	orrs	r3, r1
 8006c14:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c16:	e003      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	f002 0304 	and.w	r3, r2, #4
 8006c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c30:	2300      	movs	r3, #0
 8006c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c36:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	d044      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c48:	2b05      	cmp	r3, #5
 8006c4a:	d825      	bhi.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c54 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006ca1 	.word	0x08006ca1
 8006c58:	08006c6d 	.word	0x08006c6d
 8006c5c:	08006c83 	.word	0x08006c83
 8006c60:	08006ca1 	.word	0x08006ca1
 8006c64:	08006ca1 	.word	0x08006ca1
 8006c68:	08006ca1 	.word	0x08006ca1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c70:	3308      	adds	r3, #8
 8006c72:	2101      	movs	r1, #1
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 ff01 	bl	8007a7c <RCCEx_PLL2_Config>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c80:	e00f      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c86:	3328      	adds	r3, #40	@ 0x28
 8006c88:	2101      	movs	r1, #1
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 ffa8 	bl	8007be0 <RCCEx_PLL3_Config>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c96:	e004      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c9e:	e000      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10b      	bne.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006caa:	4b6c      	ldr	r3, [pc, #432]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cae:	f023 0107 	bic.w	r1, r3, #7
 8006cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cba:	4a68      	ldr	r2, [pc, #416]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cbc:	430b      	orrs	r3, r1
 8006cbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cc0:	e003      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cc6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd2:	f002 0320 	and.w	r3, r2, #32
 8006cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ce0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	d055      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cf6:	d033      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cfc:	d82c      	bhi.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d02:	d02f      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d08:	d826      	bhi.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d0e:	d02b      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006d10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d14:	d820      	bhi.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d1a:	d012      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006d1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d20:	d81a      	bhi.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d022      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006d26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d2a:	d115      	bne.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d30:	3308      	adds	r3, #8
 8006d32:	2100      	movs	r1, #0
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fea1 	bl	8007a7c <RCCEx_PLL2_Config>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d40:	e015      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d46:	3328      	adds	r3, #40	@ 0x28
 8006d48:	2102      	movs	r1, #2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 ff48 	bl	8007be0 <RCCEx_PLL3_Config>
 8006d50:	4603      	mov	r3, r0
 8006d52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d56:	e00a      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d5e:	e006      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d60:	bf00      	nop
 8006d62:	e004      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d64:	bf00      	nop
 8006d66:	e002      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d68:	bf00      	nop
 8006d6a:	e000      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10b      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d76:	4b39      	ldr	r3, [pc, #228]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d86:	4a35      	ldr	r2, [pc, #212]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d8c:	e003      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006da2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006da6:	2300      	movs	r3, #0
 8006da8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006dac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006db0:	460b      	mov	r3, r1
 8006db2:	4313      	orrs	r3, r2
 8006db4:	d058      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dbe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006dc2:	d033      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006dc4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006dc8:	d82c      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dce:	d02f      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dd4:	d826      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006dd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dda:	d02b      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006ddc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006de0:	d820      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006de2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006de6:	d012      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dec:	d81a      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d022      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df6:	d115      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fe3b 	bl	8007a7c <RCCEx_PLL2_Config>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e0c:	e015      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e12:	3328      	adds	r3, #40	@ 0x28
 8006e14:	2102      	movs	r1, #2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fee2 	bl	8007be0 <RCCEx_PLL3_Config>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e22:	e00a      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e2a:	e006      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e2c:	bf00      	nop
 8006e2e:	e004      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e30:	bf00      	nop
 8006e32:	e002      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e34:	bf00      	nop
 8006e36:	e000      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10e      	bne.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e42:	4b06      	ldr	r3, [pc, #24]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e46:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e52:	4a02      	ldr	r2, [pc, #8]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e54:	430b      	orrs	r3, r1
 8006e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e58:	e006      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006e5a:	bf00      	nop
 8006e5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006e74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e7e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006e82:	460b      	mov	r3, r1
 8006e84:	4313      	orrs	r3, r2
 8006e86:	d055      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e90:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e94:	d033      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006e96:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e9a:	d82c      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ea0:	d02f      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006ea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ea6:	d826      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ea8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006eac:	d02b      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006eae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006eb2:	d820      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006eb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eb8:	d012      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006eba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ebe:	d81a      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d022      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ec8:	d115      	bne.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ece:	3308      	adds	r3, #8
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fdd2 	bl	8007a7c <RCCEx_PLL2_Config>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ede:	e015      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee4:	3328      	adds	r3, #40	@ 0x28
 8006ee6:	2102      	movs	r1, #2
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 fe79 	bl	8007be0 <RCCEx_PLL3_Config>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ef4:	e00a      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006efc:	e006      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006efe:	bf00      	nop
 8006f00:	e004      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006f02:	bf00      	nop
 8006f04:	e002      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006f06:	bf00      	nop
 8006f08:	e000      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10b      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f14:	4ba0      	ldr	r3, [pc, #640]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f18:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f24:	4a9c      	ldr	r2, [pc, #624]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f26:	430b      	orrs	r3, r1
 8006f28:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f2a:	e003      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	f002 0308 	and.w	r3, r2, #8
 8006f40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f44:	2300      	movs	r3, #0
 8006f46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f4a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4313      	orrs	r3, r2
 8006f52:	d01e      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f60:	d10c      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f66:	3328      	adds	r3, #40	@ 0x28
 8006f68:	2102      	movs	r1, #2
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fe38 	bl	8007be0 <RCCEx_PLL3_Config>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006f7c:	4b86      	ldr	r3, [pc, #536]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f80:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f8c:	4a82      	ldr	r2, [pc, #520]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f8e:	430b      	orrs	r3, r1
 8006f90:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	f002 0310 	and.w	r3, r2, #16
 8006f9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fa8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006fac:	460b      	mov	r3, r1
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	d01e      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fbe:	d10c      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc4:	3328      	adds	r3, #40	@ 0x28
 8006fc6:	2102      	movs	r1, #2
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fe09 	bl	8007be0 <RCCEx_PLL3_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fda:	4b6f      	ldr	r3, [pc, #444]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fea:	4a6b      	ldr	r2, [pc, #428]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fec:	430b      	orrs	r3, r1
 8006fee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006ffc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ffe:	2300      	movs	r3, #0
 8007000:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007002:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007006:	460b      	mov	r3, r1
 8007008:	4313      	orrs	r3, r2
 800700a:	d03e      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800700c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007010:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007014:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007018:	d022      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800701a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800701e:	d81b      	bhi.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007028:	d00b      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800702a:	e015      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800702c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007030:	3308      	adds	r3, #8
 8007032:	2100      	movs	r1, #0
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fd21 	bl	8007a7c <RCCEx_PLL2_Config>
 800703a:	4603      	mov	r3, r0
 800703c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007040:	e00f      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007046:	3328      	adds	r3, #40	@ 0x28
 8007048:	2102      	movs	r1, #2
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fdc8 	bl	8007be0 <RCCEx_PLL3_Config>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007056:	e004      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800705e:	e000      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007062:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10b      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800706a:	4b4b      	ldr	r3, [pc, #300]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800706c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800706e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007076:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800707a:	4a47      	ldr	r2, [pc, #284]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800707c:	430b      	orrs	r3, r1
 800707e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007080:	e003      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007082:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007086:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800708a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800708e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007092:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007096:	673b      	str	r3, [r7, #112]	@ 0x70
 8007098:	2300      	movs	r3, #0
 800709a:	677b      	str	r3, [r7, #116]	@ 0x74
 800709c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80070a0:	460b      	mov	r3, r1
 80070a2:	4313      	orrs	r3, r2
 80070a4:	d03b      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80070a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070b2:	d01f      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80070b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070b8:	d818      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80070ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070be:	d003      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80070c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070c4:	d007      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80070c6:	e011      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c8:	4b33      	ldr	r3, [pc, #204]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070cc:	4a32      	ldr	r2, [pc, #200]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80070d4:	e00f      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070da:	3328      	adds	r3, #40	@ 0x28
 80070dc:	2101      	movs	r1, #1
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fd7e 	bl	8007be0 <RCCEx_PLL3_Config>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80070ea:	e004      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070f2:	e000      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80070f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10b      	bne.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070fe:	4b26      	ldr	r3, [pc, #152]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007102:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800710e:	4a22      	ldr	r2, [pc, #136]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007110:	430b      	orrs	r3, r1
 8007112:	6553      	str	r3, [r2, #84]	@ 0x54
 8007114:	e003      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007116:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800711a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800711e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800712a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800712c:	2300      	movs	r3, #0
 800712e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007130:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007134:	460b      	mov	r3, r1
 8007136:	4313      	orrs	r3, r2
 8007138:	d034      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007148:	d007      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800714a:	e011      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800714c:	4b12      	ldr	r3, [pc, #72]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800714e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007150:	4a11      	ldr	r2, [pc, #68]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007156:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007158:	e00e      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800715a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715e:	3308      	adds	r3, #8
 8007160:	2102      	movs	r1, #2
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fc8a 	bl	8007a7c <RCCEx_PLL2_Config>
 8007168:	4603      	mov	r3, r0
 800716a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800716e:	e003      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007178:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10d      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007180:	4b05      	ldr	r3, [pc, #20]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007184:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800718e:	4a02      	ldr	r2, [pc, #8]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007190:	430b      	orrs	r3, r1
 8007192:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007194:	e006      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007196:	bf00      	nop
 8007198:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80071b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80071b2:	2300      	movs	r3, #0
 80071b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80071b6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80071ba:	460b      	mov	r3, r1
 80071bc:	4313      	orrs	r3, r2
 80071be:	d00c      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c4:	3328      	adds	r3, #40	@ 0x28
 80071c6:	2102      	movs	r1, #2
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 fd09 	bl	8007be0 <RCCEx_PLL3_Config>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80071da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80071e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071e8:	2300      	movs	r3, #0
 80071ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071ec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80071f0:	460b      	mov	r3, r1
 80071f2:	4313      	orrs	r3, r2
 80071f4:	d036      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80071f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007200:	d018      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007202:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007206:	d811      	bhi.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800720c:	d014      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800720e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007212:	d80b      	bhi.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007214:	2b00      	cmp	r3, #0
 8007216:	d011      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800721c:	d106      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800721e:	4bb7      	ldr	r3, [pc, #732]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007222:	4ab6      	ldr	r2, [pc, #728]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007228:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800722a:	e008      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007232:	e004      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007234:	bf00      	nop
 8007236:	e002      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007238:	bf00      	nop
 800723a:	e000      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800723c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800723e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10a      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007246:	4bad      	ldr	r3, [pc, #692]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800724e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007252:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007254:	4aa9      	ldr	r2, [pc, #676]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007256:	430b      	orrs	r3, r1
 8007258:	6553      	str	r3, [r2, #84]	@ 0x54
 800725a:	e003      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800725c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007260:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007270:	653b      	str	r3, [r7, #80]	@ 0x50
 8007272:	2300      	movs	r3, #0
 8007274:	657b      	str	r3, [r7, #84]	@ 0x54
 8007276:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800727a:	460b      	mov	r3, r1
 800727c:	4313      	orrs	r3, r2
 800727e:	d009      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007280:	4b9e      	ldr	r3, [pc, #632]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007284:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800728e:	4a9b      	ldr	r2, [pc, #620]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007290:	430b      	orrs	r3, r1
 8007292:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80072a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072a2:	2300      	movs	r3, #0
 80072a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80072aa:	460b      	mov	r3, r1
 80072ac:	4313      	orrs	r3, r2
 80072ae:	d009      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072b0:	4b92      	ldr	r3, [pc, #584]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80072b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072be:	4a8f      	ldr	r2, [pc, #572]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072c0:	430b      	orrs	r3, r1
 80072c2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80072c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80072d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80072d2:	2300      	movs	r3, #0
 80072d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80072da:	460b      	mov	r3, r1
 80072dc:	4313      	orrs	r3, r2
 80072de:	d00e      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072e0:	4b86      	ldr	r3, [pc, #536]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	4a85      	ldr	r2, [pc, #532]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072ea:	6113      	str	r3, [r2, #16]
 80072ec:	4b83      	ldr	r3, [pc, #524]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072ee:	6919      	ldr	r1, [r3, #16]
 80072f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072f8:	4a80      	ldr	r2, [pc, #512]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072fa:	430b      	orrs	r3, r1
 80072fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80072fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800730a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800730c:	2300      	movs	r3, #0
 800730e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007310:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007314:	460b      	mov	r3, r1
 8007316:	4313      	orrs	r3, r2
 8007318:	d009      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800731a:	4b78      	ldr	r3, [pc, #480]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800731c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800731e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007328:	4a74      	ldr	r2, [pc, #464]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800732a:	430b      	orrs	r3, r1
 800732c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800732e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800733a:	633b      	str	r3, [r7, #48]	@ 0x30
 800733c:	2300      	movs	r3, #0
 800733e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007340:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007344:	460b      	mov	r3, r1
 8007346:	4313      	orrs	r3, r2
 8007348:	d00a      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800734a:	4b6c      	ldr	r3, [pc, #432]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800734c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800734e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800735a:	4a68      	ldr	r2, [pc, #416]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800735c:	430b      	orrs	r3, r1
 800735e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	2100      	movs	r1, #0
 800736a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007372:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007376:	460b      	mov	r3, r1
 8007378:	4313      	orrs	r3, r2
 800737a:	d011      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800737c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007380:	3308      	adds	r3, #8
 8007382:	2100      	movs	r1, #0
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fb79 	bl	8007a7c <RCCEx_PLL2_Config>
 800738a:	4603      	mov	r3, r0
 800738c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007390:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007394:	2b00      	cmp	r3, #0
 8007396:	d003      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800739c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80073a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	2100      	movs	r1, #0
 80073aa:	6239      	str	r1, [r7, #32]
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80073b6:	460b      	mov	r3, r1
 80073b8:	4313      	orrs	r3, r2
 80073ba:	d011      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c0:	3308      	adds	r3, #8
 80073c2:	2101      	movs	r1, #1
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 fb59 	bl	8007a7c <RCCEx_PLL2_Config>
 80073ca:	4603      	mov	r3, r0
 80073cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80073d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80073e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	2100      	movs	r1, #0
 80073ea:	61b9      	str	r1, [r7, #24]
 80073ec:	f003 0304 	and.w	r3, r3, #4
 80073f0:	61fb      	str	r3, [r7, #28]
 80073f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80073f6:	460b      	mov	r3, r1
 80073f8:	4313      	orrs	r3, r2
 80073fa:	d011      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007400:	3308      	adds	r3, #8
 8007402:	2102      	movs	r1, #2
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fb39 	bl	8007a7c <RCCEx_PLL2_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007418:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800741c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	2100      	movs	r1, #0
 800742a:	6139      	str	r1, [r7, #16]
 800742c:	f003 0308 	and.w	r3, r3, #8
 8007430:	617b      	str	r3, [r7, #20]
 8007432:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007436:	460b      	mov	r3, r1
 8007438:	4313      	orrs	r3, r2
 800743a:	d011      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800743c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007440:	3328      	adds	r3, #40	@ 0x28
 8007442:	2100      	movs	r1, #0
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fbcb 	bl	8007be0 <RCCEx_PLL3_Config>
 800744a:	4603      	mov	r3, r0
 800744c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007450:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007458:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800745c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	2100      	movs	r1, #0
 800746a:	60b9      	str	r1, [r7, #8]
 800746c:	f003 0310 	and.w	r3, r3, #16
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007476:	460b      	mov	r3, r1
 8007478:	4313      	orrs	r3, r2
 800747a:	d011      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800747c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007480:	3328      	adds	r3, #40	@ 0x28
 8007482:	2101      	movs	r1, #1
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fbab 	bl	8007be0 <RCCEx_PLL3_Config>
 800748a:	4603      	mov	r3, r0
 800748c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007490:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007498:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800749c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80074a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	2100      	movs	r1, #0
 80074aa:	6039      	str	r1, [r7, #0]
 80074ac:	f003 0320 	and.w	r3, r3, #32
 80074b0:	607b      	str	r3, [r7, #4]
 80074b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80074b6:	460b      	mov	r3, r1
 80074b8:	4313      	orrs	r3, r2
 80074ba:	d011      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c0:	3328      	adds	r3, #40	@ 0x28
 80074c2:	2102      	movs	r1, #2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fb8b 	bl	8007be0 <RCCEx_PLL3_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80074d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d003      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80074e0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	e000      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80074f4:	46bd      	mov	sp, r7
 80074f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074fa:	bf00      	nop
 80074fc:	58024400 	.word	0x58024400

08007500 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007504:	f7fe fe00 	bl	8006108 <HAL_RCC_GetHCLKFreq>
 8007508:	4602      	mov	r2, r0
 800750a:	4b06      	ldr	r3, [pc, #24]	@ (8007524 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	091b      	lsrs	r3, r3, #4
 8007510:	f003 0307 	and.w	r3, r3, #7
 8007514:	4904      	ldr	r1, [pc, #16]	@ (8007528 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007516:	5ccb      	ldrb	r3, [r1, r3]
 8007518:	f003 031f 	and.w	r3, r3, #31
 800751c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007520:	4618      	mov	r0, r3
 8007522:	bd80      	pop	{r7, pc}
 8007524:	58024400 	.word	0x58024400
 8007528:	08012c18 	.word	0x08012c18

0800752c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800752c:	b480      	push	{r7}
 800752e:	b089      	sub	sp, #36	@ 0x24
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007534:	4ba1      	ldr	r3, [pc, #644]	@ (80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007538:	f003 0303 	and.w	r3, r3, #3
 800753c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800753e:	4b9f      	ldr	r3, [pc, #636]	@ (80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007542:	0b1b      	lsrs	r3, r3, #12
 8007544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007548:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800754a:	4b9c      	ldr	r3, [pc, #624]	@ (80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800754c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754e:	091b      	lsrs	r3, r3, #4
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007556:	4b99      	ldr	r3, [pc, #612]	@ (80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800755a:	08db      	lsrs	r3, r3, #3
 800755c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	fb02 f303 	mul.w	r3, r2, r3
 8007566:	ee07 3a90 	vmov	s15, r3
 800756a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 8111 	beq.w	800779c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	2b02      	cmp	r3, #2
 800757e:	f000 8083 	beq.w	8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	2b02      	cmp	r3, #2
 8007586:	f200 80a1 	bhi.w	80076cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d056      	beq.n	8007644 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007596:	e099      	b.n	80076cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007598:	4b88      	ldr	r3, [pc, #544]	@ (80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0320 	and.w	r3, r3, #32
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d02d      	beq.n	8007600 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075a4:	4b85      	ldr	r3, [pc, #532]	@ (80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	08db      	lsrs	r3, r3, #3
 80075aa:	f003 0303 	and.w	r3, r3, #3
 80075ae:	4a84      	ldr	r2, [pc, #528]	@ (80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80075b0:	fa22 f303 	lsr.w	r3, r2, r3
 80075b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	ee07 3a90 	vmov	s15, r3
 80075bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	ee07 3a90 	vmov	s15, r3
 80075c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ce:	4b7b      	ldr	r3, [pc, #492]	@ (80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075de:	ed97 6a03 	vldr	s12, [r7, #12]
 80075e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80077c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075fe:	e087      	b.n	8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80077c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800760e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007612:	4b6a      	ldr	r3, [pc, #424]	@ (80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007622:	ed97 6a03 	vldr	s12, [r7, #12]
 8007626:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80077c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800762a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800763a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007642:	e065      	b.n	8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80077cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007656:	4b59      	ldr	r3, [pc, #356]	@ (80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007666:	ed97 6a03 	vldr	s12, [r7, #12]
 800766a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80077c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800766e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800767a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007686:	e043      	b.n	8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007692:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80077d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800769a:	4b48      	ldr	r3, [pc, #288]	@ (80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800769c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80077c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ca:	e021      	b.n	8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80077cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076de:	4b37      	ldr	r3, [pc, #220]	@ (80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80076f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80077c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800770e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007710:	4b2a      	ldr	r3, [pc, #168]	@ (80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007714:	0a5b      	lsrs	r3, r3, #9
 8007716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007722:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800772a:	edd7 6a07 	vldr	s13, [r7, #28]
 800772e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007736:	ee17 2a90 	vmov	r2, s15
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800773e:	4b1f      	ldr	r3, [pc, #124]	@ (80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007742:	0c1b      	lsrs	r3, r3, #16
 8007744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007748:	ee07 3a90 	vmov	s15, r3
 800774c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007750:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007754:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007758:	edd7 6a07 	vldr	s13, [r7, #28]
 800775c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007764:	ee17 2a90 	vmov	r2, s15
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800776c:	4b13      	ldr	r3, [pc, #76]	@ (80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800776e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007770:	0e1b      	lsrs	r3, r3, #24
 8007772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007786:	edd7 6a07 	vldr	s13, [r7, #28]
 800778a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800778e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007792:	ee17 2a90 	vmov	r2, s15
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800779a:	e008      	b.n	80077ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	609a      	str	r2, [r3, #8]
}
 80077ae:	bf00      	nop
 80077b0:	3724      	adds	r7, #36	@ 0x24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	58024400 	.word	0x58024400
 80077c0:	03d09000 	.word	0x03d09000
 80077c4:	46000000 	.word	0x46000000
 80077c8:	4c742400 	.word	0x4c742400
 80077cc:	4a742400 	.word	0x4a742400
 80077d0:	4bbebc20 	.word	0x4bbebc20

080077d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b089      	sub	sp, #36	@ 0x24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077dc:	4ba1      	ldr	r3, [pc, #644]	@ (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e0:	f003 0303 	and.w	r3, r3, #3
 80077e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80077e6:	4b9f      	ldr	r3, [pc, #636]	@ (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ea:	0d1b      	lsrs	r3, r3, #20
 80077ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80077f2:	4b9c      	ldr	r3, [pc, #624]	@ (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f6:	0a1b      	lsrs	r3, r3, #8
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80077fe:	4b99      	ldr	r3, [pc, #612]	@ (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007802:	08db      	lsrs	r3, r3, #3
 8007804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	fb02 f303 	mul.w	r3, r2, r3
 800780e:	ee07 3a90 	vmov	s15, r3
 8007812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007816:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 8111 	beq.w	8007a44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	2b02      	cmp	r3, #2
 8007826:	f000 8083 	beq.w	8007930 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	2b02      	cmp	r3, #2
 800782e:	f200 80a1 	bhi.w	8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d056      	beq.n	80078ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800783e:	e099      	b.n	8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007840:	4b88      	ldr	r3, [pc, #544]	@ (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0320 	and.w	r3, r3, #32
 8007848:	2b00      	cmp	r3, #0
 800784a:	d02d      	beq.n	80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800784c:	4b85      	ldr	r3, [pc, #532]	@ (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	08db      	lsrs	r3, r3, #3
 8007852:	f003 0303 	and.w	r3, r3, #3
 8007856:	4a84      	ldr	r2, [pc, #528]	@ (8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007858:	fa22 f303 	lsr.w	r3, r2, r3
 800785c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	ee07 3a90 	vmov	s15, r3
 8007864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	ee07 3a90 	vmov	s15, r3
 800786e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007876:	4b7b      	ldr	r3, [pc, #492]	@ (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800787a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800787e:	ee07 3a90 	vmov	s15, r3
 8007882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007886:	ed97 6a03 	vldr	s12, [r7, #12]
 800788a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800788e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800789a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800789e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80078a6:	e087      	b.n	80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	ee07 3a90 	vmov	s15, r3
 80078ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007a70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80078b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ba:	4b6a      	ldr	r3, [pc, #424]	@ (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c2:	ee07 3a90 	vmov	s15, r3
 80078c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078ea:	e065      	b.n	80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	ee07 3a90 	vmov	s15, r3
 80078f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80078fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078fe:	4b59      	ldr	r3, [pc, #356]	@ (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007912:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800791a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800791e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800792a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800792e:	e043      	b.n	80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	ee07 3a90 	vmov	s15, r3
 8007936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007a78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800793e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007942:	4b48      	ldr	r3, [pc, #288]	@ (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007952:	ed97 6a03 	vldr	s12, [r7, #12]
 8007956:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800795a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800795e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800796a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007972:	e021      	b.n	80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	ee07 3a90 	vmov	s15, r3
 800797a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007a74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007986:	4b37      	ldr	r3, [pc, #220]	@ (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007996:	ed97 6a03 	vldr	s12, [r7, #12]
 800799a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007a6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800799e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80079b8:	4b2a      	ldr	r3, [pc, #168]	@ (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079bc:	0a5b      	lsrs	r3, r3, #9
 80079be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079c2:	ee07 3a90 	vmov	s15, r3
 80079c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80079d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079de:	ee17 2a90 	vmov	r2, s15
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80079e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ea:	0c1b      	lsrs	r3, r3, #16
 80079ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079f0:	ee07 3a90 	vmov	s15, r3
 80079f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a00:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a0c:	ee17 2a90 	vmov	r2, s15
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007a14:	4b13      	ldr	r3, [pc, #76]	@ (8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a18:	0e1b      	lsrs	r3, r3, #24
 8007a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a3a:	ee17 2a90 	vmov	r2, s15
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a42:	e008      	b.n	8007a56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	609a      	str	r2, [r3, #8]
}
 8007a56:	bf00      	nop
 8007a58:	3724      	adds	r7, #36	@ 0x24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	58024400 	.word	0x58024400
 8007a68:	03d09000 	.word	0x03d09000
 8007a6c:	46000000 	.word	0x46000000
 8007a70:	4c742400 	.word	0x4c742400
 8007a74:	4a742400 	.word	0x4a742400
 8007a78:	4bbebc20 	.word	0x4bbebc20

08007a7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a8a:	4b53      	ldr	r3, [pc, #332]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8e:	f003 0303 	and.w	r3, r3, #3
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d101      	bne.n	8007a9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e099      	b.n	8007bce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a9a:	4b4f      	ldr	r3, [pc, #316]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a4e      	ldr	r2, [pc, #312]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007aa0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aa6:	f7fb f93d 	bl	8002d24 <HAL_GetTick>
 8007aaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007aac:	e008      	b.n	8007ac0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007aae:	f7fb f939 	bl	8002d24 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d901      	bls.n	8007ac0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e086      	b.n	8007bce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ac0:	4b45      	ldr	r3, [pc, #276]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1f0      	bne.n	8007aae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007acc:	4b42      	ldr	r3, [pc, #264]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	031b      	lsls	r3, r3, #12
 8007ada:	493f      	ldr	r1, [pc, #252]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	628b      	str	r3, [r1, #40]	@ 0x28
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	025b      	lsls	r3, r3, #9
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	431a      	orrs	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	041b      	lsls	r3, r3, #16
 8007afe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	061b      	lsls	r3, r3, #24
 8007b0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b10:	4931      	ldr	r1, [pc, #196]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b16:	4b30      	ldr	r3, [pc, #192]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	492d      	ldr	r1, [pc, #180]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b28:	4b2b      	ldr	r3, [pc, #172]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2c:	f023 0220 	bic.w	r2, r3, #32
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	4928      	ldr	r1, [pc, #160]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b3a:	4b27      	ldr	r3, [pc, #156]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3e:	4a26      	ldr	r2, [pc, #152]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b40:	f023 0310 	bic.w	r3, r3, #16
 8007b44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b46:	4b24      	ldr	r3, [pc, #144]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b4a:	4b24      	ldr	r3, [pc, #144]	@ (8007bdc <RCCEx_PLL2_Config+0x160>)
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	69d2      	ldr	r2, [r2, #28]
 8007b52:	00d2      	lsls	r2, r2, #3
 8007b54:	4920      	ldr	r1, [pc, #128]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b60:	f043 0310 	orr.w	r3, r3, #16
 8007b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d106      	bne.n	8007b7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b70:	4a19      	ldr	r2, [pc, #100]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b78:	e00f      	b.n	8007b9a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d106      	bne.n	8007b8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b80:	4b15      	ldr	r3, [pc, #84]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b84:	4a14      	ldr	r2, [pc, #80]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b8c:	e005      	b.n	8007b9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b8e:	4b12      	ldr	r3, [pc, #72]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b92:	4a11      	ldr	r2, [pc, #68]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007ba0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ba6:	f7fb f8bd 	bl	8002d24 <HAL_GetTick>
 8007baa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bac:	e008      	b.n	8007bc0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bae:	f7fb f8b9 	bl	8002d24 <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d901      	bls.n	8007bc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e006      	b.n	8007bce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bc0:	4b05      	ldr	r3, [pc, #20]	@ (8007bd8 <RCCEx_PLL2_Config+0x15c>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d0f0      	beq.n	8007bae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	58024400 	.word	0x58024400
 8007bdc:	ffff0007 	.word	0xffff0007

08007be0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bee:	4b53      	ldr	r3, [pc, #332]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d101      	bne.n	8007bfe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e099      	b.n	8007d32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007bfe:	4b4f      	ldr	r3, [pc, #316]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a4e      	ldr	r2, [pc, #312]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007c04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c0a:	f7fb f88b 	bl	8002d24 <HAL_GetTick>
 8007c0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c10:	e008      	b.n	8007c24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c12:	f7fb f887 	bl	8002d24 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d901      	bls.n	8007c24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e086      	b.n	8007d32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c24:	4b45      	ldr	r3, [pc, #276]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1f0      	bne.n	8007c12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c30:	4b42      	ldr	r3, [pc, #264]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c34:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	051b      	lsls	r3, r3, #20
 8007c3e:	493f      	ldr	r1, [pc, #252]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	025b      	lsls	r3, r3, #9
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	041b      	lsls	r3, r3, #16
 8007c62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c66:	431a      	orrs	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	061b      	lsls	r3, r3, #24
 8007c70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c74:	4931      	ldr	r1, [pc, #196]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c7a:	4b30      	ldr	r3, [pc, #192]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	492d      	ldr	r1, [pc, #180]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	4928      	ldr	r1, [pc, #160]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c9e:	4b27      	ldr	r3, [pc, #156]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca2:	4a26      	ldr	r2, [pc, #152]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007caa:	4b24      	ldr	r3, [pc, #144]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cae:	4b24      	ldr	r3, [pc, #144]	@ (8007d40 <RCCEx_PLL3_Config+0x160>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	69d2      	ldr	r2, [r2, #28]
 8007cb6:	00d2      	lsls	r2, r2, #3
 8007cb8:	4920      	ldr	r1, [pc, #128]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d106      	bne.n	8007cde <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd4:	4a19      	ldr	r2, [pc, #100]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007cd6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007cda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007cdc:	e00f      	b.n	8007cfe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d106      	bne.n	8007cf2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007ce4:	4b15      	ldr	r3, [pc, #84]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce8:	4a14      	ldr	r2, [pc, #80]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007cea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007cee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007cf0:	e005      	b.n	8007cfe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007cf2:	4b12      	ldr	r3, [pc, #72]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf6:	4a11      	ldr	r2, [pc, #68]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007cf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a0e      	ldr	r2, [pc, #56]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d0a:	f7fb f80b 	bl	8002d24 <HAL_GetTick>
 8007d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d10:	e008      	b.n	8007d24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d12:	f7fb f807 	bl	8002d24 <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d901      	bls.n	8007d24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e006      	b.n	8007d32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d24:	4b05      	ldr	r3, [pc, #20]	@ (8007d3c <RCCEx_PLL3_Config+0x15c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0f0      	beq.n	8007d12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	58024400 	.word	0x58024400
 8007d40:	ffff0007 	.word	0xffff0007

08007d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e049      	b.n	8007dea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d106      	bne.n	8007d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7fa f824 	bl	8001db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2202      	movs	r2, #2
 8007d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	4619      	mov	r1, r3
 8007d82:	4610      	mov	r0, r2
 8007d84:	f000 fb12 	bl	80083ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d001      	beq.n	8007e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e05e      	b.n	8007eca <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0201 	orr.w	r2, r2, #1
 8007e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a2b      	ldr	r2, [pc, #172]	@ (8007ed8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d02c      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x94>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e36:	d027      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x94>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a27      	ldr	r2, [pc, #156]	@ (8007edc <HAL_TIM_Base_Start_IT+0xe8>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d022      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x94>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a26      	ldr	r2, [pc, #152]	@ (8007ee0 <HAL_TIM_Base_Start_IT+0xec>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d01d      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x94>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a24      	ldr	r2, [pc, #144]	@ (8007ee4 <HAL_TIM_Base_Start_IT+0xf0>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d018      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x94>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a23      	ldr	r2, [pc, #140]	@ (8007ee8 <HAL_TIM_Base_Start_IT+0xf4>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d013      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x94>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a21      	ldr	r2, [pc, #132]	@ (8007eec <HAL_TIM_Base_Start_IT+0xf8>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00e      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x94>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a20      	ldr	r2, [pc, #128]	@ (8007ef0 <HAL_TIM_Base_Start_IT+0xfc>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d009      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x94>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a1e      	ldr	r2, [pc, #120]	@ (8007ef4 <HAL_TIM_Base_Start_IT+0x100>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d004      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x94>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a1d      	ldr	r2, [pc, #116]	@ (8007ef8 <HAL_TIM_Base_Start_IT+0x104>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d115      	bne.n	8007eb4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8007efc <HAL_TIM_Base_Start_IT+0x108>)
 8007e90:	4013      	ands	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b06      	cmp	r3, #6
 8007e98:	d015      	beq.n	8007ec6 <HAL_TIM_Base_Start_IT+0xd2>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ea0:	d011      	beq.n	8007ec6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f042 0201 	orr.w	r2, r2, #1
 8007eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eb2:	e008      	b.n	8007ec6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0201 	orr.w	r2, r2, #1
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	e000      	b.n	8007ec8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	40010000 	.word	0x40010000
 8007edc:	40000400 	.word	0x40000400
 8007ee0:	40000800 	.word	0x40000800
 8007ee4:	40000c00 	.word	0x40000c00
 8007ee8:	40010400 	.word	0x40010400
 8007eec:	40001800 	.word	0x40001800
 8007ef0:	40014000 	.word	0x40014000
 8007ef4:	4000e000 	.word	0x4000e000
 8007ef8:	4000e400 	.word	0x4000e400
 8007efc:	00010007 	.word	0x00010007

08007f00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f022 0201 	bic.w	r2, r2, #1
 8007f16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6a1a      	ldr	r2, [r3, #32]
 8007f1e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007f22:	4013      	ands	r3, r2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10f      	bne.n	8007f48 <HAL_TIM_Base_Stop_IT+0x48>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6a1a      	ldr	r2, [r3, #32]
 8007f2e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007f32:	4013      	ands	r3, r2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d107      	bne.n	8007f48 <HAL_TIM_Base_Stop_IT+0x48>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f022 0201 	bic.w	r2, r2, #1
 8007f46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d020      	beq.n	8007fc2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d01b      	beq.n	8007fc2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f06f 0202 	mvn.w	r2, #2
 8007f92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	f003 0303 	and.w	r3, r3, #3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d003      	beq.n	8007fb0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f9e1 	bl	8008370 <HAL_TIM_IC_CaptureCallback>
 8007fae:	e005      	b.n	8007fbc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f9d3 	bl	800835c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f9e4 	bl	8008384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	f003 0304 	and.w	r3, r3, #4
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d020      	beq.n	800800e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f003 0304 	and.w	r3, r3, #4
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d01b      	beq.n	800800e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f06f 0204 	mvn.w	r2, #4
 8007fde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f9bb 	bl	8008370 <HAL_TIM_IC_CaptureCallback>
 8007ffa:	e005      	b.n	8008008 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f9ad 	bl	800835c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f9be 	bl	8008384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f003 0308 	and.w	r3, r3, #8
 8008014:	2b00      	cmp	r3, #0
 8008016:	d020      	beq.n	800805a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f003 0308 	and.w	r3, r3, #8
 800801e:	2b00      	cmp	r3, #0
 8008020:	d01b      	beq.n	800805a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f06f 0208 	mvn.w	r2, #8
 800802a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2204      	movs	r2, #4
 8008030:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	f003 0303 	and.w	r3, r3, #3
 800803c:	2b00      	cmp	r3, #0
 800803e:	d003      	beq.n	8008048 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f995 	bl	8008370 <HAL_TIM_IC_CaptureCallback>
 8008046:	e005      	b.n	8008054 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f987 	bl	800835c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f998 	bl	8008384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f003 0310 	and.w	r3, r3, #16
 8008060:	2b00      	cmp	r3, #0
 8008062:	d020      	beq.n	80080a6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f003 0310 	and.w	r3, r3, #16
 800806a:	2b00      	cmp	r3, #0
 800806c:	d01b      	beq.n	80080a6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f06f 0210 	mvn.w	r2, #16
 8008076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2208      	movs	r2, #8
 800807c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f96f 	bl	8008370 <HAL_TIM_IC_CaptureCallback>
 8008092:	e005      	b.n	80080a0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f961 	bl	800835c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f972 	bl	8008384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00c      	beq.n	80080ca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d007      	beq.n	80080ca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f06f 0201 	mvn.w	r2, #1
 80080c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7f9 fa85 	bl	80015d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d104      	bne.n	80080de <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00c      	beq.n	80080f8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d007      	beq.n	80080f8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80080f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fb50 	bl	8008798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00c      	beq.n	800811c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008108:	2b00      	cmp	r3, #0
 800810a:	d007      	beq.n	800811c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fb48 	bl	80087ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00c      	beq.n	8008140 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800812c:	2b00      	cmp	r3, #0
 800812e:	d007      	beq.n	8008140 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f92c 	bl	8008398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f003 0320 	and.w	r3, r3, #32
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00c      	beq.n	8008164 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f003 0320 	and.w	r3, r3, #32
 8008150:	2b00      	cmp	r3, #0
 8008152:	d007      	beq.n	8008164 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f06f 0220 	mvn.w	r2, #32
 800815c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fb10 	bl	8008784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008164:	bf00      	nop
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008180:	2b01      	cmp	r3, #1
 8008182:	d101      	bne.n	8008188 <HAL_TIM_ConfigClockSource+0x1c>
 8008184:	2302      	movs	r3, #2
 8008186:	e0dc      	b.n	8008342 <HAL_TIM_ConfigClockSource+0x1d6>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	4b6a      	ldr	r3, [pc, #424]	@ (800834c <HAL_TIM_ConfigClockSource+0x1e0>)
 80081a4:	4013      	ands	r3, r2
 80081a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a64      	ldr	r2, [pc, #400]	@ (8008350 <HAL_TIM_ConfigClockSource+0x1e4>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	f000 80a9 	beq.w	8008316 <HAL_TIM_ConfigClockSource+0x1aa>
 80081c4:	4a62      	ldr	r2, [pc, #392]	@ (8008350 <HAL_TIM_ConfigClockSource+0x1e4>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	f200 80ae 	bhi.w	8008328 <HAL_TIM_ConfigClockSource+0x1bc>
 80081cc:	4a61      	ldr	r2, [pc, #388]	@ (8008354 <HAL_TIM_ConfigClockSource+0x1e8>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	f000 80a1 	beq.w	8008316 <HAL_TIM_ConfigClockSource+0x1aa>
 80081d4:	4a5f      	ldr	r2, [pc, #380]	@ (8008354 <HAL_TIM_ConfigClockSource+0x1e8>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	f200 80a6 	bhi.w	8008328 <HAL_TIM_ConfigClockSource+0x1bc>
 80081dc:	4a5e      	ldr	r2, [pc, #376]	@ (8008358 <HAL_TIM_ConfigClockSource+0x1ec>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	f000 8099 	beq.w	8008316 <HAL_TIM_ConfigClockSource+0x1aa>
 80081e4:	4a5c      	ldr	r2, [pc, #368]	@ (8008358 <HAL_TIM_ConfigClockSource+0x1ec>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	f200 809e 	bhi.w	8008328 <HAL_TIM_ConfigClockSource+0x1bc>
 80081ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081f0:	f000 8091 	beq.w	8008316 <HAL_TIM_ConfigClockSource+0x1aa>
 80081f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081f8:	f200 8096 	bhi.w	8008328 <HAL_TIM_ConfigClockSource+0x1bc>
 80081fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008200:	f000 8089 	beq.w	8008316 <HAL_TIM_ConfigClockSource+0x1aa>
 8008204:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008208:	f200 808e 	bhi.w	8008328 <HAL_TIM_ConfigClockSource+0x1bc>
 800820c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008210:	d03e      	beq.n	8008290 <HAL_TIM_ConfigClockSource+0x124>
 8008212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008216:	f200 8087 	bhi.w	8008328 <HAL_TIM_ConfigClockSource+0x1bc>
 800821a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800821e:	f000 8086 	beq.w	800832e <HAL_TIM_ConfigClockSource+0x1c2>
 8008222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008226:	d87f      	bhi.n	8008328 <HAL_TIM_ConfigClockSource+0x1bc>
 8008228:	2b70      	cmp	r3, #112	@ 0x70
 800822a:	d01a      	beq.n	8008262 <HAL_TIM_ConfigClockSource+0xf6>
 800822c:	2b70      	cmp	r3, #112	@ 0x70
 800822e:	d87b      	bhi.n	8008328 <HAL_TIM_ConfigClockSource+0x1bc>
 8008230:	2b60      	cmp	r3, #96	@ 0x60
 8008232:	d050      	beq.n	80082d6 <HAL_TIM_ConfigClockSource+0x16a>
 8008234:	2b60      	cmp	r3, #96	@ 0x60
 8008236:	d877      	bhi.n	8008328 <HAL_TIM_ConfigClockSource+0x1bc>
 8008238:	2b50      	cmp	r3, #80	@ 0x50
 800823a:	d03c      	beq.n	80082b6 <HAL_TIM_ConfigClockSource+0x14a>
 800823c:	2b50      	cmp	r3, #80	@ 0x50
 800823e:	d873      	bhi.n	8008328 <HAL_TIM_ConfigClockSource+0x1bc>
 8008240:	2b40      	cmp	r3, #64	@ 0x40
 8008242:	d058      	beq.n	80082f6 <HAL_TIM_ConfigClockSource+0x18a>
 8008244:	2b40      	cmp	r3, #64	@ 0x40
 8008246:	d86f      	bhi.n	8008328 <HAL_TIM_ConfigClockSource+0x1bc>
 8008248:	2b30      	cmp	r3, #48	@ 0x30
 800824a:	d064      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x1aa>
 800824c:	2b30      	cmp	r3, #48	@ 0x30
 800824e:	d86b      	bhi.n	8008328 <HAL_TIM_ConfigClockSource+0x1bc>
 8008250:	2b20      	cmp	r3, #32
 8008252:	d060      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x1aa>
 8008254:	2b20      	cmp	r3, #32
 8008256:	d867      	bhi.n	8008328 <HAL_TIM_ConfigClockSource+0x1bc>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d05c      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x1aa>
 800825c:	2b10      	cmp	r3, #16
 800825e:	d05a      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x1aa>
 8008260:	e062      	b.n	8008328 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008272:	f000 f9cb 	bl	800860c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	609a      	str	r2, [r3, #8]
      break;
 800828e:	e04f      	b.n	8008330 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80082a0:	f000 f9b4 	bl	800860c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	689a      	ldr	r2, [r3, #8]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082b2:	609a      	str	r2, [r3, #8]
      break;
 80082b4:	e03c      	b.n	8008330 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082c2:	461a      	mov	r2, r3
 80082c4:	f000 f924 	bl	8008510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2150      	movs	r1, #80	@ 0x50
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 f97e 	bl	80085d0 <TIM_ITRx_SetConfig>
      break;
 80082d4:	e02c      	b.n	8008330 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082e2:	461a      	mov	r2, r3
 80082e4:	f000 f943 	bl	800856e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2160      	movs	r1, #96	@ 0x60
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 f96e 	bl	80085d0 <TIM_ITRx_SetConfig>
      break;
 80082f4:	e01c      	b.n	8008330 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008302:	461a      	mov	r2, r3
 8008304:	f000 f904 	bl	8008510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2140      	movs	r1, #64	@ 0x40
 800830e:	4618      	mov	r0, r3
 8008310:	f000 f95e 	bl	80085d0 <TIM_ITRx_SetConfig>
      break;
 8008314:	e00c      	b.n	8008330 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4619      	mov	r1, r3
 8008320:	4610      	mov	r0, r2
 8008322:	f000 f955 	bl	80085d0 <TIM_ITRx_SetConfig>
      break;
 8008326:	e003      	b.n	8008330 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	73fb      	strb	r3, [r7, #15]
      break;
 800832c:	e000      	b.n	8008330 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800832e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008340:	7bfb      	ldrb	r3, [r7, #15]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	ffceff88 	.word	0xffceff88
 8008350:	00100040 	.word	0x00100040
 8008354:	00100030 	.word	0x00100030
 8008358:	00100020 	.word	0x00100020

0800835c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a4a      	ldr	r2, [pc, #296]	@ (80084e8 <TIM_Base_SetConfig+0x13c>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d013      	beq.n	80083ec <TIM_Base_SetConfig+0x40>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ca:	d00f      	beq.n	80083ec <TIM_Base_SetConfig+0x40>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a47      	ldr	r2, [pc, #284]	@ (80084ec <TIM_Base_SetConfig+0x140>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d00b      	beq.n	80083ec <TIM_Base_SetConfig+0x40>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a46      	ldr	r2, [pc, #280]	@ (80084f0 <TIM_Base_SetConfig+0x144>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d007      	beq.n	80083ec <TIM_Base_SetConfig+0x40>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a45      	ldr	r2, [pc, #276]	@ (80084f4 <TIM_Base_SetConfig+0x148>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d003      	beq.n	80083ec <TIM_Base_SetConfig+0x40>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a44      	ldr	r2, [pc, #272]	@ (80084f8 <TIM_Base_SetConfig+0x14c>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d108      	bne.n	80083fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a39      	ldr	r2, [pc, #228]	@ (80084e8 <TIM_Base_SetConfig+0x13c>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d027      	beq.n	8008456 <TIM_Base_SetConfig+0xaa>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800840c:	d023      	beq.n	8008456 <TIM_Base_SetConfig+0xaa>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a36      	ldr	r2, [pc, #216]	@ (80084ec <TIM_Base_SetConfig+0x140>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d01f      	beq.n	8008456 <TIM_Base_SetConfig+0xaa>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a35      	ldr	r2, [pc, #212]	@ (80084f0 <TIM_Base_SetConfig+0x144>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d01b      	beq.n	8008456 <TIM_Base_SetConfig+0xaa>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a34      	ldr	r2, [pc, #208]	@ (80084f4 <TIM_Base_SetConfig+0x148>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d017      	beq.n	8008456 <TIM_Base_SetConfig+0xaa>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a33      	ldr	r2, [pc, #204]	@ (80084f8 <TIM_Base_SetConfig+0x14c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d013      	beq.n	8008456 <TIM_Base_SetConfig+0xaa>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a32      	ldr	r2, [pc, #200]	@ (80084fc <TIM_Base_SetConfig+0x150>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d00f      	beq.n	8008456 <TIM_Base_SetConfig+0xaa>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a31      	ldr	r2, [pc, #196]	@ (8008500 <TIM_Base_SetConfig+0x154>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00b      	beq.n	8008456 <TIM_Base_SetConfig+0xaa>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a30      	ldr	r2, [pc, #192]	@ (8008504 <TIM_Base_SetConfig+0x158>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d007      	beq.n	8008456 <TIM_Base_SetConfig+0xaa>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a2f      	ldr	r2, [pc, #188]	@ (8008508 <TIM_Base_SetConfig+0x15c>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d003      	beq.n	8008456 <TIM_Base_SetConfig+0xaa>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a2e      	ldr	r2, [pc, #184]	@ (800850c <TIM_Base_SetConfig+0x160>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d108      	bne.n	8008468 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800845c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4313      	orrs	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a16      	ldr	r2, [pc, #88]	@ (80084e8 <TIM_Base_SetConfig+0x13c>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d00f      	beq.n	80084b4 <TIM_Base_SetConfig+0x108>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a18      	ldr	r2, [pc, #96]	@ (80084f8 <TIM_Base_SetConfig+0x14c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d00b      	beq.n	80084b4 <TIM_Base_SetConfig+0x108>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a17      	ldr	r2, [pc, #92]	@ (80084fc <TIM_Base_SetConfig+0x150>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d007      	beq.n	80084b4 <TIM_Base_SetConfig+0x108>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a16      	ldr	r2, [pc, #88]	@ (8008500 <TIM_Base_SetConfig+0x154>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d003      	beq.n	80084b4 <TIM_Base_SetConfig+0x108>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a15      	ldr	r2, [pc, #84]	@ (8008504 <TIM_Base_SetConfig+0x158>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d103      	bne.n	80084bc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	691a      	ldr	r2, [r3, #16]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d105      	bne.n	80084da <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	f023 0201 	bic.w	r2, r3, #1
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	611a      	str	r2, [r3, #16]
  }
}
 80084da:	bf00      	nop
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	40010000 	.word	0x40010000
 80084ec:	40000400 	.word	0x40000400
 80084f0:	40000800 	.word	0x40000800
 80084f4:	40000c00 	.word	0x40000c00
 80084f8:	40010400 	.word	0x40010400
 80084fc:	40014000 	.word	0x40014000
 8008500:	40014400 	.word	0x40014400
 8008504:	40014800 	.word	0x40014800
 8008508:	4000e000 	.word	0x4000e000
 800850c:	4000e400 	.word	0x4000e400

08008510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	f023 0201 	bic.w	r2, r3, #1
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800853a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	011b      	lsls	r3, r3, #4
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	4313      	orrs	r3, r2
 8008544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f023 030a 	bic.w	r3, r3, #10
 800854c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	4313      	orrs	r3, r2
 8008554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	621a      	str	r2, [r3, #32]
}
 8008562:	bf00      	nop
 8008564:	371c      	adds	r7, #28
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800856e:	b480      	push	{r7}
 8008570:	b087      	sub	sp, #28
 8008572:	af00      	add	r7, sp, #0
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6a1b      	ldr	r3, [r3, #32]
 8008584:	f023 0210 	bic.w	r2, r3, #16
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	031b      	lsls	r3, r3, #12
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80085aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	621a      	str	r2, [r3, #32]
}
 80085c2:	bf00      	nop
 80085c4:	371c      	adds	r7, #28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
	...

080085d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	4b09      	ldr	r3, [pc, #36]	@ (8008608 <TIM_ITRx_SetConfig+0x38>)
 80085e4:	4013      	ands	r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	f043 0307 	orr.w	r3, r3, #7
 80085f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	609a      	str	r2, [r3, #8]
}
 80085fa:	bf00      	nop
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	ffcfff8f 	.word	0xffcfff8f

0800860c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	021a      	lsls	r2, r3, #8
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	431a      	orrs	r2, r3
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	4313      	orrs	r3, r2
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	4313      	orrs	r3, r2
 8008638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	697a      	ldr	r2, [r7, #20]
 800863e:	609a      	str	r2, [r3, #8]
}
 8008640:	bf00      	nop
 8008642:	371c      	adds	r7, #28
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800865c:	2b01      	cmp	r3, #1
 800865e:	d101      	bne.n	8008664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008660:	2302      	movs	r3, #2
 8008662:	e077      	b.n	8008754 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2202      	movs	r2, #2
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a35      	ldr	r2, [pc, #212]	@ (8008760 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d004      	beq.n	8008698 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a34      	ldr	r2, [pc, #208]	@ (8008764 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d108      	bne.n	80086aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800869e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a25      	ldr	r2, [pc, #148]	@ (8008760 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d02c      	beq.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d6:	d027      	beq.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a22      	ldr	r2, [pc, #136]	@ (8008768 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d022      	beq.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a21      	ldr	r2, [pc, #132]	@ (800876c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d01d      	beq.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008770 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d018      	beq.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a1a      	ldr	r2, [pc, #104]	@ (8008764 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d013      	beq.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a1b      	ldr	r2, [pc, #108]	@ (8008774 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00e      	beq.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a1a      	ldr	r2, [pc, #104]	@ (8008778 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d009      	beq.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a18      	ldr	r2, [pc, #96]	@ (800877c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d004      	beq.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a17      	ldr	r2, [pc, #92]	@ (8008780 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d10c      	bne.n	8008742 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800872e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	4313      	orrs	r3, r2
 8008738:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	40010000 	.word	0x40010000
 8008764:	40010400 	.word	0x40010400
 8008768:	40000400 	.word	0x40000400
 800876c:	40000800 	.word	0x40000800
 8008770:	40000c00 	.word	0x40000c00
 8008774:	40001800 	.word	0x40001800
 8008778:	40014000 	.word	0x40014000
 800877c:	4000e000 	.word	0x4000e000
 8008780:	4000e400 	.word	0x4000e400

08008784 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e042      	b.n	8008858 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d106      	bne.n	80087ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7f9 fe51 	bl	800248c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2224      	movs	r2, #36	@ 0x24
 80087ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f022 0201 	bic.w	r2, r2, #1
 8008800:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008806:	2b00      	cmp	r3, #0
 8008808:	d002      	beq.n	8008810 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 fc10 	bl	800a030 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fda1 	bl	8009358 <UART_SetConfig>
 8008816:	4603      	mov	r3, r0
 8008818:	2b01      	cmp	r3, #1
 800881a:	d101      	bne.n	8008820 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e01b      	b.n	8008858 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800882e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689a      	ldr	r2, [r3, #8]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800883e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f042 0201 	orr.w	r2, r2, #1
 800884e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 fc8f 	bl	800a174 <UART_CheckIdleState>
 8008856:	4603      	mov	r3, r0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08a      	sub	sp, #40	@ 0x28
 8008864:	af02      	add	r7, sp, #8
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	603b      	str	r3, [r7, #0]
 800886c:	4613      	mov	r3, r2
 800886e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008876:	2b20      	cmp	r3, #32
 8008878:	d17b      	bne.n	8008972 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d002      	beq.n	8008886 <HAL_UART_Transmit+0x26>
 8008880:	88fb      	ldrh	r3, [r7, #6]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e074      	b.n	8008974 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2221      	movs	r2, #33	@ 0x21
 8008896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800889a:	f7fa fa43 	bl	8002d24 <HAL_GetTick>
 800889e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	88fa      	ldrh	r2, [r7, #6]
 80088a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	88fa      	ldrh	r2, [r7, #6]
 80088ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088b8:	d108      	bne.n	80088cc <HAL_UART_Transmit+0x6c>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d104      	bne.n	80088cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	61bb      	str	r3, [r7, #24]
 80088ca:	e003      	b.n	80088d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088d4:	e030      	b.n	8008938 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2200      	movs	r2, #0
 80088de:	2180      	movs	r1, #128	@ 0x80
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f001 fcf1 	bl	800a2c8 <UART_WaitOnFlagUntilTimeout>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d005      	beq.n	80088f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2220      	movs	r2, #32
 80088f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e03d      	b.n	8008974 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10b      	bne.n	8008916 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	881b      	ldrh	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800890c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	3302      	adds	r3, #2
 8008912:	61bb      	str	r3, [r7, #24]
 8008914:	e007      	b.n	8008926 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	781a      	ldrb	r2, [r3, #0]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	3301      	adds	r3, #1
 8008924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800892c:	b29b      	uxth	r3, r3
 800892e:	3b01      	subs	r3, #1
 8008930:	b29a      	uxth	r2, r3
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800893e:	b29b      	uxth	r3, r3
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1c8      	bne.n	80088d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2200      	movs	r2, #0
 800894c:	2140      	movs	r1, #64	@ 0x40
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f001 fcba 	bl	800a2c8 <UART_WaitOnFlagUntilTimeout>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d005      	beq.n	8008966 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2220      	movs	r2, #32
 800895e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e006      	b.n	8008974 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2220      	movs	r2, #32
 800896a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	e000      	b.n	8008974 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008972:	2302      	movs	r3, #2
  }
}
 8008974:	4618      	mov	r0, r3
 8008976:	3720      	adds	r7, #32
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08a      	sub	sp, #40	@ 0x28
 8008980:	af02      	add	r7, sp, #8
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	603b      	str	r3, [r7, #0]
 8008988:	4613      	mov	r3, r2
 800898a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008992:	2b20      	cmp	r3, #32
 8008994:	f040 80b5 	bne.w	8008b02 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <HAL_UART_Receive+0x28>
 800899e:	88fb      	ldrh	r3, [r7, #6]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d101      	bne.n	80089a8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e0ad      	b.n	8008b04 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2222      	movs	r2, #34	@ 0x22
 80089b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089be:	f7fa f9b1 	bl	8002d24 <HAL_GetTick>
 80089c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	88fa      	ldrh	r2, [r7, #6]
 80089c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	88fa      	ldrh	r2, [r7, #6]
 80089d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089dc:	d10e      	bne.n	80089fc <HAL_UART_Receive+0x80>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d105      	bne.n	80089f2 <HAL_UART_Receive+0x76>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80089ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80089f0:	e02d      	b.n	8008a4e <HAL_UART_Receive+0xd2>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	22ff      	movs	r2, #255	@ 0xff
 80089f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80089fa:	e028      	b.n	8008a4e <HAL_UART_Receive+0xd2>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10d      	bne.n	8008a20 <HAL_UART_Receive+0xa4>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d104      	bne.n	8008a16 <HAL_UART_Receive+0x9a>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	22ff      	movs	r2, #255	@ 0xff
 8008a10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a14:	e01b      	b.n	8008a4e <HAL_UART_Receive+0xd2>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	227f      	movs	r2, #127	@ 0x7f
 8008a1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a1e:	e016      	b.n	8008a4e <HAL_UART_Receive+0xd2>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a28:	d10d      	bne.n	8008a46 <HAL_UART_Receive+0xca>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d104      	bne.n	8008a3c <HAL_UART_Receive+0xc0>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	227f      	movs	r2, #127	@ 0x7f
 8008a36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a3a:	e008      	b.n	8008a4e <HAL_UART_Receive+0xd2>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	223f      	movs	r2, #63	@ 0x3f
 8008a40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a44:	e003      	b.n	8008a4e <HAL_UART_Receive+0xd2>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a54:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a5e:	d108      	bne.n	8008a72 <HAL_UART_Receive+0xf6>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d104      	bne.n	8008a72 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	61bb      	str	r3, [r7, #24]
 8008a70:	e003      	b.n	8008a7a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008a7a:	e036      	b.n	8008aea <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	2200      	movs	r2, #0
 8008a84:	2120      	movs	r1, #32
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f001 fc1e 	bl	800a2c8 <UART_WaitOnFlagUntilTimeout>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d005      	beq.n	8008a9e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e032      	b.n	8008b04 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10c      	bne.n	8008abe <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	8a7b      	ldrh	r3, [r7, #18]
 8008aae:	4013      	ands	r3, r2
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	3302      	adds	r3, #2
 8008aba:	61bb      	str	r3, [r7, #24]
 8008abc:	e00c      	b.n	8008ad8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	8a7b      	ldrh	r3, [r7, #18]
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	4013      	ands	r3, r2
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1c2      	bne.n	8008a7c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2220      	movs	r2, #32
 8008afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	e000      	b.n	8008b04 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008b02:	2302      	movs	r3, #2
  }
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3720      	adds	r7, #32
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b08a      	sub	sp, #40	@ 0x28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	4613      	mov	r3, r2
 8008b18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b20:	2b20      	cmp	r3, #32
 8008b22:	d137      	bne.n	8008b94 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <HAL_UART_Receive_IT+0x24>
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e030      	b.n	8008b96 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a18      	ldr	r2, [pc, #96]	@ (8008ba0 <HAL_UART_Receive_IT+0x94>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d01f      	beq.n	8008b84 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d018      	beq.n	8008b84 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	e853 3f00 	ldrex	r3, [r3]
 8008b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b70:	623b      	str	r3, [r7, #32]
 8008b72:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b74:	69f9      	ldr	r1, [r7, #28]
 8008b76:	6a3a      	ldr	r2, [r7, #32]
 8008b78:	e841 2300 	strex	r3, r2, [r1]
 8008b7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e6      	bne.n	8008b52 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b84:	88fb      	ldrh	r3, [r7, #6]
 8008b86:	461a      	mov	r2, r3
 8008b88:	68b9      	ldr	r1, [r7, #8]
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f001 fc0a 	bl	800a3a4 <UART_Start_Receive_IT>
 8008b90:	4603      	mov	r3, r0
 8008b92:	e000      	b.n	8008b96 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b94:	2302      	movs	r3, #2
  }
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3728      	adds	r7, #40	@ 0x28
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	58000c00 	.word	0x58000c00

08008ba4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b0ba      	sub	sp, #232	@ 0xe8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008bce:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d11b      	bne.n	8008c18 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008be4:	f003 0320 	and.w	r3, r3, #32
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d015      	beq.n	8008c18 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bf0:	f003 0320 	and.w	r3, r3, #32
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d105      	bne.n	8008c04 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d009      	beq.n	8008c18 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 8377 	beq.w	80092fc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	4798      	blx	r3
      }
      return;
 8008c16:	e371      	b.n	80092fc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 8123 	beq.w	8008e68 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008c26:	4b8d      	ldr	r3, [pc, #564]	@ (8008e5c <HAL_UART_IRQHandler+0x2b8>)
 8008c28:	4013      	ands	r3, r2
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d106      	bne.n	8008c3c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008c32:	4b8b      	ldr	r3, [pc, #556]	@ (8008e60 <HAL_UART_IRQHandler+0x2bc>)
 8008c34:	4013      	ands	r3, r2
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f000 8116 	beq.w	8008e68 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d011      	beq.n	8008c6c <HAL_UART_IRQHandler+0xc8>
 8008c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00b      	beq.n	8008c6c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c62:	f043 0201 	orr.w	r2, r3, #1
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c70:	f003 0302 	and.w	r3, r3, #2
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d011      	beq.n	8008c9c <HAL_UART_IRQHandler+0xf8>
 8008c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00b      	beq.n	8008c9c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2202      	movs	r2, #2
 8008c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c92:	f043 0204 	orr.w	r2, r3, #4
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ca0:	f003 0304 	and.w	r3, r3, #4
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d011      	beq.n	8008ccc <HAL_UART_IRQHandler+0x128>
 8008ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00b      	beq.n	8008ccc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2204      	movs	r2, #4
 8008cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cc2:	f043 0202 	orr.w	r2, r3, #2
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd0:	f003 0308 	and.w	r3, r3, #8
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d017      	beq.n	8008d08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cdc:	f003 0320 	and.w	r3, r3, #32
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d105      	bne.n	8008cf0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008ce4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ce8:	4b5c      	ldr	r3, [pc, #368]	@ (8008e5c <HAL_UART_IRQHandler+0x2b8>)
 8008cea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00b      	beq.n	8008d08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2208      	movs	r2, #8
 8008cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cfe:	f043 0208 	orr.w	r2, r3, #8
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d012      	beq.n	8008d3a <HAL_UART_IRQHandler+0x196>
 8008d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00c      	beq.n	8008d3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d30:	f043 0220 	orr.w	r2, r3, #32
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 82dd 	beq.w	8009300 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d4a:	f003 0320 	and.w	r3, r3, #32
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d013      	beq.n	8008d7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d56:	f003 0320 	and.w	r3, r3, #32
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d105      	bne.n	8008d6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d007      	beq.n	8008d7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d8e:	2b40      	cmp	r3, #64	@ 0x40
 8008d90:	d005      	beq.n	8008d9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d054      	beq.n	8008e48 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 fc22 	bl	800a5e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dae:	2b40      	cmp	r3, #64	@ 0x40
 8008db0:	d146      	bne.n	8008e40 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3308      	adds	r3, #8
 8008db8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008dc0:	e853 3f00 	ldrex	r3, [r3]
 8008dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008dcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3308      	adds	r3, #8
 8008dda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008dde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008de2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008dea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008dee:	e841 2300 	strex	r3, r2, [r1]
 8008df2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1d9      	bne.n	8008db2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d017      	beq.n	8008e38 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e0e:	4a15      	ldr	r2, [pc, #84]	@ (8008e64 <HAL_UART_IRQHandler+0x2c0>)
 8008e10:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fa fc59 	bl	80036d0 <HAL_DMA_Abort_IT>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d019      	beq.n	8008e58 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008e32:	4610      	mov	r0, r2
 8008e34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e36:	e00f      	b.n	8008e58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fa77 	bl	800932c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e3e:	e00b      	b.n	8008e58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fa73 	bl	800932c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e46:	e007      	b.n	8008e58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fa6f 	bl	800932c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008e56:	e253      	b.n	8009300 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e58:	bf00      	nop
    return;
 8008e5a:	e251      	b.n	8009300 <HAL_UART_IRQHandler+0x75c>
 8008e5c:	10000001 	.word	0x10000001
 8008e60:	04000120 	.word	0x04000120
 8008e64:	0800a6b5 	.word	0x0800a6b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	f040 81e7 	bne.w	8009240 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e76:	f003 0310 	and.w	r3, r3, #16
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 81e0 	beq.w	8009240 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e84:	f003 0310 	and.w	r3, r3, #16
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 81d9 	beq.w	8009240 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2210      	movs	r2, #16
 8008e94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea0:	2b40      	cmp	r3, #64	@ 0x40
 8008ea2:	f040 8151 	bne.w	8009148 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a96      	ldr	r2, [pc, #600]	@ (8009108 <HAL_UART_IRQHandler+0x564>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d068      	beq.n	8008f86 <HAL_UART_IRQHandler+0x3e2>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a93      	ldr	r2, [pc, #588]	@ (800910c <HAL_UART_IRQHandler+0x568>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d061      	beq.n	8008f86 <HAL_UART_IRQHandler+0x3e2>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a91      	ldr	r2, [pc, #580]	@ (8009110 <HAL_UART_IRQHandler+0x56c>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d05a      	beq.n	8008f86 <HAL_UART_IRQHandler+0x3e2>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a8e      	ldr	r2, [pc, #568]	@ (8009114 <HAL_UART_IRQHandler+0x570>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d053      	beq.n	8008f86 <HAL_UART_IRQHandler+0x3e2>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a8c      	ldr	r2, [pc, #560]	@ (8009118 <HAL_UART_IRQHandler+0x574>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d04c      	beq.n	8008f86 <HAL_UART_IRQHandler+0x3e2>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a89      	ldr	r2, [pc, #548]	@ (800911c <HAL_UART_IRQHandler+0x578>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d045      	beq.n	8008f86 <HAL_UART_IRQHandler+0x3e2>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a87      	ldr	r2, [pc, #540]	@ (8009120 <HAL_UART_IRQHandler+0x57c>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d03e      	beq.n	8008f86 <HAL_UART_IRQHandler+0x3e2>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a84      	ldr	r2, [pc, #528]	@ (8009124 <HAL_UART_IRQHandler+0x580>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d037      	beq.n	8008f86 <HAL_UART_IRQHandler+0x3e2>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a82      	ldr	r2, [pc, #520]	@ (8009128 <HAL_UART_IRQHandler+0x584>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d030      	beq.n	8008f86 <HAL_UART_IRQHandler+0x3e2>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a7f      	ldr	r2, [pc, #508]	@ (800912c <HAL_UART_IRQHandler+0x588>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d029      	beq.n	8008f86 <HAL_UART_IRQHandler+0x3e2>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a7d      	ldr	r2, [pc, #500]	@ (8009130 <HAL_UART_IRQHandler+0x58c>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d022      	beq.n	8008f86 <HAL_UART_IRQHandler+0x3e2>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a7a      	ldr	r2, [pc, #488]	@ (8009134 <HAL_UART_IRQHandler+0x590>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d01b      	beq.n	8008f86 <HAL_UART_IRQHandler+0x3e2>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a78      	ldr	r2, [pc, #480]	@ (8009138 <HAL_UART_IRQHandler+0x594>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d014      	beq.n	8008f86 <HAL_UART_IRQHandler+0x3e2>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a75      	ldr	r2, [pc, #468]	@ (800913c <HAL_UART_IRQHandler+0x598>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d00d      	beq.n	8008f86 <HAL_UART_IRQHandler+0x3e2>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a73      	ldr	r2, [pc, #460]	@ (8009140 <HAL_UART_IRQHandler+0x59c>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d006      	beq.n	8008f86 <HAL_UART_IRQHandler+0x3e2>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a70      	ldr	r2, [pc, #448]	@ (8009144 <HAL_UART_IRQHandler+0x5a0>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d106      	bne.n	8008f94 <HAL_UART_IRQHandler+0x3f0>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	e005      	b.n	8008fa0 <HAL_UART_IRQHandler+0x3fc>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fa4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 81ab 	beq.w	8009304 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	f080 81a3 	bcs.w	8009304 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fd4:	f000 8087 	beq.w	80090e6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008fe4:	e853 3f00 	ldrex	r3, [r3]
 8008fe8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008fec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ff0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009002:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009006:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800900e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009012:	e841 2300 	strex	r3, r2, [r1]
 8009016:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800901a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1da      	bne.n	8008fd8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3308      	adds	r3, #8
 8009028:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800902c:	e853 3f00 	ldrex	r3, [r3]
 8009030:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009032:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009034:	f023 0301 	bic.w	r3, r3, #1
 8009038:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3308      	adds	r3, #8
 8009042:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009046:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800904a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800904e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009052:	e841 2300 	strex	r3, r2, [r1]
 8009056:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009058:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e1      	bne.n	8009022 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3308      	adds	r3, #8
 8009064:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009068:	e853 3f00 	ldrex	r3, [r3]
 800906c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800906e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009074:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3308      	adds	r3, #8
 800907e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009082:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009084:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009088:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e3      	bne.n	800905e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2220      	movs	r2, #32
 800909a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090b4:	f023 0310 	bic.w	r3, r3, #16
 80090b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	461a      	mov	r2, r3
 80090c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090ce:	e841 2300 	strex	r3, r2, [r1]
 80090d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1e4      	bne.n	80090a4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7f9 ffd7 	bl	8003094 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2202      	movs	r2, #2
 80090ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f91d 	bl	8009340 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009106:	e0fd      	b.n	8009304 <HAL_UART_IRQHandler+0x760>
 8009108:	40020010 	.word	0x40020010
 800910c:	40020028 	.word	0x40020028
 8009110:	40020040 	.word	0x40020040
 8009114:	40020058 	.word	0x40020058
 8009118:	40020070 	.word	0x40020070
 800911c:	40020088 	.word	0x40020088
 8009120:	400200a0 	.word	0x400200a0
 8009124:	400200b8 	.word	0x400200b8
 8009128:	40020410 	.word	0x40020410
 800912c:	40020428 	.word	0x40020428
 8009130:	40020440 	.word	0x40020440
 8009134:	40020458 	.word	0x40020458
 8009138:	40020470 	.word	0x40020470
 800913c:	40020488 	.word	0x40020488
 8009140:	400204a0 	.word	0x400204a0
 8009144:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009154:	b29b      	uxth	r3, r3
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009162:	b29b      	uxth	r3, r3
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 80cf 	beq.w	8009308 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800916a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800916e:	2b00      	cmp	r3, #0
 8009170:	f000 80ca 	beq.w	8009308 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917c:	e853 3f00 	ldrex	r3, [r3]
 8009180:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009184:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009188:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	461a      	mov	r2, r3
 8009192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009196:	647b      	str	r3, [r7, #68]	@ 0x44
 8009198:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800919c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800919e:	e841 2300 	strex	r3, r2, [r1]
 80091a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1e4      	bne.n	8009174 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3308      	adds	r3, #8
 80091b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b4:	e853 3f00 	ldrex	r3, [r3]
 80091b8:	623b      	str	r3, [r7, #32]
   return(result);
 80091ba:	6a3a      	ldr	r2, [r7, #32]
 80091bc:	4b55      	ldr	r3, [pc, #340]	@ (8009314 <HAL_UART_IRQHandler+0x770>)
 80091be:	4013      	ands	r3, r2
 80091c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3308      	adds	r3, #8
 80091ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80091d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091d6:	e841 2300 	strex	r3, r2, [r1]
 80091da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1e3      	bne.n	80091aa <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2220      	movs	r2, #32
 80091e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	e853 3f00 	ldrex	r3, [r3]
 8009202:	60fb      	str	r3, [r7, #12]
   return(result);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f023 0310 	bic.w	r3, r3, #16
 800920a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009218:	61fb      	str	r3, [r7, #28]
 800921a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921c:	69b9      	ldr	r1, [r7, #24]
 800921e:	69fa      	ldr	r2, [r7, #28]
 8009220:	e841 2300 	strex	r3, r2, [r1]
 8009224:	617b      	str	r3, [r7, #20]
   return(result);
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1e4      	bne.n	80091f6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2202      	movs	r2, #2
 8009230:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009232:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f881 	bl	8009340 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800923e:	e063      	b.n	8009308 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009244:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00e      	beq.n	800926a <HAL_UART_IRQHandler+0x6c6>
 800924c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009250:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d008      	beq.n	800926a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009260:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f001 ff84 	bl	800b170 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009268:	e051      	b.n	800930e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800926a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800926e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009272:	2b00      	cmp	r3, #0
 8009274:	d014      	beq.n	80092a0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800927a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800927e:	2b00      	cmp	r3, #0
 8009280:	d105      	bne.n	800928e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009286:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d008      	beq.n	80092a0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009292:	2b00      	cmp	r3, #0
 8009294:	d03a      	beq.n	800930c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	4798      	blx	r3
    }
    return;
 800929e:	e035      	b.n	800930c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80092a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d009      	beq.n	80092c0 <HAL_UART_IRQHandler+0x71c>
 80092ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f001 fa11 	bl	800a6e0 <UART_EndTransmit_IT>
    return;
 80092be:	e026      	b.n	800930e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80092c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d009      	beq.n	80092e0 <HAL_UART_IRQHandler+0x73c>
 80092cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d003      	beq.n	80092e0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 ff5d 	bl	800b198 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092de:	e016      	b.n	800930e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80092e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d010      	beq.n	800930e <HAL_UART_IRQHandler+0x76a>
 80092ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	da0c      	bge.n	800930e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 ff45 	bl	800b184 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092fa:	e008      	b.n	800930e <HAL_UART_IRQHandler+0x76a>
      return;
 80092fc:	bf00      	nop
 80092fe:	e006      	b.n	800930e <HAL_UART_IRQHandler+0x76a>
    return;
 8009300:	bf00      	nop
 8009302:	e004      	b.n	800930e <HAL_UART_IRQHandler+0x76a>
      return;
 8009304:	bf00      	nop
 8009306:	e002      	b.n	800930e <HAL_UART_IRQHandler+0x76a>
      return;
 8009308:	bf00      	nop
 800930a:	e000      	b.n	800930e <HAL_UART_IRQHandler+0x76a>
    return;
 800930c:	bf00      	nop
  }
}
 800930e:	37e8      	adds	r7, #232	@ 0xe8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	effffffe 	.word	0xeffffffe

08009318 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800935c:	b092      	sub	sp, #72	@ 0x48
 800935e:	af00      	add	r7, sp, #0
 8009360:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	689a      	ldr	r2, [r3, #8]
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	431a      	orrs	r2, r3
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	431a      	orrs	r2, r3
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	69db      	ldr	r3, [r3, #28]
 800937c:	4313      	orrs	r3, r2
 800937e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	4bbe      	ldr	r3, [pc, #760]	@ (8009680 <UART_SetConfig+0x328>)
 8009388:	4013      	ands	r3, r2
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	6812      	ldr	r2, [r2, #0]
 800938e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009390:	430b      	orrs	r3, r1
 8009392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	68da      	ldr	r2, [r3, #12]
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4ab3      	ldr	r2, [pc, #716]	@ (8009684 <UART_SetConfig+0x32c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d004      	beq.n	80093c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093c0:	4313      	orrs	r3, r2
 80093c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689a      	ldr	r2, [r3, #8]
 80093ca:	4baf      	ldr	r3, [pc, #700]	@ (8009688 <UART_SetConfig+0x330>)
 80093cc:	4013      	ands	r3, r2
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	6812      	ldr	r2, [r2, #0]
 80093d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80093d4:	430b      	orrs	r3, r1
 80093d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093de:	f023 010f 	bic.w	r1, r3, #15
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4aa6      	ldr	r2, [pc, #664]	@ (800968c <UART_SetConfig+0x334>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d177      	bne.n	80094e8 <UART_SetConfig+0x190>
 80093f8:	4ba5      	ldr	r3, [pc, #660]	@ (8009690 <UART_SetConfig+0x338>)
 80093fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009400:	2b28      	cmp	r3, #40	@ 0x28
 8009402:	d86d      	bhi.n	80094e0 <UART_SetConfig+0x188>
 8009404:	a201      	add	r2, pc, #4	@ (adr r2, 800940c <UART_SetConfig+0xb4>)
 8009406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940a:	bf00      	nop
 800940c:	080094b1 	.word	0x080094b1
 8009410:	080094e1 	.word	0x080094e1
 8009414:	080094e1 	.word	0x080094e1
 8009418:	080094e1 	.word	0x080094e1
 800941c:	080094e1 	.word	0x080094e1
 8009420:	080094e1 	.word	0x080094e1
 8009424:	080094e1 	.word	0x080094e1
 8009428:	080094e1 	.word	0x080094e1
 800942c:	080094b9 	.word	0x080094b9
 8009430:	080094e1 	.word	0x080094e1
 8009434:	080094e1 	.word	0x080094e1
 8009438:	080094e1 	.word	0x080094e1
 800943c:	080094e1 	.word	0x080094e1
 8009440:	080094e1 	.word	0x080094e1
 8009444:	080094e1 	.word	0x080094e1
 8009448:	080094e1 	.word	0x080094e1
 800944c:	080094c1 	.word	0x080094c1
 8009450:	080094e1 	.word	0x080094e1
 8009454:	080094e1 	.word	0x080094e1
 8009458:	080094e1 	.word	0x080094e1
 800945c:	080094e1 	.word	0x080094e1
 8009460:	080094e1 	.word	0x080094e1
 8009464:	080094e1 	.word	0x080094e1
 8009468:	080094e1 	.word	0x080094e1
 800946c:	080094c9 	.word	0x080094c9
 8009470:	080094e1 	.word	0x080094e1
 8009474:	080094e1 	.word	0x080094e1
 8009478:	080094e1 	.word	0x080094e1
 800947c:	080094e1 	.word	0x080094e1
 8009480:	080094e1 	.word	0x080094e1
 8009484:	080094e1 	.word	0x080094e1
 8009488:	080094e1 	.word	0x080094e1
 800948c:	080094d1 	.word	0x080094d1
 8009490:	080094e1 	.word	0x080094e1
 8009494:	080094e1 	.word	0x080094e1
 8009498:	080094e1 	.word	0x080094e1
 800949c:	080094e1 	.word	0x080094e1
 80094a0:	080094e1 	.word	0x080094e1
 80094a4:	080094e1 	.word	0x080094e1
 80094a8:	080094e1 	.word	0x080094e1
 80094ac:	080094d9 	.word	0x080094d9
 80094b0:	2301      	movs	r3, #1
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b6:	e326      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80094b8:	2304      	movs	r3, #4
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094be:	e322      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80094c0:	2308      	movs	r3, #8
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c6:	e31e      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80094c8:	2310      	movs	r3, #16
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ce:	e31a      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80094d0:	2320      	movs	r3, #32
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e316      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80094d8:	2340      	movs	r3, #64	@ 0x40
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094de:	e312      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80094e0:	2380      	movs	r3, #128	@ 0x80
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e30e      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a69      	ldr	r2, [pc, #420]	@ (8009694 <UART_SetConfig+0x33c>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d130      	bne.n	8009554 <UART_SetConfig+0x1fc>
 80094f2:	4b67      	ldr	r3, [pc, #412]	@ (8009690 <UART_SetConfig+0x338>)
 80094f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f6:	f003 0307 	and.w	r3, r3, #7
 80094fa:	2b05      	cmp	r3, #5
 80094fc:	d826      	bhi.n	800954c <UART_SetConfig+0x1f4>
 80094fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009504 <UART_SetConfig+0x1ac>)
 8009500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009504:	0800951d 	.word	0x0800951d
 8009508:	08009525 	.word	0x08009525
 800950c:	0800952d 	.word	0x0800952d
 8009510:	08009535 	.word	0x08009535
 8009514:	0800953d 	.word	0x0800953d
 8009518:	08009545 	.word	0x08009545
 800951c:	2300      	movs	r3, #0
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009522:	e2f0      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009524:	2304      	movs	r3, #4
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952a:	e2ec      	b.n	8009b06 <UART_SetConfig+0x7ae>
 800952c:	2308      	movs	r3, #8
 800952e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009532:	e2e8      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009534:	2310      	movs	r3, #16
 8009536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953a:	e2e4      	b.n	8009b06 <UART_SetConfig+0x7ae>
 800953c:	2320      	movs	r3, #32
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e2e0      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009544:	2340      	movs	r3, #64	@ 0x40
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954a:	e2dc      	b.n	8009b06 <UART_SetConfig+0x7ae>
 800954c:	2380      	movs	r3, #128	@ 0x80
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e2d8      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a4f      	ldr	r2, [pc, #316]	@ (8009698 <UART_SetConfig+0x340>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d130      	bne.n	80095c0 <UART_SetConfig+0x268>
 800955e:	4b4c      	ldr	r3, [pc, #304]	@ (8009690 <UART_SetConfig+0x338>)
 8009560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009562:	f003 0307 	and.w	r3, r3, #7
 8009566:	2b05      	cmp	r3, #5
 8009568:	d826      	bhi.n	80095b8 <UART_SetConfig+0x260>
 800956a:	a201      	add	r2, pc, #4	@ (adr r2, 8009570 <UART_SetConfig+0x218>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	08009589 	.word	0x08009589
 8009574:	08009591 	.word	0x08009591
 8009578:	08009599 	.word	0x08009599
 800957c:	080095a1 	.word	0x080095a1
 8009580:	080095a9 	.word	0x080095a9
 8009584:	080095b1 	.word	0x080095b1
 8009588:	2300      	movs	r3, #0
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958e:	e2ba      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009590:	2304      	movs	r3, #4
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009596:	e2b6      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009598:	2308      	movs	r3, #8
 800959a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959e:	e2b2      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80095a0:	2310      	movs	r3, #16
 80095a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a6:	e2ae      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80095a8:	2320      	movs	r3, #32
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e2aa      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80095b0:	2340      	movs	r3, #64	@ 0x40
 80095b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b6:	e2a6      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80095b8:	2380      	movs	r3, #128	@ 0x80
 80095ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095be:	e2a2      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a35      	ldr	r2, [pc, #212]	@ (800969c <UART_SetConfig+0x344>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d130      	bne.n	800962c <UART_SetConfig+0x2d4>
 80095ca:	4b31      	ldr	r3, [pc, #196]	@ (8009690 <UART_SetConfig+0x338>)
 80095cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ce:	f003 0307 	and.w	r3, r3, #7
 80095d2:	2b05      	cmp	r3, #5
 80095d4:	d826      	bhi.n	8009624 <UART_SetConfig+0x2cc>
 80095d6:	a201      	add	r2, pc, #4	@ (adr r2, 80095dc <UART_SetConfig+0x284>)
 80095d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095dc:	080095f5 	.word	0x080095f5
 80095e0:	080095fd 	.word	0x080095fd
 80095e4:	08009605 	.word	0x08009605
 80095e8:	0800960d 	.word	0x0800960d
 80095ec:	08009615 	.word	0x08009615
 80095f0:	0800961d 	.word	0x0800961d
 80095f4:	2300      	movs	r3, #0
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e284      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80095fc:	2304      	movs	r3, #4
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e280      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009604:	2308      	movs	r3, #8
 8009606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960a:	e27c      	b.n	8009b06 <UART_SetConfig+0x7ae>
 800960c:	2310      	movs	r3, #16
 800960e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009612:	e278      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009614:	2320      	movs	r3, #32
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e274      	b.n	8009b06 <UART_SetConfig+0x7ae>
 800961c:	2340      	movs	r3, #64	@ 0x40
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009622:	e270      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009624:	2380      	movs	r3, #128	@ 0x80
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962a:	e26c      	b.n	8009b06 <UART_SetConfig+0x7ae>
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a1b      	ldr	r2, [pc, #108]	@ (80096a0 <UART_SetConfig+0x348>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d142      	bne.n	80096bc <UART_SetConfig+0x364>
 8009636:	4b16      	ldr	r3, [pc, #88]	@ (8009690 <UART_SetConfig+0x338>)
 8009638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800963a:	f003 0307 	and.w	r3, r3, #7
 800963e:	2b05      	cmp	r3, #5
 8009640:	d838      	bhi.n	80096b4 <UART_SetConfig+0x35c>
 8009642:	a201      	add	r2, pc, #4	@ (adr r2, 8009648 <UART_SetConfig+0x2f0>)
 8009644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009648:	08009661 	.word	0x08009661
 800964c:	08009669 	.word	0x08009669
 8009650:	08009671 	.word	0x08009671
 8009654:	08009679 	.word	0x08009679
 8009658:	080096a5 	.word	0x080096a5
 800965c:	080096ad 	.word	0x080096ad
 8009660:	2300      	movs	r3, #0
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009666:	e24e      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009668:	2304      	movs	r3, #4
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966e:	e24a      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009670:	2308      	movs	r3, #8
 8009672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009676:	e246      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009678:	2310      	movs	r3, #16
 800967a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967e:	e242      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009680:	cfff69f3 	.word	0xcfff69f3
 8009684:	58000c00 	.word	0x58000c00
 8009688:	11fff4ff 	.word	0x11fff4ff
 800968c:	40011000 	.word	0x40011000
 8009690:	58024400 	.word	0x58024400
 8009694:	40004400 	.word	0x40004400
 8009698:	40004800 	.word	0x40004800
 800969c:	40004c00 	.word	0x40004c00
 80096a0:	40005000 	.word	0x40005000
 80096a4:	2320      	movs	r3, #32
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096aa:	e22c      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80096ac:	2340      	movs	r3, #64	@ 0x40
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b2:	e228      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80096b4:	2380      	movs	r3, #128	@ 0x80
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ba:	e224      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4ab1      	ldr	r2, [pc, #708]	@ (8009988 <UART_SetConfig+0x630>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d176      	bne.n	80097b4 <UART_SetConfig+0x45c>
 80096c6:	4bb1      	ldr	r3, [pc, #708]	@ (800998c <UART_SetConfig+0x634>)
 80096c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096ce:	2b28      	cmp	r3, #40	@ 0x28
 80096d0:	d86c      	bhi.n	80097ac <UART_SetConfig+0x454>
 80096d2:	a201      	add	r2, pc, #4	@ (adr r2, 80096d8 <UART_SetConfig+0x380>)
 80096d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d8:	0800977d 	.word	0x0800977d
 80096dc:	080097ad 	.word	0x080097ad
 80096e0:	080097ad 	.word	0x080097ad
 80096e4:	080097ad 	.word	0x080097ad
 80096e8:	080097ad 	.word	0x080097ad
 80096ec:	080097ad 	.word	0x080097ad
 80096f0:	080097ad 	.word	0x080097ad
 80096f4:	080097ad 	.word	0x080097ad
 80096f8:	08009785 	.word	0x08009785
 80096fc:	080097ad 	.word	0x080097ad
 8009700:	080097ad 	.word	0x080097ad
 8009704:	080097ad 	.word	0x080097ad
 8009708:	080097ad 	.word	0x080097ad
 800970c:	080097ad 	.word	0x080097ad
 8009710:	080097ad 	.word	0x080097ad
 8009714:	080097ad 	.word	0x080097ad
 8009718:	0800978d 	.word	0x0800978d
 800971c:	080097ad 	.word	0x080097ad
 8009720:	080097ad 	.word	0x080097ad
 8009724:	080097ad 	.word	0x080097ad
 8009728:	080097ad 	.word	0x080097ad
 800972c:	080097ad 	.word	0x080097ad
 8009730:	080097ad 	.word	0x080097ad
 8009734:	080097ad 	.word	0x080097ad
 8009738:	08009795 	.word	0x08009795
 800973c:	080097ad 	.word	0x080097ad
 8009740:	080097ad 	.word	0x080097ad
 8009744:	080097ad 	.word	0x080097ad
 8009748:	080097ad 	.word	0x080097ad
 800974c:	080097ad 	.word	0x080097ad
 8009750:	080097ad 	.word	0x080097ad
 8009754:	080097ad 	.word	0x080097ad
 8009758:	0800979d 	.word	0x0800979d
 800975c:	080097ad 	.word	0x080097ad
 8009760:	080097ad 	.word	0x080097ad
 8009764:	080097ad 	.word	0x080097ad
 8009768:	080097ad 	.word	0x080097ad
 800976c:	080097ad 	.word	0x080097ad
 8009770:	080097ad 	.word	0x080097ad
 8009774:	080097ad 	.word	0x080097ad
 8009778:	080097a5 	.word	0x080097a5
 800977c:	2301      	movs	r3, #1
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009782:	e1c0      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009784:	2304      	movs	r3, #4
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978a:	e1bc      	b.n	8009b06 <UART_SetConfig+0x7ae>
 800978c:	2308      	movs	r3, #8
 800978e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009792:	e1b8      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009794:	2310      	movs	r3, #16
 8009796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979a:	e1b4      	b.n	8009b06 <UART_SetConfig+0x7ae>
 800979c:	2320      	movs	r3, #32
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e1b0      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80097a4:	2340      	movs	r3, #64	@ 0x40
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097aa:	e1ac      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80097ac:	2380      	movs	r3, #128	@ 0x80
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b2:	e1a8      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a75      	ldr	r2, [pc, #468]	@ (8009990 <UART_SetConfig+0x638>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d130      	bne.n	8009820 <UART_SetConfig+0x4c8>
 80097be:	4b73      	ldr	r3, [pc, #460]	@ (800998c <UART_SetConfig+0x634>)
 80097c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097c2:	f003 0307 	and.w	r3, r3, #7
 80097c6:	2b05      	cmp	r3, #5
 80097c8:	d826      	bhi.n	8009818 <UART_SetConfig+0x4c0>
 80097ca:	a201      	add	r2, pc, #4	@ (adr r2, 80097d0 <UART_SetConfig+0x478>)
 80097cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d0:	080097e9 	.word	0x080097e9
 80097d4:	080097f1 	.word	0x080097f1
 80097d8:	080097f9 	.word	0x080097f9
 80097dc:	08009801 	.word	0x08009801
 80097e0:	08009809 	.word	0x08009809
 80097e4:	08009811 	.word	0x08009811
 80097e8:	2300      	movs	r3, #0
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ee:	e18a      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80097f0:	2304      	movs	r3, #4
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f6:	e186      	b.n	8009b06 <UART_SetConfig+0x7ae>
 80097f8:	2308      	movs	r3, #8
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fe:	e182      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009800:	2310      	movs	r3, #16
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009806:	e17e      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009808:	2320      	movs	r3, #32
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980e:	e17a      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009810:	2340      	movs	r3, #64	@ 0x40
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009816:	e176      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009818:	2380      	movs	r3, #128	@ 0x80
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e172      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a5b      	ldr	r2, [pc, #364]	@ (8009994 <UART_SetConfig+0x63c>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d130      	bne.n	800988c <UART_SetConfig+0x534>
 800982a:	4b58      	ldr	r3, [pc, #352]	@ (800998c <UART_SetConfig+0x634>)
 800982c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800982e:	f003 0307 	and.w	r3, r3, #7
 8009832:	2b05      	cmp	r3, #5
 8009834:	d826      	bhi.n	8009884 <UART_SetConfig+0x52c>
 8009836:	a201      	add	r2, pc, #4	@ (adr r2, 800983c <UART_SetConfig+0x4e4>)
 8009838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983c:	08009855 	.word	0x08009855
 8009840:	0800985d 	.word	0x0800985d
 8009844:	08009865 	.word	0x08009865
 8009848:	0800986d 	.word	0x0800986d
 800984c:	08009875 	.word	0x08009875
 8009850:	0800987d 	.word	0x0800987d
 8009854:	2300      	movs	r3, #0
 8009856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985a:	e154      	b.n	8009b06 <UART_SetConfig+0x7ae>
 800985c:	2304      	movs	r3, #4
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009862:	e150      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009864:	2308      	movs	r3, #8
 8009866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986a:	e14c      	b.n	8009b06 <UART_SetConfig+0x7ae>
 800986c:	2310      	movs	r3, #16
 800986e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009872:	e148      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009874:	2320      	movs	r3, #32
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987a:	e144      	b.n	8009b06 <UART_SetConfig+0x7ae>
 800987c:	2340      	movs	r3, #64	@ 0x40
 800987e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009882:	e140      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009884:	2380      	movs	r3, #128	@ 0x80
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988a:	e13c      	b.n	8009b06 <UART_SetConfig+0x7ae>
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a41      	ldr	r2, [pc, #260]	@ (8009998 <UART_SetConfig+0x640>)
 8009892:	4293      	cmp	r3, r2
 8009894:	f040 8082 	bne.w	800999c <UART_SetConfig+0x644>
 8009898:	4b3c      	ldr	r3, [pc, #240]	@ (800998c <UART_SetConfig+0x634>)
 800989a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800989c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098a0:	2b28      	cmp	r3, #40	@ 0x28
 80098a2:	d86d      	bhi.n	8009980 <UART_SetConfig+0x628>
 80098a4:	a201      	add	r2, pc, #4	@ (adr r2, 80098ac <UART_SetConfig+0x554>)
 80098a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098aa:	bf00      	nop
 80098ac:	08009951 	.word	0x08009951
 80098b0:	08009981 	.word	0x08009981
 80098b4:	08009981 	.word	0x08009981
 80098b8:	08009981 	.word	0x08009981
 80098bc:	08009981 	.word	0x08009981
 80098c0:	08009981 	.word	0x08009981
 80098c4:	08009981 	.word	0x08009981
 80098c8:	08009981 	.word	0x08009981
 80098cc:	08009959 	.word	0x08009959
 80098d0:	08009981 	.word	0x08009981
 80098d4:	08009981 	.word	0x08009981
 80098d8:	08009981 	.word	0x08009981
 80098dc:	08009981 	.word	0x08009981
 80098e0:	08009981 	.word	0x08009981
 80098e4:	08009981 	.word	0x08009981
 80098e8:	08009981 	.word	0x08009981
 80098ec:	08009961 	.word	0x08009961
 80098f0:	08009981 	.word	0x08009981
 80098f4:	08009981 	.word	0x08009981
 80098f8:	08009981 	.word	0x08009981
 80098fc:	08009981 	.word	0x08009981
 8009900:	08009981 	.word	0x08009981
 8009904:	08009981 	.word	0x08009981
 8009908:	08009981 	.word	0x08009981
 800990c:	08009969 	.word	0x08009969
 8009910:	08009981 	.word	0x08009981
 8009914:	08009981 	.word	0x08009981
 8009918:	08009981 	.word	0x08009981
 800991c:	08009981 	.word	0x08009981
 8009920:	08009981 	.word	0x08009981
 8009924:	08009981 	.word	0x08009981
 8009928:	08009981 	.word	0x08009981
 800992c:	08009971 	.word	0x08009971
 8009930:	08009981 	.word	0x08009981
 8009934:	08009981 	.word	0x08009981
 8009938:	08009981 	.word	0x08009981
 800993c:	08009981 	.word	0x08009981
 8009940:	08009981 	.word	0x08009981
 8009944:	08009981 	.word	0x08009981
 8009948:	08009981 	.word	0x08009981
 800994c:	08009979 	.word	0x08009979
 8009950:	2301      	movs	r3, #1
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009956:	e0d6      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009958:	2304      	movs	r3, #4
 800995a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995e:	e0d2      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009960:	2308      	movs	r3, #8
 8009962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009966:	e0ce      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009968:	2310      	movs	r3, #16
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996e:	e0ca      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009970:	2320      	movs	r3, #32
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009976:	e0c6      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009978:	2340      	movs	r3, #64	@ 0x40
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800997e:	e0c2      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009980:	2380      	movs	r3, #128	@ 0x80
 8009982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009986:	e0be      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009988:	40011400 	.word	0x40011400
 800998c:	58024400 	.word	0x58024400
 8009990:	40007800 	.word	0x40007800
 8009994:	40007c00 	.word	0x40007c00
 8009998:	40011800 	.word	0x40011800
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4aad      	ldr	r2, [pc, #692]	@ (8009c58 <UART_SetConfig+0x900>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d176      	bne.n	8009a94 <UART_SetConfig+0x73c>
 80099a6:	4bad      	ldr	r3, [pc, #692]	@ (8009c5c <UART_SetConfig+0x904>)
 80099a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099ae:	2b28      	cmp	r3, #40	@ 0x28
 80099b0:	d86c      	bhi.n	8009a8c <UART_SetConfig+0x734>
 80099b2:	a201      	add	r2, pc, #4	@ (adr r2, 80099b8 <UART_SetConfig+0x660>)
 80099b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b8:	08009a5d 	.word	0x08009a5d
 80099bc:	08009a8d 	.word	0x08009a8d
 80099c0:	08009a8d 	.word	0x08009a8d
 80099c4:	08009a8d 	.word	0x08009a8d
 80099c8:	08009a8d 	.word	0x08009a8d
 80099cc:	08009a8d 	.word	0x08009a8d
 80099d0:	08009a8d 	.word	0x08009a8d
 80099d4:	08009a8d 	.word	0x08009a8d
 80099d8:	08009a65 	.word	0x08009a65
 80099dc:	08009a8d 	.word	0x08009a8d
 80099e0:	08009a8d 	.word	0x08009a8d
 80099e4:	08009a8d 	.word	0x08009a8d
 80099e8:	08009a8d 	.word	0x08009a8d
 80099ec:	08009a8d 	.word	0x08009a8d
 80099f0:	08009a8d 	.word	0x08009a8d
 80099f4:	08009a8d 	.word	0x08009a8d
 80099f8:	08009a6d 	.word	0x08009a6d
 80099fc:	08009a8d 	.word	0x08009a8d
 8009a00:	08009a8d 	.word	0x08009a8d
 8009a04:	08009a8d 	.word	0x08009a8d
 8009a08:	08009a8d 	.word	0x08009a8d
 8009a0c:	08009a8d 	.word	0x08009a8d
 8009a10:	08009a8d 	.word	0x08009a8d
 8009a14:	08009a8d 	.word	0x08009a8d
 8009a18:	08009a75 	.word	0x08009a75
 8009a1c:	08009a8d 	.word	0x08009a8d
 8009a20:	08009a8d 	.word	0x08009a8d
 8009a24:	08009a8d 	.word	0x08009a8d
 8009a28:	08009a8d 	.word	0x08009a8d
 8009a2c:	08009a8d 	.word	0x08009a8d
 8009a30:	08009a8d 	.word	0x08009a8d
 8009a34:	08009a8d 	.word	0x08009a8d
 8009a38:	08009a7d 	.word	0x08009a7d
 8009a3c:	08009a8d 	.word	0x08009a8d
 8009a40:	08009a8d 	.word	0x08009a8d
 8009a44:	08009a8d 	.word	0x08009a8d
 8009a48:	08009a8d 	.word	0x08009a8d
 8009a4c:	08009a8d 	.word	0x08009a8d
 8009a50:	08009a8d 	.word	0x08009a8d
 8009a54:	08009a8d 	.word	0x08009a8d
 8009a58:	08009a85 	.word	0x08009a85
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a62:	e050      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009a64:	2304      	movs	r3, #4
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a6a:	e04c      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009a6c:	2308      	movs	r3, #8
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a72:	e048      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009a74:	2310      	movs	r3, #16
 8009a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a7a:	e044      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009a7c:	2320      	movs	r3, #32
 8009a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a82:	e040      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009a84:	2340      	movs	r3, #64	@ 0x40
 8009a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a8a:	e03c      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009a8c:	2380      	movs	r3, #128	@ 0x80
 8009a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a92:	e038      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a71      	ldr	r2, [pc, #452]	@ (8009c60 <UART_SetConfig+0x908>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d130      	bne.n	8009b00 <UART_SetConfig+0x7a8>
 8009a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8009c5c <UART_SetConfig+0x904>)
 8009aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aa2:	f003 0307 	and.w	r3, r3, #7
 8009aa6:	2b05      	cmp	r3, #5
 8009aa8:	d826      	bhi.n	8009af8 <UART_SetConfig+0x7a0>
 8009aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab0 <UART_SetConfig+0x758>)
 8009aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab0:	08009ac9 	.word	0x08009ac9
 8009ab4:	08009ad1 	.word	0x08009ad1
 8009ab8:	08009ad9 	.word	0x08009ad9
 8009abc:	08009ae1 	.word	0x08009ae1
 8009ac0:	08009ae9 	.word	0x08009ae9
 8009ac4:	08009af1 	.word	0x08009af1
 8009ac8:	2302      	movs	r3, #2
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ace:	e01a      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009ad0:	2304      	movs	r3, #4
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad6:	e016      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009ad8:	2308      	movs	r3, #8
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ade:	e012      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009ae0:	2310      	movs	r3, #16
 8009ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae6:	e00e      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009ae8:	2320      	movs	r3, #32
 8009aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aee:	e00a      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009af0:	2340      	movs	r3, #64	@ 0x40
 8009af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af6:	e006      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009af8:	2380      	movs	r3, #128	@ 0x80
 8009afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afe:	e002      	b.n	8009b06 <UART_SetConfig+0x7ae>
 8009b00:	2380      	movs	r3, #128	@ 0x80
 8009b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a55      	ldr	r2, [pc, #340]	@ (8009c60 <UART_SetConfig+0x908>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	f040 80f8 	bne.w	8009d02 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b16:	2b20      	cmp	r3, #32
 8009b18:	dc46      	bgt.n	8009ba8 <UART_SetConfig+0x850>
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	db75      	blt.n	8009c0a <UART_SetConfig+0x8b2>
 8009b1e:	3b02      	subs	r3, #2
 8009b20:	2b1e      	cmp	r3, #30
 8009b22:	d872      	bhi.n	8009c0a <UART_SetConfig+0x8b2>
 8009b24:	a201      	add	r2, pc, #4	@ (adr r2, 8009b2c <UART_SetConfig+0x7d4>)
 8009b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2a:	bf00      	nop
 8009b2c:	08009baf 	.word	0x08009baf
 8009b30:	08009c0b 	.word	0x08009c0b
 8009b34:	08009bb7 	.word	0x08009bb7
 8009b38:	08009c0b 	.word	0x08009c0b
 8009b3c:	08009c0b 	.word	0x08009c0b
 8009b40:	08009c0b 	.word	0x08009c0b
 8009b44:	08009bc7 	.word	0x08009bc7
 8009b48:	08009c0b 	.word	0x08009c0b
 8009b4c:	08009c0b 	.word	0x08009c0b
 8009b50:	08009c0b 	.word	0x08009c0b
 8009b54:	08009c0b 	.word	0x08009c0b
 8009b58:	08009c0b 	.word	0x08009c0b
 8009b5c:	08009c0b 	.word	0x08009c0b
 8009b60:	08009c0b 	.word	0x08009c0b
 8009b64:	08009bd7 	.word	0x08009bd7
 8009b68:	08009c0b 	.word	0x08009c0b
 8009b6c:	08009c0b 	.word	0x08009c0b
 8009b70:	08009c0b 	.word	0x08009c0b
 8009b74:	08009c0b 	.word	0x08009c0b
 8009b78:	08009c0b 	.word	0x08009c0b
 8009b7c:	08009c0b 	.word	0x08009c0b
 8009b80:	08009c0b 	.word	0x08009c0b
 8009b84:	08009c0b 	.word	0x08009c0b
 8009b88:	08009c0b 	.word	0x08009c0b
 8009b8c:	08009c0b 	.word	0x08009c0b
 8009b90:	08009c0b 	.word	0x08009c0b
 8009b94:	08009c0b 	.word	0x08009c0b
 8009b98:	08009c0b 	.word	0x08009c0b
 8009b9c:	08009c0b 	.word	0x08009c0b
 8009ba0:	08009c0b 	.word	0x08009c0b
 8009ba4:	08009bfd 	.word	0x08009bfd
 8009ba8:	2b40      	cmp	r3, #64	@ 0x40
 8009baa:	d02a      	beq.n	8009c02 <UART_SetConfig+0x8aa>
 8009bac:	e02d      	b.n	8009c0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009bae:	f7fd fca7 	bl	8007500 <HAL_RCCEx_GetD3PCLK1Freq>
 8009bb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009bb4:	e02f      	b.n	8009c16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fd fcb6 	bl	800752c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bc4:	e027      	b.n	8009c16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bc6:	f107 0318 	add.w	r3, r7, #24
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fd fe02 	bl	80077d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bd4:	e01f      	b.n	8009c16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bd6:	4b21      	ldr	r3, [pc, #132]	@ (8009c5c <UART_SetConfig+0x904>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 0320 	and.w	r3, r3, #32
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d009      	beq.n	8009bf6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009be2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c5c <UART_SetConfig+0x904>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	08db      	lsrs	r3, r3, #3
 8009be8:	f003 0303 	and.w	r3, r3, #3
 8009bec:	4a1d      	ldr	r2, [pc, #116]	@ (8009c64 <UART_SetConfig+0x90c>)
 8009bee:	fa22 f303 	lsr.w	r3, r2, r3
 8009bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009bf4:	e00f      	b.n	8009c16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8009c64 <UART_SetConfig+0x90c>)
 8009bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bfa:	e00c      	b.n	8009c16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8009c68 <UART_SetConfig+0x910>)
 8009bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c00:	e009      	b.n	8009c16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c08:	e005      	b.n	8009c16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f000 81ee 	beq.w	8009ffa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c22:	4a12      	ldr	r2, [pc, #72]	@ (8009c6c <UART_SetConfig+0x914>)
 8009c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c28:	461a      	mov	r2, r3
 8009c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c30:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	4613      	mov	r3, r2
 8009c38:	005b      	lsls	r3, r3, #1
 8009c3a:	4413      	add	r3, r2
 8009c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d305      	bcc.n	8009c4e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d910      	bls.n	8009c70 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c54:	e1d1      	b.n	8009ffa <UART_SetConfig+0xca2>
 8009c56:	bf00      	nop
 8009c58:	40011c00 	.word	0x40011c00
 8009c5c:	58024400 	.word	0x58024400
 8009c60:	58000c00 	.word	0x58000c00
 8009c64:	03d09000 	.word	0x03d09000
 8009c68:	003d0900 	.word	0x003d0900
 8009c6c:	08012c38 	.word	0x08012c38
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c72:	2200      	movs	r2, #0
 8009c74:	60bb      	str	r3, [r7, #8]
 8009c76:	60fa      	str	r2, [r7, #12]
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c7c:	4ac0      	ldr	r2, [pc, #768]	@ (8009f80 <UART_SetConfig+0xc28>)
 8009c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	2200      	movs	r2, #0
 8009c86:	603b      	str	r3, [r7, #0]
 8009c88:	607a      	str	r2, [r7, #4]
 8009c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c92:	f7f6 fd51 	bl	8000738 <__aeabi_uldivmod>
 8009c96:	4602      	mov	r2, r0
 8009c98:	460b      	mov	r3, r1
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	f04f 0200 	mov.w	r2, #0
 8009ca2:	f04f 0300 	mov.w	r3, #0
 8009ca6:	020b      	lsls	r3, r1, #8
 8009ca8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cac:	0202      	lsls	r2, r0, #8
 8009cae:	6979      	ldr	r1, [r7, #20]
 8009cb0:	6849      	ldr	r1, [r1, #4]
 8009cb2:	0849      	lsrs	r1, r1, #1
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	4605      	mov	r5, r0
 8009cba:	eb12 0804 	adds.w	r8, r2, r4
 8009cbe:	eb43 0905 	adc.w	r9, r3, r5
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	469a      	mov	sl, r3
 8009cca:	4693      	mov	fp, r2
 8009ccc:	4652      	mov	r2, sl
 8009cce:	465b      	mov	r3, fp
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	f7f6 fd30 	bl	8000738 <__aeabi_uldivmod>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4613      	mov	r3, r2
 8009cde:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ce6:	d308      	bcc.n	8009cfa <UART_SetConfig+0x9a2>
 8009ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cee:	d204      	bcs.n	8009cfa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009cf6:	60da      	str	r2, [r3, #12]
 8009cf8:	e17f      	b.n	8009ffa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d00:	e17b      	b.n	8009ffa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	69db      	ldr	r3, [r3, #28]
 8009d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d0a:	f040 80bd 	bne.w	8009e88 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009d0e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d12:	2b20      	cmp	r3, #32
 8009d14:	dc48      	bgt.n	8009da8 <UART_SetConfig+0xa50>
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	db7b      	blt.n	8009e12 <UART_SetConfig+0xaba>
 8009d1a:	2b20      	cmp	r3, #32
 8009d1c:	d879      	bhi.n	8009e12 <UART_SetConfig+0xaba>
 8009d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d24 <UART_SetConfig+0x9cc>)
 8009d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d24:	08009daf 	.word	0x08009daf
 8009d28:	08009db7 	.word	0x08009db7
 8009d2c:	08009e13 	.word	0x08009e13
 8009d30:	08009e13 	.word	0x08009e13
 8009d34:	08009dbf 	.word	0x08009dbf
 8009d38:	08009e13 	.word	0x08009e13
 8009d3c:	08009e13 	.word	0x08009e13
 8009d40:	08009e13 	.word	0x08009e13
 8009d44:	08009dcf 	.word	0x08009dcf
 8009d48:	08009e13 	.word	0x08009e13
 8009d4c:	08009e13 	.word	0x08009e13
 8009d50:	08009e13 	.word	0x08009e13
 8009d54:	08009e13 	.word	0x08009e13
 8009d58:	08009e13 	.word	0x08009e13
 8009d5c:	08009e13 	.word	0x08009e13
 8009d60:	08009e13 	.word	0x08009e13
 8009d64:	08009ddf 	.word	0x08009ddf
 8009d68:	08009e13 	.word	0x08009e13
 8009d6c:	08009e13 	.word	0x08009e13
 8009d70:	08009e13 	.word	0x08009e13
 8009d74:	08009e13 	.word	0x08009e13
 8009d78:	08009e13 	.word	0x08009e13
 8009d7c:	08009e13 	.word	0x08009e13
 8009d80:	08009e13 	.word	0x08009e13
 8009d84:	08009e13 	.word	0x08009e13
 8009d88:	08009e13 	.word	0x08009e13
 8009d8c:	08009e13 	.word	0x08009e13
 8009d90:	08009e13 	.word	0x08009e13
 8009d94:	08009e13 	.word	0x08009e13
 8009d98:	08009e13 	.word	0x08009e13
 8009d9c:	08009e13 	.word	0x08009e13
 8009da0:	08009e13 	.word	0x08009e13
 8009da4:	08009e05 	.word	0x08009e05
 8009da8:	2b40      	cmp	r3, #64	@ 0x40
 8009daa:	d02e      	beq.n	8009e0a <UART_SetConfig+0xab2>
 8009dac:	e031      	b.n	8009e12 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dae:	f7fc f9db 	bl	8006168 <HAL_RCC_GetPCLK1Freq>
 8009db2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009db4:	e033      	b.n	8009e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009db6:	f7fc f9ed 	bl	8006194 <HAL_RCC_GetPCLK2Freq>
 8009dba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009dbc:	e02f      	b.n	8009e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fd fbb2 	bl	800752c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dcc:	e027      	b.n	8009e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dce:	f107 0318 	add.w	r3, r7, #24
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fd fcfe 	bl	80077d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ddc:	e01f      	b.n	8009e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dde:	4b69      	ldr	r3, [pc, #420]	@ (8009f84 <UART_SetConfig+0xc2c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 0320 	and.w	r3, r3, #32
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d009      	beq.n	8009dfe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dea:	4b66      	ldr	r3, [pc, #408]	@ (8009f84 <UART_SetConfig+0xc2c>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	08db      	lsrs	r3, r3, #3
 8009df0:	f003 0303 	and.w	r3, r3, #3
 8009df4:	4a64      	ldr	r2, [pc, #400]	@ (8009f88 <UART_SetConfig+0xc30>)
 8009df6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dfc:	e00f      	b.n	8009e1e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009dfe:	4b62      	ldr	r3, [pc, #392]	@ (8009f88 <UART_SetConfig+0xc30>)
 8009e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e02:	e00c      	b.n	8009e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e04:	4b61      	ldr	r3, [pc, #388]	@ (8009f8c <UART_SetConfig+0xc34>)
 8009e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e08:	e009      	b.n	8009e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e10:	e005      	b.n	8009e1e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009e12:	2300      	movs	r3, #0
 8009e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 80ea 	beq.w	8009ffa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2a:	4a55      	ldr	r2, [pc, #340]	@ (8009f80 <UART_SetConfig+0xc28>)
 8009e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e30:	461a      	mov	r2, r3
 8009e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e38:	005a      	lsls	r2, r3, #1
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	085b      	lsrs	r3, r3, #1
 8009e40:	441a      	add	r2, r3
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e4e:	2b0f      	cmp	r3, #15
 8009e50:	d916      	bls.n	8009e80 <UART_SetConfig+0xb28>
 8009e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e58:	d212      	bcs.n	8009e80 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	f023 030f 	bic.w	r3, r3, #15
 8009e62:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e66:	085b      	lsrs	r3, r3, #1
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	f003 0307 	and.w	r3, r3, #7
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009e72:	4313      	orrs	r3, r2
 8009e74:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009e7c:	60da      	str	r2, [r3, #12]
 8009e7e:	e0bc      	b.n	8009ffa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009e86:	e0b8      	b.n	8009ffa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e8c:	2b20      	cmp	r3, #32
 8009e8e:	dc4b      	bgt.n	8009f28 <UART_SetConfig+0xbd0>
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f2c0 8087 	blt.w	8009fa4 <UART_SetConfig+0xc4c>
 8009e96:	2b20      	cmp	r3, #32
 8009e98:	f200 8084 	bhi.w	8009fa4 <UART_SetConfig+0xc4c>
 8009e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea4 <UART_SetConfig+0xb4c>)
 8009e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea2:	bf00      	nop
 8009ea4:	08009f2f 	.word	0x08009f2f
 8009ea8:	08009f37 	.word	0x08009f37
 8009eac:	08009fa5 	.word	0x08009fa5
 8009eb0:	08009fa5 	.word	0x08009fa5
 8009eb4:	08009f3f 	.word	0x08009f3f
 8009eb8:	08009fa5 	.word	0x08009fa5
 8009ebc:	08009fa5 	.word	0x08009fa5
 8009ec0:	08009fa5 	.word	0x08009fa5
 8009ec4:	08009f4f 	.word	0x08009f4f
 8009ec8:	08009fa5 	.word	0x08009fa5
 8009ecc:	08009fa5 	.word	0x08009fa5
 8009ed0:	08009fa5 	.word	0x08009fa5
 8009ed4:	08009fa5 	.word	0x08009fa5
 8009ed8:	08009fa5 	.word	0x08009fa5
 8009edc:	08009fa5 	.word	0x08009fa5
 8009ee0:	08009fa5 	.word	0x08009fa5
 8009ee4:	08009f5f 	.word	0x08009f5f
 8009ee8:	08009fa5 	.word	0x08009fa5
 8009eec:	08009fa5 	.word	0x08009fa5
 8009ef0:	08009fa5 	.word	0x08009fa5
 8009ef4:	08009fa5 	.word	0x08009fa5
 8009ef8:	08009fa5 	.word	0x08009fa5
 8009efc:	08009fa5 	.word	0x08009fa5
 8009f00:	08009fa5 	.word	0x08009fa5
 8009f04:	08009fa5 	.word	0x08009fa5
 8009f08:	08009fa5 	.word	0x08009fa5
 8009f0c:	08009fa5 	.word	0x08009fa5
 8009f10:	08009fa5 	.word	0x08009fa5
 8009f14:	08009fa5 	.word	0x08009fa5
 8009f18:	08009fa5 	.word	0x08009fa5
 8009f1c:	08009fa5 	.word	0x08009fa5
 8009f20:	08009fa5 	.word	0x08009fa5
 8009f24:	08009f97 	.word	0x08009f97
 8009f28:	2b40      	cmp	r3, #64	@ 0x40
 8009f2a:	d037      	beq.n	8009f9c <UART_SetConfig+0xc44>
 8009f2c:	e03a      	b.n	8009fa4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f2e:	f7fc f91b 	bl	8006168 <HAL_RCC_GetPCLK1Freq>
 8009f32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f34:	e03c      	b.n	8009fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f36:	f7fc f92d 	bl	8006194 <HAL_RCC_GetPCLK2Freq>
 8009f3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f3c:	e038      	b.n	8009fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fd faf2 	bl	800752c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f4c:	e030      	b.n	8009fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f4e:	f107 0318 	add.w	r3, r7, #24
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fd fc3e 	bl	80077d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f5c:	e028      	b.n	8009fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f5e:	4b09      	ldr	r3, [pc, #36]	@ (8009f84 <UART_SetConfig+0xc2c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 0320 	and.w	r3, r3, #32
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d012      	beq.n	8009f90 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f6a:	4b06      	ldr	r3, [pc, #24]	@ (8009f84 <UART_SetConfig+0xc2c>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	08db      	lsrs	r3, r3, #3
 8009f70:	f003 0303 	and.w	r3, r3, #3
 8009f74:	4a04      	ldr	r2, [pc, #16]	@ (8009f88 <UART_SetConfig+0xc30>)
 8009f76:	fa22 f303 	lsr.w	r3, r2, r3
 8009f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f7c:	e018      	b.n	8009fb0 <UART_SetConfig+0xc58>
 8009f7e:	bf00      	nop
 8009f80:	08012c38 	.word	0x08012c38
 8009f84:	58024400 	.word	0x58024400
 8009f88:	03d09000 	.word	0x03d09000
 8009f8c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009f90:	4b24      	ldr	r3, [pc, #144]	@ (800a024 <UART_SetConfig+0xccc>)
 8009f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f94:	e00c      	b.n	8009fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f96:	4b24      	ldr	r3, [pc, #144]	@ (800a028 <UART_SetConfig+0xcd0>)
 8009f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f9a:	e009      	b.n	8009fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fa2:	e005      	b.n	8009fb0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009fae:	bf00      	nop
    }

    if (pclk != 0U)
 8009fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d021      	beq.n	8009ffa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fba:	4a1c      	ldr	r2, [pc, #112]	@ (800a02c <UART_SetConfig+0xcd4>)
 8009fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fc4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	085b      	lsrs	r3, r3, #1
 8009fce:	441a      	add	r2, r3
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fdc:	2b0f      	cmp	r3, #15
 8009fde:	d909      	bls.n	8009ff4 <UART_SetConfig+0xc9c>
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fe6:	d205      	bcs.n	8009ff4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	60da      	str	r2, [r3, #12]
 8009ff2:	e002      	b.n	8009ffa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2201      	movs	r2, #1
 800a006:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	2200      	movs	r2, #0
 800a00e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	2200      	movs	r2, #0
 800a014:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a016:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3748      	adds	r7, #72	@ 0x48
 800a01e:	46bd      	mov	sp, r7
 800a020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a024:	03d09000 	.word	0x03d09000
 800a028:	003d0900 	.word	0x003d0900
 800a02c:	08012c38 	.word	0x08012c38

0800a030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03c:	f003 0308 	and.w	r3, r3, #8
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00a      	beq.n	800a05a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	430a      	orrs	r2, r1
 800a058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a05e:	f003 0301 	and.w	r3, r3, #1
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00a      	beq.n	800a07c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	430a      	orrs	r2, r1
 800a07a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a080:	f003 0302 	and.w	r3, r3, #2
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00a      	beq.n	800a09e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	430a      	orrs	r2, r1
 800a09c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a2:	f003 0304 	and.w	r3, r3, #4
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00a      	beq.n	800a0c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	430a      	orrs	r2, r1
 800a0be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c4:	f003 0310 	and.w	r3, r3, #16
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00a      	beq.n	800a0e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e6:	f003 0320 	and.w	r3, r3, #32
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00a      	beq.n	800a104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	430a      	orrs	r2, r1
 800a102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d01a      	beq.n	800a146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	430a      	orrs	r2, r1
 800a124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a12a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a12e:	d10a      	bne.n	800a146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	430a      	orrs	r2, r1
 800a144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a14a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00a      	beq.n	800a168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	430a      	orrs	r2, r1
 800a166:	605a      	str	r2, [r3, #4]
  }
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b098      	sub	sp, #96	@ 0x60
 800a178:	af02      	add	r7, sp, #8
 800a17a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a184:	f7f8 fdce 	bl	8002d24 <HAL_GetTick>
 800a188:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0308 	and.w	r3, r3, #8
 800a194:	2b08      	cmp	r3, #8
 800a196:	d12f      	bne.n	800a1f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a198:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f88e 	bl	800a2c8 <UART_WaitOnFlagUntilTimeout>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d022      	beq.n	800a1f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ba:	e853 3f00 	ldrex	r3, [r3]
 800a1be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1d8:	e841 2300 	strex	r3, r2, [r1]
 800a1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1e6      	bne.n	800a1b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e063      	b.n	800a2c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 0304 	and.w	r3, r3, #4
 800a202:	2b04      	cmp	r3, #4
 800a204:	d149      	bne.n	800a29a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a206:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a20e:	2200      	movs	r2, #0
 800a210:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f857 	bl	800a2c8 <UART_WaitOnFlagUntilTimeout>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d03c      	beq.n	800a29a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a228:	e853 3f00 	ldrex	r3, [r3]
 800a22c:	623b      	str	r3, [r7, #32]
   return(result);
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a234:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	461a      	mov	r2, r3
 800a23c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a23e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a240:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a246:	e841 2300 	strex	r3, r2, [r1]
 800a24a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1e6      	bne.n	800a220 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3308      	adds	r3, #8
 800a258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	e853 3f00 	ldrex	r3, [r3]
 800a260:	60fb      	str	r3, [r7, #12]
   return(result);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f023 0301 	bic.w	r3, r3, #1
 800a268:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	3308      	adds	r3, #8
 800a270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a272:	61fa      	str	r2, [r7, #28]
 800a274:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a276:	69b9      	ldr	r1, [r7, #24]
 800a278:	69fa      	ldr	r2, [r7, #28]
 800a27a:	e841 2300 	strex	r3, r2, [r1]
 800a27e:	617b      	str	r3, [r7, #20]
   return(result);
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1e5      	bne.n	800a252 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2220      	movs	r2, #32
 800a28a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a296:	2303      	movs	r3, #3
 800a298:	e012      	b.n	800a2c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2220      	movs	r2, #32
 800a29e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2220      	movs	r2, #32
 800a2a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3758      	adds	r7, #88	@ 0x58
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	603b      	str	r3, [r7, #0]
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2d8:	e04f      	b.n	800a37a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e0:	d04b      	beq.n	800a37a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2e2:	f7f8 fd1f 	bl	8002d24 <HAL_GetTick>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	1ad3      	subs	r3, r2, r3
 800a2ec:	69ba      	ldr	r2, [r7, #24]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d302      	bcc.n	800a2f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d101      	bne.n	800a2fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e04e      	b.n	800a39a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f003 0304 	and.w	r3, r3, #4
 800a306:	2b00      	cmp	r3, #0
 800a308:	d037      	beq.n	800a37a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	2b80      	cmp	r3, #128	@ 0x80
 800a30e:	d034      	beq.n	800a37a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	2b40      	cmp	r3, #64	@ 0x40
 800a314:	d031      	beq.n	800a37a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	69db      	ldr	r3, [r3, #28]
 800a31c:	f003 0308 	and.w	r3, r3, #8
 800a320:	2b08      	cmp	r3, #8
 800a322:	d110      	bne.n	800a346 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2208      	movs	r2, #8
 800a32a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f000 f95b 	bl	800a5e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2208      	movs	r2, #8
 800a336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e029      	b.n	800a39a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	69db      	ldr	r3, [r3, #28]
 800a34c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a354:	d111      	bne.n	800a37a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a35e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f000 f941 	bl	800a5e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2220      	movs	r2, #32
 800a36a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e00f      	b.n	800a39a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	69da      	ldr	r2, [r3, #28]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	4013      	ands	r3, r2
 800a384:	68ba      	ldr	r2, [r7, #8]
 800a386:	429a      	cmp	r2, r3
 800a388:	bf0c      	ite	eq
 800a38a:	2301      	moveq	r3, #1
 800a38c:	2300      	movne	r3, #0
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	461a      	mov	r2, r3
 800a392:	79fb      	ldrb	r3, [r7, #7]
 800a394:	429a      	cmp	r2, r3
 800a396:	d0a0      	beq.n	800a2da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
	...

0800a3a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b0a3      	sub	sp, #140	@ 0x8c
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	88fa      	ldrh	r2, [r7, #6]
 800a3bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	88fa      	ldrh	r2, [r7, #6]
 800a3c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3d6:	d10e      	bne.n	800a3f6 <UART_Start_Receive_IT+0x52>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d105      	bne.n	800a3ec <UART_Start_Receive_IT+0x48>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a3e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a3ea:	e02d      	b.n	800a448 <UART_Start_Receive_IT+0xa4>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	22ff      	movs	r2, #255	@ 0xff
 800a3f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a3f4:	e028      	b.n	800a448 <UART_Start_Receive_IT+0xa4>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10d      	bne.n	800a41a <UART_Start_Receive_IT+0x76>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d104      	bne.n	800a410 <UART_Start_Receive_IT+0x6c>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	22ff      	movs	r2, #255	@ 0xff
 800a40a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a40e:	e01b      	b.n	800a448 <UART_Start_Receive_IT+0xa4>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	227f      	movs	r2, #127	@ 0x7f
 800a414:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a418:	e016      	b.n	800a448 <UART_Start_Receive_IT+0xa4>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a422:	d10d      	bne.n	800a440 <UART_Start_Receive_IT+0x9c>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d104      	bne.n	800a436 <UART_Start_Receive_IT+0x92>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	227f      	movs	r2, #127	@ 0x7f
 800a430:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a434:	e008      	b.n	800a448 <UART_Start_Receive_IT+0xa4>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	223f      	movs	r2, #63	@ 0x3f
 800a43a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a43e:	e003      	b.n	800a448 <UART_Start_Receive_IT+0xa4>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2222      	movs	r2, #34	@ 0x22
 800a454:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	3308      	adds	r3, #8
 800a45e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a460:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a462:	e853 3f00 	ldrex	r3, [r3]
 800a466:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a468:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a46a:	f043 0301 	orr.w	r3, r3, #1
 800a46e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3308      	adds	r3, #8
 800a478:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a47c:	673a      	str	r2, [r7, #112]	@ 0x70
 800a47e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a480:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a482:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a484:	e841 2300 	strex	r3, r2, [r1]
 800a488:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a48a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1e3      	bne.n	800a458 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a498:	d14f      	bne.n	800a53a <UART_Start_Receive_IT+0x196>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a4a0:	88fa      	ldrh	r2, [r7, #6]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d349      	bcc.n	800a53a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4ae:	d107      	bne.n	800a4c0 <UART_Start_Receive_IT+0x11c>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d103      	bne.n	800a4c0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	4a47      	ldr	r2, [pc, #284]	@ (800a5d8 <UART_Start_Receive_IT+0x234>)
 800a4bc:	675a      	str	r2, [r3, #116]	@ 0x74
 800a4be:	e002      	b.n	800a4c6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	4a46      	ldr	r2, [pc, #280]	@ (800a5dc <UART_Start_Receive_IT+0x238>)
 800a4c4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d01a      	beq.n	800a504 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4d6:	e853 3f00 	ldrex	r3, [r3]
 800a4da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a4dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a4f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a4f2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a4f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a4f8:	e841 2300 	strex	r3, r2, [r1]
 800a4fc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a4fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1e4      	bne.n	800a4ce <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3308      	adds	r3, #8
 800a50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a50e:	e853 3f00 	ldrex	r3, [r3]
 800a512:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a51a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	3308      	adds	r3, #8
 800a522:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a524:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a526:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a528:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a52a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a52c:	e841 2300 	strex	r3, r2, [r1]
 800a530:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1e5      	bne.n	800a504 <UART_Start_Receive_IT+0x160>
 800a538:	e046      	b.n	800a5c8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a542:	d107      	bne.n	800a554 <UART_Start_Receive_IT+0x1b0>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d103      	bne.n	800a554 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	4a24      	ldr	r2, [pc, #144]	@ (800a5e0 <UART_Start_Receive_IT+0x23c>)
 800a550:	675a      	str	r2, [r3, #116]	@ 0x74
 800a552:	e002      	b.n	800a55a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	4a23      	ldr	r2, [pc, #140]	@ (800a5e4 <UART_Start_Receive_IT+0x240>)
 800a558:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d019      	beq.n	800a596 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56a:	e853 3f00 	ldrex	r3, [r3]
 800a56e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a572:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a576:	677b      	str	r3, [r7, #116]	@ 0x74
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	461a      	mov	r2, r3
 800a57e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a580:	637b      	str	r3, [r7, #52]	@ 0x34
 800a582:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a584:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a586:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a588:	e841 2300 	strex	r3, r2, [r1]
 800a58c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1e6      	bne.n	800a562 <UART_Start_Receive_IT+0x1be>
 800a594:	e018      	b.n	800a5c8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	e853 3f00 	ldrex	r3, [r3]
 800a5a2:	613b      	str	r3, [r7, #16]
   return(result);
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	f043 0320 	orr.w	r3, r3, #32
 800a5aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5b4:	623b      	str	r3, [r7, #32]
 800a5b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b8:	69f9      	ldr	r1, [r7, #28]
 800a5ba:	6a3a      	ldr	r2, [r7, #32]
 800a5bc:	e841 2300 	strex	r3, r2, [r1]
 800a5c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1e6      	bne.n	800a596 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	378c      	adds	r7, #140	@ 0x8c
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	0800ae09 	.word	0x0800ae09
 800a5dc:	0800aaa9 	.word	0x0800aaa9
 800a5e0:	0800a8f1 	.word	0x0800a8f1
 800a5e4:	0800a739 	.word	0x0800a739

0800a5e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b095      	sub	sp, #84	@ 0x54
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5f8:	e853 3f00 	ldrex	r3, [r3]
 800a5fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a600:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a604:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	461a      	mov	r2, r3
 800a60c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a60e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a610:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a612:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a614:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a616:	e841 2300 	strex	r3, r2, [r1]
 800a61a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1e6      	bne.n	800a5f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	3308      	adds	r3, #8
 800a628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62a:	6a3b      	ldr	r3, [r7, #32]
 800a62c:	e853 3f00 	ldrex	r3, [r3]
 800a630:	61fb      	str	r3, [r7, #28]
   return(result);
 800a632:	69fa      	ldr	r2, [r7, #28]
 800a634:	4b1e      	ldr	r3, [pc, #120]	@ (800a6b0 <UART_EndRxTransfer+0xc8>)
 800a636:	4013      	ands	r3, r2
 800a638:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	3308      	adds	r3, #8
 800a640:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a644:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a646:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a648:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a64a:	e841 2300 	strex	r3, r2, [r1]
 800a64e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1e5      	bne.n	800a622 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d118      	bne.n	800a690 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	e853 3f00 	ldrex	r3, [r3]
 800a66a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	f023 0310 	bic.w	r3, r3, #16
 800a672:	647b      	str	r3, [r7, #68]	@ 0x44
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	461a      	mov	r2, r3
 800a67a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a67c:	61bb      	str	r3, [r7, #24]
 800a67e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a680:	6979      	ldr	r1, [r7, #20]
 800a682:	69ba      	ldr	r2, [r7, #24]
 800a684:	e841 2300 	strex	r3, r2, [r1]
 800a688:	613b      	str	r3, [r7, #16]
   return(result);
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d1e6      	bne.n	800a65e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2220      	movs	r2, #32
 800a694:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a6a4:	bf00      	nop
 800a6a6:	3754      	adds	r7, #84	@ 0x54
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	effffffe 	.word	0xeffffffe

0800a6b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f7fe fe2a 	bl	800932c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6d8:	bf00      	nop
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b088      	sub	sp, #32
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	e853 3f00 	ldrex	r3, [r3]
 800a6f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6fc:	61fb      	str	r3, [r7, #28]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	461a      	mov	r2, r3
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	61bb      	str	r3, [r7, #24]
 800a708:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70a:	6979      	ldr	r1, [r7, #20]
 800a70c:	69ba      	ldr	r2, [r7, #24]
 800a70e:	e841 2300 	strex	r3, r2, [r1]
 800a712:	613b      	str	r3, [r7, #16]
   return(result);
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1e6      	bne.n	800a6e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2220      	movs	r2, #32
 800a71e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7fe fdf5 	bl	8009318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a72e:	bf00      	nop
 800a730:	3720      	adds	r7, #32
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
	...

0800a738 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b09c      	sub	sp, #112	@ 0x70
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a746:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a750:	2b22      	cmp	r3, #34	@ 0x22
 800a752:	f040 80be 	bne.w	800a8d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a760:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a764:	b2d9      	uxtb	r1, r3
 800a766:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a76a:	b2da      	uxtb	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a770:	400a      	ands	r2, r1
 800a772:	b2d2      	uxtb	r2, r2
 800a774:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a77a:	1c5a      	adds	r2, r3, #1
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a786:	b29b      	uxth	r3, r3
 800a788:	3b01      	subs	r3, #1
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a798:	b29b      	uxth	r3, r3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	f040 80a1 	bne.w	800a8e2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a7ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7c6:	e841 2300 	strex	r3, r2, [r1]
 800a7ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1e6      	bne.n	800a7a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	3308      	adds	r3, #8
 800a7d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7dc:	e853 3f00 	ldrex	r3, [r3]
 800a7e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7e4:	f023 0301 	bic.w	r3, r3, #1
 800a7e8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3308      	adds	r3, #8
 800a7f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a7f2:	647a      	str	r2, [r7, #68]	@ 0x44
 800a7f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7fa:	e841 2300 	strex	r3, r2, [r1]
 800a7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1e5      	bne.n	800a7d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2220      	movs	r2, #32
 800a80a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a33      	ldr	r2, [pc, #204]	@ (800a8ec <UART_RxISR_8BIT+0x1b4>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d01f      	beq.n	800a864 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d018      	beq.n	800a864 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83a:	e853 3f00 	ldrex	r3, [r3]
 800a83e:	623b      	str	r3, [r7, #32]
   return(result);
 800a840:	6a3b      	ldr	r3, [r7, #32]
 800a842:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a846:	663b      	str	r3, [r7, #96]	@ 0x60
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	461a      	mov	r2, r3
 800a84e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a850:	633b      	str	r3, [r7, #48]	@ 0x30
 800a852:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a854:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a858:	e841 2300 	strex	r3, r2, [r1]
 800a85c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1e6      	bne.n	800a832 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d12e      	bne.n	800a8ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	e853 3f00 	ldrex	r3, [r3]
 800a87e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f023 0310 	bic.w	r3, r3, #16
 800a886:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	461a      	mov	r2, r3
 800a88e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a890:	61fb      	str	r3, [r7, #28]
 800a892:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a894:	69b9      	ldr	r1, [r7, #24]
 800a896:	69fa      	ldr	r2, [r7, #28]
 800a898:	e841 2300 	strex	r3, r2, [r1]
 800a89c:	617b      	str	r3, [r7, #20]
   return(result);
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d1e6      	bne.n	800a872 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	69db      	ldr	r3, [r3, #28]
 800a8aa:	f003 0310 	and.w	r3, r3, #16
 800a8ae:	2b10      	cmp	r3, #16
 800a8b0:	d103      	bne.n	800a8ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2210      	movs	r2, #16
 800a8b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7fe fd3c 	bl	8009340 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a8c8:	e00b      	b.n	800a8e2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7f6 fdaa 	bl	8001424 <HAL_UART_RxCpltCallback>
}
 800a8d0:	e007      	b.n	800a8e2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	699a      	ldr	r2, [r3, #24]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f042 0208 	orr.w	r2, r2, #8
 800a8e0:	619a      	str	r2, [r3, #24]
}
 800a8e2:	bf00      	nop
 800a8e4:	3770      	adds	r7, #112	@ 0x70
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	58000c00 	.word	0x58000c00

0800a8f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b09c      	sub	sp, #112	@ 0x70
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a8fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a908:	2b22      	cmp	r3, #34	@ 0x22
 800a90a:	f040 80be 	bne.w	800aa8a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a914:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a91c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a91e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a922:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a926:	4013      	ands	r3, r2
 800a928:	b29a      	uxth	r2, r3
 800a92a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a92c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a932:	1c9a      	adds	r2, r3, #2
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a93e:	b29b      	uxth	r3, r3
 800a940:	3b01      	subs	r3, #1
 800a942:	b29a      	uxth	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a950:	b29b      	uxth	r3, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	f040 80a1 	bne.w	800aa9a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a960:	e853 3f00 	ldrex	r3, [r3]
 800a964:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a968:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a96c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a976:	657b      	str	r3, [r7, #84]	@ 0x54
 800a978:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a97c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a97e:	e841 2300 	strex	r3, r2, [r1]
 800a982:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1e6      	bne.n	800a958 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3308      	adds	r3, #8
 800a990:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a994:	e853 3f00 	ldrex	r3, [r3]
 800a998:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a99c:	f023 0301 	bic.w	r3, r3, #1
 800a9a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3308      	adds	r3, #8
 800a9a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a9aa:	643a      	str	r2, [r7, #64]	@ 0x40
 800a9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a9b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a9b2:	e841 2300 	strex	r3, r2, [r1]
 800a9b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1e5      	bne.n	800a98a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a33      	ldr	r2, [pc, #204]	@ (800aaa4 <UART_RxISR_16BIT+0x1b4>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d01f      	beq.n	800aa1c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d018      	beq.n	800aa1c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	e853 3f00 	ldrex	r3, [r3]
 800a9f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a9fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	461a      	mov	r2, r3
 800aa06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa0a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa10:	e841 2300 	strex	r3, r2, [r1]
 800aa14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1e6      	bne.n	800a9ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d12e      	bne.n	800aa82 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	e853 3f00 	ldrex	r3, [r3]
 800aa36:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	f023 0310 	bic.w	r3, r3, #16
 800aa3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	461a      	mov	r2, r3
 800aa46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa48:	61bb      	str	r3, [r7, #24]
 800aa4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4c:	6979      	ldr	r1, [r7, #20]
 800aa4e:	69ba      	ldr	r2, [r7, #24]
 800aa50:	e841 2300 	strex	r3, r2, [r1]
 800aa54:	613b      	str	r3, [r7, #16]
   return(result);
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1e6      	bne.n	800aa2a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	69db      	ldr	r3, [r3, #28]
 800aa62:	f003 0310 	and.w	r3, r3, #16
 800aa66:	2b10      	cmp	r3, #16
 800aa68:	d103      	bne.n	800aa72 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2210      	movs	r2, #16
 800aa70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa78:	4619      	mov	r1, r3
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f7fe fc60 	bl	8009340 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa80:	e00b      	b.n	800aa9a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7f6 fcce 	bl	8001424 <HAL_UART_RxCpltCallback>
}
 800aa88:	e007      	b.n	800aa9a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	699a      	ldr	r2, [r3, #24]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f042 0208 	orr.w	r2, r2, #8
 800aa98:	619a      	str	r2, [r3, #24]
}
 800aa9a:	bf00      	nop
 800aa9c:	3770      	adds	r7, #112	@ 0x70
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	58000c00 	.word	0x58000c00

0800aaa8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b0ac      	sub	sp, #176	@ 0xb0
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aab6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aade:	2b22      	cmp	r3, #34	@ 0x22
 800aae0:	f040 8180 	bne.w	800ade4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aaea:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aaee:	e123      	b.n	800ad38 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aafa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800aafe:	b2d9      	uxtb	r1, r3
 800ab00:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab0a:	400a      	ands	r2, r1
 800ab0c:	b2d2      	uxtb	r2, r2
 800ab0e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab14:	1c5a      	adds	r2, r3, #1
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	3b01      	subs	r3, #1
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	69db      	ldr	r3, [r3, #28]
 800ab32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ab36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab3a:	f003 0307 	and.w	r3, r3, #7
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d053      	beq.n	800abea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab46:	f003 0301 	and.w	r3, r3, #1
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d011      	beq.n	800ab72 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ab4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ab52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00b      	beq.n	800ab72 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab68:	f043 0201 	orr.w	r2, r3, #1
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab76:	f003 0302 	and.w	r3, r3, #2
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d011      	beq.n	800aba2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ab7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ab82:	f003 0301 	and.w	r3, r3, #1
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00b      	beq.n	800aba2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab98:	f043 0204 	orr.w	r2, r3, #4
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aba6:	f003 0304 	and.w	r3, r3, #4
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d011      	beq.n	800abd2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800abae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00b      	beq.n	800abd2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2204      	movs	r2, #4
 800abc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abc8:	f043 0202 	orr.w	r2, r3, #2
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d006      	beq.n	800abea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f7fe fba5 	bl	800932c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f040 80a0 	bne.w	800ad38 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac00:	e853 3f00 	ldrex	r3, [r3]
 800ac04:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ac06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	461a      	mov	r2, r3
 800ac16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac1c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ac20:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ac22:	e841 2300 	strex	r3, r2, [r1]
 800ac26:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ac28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1e4      	bne.n	800abf8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	3308      	adds	r3, #8
 800ac34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac38:	e853 3f00 	ldrex	r3, [r3]
 800ac3c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ac3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac40:	4b6e      	ldr	r3, [pc, #440]	@ (800adfc <UART_RxISR_8BIT_FIFOEN+0x354>)
 800ac42:	4013      	ands	r3, r2
 800ac44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ac52:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ac54:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac56:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ac58:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ac5a:	e841 2300 	strex	r3, r2, [r1]
 800ac5e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ac60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1e3      	bne.n	800ac2e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2220      	movs	r2, #32
 800ac6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a60      	ldr	r2, [pc, #384]	@ (800ae00 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d021      	beq.n	800acc8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d01a      	beq.n	800acc8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac9a:	e853 3f00 	ldrex	r3, [r3]
 800ac9e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800aca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aca2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aca6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	461a      	mov	r2, r3
 800acb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800acb4:	657b      	str	r3, [r7, #84]	@ 0x54
 800acb6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800acba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800acbc:	e841 2300 	strex	r3, r2, [r1]
 800acc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800acc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1e4      	bne.n	800ac92 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800accc:	2b01      	cmp	r3, #1
 800acce:	d130      	bne.n	800ad32 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acde:	e853 3f00 	ldrex	r3, [r3]
 800ace2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ace4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace6:	f023 0310 	bic.w	r3, r3, #16
 800acea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	461a      	mov	r2, r3
 800acf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800acf8:	643b      	str	r3, [r7, #64]	@ 0x40
 800acfa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad00:	e841 2300 	strex	r3, r2, [r1]
 800ad04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1e4      	bne.n	800acd6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	69db      	ldr	r3, [r3, #28]
 800ad12:	f003 0310 	and.w	r3, r3, #16
 800ad16:	2b10      	cmp	r3, #16
 800ad18:	d103      	bne.n	800ad22 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2210      	movs	r2, #16
 800ad20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad28:	4619      	mov	r1, r3
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7fe fb08 	bl	8009340 <HAL_UARTEx_RxEventCallback>
 800ad30:	e002      	b.n	800ad38 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7f6 fb76 	bl	8001424 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad38:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d006      	beq.n	800ad4e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ad40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad44:	f003 0320 	and.w	r3, r3, #32
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f47f aed1 	bne.w	800aaf0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad54:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ad58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d049      	beq.n	800adf4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad66:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d242      	bcs.n	800adf4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3308      	adds	r3, #8
 800ad74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad76:	6a3b      	ldr	r3, [r7, #32]
 800ad78:	e853 3f00 	ldrex	r3, [r3]
 800ad7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	3308      	adds	r3, #8
 800ad8e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ad92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad9a:	e841 2300 	strex	r3, r2, [r1]
 800ad9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ada0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1e3      	bne.n	800ad6e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a16      	ldr	r2, [pc, #88]	@ (800ae04 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800adaa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	e853 3f00 	ldrex	r3, [r3]
 800adb8:	60bb      	str	r3, [r7, #8]
   return(result);
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	f043 0320 	orr.w	r3, r3, #32
 800adc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	461a      	mov	r2, r3
 800adca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800adce:	61bb      	str	r3, [r7, #24]
 800add0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add2:	6979      	ldr	r1, [r7, #20]
 800add4:	69ba      	ldr	r2, [r7, #24]
 800add6:	e841 2300 	strex	r3, r2, [r1]
 800adda:	613b      	str	r3, [r7, #16]
   return(result);
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1e4      	bne.n	800adac <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ade2:	e007      	b.n	800adf4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	699a      	ldr	r2, [r3, #24]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f042 0208 	orr.w	r2, r2, #8
 800adf2:	619a      	str	r2, [r3, #24]
}
 800adf4:	bf00      	nop
 800adf6:	37b0      	adds	r7, #176	@ 0xb0
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	effffffe 	.word	0xeffffffe
 800ae00:	58000c00 	.word	0x58000c00
 800ae04:	0800a739 	.word	0x0800a739

0800ae08 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b0ae      	sub	sp, #184	@ 0xb8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae16:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	69db      	ldr	r3, [r3, #28]
 800ae20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae3e:	2b22      	cmp	r3, #34	@ 0x22
 800ae40:	f040 8184 	bne.w	800b14c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ae4a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ae4e:	e127      	b.n	800b0a0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae56:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ae62:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ae66:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ae72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae78:	1c9a      	adds	r2, r3, #2
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	3b01      	subs	r3, #1
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	69db      	ldr	r3, [r3, #28]
 800ae96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ae9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae9e:	f003 0307 	and.w	r3, r3, #7
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d053      	beq.n	800af4e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aea6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aeaa:	f003 0301 	and.w	r3, r3, #1
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d011      	beq.n	800aed6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800aeb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aeb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00b      	beq.n	800aed6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2201      	movs	r2, #1
 800aec4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aecc:	f043 0201 	orr.w	r2, r3, #1
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aed6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aeda:	f003 0302 	and.w	r3, r3, #2
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d011      	beq.n	800af06 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800aee2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aee6:	f003 0301 	and.w	r3, r3, #1
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00b      	beq.n	800af06 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2202      	movs	r2, #2
 800aef4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aefc:	f043 0204 	orr.w	r2, r3, #4
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af0a:	f003 0304 	and.w	r3, r3, #4
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d011      	beq.n	800af36 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800af12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af16:	f003 0301 	and.w	r3, r3, #1
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00b      	beq.n	800af36 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2204      	movs	r2, #4
 800af24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af2c:	f043 0202 	orr.w	r2, r3, #2
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d006      	beq.n	800af4e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7fe f9f3 	bl	800932c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af54:	b29b      	uxth	r3, r3
 800af56:	2b00      	cmp	r3, #0
 800af58:	f040 80a2 	bne.w	800b0a0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af64:	e853 3f00 	ldrex	r3, [r3]
 800af68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800af6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	461a      	mov	r2, r3
 800af7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800af82:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800af86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800af8a:	e841 2300 	strex	r3, r2, [r1]
 800af8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800af90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1e2      	bne.n	800af5c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	3308      	adds	r3, #8
 800af9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800afa0:	e853 3f00 	ldrex	r3, [r3]
 800afa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800afa6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800afa8:	4b6e      	ldr	r3, [pc, #440]	@ (800b164 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800afaa:	4013      	ands	r3, r2
 800afac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3308      	adds	r3, #8
 800afb6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800afba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800afbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afbe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800afc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800afc2:	e841 2300 	strex	r3, r2, [r1]
 800afc6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800afc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1e3      	bne.n	800af96 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2220      	movs	r2, #32
 800afd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a60      	ldr	r2, [pc, #384]	@ (800b168 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d021      	beq.n	800b030 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d01a      	beq.n	800b030 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b002:	e853 3f00 	ldrex	r3, [r3]
 800b006:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b00a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b00e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	461a      	mov	r2, r3
 800b018:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b01c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b01e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b020:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b022:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b024:	e841 2300 	strex	r3, r2, [r1]
 800b028:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b02a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1e4      	bne.n	800affa <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b034:	2b01      	cmp	r3, #1
 800b036:	d130      	bne.n	800b09a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b046:	e853 3f00 	ldrex	r3, [r3]
 800b04a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b04e:	f023 0310 	bic.w	r3, r3, #16
 800b052:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b060:	647b      	str	r3, [r7, #68]	@ 0x44
 800b062:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b064:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b066:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b068:	e841 2300 	strex	r3, r2, [r1]
 800b06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1e4      	bne.n	800b03e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	f003 0310 	and.w	r3, r3, #16
 800b07e:	2b10      	cmp	r3, #16
 800b080:	d103      	bne.n	800b08a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2210      	movs	r2, #16
 800b088:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7fe f954 	bl	8009340 <HAL_UARTEx_RxEventCallback>
 800b098:	e002      	b.n	800b0a0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7f6 f9c2 	bl	8001424 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b0a0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d006      	beq.n	800b0b6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b0a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b0ac:	f003 0320 	and.w	r3, r3, #32
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f47f aecd 	bne.w	800ae50 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0bc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b0c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d049      	beq.n	800b15c <UART_RxISR_16BIT_FIFOEN+0x354>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b0ce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d242      	bcs.n	800b15c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	3308      	adds	r3, #8
 800b0dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e0:	e853 3f00 	ldrex	r3, [r3]
 800b0e4:	623b      	str	r3, [r7, #32]
   return(result);
 800b0e6:	6a3b      	ldr	r3, [r7, #32]
 800b0e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	3308      	adds	r3, #8
 800b0f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b0fa:	633a      	str	r2, [r7, #48]	@ 0x30
 800b0fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b102:	e841 2300 	strex	r3, r2, [r1]
 800b106:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1e3      	bne.n	800b0d6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a16      	ldr	r2, [pc, #88]	@ (800b16c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b112:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	e853 3f00 	ldrex	r3, [r3]
 800b120:	60fb      	str	r3, [r7, #12]
   return(result);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f043 0320 	orr.w	r3, r3, #32
 800b128:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	461a      	mov	r2, r3
 800b132:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b136:	61fb      	str	r3, [r7, #28]
 800b138:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13a:	69b9      	ldr	r1, [r7, #24]
 800b13c:	69fa      	ldr	r2, [r7, #28]
 800b13e:	e841 2300 	strex	r3, r2, [r1]
 800b142:	617b      	str	r3, [r7, #20]
   return(result);
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1e4      	bne.n	800b114 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b14a:	e007      	b.n	800b15c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	699a      	ldr	r2, [r3, #24]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f042 0208 	orr.w	r2, r2, #8
 800b15a:	619a      	str	r2, [r3, #24]
}
 800b15c:	bf00      	nop
 800b15e:	37b8      	adds	r7, #184	@ 0xb8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	effffffe 	.word	0xeffffffe
 800b168:	58000c00 	.word	0x58000c00
 800b16c:	0800a8f1 	.word	0x0800a8f1

0800b170 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b178:	bf00      	nop
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b18c:	bf00      	nop
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d101      	bne.n	800b1c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b1be:	2302      	movs	r3, #2
 800b1c0:	e027      	b.n	800b212 <HAL_UARTEx_DisableFifoMode+0x66>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2224      	movs	r2, #36	@ 0x24
 800b1ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f022 0201 	bic.w	r2, r2, #1
 800b1e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b1f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2220      	movs	r2, #32
 800b204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3714      	adds	r7, #20
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b084      	sub	sp, #16
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d101      	bne.n	800b236 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b232:	2302      	movs	r3, #2
 800b234:	e02d      	b.n	800b292 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2224      	movs	r2, #36	@ 0x24
 800b242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f022 0201 	bic.w	r2, r2, #1
 800b25c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	683a      	ldr	r2, [r7, #0]
 800b26e:	430a      	orrs	r2, r1
 800b270:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 f850 	bl	800b318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2220      	movs	r2, #32
 800b284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b084      	sub	sp, #16
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d101      	bne.n	800b2b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2ae:	2302      	movs	r3, #2
 800b2b0:	e02d      	b.n	800b30e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2224      	movs	r2, #36	@ 0x24
 800b2be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f022 0201 	bic.w	r2, r2, #1
 800b2d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	430a      	orrs	r2, r1
 800b2ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 f812 	bl	800b318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2220      	movs	r2, #32
 800b300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
	...

0800b318 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b324:	2b00      	cmp	r3, #0
 800b326:	d108      	bne.n	800b33a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b338:	e031      	b.n	800b39e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b33a:	2310      	movs	r3, #16
 800b33c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b33e:	2310      	movs	r3, #16
 800b340:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	0e5b      	lsrs	r3, r3, #25
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	f003 0307 	and.w	r3, r3, #7
 800b350:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	0f5b      	lsrs	r3, r3, #29
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	f003 0307 	and.w	r3, r3, #7
 800b360:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b362:	7bbb      	ldrb	r3, [r7, #14]
 800b364:	7b3a      	ldrb	r2, [r7, #12]
 800b366:	4911      	ldr	r1, [pc, #68]	@ (800b3ac <UARTEx_SetNbDataToProcess+0x94>)
 800b368:	5c8a      	ldrb	r2, [r1, r2]
 800b36a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b36e:	7b3a      	ldrb	r2, [r7, #12]
 800b370:	490f      	ldr	r1, [pc, #60]	@ (800b3b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b372:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b374:	fb93 f3f2 	sdiv	r3, r3, r2
 800b378:	b29a      	uxth	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b380:	7bfb      	ldrb	r3, [r7, #15]
 800b382:	7b7a      	ldrb	r2, [r7, #13]
 800b384:	4909      	ldr	r1, [pc, #36]	@ (800b3ac <UARTEx_SetNbDataToProcess+0x94>)
 800b386:	5c8a      	ldrb	r2, [r1, r2]
 800b388:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b38c:	7b7a      	ldrb	r2, [r7, #13]
 800b38e:	4908      	ldr	r1, [pc, #32]	@ (800b3b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b390:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b392:	fb93 f3f2 	sdiv	r3, r3, r2
 800b396:	b29a      	uxth	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b39e:	bf00      	nop
 800b3a0:	3714      	adds	r7, #20
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	08012c50 	.word	0x08012c50
 800b3b0:	08012c58 	.word	0x08012c58

0800b3b4 <Data_Analyse>:
/**
 * @brief 数据解析函数  如更换MCU平台或更换软件库，只需将串口接收到的值传入该函数即可解析
 * @param  rec 串口接收到的字节数据
 */
void Data_Analyse(uint8_t rec)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	71fb      	strb	r3, [r7, #7]
		float ActVal[6];
	} posture;
	static uint8_t count = 0;
	static uint8_t i = 0;

	ch = rec;
 800b3be:	4a48      	ldr	r2, [pc, #288]	@ (800b4e0 <Data_Analyse+0x12c>)
 800b3c0:	79fb      	ldrb	r3, [r7, #7]
 800b3c2:	7013      	strb	r3, [r2, #0]
//	HAL_UART_Transmit(&huart10, &ch, 1, 0xff);
//	HAL_UART_Transmit(&huart10, (uint8_t*) ch, 1, 0xff);
	switch (count)
 800b3c4:	4b47      	ldr	r3, [pc, #284]	@ (800b4e4 <Data_Analyse+0x130>)
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	2b04      	cmp	r3, #4
 800b3ca:	d87c      	bhi.n	800b4c6 <Data_Analyse+0x112>
 800b3cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b3d4 <Data_Analyse+0x20>)
 800b3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d2:	bf00      	nop
 800b3d4:	0800b3e9 	.word	0x0800b3e9
 800b3d8:	0800b407 	.word	0x0800b407
 800b3dc:	0800b433 	.word	0x0800b433
 800b3e0:	0800b469 	.word	0x0800b469
 800b3e4:	0800b487 	.word	0x0800b487
	{
	case 0:
		if (ch == 0x0d)
 800b3e8:	4b3d      	ldr	r3, [pc, #244]	@ (800b4e0 <Data_Analyse+0x12c>)
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	2b0d      	cmp	r3, #13
 800b3ee:	d106      	bne.n	800b3fe <Data_Analyse+0x4a>
			count++;
 800b3f0:	4b3c      	ldr	r3, [pc, #240]	@ (800b4e4 <Data_Analyse+0x130>)
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	b2da      	uxtb	r2, r3
 800b3f8:	4b3a      	ldr	r3, [pc, #232]	@ (800b4e4 <Data_Analyse+0x130>)
 800b3fa:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b3fc:	e06a      	b.n	800b4d4 <Data_Analyse+0x120>
			count = 0;
 800b3fe:	4b39      	ldr	r3, [pc, #228]	@ (800b4e4 <Data_Analyse+0x130>)
 800b400:	2200      	movs	r2, #0
 800b402:	701a      	strb	r2, [r3, #0]
		break;
 800b404:	e066      	b.n	800b4d4 <Data_Analyse+0x120>
	case 1:
		if (ch == 0x0a)
 800b406:	4b36      	ldr	r3, [pc, #216]	@ (800b4e0 <Data_Analyse+0x12c>)
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	2b0a      	cmp	r3, #10
 800b40c:	d109      	bne.n	800b422 <Data_Analyse+0x6e>
		{
			i = 0;
 800b40e:	4b36      	ldr	r3, [pc, #216]	@ (800b4e8 <Data_Analyse+0x134>)
 800b410:	2200      	movs	r2, #0
 800b412:	701a      	strb	r2, [r3, #0]
			count++;
 800b414:	4b33      	ldr	r3, [pc, #204]	@ (800b4e4 <Data_Analyse+0x130>)
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	3301      	adds	r3, #1
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	4b31      	ldr	r3, [pc, #196]	@ (800b4e4 <Data_Analyse+0x130>)
 800b41e:	701a      	strb	r2, [r3, #0]
		}
		else if (ch == 0x0d)
			;
		else
			count = 0;
		break;
 800b420:	e055      	b.n	800b4ce <Data_Analyse+0x11a>
		else if (ch == 0x0d)
 800b422:	4b2f      	ldr	r3, [pc, #188]	@ (800b4e0 <Data_Analyse+0x12c>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	2b0d      	cmp	r3, #13
 800b428:	d051      	beq.n	800b4ce <Data_Analyse+0x11a>
			count = 0;
 800b42a:	4b2e      	ldr	r3, [pc, #184]	@ (800b4e4 <Data_Analyse+0x130>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	701a      	strb	r2, [r3, #0]
		break;
 800b430:	e04d      	b.n	800b4ce <Data_Analyse+0x11a>
	case 2:
		posture.date[i] = ch;
 800b432:	4b2d      	ldr	r3, [pc, #180]	@ (800b4e8 <Data_Analyse+0x134>)
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	461a      	mov	r2, r3
 800b438:	4b29      	ldr	r3, [pc, #164]	@ (800b4e0 <Data_Analyse+0x12c>)
 800b43a:	7819      	ldrb	r1, [r3, #0]
 800b43c:	4b2b      	ldr	r3, [pc, #172]	@ (800b4ec <Data_Analyse+0x138>)
 800b43e:	5499      	strb	r1, [r3, r2]
		i++;
 800b440:	4b29      	ldr	r3, [pc, #164]	@ (800b4e8 <Data_Analyse+0x134>)
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	3301      	adds	r3, #1
 800b446:	b2da      	uxtb	r2, r3
 800b448:	4b27      	ldr	r3, [pc, #156]	@ (800b4e8 <Data_Analyse+0x134>)
 800b44a:	701a      	strb	r2, [r3, #0]
		if (i >= 24)
 800b44c:	4b26      	ldr	r3, [pc, #152]	@ (800b4e8 <Data_Analyse+0x134>)
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	2b17      	cmp	r3, #23
 800b452:	d93e      	bls.n	800b4d2 <Data_Analyse+0x11e>
		{
			i = 0;
 800b454:	4b24      	ldr	r3, [pc, #144]	@ (800b4e8 <Data_Analyse+0x134>)
 800b456:	2200      	movs	r2, #0
 800b458:	701a      	strb	r2, [r3, #0]
			count++;
 800b45a:	4b22      	ldr	r3, [pc, #136]	@ (800b4e4 <Data_Analyse+0x130>)
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	3301      	adds	r3, #1
 800b460:	b2da      	uxtb	r2, r3
 800b462:	4b20      	ldr	r3, [pc, #128]	@ (800b4e4 <Data_Analyse+0x130>)
 800b464:	701a      	strb	r2, [r3, #0]
		}
		break;
 800b466:	e034      	b.n	800b4d2 <Data_Analyse+0x11e>
	case 3:
		if (ch == 0x0a)
 800b468:	4b1d      	ldr	r3, [pc, #116]	@ (800b4e0 <Data_Analyse+0x12c>)
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	2b0a      	cmp	r3, #10
 800b46e:	d106      	bne.n	800b47e <Data_Analyse+0xca>
			count++;
 800b470:	4b1c      	ldr	r3, [pc, #112]	@ (800b4e4 <Data_Analyse+0x130>)
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	3301      	adds	r3, #1
 800b476:	b2da      	uxtb	r2, r3
 800b478:	4b1a      	ldr	r3, [pc, #104]	@ (800b4e4 <Data_Analyse+0x130>)
 800b47a:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b47c:	e02a      	b.n	800b4d4 <Data_Analyse+0x120>
			count = 0;
 800b47e:	4b19      	ldr	r3, [pc, #100]	@ (800b4e4 <Data_Analyse+0x130>)
 800b480:	2200      	movs	r2, #0
 800b482:	701a      	strb	r2, [r3, #0]
		break;
 800b484:	e026      	b.n	800b4d4 <Data_Analyse+0x120>
	case 4:
		if (ch == 0x0d)
 800b486:	4b16      	ldr	r3, [pc, #88]	@ (800b4e0 <Data_Analyse+0x12c>)
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	2b0d      	cmp	r3, #13
 800b48c:	d117      	bne.n	800b4be <Data_Analyse+0x10a>
		{
			zangle = posture.ActVal[0];
 800b48e:	4b17      	ldr	r3, [pc, #92]	@ (800b4ec <Data_Analyse+0x138>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a17      	ldr	r2, [pc, #92]	@ (800b4f0 <Data_Analyse+0x13c>)
 800b494:	6013      	str	r3, [r2, #0]
			xangle = posture.ActVal[1];
 800b496:	4b15      	ldr	r3, [pc, #84]	@ (800b4ec <Data_Analyse+0x138>)
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	4a16      	ldr	r2, [pc, #88]	@ (800b4f4 <Data_Analyse+0x140>)
 800b49c:	6013      	str	r3, [r2, #0]
			yangle = posture.ActVal[2];
 800b49e:	4b13      	ldr	r3, [pc, #76]	@ (800b4ec <Data_Analyse+0x138>)
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	4a15      	ldr	r2, [pc, #84]	@ (800b4f8 <Data_Analyse+0x144>)
 800b4a4:	6013      	str	r3, [r2, #0]
			pos_x = posture.ActVal[3];
 800b4a6:	4b11      	ldr	r3, [pc, #68]	@ (800b4ec <Data_Analyse+0x138>)
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	4a14      	ldr	r2, [pc, #80]	@ (800b4fc <Data_Analyse+0x148>)
 800b4ac:	6013      	str	r3, [r2, #0]
			pos_y = posture.ActVal[4];
 800b4ae:	4b0f      	ldr	r3, [pc, #60]	@ (800b4ec <Data_Analyse+0x138>)
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	4a13      	ldr	r2, [pc, #76]	@ (800b500 <Data_Analyse+0x14c>)
 800b4b4:	6013      	str	r3, [r2, #0]
			w_z = posture.ActVal[5];
 800b4b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b4ec <Data_Analyse+0x138>)
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	4a12      	ldr	r2, [pc, #72]	@ (800b504 <Data_Analyse+0x150>)
 800b4bc:	6013      	str	r3, [r2, #0]
		}
		count = 0;
 800b4be:	4b09      	ldr	r3, [pc, #36]	@ (800b4e4 <Data_Analyse+0x130>)
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	701a      	strb	r2, [r3, #0]
		break;
 800b4c4:	e006      	b.n	800b4d4 <Data_Analyse+0x120>
	default:
		count = 0;
 800b4c6:	4b07      	ldr	r3, [pc, #28]	@ (800b4e4 <Data_Analyse+0x130>)
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	701a      	strb	r2, [r3, #0]
		break;
 800b4cc:	e002      	b.n	800b4d4 <Data_Analyse+0x120>
		break;
 800b4ce:	bf00      	nop
 800b4d0:	e000      	b.n	800b4d4 <Data_Analyse+0x120>
		break;
 800b4d2:	bf00      	nop
	}
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	24000b10 	.word	0x24000b10
 800b4e4:	24000b11 	.word	0x24000b11
 800b4e8:	24000b12 	.word	0x24000b12
 800b4ec:	24000b14 	.word	0x24000b14
 800b4f0:	24000b00 	.word	0x24000b00
 800b4f4:	24000b04 	.word	0x24000b04
 800b4f8:	24000b08 	.word	0x24000b08
 800b4fc:	24000af8 	.word	0x24000af8
 800b500:	24000afc 	.word	0x24000afc
 800b504:	24000b0c 	.word	0x24000b0c

0800b508 <Move_Arm>:
extern float tx_target;
extern float ty_target;

//控制单个舵机运动
//参数：sevoID:舵机ID，Position:转动角度（这里以270°为例）,Time:转动时间
void Move_Arm(uint8_t servoID, int16_t Position, uint16_t Time) {
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	4603      	mov	r3, r0
 800b510:	71fb      	strb	r3, [r7, #7]
 800b512:	460b      	mov	r3, r1
 800b514:	80bb      	strh	r3, [r7, #4]
 800b516:	4613      	mov	r3, r2
 800b518:	807b      	strh	r3, [r7, #2]
	uint8_t TxBuf[11];
	if (servoID > 31 || !(Time > 0) || Position > 32767) {
 800b51a:	79fb      	ldrb	r3, [r7, #7]
 800b51c:	2b1f      	cmp	r3, #31
 800b51e:	d82b      	bhi.n	800b578 <Move_Arm+0x70>
 800b520:	887b      	ldrh	r3, [r7, #2]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d028      	beq.n	800b578 <Move_Arm+0x70>
		return;
	}
	TxBuf[0] = FRAME_HEADER;
 800b526:	2355      	movs	r3, #85	@ 0x55
 800b528:	733b      	strb	r3, [r7, #12]
	TxBuf[1] = FRAME_HEADER;
 800b52a:	2355      	movs	r3, #85	@ 0x55
 800b52c:	737b      	strb	r3, [r7, #13]
	TxBuf[2] = 8;
 800b52e:	2308      	movs	r3, #8
 800b530:	73bb      	strb	r3, [r7, #14]
	TxBuf[3] = CMD_SERVO_MOVE;
 800b532:	2303      	movs	r3, #3
 800b534:	73fb      	strb	r3, [r7, #15]
	TxBuf[4] = 1;
 800b536:	2301      	movs	r3, #1
 800b538:	743b      	strb	r3, [r7, #16]
	TxBuf[5] = (uint8_t) Time;
 800b53a:	887b      	ldrh	r3, [r7, #2]
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	747b      	strb	r3, [r7, #17]
	TxBuf[6] = (uint8_t) (Time >> 8);
 800b540:	887b      	ldrh	r3, [r7, #2]
 800b542:	0a1b      	lsrs	r3, r3, #8
 800b544:	b29b      	uxth	r3, r3
 800b546:	b2db      	uxtb	r3, r3
 800b548:	74bb      	strb	r3, [r7, #18]
	TxBuf[7] = servoID;
 800b54a:	79fb      	ldrb	r3, [r7, #7]
 800b54c:	74fb      	strb	r3, [r7, #19]
	TxBuf[8] = (uint8_t) Position;
 800b54e:	88bb      	ldrh	r3, [r7, #4]
 800b550:	b2db      	uxtb	r3, r3
 800b552:	753b      	strb	r3, [r7, #20]
	TxBuf[9] = (uint8_t) (Position >> 8);
 800b554:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b558:	121b      	asrs	r3, r3, #8
 800b55a:	b21b      	sxth	r3, r3
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&jixiebi_usart, TxBuf, 10, 0xffff);
 800b560:	f107 010c 	add.w	r1, r7, #12
 800b564:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b568:	220a      	movs	r2, #10
 800b56a:	4805      	ldr	r0, [pc, #20]	@ (800b580 <Move_Arm+0x78>)
 800b56c:	f7fd f978 	bl	8008860 <HAL_UART_Transmit>
	HAL_Delay(5);
 800b570:	2005      	movs	r0, #5
 800b572:	f7f7 fbe3 	bl	8002d3c <HAL_Delay>
 800b576:	e000      	b.n	800b57a <Move_Arm+0x72>
		return;
 800b578:	bf00      	nop

}
 800b57a:	3718      	adds	r7, #24
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	24000654 	.word	0x24000654

0800b584 <catch_Frist>:

}
//步进上升1800  下降1800
extern float x, y;
void catch_Frist(uint16_t Pos1, uint16_t Pos2) //5400
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	4603      	mov	r3, r0
 800b58c:	460a      	mov	r2, r1
 800b58e:	80fb      	strh	r3, [r7, #6]
 800b590:	4613      	mov	r3, r2
 800b592:	80bb      	strh	r3, [r7, #4]
	WritePosEx(0, Pos1, 500, 50); //物料底盘移动
 800b594:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b598:	2332      	movs	r3, #50	@ 0x32
 800b59a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b59e:	2000      	movs	r0, #0
 800b5a0:	f002 f966 	bl	800d870 <WritePosEx>

	Move_Arm(1, Arm_close, time); //爪子闭合
 800b5a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b5a8:	2114      	movs	r1, #20
 800b5aa:	2001      	movs	r0, #1
 800b5ac:	f7ff ffac 	bl	800b508 <Move_Arm>
	HAL_Delay(time);
 800b5b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b5b4:	f7f7 fbc2 	bl	8002d3c <HAL_Delay>
	Drop_Location_Sheng(Emm_Speed, Emm_Acc, 500);
 800b5b8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b5bc:	2132      	movs	r1, #50	@ 0x32
 800b5be:	2032      	movs	r0, #50	@ 0x32
 800b5c0:	f001 f940 	bl	800c844 <Drop_Location_Sheng>
//	HAL_Delay(3000);
	WritePosEx(1, Pos2, 500, 50); //爪子底盘向左
 800b5c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b5c8:	2332      	movs	r3, #50	@ 0x32
 800b5ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b5ce:	2001      	movs	r0, #1
 800b5d0:	f002 f94e 	bl	800d870 <WritePosEx>
	HAL_Delay(3000);
 800b5d4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800b5d8:	f7f7 fbb0 	bl	8002d3c <HAL_Delay>
//	{
//		WritePosEx(1, 4045, 500, 50); //爪子底盘向左
//		HAL_Delay(1500);
//		Grab_count--;
//	}
	Move_Arm(6, 550, time); //爪子下降
 800b5dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b5e0:	f240 2126 	movw	r1, #550	@ 0x226
 800b5e4:	2006      	movs	r0, #6
 800b5e6:	f7ff ff8f 	bl	800b508 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 4500);
 800b5ea:	f241 1294 	movw	r2, #4500	@ 0x1194
 800b5ee:	2132      	movs	r1, #50	@ 0x32
 800b5f0:	2032      	movs	r0, #50	@ 0x32
 800b5f2:	f001 f8e3 	bl	800c7bc <Drop_Location_jiang>
	Move_Arm(1, 190, time); //爪子张开
 800b5f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b5fa:	21be      	movs	r1, #190	@ 0xbe
 800b5fc:	2001      	movs	r0, #1
 800b5fe:	f7ff ff83 	bl	800b508 <Move_Arm>
	HAL_Delay(time);
 800b602:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b606:	f7f7 fb99 	bl	8002d3c <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b60a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b60e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b612:	2006      	movs	r0, #6
 800b614:	f7ff ff78 	bl	800b508 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 500);
 800b618:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b61c:	2132      	movs	r1, #50	@ 0x32
 800b61e:	2032      	movs	r0, #50	@ 0x32
 800b620:	f001 f8cc 	bl	800c7bc <Drop_Location_jiang>

	WritePosEx(1, 4050, 500, 50); //爪子底盘向左
 800b624:	2332      	movs	r3, #50	@ 0x32
 800b626:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b62a:	f640 71d2 	movw	r1, #4050	@ 0xfd2
 800b62e:	2001      	movs	r0, #1
 800b630:	f002 f91e 	bl	800d870 <WritePosEx>
	HAL_Delay(1500);
 800b634:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800b638:	f7f7 fb80 	bl	8002d3c <HAL_Delay>
	Move_Arm(1, 500, time); //爪子张开
 800b63c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b640:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b644:	2001      	movs	r0, #1
 800b646:	f7ff ff5f 	bl	800b508 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 8600);
 800b64a:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b64e:	2132      	movs	r1, #50	@ 0x32
 800b650:	2032      	movs	r0, #50	@ 0x32
 800b652:	f001 f8b3 	bl	800c7bc <Drop_Location_jiang>
}
 800b656:	bf00      	nop
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <catch_Second>:
//上升1800，下降1800
void catch_Second(uint16_t Pos1, uint16_t Pos2) //从地上抓取到车上
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b082      	sub	sp, #8
 800b662:	af00      	add	r7, sp, #0
 800b664:	4603      	mov	r3, r0
 800b666:	460a      	mov	r2, r1
 800b668:	80fb      	strh	r3, [r7, #6]
 800b66a:	4613      	mov	r3, r2
 800b66c:	80bb      	strh	r3, [r7, #4]

	WritePosEx(0, Pos1, 500, 50); //物料底盘移动
 800b66e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b672:	2332      	movs	r3, #50	@ 0x32
 800b674:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b678:	2000      	movs	r0, #0
 800b67a:	f002 f8f9 	bl	800d870 <WritePosEx>
	Move_Arm(1, 500, time); //爪子张开
 800b67e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b682:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b686:	2001      	movs	r0, #1
 800b688:	f7ff ff3e 	bl	800b508 <Move_Arm>
	HAL_Delay(time);
 800b68c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b690:	f7f7 fb54 	bl	8002d3c <HAL_Delay>
	Move_Arm(6, 360, time); //爪子下降
 800b694:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b698:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800b69c:	2006      	movs	r0, #6
 800b69e:	f7ff ff33 	bl	800b508 <Move_Arm>
	HAL_Delay(time);
 800b6a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6a6:	f7f7 fb49 	bl	8002d3c <HAL_Delay>

	Move_Arm(1, Arm_close, time); //爪子闭合
 800b6aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6ae:	2114      	movs	r1, #20
 800b6b0:	2001      	movs	r0, #1
 800b6b2:	f7ff ff29 	bl	800b508 <Move_Arm>
	HAL_Delay(time);
 800b6b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6ba:	f7f7 fb3f 	bl	8002d3c <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b6be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6c2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b6c6:	2006      	movs	r0, #6
 800b6c8:	f7ff ff1e 	bl	800b508 <Move_Arm>
	HAL_Delay(time);
 800b6cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6d0:	f7f7 fb34 	bl	8002d3c <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 1000);
 800b6d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6d8:	2132      	movs	r1, #50	@ 0x32
 800b6da:	2032      	movs	r0, #50	@ 0x32
 800b6dc:	f001 f86e 	bl	800c7bc <Drop_Location_jiang>
	WritePosEx(1, Pos2, 500, 50); //爪子底盘向左
 800b6e0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b6e4:	2332      	movs	r3, #50	@ 0x32
 800b6e6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b6ea:	2001      	movs	r0, #1
 800b6ec:	f002 f8c0 	bl	800d870 <WritePosEx>
	HAL_Delay(5000);
 800b6f0:	f241 3088 	movw	r0, #5000	@ 0x1388
 800b6f4:	f7f7 fb22 	bl	8002d3c <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 5000);
 800b6f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6fc:	2132      	movs	r1, #50	@ 0x32
 800b6fe:	2032      	movs	r0, #50	@ 0x32
 800b700:	f001 f85c 	bl	800c7bc <Drop_Location_jiang>
	Move_Arm(6, 550, time); //爪子下降
 800b704:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b708:	f240 2126 	movw	r1, #550	@ 0x226
 800b70c:	2006      	movs	r0, #6
 800b70e:	f7ff fefb 	bl	800b508 <Move_Arm>
	HAL_Delay(time);
 800b712:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b716:	f7f7 fb11 	bl	8002d3c <HAL_Delay>
	Move_Arm(1, 190, time); //爪子张开
 800b71a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b71e:	21be      	movs	r1, #190	@ 0xbe
 800b720:	2001      	movs	r0, #1
 800b722:	f7ff fef1 	bl	800b508 <Move_Arm>
	HAL_Delay(time);
 800b726:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b72a:	f7f7 fb07 	bl	8002d3c <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b72e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b732:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b736:	2006      	movs	r0, #6
 800b738:	f7ff fee6 	bl	800b508 <Move_Arm>
	HAL_Delay(time);
 800b73c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b740:	f7f7 fafc 	bl	8002d3c <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 5000);
 800b744:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b748:	2132      	movs	r1, #50	@ 0x32
 800b74a:	2032      	movs	r0, #50	@ 0x32
 800b74c:	f001 f836 	bl	800c7bc <Drop_Location_jiang>
	WritePosEx(1, 4045, 500, 50); //爪子底盘向左
 800b750:	2332      	movs	r3, #50	@ 0x32
 800b752:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b756:	f640 71cd 	movw	r1, #4045	@ 0xfcd
 800b75a:	2001      	movs	r0, #1
 800b75c:	f002 f888 	bl	800d870 <WritePosEx>
	HAL_Delay(1500);
 800b760:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800b764:	f7f7 faea 	bl	8002d3c <HAL_Delay>
	Move_Arm(1, 500, time); //爪子张开
 800b768:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b76c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b770:	2001      	movs	r0, #1
 800b772:	f7ff fec9 	bl	800b508 <Move_Arm>
	HAL_Delay(time);
 800b776:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b77a:	f7f7 fadf 	bl	8002d3c <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 11000);
 800b77e:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800b782:	2132      	movs	r1, #50	@ 0x32
 800b784:	2032      	movs	r0, #50	@ 0x32
 800b786:	f001 f819 	bl	800c7bc <Drop_Location_jiang>

}
 800b78a:	bf00      	nop
 800b78c:	3708      	adds	r7, #8
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <Start>:

extern int QR_Flag;
void Start(void) //下降14000
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b082      	sub	sp, #8
 800b796:	af00      	add	r7, sp, #0
//	HAL_Delay(2000);
	bool temp = Move_Line(RunSpeed, RunAcc, 8250);
 800b798:	f242 023a 	movw	r2, #8250	@ 0x203a
 800b79c:	2178      	movs	r1, #120	@ 0x78
 800b79e:	2064      	movs	r0, #100	@ 0x64
 800b7a0:	f000 fdbc 	bl	800c31c <Move_Line>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	71fb      	strb	r3, [r7, #7]
	while(temp != true)
 800b7a8:	e007      	b.n	800b7ba <Start+0x28>
	{
		temp = Move_Line(RunSpeed, RunAcc, 8250);
 800b7aa:	f242 023a 	movw	r2, #8250	@ 0x203a
 800b7ae:	2178      	movs	r1, #120	@ 0x78
 800b7b0:	2064      	movs	r0, #100	@ 0x64
 800b7b2:	f000 fdb3 	bl	800c31c <Move_Line>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	71fb      	strb	r3, [r7, #7]
	while(temp != true)
 800b7ba:	79fb      	ldrb	r3, [r7, #7]
 800b7bc:	f083 0301 	eor.w	r3, r3, #1
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1f1      	bne.n	800b7aa <Start+0x18>
	}
//	先将爪子升起来，避免打到TX2或者物料盘
	Drop_Location_jiang(200, 120, 4000);
 800b7c6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800b7ca:	2178      	movs	r1, #120	@ 0x78
 800b7cc:	20c8      	movs	r0, #200	@ 0xc8
 800b7ce:	f000 fff5 	bl	800c7bc <Drop_Location_jiang>
//	将舵机向外转动
	FT_Servo_Orth();
 800b7d2:	f002 fadb 	bl	800dd8c <FT_Servo_Orth>
//	HAL_Delay(2000);
	Drop_Location_jiang(200, 120, 12000);
 800b7d6:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800b7da:	2178      	movs	r1, #120	@ 0x78
 800b7dc:	20c8      	movs	r0, #200	@ 0xc8
 800b7de:	f000 ffed 	bl	800c7bc <Drop_Location_jiang>
	Move_Arm(1, 500, 300); //爪子张开
 800b7e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b7e6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b7ea:	2001      	movs	r0, #1
 800b7ec:	f7ff fe8c 	bl	800b508 <Move_Arm>
	Move_Arm(6, 500, 300);
 800b7f0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b7f4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b7f8:	2006      	movs	r0, #6
 800b7fa:	f7ff fe85 	bl	800b508 <Move_Arm>
//	Move_Line(RunSpeed, RunAcc, 8250);
//	while (!QR_Flag)
//		;  //等待扫码完成
//	扫码完成后将爪子提起俩
	Drop_Location_jiang(200, 120, 8600);
 800b7fe:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b802:	2178      	movs	r1, #120	@ 0x78
 800b804:	20c8      	movs	r0, #200	@ 0xc8
 800b806:	f000 ffd9 	bl	800c7bc <Drop_Location_jiang>
	Move_Arm(6, 900, 300);
 800b80a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b80e:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800b812:	2006      	movs	r0, #6
 800b814:	f7ff fe78 	bl	800b508 <Move_Arm>
}
 800b818:	bf00      	nop
 800b81a:	3708      	adds	r7, #8
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <put>:
void put(uint16_t Pos1, uint16_t Pos2) {
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	4603      	mov	r3, r0
 800b828:	460a      	mov	r2, r1
 800b82a:	80fb      	strh	r3, [r7, #6]
 800b82c:	4613      	mov	r3, r2
 800b82e:	80bb      	strh	r3, [r7, #4]
	WritePosEx(0, Pos1, 1000, 100); //物料底盘移动
 800b830:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b834:	2364      	movs	r3, #100	@ 0x64
 800b836:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b83a:	2000      	movs	r0, #0
 800b83c:	f002 f818 	bl	800d870 <WritePosEx>
	Move_Arm(6, 1000, time); //爪子上升
 800b840:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b844:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b848:	2006      	movs	r0, #6
 800b84a:	f7ff fe5d 	bl	800b508 <Move_Arm>
	Move_Arm(1, 150, time); //爪子张开
 800b84e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b852:	2196      	movs	r1, #150	@ 0x96
 800b854:	2001      	movs	r0, #1
 800b856:	f7ff fe57 	bl	800b508 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 3500);
 800b85a:	f640 52ac 	movw	r2, #3500	@ 0xdac
 800b85e:	2132      	movs	r1, #50	@ 0x32
 800b860:	2032      	movs	r0, #50	@ 0x32
 800b862:	f000 ffab 	bl	800c7bc <Drop_Location_jiang>
	HAL_Delay(1000);
 800b866:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b86a:	f7f7 fa67 	bl	8002d3c <HAL_Delay>
	WritePosEx(1, Pos2, 800, 50); //爪子底盘向左
 800b86e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b872:	2332      	movs	r3, #50	@ 0x32
 800b874:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800b878:	2001      	movs	r0, #1
 800b87a:	f001 fff9 	bl	800d870 <WritePosEx>
	HAL_Delay(2000);                                       //延时是为了抓取底盘降下来，防止变转变降
 800b87e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b882:	f7f7 fa5b 	bl	8002d3c <HAL_Delay>
	Move_Arm(6, 410, time); //爪子下降
 800b886:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b88a:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800b88e:	2006      	movs	r0, #6
 800b890:	f7ff fe3a 	bl	800b508 <Move_Arm>
	HAL_Delay(time);
 800b894:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b898:	f7f7 fa50 	bl	8002d3c <HAL_Delay>
	Move_Arm(1, Arm_close, time); //爪子闭合
 800b89c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b8a0:	2114      	movs	r1, #20
 800b8a2:	2001      	movs	r0, #1
 800b8a4:	f7ff fe30 	bl	800b508 <Move_Arm>
	HAL_Delay(time);
 800b8a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b8ac:	f7f7 fa46 	bl	8002d3c <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b8b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b8b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b8b8:	2006      	movs	r0, #6
 800b8ba:	f7ff fe25 	bl	800b508 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 1000);
 800b8be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b8c2:	2132      	movs	r1, #50	@ 0x32
 800b8c4:	2032      	movs	r0, #50	@ 0x32
 800b8c6:	f000 ff79 	bl	800c7bc <Drop_Location_jiang>
	WritePosEx(1, 4100, 800, 50); //抓取底盘向摆放位置
 800b8ca:	2332      	movs	r3, #50	@ 0x32
 800b8cc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800b8d0:	f241 0104 	movw	r1, #4100	@ 0x1004
 800b8d4:	2001      	movs	r0, #1
 800b8d6:	f001 ffcb 	bl	800d870 <WritePosEx>
	HAL_Delay(2000);                                        //延时是为了让抓取底盘转过来
 800b8da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b8de:	f7f7 fa2d 	bl	8002d3c <HAL_Delay>
	Move_Arm(6, 360, time); //爪子下降
 800b8e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b8e6:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800b8ea:	2006      	movs	r0, #6
 800b8ec:	f7ff fe0c 	bl	800b508 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 11000);
 800b8f0:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800b8f4:	2132      	movs	r1, #50	@ 0x32
 800b8f6:	2032      	movs	r0, #50	@ 0x32
 800b8f8:	f000 ff60 	bl	800c7bc <Drop_Location_jiang>
	Move_Arm(1, 500, time); //爪子张开
 800b8fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b900:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b904:	2001      	movs	r0, #1
 800b906:	f7ff fdff 	bl	800b508 <Move_Arm>

}
 800b90a:	bf00      	nop
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
	...

0800b914 <put_wuliao_to_circular_second>:
		}

	}
}

void put_wuliao_to_circular_second(void) {
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 800b91a:	2300      	movs	r3, #0
 800b91c:	607b      	str	r3, [r7, #4]
 800b91e:	e067      	b.n	800b9f0 <put_wuliao_to_circular_second+0xdc>
		if (QR_data[i] + 3 == 4) {
 800b920:	4a3a      	ldr	r2, [pc, #232]	@ (800ba0c <put_wuliao_to_circular_second+0xf8>)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d105      	bne.n	800b938 <put_wuliao_to_circular_second+0x24>
			Move_Action_Nopid_Forward_Ctrl(954, 1850);
 800b92c:	eddf 0a38 	vldr	s1, [pc, #224]	@ 800ba10 <put_wuliao_to_circular_second+0xfc>
 800b930:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800ba14 <put_wuliao_to_circular_second+0x100>
 800b934:	f001 fa28 	bl	800cd88 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (QR_data[i] + 3 == 5) {
 800b938:	4a34      	ldr	r2, [pc, #208]	@ (800ba0c <put_wuliao_to_circular_second+0xf8>)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b940:	2b02      	cmp	r3, #2
 800b942:	d105      	bne.n	800b950 <put_wuliao_to_circular_second+0x3c>
			Move_Action_Nopid_Forward_Ctrl(1050, 1850);
 800b944:	eddf 0a32 	vldr	s1, [pc, #200]	@ 800ba10 <put_wuliao_to_circular_second+0xfc>
 800b948:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 800ba18 <put_wuliao_to_circular_second+0x104>
 800b94c:	f001 fa1c 	bl	800cd88 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (QR_data[i] + 3 == 6) {
 800b950:	4a2e      	ldr	r2, [pc, #184]	@ (800ba0c <put_wuliao_to_circular_second+0xf8>)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b958:	2b03      	cmp	r3, #3
 800b95a:	d105      	bne.n	800b968 <put_wuliao_to_circular_second+0x54>
			Move_Action_Nopid_Forward_Ctrl(1208, 1850);
 800b95c:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800ba10 <put_wuliao_to_circular_second+0xfc>
 800b960:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 800ba1c <put_wuliao_to_circular_second+0x108>
 800b964:	f001 fa10 	bl	800cd88 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (i == 0) {
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d112      	bne.n	800b994 <put_wuliao_to_circular_second+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800b96e:	4b2c      	ldr	r3, [pc, #176]	@ (800ba20 <put_wuliao_to_circular_second+0x10c>)
 800b970:	edd3 7a00 	vldr	s15, [r3]
 800b974:	4b2b      	ldr	r3, [pc, #172]	@ (800ba24 <put_wuliao_to_circular_second+0x110>)
 800b976:	ed93 7a00 	vldr	s14, [r3]
 800b97a:	eef0 0a47 	vmov.f32	s1, s14
 800b97e:	eeb0 0a67 	vmov.f32	s0, s15
 800b982:	f001 fcc1 	bl	800d308 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800b986:	f640 2178 	movw	r1, #2680	@ 0xa78
 800b98a:	f640 0066 	movw	r0, #2150	@ 0x866
 800b98e:	f7ff ff47 	bl	800b820 <put>
 800b992:	e02a      	b.n	800b9ea <put_wuliao_to_circular_second+0xd6>

		} else if (i == 1) {
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b01      	cmp	r3, #1
 800b998:	d112      	bne.n	800b9c0 <put_wuliao_to_circular_second+0xac>

			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800b99a:	4b21      	ldr	r3, [pc, #132]	@ (800ba20 <put_wuliao_to_circular_second+0x10c>)
 800b99c:	edd3 7a00 	vldr	s15, [r3]
 800b9a0:	4b20      	ldr	r3, [pc, #128]	@ (800ba24 <put_wuliao_to_circular_second+0x110>)
 800b9a2:	ed93 7a00 	vldr	s14, [r3]
 800b9a6:	eef0 0a47 	vmov.f32	s1, s14
 800b9aa:	eeb0 0a67 	vmov.f32	s0, s15
 800b9ae:	f001 fcab 	bl	800d308 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800b9b2:	f640 2178 	movw	r1, #2680	@ 0xa78
 800b9b6:	f640 4085 	movw	r0, #3205	@ 0xc85
 800b9ba:	f7ff ff31 	bl	800b820 <put>
 800b9be:	e014      	b.n	800b9ea <put_wuliao_to_circular_second+0xd6>
		} else if (i == 2) {
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	d111      	bne.n	800b9ea <put_wuliao_to_circular_second+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800b9c6:	4b16      	ldr	r3, [pc, #88]	@ (800ba20 <put_wuliao_to_circular_second+0x10c>)
 800b9c8:	edd3 7a00 	vldr	s15, [r3]
 800b9cc:	4b15      	ldr	r3, [pc, #84]	@ (800ba24 <put_wuliao_to_circular_second+0x110>)
 800b9ce:	ed93 7a00 	vldr	s14, [r3]
 800b9d2:	eef0 0a47 	vmov.f32	s1, s14
 800b9d6:	eeb0 0a67 	vmov.f32	s0, s15
 800b9da:	f001 fc95 	bl	800d308 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800b9de:	f640 1142 	movw	r1, #2370	@ 0x942
 800b9e2:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800b9e6:	f7ff ff1b 	bl	800b820 <put>
	for (int i = 0; i < 3; i++) {
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	607b      	str	r3, [r7, #4]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	dd94      	ble.n	800b920 <put_wuliao_to_circular_second+0xc>
		}

	}
	Move_Action_Nopid_Forward_Ctrl(1000, 1850);
 800b9f6:	eddf 0a06 	vldr	s1, [pc, #24]	@ 800ba10 <put_wuliao_to_circular_second+0xfc>
 800b9fa:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800ba28 <put_wuliao_to_circular_second+0x114>
 800b9fe:	f001 f9c3 	bl	800cd88 <Move_Action_Nopid_Forward_Ctrl>
}
 800ba02:	bf00      	nop
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	24000460 	.word	0x24000460
 800ba10:	44e74000 	.word	0x44e74000
 800ba14:	446e8000 	.word	0x446e8000
 800ba18:	44834000 	.word	0x44834000
 800ba1c:	44970000 	.word	0x44970000
 800ba20:	24000000 	.word	0x24000000
 800ba24:	24000004 	.word	0x24000004
 800ba28:	447a0000 	.word	0x447a0000

0800ba2c <Second_Run_Frist_Grab_Wuliao>:

/*************************第二次抓取***********************************************/
void Second_Run_Frist_Grab_Wuliao(void) {
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	af00      	add	r7, sp, #0
	static uint8_t Grab_count = 0;
	wuliao_falg = 0;
 800ba30:	4b2a      	ldr	r3, [pc, #168]	@ (800badc <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	601a      	str	r2, [r3, #0]
	while (Grab_count < 3) {
 800ba36:	e04a      	b.n	800bace <Second_Run_Frist_Grab_Wuliao+0xa2>
		if (QR_data[3] == colour && wuliao_falg == 0) {
 800ba38:	4b29      	ldr	r3, [pc, #164]	@ (800bae0 <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800ba3a:	68da      	ldr	r2, [r3, #12]
 800ba3c:	4b29      	ldr	r3, [pc, #164]	@ (800bae4 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d112      	bne.n	800ba6a <Second_Run_Frist_Grab_Wuliao+0x3e>
 800ba44:	4b25      	ldr	r3, [pc, #148]	@ (800badc <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d10e      	bne.n	800ba6a <Second_Run_Frist_Grab_Wuliao+0x3e>
			catch_Frist(860, 2375);
 800ba4c:	f640 1147 	movw	r1, #2375	@ 0x947
 800ba50:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800ba54:	f7ff fd96 	bl	800b584 <catch_Frist>
			wuliao_falg = 1;
 800ba58:	4b20      	ldr	r3, [pc, #128]	@ (800badc <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800ba5e:	4b22      	ldr	r3, [pc, #136]	@ (800bae8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	3301      	adds	r3, #1
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	4b20      	ldr	r3, [pc, #128]	@ (800bae8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800ba68:	701a      	strb	r2, [r3, #0]
		}
		if (QR_data[4] == colour && wuliao_falg == 1) {
 800ba6a:	4b1d      	ldr	r3, [pc, #116]	@ (800bae0 <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800ba6c:	691a      	ldr	r2, [r3, #16]
 800ba6e:	4b1d      	ldr	r3, [pc, #116]	@ (800bae4 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d112      	bne.n	800ba9c <Second_Run_Frist_Grab_Wuliao+0x70>
 800ba76:	4b19      	ldr	r3, [pc, #100]	@ (800badc <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d10e      	bne.n	800ba9c <Second_Run_Frist_Grab_Wuliao+0x70>
			catch_Frist(1910, 2370);
 800ba7e:	f640 1142 	movw	r1, #2370	@ 0x942
 800ba82:	f240 7076 	movw	r0, #1910	@ 0x776
 800ba86:	f7ff fd7d 	bl	800b584 <catch_Frist>
			wuliao_falg = 2;
 800ba8a:	4b14      	ldr	r3, [pc, #80]	@ (800badc <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800ba8c:	2202      	movs	r2, #2
 800ba8e:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800ba90:	4b15      	ldr	r3, [pc, #84]	@ (800bae8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	3301      	adds	r3, #1
 800ba96:	b2da      	uxtb	r2, r3
 800ba98:	4b13      	ldr	r3, [pc, #76]	@ (800bae8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800ba9a:	701a      	strb	r2, [r3, #0]
		}
		if (QR_data[5] == colour && wuliao_falg == 2) {
 800ba9c:	4b10      	ldr	r3, [pc, #64]	@ (800bae0 <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800ba9e:	695a      	ldr	r2, [r3, #20]
 800baa0:	4b10      	ldr	r3, [pc, #64]	@ (800bae4 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d112      	bne.n	800bace <Second_Run_Frist_Grab_Wuliao+0xa2>
 800baa8:	4b0c      	ldr	r3, [pc, #48]	@ (800badc <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b02      	cmp	r3, #2
 800baae:	d10e      	bne.n	800bace <Second_Run_Frist_Grab_Wuliao+0xa2>
			catch_Frist(2960, 2370);
 800bab0:	f640 1142 	movw	r1, #2370	@ 0x942
 800bab4:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bab8:	f7ff fd64 	bl	800b584 <catch_Frist>
			wuliao_falg = 0;
 800babc:	4b07      	ldr	r3, [pc, #28]	@ (800badc <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800babe:	2200      	movs	r2, #0
 800bac0:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bac2:	4b09      	ldr	r3, [pc, #36]	@ (800bae8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	3301      	adds	r3, #1
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	4b07      	ldr	r3, [pc, #28]	@ (800bae8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bacc:	701a      	strb	r2, [r3, #0]
	while (Grab_count < 3) {
 800bace:	4b06      	ldr	r3, [pc, #24]	@ (800bae8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d9b0      	bls.n	800ba38 <Second_Run_Frist_Grab_Wuliao+0xc>
		}

	}
}
 800bad6:	bf00      	nop
 800bad8:	bf00      	nop
 800bada:	bd80      	pop	{r7, pc}
 800badc:	24000480 	.word	0x24000480
 800bae0:	24000460 	.word	0x24000460
 800bae4:	2400047c 	.word	0x2400047c
 800bae8:	24000b2c 	.word	0x24000b2c

0800baec <Second_Run_put_wuliao_to_Car_frist>:
void Second_Run_put_wuliao_to_Car_frist(void) {
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
	for (int i = 3; i < 6; i++) {
 800baf2:	2303      	movs	r3, #3
 800baf4:	607b      	str	r3, [r7, #4]
 800baf6:	e067      	b.n	800bbc8 <Second_Run_put_wuliao_to_Car_frist+0xdc>
		if (QR_data[i] == 1) {
 800baf8:	4a37      	ldr	r2, [pc, #220]	@ (800bbd8 <Second_Run_put_wuliao_to_Car_frist+0xec>)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d105      	bne.n	800bb10 <Second_Run_put_wuliao_to_Car_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800bb04:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800bbdc <Second_Run_put_wuliao_to_Car_frist+0xf0>
 800bb08:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800bbe0 <Second_Run_put_wuliao_to_Car_frist+0xf4>
 800bb0c:	f001 fa9c 	bl	800d048 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 2) {
 800bb10:	4a31      	ldr	r2, [pc, #196]	@ (800bbd8 <Second_Run_put_wuliao_to_Car_frist+0xec>)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d105      	bne.n	800bb28 <Second_Run_put_wuliao_to_Car_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800bb1c:	eddf 0a31 	vldr	s1, [pc, #196]	@ 800bbe4 <Second_Run_put_wuliao_to_Car_frist+0xf8>
 800bb20:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800bbe0 <Second_Run_put_wuliao_to_Car_frist+0xf4>
 800bb24:	f001 fa90 	bl	800d048 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800bb28:	4a2b      	ldr	r2, [pc, #172]	@ (800bbd8 <Second_Run_put_wuliao_to_Car_frist+0xec>)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb30:	2b03      	cmp	r3, #3
 800bb32:	d105      	bne.n	800bb40 <Second_Run_put_wuliao_to_Car_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800bb34:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800bbe8 <Second_Run_put_wuliao_to_Car_frist+0xfc>
 800bb38:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800bbe0 <Second_Run_put_wuliao_to_Car_frist+0xf4>
 800bb3c:	f001 fa84 	bl	800d048 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 3) {
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b03      	cmp	r3, #3
 800bb44:	d112      	bne.n	800bb6c <Second_Run_put_wuliao_to_Car_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bb46:	4b29      	ldr	r3, [pc, #164]	@ (800bbec <Second_Run_put_wuliao_to_Car_frist+0x100>)
 800bb48:	edd3 7a00 	vldr	s15, [r3]
 800bb4c:	4b28      	ldr	r3, [pc, #160]	@ (800bbf0 <Second_Run_put_wuliao_to_Car_frist+0x104>)
 800bb4e:	ed93 7a00 	vldr	s14, [r3]
 800bb52:	eef0 0a47 	vmov.f32	s1, s14
 800bb56:	eeb0 0a67 	vmov.f32	s0, s15
 800bb5a:	f001 fbd5 	bl	800d308 <Move_Tx_Pid_Ctrl>
			catch_Second(860, 2375);
 800bb5e:	f640 1147 	movw	r1, #2375	@ 0x947
 800bb62:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800bb66:	f7ff fd7a 	bl	800b65e <catch_Second>
 800bb6a:	e02a      	b.n	800bbc2 <Second_Run_put_wuliao_to_Car_frist+0xd6>

		} else if (i == 4) {
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b04      	cmp	r3, #4
 800bb70:	d112      	bne.n	800bb98 <Second_Run_put_wuliao_to_Car_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bb72:	4b1e      	ldr	r3, [pc, #120]	@ (800bbec <Second_Run_put_wuliao_to_Car_frist+0x100>)
 800bb74:	edd3 7a00 	vldr	s15, [r3]
 800bb78:	4b1d      	ldr	r3, [pc, #116]	@ (800bbf0 <Second_Run_put_wuliao_to_Car_frist+0x104>)
 800bb7a:	ed93 7a00 	vldr	s14, [r3]
 800bb7e:	eef0 0a47 	vmov.f32	s1, s14
 800bb82:	eeb0 0a67 	vmov.f32	s0, s15
 800bb86:	f001 fbbf 	bl	800d308 <Move_Tx_Pid_Ctrl>
			catch_Second(1910, 2370);
 800bb8a:	f640 1142 	movw	r1, #2370	@ 0x942
 800bb8e:	f240 7076 	movw	r0, #1910	@ 0x776
 800bb92:	f7ff fd64 	bl	800b65e <catch_Second>
 800bb96:	e014      	b.n	800bbc2 <Second_Run_put_wuliao_to_Car_frist+0xd6>
		} else if (i == 5) {
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b05      	cmp	r3, #5
 800bb9c:	d111      	bne.n	800bbc2 <Second_Run_put_wuliao_to_Car_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bb9e:	4b13      	ldr	r3, [pc, #76]	@ (800bbec <Second_Run_put_wuliao_to_Car_frist+0x100>)
 800bba0:	edd3 7a00 	vldr	s15, [r3]
 800bba4:	4b12      	ldr	r3, [pc, #72]	@ (800bbf0 <Second_Run_put_wuliao_to_Car_frist+0x104>)
 800bba6:	ed93 7a00 	vldr	s14, [r3]
 800bbaa:	eef0 0a47 	vmov.f32	s1, s14
 800bbae:	eeb0 0a67 	vmov.f32	s0, s15
 800bbb2:	f001 fba9 	bl	800d308 <Move_Tx_Pid_Ctrl>
			catch_Second(2960, 2370);
 800bbb6:	f640 1142 	movw	r1, #2370	@ 0x942
 800bbba:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bbbe:	f7ff fd4e 	bl	800b65e <catch_Second>
	for (int i = 3; i < 6; i++) {
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	607b      	str	r3, [r7, #4]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2b05      	cmp	r3, #5
 800bbcc:	dd94      	ble.n	800baf8 <Second_Run_put_wuliao_to_Car_frist+0xc>
		}

	}
}
 800bbce:	bf00      	nop
 800bbd0:	bf00      	nop
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	24000460 	.word	0x24000460
 800bbdc:	44960000 	.word	0x44960000
 800bbe0:	44e74000 	.word	0x44e74000
 800bbe4:	44834000 	.word	0x44834000
 800bbe8:	445d4000 	.word	0x445d4000
 800bbec:	24000000 	.word	0x24000000
 800bbf0:	24000004 	.word	0x24000004

0800bbf4 <Second_Run_put_wuliao_to_circular_frist>:

void Second_Run_put_wuliao_to_circular_frist(void) {
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0

	for (int i = 3; i < 6; i++) {
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	607b      	str	r3, [r7, #4]
 800bbfe:	e067      	b.n	800bcd0 <Second_Run_put_wuliao_to_circular_frist+0xdc>
		if (QR_data[i] == 1) {
 800bc00:	4a37      	ldr	r2, [pc, #220]	@ (800bce0 <Second_Run_put_wuliao_to_circular_frist+0xec>)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d105      	bne.n	800bc18 <Second_Run_put_wuliao_to_circular_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(910, 1910);
 800bc0c:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800bce4 <Second_Run_put_wuliao_to_circular_frist+0xf0>
 800bc10:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800bce8 <Second_Run_put_wuliao_to_circular_frist+0xf4>
 800bc14:	f001 fa18 	bl	800d048 <Move_Action_Nopid_Right_Ctrl>

		}
		if (QR_data[i] == 2) {
 800bc18:	4a31      	ldr	r2, [pc, #196]	@ (800bce0 <Second_Run_put_wuliao_to_circular_frist+0xec>)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d105      	bne.n	800bc30 <Second_Run_put_wuliao_to_circular_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1060, 1910);
 800bc24:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 800bce4 <Second_Run_put_wuliao_to_circular_frist+0xf0>
 800bc28:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 800bcec <Second_Run_put_wuliao_to_circular_frist+0xf8>
 800bc2c:	f001 fa0c 	bl	800d048 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800bc30:	4a2b      	ldr	r2, [pc, #172]	@ (800bce0 <Second_Run_put_wuliao_to_circular_frist+0xec>)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc38:	2b03      	cmp	r3, #3
 800bc3a:	d105      	bne.n	800bc48 <Second_Run_put_wuliao_to_circular_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1185, 1910);
 800bc3c:	eddf 0a29 	vldr	s1, [pc, #164]	@ 800bce4 <Second_Run_put_wuliao_to_circular_frist+0xf0>
 800bc40:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800bcf0 <Second_Run_put_wuliao_to_circular_frist+0xfc>
 800bc44:	f001 fa00 	bl	800d048 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 3) {
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2b03      	cmp	r3, #3
 800bc4c:	d112      	bne.n	800bc74 <Second_Run_put_wuliao_to_circular_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bc4e:	4b29      	ldr	r3, [pc, #164]	@ (800bcf4 <Second_Run_put_wuliao_to_circular_frist+0x100>)
 800bc50:	edd3 7a00 	vldr	s15, [r3]
 800bc54:	4b28      	ldr	r3, [pc, #160]	@ (800bcf8 <Second_Run_put_wuliao_to_circular_frist+0x104>)
 800bc56:	ed93 7a00 	vldr	s14, [r3]
 800bc5a:	eef0 0a47 	vmov.f32	s1, s14
 800bc5e:	eeb0 0a67 	vmov.f32	s0, s15
 800bc62:	f001 fb51 	bl	800d308 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800bc66:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bc6a:	f640 0066 	movw	r0, #2150	@ 0x866
 800bc6e:	f7ff fdd7 	bl	800b820 <put>
 800bc72:	e02a      	b.n	800bcca <Second_Run_put_wuliao_to_circular_frist+0xd6>
		} else if (i == 4) {
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b04      	cmp	r3, #4
 800bc78:	d112      	bne.n	800bca0 <Second_Run_put_wuliao_to_circular_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bc7a:	4b1e      	ldr	r3, [pc, #120]	@ (800bcf4 <Second_Run_put_wuliao_to_circular_frist+0x100>)
 800bc7c:	edd3 7a00 	vldr	s15, [r3]
 800bc80:	4b1d      	ldr	r3, [pc, #116]	@ (800bcf8 <Second_Run_put_wuliao_to_circular_frist+0x104>)
 800bc82:	ed93 7a00 	vldr	s14, [r3]
 800bc86:	eef0 0a47 	vmov.f32	s1, s14
 800bc8a:	eeb0 0a67 	vmov.f32	s0, s15
 800bc8e:	f001 fb3b 	bl	800d308 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800bc92:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bc96:	f640 4085 	movw	r0, #3205	@ 0xc85
 800bc9a:	f7ff fdc1 	bl	800b820 <put>
 800bc9e:	e014      	b.n	800bcca <Second_Run_put_wuliao_to_circular_frist+0xd6>
		} else if (i == 5) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b05      	cmp	r3, #5
 800bca4:	d111      	bne.n	800bcca <Second_Run_put_wuliao_to_circular_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bca6:	4b13      	ldr	r3, [pc, #76]	@ (800bcf4 <Second_Run_put_wuliao_to_circular_frist+0x100>)
 800bca8:	edd3 7a00 	vldr	s15, [r3]
 800bcac:	4b12      	ldr	r3, [pc, #72]	@ (800bcf8 <Second_Run_put_wuliao_to_circular_frist+0x104>)
 800bcae:	ed93 7a00 	vldr	s14, [r3]
 800bcb2:	eef0 0a47 	vmov.f32	s1, s14
 800bcb6:	eeb0 0a67 	vmov.f32	s0, s15
 800bcba:	f001 fb25 	bl	800d308 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800bcbe:	f640 1142 	movw	r1, #2370	@ 0x942
 800bcc2:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bcc6:	f7ff fdab 	bl	800b820 <put>
	for (int i = 3; i < 6; i++) {
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	3301      	adds	r3, #1
 800bcce:	607b      	str	r3, [r7, #4]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b05      	cmp	r3, #5
 800bcd4:	dd94      	ble.n	800bc00 <Second_Run_put_wuliao_to_circular_frist+0xc>
		}

	}
}
 800bcd6:	bf00      	nop
 800bcd8:	bf00      	nop
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	24000460 	.word	0x24000460
 800bce4:	44eec000 	.word	0x44eec000
 800bce8:	44638000 	.word	0x44638000
 800bcec:	44848000 	.word	0x44848000
 800bcf0:	44942000 	.word	0x44942000
 800bcf4:	24000000 	.word	0x24000000
 800bcf8:	24000004 	.word	0x24000004

0800bcfc <Emm_V5_Pos_Control>:
 * @param    raF ：相位/绝对标志，false为相对运动，true为绝对值运动
 * @param    snF ：多机同步标志 ，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Pos_Control(uint8_t addr, uint8_t dir, uint16_t vel, uint8_t acc,
		uint32_t clk, bool raF, bool snF) {
 800bcfc:	b590      	push	{r4, r7, lr}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	4604      	mov	r4, r0
 800bd04:	4608      	mov	r0, r1
 800bd06:	4611      	mov	r1, r2
 800bd08:	461a      	mov	r2, r3
 800bd0a:	4623      	mov	r3, r4
 800bd0c:	71fb      	strb	r3, [r7, #7]
 800bd0e:	4603      	mov	r3, r0
 800bd10:	71bb      	strb	r3, [r7, #6]
 800bd12:	460b      	mov	r3, r1
 800bd14:	80bb      	strh	r3, [r7, #4]
 800bd16:	4613      	mov	r3, r2
 800bd18:	70fb      	strb	r3, [r7, #3]

	// 装载命令
	cmd[0] = addr;                      // 地址
 800bd1a:	4a20      	ldr	r2, [pc, #128]	@ (800bd9c <Emm_V5_Pos_Control+0xa0>)
 800bd1c:	79fb      	ldrb	r3, [r7, #7]
 800bd1e:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFD;                      // 功能码
 800bd20:	4b1e      	ldr	r3, [pc, #120]	@ (800bd9c <Emm_V5_Pos_Control+0xa0>)
 800bd22:	22fd      	movs	r2, #253	@ 0xfd
 800bd24:	705a      	strb	r2, [r3, #1]
	cmd[2] = dir;                       // 方向
 800bd26:	4a1d      	ldr	r2, [pc, #116]	@ (800bd9c <Emm_V5_Pos_Control+0xa0>)
 800bd28:	79bb      	ldrb	r3, [r7, #6]
 800bd2a:	7093      	strb	r3, [r2, #2]
	cmd[3] = (uint8_t) (vel >> 8);       // 速度(RPM)高8位字节
 800bd2c:	88bb      	ldrh	r3, [r7, #4]
 800bd2e:	0a1b      	lsrs	r3, r3, #8
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	4b19      	ldr	r3, [pc, #100]	@ (800bd9c <Emm_V5_Pos_Control+0xa0>)
 800bd36:	70da      	strb	r2, [r3, #3]
	cmd[4] = (uint8_t) (vel >> 0);       // 速度(RPM)低8位字节
 800bd38:	88bb      	ldrh	r3, [r7, #4]
 800bd3a:	b2da      	uxtb	r2, r3
 800bd3c:	4b17      	ldr	r3, [pc, #92]	@ (800bd9c <Emm_V5_Pos_Control+0xa0>)
 800bd3e:	711a      	strb	r2, [r3, #4]
	cmd[5] = acc;                       // 加速度，注意：0是直接启动
 800bd40:	4a16      	ldr	r2, [pc, #88]	@ (800bd9c <Emm_V5_Pos_Control+0xa0>)
 800bd42:	78fb      	ldrb	r3, [r7, #3]
 800bd44:	7153      	strb	r3, [r2, #5]
	cmd[6] = (uint8_t) (clk >> 24);      // 脉冲数(bit24 - bit31)
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	0e1b      	lsrs	r3, r3, #24
 800bd4a:	b2da      	uxtb	r2, r3
 800bd4c:	4b13      	ldr	r3, [pc, #76]	@ (800bd9c <Emm_V5_Pos_Control+0xa0>)
 800bd4e:	719a      	strb	r2, [r3, #6]
	cmd[7] = (uint8_t) (clk >> 16);      // 脉冲数(bit16 - bit23)
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	0c1b      	lsrs	r3, r3, #16
 800bd54:	b2da      	uxtb	r2, r3
 800bd56:	4b11      	ldr	r3, [pc, #68]	@ (800bd9c <Emm_V5_Pos_Control+0xa0>)
 800bd58:	71da      	strb	r2, [r3, #7]
	cmd[8] = (uint8_t) (clk >> 8);       // 脉冲数(bit8  - bit15)
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	0a1b      	lsrs	r3, r3, #8
 800bd5e:	b2da      	uxtb	r2, r3
 800bd60:	4b0e      	ldr	r3, [pc, #56]	@ (800bd9c <Emm_V5_Pos_Control+0xa0>)
 800bd62:	721a      	strb	r2, [r3, #8]
	cmd[9] = (uint8_t) (clk >> 0);       // 脉冲数(bit0  - bit7 )
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	b2da      	uxtb	r2, r3
 800bd68:	4b0c      	ldr	r3, [pc, #48]	@ (800bd9c <Emm_V5_Pos_Control+0xa0>)
 800bd6a:	725a      	strb	r2, [r3, #9]
	cmd[10] = raF;                       // 相位/绝对标志，false为相对运动，true为绝对值运动
 800bd6c:	7f3a      	ldrb	r2, [r7, #28]
 800bd6e:	4b0b      	ldr	r3, [pc, #44]	@ (800bd9c <Emm_V5_Pos_Control+0xa0>)
 800bd70:	729a      	strb	r2, [r3, #10]
	cmd[11] = snF;                       // 多机同步运动标志，false为不启用，true为启用
 800bd72:	f897 2020 	ldrb.w	r2, [r7, #32]
 800bd76:	4b09      	ldr	r3, [pc, #36]	@ (800bd9c <Emm_V5_Pos_Control+0xa0>)
 800bd78:	72da      	strb	r2, [r3, #11]
	cmd[12] = 0x6B;                      // 校验字节
 800bd7a:	4b08      	ldr	r3, [pc, #32]	@ (800bd9c <Emm_V5_Pos_Control+0xa0>)
 800bd7c:	226b      	movs	r2, #107	@ 0x6b
 800bd7e:	731a      	strb	r2, [r3, #12]

	// 发送命令
	FDCAN_Send_Msg(cmd, 13);
 800bd80:	210d      	movs	r1, #13
 800bd82:	4806      	ldr	r0, [pc, #24]	@ (800bd9c <Emm_V5_Pos_Control+0xa0>)
 800bd84:	f7f4 ff88 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(10);
 800bd88:	200a      	movs	r0, #10
 800bd8a:	f7f6 ffd7 	bl	8002d3c <HAL_Delay>
	Emm_mode = 1;
 800bd8e:	4b04      	ldr	r3, [pc, #16]	@ (800bda0 <Emm_V5_Pos_Control+0xa4>)
 800bd90:	2201      	movs	r2, #1
 800bd92:	701a      	strb	r2, [r3, #0]
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd90      	pop	{r4, r7, pc}
 800bd9c:	24000b30 	.word	0x24000b30
 800bda0:	2400029c 	.word	0x2400029c

0800bda4 <Emm_V5_Stop_Now>:
 * @brief    立即停止（所有控制模式都通用）
 * @param    addr  ：电机地址
 * @param    snF   ：多机同步标志，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Stop_Now(uint8_t addr, bool snF) {
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	4603      	mov	r3, r0
 800bdac:	460a      	mov	r2, r1
 800bdae:	71fb      	strb	r3, [r7, #7]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	71bb      	strb	r3, [r7, #6]

	// 装载命令
	cmd[0] = addr;                       // 地址
 800bdb4:	4a0b      	ldr	r2, [pc, #44]	@ (800bde4 <Emm_V5_Stop_Now+0x40>)
 800bdb6:	79fb      	ldrb	r3, [r7, #7]
 800bdb8:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFE;                       // 功能码
 800bdba:	4b0a      	ldr	r3, [pc, #40]	@ (800bde4 <Emm_V5_Stop_Now+0x40>)
 800bdbc:	22fe      	movs	r2, #254	@ 0xfe
 800bdbe:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x98;                       // 辅助码
 800bdc0:	4b08      	ldr	r3, [pc, #32]	@ (800bde4 <Emm_V5_Stop_Now+0x40>)
 800bdc2:	2298      	movs	r2, #152	@ 0x98
 800bdc4:	709a      	strb	r2, [r3, #2]
	cmd[3] = snF;                        // 多机同步运动标志
 800bdc6:	79ba      	ldrb	r2, [r7, #6]
 800bdc8:	4b06      	ldr	r3, [pc, #24]	@ (800bde4 <Emm_V5_Stop_Now+0x40>)
 800bdca:	70da      	strb	r2, [r3, #3]
	cmd[4] = 0x6B;                       // 校验字节
 800bdcc:	4b05      	ldr	r3, [pc, #20]	@ (800bde4 <Emm_V5_Stop_Now+0x40>)
 800bdce:	226b      	movs	r2, #107	@ 0x6b
 800bdd0:	711a      	strb	r2, [r3, #4]

	// 发送命令
	FDCAN_Send_Msg(cmd, 5);
 800bdd2:	2105      	movs	r1, #5
 800bdd4:	4803      	ldr	r0, [pc, #12]	@ (800bde4 <Emm_V5_Stop_Now+0x40>)
 800bdd6:	f7f4 ff5f 	bl	8000c98 <FDCAN_Send_Msg>
}
 800bdda:	bf00      	nop
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	24000b30 	.word	0x24000b30

0800bde8 <Emm_V5_Synchronous_motion>:
/**
 * @brief    多机同步运动
 * @param    addr  ：电机地址
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Synchronous_motion(void) {
 800bde8:	b580      	push	{r7, lr}
 800bdea:	af00      	add	r7, sp, #0

	// 装载命令
	cmd[0] = 0x00;                       // 地址
 800bdec:	4b0a      	ldr	r3, [pc, #40]	@ (800be18 <Emm_V5_Synchronous_motion+0x30>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0xFF;                       // 功能码
 800bdf2:	4b09      	ldr	r3, [pc, #36]	@ (800be18 <Emm_V5_Synchronous_motion+0x30>)
 800bdf4:	22ff      	movs	r2, #255	@ 0xff
 800bdf6:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x66;                       // 辅助码
 800bdf8:	4b07      	ldr	r3, [pc, #28]	@ (800be18 <Emm_V5_Synchronous_motion+0x30>)
 800bdfa:	2266      	movs	r2, #102	@ 0x66
 800bdfc:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6B;                       // 校验字节
 800bdfe:	4b06      	ldr	r3, [pc, #24]	@ (800be18 <Emm_V5_Synchronous_motion+0x30>)
 800be00:	226b      	movs	r2, #107	@ 0x6b
 800be02:	70da      	strb	r2, [r3, #3]

	// 发送命令
	FDCAN_Send_Msg(cmd, 4);
 800be04:	2104      	movs	r1, #4
 800be06:	4804      	ldr	r0, [pc, #16]	@ (800be18 <Emm_V5_Synchronous_motion+0x30>)
 800be08:	f7f4 ff46 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(5);
 800be0c:	2005      	movs	r0, #5
 800be0e:	f7f6 ff95 	bl	8002d3c <HAL_Delay>
}
 800be12:	bf00      	nop
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	24000b30 	.word	0x24000b30

0800be1c <limit>:
float A_out;
float TX_X_out;
float TX_Y_out;

// 输出限幅
float limit(float x, float min, float max) {
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	ed87 0a03 	vstr	s0, [r7, #12]
 800be26:	edc7 0a02 	vstr	s1, [r7, #8]
 800be2a:	ed87 1a01 	vstr	s2, [r7, #4]
	x = (x > max) ? max : ((x < min) ? min : x);
 800be2e:	ed97 7a03 	vldr	s14, [r7, #12]
 800be32:	edd7 7a01 	vldr	s15, [r7, #4]
 800be36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be3e:	dd01      	ble.n	800be44 <limit+0x28>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	e00b      	b.n	800be5c <limit+0x40>
 800be44:	ed97 7a03 	vldr	s14, [r7, #12]
 800be48:	edd7 7a02 	vldr	s15, [r7, #8]
 800be4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be54:	d501      	bpl.n	800be5a <limit+0x3e>
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	e000      	b.n	800be5c <limit+0x40>
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	60fb      	str	r3, [r7, #12]
	return x;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	ee07 3a90 	vmov	s15, r3
}
 800be64:	eeb0 0a67 	vmov.f32	s0, s15
 800be68:	3714      	adds	r7, #20
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
	...

0800be74 <PID_Init>:
		return in;
	}
}

//	初始化PID结构体
void PID_Init(void) {
 800be74:	b480      	push	{r7}
 800be76:	af00      	add	r7, sp, #0
	//======================X=====================//   20   60
	XPID.P = 20;    //0.57    0  0.1
 800be78:	4b69      	ldr	r3, [pc, #420]	@ (800c020 <PID_Init+0x1ac>)
 800be7a:	4a6a      	ldr	r2, [pc, #424]	@ (800c024 <PID_Init+0x1b0>)
 800be7c:	601a      	str	r2, [r3, #0]
	XPID.I = 0;
 800be7e:	4b68      	ldr	r3, [pc, #416]	@ (800c020 <PID_Init+0x1ac>)
 800be80:	f04f 0200 	mov.w	r2, #0
 800be84:	609a      	str	r2, [r3, #8]
	XPID.D = 60;
 800be86:	4b66      	ldr	r3, [pc, #408]	@ (800c020 <PID_Init+0x1ac>)
 800be88:	4a67      	ldr	r2, [pc, #412]	@ (800c028 <PID_Init+0x1b4>)
 800be8a:	615a      	str	r2, [r3, #20]

	XPID.I_LIMIT = 100.0;
 800be8c:	4b64      	ldr	r3, [pc, #400]	@ (800c020 <PID_Init+0x1ac>)
 800be8e:	4a67      	ldr	r2, [pc, #412]	@ (800c02c <PID_Init+0x1b8>)
 800be90:	611a      	str	r2, [r3, #16]
	XPID.OUT_LIMIT = 100.0;
 800be92:	4b63      	ldr	r3, [pc, #396]	@ (800c020 <PID_Init+0x1ac>)
 800be94:	4a65      	ldr	r2, [pc, #404]	@ (800c02c <PID_Init+0x1b8>)
 800be96:	621a      	str	r2, [r3, #32]

	XPID.P_OUT = 0.0;
 800be98:	4b61      	ldr	r3, [pc, #388]	@ (800c020 <PID_Init+0x1ac>)
 800be9a:	f04f 0200 	mov.w	r2, #0
 800be9e:	605a      	str	r2, [r3, #4]
	XPID.I_OUT = 0.0;
 800bea0:	4b5f      	ldr	r3, [pc, #380]	@ (800c020 <PID_Init+0x1ac>)
 800bea2:	f04f 0200 	mov.w	r2, #0
 800bea6:	60da      	str	r2, [r3, #12]
	XPID.D_OUT = 0.0;
 800bea8:	4b5d      	ldr	r3, [pc, #372]	@ (800c020 <PID_Init+0x1ac>)
 800beaa:	f04f 0200 	mov.w	r2, #0
 800beae:	619a      	str	r2, [r3, #24]

	XPID.OUT = 0.0;
 800beb0:	4b5b      	ldr	r3, [pc, #364]	@ (800c020 <PID_Init+0x1ac>)
 800beb2:	f04f 0200 	mov.w	r2, #0
 800beb6:	61da      	str	r2, [r3, #28]

	XPID.err = 0.0;
 800beb8:	4b59      	ldr	r3, [pc, #356]	@ (800c020 <PID_Init+0x1ac>)
 800beba:	2200      	movs	r2, #0
 800bebc:	849a      	strh	r2, [r3, #36]	@ 0x24
	XPID.err_err = 0.0;
 800bebe:	4b58      	ldr	r3, [pc, #352]	@ (800c020 <PID_Init+0x1ac>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	84da      	strh	r2, [r3, #38]	@ 0x26
	XPID.err_old = 0.0;
 800bec4:	4b56      	ldr	r3, [pc, #344]	@ (800c020 <PID_Init+0x1ac>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	851a      	strh	r2, [r3, #40]	@ 0x28

	//========= =============Y=====================//
	YPID.P = 20;    //0.89                     //0.8 0 0.01
 800beca:	4b59      	ldr	r3, [pc, #356]	@ (800c030 <PID_Init+0x1bc>)
 800becc:	4a55      	ldr	r2, [pc, #340]	@ (800c024 <PID_Init+0x1b0>)
 800bece:	601a      	str	r2, [r3, #0]
	YPID.I = 0;
 800bed0:	4b57      	ldr	r3, [pc, #348]	@ (800c030 <PID_Init+0x1bc>)
 800bed2:	f04f 0200 	mov.w	r2, #0
 800bed6:	609a      	str	r2, [r3, #8]
	YPID.D = 60;    //60
 800bed8:	4b55      	ldr	r3, [pc, #340]	@ (800c030 <PID_Init+0x1bc>)
 800beda:	4a53      	ldr	r2, [pc, #332]	@ (800c028 <PID_Init+0x1b4>)
 800bedc:	615a      	str	r2, [r3, #20]
	YPID.I_LIMIT = 100.0;
 800bede:	4b54      	ldr	r3, [pc, #336]	@ (800c030 <PID_Init+0x1bc>)
 800bee0:	4a52      	ldr	r2, [pc, #328]	@ (800c02c <PID_Init+0x1b8>)
 800bee2:	611a      	str	r2, [r3, #16]
	YPID.OUT_LIMIT = 100.0;
 800bee4:	4b52      	ldr	r3, [pc, #328]	@ (800c030 <PID_Init+0x1bc>)
 800bee6:	4a51      	ldr	r2, [pc, #324]	@ (800c02c <PID_Init+0x1b8>)
 800bee8:	621a      	str	r2, [r3, #32]

	YPID.P_OUT = 0.0;
 800beea:	4b51      	ldr	r3, [pc, #324]	@ (800c030 <PID_Init+0x1bc>)
 800beec:	f04f 0200 	mov.w	r2, #0
 800bef0:	605a      	str	r2, [r3, #4]
	YPID.I_OUT = 0.0;
 800bef2:	4b4f      	ldr	r3, [pc, #316]	@ (800c030 <PID_Init+0x1bc>)
 800bef4:	f04f 0200 	mov.w	r2, #0
 800bef8:	60da      	str	r2, [r3, #12]
	YPID.D_OUT = 0.0;
 800befa:	4b4d      	ldr	r3, [pc, #308]	@ (800c030 <PID_Init+0x1bc>)
 800befc:	f04f 0200 	mov.w	r2, #0
 800bf00:	619a      	str	r2, [r3, #24]

	YPID.OUT = 0.0;
 800bf02:	4b4b      	ldr	r3, [pc, #300]	@ (800c030 <PID_Init+0x1bc>)
 800bf04:	f04f 0200 	mov.w	r2, #0
 800bf08:	61da      	str	r2, [r3, #28]

	YPID.err = 0.0;
 800bf0a:	4b49      	ldr	r3, [pc, #292]	@ (800c030 <PID_Init+0x1bc>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	849a      	strh	r2, [r3, #36]	@ 0x24
	YPID.err_err = 0.0;
 800bf10:	4b47      	ldr	r3, [pc, #284]	@ (800c030 <PID_Init+0x1bc>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	84da      	strh	r2, [r3, #38]	@ 0x26
	YPID.err_old = 0.0;
 800bf16:	4b46      	ldr	r3, [pc, #280]	@ (800c030 <PID_Init+0x1bc>)
 800bf18:	2200      	movs	r2, #0
 800bf1a:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================A=====================//
	APID.P = 0.9;
 800bf1c:	4b45      	ldr	r3, [pc, #276]	@ (800c034 <PID_Init+0x1c0>)
 800bf1e:	4a46      	ldr	r2, [pc, #280]	@ (800c038 <PID_Init+0x1c4>)
 800bf20:	601a      	str	r2, [r3, #0]
	APID.I = 0.0;
 800bf22:	4b44      	ldr	r3, [pc, #272]	@ (800c034 <PID_Init+0x1c0>)
 800bf24:	f04f 0200 	mov.w	r2, #0
 800bf28:	609a      	str	r2, [r3, #8]
	APID.D = 0.0;
 800bf2a:	4b42      	ldr	r3, [pc, #264]	@ (800c034 <PID_Init+0x1c0>)
 800bf2c:	f04f 0200 	mov.w	r2, #0
 800bf30:	615a      	str	r2, [r3, #20]

	APID.I_LIMIT = 1000.0;
 800bf32:	4b40      	ldr	r3, [pc, #256]	@ (800c034 <PID_Init+0x1c0>)
 800bf34:	4a41      	ldr	r2, [pc, #260]	@ (800c03c <PID_Init+0x1c8>)
 800bf36:	611a      	str	r2, [r3, #16]
	APID.OUT_LIMIT = 2350.0;
 800bf38:	4b3e      	ldr	r3, [pc, #248]	@ (800c034 <PID_Init+0x1c0>)
 800bf3a:	4a41      	ldr	r2, [pc, #260]	@ (800c040 <PID_Init+0x1cc>)
 800bf3c:	621a      	str	r2, [r3, #32]

	APID.P_OUT = 0.0;
 800bf3e:	4b3d      	ldr	r3, [pc, #244]	@ (800c034 <PID_Init+0x1c0>)
 800bf40:	f04f 0200 	mov.w	r2, #0
 800bf44:	605a      	str	r2, [r3, #4]
	APID.I_OUT = 0.0;
 800bf46:	4b3b      	ldr	r3, [pc, #236]	@ (800c034 <PID_Init+0x1c0>)
 800bf48:	f04f 0200 	mov.w	r2, #0
 800bf4c:	60da      	str	r2, [r3, #12]
	APID.D_OUT = 0.0;
 800bf4e:	4b39      	ldr	r3, [pc, #228]	@ (800c034 <PID_Init+0x1c0>)
 800bf50:	f04f 0200 	mov.w	r2, #0
 800bf54:	619a      	str	r2, [r3, #24]

	APID.OUT = 0.0;
 800bf56:	4b37      	ldr	r3, [pc, #220]	@ (800c034 <PID_Init+0x1c0>)
 800bf58:	f04f 0200 	mov.w	r2, #0
 800bf5c:	61da      	str	r2, [r3, #28]

	APID.err = 0.0;
 800bf5e:	4b35      	ldr	r3, [pc, #212]	@ (800c034 <PID_Init+0x1c0>)
 800bf60:	2200      	movs	r2, #0
 800bf62:	849a      	strh	r2, [r3, #36]	@ 0x24
	APID.err_err = 0.0;
 800bf64:	4b33      	ldr	r3, [pc, #204]	@ (800c034 <PID_Init+0x1c0>)
 800bf66:	2200      	movs	r2, #0
 800bf68:	84da      	strh	r2, [r3, #38]	@ 0x26
	APID.err_old = 0.0;
 800bf6a:	4b32      	ldr	r3, [pc, #200]	@ (800c034 <PID_Init+0x1c0>)
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	851a      	strh	r2, [r3, #40]	@ 0x28
	//======================TX=====================//
	TXPID.P = 1;
 800bf70:	4b34      	ldr	r3, [pc, #208]	@ (800c044 <PID_Init+0x1d0>)
 800bf72:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800bf76:	601a      	str	r2, [r3, #0]
	TXPID.I = 0;
 800bf78:	4b32      	ldr	r3, [pc, #200]	@ (800c044 <PID_Init+0x1d0>)
 800bf7a:	f04f 0200 	mov.w	r2, #0
 800bf7e:	609a      	str	r2, [r3, #8]
	TXPID.D = 0.3;
 800bf80:	4b30      	ldr	r3, [pc, #192]	@ (800c044 <PID_Init+0x1d0>)
 800bf82:	4a31      	ldr	r2, [pc, #196]	@ (800c048 <PID_Init+0x1d4>)
 800bf84:	615a      	str	r2, [r3, #20]

	TXPID.I_LIMIT = 100.0;
 800bf86:	4b2f      	ldr	r3, [pc, #188]	@ (800c044 <PID_Init+0x1d0>)
 800bf88:	4a28      	ldr	r2, [pc, #160]	@ (800c02c <PID_Init+0x1b8>)
 800bf8a:	611a      	str	r2, [r3, #16]
	TXPID.OUT_LIMIT = 300.0;
 800bf8c:	4b2d      	ldr	r3, [pc, #180]	@ (800c044 <PID_Init+0x1d0>)
 800bf8e:	4a2f      	ldr	r2, [pc, #188]	@ (800c04c <PID_Init+0x1d8>)
 800bf90:	621a      	str	r2, [r3, #32]

	TXPID.P_OUT = 0.0;
 800bf92:	4b2c      	ldr	r3, [pc, #176]	@ (800c044 <PID_Init+0x1d0>)
 800bf94:	f04f 0200 	mov.w	r2, #0
 800bf98:	605a      	str	r2, [r3, #4]
	TXPID.I_OUT = 0.0;
 800bf9a:	4b2a      	ldr	r3, [pc, #168]	@ (800c044 <PID_Init+0x1d0>)
 800bf9c:	f04f 0200 	mov.w	r2, #0
 800bfa0:	60da      	str	r2, [r3, #12]
	TXPID.D_OUT = 0.0;
 800bfa2:	4b28      	ldr	r3, [pc, #160]	@ (800c044 <PID_Init+0x1d0>)
 800bfa4:	f04f 0200 	mov.w	r2, #0
 800bfa8:	619a      	str	r2, [r3, #24]

	TXPID.OUT = 0.0;
 800bfaa:	4b26      	ldr	r3, [pc, #152]	@ (800c044 <PID_Init+0x1d0>)
 800bfac:	f04f 0200 	mov.w	r2, #0
 800bfb0:	61da      	str	r2, [r3, #28]

	TXPID.err = 0.0;
 800bfb2:	4b24      	ldr	r3, [pc, #144]	@ (800c044 <PID_Init+0x1d0>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	849a      	strh	r2, [r3, #36]	@ 0x24
	TXPID.err_err = 0.0;
 800bfb8:	4b22      	ldr	r3, [pc, #136]	@ (800c044 <PID_Init+0x1d0>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	84da      	strh	r2, [r3, #38]	@ 0x26
	TXPID.err_old = 0.0;
 800bfbe:	4b21      	ldr	r3, [pc, #132]	@ (800c044 <PID_Init+0x1d0>)
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================TY=====================//
	TYPID.P = -1;
 800bfc4:	4b22      	ldr	r3, [pc, #136]	@ (800c050 <PID_Init+0x1dc>)
 800bfc6:	4a23      	ldr	r2, [pc, #140]	@ (800c054 <PID_Init+0x1e0>)
 800bfc8:	601a      	str	r2, [r3, #0]
	TYPID.I = -0;      //0.9  0.01   0.3
 800bfca:	4b21      	ldr	r3, [pc, #132]	@ (800c050 <PID_Init+0x1dc>)
 800bfcc:	f04f 0200 	mov.w	r2, #0
 800bfd0:	609a      	str	r2, [r3, #8]
	//0.9 0 0.2
	TYPID.D = -0.3;
 800bfd2:	4b1f      	ldr	r3, [pc, #124]	@ (800c050 <PID_Init+0x1dc>)
 800bfd4:	4a20      	ldr	r2, [pc, #128]	@ (800c058 <PID_Init+0x1e4>)
 800bfd6:	615a      	str	r2, [r3, #20]

	TYPID.I_LIMIT = 100.0;
 800bfd8:	4b1d      	ldr	r3, [pc, #116]	@ (800c050 <PID_Init+0x1dc>)
 800bfda:	4a14      	ldr	r2, [pc, #80]	@ (800c02c <PID_Init+0x1b8>)
 800bfdc:	611a      	str	r2, [r3, #16]
	TYPID.OUT_LIMIT = 300.0;
 800bfde:	4b1c      	ldr	r3, [pc, #112]	@ (800c050 <PID_Init+0x1dc>)
 800bfe0:	4a1a      	ldr	r2, [pc, #104]	@ (800c04c <PID_Init+0x1d8>)
 800bfe2:	621a      	str	r2, [r3, #32]

	TYPID.P_OUT = 0.0;
 800bfe4:	4b1a      	ldr	r3, [pc, #104]	@ (800c050 <PID_Init+0x1dc>)
 800bfe6:	f04f 0200 	mov.w	r2, #0
 800bfea:	605a      	str	r2, [r3, #4]
	TYPID.I_OUT = 0.0;
 800bfec:	4b18      	ldr	r3, [pc, #96]	@ (800c050 <PID_Init+0x1dc>)
 800bfee:	f04f 0200 	mov.w	r2, #0
 800bff2:	60da      	str	r2, [r3, #12]
	TYPID.D_OUT = 0.0;
 800bff4:	4b16      	ldr	r3, [pc, #88]	@ (800c050 <PID_Init+0x1dc>)
 800bff6:	f04f 0200 	mov.w	r2, #0
 800bffa:	619a      	str	r2, [r3, #24]

	TYPID.OUT = 0.0;
 800bffc:	4b14      	ldr	r3, [pc, #80]	@ (800c050 <PID_Init+0x1dc>)
 800bffe:	f04f 0200 	mov.w	r2, #0
 800c002:	61da      	str	r2, [r3, #28]

	TYPID.err = 0.0;
 800c004:	4b12      	ldr	r3, [pc, #72]	@ (800c050 <PID_Init+0x1dc>)
 800c006:	2200      	movs	r2, #0
 800c008:	849a      	strh	r2, [r3, #36]	@ 0x24
	TYPID.err_err = 0.0;
 800c00a:	4b11      	ldr	r3, [pc, #68]	@ (800c050 <PID_Init+0x1dc>)
 800c00c:	2200      	movs	r2, #0
 800c00e:	84da      	strh	r2, [r3, #38]	@ 0x26
	TYPID.err_old = 0.0;
 800c010:	4b0f      	ldr	r3, [pc, #60]	@ (800c050 <PID_Init+0x1dc>)
 800c012:	2200      	movs	r2, #0
 800c014:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800c016:	bf00      	nop
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr
 800c020:	24000b48 	.word	0x24000b48
 800c024:	41a00000 	.word	0x41a00000
 800c028:	42700000 	.word	0x42700000
 800c02c:	42c80000 	.word	0x42c80000
 800c030:	24000b74 	.word	0x24000b74
 800c034:	24000ba0 	.word	0x24000ba0
 800c038:	3f666666 	.word	0x3f666666
 800c03c:	447a0000 	.word	0x447a0000
 800c040:	4512e000 	.word	0x4512e000
 800c044:	24000bcc 	.word	0x24000bcc
 800c048:	3e99999a 	.word	0x3e99999a
 800c04c:	43960000 	.word	0x43960000
 800c050:	24000bf8 	.word	0x24000bf8
 800c054:	bf800000 	.word	0xbf800000
 800c058:	be99999a 	.word	0xbe99999a

0800c05c <Tx_X_Ctrl>:
	PID->err_old = PID->err;

	return PID->OUT;
}
/* TX的X轴调整 */
short Tx_X_Ctrl(_PID *PID, float goal) {
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Tx_NOW - goal;
 800c068:	4b4e      	ldr	r3, [pc, #312]	@ (800c1a4 <Tx_X_Ctrl+0x148>)
 800c06a:	ed93 7a00 	vldr	s14, [r3]
 800c06e:	edd7 7a00 	vldr	s15, [r7]
 800c072:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c076:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c07a:	ee17 3a90 	vmov	r3, s15
 800c07e:	b21a      	sxth	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800c092:	b29b      	uxth	r3, r3
 800c094:	1ad3      	subs	r3, r2, r3
 800c096:	b29b      	uxth	r3, r3
 800c098:	b21a      	sxth	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	ed93 7a00 	vldr	s14, [r3]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c0aa:	ee07 3a90 	vmov	s15, r3
 800c0ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	ed93 7a03 	vldr	s14, [r3, #12]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	edd3 6a02 	vldr	s13, [r3, #8]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c0ce:	ee07 3a90 	vmov	s15, r3
 800c0d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	ed93 7a05 	vldr	s14, [r3, #20]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c0f0:	ee07 3a90 	vmov	s15, r3
 800c0f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	ed93 7a03 	vldr	s14, [r3, #12]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	edd3 7a04 	vldr	s15, [r3, #16]
 800c10e:	eef1 7a67 	vneg.f32	s15, s15
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	edd3 6a04 	vldr	s13, [r3, #16]
 800c118:	eeb0 1a66 	vmov.f32	s2, s13
 800c11c:	eef0 0a67 	vmov.f32	s1, s15
 800c120:	eeb0 0a47 	vmov.f32	s0, s14
 800c124:	f7ff fe7a 	bl	800be1c <limit>
 800c128:	eef0 7a40 	vmov.f32	s15, s0
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	ed93 7a01 	vldr	s14, [r3, #4]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	edd3 7a03 	vldr	s15, [r3, #12]
 800c13e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	edd3 7a06 	vldr	s15, [r3, #24]
 800c148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	ed93 7a07 	vldr	s14, [r3, #28]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	edd3 7a08 	vldr	s15, [r3, #32]
 800c15e:	eef1 7a67 	vneg.f32	s15, s15
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	edd3 6a08 	vldr	s13, [r3, #32]
 800c168:	eeb0 1a66 	vmov.f32	s2, s13
 800c16c:	eef0 0a67 	vmov.f32	s1, s15
 800c170:	eeb0 0a47 	vmov.f32	s0, s14
 800c174:	f7ff fe52 	bl	800be1c <limit>
 800c178:	eef0 7a40 	vmov.f32	s15, s0
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c196:	ee17 3a90 	vmov	r3, s15
 800c19a:	b21b      	sxth	r3, r3
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	24000454 	.word	0x24000454

0800c1a8 <Tx_Y_Ctrl>:

/* TX的Y轴调整 */
short Tx_Y_Ctrl(_PID *PID, float goal) {
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Ty_NOW - goal;
 800c1b4:	4b4e      	ldr	r3, [pc, #312]	@ (800c2f0 <Tx_Y_Ctrl+0x148>)
 800c1b6:	ed93 7a00 	vldr	s14, [r3]
 800c1ba:	edd7 7a00 	vldr	s15, [r7]
 800c1be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c1c6:	ee17 3a90 	vmov	r3, s15
 800c1ca:	b21a      	sxth	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c1d6:	b29a      	uxth	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	b21a      	sxth	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	ed93 7a00 	vldr	s14, [r3]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c1f6:	ee07 3a90 	vmov	s15, r3
 800c1fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	ed93 7a03 	vldr	s14, [r3, #12]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	edd3 6a02 	vldr	s13, [r3, #8]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c21a:	ee07 3a90 	vmov	s15, r3
 800c21e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	ed93 7a05 	vldr	s14, [r3, #20]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c23c:	ee07 3a90 	vmov	s15, r3
 800c240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c244:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	ed93 7a03 	vldr	s14, [r3, #12]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	edd3 7a04 	vldr	s15, [r3, #16]
 800c25a:	eef1 7a67 	vneg.f32	s15, s15
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	edd3 6a04 	vldr	s13, [r3, #16]
 800c264:	eeb0 1a66 	vmov.f32	s2, s13
 800c268:	eef0 0a67 	vmov.f32	s1, s15
 800c26c:	eeb0 0a47 	vmov.f32	s0, s14
 800c270:	f7ff fdd4 	bl	800be1c <limit>
 800c274:	eef0 7a40 	vmov.f32	s15, s0
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	ed93 7a01 	vldr	s14, [r3, #4]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	edd3 7a03 	vldr	s15, [r3, #12]
 800c28a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	edd3 7a06 	vldr	s15, [r3, #24]
 800c294:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	ed93 7a07 	vldr	s14, [r3, #28]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	edd3 7a08 	vldr	s15, [r3, #32]
 800c2aa:	eef1 7a67 	vneg.f32	s15, s15
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	edd3 6a08 	vldr	s13, [r3, #32]
 800c2b4:	eeb0 1a66 	vmov.f32	s2, s13
 800c2b8:	eef0 0a67 	vmov.f32	s1, s15
 800c2bc:	eeb0 0a47 	vmov.f32	s0, s14
 800c2c0:	f7ff fdac 	bl	800be1c <limit>
 800c2c4:	eef0 7a40 	vmov.f32	s15, s0
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	edd3 7a07 	vldr	s15, [r3, #28]
 800c2de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2e2:	ee17 3a90 	vmov	r3, s15
 800c2e6:	b21b      	sxth	r3, r3
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	24000458 	.word	0x24000458

0800c2f4 <GetRxFlag>:



int time5_jiancha = 0;

uint8_t GetRxFlag(void) {
 800c2f4:	b480      	push	{r7}
 800c2f6:	af00      	add	r7, sp, #0
	if (RxFlag == 1) {
 800c2f8:	4b07      	ldr	r3, [pc, #28]	@ (800c318 <GetRxFlag+0x24>)
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d104      	bne.n	800c30a <GetRxFlag+0x16>
		RxFlag = 0;
 800c300:	4b05      	ldr	r3, [pc, #20]	@ (800c318 <GetRxFlag+0x24>)
 800c302:	2200      	movs	r2, #0
 800c304:	701a      	strb	r2, [r3, #0]
		return 1;
 800c306:	2301      	movs	r3, #1
 800c308:	e000      	b.n	800c30c <GetRxFlag+0x18>
	}
	return 0;
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop
 800c318:	2400029d 	.word	0x2400029d

0800c31c <Move_Line>:
//		;
////	RxFlag = 0;·
//	HAL_Delay(30);
//}

bool Move_Line(u16 speed, u8 acc, u32 length) {
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af04      	add	r7, sp, #16
 800c322:	4603      	mov	r3, r0
 800c324:	603a      	str	r2, [r7, #0]
 800c326:	80fb      	strh	r3, [r7, #6]
 800c328:	460b      	mov	r3, r1
 800c32a:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if(Choke_Flag == true)
 800c32c:	4b26      	ldr	r3, [pc, #152]	@ (800c3c8 <Move_Line+0xac>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d001      	beq.n	800c338 <Move_Line+0x1c>
		return  false;
 800c334:	2300      	movs	r3, #0
 800c336:	e042      	b.n	800c3be <Move_Line+0xa2>
	else
		Choke_Flag = true;
 800c338:	4b23      	ldr	r3, [pc, #140]	@ (800c3c8 <Move_Line+0xac>)
 800c33a:	2201      	movs	r2, #1
 800c33c:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c33e:	4b23      	ldr	r3, [pc, #140]	@ (800c3cc <Move_Line+0xb0>)
 800c340:	2201      	movs	r2, #1
 800c342:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c344:	7979      	ldrb	r1, [r7, #5]
 800c346:	88fa      	ldrh	r2, [r7, #6]
 800c348:	2301      	movs	r3, #1
 800c34a:	9302      	str	r3, [sp, #8]
 800c34c:	2300      	movs	r3, #0
 800c34e:	9301      	str	r3, [sp, #4]
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	9300      	str	r3, [sp, #0]
 800c354:	460b      	mov	r3, r1
 800c356:	2100      	movs	r1, #0
 800c358:	2001      	movs	r0, #1
 800c35a:	f7ff fccf 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c35e:	7979      	ldrb	r1, [r7, #5]
 800c360:	88fa      	ldrh	r2, [r7, #6]
 800c362:	2301      	movs	r3, #1
 800c364:	9302      	str	r3, [sp, #8]
 800c366:	2300      	movs	r3, #0
 800c368:	9301      	str	r3, [sp, #4]
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	9300      	str	r3, [sp, #0]
 800c36e:	460b      	mov	r3, r1
 800c370:	2100      	movs	r1, #0
 800c372:	2002      	movs	r0, #2
 800c374:	f7ff fcc2 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c378:	7979      	ldrb	r1, [r7, #5]
 800c37a:	88fa      	ldrh	r2, [r7, #6]
 800c37c:	2301      	movs	r3, #1
 800c37e:	9302      	str	r3, [sp, #8]
 800c380:	2300      	movs	r3, #0
 800c382:	9301      	str	r3, [sp, #4]
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	460b      	mov	r3, r1
 800c38a:	2100      	movs	r1, #0
 800c38c:	2003      	movs	r0, #3
 800c38e:	f7ff fcb5 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c392:	7979      	ldrb	r1, [r7, #5]
 800c394:	88fa      	ldrh	r2, [r7, #6]
 800c396:	2301      	movs	r3, #1
 800c398:	9302      	str	r3, [sp, #8]
 800c39a:	2300      	movs	r3, #0
 800c39c:	9301      	str	r3, [sp, #4]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	9300      	str	r3, [sp, #0]
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	2004      	movs	r0, #4
 800c3a8:	f7ff fca8 	bl	800bcfc <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c3ac:	f7ff fd1c 	bl	800bde8 <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c3b0:	4807      	ldr	r0, [pc, #28]	@ (800c3d0 <Move_Line+0xb4>)
 800c3b2:	f7fb fd1f 	bl	8007df4 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c3b6:	4b07      	ldr	r3, [pc, #28]	@ (800c3d4 <Move_Line+0xb8>)
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	701a      	strb	r2, [r3, #0]
	return true;
 800c3bc:	2301      	movs	r3, #1
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	24000c2c 	.word	0x24000c2c
 800c3cc:	24000c2d 	.word	0x24000c2d
 800c3d0:	24000574 	.word	0x24000574
 800c3d4:	24000c2e 	.word	0x24000c2e

0800c3d8 <Move_Left>:
bool Move_Left(u16 speed, u8 acc, u32 length) {
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b086      	sub	sp, #24
 800c3dc:	af04      	add	r7, sp, #16
 800c3de:	4603      	mov	r3, r0
 800c3e0:	603a      	str	r2, [r7, #0]
 800c3e2:	80fb      	strh	r3, [r7, #6]
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if(Choke_Flag == true)
 800c3e8:	4b26      	ldr	r3, [pc, #152]	@ (800c484 <Move_Left+0xac>)
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <Move_Left+0x1c>
		return  false;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	e042      	b.n	800c47a <Move_Left+0xa2>
	else
		Choke_Flag = true;
 800c3f4:	4b23      	ldr	r3, [pc, #140]	@ (800c484 <Move_Left+0xac>)
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c3fa:	4b23      	ldr	r3, [pc, #140]	@ (800c488 <Move_Left+0xb0>)
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c400:	7979      	ldrb	r1, [r7, #5]
 800c402:	88fa      	ldrh	r2, [r7, #6]
 800c404:	2301      	movs	r3, #1
 800c406:	9302      	str	r3, [sp, #8]
 800c408:	2300      	movs	r3, #0
 800c40a:	9301      	str	r3, [sp, #4]
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	460b      	mov	r3, r1
 800c412:	2101      	movs	r1, #1
 800c414:	2001      	movs	r0, #1
 800c416:	f7ff fc71 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c41a:	7979      	ldrb	r1, [r7, #5]
 800c41c:	88fa      	ldrh	r2, [r7, #6]
 800c41e:	2301      	movs	r3, #1
 800c420:	9302      	str	r3, [sp, #8]
 800c422:	2300      	movs	r3, #0
 800c424:	9301      	str	r3, [sp, #4]
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	460b      	mov	r3, r1
 800c42c:	2100      	movs	r1, #0
 800c42e:	2002      	movs	r0, #2
 800c430:	f7ff fc64 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c434:	7979      	ldrb	r1, [r7, #5]
 800c436:	88fa      	ldrh	r2, [r7, #6]
 800c438:	2301      	movs	r3, #1
 800c43a:	9302      	str	r3, [sp, #8]
 800c43c:	2300      	movs	r3, #0
 800c43e:	9301      	str	r3, [sp, #4]
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	460b      	mov	r3, r1
 800c446:	2101      	movs	r1, #1
 800c448:	2003      	movs	r0, #3
 800c44a:	f7ff fc57 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c44e:	7979      	ldrb	r1, [r7, #5]
 800c450:	88fa      	ldrh	r2, [r7, #6]
 800c452:	2301      	movs	r3, #1
 800c454:	9302      	str	r3, [sp, #8]
 800c456:	2300      	movs	r3, #0
 800c458:	9301      	str	r3, [sp, #4]
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	9300      	str	r3, [sp, #0]
 800c45e:	460b      	mov	r3, r1
 800c460:	2100      	movs	r1, #0
 800c462:	2004      	movs	r0, #4
 800c464:	f7ff fc4a 	bl	800bcfc <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c468:	f7ff fcbe 	bl	800bde8 <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c46c:	4807      	ldr	r0, [pc, #28]	@ (800c48c <Move_Left+0xb4>)
 800c46e:	f7fb fcc1 	bl	8007df4 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c472:	4b07      	ldr	r3, [pc, #28]	@ (800c490 <Move_Left+0xb8>)
 800c474:	2201      	movs	r2, #1
 800c476:	701a      	strb	r2, [r3, #0]
	return true;
 800c478:	2301      	movs	r3, #1
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3708      	adds	r7, #8
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	24000c2c 	.word	0x24000c2c
 800c488:	24000c2d 	.word	0x24000c2d
 800c48c:	24000574 	.word	0x24000574
 800c490:	24000c2e 	.word	0x24000c2e

0800c494 <Move_Back>:

bool Move_Back(u16 speed, u8 acc, u32 length) {
 800c494:	b580      	push	{r7, lr}
 800c496:	b086      	sub	sp, #24
 800c498:	af04      	add	r7, sp, #16
 800c49a:	4603      	mov	r3, r0
 800c49c:	603a      	str	r2, [r7, #0]
 800c49e:	80fb      	strh	r3, [r7, #6]
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if(Choke_Flag == true)
 800c4a4:	4b26      	ldr	r3, [pc, #152]	@ (800c540 <Move_Back+0xac>)
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d001      	beq.n	800c4b0 <Move_Back+0x1c>
		return  false;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	e042      	b.n	800c536 <Move_Back+0xa2>
	else
		Choke_Flag = true;
 800c4b0:	4b23      	ldr	r3, [pc, #140]	@ (800c540 <Move_Back+0xac>)
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c4b6:	4b23      	ldr	r3, [pc, #140]	@ (800c544 <Move_Back+0xb0>)
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c4bc:	7979      	ldrb	r1, [r7, #5]
 800c4be:	88fa      	ldrh	r2, [r7, #6]
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	9302      	str	r3, [sp, #8]
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	9301      	str	r3, [sp, #4]
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	2101      	movs	r1, #1
 800c4d0:	2001      	movs	r0, #1
 800c4d2:	f7ff fc13 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c4d6:	7979      	ldrb	r1, [r7, #5]
 800c4d8:	88fa      	ldrh	r2, [r7, #6]
 800c4da:	2301      	movs	r3, #1
 800c4dc:	9302      	str	r3, [sp, #8]
 800c4de:	2300      	movs	r3, #0
 800c4e0:	9301      	str	r3, [sp, #4]
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	9300      	str	r3, [sp, #0]
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	2002      	movs	r0, #2
 800c4ec:	f7ff fc06 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c4f0:	7979      	ldrb	r1, [r7, #5]
 800c4f2:	88fa      	ldrh	r2, [r7, #6]
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	9302      	str	r3, [sp, #8]
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	9301      	str	r3, [sp, #4]
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	9300      	str	r3, [sp, #0]
 800c500:	460b      	mov	r3, r1
 800c502:	2101      	movs	r1, #1
 800c504:	2003      	movs	r0, #3
 800c506:	f7ff fbf9 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c50a:	7979      	ldrb	r1, [r7, #5]
 800c50c:	88fa      	ldrh	r2, [r7, #6]
 800c50e:	2301      	movs	r3, #1
 800c510:	9302      	str	r3, [sp, #8]
 800c512:	2300      	movs	r3, #0
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	460b      	mov	r3, r1
 800c51c:	2101      	movs	r1, #1
 800c51e:	2004      	movs	r0, #4
 800c520:	f7ff fbec 	bl	800bcfc <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c524:	f7ff fc60 	bl	800bde8 <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c528:	4807      	ldr	r0, [pc, #28]	@ (800c548 <Move_Back+0xb4>)
 800c52a:	f7fb fc63 	bl	8007df4 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c52e:	4b07      	ldr	r3, [pc, #28]	@ (800c54c <Move_Back+0xb8>)
 800c530:	2201      	movs	r2, #1
 800c532:	701a      	strb	r2, [r3, #0]
	return true;
 800c534:	2301      	movs	r3, #1
}
 800c536:	4618      	mov	r0, r3
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	24000c2c 	.word	0x24000c2c
 800c544:	24000c2d 	.word	0x24000c2d
 800c548:	24000574 	.word	0x24000574
 800c54c:	24000c2e 	.word	0x24000c2e

0800c550 <Move_fanxuzhuan>:

bool Move_fanxuzhuan(u16 speed, u8 acc, u32 length)  {
 800c550:	b580      	push	{r7, lr}
 800c552:	b086      	sub	sp, #24
 800c554:	af04      	add	r7, sp, #16
 800c556:	4603      	mov	r3, r0
 800c558:	603a      	str	r2, [r7, #0]
 800c55a:	80fb      	strh	r3, [r7, #6]
 800c55c:	460b      	mov	r3, r1
 800c55e:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if(Choke_Flag == true)
 800c560:	4b26      	ldr	r3, [pc, #152]	@ (800c5fc <Move_fanxuzhuan+0xac>)
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d001      	beq.n	800c56c <Move_fanxuzhuan+0x1c>
		return  false;
 800c568:	2300      	movs	r3, #0
 800c56a:	e042      	b.n	800c5f2 <Move_fanxuzhuan+0xa2>
	else
		Choke_Flag = true;
 800c56c:	4b23      	ldr	r3, [pc, #140]	@ (800c5fc <Move_fanxuzhuan+0xac>)
 800c56e:	2201      	movs	r2, #1
 800c570:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c572:	4b23      	ldr	r3, [pc, #140]	@ (800c600 <Move_fanxuzhuan+0xb0>)
 800c574:	2201      	movs	r2, #1
 800c576:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c578:	7979      	ldrb	r1, [r7, #5]
 800c57a:	88fa      	ldrh	r2, [r7, #6]
 800c57c:	2301      	movs	r3, #1
 800c57e:	9302      	str	r3, [sp, #8]
 800c580:	2300      	movs	r3, #0
 800c582:	9301      	str	r3, [sp, #4]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	9300      	str	r3, [sp, #0]
 800c588:	460b      	mov	r3, r1
 800c58a:	2101      	movs	r1, #1
 800c58c:	2001      	movs	r0, #1
 800c58e:	f7ff fbb5 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c592:	7979      	ldrb	r1, [r7, #5]
 800c594:	88fa      	ldrh	r2, [r7, #6]
 800c596:	2301      	movs	r3, #1
 800c598:	9302      	str	r3, [sp, #8]
 800c59a:	2300      	movs	r3, #0
 800c59c:	9301      	str	r3, [sp, #4]
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	2002      	movs	r0, #2
 800c5a8:	f7ff fba8 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c5ac:	7979      	ldrb	r1, [r7, #5]
 800c5ae:	88fa      	ldrh	r2, [r7, #6]
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	9302      	str	r3, [sp, #8]
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	9301      	str	r3, [sp, #4]
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	9300      	str	r3, [sp, #0]
 800c5bc:	460b      	mov	r3, r1
 800c5be:	2100      	movs	r1, #0
 800c5c0:	2003      	movs	r0, #3
 800c5c2:	f7ff fb9b 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c5c6:	7979      	ldrb	r1, [r7, #5]
 800c5c8:	88fa      	ldrh	r2, [r7, #6]
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	9302      	str	r3, [sp, #8]
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	9301      	str	r3, [sp, #4]
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	9300      	str	r3, [sp, #0]
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	2101      	movs	r1, #1
 800c5da:	2004      	movs	r0, #4
 800c5dc:	f7ff fb8e 	bl	800bcfc <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c5e0:	f7ff fc02 	bl	800bde8 <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c5e4:	4807      	ldr	r0, [pc, #28]	@ (800c604 <Move_fanxuzhuan+0xb4>)
 800c5e6:	f7fb fc05 	bl	8007df4 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c5ea:	4b07      	ldr	r3, [pc, #28]	@ (800c608 <Move_fanxuzhuan+0xb8>)
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	701a      	strb	r2, [r3, #0]
	return true;
 800c5f0:	2301      	movs	r3, #1
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	24000c2c 	.word	0x24000c2c
 800c600:	24000c2d 	.word	0x24000c2d
 800c604:	24000574 	.word	0x24000574
 800c608:	24000c2e 	.word	0x24000c2e

0800c60c <Move_Right>:
// 		;
// //	RxFlag = 0;
// 	HAL_Delay(30);
// }

void Move_Right(u16 speed, u8 acc, u32 length) {
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b088      	sub	sp, #32
 800c610:	af04      	add	r7, sp, #16
 800c612:	4603      	mov	r3, r0
 800c614:	603a      	str	r2, [r7, #0]
 800c616:	80fb      	strh	r3, [r7, #6]
 800c618:	460b      	mov	r3, r1
 800c61a:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c61c:	88fb      	ldrh	r3, [r7, #6]
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	fbb2 f2f3 	udiv	r2, r2, r3
 800c624:	4613      	mov	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	4413      	add	r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c62e:	7979      	ldrb	r1, [r7, #5]
 800c630:	88fa      	ldrh	r2, [r7, #6]
 800c632:	2301      	movs	r3, #1
 800c634:	9302      	str	r3, [sp, #8]
 800c636:	2300      	movs	r3, #0
 800c638:	9301      	str	r3, [sp, #4]
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	9300      	str	r3, [sp, #0]
 800c63e:	460b      	mov	r3, r1
 800c640:	2100      	movs	r1, #0
 800c642:	2001      	movs	r0, #1
 800c644:	f7ff fb5a 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c648:	7979      	ldrb	r1, [r7, #5]
 800c64a:	88fa      	ldrh	r2, [r7, #6]
 800c64c:	2301      	movs	r3, #1
 800c64e:	9302      	str	r3, [sp, #8]
 800c650:	2300      	movs	r3, #0
 800c652:	9301      	str	r3, [sp, #4]
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	460b      	mov	r3, r1
 800c65a:	2101      	movs	r1, #1
 800c65c:	2002      	movs	r0, #2
 800c65e:	f7ff fb4d 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c662:	7979      	ldrb	r1, [r7, #5]
 800c664:	88fa      	ldrh	r2, [r7, #6]
 800c666:	2301      	movs	r3, #1
 800c668:	9302      	str	r3, [sp, #8]
 800c66a:	2300      	movs	r3, #0
 800c66c:	9301      	str	r3, [sp, #4]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	460b      	mov	r3, r1
 800c674:	2100      	movs	r1, #0
 800c676:	2003      	movs	r0, #3
 800c678:	f7ff fb40 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c67c:	7979      	ldrb	r1, [r7, #5]
 800c67e:	88fa      	ldrh	r2, [r7, #6]
 800c680:	2301      	movs	r3, #1
 800c682:	9302      	str	r3, [sp, #8]
 800c684:	2300      	movs	r3, #0
 800c686:	9301      	str	r3, [sp, #4]
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	9300      	str	r3, [sp, #0]
 800c68c:	460b      	mov	r3, r1
 800c68e:	2101      	movs	r1, #1
 800c690:	2004      	movs	r0, #4
 800c692:	f7ff fb33 	bl	800bcfc <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion();
 800c696:	f7ff fba7 	bl	800bde8 <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800c69a:	4b0f      	ldr	r3, [pc, #60]	@ (800c6d8 <Move_Right+0xcc>)
 800c69c:	2201      	movs	r2, #1
 800c69e:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c6a6:	4a0d      	ldr	r2, [pc, #52]	@ (800c6dc <Move_Right+0xd0>)
 800c6a8:	fb82 1203 	smull	r1, r2, r2, r3
 800c6ac:	1092      	asrs	r2, r2, #2
 800c6ae:	17db      	asrs	r3, r3, #31
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	4a0b      	ldr	r2, [pc, #44]	@ (800c6e0 <Move_Right+0xd4>)
 800c6b4:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c6b6:	bf00      	nop
 800c6b8:	f7ff fe1c 	bl	800c2f4 <GetRxFlag>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d103      	bne.n	800c6ca <Move_Right+0xbe>
 800c6c2:	4b07      	ldr	r3, [pc, #28]	@ (800c6e0 <Move_Right+0xd4>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1f6      	bne.n	800c6b8 <Move_Right+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c6ca:	201e      	movs	r0, #30
 800c6cc:	f7f6 fb36 	bl	8002d3c <HAL_Delay>
}
 800c6d0:	bf00      	nop
 800c6d2:	3710      	adds	r7, #16
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	2400029c 	.word	0x2400029c
 800c6dc:	66666667 	.word	0x66666667
 800c6e0:	24000c30 	.word	0x24000c30

0800c6e4 <Move_zhengxuzhuan>:
void Move_zhengxuzhuan(u16 speed, u8 acc, u32 length) {
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b088      	sub	sp, #32
 800c6e8:	af04      	add	r7, sp, #16
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	603a      	str	r2, [r7, #0]
 800c6ee:	80fb      	strh	r3, [r7, #6]
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c6f4:	88fb      	ldrh	r3, [r7, #6]
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	4413      	add	r3, r2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c706:	7979      	ldrb	r1, [r7, #5]
 800c708:	88fa      	ldrh	r2, [r7, #6]
 800c70a:	2301      	movs	r3, #1
 800c70c:	9302      	str	r3, [sp, #8]
 800c70e:	2300      	movs	r3, #0
 800c710:	9301      	str	r3, [sp, #4]
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	9300      	str	r3, [sp, #0]
 800c716:	460b      	mov	r3, r1
 800c718:	2100      	movs	r1, #0
 800c71a:	2001      	movs	r0, #1
 800c71c:	f7ff faee 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c720:	7979      	ldrb	r1, [r7, #5]
 800c722:	88fa      	ldrh	r2, [r7, #6]
 800c724:	2301      	movs	r3, #1
 800c726:	9302      	str	r3, [sp, #8]
 800c728:	2300      	movs	r3, #0
 800c72a:	9301      	str	r3, [sp, #4]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	9300      	str	r3, [sp, #0]
 800c730:	460b      	mov	r3, r1
 800c732:	2101      	movs	r1, #1
 800c734:	2002      	movs	r0, #2
 800c736:	f7ff fae1 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c73a:	7979      	ldrb	r1, [r7, #5]
 800c73c:	88fa      	ldrh	r2, [r7, #6]
 800c73e:	2301      	movs	r3, #1
 800c740:	9302      	str	r3, [sp, #8]
 800c742:	2300      	movs	r3, #0
 800c744:	9301      	str	r3, [sp, #4]
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	460b      	mov	r3, r1
 800c74c:	2101      	movs	r1, #1
 800c74e:	2003      	movs	r0, #3
 800c750:	f7ff fad4 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c754:	7979      	ldrb	r1, [r7, #5]
 800c756:	88fa      	ldrh	r2, [r7, #6]
 800c758:	2301      	movs	r3, #1
 800c75a:	9302      	str	r3, [sp, #8]
 800c75c:	2300      	movs	r3, #0
 800c75e:	9301      	str	r3, [sp, #4]
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	9300      	str	r3, [sp, #0]
 800c764:	460b      	mov	r3, r1
 800c766:	2100      	movs	r1, #0
 800c768:	2004      	movs	r0, #4
 800c76a:	f7ff fac7 	bl	800bcfc <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800c76e:	f7ff fb3b 	bl	800bde8 <Emm_V5_Synchronous_motion>

	Emm_mode = 1;
 800c772:	4b0f      	ldr	r3, [pc, #60]	@ (800c7b0 <Move_zhengxuzhuan+0xcc>)
 800c774:	2201      	movs	r2, #1
 800c776:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c77e:	4a0d      	ldr	r2, [pc, #52]	@ (800c7b4 <Move_zhengxuzhuan+0xd0>)
 800c780:	fb82 1203 	smull	r1, r2, r2, r3
 800c784:	1092      	asrs	r2, r2, #2
 800c786:	17db      	asrs	r3, r3, #31
 800c788:	1ad3      	subs	r3, r2, r3
 800c78a:	4a0b      	ldr	r2, [pc, #44]	@ (800c7b8 <Move_zhengxuzhuan+0xd4>)
 800c78c:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c78e:	bf00      	nop
 800c790:	f7ff fdb0 	bl	800c2f4 <GetRxFlag>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d103      	bne.n	800c7a2 <Move_zhengxuzhuan+0xbe>
 800c79a:	4b07      	ldr	r3, [pc, #28]	@ (800c7b8 <Move_zhengxuzhuan+0xd4>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d1f6      	bne.n	800c790 <Move_zhengxuzhuan+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c7a2:	201e      	movs	r0, #30
 800c7a4:	f7f6 faca 	bl	8002d3c <HAL_Delay>
}
 800c7a8:	bf00      	nop
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	2400029c 	.word	0x2400029c
 800c7b4:	66666667 	.word	0x66666667
 800c7b8:	24000c30 	.word	0x24000c30

0800c7bc <Drop_Location_jiang>:
////	RxFlag = 0;
//	if(High_Length>=14000)
//		Emm_V5_Stop_Now(5,0);
//	HAL_Delay(30);
//}
void Drop_Location_jiang(u16 speed, u8 acc, u32 length) {
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b088      	sub	sp, #32
 800c7c0:	af04      	add	r7, sp, #16
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	603a      	str	r2, [r7, #0]
 800c7c6:	80fb      	strh	r3, [r7, #6]
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c7cc:	88fb      	ldrh	r3, [r7, #6]
 800c7ce:	683a      	ldr	r2, [r7, #0]
 800c7d0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	4413      	add	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(5, 1, speed, acc, length, 1, 0);
 800c7de:	7979      	ldrb	r1, [r7, #5]
 800c7e0:	88fa      	ldrh	r2, [r7, #6]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	9302      	str	r3, [sp, #8]
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	9301      	str	r3, [sp, #4]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	2101      	movs	r1, #1
 800c7f2:	2005      	movs	r0, #5
 800c7f4:	f7ff fa82 	bl	800bcfc <Emm_V5_Pos_Control>
//	检查到位回读
	Emm_mode = 1;
 800c7f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c838 <Drop_Location_jiang+0x7c>)
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c804:	4a0d      	ldr	r2, [pc, #52]	@ (800c83c <Drop_Location_jiang+0x80>)
 800c806:	fb82 1203 	smull	r1, r2, r2, r3
 800c80a:	1092      	asrs	r2, r2, #2
 800c80c:	17db      	asrs	r3, r3, #31
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	4a0b      	ldr	r2, [pc, #44]	@ (800c840 <Drop_Location_jiang+0x84>)
 800c812:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c814:	bf00      	nop
 800c816:	f7ff fd6d 	bl	800c2f4 <GetRxFlag>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d103      	bne.n	800c828 <Drop_Location_jiang+0x6c>
 800c820:	4b07      	ldr	r3, [pc, #28]	@ (800c840 <Drop_Location_jiang+0x84>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1f6      	bne.n	800c816 <Drop_Location_jiang+0x5a>
		;
	HAL_Delay(30);
 800c828:	201e      	movs	r0, #30
 800c82a:	f7f6 fa87 	bl	8002d3c <HAL_Delay>
}
 800c82e:	bf00      	nop
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	2400029c 	.word	0x2400029c
 800c83c:	66666667 	.word	0x66666667
 800c840:	24000c30 	.word	0x24000c30

0800c844 <Drop_Location_Sheng>:
void Drop_Location_Sheng(u16 speed, u8 acc, u32 length) {
 800c844:	b580      	push	{r7, lr}
 800c846:	b088      	sub	sp, #32
 800c848:	af04      	add	r7, sp, #16
 800c84a:	4603      	mov	r3, r0
 800c84c:	603a      	str	r2, [r7, #0]
 800c84e:	80fb      	strh	r3, [r7, #6]
 800c850:	460b      	mov	r3, r1
 800c852:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c854:	88fb      	ldrh	r3, [r7, #6]
 800c856:	683a      	ldr	r2, [r7, #0]
 800c858:	fbb2 f2f3 	udiv	r2, r2, r3
 800c85c:	4613      	mov	r3, r2
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	4413      	add	r3, r2
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(5, 1, speed, acc, length, 1, 0);
 800c866:	7979      	ldrb	r1, [r7, #5]
 800c868:	88fa      	ldrh	r2, [r7, #6]
 800c86a:	2300      	movs	r3, #0
 800c86c:	9302      	str	r3, [sp, #8]
 800c86e:	2301      	movs	r3, #1
 800c870:	9301      	str	r3, [sp, #4]
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	460b      	mov	r3, r1
 800c878:	2101      	movs	r1, #1
 800c87a:	2005      	movs	r0, #5
 800c87c:	f7ff fa3e 	bl	800bcfc <Emm_V5_Pos_Control>
	Emm_mode = 1;
 800c880:	4b0f      	ldr	r3, [pc, #60]	@ (800c8c0 <Drop_Location_Sheng+0x7c>)
 800c882:	2201      	movs	r2, #1
 800c884:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c88c:	4a0d      	ldr	r2, [pc, #52]	@ (800c8c4 <Drop_Location_Sheng+0x80>)
 800c88e:	fb82 1203 	smull	r1, r2, r2, r3
 800c892:	1092      	asrs	r2, r2, #2
 800c894:	17db      	asrs	r3, r3, #31
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	4a0b      	ldr	r2, [pc, #44]	@ (800c8c8 <Drop_Location_Sheng+0x84>)
 800c89a:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c89c:	bf00      	nop
 800c89e:	f7ff fd29 	bl	800c2f4 <GetRxFlag>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d103      	bne.n	800c8b0 <Drop_Location_Sheng+0x6c>
 800c8a8:	4b07      	ldr	r3, [pc, #28]	@ (800c8c8 <Drop_Location_Sheng+0x84>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1f6      	bne.n	800c89e <Drop_Location_Sheng+0x5a>
		;

	HAL_Delay(30);
 800c8b0:	201e      	movs	r0, #30
 800c8b2:	f7f6 fa43 	bl	8002d3c <HAL_Delay>
}
 800c8b6:	bf00      	nop
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	2400029c 	.word	0x2400029c
 800c8c4:	66666667 	.word	0x66666667
 800c8c8:	24000c30 	.word	0x24000c30

0800c8cc <Move_Stop>:
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动

}

void Move_Stop(void)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	af00      	add	r7, sp, #0
	Emm_V5_Stop_Now(1,true);
 800c8d0:	2101      	movs	r1, #1
 800c8d2:	2001      	movs	r0, #1
 800c8d4:	f7ff fa66 	bl	800bda4 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(2,true);
 800c8d8:	2101      	movs	r1, #1
 800c8da:	2002      	movs	r0, #2
 800c8dc:	f7ff fa62 	bl	800bda4 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(3,true);
 800c8e0:	2101      	movs	r1, #1
 800c8e2:	2003      	movs	r0, #3
 800c8e4:	f7ff fa5e 	bl	800bda4 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(4,true);
 800c8e8:	2101      	movs	r1, #1
 800c8ea:	2004      	movs	r0, #4
 800c8ec:	f7ff fa5a 	bl	800bda4 <Emm_V5_Stop_Now>
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动
 800c8f0:	f7ff fa7a 	bl	800bde8 <Emm_V5_Synchronous_motion>
}
 800c8f4:	bf00      	nop
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <Move_TO_jianzhi1>:
	Move_Line(RunSpeed, RunAcc, Lineclk);
	HAL_Delay(yanshi);
}

void Move_TO_jianzhi1(float Backclk, float fanzhuanclk) //粗加工区
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	ed87 0a01 	vstr	s0, [r7, #4]
 800c902:	edc7 0a00 	vstr	s1, [r7]
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c906:	edd7 7a01 	vldr	s15, [r7, #4]
 800c90a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c90e:	ee17 2a90 	vmov	r2, s15
 800c912:	2178      	movs	r1, #120	@ 0x78
 800c914:	2064      	movs	r0, #100	@ 0x64
 800c916:	f7ff fdbd 	bl	800c494 <Move_Back>
 800c91a:	4603      	mov	r3, r0
 800c91c:	73fb      	strb	r3, [r7, #15]
	while(temp != true)
 800c91e:	e00b      	b.n	800c938 <Move_TO_jianzhi1+0x40>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c920:	edd7 7a01 	vldr	s15, [r7, #4]
 800c924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c928:	ee17 2a90 	vmov	r2, s15
 800c92c:	2178      	movs	r1, #120	@ 0x78
 800c92e:	2064      	movs	r0, #100	@ 0x64
 800c930:	f7ff fdb0 	bl	800c494 <Move_Back>
 800c934:	4603      	mov	r3, r0
 800c936:	73fb      	strb	r3, [r7, #15]
	while(temp != true)
 800c938:	7bfb      	ldrb	r3, [r7, #15]
 800c93a:	f083 0301 	eor.w	r3, r3, #1
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1ed      	bne.n	800c920 <Move_TO_jianzhi1+0x28>
	}
	temp = Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800c944:	edd7 7a00 	vldr	s15, [r7]
 800c948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c94c:	ee17 2a90 	vmov	r2, s15
 800c950:	2178      	movs	r1, #120	@ 0x78
 800c952:	2064      	movs	r0, #100	@ 0x64
 800c954:	f7ff fdfc 	bl	800c550 <Move_fanxuzhuan>
 800c958:	4603      	mov	r3, r0
 800c95a:	73fb      	strb	r3, [r7, #15]
	while(temp != true)
 800c95c:	e00b      	b.n	800c976 <Move_TO_jianzhi1+0x7e>
	{
		temp = Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800c95e:	edd7 7a00 	vldr	s15, [r7]
 800c962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c966:	ee17 2a90 	vmov	r2, s15
 800c96a:	2178      	movs	r1, #120	@ 0x78
 800c96c:	2064      	movs	r0, #100	@ 0x64
 800c96e:	f7ff fdef 	bl	800c550 <Move_fanxuzhuan>
 800c972:	4603      	mov	r3, r0
 800c974:	73fb      	strb	r3, [r7, #15]
	while(temp != true)
 800c976:	7bfb      	ldrb	r3, [r7, #15]
 800c978:	f083 0301 	eor.w	r3, r3, #1
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1ed      	bne.n	800c95e <Move_TO_jianzhi1+0x66>
	}
}
 800c982:	bf00      	nop
 800c984:	bf00      	nop
 800c986:	3710      	adds	r7, #16
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <Move_TO_zancunqu>:

void Move_TO_zancunqu(float Lineclk, float fanzhuanclk) //暂存区
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	ed87 0a01 	vstr	s0, [r7, #4]
 800c996:	edc7 0a00 	vstr	s1, [r7]
	Move_Line(RunSpeed, RunAcc, Lineclk);
 800c99a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c99e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9a2:	ee17 2a90 	vmov	r2, s15
 800c9a6:	2178      	movs	r1, #120	@ 0x78
 800c9a8:	2064      	movs	r0, #100	@ 0x64
 800c9aa:	f7ff fcb7 	bl	800c31c <Move_Line>
	HAL_Delay(3000);
 800c9ae:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800c9b2:	f7f6 f9c3 	bl	8002d3c <HAL_Delay>
//	旋转
	Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800c9b6:	edd7 7a00 	vldr	s15, [r7]
 800c9ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9be:	ee17 2a90 	vmov	r2, s15
 800c9c2:	2178      	movs	r1, #120	@ 0x78
 800c9c4:	2064      	movs	r0, #100	@ 0x64
 800c9c6:	f7ff fdc3 	bl	800c550 <Move_fanxuzhuan>
	HAL_Delay(yanshi);
 800c9ca:	2032      	movs	r0, #50	@ 0x32
 800c9cc:	f7f6 f9b6 	bl	8002d3c <HAL_Delay>
}
 800c9d0:	bf00      	nop
 800c9d2:	3708      	adds	r7, #8
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <Move_TO_jianzhi2>:
void Move_TO_jianzhi2(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	ed87 0a01 	vstr	s0, [r7, #4]
 800c9e2:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800c9e6:	edd7 7a01 	vldr	s15, [r7, #4]
 800c9ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9ee:	ee17 2a90 	vmov	r2, s15
 800c9f2:	2178      	movs	r1, #120	@ 0x78
 800c9f4:	2064      	movs	r0, #100	@ 0x64
 800c9f6:	f7ff fd4d 	bl	800c494 <Move_Back>
	HAL_Delay(yanshi);
 800c9fa:	2032      	movs	r0, #50	@ 0x32
 800c9fc:	f7f6 f99e 	bl	8002d3c <HAL_Delay>
	Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800ca00:	edd7 7a00 	vldr	s15, [r7]
 800ca04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca08:	ee17 2a90 	vmov	r2, s15
 800ca0c:	2178      	movs	r1, #120	@ 0x78
 800ca0e:	2064      	movs	r0, #100	@ 0x64
 800ca10:	f7ff fe68 	bl	800c6e4 <Move_zhengxuzhuan>
	HAL_Delay(yanshi);
 800ca14:	2032      	movs	r0, #50	@ 0x32
 800ca16:	f7f6 f991 	bl	8002d3c <HAL_Delay>
}
 800ca1a:	bf00      	nop
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <Move_TO_cujiagongqu>:
void Move_TO_cujiagongqu(float Backclk) //粗加工区
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b082      	sub	sp, #8
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	ed87 0a01 	vstr	s0, [r7, #4]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800ca2c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca34:	ee17 2a90 	vmov	r2, s15
 800ca38:	2178      	movs	r1, #120	@ 0x78
 800ca3a:	2064      	movs	r0, #100	@ 0x64
 800ca3c:	f7ff fd2a 	bl	800c494 <Move_Back>
	HAL_Delay(yanshi);
 800ca40:	2032      	movs	r0, #50	@ 0x32
 800ca42:	f7f6 f97b 	bl	8002d3c <HAL_Delay>
}
 800ca46:	bf00      	nop
 800ca48:	3708      	adds	r7, #8
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <Move_TO_jianzhi3>:
void Move_TO_jianzhi3(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b082      	sub	sp, #8
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	ed87 0a01 	vstr	s0, [r7, #4]
 800ca58:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800ca5c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca64:	ee17 2a90 	vmov	r2, s15
 800ca68:	2178      	movs	r1, #120	@ 0x78
 800ca6a:	2064      	movs	r0, #100	@ 0x64
 800ca6c:	f7ff fd12 	bl	800c494 <Move_Back>
	HAL_Delay(yanshi);
 800ca70:	2032      	movs	r0, #50	@ 0x32
 800ca72:	f7f6 f963 	bl	8002d3c <HAL_Delay>
	Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800ca76:	edd7 7a00 	vldr	s15, [r7]
 800ca7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca7e:	ee17 2a90 	vmov	r2, s15
 800ca82:	2178      	movs	r1, #120	@ 0x78
 800ca84:	2064      	movs	r0, #100	@ 0x64
 800ca86:	f7ff fe2d 	bl	800c6e4 <Move_zhengxuzhuan>
	HAL_Delay(yanshi);
 800ca8a:	2032      	movs	r0, #50	@ 0x32
 800ca8c:	f7f6 f956 	bl	8002d3c <HAL_Delay>
}
 800ca90:	bf00      	nop
 800ca92:	3708      	adds	r7, #8
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <Move_TO_fanyuanliaoqu>:
void Move_TO_fanyuanliaoqu(float Lineclk) //物料区
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	ed87 0a01 	vstr	s0, [r7, #4]
	Move_Back(RunSpeed, RunAcc, Lineclk);
 800caa2:	edd7 7a01 	vldr	s15, [r7, #4]
 800caa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caaa:	ee17 2a90 	vmov	r2, s15
 800caae:	2178      	movs	r1, #120	@ 0x78
 800cab0:	2064      	movs	r0, #100	@ 0x64
 800cab2:	f7ff fcef 	bl	800c494 <Move_Back>
	HAL_Delay(20000);
 800cab6:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800caba:	f7f6 f93f 	bl	8002d3c <HAL_Delay>
}
 800cabe:	bf00      	nop
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
	...

0800cac8 <Move_Action_Nopid_Left_Ctrl>:
	} else {
		Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
		HAL_Delay(yanshi);
	}
}
void Move_Action_Nopid_Left_Ctrl(float x_goal, float y_goal) {
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
 800cace:	ed87 0a01 	vstr	s0, [r7, #4]
 800cad2:	edc7 0a00 	vstr	s1, [r7]
	while (1) {
		if ((X_NOW - x_goal) < 0) {
 800cad6:	4baa      	ldr	r3, [pc, #680]	@ (800cd80 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cad8:	ed93 7a00 	vldr	s14, [r3]
 800cadc:	edd7 7a01 	vldr	s15, [r7, #4]
 800cae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cae4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caec:	d52e      	bpl.n	800cb4c <Move_Action_Nopid_Left_Ctrl+0x84>
			Move_Left(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800caee:	4ba4      	ldr	r3, [pc, #656]	@ (800cd80 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800caf0:	ed93 7a00 	vldr	s14, [r3]
 800caf4:	edd7 7a01 	vldr	s15, [r7, #4]
 800caf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cafc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb04:	dd07      	ble.n	800cb16 <Move_Action_Nopid_Left_Ctrl+0x4e>
 800cb06:	4b9e      	ldr	r3, [pc, #632]	@ (800cd80 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cb08:	ed93 7a00 	vldr	s14, [r3]
 800cb0c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb14:	e008      	b.n	800cb28 <Move_Action_Nopid_Left_Ctrl+0x60>
 800cb16:	4b9a      	ldr	r3, [pc, #616]	@ (800cd80 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cb18:	ed93 7a00 	vldr	s14, [r3]
 800cb1c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb24:	eef1 7a67 	vneg.f32	s15, s15
 800cb28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cb2c:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800cd78 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800cb30:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cb38:	ee17 2a90 	vmov	r2, s15
 800cb3c:	2164      	movs	r1, #100	@ 0x64
 800cb3e:	2064      	movs	r0, #100	@ 0x64
 800cb40:	f7ff fc4a 	bl	800c3d8 <Move_Left>
			HAL_Delay(yanshi);
 800cb44:	2032      	movs	r0, #50	@ 0x32
 800cb46:	f7f6 f8f9 	bl	8002d3c <HAL_Delay>
 800cb4a:	e02d      	b.n	800cba8 <Move_Action_Nopid_Left_Ctrl+0xe0>
		} else {
			Move_Right(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800cb4c:	4b8c      	ldr	r3, [pc, #560]	@ (800cd80 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cb4e:	ed93 7a00 	vldr	s14, [r3]
 800cb52:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb62:	dd07      	ble.n	800cb74 <Move_Action_Nopid_Left_Ctrl+0xac>
 800cb64:	4b86      	ldr	r3, [pc, #536]	@ (800cd80 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cb66:	ed93 7a00 	vldr	s14, [r3]
 800cb6a:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb72:	e008      	b.n	800cb86 <Move_Action_Nopid_Left_Ctrl+0xbe>
 800cb74:	4b82      	ldr	r3, [pc, #520]	@ (800cd80 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cb76:	ed93 7a00 	vldr	s14, [r3]
 800cb7a:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb82:	eef1 7a67 	vneg.f32	s15, s15
 800cb86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cb8a:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800cd78 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800cb8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb92:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cb96:	ee17 2a90 	vmov	r2, s15
 800cb9a:	2164      	movs	r1, #100	@ 0x64
 800cb9c:	2064      	movs	r0, #100	@ 0x64
 800cb9e:	f7ff fd35 	bl	800c60c <Move_Right>
			HAL_Delay(yanshi);
 800cba2:	2032      	movs	r0, #50	@ 0x32
 800cba4:	f7f6 f8ca 	bl	8002d3c <HAL_Delay>
		}
		if (Y_NOW - y_goal < 0) {
 800cba8:	4b76      	ldr	r3, [pc, #472]	@ (800cd84 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cbaa:	edd3 7a00 	vldr	s15, [r3]
 800cbae:	eeb1 7a67 	vneg.f32	s14, s15
 800cbb2:	edd7 7a00 	vldr	s15, [r7]
 800cbb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cbbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbc2:	d534      	bpl.n	800cc2e <Move_Action_Nopid_Left_Ctrl+0x166>
			Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800cbc4:	4b6f      	ldr	r3, [pc, #444]	@ (800cd84 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cbc6:	edd3 7a00 	vldr	s15, [r3]
 800cbca:	eeb1 7a67 	vneg.f32	s14, s15
 800cbce:	edd7 7a00 	vldr	s15, [r7]
 800cbd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbde:	dd09      	ble.n	800cbf4 <Move_Action_Nopid_Left_Ctrl+0x12c>
 800cbe0:	4b68      	ldr	r3, [pc, #416]	@ (800cd84 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cbe2:	edd3 7a00 	vldr	s15, [r3]
 800cbe6:	eeb1 7a67 	vneg.f32	s14, s15
 800cbea:	edd7 7a00 	vldr	s15, [r7]
 800cbee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbf2:	e00a      	b.n	800cc0a <Move_Action_Nopid_Left_Ctrl+0x142>
 800cbf4:	4b63      	ldr	r3, [pc, #396]	@ (800cd84 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cbf6:	edd3 7a00 	vldr	s15, [r3]
 800cbfa:	eeb1 7a67 	vneg.f32	s14, s15
 800cbfe:	edd7 7a00 	vldr	s15, [r7]
 800cc02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc06:	eef1 7a67 	vneg.f32	s15, s15
 800cc0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cc0e:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800cd78 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800cc12:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cc16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cc1a:	ee17 2a90 	vmov	r2, s15
 800cc1e:	2164      	movs	r1, #100	@ 0x64
 800cc20:	2064      	movs	r0, #100	@ 0x64
 800cc22:	f7ff fb7b 	bl	800c31c <Move_Line>
			HAL_Delay(yanshi);
 800cc26:	2032      	movs	r0, #50	@ 0x32
 800cc28:	f7f6 f888 	bl	8002d3c <HAL_Delay>
 800cc2c:	e033      	b.n	800cc96 <Move_Action_Nopid_Left_Ctrl+0x1ce>
		} else {
			Move_Back(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800cc2e:	4b55      	ldr	r3, [pc, #340]	@ (800cd84 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cc30:	edd3 7a00 	vldr	s15, [r3]
 800cc34:	eeb1 7a67 	vneg.f32	s14, s15
 800cc38:	edd7 7a00 	vldr	s15, [r7]
 800cc3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc48:	dd09      	ble.n	800cc5e <Move_Action_Nopid_Left_Ctrl+0x196>
 800cc4a:	4b4e      	ldr	r3, [pc, #312]	@ (800cd84 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cc4c:	edd3 7a00 	vldr	s15, [r3]
 800cc50:	eeb1 7a67 	vneg.f32	s14, s15
 800cc54:	edd7 7a00 	vldr	s15, [r7]
 800cc58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc5c:	e00a      	b.n	800cc74 <Move_Action_Nopid_Left_Ctrl+0x1ac>
 800cc5e:	4b49      	ldr	r3, [pc, #292]	@ (800cd84 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cc60:	edd3 7a00 	vldr	s15, [r3]
 800cc64:	eeb1 7a67 	vneg.f32	s14, s15
 800cc68:	edd7 7a00 	vldr	s15, [r7]
 800cc6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc70:	eef1 7a67 	vneg.f32	s15, s15
 800cc74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cc78:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800cd78 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800cc7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cc80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cc84:	ee17 2a90 	vmov	r2, s15
 800cc88:	2164      	movs	r1, #100	@ 0x64
 800cc8a:	2064      	movs	r0, #100	@ 0x64
 800cc8c:	f7ff fc02 	bl	800c494 <Move_Back>
			HAL_Delay(yanshi);
 800cc90:	2032      	movs	r0, #50	@ 0x32
 800cc92:	f7f6 f853 	bl	8002d3c <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 2 && ABS(Y_NOW - y_goal) < 2) {
 800cc96:	4b3a      	ldr	r3, [pc, #232]	@ (800cd80 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cc98:	ed93 7a00 	vldr	s14, [r3]
 800cc9c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cca4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccac:	dd11      	ble.n	800ccd2 <Move_Action_Nopid_Left_Ctrl+0x20a>
 800ccae:	4b34      	ldr	r3, [pc, #208]	@ (800cd80 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ccb0:	ed93 7a00 	vldr	s14, [r3]
 800ccb4:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccbc:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800ccc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ccc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc8:	bf4c      	ite	mi
 800ccca:	2301      	movmi	r3, #1
 800cccc:	2300      	movpl	r3, #0
 800ccce:	b2db      	uxtb	r3, r3
 800ccd0:	e010      	b.n	800ccf4 <Move_Action_Nopid_Left_Ctrl+0x22c>
 800ccd2:	4b2b      	ldr	r3, [pc, #172]	@ (800cd80 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ccd4:	ed93 7a00 	vldr	s14, [r3]
 800ccd8:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cce0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800cce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccec:	bfcc      	ite	gt
 800ccee:	2301      	movgt	r3, #1
 800ccf0:	2300      	movle	r3, #0
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f43f aeee 	beq.w	800cad6 <Move_Action_Nopid_Left_Ctrl+0xe>
 800ccfa:	4b22      	ldr	r3, [pc, #136]	@ (800cd84 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ccfc:	edd3 7a00 	vldr	s15, [r3]
 800cd00:	eeb1 7a67 	vneg.f32	s14, s15
 800cd04:	edd7 7a00 	vldr	s15, [r7]
 800cd08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd14:	dd13      	ble.n	800cd3e <Move_Action_Nopid_Left_Ctrl+0x276>
 800cd16:	4b1b      	ldr	r3, [pc, #108]	@ (800cd84 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cd18:	edd3 7a00 	vldr	s15, [r3]
 800cd1c:	eeb1 7a67 	vneg.f32	s14, s15
 800cd20:	edd7 7a00 	vldr	s15, [r7]
 800cd24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd28:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800cd2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd34:	bf4c      	ite	mi
 800cd36:	2301      	movmi	r3, #1
 800cd38:	2300      	movpl	r3, #0
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	e012      	b.n	800cd64 <Move_Action_Nopid_Left_Ctrl+0x29c>
 800cd3e:	4b11      	ldr	r3, [pc, #68]	@ (800cd84 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cd40:	edd3 7a00 	vldr	s15, [r3]
 800cd44:	eeb1 7a67 	vneg.f32	s14, s15
 800cd48:	edd7 7a00 	vldr	s15, [r7]
 800cd4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd50:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800cd54:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd5c:	bfcc      	ite	gt
 800cd5e:	2301      	movgt	r3, #1
 800cd60:	2300      	movle	r3, #0
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d100      	bne.n	800cd6a <Move_Action_Nopid_Left_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800cd68:	e6b5      	b.n	800cad6 <Move_Action_Nopid_Left_Ctrl+0xe>
			break; /* 到达目标 */
 800cd6a:	bf00      	nop
		}
	}
}
 800cd6c:	bf00      	nop
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	f3af 8000 	nop.w
 800cd78:	9999999a 	.word	0x9999999a
 800cd7c:	402b9999 	.word	0x402b9999
 800cd80:	24000af8 	.word	0x24000af8
 800cd84:	24000afc 	.word	0x24000afc

0800cd88 <Move_Action_Nopid_Forward_Ctrl>:
void Move_Action_Nopid_Forward_Ctrl(float x_goal, float y_goal) {
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	ed87 0a01 	vstr	s0, [r7, #4]
 800cd92:	edc7 0a00 	vstr	s1, [r7]
	//ACTION调整
	while (1) {

		if ((X_NOW - x_goal) < 0) {
 800cd96:	4baa      	ldr	r3, [pc, #680]	@ (800d040 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800cd98:	ed93 7a00 	vldr	s14, [r3]
 800cd9c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cda0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cda4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdac:	d52e      	bpl.n	800ce0c <Move_Action_Nopid_Forward_Ctrl+0x84>
			Move_Line(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800cdae:	4ba4      	ldr	r3, [pc, #656]	@ (800d040 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800cdb0:	ed93 7a00 	vldr	s14, [r3]
 800cdb4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cdb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc4:	dd07      	ble.n	800cdd6 <Move_Action_Nopid_Forward_Ctrl+0x4e>
 800cdc6:	4b9e      	ldr	r3, [pc, #632]	@ (800d040 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800cdc8:	ed93 7a00 	vldr	s14, [r3]
 800cdcc:	edd7 7a01 	vldr	s15, [r7, #4]
 800cdd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdd4:	e008      	b.n	800cde8 <Move_Action_Nopid_Forward_Ctrl+0x60>
 800cdd6:	4b9a      	ldr	r3, [pc, #616]	@ (800d040 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800cdd8:	ed93 7a00 	vldr	s14, [r3]
 800cddc:	edd7 7a01 	vldr	s15, [r7, #4]
 800cde0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cde4:	eef1 7a67 	vneg.f32	s15, s15
 800cde8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cdec:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800d038 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800cdf0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cdf4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cdf8:	ee17 2a90 	vmov	r2, s15
 800cdfc:	2164      	movs	r1, #100	@ 0x64
 800cdfe:	2064      	movs	r0, #100	@ 0x64
 800ce00:	f7ff fa8c 	bl	800c31c <Move_Line>
			HAL_Delay(yanshi);
 800ce04:	2032      	movs	r0, #50	@ 0x32
 800ce06:	f7f5 ff99 	bl	8002d3c <HAL_Delay>
 800ce0a:	e02d      	b.n	800ce68 <Move_Action_Nopid_Forward_Ctrl+0xe0>
		} else {
			Move_Back(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800ce0c:	4b8c      	ldr	r3, [pc, #560]	@ (800d040 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800ce0e:	ed93 7a00 	vldr	s14, [r3]
 800ce12:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce16:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce22:	dd07      	ble.n	800ce34 <Move_Action_Nopid_Forward_Ctrl+0xac>
 800ce24:	4b86      	ldr	r3, [pc, #536]	@ (800d040 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800ce26:	ed93 7a00 	vldr	s14, [r3]
 800ce2a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce32:	e008      	b.n	800ce46 <Move_Action_Nopid_Forward_Ctrl+0xbe>
 800ce34:	4b82      	ldr	r3, [pc, #520]	@ (800d040 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800ce36:	ed93 7a00 	vldr	s14, [r3]
 800ce3a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce42:	eef1 7a67 	vneg.f32	s15, s15
 800ce46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ce4a:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800d038 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800ce4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce52:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ce56:	ee17 2a90 	vmov	r2, s15
 800ce5a:	2164      	movs	r1, #100	@ 0x64
 800ce5c:	2064      	movs	r0, #100	@ 0x64
 800ce5e:	f7ff fb19 	bl	800c494 <Move_Back>
			HAL_Delay(yanshi);
 800ce62:	2032      	movs	r0, #50	@ 0x32
 800ce64:	f7f5 ff6a 	bl	8002d3c <HAL_Delay>
		}
		if ((Y_NOW - y_goal) < 0) {
 800ce68:	4b76      	ldr	r3, [pc, #472]	@ (800d044 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800ce6a:	edd3 7a00 	vldr	s15, [r3]
 800ce6e:	eeb1 7a67 	vneg.f32	s14, s15
 800ce72:	edd7 7a00 	vldr	s15, [r7]
 800ce76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce82:	d534      	bpl.n	800ceee <Move_Action_Nopid_Forward_Ctrl+0x166>
			Move_Right(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800ce84:	4b6f      	ldr	r3, [pc, #444]	@ (800d044 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800ce86:	edd3 7a00 	vldr	s15, [r3]
 800ce8a:	eeb1 7a67 	vneg.f32	s14, s15
 800ce8e:	edd7 7a00 	vldr	s15, [r7]
 800ce92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce9e:	dd09      	ble.n	800ceb4 <Move_Action_Nopid_Forward_Ctrl+0x12c>
 800cea0:	4b68      	ldr	r3, [pc, #416]	@ (800d044 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800cea2:	edd3 7a00 	vldr	s15, [r3]
 800cea6:	eeb1 7a67 	vneg.f32	s14, s15
 800ceaa:	edd7 7a00 	vldr	s15, [r7]
 800ceae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceb2:	e00a      	b.n	800ceca <Move_Action_Nopid_Forward_Ctrl+0x142>
 800ceb4:	4b63      	ldr	r3, [pc, #396]	@ (800d044 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800ceb6:	edd3 7a00 	vldr	s15, [r3]
 800ceba:	eeb1 7a67 	vneg.f32	s14, s15
 800cebe:	edd7 7a00 	vldr	s15, [r7]
 800cec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cec6:	eef1 7a67 	vneg.f32	s15, s15
 800ceca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cece:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800d038 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800ced2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ced6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ceda:	ee17 2a90 	vmov	r2, s15
 800cede:	2164      	movs	r1, #100	@ 0x64
 800cee0:	2064      	movs	r0, #100	@ 0x64
 800cee2:	f7ff fb93 	bl	800c60c <Move_Right>
			HAL_Delay(yanshi);
 800cee6:	2032      	movs	r0, #50	@ 0x32
 800cee8:	f7f5 ff28 	bl	8002d3c <HAL_Delay>
 800ceec:	e033      	b.n	800cf56 <Move_Action_Nopid_Forward_Ctrl+0x1ce>
		} else {
			Move_Left(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800ceee:	4b55      	ldr	r3, [pc, #340]	@ (800d044 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800cef0:	edd3 7a00 	vldr	s15, [r3]
 800cef4:	eeb1 7a67 	vneg.f32	s14, s15
 800cef8:	edd7 7a00 	vldr	s15, [r7]
 800cefc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf08:	dd09      	ble.n	800cf1e <Move_Action_Nopid_Forward_Ctrl+0x196>
 800cf0a:	4b4e      	ldr	r3, [pc, #312]	@ (800d044 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800cf0c:	edd3 7a00 	vldr	s15, [r3]
 800cf10:	eeb1 7a67 	vneg.f32	s14, s15
 800cf14:	edd7 7a00 	vldr	s15, [r7]
 800cf18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf1c:	e00a      	b.n	800cf34 <Move_Action_Nopid_Forward_Ctrl+0x1ac>
 800cf1e:	4b49      	ldr	r3, [pc, #292]	@ (800d044 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800cf20:	edd3 7a00 	vldr	s15, [r3]
 800cf24:	eeb1 7a67 	vneg.f32	s14, s15
 800cf28:	edd7 7a00 	vldr	s15, [r7]
 800cf2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf30:	eef1 7a67 	vneg.f32	s15, s15
 800cf34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cf38:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800d038 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800cf3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf40:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cf44:	ee17 2a90 	vmov	r2, s15
 800cf48:	2164      	movs	r1, #100	@ 0x64
 800cf4a:	2064      	movs	r0, #100	@ 0x64
 800cf4c:	f7ff fa44 	bl	800c3d8 <Move_Left>
			HAL_Delay(yanshi);
 800cf50:	2032      	movs	r0, #50	@ 0x32
 800cf52:	f7f5 fef3 	bl	8002d3c <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 5 && ABS(Y_NOW - y_goal) < 5) {
 800cf56:	4b3a      	ldr	r3, [pc, #232]	@ (800d040 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800cf58:	ed93 7a00 	vldr	s14, [r3]
 800cf5c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf6c:	dd11      	ble.n	800cf92 <Move_Action_Nopid_Forward_Ctrl+0x20a>
 800cf6e:	4b34      	ldr	r3, [pc, #208]	@ (800d040 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800cf70:	ed93 7a00 	vldr	s14, [r3]
 800cf74:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf7c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800cf80:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf88:	bf4c      	ite	mi
 800cf8a:	2301      	movmi	r3, #1
 800cf8c:	2300      	movpl	r3, #0
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	e010      	b.n	800cfb4 <Move_Action_Nopid_Forward_Ctrl+0x22c>
 800cf92:	4b2b      	ldr	r3, [pc, #172]	@ (800d040 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800cf94:	ed93 7a00 	vldr	s14, [r3]
 800cf98:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfa0:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800cfa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cfa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfac:	bfcc      	ite	gt
 800cfae:	2301      	movgt	r3, #1
 800cfb0:	2300      	movle	r3, #0
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f43f aeee 	beq.w	800cd96 <Move_Action_Nopid_Forward_Ctrl+0xe>
 800cfba:	4b22      	ldr	r3, [pc, #136]	@ (800d044 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800cfbc:	edd3 7a00 	vldr	s15, [r3]
 800cfc0:	eeb1 7a67 	vneg.f32	s14, s15
 800cfc4:	edd7 7a00 	vldr	s15, [r7]
 800cfc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cfd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfd4:	dd13      	ble.n	800cffe <Move_Action_Nopid_Forward_Ctrl+0x276>
 800cfd6:	4b1b      	ldr	r3, [pc, #108]	@ (800d044 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800cfd8:	edd3 7a00 	vldr	s15, [r3]
 800cfdc:	eeb1 7a67 	vneg.f32	s14, s15
 800cfe0:	edd7 7a00 	vldr	s15, [r7]
 800cfe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfe8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800cfec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff4:	bf4c      	ite	mi
 800cff6:	2301      	movmi	r3, #1
 800cff8:	2300      	movpl	r3, #0
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	e012      	b.n	800d024 <Move_Action_Nopid_Forward_Ctrl+0x29c>
 800cffe:	4b11      	ldr	r3, [pc, #68]	@ (800d044 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d000:	edd3 7a00 	vldr	s15, [r3]
 800d004:	eeb1 7a67 	vneg.f32	s14, s15
 800d008:	edd7 7a00 	vldr	s15, [r7]
 800d00c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d010:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d014:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d01c:	bfcc      	ite	gt
 800d01e:	2301      	movgt	r3, #1
 800d020:	2300      	movle	r3, #0
 800d022:	b2db      	uxtb	r3, r3
 800d024:	2b00      	cmp	r3, #0
 800d026:	d100      	bne.n	800d02a <Move_Action_Nopid_Forward_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800d028:	e6b5      	b.n	800cd96 <Move_Action_Nopid_Forward_Ctrl+0xe>
			break; /* 到达目标 */
 800d02a:	bf00      	nop
		}
	}
}
 800d02c:	bf00      	nop
 800d02e:	3708      	adds	r7, #8
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}
 800d034:	f3af 8000 	nop.w
 800d038:	9999999a 	.word	0x9999999a
 800d03c:	402b9999 	.word	0x402b9999
 800d040:	24000af8 	.word	0x24000af8
 800d044:	24000afc 	.word	0x24000afc

0800d048 <Move_Action_Nopid_Right_Ctrl>:

void Move_Action_Nopid_Right_Ctrl(float x_goal, float y_goal) {
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	ed87 0a01 	vstr	s0, [r7, #4]
 800d052:	edc7 0a00 	vstr	s1, [r7]
	while (1) {
		if ((X_NOW - x_goal) < 0) {
 800d056:	4baa      	ldr	r3, [pc, #680]	@ (800d300 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d058:	ed93 7a00 	vldr	s14, [r3]
 800d05c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d060:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d064:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d06c:	d52e      	bpl.n	800d0cc <Move_Action_Nopid_Right_Ctrl+0x84>

			Move_Right(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d06e:	4ba4      	ldr	r3, [pc, #656]	@ (800d300 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d070:	ed93 7a00 	vldr	s14, [r3]
 800d074:	edd7 7a01 	vldr	s15, [r7, #4]
 800d078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d07c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d084:	dd07      	ble.n	800d096 <Move_Action_Nopid_Right_Ctrl+0x4e>
 800d086:	4b9e      	ldr	r3, [pc, #632]	@ (800d300 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d088:	ed93 7a00 	vldr	s14, [r3]
 800d08c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d090:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d094:	e008      	b.n	800d0a8 <Move_Action_Nopid_Right_Ctrl+0x60>
 800d096:	4b9a      	ldr	r3, [pc, #616]	@ (800d300 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d098:	ed93 7a00 	vldr	s14, [r3]
 800d09c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0a4:	eef1 7a67 	vneg.f32	s15, s15
 800d0a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d0ac:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800d2f8 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d0b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d0b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d0b8:	ee17 2a90 	vmov	r2, s15
 800d0bc:	2164      	movs	r1, #100	@ 0x64
 800d0be:	2064      	movs	r0, #100	@ 0x64
 800d0c0:	f7ff faa4 	bl	800c60c <Move_Right>
			HAL_Delay(yanshi);
 800d0c4:	2032      	movs	r0, #50	@ 0x32
 800d0c6:	f7f5 fe39 	bl	8002d3c <HAL_Delay>
 800d0ca:	e02d      	b.n	800d128 <Move_Action_Nopid_Right_Ctrl+0xe0>
		} else {
			Move_Left(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d0cc:	4b8c      	ldr	r3, [pc, #560]	@ (800d300 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d0ce:	ed93 7a00 	vldr	s14, [r3]
 800d0d2:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e2:	dd07      	ble.n	800d0f4 <Move_Action_Nopid_Right_Ctrl+0xac>
 800d0e4:	4b86      	ldr	r3, [pc, #536]	@ (800d300 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d0e6:	ed93 7a00 	vldr	s14, [r3]
 800d0ea:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0f2:	e008      	b.n	800d106 <Move_Action_Nopid_Right_Ctrl+0xbe>
 800d0f4:	4b82      	ldr	r3, [pc, #520]	@ (800d300 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d0f6:	ed93 7a00 	vldr	s14, [r3]
 800d0fa:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d102:	eef1 7a67 	vneg.f32	s15, s15
 800d106:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d10a:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800d2f8 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d10e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d112:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d116:	ee17 2a90 	vmov	r2, s15
 800d11a:	2164      	movs	r1, #100	@ 0x64
 800d11c:	2064      	movs	r0, #100	@ 0x64
 800d11e:	f7ff f95b 	bl	800c3d8 <Move_Left>
			HAL_Delay(yanshi);
 800d122:	2032      	movs	r0, #50	@ 0x32
 800d124:	f7f5 fe0a 	bl	8002d3c <HAL_Delay>
		}
		if ((Y_NOW - y_goal) < 0) {
 800d128:	4b76      	ldr	r3, [pc, #472]	@ (800d304 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d12a:	edd3 7a00 	vldr	s15, [r3]
 800d12e:	eeb1 7a67 	vneg.f32	s14, s15
 800d132:	edd7 7a00 	vldr	s15, [r7]
 800d136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d13a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d142:	d534      	bpl.n	800d1ae <Move_Action_Nopid_Right_Ctrl+0x166>
			Move_Back(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d144:	4b6f      	ldr	r3, [pc, #444]	@ (800d304 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d146:	edd3 7a00 	vldr	s15, [r3]
 800d14a:	eeb1 7a67 	vneg.f32	s14, s15
 800d14e:	edd7 7a00 	vldr	s15, [r7]
 800d152:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d156:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d15e:	dd09      	ble.n	800d174 <Move_Action_Nopid_Right_Ctrl+0x12c>
 800d160:	4b68      	ldr	r3, [pc, #416]	@ (800d304 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d162:	edd3 7a00 	vldr	s15, [r3]
 800d166:	eeb1 7a67 	vneg.f32	s14, s15
 800d16a:	edd7 7a00 	vldr	s15, [r7]
 800d16e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d172:	e00a      	b.n	800d18a <Move_Action_Nopid_Right_Ctrl+0x142>
 800d174:	4b63      	ldr	r3, [pc, #396]	@ (800d304 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d176:	edd3 7a00 	vldr	s15, [r3]
 800d17a:	eeb1 7a67 	vneg.f32	s14, s15
 800d17e:	edd7 7a00 	vldr	s15, [r7]
 800d182:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d186:	eef1 7a67 	vneg.f32	s15, s15
 800d18a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d18e:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800d2f8 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d192:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d196:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d19a:	ee17 2a90 	vmov	r2, s15
 800d19e:	2164      	movs	r1, #100	@ 0x64
 800d1a0:	2064      	movs	r0, #100	@ 0x64
 800d1a2:	f7ff f977 	bl	800c494 <Move_Back>
			HAL_Delay(yanshi);
 800d1a6:	2032      	movs	r0, #50	@ 0x32
 800d1a8:	f7f5 fdc8 	bl	8002d3c <HAL_Delay>
 800d1ac:	e033      	b.n	800d216 <Move_Action_Nopid_Right_Ctrl+0x1ce>
		} else {
			Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d1ae:	4b55      	ldr	r3, [pc, #340]	@ (800d304 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d1b0:	edd3 7a00 	vldr	s15, [r3]
 800d1b4:	eeb1 7a67 	vneg.f32	s14, s15
 800d1b8:	edd7 7a00 	vldr	s15, [r7]
 800d1bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1c8:	dd09      	ble.n	800d1de <Move_Action_Nopid_Right_Ctrl+0x196>
 800d1ca:	4b4e      	ldr	r3, [pc, #312]	@ (800d304 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d1cc:	edd3 7a00 	vldr	s15, [r3]
 800d1d0:	eeb1 7a67 	vneg.f32	s14, s15
 800d1d4:	edd7 7a00 	vldr	s15, [r7]
 800d1d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1dc:	e00a      	b.n	800d1f4 <Move_Action_Nopid_Right_Ctrl+0x1ac>
 800d1de:	4b49      	ldr	r3, [pc, #292]	@ (800d304 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d1e0:	edd3 7a00 	vldr	s15, [r3]
 800d1e4:	eeb1 7a67 	vneg.f32	s14, s15
 800d1e8:	edd7 7a00 	vldr	s15, [r7]
 800d1ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1f0:	eef1 7a67 	vneg.f32	s15, s15
 800d1f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d1f8:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800d2f8 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d1fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d200:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d204:	ee17 2a90 	vmov	r2, s15
 800d208:	2164      	movs	r1, #100	@ 0x64
 800d20a:	2064      	movs	r0, #100	@ 0x64
 800d20c:	f7ff f886 	bl	800c31c <Move_Line>
			HAL_Delay(yanshi);
 800d210:	2032      	movs	r0, #50	@ 0x32
 800d212:	f7f5 fd93 	bl	8002d3c <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 5 && ABS(Y_NOW - y_goal) < 5) {
 800d216:	4b3a      	ldr	r3, [pc, #232]	@ (800d300 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d218:	ed93 7a00 	vldr	s14, [r3]
 800d21c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d220:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d22c:	dd11      	ble.n	800d252 <Move_Action_Nopid_Right_Ctrl+0x20a>
 800d22e:	4b34      	ldr	r3, [pc, #208]	@ (800d300 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d230:	ed93 7a00 	vldr	s14, [r3]
 800d234:	edd7 7a01 	vldr	s15, [r7, #4]
 800d238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d23c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d240:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d248:	bf4c      	ite	mi
 800d24a:	2301      	movmi	r3, #1
 800d24c:	2300      	movpl	r3, #0
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	e010      	b.n	800d274 <Move_Action_Nopid_Right_Ctrl+0x22c>
 800d252:	4b2b      	ldr	r3, [pc, #172]	@ (800d300 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d254:	ed93 7a00 	vldr	s14, [r3]
 800d258:	edd7 7a01 	vldr	s15, [r7, #4]
 800d25c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d260:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d264:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d26c:	bfcc      	ite	gt
 800d26e:	2301      	movgt	r3, #1
 800d270:	2300      	movle	r3, #0
 800d272:	b2db      	uxtb	r3, r3
 800d274:	2b00      	cmp	r3, #0
 800d276:	f43f aeee 	beq.w	800d056 <Move_Action_Nopid_Right_Ctrl+0xe>
 800d27a:	4b22      	ldr	r3, [pc, #136]	@ (800d304 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d27c:	edd3 7a00 	vldr	s15, [r3]
 800d280:	eeb1 7a67 	vneg.f32	s14, s15
 800d284:	edd7 7a00 	vldr	s15, [r7]
 800d288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d28c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d294:	dd13      	ble.n	800d2be <Move_Action_Nopid_Right_Ctrl+0x276>
 800d296:	4b1b      	ldr	r3, [pc, #108]	@ (800d304 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d298:	edd3 7a00 	vldr	s15, [r3]
 800d29c:	eeb1 7a67 	vneg.f32	s14, s15
 800d2a0:	edd7 7a00 	vldr	s15, [r7]
 800d2a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2a8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d2ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2b4:	bf4c      	ite	mi
 800d2b6:	2301      	movmi	r3, #1
 800d2b8:	2300      	movpl	r3, #0
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	e012      	b.n	800d2e4 <Move_Action_Nopid_Right_Ctrl+0x29c>
 800d2be:	4b11      	ldr	r3, [pc, #68]	@ (800d304 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d2c0:	edd3 7a00 	vldr	s15, [r3]
 800d2c4:	eeb1 7a67 	vneg.f32	s14, s15
 800d2c8:	edd7 7a00 	vldr	s15, [r7]
 800d2cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2d0:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d2d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2dc:	bfcc      	ite	gt
 800d2de:	2301      	movgt	r3, #1
 800d2e0:	2300      	movle	r3, #0
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d100      	bne.n	800d2ea <Move_Action_Nopid_Right_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800d2e8:	e6b5      	b.n	800d056 <Move_Action_Nopid_Right_Ctrl+0xe>
			break; /* 到达目标 */
 800d2ea:	bf00      	nop
		}
	}
}
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	f3af 8000 	nop.w
 800d2f8:	9999999a 	.word	0x9999999a
 800d2fc:	402b9999 	.word	0x402b9999
 800d300:	24000af8 	.word	0x24000af8
 800d304:	24000afc 	.word	0x24000afc

0800d308 <Move_Tx_Pid_Ctrl>:

/* Tx姿态调整 */
uint16_t time_tx=0;
void Move_Tx_Pid_Ctrl(float TX_X_Goal,float TX_Y_Goal) {
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	ed87 0a01 	vstr	s0, [r7, #4]
 800d312:	edc7 0a00 	vstr	s1, [r7]

	while (1) {
	if (TX_Y_out >= 0) {
 800d316:	4b72      	ldr	r3, [pc, #456]	@ (800d4e0 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d318:	edd3 7a00 	vldr	s15, [r3]
 800d31c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d324:	db12      	blt.n	800d34c <Move_Tx_Pid_Ctrl+0x44>
			Move_Right(80, 80, TX_Y_out * 5);
 800d326:	4b6e      	ldr	r3, [pc, #440]	@ (800d4e0 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d328:	edd3 7a00 	vldr	s15, [r3]
 800d32c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d330:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d338:	ee17 2a90 	vmov	r2, s15
 800d33c:	2150      	movs	r1, #80	@ 0x50
 800d33e:	2050      	movs	r0, #80	@ 0x50
 800d340:	f7ff f964 	bl	800c60c <Move_Right>
			HAL_Delay(5);
 800d344:	2005      	movs	r0, #5
 800d346:	f7f5 fcf9 	bl	8002d3c <HAL_Delay>
 800d34a:	e013      	b.n	800d374 <Move_Tx_Pid_Ctrl+0x6c>
		} else {
			Move_Left(80, 80, -TX_Y_out * 5);
 800d34c:	4b64      	ldr	r3, [pc, #400]	@ (800d4e0 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d34e:	edd3 7a00 	vldr	s15, [r3]
 800d352:	eef1 7a67 	vneg.f32	s15, s15
 800d356:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d35a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d35e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d362:	ee17 2a90 	vmov	r2, s15
 800d366:	2150      	movs	r1, #80	@ 0x50
 800d368:	2050      	movs	r0, #80	@ 0x50
 800d36a:	f7ff f835 	bl	800c3d8 <Move_Left>
			HAL_Delay(5);
 800d36e:	2005      	movs	r0, #5
 800d370:	f7f5 fce4 	bl	8002d3c <HAL_Delay>
		}

		if (TX_X_out >= 0) {
 800d374:	4b5b      	ldr	r3, [pc, #364]	@ (800d4e4 <Move_Tx_Pid_Ctrl+0x1dc>)
 800d376:	edd3 7a00 	vldr	s15, [r3]
 800d37a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d382:	db12      	blt.n	800d3aa <Move_Tx_Pid_Ctrl+0xa2>
			Move_Back(80, 80, TX_X_out * 5);
 800d384:	4b57      	ldr	r3, [pc, #348]	@ (800d4e4 <Move_Tx_Pid_Ctrl+0x1dc>)
 800d386:	edd3 7a00 	vldr	s15, [r3]
 800d38a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d38e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d396:	ee17 2a90 	vmov	r2, s15
 800d39a:	2150      	movs	r1, #80	@ 0x50
 800d39c:	2050      	movs	r0, #80	@ 0x50
 800d39e:	f7ff f879 	bl	800c494 <Move_Back>
			HAL_Delay(5);
 800d3a2:	2005      	movs	r0, #5
 800d3a4:	f7f5 fcca 	bl	8002d3c <HAL_Delay>
 800d3a8:	e013      	b.n	800d3d2 <Move_Tx_Pid_Ctrl+0xca>
		} else {
			Move_Line(80, 80, -TX_X_out * 5);
 800d3aa:	4b4e      	ldr	r3, [pc, #312]	@ (800d4e4 <Move_Tx_Pid_Ctrl+0x1dc>)
 800d3ac:	edd3 7a00 	vldr	s15, [r3]
 800d3b0:	eef1 7a67 	vneg.f32	s15, s15
 800d3b4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d3b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d3bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3c0:	ee17 2a90 	vmov	r2, s15
 800d3c4:	2150      	movs	r1, #80	@ 0x50
 800d3c6:	2050      	movs	r0, #80	@ 0x50
 800d3c8:	f7fe ffa8 	bl	800c31c <Move_Line>
			HAL_Delay(5);
 800d3cc:	2005      	movs	r0, #5
 800d3ce:	f7f5 fcb5 	bl	8002d3c <HAL_Delay>
		}

		if (ABS(Tx_NOW - 370.5) < 5 && ABS(Ty_NOW -230.5) < 5) {
 800d3d2:	4b45      	ldr	r3, [pc, #276]	@ (800d4e8 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d3d4:	edd3 7a00 	vldr	s15, [r3]
 800d3d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d3dc:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800d4d0 <Move_Tx_Pid_Ctrl+0x1c8>
 800d3e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d3e4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ec:	dd13      	ble.n	800d416 <Move_Tx_Pid_Ctrl+0x10e>
 800d3ee:	4b3e      	ldr	r3, [pc, #248]	@ (800d4e8 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d3f0:	edd3 7a00 	vldr	s15, [r3]
 800d3f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d3f8:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 800d4d0 <Move_Tx_Pid_Ctrl+0x1c8>
 800d3fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d400:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 800d404:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d40c:	bf4c      	ite	mi
 800d40e:	2301      	movmi	r3, #1
 800d410:	2300      	movpl	r3, #0
 800d412:	b2db      	uxtb	r3, r3
 800d414:	e012      	b.n	800d43c <Move_Tx_Pid_Ctrl+0x134>
 800d416:	4b34      	ldr	r3, [pc, #208]	@ (800d4e8 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d418:	edd3 7a00 	vldr	s15, [r3]
 800d41c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d420:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 800d4d0 <Move_Tx_Pid_Ctrl+0x1c8>
 800d424:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d428:	eeb9 6b04 	vmov.f64	d6, #148	@ 0xc0a00000 -5.0
 800d42c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d434:	bfcc      	ite	gt
 800d436:	2301      	movgt	r3, #1
 800d438:	2300      	movle	r3, #0
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d036      	beq.n	800d4ae <Move_Tx_Pid_Ctrl+0x1a6>
 800d440:	4b2a      	ldr	r3, [pc, #168]	@ (800d4ec <Move_Tx_Pid_Ctrl+0x1e4>)
 800d442:	edd3 7a00 	vldr	s15, [r3]
 800d446:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d44a:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 800d4d8 <Move_Tx_Pid_Ctrl+0x1d0>
 800d44e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d452:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d45a:	dd13      	ble.n	800d484 <Move_Tx_Pid_Ctrl+0x17c>
 800d45c:	4b23      	ldr	r3, [pc, #140]	@ (800d4ec <Move_Tx_Pid_Ctrl+0x1e4>)
 800d45e:	edd3 7a00 	vldr	s15, [r3]
 800d462:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d466:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 800d4d8 <Move_Tx_Pid_Ctrl+0x1d0>
 800d46a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d46e:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 800d472:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d47a:	bf4c      	ite	mi
 800d47c:	2301      	movmi	r3, #1
 800d47e:	2300      	movpl	r3, #0
 800d480:	b2db      	uxtb	r3, r3
 800d482:	e012      	b.n	800d4aa <Move_Tx_Pid_Ctrl+0x1a2>
 800d484:	4b19      	ldr	r3, [pc, #100]	@ (800d4ec <Move_Tx_Pid_Ctrl+0x1e4>)
 800d486:	edd3 7a00 	vldr	s15, [r3]
 800d48a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d48e:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 800d4d8 <Move_Tx_Pid_Ctrl+0x1d0>
 800d492:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d496:	eeb9 6b04 	vmov.f64	d6, #148	@ 0xc0a00000 -5.0
 800d49a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a2:	bfcc      	ite	gt
 800d4a4:	2301      	movgt	r3, #1
 800d4a6:	2300      	movle	r3, #0
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d108      	bne.n	800d4c0 <Move_Tx_Pid_Ctrl+0x1b8>
			break;
		}
		if(time_tx>=250)
 800d4ae:	4b10      	ldr	r3, [pc, #64]	@ (800d4f0 <Move_Tx_Pid_Ctrl+0x1e8>)
 800d4b0:	881b      	ldrh	r3, [r3, #0]
 800d4b2:	2bf9      	cmp	r3, #249	@ 0xf9
 800d4b4:	f67f af2f 	bls.w	800d316 <Move_Tx_Pid_Ctrl+0xe>
		{time_tx=0;
 800d4b8:	4b0d      	ldr	r3, [pc, #52]	@ (800d4f0 <Move_Tx_Pid_Ctrl+0x1e8>)
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	801a      	strh	r2, [r3, #0]
			break;
 800d4be:	e000      	b.n	800d4c2 <Move_Tx_Pid_Ctrl+0x1ba>
			break;
 800d4c0:	bf00      	nop
		}
	}

}
 800d4c2:	bf00      	nop
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	f3af 8000 	nop.w
 800d4d0:	00000000 	.word	0x00000000
 800d4d4:	40772800 	.word	0x40772800
 800d4d8:	00000000 	.word	0x00000000
 800d4dc:	406cd000 	.word	0x406cd000
 800d4e0:	24000c28 	.word	0x24000c28
 800d4e4:	24000c24 	.word	0x24000c24
 800d4e8:	24000454 	.word	0x24000454
 800d4ec:	24000458 	.word	0x24000458
 800d4f0:	24000c34 	.word	0x24000c34

0800d4f4 <Host2SCS>:
}

//1个16位数拆分为2个8位数
//DataL为低位，DataH为高位
void Host2SCS(uint8_t *DataL, uint8_t *DataH, int Data)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
	if (End)
 800d500:	4b0e      	ldr	r3, [pc, #56]	@ (800d53c <Host2SCS+0x48>)
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d009      	beq.n	800d51c <Host2SCS+0x28>
	{
		*DataL = (Data >> 8);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	121b      	asrs	r3, r3, #8
 800d50c:	b2da      	uxtb	r2, r3
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	701a      	strb	r2, [r3, #0]
		*DataH = (Data & 0xff);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	b2da      	uxtb	r2, r3
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	701a      	strb	r2, [r3, #0]
	else
	{
		*DataH = (Data >> 8);
		*DataL = (Data & 0xff);
	}
}
 800d51a:	e008      	b.n	800d52e <Host2SCS+0x3a>
		*DataH = (Data >> 8);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	121b      	asrs	r3, r3, #8
 800d520:	b2da      	uxtb	r2, r3
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	701a      	strb	r2, [r3, #0]
		*DataL = (Data & 0xff);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	b2da      	uxtb	r2, r3
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	701a      	strb	r2, [r3, #0]
}
 800d52e:	bf00      	nop
 800d530:	3714      	adds	r7, #20
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	24000c36 	.word	0x24000c36

0800d540 <writeBuf>:
	return Data;
}

void writeBuf(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen,
		uint8_t Fun)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b086      	sub	sp, #24
 800d544:	af00      	add	r7, sp, #0
 800d546:	603a      	str	r2, [r7, #0]
 800d548:	461a      	mov	r2, r3
 800d54a:	4603      	mov	r3, r0
 800d54c:	71fb      	strb	r3, [r7, #7]
 800d54e:	460b      	mov	r3, r1
 800d550:	71bb      	strb	r3, [r7, #6]
 800d552:	4613      	mov	r3, r2
 800d554:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t msgLen = 2;
 800d556:	2302      	movs	r3, #2
 800d558:	75bb      	strb	r3, [r7, #22]
	uint8_t bBuf[6];
	uint8_t CheckSum = 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	73fb      	strb	r3, [r7, #15]
	bBuf[0] = 0xff;
 800d55e:	23ff      	movs	r3, #255	@ 0xff
 800d560:	743b      	strb	r3, [r7, #16]
	bBuf[1] = 0xff;
 800d562:	23ff      	movs	r3, #255	@ 0xff
 800d564:	747b      	strb	r3, [r7, #17]
	bBuf[2] = ID;
 800d566:	79fb      	ldrb	r3, [r7, #7]
 800d568:	74bb      	strb	r3, [r7, #18]
	bBuf[4] = Fun;
 800d56a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d56e:	753b      	strb	r3, [r7, #20]
	if (nDat)
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d010      	beq.n	800d598 <writeBuf+0x58>
	{
		msgLen += nLen + 1;
 800d576:	797a      	ldrb	r2, [r7, #5]
 800d578:	7dbb      	ldrb	r3, [r7, #22]
 800d57a:	4413      	add	r3, r2
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	3301      	adds	r3, #1
 800d580:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = msgLen;
 800d582:	7dbb      	ldrb	r3, [r7, #22]
 800d584:	74fb      	strb	r3, [r7, #19]
		bBuf[5] = MemAddr;
 800d586:	79bb      	ldrb	r3, [r7, #6]
 800d588:	757b      	strb	r3, [r7, #21]
		writeSCS(bBuf, 6);
 800d58a:	f107 0310 	add.w	r3, r7, #16
 800d58e:	2106      	movs	r1, #6
 800d590:	4618      	mov	r0, r3
 800d592:	f000 f911 	bl	800d7b8 <writeSCS>
 800d596:	e007      	b.n	800d5a8 <writeBuf+0x68>

	}
	else
	{
		bBuf[3] = msgLen;
 800d598:	7dbb      	ldrb	r3, [r7, #22]
 800d59a:	74fb      	strb	r3, [r7, #19]
		writeSCS(bBuf, 5);
 800d59c:	f107 0310 	add.w	r3, r7, #16
 800d5a0:	2105      	movs	r1, #5
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f000 f908 	bl	800d7b8 <writeSCS>
	}
	CheckSum = ID + msgLen + Fun + MemAddr;
 800d5a8:	79fa      	ldrb	r2, [r7, #7]
 800d5aa:	7dbb      	ldrb	r3, [r7, #22]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	b2da      	uxtb	r2, r3
 800d5b8:	79bb      	ldrb	r3, [r7, #6]
 800d5ba:	4413      	add	r3, r2
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	73fb      	strb	r3, [r7, #15]
	if (nDat)
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d016      	beq.n	800d5f4 <writeBuf+0xb4>
	{
		for (i = 0; i < nLen; i++)
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	75fb      	strb	r3, [r7, #23]
 800d5ca:	e00a      	b.n	800d5e2 <writeBuf+0xa2>
		{
			CheckSum += nDat[i];
 800d5cc:	7dfb      	ldrb	r3, [r7, #23]
 800d5ce:	683a      	ldr	r2, [r7, #0]
 800d5d0:	4413      	add	r3, r2
 800d5d2:	781a      	ldrb	r2, [r3, #0]
 800d5d4:	7bfb      	ldrb	r3, [r7, #15]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < nLen; i++)
 800d5dc:	7dfb      	ldrb	r3, [r7, #23]
 800d5de:	3301      	adds	r3, #1
 800d5e0:	75fb      	strb	r3, [r7, #23]
 800d5e2:	7dfa      	ldrb	r2, [r7, #23]
 800d5e4:	797b      	ldrb	r3, [r7, #5]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d3f0      	bcc.n	800d5cc <writeBuf+0x8c>
		}
		writeSCS(nDat, nLen);
 800d5ea:	797b      	ldrb	r3, [r7, #5]
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	6838      	ldr	r0, [r7, #0]
 800d5f0:	f000 f8e2 	bl	800d7b8 <writeSCS>
	}
	CheckSum = ~CheckSum;
 800d5f4:	7bfb      	ldrb	r3, [r7, #15]
 800d5f6:	43db      	mvns	r3, r3
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	73fb      	strb	r3, [r7, #15]
	writeSCS(&CheckSum, 1);
 800d5fc:	f107 030f 	add.w	r3, r7, #15
 800d600:	2101      	movs	r1, #1
 800d602:	4618      	mov	r0, r3
 800d604:	f000 f8d8 	bl	800d7b8 <writeSCS>
}
 800d608:	bf00      	nop
 800d60a:	3718      	adds	r7, #24
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <genWrite>:

//普通写指令
//舵机ID，MemAddr内存表地址，写入数据，写入长度
int genWrite(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af02      	add	r7, sp, #8
 800d616:	603a      	str	r2, [r7, #0]
 800d618:	461a      	mov	r2, r3
 800d61a:	4603      	mov	r3, r0
 800d61c:	71fb      	strb	r3, [r7, #7]
 800d61e:	460b      	mov	r3, r1
 800d620:	71bb      	strb	r3, [r7, #6]
 800d622:	4613      	mov	r3, r2
 800d624:	717b      	strb	r3, [r7, #5]
	rFlushSCS();
 800d626:	f000 f906 	bl	800d836 <rFlushSCS>
	writeBuf(ID, MemAddr, nDat, nLen, INST_WRITE);
 800d62a:	797b      	ldrb	r3, [r7, #5]
 800d62c:	79b9      	ldrb	r1, [r7, #6]
 800d62e:	79f8      	ldrb	r0, [r7, #7]
 800d630:	2203      	movs	r2, #3
 800d632:	9200      	str	r2, [sp, #0]
 800d634:	683a      	ldr	r2, [r7, #0]
 800d636:	f7ff ff83 	bl	800d540 <writeBuf>
	wFlushSCS();
 800d63a:	f000 f903 	bl	800d844 <wFlushSCS>
	return Ack(ID);
 800d63e:	79fb      	ldrb	r3, [r7, #7]
 800d640:	4618      	mov	r0, r3
 800d642:	f000 f82f 	bl	800d6a4 <Ack>
 800d646:	4603      	mov	r3, r0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <checkHead>:
	Error = bBuf[2];
	return bBuf[0];
}

int checkHead(void)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
	uint8_t bDat;
	uint8_t bBuf[2] =
 800d656:	2300      	movs	r3, #0
 800d658:	80bb      	strh	r3, [r7, #4]
	{ 0, 0 };
	uint8_t Cnt = 0;
 800d65a:	2300      	movs	r3, #0
 800d65c:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		if (!readSCS(&bDat, 1))
 800d65e:	1dbb      	adds	r3, r7, #6
 800d660:	2101      	movs	r1, #1
 800d662:	4618      	mov	r0, r3
 800d664:	f000 f894 	bl	800d790 <readSCS>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d101      	bne.n	800d672 <checkHead+0x22>
		{
			return 0;
 800d66e:	2300      	movs	r3, #0
 800d670:	e013      	b.n	800d69a <checkHead+0x4a>
		}
		bBuf[1] = bBuf[0];
 800d672:	793b      	ldrb	r3, [r7, #4]
 800d674:	717b      	strb	r3, [r7, #5]
		bBuf[0] = bDat;
 800d676:	79bb      	ldrb	r3, [r7, #6]
 800d678:	713b      	strb	r3, [r7, #4]
		if (bBuf[0] == 0xff && bBuf[1] == 0xff)
 800d67a:	793b      	ldrb	r3, [r7, #4]
 800d67c:	2bff      	cmp	r3, #255	@ 0xff
 800d67e:	d102      	bne.n	800d686 <checkHead+0x36>
 800d680:	797b      	ldrb	r3, [r7, #5]
 800d682:	2bff      	cmp	r3, #255	@ 0xff
 800d684:	d007      	beq.n	800d696 <checkHead+0x46>
		{
			break;
		}
		Cnt++;
 800d686:	79fb      	ldrb	r3, [r7, #7]
 800d688:	3301      	adds	r3, #1
 800d68a:	71fb      	strb	r3, [r7, #7]
		if (Cnt > 10)
 800d68c:	79fb      	ldrb	r3, [r7, #7]
 800d68e:	2b0a      	cmp	r3, #10
 800d690:	d9e5      	bls.n	800d65e <checkHead+0xe>
		{
			return 0;
 800d692:	2300      	movs	r3, #0
 800d694:	e001      	b.n	800d69a <checkHead+0x4a>
			break;
 800d696:	bf00      	nop
		}
	}
	return 1;
 800d698:	2301      	movs	r3, #1
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3708      	adds	r7, #8
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
	...

0800d6a4 <Ack>:

//指令应答
int Ack(uint8_t ID)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b084      	sub	sp, #16
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	71fb      	strb	r3, [r7, #7]
	uint8_t bBuf[4];
	uint8_t calSum;
	Error = 0;
 800d6ae:	4b1f      	ldr	r3, [pc, #124]	@ (800d72c <Ack+0x88>)
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	701a      	strb	r2, [r3, #0]
	if (ID != 0xfe && Level)
 800d6b4:	79fb      	ldrb	r3, [r7, #7]
 800d6b6:	2bfe      	cmp	r3, #254	@ 0xfe
 800d6b8:	d032      	beq.n	800d720 <Ack+0x7c>
 800d6ba:	4b1d      	ldr	r3, [pc, #116]	@ (800d730 <Ack+0x8c>)
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d02e      	beq.n	800d720 <Ack+0x7c>
	{
		if (!checkHead())
 800d6c2:	f7ff ffc5 	bl	800d650 <checkHead>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d101      	bne.n	800d6d0 <Ack+0x2c>
		{
			return 0;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	e028      	b.n	800d722 <Ack+0x7e>
		}
		if (readSCS(bBuf, 4) != 4)
 800d6d0:	f107 0308 	add.w	r3, r7, #8
 800d6d4:	2104      	movs	r1, #4
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f000 f85a 	bl	800d790 <readSCS>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b04      	cmp	r3, #4
 800d6e0:	d001      	beq.n	800d6e6 <Ack+0x42>
		{
			return 0;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	e01d      	b.n	800d722 <Ack+0x7e>
		}
		if (bBuf[0] != ID)
 800d6e6:	7a3b      	ldrb	r3, [r7, #8]
 800d6e8:	79fa      	ldrb	r2, [r7, #7]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d001      	beq.n	800d6f2 <Ack+0x4e>
		{
			return 0;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	e017      	b.n	800d722 <Ack+0x7e>
		}
		if (bBuf[1] != 2)
 800d6f2:	7a7b      	ldrb	r3, [r7, #9]
 800d6f4:	2b02      	cmp	r3, #2
 800d6f6:	d001      	beq.n	800d6fc <Ack+0x58>
		{
			return 0;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	e012      	b.n	800d722 <Ack+0x7e>
		}
		calSum = ~(bBuf[0] + bBuf[1] + bBuf[2]);
 800d6fc:	7a3a      	ldrb	r2, [r7, #8]
 800d6fe:	7a7b      	ldrb	r3, [r7, #9]
 800d700:	4413      	add	r3, r2
 800d702:	b2da      	uxtb	r2, r3
 800d704:	7abb      	ldrb	r3, [r7, #10]
 800d706:	4413      	add	r3, r2
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	43db      	mvns	r3, r3
 800d70c:	73fb      	strb	r3, [r7, #15]
		if (calSum != bBuf[3])
 800d70e:	7afb      	ldrb	r3, [r7, #11]
 800d710:	7bfa      	ldrb	r2, [r7, #15]
 800d712:	429a      	cmp	r2, r3
 800d714:	d001      	beq.n	800d71a <Ack+0x76>
		{
			return 0;
 800d716:	2300      	movs	r3, #0
 800d718:	e003      	b.n	800d722 <Ack+0x7e>
		}
		Error = bBuf[2];
 800d71a:	7aba      	ldrb	r2, [r7, #10]
 800d71c:	4b03      	ldr	r3, [pc, #12]	@ (800d72c <Ack+0x88>)
 800d71e:	701a      	strb	r2, [r3, #0]
	}
	return 1;
 800d720:	2301      	movs	r3, #1
}
 800d722:	4618      	mov	r0, r3
 800d724:	3710      	adds	r7, #16
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	24000c37 	.word	0x24000c37
 800d730:	24000045 	.word	0x24000045

0800d734 <Uart_Send>:
#include "stm32h7xx_hal.h"
#include "SCS_Uart.h"
#include "usart.h"

void Uart_Send(uint8_t *buf, uint16_t len)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	460b      	mov	r3, r1
 800d73e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart6, buf, len, HAL_MAX_DELAY);
 800d740:	887a      	ldrh	r2, [r7, #2]
 800d742:	f04f 33ff 	mov.w	r3, #4294967295
 800d746:	6879      	ldr	r1, [r7, #4]
 800d748:	4803      	ldr	r0, [pc, #12]	@ (800d758 <Uart_Send+0x24>)
 800d74a:	f7fb f889 	bl	8008860 <HAL_UART_Transmit>
}
 800d74e:	bf00      	nop
 800d750:	3708      	adds	r7, #8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	240009cc 	.word	0x240009cc

0800d75c <Uart_Read>:

int16_t Uart_Read(uint8_t *buf, uint16_t len, uint32_t timeout)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	460b      	mov	r3, r1
 800d766:	607a      	str	r2, [r7, #4]
 800d768:	817b      	strh	r3, [r7, #10]
	if (HAL_UART_Receive(&huart6, buf, len, timeout) == HAL_OK)
 800d76a:	897a      	ldrh	r2, [r7, #10]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	68f9      	ldr	r1, [r7, #12]
 800d770:	4806      	ldr	r0, [pc, #24]	@ (800d78c <Uart_Read+0x30>)
 800d772:	f7fb f903 	bl	800897c <HAL_UART_Receive>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d102      	bne.n	800d782 <Uart_Read+0x26>
	{
		return len;
 800d77c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d780:	e000      	b.n	800d784 <Uart_Read+0x28>
	}
	else
	{
		return 0;
 800d782:	2300      	movs	r3, #0
	}
}
 800d784:	4618      	mov	r0, r3
 800d786:	3710      	adds	r7, #16
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	240009cc 	.word	0x240009cc

0800d790 <readSCS>:
uint8_t wBuf[128];
uint8_t wLen = 0;

//UART 接收数据接口
int readSCS(unsigned char *nDat, int nLen)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
	return Uart_Read(nDat, nLen, IOTimeOut);
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	4a05      	ldr	r2, [pc, #20]	@ (800d7b4 <readSCS+0x24>)
 800d7a0:	6812      	ldr	r2, [r2, #0]
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f7ff ffd9 	bl	800d75c <Uart_Read>
 800d7aa:	4603      	mov	r3, r0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3708      	adds	r7, #8
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	24000048 	.word	0x24000048

0800d7b8 <writeSCS>:

//UART 发送数据接口
int writeSCS(unsigned char *nDat, int nLen)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
	while (nLen--)
 800d7c2:	e014      	b.n	800d7ee <writeSCS+0x36>
	{
		if (wLen < sizeof(wBuf))
 800d7c4:	4b10      	ldr	r3, [pc, #64]	@ (800d808 <writeSCS+0x50>)
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	b25b      	sxtb	r3, r3
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	db0f      	blt.n	800d7ee <writeSCS+0x36>
		{
			wBuf[wLen] = *nDat;
 800d7ce:	4b0e      	ldr	r3, [pc, #56]	@ (800d808 <writeSCS+0x50>)
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	7819      	ldrb	r1, [r3, #0]
 800d7d8:	4b0c      	ldr	r3, [pc, #48]	@ (800d80c <writeSCS+0x54>)
 800d7da:	5499      	strb	r1, [r3, r2]
			wLen++;
 800d7dc:	4b0a      	ldr	r3, [pc, #40]	@ (800d808 <writeSCS+0x50>)
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	b2da      	uxtb	r2, r3
 800d7e4:	4b08      	ldr	r3, [pc, #32]	@ (800d808 <writeSCS+0x50>)
 800d7e6:	701a      	strb	r2, [r3, #0]
			nDat++;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	607b      	str	r3, [r7, #4]
	while (nLen--)
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	1e5a      	subs	r2, r3, #1
 800d7f2:	603a      	str	r2, [r7, #0]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1e5      	bne.n	800d7c4 <writeSCS+0xc>
		}
	}
	return wLen;
 800d7f8:	4b03      	ldr	r3, [pc, #12]	@ (800d808 <writeSCS+0x50>)
 800d7fa:	781b      	ldrb	r3, [r3, #0]
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr
 800d808:	24000cb8 	.word	0x24000cb8
 800d80c:	24000c38 	.word	0x24000c38

0800d810 <nopDelay>:
	return wLen;
}

//等待舵机总线切换(约8us)
void nopDelay(void)
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
	uint16_t i = 500;
 800d816:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800d81a:	80fb      	strh	r3, [r7, #6]
	while (i--)
 800d81c:	bf00      	nop
 800d81e:	88fb      	ldrh	r3, [r7, #6]
 800d820:	1e5a      	subs	r2, r3, #1
 800d822:	80fa      	strh	r2, [r7, #6]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d1fa      	bne.n	800d81e <nopDelay+0xe>
		;
}
 800d828:	bf00      	nop
 800d82a:	bf00      	nop
 800d82c:	370c      	adds	r7, #12
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr

0800d836 <rFlushSCS>:

//接收缓冲区刷新
void rFlushSCS()
{
 800d836:	b580      	push	{r7, lr}
 800d838:	af00      	add	r7, sp, #0
	nopDelay();
 800d83a:	f7ff ffe9 	bl	800d810 <nopDelay>
}
 800d83e:	bf00      	nop
 800d840:	bd80      	pop	{r7, pc}
	...

0800d844 <wFlushSCS>:

//发送缓冲区刷新
void wFlushSCS()
{
 800d844:	b580      	push	{r7, lr}
 800d846:	af00      	add	r7, sp, #0
	if (wLen)
 800d848:	4b07      	ldr	r3, [pc, #28]	@ (800d868 <wFlushSCS+0x24>)
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d008      	beq.n	800d862 <wFlushSCS+0x1e>
	{
		Uart_Send(wBuf, wLen);
 800d850:	4b05      	ldr	r3, [pc, #20]	@ (800d868 <wFlushSCS+0x24>)
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	4619      	mov	r1, r3
 800d856:	4805      	ldr	r0, [pc, #20]	@ (800d86c <wFlushSCS+0x28>)
 800d858:	f7ff ff6c 	bl	800d734 <Uart_Send>
		wLen = 0;
 800d85c:	4b02      	ldr	r3, [pc, #8]	@ (800d868 <wFlushSCS+0x24>)
 800d85e:	2200      	movs	r2, #0
 800d860:	701a      	strb	r2, [r3, #0]
	}
}
 800d862:	bf00      	nop
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	24000cb8 	.word	0x24000cb8
 800d86c:	24000c38 	.word	0x24000c38

0800d870 <WritePosEx>:
{
	return Err;
}

int WritePosEx(uint8_t ID, int16_t Position, uint16_t Speed, uint8_t ACC)
{
 800d870:	b590      	push	{r4, r7, lr}
 800d872:	b085      	sub	sp, #20
 800d874:	af00      	add	r7, sp, #0
 800d876:	4604      	mov	r4, r0
 800d878:	4608      	mov	r0, r1
 800d87a:	4611      	mov	r1, r2
 800d87c:	461a      	mov	r2, r3
 800d87e:	4623      	mov	r3, r4
 800d880:	71fb      	strb	r3, [r7, #7]
 800d882:	4603      	mov	r3, r0
 800d884:	80bb      	strh	r3, [r7, #4]
 800d886:	460b      	mov	r3, r1
 800d888:	807b      	strh	r3, [r7, #2]
 800d88a:	4613      	mov	r3, r2
 800d88c:	71bb      	strb	r3, [r7, #6]
	uint8_t bBuf[7];
	if (Position < 0)
 800d88e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d892:	2b00      	cmp	r3, #0
 800d894:	da09      	bge.n	800d8aa <WritePosEx+0x3a>
	{
		Position = -Position;
 800d896:	88bb      	ldrh	r3, [r7, #4]
 800d898:	425b      	negs	r3, r3
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	80bb      	strh	r3, [r7, #4]
		Position |= (1 << 15);
 800d89e:	88bb      	ldrh	r3, [r7, #4]
 800d8a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8a8:	80bb      	strh	r3, [r7, #4]
	}

	bBuf[0] = ACC;
 800d8aa:	79bb      	ldrb	r3, [r7, #6]
 800d8ac:	723b      	strb	r3, [r7, #8]
	Host2SCS(bBuf + 1, bBuf + 2, Position);
 800d8ae:	f107 0308 	add.w	r3, r7, #8
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	f107 0108 	add.w	r1, r7, #8
 800d8b8:	3102      	adds	r1, #2
 800d8ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7ff fe18 	bl	800d4f4 <Host2SCS>
	Host2SCS(bBuf + 3, bBuf + 4, 0);
 800d8c4:	f107 0308 	add.w	r3, r7, #8
 800d8c8:	3303      	adds	r3, #3
 800d8ca:	f107 0108 	add.w	r1, r7, #8
 800d8ce:	3104      	adds	r1, #4
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7ff fe0e 	bl	800d4f4 <Host2SCS>
	Host2SCS(bBuf + 5, bBuf + 6, Speed);
 800d8d8:	f107 0308 	add.w	r3, r7, #8
 800d8dc:	3305      	adds	r3, #5
 800d8de:	f107 0108 	add.w	r1, r7, #8
 800d8e2:	3106      	adds	r1, #6
 800d8e4:	887a      	ldrh	r2, [r7, #2]
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7ff fe04 	bl	800d4f4 <Host2SCS>

	return genWrite(ID, SMS_STS_ACC, bBuf, 7);
 800d8ec:	f107 0208 	add.w	r2, r7, #8
 800d8f0:	79f8      	ldrb	r0, [r7, #7]
 800d8f2:	2307      	movs	r3, #7
 800d8f4:	2129      	movs	r1, #41	@ 0x29
 800d8f6:	f7ff fe8b 	bl	800d610 <genWrite>
 800d8fa:	4603      	mov	r3, r0
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3714      	adds	r7, #20
 800d900:	46bd      	mov	sp, r7
 800d902:	bd90      	pop	{r4, r7, pc}

0800d904 <Action_Show>:
extern float x;
extern float y;
extern int colour;
extern char Point_Flag;

void Action_Show(void) {
 800d904:	b580      	push	{r7, lr}
 800d906:	af00      	add	r7, sp, #0
	sprintf(Z_str, "%.2f", zangle);
 800d908:	4b30      	ldr	r3, [pc, #192]	@ (800d9cc <Action_Show+0xc8>)
 800d90a:	edd3 7a00 	vldr	s15, [r3]
 800d90e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d912:	ec53 2b17 	vmov	r2, r3, d7
 800d916:	492e      	ldr	r1, [pc, #184]	@ (800d9d0 <Action_Show+0xcc>)
 800d918:	482e      	ldr	r0, [pc, #184]	@ (800d9d4 <Action_Show+0xd0>)
 800d91a:	f001 ffb7 	bl	800f88c <siprintf>
	sprintf(X_srt, "%.2f", pos_x);
 800d91e:	4b2e      	ldr	r3, [pc, #184]	@ (800d9d8 <Action_Show+0xd4>)
 800d920:	edd3 7a00 	vldr	s15, [r3]
 800d924:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d928:	ec53 2b17 	vmov	r2, r3, d7
 800d92c:	4928      	ldr	r1, [pc, #160]	@ (800d9d0 <Action_Show+0xcc>)
 800d92e:	482b      	ldr	r0, [pc, #172]	@ (800d9dc <Action_Show+0xd8>)
 800d930:	f001 ffac 	bl	800f88c <siprintf>
	sprintf(Y_srt, "%.2f", pos_y);
 800d934:	4b2a      	ldr	r3, [pc, #168]	@ (800d9e0 <Action_Show+0xdc>)
 800d936:	edd3 7a00 	vldr	s15, [r3]
 800d93a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d93e:	ec53 2b17 	vmov	r2, r3, d7
 800d942:	4923      	ldr	r1, [pc, #140]	@ (800d9d0 <Action_Show+0xcc>)
 800d944:	4827      	ldr	r0, [pc, #156]	@ (800d9e4 <Action_Show+0xe0>)
 800d946:	f001 ffa1 	bl	800f88c <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) "Z_Angle.txt=\"",
 800d94a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d94e:	220d      	movs	r2, #13
 800d950:	4925      	ldr	r1, [pc, #148]	@ (800d9e8 <Action_Show+0xe4>)
 800d952:	4826      	ldr	r0, [pc, #152]	@ (800d9ec <Action_Show+0xe8>)
 800d954:	f7fa ff84 	bl	8008860 <HAL_UART_Transmit>
			sizeof("Z_Angle.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Z_str, sizeof(X_srt) - 1, 0xffff);
 800d958:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d95c:	2213      	movs	r2, #19
 800d95e:	491d      	ldr	r1, [pc, #116]	@ (800d9d4 <Action_Show+0xd0>)
 800d960:	4822      	ldr	r0, [pc, #136]	@ (800d9ec <Action_Show+0xe8>)
 800d962:	f7fa ff7d 	bl	8008860 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800d966:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d96a:	2204      	movs	r2, #4
 800d96c:	4920      	ldr	r1, [pc, #128]	@ (800d9f0 <Action_Show+0xec>)
 800d96e:	481f      	ldr	r0, [pc, #124]	@ (800d9ec <Action_Show+0xe8>)
 800d970:	f7fa ff76 	bl	8008860 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "X_Point.txt=\"",
 800d974:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d978:	220d      	movs	r2, #13
 800d97a:	491e      	ldr	r1, [pc, #120]	@ (800d9f4 <Action_Show+0xf0>)
 800d97c:	481b      	ldr	r0, [pc, #108]	@ (800d9ec <Action_Show+0xe8>)
 800d97e:	f7fa ff6f 	bl	8008860 <HAL_UART_Transmit>
			sizeof("X_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) X_srt, sizeof(X_srt) - 1, 0xffff);
 800d982:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d986:	2213      	movs	r2, #19
 800d988:	4914      	ldr	r1, [pc, #80]	@ (800d9dc <Action_Show+0xd8>)
 800d98a:	4818      	ldr	r0, [pc, #96]	@ (800d9ec <Action_Show+0xe8>)
 800d98c:	f7fa ff68 	bl	8008860 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800d990:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d994:	2204      	movs	r2, #4
 800d996:	4916      	ldr	r1, [pc, #88]	@ (800d9f0 <Action_Show+0xec>)
 800d998:	4814      	ldr	r0, [pc, #80]	@ (800d9ec <Action_Show+0xe8>)
 800d99a:	f7fa ff61 	bl	8008860 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "Y_Point.txt=\"",
 800d99e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9a2:	220d      	movs	r2, #13
 800d9a4:	4914      	ldr	r1, [pc, #80]	@ (800d9f8 <Action_Show+0xf4>)
 800d9a6:	4811      	ldr	r0, [pc, #68]	@ (800d9ec <Action_Show+0xe8>)
 800d9a8:	f7fa ff5a 	bl	8008860 <HAL_UART_Transmit>
			sizeof("Y_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_srt, sizeof(X_srt) - 1, 0xffff);
 800d9ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9b0:	2213      	movs	r2, #19
 800d9b2:	490c      	ldr	r1, [pc, #48]	@ (800d9e4 <Action_Show+0xe0>)
 800d9b4:	480d      	ldr	r0, [pc, #52]	@ (800d9ec <Action_Show+0xe8>)
 800d9b6:	f7fa ff53 	bl	8008860 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800d9ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9be:	2204      	movs	r2, #4
 800d9c0:	490b      	ldr	r1, [pc, #44]	@ (800d9f0 <Action_Show+0xec>)
 800d9c2:	480a      	ldr	r0, [pc, #40]	@ (800d9ec <Action_Show+0xe8>)
 800d9c4:	f7fa ff4c 	bl	8008860 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);
}
 800d9c8:	bf00      	nop
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	24000b00 	.word	0x24000b00
 800d9d0:	08012ba0 	.word	0x08012ba0
 800d9d4:	24000cbc 	.word	0x24000cbc
 800d9d8:	24000af8 	.word	0x24000af8
 800d9dc:	24000cc4 	.word	0x24000cc4
 800d9e0:	24000afc 	.word	0x24000afc
 800d9e4:	24000cd8 	.word	0x24000cd8
 800d9e8:	08012ba8 	.word	0x08012ba8
 800d9ec:	240005c0 	.word	0x240005c0
 800d9f0:	08012bb8 	.word	0x08012bb8
 800d9f4:	08012bc0 	.word	0x08012bc0
 800d9f8:	08012bd0 	.word	0x08012bd0

0800d9fc <QR_Show>:
extern int QR_data[6];
void QR_Show(void) {
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++) {
 800da02:	2300      	movs	r3, #0
 800da04:	607b      	str	r3, [r7, #4]
 800da06:	e00d      	b.n	800da24 <QR_Show+0x28>
		sprintf(&Y_pid[i], "%d", QR_data[i]);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4a14      	ldr	r2, [pc, #80]	@ (800da5c <QR_Show+0x60>)
 800da0c:	1898      	adds	r0, r3, r2
 800da0e:	4a14      	ldr	r2, [pc, #80]	@ (800da60 <QR_Show+0x64>)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da16:	461a      	mov	r2, r3
 800da18:	4912      	ldr	r1, [pc, #72]	@ (800da64 <QR_Show+0x68>)
 800da1a:	f001 ff37 	bl	800f88c <siprintf>
	for (int i = 0; i < 6; i++) {
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	3301      	adds	r3, #1
 800da22:	607b      	str	r3, [r7, #4]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b05      	cmp	r3, #5
 800da28:	ddee      	ble.n	800da08 <QR_Show+0xc>
	}
	HAL_UART_Transmit(&huart4, (uint8_t*) "QR.txt=\"", sizeof("QR.txt=\"") - 1,
 800da2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da2e:	2208      	movs	r2, #8
 800da30:	490d      	ldr	r1, [pc, #52]	@ (800da68 <QR_Show+0x6c>)
 800da32:	480e      	ldr	r0, [pc, #56]	@ (800da6c <QR_Show+0x70>)
 800da34:	f7fa ff14 	bl	8008860 <HAL_UART_Transmit>
			0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_pid, sizeof(Y_pid) - 1, 0xffff);
 800da38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da3c:	2213      	movs	r2, #19
 800da3e:	4907      	ldr	r1, [pc, #28]	@ (800da5c <QR_Show+0x60>)
 800da40:	480a      	ldr	r0, [pc, #40]	@ (800da6c <QR_Show+0x70>)
 800da42:	f7fa ff0d 	bl	8008860 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800da46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da4a:	2204      	movs	r2, #4
 800da4c:	4908      	ldr	r1, [pc, #32]	@ (800da70 <QR_Show+0x74>)
 800da4e:	4807      	ldr	r0, [pc, #28]	@ (800da6c <QR_Show+0x70>)
 800da50:	f7fa ff06 	bl	8008860 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart4, (uint8_t*) QR_data, sizeof(QR_data) - 1, 0xffff);
	 HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
	 sizeof("\"\xff\xff\xff") - 1, 0xffff);
	 */

}
 800da54:	bf00      	nop
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	24000cec 	.word	0x24000cec
 800da60:	24000460 	.word	0x24000460
 800da64:	08012be0 	.word	0x08012be0
 800da68:	08012be4 	.word	0x08012be4
 800da6c:	240005c0 	.word	0x240005c0
 800da70:	08012bb8 	.word	0x08012bb8

0800da74 <Point_Show>:
// 抓取过程标志位，值为目标颜色
extern char Match_Flag;
// 抓取计算稳定性标志位，0为识别有故障,1为正常计算
extern char Check_flag;
// TODO：屏幕缺失字符"+",暂时判断为编码格式问题，需要通过串口助手确定编码格式
void Point_Show(void) {
 800da74:	b580      	push	{r7, lr}
 800da76:	af00      	add	r7, sp, #0
	if(Point_Flag == 0)
 800da78:	4b36      	ldr	r3, [pc, #216]	@ (800db54 <Point_Show+0xe0>)
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d066      	beq.n	800db4e <Point_Show+0xda>
	{
//		TX2点位数据还未接收，结束该函数
		return ;
	}
	Point_Flag = 0;
 800da80:	4b34      	ldr	r3, [pc, #208]	@ (800db54 <Point_Show+0xe0>)
 800da82:	2200      	movs	r2, #0
 800da84:	701a      	strb	r2, [r3, #0]
//	在抓取过程中,进行颜色校验，如果颜色与抓取目标颜色不同，则放弃该帧数据，并传递放弃稳定性计算标志位
	if(Match_Flag != colour)
 800da86:	4b34      	ldr	r3, [pc, #208]	@ (800db58 <Point_Show+0xe4>)
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	461a      	mov	r2, r3
 800da8c:	4b33      	ldr	r3, [pc, #204]	@ (800db5c <Point_Show+0xe8>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	429a      	cmp	r2, r3
 800da92:	d003      	beq.n	800da9c <Point_Show+0x28>
		Check_flag = 0;
 800da94:	4b32      	ldr	r3, [pc, #200]	@ (800db60 <Point_Show+0xec>)
 800da96:	2200      	movs	r2, #0
 800da98:	701a      	strb	r2, [r3, #0]
 800da9a:	e002      	b.n	800daa2 <Point_Show+0x2e>
	else
		Check_flag = 1;
 800da9c:	4b30      	ldr	r3, [pc, #192]	@ (800db60 <Point_Show+0xec>)
 800da9e:	2201      	movs	r2, #1
 800daa0:	701a      	strb	r2, [r3, #0]
	sprintf(TX2_X_Point, "%.2f", x);
 800daa2:	4b30      	ldr	r3, [pc, #192]	@ (800db64 <Point_Show+0xf0>)
 800daa4:	edd3 7a00 	vldr	s15, [r3]
 800daa8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800daac:	ec53 2b17 	vmov	r2, r3, d7
 800dab0:	492d      	ldr	r1, [pc, #180]	@ (800db68 <Point_Show+0xf4>)
 800dab2:	482e      	ldr	r0, [pc, #184]	@ (800db6c <Point_Show+0xf8>)
 800dab4:	f001 feea 	bl	800f88c <siprintf>
	sprintf(TX2_Y_Point, "%.2f", y);
 800dab8:	4b2d      	ldr	r3, [pc, #180]	@ (800db70 <Point_Show+0xfc>)
 800daba:	edd3 7a00 	vldr	s15, [r3]
 800dabe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dac2:	ec53 2b17 	vmov	r2, r3, d7
 800dac6:	4928      	ldr	r1, [pc, #160]	@ (800db68 <Point_Show+0xf4>)
 800dac8:	482a      	ldr	r0, [pc, #168]	@ (800db74 <Point_Show+0x100>)
 800daca:	f001 fedf 	bl	800f88c <siprintf>
	sprintf(TX2_Color, "%d", colour);
 800dace:	4b23      	ldr	r3, [pc, #140]	@ (800db5c <Point_Show+0xe8>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	461a      	mov	r2, r3
 800dad4:	4928      	ldr	r1, [pc, #160]	@ (800db78 <Point_Show+0x104>)
 800dad6:	4829      	ldr	r0, [pc, #164]	@ (800db7c <Point_Show+0x108>)
 800dad8:	f001 fed8 	bl	800f88c <siprintf>
//	开始发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Point.txt=\"",sizeof("Point.txt=\"") - 1, 0xffff);
 800dadc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dae0:	220b      	movs	r2, #11
 800dae2:	4927      	ldr	r1, [pc, #156]	@ (800db80 <Point_Show+0x10c>)
 800dae4:	4827      	ldr	r0, [pc, #156]	@ (800db84 <Point_Show+0x110>)
 800dae6:	f7fa febb 	bl	8008860 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_X_Point, sizeof(TX2_X_Point) - 2, 0xffff);
 800daea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800daee:	2206      	movs	r2, #6
 800daf0:	491e      	ldr	r1, [pc, #120]	@ (800db6c <Point_Show+0xf8>)
 800daf2:	4824      	ldr	r0, [pc, #144]	@ (800db84 <Point_Show+0x110>)
 800daf4:	f7fa feb4 	bl	8008860 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "+", sizeof("+")-2, 0xffff);
 800daf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dafc:	2200      	movs	r2, #0
 800dafe:	4922      	ldr	r1, [pc, #136]	@ (800db88 <Point_Show+0x114>)
 800db00:	4820      	ldr	r0, [pc, #128]	@ (800db84 <Point_Show+0x110>)
 800db02:	f7fa fead 	bl	8008860 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Y_Point, sizeof(TX2_Y_Point) - 1, 0xffff);
 800db06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db0a:	2207      	movs	r2, #7
 800db0c:	4919      	ldr	r1, [pc, #100]	@ (800db74 <Point_Show+0x100>)
 800db0e:	481d      	ldr	r0, [pc, #116]	@ (800db84 <Point_Show+0x110>)
 800db10:	f7fa fea6 	bl	8008860 <HAL_UART_Transmit>
//	结束发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800db14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db18:	2204      	movs	r2, #4
 800db1a:	491c      	ldr	r1, [pc, #112]	@ (800db8c <Point_Show+0x118>)
 800db1c:	4819      	ldr	r0, [pc, #100]	@ (800db84 <Point_Show+0x110>)
 800db1e:	f7fa fe9f 	bl	8008860 <HAL_UART_Transmit>

//	开始发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Color.txt=\"",sizeof("Color.txt=\"") - 1, 0xffff);
 800db22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db26:	220b      	movs	r2, #11
 800db28:	4919      	ldr	r1, [pc, #100]	@ (800db90 <Point_Show+0x11c>)
 800db2a:	4816      	ldr	r0, [pc, #88]	@ (800db84 <Point_Show+0x110>)
 800db2c:	f7fa fe98 	bl	8008860 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Color, sizeof(TX2_Color)-1 , 0xffff);
 800db30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db34:	2201      	movs	r2, #1
 800db36:	4911      	ldr	r1, [pc, #68]	@ (800db7c <Point_Show+0x108>)
 800db38:	4812      	ldr	r0, [pc, #72]	@ (800db84 <Point_Show+0x110>)
 800db3a:	f7fa fe91 	bl	8008860 <HAL_UART_Transmit>

//	结束发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800db3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db42:	2204      	movs	r2, #4
 800db44:	4911      	ldr	r1, [pc, #68]	@ (800db8c <Point_Show+0x118>)
 800db46:	480f      	ldr	r0, [pc, #60]	@ (800db84 <Point_Show+0x110>)
 800db48:	f7fa fe8a 	bl	8008860 <HAL_UART_Transmit>
 800db4c:	e000      	b.n	800db50 <Point_Show+0xdc>
		return ;
 800db4e:	bf00      	nop
}
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	2400045c 	.word	0x2400045c
 800db58:	24000488 	.word	0x24000488
 800db5c:	2400047c 	.word	0x2400047c
 800db60:	24000489 	.word	0x24000489
 800db64:	24000454 	.word	0x24000454
 800db68:	08012ba0 	.word	0x08012ba0
 800db6c:	24000d00 	.word	0x24000d00
 800db70:	24000458 	.word	0x24000458
 800db74:	24000d08 	.word	0x24000d08
 800db78:	08012be0 	.word	0x08012be0
 800db7c:	24000d10 	.word	0x24000d10
 800db80:	08012bf0 	.word	0x08012bf0
 800db84:	240005c0 	.word	0x240005c0
 800db88:	08012bfc 	.word	0x08012bfc
 800db8c:	08012bb8 	.word	0x08012bb8
 800db90:	08012c00 	.word	0x08012c00

0800db94 <Check_Flag>:

void Check_Flag(uint8_t rec) {
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	4603      	mov	r3, r0
 800db9c:	71fb      	strb	r3, [r7, #7]
	static uint8_t ch;
	static uint8_t count = 0;

	ch = rec;
 800db9e:	4a45      	ldr	r2, [pc, #276]	@ (800dcb4 <Check_Flag+0x120>)
 800dba0:	79fb      	ldrb	r3, [r7, #7]
 800dba2:	7013      	strb	r3, [r2, #0]

	switch (count) {
 800dba4:	4b44      	ldr	r3, [pc, #272]	@ (800dcb8 <Check_Flag+0x124>)
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	2b05      	cmp	r3, #5
 800dbaa:	d876      	bhi.n	800dc9a <Check_Flag+0x106>
 800dbac:	a201      	add	r2, pc, #4	@ (adr r2, 800dbb4 <Check_Flag+0x20>)
 800dbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb2:	bf00      	nop
 800dbb4:	0800dbcd 	.word	0x0800dbcd
 800dbb8:	0800dc05 	.word	0x0800dc05
 800dbbc:	0800dc2b 	.word	0x0800dc2b
 800dbc0:	0800dc49 	.word	0x0800dc49
 800dbc4:	0800dc67 	.word	0x0800dc67
 800dbc8:	0800dc85 	.word	0x0800dc85
	case 0:
		if (ch == 'G')
 800dbcc:	4b39      	ldr	r3, [pc, #228]	@ (800dcb4 <Check_Flag+0x120>)
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	2b47      	cmp	r3, #71	@ 0x47
 800dbd2:	d103      	bne.n	800dbdc <Check_Flag+0x48>
			count = 1;
 800dbd4:	4b38      	ldr	r3, [pc, #224]	@ (800dcb8 <Check_Flag+0x124>)
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	701a      	strb	r2, [r3, #0]
			count = 2;
		else if (ch == 'M')
			count = 4;
		else
			count = 0;
		break;
 800dbda:	e065      	b.n	800dca8 <Check_Flag+0x114>
		else if (ch == 'R')
 800dbdc:	4b35      	ldr	r3, [pc, #212]	@ (800dcb4 <Check_Flag+0x120>)
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	2b52      	cmp	r3, #82	@ 0x52
 800dbe2:	d103      	bne.n	800dbec <Check_Flag+0x58>
			count = 2;
 800dbe4:	4b34      	ldr	r3, [pc, #208]	@ (800dcb8 <Check_Flag+0x124>)
 800dbe6:	2202      	movs	r2, #2
 800dbe8:	701a      	strb	r2, [r3, #0]
		break;
 800dbea:	e05d      	b.n	800dca8 <Check_Flag+0x114>
		else if (ch == 'M')
 800dbec:	4b31      	ldr	r3, [pc, #196]	@ (800dcb4 <Check_Flag+0x120>)
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	2b4d      	cmp	r3, #77	@ 0x4d
 800dbf2:	d103      	bne.n	800dbfc <Check_Flag+0x68>
			count = 4;
 800dbf4:	4b30      	ldr	r3, [pc, #192]	@ (800dcb8 <Check_Flag+0x124>)
 800dbf6:	2204      	movs	r2, #4
 800dbf8:	701a      	strb	r2, [r3, #0]
		break;
 800dbfa:	e055      	b.n	800dca8 <Check_Flag+0x114>
			count = 0;
 800dbfc:	4b2e      	ldr	r3, [pc, #184]	@ (800dcb8 <Check_Flag+0x124>)
 800dbfe:	2200      	movs	r2, #0
 800dc00:	701a      	strb	r2, [r3, #0]
		break;
 800dc02:	e051      	b.n	800dca8 <Check_Flag+0x114>
	case 1:
		if (ch == 'o') {
 800dc04:	4b2b      	ldr	r3, [pc, #172]	@ (800dcb4 <Check_Flag+0x120>)
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	2b6f      	cmp	r3, #111	@ 0x6f
 800dc0a:	d106      	bne.n	800dc1a <Check_Flag+0x86>
			System_Flag = 1;
 800dc0c:	4b2b      	ldr	r3, [pc, #172]	@ (800dcbc <Check_Flag+0x128>)
 800dc0e:	2201      	movs	r2, #1
 800dc10:	701a      	strb	r2, [r3, #0]
			count = 0;
 800dc12:	4b29      	ldr	r3, [pc, #164]	@ (800dcb8 <Check_Flag+0x124>)
 800dc14:	2200      	movs	r2, #0
 800dc16:	701a      	strb	r2, [r3, #0]
		} else if (ch == 'G')
			;
		else
			count = 0;
		break;
 800dc18:	e043      	b.n	800dca2 <Check_Flag+0x10e>
		} else if (ch == 'G')
 800dc1a:	4b26      	ldr	r3, [pc, #152]	@ (800dcb4 <Check_Flag+0x120>)
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	2b47      	cmp	r3, #71	@ 0x47
 800dc20:	d03f      	beq.n	800dca2 <Check_Flag+0x10e>
			count = 0;
 800dc22:	4b25      	ldr	r3, [pc, #148]	@ (800dcb8 <Check_Flag+0x124>)
 800dc24:	2200      	movs	r2, #0
 800dc26:	701a      	strb	r2, [r3, #0]
		break;
 800dc28:	e03b      	b.n	800dca2 <Check_Flag+0x10e>
	case 2:
//		此处用于判断是否进入准备模式，调整车身姿态
		if (ch == 'e')
 800dc2a:	4b22      	ldr	r3, [pc, #136]	@ (800dcb4 <Check_Flag+0x120>)
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	2b65      	cmp	r3, #101	@ 0x65
 800dc30:	d106      	bne.n	800dc40 <Check_Flag+0xac>
			count++;
 800dc32:	4b21      	ldr	r3, [pc, #132]	@ (800dcb8 <Check_Flag+0x124>)
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	3301      	adds	r3, #1
 800dc38:	b2da      	uxtb	r2, r3
 800dc3a:	4b1f      	ldr	r3, [pc, #124]	@ (800dcb8 <Check_Flag+0x124>)
 800dc3c:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800dc3e:	e033      	b.n	800dca8 <Check_Flag+0x114>
			count = 0;
 800dc40:	4b1d      	ldr	r3, [pc, #116]	@ (800dcb8 <Check_Flag+0x124>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	701a      	strb	r2, [r3, #0]
		break;
 800dc46:	e02f      	b.n	800dca8 <Check_Flag+0x114>
	case 3:
		if (ch == 'a') {
 800dc48:	4b1a      	ldr	r3, [pc, #104]	@ (800dcb4 <Check_Flag+0x120>)
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	2b61      	cmp	r3, #97	@ 0x61
 800dc4e:	d106      	bne.n	800dc5e <Check_Flag+0xca>
			Ready_Flag = 1;
 800dc50:	4b1b      	ldr	r3, [pc, #108]	@ (800dcc0 <Check_Flag+0x12c>)
 800dc52:	2201      	movs	r2, #1
 800dc54:	701a      	strb	r2, [r3, #0]
			count = 0;
 800dc56:	4b18      	ldr	r3, [pc, #96]	@ (800dcb8 <Check_Flag+0x124>)
 800dc58:	2200      	movs	r2, #0
 800dc5a:	701a      	strb	r2, [r3, #0]
		} else
			count = 0;
		break;
 800dc5c:	e024      	b.n	800dca8 <Check_Flag+0x114>
			count = 0;
 800dc5e:	4b16      	ldr	r3, [pc, #88]	@ (800dcb8 <Check_Flag+0x124>)
 800dc60:	2200      	movs	r2, #0
 800dc62:	701a      	strb	r2, [r3, #0]
		break;
 800dc64:	e020      	b.n	800dca8 <Check_Flag+0x114>
	case 4:
		if (ch == 'a')
 800dc66:	4b13      	ldr	r3, [pc, #76]	@ (800dcb4 <Check_Flag+0x120>)
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	2b61      	cmp	r3, #97	@ 0x61
 800dc6c:	d106      	bne.n	800dc7c <Check_Flag+0xe8>
			count++;
 800dc6e:	4b12      	ldr	r3, [pc, #72]	@ (800dcb8 <Check_Flag+0x124>)
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	3301      	adds	r3, #1
 800dc74:	b2da      	uxtb	r2, r3
 800dc76:	4b10      	ldr	r3, [pc, #64]	@ (800dcb8 <Check_Flag+0x124>)
 800dc78:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800dc7a:	e015      	b.n	800dca8 <Check_Flag+0x114>
			count = 0;
 800dc7c:	4b0e      	ldr	r3, [pc, #56]	@ (800dcb8 <Check_Flag+0x124>)
 800dc7e:	2200      	movs	r2, #0
 800dc80:	701a      	strb	r2, [r3, #0]
		break;
 800dc82:	e011      	b.n	800dca8 <Check_Flag+0x114>
	case 5:
		if (ch == 't') {
 800dc84:	4b0b      	ldr	r3, [pc, #44]	@ (800dcb4 <Check_Flag+0x120>)
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	2b74      	cmp	r3, #116	@ 0x74
 800dc8a:	d10c      	bne.n	800dca6 <Check_Flag+0x112>
			System_Flag = 1;
 800dc8c:	4b0b      	ldr	r3, [pc, #44]	@ (800dcbc <Check_Flag+0x128>)
 800dc8e:	2201      	movs	r2, #1
 800dc90:	701a      	strb	r2, [r3, #0]
			count = 0;
 800dc92:	4b09      	ldr	r3, [pc, #36]	@ (800dcb8 <Check_Flag+0x124>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	701a      	strb	r2, [r3, #0]
		}
		break;
 800dc98:	e005      	b.n	800dca6 <Check_Flag+0x112>
	default:
		count = 0;
 800dc9a:	4b07      	ldr	r3, [pc, #28]	@ (800dcb8 <Check_Flag+0x124>)
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	701a      	strb	r2, [r3, #0]
		break;
 800dca0:	e002      	b.n	800dca8 <Check_Flag+0x114>
		break;
 800dca2:	bf00      	nop
 800dca4:	e000      	b.n	800dca8 <Check_Flag+0x114>
		break;
 800dca6:	bf00      	nop
	}

}
 800dca8:	bf00      	nop
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr
 800dcb4:	24000d14 	.word	0x24000d14
 800dcb8:	24000d15 	.word	0x24000d15
 800dcbc:	24000d12 	.word	0x24000d12
 800dcc0:	24000d13 	.word	0x24000d13

0800dcc4 <Check_Status>:
	首先，在步进电机上电以后，需要进行调零，找到一个零位用来确定后面一切操作的参考点，因此5号步进电机设置为上电回零
	但是在比赛过程中，要求车身及其垂直投影部分在未发车前全部处于发车区域，这就要求爪子在发车前是在车体内侧的，同时爪子不能处于太高处，否则违规
	因此在Check_Status()函数用于在回零操作已完成后进行调整，以满足发车条件，
*/
uint8_t Check_Status(void)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	af00      	add	r7, sp, #0
//  首先控制步进电机,回到零点
	Drop_Location_jiang(200, 120, 0);
 800dcc8:	2200      	movs	r2, #0
 800dcca:	2178      	movs	r1, #120	@ 0x78
 800dccc:	20c8      	movs	r0, #200	@ 0xc8
 800dcce:	f7fe fd75 	bl	800c7bc <Drop_Location_jiang>
	Move_Arm(1, 50, 300);
 800dcd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800dcd6:	2132      	movs	r1, #50	@ 0x32
 800dcd8:	2001      	movs	r0, #1
 800dcda:	f7fd fc15 	bl	800b508 <Move_Arm>
//  6号舵机900
	Move_Arm(6, 900, 300);
 800dcde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800dce2:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800dce6:	2006      	movs	r0, #6
 800dce8:	f7fd fc0e 	bl	800b508 <Move_Arm>
//  旋转物料结构的支撑舵机
	FT_Servo_Zero(0);
 800dcec:	2000      	movs	r0, #0
 800dcee:	f000 f82f 	bl	800dd50 <FT_Servo_Zero>
//  旋转爪子结构的支撑舵机
	FT_Servo_Zero(1);
 800dcf2:	2001      	movs	r0, #1
 800dcf4:	f000 f82c 	bl	800dd50 <FT_Servo_Zero>
//  步进电机下降,将位置调整为最最低点
	Drop_Location_jiang(200, 120, 9000);
 800dcf8:	f242 3228 	movw	r2, #9000	@ 0x2328
 800dcfc:	2178      	movs	r1, #120	@ 0x78
 800dcfe:	20c8      	movs	r0, #200	@ 0xc8
 800dd00:	f7fe fd5c 	bl	800c7bc <Drop_Location_jiang>
	return 1;
 800dd04:	2301      	movs	r3, #1
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <Roll_Status>:

uint8_t Roll_Status(void)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	af00      	add	r7, sp, #0
//  首先控制步进电机,回到零点
	Drop_Location_jiang(200, 120, 0);
 800dd0e:	2200      	movs	r2, #0
 800dd10:	2178      	movs	r1, #120	@ 0x78
 800dd12:	20c8      	movs	r0, #200	@ 0xc8
 800dd14:	f7fe fd52 	bl	800c7bc <Drop_Location_jiang>
	Move_Arm(1, 50, 300);
 800dd18:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800dd1c:	2132      	movs	r1, #50	@ 0x32
 800dd1e:	2001      	movs	r0, #1
 800dd20:	f7fd fbf2 	bl	800b508 <Move_Arm>
//  6号舵机900
	Move_Arm(6, 900, 300);
 800dd24:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800dd28:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800dd2c:	2006      	movs	r0, #6
 800dd2e:	f7fd fbeb 	bl	800b508 <Move_Arm>
//  旋转物料结构的支撑舵机
	FT_Servo_Zero(0);
 800dd32:	2000      	movs	r0, #0
 800dd34:	f000 f80c 	bl	800dd50 <FT_Servo_Zero>
//  旋转爪子结构的支撑舵机
	FT_Servo_Zero(1);
 800dd38:	2001      	movs	r0, #1
 800dd3a:	f000 f809 	bl	800dd50 <FT_Servo_Zero>
//  步进电机下降,将位置调整为最最低点
	Drop_Location_jiang(200, 120, 7000);
 800dd3e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800dd42:	2178      	movs	r1, #120	@ 0x78
 800dd44:	20c8      	movs	r0, #200	@ 0xc8
 800dd46:	f7fe fd39 	bl	800c7bc <Drop_Location_jiang>
//	Choke_Flag = false;
	return 1;
 800dd4a:	2301      	movs	r3, #1
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <FT_Servo_Zero>:

// 将目标舵机回零
uint8_t FT_Servo_Zero(uint8_t Number)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	4603      	mov	r3, r0
 800dd58:	71fb      	strb	r3, [r7, #7]
	if(Number == 0)
 800dd5a:	79fb      	ldrb	r3, [r7, #7]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d106      	bne.n	800dd6e <FT_Servo_Zero+0x1e>
		WritePosEx(0, 0, 0, 0);
 800dd60:	2300      	movs	r3, #0
 800dd62:	2200      	movs	r2, #0
 800dd64:	2100      	movs	r1, #0
 800dd66:	2000      	movs	r0, #0
 800dd68:	f7ff fd82 	bl	800d870 <WritePosEx>
 800dd6c:	e009      	b.n	800dd82 <FT_Servo_Zero+0x32>
	else if (Number == 1)
 800dd6e:	79fb      	ldrb	r3, [r7, #7]
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d106      	bne.n	800dd82 <FT_Servo_Zero+0x32>
		WritePosEx(1, 1020, 0, 0);
 800dd74:	2300      	movs	r3, #0
 800dd76:	2200      	movs	r2, #0
 800dd78:	f44f 717f 	mov.w	r1, #1020	@ 0x3fc
 800dd7c:	2001      	movs	r0, #1
 800dd7e:	f7ff fd77 	bl	800d870 <WritePosEx>
	return 1;
 800dd82:	2301      	movs	r3, #1
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3708      	adds	r7, #8
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <FT_Servo_Orth>:

// 将爪子处飞特舵机调整为向外，正交于车身
uint8_t FT_Servo_Orth(void)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	af00      	add	r7, sp, #0
	WritePosEx(1, 3087, 0, 0);
 800dd90:	2300      	movs	r3, #0
 800dd92:	2200      	movs	r2, #0
 800dd94:	f640 410f 	movw	r1, #3087	@ 0xc0f
 800dd98:	2001      	movs	r0, #1
 800dd9a:	f7ff fd69 	bl	800d870 <WritePosEx>
	return 1;
 800dd9e:	2301      	movs	r3, #1
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <malloc>:
 800dda4:	4b02      	ldr	r3, [pc, #8]	@ (800ddb0 <malloc+0xc>)
 800dda6:	4601      	mov	r1, r0
 800dda8:	6818      	ldr	r0, [r3, #0]
 800ddaa:	f000 b825 	b.w	800ddf8 <_malloc_r>
 800ddae:	bf00      	nop
 800ddb0:	240001c4 	.word	0x240001c4

0800ddb4 <sbrk_aligned>:
 800ddb4:	b570      	push	{r4, r5, r6, lr}
 800ddb6:	4e0f      	ldr	r6, [pc, #60]	@ (800ddf4 <sbrk_aligned+0x40>)
 800ddb8:	460c      	mov	r4, r1
 800ddba:	6831      	ldr	r1, [r6, #0]
 800ddbc:	4605      	mov	r5, r0
 800ddbe:	b911      	cbnz	r1, 800ddc6 <sbrk_aligned+0x12>
 800ddc0:	f001 fe52 	bl	800fa68 <_sbrk_r>
 800ddc4:	6030      	str	r0, [r6, #0]
 800ddc6:	4621      	mov	r1, r4
 800ddc8:	4628      	mov	r0, r5
 800ddca:	f001 fe4d 	bl	800fa68 <_sbrk_r>
 800ddce:	1c43      	adds	r3, r0, #1
 800ddd0:	d103      	bne.n	800ddda <sbrk_aligned+0x26>
 800ddd2:	f04f 34ff 	mov.w	r4, #4294967295
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	bd70      	pop	{r4, r5, r6, pc}
 800ddda:	1cc4      	adds	r4, r0, #3
 800dddc:	f024 0403 	bic.w	r4, r4, #3
 800dde0:	42a0      	cmp	r0, r4
 800dde2:	d0f8      	beq.n	800ddd6 <sbrk_aligned+0x22>
 800dde4:	1a21      	subs	r1, r4, r0
 800dde6:	4628      	mov	r0, r5
 800dde8:	f001 fe3e 	bl	800fa68 <_sbrk_r>
 800ddec:	3001      	adds	r0, #1
 800ddee:	d1f2      	bne.n	800ddd6 <sbrk_aligned+0x22>
 800ddf0:	e7ef      	b.n	800ddd2 <sbrk_aligned+0x1e>
 800ddf2:	bf00      	nop
 800ddf4:	24000d18 	.word	0x24000d18

0800ddf8 <_malloc_r>:
 800ddf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddfc:	1ccd      	adds	r5, r1, #3
 800ddfe:	f025 0503 	bic.w	r5, r5, #3
 800de02:	3508      	adds	r5, #8
 800de04:	2d0c      	cmp	r5, #12
 800de06:	bf38      	it	cc
 800de08:	250c      	movcc	r5, #12
 800de0a:	2d00      	cmp	r5, #0
 800de0c:	4606      	mov	r6, r0
 800de0e:	db01      	blt.n	800de14 <_malloc_r+0x1c>
 800de10:	42a9      	cmp	r1, r5
 800de12:	d904      	bls.n	800de1e <_malloc_r+0x26>
 800de14:	230c      	movs	r3, #12
 800de16:	6033      	str	r3, [r6, #0]
 800de18:	2000      	movs	r0, #0
 800de1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800def4 <_malloc_r+0xfc>
 800de22:	f000 f869 	bl	800def8 <__malloc_lock>
 800de26:	f8d8 3000 	ldr.w	r3, [r8]
 800de2a:	461c      	mov	r4, r3
 800de2c:	bb44      	cbnz	r4, 800de80 <_malloc_r+0x88>
 800de2e:	4629      	mov	r1, r5
 800de30:	4630      	mov	r0, r6
 800de32:	f7ff ffbf 	bl	800ddb4 <sbrk_aligned>
 800de36:	1c43      	adds	r3, r0, #1
 800de38:	4604      	mov	r4, r0
 800de3a:	d158      	bne.n	800deee <_malloc_r+0xf6>
 800de3c:	f8d8 4000 	ldr.w	r4, [r8]
 800de40:	4627      	mov	r7, r4
 800de42:	2f00      	cmp	r7, #0
 800de44:	d143      	bne.n	800dece <_malloc_r+0xd6>
 800de46:	2c00      	cmp	r4, #0
 800de48:	d04b      	beq.n	800dee2 <_malloc_r+0xea>
 800de4a:	6823      	ldr	r3, [r4, #0]
 800de4c:	4639      	mov	r1, r7
 800de4e:	4630      	mov	r0, r6
 800de50:	eb04 0903 	add.w	r9, r4, r3
 800de54:	f001 fe08 	bl	800fa68 <_sbrk_r>
 800de58:	4581      	cmp	r9, r0
 800de5a:	d142      	bne.n	800dee2 <_malloc_r+0xea>
 800de5c:	6821      	ldr	r1, [r4, #0]
 800de5e:	1a6d      	subs	r5, r5, r1
 800de60:	4629      	mov	r1, r5
 800de62:	4630      	mov	r0, r6
 800de64:	f7ff ffa6 	bl	800ddb4 <sbrk_aligned>
 800de68:	3001      	adds	r0, #1
 800de6a:	d03a      	beq.n	800dee2 <_malloc_r+0xea>
 800de6c:	6823      	ldr	r3, [r4, #0]
 800de6e:	442b      	add	r3, r5
 800de70:	6023      	str	r3, [r4, #0]
 800de72:	f8d8 3000 	ldr.w	r3, [r8]
 800de76:	685a      	ldr	r2, [r3, #4]
 800de78:	bb62      	cbnz	r2, 800ded4 <_malloc_r+0xdc>
 800de7a:	f8c8 7000 	str.w	r7, [r8]
 800de7e:	e00f      	b.n	800dea0 <_malloc_r+0xa8>
 800de80:	6822      	ldr	r2, [r4, #0]
 800de82:	1b52      	subs	r2, r2, r5
 800de84:	d420      	bmi.n	800dec8 <_malloc_r+0xd0>
 800de86:	2a0b      	cmp	r2, #11
 800de88:	d917      	bls.n	800deba <_malloc_r+0xc2>
 800de8a:	1961      	adds	r1, r4, r5
 800de8c:	42a3      	cmp	r3, r4
 800de8e:	6025      	str	r5, [r4, #0]
 800de90:	bf18      	it	ne
 800de92:	6059      	strne	r1, [r3, #4]
 800de94:	6863      	ldr	r3, [r4, #4]
 800de96:	bf08      	it	eq
 800de98:	f8c8 1000 	streq.w	r1, [r8]
 800de9c:	5162      	str	r2, [r4, r5]
 800de9e:	604b      	str	r3, [r1, #4]
 800dea0:	4630      	mov	r0, r6
 800dea2:	f000 f82f 	bl	800df04 <__malloc_unlock>
 800dea6:	f104 000b 	add.w	r0, r4, #11
 800deaa:	1d23      	adds	r3, r4, #4
 800deac:	f020 0007 	bic.w	r0, r0, #7
 800deb0:	1ac2      	subs	r2, r0, r3
 800deb2:	bf1c      	itt	ne
 800deb4:	1a1b      	subne	r3, r3, r0
 800deb6:	50a3      	strne	r3, [r4, r2]
 800deb8:	e7af      	b.n	800de1a <_malloc_r+0x22>
 800deba:	6862      	ldr	r2, [r4, #4]
 800debc:	42a3      	cmp	r3, r4
 800debe:	bf0c      	ite	eq
 800dec0:	f8c8 2000 	streq.w	r2, [r8]
 800dec4:	605a      	strne	r2, [r3, #4]
 800dec6:	e7eb      	b.n	800dea0 <_malloc_r+0xa8>
 800dec8:	4623      	mov	r3, r4
 800deca:	6864      	ldr	r4, [r4, #4]
 800decc:	e7ae      	b.n	800de2c <_malloc_r+0x34>
 800dece:	463c      	mov	r4, r7
 800ded0:	687f      	ldr	r7, [r7, #4]
 800ded2:	e7b6      	b.n	800de42 <_malloc_r+0x4a>
 800ded4:	461a      	mov	r2, r3
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	42a3      	cmp	r3, r4
 800deda:	d1fb      	bne.n	800ded4 <_malloc_r+0xdc>
 800dedc:	2300      	movs	r3, #0
 800dede:	6053      	str	r3, [r2, #4]
 800dee0:	e7de      	b.n	800dea0 <_malloc_r+0xa8>
 800dee2:	230c      	movs	r3, #12
 800dee4:	6033      	str	r3, [r6, #0]
 800dee6:	4630      	mov	r0, r6
 800dee8:	f000 f80c 	bl	800df04 <__malloc_unlock>
 800deec:	e794      	b.n	800de18 <_malloc_r+0x20>
 800deee:	6005      	str	r5, [r0, #0]
 800def0:	e7d6      	b.n	800dea0 <_malloc_r+0xa8>
 800def2:	bf00      	nop
 800def4:	24000d1c 	.word	0x24000d1c

0800def8 <__malloc_lock>:
 800def8:	4801      	ldr	r0, [pc, #4]	@ (800df00 <__malloc_lock+0x8>)
 800defa:	f001 be02 	b.w	800fb02 <__retarget_lock_acquire_recursive>
 800defe:	bf00      	nop
 800df00:	24000e60 	.word	0x24000e60

0800df04 <__malloc_unlock>:
 800df04:	4801      	ldr	r0, [pc, #4]	@ (800df0c <__malloc_unlock+0x8>)
 800df06:	f001 bdfd 	b.w	800fb04 <__retarget_lock_release_recursive>
 800df0a:	bf00      	nop
 800df0c:	24000e60 	.word	0x24000e60

0800df10 <sulp>:
 800df10:	b570      	push	{r4, r5, r6, lr}
 800df12:	4604      	mov	r4, r0
 800df14:	460d      	mov	r5, r1
 800df16:	4616      	mov	r6, r2
 800df18:	ec45 4b10 	vmov	d0, r4, r5
 800df1c:	f003 fafc 	bl	8011518 <__ulp>
 800df20:	b17e      	cbz	r6, 800df42 <sulp+0x32>
 800df22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800df26:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	dd09      	ble.n	800df42 <sulp+0x32>
 800df2e:	051b      	lsls	r3, r3, #20
 800df30:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800df34:	2000      	movs	r0, #0
 800df36:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800df3a:	ec41 0b17 	vmov	d7, r0, r1
 800df3e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800df42:	bd70      	pop	{r4, r5, r6, pc}
 800df44:	0000      	movs	r0, r0
	...

0800df48 <_strtod_l>:
 800df48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df4c:	ed2d 8b0a 	vpush	{d8-d12}
 800df50:	b097      	sub	sp, #92	@ 0x5c
 800df52:	4688      	mov	r8, r1
 800df54:	920e      	str	r2, [sp, #56]	@ 0x38
 800df56:	2200      	movs	r2, #0
 800df58:	9212      	str	r2, [sp, #72]	@ 0x48
 800df5a:	9005      	str	r0, [sp, #20]
 800df5c:	f04f 0a00 	mov.w	sl, #0
 800df60:	f04f 0b00 	mov.w	fp, #0
 800df64:	460a      	mov	r2, r1
 800df66:	9211      	str	r2, [sp, #68]	@ 0x44
 800df68:	7811      	ldrb	r1, [r2, #0]
 800df6a:	292b      	cmp	r1, #43	@ 0x2b
 800df6c:	d04c      	beq.n	800e008 <_strtod_l+0xc0>
 800df6e:	d839      	bhi.n	800dfe4 <_strtod_l+0x9c>
 800df70:	290d      	cmp	r1, #13
 800df72:	d833      	bhi.n	800dfdc <_strtod_l+0x94>
 800df74:	2908      	cmp	r1, #8
 800df76:	d833      	bhi.n	800dfe0 <_strtod_l+0x98>
 800df78:	2900      	cmp	r1, #0
 800df7a:	d03c      	beq.n	800dff6 <_strtod_l+0xae>
 800df7c:	2200      	movs	r2, #0
 800df7e:	9208      	str	r2, [sp, #32]
 800df80:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800df82:	782a      	ldrb	r2, [r5, #0]
 800df84:	2a30      	cmp	r2, #48	@ 0x30
 800df86:	f040 80b5 	bne.w	800e0f4 <_strtod_l+0x1ac>
 800df8a:	786a      	ldrb	r2, [r5, #1]
 800df8c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800df90:	2a58      	cmp	r2, #88	@ 0x58
 800df92:	d170      	bne.n	800e076 <_strtod_l+0x12e>
 800df94:	9302      	str	r3, [sp, #8]
 800df96:	9b08      	ldr	r3, [sp, #32]
 800df98:	9301      	str	r3, [sp, #4]
 800df9a:	ab12      	add	r3, sp, #72	@ 0x48
 800df9c:	9300      	str	r3, [sp, #0]
 800df9e:	4a8b      	ldr	r2, [pc, #556]	@ (800e1cc <_strtod_l+0x284>)
 800dfa0:	9805      	ldr	r0, [sp, #20]
 800dfa2:	ab13      	add	r3, sp, #76	@ 0x4c
 800dfa4:	a911      	add	r1, sp, #68	@ 0x44
 800dfa6:	f002 fc5f 	bl	8010868 <__gethex>
 800dfaa:	f010 060f 	ands.w	r6, r0, #15
 800dfae:	4604      	mov	r4, r0
 800dfb0:	d005      	beq.n	800dfbe <_strtod_l+0x76>
 800dfb2:	2e06      	cmp	r6, #6
 800dfb4:	d12a      	bne.n	800e00c <_strtod_l+0xc4>
 800dfb6:	3501      	adds	r5, #1
 800dfb8:	2300      	movs	r3, #0
 800dfba:	9511      	str	r5, [sp, #68]	@ 0x44
 800dfbc:	9308      	str	r3, [sp, #32]
 800dfbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f040 852f 	bne.w	800ea24 <_strtod_l+0xadc>
 800dfc6:	9b08      	ldr	r3, [sp, #32]
 800dfc8:	ec4b ab10 	vmov	d0, sl, fp
 800dfcc:	b1cb      	cbz	r3, 800e002 <_strtod_l+0xba>
 800dfce:	eeb1 0b40 	vneg.f64	d0, d0
 800dfd2:	b017      	add	sp, #92	@ 0x5c
 800dfd4:	ecbd 8b0a 	vpop	{d8-d12}
 800dfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfdc:	2920      	cmp	r1, #32
 800dfde:	d1cd      	bne.n	800df7c <_strtod_l+0x34>
 800dfe0:	3201      	adds	r2, #1
 800dfe2:	e7c0      	b.n	800df66 <_strtod_l+0x1e>
 800dfe4:	292d      	cmp	r1, #45	@ 0x2d
 800dfe6:	d1c9      	bne.n	800df7c <_strtod_l+0x34>
 800dfe8:	2101      	movs	r1, #1
 800dfea:	9108      	str	r1, [sp, #32]
 800dfec:	1c51      	adds	r1, r2, #1
 800dfee:	9111      	str	r1, [sp, #68]	@ 0x44
 800dff0:	7852      	ldrb	r2, [r2, #1]
 800dff2:	2a00      	cmp	r2, #0
 800dff4:	d1c4      	bne.n	800df80 <_strtod_l+0x38>
 800dff6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dff8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	f040 850f 	bne.w	800ea20 <_strtod_l+0xad8>
 800e002:	ec4b ab10 	vmov	d0, sl, fp
 800e006:	e7e4      	b.n	800dfd2 <_strtod_l+0x8a>
 800e008:	2100      	movs	r1, #0
 800e00a:	e7ee      	b.n	800dfea <_strtod_l+0xa2>
 800e00c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e00e:	b13a      	cbz	r2, 800e020 <_strtod_l+0xd8>
 800e010:	2135      	movs	r1, #53	@ 0x35
 800e012:	a814      	add	r0, sp, #80	@ 0x50
 800e014:	f003 fb77 	bl	8011706 <__copybits>
 800e018:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e01a:	9805      	ldr	r0, [sp, #20]
 800e01c:	f002 ff48 	bl	8010eb0 <_Bfree>
 800e020:	1e73      	subs	r3, r6, #1
 800e022:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e024:	2b04      	cmp	r3, #4
 800e026:	d806      	bhi.n	800e036 <_strtod_l+0xee>
 800e028:	e8df f003 	tbb	[pc, r3]
 800e02c:	201d0314 	.word	0x201d0314
 800e030:	14          	.byte	0x14
 800e031:	00          	.byte	0x00
 800e032:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800e036:	05e3      	lsls	r3, r4, #23
 800e038:	bf48      	it	mi
 800e03a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e03e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e042:	0d1b      	lsrs	r3, r3, #20
 800e044:	051b      	lsls	r3, r3, #20
 800e046:	2b00      	cmp	r3, #0
 800e048:	d1b9      	bne.n	800dfbe <_strtod_l+0x76>
 800e04a:	f001 fd2f 	bl	800faac <__errno>
 800e04e:	2322      	movs	r3, #34	@ 0x22
 800e050:	6003      	str	r3, [r0, #0]
 800e052:	e7b4      	b.n	800dfbe <_strtod_l+0x76>
 800e054:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800e058:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e05c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e060:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e064:	e7e7      	b.n	800e036 <_strtod_l+0xee>
 800e066:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800e1d4 <_strtod_l+0x28c>
 800e06a:	e7e4      	b.n	800e036 <_strtod_l+0xee>
 800e06c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e070:	f04f 3aff 	mov.w	sl, #4294967295
 800e074:	e7df      	b.n	800e036 <_strtod_l+0xee>
 800e076:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e078:	1c5a      	adds	r2, r3, #1
 800e07a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e07c:	785b      	ldrb	r3, [r3, #1]
 800e07e:	2b30      	cmp	r3, #48	@ 0x30
 800e080:	d0f9      	beq.n	800e076 <_strtod_l+0x12e>
 800e082:	2b00      	cmp	r3, #0
 800e084:	d09b      	beq.n	800dfbe <_strtod_l+0x76>
 800e086:	2301      	movs	r3, #1
 800e088:	2600      	movs	r6, #0
 800e08a:	9307      	str	r3, [sp, #28]
 800e08c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e08e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e090:	46b1      	mov	r9, r6
 800e092:	4635      	mov	r5, r6
 800e094:	220a      	movs	r2, #10
 800e096:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e098:	7804      	ldrb	r4, [r0, #0]
 800e09a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e09e:	b2d9      	uxtb	r1, r3
 800e0a0:	2909      	cmp	r1, #9
 800e0a2:	d929      	bls.n	800e0f8 <_strtod_l+0x1b0>
 800e0a4:	494a      	ldr	r1, [pc, #296]	@ (800e1d0 <_strtod_l+0x288>)
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	f001 fc94 	bl	800f9d4 <strncmp>
 800e0ac:	b378      	cbz	r0, 800e10e <_strtod_l+0x1c6>
 800e0ae:	2000      	movs	r0, #0
 800e0b0:	4622      	mov	r2, r4
 800e0b2:	462b      	mov	r3, r5
 800e0b4:	4607      	mov	r7, r0
 800e0b6:	9006      	str	r0, [sp, #24]
 800e0b8:	2a65      	cmp	r2, #101	@ 0x65
 800e0ba:	d001      	beq.n	800e0c0 <_strtod_l+0x178>
 800e0bc:	2a45      	cmp	r2, #69	@ 0x45
 800e0be:	d117      	bne.n	800e0f0 <_strtod_l+0x1a8>
 800e0c0:	b91b      	cbnz	r3, 800e0ca <_strtod_l+0x182>
 800e0c2:	9b07      	ldr	r3, [sp, #28]
 800e0c4:	4303      	orrs	r3, r0
 800e0c6:	d096      	beq.n	800dff6 <_strtod_l+0xae>
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800e0ce:	f108 0201 	add.w	r2, r8, #1
 800e0d2:	9211      	str	r2, [sp, #68]	@ 0x44
 800e0d4:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e0d8:	2a2b      	cmp	r2, #43	@ 0x2b
 800e0da:	d06b      	beq.n	800e1b4 <_strtod_l+0x26c>
 800e0dc:	2a2d      	cmp	r2, #45	@ 0x2d
 800e0de:	d071      	beq.n	800e1c4 <_strtod_l+0x27c>
 800e0e0:	f04f 0e00 	mov.w	lr, #0
 800e0e4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e0e8:	2c09      	cmp	r4, #9
 800e0ea:	d979      	bls.n	800e1e0 <_strtod_l+0x298>
 800e0ec:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e0f0:	2400      	movs	r4, #0
 800e0f2:	e094      	b.n	800e21e <_strtod_l+0x2d6>
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	e7c7      	b.n	800e088 <_strtod_l+0x140>
 800e0f8:	2d08      	cmp	r5, #8
 800e0fa:	f100 0001 	add.w	r0, r0, #1
 800e0fe:	bfd4      	ite	le
 800e100:	fb02 3909 	mlale	r9, r2, r9, r3
 800e104:	fb02 3606 	mlagt	r6, r2, r6, r3
 800e108:	3501      	adds	r5, #1
 800e10a:	9011      	str	r0, [sp, #68]	@ 0x44
 800e10c:	e7c3      	b.n	800e096 <_strtod_l+0x14e>
 800e10e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e110:	1c5a      	adds	r2, r3, #1
 800e112:	9211      	str	r2, [sp, #68]	@ 0x44
 800e114:	785a      	ldrb	r2, [r3, #1]
 800e116:	b375      	cbz	r5, 800e176 <_strtod_l+0x22e>
 800e118:	4607      	mov	r7, r0
 800e11a:	462b      	mov	r3, r5
 800e11c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e120:	2909      	cmp	r1, #9
 800e122:	d913      	bls.n	800e14c <_strtod_l+0x204>
 800e124:	2101      	movs	r1, #1
 800e126:	9106      	str	r1, [sp, #24]
 800e128:	e7c6      	b.n	800e0b8 <_strtod_l+0x170>
 800e12a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e12c:	1c5a      	adds	r2, r3, #1
 800e12e:	9211      	str	r2, [sp, #68]	@ 0x44
 800e130:	785a      	ldrb	r2, [r3, #1]
 800e132:	3001      	adds	r0, #1
 800e134:	2a30      	cmp	r2, #48	@ 0x30
 800e136:	d0f8      	beq.n	800e12a <_strtod_l+0x1e2>
 800e138:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e13c:	2b08      	cmp	r3, #8
 800e13e:	f200 8476 	bhi.w	800ea2e <_strtod_l+0xae6>
 800e142:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e144:	930a      	str	r3, [sp, #40]	@ 0x28
 800e146:	4607      	mov	r7, r0
 800e148:	2000      	movs	r0, #0
 800e14a:	4603      	mov	r3, r0
 800e14c:	3a30      	subs	r2, #48	@ 0x30
 800e14e:	f100 0101 	add.w	r1, r0, #1
 800e152:	d023      	beq.n	800e19c <_strtod_l+0x254>
 800e154:	440f      	add	r7, r1
 800e156:	eb00 0c03 	add.w	ip, r0, r3
 800e15a:	4619      	mov	r1, r3
 800e15c:	240a      	movs	r4, #10
 800e15e:	4561      	cmp	r1, ip
 800e160:	d10b      	bne.n	800e17a <_strtod_l+0x232>
 800e162:	1c5c      	adds	r4, r3, #1
 800e164:	4403      	add	r3, r0
 800e166:	2b08      	cmp	r3, #8
 800e168:	4404      	add	r4, r0
 800e16a:	dc11      	bgt.n	800e190 <_strtod_l+0x248>
 800e16c:	230a      	movs	r3, #10
 800e16e:	fb03 2909 	mla	r9, r3, r9, r2
 800e172:	2100      	movs	r1, #0
 800e174:	e013      	b.n	800e19e <_strtod_l+0x256>
 800e176:	4628      	mov	r0, r5
 800e178:	e7dc      	b.n	800e134 <_strtod_l+0x1ec>
 800e17a:	2908      	cmp	r1, #8
 800e17c:	f101 0101 	add.w	r1, r1, #1
 800e180:	dc02      	bgt.n	800e188 <_strtod_l+0x240>
 800e182:	fb04 f909 	mul.w	r9, r4, r9
 800e186:	e7ea      	b.n	800e15e <_strtod_l+0x216>
 800e188:	2910      	cmp	r1, #16
 800e18a:	bfd8      	it	le
 800e18c:	4366      	mulle	r6, r4
 800e18e:	e7e6      	b.n	800e15e <_strtod_l+0x216>
 800e190:	2b0f      	cmp	r3, #15
 800e192:	dcee      	bgt.n	800e172 <_strtod_l+0x22a>
 800e194:	230a      	movs	r3, #10
 800e196:	fb03 2606 	mla	r6, r3, r6, r2
 800e19a:	e7ea      	b.n	800e172 <_strtod_l+0x22a>
 800e19c:	461c      	mov	r4, r3
 800e19e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e1a0:	1c5a      	adds	r2, r3, #1
 800e1a2:	9211      	str	r2, [sp, #68]	@ 0x44
 800e1a4:	785a      	ldrb	r2, [r3, #1]
 800e1a6:	4608      	mov	r0, r1
 800e1a8:	4623      	mov	r3, r4
 800e1aa:	e7b7      	b.n	800e11c <_strtod_l+0x1d4>
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	2700      	movs	r7, #0
 800e1b0:	9306      	str	r3, [sp, #24]
 800e1b2:	e786      	b.n	800e0c2 <_strtod_l+0x17a>
 800e1b4:	f04f 0e00 	mov.w	lr, #0
 800e1b8:	f108 0202 	add.w	r2, r8, #2
 800e1bc:	9211      	str	r2, [sp, #68]	@ 0x44
 800e1be:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e1c2:	e78f      	b.n	800e0e4 <_strtod_l+0x19c>
 800e1c4:	f04f 0e01 	mov.w	lr, #1
 800e1c8:	e7f6      	b.n	800e1b8 <_strtod_l+0x270>
 800e1ca:	bf00      	nop
 800e1cc:	08012c78 	.word	0x08012c78
 800e1d0:	08012c60 	.word	0x08012c60
 800e1d4:	7ff00000 	.word	0x7ff00000
 800e1d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e1da:	1c54      	adds	r4, r2, #1
 800e1dc:	9411      	str	r4, [sp, #68]	@ 0x44
 800e1de:	7852      	ldrb	r2, [r2, #1]
 800e1e0:	2a30      	cmp	r2, #48	@ 0x30
 800e1e2:	d0f9      	beq.n	800e1d8 <_strtod_l+0x290>
 800e1e4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e1e8:	2c08      	cmp	r4, #8
 800e1ea:	d881      	bhi.n	800e0f0 <_strtod_l+0x1a8>
 800e1ec:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e1f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e1f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1f4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e1f6:	1c51      	adds	r1, r2, #1
 800e1f8:	9111      	str	r1, [sp, #68]	@ 0x44
 800e1fa:	7852      	ldrb	r2, [r2, #1]
 800e1fc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e200:	2c09      	cmp	r4, #9
 800e202:	d938      	bls.n	800e276 <_strtod_l+0x32e>
 800e204:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e206:	1b0c      	subs	r4, r1, r4
 800e208:	2c08      	cmp	r4, #8
 800e20a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800e20e:	dc02      	bgt.n	800e216 <_strtod_l+0x2ce>
 800e210:	4564      	cmp	r4, ip
 800e212:	bfa8      	it	ge
 800e214:	4664      	movge	r4, ip
 800e216:	f1be 0f00 	cmp.w	lr, #0
 800e21a:	d000      	beq.n	800e21e <_strtod_l+0x2d6>
 800e21c:	4264      	negs	r4, r4
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d14e      	bne.n	800e2c0 <_strtod_l+0x378>
 800e222:	9b07      	ldr	r3, [sp, #28]
 800e224:	4318      	orrs	r0, r3
 800e226:	f47f aeca 	bne.w	800dfbe <_strtod_l+0x76>
 800e22a:	9b06      	ldr	r3, [sp, #24]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f47f aee2 	bne.w	800dff6 <_strtod_l+0xae>
 800e232:	2a69      	cmp	r2, #105	@ 0x69
 800e234:	d027      	beq.n	800e286 <_strtod_l+0x33e>
 800e236:	dc24      	bgt.n	800e282 <_strtod_l+0x33a>
 800e238:	2a49      	cmp	r2, #73	@ 0x49
 800e23a:	d024      	beq.n	800e286 <_strtod_l+0x33e>
 800e23c:	2a4e      	cmp	r2, #78	@ 0x4e
 800e23e:	f47f aeda 	bne.w	800dff6 <_strtod_l+0xae>
 800e242:	4997      	ldr	r1, [pc, #604]	@ (800e4a0 <_strtod_l+0x558>)
 800e244:	a811      	add	r0, sp, #68	@ 0x44
 800e246:	f002 fd31 	bl	8010cac <__match>
 800e24a:	2800      	cmp	r0, #0
 800e24c:	f43f aed3 	beq.w	800dff6 <_strtod_l+0xae>
 800e250:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	2b28      	cmp	r3, #40	@ 0x28
 800e256:	d12d      	bne.n	800e2b4 <_strtod_l+0x36c>
 800e258:	4992      	ldr	r1, [pc, #584]	@ (800e4a4 <_strtod_l+0x55c>)
 800e25a:	aa14      	add	r2, sp, #80	@ 0x50
 800e25c:	a811      	add	r0, sp, #68	@ 0x44
 800e25e:	f002 fd39 	bl	8010cd4 <__hexnan>
 800e262:	2805      	cmp	r0, #5
 800e264:	d126      	bne.n	800e2b4 <_strtod_l+0x36c>
 800e266:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e268:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e26c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e270:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e274:	e6a3      	b.n	800dfbe <_strtod_l+0x76>
 800e276:	240a      	movs	r4, #10
 800e278:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e27c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e280:	e7b8      	b.n	800e1f4 <_strtod_l+0x2ac>
 800e282:	2a6e      	cmp	r2, #110	@ 0x6e
 800e284:	e7db      	b.n	800e23e <_strtod_l+0x2f6>
 800e286:	4988      	ldr	r1, [pc, #544]	@ (800e4a8 <_strtod_l+0x560>)
 800e288:	a811      	add	r0, sp, #68	@ 0x44
 800e28a:	f002 fd0f 	bl	8010cac <__match>
 800e28e:	2800      	cmp	r0, #0
 800e290:	f43f aeb1 	beq.w	800dff6 <_strtod_l+0xae>
 800e294:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e296:	4985      	ldr	r1, [pc, #532]	@ (800e4ac <_strtod_l+0x564>)
 800e298:	3b01      	subs	r3, #1
 800e29a:	a811      	add	r0, sp, #68	@ 0x44
 800e29c:	9311      	str	r3, [sp, #68]	@ 0x44
 800e29e:	f002 fd05 	bl	8010cac <__match>
 800e2a2:	b910      	cbnz	r0, 800e2aa <_strtod_l+0x362>
 800e2a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e2aa:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800e4c0 <_strtod_l+0x578>
 800e2ae:	f04f 0a00 	mov.w	sl, #0
 800e2b2:	e684      	b.n	800dfbe <_strtod_l+0x76>
 800e2b4:	487e      	ldr	r0, [pc, #504]	@ (800e4b0 <_strtod_l+0x568>)
 800e2b6:	f001 fc37 	bl	800fb28 <nan>
 800e2ba:	ec5b ab10 	vmov	sl, fp, d0
 800e2be:	e67e      	b.n	800dfbe <_strtod_l+0x76>
 800e2c0:	ee07 9a90 	vmov	s15, r9
 800e2c4:	1be2      	subs	r2, r4, r7
 800e2c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e2ca:	2d00      	cmp	r5, #0
 800e2cc:	bf08      	it	eq
 800e2ce:	461d      	moveq	r5, r3
 800e2d0:	2b10      	cmp	r3, #16
 800e2d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	bfa8      	it	ge
 800e2d8:	2210      	movge	r2, #16
 800e2da:	2b09      	cmp	r3, #9
 800e2dc:	ec5b ab17 	vmov	sl, fp, d7
 800e2e0:	dc15      	bgt.n	800e30e <_strtod_l+0x3c6>
 800e2e2:	1be1      	subs	r1, r4, r7
 800e2e4:	2900      	cmp	r1, #0
 800e2e6:	f43f ae6a 	beq.w	800dfbe <_strtod_l+0x76>
 800e2ea:	eba4 0107 	sub.w	r1, r4, r7
 800e2ee:	dd72      	ble.n	800e3d6 <_strtod_l+0x48e>
 800e2f0:	2916      	cmp	r1, #22
 800e2f2:	dc59      	bgt.n	800e3a8 <_strtod_l+0x460>
 800e2f4:	4b6f      	ldr	r3, [pc, #444]	@ (800e4b4 <_strtod_l+0x56c>)
 800e2f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e2f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2fc:	ed93 7b00 	vldr	d7, [r3]
 800e300:	ec4b ab16 	vmov	d6, sl, fp
 800e304:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e308:	ec5b ab17 	vmov	sl, fp, d7
 800e30c:	e657      	b.n	800dfbe <_strtod_l+0x76>
 800e30e:	4969      	ldr	r1, [pc, #420]	@ (800e4b4 <_strtod_l+0x56c>)
 800e310:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e314:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e318:	ee06 6a90 	vmov	s13, r6
 800e31c:	2b0f      	cmp	r3, #15
 800e31e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e322:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e326:	ec5b ab16 	vmov	sl, fp, d6
 800e32a:	ddda      	ble.n	800e2e2 <_strtod_l+0x39a>
 800e32c:	1a9a      	subs	r2, r3, r2
 800e32e:	1be1      	subs	r1, r4, r7
 800e330:	440a      	add	r2, r1
 800e332:	2a00      	cmp	r2, #0
 800e334:	f340 8094 	ble.w	800e460 <_strtod_l+0x518>
 800e338:	f012 000f 	ands.w	r0, r2, #15
 800e33c:	d00a      	beq.n	800e354 <_strtod_l+0x40c>
 800e33e:	495d      	ldr	r1, [pc, #372]	@ (800e4b4 <_strtod_l+0x56c>)
 800e340:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e344:	ed91 7b00 	vldr	d7, [r1]
 800e348:	ec4b ab16 	vmov	d6, sl, fp
 800e34c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e350:	ec5b ab17 	vmov	sl, fp, d7
 800e354:	f032 020f 	bics.w	r2, r2, #15
 800e358:	d073      	beq.n	800e442 <_strtod_l+0x4fa>
 800e35a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e35e:	dd47      	ble.n	800e3f0 <_strtod_l+0x4a8>
 800e360:	2400      	movs	r4, #0
 800e362:	4625      	mov	r5, r4
 800e364:	9407      	str	r4, [sp, #28]
 800e366:	4626      	mov	r6, r4
 800e368:	9a05      	ldr	r2, [sp, #20]
 800e36a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e4c0 <_strtod_l+0x578>
 800e36e:	2322      	movs	r3, #34	@ 0x22
 800e370:	6013      	str	r3, [r2, #0]
 800e372:	f04f 0a00 	mov.w	sl, #0
 800e376:	9b07      	ldr	r3, [sp, #28]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	f43f ae20 	beq.w	800dfbe <_strtod_l+0x76>
 800e37e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e380:	9805      	ldr	r0, [sp, #20]
 800e382:	f002 fd95 	bl	8010eb0 <_Bfree>
 800e386:	9805      	ldr	r0, [sp, #20]
 800e388:	4631      	mov	r1, r6
 800e38a:	f002 fd91 	bl	8010eb0 <_Bfree>
 800e38e:	9805      	ldr	r0, [sp, #20]
 800e390:	4629      	mov	r1, r5
 800e392:	f002 fd8d 	bl	8010eb0 <_Bfree>
 800e396:	9907      	ldr	r1, [sp, #28]
 800e398:	9805      	ldr	r0, [sp, #20]
 800e39a:	f002 fd89 	bl	8010eb0 <_Bfree>
 800e39e:	9805      	ldr	r0, [sp, #20]
 800e3a0:	4621      	mov	r1, r4
 800e3a2:	f002 fd85 	bl	8010eb0 <_Bfree>
 800e3a6:	e60a      	b.n	800dfbe <_strtod_l+0x76>
 800e3a8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e3ac:	1be0      	subs	r0, r4, r7
 800e3ae:	4281      	cmp	r1, r0
 800e3b0:	dbbc      	blt.n	800e32c <_strtod_l+0x3e4>
 800e3b2:	4a40      	ldr	r2, [pc, #256]	@ (800e4b4 <_strtod_l+0x56c>)
 800e3b4:	f1c3 030f 	rsb	r3, r3, #15
 800e3b8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e3bc:	ed91 7b00 	vldr	d7, [r1]
 800e3c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e3c2:	ec4b ab16 	vmov	d6, sl, fp
 800e3c6:	1acb      	subs	r3, r1, r3
 800e3c8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e3cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e3d0:	ed92 6b00 	vldr	d6, [r2]
 800e3d4:	e796      	b.n	800e304 <_strtod_l+0x3bc>
 800e3d6:	3116      	adds	r1, #22
 800e3d8:	dba8      	blt.n	800e32c <_strtod_l+0x3e4>
 800e3da:	4b36      	ldr	r3, [pc, #216]	@ (800e4b4 <_strtod_l+0x56c>)
 800e3dc:	1b3c      	subs	r4, r7, r4
 800e3de:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e3e2:	ed94 7b00 	vldr	d7, [r4]
 800e3e6:	ec4b ab16 	vmov	d6, sl, fp
 800e3ea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e3ee:	e78b      	b.n	800e308 <_strtod_l+0x3c0>
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	ec4b ab17 	vmov	d7, sl, fp
 800e3f6:	4e30      	ldr	r6, [pc, #192]	@ (800e4b8 <_strtod_l+0x570>)
 800e3f8:	1112      	asrs	r2, r2, #4
 800e3fa:	4601      	mov	r1, r0
 800e3fc:	2a01      	cmp	r2, #1
 800e3fe:	dc23      	bgt.n	800e448 <_strtod_l+0x500>
 800e400:	b108      	cbz	r0, 800e406 <_strtod_l+0x4be>
 800e402:	ec5b ab17 	vmov	sl, fp, d7
 800e406:	4a2c      	ldr	r2, [pc, #176]	@ (800e4b8 <_strtod_l+0x570>)
 800e408:	482c      	ldr	r0, [pc, #176]	@ (800e4bc <_strtod_l+0x574>)
 800e40a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e40e:	ed92 7b00 	vldr	d7, [r2]
 800e412:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e416:	ec4b ab16 	vmov	d6, sl, fp
 800e41a:	4a29      	ldr	r2, [pc, #164]	@ (800e4c0 <_strtod_l+0x578>)
 800e41c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e420:	ee17 1a90 	vmov	r1, s15
 800e424:	400a      	ands	r2, r1
 800e426:	4282      	cmp	r2, r0
 800e428:	ec5b ab17 	vmov	sl, fp, d7
 800e42c:	d898      	bhi.n	800e360 <_strtod_l+0x418>
 800e42e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800e432:	4282      	cmp	r2, r0
 800e434:	bf86      	itte	hi
 800e436:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800e4c4 <_strtod_l+0x57c>
 800e43a:	f04f 3aff 	movhi.w	sl, #4294967295
 800e43e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800e442:	2200      	movs	r2, #0
 800e444:	9206      	str	r2, [sp, #24]
 800e446:	e076      	b.n	800e536 <_strtod_l+0x5ee>
 800e448:	f012 0f01 	tst.w	r2, #1
 800e44c:	d004      	beq.n	800e458 <_strtod_l+0x510>
 800e44e:	ed96 6b00 	vldr	d6, [r6]
 800e452:	2001      	movs	r0, #1
 800e454:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e458:	3101      	adds	r1, #1
 800e45a:	1052      	asrs	r2, r2, #1
 800e45c:	3608      	adds	r6, #8
 800e45e:	e7cd      	b.n	800e3fc <_strtod_l+0x4b4>
 800e460:	d0ef      	beq.n	800e442 <_strtod_l+0x4fa>
 800e462:	4252      	negs	r2, r2
 800e464:	f012 000f 	ands.w	r0, r2, #15
 800e468:	d00a      	beq.n	800e480 <_strtod_l+0x538>
 800e46a:	4912      	ldr	r1, [pc, #72]	@ (800e4b4 <_strtod_l+0x56c>)
 800e46c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e470:	ed91 7b00 	vldr	d7, [r1]
 800e474:	ec4b ab16 	vmov	d6, sl, fp
 800e478:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e47c:	ec5b ab17 	vmov	sl, fp, d7
 800e480:	1112      	asrs	r2, r2, #4
 800e482:	d0de      	beq.n	800e442 <_strtod_l+0x4fa>
 800e484:	2a1f      	cmp	r2, #31
 800e486:	dd1f      	ble.n	800e4c8 <_strtod_l+0x580>
 800e488:	2400      	movs	r4, #0
 800e48a:	4625      	mov	r5, r4
 800e48c:	9407      	str	r4, [sp, #28]
 800e48e:	4626      	mov	r6, r4
 800e490:	9a05      	ldr	r2, [sp, #20]
 800e492:	2322      	movs	r3, #34	@ 0x22
 800e494:	f04f 0a00 	mov.w	sl, #0
 800e498:	f04f 0b00 	mov.w	fp, #0
 800e49c:	6013      	str	r3, [r2, #0]
 800e49e:	e76a      	b.n	800e376 <_strtod_l+0x42e>
 800e4a0:	08012cc5 	.word	0x08012cc5
 800e4a4:	08012c64 	.word	0x08012c64
 800e4a8:	08012cbd 	.word	0x08012cbd
 800e4ac:	08012cfa 	.word	0x08012cfa
 800e4b0:	080130a8 	.word	0x080130a8
 800e4b4:	08012e78 	.word	0x08012e78
 800e4b8:	08012e50 	.word	0x08012e50
 800e4bc:	7ca00000 	.word	0x7ca00000
 800e4c0:	7ff00000 	.word	0x7ff00000
 800e4c4:	7fefffff 	.word	0x7fefffff
 800e4c8:	f012 0110 	ands.w	r1, r2, #16
 800e4cc:	bf18      	it	ne
 800e4ce:	216a      	movne	r1, #106	@ 0x6a
 800e4d0:	9106      	str	r1, [sp, #24]
 800e4d2:	ec4b ab17 	vmov	d7, sl, fp
 800e4d6:	49b0      	ldr	r1, [pc, #704]	@ (800e798 <_strtod_l+0x850>)
 800e4d8:	2000      	movs	r0, #0
 800e4da:	07d6      	lsls	r6, r2, #31
 800e4dc:	d504      	bpl.n	800e4e8 <_strtod_l+0x5a0>
 800e4de:	ed91 6b00 	vldr	d6, [r1]
 800e4e2:	2001      	movs	r0, #1
 800e4e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e4e8:	1052      	asrs	r2, r2, #1
 800e4ea:	f101 0108 	add.w	r1, r1, #8
 800e4ee:	d1f4      	bne.n	800e4da <_strtod_l+0x592>
 800e4f0:	b108      	cbz	r0, 800e4f6 <_strtod_l+0x5ae>
 800e4f2:	ec5b ab17 	vmov	sl, fp, d7
 800e4f6:	9a06      	ldr	r2, [sp, #24]
 800e4f8:	b1b2      	cbz	r2, 800e528 <_strtod_l+0x5e0>
 800e4fa:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800e4fe:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800e502:	2a00      	cmp	r2, #0
 800e504:	4658      	mov	r0, fp
 800e506:	dd0f      	ble.n	800e528 <_strtod_l+0x5e0>
 800e508:	2a1f      	cmp	r2, #31
 800e50a:	dd55      	ble.n	800e5b8 <_strtod_l+0x670>
 800e50c:	2a34      	cmp	r2, #52	@ 0x34
 800e50e:	bfde      	ittt	le
 800e510:	f04f 32ff 	movle.w	r2, #4294967295
 800e514:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800e518:	408a      	lslle	r2, r1
 800e51a:	f04f 0a00 	mov.w	sl, #0
 800e51e:	bfcc      	ite	gt
 800e520:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e524:	ea02 0b00 	andle.w	fp, r2, r0
 800e528:	ec4b ab17 	vmov	d7, sl, fp
 800e52c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e534:	d0a8      	beq.n	800e488 <_strtod_l+0x540>
 800e536:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e538:	9805      	ldr	r0, [sp, #20]
 800e53a:	f8cd 9000 	str.w	r9, [sp]
 800e53e:	462a      	mov	r2, r5
 800e540:	f002 fd1e 	bl	8010f80 <__s2b>
 800e544:	9007      	str	r0, [sp, #28]
 800e546:	2800      	cmp	r0, #0
 800e548:	f43f af0a 	beq.w	800e360 <_strtod_l+0x418>
 800e54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e54e:	1b3f      	subs	r7, r7, r4
 800e550:	2b00      	cmp	r3, #0
 800e552:	bfb4      	ite	lt
 800e554:	463b      	movlt	r3, r7
 800e556:	2300      	movge	r3, #0
 800e558:	930a      	str	r3, [sp, #40]	@ 0x28
 800e55a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e55c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800e788 <_strtod_l+0x840>
 800e560:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e564:	2400      	movs	r4, #0
 800e566:	930d      	str	r3, [sp, #52]	@ 0x34
 800e568:	4625      	mov	r5, r4
 800e56a:	9b07      	ldr	r3, [sp, #28]
 800e56c:	9805      	ldr	r0, [sp, #20]
 800e56e:	6859      	ldr	r1, [r3, #4]
 800e570:	f002 fc5e 	bl	8010e30 <_Balloc>
 800e574:	4606      	mov	r6, r0
 800e576:	2800      	cmp	r0, #0
 800e578:	f43f aef6 	beq.w	800e368 <_strtod_l+0x420>
 800e57c:	9b07      	ldr	r3, [sp, #28]
 800e57e:	691a      	ldr	r2, [r3, #16]
 800e580:	ec4b ab19 	vmov	d9, sl, fp
 800e584:	3202      	adds	r2, #2
 800e586:	f103 010c 	add.w	r1, r3, #12
 800e58a:	0092      	lsls	r2, r2, #2
 800e58c:	300c      	adds	r0, #12
 800e58e:	f001 faba 	bl	800fb06 <memcpy>
 800e592:	eeb0 0b49 	vmov.f64	d0, d9
 800e596:	9805      	ldr	r0, [sp, #20]
 800e598:	aa14      	add	r2, sp, #80	@ 0x50
 800e59a:	a913      	add	r1, sp, #76	@ 0x4c
 800e59c:	f003 f82c 	bl	80115f8 <__d2b>
 800e5a0:	9012      	str	r0, [sp, #72]	@ 0x48
 800e5a2:	2800      	cmp	r0, #0
 800e5a4:	f43f aee0 	beq.w	800e368 <_strtod_l+0x420>
 800e5a8:	9805      	ldr	r0, [sp, #20]
 800e5aa:	2101      	movs	r1, #1
 800e5ac:	f002 fd7e 	bl	80110ac <__i2b>
 800e5b0:	4605      	mov	r5, r0
 800e5b2:	b940      	cbnz	r0, 800e5c6 <_strtod_l+0x67e>
 800e5b4:	2500      	movs	r5, #0
 800e5b6:	e6d7      	b.n	800e368 <_strtod_l+0x420>
 800e5b8:	f04f 31ff 	mov.w	r1, #4294967295
 800e5bc:	fa01 f202 	lsl.w	r2, r1, r2
 800e5c0:	ea02 0a0a 	and.w	sl, r2, sl
 800e5c4:	e7b0      	b.n	800e528 <_strtod_l+0x5e0>
 800e5c6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800e5c8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e5ca:	2f00      	cmp	r7, #0
 800e5cc:	bfab      	itete	ge
 800e5ce:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800e5d0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800e5d2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800e5d6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800e5da:	bfac      	ite	ge
 800e5dc:	eb07 0903 	addge.w	r9, r7, r3
 800e5e0:	eba3 0807 	sublt.w	r8, r3, r7
 800e5e4:	9b06      	ldr	r3, [sp, #24]
 800e5e6:	1aff      	subs	r7, r7, r3
 800e5e8:	4417      	add	r7, r2
 800e5ea:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800e5ee:	4a6b      	ldr	r2, [pc, #428]	@ (800e79c <_strtod_l+0x854>)
 800e5f0:	3f01      	subs	r7, #1
 800e5f2:	4297      	cmp	r7, r2
 800e5f4:	da51      	bge.n	800e69a <_strtod_l+0x752>
 800e5f6:	1bd1      	subs	r1, r2, r7
 800e5f8:	291f      	cmp	r1, #31
 800e5fa:	eba3 0301 	sub.w	r3, r3, r1
 800e5fe:	f04f 0201 	mov.w	r2, #1
 800e602:	dc3e      	bgt.n	800e682 <_strtod_l+0x73a>
 800e604:	408a      	lsls	r2, r1
 800e606:	920c      	str	r2, [sp, #48]	@ 0x30
 800e608:	2200      	movs	r2, #0
 800e60a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e60c:	eb09 0703 	add.w	r7, r9, r3
 800e610:	4498      	add	r8, r3
 800e612:	9b06      	ldr	r3, [sp, #24]
 800e614:	45b9      	cmp	r9, r7
 800e616:	4498      	add	r8, r3
 800e618:	464b      	mov	r3, r9
 800e61a:	bfa8      	it	ge
 800e61c:	463b      	movge	r3, r7
 800e61e:	4543      	cmp	r3, r8
 800e620:	bfa8      	it	ge
 800e622:	4643      	movge	r3, r8
 800e624:	2b00      	cmp	r3, #0
 800e626:	bfc2      	ittt	gt
 800e628:	1aff      	subgt	r7, r7, r3
 800e62a:	eba8 0803 	subgt.w	r8, r8, r3
 800e62e:	eba9 0903 	subgt.w	r9, r9, r3
 800e632:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e634:	2b00      	cmp	r3, #0
 800e636:	dd16      	ble.n	800e666 <_strtod_l+0x71e>
 800e638:	4629      	mov	r1, r5
 800e63a:	9805      	ldr	r0, [sp, #20]
 800e63c:	461a      	mov	r2, r3
 800e63e:	f002 fdf5 	bl	801122c <__pow5mult>
 800e642:	4605      	mov	r5, r0
 800e644:	2800      	cmp	r0, #0
 800e646:	d0b5      	beq.n	800e5b4 <_strtod_l+0x66c>
 800e648:	4601      	mov	r1, r0
 800e64a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e64c:	9805      	ldr	r0, [sp, #20]
 800e64e:	f002 fd43 	bl	80110d8 <__multiply>
 800e652:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e654:	2800      	cmp	r0, #0
 800e656:	f43f ae87 	beq.w	800e368 <_strtod_l+0x420>
 800e65a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e65c:	9805      	ldr	r0, [sp, #20]
 800e65e:	f002 fc27 	bl	8010eb0 <_Bfree>
 800e662:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e664:	9312      	str	r3, [sp, #72]	@ 0x48
 800e666:	2f00      	cmp	r7, #0
 800e668:	dc1b      	bgt.n	800e6a2 <_strtod_l+0x75a>
 800e66a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	dd21      	ble.n	800e6b4 <_strtod_l+0x76c>
 800e670:	4631      	mov	r1, r6
 800e672:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e674:	9805      	ldr	r0, [sp, #20]
 800e676:	f002 fdd9 	bl	801122c <__pow5mult>
 800e67a:	4606      	mov	r6, r0
 800e67c:	b9d0      	cbnz	r0, 800e6b4 <_strtod_l+0x76c>
 800e67e:	2600      	movs	r6, #0
 800e680:	e672      	b.n	800e368 <_strtod_l+0x420>
 800e682:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800e686:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800e68a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800e68e:	37e2      	adds	r7, #226	@ 0xe2
 800e690:	fa02 f107 	lsl.w	r1, r2, r7
 800e694:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e696:	920c      	str	r2, [sp, #48]	@ 0x30
 800e698:	e7b8      	b.n	800e60c <_strtod_l+0x6c4>
 800e69a:	2200      	movs	r2, #0
 800e69c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e69e:	2201      	movs	r2, #1
 800e6a0:	e7f9      	b.n	800e696 <_strtod_l+0x74e>
 800e6a2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e6a4:	9805      	ldr	r0, [sp, #20]
 800e6a6:	463a      	mov	r2, r7
 800e6a8:	f002 fe1a 	bl	80112e0 <__lshift>
 800e6ac:	9012      	str	r0, [sp, #72]	@ 0x48
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	d1db      	bne.n	800e66a <_strtod_l+0x722>
 800e6b2:	e659      	b.n	800e368 <_strtod_l+0x420>
 800e6b4:	f1b8 0f00 	cmp.w	r8, #0
 800e6b8:	dd07      	ble.n	800e6ca <_strtod_l+0x782>
 800e6ba:	4631      	mov	r1, r6
 800e6bc:	9805      	ldr	r0, [sp, #20]
 800e6be:	4642      	mov	r2, r8
 800e6c0:	f002 fe0e 	bl	80112e0 <__lshift>
 800e6c4:	4606      	mov	r6, r0
 800e6c6:	2800      	cmp	r0, #0
 800e6c8:	d0d9      	beq.n	800e67e <_strtod_l+0x736>
 800e6ca:	f1b9 0f00 	cmp.w	r9, #0
 800e6ce:	dd08      	ble.n	800e6e2 <_strtod_l+0x79a>
 800e6d0:	4629      	mov	r1, r5
 800e6d2:	9805      	ldr	r0, [sp, #20]
 800e6d4:	464a      	mov	r2, r9
 800e6d6:	f002 fe03 	bl	80112e0 <__lshift>
 800e6da:	4605      	mov	r5, r0
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	f43f ae43 	beq.w	800e368 <_strtod_l+0x420>
 800e6e2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e6e4:	9805      	ldr	r0, [sp, #20]
 800e6e6:	4632      	mov	r2, r6
 800e6e8:	f002 fe82 	bl	80113f0 <__mdiff>
 800e6ec:	4604      	mov	r4, r0
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	f43f ae3a 	beq.w	800e368 <_strtod_l+0x420>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800e6fa:	60c3      	str	r3, [r0, #12]
 800e6fc:	4629      	mov	r1, r5
 800e6fe:	f002 fe5b 	bl	80113b8 <__mcmp>
 800e702:	2800      	cmp	r0, #0
 800e704:	da4e      	bge.n	800e7a4 <_strtod_l+0x85c>
 800e706:	ea58 080a 	orrs.w	r8, r8, sl
 800e70a:	d174      	bne.n	800e7f6 <_strtod_l+0x8ae>
 800e70c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e710:	2b00      	cmp	r3, #0
 800e712:	d170      	bne.n	800e7f6 <_strtod_l+0x8ae>
 800e714:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e718:	0d1b      	lsrs	r3, r3, #20
 800e71a:	051b      	lsls	r3, r3, #20
 800e71c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e720:	d969      	bls.n	800e7f6 <_strtod_l+0x8ae>
 800e722:	6963      	ldr	r3, [r4, #20]
 800e724:	b913      	cbnz	r3, 800e72c <_strtod_l+0x7e4>
 800e726:	6923      	ldr	r3, [r4, #16]
 800e728:	2b01      	cmp	r3, #1
 800e72a:	dd64      	ble.n	800e7f6 <_strtod_l+0x8ae>
 800e72c:	4621      	mov	r1, r4
 800e72e:	2201      	movs	r2, #1
 800e730:	9805      	ldr	r0, [sp, #20]
 800e732:	f002 fdd5 	bl	80112e0 <__lshift>
 800e736:	4629      	mov	r1, r5
 800e738:	4604      	mov	r4, r0
 800e73a:	f002 fe3d 	bl	80113b8 <__mcmp>
 800e73e:	2800      	cmp	r0, #0
 800e740:	dd59      	ble.n	800e7f6 <_strtod_l+0x8ae>
 800e742:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e746:	9a06      	ldr	r2, [sp, #24]
 800e748:	0d1b      	lsrs	r3, r3, #20
 800e74a:	051b      	lsls	r3, r3, #20
 800e74c:	2a00      	cmp	r2, #0
 800e74e:	d070      	beq.n	800e832 <_strtod_l+0x8ea>
 800e750:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e754:	d86d      	bhi.n	800e832 <_strtod_l+0x8ea>
 800e756:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e75a:	f67f ae99 	bls.w	800e490 <_strtod_l+0x548>
 800e75e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800e790 <_strtod_l+0x848>
 800e762:	ec4b ab16 	vmov	d6, sl, fp
 800e766:	4b0e      	ldr	r3, [pc, #56]	@ (800e7a0 <_strtod_l+0x858>)
 800e768:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e76c:	ee17 2a90 	vmov	r2, s15
 800e770:	4013      	ands	r3, r2
 800e772:	ec5b ab17 	vmov	sl, fp, d7
 800e776:	2b00      	cmp	r3, #0
 800e778:	f47f ae01 	bne.w	800e37e <_strtod_l+0x436>
 800e77c:	9a05      	ldr	r2, [sp, #20]
 800e77e:	2322      	movs	r3, #34	@ 0x22
 800e780:	6013      	str	r3, [r2, #0]
 800e782:	e5fc      	b.n	800e37e <_strtod_l+0x436>
 800e784:	f3af 8000 	nop.w
 800e788:	ffc00000 	.word	0xffc00000
 800e78c:	41dfffff 	.word	0x41dfffff
 800e790:	00000000 	.word	0x00000000
 800e794:	39500000 	.word	0x39500000
 800e798:	08012c90 	.word	0x08012c90
 800e79c:	fffffc02 	.word	0xfffffc02
 800e7a0:	7ff00000 	.word	0x7ff00000
 800e7a4:	46d9      	mov	r9, fp
 800e7a6:	d15d      	bne.n	800e864 <_strtod_l+0x91c>
 800e7a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7ac:	f1b8 0f00 	cmp.w	r8, #0
 800e7b0:	d02a      	beq.n	800e808 <_strtod_l+0x8c0>
 800e7b2:	4aab      	ldr	r2, [pc, #684]	@ (800ea60 <_strtod_l+0xb18>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d12a      	bne.n	800e80e <_strtod_l+0x8c6>
 800e7b8:	9b06      	ldr	r3, [sp, #24]
 800e7ba:	4652      	mov	r2, sl
 800e7bc:	b1fb      	cbz	r3, 800e7fe <_strtod_l+0x8b6>
 800e7be:	4ba9      	ldr	r3, [pc, #676]	@ (800ea64 <_strtod_l+0xb1c>)
 800e7c0:	ea0b 0303 	and.w	r3, fp, r3
 800e7c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e7c8:	f04f 31ff 	mov.w	r1, #4294967295
 800e7cc:	d81a      	bhi.n	800e804 <_strtod_l+0x8bc>
 800e7ce:	0d1b      	lsrs	r3, r3, #20
 800e7d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e7d4:	fa01 f303 	lsl.w	r3, r1, r3
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d118      	bne.n	800e80e <_strtod_l+0x8c6>
 800e7dc:	4ba2      	ldr	r3, [pc, #648]	@ (800ea68 <_strtod_l+0xb20>)
 800e7de:	4599      	cmp	r9, r3
 800e7e0:	d102      	bne.n	800e7e8 <_strtod_l+0x8a0>
 800e7e2:	3201      	adds	r2, #1
 800e7e4:	f43f adc0 	beq.w	800e368 <_strtod_l+0x420>
 800e7e8:	4b9e      	ldr	r3, [pc, #632]	@ (800ea64 <_strtod_l+0xb1c>)
 800e7ea:	ea09 0303 	and.w	r3, r9, r3
 800e7ee:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800e7f2:	f04f 0a00 	mov.w	sl, #0
 800e7f6:	9b06      	ldr	r3, [sp, #24]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d1b0      	bne.n	800e75e <_strtod_l+0x816>
 800e7fc:	e5bf      	b.n	800e37e <_strtod_l+0x436>
 800e7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e802:	e7e9      	b.n	800e7d8 <_strtod_l+0x890>
 800e804:	460b      	mov	r3, r1
 800e806:	e7e7      	b.n	800e7d8 <_strtod_l+0x890>
 800e808:	ea53 030a 	orrs.w	r3, r3, sl
 800e80c:	d099      	beq.n	800e742 <_strtod_l+0x7fa>
 800e80e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e810:	b1c3      	cbz	r3, 800e844 <_strtod_l+0x8fc>
 800e812:	ea13 0f09 	tst.w	r3, r9
 800e816:	d0ee      	beq.n	800e7f6 <_strtod_l+0x8ae>
 800e818:	9a06      	ldr	r2, [sp, #24]
 800e81a:	4650      	mov	r0, sl
 800e81c:	4659      	mov	r1, fp
 800e81e:	f1b8 0f00 	cmp.w	r8, #0
 800e822:	d013      	beq.n	800e84c <_strtod_l+0x904>
 800e824:	f7ff fb74 	bl	800df10 <sulp>
 800e828:	ee39 7b00 	vadd.f64	d7, d9, d0
 800e82c:	ec5b ab17 	vmov	sl, fp, d7
 800e830:	e7e1      	b.n	800e7f6 <_strtod_l+0x8ae>
 800e832:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e836:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e83a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e83e:	f04f 3aff 	mov.w	sl, #4294967295
 800e842:	e7d8      	b.n	800e7f6 <_strtod_l+0x8ae>
 800e844:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e846:	ea13 0f0a 	tst.w	r3, sl
 800e84a:	e7e4      	b.n	800e816 <_strtod_l+0x8ce>
 800e84c:	f7ff fb60 	bl	800df10 <sulp>
 800e850:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e854:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e85c:	ec5b ab10 	vmov	sl, fp, d0
 800e860:	d1c9      	bne.n	800e7f6 <_strtod_l+0x8ae>
 800e862:	e615      	b.n	800e490 <_strtod_l+0x548>
 800e864:	4629      	mov	r1, r5
 800e866:	4620      	mov	r0, r4
 800e868:	f002 ff1e 	bl	80116a8 <__ratio>
 800e86c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800e870:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e878:	d85d      	bhi.n	800e936 <_strtod_l+0x9ee>
 800e87a:	f1b8 0f00 	cmp.w	r8, #0
 800e87e:	d164      	bne.n	800e94a <_strtod_l+0xa02>
 800e880:	f1ba 0f00 	cmp.w	sl, #0
 800e884:	d14b      	bne.n	800e91e <_strtod_l+0x9d6>
 800e886:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e88a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d160      	bne.n	800e954 <_strtod_l+0xa0c>
 800e892:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800e896:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e89e:	d401      	bmi.n	800e8a4 <_strtod_l+0x95c>
 800e8a0:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e8a4:	eeb1 ab48 	vneg.f64	d10, d8
 800e8a8:	486e      	ldr	r0, [pc, #440]	@ (800ea64 <_strtod_l+0xb1c>)
 800e8aa:	4970      	ldr	r1, [pc, #448]	@ (800ea6c <_strtod_l+0xb24>)
 800e8ac:	ea09 0700 	and.w	r7, r9, r0
 800e8b0:	428f      	cmp	r7, r1
 800e8b2:	ec53 2b1a 	vmov	r2, r3, d10
 800e8b6:	d17d      	bne.n	800e9b4 <_strtod_l+0xa6c>
 800e8b8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800e8bc:	ec4b ab1c 	vmov	d12, sl, fp
 800e8c0:	eeb0 0b4c 	vmov.f64	d0, d12
 800e8c4:	f002 fe28 	bl	8011518 <__ulp>
 800e8c8:	4866      	ldr	r0, [pc, #408]	@ (800ea64 <_strtod_l+0xb1c>)
 800e8ca:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800e8ce:	ee1c 3a90 	vmov	r3, s25
 800e8d2:	4a67      	ldr	r2, [pc, #412]	@ (800ea70 <_strtod_l+0xb28>)
 800e8d4:	ea03 0100 	and.w	r1, r3, r0
 800e8d8:	4291      	cmp	r1, r2
 800e8da:	ec5b ab1c 	vmov	sl, fp, d12
 800e8de:	d93c      	bls.n	800e95a <_strtod_l+0xa12>
 800e8e0:	ee19 2a90 	vmov	r2, s19
 800e8e4:	4b60      	ldr	r3, [pc, #384]	@ (800ea68 <_strtod_l+0xb20>)
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d104      	bne.n	800e8f4 <_strtod_l+0x9ac>
 800e8ea:	ee19 3a10 	vmov	r3, s18
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	f43f ad3a 	beq.w	800e368 <_strtod_l+0x420>
 800e8f4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800ea68 <_strtod_l+0xb20>
 800e8f8:	f04f 3aff 	mov.w	sl, #4294967295
 800e8fc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e8fe:	9805      	ldr	r0, [sp, #20]
 800e900:	f002 fad6 	bl	8010eb0 <_Bfree>
 800e904:	9805      	ldr	r0, [sp, #20]
 800e906:	4631      	mov	r1, r6
 800e908:	f002 fad2 	bl	8010eb0 <_Bfree>
 800e90c:	9805      	ldr	r0, [sp, #20]
 800e90e:	4629      	mov	r1, r5
 800e910:	f002 face 	bl	8010eb0 <_Bfree>
 800e914:	9805      	ldr	r0, [sp, #20]
 800e916:	4621      	mov	r1, r4
 800e918:	f002 faca 	bl	8010eb0 <_Bfree>
 800e91c:	e625      	b.n	800e56a <_strtod_l+0x622>
 800e91e:	f1ba 0f01 	cmp.w	sl, #1
 800e922:	d103      	bne.n	800e92c <_strtod_l+0x9e4>
 800e924:	f1bb 0f00 	cmp.w	fp, #0
 800e928:	f43f adb2 	beq.w	800e490 <_strtod_l+0x548>
 800e92c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e930:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e934:	e7b8      	b.n	800e8a8 <_strtod_l+0x960>
 800e936:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e93a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e93e:	f1b8 0f00 	cmp.w	r8, #0
 800e942:	d0af      	beq.n	800e8a4 <_strtod_l+0x95c>
 800e944:	eeb0 ab48 	vmov.f64	d10, d8
 800e948:	e7ae      	b.n	800e8a8 <_strtod_l+0x960>
 800e94a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800e94e:	eeb0 8b4a 	vmov.f64	d8, d10
 800e952:	e7a9      	b.n	800e8a8 <_strtod_l+0x960>
 800e954:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e958:	e7a6      	b.n	800e8a8 <_strtod_l+0x960>
 800e95a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e95e:	9b06      	ldr	r3, [sp, #24]
 800e960:	46d9      	mov	r9, fp
 800e962:	2b00      	cmp	r3, #0
 800e964:	d1ca      	bne.n	800e8fc <_strtod_l+0x9b4>
 800e966:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e96a:	0d1b      	lsrs	r3, r3, #20
 800e96c:	051b      	lsls	r3, r3, #20
 800e96e:	429f      	cmp	r7, r3
 800e970:	d1c4      	bne.n	800e8fc <_strtod_l+0x9b4>
 800e972:	ec51 0b18 	vmov	r0, r1, d8
 800e976:	f7f1 fef7 	bl	8000768 <__aeabi_d2lz>
 800e97a:	f7f1 feaf 	bl	80006dc <__aeabi_l2d>
 800e97e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800e982:	ec41 0b17 	vmov	d7, r0, r1
 800e986:	ea49 090a 	orr.w	r9, r9, sl
 800e98a:	ea59 0908 	orrs.w	r9, r9, r8
 800e98e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e992:	d03c      	beq.n	800ea0e <_strtod_l+0xac6>
 800e994:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800ea48 <_strtod_l+0xb00>
 800e998:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a0:	f53f aced 	bmi.w	800e37e <_strtod_l+0x436>
 800e9a4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ea50 <_strtod_l+0xb08>
 800e9a8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b0:	dda4      	ble.n	800e8fc <_strtod_l+0x9b4>
 800e9b2:	e4e4      	b.n	800e37e <_strtod_l+0x436>
 800e9b4:	9906      	ldr	r1, [sp, #24]
 800e9b6:	b1e1      	cbz	r1, 800e9f2 <_strtod_l+0xaaa>
 800e9b8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800e9bc:	d819      	bhi.n	800e9f2 <_strtod_l+0xaaa>
 800e9be:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9c6:	d811      	bhi.n	800e9ec <_strtod_l+0xaa4>
 800e9c8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800e9cc:	ee18 3a10 	vmov	r3, s16
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	bf38      	it	cc
 800e9d4:	2301      	movcc	r3, #1
 800e9d6:	ee08 3a10 	vmov	s16, r3
 800e9da:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800e9de:	f1b8 0f00 	cmp.w	r8, #0
 800e9e2:	d111      	bne.n	800ea08 <_strtod_l+0xac0>
 800e9e4:	eeb1 7b48 	vneg.f64	d7, d8
 800e9e8:	ec53 2b17 	vmov	r2, r3, d7
 800e9ec:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800e9f0:	1bcb      	subs	r3, r1, r7
 800e9f2:	eeb0 0b49 	vmov.f64	d0, d9
 800e9f6:	ec43 2b1a 	vmov	d10, r2, r3
 800e9fa:	f002 fd8d 	bl	8011518 <__ulp>
 800e9fe:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800ea02:	ec5b ab19 	vmov	sl, fp, d9
 800ea06:	e7aa      	b.n	800e95e <_strtod_l+0xa16>
 800ea08:	eeb0 7b48 	vmov.f64	d7, d8
 800ea0c:	e7ec      	b.n	800e9e8 <_strtod_l+0xaa0>
 800ea0e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800ea58 <_strtod_l+0xb10>
 800ea12:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ea16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea1a:	f57f af6f 	bpl.w	800e8fc <_strtod_l+0x9b4>
 800ea1e:	e4ae      	b.n	800e37e <_strtod_l+0x436>
 800ea20:	2300      	movs	r3, #0
 800ea22:	9308      	str	r3, [sp, #32]
 800ea24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ea28:	6013      	str	r3, [r2, #0]
 800ea2a:	f7ff bacc 	b.w	800dfc6 <_strtod_l+0x7e>
 800ea2e:	2a65      	cmp	r2, #101	@ 0x65
 800ea30:	f43f abbc 	beq.w	800e1ac <_strtod_l+0x264>
 800ea34:	2a45      	cmp	r2, #69	@ 0x45
 800ea36:	f43f abb9 	beq.w	800e1ac <_strtod_l+0x264>
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	9306      	str	r3, [sp, #24]
 800ea3e:	f7ff bbf0 	b.w	800e222 <_strtod_l+0x2da>
 800ea42:	bf00      	nop
 800ea44:	f3af 8000 	nop.w
 800ea48:	94a03595 	.word	0x94a03595
 800ea4c:	3fdfffff 	.word	0x3fdfffff
 800ea50:	35afe535 	.word	0x35afe535
 800ea54:	3fe00000 	.word	0x3fe00000
 800ea58:	94a03595 	.word	0x94a03595
 800ea5c:	3fcfffff 	.word	0x3fcfffff
 800ea60:	000fffff 	.word	0x000fffff
 800ea64:	7ff00000 	.word	0x7ff00000
 800ea68:	7fefffff 	.word	0x7fefffff
 800ea6c:	7fe00000 	.word	0x7fe00000
 800ea70:	7c9fffff 	.word	0x7c9fffff

0800ea74 <_strtod_r>:
 800ea74:	4b01      	ldr	r3, [pc, #4]	@ (800ea7c <_strtod_r+0x8>)
 800ea76:	f7ff ba67 	b.w	800df48 <_strtod_l>
 800ea7a:	bf00      	nop
 800ea7c:	24000058 	.word	0x24000058

0800ea80 <__cvt>:
 800ea80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea82:	ed2d 8b02 	vpush	{d8}
 800ea86:	eeb0 8b40 	vmov.f64	d8, d0
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	4617      	mov	r7, r2
 800ea8e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800ea90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ea92:	ee18 2a90 	vmov	r2, s17
 800ea96:	f025 0520 	bic.w	r5, r5, #32
 800ea9a:	2a00      	cmp	r2, #0
 800ea9c:	bfb6      	itet	lt
 800ea9e:	222d      	movlt	r2, #45	@ 0x2d
 800eaa0:	2200      	movge	r2, #0
 800eaa2:	eeb1 8b40 	vneglt.f64	d8, d0
 800eaa6:	2d46      	cmp	r5, #70	@ 0x46
 800eaa8:	460c      	mov	r4, r1
 800eaaa:	701a      	strb	r2, [r3, #0]
 800eaac:	d004      	beq.n	800eab8 <__cvt+0x38>
 800eaae:	2d45      	cmp	r5, #69	@ 0x45
 800eab0:	d100      	bne.n	800eab4 <__cvt+0x34>
 800eab2:	3401      	adds	r4, #1
 800eab4:	2102      	movs	r1, #2
 800eab6:	e000      	b.n	800eaba <__cvt+0x3a>
 800eab8:	2103      	movs	r1, #3
 800eaba:	ab03      	add	r3, sp, #12
 800eabc:	9301      	str	r3, [sp, #4]
 800eabe:	ab02      	add	r3, sp, #8
 800eac0:	9300      	str	r3, [sp, #0]
 800eac2:	4622      	mov	r2, r4
 800eac4:	4633      	mov	r3, r6
 800eac6:	eeb0 0b48 	vmov.f64	d0, d8
 800eaca:	f001 f8c5 	bl	800fc58 <_dtoa_r>
 800eace:	2d47      	cmp	r5, #71	@ 0x47
 800ead0:	d114      	bne.n	800eafc <__cvt+0x7c>
 800ead2:	07fb      	lsls	r3, r7, #31
 800ead4:	d50a      	bpl.n	800eaec <__cvt+0x6c>
 800ead6:	1902      	adds	r2, r0, r4
 800ead8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae0:	bf08      	it	eq
 800eae2:	9203      	streq	r2, [sp, #12]
 800eae4:	2130      	movs	r1, #48	@ 0x30
 800eae6:	9b03      	ldr	r3, [sp, #12]
 800eae8:	4293      	cmp	r3, r2
 800eaea:	d319      	bcc.n	800eb20 <__cvt+0xa0>
 800eaec:	9b03      	ldr	r3, [sp, #12]
 800eaee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eaf0:	1a1b      	subs	r3, r3, r0
 800eaf2:	6013      	str	r3, [r2, #0]
 800eaf4:	b005      	add	sp, #20
 800eaf6:	ecbd 8b02 	vpop	{d8}
 800eafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eafc:	2d46      	cmp	r5, #70	@ 0x46
 800eafe:	eb00 0204 	add.w	r2, r0, r4
 800eb02:	d1e9      	bne.n	800ead8 <__cvt+0x58>
 800eb04:	7803      	ldrb	r3, [r0, #0]
 800eb06:	2b30      	cmp	r3, #48	@ 0x30
 800eb08:	d107      	bne.n	800eb1a <__cvt+0x9a>
 800eb0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb12:	bf1c      	itt	ne
 800eb14:	f1c4 0401 	rsbne	r4, r4, #1
 800eb18:	6034      	strne	r4, [r6, #0]
 800eb1a:	6833      	ldr	r3, [r6, #0]
 800eb1c:	441a      	add	r2, r3
 800eb1e:	e7db      	b.n	800ead8 <__cvt+0x58>
 800eb20:	1c5c      	adds	r4, r3, #1
 800eb22:	9403      	str	r4, [sp, #12]
 800eb24:	7019      	strb	r1, [r3, #0]
 800eb26:	e7de      	b.n	800eae6 <__cvt+0x66>

0800eb28 <__exponent>:
 800eb28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb2a:	2900      	cmp	r1, #0
 800eb2c:	bfba      	itte	lt
 800eb2e:	4249      	neglt	r1, r1
 800eb30:	232d      	movlt	r3, #45	@ 0x2d
 800eb32:	232b      	movge	r3, #43	@ 0x2b
 800eb34:	2909      	cmp	r1, #9
 800eb36:	7002      	strb	r2, [r0, #0]
 800eb38:	7043      	strb	r3, [r0, #1]
 800eb3a:	dd29      	ble.n	800eb90 <__exponent+0x68>
 800eb3c:	f10d 0307 	add.w	r3, sp, #7
 800eb40:	461d      	mov	r5, r3
 800eb42:	270a      	movs	r7, #10
 800eb44:	461a      	mov	r2, r3
 800eb46:	fbb1 f6f7 	udiv	r6, r1, r7
 800eb4a:	fb07 1416 	mls	r4, r7, r6, r1
 800eb4e:	3430      	adds	r4, #48	@ 0x30
 800eb50:	f802 4c01 	strb.w	r4, [r2, #-1]
 800eb54:	460c      	mov	r4, r1
 800eb56:	2c63      	cmp	r4, #99	@ 0x63
 800eb58:	f103 33ff 	add.w	r3, r3, #4294967295
 800eb5c:	4631      	mov	r1, r6
 800eb5e:	dcf1      	bgt.n	800eb44 <__exponent+0x1c>
 800eb60:	3130      	adds	r1, #48	@ 0x30
 800eb62:	1e94      	subs	r4, r2, #2
 800eb64:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eb68:	1c41      	adds	r1, r0, #1
 800eb6a:	4623      	mov	r3, r4
 800eb6c:	42ab      	cmp	r3, r5
 800eb6e:	d30a      	bcc.n	800eb86 <__exponent+0x5e>
 800eb70:	f10d 0309 	add.w	r3, sp, #9
 800eb74:	1a9b      	subs	r3, r3, r2
 800eb76:	42ac      	cmp	r4, r5
 800eb78:	bf88      	it	hi
 800eb7a:	2300      	movhi	r3, #0
 800eb7c:	3302      	adds	r3, #2
 800eb7e:	4403      	add	r3, r0
 800eb80:	1a18      	subs	r0, r3, r0
 800eb82:	b003      	add	sp, #12
 800eb84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb86:	f813 6b01 	ldrb.w	r6, [r3], #1
 800eb8a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800eb8e:	e7ed      	b.n	800eb6c <__exponent+0x44>
 800eb90:	2330      	movs	r3, #48	@ 0x30
 800eb92:	3130      	adds	r1, #48	@ 0x30
 800eb94:	7083      	strb	r3, [r0, #2]
 800eb96:	70c1      	strb	r1, [r0, #3]
 800eb98:	1d03      	adds	r3, r0, #4
 800eb9a:	e7f1      	b.n	800eb80 <__exponent+0x58>
 800eb9c:	0000      	movs	r0, r0
	...

0800eba0 <_printf_float>:
 800eba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba4:	b08d      	sub	sp, #52	@ 0x34
 800eba6:	460c      	mov	r4, r1
 800eba8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ebac:	4616      	mov	r6, r2
 800ebae:	461f      	mov	r7, r3
 800ebb0:	4605      	mov	r5, r0
 800ebb2:	f000 ff21 	bl	800f9f8 <_localeconv_r>
 800ebb6:	f8d0 b000 	ldr.w	fp, [r0]
 800ebba:	4658      	mov	r0, fp
 800ebbc:	f7f1 fbf8 	bl	80003b0 <strlen>
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebc4:	f8d8 3000 	ldr.w	r3, [r8]
 800ebc8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ebcc:	6822      	ldr	r2, [r4, #0]
 800ebce:	9005      	str	r0, [sp, #20]
 800ebd0:	3307      	adds	r3, #7
 800ebd2:	f023 0307 	bic.w	r3, r3, #7
 800ebd6:	f103 0108 	add.w	r1, r3, #8
 800ebda:	f8c8 1000 	str.w	r1, [r8]
 800ebde:	ed93 0b00 	vldr	d0, [r3]
 800ebe2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800ee40 <_printf_float+0x2a0>
 800ebe6:	eeb0 7bc0 	vabs.f64	d7, d0
 800ebea:	eeb4 7b46 	vcmp.f64	d7, d6
 800ebee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ebf6:	dd24      	ble.n	800ec42 <_printf_float+0xa2>
 800ebf8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ebfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec00:	d502      	bpl.n	800ec08 <_printf_float+0x68>
 800ec02:	232d      	movs	r3, #45	@ 0x2d
 800ec04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec08:	498f      	ldr	r1, [pc, #572]	@ (800ee48 <_printf_float+0x2a8>)
 800ec0a:	4b90      	ldr	r3, [pc, #576]	@ (800ee4c <_printf_float+0x2ac>)
 800ec0c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ec10:	bf94      	ite	ls
 800ec12:	4688      	movls	r8, r1
 800ec14:	4698      	movhi	r8, r3
 800ec16:	f022 0204 	bic.w	r2, r2, #4
 800ec1a:	2303      	movs	r3, #3
 800ec1c:	6123      	str	r3, [r4, #16]
 800ec1e:	6022      	str	r2, [r4, #0]
 800ec20:	f04f 0a00 	mov.w	sl, #0
 800ec24:	9700      	str	r7, [sp, #0]
 800ec26:	4633      	mov	r3, r6
 800ec28:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ec2a:	4621      	mov	r1, r4
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	f000 f9d1 	bl	800efd4 <_printf_common>
 800ec32:	3001      	adds	r0, #1
 800ec34:	f040 8089 	bne.w	800ed4a <_printf_float+0x1aa>
 800ec38:	f04f 30ff 	mov.w	r0, #4294967295
 800ec3c:	b00d      	add	sp, #52	@ 0x34
 800ec3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec42:	eeb4 0b40 	vcmp.f64	d0, d0
 800ec46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec4a:	d709      	bvc.n	800ec60 <_printf_float+0xc0>
 800ec4c:	ee10 3a90 	vmov	r3, s1
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	bfbc      	itt	lt
 800ec54:	232d      	movlt	r3, #45	@ 0x2d
 800ec56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ec5a:	497d      	ldr	r1, [pc, #500]	@ (800ee50 <_printf_float+0x2b0>)
 800ec5c:	4b7d      	ldr	r3, [pc, #500]	@ (800ee54 <_printf_float+0x2b4>)
 800ec5e:	e7d5      	b.n	800ec0c <_printf_float+0x6c>
 800ec60:	6863      	ldr	r3, [r4, #4]
 800ec62:	1c59      	adds	r1, r3, #1
 800ec64:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800ec68:	d139      	bne.n	800ecde <_printf_float+0x13e>
 800ec6a:	2306      	movs	r3, #6
 800ec6c:	6063      	str	r3, [r4, #4]
 800ec6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ec72:	2300      	movs	r3, #0
 800ec74:	6022      	str	r2, [r4, #0]
 800ec76:	9303      	str	r3, [sp, #12]
 800ec78:	ab0a      	add	r3, sp, #40	@ 0x28
 800ec7a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ec7e:	ab09      	add	r3, sp, #36	@ 0x24
 800ec80:	9300      	str	r3, [sp, #0]
 800ec82:	6861      	ldr	r1, [r4, #4]
 800ec84:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ec88:	4628      	mov	r0, r5
 800ec8a:	f7ff fef9 	bl	800ea80 <__cvt>
 800ec8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ec92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ec94:	4680      	mov	r8, r0
 800ec96:	d129      	bne.n	800ecec <_printf_float+0x14c>
 800ec98:	1cc8      	adds	r0, r1, #3
 800ec9a:	db02      	blt.n	800eca2 <_printf_float+0x102>
 800ec9c:	6863      	ldr	r3, [r4, #4]
 800ec9e:	4299      	cmp	r1, r3
 800eca0:	dd41      	ble.n	800ed26 <_printf_float+0x186>
 800eca2:	f1a9 0902 	sub.w	r9, r9, #2
 800eca6:	fa5f f989 	uxtb.w	r9, r9
 800ecaa:	3901      	subs	r1, #1
 800ecac:	464a      	mov	r2, r9
 800ecae:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ecb2:	9109      	str	r1, [sp, #36]	@ 0x24
 800ecb4:	f7ff ff38 	bl	800eb28 <__exponent>
 800ecb8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ecba:	1813      	adds	r3, r2, r0
 800ecbc:	2a01      	cmp	r2, #1
 800ecbe:	4682      	mov	sl, r0
 800ecc0:	6123      	str	r3, [r4, #16]
 800ecc2:	dc02      	bgt.n	800ecca <_printf_float+0x12a>
 800ecc4:	6822      	ldr	r2, [r4, #0]
 800ecc6:	07d2      	lsls	r2, r2, #31
 800ecc8:	d501      	bpl.n	800ecce <_printf_float+0x12e>
 800ecca:	3301      	adds	r3, #1
 800eccc:	6123      	str	r3, [r4, #16]
 800ecce:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d0a6      	beq.n	800ec24 <_printf_float+0x84>
 800ecd6:	232d      	movs	r3, #45	@ 0x2d
 800ecd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ecdc:	e7a2      	b.n	800ec24 <_printf_float+0x84>
 800ecde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ece2:	d1c4      	bne.n	800ec6e <_printf_float+0xce>
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d1c2      	bne.n	800ec6e <_printf_float+0xce>
 800ece8:	2301      	movs	r3, #1
 800ecea:	e7bf      	b.n	800ec6c <_printf_float+0xcc>
 800ecec:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ecf0:	d9db      	bls.n	800ecaa <_printf_float+0x10a>
 800ecf2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800ecf6:	d118      	bne.n	800ed2a <_printf_float+0x18a>
 800ecf8:	2900      	cmp	r1, #0
 800ecfa:	6863      	ldr	r3, [r4, #4]
 800ecfc:	dd0b      	ble.n	800ed16 <_printf_float+0x176>
 800ecfe:	6121      	str	r1, [r4, #16]
 800ed00:	b913      	cbnz	r3, 800ed08 <_printf_float+0x168>
 800ed02:	6822      	ldr	r2, [r4, #0]
 800ed04:	07d0      	lsls	r0, r2, #31
 800ed06:	d502      	bpl.n	800ed0e <_printf_float+0x16e>
 800ed08:	3301      	adds	r3, #1
 800ed0a:	440b      	add	r3, r1
 800ed0c:	6123      	str	r3, [r4, #16]
 800ed0e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ed10:	f04f 0a00 	mov.w	sl, #0
 800ed14:	e7db      	b.n	800ecce <_printf_float+0x12e>
 800ed16:	b913      	cbnz	r3, 800ed1e <_printf_float+0x17e>
 800ed18:	6822      	ldr	r2, [r4, #0]
 800ed1a:	07d2      	lsls	r2, r2, #31
 800ed1c:	d501      	bpl.n	800ed22 <_printf_float+0x182>
 800ed1e:	3302      	adds	r3, #2
 800ed20:	e7f4      	b.n	800ed0c <_printf_float+0x16c>
 800ed22:	2301      	movs	r3, #1
 800ed24:	e7f2      	b.n	800ed0c <_printf_float+0x16c>
 800ed26:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800ed2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed2c:	4299      	cmp	r1, r3
 800ed2e:	db05      	blt.n	800ed3c <_printf_float+0x19c>
 800ed30:	6823      	ldr	r3, [r4, #0]
 800ed32:	6121      	str	r1, [r4, #16]
 800ed34:	07d8      	lsls	r0, r3, #31
 800ed36:	d5ea      	bpl.n	800ed0e <_printf_float+0x16e>
 800ed38:	1c4b      	adds	r3, r1, #1
 800ed3a:	e7e7      	b.n	800ed0c <_printf_float+0x16c>
 800ed3c:	2900      	cmp	r1, #0
 800ed3e:	bfd4      	ite	le
 800ed40:	f1c1 0202 	rsble	r2, r1, #2
 800ed44:	2201      	movgt	r2, #1
 800ed46:	4413      	add	r3, r2
 800ed48:	e7e0      	b.n	800ed0c <_printf_float+0x16c>
 800ed4a:	6823      	ldr	r3, [r4, #0]
 800ed4c:	055a      	lsls	r2, r3, #21
 800ed4e:	d407      	bmi.n	800ed60 <_printf_float+0x1c0>
 800ed50:	6923      	ldr	r3, [r4, #16]
 800ed52:	4642      	mov	r2, r8
 800ed54:	4631      	mov	r1, r6
 800ed56:	4628      	mov	r0, r5
 800ed58:	47b8      	blx	r7
 800ed5a:	3001      	adds	r0, #1
 800ed5c:	d12a      	bne.n	800edb4 <_printf_float+0x214>
 800ed5e:	e76b      	b.n	800ec38 <_printf_float+0x98>
 800ed60:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ed64:	f240 80e0 	bls.w	800ef28 <_printf_float+0x388>
 800ed68:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ed6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed74:	d133      	bne.n	800edde <_printf_float+0x23e>
 800ed76:	4a38      	ldr	r2, [pc, #224]	@ (800ee58 <_printf_float+0x2b8>)
 800ed78:	2301      	movs	r3, #1
 800ed7a:	4631      	mov	r1, r6
 800ed7c:	4628      	mov	r0, r5
 800ed7e:	47b8      	blx	r7
 800ed80:	3001      	adds	r0, #1
 800ed82:	f43f af59 	beq.w	800ec38 <_printf_float+0x98>
 800ed86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ed8a:	4543      	cmp	r3, r8
 800ed8c:	db02      	blt.n	800ed94 <_printf_float+0x1f4>
 800ed8e:	6823      	ldr	r3, [r4, #0]
 800ed90:	07d8      	lsls	r0, r3, #31
 800ed92:	d50f      	bpl.n	800edb4 <_printf_float+0x214>
 800ed94:	9b05      	ldr	r3, [sp, #20]
 800ed96:	465a      	mov	r2, fp
 800ed98:	4631      	mov	r1, r6
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	47b8      	blx	r7
 800ed9e:	3001      	adds	r0, #1
 800eda0:	f43f af4a 	beq.w	800ec38 <_printf_float+0x98>
 800eda4:	f04f 0900 	mov.w	r9, #0
 800eda8:	f108 38ff 	add.w	r8, r8, #4294967295
 800edac:	f104 0a1a 	add.w	sl, r4, #26
 800edb0:	45c8      	cmp	r8, r9
 800edb2:	dc09      	bgt.n	800edc8 <_printf_float+0x228>
 800edb4:	6823      	ldr	r3, [r4, #0]
 800edb6:	079b      	lsls	r3, r3, #30
 800edb8:	f100 8107 	bmi.w	800efca <_printf_float+0x42a>
 800edbc:	68e0      	ldr	r0, [r4, #12]
 800edbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edc0:	4298      	cmp	r0, r3
 800edc2:	bfb8      	it	lt
 800edc4:	4618      	movlt	r0, r3
 800edc6:	e739      	b.n	800ec3c <_printf_float+0x9c>
 800edc8:	2301      	movs	r3, #1
 800edca:	4652      	mov	r2, sl
 800edcc:	4631      	mov	r1, r6
 800edce:	4628      	mov	r0, r5
 800edd0:	47b8      	blx	r7
 800edd2:	3001      	adds	r0, #1
 800edd4:	f43f af30 	beq.w	800ec38 <_printf_float+0x98>
 800edd8:	f109 0901 	add.w	r9, r9, #1
 800eddc:	e7e8      	b.n	800edb0 <_printf_float+0x210>
 800edde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	dc3b      	bgt.n	800ee5c <_printf_float+0x2bc>
 800ede4:	4a1c      	ldr	r2, [pc, #112]	@ (800ee58 <_printf_float+0x2b8>)
 800ede6:	2301      	movs	r3, #1
 800ede8:	4631      	mov	r1, r6
 800edea:	4628      	mov	r0, r5
 800edec:	47b8      	blx	r7
 800edee:	3001      	adds	r0, #1
 800edf0:	f43f af22 	beq.w	800ec38 <_printf_float+0x98>
 800edf4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800edf8:	ea59 0303 	orrs.w	r3, r9, r3
 800edfc:	d102      	bne.n	800ee04 <_printf_float+0x264>
 800edfe:	6823      	ldr	r3, [r4, #0]
 800ee00:	07d9      	lsls	r1, r3, #31
 800ee02:	d5d7      	bpl.n	800edb4 <_printf_float+0x214>
 800ee04:	9b05      	ldr	r3, [sp, #20]
 800ee06:	465a      	mov	r2, fp
 800ee08:	4631      	mov	r1, r6
 800ee0a:	4628      	mov	r0, r5
 800ee0c:	47b8      	blx	r7
 800ee0e:	3001      	adds	r0, #1
 800ee10:	f43f af12 	beq.w	800ec38 <_printf_float+0x98>
 800ee14:	f04f 0a00 	mov.w	sl, #0
 800ee18:	f104 0b1a 	add.w	fp, r4, #26
 800ee1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee1e:	425b      	negs	r3, r3
 800ee20:	4553      	cmp	r3, sl
 800ee22:	dc01      	bgt.n	800ee28 <_printf_float+0x288>
 800ee24:	464b      	mov	r3, r9
 800ee26:	e794      	b.n	800ed52 <_printf_float+0x1b2>
 800ee28:	2301      	movs	r3, #1
 800ee2a:	465a      	mov	r2, fp
 800ee2c:	4631      	mov	r1, r6
 800ee2e:	4628      	mov	r0, r5
 800ee30:	47b8      	blx	r7
 800ee32:	3001      	adds	r0, #1
 800ee34:	f43f af00 	beq.w	800ec38 <_printf_float+0x98>
 800ee38:	f10a 0a01 	add.w	sl, sl, #1
 800ee3c:	e7ee      	b.n	800ee1c <_printf_float+0x27c>
 800ee3e:	bf00      	nop
 800ee40:	ffffffff 	.word	0xffffffff
 800ee44:	7fefffff 	.word	0x7fefffff
 800ee48:	08012cb8 	.word	0x08012cb8
 800ee4c:	08012cbc 	.word	0x08012cbc
 800ee50:	08012cc0 	.word	0x08012cc0
 800ee54:	08012cc4 	.word	0x08012cc4
 800ee58:	08013068 	.word	0x08013068
 800ee5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ee5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ee62:	4553      	cmp	r3, sl
 800ee64:	bfa8      	it	ge
 800ee66:	4653      	movge	r3, sl
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	4699      	mov	r9, r3
 800ee6c:	dc37      	bgt.n	800eede <_printf_float+0x33e>
 800ee6e:	2300      	movs	r3, #0
 800ee70:	9307      	str	r3, [sp, #28]
 800ee72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee76:	f104 021a 	add.w	r2, r4, #26
 800ee7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ee7c:	9907      	ldr	r1, [sp, #28]
 800ee7e:	9306      	str	r3, [sp, #24]
 800ee80:	eba3 0309 	sub.w	r3, r3, r9
 800ee84:	428b      	cmp	r3, r1
 800ee86:	dc31      	bgt.n	800eeec <_printf_float+0x34c>
 800ee88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee8a:	459a      	cmp	sl, r3
 800ee8c:	dc3b      	bgt.n	800ef06 <_printf_float+0x366>
 800ee8e:	6823      	ldr	r3, [r4, #0]
 800ee90:	07da      	lsls	r2, r3, #31
 800ee92:	d438      	bmi.n	800ef06 <_printf_float+0x366>
 800ee94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee96:	ebaa 0903 	sub.w	r9, sl, r3
 800ee9a:	9b06      	ldr	r3, [sp, #24]
 800ee9c:	ebaa 0303 	sub.w	r3, sl, r3
 800eea0:	4599      	cmp	r9, r3
 800eea2:	bfa8      	it	ge
 800eea4:	4699      	movge	r9, r3
 800eea6:	f1b9 0f00 	cmp.w	r9, #0
 800eeaa:	dc34      	bgt.n	800ef16 <_printf_float+0x376>
 800eeac:	f04f 0800 	mov.w	r8, #0
 800eeb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eeb4:	f104 0b1a 	add.w	fp, r4, #26
 800eeb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eeba:	ebaa 0303 	sub.w	r3, sl, r3
 800eebe:	eba3 0309 	sub.w	r3, r3, r9
 800eec2:	4543      	cmp	r3, r8
 800eec4:	f77f af76 	ble.w	800edb4 <_printf_float+0x214>
 800eec8:	2301      	movs	r3, #1
 800eeca:	465a      	mov	r2, fp
 800eecc:	4631      	mov	r1, r6
 800eece:	4628      	mov	r0, r5
 800eed0:	47b8      	blx	r7
 800eed2:	3001      	adds	r0, #1
 800eed4:	f43f aeb0 	beq.w	800ec38 <_printf_float+0x98>
 800eed8:	f108 0801 	add.w	r8, r8, #1
 800eedc:	e7ec      	b.n	800eeb8 <_printf_float+0x318>
 800eede:	4642      	mov	r2, r8
 800eee0:	4631      	mov	r1, r6
 800eee2:	4628      	mov	r0, r5
 800eee4:	47b8      	blx	r7
 800eee6:	3001      	adds	r0, #1
 800eee8:	d1c1      	bne.n	800ee6e <_printf_float+0x2ce>
 800eeea:	e6a5      	b.n	800ec38 <_printf_float+0x98>
 800eeec:	2301      	movs	r3, #1
 800eeee:	4631      	mov	r1, r6
 800eef0:	4628      	mov	r0, r5
 800eef2:	9206      	str	r2, [sp, #24]
 800eef4:	47b8      	blx	r7
 800eef6:	3001      	adds	r0, #1
 800eef8:	f43f ae9e 	beq.w	800ec38 <_printf_float+0x98>
 800eefc:	9b07      	ldr	r3, [sp, #28]
 800eefe:	9a06      	ldr	r2, [sp, #24]
 800ef00:	3301      	adds	r3, #1
 800ef02:	9307      	str	r3, [sp, #28]
 800ef04:	e7b9      	b.n	800ee7a <_printf_float+0x2da>
 800ef06:	9b05      	ldr	r3, [sp, #20]
 800ef08:	465a      	mov	r2, fp
 800ef0a:	4631      	mov	r1, r6
 800ef0c:	4628      	mov	r0, r5
 800ef0e:	47b8      	blx	r7
 800ef10:	3001      	adds	r0, #1
 800ef12:	d1bf      	bne.n	800ee94 <_printf_float+0x2f4>
 800ef14:	e690      	b.n	800ec38 <_printf_float+0x98>
 800ef16:	9a06      	ldr	r2, [sp, #24]
 800ef18:	464b      	mov	r3, r9
 800ef1a:	4442      	add	r2, r8
 800ef1c:	4631      	mov	r1, r6
 800ef1e:	4628      	mov	r0, r5
 800ef20:	47b8      	blx	r7
 800ef22:	3001      	adds	r0, #1
 800ef24:	d1c2      	bne.n	800eeac <_printf_float+0x30c>
 800ef26:	e687      	b.n	800ec38 <_printf_float+0x98>
 800ef28:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ef2c:	f1b9 0f01 	cmp.w	r9, #1
 800ef30:	dc01      	bgt.n	800ef36 <_printf_float+0x396>
 800ef32:	07db      	lsls	r3, r3, #31
 800ef34:	d536      	bpl.n	800efa4 <_printf_float+0x404>
 800ef36:	2301      	movs	r3, #1
 800ef38:	4642      	mov	r2, r8
 800ef3a:	4631      	mov	r1, r6
 800ef3c:	4628      	mov	r0, r5
 800ef3e:	47b8      	blx	r7
 800ef40:	3001      	adds	r0, #1
 800ef42:	f43f ae79 	beq.w	800ec38 <_printf_float+0x98>
 800ef46:	9b05      	ldr	r3, [sp, #20]
 800ef48:	465a      	mov	r2, fp
 800ef4a:	4631      	mov	r1, r6
 800ef4c:	4628      	mov	r0, r5
 800ef4e:	47b8      	blx	r7
 800ef50:	3001      	adds	r0, #1
 800ef52:	f43f ae71 	beq.w	800ec38 <_printf_float+0x98>
 800ef56:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ef5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ef5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef62:	f109 39ff 	add.w	r9, r9, #4294967295
 800ef66:	d018      	beq.n	800ef9a <_printf_float+0x3fa>
 800ef68:	464b      	mov	r3, r9
 800ef6a:	f108 0201 	add.w	r2, r8, #1
 800ef6e:	4631      	mov	r1, r6
 800ef70:	4628      	mov	r0, r5
 800ef72:	47b8      	blx	r7
 800ef74:	3001      	adds	r0, #1
 800ef76:	d10c      	bne.n	800ef92 <_printf_float+0x3f2>
 800ef78:	e65e      	b.n	800ec38 <_printf_float+0x98>
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	465a      	mov	r2, fp
 800ef7e:	4631      	mov	r1, r6
 800ef80:	4628      	mov	r0, r5
 800ef82:	47b8      	blx	r7
 800ef84:	3001      	adds	r0, #1
 800ef86:	f43f ae57 	beq.w	800ec38 <_printf_float+0x98>
 800ef8a:	f108 0801 	add.w	r8, r8, #1
 800ef8e:	45c8      	cmp	r8, r9
 800ef90:	dbf3      	blt.n	800ef7a <_printf_float+0x3da>
 800ef92:	4653      	mov	r3, sl
 800ef94:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ef98:	e6dc      	b.n	800ed54 <_printf_float+0x1b4>
 800ef9a:	f04f 0800 	mov.w	r8, #0
 800ef9e:	f104 0b1a 	add.w	fp, r4, #26
 800efa2:	e7f4      	b.n	800ef8e <_printf_float+0x3ee>
 800efa4:	2301      	movs	r3, #1
 800efa6:	4642      	mov	r2, r8
 800efa8:	e7e1      	b.n	800ef6e <_printf_float+0x3ce>
 800efaa:	2301      	movs	r3, #1
 800efac:	464a      	mov	r2, r9
 800efae:	4631      	mov	r1, r6
 800efb0:	4628      	mov	r0, r5
 800efb2:	47b8      	blx	r7
 800efb4:	3001      	adds	r0, #1
 800efb6:	f43f ae3f 	beq.w	800ec38 <_printf_float+0x98>
 800efba:	f108 0801 	add.w	r8, r8, #1
 800efbe:	68e3      	ldr	r3, [r4, #12]
 800efc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800efc2:	1a5b      	subs	r3, r3, r1
 800efc4:	4543      	cmp	r3, r8
 800efc6:	dcf0      	bgt.n	800efaa <_printf_float+0x40a>
 800efc8:	e6f8      	b.n	800edbc <_printf_float+0x21c>
 800efca:	f04f 0800 	mov.w	r8, #0
 800efce:	f104 0919 	add.w	r9, r4, #25
 800efd2:	e7f4      	b.n	800efbe <_printf_float+0x41e>

0800efd4 <_printf_common>:
 800efd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efd8:	4616      	mov	r6, r2
 800efda:	4698      	mov	r8, r3
 800efdc:	688a      	ldr	r2, [r1, #8]
 800efde:	690b      	ldr	r3, [r1, #16]
 800efe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800efe4:	4293      	cmp	r3, r2
 800efe6:	bfb8      	it	lt
 800efe8:	4613      	movlt	r3, r2
 800efea:	6033      	str	r3, [r6, #0]
 800efec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eff0:	4607      	mov	r7, r0
 800eff2:	460c      	mov	r4, r1
 800eff4:	b10a      	cbz	r2, 800effa <_printf_common+0x26>
 800eff6:	3301      	adds	r3, #1
 800eff8:	6033      	str	r3, [r6, #0]
 800effa:	6823      	ldr	r3, [r4, #0]
 800effc:	0699      	lsls	r1, r3, #26
 800effe:	bf42      	ittt	mi
 800f000:	6833      	ldrmi	r3, [r6, #0]
 800f002:	3302      	addmi	r3, #2
 800f004:	6033      	strmi	r3, [r6, #0]
 800f006:	6825      	ldr	r5, [r4, #0]
 800f008:	f015 0506 	ands.w	r5, r5, #6
 800f00c:	d106      	bne.n	800f01c <_printf_common+0x48>
 800f00e:	f104 0a19 	add.w	sl, r4, #25
 800f012:	68e3      	ldr	r3, [r4, #12]
 800f014:	6832      	ldr	r2, [r6, #0]
 800f016:	1a9b      	subs	r3, r3, r2
 800f018:	42ab      	cmp	r3, r5
 800f01a:	dc26      	bgt.n	800f06a <_printf_common+0x96>
 800f01c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f020:	6822      	ldr	r2, [r4, #0]
 800f022:	3b00      	subs	r3, #0
 800f024:	bf18      	it	ne
 800f026:	2301      	movne	r3, #1
 800f028:	0692      	lsls	r2, r2, #26
 800f02a:	d42b      	bmi.n	800f084 <_printf_common+0xb0>
 800f02c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f030:	4641      	mov	r1, r8
 800f032:	4638      	mov	r0, r7
 800f034:	47c8      	blx	r9
 800f036:	3001      	adds	r0, #1
 800f038:	d01e      	beq.n	800f078 <_printf_common+0xa4>
 800f03a:	6823      	ldr	r3, [r4, #0]
 800f03c:	6922      	ldr	r2, [r4, #16]
 800f03e:	f003 0306 	and.w	r3, r3, #6
 800f042:	2b04      	cmp	r3, #4
 800f044:	bf02      	ittt	eq
 800f046:	68e5      	ldreq	r5, [r4, #12]
 800f048:	6833      	ldreq	r3, [r6, #0]
 800f04a:	1aed      	subeq	r5, r5, r3
 800f04c:	68a3      	ldr	r3, [r4, #8]
 800f04e:	bf0c      	ite	eq
 800f050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f054:	2500      	movne	r5, #0
 800f056:	4293      	cmp	r3, r2
 800f058:	bfc4      	itt	gt
 800f05a:	1a9b      	subgt	r3, r3, r2
 800f05c:	18ed      	addgt	r5, r5, r3
 800f05e:	2600      	movs	r6, #0
 800f060:	341a      	adds	r4, #26
 800f062:	42b5      	cmp	r5, r6
 800f064:	d11a      	bne.n	800f09c <_printf_common+0xc8>
 800f066:	2000      	movs	r0, #0
 800f068:	e008      	b.n	800f07c <_printf_common+0xa8>
 800f06a:	2301      	movs	r3, #1
 800f06c:	4652      	mov	r2, sl
 800f06e:	4641      	mov	r1, r8
 800f070:	4638      	mov	r0, r7
 800f072:	47c8      	blx	r9
 800f074:	3001      	adds	r0, #1
 800f076:	d103      	bne.n	800f080 <_printf_common+0xac>
 800f078:	f04f 30ff 	mov.w	r0, #4294967295
 800f07c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f080:	3501      	adds	r5, #1
 800f082:	e7c6      	b.n	800f012 <_printf_common+0x3e>
 800f084:	18e1      	adds	r1, r4, r3
 800f086:	1c5a      	adds	r2, r3, #1
 800f088:	2030      	movs	r0, #48	@ 0x30
 800f08a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f08e:	4422      	add	r2, r4
 800f090:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f098:	3302      	adds	r3, #2
 800f09a:	e7c7      	b.n	800f02c <_printf_common+0x58>
 800f09c:	2301      	movs	r3, #1
 800f09e:	4622      	mov	r2, r4
 800f0a0:	4641      	mov	r1, r8
 800f0a2:	4638      	mov	r0, r7
 800f0a4:	47c8      	blx	r9
 800f0a6:	3001      	adds	r0, #1
 800f0a8:	d0e6      	beq.n	800f078 <_printf_common+0xa4>
 800f0aa:	3601      	adds	r6, #1
 800f0ac:	e7d9      	b.n	800f062 <_printf_common+0x8e>
	...

0800f0b0 <_printf_i>:
 800f0b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0b4:	7e0f      	ldrb	r7, [r1, #24]
 800f0b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f0b8:	2f78      	cmp	r7, #120	@ 0x78
 800f0ba:	4691      	mov	r9, r2
 800f0bc:	4680      	mov	r8, r0
 800f0be:	460c      	mov	r4, r1
 800f0c0:	469a      	mov	sl, r3
 800f0c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f0c6:	d807      	bhi.n	800f0d8 <_printf_i+0x28>
 800f0c8:	2f62      	cmp	r7, #98	@ 0x62
 800f0ca:	d80a      	bhi.n	800f0e2 <_printf_i+0x32>
 800f0cc:	2f00      	cmp	r7, #0
 800f0ce:	f000 80d2 	beq.w	800f276 <_printf_i+0x1c6>
 800f0d2:	2f58      	cmp	r7, #88	@ 0x58
 800f0d4:	f000 80b9 	beq.w	800f24a <_printf_i+0x19a>
 800f0d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f0dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f0e0:	e03a      	b.n	800f158 <_printf_i+0xa8>
 800f0e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f0e6:	2b15      	cmp	r3, #21
 800f0e8:	d8f6      	bhi.n	800f0d8 <_printf_i+0x28>
 800f0ea:	a101      	add	r1, pc, #4	@ (adr r1, 800f0f0 <_printf_i+0x40>)
 800f0ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f0f0:	0800f149 	.word	0x0800f149
 800f0f4:	0800f15d 	.word	0x0800f15d
 800f0f8:	0800f0d9 	.word	0x0800f0d9
 800f0fc:	0800f0d9 	.word	0x0800f0d9
 800f100:	0800f0d9 	.word	0x0800f0d9
 800f104:	0800f0d9 	.word	0x0800f0d9
 800f108:	0800f15d 	.word	0x0800f15d
 800f10c:	0800f0d9 	.word	0x0800f0d9
 800f110:	0800f0d9 	.word	0x0800f0d9
 800f114:	0800f0d9 	.word	0x0800f0d9
 800f118:	0800f0d9 	.word	0x0800f0d9
 800f11c:	0800f25d 	.word	0x0800f25d
 800f120:	0800f187 	.word	0x0800f187
 800f124:	0800f217 	.word	0x0800f217
 800f128:	0800f0d9 	.word	0x0800f0d9
 800f12c:	0800f0d9 	.word	0x0800f0d9
 800f130:	0800f27f 	.word	0x0800f27f
 800f134:	0800f0d9 	.word	0x0800f0d9
 800f138:	0800f187 	.word	0x0800f187
 800f13c:	0800f0d9 	.word	0x0800f0d9
 800f140:	0800f0d9 	.word	0x0800f0d9
 800f144:	0800f21f 	.word	0x0800f21f
 800f148:	6833      	ldr	r3, [r6, #0]
 800f14a:	1d1a      	adds	r2, r3, #4
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	6032      	str	r2, [r6, #0]
 800f150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f158:	2301      	movs	r3, #1
 800f15a:	e09d      	b.n	800f298 <_printf_i+0x1e8>
 800f15c:	6833      	ldr	r3, [r6, #0]
 800f15e:	6820      	ldr	r0, [r4, #0]
 800f160:	1d19      	adds	r1, r3, #4
 800f162:	6031      	str	r1, [r6, #0]
 800f164:	0606      	lsls	r6, r0, #24
 800f166:	d501      	bpl.n	800f16c <_printf_i+0xbc>
 800f168:	681d      	ldr	r5, [r3, #0]
 800f16a:	e003      	b.n	800f174 <_printf_i+0xc4>
 800f16c:	0645      	lsls	r5, r0, #25
 800f16e:	d5fb      	bpl.n	800f168 <_printf_i+0xb8>
 800f170:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f174:	2d00      	cmp	r5, #0
 800f176:	da03      	bge.n	800f180 <_printf_i+0xd0>
 800f178:	232d      	movs	r3, #45	@ 0x2d
 800f17a:	426d      	negs	r5, r5
 800f17c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f180:	4859      	ldr	r0, [pc, #356]	@ (800f2e8 <_printf_i+0x238>)
 800f182:	230a      	movs	r3, #10
 800f184:	e011      	b.n	800f1aa <_printf_i+0xfa>
 800f186:	6821      	ldr	r1, [r4, #0]
 800f188:	6833      	ldr	r3, [r6, #0]
 800f18a:	0608      	lsls	r0, r1, #24
 800f18c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f190:	d402      	bmi.n	800f198 <_printf_i+0xe8>
 800f192:	0649      	lsls	r1, r1, #25
 800f194:	bf48      	it	mi
 800f196:	b2ad      	uxthmi	r5, r5
 800f198:	2f6f      	cmp	r7, #111	@ 0x6f
 800f19a:	4853      	ldr	r0, [pc, #332]	@ (800f2e8 <_printf_i+0x238>)
 800f19c:	6033      	str	r3, [r6, #0]
 800f19e:	bf14      	ite	ne
 800f1a0:	230a      	movne	r3, #10
 800f1a2:	2308      	moveq	r3, #8
 800f1a4:	2100      	movs	r1, #0
 800f1a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f1aa:	6866      	ldr	r6, [r4, #4]
 800f1ac:	60a6      	str	r6, [r4, #8]
 800f1ae:	2e00      	cmp	r6, #0
 800f1b0:	bfa2      	ittt	ge
 800f1b2:	6821      	ldrge	r1, [r4, #0]
 800f1b4:	f021 0104 	bicge.w	r1, r1, #4
 800f1b8:	6021      	strge	r1, [r4, #0]
 800f1ba:	b90d      	cbnz	r5, 800f1c0 <_printf_i+0x110>
 800f1bc:	2e00      	cmp	r6, #0
 800f1be:	d04b      	beq.n	800f258 <_printf_i+0x1a8>
 800f1c0:	4616      	mov	r6, r2
 800f1c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f1c6:	fb03 5711 	mls	r7, r3, r1, r5
 800f1ca:	5dc7      	ldrb	r7, [r0, r7]
 800f1cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f1d0:	462f      	mov	r7, r5
 800f1d2:	42bb      	cmp	r3, r7
 800f1d4:	460d      	mov	r5, r1
 800f1d6:	d9f4      	bls.n	800f1c2 <_printf_i+0x112>
 800f1d8:	2b08      	cmp	r3, #8
 800f1da:	d10b      	bne.n	800f1f4 <_printf_i+0x144>
 800f1dc:	6823      	ldr	r3, [r4, #0]
 800f1de:	07df      	lsls	r7, r3, #31
 800f1e0:	d508      	bpl.n	800f1f4 <_printf_i+0x144>
 800f1e2:	6923      	ldr	r3, [r4, #16]
 800f1e4:	6861      	ldr	r1, [r4, #4]
 800f1e6:	4299      	cmp	r1, r3
 800f1e8:	bfde      	ittt	le
 800f1ea:	2330      	movle	r3, #48	@ 0x30
 800f1ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f1f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f1f4:	1b92      	subs	r2, r2, r6
 800f1f6:	6122      	str	r2, [r4, #16]
 800f1f8:	f8cd a000 	str.w	sl, [sp]
 800f1fc:	464b      	mov	r3, r9
 800f1fe:	aa03      	add	r2, sp, #12
 800f200:	4621      	mov	r1, r4
 800f202:	4640      	mov	r0, r8
 800f204:	f7ff fee6 	bl	800efd4 <_printf_common>
 800f208:	3001      	adds	r0, #1
 800f20a:	d14a      	bne.n	800f2a2 <_printf_i+0x1f2>
 800f20c:	f04f 30ff 	mov.w	r0, #4294967295
 800f210:	b004      	add	sp, #16
 800f212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f216:	6823      	ldr	r3, [r4, #0]
 800f218:	f043 0320 	orr.w	r3, r3, #32
 800f21c:	6023      	str	r3, [r4, #0]
 800f21e:	4833      	ldr	r0, [pc, #204]	@ (800f2ec <_printf_i+0x23c>)
 800f220:	2778      	movs	r7, #120	@ 0x78
 800f222:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f226:	6823      	ldr	r3, [r4, #0]
 800f228:	6831      	ldr	r1, [r6, #0]
 800f22a:	061f      	lsls	r7, r3, #24
 800f22c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f230:	d402      	bmi.n	800f238 <_printf_i+0x188>
 800f232:	065f      	lsls	r7, r3, #25
 800f234:	bf48      	it	mi
 800f236:	b2ad      	uxthmi	r5, r5
 800f238:	6031      	str	r1, [r6, #0]
 800f23a:	07d9      	lsls	r1, r3, #31
 800f23c:	bf44      	itt	mi
 800f23e:	f043 0320 	orrmi.w	r3, r3, #32
 800f242:	6023      	strmi	r3, [r4, #0]
 800f244:	b11d      	cbz	r5, 800f24e <_printf_i+0x19e>
 800f246:	2310      	movs	r3, #16
 800f248:	e7ac      	b.n	800f1a4 <_printf_i+0xf4>
 800f24a:	4827      	ldr	r0, [pc, #156]	@ (800f2e8 <_printf_i+0x238>)
 800f24c:	e7e9      	b.n	800f222 <_printf_i+0x172>
 800f24e:	6823      	ldr	r3, [r4, #0]
 800f250:	f023 0320 	bic.w	r3, r3, #32
 800f254:	6023      	str	r3, [r4, #0]
 800f256:	e7f6      	b.n	800f246 <_printf_i+0x196>
 800f258:	4616      	mov	r6, r2
 800f25a:	e7bd      	b.n	800f1d8 <_printf_i+0x128>
 800f25c:	6833      	ldr	r3, [r6, #0]
 800f25e:	6825      	ldr	r5, [r4, #0]
 800f260:	6961      	ldr	r1, [r4, #20]
 800f262:	1d18      	adds	r0, r3, #4
 800f264:	6030      	str	r0, [r6, #0]
 800f266:	062e      	lsls	r6, r5, #24
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	d501      	bpl.n	800f270 <_printf_i+0x1c0>
 800f26c:	6019      	str	r1, [r3, #0]
 800f26e:	e002      	b.n	800f276 <_printf_i+0x1c6>
 800f270:	0668      	lsls	r0, r5, #25
 800f272:	d5fb      	bpl.n	800f26c <_printf_i+0x1bc>
 800f274:	8019      	strh	r1, [r3, #0]
 800f276:	2300      	movs	r3, #0
 800f278:	6123      	str	r3, [r4, #16]
 800f27a:	4616      	mov	r6, r2
 800f27c:	e7bc      	b.n	800f1f8 <_printf_i+0x148>
 800f27e:	6833      	ldr	r3, [r6, #0]
 800f280:	1d1a      	adds	r2, r3, #4
 800f282:	6032      	str	r2, [r6, #0]
 800f284:	681e      	ldr	r6, [r3, #0]
 800f286:	6862      	ldr	r2, [r4, #4]
 800f288:	2100      	movs	r1, #0
 800f28a:	4630      	mov	r0, r6
 800f28c:	f7f1 f840 	bl	8000310 <memchr>
 800f290:	b108      	cbz	r0, 800f296 <_printf_i+0x1e6>
 800f292:	1b80      	subs	r0, r0, r6
 800f294:	6060      	str	r0, [r4, #4]
 800f296:	6863      	ldr	r3, [r4, #4]
 800f298:	6123      	str	r3, [r4, #16]
 800f29a:	2300      	movs	r3, #0
 800f29c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2a0:	e7aa      	b.n	800f1f8 <_printf_i+0x148>
 800f2a2:	6923      	ldr	r3, [r4, #16]
 800f2a4:	4632      	mov	r2, r6
 800f2a6:	4649      	mov	r1, r9
 800f2a8:	4640      	mov	r0, r8
 800f2aa:	47d0      	blx	sl
 800f2ac:	3001      	adds	r0, #1
 800f2ae:	d0ad      	beq.n	800f20c <_printf_i+0x15c>
 800f2b0:	6823      	ldr	r3, [r4, #0]
 800f2b2:	079b      	lsls	r3, r3, #30
 800f2b4:	d413      	bmi.n	800f2de <_printf_i+0x22e>
 800f2b6:	68e0      	ldr	r0, [r4, #12]
 800f2b8:	9b03      	ldr	r3, [sp, #12]
 800f2ba:	4298      	cmp	r0, r3
 800f2bc:	bfb8      	it	lt
 800f2be:	4618      	movlt	r0, r3
 800f2c0:	e7a6      	b.n	800f210 <_printf_i+0x160>
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	4632      	mov	r2, r6
 800f2c6:	4649      	mov	r1, r9
 800f2c8:	4640      	mov	r0, r8
 800f2ca:	47d0      	blx	sl
 800f2cc:	3001      	adds	r0, #1
 800f2ce:	d09d      	beq.n	800f20c <_printf_i+0x15c>
 800f2d0:	3501      	adds	r5, #1
 800f2d2:	68e3      	ldr	r3, [r4, #12]
 800f2d4:	9903      	ldr	r1, [sp, #12]
 800f2d6:	1a5b      	subs	r3, r3, r1
 800f2d8:	42ab      	cmp	r3, r5
 800f2da:	dcf2      	bgt.n	800f2c2 <_printf_i+0x212>
 800f2dc:	e7eb      	b.n	800f2b6 <_printf_i+0x206>
 800f2de:	2500      	movs	r5, #0
 800f2e0:	f104 0619 	add.w	r6, r4, #25
 800f2e4:	e7f5      	b.n	800f2d2 <_printf_i+0x222>
 800f2e6:	bf00      	nop
 800f2e8:	08012cc8 	.word	0x08012cc8
 800f2ec:	08012cd9 	.word	0x08012cd9

0800f2f0 <_scanf_float>:
 800f2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f4:	b087      	sub	sp, #28
 800f2f6:	4617      	mov	r7, r2
 800f2f8:	9303      	str	r3, [sp, #12]
 800f2fa:	688b      	ldr	r3, [r1, #8]
 800f2fc:	1e5a      	subs	r2, r3, #1
 800f2fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f302:	bf81      	itttt	hi
 800f304:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f308:	eb03 0b05 	addhi.w	fp, r3, r5
 800f30c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f310:	608b      	strhi	r3, [r1, #8]
 800f312:	680b      	ldr	r3, [r1, #0]
 800f314:	460a      	mov	r2, r1
 800f316:	f04f 0500 	mov.w	r5, #0
 800f31a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f31e:	f842 3b1c 	str.w	r3, [r2], #28
 800f322:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f326:	4680      	mov	r8, r0
 800f328:	460c      	mov	r4, r1
 800f32a:	bf98      	it	ls
 800f32c:	f04f 0b00 	movls.w	fp, #0
 800f330:	9201      	str	r2, [sp, #4]
 800f332:	4616      	mov	r6, r2
 800f334:	46aa      	mov	sl, r5
 800f336:	46a9      	mov	r9, r5
 800f338:	9502      	str	r5, [sp, #8]
 800f33a:	68a2      	ldr	r2, [r4, #8]
 800f33c:	b152      	cbz	r2, 800f354 <_scanf_float+0x64>
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	2b4e      	cmp	r3, #78	@ 0x4e
 800f344:	d864      	bhi.n	800f410 <_scanf_float+0x120>
 800f346:	2b40      	cmp	r3, #64	@ 0x40
 800f348:	d83c      	bhi.n	800f3c4 <_scanf_float+0xd4>
 800f34a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f34e:	b2c8      	uxtb	r0, r1
 800f350:	280e      	cmp	r0, #14
 800f352:	d93a      	bls.n	800f3ca <_scanf_float+0xda>
 800f354:	f1b9 0f00 	cmp.w	r9, #0
 800f358:	d003      	beq.n	800f362 <_scanf_float+0x72>
 800f35a:	6823      	ldr	r3, [r4, #0]
 800f35c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f360:	6023      	str	r3, [r4, #0]
 800f362:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f366:	f1ba 0f01 	cmp.w	sl, #1
 800f36a:	f200 8117 	bhi.w	800f59c <_scanf_float+0x2ac>
 800f36e:	9b01      	ldr	r3, [sp, #4]
 800f370:	429e      	cmp	r6, r3
 800f372:	f200 8108 	bhi.w	800f586 <_scanf_float+0x296>
 800f376:	2001      	movs	r0, #1
 800f378:	b007      	add	sp, #28
 800f37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f37e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f382:	2a0d      	cmp	r2, #13
 800f384:	d8e6      	bhi.n	800f354 <_scanf_float+0x64>
 800f386:	a101      	add	r1, pc, #4	@ (adr r1, 800f38c <_scanf_float+0x9c>)
 800f388:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f38c:	0800f4d3 	.word	0x0800f4d3
 800f390:	0800f355 	.word	0x0800f355
 800f394:	0800f355 	.word	0x0800f355
 800f398:	0800f355 	.word	0x0800f355
 800f39c:	0800f533 	.word	0x0800f533
 800f3a0:	0800f50b 	.word	0x0800f50b
 800f3a4:	0800f355 	.word	0x0800f355
 800f3a8:	0800f355 	.word	0x0800f355
 800f3ac:	0800f4e1 	.word	0x0800f4e1
 800f3b0:	0800f355 	.word	0x0800f355
 800f3b4:	0800f355 	.word	0x0800f355
 800f3b8:	0800f355 	.word	0x0800f355
 800f3bc:	0800f355 	.word	0x0800f355
 800f3c0:	0800f499 	.word	0x0800f499
 800f3c4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f3c8:	e7db      	b.n	800f382 <_scanf_float+0x92>
 800f3ca:	290e      	cmp	r1, #14
 800f3cc:	d8c2      	bhi.n	800f354 <_scanf_float+0x64>
 800f3ce:	a001      	add	r0, pc, #4	@ (adr r0, 800f3d4 <_scanf_float+0xe4>)
 800f3d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f3d4:	0800f489 	.word	0x0800f489
 800f3d8:	0800f355 	.word	0x0800f355
 800f3dc:	0800f489 	.word	0x0800f489
 800f3e0:	0800f51f 	.word	0x0800f51f
 800f3e4:	0800f355 	.word	0x0800f355
 800f3e8:	0800f431 	.word	0x0800f431
 800f3ec:	0800f46f 	.word	0x0800f46f
 800f3f0:	0800f46f 	.word	0x0800f46f
 800f3f4:	0800f46f 	.word	0x0800f46f
 800f3f8:	0800f46f 	.word	0x0800f46f
 800f3fc:	0800f46f 	.word	0x0800f46f
 800f400:	0800f46f 	.word	0x0800f46f
 800f404:	0800f46f 	.word	0x0800f46f
 800f408:	0800f46f 	.word	0x0800f46f
 800f40c:	0800f46f 	.word	0x0800f46f
 800f410:	2b6e      	cmp	r3, #110	@ 0x6e
 800f412:	d809      	bhi.n	800f428 <_scanf_float+0x138>
 800f414:	2b60      	cmp	r3, #96	@ 0x60
 800f416:	d8b2      	bhi.n	800f37e <_scanf_float+0x8e>
 800f418:	2b54      	cmp	r3, #84	@ 0x54
 800f41a:	d07b      	beq.n	800f514 <_scanf_float+0x224>
 800f41c:	2b59      	cmp	r3, #89	@ 0x59
 800f41e:	d199      	bne.n	800f354 <_scanf_float+0x64>
 800f420:	2d07      	cmp	r5, #7
 800f422:	d197      	bne.n	800f354 <_scanf_float+0x64>
 800f424:	2508      	movs	r5, #8
 800f426:	e02c      	b.n	800f482 <_scanf_float+0x192>
 800f428:	2b74      	cmp	r3, #116	@ 0x74
 800f42a:	d073      	beq.n	800f514 <_scanf_float+0x224>
 800f42c:	2b79      	cmp	r3, #121	@ 0x79
 800f42e:	e7f6      	b.n	800f41e <_scanf_float+0x12e>
 800f430:	6821      	ldr	r1, [r4, #0]
 800f432:	05c8      	lsls	r0, r1, #23
 800f434:	d51b      	bpl.n	800f46e <_scanf_float+0x17e>
 800f436:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f43a:	6021      	str	r1, [r4, #0]
 800f43c:	f109 0901 	add.w	r9, r9, #1
 800f440:	f1bb 0f00 	cmp.w	fp, #0
 800f444:	d003      	beq.n	800f44e <_scanf_float+0x15e>
 800f446:	3201      	adds	r2, #1
 800f448:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f44c:	60a2      	str	r2, [r4, #8]
 800f44e:	68a3      	ldr	r3, [r4, #8]
 800f450:	3b01      	subs	r3, #1
 800f452:	60a3      	str	r3, [r4, #8]
 800f454:	6923      	ldr	r3, [r4, #16]
 800f456:	3301      	adds	r3, #1
 800f458:	6123      	str	r3, [r4, #16]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	3b01      	subs	r3, #1
 800f45e:	2b00      	cmp	r3, #0
 800f460:	607b      	str	r3, [r7, #4]
 800f462:	f340 8087 	ble.w	800f574 <_scanf_float+0x284>
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	3301      	adds	r3, #1
 800f46a:	603b      	str	r3, [r7, #0]
 800f46c:	e765      	b.n	800f33a <_scanf_float+0x4a>
 800f46e:	eb1a 0105 	adds.w	r1, sl, r5
 800f472:	f47f af6f 	bne.w	800f354 <_scanf_float+0x64>
 800f476:	6822      	ldr	r2, [r4, #0]
 800f478:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f47c:	6022      	str	r2, [r4, #0]
 800f47e:	460d      	mov	r5, r1
 800f480:	468a      	mov	sl, r1
 800f482:	f806 3b01 	strb.w	r3, [r6], #1
 800f486:	e7e2      	b.n	800f44e <_scanf_float+0x15e>
 800f488:	6822      	ldr	r2, [r4, #0]
 800f48a:	0610      	lsls	r0, r2, #24
 800f48c:	f57f af62 	bpl.w	800f354 <_scanf_float+0x64>
 800f490:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f494:	6022      	str	r2, [r4, #0]
 800f496:	e7f4      	b.n	800f482 <_scanf_float+0x192>
 800f498:	f1ba 0f00 	cmp.w	sl, #0
 800f49c:	d10e      	bne.n	800f4bc <_scanf_float+0x1cc>
 800f49e:	f1b9 0f00 	cmp.w	r9, #0
 800f4a2:	d10e      	bne.n	800f4c2 <_scanf_float+0x1d2>
 800f4a4:	6822      	ldr	r2, [r4, #0]
 800f4a6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f4aa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f4ae:	d108      	bne.n	800f4c2 <_scanf_float+0x1d2>
 800f4b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f4b4:	6022      	str	r2, [r4, #0]
 800f4b6:	f04f 0a01 	mov.w	sl, #1
 800f4ba:	e7e2      	b.n	800f482 <_scanf_float+0x192>
 800f4bc:	f1ba 0f02 	cmp.w	sl, #2
 800f4c0:	d055      	beq.n	800f56e <_scanf_float+0x27e>
 800f4c2:	2d01      	cmp	r5, #1
 800f4c4:	d002      	beq.n	800f4cc <_scanf_float+0x1dc>
 800f4c6:	2d04      	cmp	r5, #4
 800f4c8:	f47f af44 	bne.w	800f354 <_scanf_float+0x64>
 800f4cc:	3501      	adds	r5, #1
 800f4ce:	b2ed      	uxtb	r5, r5
 800f4d0:	e7d7      	b.n	800f482 <_scanf_float+0x192>
 800f4d2:	f1ba 0f01 	cmp.w	sl, #1
 800f4d6:	f47f af3d 	bne.w	800f354 <_scanf_float+0x64>
 800f4da:	f04f 0a02 	mov.w	sl, #2
 800f4de:	e7d0      	b.n	800f482 <_scanf_float+0x192>
 800f4e0:	b97d      	cbnz	r5, 800f502 <_scanf_float+0x212>
 800f4e2:	f1b9 0f00 	cmp.w	r9, #0
 800f4e6:	f47f af38 	bne.w	800f35a <_scanf_float+0x6a>
 800f4ea:	6822      	ldr	r2, [r4, #0]
 800f4ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f4f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f4f4:	f040 8101 	bne.w	800f6fa <_scanf_float+0x40a>
 800f4f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f4fc:	6022      	str	r2, [r4, #0]
 800f4fe:	2501      	movs	r5, #1
 800f500:	e7bf      	b.n	800f482 <_scanf_float+0x192>
 800f502:	2d03      	cmp	r5, #3
 800f504:	d0e2      	beq.n	800f4cc <_scanf_float+0x1dc>
 800f506:	2d05      	cmp	r5, #5
 800f508:	e7de      	b.n	800f4c8 <_scanf_float+0x1d8>
 800f50a:	2d02      	cmp	r5, #2
 800f50c:	f47f af22 	bne.w	800f354 <_scanf_float+0x64>
 800f510:	2503      	movs	r5, #3
 800f512:	e7b6      	b.n	800f482 <_scanf_float+0x192>
 800f514:	2d06      	cmp	r5, #6
 800f516:	f47f af1d 	bne.w	800f354 <_scanf_float+0x64>
 800f51a:	2507      	movs	r5, #7
 800f51c:	e7b1      	b.n	800f482 <_scanf_float+0x192>
 800f51e:	6822      	ldr	r2, [r4, #0]
 800f520:	0591      	lsls	r1, r2, #22
 800f522:	f57f af17 	bpl.w	800f354 <_scanf_float+0x64>
 800f526:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f52a:	6022      	str	r2, [r4, #0]
 800f52c:	f8cd 9008 	str.w	r9, [sp, #8]
 800f530:	e7a7      	b.n	800f482 <_scanf_float+0x192>
 800f532:	6822      	ldr	r2, [r4, #0]
 800f534:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f538:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f53c:	d006      	beq.n	800f54c <_scanf_float+0x25c>
 800f53e:	0550      	lsls	r0, r2, #21
 800f540:	f57f af08 	bpl.w	800f354 <_scanf_float+0x64>
 800f544:	f1b9 0f00 	cmp.w	r9, #0
 800f548:	f000 80d7 	beq.w	800f6fa <_scanf_float+0x40a>
 800f54c:	0591      	lsls	r1, r2, #22
 800f54e:	bf58      	it	pl
 800f550:	9902      	ldrpl	r1, [sp, #8]
 800f552:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f556:	bf58      	it	pl
 800f558:	eba9 0101 	subpl.w	r1, r9, r1
 800f55c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f560:	bf58      	it	pl
 800f562:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f566:	6022      	str	r2, [r4, #0]
 800f568:	f04f 0900 	mov.w	r9, #0
 800f56c:	e789      	b.n	800f482 <_scanf_float+0x192>
 800f56e:	f04f 0a03 	mov.w	sl, #3
 800f572:	e786      	b.n	800f482 <_scanf_float+0x192>
 800f574:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f578:	4639      	mov	r1, r7
 800f57a:	4640      	mov	r0, r8
 800f57c:	4798      	blx	r3
 800f57e:	2800      	cmp	r0, #0
 800f580:	f43f aedb 	beq.w	800f33a <_scanf_float+0x4a>
 800f584:	e6e6      	b.n	800f354 <_scanf_float+0x64>
 800f586:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f58a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f58e:	463a      	mov	r2, r7
 800f590:	4640      	mov	r0, r8
 800f592:	4798      	blx	r3
 800f594:	6923      	ldr	r3, [r4, #16]
 800f596:	3b01      	subs	r3, #1
 800f598:	6123      	str	r3, [r4, #16]
 800f59a:	e6e8      	b.n	800f36e <_scanf_float+0x7e>
 800f59c:	1e6b      	subs	r3, r5, #1
 800f59e:	2b06      	cmp	r3, #6
 800f5a0:	d824      	bhi.n	800f5ec <_scanf_float+0x2fc>
 800f5a2:	2d02      	cmp	r5, #2
 800f5a4:	d836      	bhi.n	800f614 <_scanf_float+0x324>
 800f5a6:	9b01      	ldr	r3, [sp, #4]
 800f5a8:	429e      	cmp	r6, r3
 800f5aa:	f67f aee4 	bls.w	800f376 <_scanf_float+0x86>
 800f5ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f5b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f5b6:	463a      	mov	r2, r7
 800f5b8:	4640      	mov	r0, r8
 800f5ba:	4798      	blx	r3
 800f5bc:	6923      	ldr	r3, [r4, #16]
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	6123      	str	r3, [r4, #16]
 800f5c2:	e7f0      	b.n	800f5a6 <_scanf_float+0x2b6>
 800f5c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f5c8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f5cc:	463a      	mov	r2, r7
 800f5ce:	4640      	mov	r0, r8
 800f5d0:	4798      	blx	r3
 800f5d2:	6923      	ldr	r3, [r4, #16]
 800f5d4:	3b01      	subs	r3, #1
 800f5d6:	6123      	str	r3, [r4, #16]
 800f5d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5dc:	fa5f fa8a 	uxtb.w	sl, sl
 800f5e0:	f1ba 0f02 	cmp.w	sl, #2
 800f5e4:	d1ee      	bne.n	800f5c4 <_scanf_float+0x2d4>
 800f5e6:	3d03      	subs	r5, #3
 800f5e8:	b2ed      	uxtb	r5, r5
 800f5ea:	1b76      	subs	r6, r6, r5
 800f5ec:	6823      	ldr	r3, [r4, #0]
 800f5ee:	05da      	lsls	r2, r3, #23
 800f5f0:	d530      	bpl.n	800f654 <_scanf_float+0x364>
 800f5f2:	055b      	lsls	r3, r3, #21
 800f5f4:	d511      	bpl.n	800f61a <_scanf_float+0x32a>
 800f5f6:	9b01      	ldr	r3, [sp, #4]
 800f5f8:	429e      	cmp	r6, r3
 800f5fa:	f67f aebc 	bls.w	800f376 <_scanf_float+0x86>
 800f5fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f602:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f606:	463a      	mov	r2, r7
 800f608:	4640      	mov	r0, r8
 800f60a:	4798      	blx	r3
 800f60c:	6923      	ldr	r3, [r4, #16]
 800f60e:	3b01      	subs	r3, #1
 800f610:	6123      	str	r3, [r4, #16]
 800f612:	e7f0      	b.n	800f5f6 <_scanf_float+0x306>
 800f614:	46aa      	mov	sl, r5
 800f616:	46b3      	mov	fp, r6
 800f618:	e7de      	b.n	800f5d8 <_scanf_float+0x2e8>
 800f61a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f61e:	6923      	ldr	r3, [r4, #16]
 800f620:	2965      	cmp	r1, #101	@ 0x65
 800f622:	f103 33ff 	add.w	r3, r3, #4294967295
 800f626:	f106 35ff 	add.w	r5, r6, #4294967295
 800f62a:	6123      	str	r3, [r4, #16]
 800f62c:	d00c      	beq.n	800f648 <_scanf_float+0x358>
 800f62e:	2945      	cmp	r1, #69	@ 0x45
 800f630:	d00a      	beq.n	800f648 <_scanf_float+0x358>
 800f632:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f636:	463a      	mov	r2, r7
 800f638:	4640      	mov	r0, r8
 800f63a:	4798      	blx	r3
 800f63c:	6923      	ldr	r3, [r4, #16]
 800f63e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f642:	3b01      	subs	r3, #1
 800f644:	1eb5      	subs	r5, r6, #2
 800f646:	6123      	str	r3, [r4, #16]
 800f648:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f64c:	463a      	mov	r2, r7
 800f64e:	4640      	mov	r0, r8
 800f650:	4798      	blx	r3
 800f652:	462e      	mov	r6, r5
 800f654:	6822      	ldr	r2, [r4, #0]
 800f656:	f012 0210 	ands.w	r2, r2, #16
 800f65a:	d001      	beq.n	800f660 <_scanf_float+0x370>
 800f65c:	2000      	movs	r0, #0
 800f65e:	e68b      	b.n	800f378 <_scanf_float+0x88>
 800f660:	7032      	strb	r2, [r6, #0]
 800f662:	6823      	ldr	r3, [r4, #0]
 800f664:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f66c:	d11a      	bne.n	800f6a4 <_scanf_float+0x3b4>
 800f66e:	9b02      	ldr	r3, [sp, #8]
 800f670:	454b      	cmp	r3, r9
 800f672:	eba3 0209 	sub.w	r2, r3, r9
 800f676:	d121      	bne.n	800f6bc <_scanf_float+0x3cc>
 800f678:	9901      	ldr	r1, [sp, #4]
 800f67a:	2200      	movs	r2, #0
 800f67c:	4640      	mov	r0, r8
 800f67e:	f7ff f9f9 	bl	800ea74 <_strtod_r>
 800f682:	9b03      	ldr	r3, [sp, #12]
 800f684:	6821      	ldr	r1, [r4, #0]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f011 0f02 	tst.w	r1, #2
 800f68c:	f103 0204 	add.w	r2, r3, #4
 800f690:	d01f      	beq.n	800f6d2 <_scanf_float+0x3e2>
 800f692:	9903      	ldr	r1, [sp, #12]
 800f694:	600a      	str	r2, [r1, #0]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	ed83 0b00 	vstr	d0, [r3]
 800f69c:	68e3      	ldr	r3, [r4, #12]
 800f69e:	3301      	adds	r3, #1
 800f6a0:	60e3      	str	r3, [r4, #12]
 800f6a2:	e7db      	b.n	800f65c <_scanf_float+0x36c>
 800f6a4:	9b04      	ldr	r3, [sp, #16]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d0e6      	beq.n	800f678 <_scanf_float+0x388>
 800f6aa:	9905      	ldr	r1, [sp, #20]
 800f6ac:	230a      	movs	r3, #10
 800f6ae:	3101      	adds	r1, #1
 800f6b0:	4640      	mov	r0, r8
 800f6b2:	f002 f8e7 	bl	8011884 <_strtol_r>
 800f6b6:	9b04      	ldr	r3, [sp, #16]
 800f6b8:	9e05      	ldr	r6, [sp, #20]
 800f6ba:	1ac2      	subs	r2, r0, r3
 800f6bc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f6c0:	429e      	cmp	r6, r3
 800f6c2:	bf28      	it	cs
 800f6c4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f6c8:	490d      	ldr	r1, [pc, #52]	@ (800f700 <_scanf_float+0x410>)
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	f000 f8de 	bl	800f88c <siprintf>
 800f6d0:	e7d2      	b.n	800f678 <_scanf_float+0x388>
 800f6d2:	f011 0f04 	tst.w	r1, #4
 800f6d6:	9903      	ldr	r1, [sp, #12]
 800f6d8:	600a      	str	r2, [r1, #0]
 800f6da:	d1dc      	bne.n	800f696 <_scanf_float+0x3a6>
 800f6dc:	eeb4 0b40 	vcmp.f64	d0, d0
 800f6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6e4:	681d      	ldr	r5, [r3, #0]
 800f6e6:	d705      	bvc.n	800f6f4 <_scanf_float+0x404>
 800f6e8:	4806      	ldr	r0, [pc, #24]	@ (800f704 <_scanf_float+0x414>)
 800f6ea:	f000 fa25 	bl	800fb38 <nanf>
 800f6ee:	ed85 0a00 	vstr	s0, [r5]
 800f6f2:	e7d3      	b.n	800f69c <_scanf_float+0x3ac>
 800f6f4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f6f8:	e7f9      	b.n	800f6ee <_scanf_float+0x3fe>
 800f6fa:	f04f 0900 	mov.w	r9, #0
 800f6fe:	e630      	b.n	800f362 <_scanf_float+0x72>
 800f700:	08012cea 	.word	0x08012cea
 800f704:	080130a8 	.word	0x080130a8

0800f708 <std>:
 800f708:	2300      	movs	r3, #0
 800f70a:	b510      	push	{r4, lr}
 800f70c:	4604      	mov	r4, r0
 800f70e:	e9c0 3300 	strd	r3, r3, [r0]
 800f712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f716:	6083      	str	r3, [r0, #8]
 800f718:	8181      	strh	r1, [r0, #12]
 800f71a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f71c:	81c2      	strh	r2, [r0, #14]
 800f71e:	6183      	str	r3, [r0, #24]
 800f720:	4619      	mov	r1, r3
 800f722:	2208      	movs	r2, #8
 800f724:	305c      	adds	r0, #92	@ 0x5c
 800f726:	f000 f940 	bl	800f9aa <memset>
 800f72a:	4b0d      	ldr	r3, [pc, #52]	@ (800f760 <std+0x58>)
 800f72c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f72e:	4b0d      	ldr	r3, [pc, #52]	@ (800f764 <std+0x5c>)
 800f730:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f732:	4b0d      	ldr	r3, [pc, #52]	@ (800f768 <std+0x60>)
 800f734:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f736:	4b0d      	ldr	r3, [pc, #52]	@ (800f76c <std+0x64>)
 800f738:	6323      	str	r3, [r4, #48]	@ 0x30
 800f73a:	4b0d      	ldr	r3, [pc, #52]	@ (800f770 <std+0x68>)
 800f73c:	6224      	str	r4, [r4, #32]
 800f73e:	429c      	cmp	r4, r3
 800f740:	d006      	beq.n	800f750 <std+0x48>
 800f742:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f746:	4294      	cmp	r4, r2
 800f748:	d002      	beq.n	800f750 <std+0x48>
 800f74a:	33d0      	adds	r3, #208	@ 0xd0
 800f74c:	429c      	cmp	r4, r3
 800f74e:	d105      	bne.n	800f75c <std+0x54>
 800f750:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f758:	f000 b9d2 	b.w	800fb00 <__retarget_lock_init_recursive>
 800f75c:	bd10      	pop	{r4, pc}
 800f75e:	bf00      	nop
 800f760:	0800f921 	.word	0x0800f921
 800f764:	0800f947 	.word	0x0800f947
 800f768:	0800f97f 	.word	0x0800f97f
 800f76c:	0800f9a3 	.word	0x0800f9a3
 800f770:	24000d20 	.word	0x24000d20

0800f774 <stdio_exit_handler>:
 800f774:	4a02      	ldr	r2, [pc, #8]	@ (800f780 <stdio_exit_handler+0xc>)
 800f776:	4903      	ldr	r1, [pc, #12]	@ (800f784 <stdio_exit_handler+0x10>)
 800f778:	4803      	ldr	r0, [pc, #12]	@ (800f788 <stdio_exit_handler+0x14>)
 800f77a:	f000 b869 	b.w	800f850 <_fwalk_sglue>
 800f77e:	bf00      	nop
 800f780:	2400004c 	.word	0x2400004c
 800f784:	0801228d 	.word	0x0801228d
 800f788:	240001c8 	.word	0x240001c8

0800f78c <cleanup_stdio>:
 800f78c:	6841      	ldr	r1, [r0, #4]
 800f78e:	4b0c      	ldr	r3, [pc, #48]	@ (800f7c0 <cleanup_stdio+0x34>)
 800f790:	4299      	cmp	r1, r3
 800f792:	b510      	push	{r4, lr}
 800f794:	4604      	mov	r4, r0
 800f796:	d001      	beq.n	800f79c <cleanup_stdio+0x10>
 800f798:	f002 fd78 	bl	801228c <_fflush_r>
 800f79c:	68a1      	ldr	r1, [r4, #8]
 800f79e:	4b09      	ldr	r3, [pc, #36]	@ (800f7c4 <cleanup_stdio+0x38>)
 800f7a0:	4299      	cmp	r1, r3
 800f7a2:	d002      	beq.n	800f7aa <cleanup_stdio+0x1e>
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	f002 fd71 	bl	801228c <_fflush_r>
 800f7aa:	68e1      	ldr	r1, [r4, #12]
 800f7ac:	4b06      	ldr	r3, [pc, #24]	@ (800f7c8 <cleanup_stdio+0x3c>)
 800f7ae:	4299      	cmp	r1, r3
 800f7b0:	d004      	beq.n	800f7bc <cleanup_stdio+0x30>
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7b8:	f002 bd68 	b.w	801228c <_fflush_r>
 800f7bc:	bd10      	pop	{r4, pc}
 800f7be:	bf00      	nop
 800f7c0:	24000d20 	.word	0x24000d20
 800f7c4:	24000d88 	.word	0x24000d88
 800f7c8:	24000df0 	.word	0x24000df0

0800f7cc <global_stdio_init.part.0>:
 800f7cc:	b510      	push	{r4, lr}
 800f7ce:	4b0b      	ldr	r3, [pc, #44]	@ (800f7fc <global_stdio_init.part.0+0x30>)
 800f7d0:	4c0b      	ldr	r4, [pc, #44]	@ (800f800 <global_stdio_init.part.0+0x34>)
 800f7d2:	4a0c      	ldr	r2, [pc, #48]	@ (800f804 <global_stdio_init.part.0+0x38>)
 800f7d4:	601a      	str	r2, [r3, #0]
 800f7d6:	4620      	mov	r0, r4
 800f7d8:	2200      	movs	r2, #0
 800f7da:	2104      	movs	r1, #4
 800f7dc:	f7ff ff94 	bl	800f708 <std>
 800f7e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	2109      	movs	r1, #9
 800f7e8:	f7ff ff8e 	bl	800f708 <std>
 800f7ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f7f0:	2202      	movs	r2, #2
 800f7f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7f6:	2112      	movs	r1, #18
 800f7f8:	f7ff bf86 	b.w	800f708 <std>
 800f7fc:	24000e58 	.word	0x24000e58
 800f800:	24000d20 	.word	0x24000d20
 800f804:	0800f775 	.word	0x0800f775

0800f808 <__sfp_lock_acquire>:
 800f808:	4801      	ldr	r0, [pc, #4]	@ (800f810 <__sfp_lock_acquire+0x8>)
 800f80a:	f000 b97a 	b.w	800fb02 <__retarget_lock_acquire_recursive>
 800f80e:	bf00      	nop
 800f810:	24000e61 	.word	0x24000e61

0800f814 <__sfp_lock_release>:
 800f814:	4801      	ldr	r0, [pc, #4]	@ (800f81c <__sfp_lock_release+0x8>)
 800f816:	f000 b975 	b.w	800fb04 <__retarget_lock_release_recursive>
 800f81a:	bf00      	nop
 800f81c:	24000e61 	.word	0x24000e61

0800f820 <__sinit>:
 800f820:	b510      	push	{r4, lr}
 800f822:	4604      	mov	r4, r0
 800f824:	f7ff fff0 	bl	800f808 <__sfp_lock_acquire>
 800f828:	6a23      	ldr	r3, [r4, #32]
 800f82a:	b11b      	cbz	r3, 800f834 <__sinit+0x14>
 800f82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f830:	f7ff bff0 	b.w	800f814 <__sfp_lock_release>
 800f834:	4b04      	ldr	r3, [pc, #16]	@ (800f848 <__sinit+0x28>)
 800f836:	6223      	str	r3, [r4, #32]
 800f838:	4b04      	ldr	r3, [pc, #16]	@ (800f84c <__sinit+0x2c>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d1f5      	bne.n	800f82c <__sinit+0xc>
 800f840:	f7ff ffc4 	bl	800f7cc <global_stdio_init.part.0>
 800f844:	e7f2      	b.n	800f82c <__sinit+0xc>
 800f846:	bf00      	nop
 800f848:	0800f78d 	.word	0x0800f78d
 800f84c:	24000e58 	.word	0x24000e58

0800f850 <_fwalk_sglue>:
 800f850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f854:	4607      	mov	r7, r0
 800f856:	4688      	mov	r8, r1
 800f858:	4614      	mov	r4, r2
 800f85a:	2600      	movs	r6, #0
 800f85c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f860:	f1b9 0901 	subs.w	r9, r9, #1
 800f864:	d505      	bpl.n	800f872 <_fwalk_sglue+0x22>
 800f866:	6824      	ldr	r4, [r4, #0]
 800f868:	2c00      	cmp	r4, #0
 800f86a:	d1f7      	bne.n	800f85c <_fwalk_sglue+0xc>
 800f86c:	4630      	mov	r0, r6
 800f86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f872:	89ab      	ldrh	r3, [r5, #12]
 800f874:	2b01      	cmp	r3, #1
 800f876:	d907      	bls.n	800f888 <_fwalk_sglue+0x38>
 800f878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f87c:	3301      	adds	r3, #1
 800f87e:	d003      	beq.n	800f888 <_fwalk_sglue+0x38>
 800f880:	4629      	mov	r1, r5
 800f882:	4638      	mov	r0, r7
 800f884:	47c0      	blx	r8
 800f886:	4306      	orrs	r6, r0
 800f888:	3568      	adds	r5, #104	@ 0x68
 800f88a:	e7e9      	b.n	800f860 <_fwalk_sglue+0x10>

0800f88c <siprintf>:
 800f88c:	b40e      	push	{r1, r2, r3}
 800f88e:	b500      	push	{lr}
 800f890:	b09c      	sub	sp, #112	@ 0x70
 800f892:	ab1d      	add	r3, sp, #116	@ 0x74
 800f894:	9002      	str	r0, [sp, #8]
 800f896:	9006      	str	r0, [sp, #24]
 800f898:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f89c:	4809      	ldr	r0, [pc, #36]	@ (800f8c4 <siprintf+0x38>)
 800f89e:	9107      	str	r1, [sp, #28]
 800f8a0:	9104      	str	r1, [sp, #16]
 800f8a2:	4909      	ldr	r1, [pc, #36]	@ (800f8c8 <siprintf+0x3c>)
 800f8a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8a8:	9105      	str	r1, [sp, #20]
 800f8aa:	6800      	ldr	r0, [r0, #0]
 800f8ac:	9301      	str	r3, [sp, #4]
 800f8ae:	a902      	add	r1, sp, #8
 800f8b0:	f002 f852 	bl	8011958 <_svfiprintf_r>
 800f8b4:	9b02      	ldr	r3, [sp, #8]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	701a      	strb	r2, [r3, #0]
 800f8ba:	b01c      	add	sp, #112	@ 0x70
 800f8bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8c0:	b003      	add	sp, #12
 800f8c2:	4770      	bx	lr
 800f8c4:	240001c4 	.word	0x240001c4
 800f8c8:	ffff0208 	.word	0xffff0208

0800f8cc <siscanf>:
 800f8cc:	b40e      	push	{r1, r2, r3}
 800f8ce:	b530      	push	{r4, r5, lr}
 800f8d0:	b09c      	sub	sp, #112	@ 0x70
 800f8d2:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f8d4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f8d8:	f854 5b04 	ldr.w	r5, [r4], #4
 800f8dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f8e0:	9002      	str	r0, [sp, #8]
 800f8e2:	9006      	str	r0, [sp, #24]
 800f8e4:	f7f0 fd64 	bl	80003b0 <strlen>
 800f8e8:	4b0b      	ldr	r3, [pc, #44]	@ (800f918 <siscanf+0x4c>)
 800f8ea:	9003      	str	r0, [sp, #12]
 800f8ec:	9007      	str	r0, [sp, #28]
 800f8ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f8f0:	480a      	ldr	r0, [pc, #40]	@ (800f91c <siscanf+0x50>)
 800f8f2:	9401      	str	r4, [sp, #4]
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f8f8:	9314      	str	r3, [sp, #80]	@ 0x50
 800f8fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f8fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f902:	462a      	mov	r2, r5
 800f904:	4623      	mov	r3, r4
 800f906:	a902      	add	r1, sp, #8
 800f908:	6800      	ldr	r0, [r0, #0]
 800f90a:	f002 f979 	bl	8011c00 <__ssvfiscanf_r>
 800f90e:	b01c      	add	sp, #112	@ 0x70
 800f910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f914:	b003      	add	sp, #12
 800f916:	4770      	bx	lr
 800f918:	0800f943 	.word	0x0800f943
 800f91c:	240001c4 	.word	0x240001c4

0800f920 <__sread>:
 800f920:	b510      	push	{r4, lr}
 800f922:	460c      	mov	r4, r1
 800f924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f928:	f000 f88c 	bl	800fa44 <_read_r>
 800f92c:	2800      	cmp	r0, #0
 800f92e:	bfab      	itete	ge
 800f930:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f932:	89a3      	ldrhlt	r3, [r4, #12]
 800f934:	181b      	addge	r3, r3, r0
 800f936:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f93a:	bfac      	ite	ge
 800f93c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f93e:	81a3      	strhlt	r3, [r4, #12]
 800f940:	bd10      	pop	{r4, pc}

0800f942 <__seofread>:
 800f942:	2000      	movs	r0, #0
 800f944:	4770      	bx	lr

0800f946 <__swrite>:
 800f946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f94a:	461f      	mov	r7, r3
 800f94c:	898b      	ldrh	r3, [r1, #12]
 800f94e:	05db      	lsls	r3, r3, #23
 800f950:	4605      	mov	r5, r0
 800f952:	460c      	mov	r4, r1
 800f954:	4616      	mov	r6, r2
 800f956:	d505      	bpl.n	800f964 <__swrite+0x1e>
 800f958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f95c:	2302      	movs	r3, #2
 800f95e:	2200      	movs	r2, #0
 800f960:	f000 f85e 	bl	800fa20 <_lseek_r>
 800f964:	89a3      	ldrh	r3, [r4, #12]
 800f966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f96a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f96e:	81a3      	strh	r3, [r4, #12]
 800f970:	4632      	mov	r2, r6
 800f972:	463b      	mov	r3, r7
 800f974:	4628      	mov	r0, r5
 800f976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f97a:	f000 b885 	b.w	800fa88 <_write_r>

0800f97e <__sseek>:
 800f97e:	b510      	push	{r4, lr}
 800f980:	460c      	mov	r4, r1
 800f982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f986:	f000 f84b 	bl	800fa20 <_lseek_r>
 800f98a:	1c43      	adds	r3, r0, #1
 800f98c:	89a3      	ldrh	r3, [r4, #12]
 800f98e:	bf15      	itete	ne
 800f990:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f992:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f996:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f99a:	81a3      	strheq	r3, [r4, #12]
 800f99c:	bf18      	it	ne
 800f99e:	81a3      	strhne	r3, [r4, #12]
 800f9a0:	bd10      	pop	{r4, pc}

0800f9a2 <__sclose>:
 800f9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9a6:	f000 b82b 	b.w	800fa00 <_close_r>

0800f9aa <memset>:
 800f9aa:	4402      	add	r2, r0
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d100      	bne.n	800f9b4 <memset+0xa>
 800f9b2:	4770      	bx	lr
 800f9b4:	f803 1b01 	strb.w	r1, [r3], #1
 800f9b8:	e7f9      	b.n	800f9ae <memset+0x4>

0800f9ba <strchr>:
 800f9ba:	b2c9      	uxtb	r1, r1
 800f9bc:	4603      	mov	r3, r0
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9c4:	b112      	cbz	r2, 800f9cc <strchr+0x12>
 800f9c6:	428a      	cmp	r2, r1
 800f9c8:	d1f9      	bne.n	800f9be <strchr+0x4>
 800f9ca:	4770      	bx	lr
 800f9cc:	2900      	cmp	r1, #0
 800f9ce:	bf18      	it	ne
 800f9d0:	2000      	movne	r0, #0
 800f9d2:	4770      	bx	lr

0800f9d4 <strncmp>:
 800f9d4:	b510      	push	{r4, lr}
 800f9d6:	b16a      	cbz	r2, 800f9f4 <strncmp+0x20>
 800f9d8:	3901      	subs	r1, #1
 800f9da:	1884      	adds	r4, r0, r2
 800f9dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d103      	bne.n	800f9f0 <strncmp+0x1c>
 800f9e8:	42a0      	cmp	r0, r4
 800f9ea:	d001      	beq.n	800f9f0 <strncmp+0x1c>
 800f9ec:	2a00      	cmp	r2, #0
 800f9ee:	d1f5      	bne.n	800f9dc <strncmp+0x8>
 800f9f0:	1ad0      	subs	r0, r2, r3
 800f9f2:	bd10      	pop	{r4, pc}
 800f9f4:	4610      	mov	r0, r2
 800f9f6:	e7fc      	b.n	800f9f2 <strncmp+0x1e>

0800f9f8 <_localeconv_r>:
 800f9f8:	4800      	ldr	r0, [pc, #0]	@ (800f9fc <_localeconv_r+0x4>)
 800f9fa:	4770      	bx	lr
 800f9fc:	24000148 	.word	0x24000148

0800fa00 <_close_r>:
 800fa00:	b538      	push	{r3, r4, r5, lr}
 800fa02:	4d06      	ldr	r5, [pc, #24]	@ (800fa1c <_close_r+0x1c>)
 800fa04:	2300      	movs	r3, #0
 800fa06:	4604      	mov	r4, r0
 800fa08:	4608      	mov	r0, r1
 800fa0a:	602b      	str	r3, [r5, #0]
 800fa0c:	f7f1 ffb6 	bl	800197c <_close>
 800fa10:	1c43      	adds	r3, r0, #1
 800fa12:	d102      	bne.n	800fa1a <_close_r+0x1a>
 800fa14:	682b      	ldr	r3, [r5, #0]
 800fa16:	b103      	cbz	r3, 800fa1a <_close_r+0x1a>
 800fa18:	6023      	str	r3, [r4, #0]
 800fa1a:	bd38      	pop	{r3, r4, r5, pc}
 800fa1c:	24000e5c 	.word	0x24000e5c

0800fa20 <_lseek_r>:
 800fa20:	b538      	push	{r3, r4, r5, lr}
 800fa22:	4d07      	ldr	r5, [pc, #28]	@ (800fa40 <_lseek_r+0x20>)
 800fa24:	4604      	mov	r4, r0
 800fa26:	4608      	mov	r0, r1
 800fa28:	4611      	mov	r1, r2
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	602a      	str	r2, [r5, #0]
 800fa2e:	461a      	mov	r2, r3
 800fa30:	f7f1 ffcb 	bl	80019ca <_lseek>
 800fa34:	1c43      	adds	r3, r0, #1
 800fa36:	d102      	bne.n	800fa3e <_lseek_r+0x1e>
 800fa38:	682b      	ldr	r3, [r5, #0]
 800fa3a:	b103      	cbz	r3, 800fa3e <_lseek_r+0x1e>
 800fa3c:	6023      	str	r3, [r4, #0]
 800fa3e:	bd38      	pop	{r3, r4, r5, pc}
 800fa40:	24000e5c 	.word	0x24000e5c

0800fa44 <_read_r>:
 800fa44:	b538      	push	{r3, r4, r5, lr}
 800fa46:	4d07      	ldr	r5, [pc, #28]	@ (800fa64 <_read_r+0x20>)
 800fa48:	4604      	mov	r4, r0
 800fa4a:	4608      	mov	r0, r1
 800fa4c:	4611      	mov	r1, r2
 800fa4e:	2200      	movs	r2, #0
 800fa50:	602a      	str	r2, [r5, #0]
 800fa52:	461a      	mov	r2, r3
 800fa54:	f7f1 ff59 	bl	800190a <_read>
 800fa58:	1c43      	adds	r3, r0, #1
 800fa5a:	d102      	bne.n	800fa62 <_read_r+0x1e>
 800fa5c:	682b      	ldr	r3, [r5, #0]
 800fa5e:	b103      	cbz	r3, 800fa62 <_read_r+0x1e>
 800fa60:	6023      	str	r3, [r4, #0]
 800fa62:	bd38      	pop	{r3, r4, r5, pc}
 800fa64:	24000e5c 	.word	0x24000e5c

0800fa68 <_sbrk_r>:
 800fa68:	b538      	push	{r3, r4, r5, lr}
 800fa6a:	4d06      	ldr	r5, [pc, #24]	@ (800fa84 <_sbrk_r+0x1c>)
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	4604      	mov	r4, r0
 800fa70:	4608      	mov	r0, r1
 800fa72:	602b      	str	r3, [r5, #0]
 800fa74:	f7f1 ffb6 	bl	80019e4 <_sbrk>
 800fa78:	1c43      	adds	r3, r0, #1
 800fa7a:	d102      	bne.n	800fa82 <_sbrk_r+0x1a>
 800fa7c:	682b      	ldr	r3, [r5, #0]
 800fa7e:	b103      	cbz	r3, 800fa82 <_sbrk_r+0x1a>
 800fa80:	6023      	str	r3, [r4, #0]
 800fa82:	bd38      	pop	{r3, r4, r5, pc}
 800fa84:	24000e5c 	.word	0x24000e5c

0800fa88 <_write_r>:
 800fa88:	b538      	push	{r3, r4, r5, lr}
 800fa8a:	4d07      	ldr	r5, [pc, #28]	@ (800faa8 <_write_r+0x20>)
 800fa8c:	4604      	mov	r4, r0
 800fa8e:	4608      	mov	r0, r1
 800fa90:	4611      	mov	r1, r2
 800fa92:	2200      	movs	r2, #0
 800fa94:	602a      	str	r2, [r5, #0]
 800fa96:	461a      	mov	r2, r3
 800fa98:	f7f1 ff54 	bl	8001944 <_write>
 800fa9c:	1c43      	adds	r3, r0, #1
 800fa9e:	d102      	bne.n	800faa6 <_write_r+0x1e>
 800faa0:	682b      	ldr	r3, [r5, #0]
 800faa2:	b103      	cbz	r3, 800faa6 <_write_r+0x1e>
 800faa4:	6023      	str	r3, [r4, #0]
 800faa6:	bd38      	pop	{r3, r4, r5, pc}
 800faa8:	24000e5c 	.word	0x24000e5c

0800faac <__errno>:
 800faac:	4b01      	ldr	r3, [pc, #4]	@ (800fab4 <__errno+0x8>)
 800faae:	6818      	ldr	r0, [r3, #0]
 800fab0:	4770      	bx	lr
 800fab2:	bf00      	nop
 800fab4:	240001c4 	.word	0x240001c4

0800fab8 <__libc_init_array>:
 800fab8:	b570      	push	{r4, r5, r6, lr}
 800faba:	4d0d      	ldr	r5, [pc, #52]	@ (800faf0 <__libc_init_array+0x38>)
 800fabc:	4c0d      	ldr	r4, [pc, #52]	@ (800faf4 <__libc_init_array+0x3c>)
 800fabe:	1b64      	subs	r4, r4, r5
 800fac0:	10a4      	asrs	r4, r4, #2
 800fac2:	2600      	movs	r6, #0
 800fac4:	42a6      	cmp	r6, r4
 800fac6:	d109      	bne.n	800fadc <__libc_init_array+0x24>
 800fac8:	4d0b      	ldr	r5, [pc, #44]	@ (800faf8 <__libc_init_array+0x40>)
 800faca:	4c0c      	ldr	r4, [pc, #48]	@ (800fafc <__libc_init_array+0x44>)
 800facc:	f003 f822 	bl	8012b14 <_init>
 800fad0:	1b64      	subs	r4, r4, r5
 800fad2:	10a4      	asrs	r4, r4, #2
 800fad4:	2600      	movs	r6, #0
 800fad6:	42a6      	cmp	r6, r4
 800fad8:	d105      	bne.n	800fae6 <__libc_init_array+0x2e>
 800fada:	bd70      	pop	{r4, r5, r6, pc}
 800fadc:	f855 3b04 	ldr.w	r3, [r5], #4
 800fae0:	4798      	blx	r3
 800fae2:	3601      	adds	r6, #1
 800fae4:	e7ee      	b.n	800fac4 <__libc_init_array+0xc>
 800fae6:	f855 3b04 	ldr.w	r3, [r5], #4
 800faea:	4798      	blx	r3
 800faec:	3601      	adds	r6, #1
 800faee:	e7f2      	b.n	800fad6 <__libc_init_array+0x1e>
 800faf0:	080130b4 	.word	0x080130b4
 800faf4:	080130b4 	.word	0x080130b4
 800faf8:	080130b4 	.word	0x080130b4
 800fafc:	080130b8 	.word	0x080130b8

0800fb00 <__retarget_lock_init_recursive>:
 800fb00:	4770      	bx	lr

0800fb02 <__retarget_lock_acquire_recursive>:
 800fb02:	4770      	bx	lr

0800fb04 <__retarget_lock_release_recursive>:
 800fb04:	4770      	bx	lr

0800fb06 <memcpy>:
 800fb06:	440a      	add	r2, r1
 800fb08:	4291      	cmp	r1, r2
 800fb0a:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb0e:	d100      	bne.n	800fb12 <memcpy+0xc>
 800fb10:	4770      	bx	lr
 800fb12:	b510      	push	{r4, lr}
 800fb14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb1c:	4291      	cmp	r1, r2
 800fb1e:	d1f9      	bne.n	800fb14 <memcpy+0xe>
 800fb20:	bd10      	pop	{r4, pc}
 800fb22:	0000      	movs	r0, r0
 800fb24:	0000      	movs	r0, r0
	...

0800fb28 <nan>:
 800fb28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fb30 <nan+0x8>
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop
 800fb30:	00000000 	.word	0x00000000
 800fb34:	7ff80000 	.word	0x7ff80000

0800fb38 <nanf>:
 800fb38:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fb40 <nanf+0x8>
 800fb3c:	4770      	bx	lr
 800fb3e:	bf00      	nop
 800fb40:	7fc00000 	.word	0x7fc00000

0800fb44 <quorem>:
 800fb44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb48:	6903      	ldr	r3, [r0, #16]
 800fb4a:	690c      	ldr	r4, [r1, #16]
 800fb4c:	42a3      	cmp	r3, r4
 800fb4e:	4607      	mov	r7, r0
 800fb50:	db7e      	blt.n	800fc50 <quorem+0x10c>
 800fb52:	3c01      	subs	r4, #1
 800fb54:	f101 0814 	add.w	r8, r1, #20
 800fb58:	00a3      	lsls	r3, r4, #2
 800fb5a:	f100 0514 	add.w	r5, r0, #20
 800fb5e:	9300      	str	r3, [sp, #0]
 800fb60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb64:	9301      	str	r3, [sp, #4]
 800fb66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb6e:	3301      	adds	r3, #1
 800fb70:	429a      	cmp	r2, r3
 800fb72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb76:	fbb2 f6f3 	udiv	r6, r2, r3
 800fb7a:	d32e      	bcc.n	800fbda <quorem+0x96>
 800fb7c:	f04f 0a00 	mov.w	sl, #0
 800fb80:	46c4      	mov	ip, r8
 800fb82:	46ae      	mov	lr, r5
 800fb84:	46d3      	mov	fp, sl
 800fb86:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fb8a:	b298      	uxth	r0, r3
 800fb8c:	fb06 a000 	mla	r0, r6, r0, sl
 800fb90:	0c02      	lsrs	r2, r0, #16
 800fb92:	0c1b      	lsrs	r3, r3, #16
 800fb94:	fb06 2303 	mla	r3, r6, r3, r2
 800fb98:	f8de 2000 	ldr.w	r2, [lr]
 800fb9c:	b280      	uxth	r0, r0
 800fb9e:	b292      	uxth	r2, r2
 800fba0:	1a12      	subs	r2, r2, r0
 800fba2:	445a      	add	r2, fp
 800fba4:	f8de 0000 	ldr.w	r0, [lr]
 800fba8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fbb2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fbb6:	b292      	uxth	r2, r2
 800fbb8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fbbc:	45e1      	cmp	r9, ip
 800fbbe:	f84e 2b04 	str.w	r2, [lr], #4
 800fbc2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fbc6:	d2de      	bcs.n	800fb86 <quorem+0x42>
 800fbc8:	9b00      	ldr	r3, [sp, #0]
 800fbca:	58eb      	ldr	r3, [r5, r3]
 800fbcc:	b92b      	cbnz	r3, 800fbda <quorem+0x96>
 800fbce:	9b01      	ldr	r3, [sp, #4]
 800fbd0:	3b04      	subs	r3, #4
 800fbd2:	429d      	cmp	r5, r3
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	d32f      	bcc.n	800fc38 <quorem+0xf4>
 800fbd8:	613c      	str	r4, [r7, #16]
 800fbda:	4638      	mov	r0, r7
 800fbdc:	f001 fbec 	bl	80113b8 <__mcmp>
 800fbe0:	2800      	cmp	r0, #0
 800fbe2:	db25      	blt.n	800fc30 <quorem+0xec>
 800fbe4:	4629      	mov	r1, r5
 800fbe6:	2000      	movs	r0, #0
 800fbe8:	f858 2b04 	ldr.w	r2, [r8], #4
 800fbec:	f8d1 c000 	ldr.w	ip, [r1]
 800fbf0:	fa1f fe82 	uxth.w	lr, r2
 800fbf4:	fa1f f38c 	uxth.w	r3, ip
 800fbf8:	eba3 030e 	sub.w	r3, r3, lr
 800fbfc:	4403      	add	r3, r0
 800fbfe:	0c12      	lsrs	r2, r2, #16
 800fc00:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fc04:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fc08:	b29b      	uxth	r3, r3
 800fc0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc0e:	45c1      	cmp	r9, r8
 800fc10:	f841 3b04 	str.w	r3, [r1], #4
 800fc14:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fc18:	d2e6      	bcs.n	800fbe8 <quorem+0xa4>
 800fc1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc22:	b922      	cbnz	r2, 800fc2e <quorem+0xea>
 800fc24:	3b04      	subs	r3, #4
 800fc26:	429d      	cmp	r5, r3
 800fc28:	461a      	mov	r2, r3
 800fc2a:	d30b      	bcc.n	800fc44 <quorem+0x100>
 800fc2c:	613c      	str	r4, [r7, #16]
 800fc2e:	3601      	adds	r6, #1
 800fc30:	4630      	mov	r0, r6
 800fc32:	b003      	add	sp, #12
 800fc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc38:	6812      	ldr	r2, [r2, #0]
 800fc3a:	3b04      	subs	r3, #4
 800fc3c:	2a00      	cmp	r2, #0
 800fc3e:	d1cb      	bne.n	800fbd8 <quorem+0x94>
 800fc40:	3c01      	subs	r4, #1
 800fc42:	e7c6      	b.n	800fbd2 <quorem+0x8e>
 800fc44:	6812      	ldr	r2, [r2, #0]
 800fc46:	3b04      	subs	r3, #4
 800fc48:	2a00      	cmp	r2, #0
 800fc4a:	d1ef      	bne.n	800fc2c <quorem+0xe8>
 800fc4c:	3c01      	subs	r4, #1
 800fc4e:	e7ea      	b.n	800fc26 <quorem+0xe2>
 800fc50:	2000      	movs	r0, #0
 800fc52:	e7ee      	b.n	800fc32 <quorem+0xee>
 800fc54:	0000      	movs	r0, r0
	...

0800fc58 <_dtoa_r>:
 800fc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc5c:	ed2d 8b02 	vpush	{d8}
 800fc60:	69c7      	ldr	r7, [r0, #28]
 800fc62:	b091      	sub	sp, #68	@ 0x44
 800fc64:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fc68:	ec55 4b10 	vmov	r4, r5, d0
 800fc6c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fc6e:	9107      	str	r1, [sp, #28]
 800fc70:	4681      	mov	r9, r0
 800fc72:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc74:	930d      	str	r3, [sp, #52]	@ 0x34
 800fc76:	b97f      	cbnz	r7, 800fc98 <_dtoa_r+0x40>
 800fc78:	2010      	movs	r0, #16
 800fc7a:	f7fe f893 	bl	800dda4 <malloc>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	f8c9 001c 	str.w	r0, [r9, #28]
 800fc84:	b920      	cbnz	r0, 800fc90 <_dtoa_r+0x38>
 800fc86:	4ba0      	ldr	r3, [pc, #640]	@ (800ff08 <_dtoa_r+0x2b0>)
 800fc88:	21ef      	movs	r1, #239	@ 0xef
 800fc8a:	48a0      	ldr	r0, [pc, #640]	@ (800ff0c <_dtoa_r+0x2b4>)
 800fc8c:	f002 fbb4 	bl	80123f8 <__assert_func>
 800fc90:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fc94:	6007      	str	r7, [r0, #0]
 800fc96:	60c7      	str	r7, [r0, #12]
 800fc98:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fc9c:	6819      	ldr	r1, [r3, #0]
 800fc9e:	b159      	cbz	r1, 800fcb8 <_dtoa_r+0x60>
 800fca0:	685a      	ldr	r2, [r3, #4]
 800fca2:	604a      	str	r2, [r1, #4]
 800fca4:	2301      	movs	r3, #1
 800fca6:	4093      	lsls	r3, r2
 800fca8:	608b      	str	r3, [r1, #8]
 800fcaa:	4648      	mov	r0, r9
 800fcac:	f001 f900 	bl	8010eb0 <_Bfree>
 800fcb0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	601a      	str	r2, [r3, #0]
 800fcb8:	1e2b      	subs	r3, r5, #0
 800fcba:	bfbb      	ittet	lt
 800fcbc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fcc0:	9303      	strlt	r3, [sp, #12]
 800fcc2:	2300      	movge	r3, #0
 800fcc4:	2201      	movlt	r2, #1
 800fcc6:	bfac      	ite	ge
 800fcc8:	6033      	strge	r3, [r6, #0]
 800fcca:	6032      	strlt	r2, [r6, #0]
 800fccc:	4b90      	ldr	r3, [pc, #576]	@ (800ff10 <_dtoa_r+0x2b8>)
 800fcce:	9e03      	ldr	r6, [sp, #12]
 800fcd0:	43b3      	bics	r3, r6
 800fcd2:	d110      	bne.n	800fcf6 <_dtoa_r+0x9e>
 800fcd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fcd6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fcda:	6013      	str	r3, [r2, #0]
 800fcdc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800fce0:	4323      	orrs	r3, r4
 800fce2:	f000 84de 	beq.w	80106a2 <_dtoa_r+0xa4a>
 800fce6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fce8:	4f8a      	ldr	r7, [pc, #552]	@ (800ff14 <_dtoa_r+0x2bc>)
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	f000 84e0 	beq.w	80106b0 <_dtoa_r+0xa58>
 800fcf0:	1cfb      	adds	r3, r7, #3
 800fcf2:	f000 bcdb 	b.w	80106ac <_dtoa_r+0xa54>
 800fcf6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fcfa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd02:	d10a      	bne.n	800fd1a <_dtoa_r+0xc2>
 800fd04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd06:	2301      	movs	r3, #1
 800fd08:	6013      	str	r3, [r2, #0]
 800fd0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fd0c:	b113      	cbz	r3, 800fd14 <_dtoa_r+0xbc>
 800fd0e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fd10:	4b81      	ldr	r3, [pc, #516]	@ (800ff18 <_dtoa_r+0x2c0>)
 800fd12:	6013      	str	r3, [r2, #0]
 800fd14:	4f81      	ldr	r7, [pc, #516]	@ (800ff1c <_dtoa_r+0x2c4>)
 800fd16:	f000 bccb 	b.w	80106b0 <_dtoa_r+0xa58>
 800fd1a:	aa0e      	add	r2, sp, #56	@ 0x38
 800fd1c:	a90f      	add	r1, sp, #60	@ 0x3c
 800fd1e:	4648      	mov	r0, r9
 800fd20:	eeb0 0b48 	vmov.f64	d0, d8
 800fd24:	f001 fc68 	bl	80115f8 <__d2b>
 800fd28:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800fd2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd2e:	9001      	str	r0, [sp, #4]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d045      	beq.n	800fdc0 <_dtoa_r+0x168>
 800fd34:	eeb0 7b48 	vmov.f64	d7, d8
 800fd38:	ee18 1a90 	vmov	r1, s17
 800fd3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fd40:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800fd44:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fd48:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fd4c:	2500      	movs	r5, #0
 800fd4e:	ee07 1a90 	vmov	s15, r1
 800fd52:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800fd56:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fef0 <_dtoa_r+0x298>
 800fd5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fd5e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800fef8 <_dtoa_r+0x2a0>
 800fd62:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fd66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ff00 <_dtoa_r+0x2a8>
 800fd6a:	ee07 3a90 	vmov	s15, r3
 800fd6e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fd72:	eeb0 7b46 	vmov.f64	d7, d6
 800fd76:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fd7a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fd7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd86:	ee16 8a90 	vmov	r8, s13
 800fd8a:	d508      	bpl.n	800fd9e <_dtoa_r+0x146>
 800fd8c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fd90:	eeb4 6b47 	vcmp.f64	d6, d7
 800fd94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd98:	bf18      	it	ne
 800fd9a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800fd9e:	f1b8 0f16 	cmp.w	r8, #22
 800fda2:	d82b      	bhi.n	800fdfc <_dtoa_r+0x1a4>
 800fda4:	495e      	ldr	r1, [pc, #376]	@ (800ff20 <_dtoa_r+0x2c8>)
 800fda6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800fdaa:	ed91 7b00 	vldr	d7, [r1]
 800fdae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fdb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb6:	d501      	bpl.n	800fdbc <_dtoa_r+0x164>
 800fdb8:	f108 38ff 	add.w	r8, r8, #4294967295
 800fdbc:	2100      	movs	r1, #0
 800fdbe:	e01e      	b.n	800fdfe <_dtoa_r+0x1a6>
 800fdc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdc2:	4413      	add	r3, r2
 800fdc4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800fdc8:	2920      	cmp	r1, #32
 800fdca:	bfc1      	itttt	gt
 800fdcc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800fdd0:	408e      	lslgt	r6, r1
 800fdd2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800fdd6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800fdda:	bfd6      	itet	le
 800fddc:	f1c1 0120 	rsble	r1, r1, #32
 800fde0:	4331      	orrgt	r1, r6
 800fde2:	fa04 f101 	lslle.w	r1, r4, r1
 800fde6:	ee07 1a90 	vmov	s15, r1
 800fdea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fdee:	3b01      	subs	r3, #1
 800fdf0:	ee17 1a90 	vmov	r1, s15
 800fdf4:	2501      	movs	r5, #1
 800fdf6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800fdfa:	e7a8      	b.n	800fd4e <_dtoa_r+0xf6>
 800fdfc:	2101      	movs	r1, #1
 800fdfe:	1ad2      	subs	r2, r2, r3
 800fe00:	1e53      	subs	r3, r2, #1
 800fe02:	9306      	str	r3, [sp, #24]
 800fe04:	bf45      	ittet	mi
 800fe06:	f1c2 0301 	rsbmi	r3, r2, #1
 800fe0a:	9305      	strmi	r3, [sp, #20]
 800fe0c:	2300      	movpl	r3, #0
 800fe0e:	2300      	movmi	r3, #0
 800fe10:	bf4c      	ite	mi
 800fe12:	9306      	strmi	r3, [sp, #24]
 800fe14:	9305      	strpl	r3, [sp, #20]
 800fe16:	f1b8 0f00 	cmp.w	r8, #0
 800fe1a:	910c      	str	r1, [sp, #48]	@ 0x30
 800fe1c:	db18      	blt.n	800fe50 <_dtoa_r+0x1f8>
 800fe1e:	9b06      	ldr	r3, [sp, #24]
 800fe20:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800fe24:	4443      	add	r3, r8
 800fe26:	9306      	str	r3, [sp, #24]
 800fe28:	2300      	movs	r3, #0
 800fe2a:	9a07      	ldr	r2, [sp, #28]
 800fe2c:	2a09      	cmp	r2, #9
 800fe2e:	d849      	bhi.n	800fec4 <_dtoa_r+0x26c>
 800fe30:	2a05      	cmp	r2, #5
 800fe32:	bfc4      	itt	gt
 800fe34:	3a04      	subgt	r2, #4
 800fe36:	9207      	strgt	r2, [sp, #28]
 800fe38:	9a07      	ldr	r2, [sp, #28]
 800fe3a:	f1a2 0202 	sub.w	r2, r2, #2
 800fe3e:	bfcc      	ite	gt
 800fe40:	2400      	movgt	r4, #0
 800fe42:	2401      	movle	r4, #1
 800fe44:	2a03      	cmp	r2, #3
 800fe46:	d848      	bhi.n	800feda <_dtoa_r+0x282>
 800fe48:	e8df f002 	tbb	[pc, r2]
 800fe4c:	3a2c2e0b 	.word	0x3a2c2e0b
 800fe50:	9b05      	ldr	r3, [sp, #20]
 800fe52:	2200      	movs	r2, #0
 800fe54:	eba3 0308 	sub.w	r3, r3, r8
 800fe58:	9305      	str	r3, [sp, #20]
 800fe5a:	920a      	str	r2, [sp, #40]	@ 0x28
 800fe5c:	f1c8 0300 	rsb	r3, r8, #0
 800fe60:	e7e3      	b.n	800fe2a <_dtoa_r+0x1d2>
 800fe62:	2200      	movs	r2, #0
 800fe64:	9208      	str	r2, [sp, #32]
 800fe66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe68:	2a00      	cmp	r2, #0
 800fe6a:	dc39      	bgt.n	800fee0 <_dtoa_r+0x288>
 800fe6c:	f04f 0b01 	mov.w	fp, #1
 800fe70:	46da      	mov	sl, fp
 800fe72:	465a      	mov	r2, fp
 800fe74:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800fe78:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800fe7c:	2100      	movs	r1, #0
 800fe7e:	2004      	movs	r0, #4
 800fe80:	f100 0614 	add.w	r6, r0, #20
 800fe84:	4296      	cmp	r6, r2
 800fe86:	d930      	bls.n	800feea <_dtoa_r+0x292>
 800fe88:	6079      	str	r1, [r7, #4]
 800fe8a:	4648      	mov	r0, r9
 800fe8c:	9304      	str	r3, [sp, #16]
 800fe8e:	f000 ffcf 	bl	8010e30 <_Balloc>
 800fe92:	9b04      	ldr	r3, [sp, #16]
 800fe94:	4607      	mov	r7, r0
 800fe96:	2800      	cmp	r0, #0
 800fe98:	d146      	bne.n	800ff28 <_dtoa_r+0x2d0>
 800fe9a:	4b22      	ldr	r3, [pc, #136]	@ (800ff24 <_dtoa_r+0x2cc>)
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	f240 11af 	movw	r1, #431	@ 0x1af
 800fea2:	e6f2      	b.n	800fc8a <_dtoa_r+0x32>
 800fea4:	2201      	movs	r2, #1
 800fea6:	e7dd      	b.n	800fe64 <_dtoa_r+0x20c>
 800fea8:	2200      	movs	r2, #0
 800feaa:	9208      	str	r2, [sp, #32]
 800feac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800feae:	eb08 0b02 	add.w	fp, r8, r2
 800feb2:	f10b 0a01 	add.w	sl, fp, #1
 800feb6:	4652      	mov	r2, sl
 800feb8:	2a01      	cmp	r2, #1
 800feba:	bfb8      	it	lt
 800febc:	2201      	movlt	r2, #1
 800febe:	e7db      	b.n	800fe78 <_dtoa_r+0x220>
 800fec0:	2201      	movs	r2, #1
 800fec2:	e7f2      	b.n	800feaa <_dtoa_r+0x252>
 800fec4:	2401      	movs	r4, #1
 800fec6:	2200      	movs	r2, #0
 800fec8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800fecc:	f04f 3bff 	mov.w	fp, #4294967295
 800fed0:	2100      	movs	r1, #0
 800fed2:	46da      	mov	sl, fp
 800fed4:	2212      	movs	r2, #18
 800fed6:	9109      	str	r1, [sp, #36]	@ 0x24
 800fed8:	e7ce      	b.n	800fe78 <_dtoa_r+0x220>
 800feda:	2201      	movs	r2, #1
 800fedc:	9208      	str	r2, [sp, #32]
 800fede:	e7f5      	b.n	800fecc <_dtoa_r+0x274>
 800fee0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800fee4:	46da      	mov	sl, fp
 800fee6:	465a      	mov	r2, fp
 800fee8:	e7c6      	b.n	800fe78 <_dtoa_r+0x220>
 800feea:	3101      	adds	r1, #1
 800feec:	0040      	lsls	r0, r0, #1
 800feee:	e7c7      	b.n	800fe80 <_dtoa_r+0x228>
 800fef0:	636f4361 	.word	0x636f4361
 800fef4:	3fd287a7 	.word	0x3fd287a7
 800fef8:	8b60c8b3 	.word	0x8b60c8b3
 800fefc:	3fc68a28 	.word	0x3fc68a28
 800ff00:	509f79fb 	.word	0x509f79fb
 800ff04:	3fd34413 	.word	0x3fd34413
 800ff08:	08012d04 	.word	0x08012d04
 800ff0c:	08012d1b 	.word	0x08012d1b
 800ff10:	7ff00000 	.word	0x7ff00000
 800ff14:	08012d00 	.word	0x08012d00
 800ff18:	08013069 	.word	0x08013069
 800ff1c:	08013068 	.word	0x08013068
 800ff20:	08012e78 	.word	0x08012e78
 800ff24:	08012d73 	.word	0x08012d73
 800ff28:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ff2c:	f1ba 0f0e 	cmp.w	sl, #14
 800ff30:	6010      	str	r0, [r2, #0]
 800ff32:	d86f      	bhi.n	8010014 <_dtoa_r+0x3bc>
 800ff34:	2c00      	cmp	r4, #0
 800ff36:	d06d      	beq.n	8010014 <_dtoa_r+0x3bc>
 800ff38:	f1b8 0f00 	cmp.w	r8, #0
 800ff3c:	f340 80c2 	ble.w	80100c4 <_dtoa_r+0x46c>
 800ff40:	4aca      	ldr	r2, [pc, #808]	@ (801026c <_dtoa_r+0x614>)
 800ff42:	f008 010f 	and.w	r1, r8, #15
 800ff46:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ff4a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ff4e:	ed92 7b00 	vldr	d7, [r2]
 800ff52:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ff56:	f000 80a9 	beq.w	80100ac <_dtoa_r+0x454>
 800ff5a:	4ac5      	ldr	r2, [pc, #788]	@ (8010270 <_dtoa_r+0x618>)
 800ff5c:	ed92 6b08 	vldr	d6, [r2, #32]
 800ff60:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ff64:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ff68:	f001 010f 	and.w	r1, r1, #15
 800ff6c:	2203      	movs	r2, #3
 800ff6e:	48c0      	ldr	r0, [pc, #768]	@ (8010270 <_dtoa_r+0x618>)
 800ff70:	2900      	cmp	r1, #0
 800ff72:	f040 809d 	bne.w	80100b0 <_dtoa_r+0x458>
 800ff76:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ff7a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ff7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff82:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ff84:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff88:	2900      	cmp	r1, #0
 800ff8a:	f000 80c1 	beq.w	8010110 <_dtoa_r+0x4b8>
 800ff8e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ff92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ff96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff9a:	f140 80b9 	bpl.w	8010110 <_dtoa_r+0x4b8>
 800ff9e:	f1ba 0f00 	cmp.w	sl, #0
 800ffa2:	f000 80b5 	beq.w	8010110 <_dtoa_r+0x4b8>
 800ffa6:	f1bb 0f00 	cmp.w	fp, #0
 800ffaa:	dd31      	ble.n	8010010 <_dtoa_r+0x3b8>
 800ffac:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ffb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ffb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ffb8:	f108 31ff 	add.w	r1, r8, #4294967295
 800ffbc:	9104      	str	r1, [sp, #16]
 800ffbe:	3201      	adds	r2, #1
 800ffc0:	465c      	mov	r4, fp
 800ffc2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ffc6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ffca:	ee07 2a90 	vmov	s15, r2
 800ffce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ffd2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ffd6:	ee15 2a90 	vmov	r2, s11
 800ffda:	ec51 0b15 	vmov	r0, r1, d5
 800ffde:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ffe2:	2c00      	cmp	r4, #0
 800ffe4:	f040 8098 	bne.w	8010118 <_dtoa_r+0x4c0>
 800ffe8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ffec:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fff0:	ec41 0b17 	vmov	d7, r0, r1
 800fff4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fffc:	f300 8261 	bgt.w	80104c2 <_dtoa_r+0x86a>
 8010000:	eeb1 7b47 	vneg.f64	d7, d7
 8010004:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801000c:	f100 80f5 	bmi.w	80101fa <_dtoa_r+0x5a2>
 8010010:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010014:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010016:	2a00      	cmp	r2, #0
 8010018:	f2c0 812c 	blt.w	8010274 <_dtoa_r+0x61c>
 801001c:	f1b8 0f0e 	cmp.w	r8, #14
 8010020:	f300 8128 	bgt.w	8010274 <_dtoa_r+0x61c>
 8010024:	4b91      	ldr	r3, [pc, #580]	@ (801026c <_dtoa_r+0x614>)
 8010026:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801002a:	ed93 6b00 	vldr	d6, [r3]
 801002e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010030:	2b00      	cmp	r3, #0
 8010032:	da03      	bge.n	801003c <_dtoa_r+0x3e4>
 8010034:	f1ba 0f00 	cmp.w	sl, #0
 8010038:	f340 80d2 	ble.w	80101e0 <_dtoa_r+0x588>
 801003c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010040:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010044:	463e      	mov	r6, r7
 8010046:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801004a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801004e:	ee15 3a10 	vmov	r3, s10
 8010052:	3330      	adds	r3, #48	@ 0x30
 8010054:	f806 3b01 	strb.w	r3, [r6], #1
 8010058:	1bf3      	subs	r3, r6, r7
 801005a:	459a      	cmp	sl, r3
 801005c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010060:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010064:	f040 80f8 	bne.w	8010258 <_dtoa_r+0x600>
 8010068:	ee37 7b07 	vadd.f64	d7, d7, d7
 801006c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010074:	f300 80dd 	bgt.w	8010232 <_dtoa_r+0x5da>
 8010078:	eeb4 7b46 	vcmp.f64	d7, d6
 801007c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010080:	d104      	bne.n	801008c <_dtoa_r+0x434>
 8010082:	ee15 3a10 	vmov	r3, s10
 8010086:	07db      	lsls	r3, r3, #31
 8010088:	f100 80d3 	bmi.w	8010232 <_dtoa_r+0x5da>
 801008c:	9901      	ldr	r1, [sp, #4]
 801008e:	4648      	mov	r0, r9
 8010090:	f000 ff0e 	bl	8010eb0 <_Bfree>
 8010094:	2300      	movs	r3, #0
 8010096:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010098:	7033      	strb	r3, [r6, #0]
 801009a:	f108 0301 	add.w	r3, r8, #1
 801009e:	6013      	str	r3, [r2, #0]
 80100a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	f000 8304 	beq.w	80106b0 <_dtoa_r+0xa58>
 80100a8:	601e      	str	r6, [r3, #0]
 80100aa:	e301      	b.n	80106b0 <_dtoa_r+0xa58>
 80100ac:	2202      	movs	r2, #2
 80100ae:	e75e      	b.n	800ff6e <_dtoa_r+0x316>
 80100b0:	07cc      	lsls	r4, r1, #31
 80100b2:	d504      	bpl.n	80100be <_dtoa_r+0x466>
 80100b4:	ed90 6b00 	vldr	d6, [r0]
 80100b8:	3201      	adds	r2, #1
 80100ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80100be:	1049      	asrs	r1, r1, #1
 80100c0:	3008      	adds	r0, #8
 80100c2:	e755      	b.n	800ff70 <_dtoa_r+0x318>
 80100c4:	d022      	beq.n	801010c <_dtoa_r+0x4b4>
 80100c6:	f1c8 0100 	rsb	r1, r8, #0
 80100ca:	4a68      	ldr	r2, [pc, #416]	@ (801026c <_dtoa_r+0x614>)
 80100cc:	f001 000f 	and.w	r0, r1, #15
 80100d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80100d4:	ed92 7b00 	vldr	d7, [r2]
 80100d8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80100dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80100e0:	4863      	ldr	r0, [pc, #396]	@ (8010270 <_dtoa_r+0x618>)
 80100e2:	1109      	asrs	r1, r1, #4
 80100e4:	2400      	movs	r4, #0
 80100e6:	2202      	movs	r2, #2
 80100e8:	b929      	cbnz	r1, 80100f6 <_dtoa_r+0x49e>
 80100ea:	2c00      	cmp	r4, #0
 80100ec:	f43f af49 	beq.w	800ff82 <_dtoa_r+0x32a>
 80100f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80100f4:	e745      	b.n	800ff82 <_dtoa_r+0x32a>
 80100f6:	07ce      	lsls	r6, r1, #31
 80100f8:	d505      	bpl.n	8010106 <_dtoa_r+0x4ae>
 80100fa:	ed90 6b00 	vldr	d6, [r0]
 80100fe:	3201      	adds	r2, #1
 8010100:	2401      	movs	r4, #1
 8010102:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010106:	1049      	asrs	r1, r1, #1
 8010108:	3008      	adds	r0, #8
 801010a:	e7ed      	b.n	80100e8 <_dtoa_r+0x490>
 801010c:	2202      	movs	r2, #2
 801010e:	e738      	b.n	800ff82 <_dtoa_r+0x32a>
 8010110:	f8cd 8010 	str.w	r8, [sp, #16]
 8010114:	4654      	mov	r4, sl
 8010116:	e754      	b.n	800ffc2 <_dtoa_r+0x36a>
 8010118:	4a54      	ldr	r2, [pc, #336]	@ (801026c <_dtoa_r+0x614>)
 801011a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801011e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010122:	9a08      	ldr	r2, [sp, #32]
 8010124:	ec41 0b17 	vmov	d7, r0, r1
 8010128:	443c      	add	r4, r7
 801012a:	b34a      	cbz	r2, 8010180 <_dtoa_r+0x528>
 801012c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010130:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010134:	463e      	mov	r6, r7
 8010136:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801013a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801013e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010142:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010146:	ee14 2a90 	vmov	r2, s9
 801014a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801014e:	3230      	adds	r2, #48	@ 0x30
 8010150:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010154:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801015c:	f806 2b01 	strb.w	r2, [r6], #1
 8010160:	d438      	bmi.n	80101d4 <_dtoa_r+0x57c>
 8010162:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010166:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801016a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801016e:	d462      	bmi.n	8010236 <_dtoa_r+0x5de>
 8010170:	42a6      	cmp	r6, r4
 8010172:	f43f af4d 	beq.w	8010010 <_dtoa_r+0x3b8>
 8010176:	ee27 7b03 	vmul.f64	d7, d7, d3
 801017a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801017e:	e7e0      	b.n	8010142 <_dtoa_r+0x4ea>
 8010180:	4621      	mov	r1, r4
 8010182:	463e      	mov	r6, r7
 8010184:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010188:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801018c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010190:	ee14 2a90 	vmov	r2, s9
 8010194:	3230      	adds	r2, #48	@ 0x30
 8010196:	f806 2b01 	strb.w	r2, [r6], #1
 801019a:	42a6      	cmp	r6, r4
 801019c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80101a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80101a4:	d119      	bne.n	80101da <_dtoa_r+0x582>
 80101a6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80101aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80101ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80101b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101b6:	dc3e      	bgt.n	8010236 <_dtoa_r+0x5de>
 80101b8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80101bc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80101c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c4:	f57f af24 	bpl.w	8010010 <_dtoa_r+0x3b8>
 80101c8:	460e      	mov	r6, r1
 80101ca:	3901      	subs	r1, #1
 80101cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80101d0:	2b30      	cmp	r3, #48	@ 0x30
 80101d2:	d0f9      	beq.n	80101c8 <_dtoa_r+0x570>
 80101d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80101d8:	e758      	b.n	801008c <_dtoa_r+0x434>
 80101da:	ee26 6b03 	vmul.f64	d6, d6, d3
 80101de:	e7d5      	b.n	801018c <_dtoa_r+0x534>
 80101e0:	d10b      	bne.n	80101fa <_dtoa_r+0x5a2>
 80101e2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80101e6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80101ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80101ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80101f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f6:	f2c0 8161 	blt.w	80104bc <_dtoa_r+0x864>
 80101fa:	2400      	movs	r4, #0
 80101fc:	4625      	mov	r5, r4
 80101fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010200:	43db      	mvns	r3, r3
 8010202:	9304      	str	r3, [sp, #16]
 8010204:	463e      	mov	r6, r7
 8010206:	f04f 0800 	mov.w	r8, #0
 801020a:	4621      	mov	r1, r4
 801020c:	4648      	mov	r0, r9
 801020e:	f000 fe4f 	bl	8010eb0 <_Bfree>
 8010212:	2d00      	cmp	r5, #0
 8010214:	d0de      	beq.n	80101d4 <_dtoa_r+0x57c>
 8010216:	f1b8 0f00 	cmp.w	r8, #0
 801021a:	d005      	beq.n	8010228 <_dtoa_r+0x5d0>
 801021c:	45a8      	cmp	r8, r5
 801021e:	d003      	beq.n	8010228 <_dtoa_r+0x5d0>
 8010220:	4641      	mov	r1, r8
 8010222:	4648      	mov	r0, r9
 8010224:	f000 fe44 	bl	8010eb0 <_Bfree>
 8010228:	4629      	mov	r1, r5
 801022a:	4648      	mov	r0, r9
 801022c:	f000 fe40 	bl	8010eb0 <_Bfree>
 8010230:	e7d0      	b.n	80101d4 <_dtoa_r+0x57c>
 8010232:	f8cd 8010 	str.w	r8, [sp, #16]
 8010236:	4633      	mov	r3, r6
 8010238:	461e      	mov	r6, r3
 801023a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801023e:	2a39      	cmp	r2, #57	@ 0x39
 8010240:	d106      	bne.n	8010250 <_dtoa_r+0x5f8>
 8010242:	429f      	cmp	r7, r3
 8010244:	d1f8      	bne.n	8010238 <_dtoa_r+0x5e0>
 8010246:	9a04      	ldr	r2, [sp, #16]
 8010248:	3201      	adds	r2, #1
 801024a:	9204      	str	r2, [sp, #16]
 801024c:	2230      	movs	r2, #48	@ 0x30
 801024e:	703a      	strb	r2, [r7, #0]
 8010250:	781a      	ldrb	r2, [r3, #0]
 8010252:	3201      	adds	r2, #1
 8010254:	701a      	strb	r2, [r3, #0]
 8010256:	e7bd      	b.n	80101d4 <_dtoa_r+0x57c>
 8010258:	ee27 7b04 	vmul.f64	d7, d7, d4
 801025c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010264:	f47f aeef 	bne.w	8010046 <_dtoa_r+0x3ee>
 8010268:	e710      	b.n	801008c <_dtoa_r+0x434>
 801026a:	bf00      	nop
 801026c:	08012e78 	.word	0x08012e78
 8010270:	08012e50 	.word	0x08012e50
 8010274:	9908      	ldr	r1, [sp, #32]
 8010276:	2900      	cmp	r1, #0
 8010278:	f000 80e3 	beq.w	8010442 <_dtoa_r+0x7ea>
 801027c:	9907      	ldr	r1, [sp, #28]
 801027e:	2901      	cmp	r1, #1
 8010280:	f300 80c8 	bgt.w	8010414 <_dtoa_r+0x7bc>
 8010284:	2d00      	cmp	r5, #0
 8010286:	f000 80c1 	beq.w	801040c <_dtoa_r+0x7b4>
 801028a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801028e:	9e05      	ldr	r6, [sp, #20]
 8010290:	461c      	mov	r4, r3
 8010292:	9304      	str	r3, [sp, #16]
 8010294:	9b05      	ldr	r3, [sp, #20]
 8010296:	4413      	add	r3, r2
 8010298:	9305      	str	r3, [sp, #20]
 801029a:	9b06      	ldr	r3, [sp, #24]
 801029c:	2101      	movs	r1, #1
 801029e:	4413      	add	r3, r2
 80102a0:	4648      	mov	r0, r9
 80102a2:	9306      	str	r3, [sp, #24]
 80102a4:	f000 ff02 	bl	80110ac <__i2b>
 80102a8:	9b04      	ldr	r3, [sp, #16]
 80102aa:	4605      	mov	r5, r0
 80102ac:	b166      	cbz	r6, 80102c8 <_dtoa_r+0x670>
 80102ae:	9a06      	ldr	r2, [sp, #24]
 80102b0:	2a00      	cmp	r2, #0
 80102b2:	dd09      	ble.n	80102c8 <_dtoa_r+0x670>
 80102b4:	42b2      	cmp	r2, r6
 80102b6:	9905      	ldr	r1, [sp, #20]
 80102b8:	bfa8      	it	ge
 80102ba:	4632      	movge	r2, r6
 80102bc:	1a89      	subs	r1, r1, r2
 80102be:	9105      	str	r1, [sp, #20]
 80102c0:	9906      	ldr	r1, [sp, #24]
 80102c2:	1ab6      	subs	r6, r6, r2
 80102c4:	1a8a      	subs	r2, r1, r2
 80102c6:	9206      	str	r2, [sp, #24]
 80102c8:	b1fb      	cbz	r3, 801030a <_dtoa_r+0x6b2>
 80102ca:	9a08      	ldr	r2, [sp, #32]
 80102cc:	2a00      	cmp	r2, #0
 80102ce:	f000 80bc 	beq.w	801044a <_dtoa_r+0x7f2>
 80102d2:	b19c      	cbz	r4, 80102fc <_dtoa_r+0x6a4>
 80102d4:	4629      	mov	r1, r5
 80102d6:	4622      	mov	r2, r4
 80102d8:	4648      	mov	r0, r9
 80102da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80102dc:	f000 ffa6 	bl	801122c <__pow5mult>
 80102e0:	9a01      	ldr	r2, [sp, #4]
 80102e2:	4601      	mov	r1, r0
 80102e4:	4605      	mov	r5, r0
 80102e6:	4648      	mov	r0, r9
 80102e8:	f000 fef6 	bl	80110d8 <__multiply>
 80102ec:	9901      	ldr	r1, [sp, #4]
 80102ee:	9004      	str	r0, [sp, #16]
 80102f0:	4648      	mov	r0, r9
 80102f2:	f000 fddd 	bl	8010eb0 <_Bfree>
 80102f6:	9a04      	ldr	r2, [sp, #16]
 80102f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102fa:	9201      	str	r2, [sp, #4]
 80102fc:	1b1a      	subs	r2, r3, r4
 80102fe:	d004      	beq.n	801030a <_dtoa_r+0x6b2>
 8010300:	9901      	ldr	r1, [sp, #4]
 8010302:	4648      	mov	r0, r9
 8010304:	f000 ff92 	bl	801122c <__pow5mult>
 8010308:	9001      	str	r0, [sp, #4]
 801030a:	2101      	movs	r1, #1
 801030c:	4648      	mov	r0, r9
 801030e:	f000 fecd 	bl	80110ac <__i2b>
 8010312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010314:	4604      	mov	r4, r0
 8010316:	2b00      	cmp	r3, #0
 8010318:	f000 81d0 	beq.w	80106bc <_dtoa_r+0xa64>
 801031c:	461a      	mov	r2, r3
 801031e:	4601      	mov	r1, r0
 8010320:	4648      	mov	r0, r9
 8010322:	f000 ff83 	bl	801122c <__pow5mult>
 8010326:	9b07      	ldr	r3, [sp, #28]
 8010328:	2b01      	cmp	r3, #1
 801032a:	4604      	mov	r4, r0
 801032c:	f300 8095 	bgt.w	801045a <_dtoa_r+0x802>
 8010330:	9b02      	ldr	r3, [sp, #8]
 8010332:	2b00      	cmp	r3, #0
 8010334:	f040 808b 	bne.w	801044e <_dtoa_r+0x7f6>
 8010338:	9b03      	ldr	r3, [sp, #12]
 801033a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801033e:	2a00      	cmp	r2, #0
 8010340:	f040 8087 	bne.w	8010452 <_dtoa_r+0x7fa>
 8010344:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010348:	0d12      	lsrs	r2, r2, #20
 801034a:	0512      	lsls	r2, r2, #20
 801034c:	2a00      	cmp	r2, #0
 801034e:	f000 8082 	beq.w	8010456 <_dtoa_r+0x7fe>
 8010352:	9b05      	ldr	r3, [sp, #20]
 8010354:	3301      	adds	r3, #1
 8010356:	9305      	str	r3, [sp, #20]
 8010358:	9b06      	ldr	r3, [sp, #24]
 801035a:	3301      	adds	r3, #1
 801035c:	9306      	str	r3, [sp, #24]
 801035e:	2301      	movs	r3, #1
 8010360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010362:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010364:	2b00      	cmp	r3, #0
 8010366:	f000 81af 	beq.w	80106c8 <_dtoa_r+0xa70>
 801036a:	6922      	ldr	r2, [r4, #16]
 801036c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010370:	6910      	ldr	r0, [r2, #16]
 8010372:	f000 fe4f 	bl	8011014 <__hi0bits>
 8010376:	f1c0 0020 	rsb	r0, r0, #32
 801037a:	9b06      	ldr	r3, [sp, #24]
 801037c:	4418      	add	r0, r3
 801037e:	f010 001f 	ands.w	r0, r0, #31
 8010382:	d076      	beq.n	8010472 <_dtoa_r+0x81a>
 8010384:	f1c0 0220 	rsb	r2, r0, #32
 8010388:	2a04      	cmp	r2, #4
 801038a:	dd69      	ble.n	8010460 <_dtoa_r+0x808>
 801038c:	9b05      	ldr	r3, [sp, #20]
 801038e:	f1c0 001c 	rsb	r0, r0, #28
 8010392:	4403      	add	r3, r0
 8010394:	9305      	str	r3, [sp, #20]
 8010396:	9b06      	ldr	r3, [sp, #24]
 8010398:	4406      	add	r6, r0
 801039a:	4403      	add	r3, r0
 801039c:	9306      	str	r3, [sp, #24]
 801039e:	9b05      	ldr	r3, [sp, #20]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	dd05      	ble.n	80103b0 <_dtoa_r+0x758>
 80103a4:	9901      	ldr	r1, [sp, #4]
 80103a6:	461a      	mov	r2, r3
 80103a8:	4648      	mov	r0, r9
 80103aa:	f000 ff99 	bl	80112e0 <__lshift>
 80103ae:	9001      	str	r0, [sp, #4]
 80103b0:	9b06      	ldr	r3, [sp, #24]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	dd05      	ble.n	80103c2 <_dtoa_r+0x76a>
 80103b6:	4621      	mov	r1, r4
 80103b8:	461a      	mov	r2, r3
 80103ba:	4648      	mov	r0, r9
 80103bc:	f000 ff90 	bl	80112e0 <__lshift>
 80103c0:	4604      	mov	r4, r0
 80103c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d056      	beq.n	8010476 <_dtoa_r+0x81e>
 80103c8:	9801      	ldr	r0, [sp, #4]
 80103ca:	4621      	mov	r1, r4
 80103cc:	f000 fff4 	bl	80113b8 <__mcmp>
 80103d0:	2800      	cmp	r0, #0
 80103d2:	da50      	bge.n	8010476 <_dtoa_r+0x81e>
 80103d4:	f108 33ff 	add.w	r3, r8, #4294967295
 80103d8:	9304      	str	r3, [sp, #16]
 80103da:	9901      	ldr	r1, [sp, #4]
 80103dc:	2300      	movs	r3, #0
 80103de:	220a      	movs	r2, #10
 80103e0:	4648      	mov	r0, r9
 80103e2:	f000 fd87 	bl	8010ef4 <__multadd>
 80103e6:	9b08      	ldr	r3, [sp, #32]
 80103e8:	9001      	str	r0, [sp, #4]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	f000 816e 	beq.w	80106cc <_dtoa_r+0xa74>
 80103f0:	4629      	mov	r1, r5
 80103f2:	2300      	movs	r3, #0
 80103f4:	220a      	movs	r2, #10
 80103f6:	4648      	mov	r0, r9
 80103f8:	f000 fd7c 	bl	8010ef4 <__multadd>
 80103fc:	f1bb 0f00 	cmp.w	fp, #0
 8010400:	4605      	mov	r5, r0
 8010402:	dc64      	bgt.n	80104ce <_dtoa_r+0x876>
 8010404:	9b07      	ldr	r3, [sp, #28]
 8010406:	2b02      	cmp	r3, #2
 8010408:	dc3e      	bgt.n	8010488 <_dtoa_r+0x830>
 801040a:	e060      	b.n	80104ce <_dtoa_r+0x876>
 801040c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801040e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010412:	e73c      	b.n	801028e <_dtoa_r+0x636>
 8010414:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010418:	42a3      	cmp	r3, r4
 801041a:	bfbf      	itttt	lt
 801041c:	1ae2      	sublt	r2, r4, r3
 801041e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010420:	189b      	addlt	r3, r3, r2
 8010422:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010424:	bfae      	itee	ge
 8010426:	1b1c      	subge	r4, r3, r4
 8010428:	4623      	movlt	r3, r4
 801042a:	2400      	movlt	r4, #0
 801042c:	f1ba 0f00 	cmp.w	sl, #0
 8010430:	bfb5      	itete	lt
 8010432:	9a05      	ldrlt	r2, [sp, #20]
 8010434:	9e05      	ldrge	r6, [sp, #20]
 8010436:	eba2 060a 	sublt.w	r6, r2, sl
 801043a:	4652      	movge	r2, sl
 801043c:	bfb8      	it	lt
 801043e:	2200      	movlt	r2, #0
 8010440:	e727      	b.n	8010292 <_dtoa_r+0x63a>
 8010442:	9e05      	ldr	r6, [sp, #20]
 8010444:	9d08      	ldr	r5, [sp, #32]
 8010446:	461c      	mov	r4, r3
 8010448:	e730      	b.n	80102ac <_dtoa_r+0x654>
 801044a:	461a      	mov	r2, r3
 801044c:	e758      	b.n	8010300 <_dtoa_r+0x6a8>
 801044e:	2300      	movs	r3, #0
 8010450:	e786      	b.n	8010360 <_dtoa_r+0x708>
 8010452:	9b02      	ldr	r3, [sp, #8]
 8010454:	e784      	b.n	8010360 <_dtoa_r+0x708>
 8010456:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010458:	e783      	b.n	8010362 <_dtoa_r+0x70a>
 801045a:	2300      	movs	r3, #0
 801045c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801045e:	e784      	b.n	801036a <_dtoa_r+0x712>
 8010460:	d09d      	beq.n	801039e <_dtoa_r+0x746>
 8010462:	9b05      	ldr	r3, [sp, #20]
 8010464:	321c      	adds	r2, #28
 8010466:	4413      	add	r3, r2
 8010468:	9305      	str	r3, [sp, #20]
 801046a:	9b06      	ldr	r3, [sp, #24]
 801046c:	4416      	add	r6, r2
 801046e:	4413      	add	r3, r2
 8010470:	e794      	b.n	801039c <_dtoa_r+0x744>
 8010472:	4602      	mov	r2, r0
 8010474:	e7f5      	b.n	8010462 <_dtoa_r+0x80a>
 8010476:	f1ba 0f00 	cmp.w	sl, #0
 801047a:	f8cd 8010 	str.w	r8, [sp, #16]
 801047e:	46d3      	mov	fp, sl
 8010480:	dc21      	bgt.n	80104c6 <_dtoa_r+0x86e>
 8010482:	9b07      	ldr	r3, [sp, #28]
 8010484:	2b02      	cmp	r3, #2
 8010486:	dd1e      	ble.n	80104c6 <_dtoa_r+0x86e>
 8010488:	f1bb 0f00 	cmp.w	fp, #0
 801048c:	f47f aeb7 	bne.w	80101fe <_dtoa_r+0x5a6>
 8010490:	4621      	mov	r1, r4
 8010492:	465b      	mov	r3, fp
 8010494:	2205      	movs	r2, #5
 8010496:	4648      	mov	r0, r9
 8010498:	f000 fd2c 	bl	8010ef4 <__multadd>
 801049c:	4601      	mov	r1, r0
 801049e:	4604      	mov	r4, r0
 80104a0:	9801      	ldr	r0, [sp, #4]
 80104a2:	f000 ff89 	bl	80113b8 <__mcmp>
 80104a6:	2800      	cmp	r0, #0
 80104a8:	f77f aea9 	ble.w	80101fe <_dtoa_r+0x5a6>
 80104ac:	463e      	mov	r6, r7
 80104ae:	2331      	movs	r3, #49	@ 0x31
 80104b0:	f806 3b01 	strb.w	r3, [r6], #1
 80104b4:	9b04      	ldr	r3, [sp, #16]
 80104b6:	3301      	adds	r3, #1
 80104b8:	9304      	str	r3, [sp, #16]
 80104ba:	e6a4      	b.n	8010206 <_dtoa_r+0x5ae>
 80104bc:	f8cd 8010 	str.w	r8, [sp, #16]
 80104c0:	4654      	mov	r4, sl
 80104c2:	4625      	mov	r5, r4
 80104c4:	e7f2      	b.n	80104ac <_dtoa_r+0x854>
 80104c6:	9b08      	ldr	r3, [sp, #32]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	f000 8103 	beq.w	80106d4 <_dtoa_r+0xa7c>
 80104ce:	2e00      	cmp	r6, #0
 80104d0:	dd05      	ble.n	80104de <_dtoa_r+0x886>
 80104d2:	4629      	mov	r1, r5
 80104d4:	4632      	mov	r2, r6
 80104d6:	4648      	mov	r0, r9
 80104d8:	f000 ff02 	bl	80112e0 <__lshift>
 80104dc:	4605      	mov	r5, r0
 80104de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d058      	beq.n	8010596 <_dtoa_r+0x93e>
 80104e4:	6869      	ldr	r1, [r5, #4]
 80104e6:	4648      	mov	r0, r9
 80104e8:	f000 fca2 	bl	8010e30 <_Balloc>
 80104ec:	4606      	mov	r6, r0
 80104ee:	b928      	cbnz	r0, 80104fc <_dtoa_r+0x8a4>
 80104f0:	4b82      	ldr	r3, [pc, #520]	@ (80106fc <_dtoa_r+0xaa4>)
 80104f2:	4602      	mov	r2, r0
 80104f4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80104f8:	f7ff bbc7 	b.w	800fc8a <_dtoa_r+0x32>
 80104fc:	692a      	ldr	r2, [r5, #16]
 80104fe:	3202      	adds	r2, #2
 8010500:	0092      	lsls	r2, r2, #2
 8010502:	f105 010c 	add.w	r1, r5, #12
 8010506:	300c      	adds	r0, #12
 8010508:	f7ff fafd 	bl	800fb06 <memcpy>
 801050c:	2201      	movs	r2, #1
 801050e:	4631      	mov	r1, r6
 8010510:	4648      	mov	r0, r9
 8010512:	f000 fee5 	bl	80112e0 <__lshift>
 8010516:	1c7b      	adds	r3, r7, #1
 8010518:	9305      	str	r3, [sp, #20]
 801051a:	eb07 030b 	add.w	r3, r7, fp
 801051e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010520:	9b02      	ldr	r3, [sp, #8]
 8010522:	f003 0301 	and.w	r3, r3, #1
 8010526:	46a8      	mov	r8, r5
 8010528:	9308      	str	r3, [sp, #32]
 801052a:	4605      	mov	r5, r0
 801052c:	9b05      	ldr	r3, [sp, #20]
 801052e:	9801      	ldr	r0, [sp, #4]
 8010530:	4621      	mov	r1, r4
 8010532:	f103 3bff 	add.w	fp, r3, #4294967295
 8010536:	f7ff fb05 	bl	800fb44 <quorem>
 801053a:	4641      	mov	r1, r8
 801053c:	9002      	str	r0, [sp, #8]
 801053e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010542:	9801      	ldr	r0, [sp, #4]
 8010544:	f000 ff38 	bl	80113b8 <__mcmp>
 8010548:	462a      	mov	r2, r5
 801054a:	9006      	str	r0, [sp, #24]
 801054c:	4621      	mov	r1, r4
 801054e:	4648      	mov	r0, r9
 8010550:	f000 ff4e 	bl	80113f0 <__mdiff>
 8010554:	68c2      	ldr	r2, [r0, #12]
 8010556:	4606      	mov	r6, r0
 8010558:	b9fa      	cbnz	r2, 801059a <_dtoa_r+0x942>
 801055a:	4601      	mov	r1, r0
 801055c:	9801      	ldr	r0, [sp, #4]
 801055e:	f000 ff2b 	bl	80113b8 <__mcmp>
 8010562:	4602      	mov	r2, r0
 8010564:	4631      	mov	r1, r6
 8010566:	4648      	mov	r0, r9
 8010568:	920a      	str	r2, [sp, #40]	@ 0x28
 801056a:	f000 fca1 	bl	8010eb0 <_Bfree>
 801056e:	9b07      	ldr	r3, [sp, #28]
 8010570:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010572:	9e05      	ldr	r6, [sp, #20]
 8010574:	ea43 0102 	orr.w	r1, r3, r2
 8010578:	9b08      	ldr	r3, [sp, #32]
 801057a:	4319      	orrs	r1, r3
 801057c:	d10f      	bne.n	801059e <_dtoa_r+0x946>
 801057e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010582:	d028      	beq.n	80105d6 <_dtoa_r+0x97e>
 8010584:	9b06      	ldr	r3, [sp, #24]
 8010586:	2b00      	cmp	r3, #0
 8010588:	dd02      	ble.n	8010590 <_dtoa_r+0x938>
 801058a:	9b02      	ldr	r3, [sp, #8]
 801058c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010590:	f88b a000 	strb.w	sl, [fp]
 8010594:	e639      	b.n	801020a <_dtoa_r+0x5b2>
 8010596:	4628      	mov	r0, r5
 8010598:	e7bd      	b.n	8010516 <_dtoa_r+0x8be>
 801059a:	2201      	movs	r2, #1
 801059c:	e7e2      	b.n	8010564 <_dtoa_r+0x90c>
 801059e:	9b06      	ldr	r3, [sp, #24]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	db04      	blt.n	80105ae <_dtoa_r+0x956>
 80105a4:	9907      	ldr	r1, [sp, #28]
 80105a6:	430b      	orrs	r3, r1
 80105a8:	9908      	ldr	r1, [sp, #32]
 80105aa:	430b      	orrs	r3, r1
 80105ac:	d120      	bne.n	80105f0 <_dtoa_r+0x998>
 80105ae:	2a00      	cmp	r2, #0
 80105b0:	ddee      	ble.n	8010590 <_dtoa_r+0x938>
 80105b2:	9901      	ldr	r1, [sp, #4]
 80105b4:	2201      	movs	r2, #1
 80105b6:	4648      	mov	r0, r9
 80105b8:	f000 fe92 	bl	80112e0 <__lshift>
 80105bc:	4621      	mov	r1, r4
 80105be:	9001      	str	r0, [sp, #4]
 80105c0:	f000 fefa 	bl	80113b8 <__mcmp>
 80105c4:	2800      	cmp	r0, #0
 80105c6:	dc03      	bgt.n	80105d0 <_dtoa_r+0x978>
 80105c8:	d1e2      	bne.n	8010590 <_dtoa_r+0x938>
 80105ca:	f01a 0f01 	tst.w	sl, #1
 80105ce:	d0df      	beq.n	8010590 <_dtoa_r+0x938>
 80105d0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80105d4:	d1d9      	bne.n	801058a <_dtoa_r+0x932>
 80105d6:	2339      	movs	r3, #57	@ 0x39
 80105d8:	f88b 3000 	strb.w	r3, [fp]
 80105dc:	4633      	mov	r3, r6
 80105de:	461e      	mov	r6, r3
 80105e0:	3b01      	subs	r3, #1
 80105e2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80105e6:	2a39      	cmp	r2, #57	@ 0x39
 80105e8:	d053      	beq.n	8010692 <_dtoa_r+0xa3a>
 80105ea:	3201      	adds	r2, #1
 80105ec:	701a      	strb	r2, [r3, #0]
 80105ee:	e60c      	b.n	801020a <_dtoa_r+0x5b2>
 80105f0:	2a00      	cmp	r2, #0
 80105f2:	dd07      	ble.n	8010604 <_dtoa_r+0x9ac>
 80105f4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80105f8:	d0ed      	beq.n	80105d6 <_dtoa_r+0x97e>
 80105fa:	f10a 0301 	add.w	r3, sl, #1
 80105fe:	f88b 3000 	strb.w	r3, [fp]
 8010602:	e602      	b.n	801020a <_dtoa_r+0x5b2>
 8010604:	9b05      	ldr	r3, [sp, #20]
 8010606:	9a05      	ldr	r2, [sp, #20]
 8010608:	f803 ac01 	strb.w	sl, [r3, #-1]
 801060c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801060e:	4293      	cmp	r3, r2
 8010610:	d029      	beq.n	8010666 <_dtoa_r+0xa0e>
 8010612:	9901      	ldr	r1, [sp, #4]
 8010614:	2300      	movs	r3, #0
 8010616:	220a      	movs	r2, #10
 8010618:	4648      	mov	r0, r9
 801061a:	f000 fc6b 	bl	8010ef4 <__multadd>
 801061e:	45a8      	cmp	r8, r5
 8010620:	9001      	str	r0, [sp, #4]
 8010622:	f04f 0300 	mov.w	r3, #0
 8010626:	f04f 020a 	mov.w	r2, #10
 801062a:	4641      	mov	r1, r8
 801062c:	4648      	mov	r0, r9
 801062e:	d107      	bne.n	8010640 <_dtoa_r+0x9e8>
 8010630:	f000 fc60 	bl	8010ef4 <__multadd>
 8010634:	4680      	mov	r8, r0
 8010636:	4605      	mov	r5, r0
 8010638:	9b05      	ldr	r3, [sp, #20]
 801063a:	3301      	adds	r3, #1
 801063c:	9305      	str	r3, [sp, #20]
 801063e:	e775      	b.n	801052c <_dtoa_r+0x8d4>
 8010640:	f000 fc58 	bl	8010ef4 <__multadd>
 8010644:	4629      	mov	r1, r5
 8010646:	4680      	mov	r8, r0
 8010648:	2300      	movs	r3, #0
 801064a:	220a      	movs	r2, #10
 801064c:	4648      	mov	r0, r9
 801064e:	f000 fc51 	bl	8010ef4 <__multadd>
 8010652:	4605      	mov	r5, r0
 8010654:	e7f0      	b.n	8010638 <_dtoa_r+0x9e0>
 8010656:	f1bb 0f00 	cmp.w	fp, #0
 801065a:	bfcc      	ite	gt
 801065c:	465e      	movgt	r6, fp
 801065e:	2601      	movle	r6, #1
 8010660:	443e      	add	r6, r7
 8010662:	f04f 0800 	mov.w	r8, #0
 8010666:	9901      	ldr	r1, [sp, #4]
 8010668:	2201      	movs	r2, #1
 801066a:	4648      	mov	r0, r9
 801066c:	f000 fe38 	bl	80112e0 <__lshift>
 8010670:	4621      	mov	r1, r4
 8010672:	9001      	str	r0, [sp, #4]
 8010674:	f000 fea0 	bl	80113b8 <__mcmp>
 8010678:	2800      	cmp	r0, #0
 801067a:	dcaf      	bgt.n	80105dc <_dtoa_r+0x984>
 801067c:	d102      	bne.n	8010684 <_dtoa_r+0xa2c>
 801067e:	f01a 0f01 	tst.w	sl, #1
 8010682:	d1ab      	bne.n	80105dc <_dtoa_r+0x984>
 8010684:	4633      	mov	r3, r6
 8010686:	461e      	mov	r6, r3
 8010688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801068c:	2a30      	cmp	r2, #48	@ 0x30
 801068e:	d0fa      	beq.n	8010686 <_dtoa_r+0xa2e>
 8010690:	e5bb      	b.n	801020a <_dtoa_r+0x5b2>
 8010692:	429f      	cmp	r7, r3
 8010694:	d1a3      	bne.n	80105de <_dtoa_r+0x986>
 8010696:	9b04      	ldr	r3, [sp, #16]
 8010698:	3301      	adds	r3, #1
 801069a:	9304      	str	r3, [sp, #16]
 801069c:	2331      	movs	r3, #49	@ 0x31
 801069e:	703b      	strb	r3, [r7, #0]
 80106a0:	e5b3      	b.n	801020a <_dtoa_r+0x5b2>
 80106a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80106a4:	4f16      	ldr	r7, [pc, #88]	@ (8010700 <_dtoa_r+0xaa8>)
 80106a6:	b11b      	cbz	r3, 80106b0 <_dtoa_r+0xa58>
 80106a8:	f107 0308 	add.w	r3, r7, #8
 80106ac:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80106ae:	6013      	str	r3, [r2, #0]
 80106b0:	4638      	mov	r0, r7
 80106b2:	b011      	add	sp, #68	@ 0x44
 80106b4:	ecbd 8b02 	vpop	{d8}
 80106b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106bc:	9b07      	ldr	r3, [sp, #28]
 80106be:	2b01      	cmp	r3, #1
 80106c0:	f77f ae36 	ble.w	8010330 <_dtoa_r+0x6d8>
 80106c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80106c8:	2001      	movs	r0, #1
 80106ca:	e656      	b.n	801037a <_dtoa_r+0x722>
 80106cc:	f1bb 0f00 	cmp.w	fp, #0
 80106d0:	f77f aed7 	ble.w	8010482 <_dtoa_r+0x82a>
 80106d4:	463e      	mov	r6, r7
 80106d6:	9801      	ldr	r0, [sp, #4]
 80106d8:	4621      	mov	r1, r4
 80106da:	f7ff fa33 	bl	800fb44 <quorem>
 80106de:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80106e2:	f806 ab01 	strb.w	sl, [r6], #1
 80106e6:	1bf2      	subs	r2, r6, r7
 80106e8:	4593      	cmp	fp, r2
 80106ea:	ddb4      	ble.n	8010656 <_dtoa_r+0x9fe>
 80106ec:	9901      	ldr	r1, [sp, #4]
 80106ee:	2300      	movs	r3, #0
 80106f0:	220a      	movs	r2, #10
 80106f2:	4648      	mov	r0, r9
 80106f4:	f000 fbfe 	bl	8010ef4 <__multadd>
 80106f8:	9001      	str	r0, [sp, #4]
 80106fa:	e7ec      	b.n	80106d6 <_dtoa_r+0xa7e>
 80106fc:	08012d73 	.word	0x08012d73
 8010700:	08012cf7 	.word	0x08012cf7

08010704 <_free_r>:
 8010704:	b538      	push	{r3, r4, r5, lr}
 8010706:	4605      	mov	r5, r0
 8010708:	2900      	cmp	r1, #0
 801070a:	d041      	beq.n	8010790 <_free_r+0x8c>
 801070c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010710:	1f0c      	subs	r4, r1, #4
 8010712:	2b00      	cmp	r3, #0
 8010714:	bfb8      	it	lt
 8010716:	18e4      	addlt	r4, r4, r3
 8010718:	f7fd fbee 	bl	800def8 <__malloc_lock>
 801071c:	4a1d      	ldr	r2, [pc, #116]	@ (8010794 <_free_r+0x90>)
 801071e:	6813      	ldr	r3, [r2, #0]
 8010720:	b933      	cbnz	r3, 8010730 <_free_r+0x2c>
 8010722:	6063      	str	r3, [r4, #4]
 8010724:	6014      	str	r4, [r2, #0]
 8010726:	4628      	mov	r0, r5
 8010728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801072c:	f7fd bbea 	b.w	800df04 <__malloc_unlock>
 8010730:	42a3      	cmp	r3, r4
 8010732:	d908      	bls.n	8010746 <_free_r+0x42>
 8010734:	6820      	ldr	r0, [r4, #0]
 8010736:	1821      	adds	r1, r4, r0
 8010738:	428b      	cmp	r3, r1
 801073a:	bf01      	itttt	eq
 801073c:	6819      	ldreq	r1, [r3, #0]
 801073e:	685b      	ldreq	r3, [r3, #4]
 8010740:	1809      	addeq	r1, r1, r0
 8010742:	6021      	streq	r1, [r4, #0]
 8010744:	e7ed      	b.n	8010722 <_free_r+0x1e>
 8010746:	461a      	mov	r2, r3
 8010748:	685b      	ldr	r3, [r3, #4]
 801074a:	b10b      	cbz	r3, 8010750 <_free_r+0x4c>
 801074c:	42a3      	cmp	r3, r4
 801074e:	d9fa      	bls.n	8010746 <_free_r+0x42>
 8010750:	6811      	ldr	r1, [r2, #0]
 8010752:	1850      	adds	r0, r2, r1
 8010754:	42a0      	cmp	r0, r4
 8010756:	d10b      	bne.n	8010770 <_free_r+0x6c>
 8010758:	6820      	ldr	r0, [r4, #0]
 801075a:	4401      	add	r1, r0
 801075c:	1850      	adds	r0, r2, r1
 801075e:	4283      	cmp	r3, r0
 8010760:	6011      	str	r1, [r2, #0]
 8010762:	d1e0      	bne.n	8010726 <_free_r+0x22>
 8010764:	6818      	ldr	r0, [r3, #0]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	6053      	str	r3, [r2, #4]
 801076a:	4408      	add	r0, r1
 801076c:	6010      	str	r0, [r2, #0]
 801076e:	e7da      	b.n	8010726 <_free_r+0x22>
 8010770:	d902      	bls.n	8010778 <_free_r+0x74>
 8010772:	230c      	movs	r3, #12
 8010774:	602b      	str	r3, [r5, #0]
 8010776:	e7d6      	b.n	8010726 <_free_r+0x22>
 8010778:	6820      	ldr	r0, [r4, #0]
 801077a:	1821      	adds	r1, r4, r0
 801077c:	428b      	cmp	r3, r1
 801077e:	bf04      	itt	eq
 8010780:	6819      	ldreq	r1, [r3, #0]
 8010782:	685b      	ldreq	r3, [r3, #4]
 8010784:	6063      	str	r3, [r4, #4]
 8010786:	bf04      	itt	eq
 8010788:	1809      	addeq	r1, r1, r0
 801078a:	6021      	streq	r1, [r4, #0]
 801078c:	6054      	str	r4, [r2, #4]
 801078e:	e7ca      	b.n	8010726 <_free_r+0x22>
 8010790:	bd38      	pop	{r3, r4, r5, pc}
 8010792:	bf00      	nop
 8010794:	24000d1c 	.word	0x24000d1c

08010798 <rshift>:
 8010798:	6903      	ldr	r3, [r0, #16]
 801079a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801079e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80107a6:	f100 0414 	add.w	r4, r0, #20
 80107aa:	dd45      	ble.n	8010838 <rshift+0xa0>
 80107ac:	f011 011f 	ands.w	r1, r1, #31
 80107b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80107b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80107b8:	d10c      	bne.n	80107d4 <rshift+0x3c>
 80107ba:	f100 0710 	add.w	r7, r0, #16
 80107be:	4629      	mov	r1, r5
 80107c0:	42b1      	cmp	r1, r6
 80107c2:	d334      	bcc.n	801082e <rshift+0x96>
 80107c4:	1a9b      	subs	r3, r3, r2
 80107c6:	009b      	lsls	r3, r3, #2
 80107c8:	1eea      	subs	r2, r5, #3
 80107ca:	4296      	cmp	r6, r2
 80107cc:	bf38      	it	cc
 80107ce:	2300      	movcc	r3, #0
 80107d0:	4423      	add	r3, r4
 80107d2:	e015      	b.n	8010800 <rshift+0x68>
 80107d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80107d8:	f1c1 0820 	rsb	r8, r1, #32
 80107dc:	40cf      	lsrs	r7, r1
 80107de:	f105 0e04 	add.w	lr, r5, #4
 80107e2:	46a1      	mov	r9, r4
 80107e4:	4576      	cmp	r6, lr
 80107e6:	46f4      	mov	ip, lr
 80107e8:	d815      	bhi.n	8010816 <rshift+0x7e>
 80107ea:	1a9a      	subs	r2, r3, r2
 80107ec:	0092      	lsls	r2, r2, #2
 80107ee:	3a04      	subs	r2, #4
 80107f0:	3501      	adds	r5, #1
 80107f2:	42ae      	cmp	r6, r5
 80107f4:	bf38      	it	cc
 80107f6:	2200      	movcc	r2, #0
 80107f8:	18a3      	adds	r3, r4, r2
 80107fa:	50a7      	str	r7, [r4, r2]
 80107fc:	b107      	cbz	r7, 8010800 <rshift+0x68>
 80107fe:	3304      	adds	r3, #4
 8010800:	1b1a      	subs	r2, r3, r4
 8010802:	42a3      	cmp	r3, r4
 8010804:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010808:	bf08      	it	eq
 801080a:	2300      	moveq	r3, #0
 801080c:	6102      	str	r2, [r0, #16]
 801080e:	bf08      	it	eq
 8010810:	6143      	streq	r3, [r0, #20]
 8010812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010816:	f8dc c000 	ldr.w	ip, [ip]
 801081a:	fa0c fc08 	lsl.w	ip, ip, r8
 801081e:	ea4c 0707 	orr.w	r7, ip, r7
 8010822:	f849 7b04 	str.w	r7, [r9], #4
 8010826:	f85e 7b04 	ldr.w	r7, [lr], #4
 801082a:	40cf      	lsrs	r7, r1
 801082c:	e7da      	b.n	80107e4 <rshift+0x4c>
 801082e:	f851 cb04 	ldr.w	ip, [r1], #4
 8010832:	f847 cf04 	str.w	ip, [r7, #4]!
 8010836:	e7c3      	b.n	80107c0 <rshift+0x28>
 8010838:	4623      	mov	r3, r4
 801083a:	e7e1      	b.n	8010800 <rshift+0x68>

0801083c <__hexdig_fun>:
 801083c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010840:	2b09      	cmp	r3, #9
 8010842:	d802      	bhi.n	801084a <__hexdig_fun+0xe>
 8010844:	3820      	subs	r0, #32
 8010846:	b2c0      	uxtb	r0, r0
 8010848:	4770      	bx	lr
 801084a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801084e:	2b05      	cmp	r3, #5
 8010850:	d801      	bhi.n	8010856 <__hexdig_fun+0x1a>
 8010852:	3847      	subs	r0, #71	@ 0x47
 8010854:	e7f7      	b.n	8010846 <__hexdig_fun+0xa>
 8010856:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801085a:	2b05      	cmp	r3, #5
 801085c:	d801      	bhi.n	8010862 <__hexdig_fun+0x26>
 801085e:	3827      	subs	r0, #39	@ 0x27
 8010860:	e7f1      	b.n	8010846 <__hexdig_fun+0xa>
 8010862:	2000      	movs	r0, #0
 8010864:	4770      	bx	lr
	...

08010868 <__gethex>:
 8010868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801086c:	b085      	sub	sp, #20
 801086e:	468a      	mov	sl, r1
 8010870:	9302      	str	r3, [sp, #8]
 8010872:	680b      	ldr	r3, [r1, #0]
 8010874:	9001      	str	r0, [sp, #4]
 8010876:	4690      	mov	r8, r2
 8010878:	1c9c      	adds	r4, r3, #2
 801087a:	46a1      	mov	r9, r4
 801087c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010880:	2830      	cmp	r0, #48	@ 0x30
 8010882:	d0fa      	beq.n	801087a <__gethex+0x12>
 8010884:	eba9 0303 	sub.w	r3, r9, r3
 8010888:	f1a3 0b02 	sub.w	fp, r3, #2
 801088c:	f7ff ffd6 	bl	801083c <__hexdig_fun>
 8010890:	4605      	mov	r5, r0
 8010892:	2800      	cmp	r0, #0
 8010894:	d168      	bne.n	8010968 <__gethex+0x100>
 8010896:	49a0      	ldr	r1, [pc, #640]	@ (8010b18 <__gethex+0x2b0>)
 8010898:	2201      	movs	r2, #1
 801089a:	4648      	mov	r0, r9
 801089c:	f7ff f89a 	bl	800f9d4 <strncmp>
 80108a0:	4607      	mov	r7, r0
 80108a2:	2800      	cmp	r0, #0
 80108a4:	d167      	bne.n	8010976 <__gethex+0x10e>
 80108a6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80108aa:	4626      	mov	r6, r4
 80108ac:	f7ff ffc6 	bl	801083c <__hexdig_fun>
 80108b0:	2800      	cmp	r0, #0
 80108b2:	d062      	beq.n	801097a <__gethex+0x112>
 80108b4:	4623      	mov	r3, r4
 80108b6:	7818      	ldrb	r0, [r3, #0]
 80108b8:	2830      	cmp	r0, #48	@ 0x30
 80108ba:	4699      	mov	r9, r3
 80108bc:	f103 0301 	add.w	r3, r3, #1
 80108c0:	d0f9      	beq.n	80108b6 <__gethex+0x4e>
 80108c2:	f7ff ffbb 	bl	801083c <__hexdig_fun>
 80108c6:	fab0 f580 	clz	r5, r0
 80108ca:	096d      	lsrs	r5, r5, #5
 80108cc:	f04f 0b01 	mov.w	fp, #1
 80108d0:	464a      	mov	r2, r9
 80108d2:	4616      	mov	r6, r2
 80108d4:	3201      	adds	r2, #1
 80108d6:	7830      	ldrb	r0, [r6, #0]
 80108d8:	f7ff ffb0 	bl	801083c <__hexdig_fun>
 80108dc:	2800      	cmp	r0, #0
 80108de:	d1f8      	bne.n	80108d2 <__gethex+0x6a>
 80108e0:	498d      	ldr	r1, [pc, #564]	@ (8010b18 <__gethex+0x2b0>)
 80108e2:	2201      	movs	r2, #1
 80108e4:	4630      	mov	r0, r6
 80108e6:	f7ff f875 	bl	800f9d4 <strncmp>
 80108ea:	2800      	cmp	r0, #0
 80108ec:	d13f      	bne.n	801096e <__gethex+0x106>
 80108ee:	b944      	cbnz	r4, 8010902 <__gethex+0x9a>
 80108f0:	1c74      	adds	r4, r6, #1
 80108f2:	4622      	mov	r2, r4
 80108f4:	4616      	mov	r6, r2
 80108f6:	3201      	adds	r2, #1
 80108f8:	7830      	ldrb	r0, [r6, #0]
 80108fa:	f7ff ff9f 	bl	801083c <__hexdig_fun>
 80108fe:	2800      	cmp	r0, #0
 8010900:	d1f8      	bne.n	80108f4 <__gethex+0x8c>
 8010902:	1ba4      	subs	r4, r4, r6
 8010904:	00a7      	lsls	r7, r4, #2
 8010906:	7833      	ldrb	r3, [r6, #0]
 8010908:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801090c:	2b50      	cmp	r3, #80	@ 0x50
 801090e:	d13e      	bne.n	801098e <__gethex+0x126>
 8010910:	7873      	ldrb	r3, [r6, #1]
 8010912:	2b2b      	cmp	r3, #43	@ 0x2b
 8010914:	d033      	beq.n	801097e <__gethex+0x116>
 8010916:	2b2d      	cmp	r3, #45	@ 0x2d
 8010918:	d034      	beq.n	8010984 <__gethex+0x11c>
 801091a:	1c71      	adds	r1, r6, #1
 801091c:	2400      	movs	r4, #0
 801091e:	7808      	ldrb	r0, [r1, #0]
 8010920:	f7ff ff8c 	bl	801083c <__hexdig_fun>
 8010924:	1e43      	subs	r3, r0, #1
 8010926:	b2db      	uxtb	r3, r3
 8010928:	2b18      	cmp	r3, #24
 801092a:	d830      	bhi.n	801098e <__gethex+0x126>
 801092c:	f1a0 0210 	sub.w	r2, r0, #16
 8010930:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010934:	f7ff ff82 	bl	801083c <__hexdig_fun>
 8010938:	f100 3cff 	add.w	ip, r0, #4294967295
 801093c:	fa5f fc8c 	uxtb.w	ip, ip
 8010940:	f1bc 0f18 	cmp.w	ip, #24
 8010944:	f04f 030a 	mov.w	r3, #10
 8010948:	d91e      	bls.n	8010988 <__gethex+0x120>
 801094a:	b104      	cbz	r4, 801094e <__gethex+0xe6>
 801094c:	4252      	negs	r2, r2
 801094e:	4417      	add	r7, r2
 8010950:	f8ca 1000 	str.w	r1, [sl]
 8010954:	b1ed      	cbz	r5, 8010992 <__gethex+0x12a>
 8010956:	f1bb 0f00 	cmp.w	fp, #0
 801095a:	bf0c      	ite	eq
 801095c:	2506      	moveq	r5, #6
 801095e:	2500      	movne	r5, #0
 8010960:	4628      	mov	r0, r5
 8010962:	b005      	add	sp, #20
 8010964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010968:	2500      	movs	r5, #0
 801096a:	462c      	mov	r4, r5
 801096c:	e7b0      	b.n	80108d0 <__gethex+0x68>
 801096e:	2c00      	cmp	r4, #0
 8010970:	d1c7      	bne.n	8010902 <__gethex+0x9a>
 8010972:	4627      	mov	r7, r4
 8010974:	e7c7      	b.n	8010906 <__gethex+0x9e>
 8010976:	464e      	mov	r6, r9
 8010978:	462f      	mov	r7, r5
 801097a:	2501      	movs	r5, #1
 801097c:	e7c3      	b.n	8010906 <__gethex+0x9e>
 801097e:	2400      	movs	r4, #0
 8010980:	1cb1      	adds	r1, r6, #2
 8010982:	e7cc      	b.n	801091e <__gethex+0xb6>
 8010984:	2401      	movs	r4, #1
 8010986:	e7fb      	b.n	8010980 <__gethex+0x118>
 8010988:	fb03 0002 	mla	r0, r3, r2, r0
 801098c:	e7ce      	b.n	801092c <__gethex+0xc4>
 801098e:	4631      	mov	r1, r6
 8010990:	e7de      	b.n	8010950 <__gethex+0xe8>
 8010992:	eba6 0309 	sub.w	r3, r6, r9
 8010996:	3b01      	subs	r3, #1
 8010998:	4629      	mov	r1, r5
 801099a:	2b07      	cmp	r3, #7
 801099c:	dc0a      	bgt.n	80109b4 <__gethex+0x14c>
 801099e:	9801      	ldr	r0, [sp, #4]
 80109a0:	f000 fa46 	bl	8010e30 <_Balloc>
 80109a4:	4604      	mov	r4, r0
 80109a6:	b940      	cbnz	r0, 80109ba <__gethex+0x152>
 80109a8:	4b5c      	ldr	r3, [pc, #368]	@ (8010b1c <__gethex+0x2b4>)
 80109aa:	4602      	mov	r2, r0
 80109ac:	21e4      	movs	r1, #228	@ 0xe4
 80109ae:	485c      	ldr	r0, [pc, #368]	@ (8010b20 <__gethex+0x2b8>)
 80109b0:	f001 fd22 	bl	80123f8 <__assert_func>
 80109b4:	3101      	adds	r1, #1
 80109b6:	105b      	asrs	r3, r3, #1
 80109b8:	e7ef      	b.n	801099a <__gethex+0x132>
 80109ba:	f100 0a14 	add.w	sl, r0, #20
 80109be:	2300      	movs	r3, #0
 80109c0:	4655      	mov	r5, sl
 80109c2:	469b      	mov	fp, r3
 80109c4:	45b1      	cmp	r9, r6
 80109c6:	d337      	bcc.n	8010a38 <__gethex+0x1d0>
 80109c8:	f845 bb04 	str.w	fp, [r5], #4
 80109cc:	eba5 050a 	sub.w	r5, r5, sl
 80109d0:	10ad      	asrs	r5, r5, #2
 80109d2:	6125      	str	r5, [r4, #16]
 80109d4:	4658      	mov	r0, fp
 80109d6:	f000 fb1d 	bl	8011014 <__hi0bits>
 80109da:	016d      	lsls	r5, r5, #5
 80109dc:	f8d8 6000 	ldr.w	r6, [r8]
 80109e0:	1a2d      	subs	r5, r5, r0
 80109e2:	42b5      	cmp	r5, r6
 80109e4:	dd54      	ble.n	8010a90 <__gethex+0x228>
 80109e6:	1bad      	subs	r5, r5, r6
 80109e8:	4629      	mov	r1, r5
 80109ea:	4620      	mov	r0, r4
 80109ec:	f000 feae 	bl	801174c <__any_on>
 80109f0:	4681      	mov	r9, r0
 80109f2:	b178      	cbz	r0, 8010a14 <__gethex+0x1ac>
 80109f4:	1e6b      	subs	r3, r5, #1
 80109f6:	1159      	asrs	r1, r3, #5
 80109f8:	f003 021f 	and.w	r2, r3, #31
 80109fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010a00:	f04f 0901 	mov.w	r9, #1
 8010a04:	fa09 f202 	lsl.w	r2, r9, r2
 8010a08:	420a      	tst	r2, r1
 8010a0a:	d003      	beq.n	8010a14 <__gethex+0x1ac>
 8010a0c:	454b      	cmp	r3, r9
 8010a0e:	dc36      	bgt.n	8010a7e <__gethex+0x216>
 8010a10:	f04f 0902 	mov.w	r9, #2
 8010a14:	4629      	mov	r1, r5
 8010a16:	4620      	mov	r0, r4
 8010a18:	f7ff febe 	bl	8010798 <rshift>
 8010a1c:	442f      	add	r7, r5
 8010a1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a22:	42bb      	cmp	r3, r7
 8010a24:	da42      	bge.n	8010aac <__gethex+0x244>
 8010a26:	9801      	ldr	r0, [sp, #4]
 8010a28:	4621      	mov	r1, r4
 8010a2a:	f000 fa41 	bl	8010eb0 <_Bfree>
 8010a2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a30:	2300      	movs	r3, #0
 8010a32:	6013      	str	r3, [r2, #0]
 8010a34:	25a3      	movs	r5, #163	@ 0xa3
 8010a36:	e793      	b.n	8010960 <__gethex+0xf8>
 8010a38:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010a3c:	2a2e      	cmp	r2, #46	@ 0x2e
 8010a3e:	d012      	beq.n	8010a66 <__gethex+0x1fe>
 8010a40:	2b20      	cmp	r3, #32
 8010a42:	d104      	bne.n	8010a4e <__gethex+0x1e6>
 8010a44:	f845 bb04 	str.w	fp, [r5], #4
 8010a48:	f04f 0b00 	mov.w	fp, #0
 8010a4c:	465b      	mov	r3, fp
 8010a4e:	7830      	ldrb	r0, [r6, #0]
 8010a50:	9303      	str	r3, [sp, #12]
 8010a52:	f7ff fef3 	bl	801083c <__hexdig_fun>
 8010a56:	9b03      	ldr	r3, [sp, #12]
 8010a58:	f000 000f 	and.w	r0, r0, #15
 8010a5c:	4098      	lsls	r0, r3
 8010a5e:	ea4b 0b00 	orr.w	fp, fp, r0
 8010a62:	3304      	adds	r3, #4
 8010a64:	e7ae      	b.n	80109c4 <__gethex+0x15c>
 8010a66:	45b1      	cmp	r9, r6
 8010a68:	d8ea      	bhi.n	8010a40 <__gethex+0x1d8>
 8010a6a:	492b      	ldr	r1, [pc, #172]	@ (8010b18 <__gethex+0x2b0>)
 8010a6c:	9303      	str	r3, [sp, #12]
 8010a6e:	2201      	movs	r2, #1
 8010a70:	4630      	mov	r0, r6
 8010a72:	f7fe ffaf 	bl	800f9d4 <strncmp>
 8010a76:	9b03      	ldr	r3, [sp, #12]
 8010a78:	2800      	cmp	r0, #0
 8010a7a:	d1e1      	bne.n	8010a40 <__gethex+0x1d8>
 8010a7c:	e7a2      	b.n	80109c4 <__gethex+0x15c>
 8010a7e:	1ea9      	subs	r1, r5, #2
 8010a80:	4620      	mov	r0, r4
 8010a82:	f000 fe63 	bl	801174c <__any_on>
 8010a86:	2800      	cmp	r0, #0
 8010a88:	d0c2      	beq.n	8010a10 <__gethex+0x1a8>
 8010a8a:	f04f 0903 	mov.w	r9, #3
 8010a8e:	e7c1      	b.n	8010a14 <__gethex+0x1ac>
 8010a90:	da09      	bge.n	8010aa6 <__gethex+0x23e>
 8010a92:	1b75      	subs	r5, r6, r5
 8010a94:	4621      	mov	r1, r4
 8010a96:	9801      	ldr	r0, [sp, #4]
 8010a98:	462a      	mov	r2, r5
 8010a9a:	f000 fc21 	bl	80112e0 <__lshift>
 8010a9e:	1b7f      	subs	r7, r7, r5
 8010aa0:	4604      	mov	r4, r0
 8010aa2:	f100 0a14 	add.w	sl, r0, #20
 8010aa6:	f04f 0900 	mov.w	r9, #0
 8010aaa:	e7b8      	b.n	8010a1e <__gethex+0x1b6>
 8010aac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010ab0:	42bd      	cmp	r5, r7
 8010ab2:	dd6f      	ble.n	8010b94 <__gethex+0x32c>
 8010ab4:	1bed      	subs	r5, r5, r7
 8010ab6:	42ae      	cmp	r6, r5
 8010ab8:	dc34      	bgt.n	8010b24 <__gethex+0x2bc>
 8010aba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010abe:	2b02      	cmp	r3, #2
 8010ac0:	d022      	beq.n	8010b08 <__gethex+0x2a0>
 8010ac2:	2b03      	cmp	r3, #3
 8010ac4:	d024      	beq.n	8010b10 <__gethex+0x2a8>
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d115      	bne.n	8010af6 <__gethex+0x28e>
 8010aca:	42ae      	cmp	r6, r5
 8010acc:	d113      	bne.n	8010af6 <__gethex+0x28e>
 8010ace:	2e01      	cmp	r6, #1
 8010ad0:	d10b      	bne.n	8010aea <__gethex+0x282>
 8010ad2:	9a02      	ldr	r2, [sp, #8]
 8010ad4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010ad8:	6013      	str	r3, [r2, #0]
 8010ada:	2301      	movs	r3, #1
 8010adc:	6123      	str	r3, [r4, #16]
 8010ade:	f8ca 3000 	str.w	r3, [sl]
 8010ae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ae4:	2562      	movs	r5, #98	@ 0x62
 8010ae6:	601c      	str	r4, [r3, #0]
 8010ae8:	e73a      	b.n	8010960 <__gethex+0xf8>
 8010aea:	1e71      	subs	r1, r6, #1
 8010aec:	4620      	mov	r0, r4
 8010aee:	f000 fe2d 	bl	801174c <__any_on>
 8010af2:	2800      	cmp	r0, #0
 8010af4:	d1ed      	bne.n	8010ad2 <__gethex+0x26a>
 8010af6:	9801      	ldr	r0, [sp, #4]
 8010af8:	4621      	mov	r1, r4
 8010afa:	f000 f9d9 	bl	8010eb0 <_Bfree>
 8010afe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b00:	2300      	movs	r3, #0
 8010b02:	6013      	str	r3, [r2, #0]
 8010b04:	2550      	movs	r5, #80	@ 0x50
 8010b06:	e72b      	b.n	8010960 <__gethex+0xf8>
 8010b08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d1f3      	bne.n	8010af6 <__gethex+0x28e>
 8010b0e:	e7e0      	b.n	8010ad2 <__gethex+0x26a>
 8010b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d1dd      	bne.n	8010ad2 <__gethex+0x26a>
 8010b16:	e7ee      	b.n	8010af6 <__gethex+0x28e>
 8010b18:	08012c60 	.word	0x08012c60
 8010b1c:	08012d73 	.word	0x08012d73
 8010b20:	08012d84 	.word	0x08012d84
 8010b24:	1e6f      	subs	r7, r5, #1
 8010b26:	f1b9 0f00 	cmp.w	r9, #0
 8010b2a:	d130      	bne.n	8010b8e <__gethex+0x326>
 8010b2c:	b127      	cbz	r7, 8010b38 <__gethex+0x2d0>
 8010b2e:	4639      	mov	r1, r7
 8010b30:	4620      	mov	r0, r4
 8010b32:	f000 fe0b 	bl	801174c <__any_on>
 8010b36:	4681      	mov	r9, r0
 8010b38:	117a      	asrs	r2, r7, #5
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010b40:	f007 071f 	and.w	r7, r7, #31
 8010b44:	40bb      	lsls	r3, r7
 8010b46:	4213      	tst	r3, r2
 8010b48:	4629      	mov	r1, r5
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	bf18      	it	ne
 8010b4e:	f049 0902 	orrne.w	r9, r9, #2
 8010b52:	f7ff fe21 	bl	8010798 <rshift>
 8010b56:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010b5a:	1b76      	subs	r6, r6, r5
 8010b5c:	2502      	movs	r5, #2
 8010b5e:	f1b9 0f00 	cmp.w	r9, #0
 8010b62:	d047      	beq.n	8010bf4 <__gethex+0x38c>
 8010b64:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b68:	2b02      	cmp	r3, #2
 8010b6a:	d015      	beq.n	8010b98 <__gethex+0x330>
 8010b6c:	2b03      	cmp	r3, #3
 8010b6e:	d017      	beq.n	8010ba0 <__gethex+0x338>
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	d109      	bne.n	8010b88 <__gethex+0x320>
 8010b74:	f019 0f02 	tst.w	r9, #2
 8010b78:	d006      	beq.n	8010b88 <__gethex+0x320>
 8010b7a:	f8da 3000 	ldr.w	r3, [sl]
 8010b7e:	ea49 0903 	orr.w	r9, r9, r3
 8010b82:	f019 0f01 	tst.w	r9, #1
 8010b86:	d10e      	bne.n	8010ba6 <__gethex+0x33e>
 8010b88:	f045 0510 	orr.w	r5, r5, #16
 8010b8c:	e032      	b.n	8010bf4 <__gethex+0x38c>
 8010b8e:	f04f 0901 	mov.w	r9, #1
 8010b92:	e7d1      	b.n	8010b38 <__gethex+0x2d0>
 8010b94:	2501      	movs	r5, #1
 8010b96:	e7e2      	b.n	8010b5e <__gethex+0x2f6>
 8010b98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b9a:	f1c3 0301 	rsb	r3, r3, #1
 8010b9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010ba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d0f0      	beq.n	8010b88 <__gethex+0x320>
 8010ba6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010baa:	f104 0314 	add.w	r3, r4, #20
 8010bae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010bb2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010bb6:	f04f 0c00 	mov.w	ip, #0
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bc0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010bc4:	d01b      	beq.n	8010bfe <__gethex+0x396>
 8010bc6:	3201      	adds	r2, #1
 8010bc8:	6002      	str	r2, [r0, #0]
 8010bca:	2d02      	cmp	r5, #2
 8010bcc:	f104 0314 	add.w	r3, r4, #20
 8010bd0:	d13c      	bne.n	8010c4c <__gethex+0x3e4>
 8010bd2:	f8d8 2000 	ldr.w	r2, [r8]
 8010bd6:	3a01      	subs	r2, #1
 8010bd8:	42b2      	cmp	r2, r6
 8010bda:	d109      	bne.n	8010bf0 <__gethex+0x388>
 8010bdc:	1171      	asrs	r1, r6, #5
 8010bde:	2201      	movs	r2, #1
 8010be0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010be4:	f006 061f 	and.w	r6, r6, #31
 8010be8:	fa02 f606 	lsl.w	r6, r2, r6
 8010bec:	421e      	tst	r6, r3
 8010bee:	d13a      	bne.n	8010c66 <__gethex+0x3fe>
 8010bf0:	f045 0520 	orr.w	r5, r5, #32
 8010bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bf6:	601c      	str	r4, [r3, #0]
 8010bf8:	9b02      	ldr	r3, [sp, #8]
 8010bfa:	601f      	str	r7, [r3, #0]
 8010bfc:	e6b0      	b.n	8010960 <__gethex+0xf8>
 8010bfe:	4299      	cmp	r1, r3
 8010c00:	f843 cc04 	str.w	ip, [r3, #-4]
 8010c04:	d8d9      	bhi.n	8010bba <__gethex+0x352>
 8010c06:	68a3      	ldr	r3, [r4, #8]
 8010c08:	459b      	cmp	fp, r3
 8010c0a:	db17      	blt.n	8010c3c <__gethex+0x3d4>
 8010c0c:	6861      	ldr	r1, [r4, #4]
 8010c0e:	9801      	ldr	r0, [sp, #4]
 8010c10:	3101      	adds	r1, #1
 8010c12:	f000 f90d 	bl	8010e30 <_Balloc>
 8010c16:	4681      	mov	r9, r0
 8010c18:	b918      	cbnz	r0, 8010c22 <__gethex+0x3ba>
 8010c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8010c84 <__gethex+0x41c>)
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	2184      	movs	r1, #132	@ 0x84
 8010c20:	e6c5      	b.n	80109ae <__gethex+0x146>
 8010c22:	6922      	ldr	r2, [r4, #16]
 8010c24:	3202      	adds	r2, #2
 8010c26:	f104 010c 	add.w	r1, r4, #12
 8010c2a:	0092      	lsls	r2, r2, #2
 8010c2c:	300c      	adds	r0, #12
 8010c2e:	f7fe ff6a 	bl	800fb06 <memcpy>
 8010c32:	4621      	mov	r1, r4
 8010c34:	9801      	ldr	r0, [sp, #4]
 8010c36:	f000 f93b 	bl	8010eb0 <_Bfree>
 8010c3a:	464c      	mov	r4, r9
 8010c3c:	6923      	ldr	r3, [r4, #16]
 8010c3e:	1c5a      	adds	r2, r3, #1
 8010c40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010c44:	6122      	str	r2, [r4, #16]
 8010c46:	2201      	movs	r2, #1
 8010c48:	615a      	str	r2, [r3, #20]
 8010c4a:	e7be      	b.n	8010bca <__gethex+0x362>
 8010c4c:	6922      	ldr	r2, [r4, #16]
 8010c4e:	455a      	cmp	r2, fp
 8010c50:	dd0b      	ble.n	8010c6a <__gethex+0x402>
 8010c52:	2101      	movs	r1, #1
 8010c54:	4620      	mov	r0, r4
 8010c56:	f7ff fd9f 	bl	8010798 <rshift>
 8010c5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c5e:	3701      	adds	r7, #1
 8010c60:	42bb      	cmp	r3, r7
 8010c62:	f6ff aee0 	blt.w	8010a26 <__gethex+0x1be>
 8010c66:	2501      	movs	r5, #1
 8010c68:	e7c2      	b.n	8010bf0 <__gethex+0x388>
 8010c6a:	f016 061f 	ands.w	r6, r6, #31
 8010c6e:	d0fa      	beq.n	8010c66 <__gethex+0x3fe>
 8010c70:	4453      	add	r3, sl
 8010c72:	f1c6 0620 	rsb	r6, r6, #32
 8010c76:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010c7a:	f000 f9cb 	bl	8011014 <__hi0bits>
 8010c7e:	42b0      	cmp	r0, r6
 8010c80:	dbe7      	blt.n	8010c52 <__gethex+0x3ea>
 8010c82:	e7f0      	b.n	8010c66 <__gethex+0x3fe>
 8010c84:	08012d73 	.word	0x08012d73

08010c88 <L_shift>:
 8010c88:	f1c2 0208 	rsb	r2, r2, #8
 8010c8c:	0092      	lsls	r2, r2, #2
 8010c8e:	b570      	push	{r4, r5, r6, lr}
 8010c90:	f1c2 0620 	rsb	r6, r2, #32
 8010c94:	6843      	ldr	r3, [r0, #4]
 8010c96:	6804      	ldr	r4, [r0, #0]
 8010c98:	fa03 f506 	lsl.w	r5, r3, r6
 8010c9c:	432c      	orrs	r4, r5
 8010c9e:	40d3      	lsrs	r3, r2
 8010ca0:	6004      	str	r4, [r0, #0]
 8010ca2:	f840 3f04 	str.w	r3, [r0, #4]!
 8010ca6:	4288      	cmp	r0, r1
 8010ca8:	d3f4      	bcc.n	8010c94 <L_shift+0xc>
 8010caa:	bd70      	pop	{r4, r5, r6, pc}

08010cac <__match>:
 8010cac:	b530      	push	{r4, r5, lr}
 8010cae:	6803      	ldr	r3, [r0, #0]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010cb6:	b914      	cbnz	r4, 8010cbe <__match+0x12>
 8010cb8:	6003      	str	r3, [r0, #0]
 8010cba:	2001      	movs	r0, #1
 8010cbc:	bd30      	pop	{r4, r5, pc}
 8010cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cc2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010cc6:	2d19      	cmp	r5, #25
 8010cc8:	bf98      	it	ls
 8010cca:	3220      	addls	r2, #32
 8010ccc:	42a2      	cmp	r2, r4
 8010cce:	d0f0      	beq.n	8010cb2 <__match+0x6>
 8010cd0:	2000      	movs	r0, #0
 8010cd2:	e7f3      	b.n	8010cbc <__match+0x10>

08010cd4 <__hexnan>:
 8010cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cd8:	680b      	ldr	r3, [r1, #0]
 8010cda:	6801      	ldr	r1, [r0, #0]
 8010cdc:	115e      	asrs	r6, r3, #5
 8010cde:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010ce2:	f013 031f 	ands.w	r3, r3, #31
 8010ce6:	b087      	sub	sp, #28
 8010ce8:	bf18      	it	ne
 8010cea:	3604      	addne	r6, #4
 8010cec:	2500      	movs	r5, #0
 8010cee:	1f37      	subs	r7, r6, #4
 8010cf0:	4682      	mov	sl, r0
 8010cf2:	4690      	mov	r8, r2
 8010cf4:	9301      	str	r3, [sp, #4]
 8010cf6:	f846 5c04 	str.w	r5, [r6, #-4]
 8010cfa:	46b9      	mov	r9, r7
 8010cfc:	463c      	mov	r4, r7
 8010cfe:	9502      	str	r5, [sp, #8]
 8010d00:	46ab      	mov	fp, r5
 8010d02:	784a      	ldrb	r2, [r1, #1]
 8010d04:	1c4b      	adds	r3, r1, #1
 8010d06:	9303      	str	r3, [sp, #12]
 8010d08:	b342      	cbz	r2, 8010d5c <__hexnan+0x88>
 8010d0a:	4610      	mov	r0, r2
 8010d0c:	9105      	str	r1, [sp, #20]
 8010d0e:	9204      	str	r2, [sp, #16]
 8010d10:	f7ff fd94 	bl	801083c <__hexdig_fun>
 8010d14:	2800      	cmp	r0, #0
 8010d16:	d151      	bne.n	8010dbc <__hexnan+0xe8>
 8010d18:	9a04      	ldr	r2, [sp, #16]
 8010d1a:	9905      	ldr	r1, [sp, #20]
 8010d1c:	2a20      	cmp	r2, #32
 8010d1e:	d818      	bhi.n	8010d52 <__hexnan+0x7e>
 8010d20:	9b02      	ldr	r3, [sp, #8]
 8010d22:	459b      	cmp	fp, r3
 8010d24:	dd13      	ble.n	8010d4e <__hexnan+0x7a>
 8010d26:	454c      	cmp	r4, r9
 8010d28:	d206      	bcs.n	8010d38 <__hexnan+0x64>
 8010d2a:	2d07      	cmp	r5, #7
 8010d2c:	dc04      	bgt.n	8010d38 <__hexnan+0x64>
 8010d2e:	462a      	mov	r2, r5
 8010d30:	4649      	mov	r1, r9
 8010d32:	4620      	mov	r0, r4
 8010d34:	f7ff ffa8 	bl	8010c88 <L_shift>
 8010d38:	4544      	cmp	r4, r8
 8010d3a:	d952      	bls.n	8010de2 <__hexnan+0x10e>
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	f1a4 0904 	sub.w	r9, r4, #4
 8010d42:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d46:	f8cd b008 	str.w	fp, [sp, #8]
 8010d4a:	464c      	mov	r4, r9
 8010d4c:	461d      	mov	r5, r3
 8010d4e:	9903      	ldr	r1, [sp, #12]
 8010d50:	e7d7      	b.n	8010d02 <__hexnan+0x2e>
 8010d52:	2a29      	cmp	r2, #41	@ 0x29
 8010d54:	d157      	bne.n	8010e06 <__hexnan+0x132>
 8010d56:	3102      	adds	r1, #2
 8010d58:	f8ca 1000 	str.w	r1, [sl]
 8010d5c:	f1bb 0f00 	cmp.w	fp, #0
 8010d60:	d051      	beq.n	8010e06 <__hexnan+0x132>
 8010d62:	454c      	cmp	r4, r9
 8010d64:	d206      	bcs.n	8010d74 <__hexnan+0xa0>
 8010d66:	2d07      	cmp	r5, #7
 8010d68:	dc04      	bgt.n	8010d74 <__hexnan+0xa0>
 8010d6a:	462a      	mov	r2, r5
 8010d6c:	4649      	mov	r1, r9
 8010d6e:	4620      	mov	r0, r4
 8010d70:	f7ff ff8a 	bl	8010c88 <L_shift>
 8010d74:	4544      	cmp	r4, r8
 8010d76:	d936      	bls.n	8010de6 <__hexnan+0x112>
 8010d78:	f1a8 0204 	sub.w	r2, r8, #4
 8010d7c:	4623      	mov	r3, r4
 8010d7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010d82:	f842 1f04 	str.w	r1, [r2, #4]!
 8010d86:	429f      	cmp	r7, r3
 8010d88:	d2f9      	bcs.n	8010d7e <__hexnan+0xaa>
 8010d8a:	1b3b      	subs	r3, r7, r4
 8010d8c:	f023 0303 	bic.w	r3, r3, #3
 8010d90:	3304      	adds	r3, #4
 8010d92:	3401      	adds	r4, #1
 8010d94:	3e03      	subs	r6, #3
 8010d96:	42b4      	cmp	r4, r6
 8010d98:	bf88      	it	hi
 8010d9a:	2304      	movhi	r3, #4
 8010d9c:	4443      	add	r3, r8
 8010d9e:	2200      	movs	r2, #0
 8010da0:	f843 2b04 	str.w	r2, [r3], #4
 8010da4:	429f      	cmp	r7, r3
 8010da6:	d2fb      	bcs.n	8010da0 <__hexnan+0xcc>
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	b91b      	cbnz	r3, 8010db4 <__hexnan+0xe0>
 8010dac:	4547      	cmp	r7, r8
 8010dae:	d128      	bne.n	8010e02 <__hexnan+0x12e>
 8010db0:	2301      	movs	r3, #1
 8010db2:	603b      	str	r3, [r7, #0]
 8010db4:	2005      	movs	r0, #5
 8010db6:	b007      	add	sp, #28
 8010db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dbc:	3501      	adds	r5, #1
 8010dbe:	2d08      	cmp	r5, #8
 8010dc0:	f10b 0b01 	add.w	fp, fp, #1
 8010dc4:	dd06      	ble.n	8010dd4 <__hexnan+0x100>
 8010dc6:	4544      	cmp	r4, r8
 8010dc8:	d9c1      	bls.n	8010d4e <__hexnan+0x7a>
 8010dca:	2300      	movs	r3, #0
 8010dcc:	f844 3c04 	str.w	r3, [r4, #-4]
 8010dd0:	2501      	movs	r5, #1
 8010dd2:	3c04      	subs	r4, #4
 8010dd4:	6822      	ldr	r2, [r4, #0]
 8010dd6:	f000 000f 	and.w	r0, r0, #15
 8010dda:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010dde:	6020      	str	r0, [r4, #0]
 8010de0:	e7b5      	b.n	8010d4e <__hexnan+0x7a>
 8010de2:	2508      	movs	r5, #8
 8010de4:	e7b3      	b.n	8010d4e <__hexnan+0x7a>
 8010de6:	9b01      	ldr	r3, [sp, #4]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d0dd      	beq.n	8010da8 <__hexnan+0xd4>
 8010dec:	f1c3 0320 	rsb	r3, r3, #32
 8010df0:	f04f 32ff 	mov.w	r2, #4294967295
 8010df4:	40da      	lsrs	r2, r3
 8010df6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010dfa:	4013      	ands	r3, r2
 8010dfc:	f846 3c04 	str.w	r3, [r6, #-4]
 8010e00:	e7d2      	b.n	8010da8 <__hexnan+0xd4>
 8010e02:	3f04      	subs	r7, #4
 8010e04:	e7d0      	b.n	8010da8 <__hexnan+0xd4>
 8010e06:	2004      	movs	r0, #4
 8010e08:	e7d5      	b.n	8010db6 <__hexnan+0xe2>

08010e0a <__ascii_mbtowc>:
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	b901      	cbnz	r1, 8010e10 <__ascii_mbtowc+0x6>
 8010e0e:	a901      	add	r1, sp, #4
 8010e10:	b142      	cbz	r2, 8010e24 <__ascii_mbtowc+0x1a>
 8010e12:	b14b      	cbz	r3, 8010e28 <__ascii_mbtowc+0x1e>
 8010e14:	7813      	ldrb	r3, [r2, #0]
 8010e16:	600b      	str	r3, [r1, #0]
 8010e18:	7812      	ldrb	r2, [r2, #0]
 8010e1a:	1e10      	subs	r0, r2, #0
 8010e1c:	bf18      	it	ne
 8010e1e:	2001      	movne	r0, #1
 8010e20:	b002      	add	sp, #8
 8010e22:	4770      	bx	lr
 8010e24:	4610      	mov	r0, r2
 8010e26:	e7fb      	b.n	8010e20 <__ascii_mbtowc+0x16>
 8010e28:	f06f 0001 	mvn.w	r0, #1
 8010e2c:	e7f8      	b.n	8010e20 <__ascii_mbtowc+0x16>
	...

08010e30 <_Balloc>:
 8010e30:	b570      	push	{r4, r5, r6, lr}
 8010e32:	69c6      	ldr	r6, [r0, #28]
 8010e34:	4604      	mov	r4, r0
 8010e36:	460d      	mov	r5, r1
 8010e38:	b976      	cbnz	r6, 8010e58 <_Balloc+0x28>
 8010e3a:	2010      	movs	r0, #16
 8010e3c:	f7fc ffb2 	bl	800dda4 <malloc>
 8010e40:	4602      	mov	r2, r0
 8010e42:	61e0      	str	r0, [r4, #28]
 8010e44:	b920      	cbnz	r0, 8010e50 <_Balloc+0x20>
 8010e46:	4b18      	ldr	r3, [pc, #96]	@ (8010ea8 <_Balloc+0x78>)
 8010e48:	4818      	ldr	r0, [pc, #96]	@ (8010eac <_Balloc+0x7c>)
 8010e4a:	216b      	movs	r1, #107	@ 0x6b
 8010e4c:	f001 fad4 	bl	80123f8 <__assert_func>
 8010e50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e54:	6006      	str	r6, [r0, #0]
 8010e56:	60c6      	str	r6, [r0, #12]
 8010e58:	69e6      	ldr	r6, [r4, #28]
 8010e5a:	68f3      	ldr	r3, [r6, #12]
 8010e5c:	b183      	cbz	r3, 8010e80 <_Balloc+0x50>
 8010e5e:	69e3      	ldr	r3, [r4, #28]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e66:	b9b8      	cbnz	r0, 8010e98 <_Balloc+0x68>
 8010e68:	2101      	movs	r1, #1
 8010e6a:	fa01 f605 	lsl.w	r6, r1, r5
 8010e6e:	1d72      	adds	r2, r6, #5
 8010e70:	0092      	lsls	r2, r2, #2
 8010e72:	4620      	mov	r0, r4
 8010e74:	f001 fade 	bl	8012434 <_calloc_r>
 8010e78:	b160      	cbz	r0, 8010e94 <_Balloc+0x64>
 8010e7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e7e:	e00e      	b.n	8010e9e <_Balloc+0x6e>
 8010e80:	2221      	movs	r2, #33	@ 0x21
 8010e82:	2104      	movs	r1, #4
 8010e84:	4620      	mov	r0, r4
 8010e86:	f001 fad5 	bl	8012434 <_calloc_r>
 8010e8a:	69e3      	ldr	r3, [r4, #28]
 8010e8c:	60f0      	str	r0, [r6, #12]
 8010e8e:	68db      	ldr	r3, [r3, #12]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d1e4      	bne.n	8010e5e <_Balloc+0x2e>
 8010e94:	2000      	movs	r0, #0
 8010e96:	bd70      	pop	{r4, r5, r6, pc}
 8010e98:	6802      	ldr	r2, [r0, #0]
 8010e9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010ea4:	e7f7      	b.n	8010e96 <_Balloc+0x66>
 8010ea6:	bf00      	nop
 8010ea8:	08012d04 	.word	0x08012d04
 8010eac:	08012de4 	.word	0x08012de4

08010eb0 <_Bfree>:
 8010eb0:	b570      	push	{r4, r5, r6, lr}
 8010eb2:	69c6      	ldr	r6, [r0, #28]
 8010eb4:	4605      	mov	r5, r0
 8010eb6:	460c      	mov	r4, r1
 8010eb8:	b976      	cbnz	r6, 8010ed8 <_Bfree+0x28>
 8010eba:	2010      	movs	r0, #16
 8010ebc:	f7fc ff72 	bl	800dda4 <malloc>
 8010ec0:	4602      	mov	r2, r0
 8010ec2:	61e8      	str	r0, [r5, #28]
 8010ec4:	b920      	cbnz	r0, 8010ed0 <_Bfree+0x20>
 8010ec6:	4b09      	ldr	r3, [pc, #36]	@ (8010eec <_Bfree+0x3c>)
 8010ec8:	4809      	ldr	r0, [pc, #36]	@ (8010ef0 <_Bfree+0x40>)
 8010eca:	218f      	movs	r1, #143	@ 0x8f
 8010ecc:	f001 fa94 	bl	80123f8 <__assert_func>
 8010ed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ed4:	6006      	str	r6, [r0, #0]
 8010ed6:	60c6      	str	r6, [r0, #12]
 8010ed8:	b13c      	cbz	r4, 8010eea <_Bfree+0x3a>
 8010eda:	69eb      	ldr	r3, [r5, #28]
 8010edc:	6862      	ldr	r2, [r4, #4]
 8010ede:	68db      	ldr	r3, [r3, #12]
 8010ee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ee4:	6021      	str	r1, [r4, #0]
 8010ee6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010eea:	bd70      	pop	{r4, r5, r6, pc}
 8010eec:	08012d04 	.word	0x08012d04
 8010ef0:	08012de4 	.word	0x08012de4

08010ef4 <__multadd>:
 8010ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ef8:	690d      	ldr	r5, [r1, #16]
 8010efa:	4607      	mov	r7, r0
 8010efc:	460c      	mov	r4, r1
 8010efe:	461e      	mov	r6, r3
 8010f00:	f101 0c14 	add.w	ip, r1, #20
 8010f04:	2000      	movs	r0, #0
 8010f06:	f8dc 3000 	ldr.w	r3, [ip]
 8010f0a:	b299      	uxth	r1, r3
 8010f0c:	fb02 6101 	mla	r1, r2, r1, r6
 8010f10:	0c1e      	lsrs	r6, r3, #16
 8010f12:	0c0b      	lsrs	r3, r1, #16
 8010f14:	fb02 3306 	mla	r3, r2, r6, r3
 8010f18:	b289      	uxth	r1, r1
 8010f1a:	3001      	adds	r0, #1
 8010f1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010f20:	4285      	cmp	r5, r0
 8010f22:	f84c 1b04 	str.w	r1, [ip], #4
 8010f26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010f2a:	dcec      	bgt.n	8010f06 <__multadd+0x12>
 8010f2c:	b30e      	cbz	r6, 8010f72 <__multadd+0x7e>
 8010f2e:	68a3      	ldr	r3, [r4, #8]
 8010f30:	42ab      	cmp	r3, r5
 8010f32:	dc19      	bgt.n	8010f68 <__multadd+0x74>
 8010f34:	6861      	ldr	r1, [r4, #4]
 8010f36:	4638      	mov	r0, r7
 8010f38:	3101      	adds	r1, #1
 8010f3a:	f7ff ff79 	bl	8010e30 <_Balloc>
 8010f3e:	4680      	mov	r8, r0
 8010f40:	b928      	cbnz	r0, 8010f4e <__multadd+0x5a>
 8010f42:	4602      	mov	r2, r0
 8010f44:	4b0c      	ldr	r3, [pc, #48]	@ (8010f78 <__multadd+0x84>)
 8010f46:	480d      	ldr	r0, [pc, #52]	@ (8010f7c <__multadd+0x88>)
 8010f48:	21ba      	movs	r1, #186	@ 0xba
 8010f4a:	f001 fa55 	bl	80123f8 <__assert_func>
 8010f4e:	6922      	ldr	r2, [r4, #16]
 8010f50:	3202      	adds	r2, #2
 8010f52:	f104 010c 	add.w	r1, r4, #12
 8010f56:	0092      	lsls	r2, r2, #2
 8010f58:	300c      	adds	r0, #12
 8010f5a:	f7fe fdd4 	bl	800fb06 <memcpy>
 8010f5e:	4621      	mov	r1, r4
 8010f60:	4638      	mov	r0, r7
 8010f62:	f7ff ffa5 	bl	8010eb0 <_Bfree>
 8010f66:	4644      	mov	r4, r8
 8010f68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010f6c:	3501      	adds	r5, #1
 8010f6e:	615e      	str	r6, [r3, #20]
 8010f70:	6125      	str	r5, [r4, #16]
 8010f72:	4620      	mov	r0, r4
 8010f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f78:	08012d73 	.word	0x08012d73
 8010f7c:	08012de4 	.word	0x08012de4

08010f80 <__s2b>:
 8010f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f84:	460c      	mov	r4, r1
 8010f86:	4615      	mov	r5, r2
 8010f88:	461f      	mov	r7, r3
 8010f8a:	2209      	movs	r2, #9
 8010f8c:	3308      	adds	r3, #8
 8010f8e:	4606      	mov	r6, r0
 8010f90:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f94:	2100      	movs	r1, #0
 8010f96:	2201      	movs	r2, #1
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	db09      	blt.n	8010fb0 <__s2b+0x30>
 8010f9c:	4630      	mov	r0, r6
 8010f9e:	f7ff ff47 	bl	8010e30 <_Balloc>
 8010fa2:	b940      	cbnz	r0, 8010fb6 <__s2b+0x36>
 8010fa4:	4602      	mov	r2, r0
 8010fa6:	4b19      	ldr	r3, [pc, #100]	@ (801100c <__s2b+0x8c>)
 8010fa8:	4819      	ldr	r0, [pc, #100]	@ (8011010 <__s2b+0x90>)
 8010faa:	21d3      	movs	r1, #211	@ 0xd3
 8010fac:	f001 fa24 	bl	80123f8 <__assert_func>
 8010fb0:	0052      	lsls	r2, r2, #1
 8010fb2:	3101      	adds	r1, #1
 8010fb4:	e7f0      	b.n	8010f98 <__s2b+0x18>
 8010fb6:	9b08      	ldr	r3, [sp, #32]
 8010fb8:	6143      	str	r3, [r0, #20]
 8010fba:	2d09      	cmp	r5, #9
 8010fbc:	f04f 0301 	mov.w	r3, #1
 8010fc0:	6103      	str	r3, [r0, #16]
 8010fc2:	dd16      	ble.n	8010ff2 <__s2b+0x72>
 8010fc4:	f104 0909 	add.w	r9, r4, #9
 8010fc8:	46c8      	mov	r8, r9
 8010fca:	442c      	add	r4, r5
 8010fcc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010fd0:	4601      	mov	r1, r0
 8010fd2:	3b30      	subs	r3, #48	@ 0x30
 8010fd4:	220a      	movs	r2, #10
 8010fd6:	4630      	mov	r0, r6
 8010fd8:	f7ff ff8c 	bl	8010ef4 <__multadd>
 8010fdc:	45a0      	cmp	r8, r4
 8010fde:	d1f5      	bne.n	8010fcc <__s2b+0x4c>
 8010fe0:	f1a5 0408 	sub.w	r4, r5, #8
 8010fe4:	444c      	add	r4, r9
 8010fe6:	1b2d      	subs	r5, r5, r4
 8010fe8:	1963      	adds	r3, r4, r5
 8010fea:	42bb      	cmp	r3, r7
 8010fec:	db04      	blt.n	8010ff8 <__s2b+0x78>
 8010fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ff2:	340a      	adds	r4, #10
 8010ff4:	2509      	movs	r5, #9
 8010ff6:	e7f6      	b.n	8010fe6 <__s2b+0x66>
 8010ff8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010ffc:	4601      	mov	r1, r0
 8010ffe:	3b30      	subs	r3, #48	@ 0x30
 8011000:	220a      	movs	r2, #10
 8011002:	4630      	mov	r0, r6
 8011004:	f7ff ff76 	bl	8010ef4 <__multadd>
 8011008:	e7ee      	b.n	8010fe8 <__s2b+0x68>
 801100a:	bf00      	nop
 801100c:	08012d73 	.word	0x08012d73
 8011010:	08012de4 	.word	0x08012de4

08011014 <__hi0bits>:
 8011014:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011018:	4603      	mov	r3, r0
 801101a:	bf36      	itet	cc
 801101c:	0403      	lslcc	r3, r0, #16
 801101e:	2000      	movcs	r0, #0
 8011020:	2010      	movcc	r0, #16
 8011022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011026:	bf3c      	itt	cc
 8011028:	021b      	lslcc	r3, r3, #8
 801102a:	3008      	addcc	r0, #8
 801102c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011030:	bf3c      	itt	cc
 8011032:	011b      	lslcc	r3, r3, #4
 8011034:	3004      	addcc	r0, #4
 8011036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801103a:	bf3c      	itt	cc
 801103c:	009b      	lslcc	r3, r3, #2
 801103e:	3002      	addcc	r0, #2
 8011040:	2b00      	cmp	r3, #0
 8011042:	db05      	blt.n	8011050 <__hi0bits+0x3c>
 8011044:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011048:	f100 0001 	add.w	r0, r0, #1
 801104c:	bf08      	it	eq
 801104e:	2020      	moveq	r0, #32
 8011050:	4770      	bx	lr

08011052 <__lo0bits>:
 8011052:	6803      	ldr	r3, [r0, #0]
 8011054:	4602      	mov	r2, r0
 8011056:	f013 0007 	ands.w	r0, r3, #7
 801105a:	d00b      	beq.n	8011074 <__lo0bits+0x22>
 801105c:	07d9      	lsls	r1, r3, #31
 801105e:	d421      	bmi.n	80110a4 <__lo0bits+0x52>
 8011060:	0798      	lsls	r0, r3, #30
 8011062:	bf49      	itett	mi
 8011064:	085b      	lsrmi	r3, r3, #1
 8011066:	089b      	lsrpl	r3, r3, #2
 8011068:	2001      	movmi	r0, #1
 801106a:	6013      	strmi	r3, [r2, #0]
 801106c:	bf5c      	itt	pl
 801106e:	6013      	strpl	r3, [r2, #0]
 8011070:	2002      	movpl	r0, #2
 8011072:	4770      	bx	lr
 8011074:	b299      	uxth	r1, r3
 8011076:	b909      	cbnz	r1, 801107c <__lo0bits+0x2a>
 8011078:	0c1b      	lsrs	r3, r3, #16
 801107a:	2010      	movs	r0, #16
 801107c:	b2d9      	uxtb	r1, r3
 801107e:	b909      	cbnz	r1, 8011084 <__lo0bits+0x32>
 8011080:	3008      	adds	r0, #8
 8011082:	0a1b      	lsrs	r3, r3, #8
 8011084:	0719      	lsls	r1, r3, #28
 8011086:	bf04      	itt	eq
 8011088:	091b      	lsreq	r3, r3, #4
 801108a:	3004      	addeq	r0, #4
 801108c:	0799      	lsls	r1, r3, #30
 801108e:	bf04      	itt	eq
 8011090:	089b      	lsreq	r3, r3, #2
 8011092:	3002      	addeq	r0, #2
 8011094:	07d9      	lsls	r1, r3, #31
 8011096:	d403      	bmi.n	80110a0 <__lo0bits+0x4e>
 8011098:	085b      	lsrs	r3, r3, #1
 801109a:	f100 0001 	add.w	r0, r0, #1
 801109e:	d003      	beq.n	80110a8 <__lo0bits+0x56>
 80110a0:	6013      	str	r3, [r2, #0]
 80110a2:	4770      	bx	lr
 80110a4:	2000      	movs	r0, #0
 80110a6:	4770      	bx	lr
 80110a8:	2020      	movs	r0, #32
 80110aa:	4770      	bx	lr

080110ac <__i2b>:
 80110ac:	b510      	push	{r4, lr}
 80110ae:	460c      	mov	r4, r1
 80110b0:	2101      	movs	r1, #1
 80110b2:	f7ff febd 	bl	8010e30 <_Balloc>
 80110b6:	4602      	mov	r2, r0
 80110b8:	b928      	cbnz	r0, 80110c6 <__i2b+0x1a>
 80110ba:	4b05      	ldr	r3, [pc, #20]	@ (80110d0 <__i2b+0x24>)
 80110bc:	4805      	ldr	r0, [pc, #20]	@ (80110d4 <__i2b+0x28>)
 80110be:	f240 1145 	movw	r1, #325	@ 0x145
 80110c2:	f001 f999 	bl	80123f8 <__assert_func>
 80110c6:	2301      	movs	r3, #1
 80110c8:	6144      	str	r4, [r0, #20]
 80110ca:	6103      	str	r3, [r0, #16]
 80110cc:	bd10      	pop	{r4, pc}
 80110ce:	bf00      	nop
 80110d0:	08012d73 	.word	0x08012d73
 80110d4:	08012de4 	.word	0x08012de4

080110d8 <__multiply>:
 80110d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110dc:	4614      	mov	r4, r2
 80110de:	690a      	ldr	r2, [r1, #16]
 80110e0:	6923      	ldr	r3, [r4, #16]
 80110e2:	429a      	cmp	r2, r3
 80110e4:	bfa8      	it	ge
 80110e6:	4623      	movge	r3, r4
 80110e8:	460f      	mov	r7, r1
 80110ea:	bfa4      	itt	ge
 80110ec:	460c      	movge	r4, r1
 80110ee:	461f      	movge	r7, r3
 80110f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80110f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80110f8:	68a3      	ldr	r3, [r4, #8]
 80110fa:	6861      	ldr	r1, [r4, #4]
 80110fc:	eb0a 0609 	add.w	r6, sl, r9
 8011100:	42b3      	cmp	r3, r6
 8011102:	b085      	sub	sp, #20
 8011104:	bfb8      	it	lt
 8011106:	3101      	addlt	r1, #1
 8011108:	f7ff fe92 	bl	8010e30 <_Balloc>
 801110c:	b930      	cbnz	r0, 801111c <__multiply+0x44>
 801110e:	4602      	mov	r2, r0
 8011110:	4b44      	ldr	r3, [pc, #272]	@ (8011224 <__multiply+0x14c>)
 8011112:	4845      	ldr	r0, [pc, #276]	@ (8011228 <__multiply+0x150>)
 8011114:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011118:	f001 f96e 	bl	80123f8 <__assert_func>
 801111c:	f100 0514 	add.w	r5, r0, #20
 8011120:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011124:	462b      	mov	r3, r5
 8011126:	2200      	movs	r2, #0
 8011128:	4543      	cmp	r3, r8
 801112a:	d321      	bcc.n	8011170 <__multiply+0x98>
 801112c:	f107 0114 	add.w	r1, r7, #20
 8011130:	f104 0214 	add.w	r2, r4, #20
 8011134:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011138:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801113c:	9302      	str	r3, [sp, #8]
 801113e:	1b13      	subs	r3, r2, r4
 8011140:	3b15      	subs	r3, #21
 8011142:	f023 0303 	bic.w	r3, r3, #3
 8011146:	3304      	adds	r3, #4
 8011148:	f104 0715 	add.w	r7, r4, #21
 801114c:	42ba      	cmp	r2, r7
 801114e:	bf38      	it	cc
 8011150:	2304      	movcc	r3, #4
 8011152:	9301      	str	r3, [sp, #4]
 8011154:	9b02      	ldr	r3, [sp, #8]
 8011156:	9103      	str	r1, [sp, #12]
 8011158:	428b      	cmp	r3, r1
 801115a:	d80c      	bhi.n	8011176 <__multiply+0x9e>
 801115c:	2e00      	cmp	r6, #0
 801115e:	dd03      	ble.n	8011168 <__multiply+0x90>
 8011160:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011164:	2b00      	cmp	r3, #0
 8011166:	d05b      	beq.n	8011220 <__multiply+0x148>
 8011168:	6106      	str	r6, [r0, #16]
 801116a:	b005      	add	sp, #20
 801116c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011170:	f843 2b04 	str.w	r2, [r3], #4
 8011174:	e7d8      	b.n	8011128 <__multiply+0x50>
 8011176:	f8b1 a000 	ldrh.w	sl, [r1]
 801117a:	f1ba 0f00 	cmp.w	sl, #0
 801117e:	d024      	beq.n	80111ca <__multiply+0xf2>
 8011180:	f104 0e14 	add.w	lr, r4, #20
 8011184:	46a9      	mov	r9, r5
 8011186:	f04f 0c00 	mov.w	ip, #0
 801118a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801118e:	f8d9 3000 	ldr.w	r3, [r9]
 8011192:	fa1f fb87 	uxth.w	fp, r7
 8011196:	b29b      	uxth	r3, r3
 8011198:	fb0a 330b 	mla	r3, sl, fp, r3
 801119c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80111a0:	f8d9 7000 	ldr.w	r7, [r9]
 80111a4:	4463      	add	r3, ip
 80111a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80111aa:	fb0a c70b 	mla	r7, sl, fp, ip
 80111ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80111b8:	4572      	cmp	r2, lr
 80111ba:	f849 3b04 	str.w	r3, [r9], #4
 80111be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80111c2:	d8e2      	bhi.n	801118a <__multiply+0xb2>
 80111c4:	9b01      	ldr	r3, [sp, #4]
 80111c6:	f845 c003 	str.w	ip, [r5, r3]
 80111ca:	9b03      	ldr	r3, [sp, #12]
 80111cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80111d0:	3104      	adds	r1, #4
 80111d2:	f1b9 0f00 	cmp.w	r9, #0
 80111d6:	d021      	beq.n	801121c <__multiply+0x144>
 80111d8:	682b      	ldr	r3, [r5, #0]
 80111da:	f104 0c14 	add.w	ip, r4, #20
 80111de:	46ae      	mov	lr, r5
 80111e0:	f04f 0a00 	mov.w	sl, #0
 80111e4:	f8bc b000 	ldrh.w	fp, [ip]
 80111e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80111ec:	fb09 770b 	mla	r7, r9, fp, r7
 80111f0:	4457      	add	r7, sl
 80111f2:	b29b      	uxth	r3, r3
 80111f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80111f8:	f84e 3b04 	str.w	r3, [lr], #4
 80111fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011200:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011204:	f8be 3000 	ldrh.w	r3, [lr]
 8011208:	fb09 330a 	mla	r3, r9, sl, r3
 801120c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011210:	4562      	cmp	r2, ip
 8011212:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011216:	d8e5      	bhi.n	80111e4 <__multiply+0x10c>
 8011218:	9f01      	ldr	r7, [sp, #4]
 801121a:	51eb      	str	r3, [r5, r7]
 801121c:	3504      	adds	r5, #4
 801121e:	e799      	b.n	8011154 <__multiply+0x7c>
 8011220:	3e01      	subs	r6, #1
 8011222:	e79b      	b.n	801115c <__multiply+0x84>
 8011224:	08012d73 	.word	0x08012d73
 8011228:	08012de4 	.word	0x08012de4

0801122c <__pow5mult>:
 801122c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011230:	4615      	mov	r5, r2
 8011232:	f012 0203 	ands.w	r2, r2, #3
 8011236:	4607      	mov	r7, r0
 8011238:	460e      	mov	r6, r1
 801123a:	d007      	beq.n	801124c <__pow5mult+0x20>
 801123c:	4c25      	ldr	r4, [pc, #148]	@ (80112d4 <__pow5mult+0xa8>)
 801123e:	3a01      	subs	r2, #1
 8011240:	2300      	movs	r3, #0
 8011242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011246:	f7ff fe55 	bl	8010ef4 <__multadd>
 801124a:	4606      	mov	r6, r0
 801124c:	10ad      	asrs	r5, r5, #2
 801124e:	d03d      	beq.n	80112cc <__pow5mult+0xa0>
 8011250:	69fc      	ldr	r4, [r7, #28]
 8011252:	b97c      	cbnz	r4, 8011274 <__pow5mult+0x48>
 8011254:	2010      	movs	r0, #16
 8011256:	f7fc fda5 	bl	800dda4 <malloc>
 801125a:	4602      	mov	r2, r0
 801125c:	61f8      	str	r0, [r7, #28]
 801125e:	b928      	cbnz	r0, 801126c <__pow5mult+0x40>
 8011260:	4b1d      	ldr	r3, [pc, #116]	@ (80112d8 <__pow5mult+0xac>)
 8011262:	481e      	ldr	r0, [pc, #120]	@ (80112dc <__pow5mult+0xb0>)
 8011264:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011268:	f001 f8c6 	bl	80123f8 <__assert_func>
 801126c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011270:	6004      	str	r4, [r0, #0]
 8011272:	60c4      	str	r4, [r0, #12]
 8011274:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801127c:	b94c      	cbnz	r4, 8011292 <__pow5mult+0x66>
 801127e:	f240 2171 	movw	r1, #625	@ 0x271
 8011282:	4638      	mov	r0, r7
 8011284:	f7ff ff12 	bl	80110ac <__i2b>
 8011288:	2300      	movs	r3, #0
 801128a:	f8c8 0008 	str.w	r0, [r8, #8]
 801128e:	4604      	mov	r4, r0
 8011290:	6003      	str	r3, [r0, #0]
 8011292:	f04f 0900 	mov.w	r9, #0
 8011296:	07eb      	lsls	r3, r5, #31
 8011298:	d50a      	bpl.n	80112b0 <__pow5mult+0x84>
 801129a:	4631      	mov	r1, r6
 801129c:	4622      	mov	r2, r4
 801129e:	4638      	mov	r0, r7
 80112a0:	f7ff ff1a 	bl	80110d8 <__multiply>
 80112a4:	4631      	mov	r1, r6
 80112a6:	4680      	mov	r8, r0
 80112a8:	4638      	mov	r0, r7
 80112aa:	f7ff fe01 	bl	8010eb0 <_Bfree>
 80112ae:	4646      	mov	r6, r8
 80112b0:	106d      	asrs	r5, r5, #1
 80112b2:	d00b      	beq.n	80112cc <__pow5mult+0xa0>
 80112b4:	6820      	ldr	r0, [r4, #0]
 80112b6:	b938      	cbnz	r0, 80112c8 <__pow5mult+0x9c>
 80112b8:	4622      	mov	r2, r4
 80112ba:	4621      	mov	r1, r4
 80112bc:	4638      	mov	r0, r7
 80112be:	f7ff ff0b 	bl	80110d8 <__multiply>
 80112c2:	6020      	str	r0, [r4, #0]
 80112c4:	f8c0 9000 	str.w	r9, [r0]
 80112c8:	4604      	mov	r4, r0
 80112ca:	e7e4      	b.n	8011296 <__pow5mult+0x6a>
 80112cc:	4630      	mov	r0, r6
 80112ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112d2:	bf00      	nop
 80112d4:	08012e40 	.word	0x08012e40
 80112d8:	08012d04 	.word	0x08012d04
 80112dc:	08012de4 	.word	0x08012de4

080112e0 <__lshift>:
 80112e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112e4:	460c      	mov	r4, r1
 80112e6:	6849      	ldr	r1, [r1, #4]
 80112e8:	6923      	ldr	r3, [r4, #16]
 80112ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80112ee:	68a3      	ldr	r3, [r4, #8]
 80112f0:	4607      	mov	r7, r0
 80112f2:	4691      	mov	r9, r2
 80112f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80112f8:	f108 0601 	add.w	r6, r8, #1
 80112fc:	42b3      	cmp	r3, r6
 80112fe:	db0b      	blt.n	8011318 <__lshift+0x38>
 8011300:	4638      	mov	r0, r7
 8011302:	f7ff fd95 	bl	8010e30 <_Balloc>
 8011306:	4605      	mov	r5, r0
 8011308:	b948      	cbnz	r0, 801131e <__lshift+0x3e>
 801130a:	4602      	mov	r2, r0
 801130c:	4b28      	ldr	r3, [pc, #160]	@ (80113b0 <__lshift+0xd0>)
 801130e:	4829      	ldr	r0, [pc, #164]	@ (80113b4 <__lshift+0xd4>)
 8011310:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011314:	f001 f870 	bl	80123f8 <__assert_func>
 8011318:	3101      	adds	r1, #1
 801131a:	005b      	lsls	r3, r3, #1
 801131c:	e7ee      	b.n	80112fc <__lshift+0x1c>
 801131e:	2300      	movs	r3, #0
 8011320:	f100 0114 	add.w	r1, r0, #20
 8011324:	f100 0210 	add.w	r2, r0, #16
 8011328:	4618      	mov	r0, r3
 801132a:	4553      	cmp	r3, sl
 801132c:	db33      	blt.n	8011396 <__lshift+0xb6>
 801132e:	6920      	ldr	r0, [r4, #16]
 8011330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011334:	f104 0314 	add.w	r3, r4, #20
 8011338:	f019 091f 	ands.w	r9, r9, #31
 801133c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011340:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011344:	d02b      	beq.n	801139e <__lshift+0xbe>
 8011346:	f1c9 0e20 	rsb	lr, r9, #32
 801134a:	468a      	mov	sl, r1
 801134c:	2200      	movs	r2, #0
 801134e:	6818      	ldr	r0, [r3, #0]
 8011350:	fa00 f009 	lsl.w	r0, r0, r9
 8011354:	4310      	orrs	r0, r2
 8011356:	f84a 0b04 	str.w	r0, [sl], #4
 801135a:	f853 2b04 	ldr.w	r2, [r3], #4
 801135e:	459c      	cmp	ip, r3
 8011360:	fa22 f20e 	lsr.w	r2, r2, lr
 8011364:	d8f3      	bhi.n	801134e <__lshift+0x6e>
 8011366:	ebac 0304 	sub.w	r3, ip, r4
 801136a:	3b15      	subs	r3, #21
 801136c:	f023 0303 	bic.w	r3, r3, #3
 8011370:	3304      	adds	r3, #4
 8011372:	f104 0015 	add.w	r0, r4, #21
 8011376:	4584      	cmp	ip, r0
 8011378:	bf38      	it	cc
 801137a:	2304      	movcc	r3, #4
 801137c:	50ca      	str	r2, [r1, r3]
 801137e:	b10a      	cbz	r2, 8011384 <__lshift+0xa4>
 8011380:	f108 0602 	add.w	r6, r8, #2
 8011384:	3e01      	subs	r6, #1
 8011386:	4638      	mov	r0, r7
 8011388:	612e      	str	r6, [r5, #16]
 801138a:	4621      	mov	r1, r4
 801138c:	f7ff fd90 	bl	8010eb0 <_Bfree>
 8011390:	4628      	mov	r0, r5
 8011392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011396:	f842 0f04 	str.w	r0, [r2, #4]!
 801139a:	3301      	adds	r3, #1
 801139c:	e7c5      	b.n	801132a <__lshift+0x4a>
 801139e:	3904      	subs	r1, #4
 80113a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80113a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80113a8:	459c      	cmp	ip, r3
 80113aa:	d8f9      	bhi.n	80113a0 <__lshift+0xc0>
 80113ac:	e7ea      	b.n	8011384 <__lshift+0xa4>
 80113ae:	bf00      	nop
 80113b0:	08012d73 	.word	0x08012d73
 80113b4:	08012de4 	.word	0x08012de4

080113b8 <__mcmp>:
 80113b8:	690a      	ldr	r2, [r1, #16]
 80113ba:	4603      	mov	r3, r0
 80113bc:	6900      	ldr	r0, [r0, #16]
 80113be:	1a80      	subs	r0, r0, r2
 80113c0:	b530      	push	{r4, r5, lr}
 80113c2:	d10e      	bne.n	80113e2 <__mcmp+0x2a>
 80113c4:	3314      	adds	r3, #20
 80113c6:	3114      	adds	r1, #20
 80113c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80113cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80113d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80113d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80113d8:	4295      	cmp	r5, r2
 80113da:	d003      	beq.n	80113e4 <__mcmp+0x2c>
 80113dc:	d205      	bcs.n	80113ea <__mcmp+0x32>
 80113de:	f04f 30ff 	mov.w	r0, #4294967295
 80113e2:	bd30      	pop	{r4, r5, pc}
 80113e4:	42a3      	cmp	r3, r4
 80113e6:	d3f3      	bcc.n	80113d0 <__mcmp+0x18>
 80113e8:	e7fb      	b.n	80113e2 <__mcmp+0x2a>
 80113ea:	2001      	movs	r0, #1
 80113ec:	e7f9      	b.n	80113e2 <__mcmp+0x2a>
	...

080113f0 <__mdiff>:
 80113f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113f4:	4689      	mov	r9, r1
 80113f6:	4606      	mov	r6, r0
 80113f8:	4611      	mov	r1, r2
 80113fa:	4648      	mov	r0, r9
 80113fc:	4614      	mov	r4, r2
 80113fe:	f7ff ffdb 	bl	80113b8 <__mcmp>
 8011402:	1e05      	subs	r5, r0, #0
 8011404:	d112      	bne.n	801142c <__mdiff+0x3c>
 8011406:	4629      	mov	r1, r5
 8011408:	4630      	mov	r0, r6
 801140a:	f7ff fd11 	bl	8010e30 <_Balloc>
 801140e:	4602      	mov	r2, r0
 8011410:	b928      	cbnz	r0, 801141e <__mdiff+0x2e>
 8011412:	4b3f      	ldr	r3, [pc, #252]	@ (8011510 <__mdiff+0x120>)
 8011414:	f240 2137 	movw	r1, #567	@ 0x237
 8011418:	483e      	ldr	r0, [pc, #248]	@ (8011514 <__mdiff+0x124>)
 801141a:	f000 ffed 	bl	80123f8 <__assert_func>
 801141e:	2301      	movs	r3, #1
 8011420:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011424:	4610      	mov	r0, r2
 8011426:	b003      	add	sp, #12
 8011428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801142c:	bfbc      	itt	lt
 801142e:	464b      	movlt	r3, r9
 8011430:	46a1      	movlt	r9, r4
 8011432:	4630      	mov	r0, r6
 8011434:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011438:	bfba      	itte	lt
 801143a:	461c      	movlt	r4, r3
 801143c:	2501      	movlt	r5, #1
 801143e:	2500      	movge	r5, #0
 8011440:	f7ff fcf6 	bl	8010e30 <_Balloc>
 8011444:	4602      	mov	r2, r0
 8011446:	b918      	cbnz	r0, 8011450 <__mdiff+0x60>
 8011448:	4b31      	ldr	r3, [pc, #196]	@ (8011510 <__mdiff+0x120>)
 801144a:	f240 2145 	movw	r1, #581	@ 0x245
 801144e:	e7e3      	b.n	8011418 <__mdiff+0x28>
 8011450:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011454:	6926      	ldr	r6, [r4, #16]
 8011456:	60c5      	str	r5, [r0, #12]
 8011458:	f109 0310 	add.w	r3, r9, #16
 801145c:	f109 0514 	add.w	r5, r9, #20
 8011460:	f104 0e14 	add.w	lr, r4, #20
 8011464:	f100 0b14 	add.w	fp, r0, #20
 8011468:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801146c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011470:	9301      	str	r3, [sp, #4]
 8011472:	46d9      	mov	r9, fp
 8011474:	f04f 0c00 	mov.w	ip, #0
 8011478:	9b01      	ldr	r3, [sp, #4]
 801147a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801147e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011482:	9301      	str	r3, [sp, #4]
 8011484:	fa1f f38a 	uxth.w	r3, sl
 8011488:	4619      	mov	r1, r3
 801148a:	b283      	uxth	r3, r0
 801148c:	1acb      	subs	r3, r1, r3
 801148e:	0c00      	lsrs	r0, r0, #16
 8011490:	4463      	add	r3, ip
 8011492:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011496:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801149a:	b29b      	uxth	r3, r3
 801149c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80114a0:	4576      	cmp	r6, lr
 80114a2:	f849 3b04 	str.w	r3, [r9], #4
 80114a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80114aa:	d8e5      	bhi.n	8011478 <__mdiff+0x88>
 80114ac:	1b33      	subs	r3, r6, r4
 80114ae:	3b15      	subs	r3, #21
 80114b0:	f023 0303 	bic.w	r3, r3, #3
 80114b4:	3415      	adds	r4, #21
 80114b6:	3304      	adds	r3, #4
 80114b8:	42a6      	cmp	r6, r4
 80114ba:	bf38      	it	cc
 80114bc:	2304      	movcc	r3, #4
 80114be:	441d      	add	r5, r3
 80114c0:	445b      	add	r3, fp
 80114c2:	461e      	mov	r6, r3
 80114c4:	462c      	mov	r4, r5
 80114c6:	4544      	cmp	r4, r8
 80114c8:	d30e      	bcc.n	80114e8 <__mdiff+0xf8>
 80114ca:	f108 0103 	add.w	r1, r8, #3
 80114ce:	1b49      	subs	r1, r1, r5
 80114d0:	f021 0103 	bic.w	r1, r1, #3
 80114d4:	3d03      	subs	r5, #3
 80114d6:	45a8      	cmp	r8, r5
 80114d8:	bf38      	it	cc
 80114da:	2100      	movcc	r1, #0
 80114dc:	440b      	add	r3, r1
 80114de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80114e2:	b191      	cbz	r1, 801150a <__mdiff+0x11a>
 80114e4:	6117      	str	r7, [r2, #16]
 80114e6:	e79d      	b.n	8011424 <__mdiff+0x34>
 80114e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80114ec:	46e6      	mov	lr, ip
 80114ee:	0c08      	lsrs	r0, r1, #16
 80114f0:	fa1c fc81 	uxtah	ip, ip, r1
 80114f4:	4471      	add	r1, lr
 80114f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80114fa:	b289      	uxth	r1, r1
 80114fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011500:	f846 1b04 	str.w	r1, [r6], #4
 8011504:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011508:	e7dd      	b.n	80114c6 <__mdiff+0xd6>
 801150a:	3f01      	subs	r7, #1
 801150c:	e7e7      	b.n	80114de <__mdiff+0xee>
 801150e:	bf00      	nop
 8011510:	08012d73 	.word	0x08012d73
 8011514:	08012de4 	.word	0x08012de4

08011518 <__ulp>:
 8011518:	b082      	sub	sp, #8
 801151a:	ed8d 0b00 	vstr	d0, [sp]
 801151e:	9a01      	ldr	r2, [sp, #4]
 8011520:	4b0f      	ldr	r3, [pc, #60]	@ (8011560 <__ulp+0x48>)
 8011522:	4013      	ands	r3, r2
 8011524:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011528:	2b00      	cmp	r3, #0
 801152a:	dc08      	bgt.n	801153e <__ulp+0x26>
 801152c:	425b      	negs	r3, r3
 801152e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011532:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011536:	da04      	bge.n	8011542 <__ulp+0x2a>
 8011538:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801153c:	4113      	asrs	r3, r2
 801153e:	2200      	movs	r2, #0
 8011540:	e008      	b.n	8011554 <__ulp+0x3c>
 8011542:	f1a2 0314 	sub.w	r3, r2, #20
 8011546:	2b1e      	cmp	r3, #30
 8011548:	bfda      	itte	le
 801154a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801154e:	40da      	lsrle	r2, r3
 8011550:	2201      	movgt	r2, #1
 8011552:	2300      	movs	r3, #0
 8011554:	4619      	mov	r1, r3
 8011556:	4610      	mov	r0, r2
 8011558:	ec41 0b10 	vmov	d0, r0, r1
 801155c:	b002      	add	sp, #8
 801155e:	4770      	bx	lr
 8011560:	7ff00000 	.word	0x7ff00000

08011564 <__b2d>:
 8011564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011568:	6906      	ldr	r6, [r0, #16]
 801156a:	f100 0814 	add.w	r8, r0, #20
 801156e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011572:	1f37      	subs	r7, r6, #4
 8011574:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011578:	4610      	mov	r0, r2
 801157a:	f7ff fd4b 	bl	8011014 <__hi0bits>
 801157e:	f1c0 0320 	rsb	r3, r0, #32
 8011582:	280a      	cmp	r0, #10
 8011584:	600b      	str	r3, [r1, #0]
 8011586:	491b      	ldr	r1, [pc, #108]	@ (80115f4 <__b2d+0x90>)
 8011588:	dc15      	bgt.n	80115b6 <__b2d+0x52>
 801158a:	f1c0 0c0b 	rsb	ip, r0, #11
 801158e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011592:	45b8      	cmp	r8, r7
 8011594:	ea43 0501 	orr.w	r5, r3, r1
 8011598:	bf34      	ite	cc
 801159a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801159e:	2300      	movcs	r3, #0
 80115a0:	3015      	adds	r0, #21
 80115a2:	fa02 f000 	lsl.w	r0, r2, r0
 80115a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80115aa:	4303      	orrs	r3, r0
 80115ac:	461c      	mov	r4, r3
 80115ae:	ec45 4b10 	vmov	d0, r4, r5
 80115b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115b6:	45b8      	cmp	r8, r7
 80115b8:	bf3a      	itte	cc
 80115ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80115be:	f1a6 0708 	subcc.w	r7, r6, #8
 80115c2:	2300      	movcs	r3, #0
 80115c4:	380b      	subs	r0, #11
 80115c6:	d012      	beq.n	80115ee <__b2d+0x8a>
 80115c8:	f1c0 0120 	rsb	r1, r0, #32
 80115cc:	fa23 f401 	lsr.w	r4, r3, r1
 80115d0:	4082      	lsls	r2, r0
 80115d2:	4322      	orrs	r2, r4
 80115d4:	4547      	cmp	r7, r8
 80115d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80115da:	bf8c      	ite	hi
 80115dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80115e0:	2200      	movls	r2, #0
 80115e2:	4083      	lsls	r3, r0
 80115e4:	40ca      	lsrs	r2, r1
 80115e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80115ea:	4313      	orrs	r3, r2
 80115ec:	e7de      	b.n	80115ac <__b2d+0x48>
 80115ee:	ea42 0501 	orr.w	r5, r2, r1
 80115f2:	e7db      	b.n	80115ac <__b2d+0x48>
 80115f4:	3ff00000 	.word	0x3ff00000

080115f8 <__d2b>:
 80115f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80115fc:	460f      	mov	r7, r1
 80115fe:	2101      	movs	r1, #1
 8011600:	ec59 8b10 	vmov	r8, r9, d0
 8011604:	4616      	mov	r6, r2
 8011606:	f7ff fc13 	bl	8010e30 <_Balloc>
 801160a:	4604      	mov	r4, r0
 801160c:	b930      	cbnz	r0, 801161c <__d2b+0x24>
 801160e:	4602      	mov	r2, r0
 8011610:	4b23      	ldr	r3, [pc, #140]	@ (80116a0 <__d2b+0xa8>)
 8011612:	4824      	ldr	r0, [pc, #144]	@ (80116a4 <__d2b+0xac>)
 8011614:	f240 310f 	movw	r1, #783	@ 0x30f
 8011618:	f000 feee 	bl	80123f8 <__assert_func>
 801161c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011624:	b10d      	cbz	r5, 801162a <__d2b+0x32>
 8011626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801162a:	9301      	str	r3, [sp, #4]
 801162c:	f1b8 0300 	subs.w	r3, r8, #0
 8011630:	d023      	beq.n	801167a <__d2b+0x82>
 8011632:	4668      	mov	r0, sp
 8011634:	9300      	str	r3, [sp, #0]
 8011636:	f7ff fd0c 	bl	8011052 <__lo0bits>
 801163a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801163e:	b1d0      	cbz	r0, 8011676 <__d2b+0x7e>
 8011640:	f1c0 0320 	rsb	r3, r0, #32
 8011644:	fa02 f303 	lsl.w	r3, r2, r3
 8011648:	430b      	orrs	r3, r1
 801164a:	40c2      	lsrs	r2, r0
 801164c:	6163      	str	r3, [r4, #20]
 801164e:	9201      	str	r2, [sp, #4]
 8011650:	9b01      	ldr	r3, [sp, #4]
 8011652:	61a3      	str	r3, [r4, #24]
 8011654:	2b00      	cmp	r3, #0
 8011656:	bf0c      	ite	eq
 8011658:	2201      	moveq	r2, #1
 801165a:	2202      	movne	r2, #2
 801165c:	6122      	str	r2, [r4, #16]
 801165e:	b1a5      	cbz	r5, 801168a <__d2b+0x92>
 8011660:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011664:	4405      	add	r5, r0
 8011666:	603d      	str	r5, [r7, #0]
 8011668:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801166c:	6030      	str	r0, [r6, #0]
 801166e:	4620      	mov	r0, r4
 8011670:	b003      	add	sp, #12
 8011672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011676:	6161      	str	r1, [r4, #20]
 8011678:	e7ea      	b.n	8011650 <__d2b+0x58>
 801167a:	a801      	add	r0, sp, #4
 801167c:	f7ff fce9 	bl	8011052 <__lo0bits>
 8011680:	9b01      	ldr	r3, [sp, #4]
 8011682:	6163      	str	r3, [r4, #20]
 8011684:	3020      	adds	r0, #32
 8011686:	2201      	movs	r2, #1
 8011688:	e7e8      	b.n	801165c <__d2b+0x64>
 801168a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801168e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011692:	6038      	str	r0, [r7, #0]
 8011694:	6918      	ldr	r0, [r3, #16]
 8011696:	f7ff fcbd 	bl	8011014 <__hi0bits>
 801169a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801169e:	e7e5      	b.n	801166c <__d2b+0x74>
 80116a0:	08012d73 	.word	0x08012d73
 80116a4:	08012de4 	.word	0x08012de4

080116a8 <__ratio>:
 80116a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116ac:	4688      	mov	r8, r1
 80116ae:	4669      	mov	r1, sp
 80116b0:	4681      	mov	r9, r0
 80116b2:	f7ff ff57 	bl	8011564 <__b2d>
 80116b6:	a901      	add	r1, sp, #4
 80116b8:	4640      	mov	r0, r8
 80116ba:	ec55 4b10 	vmov	r4, r5, d0
 80116be:	f7ff ff51 	bl	8011564 <__b2d>
 80116c2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80116c6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80116ca:	1ad2      	subs	r2, r2, r3
 80116cc:	e9dd 3100 	ldrd	r3, r1, [sp]
 80116d0:	1a5b      	subs	r3, r3, r1
 80116d2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80116d6:	ec57 6b10 	vmov	r6, r7, d0
 80116da:	2b00      	cmp	r3, #0
 80116dc:	bfd6      	itet	le
 80116de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80116e2:	462a      	movgt	r2, r5
 80116e4:	463a      	movle	r2, r7
 80116e6:	46ab      	mov	fp, r5
 80116e8:	46a2      	mov	sl, r4
 80116ea:	bfce      	itee	gt
 80116ec:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80116f0:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80116f4:	ee00 3a90 	vmovle	s1, r3
 80116f8:	ec4b ab17 	vmov	d7, sl, fp
 80116fc:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8011700:	b003      	add	sp, #12
 8011702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011706 <__copybits>:
 8011706:	3901      	subs	r1, #1
 8011708:	b570      	push	{r4, r5, r6, lr}
 801170a:	1149      	asrs	r1, r1, #5
 801170c:	6914      	ldr	r4, [r2, #16]
 801170e:	3101      	adds	r1, #1
 8011710:	f102 0314 	add.w	r3, r2, #20
 8011714:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011718:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801171c:	1f05      	subs	r5, r0, #4
 801171e:	42a3      	cmp	r3, r4
 8011720:	d30c      	bcc.n	801173c <__copybits+0x36>
 8011722:	1aa3      	subs	r3, r4, r2
 8011724:	3b11      	subs	r3, #17
 8011726:	f023 0303 	bic.w	r3, r3, #3
 801172a:	3211      	adds	r2, #17
 801172c:	42a2      	cmp	r2, r4
 801172e:	bf88      	it	hi
 8011730:	2300      	movhi	r3, #0
 8011732:	4418      	add	r0, r3
 8011734:	2300      	movs	r3, #0
 8011736:	4288      	cmp	r0, r1
 8011738:	d305      	bcc.n	8011746 <__copybits+0x40>
 801173a:	bd70      	pop	{r4, r5, r6, pc}
 801173c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011740:	f845 6f04 	str.w	r6, [r5, #4]!
 8011744:	e7eb      	b.n	801171e <__copybits+0x18>
 8011746:	f840 3b04 	str.w	r3, [r0], #4
 801174a:	e7f4      	b.n	8011736 <__copybits+0x30>

0801174c <__any_on>:
 801174c:	f100 0214 	add.w	r2, r0, #20
 8011750:	6900      	ldr	r0, [r0, #16]
 8011752:	114b      	asrs	r3, r1, #5
 8011754:	4298      	cmp	r0, r3
 8011756:	b510      	push	{r4, lr}
 8011758:	db11      	blt.n	801177e <__any_on+0x32>
 801175a:	dd0a      	ble.n	8011772 <__any_on+0x26>
 801175c:	f011 011f 	ands.w	r1, r1, #31
 8011760:	d007      	beq.n	8011772 <__any_on+0x26>
 8011762:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011766:	fa24 f001 	lsr.w	r0, r4, r1
 801176a:	fa00 f101 	lsl.w	r1, r0, r1
 801176e:	428c      	cmp	r4, r1
 8011770:	d10b      	bne.n	801178a <__any_on+0x3e>
 8011772:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011776:	4293      	cmp	r3, r2
 8011778:	d803      	bhi.n	8011782 <__any_on+0x36>
 801177a:	2000      	movs	r0, #0
 801177c:	bd10      	pop	{r4, pc}
 801177e:	4603      	mov	r3, r0
 8011780:	e7f7      	b.n	8011772 <__any_on+0x26>
 8011782:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011786:	2900      	cmp	r1, #0
 8011788:	d0f5      	beq.n	8011776 <__any_on+0x2a>
 801178a:	2001      	movs	r0, #1
 801178c:	e7f6      	b.n	801177c <__any_on+0x30>
	...

08011790 <_strtol_l.constprop.0>:
 8011790:	2b24      	cmp	r3, #36	@ 0x24
 8011792:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011796:	4686      	mov	lr, r0
 8011798:	4690      	mov	r8, r2
 801179a:	d801      	bhi.n	80117a0 <_strtol_l.constprop.0+0x10>
 801179c:	2b01      	cmp	r3, #1
 801179e:	d106      	bne.n	80117ae <_strtol_l.constprop.0+0x1e>
 80117a0:	f7fe f984 	bl	800faac <__errno>
 80117a4:	2316      	movs	r3, #22
 80117a6:	6003      	str	r3, [r0, #0]
 80117a8:	2000      	movs	r0, #0
 80117aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ae:	4834      	ldr	r0, [pc, #208]	@ (8011880 <_strtol_l.constprop.0+0xf0>)
 80117b0:	460d      	mov	r5, r1
 80117b2:	462a      	mov	r2, r5
 80117b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80117b8:	5d06      	ldrb	r6, [r0, r4]
 80117ba:	f016 0608 	ands.w	r6, r6, #8
 80117be:	d1f8      	bne.n	80117b2 <_strtol_l.constprop.0+0x22>
 80117c0:	2c2d      	cmp	r4, #45	@ 0x2d
 80117c2:	d12d      	bne.n	8011820 <_strtol_l.constprop.0+0x90>
 80117c4:	782c      	ldrb	r4, [r5, #0]
 80117c6:	2601      	movs	r6, #1
 80117c8:	1c95      	adds	r5, r2, #2
 80117ca:	f033 0210 	bics.w	r2, r3, #16
 80117ce:	d109      	bne.n	80117e4 <_strtol_l.constprop.0+0x54>
 80117d0:	2c30      	cmp	r4, #48	@ 0x30
 80117d2:	d12a      	bne.n	801182a <_strtol_l.constprop.0+0x9a>
 80117d4:	782a      	ldrb	r2, [r5, #0]
 80117d6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80117da:	2a58      	cmp	r2, #88	@ 0x58
 80117dc:	d125      	bne.n	801182a <_strtol_l.constprop.0+0x9a>
 80117de:	786c      	ldrb	r4, [r5, #1]
 80117e0:	2310      	movs	r3, #16
 80117e2:	3502      	adds	r5, #2
 80117e4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80117e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80117ec:	2200      	movs	r2, #0
 80117ee:	fbbc f9f3 	udiv	r9, ip, r3
 80117f2:	4610      	mov	r0, r2
 80117f4:	fb03 ca19 	mls	sl, r3, r9, ip
 80117f8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80117fc:	2f09      	cmp	r7, #9
 80117fe:	d81b      	bhi.n	8011838 <_strtol_l.constprop.0+0xa8>
 8011800:	463c      	mov	r4, r7
 8011802:	42a3      	cmp	r3, r4
 8011804:	dd27      	ble.n	8011856 <_strtol_l.constprop.0+0xc6>
 8011806:	1c57      	adds	r7, r2, #1
 8011808:	d007      	beq.n	801181a <_strtol_l.constprop.0+0x8a>
 801180a:	4581      	cmp	r9, r0
 801180c:	d320      	bcc.n	8011850 <_strtol_l.constprop.0+0xc0>
 801180e:	d101      	bne.n	8011814 <_strtol_l.constprop.0+0x84>
 8011810:	45a2      	cmp	sl, r4
 8011812:	db1d      	blt.n	8011850 <_strtol_l.constprop.0+0xc0>
 8011814:	fb00 4003 	mla	r0, r0, r3, r4
 8011818:	2201      	movs	r2, #1
 801181a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801181e:	e7eb      	b.n	80117f8 <_strtol_l.constprop.0+0x68>
 8011820:	2c2b      	cmp	r4, #43	@ 0x2b
 8011822:	bf04      	itt	eq
 8011824:	782c      	ldrbeq	r4, [r5, #0]
 8011826:	1c95      	addeq	r5, r2, #2
 8011828:	e7cf      	b.n	80117ca <_strtol_l.constprop.0+0x3a>
 801182a:	2b00      	cmp	r3, #0
 801182c:	d1da      	bne.n	80117e4 <_strtol_l.constprop.0+0x54>
 801182e:	2c30      	cmp	r4, #48	@ 0x30
 8011830:	bf0c      	ite	eq
 8011832:	2308      	moveq	r3, #8
 8011834:	230a      	movne	r3, #10
 8011836:	e7d5      	b.n	80117e4 <_strtol_l.constprop.0+0x54>
 8011838:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801183c:	2f19      	cmp	r7, #25
 801183e:	d801      	bhi.n	8011844 <_strtol_l.constprop.0+0xb4>
 8011840:	3c37      	subs	r4, #55	@ 0x37
 8011842:	e7de      	b.n	8011802 <_strtol_l.constprop.0+0x72>
 8011844:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011848:	2f19      	cmp	r7, #25
 801184a:	d804      	bhi.n	8011856 <_strtol_l.constprop.0+0xc6>
 801184c:	3c57      	subs	r4, #87	@ 0x57
 801184e:	e7d8      	b.n	8011802 <_strtol_l.constprop.0+0x72>
 8011850:	f04f 32ff 	mov.w	r2, #4294967295
 8011854:	e7e1      	b.n	801181a <_strtol_l.constprop.0+0x8a>
 8011856:	1c53      	adds	r3, r2, #1
 8011858:	d108      	bne.n	801186c <_strtol_l.constprop.0+0xdc>
 801185a:	2322      	movs	r3, #34	@ 0x22
 801185c:	f8ce 3000 	str.w	r3, [lr]
 8011860:	4660      	mov	r0, ip
 8011862:	f1b8 0f00 	cmp.w	r8, #0
 8011866:	d0a0      	beq.n	80117aa <_strtol_l.constprop.0+0x1a>
 8011868:	1e69      	subs	r1, r5, #1
 801186a:	e006      	b.n	801187a <_strtol_l.constprop.0+0xea>
 801186c:	b106      	cbz	r6, 8011870 <_strtol_l.constprop.0+0xe0>
 801186e:	4240      	negs	r0, r0
 8011870:	f1b8 0f00 	cmp.w	r8, #0
 8011874:	d099      	beq.n	80117aa <_strtol_l.constprop.0+0x1a>
 8011876:	2a00      	cmp	r2, #0
 8011878:	d1f6      	bne.n	8011868 <_strtol_l.constprop.0+0xd8>
 801187a:	f8c8 1000 	str.w	r1, [r8]
 801187e:	e794      	b.n	80117aa <_strtol_l.constprop.0+0x1a>
 8011880:	08012f41 	.word	0x08012f41

08011884 <_strtol_r>:
 8011884:	f7ff bf84 	b.w	8011790 <_strtol_l.constprop.0>

08011888 <__ascii_wctomb>:
 8011888:	4603      	mov	r3, r0
 801188a:	4608      	mov	r0, r1
 801188c:	b141      	cbz	r1, 80118a0 <__ascii_wctomb+0x18>
 801188e:	2aff      	cmp	r2, #255	@ 0xff
 8011890:	d904      	bls.n	801189c <__ascii_wctomb+0x14>
 8011892:	228a      	movs	r2, #138	@ 0x8a
 8011894:	601a      	str	r2, [r3, #0]
 8011896:	f04f 30ff 	mov.w	r0, #4294967295
 801189a:	4770      	bx	lr
 801189c:	700a      	strb	r2, [r1, #0]
 801189e:	2001      	movs	r0, #1
 80118a0:	4770      	bx	lr

080118a2 <__ssputs_r>:
 80118a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118a6:	688e      	ldr	r6, [r1, #8]
 80118a8:	461f      	mov	r7, r3
 80118aa:	42be      	cmp	r6, r7
 80118ac:	680b      	ldr	r3, [r1, #0]
 80118ae:	4682      	mov	sl, r0
 80118b0:	460c      	mov	r4, r1
 80118b2:	4690      	mov	r8, r2
 80118b4:	d82d      	bhi.n	8011912 <__ssputs_r+0x70>
 80118b6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80118ba:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80118be:	d026      	beq.n	801190e <__ssputs_r+0x6c>
 80118c0:	6965      	ldr	r5, [r4, #20]
 80118c2:	6909      	ldr	r1, [r1, #16]
 80118c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80118c8:	eba3 0901 	sub.w	r9, r3, r1
 80118cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80118d0:	1c7b      	adds	r3, r7, #1
 80118d2:	444b      	add	r3, r9
 80118d4:	106d      	asrs	r5, r5, #1
 80118d6:	429d      	cmp	r5, r3
 80118d8:	bf38      	it	cc
 80118da:	461d      	movcc	r5, r3
 80118dc:	0553      	lsls	r3, r2, #21
 80118de:	d527      	bpl.n	8011930 <__ssputs_r+0x8e>
 80118e0:	4629      	mov	r1, r5
 80118e2:	f7fc fa89 	bl	800ddf8 <_malloc_r>
 80118e6:	4606      	mov	r6, r0
 80118e8:	b360      	cbz	r0, 8011944 <__ssputs_r+0xa2>
 80118ea:	6921      	ldr	r1, [r4, #16]
 80118ec:	464a      	mov	r2, r9
 80118ee:	f7fe f90a 	bl	800fb06 <memcpy>
 80118f2:	89a3      	ldrh	r3, [r4, #12]
 80118f4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80118f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118fc:	81a3      	strh	r3, [r4, #12]
 80118fe:	6126      	str	r6, [r4, #16]
 8011900:	6165      	str	r5, [r4, #20]
 8011902:	444e      	add	r6, r9
 8011904:	eba5 0509 	sub.w	r5, r5, r9
 8011908:	6026      	str	r6, [r4, #0]
 801190a:	60a5      	str	r5, [r4, #8]
 801190c:	463e      	mov	r6, r7
 801190e:	42be      	cmp	r6, r7
 8011910:	d900      	bls.n	8011914 <__ssputs_r+0x72>
 8011912:	463e      	mov	r6, r7
 8011914:	6820      	ldr	r0, [r4, #0]
 8011916:	4632      	mov	r2, r6
 8011918:	4641      	mov	r1, r8
 801191a:	f000 fd52 	bl	80123c2 <memmove>
 801191e:	68a3      	ldr	r3, [r4, #8]
 8011920:	1b9b      	subs	r3, r3, r6
 8011922:	60a3      	str	r3, [r4, #8]
 8011924:	6823      	ldr	r3, [r4, #0]
 8011926:	4433      	add	r3, r6
 8011928:	6023      	str	r3, [r4, #0]
 801192a:	2000      	movs	r0, #0
 801192c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011930:	462a      	mov	r2, r5
 8011932:	f000 fd93 	bl	801245c <_realloc_r>
 8011936:	4606      	mov	r6, r0
 8011938:	2800      	cmp	r0, #0
 801193a:	d1e0      	bne.n	80118fe <__ssputs_r+0x5c>
 801193c:	6921      	ldr	r1, [r4, #16]
 801193e:	4650      	mov	r0, sl
 8011940:	f7fe fee0 	bl	8010704 <_free_r>
 8011944:	230c      	movs	r3, #12
 8011946:	f8ca 3000 	str.w	r3, [sl]
 801194a:	89a3      	ldrh	r3, [r4, #12]
 801194c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011950:	81a3      	strh	r3, [r4, #12]
 8011952:	f04f 30ff 	mov.w	r0, #4294967295
 8011956:	e7e9      	b.n	801192c <__ssputs_r+0x8a>

08011958 <_svfiprintf_r>:
 8011958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801195c:	4698      	mov	r8, r3
 801195e:	898b      	ldrh	r3, [r1, #12]
 8011960:	061b      	lsls	r3, r3, #24
 8011962:	b09d      	sub	sp, #116	@ 0x74
 8011964:	4607      	mov	r7, r0
 8011966:	460d      	mov	r5, r1
 8011968:	4614      	mov	r4, r2
 801196a:	d510      	bpl.n	801198e <_svfiprintf_r+0x36>
 801196c:	690b      	ldr	r3, [r1, #16]
 801196e:	b973      	cbnz	r3, 801198e <_svfiprintf_r+0x36>
 8011970:	2140      	movs	r1, #64	@ 0x40
 8011972:	f7fc fa41 	bl	800ddf8 <_malloc_r>
 8011976:	6028      	str	r0, [r5, #0]
 8011978:	6128      	str	r0, [r5, #16]
 801197a:	b930      	cbnz	r0, 801198a <_svfiprintf_r+0x32>
 801197c:	230c      	movs	r3, #12
 801197e:	603b      	str	r3, [r7, #0]
 8011980:	f04f 30ff 	mov.w	r0, #4294967295
 8011984:	b01d      	add	sp, #116	@ 0x74
 8011986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801198a:	2340      	movs	r3, #64	@ 0x40
 801198c:	616b      	str	r3, [r5, #20]
 801198e:	2300      	movs	r3, #0
 8011990:	9309      	str	r3, [sp, #36]	@ 0x24
 8011992:	2320      	movs	r3, #32
 8011994:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011998:	f8cd 800c 	str.w	r8, [sp, #12]
 801199c:	2330      	movs	r3, #48	@ 0x30
 801199e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011b3c <_svfiprintf_r+0x1e4>
 80119a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80119a6:	f04f 0901 	mov.w	r9, #1
 80119aa:	4623      	mov	r3, r4
 80119ac:	469a      	mov	sl, r3
 80119ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119b2:	b10a      	cbz	r2, 80119b8 <_svfiprintf_r+0x60>
 80119b4:	2a25      	cmp	r2, #37	@ 0x25
 80119b6:	d1f9      	bne.n	80119ac <_svfiprintf_r+0x54>
 80119b8:	ebba 0b04 	subs.w	fp, sl, r4
 80119bc:	d00b      	beq.n	80119d6 <_svfiprintf_r+0x7e>
 80119be:	465b      	mov	r3, fp
 80119c0:	4622      	mov	r2, r4
 80119c2:	4629      	mov	r1, r5
 80119c4:	4638      	mov	r0, r7
 80119c6:	f7ff ff6c 	bl	80118a2 <__ssputs_r>
 80119ca:	3001      	adds	r0, #1
 80119cc:	f000 80a7 	beq.w	8011b1e <_svfiprintf_r+0x1c6>
 80119d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119d2:	445a      	add	r2, fp
 80119d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80119d6:	f89a 3000 	ldrb.w	r3, [sl]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	f000 809f 	beq.w	8011b1e <_svfiprintf_r+0x1c6>
 80119e0:	2300      	movs	r3, #0
 80119e2:	f04f 32ff 	mov.w	r2, #4294967295
 80119e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119ea:	f10a 0a01 	add.w	sl, sl, #1
 80119ee:	9304      	str	r3, [sp, #16]
 80119f0:	9307      	str	r3, [sp, #28]
 80119f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80119f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80119f8:	4654      	mov	r4, sl
 80119fa:	2205      	movs	r2, #5
 80119fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a00:	484e      	ldr	r0, [pc, #312]	@ (8011b3c <_svfiprintf_r+0x1e4>)
 8011a02:	f7ee fc85 	bl	8000310 <memchr>
 8011a06:	9a04      	ldr	r2, [sp, #16]
 8011a08:	b9d8      	cbnz	r0, 8011a42 <_svfiprintf_r+0xea>
 8011a0a:	06d0      	lsls	r0, r2, #27
 8011a0c:	bf44      	itt	mi
 8011a0e:	2320      	movmi	r3, #32
 8011a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a14:	0711      	lsls	r1, r2, #28
 8011a16:	bf44      	itt	mi
 8011a18:	232b      	movmi	r3, #43	@ 0x2b
 8011a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8011a22:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a24:	d015      	beq.n	8011a52 <_svfiprintf_r+0xfa>
 8011a26:	9a07      	ldr	r2, [sp, #28]
 8011a28:	4654      	mov	r4, sl
 8011a2a:	2000      	movs	r0, #0
 8011a2c:	f04f 0c0a 	mov.w	ip, #10
 8011a30:	4621      	mov	r1, r4
 8011a32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a36:	3b30      	subs	r3, #48	@ 0x30
 8011a38:	2b09      	cmp	r3, #9
 8011a3a:	d94b      	bls.n	8011ad4 <_svfiprintf_r+0x17c>
 8011a3c:	b1b0      	cbz	r0, 8011a6c <_svfiprintf_r+0x114>
 8011a3e:	9207      	str	r2, [sp, #28]
 8011a40:	e014      	b.n	8011a6c <_svfiprintf_r+0x114>
 8011a42:	eba0 0308 	sub.w	r3, r0, r8
 8011a46:	fa09 f303 	lsl.w	r3, r9, r3
 8011a4a:	4313      	orrs	r3, r2
 8011a4c:	9304      	str	r3, [sp, #16]
 8011a4e:	46a2      	mov	sl, r4
 8011a50:	e7d2      	b.n	80119f8 <_svfiprintf_r+0xa0>
 8011a52:	9b03      	ldr	r3, [sp, #12]
 8011a54:	1d19      	adds	r1, r3, #4
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	9103      	str	r1, [sp, #12]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	bfbb      	ittet	lt
 8011a5e:	425b      	neglt	r3, r3
 8011a60:	f042 0202 	orrlt.w	r2, r2, #2
 8011a64:	9307      	strge	r3, [sp, #28]
 8011a66:	9307      	strlt	r3, [sp, #28]
 8011a68:	bfb8      	it	lt
 8011a6a:	9204      	strlt	r2, [sp, #16]
 8011a6c:	7823      	ldrb	r3, [r4, #0]
 8011a6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a70:	d10a      	bne.n	8011a88 <_svfiprintf_r+0x130>
 8011a72:	7863      	ldrb	r3, [r4, #1]
 8011a74:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a76:	d132      	bne.n	8011ade <_svfiprintf_r+0x186>
 8011a78:	9b03      	ldr	r3, [sp, #12]
 8011a7a:	1d1a      	adds	r2, r3, #4
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	9203      	str	r2, [sp, #12]
 8011a80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011a84:	3402      	adds	r4, #2
 8011a86:	9305      	str	r3, [sp, #20]
 8011a88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011b4c <_svfiprintf_r+0x1f4>
 8011a8c:	7821      	ldrb	r1, [r4, #0]
 8011a8e:	2203      	movs	r2, #3
 8011a90:	4650      	mov	r0, sl
 8011a92:	f7ee fc3d 	bl	8000310 <memchr>
 8011a96:	b138      	cbz	r0, 8011aa8 <_svfiprintf_r+0x150>
 8011a98:	9b04      	ldr	r3, [sp, #16]
 8011a9a:	eba0 000a 	sub.w	r0, r0, sl
 8011a9e:	2240      	movs	r2, #64	@ 0x40
 8011aa0:	4082      	lsls	r2, r0
 8011aa2:	4313      	orrs	r3, r2
 8011aa4:	3401      	adds	r4, #1
 8011aa6:	9304      	str	r3, [sp, #16]
 8011aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aac:	4824      	ldr	r0, [pc, #144]	@ (8011b40 <_svfiprintf_r+0x1e8>)
 8011aae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011ab2:	2206      	movs	r2, #6
 8011ab4:	f7ee fc2c 	bl	8000310 <memchr>
 8011ab8:	2800      	cmp	r0, #0
 8011aba:	d036      	beq.n	8011b2a <_svfiprintf_r+0x1d2>
 8011abc:	4b21      	ldr	r3, [pc, #132]	@ (8011b44 <_svfiprintf_r+0x1ec>)
 8011abe:	bb1b      	cbnz	r3, 8011b08 <_svfiprintf_r+0x1b0>
 8011ac0:	9b03      	ldr	r3, [sp, #12]
 8011ac2:	3307      	adds	r3, #7
 8011ac4:	f023 0307 	bic.w	r3, r3, #7
 8011ac8:	3308      	adds	r3, #8
 8011aca:	9303      	str	r3, [sp, #12]
 8011acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ace:	4433      	add	r3, r6
 8011ad0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ad2:	e76a      	b.n	80119aa <_svfiprintf_r+0x52>
 8011ad4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ad8:	460c      	mov	r4, r1
 8011ada:	2001      	movs	r0, #1
 8011adc:	e7a8      	b.n	8011a30 <_svfiprintf_r+0xd8>
 8011ade:	2300      	movs	r3, #0
 8011ae0:	3401      	adds	r4, #1
 8011ae2:	9305      	str	r3, [sp, #20]
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	f04f 0c0a 	mov.w	ip, #10
 8011aea:	4620      	mov	r0, r4
 8011aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011af0:	3a30      	subs	r2, #48	@ 0x30
 8011af2:	2a09      	cmp	r2, #9
 8011af4:	d903      	bls.n	8011afe <_svfiprintf_r+0x1a6>
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d0c6      	beq.n	8011a88 <_svfiprintf_r+0x130>
 8011afa:	9105      	str	r1, [sp, #20]
 8011afc:	e7c4      	b.n	8011a88 <_svfiprintf_r+0x130>
 8011afe:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b02:	4604      	mov	r4, r0
 8011b04:	2301      	movs	r3, #1
 8011b06:	e7f0      	b.n	8011aea <_svfiprintf_r+0x192>
 8011b08:	ab03      	add	r3, sp, #12
 8011b0a:	9300      	str	r3, [sp, #0]
 8011b0c:	462a      	mov	r2, r5
 8011b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8011b48 <_svfiprintf_r+0x1f0>)
 8011b10:	a904      	add	r1, sp, #16
 8011b12:	4638      	mov	r0, r7
 8011b14:	f7fd f844 	bl	800eba0 <_printf_float>
 8011b18:	1c42      	adds	r2, r0, #1
 8011b1a:	4606      	mov	r6, r0
 8011b1c:	d1d6      	bne.n	8011acc <_svfiprintf_r+0x174>
 8011b1e:	89ab      	ldrh	r3, [r5, #12]
 8011b20:	065b      	lsls	r3, r3, #25
 8011b22:	f53f af2d 	bmi.w	8011980 <_svfiprintf_r+0x28>
 8011b26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011b28:	e72c      	b.n	8011984 <_svfiprintf_r+0x2c>
 8011b2a:	ab03      	add	r3, sp, #12
 8011b2c:	9300      	str	r3, [sp, #0]
 8011b2e:	462a      	mov	r2, r5
 8011b30:	4b05      	ldr	r3, [pc, #20]	@ (8011b48 <_svfiprintf_r+0x1f0>)
 8011b32:	a904      	add	r1, sp, #16
 8011b34:	4638      	mov	r0, r7
 8011b36:	f7fd fabb 	bl	800f0b0 <_printf_i>
 8011b3a:	e7ed      	b.n	8011b18 <_svfiprintf_r+0x1c0>
 8011b3c:	08013041 	.word	0x08013041
 8011b40:	0801304b 	.word	0x0801304b
 8011b44:	0800eba1 	.word	0x0800eba1
 8011b48:	080118a3 	.word	0x080118a3
 8011b4c:	08013047 	.word	0x08013047

08011b50 <_sungetc_r>:
 8011b50:	b538      	push	{r3, r4, r5, lr}
 8011b52:	1c4b      	adds	r3, r1, #1
 8011b54:	4614      	mov	r4, r2
 8011b56:	d103      	bne.n	8011b60 <_sungetc_r+0x10>
 8011b58:	f04f 35ff 	mov.w	r5, #4294967295
 8011b5c:	4628      	mov	r0, r5
 8011b5e:	bd38      	pop	{r3, r4, r5, pc}
 8011b60:	8993      	ldrh	r3, [r2, #12]
 8011b62:	f023 0320 	bic.w	r3, r3, #32
 8011b66:	8193      	strh	r3, [r2, #12]
 8011b68:	6853      	ldr	r3, [r2, #4]
 8011b6a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8011b6c:	b2cd      	uxtb	r5, r1
 8011b6e:	b18a      	cbz	r2, 8011b94 <_sungetc_r+0x44>
 8011b70:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011b72:	429a      	cmp	r2, r3
 8011b74:	dd08      	ble.n	8011b88 <_sungetc_r+0x38>
 8011b76:	6823      	ldr	r3, [r4, #0]
 8011b78:	1e5a      	subs	r2, r3, #1
 8011b7a:	6022      	str	r2, [r4, #0]
 8011b7c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011b80:	6863      	ldr	r3, [r4, #4]
 8011b82:	3301      	adds	r3, #1
 8011b84:	6063      	str	r3, [r4, #4]
 8011b86:	e7e9      	b.n	8011b5c <_sungetc_r+0xc>
 8011b88:	4621      	mov	r1, r4
 8011b8a:	f000 fbe0 	bl	801234e <__submore>
 8011b8e:	2800      	cmp	r0, #0
 8011b90:	d0f1      	beq.n	8011b76 <_sungetc_r+0x26>
 8011b92:	e7e1      	b.n	8011b58 <_sungetc_r+0x8>
 8011b94:	6921      	ldr	r1, [r4, #16]
 8011b96:	6822      	ldr	r2, [r4, #0]
 8011b98:	b141      	cbz	r1, 8011bac <_sungetc_r+0x5c>
 8011b9a:	4291      	cmp	r1, r2
 8011b9c:	d206      	bcs.n	8011bac <_sungetc_r+0x5c>
 8011b9e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011ba2:	42a9      	cmp	r1, r5
 8011ba4:	d102      	bne.n	8011bac <_sungetc_r+0x5c>
 8011ba6:	3a01      	subs	r2, #1
 8011ba8:	6022      	str	r2, [r4, #0]
 8011baa:	e7ea      	b.n	8011b82 <_sungetc_r+0x32>
 8011bac:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8011bb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011bb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8011bb6:	2303      	movs	r3, #3
 8011bb8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011bba:	4623      	mov	r3, r4
 8011bbc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011bc0:	6023      	str	r3, [r4, #0]
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	e7de      	b.n	8011b84 <_sungetc_r+0x34>

08011bc6 <__ssrefill_r>:
 8011bc6:	b510      	push	{r4, lr}
 8011bc8:	460c      	mov	r4, r1
 8011bca:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011bcc:	b169      	cbz	r1, 8011bea <__ssrefill_r+0x24>
 8011bce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011bd2:	4299      	cmp	r1, r3
 8011bd4:	d001      	beq.n	8011bda <__ssrefill_r+0x14>
 8011bd6:	f7fe fd95 	bl	8010704 <_free_r>
 8011bda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011bdc:	6063      	str	r3, [r4, #4]
 8011bde:	2000      	movs	r0, #0
 8011be0:	6360      	str	r0, [r4, #52]	@ 0x34
 8011be2:	b113      	cbz	r3, 8011bea <__ssrefill_r+0x24>
 8011be4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011be6:	6023      	str	r3, [r4, #0]
 8011be8:	bd10      	pop	{r4, pc}
 8011bea:	6923      	ldr	r3, [r4, #16]
 8011bec:	6023      	str	r3, [r4, #0]
 8011bee:	2300      	movs	r3, #0
 8011bf0:	6063      	str	r3, [r4, #4]
 8011bf2:	89a3      	ldrh	r3, [r4, #12]
 8011bf4:	f043 0320 	orr.w	r3, r3, #32
 8011bf8:	81a3      	strh	r3, [r4, #12]
 8011bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8011bfe:	e7f3      	b.n	8011be8 <__ssrefill_r+0x22>

08011c00 <__ssvfiscanf_r>:
 8011c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c04:	460c      	mov	r4, r1
 8011c06:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8011c0a:	2100      	movs	r1, #0
 8011c0c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011c10:	49a5      	ldr	r1, [pc, #660]	@ (8011ea8 <__ssvfiscanf_r+0x2a8>)
 8011c12:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011c14:	f10d 0804 	add.w	r8, sp, #4
 8011c18:	49a4      	ldr	r1, [pc, #656]	@ (8011eac <__ssvfiscanf_r+0x2ac>)
 8011c1a:	4fa5      	ldr	r7, [pc, #660]	@ (8011eb0 <__ssvfiscanf_r+0x2b0>)
 8011c1c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011c20:	4606      	mov	r6, r0
 8011c22:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011c24:	9300      	str	r3, [sp, #0]
 8011c26:	7813      	ldrb	r3, [r2, #0]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	f000 8158 	beq.w	8011ede <__ssvfiscanf_r+0x2de>
 8011c2e:	5cf9      	ldrb	r1, [r7, r3]
 8011c30:	f011 0108 	ands.w	r1, r1, #8
 8011c34:	f102 0501 	add.w	r5, r2, #1
 8011c38:	d019      	beq.n	8011c6e <__ssvfiscanf_r+0x6e>
 8011c3a:	6863      	ldr	r3, [r4, #4]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	dd0f      	ble.n	8011c60 <__ssvfiscanf_r+0x60>
 8011c40:	6823      	ldr	r3, [r4, #0]
 8011c42:	781a      	ldrb	r2, [r3, #0]
 8011c44:	5cba      	ldrb	r2, [r7, r2]
 8011c46:	0712      	lsls	r2, r2, #28
 8011c48:	d401      	bmi.n	8011c4e <__ssvfiscanf_r+0x4e>
 8011c4a:	462a      	mov	r2, r5
 8011c4c:	e7eb      	b.n	8011c26 <__ssvfiscanf_r+0x26>
 8011c4e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011c50:	3201      	adds	r2, #1
 8011c52:	9245      	str	r2, [sp, #276]	@ 0x114
 8011c54:	6862      	ldr	r2, [r4, #4]
 8011c56:	3301      	adds	r3, #1
 8011c58:	3a01      	subs	r2, #1
 8011c5a:	6062      	str	r2, [r4, #4]
 8011c5c:	6023      	str	r3, [r4, #0]
 8011c5e:	e7ec      	b.n	8011c3a <__ssvfiscanf_r+0x3a>
 8011c60:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011c62:	4621      	mov	r1, r4
 8011c64:	4630      	mov	r0, r6
 8011c66:	4798      	blx	r3
 8011c68:	2800      	cmp	r0, #0
 8011c6a:	d0e9      	beq.n	8011c40 <__ssvfiscanf_r+0x40>
 8011c6c:	e7ed      	b.n	8011c4a <__ssvfiscanf_r+0x4a>
 8011c6e:	2b25      	cmp	r3, #37	@ 0x25
 8011c70:	d012      	beq.n	8011c98 <__ssvfiscanf_r+0x98>
 8011c72:	4699      	mov	r9, r3
 8011c74:	6863      	ldr	r3, [r4, #4]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	f340 8093 	ble.w	8011da2 <__ssvfiscanf_r+0x1a2>
 8011c7c:	6822      	ldr	r2, [r4, #0]
 8011c7e:	7813      	ldrb	r3, [r2, #0]
 8011c80:	454b      	cmp	r3, r9
 8011c82:	f040 812c 	bne.w	8011ede <__ssvfiscanf_r+0x2de>
 8011c86:	6863      	ldr	r3, [r4, #4]
 8011c88:	3b01      	subs	r3, #1
 8011c8a:	6063      	str	r3, [r4, #4]
 8011c8c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011c8e:	3201      	adds	r2, #1
 8011c90:	3301      	adds	r3, #1
 8011c92:	6022      	str	r2, [r4, #0]
 8011c94:	9345      	str	r3, [sp, #276]	@ 0x114
 8011c96:	e7d8      	b.n	8011c4a <__ssvfiscanf_r+0x4a>
 8011c98:	9141      	str	r1, [sp, #260]	@ 0x104
 8011c9a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011c9c:	7853      	ldrb	r3, [r2, #1]
 8011c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ca0:	bf02      	ittt	eq
 8011ca2:	2310      	moveq	r3, #16
 8011ca4:	1c95      	addeq	r5, r2, #2
 8011ca6:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011ca8:	220a      	movs	r2, #10
 8011caa:	46a9      	mov	r9, r5
 8011cac:	f819 1b01 	ldrb.w	r1, [r9], #1
 8011cb0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011cb4:	2b09      	cmp	r3, #9
 8011cb6:	d91e      	bls.n	8011cf6 <__ssvfiscanf_r+0xf6>
 8011cb8:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8011eb4 <__ssvfiscanf_r+0x2b4>
 8011cbc:	2203      	movs	r2, #3
 8011cbe:	4650      	mov	r0, sl
 8011cc0:	f7ee fb26 	bl	8000310 <memchr>
 8011cc4:	b138      	cbz	r0, 8011cd6 <__ssvfiscanf_r+0xd6>
 8011cc6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011cc8:	eba0 000a 	sub.w	r0, r0, sl
 8011ccc:	2301      	movs	r3, #1
 8011cce:	4083      	lsls	r3, r0
 8011cd0:	4313      	orrs	r3, r2
 8011cd2:	9341      	str	r3, [sp, #260]	@ 0x104
 8011cd4:	464d      	mov	r5, r9
 8011cd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011cda:	2b78      	cmp	r3, #120	@ 0x78
 8011cdc:	d806      	bhi.n	8011cec <__ssvfiscanf_r+0xec>
 8011cde:	2b57      	cmp	r3, #87	@ 0x57
 8011ce0:	d810      	bhi.n	8011d04 <__ssvfiscanf_r+0x104>
 8011ce2:	2b25      	cmp	r3, #37	@ 0x25
 8011ce4:	d0c5      	beq.n	8011c72 <__ssvfiscanf_r+0x72>
 8011ce6:	d857      	bhi.n	8011d98 <__ssvfiscanf_r+0x198>
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d065      	beq.n	8011db8 <__ssvfiscanf_r+0x1b8>
 8011cec:	2303      	movs	r3, #3
 8011cee:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011cf0:	230a      	movs	r3, #10
 8011cf2:	9342      	str	r3, [sp, #264]	@ 0x108
 8011cf4:	e078      	b.n	8011de8 <__ssvfiscanf_r+0x1e8>
 8011cf6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011cf8:	fb02 1103 	mla	r1, r2, r3, r1
 8011cfc:	3930      	subs	r1, #48	@ 0x30
 8011cfe:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011d00:	464d      	mov	r5, r9
 8011d02:	e7d2      	b.n	8011caa <__ssvfiscanf_r+0xaa>
 8011d04:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011d08:	2a20      	cmp	r2, #32
 8011d0a:	d8ef      	bhi.n	8011cec <__ssvfiscanf_r+0xec>
 8011d0c:	a101      	add	r1, pc, #4	@ (adr r1, 8011d14 <__ssvfiscanf_r+0x114>)
 8011d0e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011d12:	bf00      	nop
 8011d14:	08011dc7 	.word	0x08011dc7
 8011d18:	08011ced 	.word	0x08011ced
 8011d1c:	08011ced 	.word	0x08011ced
 8011d20:	08011e21 	.word	0x08011e21
 8011d24:	08011ced 	.word	0x08011ced
 8011d28:	08011ced 	.word	0x08011ced
 8011d2c:	08011ced 	.word	0x08011ced
 8011d30:	08011ced 	.word	0x08011ced
 8011d34:	08011ced 	.word	0x08011ced
 8011d38:	08011ced 	.word	0x08011ced
 8011d3c:	08011ced 	.word	0x08011ced
 8011d40:	08011e37 	.word	0x08011e37
 8011d44:	08011e1d 	.word	0x08011e1d
 8011d48:	08011d9f 	.word	0x08011d9f
 8011d4c:	08011d9f 	.word	0x08011d9f
 8011d50:	08011d9f 	.word	0x08011d9f
 8011d54:	08011ced 	.word	0x08011ced
 8011d58:	08011dd9 	.word	0x08011dd9
 8011d5c:	08011ced 	.word	0x08011ced
 8011d60:	08011ced 	.word	0x08011ced
 8011d64:	08011ced 	.word	0x08011ced
 8011d68:	08011ced 	.word	0x08011ced
 8011d6c:	08011e47 	.word	0x08011e47
 8011d70:	08011de1 	.word	0x08011de1
 8011d74:	08011dbf 	.word	0x08011dbf
 8011d78:	08011ced 	.word	0x08011ced
 8011d7c:	08011ced 	.word	0x08011ced
 8011d80:	08011e43 	.word	0x08011e43
 8011d84:	08011ced 	.word	0x08011ced
 8011d88:	08011e1d 	.word	0x08011e1d
 8011d8c:	08011ced 	.word	0x08011ced
 8011d90:	08011ced 	.word	0x08011ced
 8011d94:	08011dc7 	.word	0x08011dc7
 8011d98:	3b45      	subs	r3, #69	@ 0x45
 8011d9a:	2b02      	cmp	r3, #2
 8011d9c:	d8a6      	bhi.n	8011cec <__ssvfiscanf_r+0xec>
 8011d9e:	2305      	movs	r3, #5
 8011da0:	e021      	b.n	8011de6 <__ssvfiscanf_r+0x1e6>
 8011da2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011da4:	4621      	mov	r1, r4
 8011da6:	4630      	mov	r0, r6
 8011da8:	4798      	blx	r3
 8011daa:	2800      	cmp	r0, #0
 8011dac:	f43f af66 	beq.w	8011c7c <__ssvfiscanf_r+0x7c>
 8011db0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011db2:	2800      	cmp	r0, #0
 8011db4:	f040 808b 	bne.w	8011ece <__ssvfiscanf_r+0x2ce>
 8011db8:	f04f 30ff 	mov.w	r0, #4294967295
 8011dbc:	e08b      	b.n	8011ed6 <__ssvfiscanf_r+0x2d6>
 8011dbe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011dc0:	f042 0220 	orr.w	r2, r2, #32
 8011dc4:	9241      	str	r2, [sp, #260]	@ 0x104
 8011dc6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011dc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011dcc:	9241      	str	r2, [sp, #260]	@ 0x104
 8011dce:	2210      	movs	r2, #16
 8011dd0:	2b6e      	cmp	r3, #110	@ 0x6e
 8011dd2:	9242      	str	r2, [sp, #264]	@ 0x108
 8011dd4:	d902      	bls.n	8011ddc <__ssvfiscanf_r+0x1dc>
 8011dd6:	e005      	b.n	8011de4 <__ssvfiscanf_r+0x1e4>
 8011dd8:	2300      	movs	r3, #0
 8011dda:	9342      	str	r3, [sp, #264]	@ 0x108
 8011ddc:	2303      	movs	r3, #3
 8011dde:	e002      	b.n	8011de6 <__ssvfiscanf_r+0x1e6>
 8011de0:	2308      	movs	r3, #8
 8011de2:	9342      	str	r3, [sp, #264]	@ 0x108
 8011de4:	2304      	movs	r3, #4
 8011de6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011de8:	6863      	ldr	r3, [r4, #4]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	dd39      	ble.n	8011e62 <__ssvfiscanf_r+0x262>
 8011dee:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011df0:	0659      	lsls	r1, r3, #25
 8011df2:	d404      	bmi.n	8011dfe <__ssvfiscanf_r+0x1fe>
 8011df4:	6823      	ldr	r3, [r4, #0]
 8011df6:	781a      	ldrb	r2, [r3, #0]
 8011df8:	5cba      	ldrb	r2, [r7, r2]
 8011dfa:	0712      	lsls	r2, r2, #28
 8011dfc:	d438      	bmi.n	8011e70 <__ssvfiscanf_r+0x270>
 8011dfe:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011e00:	2b02      	cmp	r3, #2
 8011e02:	dc47      	bgt.n	8011e94 <__ssvfiscanf_r+0x294>
 8011e04:	466b      	mov	r3, sp
 8011e06:	4622      	mov	r2, r4
 8011e08:	a941      	add	r1, sp, #260	@ 0x104
 8011e0a:	4630      	mov	r0, r6
 8011e0c:	f000 f86c 	bl	8011ee8 <_scanf_chars>
 8011e10:	2801      	cmp	r0, #1
 8011e12:	d064      	beq.n	8011ede <__ssvfiscanf_r+0x2de>
 8011e14:	2802      	cmp	r0, #2
 8011e16:	f47f af18 	bne.w	8011c4a <__ssvfiscanf_r+0x4a>
 8011e1a:	e7c9      	b.n	8011db0 <__ssvfiscanf_r+0x1b0>
 8011e1c:	220a      	movs	r2, #10
 8011e1e:	e7d7      	b.n	8011dd0 <__ssvfiscanf_r+0x1d0>
 8011e20:	4629      	mov	r1, r5
 8011e22:	4640      	mov	r0, r8
 8011e24:	f000 fa5a 	bl	80122dc <__sccl>
 8011e28:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e2e:	9341      	str	r3, [sp, #260]	@ 0x104
 8011e30:	4605      	mov	r5, r0
 8011e32:	2301      	movs	r3, #1
 8011e34:	e7d7      	b.n	8011de6 <__ssvfiscanf_r+0x1e6>
 8011e36:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011e38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e3c:	9341      	str	r3, [sp, #260]	@ 0x104
 8011e3e:	2300      	movs	r3, #0
 8011e40:	e7d1      	b.n	8011de6 <__ssvfiscanf_r+0x1e6>
 8011e42:	2302      	movs	r3, #2
 8011e44:	e7cf      	b.n	8011de6 <__ssvfiscanf_r+0x1e6>
 8011e46:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011e48:	06c3      	lsls	r3, r0, #27
 8011e4a:	f53f aefe 	bmi.w	8011c4a <__ssvfiscanf_r+0x4a>
 8011e4e:	9b00      	ldr	r3, [sp, #0]
 8011e50:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011e52:	1d19      	adds	r1, r3, #4
 8011e54:	9100      	str	r1, [sp, #0]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	07c0      	lsls	r0, r0, #31
 8011e5a:	bf4c      	ite	mi
 8011e5c:	801a      	strhmi	r2, [r3, #0]
 8011e5e:	601a      	strpl	r2, [r3, #0]
 8011e60:	e6f3      	b.n	8011c4a <__ssvfiscanf_r+0x4a>
 8011e62:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011e64:	4621      	mov	r1, r4
 8011e66:	4630      	mov	r0, r6
 8011e68:	4798      	blx	r3
 8011e6a:	2800      	cmp	r0, #0
 8011e6c:	d0bf      	beq.n	8011dee <__ssvfiscanf_r+0x1ee>
 8011e6e:	e79f      	b.n	8011db0 <__ssvfiscanf_r+0x1b0>
 8011e70:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011e72:	3201      	adds	r2, #1
 8011e74:	9245      	str	r2, [sp, #276]	@ 0x114
 8011e76:	6862      	ldr	r2, [r4, #4]
 8011e78:	3a01      	subs	r2, #1
 8011e7a:	2a00      	cmp	r2, #0
 8011e7c:	6062      	str	r2, [r4, #4]
 8011e7e:	dd02      	ble.n	8011e86 <__ssvfiscanf_r+0x286>
 8011e80:	3301      	adds	r3, #1
 8011e82:	6023      	str	r3, [r4, #0]
 8011e84:	e7b6      	b.n	8011df4 <__ssvfiscanf_r+0x1f4>
 8011e86:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011e88:	4621      	mov	r1, r4
 8011e8a:	4630      	mov	r0, r6
 8011e8c:	4798      	blx	r3
 8011e8e:	2800      	cmp	r0, #0
 8011e90:	d0b0      	beq.n	8011df4 <__ssvfiscanf_r+0x1f4>
 8011e92:	e78d      	b.n	8011db0 <__ssvfiscanf_r+0x1b0>
 8011e94:	2b04      	cmp	r3, #4
 8011e96:	dc0f      	bgt.n	8011eb8 <__ssvfiscanf_r+0x2b8>
 8011e98:	466b      	mov	r3, sp
 8011e9a:	4622      	mov	r2, r4
 8011e9c:	a941      	add	r1, sp, #260	@ 0x104
 8011e9e:	4630      	mov	r0, r6
 8011ea0:	f000 f87c 	bl	8011f9c <_scanf_i>
 8011ea4:	e7b4      	b.n	8011e10 <__ssvfiscanf_r+0x210>
 8011ea6:	bf00      	nop
 8011ea8:	08011b51 	.word	0x08011b51
 8011eac:	08011bc7 	.word	0x08011bc7
 8011eb0:	08012f41 	.word	0x08012f41
 8011eb4:	08013047 	.word	0x08013047
 8011eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8011ee4 <__ssvfiscanf_r+0x2e4>)
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	f43f aec5 	beq.w	8011c4a <__ssvfiscanf_r+0x4a>
 8011ec0:	466b      	mov	r3, sp
 8011ec2:	4622      	mov	r2, r4
 8011ec4:	a941      	add	r1, sp, #260	@ 0x104
 8011ec6:	4630      	mov	r0, r6
 8011ec8:	f7fd fa12 	bl	800f2f0 <_scanf_float>
 8011ecc:	e7a0      	b.n	8011e10 <__ssvfiscanf_r+0x210>
 8011ece:	89a3      	ldrh	r3, [r4, #12]
 8011ed0:	065b      	lsls	r3, r3, #25
 8011ed2:	f53f af71 	bmi.w	8011db8 <__ssvfiscanf_r+0x1b8>
 8011ed6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ede:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011ee0:	e7f9      	b.n	8011ed6 <__ssvfiscanf_r+0x2d6>
 8011ee2:	bf00      	nop
 8011ee4:	0800f2f1 	.word	0x0800f2f1

08011ee8 <_scanf_chars>:
 8011ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011eec:	4615      	mov	r5, r2
 8011eee:	688a      	ldr	r2, [r1, #8]
 8011ef0:	4680      	mov	r8, r0
 8011ef2:	460c      	mov	r4, r1
 8011ef4:	b932      	cbnz	r2, 8011f04 <_scanf_chars+0x1c>
 8011ef6:	698a      	ldr	r2, [r1, #24]
 8011ef8:	2a00      	cmp	r2, #0
 8011efa:	bf14      	ite	ne
 8011efc:	f04f 32ff 	movne.w	r2, #4294967295
 8011f00:	2201      	moveq	r2, #1
 8011f02:	608a      	str	r2, [r1, #8]
 8011f04:	6822      	ldr	r2, [r4, #0]
 8011f06:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011f98 <_scanf_chars+0xb0>
 8011f0a:	06d1      	lsls	r1, r2, #27
 8011f0c:	bf5f      	itttt	pl
 8011f0e:	681a      	ldrpl	r2, [r3, #0]
 8011f10:	1d11      	addpl	r1, r2, #4
 8011f12:	6019      	strpl	r1, [r3, #0]
 8011f14:	6816      	ldrpl	r6, [r2, #0]
 8011f16:	2700      	movs	r7, #0
 8011f18:	69a0      	ldr	r0, [r4, #24]
 8011f1a:	b188      	cbz	r0, 8011f40 <_scanf_chars+0x58>
 8011f1c:	2801      	cmp	r0, #1
 8011f1e:	d107      	bne.n	8011f30 <_scanf_chars+0x48>
 8011f20:	682b      	ldr	r3, [r5, #0]
 8011f22:	781a      	ldrb	r2, [r3, #0]
 8011f24:	6963      	ldr	r3, [r4, #20]
 8011f26:	5c9b      	ldrb	r3, [r3, r2]
 8011f28:	b953      	cbnz	r3, 8011f40 <_scanf_chars+0x58>
 8011f2a:	2f00      	cmp	r7, #0
 8011f2c:	d031      	beq.n	8011f92 <_scanf_chars+0xaa>
 8011f2e:	e022      	b.n	8011f76 <_scanf_chars+0x8e>
 8011f30:	2802      	cmp	r0, #2
 8011f32:	d120      	bne.n	8011f76 <_scanf_chars+0x8e>
 8011f34:	682b      	ldr	r3, [r5, #0]
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011f3c:	071b      	lsls	r3, r3, #28
 8011f3e:	d41a      	bmi.n	8011f76 <_scanf_chars+0x8e>
 8011f40:	6823      	ldr	r3, [r4, #0]
 8011f42:	06da      	lsls	r2, r3, #27
 8011f44:	bf5e      	ittt	pl
 8011f46:	682b      	ldrpl	r3, [r5, #0]
 8011f48:	781b      	ldrbpl	r3, [r3, #0]
 8011f4a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011f4e:	682a      	ldr	r2, [r5, #0]
 8011f50:	686b      	ldr	r3, [r5, #4]
 8011f52:	3201      	adds	r2, #1
 8011f54:	602a      	str	r2, [r5, #0]
 8011f56:	68a2      	ldr	r2, [r4, #8]
 8011f58:	3b01      	subs	r3, #1
 8011f5a:	3a01      	subs	r2, #1
 8011f5c:	606b      	str	r3, [r5, #4]
 8011f5e:	3701      	adds	r7, #1
 8011f60:	60a2      	str	r2, [r4, #8]
 8011f62:	b142      	cbz	r2, 8011f76 <_scanf_chars+0x8e>
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	dcd7      	bgt.n	8011f18 <_scanf_chars+0x30>
 8011f68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011f6c:	4629      	mov	r1, r5
 8011f6e:	4640      	mov	r0, r8
 8011f70:	4798      	blx	r3
 8011f72:	2800      	cmp	r0, #0
 8011f74:	d0d0      	beq.n	8011f18 <_scanf_chars+0x30>
 8011f76:	6823      	ldr	r3, [r4, #0]
 8011f78:	f013 0310 	ands.w	r3, r3, #16
 8011f7c:	d105      	bne.n	8011f8a <_scanf_chars+0xa2>
 8011f7e:	68e2      	ldr	r2, [r4, #12]
 8011f80:	3201      	adds	r2, #1
 8011f82:	60e2      	str	r2, [r4, #12]
 8011f84:	69a2      	ldr	r2, [r4, #24]
 8011f86:	b102      	cbz	r2, 8011f8a <_scanf_chars+0xa2>
 8011f88:	7033      	strb	r3, [r6, #0]
 8011f8a:	6923      	ldr	r3, [r4, #16]
 8011f8c:	443b      	add	r3, r7
 8011f8e:	6123      	str	r3, [r4, #16]
 8011f90:	2000      	movs	r0, #0
 8011f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f96:	bf00      	nop
 8011f98:	08012f41 	.word	0x08012f41

08011f9c <_scanf_i>:
 8011f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa0:	4698      	mov	r8, r3
 8011fa2:	4b74      	ldr	r3, [pc, #464]	@ (8012174 <_scanf_i+0x1d8>)
 8011fa4:	460c      	mov	r4, r1
 8011fa6:	4682      	mov	sl, r0
 8011fa8:	4616      	mov	r6, r2
 8011faa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011fae:	b087      	sub	sp, #28
 8011fb0:	ab03      	add	r3, sp, #12
 8011fb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011fb6:	4b70      	ldr	r3, [pc, #448]	@ (8012178 <_scanf_i+0x1dc>)
 8011fb8:	69a1      	ldr	r1, [r4, #24]
 8011fba:	4a70      	ldr	r2, [pc, #448]	@ (801217c <_scanf_i+0x1e0>)
 8011fbc:	2903      	cmp	r1, #3
 8011fbe:	bf08      	it	eq
 8011fc0:	461a      	moveq	r2, r3
 8011fc2:	68a3      	ldr	r3, [r4, #8]
 8011fc4:	9201      	str	r2, [sp, #4]
 8011fc6:	1e5a      	subs	r2, r3, #1
 8011fc8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011fcc:	bf88      	it	hi
 8011fce:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011fd2:	4627      	mov	r7, r4
 8011fd4:	bf82      	ittt	hi
 8011fd6:	eb03 0905 	addhi.w	r9, r3, r5
 8011fda:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011fde:	60a3      	strhi	r3, [r4, #8]
 8011fe0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011fe4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011fe8:	bf98      	it	ls
 8011fea:	f04f 0900 	movls.w	r9, #0
 8011fee:	6023      	str	r3, [r4, #0]
 8011ff0:	463d      	mov	r5, r7
 8011ff2:	f04f 0b00 	mov.w	fp, #0
 8011ff6:	6831      	ldr	r1, [r6, #0]
 8011ff8:	ab03      	add	r3, sp, #12
 8011ffa:	7809      	ldrb	r1, [r1, #0]
 8011ffc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012000:	2202      	movs	r2, #2
 8012002:	f7ee f985 	bl	8000310 <memchr>
 8012006:	b328      	cbz	r0, 8012054 <_scanf_i+0xb8>
 8012008:	f1bb 0f01 	cmp.w	fp, #1
 801200c:	d159      	bne.n	80120c2 <_scanf_i+0x126>
 801200e:	6862      	ldr	r2, [r4, #4]
 8012010:	b92a      	cbnz	r2, 801201e <_scanf_i+0x82>
 8012012:	6822      	ldr	r2, [r4, #0]
 8012014:	2108      	movs	r1, #8
 8012016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801201a:	6061      	str	r1, [r4, #4]
 801201c:	6022      	str	r2, [r4, #0]
 801201e:	6822      	ldr	r2, [r4, #0]
 8012020:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012024:	6022      	str	r2, [r4, #0]
 8012026:	68a2      	ldr	r2, [r4, #8]
 8012028:	1e51      	subs	r1, r2, #1
 801202a:	60a1      	str	r1, [r4, #8]
 801202c:	b192      	cbz	r2, 8012054 <_scanf_i+0xb8>
 801202e:	6832      	ldr	r2, [r6, #0]
 8012030:	1c51      	adds	r1, r2, #1
 8012032:	6031      	str	r1, [r6, #0]
 8012034:	7812      	ldrb	r2, [r2, #0]
 8012036:	f805 2b01 	strb.w	r2, [r5], #1
 801203a:	6872      	ldr	r2, [r6, #4]
 801203c:	3a01      	subs	r2, #1
 801203e:	2a00      	cmp	r2, #0
 8012040:	6072      	str	r2, [r6, #4]
 8012042:	dc07      	bgt.n	8012054 <_scanf_i+0xb8>
 8012044:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012048:	4631      	mov	r1, r6
 801204a:	4650      	mov	r0, sl
 801204c:	4790      	blx	r2
 801204e:	2800      	cmp	r0, #0
 8012050:	f040 8085 	bne.w	801215e <_scanf_i+0x1c2>
 8012054:	f10b 0b01 	add.w	fp, fp, #1
 8012058:	f1bb 0f03 	cmp.w	fp, #3
 801205c:	d1cb      	bne.n	8011ff6 <_scanf_i+0x5a>
 801205e:	6863      	ldr	r3, [r4, #4]
 8012060:	b90b      	cbnz	r3, 8012066 <_scanf_i+0xca>
 8012062:	230a      	movs	r3, #10
 8012064:	6063      	str	r3, [r4, #4]
 8012066:	6863      	ldr	r3, [r4, #4]
 8012068:	4945      	ldr	r1, [pc, #276]	@ (8012180 <_scanf_i+0x1e4>)
 801206a:	6960      	ldr	r0, [r4, #20]
 801206c:	1ac9      	subs	r1, r1, r3
 801206e:	f000 f935 	bl	80122dc <__sccl>
 8012072:	f04f 0b00 	mov.w	fp, #0
 8012076:	68a3      	ldr	r3, [r4, #8]
 8012078:	6822      	ldr	r2, [r4, #0]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d03d      	beq.n	80120fa <_scanf_i+0x15e>
 801207e:	6831      	ldr	r1, [r6, #0]
 8012080:	6960      	ldr	r0, [r4, #20]
 8012082:	f891 c000 	ldrb.w	ip, [r1]
 8012086:	f810 000c 	ldrb.w	r0, [r0, ip]
 801208a:	2800      	cmp	r0, #0
 801208c:	d035      	beq.n	80120fa <_scanf_i+0x15e>
 801208e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012092:	d124      	bne.n	80120de <_scanf_i+0x142>
 8012094:	0510      	lsls	r0, r2, #20
 8012096:	d522      	bpl.n	80120de <_scanf_i+0x142>
 8012098:	f10b 0b01 	add.w	fp, fp, #1
 801209c:	f1b9 0f00 	cmp.w	r9, #0
 80120a0:	d003      	beq.n	80120aa <_scanf_i+0x10e>
 80120a2:	3301      	adds	r3, #1
 80120a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80120a8:	60a3      	str	r3, [r4, #8]
 80120aa:	6873      	ldr	r3, [r6, #4]
 80120ac:	3b01      	subs	r3, #1
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	6073      	str	r3, [r6, #4]
 80120b2:	dd1b      	ble.n	80120ec <_scanf_i+0x150>
 80120b4:	6833      	ldr	r3, [r6, #0]
 80120b6:	3301      	adds	r3, #1
 80120b8:	6033      	str	r3, [r6, #0]
 80120ba:	68a3      	ldr	r3, [r4, #8]
 80120bc:	3b01      	subs	r3, #1
 80120be:	60a3      	str	r3, [r4, #8]
 80120c0:	e7d9      	b.n	8012076 <_scanf_i+0xda>
 80120c2:	f1bb 0f02 	cmp.w	fp, #2
 80120c6:	d1ae      	bne.n	8012026 <_scanf_i+0x8a>
 80120c8:	6822      	ldr	r2, [r4, #0]
 80120ca:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80120ce:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80120d2:	d1bf      	bne.n	8012054 <_scanf_i+0xb8>
 80120d4:	2110      	movs	r1, #16
 80120d6:	6061      	str	r1, [r4, #4]
 80120d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80120dc:	e7a2      	b.n	8012024 <_scanf_i+0x88>
 80120de:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80120e2:	6022      	str	r2, [r4, #0]
 80120e4:	780b      	ldrb	r3, [r1, #0]
 80120e6:	f805 3b01 	strb.w	r3, [r5], #1
 80120ea:	e7de      	b.n	80120aa <_scanf_i+0x10e>
 80120ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80120f0:	4631      	mov	r1, r6
 80120f2:	4650      	mov	r0, sl
 80120f4:	4798      	blx	r3
 80120f6:	2800      	cmp	r0, #0
 80120f8:	d0df      	beq.n	80120ba <_scanf_i+0x11e>
 80120fa:	6823      	ldr	r3, [r4, #0]
 80120fc:	05d9      	lsls	r1, r3, #23
 80120fe:	d50d      	bpl.n	801211c <_scanf_i+0x180>
 8012100:	42bd      	cmp	r5, r7
 8012102:	d909      	bls.n	8012118 <_scanf_i+0x17c>
 8012104:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012108:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801210c:	4632      	mov	r2, r6
 801210e:	4650      	mov	r0, sl
 8012110:	4798      	blx	r3
 8012112:	f105 39ff 	add.w	r9, r5, #4294967295
 8012116:	464d      	mov	r5, r9
 8012118:	42bd      	cmp	r5, r7
 801211a:	d028      	beq.n	801216e <_scanf_i+0x1d2>
 801211c:	6822      	ldr	r2, [r4, #0]
 801211e:	f012 0210 	ands.w	r2, r2, #16
 8012122:	d113      	bne.n	801214c <_scanf_i+0x1b0>
 8012124:	702a      	strb	r2, [r5, #0]
 8012126:	6863      	ldr	r3, [r4, #4]
 8012128:	9e01      	ldr	r6, [sp, #4]
 801212a:	4639      	mov	r1, r7
 801212c:	4650      	mov	r0, sl
 801212e:	47b0      	blx	r6
 8012130:	f8d8 3000 	ldr.w	r3, [r8]
 8012134:	6821      	ldr	r1, [r4, #0]
 8012136:	1d1a      	adds	r2, r3, #4
 8012138:	f8c8 2000 	str.w	r2, [r8]
 801213c:	f011 0f20 	tst.w	r1, #32
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	d00f      	beq.n	8012164 <_scanf_i+0x1c8>
 8012144:	6018      	str	r0, [r3, #0]
 8012146:	68e3      	ldr	r3, [r4, #12]
 8012148:	3301      	adds	r3, #1
 801214a:	60e3      	str	r3, [r4, #12]
 801214c:	6923      	ldr	r3, [r4, #16]
 801214e:	1bed      	subs	r5, r5, r7
 8012150:	445d      	add	r5, fp
 8012152:	442b      	add	r3, r5
 8012154:	6123      	str	r3, [r4, #16]
 8012156:	2000      	movs	r0, #0
 8012158:	b007      	add	sp, #28
 801215a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801215e:	f04f 0b00 	mov.w	fp, #0
 8012162:	e7ca      	b.n	80120fa <_scanf_i+0x15e>
 8012164:	07ca      	lsls	r2, r1, #31
 8012166:	bf4c      	ite	mi
 8012168:	8018      	strhmi	r0, [r3, #0]
 801216a:	6018      	strpl	r0, [r3, #0]
 801216c:	e7eb      	b.n	8012146 <_scanf_i+0x1aa>
 801216e:	2001      	movs	r0, #1
 8012170:	e7f2      	b.n	8012158 <_scanf_i+0x1bc>
 8012172:	bf00      	nop
 8012174:	08012c0c 	.word	0x08012c0c
 8012178:	08011885 	.word	0x08011885
 801217c:	08012595 	.word	0x08012595
 8012180:	08013062 	.word	0x08013062

08012184 <__sflush_r>:
 8012184:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801218c:	0716      	lsls	r6, r2, #28
 801218e:	4605      	mov	r5, r0
 8012190:	460c      	mov	r4, r1
 8012192:	d454      	bmi.n	801223e <__sflush_r+0xba>
 8012194:	684b      	ldr	r3, [r1, #4]
 8012196:	2b00      	cmp	r3, #0
 8012198:	dc02      	bgt.n	80121a0 <__sflush_r+0x1c>
 801219a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801219c:	2b00      	cmp	r3, #0
 801219e:	dd48      	ble.n	8012232 <__sflush_r+0xae>
 80121a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80121a2:	2e00      	cmp	r6, #0
 80121a4:	d045      	beq.n	8012232 <__sflush_r+0xae>
 80121a6:	2300      	movs	r3, #0
 80121a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80121ac:	682f      	ldr	r7, [r5, #0]
 80121ae:	6a21      	ldr	r1, [r4, #32]
 80121b0:	602b      	str	r3, [r5, #0]
 80121b2:	d030      	beq.n	8012216 <__sflush_r+0x92>
 80121b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80121b6:	89a3      	ldrh	r3, [r4, #12]
 80121b8:	0759      	lsls	r1, r3, #29
 80121ba:	d505      	bpl.n	80121c8 <__sflush_r+0x44>
 80121bc:	6863      	ldr	r3, [r4, #4]
 80121be:	1ad2      	subs	r2, r2, r3
 80121c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80121c2:	b10b      	cbz	r3, 80121c8 <__sflush_r+0x44>
 80121c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80121c6:	1ad2      	subs	r2, r2, r3
 80121c8:	2300      	movs	r3, #0
 80121ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80121cc:	6a21      	ldr	r1, [r4, #32]
 80121ce:	4628      	mov	r0, r5
 80121d0:	47b0      	blx	r6
 80121d2:	1c43      	adds	r3, r0, #1
 80121d4:	89a3      	ldrh	r3, [r4, #12]
 80121d6:	d106      	bne.n	80121e6 <__sflush_r+0x62>
 80121d8:	6829      	ldr	r1, [r5, #0]
 80121da:	291d      	cmp	r1, #29
 80121dc:	d82b      	bhi.n	8012236 <__sflush_r+0xb2>
 80121de:	4a2a      	ldr	r2, [pc, #168]	@ (8012288 <__sflush_r+0x104>)
 80121e0:	410a      	asrs	r2, r1
 80121e2:	07d6      	lsls	r6, r2, #31
 80121e4:	d427      	bmi.n	8012236 <__sflush_r+0xb2>
 80121e6:	2200      	movs	r2, #0
 80121e8:	6062      	str	r2, [r4, #4]
 80121ea:	04d9      	lsls	r1, r3, #19
 80121ec:	6922      	ldr	r2, [r4, #16]
 80121ee:	6022      	str	r2, [r4, #0]
 80121f0:	d504      	bpl.n	80121fc <__sflush_r+0x78>
 80121f2:	1c42      	adds	r2, r0, #1
 80121f4:	d101      	bne.n	80121fa <__sflush_r+0x76>
 80121f6:	682b      	ldr	r3, [r5, #0]
 80121f8:	b903      	cbnz	r3, 80121fc <__sflush_r+0x78>
 80121fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80121fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80121fe:	602f      	str	r7, [r5, #0]
 8012200:	b1b9      	cbz	r1, 8012232 <__sflush_r+0xae>
 8012202:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012206:	4299      	cmp	r1, r3
 8012208:	d002      	beq.n	8012210 <__sflush_r+0x8c>
 801220a:	4628      	mov	r0, r5
 801220c:	f7fe fa7a 	bl	8010704 <_free_r>
 8012210:	2300      	movs	r3, #0
 8012212:	6363      	str	r3, [r4, #52]	@ 0x34
 8012214:	e00d      	b.n	8012232 <__sflush_r+0xae>
 8012216:	2301      	movs	r3, #1
 8012218:	4628      	mov	r0, r5
 801221a:	47b0      	blx	r6
 801221c:	4602      	mov	r2, r0
 801221e:	1c50      	adds	r0, r2, #1
 8012220:	d1c9      	bne.n	80121b6 <__sflush_r+0x32>
 8012222:	682b      	ldr	r3, [r5, #0]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d0c6      	beq.n	80121b6 <__sflush_r+0x32>
 8012228:	2b1d      	cmp	r3, #29
 801222a:	d001      	beq.n	8012230 <__sflush_r+0xac>
 801222c:	2b16      	cmp	r3, #22
 801222e:	d11e      	bne.n	801226e <__sflush_r+0xea>
 8012230:	602f      	str	r7, [r5, #0]
 8012232:	2000      	movs	r0, #0
 8012234:	e022      	b.n	801227c <__sflush_r+0xf8>
 8012236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801223a:	b21b      	sxth	r3, r3
 801223c:	e01b      	b.n	8012276 <__sflush_r+0xf2>
 801223e:	690f      	ldr	r7, [r1, #16]
 8012240:	2f00      	cmp	r7, #0
 8012242:	d0f6      	beq.n	8012232 <__sflush_r+0xae>
 8012244:	0793      	lsls	r3, r2, #30
 8012246:	680e      	ldr	r6, [r1, #0]
 8012248:	bf08      	it	eq
 801224a:	694b      	ldreq	r3, [r1, #20]
 801224c:	600f      	str	r7, [r1, #0]
 801224e:	bf18      	it	ne
 8012250:	2300      	movne	r3, #0
 8012252:	eba6 0807 	sub.w	r8, r6, r7
 8012256:	608b      	str	r3, [r1, #8]
 8012258:	f1b8 0f00 	cmp.w	r8, #0
 801225c:	dde9      	ble.n	8012232 <__sflush_r+0xae>
 801225e:	6a21      	ldr	r1, [r4, #32]
 8012260:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012262:	4643      	mov	r3, r8
 8012264:	463a      	mov	r2, r7
 8012266:	4628      	mov	r0, r5
 8012268:	47b0      	blx	r6
 801226a:	2800      	cmp	r0, #0
 801226c:	dc08      	bgt.n	8012280 <__sflush_r+0xfc>
 801226e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012276:	81a3      	strh	r3, [r4, #12]
 8012278:	f04f 30ff 	mov.w	r0, #4294967295
 801227c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012280:	4407      	add	r7, r0
 8012282:	eba8 0800 	sub.w	r8, r8, r0
 8012286:	e7e7      	b.n	8012258 <__sflush_r+0xd4>
 8012288:	dfbffffe 	.word	0xdfbffffe

0801228c <_fflush_r>:
 801228c:	b538      	push	{r3, r4, r5, lr}
 801228e:	690b      	ldr	r3, [r1, #16]
 8012290:	4605      	mov	r5, r0
 8012292:	460c      	mov	r4, r1
 8012294:	b913      	cbnz	r3, 801229c <_fflush_r+0x10>
 8012296:	2500      	movs	r5, #0
 8012298:	4628      	mov	r0, r5
 801229a:	bd38      	pop	{r3, r4, r5, pc}
 801229c:	b118      	cbz	r0, 80122a6 <_fflush_r+0x1a>
 801229e:	6a03      	ldr	r3, [r0, #32]
 80122a0:	b90b      	cbnz	r3, 80122a6 <_fflush_r+0x1a>
 80122a2:	f7fd fabd 	bl	800f820 <__sinit>
 80122a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d0f3      	beq.n	8012296 <_fflush_r+0xa>
 80122ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80122b0:	07d0      	lsls	r0, r2, #31
 80122b2:	d404      	bmi.n	80122be <_fflush_r+0x32>
 80122b4:	0599      	lsls	r1, r3, #22
 80122b6:	d402      	bmi.n	80122be <_fflush_r+0x32>
 80122b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80122ba:	f7fd fc22 	bl	800fb02 <__retarget_lock_acquire_recursive>
 80122be:	4628      	mov	r0, r5
 80122c0:	4621      	mov	r1, r4
 80122c2:	f7ff ff5f 	bl	8012184 <__sflush_r>
 80122c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80122c8:	07da      	lsls	r2, r3, #31
 80122ca:	4605      	mov	r5, r0
 80122cc:	d4e4      	bmi.n	8012298 <_fflush_r+0xc>
 80122ce:	89a3      	ldrh	r3, [r4, #12]
 80122d0:	059b      	lsls	r3, r3, #22
 80122d2:	d4e1      	bmi.n	8012298 <_fflush_r+0xc>
 80122d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80122d6:	f7fd fc15 	bl	800fb04 <__retarget_lock_release_recursive>
 80122da:	e7dd      	b.n	8012298 <_fflush_r+0xc>

080122dc <__sccl>:
 80122dc:	b570      	push	{r4, r5, r6, lr}
 80122de:	780b      	ldrb	r3, [r1, #0]
 80122e0:	4604      	mov	r4, r0
 80122e2:	2b5e      	cmp	r3, #94	@ 0x5e
 80122e4:	bf0b      	itete	eq
 80122e6:	784b      	ldrbeq	r3, [r1, #1]
 80122e8:	1c4a      	addne	r2, r1, #1
 80122ea:	1c8a      	addeq	r2, r1, #2
 80122ec:	2100      	movne	r1, #0
 80122ee:	bf08      	it	eq
 80122f0:	2101      	moveq	r1, #1
 80122f2:	3801      	subs	r0, #1
 80122f4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80122f8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80122fc:	42a8      	cmp	r0, r5
 80122fe:	d1fb      	bne.n	80122f8 <__sccl+0x1c>
 8012300:	b90b      	cbnz	r3, 8012306 <__sccl+0x2a>
 8012302:	1e50      	subs	r0, r2, #1
 8012304:	bd70      	pop	{r4, r5, r6, pc}
 8012306:	f081 0101 	eor.w	r1, r1, #1
 801230a:	54e1      	strb	r1, [r4, r3]
 801230c:	4610      	mov	r0, r2
 801230e:	4602      	mov	r2, r0
 8012310:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012314:	2d2d      	cmp	r5, #45	@ 0x2d
 8012316:	d005      	beq.n	8012324 <__sccl+0x48>
 8012318:	2d5d      	cmp	r5, #93	@ 0x5d
 801231a:	d016      	beq.n	801234a <__sccl+0x6e>
 801231c:	2d00      	cmp	r5, #0
 801231e:	d0f1      	beq.n	8012304 <__sccl+0x28>
 8012320:	462b      	mov	r3, r5
 8012322:	e7f2      	b.n	801230a <__sccl+0x2e>
 8012324:	7846      	ldrb	r6, [r0, #1]
 8012326:	2e5d      	cmp	r6, #93	@ 0x5d
 8012328:	d0fa      	beq.n	8012320 <__sccl+0x44>
 801232a:	42b3      	cmp	r3, r6
 801232c:	dcf8      	bgt.n	8012320 <__sccl+0x44>
 801232e:	3002      	adds	r0, #2
 8012330:	461a      	mov	r2, r3
 8012332:	3201      	adds	r2, #1
 8012334:	4296      	cmp	r6, r2
 8012336:	54a1      	strb	r1, [r4, r2]
 8012338:	dcfb      	bgt.n	8012332 <__sccl+0x56>
 801233a:	1af2      	subs	r2, r6, r3
 801233c:	3a01      	subs	r2, #1
 801233e:	1c5d      	adds	r5, r3, #1
 8012340:	42b3      	cmp	r3, r6
 8012342:	bfa8      	it	ge
 8012344:	2200      	movge	r2, #0
 8012346:	18ab      	adds	r3, r5, r2
 8012348:	e7e1      	b.n	801230e <__sccl+0x32>
 801234a:	4610      	mov	r0, r2
 801234c:	e7da      	b.n	8012304 <__sccl+0x28>

0801234e <__submore>:
 801234e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012352:	460c      	mov	r4, r1
 8012354:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012356:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801235a:	4299      	cmp	r1, r3
 801235c:	d11d      	bne.n	801239a <__submore+0x4c>
 801235e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012362:	f7fb fd49 	bl	800ddf8 <_malloc_r>
 8012366:	b918      	cbnz	r0, 8012370 <__submore+0x22>
 8012368:	f04f 30ff 	mov.w	r0, #4294967295
 801236c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012370:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012374:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012376:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801237a:	6360      	str	r0, [r4, #52]	@ 0x34
 801237c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012380:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012384:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012388:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801238c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012390:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012394:	6020      	str	r0, [r4, #0]
 8012396:	2000      	movs	r0, #0
 8012398:	e7e8      	b.n	801236c <__submore+0x1e>
 801239a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801239c:	0077      	lsls	r7, r6, #1
 801239e:	463a      	mov	r2, r7
 80123a0:	f000 f85c 	bl	801245c <_realloc_r>
 80123a4:	4605      	mov	r5, r0
 80123a6:	2800      	cmp	r0, #0
 80123a8:	d0de      	beq.n	8012368 <__submore+0x1a>
 80123aa:	eb00 0806 	add.w	r8, r0, r6
 80123ae:	4601      	mov	r1, r0
 80123b0:	4632      	mov	r2, r6
 80123b2:	4640      	mov	r0, r8
 80123b4:	f7fd fba7 	bl	800fb06 <memcpy>
 80123b8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80123bc:	f8c4 8000 	str.w	r8, [r4]
 80123c0:	e7e9      	b.n	8012396 <__submore+0x48>

080123c2 <memmove>:
 80123c2:	4288      	cmp	r0, r1
 80123c4:	b510      	push	{r4, lr}
 80123c6:	eb01 0402 	add.w	r4, r1, r2
 80123ca:	d902      	bls.n	80123d2 <memmove+0x10>
 80123cc:	4284      	cmp	r4, r0
 80123ce:	4623      	mov	r3, r4
 80123d0:	d807      	bhi.n	80123e2 <memmove+0x20>
 80123d2:	1e43      	subs	r3, r0, #1
 80123d4:	42a1      	cmp	r1, r4
 80123d6:	d008      	beq.n	80123ea <memmove+0x28>
 80123d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80123dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80123e0:	e7f8      	b.n	80123d4 <memmove+0x12>
 80123e2:	4402      	add	r2, r0
 80123e4:	4601      	mov	r1, r0
 80123e6:	428a      	cmp	r2, r1
 80123e8:	d100      	bne.n	80123ec <memmove+0x2a>
 80123ea:	bd10      	pop	{r4, pc}
 80123ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80123f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80123f4:	e7f7      	b.n	80123e6 <memmove+0x24>
	...

080123f8 <__assert_func>:
 80123f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123fa:	4614      	mov	r4, r2
 80123fc:	461a      	mov	r2, r3
 80123fe:	4b09      	ldr	r3, [pc, #36]	@ (8012424 <__assert_func+0x2c>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	4605      	mov	r5, r0
 8012404:	68d8      	ldr	r0, [r3, #12]
 8012406:	b954      	cbnz	r4, 801241e <__assert_func+0x26>
 8012408:	4b07      	ldr	r3, [pc, #28]	@ (8012428 <__assert_func+0x30>)
 801240a:	461c      	mov	r4, r3
 801240c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012410:	9100      	str	r1, [sp, #0]
 8012412:	462b      	mov	r3, r5
 8012414:	4905      	ldr	r1, [pc, #20]	@ (801242c <__assert_func+0x34>)
 8012416:	f000 f8bf 	bl	8012598 <fiprintf>
 801241a:	f000 f8cf 	bl	80125bc <abort>
 801241e:	4b04      	ldr	r3, [pc, #16]	@ (8012430 <__assert_func+0x38>)
 8012420:	e7f4      	b.n	801240c <__assert_func+0x14>
 8012422:	bf00      	nop
 8012424:	240001c4 	.word	0x240001c4
 8012428:	080130a8 	.word	0x080130a8
 801242c:	0801307a 	.word	0x0801307a
 8012430:	0801306d 	.word	0x0801306d

08012434 <_calloc_r>:
 8012434:	b570      	push	{r4, r5, r6, lr}
 8012436:	fba1 5402 	umull	r5, r4, r1, r2
 801243a:	b93c      	cbnz	r4, 801244c <_calloc_r+0x18>
 801243c:	4629      	mov	r1, r5
 801243e:	f7fb fcdb 	bl	800ddf8 <_malloc_r>
 8012442:	4606      	mov	r6, r0
 8012444:	b928      	cbnz	r0, 8012452 <_calloc_r+0x1e>
 8012446:	2600      	movs	r6, #0
 8012448:	4630      	mov	r0, r6
 801244a:	bd70      	pop	{r4, r5, r6, pc}
 801244c:	220c      	movs	r2, #12
 801244e:	6002      	str	r2, [r0, #0]
 8012450:	e7f9      	b.n	8012446 <_calloc_r+0x12>
 8012452:	462a      	mov	r2, r5
 8012454:	4621      	mov	r1, r4
 8012456:	f7fd faa8 	bl	800f9aa <memset>
 801245a:	e7f5      	b.n	8012448 <_calloc_r+0x14>

0801245c <_realloc_r>:
 801245c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012460:	4680      	mov	r8, r0
 8012462:	4615      	mov	r5, r2
 8012464:	460c      	mov	r4, r1
 8012466:	b921      	cbnz	r1, 8012472 <_realloc_r+0x16>
 8012468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801246c:	4611      	mov	r1, r2
 801246e:	f7fb bcc3 	b.w	800ddf8 <_malloc_r>
 8012472:	b92a      	cbnz	r2, 8012480 <_realloc_r+0x24>
 8012474:	f7fe f946 	bl	8010704 <_free_r>
 8012478:	2400      	movs	r4, #0
 801247a:	4620      	mov	r0, r4
 801247c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012480:	f000 f8a3 	bl	80125ca <_malloc_usable_size_r>
 8012484:	4285      	cmp	r5, r0
 8012486:	4606      	mov	r6, r0
 8012488:	d802      	bhi.n	8012490 <_realloc_r+0x34>
 801248a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801248e:	d8f4      	bhi.n	801247a <_realloc_r+0x1e>
 8012490:	4629      	mov	r1, r5
 8012492:	4640      	mov	r0, r8
 8012494:	f7fb fcb0 	bl	800ddf8 <_malloc_r>
 8012498:	4607      	mov	r7, r0
 801249a:	2800      	cmp	r0, #0
 801249c:	d0ec      	beq.n	8012478 <_realloc_r+0x1c>
 801249e:	42b5      	cmp	r5, r6
 80124a0:	462a      	mov	r2, r5
 80124a2:	4621      	mov	r1, r4
 80124a4:	bf28      	it	cs
 80124a6:	4632      	movcs	r2, r6
 80124a8:	f7fd fb2d 	bl	800fb06 <memcpy>
 80124ac:	4621      	mov	r1, r4
 80124ae:	4640      	mov	r0, r8
 80124b0:	f7fe f928 	bl	8010704 <_free_r>
 80124b4:	463c      	mov	r4, r7
 80124b6:	e7e0      	b.n	801247a <_realloc_r+0x1e>

080124b8 <_strtoul_l.constprop.0>:
 80124b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124bc:	4e34      	ldr	r6, [pc, #208]	@ (8012590 <_strtoul_l.constprop.0+0xd8>)
 80124be:	4686      	mov	lr, r0
 80124c0:	460d      	mov	r5, r1
 80124c2:	4628      	mov	r0, r5
 80124c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80124c8:	5d37      	ldrb	r7, [r6, r4]
 80124ca:	f017 0708 	ands.w	r7, r7, #8
 80124ce:	d1f8      	bne.n	80124c2 <_strtoul_l.constprop.0+0xa>
 80124d0:	2c2d      	cmp	r4, #45	@ 0x2d
 80124d2:	d12f      	bne.n	8012534 <_strtoul_l.constprop.0+0x7c>
 80124d4:	782c      	ldrb	r4, [r5, #0]
 80124d6:	2701      	movs	r7, #1
 80124d8:	1c85      	adds	r5, r0, #2
 80124da:	f033 0010 	bics.w	r0, r3, #16
 80124de:	d109      	bne.n	80124f4 <_strtoul_l.constprop.0+0x3c>
 80124e0:	2c30      	cmp	r4, #48	@ 0x30
 80124e2:	d12c      	bne.n	801253e <_strtoul_l.constprop.0+0x86>
 80124e4:	7828      	ldrb	r0, [r5, #0]
 80124e6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80124ea:	2858      	cmp	r0, #88	@ 0x58
 80124ec:	d127      	bne.n	801253e <_strtoul_l.constprop.0+0x86>
 80124ee:	786c      	ldrb	r4, [r5, #1]
 80124f0:	2310      	movs	r3, #16
 80124f2:	3502      	adds	r5, #2
 80124f4:	f04f 38ff 	mov.w	r8, #4294967295
 80124f8:	2600      	movs	r6, #0
 80124fa:	fbb8 f8f3 	udiv	r8, r8, r3
 80124fe:	fb03 f908 	mul.w	r9, r3, r8
 8012502:	ea6f 0909 	mvn.w	r9, r9
 8012506:	4630      	mov	r0, r6
 8012508:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801250c:	f1bc 0f09 	cmp.w	ip, #9
 8012510:	d81c      	bhi.n	801254c <_strtoul_l.constprop.0+0x94>
 8012512:	4664      	mov	r4, ip
 8012514:	42a3      	cmp	r3, r4
 8012516:	dd2a      	ble.n	801256e <_strtoul_l.constprop.0+0xb6>
 8012518:	f1b6 3fff 	cmp.w	r6, #4294967295
 801251c:	d007      	beq.n	801252e <_strtoul_l.constprop.0+0x76>
 801251e:	4580      	cmp	r8, r0
 8012520:	d322      	bcc.n	8012568 <_strtoul_l.constprop.0+0xb0>
 8012522:	d101      	bne.n	8012528 <_strtoul_l.constprop.0+0x70>
 8012524:	45a1      	cmp	r9, r4
 8012526:	db1f      	blt.n	8012568 <_strtoul_l.constprop.0+0xb0>
 8012528:	fb00 4003 	mla	r0, r0, r3, r4
 801252c:	2601      	movs	r6, #1
 801252e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012532:	e7e9      	b.n	8012508 <_strtoul_l.constprop.0+0x50>
 8012534:	2c2b      	cmp	r4, #43	@ 0x2b
 8012536:	bf04      	itt	eq
 8012538:	782c      	ldrbeq	r4, [r5, #0]
 801253a:	1c85      	addeq	r5, r0, #2
 801253c:	e7cd      	b.n	80124da <_strtoul_l.constprop.0+0x22>
 801253e:	2b00      	cmp	r3, #0
 8012540:	d1d8      	bne.n	80124f4 <_strtoul_l.constprop.0+0x3c>
 8012542:	2c30      	cmp	r4, #48	@ 0x30
 8012544:	bf0c      	ite	eq
 8012546:	2308      	moveq	r3, #8
 8012548:	230a      	movne	r3, #10
 801254a:	e7d3      	b.n	80124f4 <_strtoul_l.constprop.0+0x3c>
 801254c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012550:	f1bc 0f19 	cmp.w	ip, #25
 8012554:	d801      	bhi.n	801255a <_strtoul_l.constprop.0+0xa2>
 8012556:	3c37      	subs	r4, #55	@ 0x37
 8012558:	e7dc      	b.n	8012514 <_strtoul_l.constprop.0+0x5c>
 801255a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801255e:	f1bc 0f19 	cmp.w	ip, #25
 8012562:	d804      	bhi.n	801256e <_strtoul_l.constprop.0+0xb6>
 8012564:	3c57      	subs	r4, #87	@ 0x57
 8012566:	e7d5      	b.n	8012514 <_strtoul_l.constprop.0+0x5c>
 8012568:	f04f 36ff 	mov.w	r6, #4294967295
 801256c:	e7df      	b.n	801252e <_strtoul_l.constprop.0+0x76>
 801256e:	1c73      	adds	r3, r6, #1
 8012570:	d106      	bne.n	8012580 <_strtoul_l.constprop.0+0xc8>
 8012572:	2322      	movs	r3, #34	@ 0x22
 8012574:	f8ce 3000 	str.w	r3, [lr]
 8012578:	4630      	mov	r0, r6
 801257a:	b932      	cbnz	r2, 801258a <_strtoul_l.constprop.0+0xd2>
 801257c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012580:	b107      	cbz	r7, 8012584 <_strtoul_l.constprop.0+0xcc>
 8012582:	4240      	negs	r0, r0
 8012584:	2a00      	cmp	r2, #0
 8012586:	d0f9      	beq.n	801257c <_strtoul_l.constprop.0+0xc4>
 8012588:	b106      	cbz	r6, 801258c <_strtoul_l.constprop.0+0xd4>
 801258a:	1e69      	subs	r1, r5, #1
 801258c:	6011      	str	r1, [r2, #0]
 801258e:	e7f5      	b.n	801257c <_strtoul_l.constprop.0+0xc4>
 8012590:	08012f41 	.word	0x08012f41

08012594 <_strtoul_r>:
 8012594:	f7ff bf90 	b.w	80124b8 <_strtoul_l.constprop.0>

08012598 <fiprintf>:
 8012598:	b40e      	push	{r1, r2, r3}
 801259a:	b503      	push	{r0, r1, lr}
 801259c:	4601      	mov	r1, r0
 801259e:	ab03      	add	r3, sp, #12
 80125a0:	4805      	ldr	r0, [pc, #20]	@ (80125b8 <fiprintf+0x20>)
 80125a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80125a6:	6800      	ldr	r0, [r0, #0]
 80125a8:	9301      	str	r3, [sp, #4]
 80125aa:	f000 f83f 	bl	801262c <_vfiprintf_r>
 80125ae:	b002      	add	sp, #8
 80125b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80125b4:	b003      	add	sp, #12
 80125b6:	4770      	bx	lr
 80125b8:	240001c4 	.word	0x240001c4

080125bc <abort>:
 80125bc:	b508      	push	{r3, lr}
 80125be:	2006      	movs	r0, #6
 80125c0:	f000 fa08 	bl	80129d4 <raise>
 80125c4:	2001      	movs	r0, #1
 80125c6:	f7ef f995 	bl	80018f4 <_exit>

080125ca <_malloc_usable_size_r>:
 80125ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125ce:	1f18      	subs	r0, r3, #4
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	bfbc      	itt	lt
 80125d4:	580b      	ldrlt	r3, [r1, r0]
 80125d6:	18c0      	addlt	r0, r0, r3
 80125d8:	4770      	bx	lr

080125da <__sfputc_r>:
 80125da:	6893      	ldr	r3, [r2, #8]
 80125dc:	3b01      	subs	r3, #1
 80125de:	2b00      	cmp	r3, #0
 80125e0:	b410      	push	{r4}
 80125e2:	6093      	str	r3, [r2, #8]
 80125e4:	da08      	bge.n	80125f8 <__sfputc_r+0x1e>
 80125e6:	6994      	ldr	r4, [r2, #24]
 80125e8:	42a3      	cmp	r3, r4
 80125ea:	db01      	blt.n	80125f0 <__sfputc_r+0x16>
 80125ec:	290a      	cmp	r1, #10
 80125ee:	d103      	bne.n	80125f8 <__sfputc_r+0x1e>
 80125f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125f4:	f000 b932 	b.w	801285c <__swbuf_r>
 80125f8:	6813      	ldr	r3, [r2, #0]
 80125fa:	1c58      	adds	r0, r3, #1
 80125fc:	6010      	str	r0, [r2, #0]
 80125fe:	7019      	strb	r1, [r3, #0]
 8012600:	4608      	mov	r0, r1
 8012602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012606:	4770      	bx	lr

08012608 <__sfputs_r>:
 8012608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801260a:	4606      	mov	r6, r0
 801260c:	460f      	mov	r7, r1
 801260e:	4614      	mov	r4, r2
 8012610:	18d5      	adds	r5, r2, r3
 8012612:	42ac      	cmp	r4, r5
 8012614:	d101      	bne.n	801261a <__sfputs_r+0x12>
 8012616:	2000      	movs	r0, #0
 8012618:	e007      	b.n	801262a <__sfputs_r+0x22>
 801261a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801261e:	463a      	mov	r2, r7
 8012620:	4630      	mov	r0, r6
 8012622:	f7ff ffda 	bl	80125da <__sfputc_r>
 8012626:	1c43      	adds	r3, r0, #1
 8012628:	d1f3      	bne.n	8012612 <__sfputs_r+0xa>
 801262a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801262c <_vfiprintf_r>:
 801262c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012630:	460d      	mov	r5, r1
 8012632:	b09d      	sub	sp, #116	@ 0x74
 8012634:	4614      	mov	r4, r2
 8012636:	4698      	mov	r8, r3
 8012638:	4606      	mov	r6, r0
 801263a:	b118      	cbz	r0, 8012644 <_vfiprintf_r+0x18>
 801263c:	6a03      	ldr	r3, [r0, #32]
 801263e:	b90b      	cbnz	r3, 8012644 <_vfiprintf_r+0x18>
 8012640:	f7fd f8ee 	bl	800f820 <__sinit>
 8012644:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012646:	07d9      	lsls	r1, r3, #31
 8012648:	d405      	bmi.n	8012656 <_vfiprintf_r+0x2a>
 801264a:	89ab      	ldrh	r3, [r5, #12]
 801264c:	059a      	lsls	r2, r3, #22
 801264e:	d402      	bmi.n	8012656 <_vfiprintf_r+0x2a>
 8012650:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012652:	f7fd fa56 	bl	800fb02 <__retarget_lock_acquire_recursive>
 8012656:	89ab      	ldrh	r3, [r5, #12]
 8012658:	071b      	lsls	r3, r3, #28
 801265a:	d501      	bpl.n	8012660 <_vfiprintf_r+0x34>
 801265c:	692b      	ldr	r3, [r5, #16]
 801265e:	b99b      	cbnz	r3, 8012688 <_vfiprintf_r+0x5c>
 8012660:	4629      	mov	r1, r5
 8012662:	4630      	mov	r0, r6
 8012664:	f000 f938 	bl	80128d8 <__swsetup_r>
 8012668:	b170      	cbz	r0, 8012688 <_vfiprintf_r+0x5c>
 801266a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801266c:	07dc      	lsls	r4, r3, #31
 801266e:	d504      	bpl.n	801267a <_vfiprintf_r+0x4e>
 8012670:	f04f 30ff 	mov.w	r0, #4294967295
 8012674:	b01d      	add	sp, #116	@ 0x74
 8012676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801267a:	89ab      	ldrh	r3, [r5, #12]
 801267c:	0598      	lsls	r0, r3, #22
 801267e:	d4f7      	bmi.n	8012670 <_vfiprintf_r+0x44>
 8012680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012682:	f7fd fa3f 	bl	800fb04 <__retarget_lock_release_recursive>
 8012686:	e7f3      	b.n	8012670 <_vfiprintf_r+0x44>
 8012688:	2300      	movs	r3, #0
 801268a:	9309      	str	r3, [sp, #36]	@ 0x24
 801268c:	2320      	movs	r3, #32
 801268e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012692:	f8cd 800c 	str.w	r8, [sp, #12]
 8012696:	2330      	movs	r3, #48	@ 0x30
 8012698:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012848 <_vfiprintf_r+0x21c>
 801269c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80126a0:	f04f 0901 	mov.w	r9, #1
 80126a4:	4623      	mov	r3, r4
 80126a6:	469a      	mov	sl, r3
 80126a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126ac:	b10a      	cbz	r2, 80126b2 <_vfiprintf_r+0x86>
 80126ae:	2a25      	cmp	r2, #37	@ 0x25
 80126b0:	d1f9      	bne.n	80126a6 <_vfiprintf_r+0x7a>
 80126b2:	ebba 0b04 	subs.w	fp, sl, r4
 80126b6:	d00b      	beq.n	80126d0 <_vfiprintf_r+0xa4>
 80126b8:	465b      	mov	r3, fp
 80126ba:	4622      	mov	r2, r4
 80126bc:	4629      	mov	r1, r5
 80126be:	4630      	mov	r0, r6
 80126c0:	f7ff ffa2 	bl	8012608 <__sfputs_r>
 80126c4:	3001      	adds	r0, #1
 80126c6:	f000 80a7 	beq.w	8012818 <_vfiprintf_r+0x1ec>
 80126ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80126cc:	445a      	add	r2, fp
 80126ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80126d0:	f89a 3000 	ldrb.w	r3, [sl]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	f000 809f 	beq.w	8012818 <_vfiprintf_r+0x1ec>
 80126da:	2300      	movs	r3, #0
 80126dc:	f04f 32ff 	mov.w	r2, #4294967295
 80126e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126e4:	f10a 0a01 	add.w	sl, sl, #1
 80126e8:	9304      	str	r3, [sp, #16]
 80126ea:	9307      	str	r3, [sp, #28]
 80126ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80126f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80126f2:	4654      	mov	r4, sl
 80126f4:	2205      	movs	r2, #5
 80126f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126fa:	4853      	ldr	r0, [pc, #332]	@ (8012848 <_vfiprintf_r+0x21c>)
 80126fc:	f7ed fe08 	bl	8000310 <memchr>
 8012700:	9a04      	ldr	r2, [sp, #16]
 8012702:	b9d8      	cbnz	r0, 801273c <_vfiprintf_r+0x110>
 8012704:	06d1      	lsls	r1, r2, #27
 8012706:	bf44      	itt	mi
 8012708:	2320      	movmi	r3, #32
 801270a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801270e:	0713      	lsls	r3, r2, #28
 8012710:	bf44      	itt	mi
 8012712:	232b      	movmi	r3, #43	@ 0x2b
 8012714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012718:	f89a 3000 	ldrb.w	r3, [sl]
 801271c:	2b2a      	cmp	r3, #42	@ 0x2a
 801271e:	d015      	beq.n	801274c <_vfiprintf_r+0x120>
 8012720:	9a07      	ldr	r2, [sp, #28]
 8012722:	4654      	mov	r4, sl
 8012724:	2000      	movs	r0, #0
 8012726:	f04f 0c0a 	mov.w	ip, #10
 801272a:	4621      	mov	r1, r4
 801272c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012730:	3b30      	subs	r3, #48	@ 0x30
 8012732:	2b09      	cmp	r3, #9
 8012734:	d94b      	bls.n	80127ce <_vfiprintf_r+0x1a2>
 8012736:	b1b0      	cbz	r0, 8012766 <_vfiprintf_r+0x13a>
 8012738:	9207      	str	r2, [sp, #28]
 801273a:	e014      	b.n	8012766 <_vfiprintf_r+0x13a>
 801273c:	eba0 0308 	sub.w	r3, r0, r8
 8012740:	fa09 f303 	lsl.w	r3, r9, r3
 8012744:	4313      	orrs	r3, r2
 8012746:	9304      	str	r3, [sp, #16]
 8012748:	46a2      	mov	sl, r4
 801274a:	e7d2      	b.n	80126f2 <_vfiprintf_r+0xc6>
 801274c:	9b03      	ldr	r3, [sp, #12]
 801274e:	1d19      	adds	r1, r3, #4
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	9103      	str	r1, [sp, #12]
 8012754:	2b00      	cmp	r3, #0
 8012756:	bfbb      	ittet	lt
 8012758:	425b      	neglt	r3, r3
 801275a:	f042 0202 	orrlt.w	r2, r2, #2
 801275e:	9307      	strge	r3, [sp, #28]
 8012760:	9307      	strlt	r3, [sp, #28]
 8012762:	bfb8      	it	lt
 8012764:	9204      	strlt	r2, [sp, #16]
 8012766:	7823      	ldrb	r3, [r4, #0]
 8012768:	2b2e      	cmp	r3, #46	@ 0x2e
 801276a:	d10a      	bne.n	8012782 <_vfiprintf_r+0x156>
 801276c:	7863      	ldrb	r3, [r4, #1]
 801276e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012770:	d132      	bne.n	80127d8 <_vfiprintf_r+0x1ac>
 8012772:	9b03      	ldr	r3, [sp, #12]
 8012774:	1d1a      	adds	r2, r3, #4
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	9203      	str	r2, [sp, #12]
 801277a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801277e:	3402      	adds	r4, #2
 8012780:	9305      	str	r3, [sp, #20]
 8012782:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012858 <_vfiprintf_r+0x22c>
 8012786:	7821      	ldrb	r1, [r4, #0]
 8012788:	2203      	movs	r2, #3
 801278a:	4650      	mov	r0, sl
 801278c:	f7ed fdc0 	bl	8000310 <memchr>
 8012790:	b138      	cbz	r0, 80127a2 <_vfiprintf_r+0x176>
 8012792:	9b04      	ldr	r3, [sp, #16]
 8012794:	eba0 000a 	sub.w	r0, r0, sl
 8012798:	2240      	movs	r2, #64	@ 0x40
 801279a:	4082      	lsls	r2, r0
 801279c:	4313      	orrs	r3, r2
 801279e:	3401      	adds	r4, #1
 80127a0:	9304      	str	r3, [sp, #16]
 80127a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127a6:	4829      	ldr	r0, [pc, #164]	@ (801284c <_vfiprintf_r+0x220>)
 80127a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80127ac:	2206      	movs	r2, #6
 80127ae:	f7ed fdaf 	bl	8000310 <memchr>
 80127b2:	2800      	cmp	r0, #0
 80127b4:	d03f      	beq.n	8012836 <_vfiprintf_r+0x20a>
 80127b6:	4b26      	ldr	r3, [pc, #152]	@ (8012850 <_vfiprintf_r+0x224>)
 80127b8:	bb1b      	cbnz	r3, 8012802 <_vfiprintf_r+0x1d6>
 80127ba:	9b03      	ldr	r3, [sp, #12]
 80127bc:	3307      	adds	r3, #7
 80127be:	f023 0307 	bic.w	r3, r3, #7
 80127c2:	3308      	adds	r3, #8
 80127c4:	9303      	str	r3, [sp, #12]
 80127c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127c8:	443b      	add	r3, r7
 80127ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80127cc:	e76a      	b.n	80126a4 <_vfiprintf_r+0x78>
 80127ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80127d2:	460c      	mov	r4, r1
 80127d4:	2001      	movs	r0, #1
 80127d6:	e7a8      	b.n	801272a <_vfiprintf_r+0xfe>
 80127d8:	2300      	movs	r3, #0
 80127da:	3401      	adds	r4, #1
 80127dc:	9305      	str	r3, [sp, #20]
 80127de:	4619      	mov	r1, r3
 80127e0:	f04f 0c0a 	mov.w	ip, #10
 80127e4:	4620      	mov	r0, r4
 80127e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127ea:	3a30      	subs	r2, #48	@ 0x30
 80127ec:	2a09      	cmp	r2, #9
 80127ee:	d903      	bls.n	80127f8 <_vfiprintf_r+0x1cc>
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d0c6      	beq.n	8012782 <_vfiprintf_r+0x156>
 80127f4:	9105      	str	r1, [sp, #20]
 80127f6:	e7c4      	b.n	8012782 <_vfiprintf_r+0x156>
 80127f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80127fc:	4604      	mov	r4, r0
 80127fe:	2301      	movs	r3, #1
 8012800:	e7f0      	b.n	80127e4 <_vfiprintf_r+0x1b8>
 8012802:	ab03      	add	r3, sp, #12
 8012804:	9300      	str	r3, [sp, #0]
 8012806:	462a      	mov	r2, r5
 8012808:	4b12      	ldr	r3, [pc, #72]	@ (8012854 <_vfiprintf_r+0x228>)
 801280a:	a904      	add	r1, sp, #16
 801280c:	4630      	mov	r0, r6
 801280e:	f7fc f9c7 	bl	800eba0 <_printf_float>
 8012812:	4607      	mov	r7, r0
 8012814:	1c78      	adds	r0, r7, #1
 8012816:	d1d6      	bne.n	80127c6 <_vfiprintf_r+0x19a>
 8012818:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801281a:	07d9      	lsls	r1, r3, #31
 801281c:	d405      	bmi.n	801282a <_vfiprintf_r+0x1fe>
 801281e:	89ab      	ldrh	r3, [r5, #12]
 8012820:	059a      	lsls	r2, r3, #22
 8012822:	d402      	bmi.n	801282a <_vfiprintf_r+0x1fe>
 8012824:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012826:	f7fd f96d 	bl	800fb04 <__retarget_lock_release_recursive>
 801282a:	89ab      	ldrh	r3, [r5, #12]
 801282c:	065b      	lsls	r3, r3, #25
 801282e:	f53f af1f 	bmi.w	8012670 <_vfiprintf_r+0x44>
 8012832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012834:	e71e      	b.n	8012674 <_vfiprintf_r+0x48>
 8012836:	ab03      	add	r3, sp, #12
 8012838:	9300      	str	r3, [sp, #0]
 801283a:	462a      	mov	r2, r5
 801283c:	4b05      	ldr	r3, [pc, #20]	@ (8012854 <_vfiprintf_r+0x228>)
 801283e:	a904      	add	r1, sp, #16
 8012840:	4630      	mov	r0, r6
 8012842:	f7fc fc35 	bl	800f0b0 <_printf_i>
 8012846:	e7e4      	b.n	8012812 <_vfiprintf_r+0x1e6>
 8012848:	08013041 	.word	0x08013041
 801284c:	0801304b 	.word	0x0801304b
 8012850:	0800eba1 	.word	0x0800eba1
 8012854:	08012609 	.word	0x08012609
 8012858:	08013047 	.word	0x08013047

0801285c <__swbuf_r>:
 801285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801285e:	460e      	mov	r6, r1
 8012860:	4614      	mov	r4, r2
 8012862:	4605      	mov	r5, r0
 8012864:	b118      	cbz	r0, 801286e <__swbuf_r+0x12>
 8012866:	6a03      	ldr	r3, [r0, #32]
 8012868:	b90b      	cbnz	r3, 801286e <__swbuf_r+0x12>
 801286a:	f7fc ffd9 	bl	800f820 <__sinit>
 801286e:	69a3      	ldr	r3, [r4, #24]
 8012870:	60a3      	str	r3, [r4, #8]
 8012872:	89a3      	ldrh	r3, [r4, #12]
 8012874:	071a      	lsls	r2, r3, #28
 8012876:	d501      	bpl.n	801287c <__swbuf_r+0x20>
 8012878:	6923      	ldr	r3, [r4, #16]
 801287a:	b943      	cbnz	r3, 801288e <__swbuf_r+0x32>
 801287c:	4621      	mov	r1, r4
 801287e:	4628      	mov	r0, r5
 8012880:	f000 f82a 	bl	80128d8 <__swsetup_r>
 8012884:	b118      	cbz	r0, 801288e <__swbuf_r+0x32>
 8012886:	f04f 37ff 	mov.w	r7, #4294967295
 801288a:	4638      	mov	r0, r7
 801288c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801288e:	6823      	ldr	r3, [r4, #0]
 8012890:	6922      	ldr	r2, [r4, #16]
 8012892:	1a98      	subs	r0, r3, r2
 8012894:	6963      	ldr	r3, [r4, #20]
 8012896:	b2f6      	uxtb	r6, r6
 8012898:	4283      	cmp	r3, r0
 801289a:	4637      	mov	r7, r6
 801289c:	dc05      	bgt.n	80128aa <__swbuf_r+0x4e>
 801289e:	4621      	mov	r1, r4
 80128a0:	4628      	mov	r0, r5
 80128a2:	f7ff fcf3 	bl	801228c <_fflush_r>
 80128a6:	2800      	cmp	r0, #0
 80128a8:	d1ed      	bne.n	8012886 <__swbuf_r+0x2a>
 80128aa:	68a3      	ldr	r3, [r4, #8]
 80128ac:	3b01      	subs	r3, #1
 80128ae:	60a3      	str	r3, [r4, #8]
 80128b0:	6823      	ldr	r3, [r4, #0]
 80128b2:	1c5a      	adds	r2, r3, #1
 80128b4:	6022      	str	r2, [r4, #0]
 80128b6:	701e      	strb	r6, [r3, #0]
 80128b8:	6962      	ldr	r2, [r4, #20]
 80128ba:	1c43      	adds	r3, r0, #1
 80128bc:	429a      	cmp	r2, r3
 80128be:	d004      	beq.n	80128ca <__swbuf_r+0x6e>
 80128c0:	89a3      	ldrh	r3, [r4, #12]
 80128c2:	07db      	lsls	r3, r3, #31
 80128c4:	d5e1      	bpl.n	801288a <__swbuf_r+0x2e>
 80128c6:	2e0a      	cmp	r6, #10
 80128c8:	d1df      	bne.n	801288a <__swbuf_r+0x2e>
 80128ca:	4621      	mov	r1, r4
 80128cc:	4628      	mov	r0, r5
 80128ce:	f7ff fcdd 	bl	801228c <_fflush_r>
 80128d2:	2800      	cmp	r0, #0
 80128d4:	d0d9      	beq.n	801288a <__swbuf_r+0x2e>
 80128d6:	e7d6      	b.n	8012886 <__swbuf_r+0x2a>

080128d8 <__swsetup_r>:
 80128d8:	b538      	push	{r3, r4, r5, lr}
 80128da:	4b29      	ldr	r3, [pc, #164]	@ (8012980 <__swsetup_r+0xa8>)
 80128dc:	4605      	mov	r5, r0
 80128de:	6818      	ldr	r0, [r3, #0]
 80128e0:	460c      	mov	r4, r1
 80128e2:	b118      	cbz	r0, 80128ec <__swsetup_r+0x14>
 80128e4:	6a03      	ldr	r3, [r0, #32]
 80128e6:	b90b      	cbnz	r3, 80128ec <__swsetup_r+0x14>
 80128e8:	f7fc ff9a 	bl	800f820 <__sinit>
 80128ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128f0:	0719      	lsls	r1, r3, #28
 80128f2:	d422      	bmi.n	801293a <__swsetup_r+0x62>
 80128f4:	06da      	lsls	r2, r3, #27
 80128f6:	d407      	bmi.n	8012908 <__swsetup_r+0x30>
 80128f8:	2209      	movs	r2, #9
 80128fa:	602a      	str	r2, [r5, #0]
 80128fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012900:	81a3      	strh	r3, [r4, #12]
 8012902:	f04f 30ff 	mov.w	r0, #4294967295
 8012906:	e033      	b.n	8012970 <__swsetup_r+0x98>
 8012908:	0758      	lsls	r0, r3, #29
 801290a:	d512      	bpl.n	8012932 <__swsetup_r+0x5a>
 801290c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801290e:	b141      	cbz	r1, 8012922 <__swsetup_r+0x4a>
 8012910:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012914:	4299      	cmp	r1, r3
 8012916:	d002      	beq.n	801291e <__swsetup_r+0x46>
 8012918:	4628      	mov	r0, r5
 801291a:	f7fd fef3 	bl	8010704 <_free_r>
 801291e:	2300      	movs	r3, #0
 8012920:	6363      	str	r3, [r4, #52]	@ 0x34
 8012922:	89a3      	ldrh	r3, [r4, #12]
 8012924:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012928:	81a3      	strh	r3, [r4, #12]
 801292a:	2300      	movs	r3, #0
 801292c:	6063      	str	r3, [r4, #4]
 801292e:	6923      	ldr	r3, [r4, #16]
 8012930:	6023      	str	r3, [r4, #0]
 8012932:	89a3      	ldrh	r3, [r4, #12]
 8012934:	f043 0308 	orr.w	r3, r3, #8
 8012938:	81a3      	strh	r3, [r4, #12]
 801293a:	6923      	ldr	r3, [r4, #16]
 801293c:	b94b      	cbnz	r3, 8012952 <__swsetup_r+0x7a>
 801293e:	89a3      	ldrh	r3, [r4, #12]
 8012940:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012948:	d003      	beq.n	8012952 <__swsetup_r+0x7a>
 801294a:	4621      	mov	r1, r4
 801294c:	4628      	mov	r0, r5
 801294e:	f000 f883 	bl	8012a58 <__smakebuf_r>
 8012952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012956:	f013 0201 	ands.w	r2, r3, #1
 801295a:	d00a      	beq.n	8012972 <__swsetup_r+0x9a>
 801295c:	2200      	movs	r2, #0
 801295e:	60a2      	str	r2, [r4, #8]
 8012960:	6962      	ldr	r2, [r4, #20]
 8012962:	4252      	negs	r2, r2
 8012964:	61a2      	str	r2, [r4, #24]
 8012966:	6922      	ldr	r2, [r4, #16]
 8012968:	b942      	cbnz	r2, 801297c <__swsetup_r+0xa4>
 801296a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801296e:	d1c5      	bne.n	80128fc <__swsetup_r+0x24>
 8012970:	bd38      	pop	{r3, r4, r5, pc}
 8012972:	0799      	lsls	r1, r3, #30
 8012974:	bf58      	it	pl
 8012976:	6962      	ldrpl	r2, [r4, #20]
 8012978:	60a2      	str	r2, [r4, #8]
 801297a:	e7f4      	b.n	8012966 <__swsetup_r+0x8e>
 801297c:	2000      	movs	r0, #0
 801297e:	e7f7      	b.n	8012970 <__swsetup_r+0x98>
 8012980:	240001c4 	.word	0x240001c4

08012984 <_raise_r>:
 8012984:	291f      	cmp	r1, #31
 8012986:	b538      	push	{r3, r4, r5, lr}
 8012988:	4605      	mov	r5, r0
 801298a:	460c      	mov	r4, r1
 801298c:	d904      	bls.n	8012998 <_raise_r+0x14>
 801298e:	2316      	movs	r3, #22
 8012990:	6003      	str	r3, [r0, #0]
 8012992:	f04f 30ff 	mov.w	r0, #4294967295
 8012996:	bd38      	pop	{r3, r4, r5, pc}
 8012998:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801299a:	b112      	cbz	r2, 80129a2 <_raise_r+0x1e>
 801299c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80129a0:	b94b      	cbnz	r3, 80129b6 <_raise_r+0x32>
 80129a2:	4628      	mov	r0, r5
 80129a4:	f000 f830 	bl	8012a08 <_getpid_r>
 80129a8:	4622      	mov	r2, r4
 80129aa:	4601      	mov	r1, r0
 80129ac:	4628      	mov	r0, r5
 80129ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129b2:	f000 b817 	b.w	80129e4 <_kill_r>
 80129b6:	2b01      	cmp	r3, #1
 80129b8:	d00a      	beq.n	80129d0 <_raise_r+0x4c>
 80129ba:	1c59      	adds	r1, r3, #1
 80129bc:	d103      	bne.n	80129c6 <_raise_r+0x42>
 80129be:	2316      	movs	r3, #22
 80129c0:	6003      	str	r3, [r0, #0]
 80129c2:	2001      	movs	r0, #1
 80129c4:	e7e7      	b.n	8012996 <_raise_r+0x12>
 80129c6:	2100      	movs	r1, #0
 80129c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80129cc:	4620      	mov	r0, r4
 80129ce:	4798      	blx	r3
 80129d0:	2000      	movs	r0, #0
 80129d2:	e7e0      	b.n	8012996 <_raise_r+0x12>

080129d4 <raise>:
 80129d4:	4b02      	ldr	r3, [pc, #8]	@ (80129e0 <raise+0xc>)
 80129d6:	4601      	mov	r1, r0
 80129d8:	6818      	ldr	r0, [r3, #0]
 80129da:	f7ff bfd3 	b.w	8012984 <_raise_r>
 80129de:	bf00      	nop
 80129e0:	240001c4 	.word	0x240001c4

080129e4 <_kill_r>:
 80129e4:	b538      	push	{r3, r4, r5, lr}
 80129e6:	4d07      	ldr	r5, [pc, #28]	@ (8012a04 <_kill_r+0x20>)
 80129e8:	2300      	movs	r3, #0
 80129ea:	4604      	mov	r4, r0
 80129ec:	4608      	mov	r0, r1
 80129ee:	4611      	mov	r1, r2
 80129f0:	602b      	str	r3, [r5, #0]
 80129f2:	f7ee ff6f 	bl	80018d4 <_kill>
 80129f6:	1c43      	adds	r3, r0, #1
 80129f8:	d102      	bne.n	8012a00 <_kill_r+0x1c>
 80129fa:	682b      	ldr	r3, [r5, #0]
 80129fc:	b103      	cbz	r3, 8012a00 <_kill_r+0x1c>
 80129fe:	6023      	str	r3, [r4, #0]
 8012a00:	bd38      	pop	{r3, r4, r5, pc}
 8012a02:	bf00      	nop
 8012a04:	24000e5c 	.word	0x24000e5c

08012a08 <_getpid_r>:
 8012a08:	f7ee bf5c 	b.w	80018c4 <_getpid>

08012a0c <__swhatbuf_r>:
 8012a0c:	b570      	push	{r4, r5, r6, lr}
 8012a0e:	460c      	mov	r4, r1
 8012a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a14:	2900      	cmp	r1, #0
 8012a16:	b096      	sub	sp, #88	@ 0x58
 8012a18:	4615      	mov	r5, r2
 8012a1a:	461e      	mov	r6, r3
 8012a1c:	da0d      	bge.n	8012a3a <__swhatbuf_r+0x2e>
 8012a1e:	89a3      	ldrh	r3, [r4, #12]
 8012a20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012a24:	f04f 0100 	mov.w	r1, #0
 8012a28:	bf14      	ite	ne
 8012a2a:	2340      	movne	r3, #64	@ 0x40
 8012a2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012a30:	2000      	movs	r0, #0
 8012a32:	6031      	str	r1, [r6, #0]
 8012a34:	602b      	str	r3, [r5, #0]
 8012a36:	b016      	add	sp, #88	@ 0x58
 8012a38:	bd70      	pop	{r4, r5, r6, pc}
 8012a3a:	466a      	mov	r2, sp
 8012a3c:	f000 f848 	bl	8012ad0 <_fstat_r>
 8012a40:	2800      	cmp	r0, #0
 8012a42:	dbec      	blt.n	8012a1e <__swhatbuf_r+0x12>
 8012a44:	9901      	ldr	r1, [sp, #4]
 8012a46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012a4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012a4e:	4259      	negs	r1, r3
 8012a50:	4159      	adcs	r1, r3
 8012a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012a56:	e7eb      	b.n	8012a30 <__swhatbuf_r+0x24>

08012a58 <__smakebuf_r>:
 8012a58:	898b      	ldrh	r3, [r1, #12]
 8012a5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a5c:	079d      	lsls	r5, r3, #30
 8012a5e:	4606      	mov	r6, r0
 8012a60:	460c      	mov	r4, r1
 8012a62:	d507      	bpl.n	8012a74 <__smakebuf_r+0x1c>
 8012a64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012a68:	6023      	str	r3, [r4, #0]
 8012a6a:	6123      	str	r3, [r4, #16]
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	6163      	str	r3, [r4, #20]
 8012a70:	b003      	add	sp, #12
 8012a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a74:	ab01      	add	r3, sp, #4
 8012a76:	466a      	mov	r2, sp
 8012a78:	f7ff ffc8 	bl	8012a0c <__swhatbuf_r>
 8012a7c:	9f00      	ldr	r7, [sp, #0]
 8012a7e:	4605      	mov	r5, r0
 8012a80:	4639      	mov	r1, r7
 8012a82:	4630      	mov	r0, r6
 8012a84:	f7fb f9b8 	bl	800ddf8 <_malloc_r>
 8012a88:	b948      	cbnz	r0, 8012a9e <__smakebuf_r+0x46>
 8012a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a8e:	059a      	lsls	r2, r3, #22
 8012a90:	d4ee      	bmi.n	8012a70 <__smakebuf_r+0x18>
 8012a92:	f023 0303 	bic.w	r3, r3, #3
 8012a96:	f043 0302 	orr.w	r3, r3, #2
 8012a9a:	81a3      	strh	r3, [r4, #12]
 8012a9c:	e7e2      	b.n	8012a64 <__smakebuf_r+0xc>
 8012a9e:	89a3      	ldrh	r3, [r4, #12]
 8012aa0:	6020      	str	r0, [r4, #0]
 8012aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012aa6:	81a3      	strh	r3, [r4, #12]
 8012aa8:	9b01      	ldr	r3, [sp, #4]
 8012aaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012aae:	b15b      	cbz	r3, 8012ac8 <__smakebuf_r+0x70>
 8012ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ab4:	4630      	mov	r0, r6
 8012ab6:	f000 f81d 	bl	8012af4 <_isatty_r>
 8012aba:	b128      	cbz	r0, 8012ac8 <__smakebuf_r+0x70>
 8012abc:	89a3      	ldrh	r3, [r4, #12]
 8012abe:	f023 0303 	bic.w	r3, r3, #3
 8012ac2:	f043 0301 	orr.w	r3, r3, #1
 8012ac6:	81a3      	strh	r3, [r4, #12]
 8012ac8:	89a3      	ldrh	r3, [r4, #12]
 8012aca:	431d      	orrs	r5, r3
 8012acc:	81a5      	strh	r5, [r4, #12]
 8012ace:	e7cf      	b.n	8012a70 <__smakebuf_r+0x18>

08012ad0 <_fstat_r>:
 8012ad0:	b538      	push	{r3, r4, r5, lr}
 8012ad2:	4d07      	ldr	r5, [pc, #28]	@ (8012af0 <_fstat_r+0x20>)
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	4604      	mov	r4, r0
 8012ad8:	4608      	mov	r0, r1
 8012ada:	4611      	mov	r1, r2
 8012adc:	602b      	str	r3, [r5, #0]
 8012ade:	f7ee ff59 	bl	8001994 <_fstat>
 8012ae2:	1c43      	adds	r3, r0, #1
 8012ae4:	d102      	bne.n	8012aec <_fstat_r+0x1c>
 8012ae6:	682b      	ldr	r3, [r5, #0]
 8012ae8:	b103      	cbz	r3, 8012aec <_fstat_r+0x1c>
 8012aea:	6023      	str	r3, [r4, #0]
 8012aec:	bd38      	pop	{r3, r4, r5, pc}
 8012aee:	bf00      	nop
 8012af0:	24000e5c 	.word	0x24000e5c

08012af4 <_isatty_r>:
 8012af4:	b538      	push	{r3, r4, r5, lr}
 8012af6:	4d06      	ldr	r5, [pc, #24]	@ (8012b10 <_isatty_r+0x1c>)
 8012af8:	2300      	movs	r3, #0
 8012afa:	4604      	mov	r4, r0
 8012afc:	4608      	mov	r0, r1
 8012afe:	602b      	str	r3, [r5, #0]
 8012b00:	f7ee ff58 	bl	80019b4 <_isatty>
 8012b04:	1c43      	adds	r3, r0, #1
 8012b06:	d102      	bne.n	8012b0e <_isatty_r+0x1a>
 8012b08:	682b      	ldr	r3, [r5, #0]
 8012b0a:	b103      	cbz	r3, 8012b0e <_isatty_r+0x1a>
 8012b0c:	6023      	str	r3, [r4, #0]
 8012b0e:	bd38      	pop	{r3, r4, r5, pc}
 8012b10:	24000e5c 	.word	0x24000e5c

08012b14 <_init>:
 8012b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b16:	bf00      	nop
 8012b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b1a:	bc08      	pop	{r3}
 8012b1c:	469e      	mov	lr, r3
 8012b1e:	4770      	bx	lr

08012b20 <_fini>:
 8012b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b22:	bf00      	nop
 8012b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b26:	bc08      	pop	{r3}
 8012b28:	469e      	mov	lr, r3
 8012b2a:	4770      	bx	lr
