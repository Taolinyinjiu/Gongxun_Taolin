
Gongxun_Taolin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ee4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  080131b8  080131b8  000141b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013734  08013734  00014734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801373c  0801373c  0001473c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013740  08013740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000214  24000000  08013744  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000cb8  24000214  08013958  00015214  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000ecc  08013958  00015ecc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015214  2**0
                  CONTENTS, READONLY
 10 .debug_info   000219e2  00000000  00000000  00015242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004647  00000000  00000000  00036c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b08  00000000  00000000  0003b270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014fe  00000000  00000000  0003cd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037d9a  00000000  00000000  0003e276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002980e  00000000  00000000  00076010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159940  00000000  00000000  0009f81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f915e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008630  00000000  00000000  001f91a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004f  00000000  00000000  002017d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000214 	.word	0x24000214
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801319c 	.word	0x0801319c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000218 	.word	0x24000218
 800030c:	0801319c 	.word	0x0801319c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af02      	add	r7, sp, #8
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 8000a9e:	4b43      	ldr	r3, [pc, #268]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa0:	4a43      	ldr	r2, [pc, #268]	@ (8000bb0 <MX_FDCAN1_Init+0x118>)
 8000aa2:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000aa4:	4b41      	ldr	r3, [pc, #260]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000aaa:	4b40      	ldr	r3, [pc, #256]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000abc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 10;
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000ac8:	4b38      	ldr	r3, [pc, #224]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ace:	4b37      	ldr	r3, [pc, #220]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ad4:	4b35      	ldr	r3, [pc, #212]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8000ada:	4b34      	ldr	r3, [pc, #208]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 10;
 8000ae0:	4b32      	ldr	r3, [pc, #200]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 2;
 8000ae6:	4b31      	ldr	r3, [pc, #196]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 2;
 8000aec:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 1;
 8000afe:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8000b04:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b06:	2204      	movs	r2, #4
 8000b08:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b18:	2204      	movs	r2, #4
 8000b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b22:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b46:	4819      	ldr	r0, [pc, #100]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b48:	f003 f818 	bl	8003b7c <HAL_FDCAN_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_FDCAN1_Init+0xbe>
	{
		Error_Handler();
 8000b52:	f000 fdff 	bl	8001754 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */
//配置RX滤波
	hfdcan1_RX_Filter.IdType = FDCAN_EXTENDED_ID;       //标准 IDFDCAN_STANDARD_ID
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5c:	601a      	str	r2, [r3, #0]
	hfdcan1_RX_Filter.FilterIndex = 0;                           //滤波器索�????????
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
	hfdcan1_RX_Filter.FilterType = FDCAN_FILTER_MASK;            //滤波器类�????????
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	609a      	str	r2, [r3, #8]
	hfdcan1_RX_Filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //过滤�????????0关联到FIFO0
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
	hfdcan1_RX_Filter.FilterID1 = 0x000;                               //32位ID
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
	hfdcan1_RX_Filter.FilterID2 = 0x000; //如果FDCAN配置为传统模式的话，这里�????????32位掩�????????
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan1_RX_Filter);               //滤波器初始化
 8000b7c:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b7e:	480b      	ldr	r0, [pc, #44]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b80:	f003 f9da 	bl	8003f38 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, ENABLE,
 8000b84:	2301      	movs	r3, #1
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b90:	f003 fa48 	bl	8004024 <HAL_FDCAN_ConfigGlobalFilter>
			ENABLE);
	HAL_FDCAN_Start(&hfdcan1);                               //�???启FDCAN
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b96:	f003 fa72 	bl	800407e <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ba0:	f003 fc60 	bl	8004464 <HAL_FDCAN_ActivateNotification>
	/* USER CODE END FDCAN1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	240002a0 	.word	0x240002a0
 8000bb0:	4000a000 	.word	0x4000a000
 8000bb4:	24000230 	.word	0x24000230

08000bb8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef *fdcanHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0b8      	sub	sp, #224	@ 0xe0
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 8000bc0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	22b8      	movs	r2, #184	@ 0xb8
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f00f fa2a 	bl	8010032 <memset>
	{ 0 };
	if (fdcanHandle->Instance == FDCAN1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c8c <HAL_FDCAN_MspInit+0xd4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d14c      	bne.n	8000c82 <HAL_FDCAN_MspInit+0xca>

		/* USER CODE END FDCAN1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000be8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f005 faef 	bl	80061e0 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_FDCAN_MspInit+0x54>
		{
			Error_Handler();
 8000c08:	f000 fda4 	bl	8001754 <Error_Handler>
		}

		/* FDCAN1 clock enable */
		__HAL_RCC_FDCAN_CLK_ENABLE();
 8000c0c:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c12:	4a1f      	ldr	r2, [pc, #124]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	4a17      	ldr	r2, [pc, #92]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
		/**FDCAN1 GPIO Configuration
		 PD0     ------> FDCAN1_RX
		 PD1     ------> FDCAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c60:	2309      	movs	r3, #9
 8000c62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <HAL_FDCAN_MspInit+0xdc>)
 8000c6e:	f004 f96f 	bl	8004f50 <HAL_GPIO_Init>

		/* FDCAN1 interrupt Init */
		HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 2, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2102      	movs	r1, #2
 8000c76:	2013      	movs	r0, #19
 8000c78:	f002 f96f 	bl	8002f5a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c7c:	2013      	movs	r0, #19
 8000c7e:	f002 f986 	bl	8002f8e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN FDCAN1_MspInit 1 */

		/* USER CODE END FDCAN1_MspInit 1 */
	}
}
 8000c82:	bf00      	nop
 8000c84:	37e0      	adds	r7, #224	@ 0xe0
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	4000a000 	.word	0x4000a000
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020c00 	.word	0x58020c00

08000c98 <FDCAN_Send_Msg>:
	}
}

/* USER CODE BEGIN 1 */
void FDCAN_Send_Msg(uint8_t *msg, uint32_t len)
{
 8000c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c9c:	b087      	sub	sp, #28
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
 8000ca4:	466b      	mov	r3, sp
 8000ca6:	461e      	mov	r6, r3
	uint8_t i = 0, j = 0, k = 0, l = 0, packNum = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	75fb      	strb	r3, [r7, #23]
 8000cac:	2300      	movs	r3, #0
 8000cae:	753b      	strb	r3, [r7, #20]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	74fb      	strb	r3, [r7, #19]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75bb      	strb	r3, [r7, #22]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	757b      	strb	r3, [r7, #21]
	uint8_t TxData[len];
 8000cbc:	6839      	ldr	r1, [r7, #0]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4688      	mov	r8, r1
 8000cc8:	4699      	mov	r9, r3
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cde:	2300      	movs	r3, #0
 8000ce0:	460c      	mov	r4, r1
 8000ce2:	461d      	mov	r5, r3
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	00eb      	lsls	r3, r5, #3
 8000cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cf2:	00e2      	lsls	r2, r4, #3
 8000cf4:	1dcb      	adds	r3, r1, #7
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	ebad 0d03 	sub.w	sp, sp, r3
 8000cfe:	466b      	mov	r3, sp
 8000d00:	3300      	adds	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
	j = len - 2;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	3b02      	subs	r3, #2
 8000d0a:	753b      	strb	r3, [r7, #20]
	// 除去ID地址和功能码后的数据长度
	TxData[0] = msg[1];
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	785a      	ldrb	r2, [r3, #1]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	701a      	strb	r2, [r3, #0]
	// 发�?�数�????????
	while (i < j)
 8000d14:	e062      	b.n	8000ddc <FDCAN_Send_Msg+0x144>
	{
		// 数据个数
		k = j - i;
 8000d16:	7d3a      	ldrb	r2, [r7, #20]
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	74fb      	strb	r3, [r7, #19]
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	021a      	lsls	r2, r3, #8
				| (uint32_t) packNum;  //32位ID   0x00
 8000d24:	7d7b      	ldrb	r3, [r7, #21]
 8000d26:	4313      	orrs	r3, r2
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d28:	4a31      	ldr	r2, [pc, #196]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2a:	6013      	str	r3, [r2, #0]
		fdcan_TxHeader.IdType = FDCAN_EXTENDED_ID;      //ID   FDCAN_STANDARD_ID
 8000d2c:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d32:	605a      	str	r2, [r3, #4]
		fdcan_TxHeader.TxFrameType = FDCAN_DATA_FRAME;             //数据�????????
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
		//    fdcan_TxHeader.DataLength=len;              //数据长度
		fdcan_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
		fdcan_TxHeader.BitRateSwitch = FDCAN_BRS_OFF;               //关闭速率切换
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
		fdcan_TxHeader.FDFormat = FDCAN_CLASSIC_CAN;                //传统的CAN模式
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
		fdcan_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;  //无发送事�????????
 8000d4c:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
		fdcan_TxHeader.MessageMarker = 0;
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
		//小于8字节命令
		if (k < 8)
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	2b07      	cmp	r3, #7
 8000d5c:	d81b      	bhi.n	8000d96 <FDCAN_Send_Msg+0xfe>
		{
			for (l = 0; l < k; l++, i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75bb      	strb	r3, [r7, #22]
 8000d62:	e00e      	b.n	8000d82 <FDCAN_Send_Msg+0xea>
			{
				TxData[l + 1] = msg[i + 2];
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	3302      	adds	r3, #2
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	441a      	add	r2, r3
 8000d6c:	7dbb      	ldrb	r3, [r7, #22]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	7811      	ldrb	r1, [r2, #0]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < k; l++, i++)
 8000d76:	7dbb      	ldrb	r3, [r7, #22]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	75bb      	strb	r3, [r7, #22]
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	75fb      	strb	r3, [r7, #23]
 8000d82:	7dba      	ldrb	r2, [r7, #22]
 8000d84:	7cfb      	ldrb	r3, [r7, #19]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3ec      	bcc.n	8000d64 <FDCAN_Send_Msg+0xcc>
			}
			fdcan_TxHeader.DataLength = k + 1;
 8000d8a:	7cfb      	ldrb	r3, [r7, #19]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	e017      	b.n	8000dc6 <FDCAN_Send_Msg+0x12e>
		}
		// 大于8字节命令，分包发送，每包数据�????????多发�????????8个字�????????
		else
		{
			for (l = 0; l < 7; l++, i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	75bb      	strb	r3, [r7, #22]
 8000d9a:	e00e      	b.n	8000dba <FDCAN_Send_Msg+0x122>
			{
				TxData[l + 1] = msg[i + 2];
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	3302      	adds	r3, #2
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	441a      	add	r2, r3
 8000da4:	7dbb      	ldrb	r3, [r7, #22]
 8000da6:	3301      	adds	r3, #1
 8000da8:	7811      	ldrb	r1, [r2, #0]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < 7; l++, i++)
 8000dae:	7dbb      	ldrb	r3, [r7, #22]
 8000db0:	3301      	adds	r3, #1
 8000db2:	75bb      	strb	r3, [r7, #22]
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	3301      	adds	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
 8000dba:	7dbb      	ldrb	r3, [r7, #22]
 8000dbc:	2b06      	cmp	r3, #6
 8000dbe:	d9ed      	bls.n	8000d9c <FDCAN_Send_Msg+0x104>
			}
			fdcan_TxHeader.DataLength = 8;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	60da      	str	r2, [r3, #12]
		}

		// 发�?�数�??????
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &fdcan_TxHeader, TxData);
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	4909      	ldr	r1, [pc, #36]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dca:	480a      	ldr	r0, [pc, #40]	@ (8000df4 <FDCAN_Send_Msg+0x15c>)
 8000dcc:	f003 f982 	bl	80040d4 <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(5);  //发第二帧数据的关键，若无延时，不发第二帧数据
 8000dd0:	2005      	movs	r0, #5
 8000dd2:	f001 ffc3 	bl	8002d5c <HAL_Delay>
		// 记录发�?�的第几包的数据
		++packNum;
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	757b      	strb	r3, [r7, #21]
	while (i < j)
 8000ddc:	7dfa      	ldrb	r2, [r7, #23]
 8000dde:	7d3b      	ldrb	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d398      	bcc.n	8000d16 <FDCAN_Send_Msg+0x7e>
 8000de4:	46b5      	mov	sp, r6
	}
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df0:	24000250 	.word	0x24000250
 8000df4:	240002a0 	.word	0x240002a0

08000df8 <HAL_FDCAN_RxFifo0Callback>:
bool Base_Data = false;
bool Top_Data = false;
// 允许查询状态标志位
extern bool Call_Flag;
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
//	提取FIFO中的数据,
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &fdcan_RxHeader, rxdata);
 8000e02:	4b34      	ldr	r3, [pc, #208]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e04:	4a34      	ldr	r2, [pc, #208]	@ (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000e06:	2140      	movs	r1, #64	@ 0x40
 8000e08:	4834      	ldr	r0, [pc, #208]	@ (8000edc <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000e0a:	f003 f9bf 	bl	800418c <HAL_FDCAN_GetRxMessage>
	if (Call_Flag == true)
 8000e0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d054      	beq.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
	{
//	底盘步进电机帧头
		if (fdcan_RxHeader.Identifier / 256 == 2)
 8000e16:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8000e1e:	2bff      	cmp	r3, #255	@ 0xff
 8000e20:	d824      	bhi.n	8000e6c <HAL_FDCAN_RxFifo0Callback+0x74>
		{
			if (RxState == 0)
 8000e22:	4b30      	ldr	r3, [pc, #192]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d106      	bne.n	8000e38 <HAL_FDCAN_RxFifo0Callback+0x40>
			{
				if (rxdata[0] == 0xFD)
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e30:	d102      	bne.n	8000e38 <HAL_FDCAN_RxFifo0Callback+0x40>
				{
					RxState = 1;
 8000e32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 1)
 8000e38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d106      	bne.n	8000e4e <HAL_FDCAN_RxFifo0Callback+0x56>
			{
				if (rxdata[1] == 0x9F)
 8000e40:	4b24      	ldr	r3, [pc, #144]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e42:	785b      	ldrb	r3, [r3, #1]
 8000e44:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e46:	d102      	bne.n	8000e4e <HAL_FDCAN_RxFifo0Callback+0x56>
				{
					RxState = 2;
 8000e48:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 2)
 8000e4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d134      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
			{
				if (rxdata[2] == 0x6B)
 8000e56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e58:	789b      	ldrb	r3, [r3, #2]
 8000e5a:	2b6b      	cmp	r3, #107	@ 0x6b
 8000e5c:	d130      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
				{
//				到位数据接收完毕，底盘步进确认到位
					Base_Data = true;
 8000e5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ee8 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
					RxState = 0;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	e029      	b.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
				}
			}
		}
//	升降步进电机帧头
		else if (fdcan_RxHeader.Identifier / 256 == 5)
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8000e74:	2bff      	cmp	r3, #255	@ 0xff
 8000e76:	d823      	bhi.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
		{
			if (RxState == 0)
 8000e78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d106      	bne.n	8000e8e <HAL_FDCAN_RxFifo0Callback+0x96>
			{
				if (rxdata[0] == 0xFD)
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e86:	d102      	bne.n	8000e8e <HAL_FDCAN_RxFifo0Callback+0x96>
				{
					RxState = 1;
 8000e88:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 1)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d106      	bne.n	8000ea4 <HAL_FDCAN_RxFifo0Callback+0xac>
			{
				if (rxdata[1] == 0x9F)
 8000e96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e98:	785b      	ldrb	r3, [r3, #1]
 8000e9a:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e9c:	d102      	bne.n	8000ea4 <HAL_FDCAN_RxFifo0Callback+0xac>
				{
					RxState = 2;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 2)
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d109      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
			{
				if (rxdata[2] == 0x6B)
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000eae:	789b      	ldrb	r3, [r3, #2]
 8000eb0:	2b6b      	cmp	r3, #107	@ 0x6b
 8000eb2:	d105      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
				{
//				到位数据接收完毕，底盘步进确认到位
					Top_Data = true;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
					RxState = 0;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	HAL_FDCAN_ActivateNotification(hfdcan,
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f003 facd 	bl	8004464 <HAL_FDCAN_ActivateNotification>
	FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	24000340 	.word	0x24000340
 8000ed8:	24000274 	.word	0x24000274
 8000edc:	240002a0 	.word	0x240002a0
 8000ee0:	24000c2e 	.word	0x24000c2e
 8000ee4:	24000348 	.word	0x24000348
 8000ee8:	24000349 	.word	0x24000349
 8000eec:	2400034a 	.word	0x2400034a

08000ef0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	4b30      	ldr	r3, [pc, #192]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	4a2e      	ldr	r2, [pc, #184]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f06:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f14:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	4a27      	ldr	r2, [pc, #156]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f24:	4b24      	ldr	r3, [pc, #144]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	4a18      	ldr	r2, [pc, #96]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	4a10      	ldr	r2, [pc, #64]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

}
 8000faa:	bf00      	nop
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	58024400 	.word	0x58024400

08000fbc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000fc2:	f000 fb9b 	bl	80016fc <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fc6:	f001 fe37 	bl	8002c38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fca:	f000 f9bb 	bl	8001344 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	//  USART10 用于Action串口转发,暂时使用无线串口将数据转发到主机
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fce:	f7ff ff8f 	bl	8000ef0 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 8000fd2:	f7ff fd61 	bl	8000a98 <MX_FDCAN1_Init>
	MX_UART4_Init();
 8000fd6:	f000 ff83 	bl	8001ee0 <MX_UART4_Init>
	MX_UART5_Init();
 8000fda:	f000 ffcd 	bl	8001f78 <MX_UART5_Init>
	MX_UART9_Init();
 8000fde:	f001 f8af 	bl	8002140 <MX_UART9_Init>
	MX_USART6_UART_Init();
 8000fe2:	f001 f9cb 	bl	800237c <MX_USART6_UART_Init>
	MX_USART10_UART_Init();
 8000fe6:	f001 fa15 	bl	8002414 <MX_USART10_UART_Init>
	MX_TIM2_Init();
 8000fea:	f000 fdb9 	bl	8001b60 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 8000fee:	f001 f979 	bl	80022e4 <MX_USART3_UART_Init>
	MX_UART7_Init();
 8000ff2:	f001 f80d 	bl	8002010 <MX_UART7_Init>
	MX_UART8_Init();
 8000ff6:	f001 f857 	bl	80020a8 <MX_UART8_Init>
	MX_TIM3_Init();
 8000ffa:	f000 fdff 	bl	8001bfc <MX_TIM3_Init>
	MX_TIM5_Init();
 8000ffe:	f000 fe4d 	bl	8001c9c <MX_TIM5_Init>
	MX_USART2_UART_Init();
 8001002:	f001 f8e9 	bl	80021d8 <MX_USART2_UART_Init>
	MX_TIM12_Init();
 8001006:	f000 fe99 	bl	8001d3c <MX_TIM12_Init>
	/* USER CODE BEGIN 2 */

//	清除定时器初始化过程中的更新中断标志�?
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800100a:	4baf      	ldr	r3, [pc, #700]	@ (80012c8 <main+0x30c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f06f 0201 	mvn.w	r2, #1
 8001012:	611a      	str	r2, [r3, #16]
//	使能定时器中�?
	HAL_TIM_Base_Start_IT(&htim2);
 8001014:	48ac      	ldr	r0, [pc, #688]	@ (80012c8 <main+0x30c>)
 8001016:	f006 fefd 	bl	8007e14 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 800101a:	48ac      	ldr	r0, [pc, #688]	@ (80012cc <main+0x310>)
 800101c:	f006 fefa 	bl	8007e14 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001020:	48ab      	ldr	r0, [pc, #684]	@ (80012d0 <main+0x314>)
 8001022:	f006 fef7 	bl	8007e14 <HAL_TIM_Base_Start_IT>
//	使能串口接收中断
	HAL_UART_Receive_IT(&huart4, &Screen_data, 1);
 8001026:	2201      	movs	r2, #1
 8001028:	49aa      	ldr	r1, [pc, #680]	@ (80012d4 <main+0x318>)
 800102a:	48ab      	ldr	r0, [pc, #684]	@ (80012d8 <main+0x31c>)
 800102c:	f007 fd7e 	bl	8008b2c <HAL_UART_Receive_IT>
//	HWT101预留中断接口
	HAL_UART_Receive_IT(&huart2, &HwtData, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	49aa      	ldr	r1, [pc, #680]	@ (80012dc <main+0x320>)
 8001034:	48aa      	ldr	r0, [pc, #680]	@ (80012e0 <main+0x324>)
 8001036:	f007 fd79 	bl	8008b2c <HAL_UART_Receive_IT>
//	TX2通信接收中断
	HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 800103a:	2201      	movs	r2, #1
 800103c:	49a9      	ldr	r1, [pc, #676]	@ (80012e4 <main+0x328>)
 800103e:	48aa      	ldr	r0, [pc, #680]	@ (80012e8 <main+0x32c>)
 8001040:	f007 fd74 	bl	8008b2c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart9, &data, 1);
 8001044:	2201      	movs	r2, #1
 8001046:	49a9      	ldr	r1, [pc, #676]	@ (80012ec <main+0x330>)
 8001048:	48a9      	ldr	r0, [pc, #676]	@ (80012f0 <main+0x334>)
 800104a:	f007 fd6f 	bl	8008b2c <HAL_UART_Receive_IT>
//	HAL_UART_Receive_IT(&huart10, &Joy_data, 1);

	PID_Init();
 800104e:	f00b f8ab 	bl	800c1a8 <PID_Init>
//			if (Joy_Flag == 1) {
//				Check_Joydata();
//				HAL_Delay(100);
//			}
//		}
		if (Ready_Flag == 1)
 8001052:	4ba8      	ldr	r3, [pc, #672]	@ (80012f4 <main+0x338>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d104      	bne.n	8001064 <main+0xa8>
		{
			Ready_Flag = 0;
 800105a:	4ba6      	ldr	r3, [pc, #664]	@ (80012f4 <main+0x338>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
//			整定车身
			Check_Status();
 8001060:	f00d f952 	bl	800e308 <Check_Status>
		}
		if (System_Flag == 1)
 8001064:	4ba4      	ldr	r3, [pc, #656]	@ (80012f8 <main+0x33c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d1f2      	bne.n	8001052 <main+0x96>
		{
			System_Flag = 0;
 800106c:	4ba2      	ldr	r3, [pc, #648]	@ (80012f8 <main+0x33c>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
//			向TX2发�?�字符串"e1f"
			HAL_UART_Transmit(&huart10, (uint8_t*) "e1f", sizeof("elf") - 1,
 8001072:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001076:	2203      	movs	r2, #3
 8001078:	49a0      	ldr	r1, [pc, #640]	@ (80012fc <main+0x340>)
 800107a:	489b      	ldr	r0, [pc, #620]	@ (80012e8 <main+0x32c>)
 800107c:	f007 fc00 	bl	8008880 <HAL_UART_Transmit>
//			Move_Left(50,50,8000);
///////////////////////////////////////////////////////////////////////////////////////////////////////////
			/***********************运行逻辑-状�?�机*************************/
			while (1)
			{
				switch (flag)
 8001080:	4b9f      	ldr	r3, [pc, #636]	@ (8001300 <main+0x344>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	2b0d      	cmp	r3, #13
 8001086:	f200 811b 	bhi.w	80012c0 <main+0x304>
 800108a:	a201      	add	r2, pc, #4	@ (adr r2, 8001090 <main+0xd4>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	080010c9 	.word	0x080010c9
 8001094:	08001107 	.word	0x08001107
 8001098:	08001161 	.word	0x08001161
 800109c:	08001171 	.word	0x08001171
 80010a0:	08001193 	.word	0x08001193
 80010a4:	080011b3 	.word	0x080011b3
 80010a8:	080011c7 	.word	0x080011c7
 80010ac:	080011f3 	.word	0x080011f3
 80010b0:	08001213 	.word	0x08001213
 80010b4:	0800123f 	.word	0x0800123f
 80010b8:	08001261 	.word	0x08001261
 80010bc:	08001281 	.word	0x08001281
 80010c0:	08001291 	.word	0x08001291
 80010c4:	080012b1 	.word	0x080012b1
				{
				case 0:  //发车，进入扫码区
//					X轴建议移动到150左右
					// Move_TO_Saomaqu(2400, 8250);
					bool temp = Move_Left(RunSpeed, RunAcc, 2400);
 80010c8:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80010cc:	2178      	movs	r1, #120	@ 0x78
 80010ce:	2064      	movs	r0, #100	@ 0x64
 80010d0:	f00b fb1c 	bl	800c70c <Move_Left>
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
					while(temp != true)
 80010d8:	e007      	b.n	80010ea <main+0x12e>
					{
						temp = Move_Left(RunSpeed, RunAcc, 2400);
 80010da:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80010de:	2178      	movs	r1, #120	@ 0x78
 80010e0:	2064      	movs	r0, #100	@ 0x64
 80010e2:	f00b fb13 	bl	800c70c <Move_Left>
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
					while(temp != true)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f083 0301 	eor.w	r3, r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f1      	bne.n	80010da <main+0x11e>
					}    
					Start();    //5400�?
 80010f6:	f00a fb5c 	bl	800b7b2 <Start>
					flag = 1;
 80010fa:	4b81      	ldr	r3, [pc, #516]	@ (8001300 <main+0x344>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	801a      	strh	r2, [r3, #0]
					temp=false;
 8001100:	2300      	movs	r3, #0
 8001102:	71fb      	strb	r3, [r7, #7]
					break;
 8001104:	e0df      	b.n	80012c6 <main+0x30a>
//					Drop_Location_jiang(200, 120, 4000);
				case 1:  //离开扫码区，进入原料�?
//					物料理想点位 375
					temp = Move_Line(RunSpeed, RunAcc, 10500);
 8001106:	f642 1204 	movw	r2, #10500	@ 0x2904
 800110a:	2178      	movs	r1, #120	@ 0x78
 800110c:	2064      	movs	r0, #100	@ 0x64
 800110e:	f00b fa9f 	bl	800c650 <Move_Line>
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
					while(temp != true)
 8001116:	e007      	b.n	8001128 <main+0x16c>
					{
						temp = Move_Line(RunSpeed, RunAcc, 10500);
 8001118:	f642 1204 	movw	r2, #10500	@ 0x2904
 800111c:	2178      	movs	r1, #120	@ 0x78
 800111e:	2064      	movs	r0, #100	@ 0x64
 8001120:	f00b fa96 	bl	800c650 <Move_Line>
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
					while(temp != true)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f083 0301 	eor.w	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1f1      	bne.n	8001118 <main+0x15c>
					}
//					Move_TO_yuanliaoqu(10500);
//					Choke_Flag = false确定Move_Line已经执行完毕，可以开始进入PID整定阶段
					while(Choke_Flag == true)
 8001134:	bf00      	nop
 8001136:	4b73      	ldr	r3, [pc, #460]	@ (8001304 <main+0x348>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1fb      	bne.n	8001136 <main+0x17a>
					{
						;
					}
//					X参�??150 Y参�??1430
					Move_Action_Nopid_Left_Ctrl(150, 1455);  //ACTION调整
 800113e:	eddf 0a72 	vldr	s1, [pc, #456]	@ 8001308 <main+0x34c>
 8001142:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 800130c <main+0x350>
 8001146:	f00b fe4f 	bl	800cde8 <Move_Action_Nopid_Left_Ctrl>
//					�?查TX2是否传�?�物料�??
					while (Point_Flag != 1)
 800114a:	bf00      	nop
 800114c:	4b70      	ldr	r3, [pc, #448]	@ (8001310 <main+0x354>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d1fb      	bne.n	800114c <main+0x190>
					{
						;  //如果Point_Flag值不�?1,则在此处等待
					}
//					TODO:应该在物料抓取函数中实现基于TX2的物料点位闭�?
					Frist_Grab_Wuliao();
 8001154:	f00a fbee 	bl	800b934 <Frist_Grab_Wuliao>
					flag = 2;
 8001158:	4b69      	ldr	r3, [pc, #420]	@ (8001300 <main+0x344>)
 800115a:	2202      	movs	r2, #2
 800115c:	801a      	strh	r2, [r3, #0]
					break;
 800115e:	e0b2      	b.n	80012c6 <main+0x30a>

				case 2:  //离开原料区，进入加工�?

					Move_TO_jianzhi1(4500, 4335);
 8001160:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8001314 <main+0x358>
 8001164:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 8001318 <main+0x35c>
 8001168:	f00b fd7c 	bl	800cc64 <Move_TO_jianzhi1>
					while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <main+0x1b0>
					Move_Action_Nopid_Forward_Ctrl(160, 1070);
					flag = 3;
					break;
				case 3:    //暂存�??

					Move_TO_zancunqu(22000, 4335);
 8001170:	eddf 0a68 	vldr	s1, [pc, #416]	@ 8001314 <main+0x358>
 8001174:	ed9f 0a69 	vldr	s0, [pc, #420]	@ 800131c <main+0x360>
 8001178:	f00b fd99 	bl	800ccae <Move_TO_zancunqu>
					put_wuliao_to_circular_frist();
 800117c:	f00a fc5c 	bl	800ba38 <put_wuliao_to_circular_frist>
					put_wuliao_to_Car_frist();
 8001180:	f00a fcde 	bl	800bb40 <put_wuliao_to_Car_frist>
					HAL_Delay(yanshi);
 8001184:	2032      	movs	r0, #50	@ 0x32
 8001186:	f001 fde9 	bl	8002d5c <HAL_Delay>
					flag = 4;
 800118a:	4b5d      	ldr	r3, [pc, #372]	@ (8001300 <main+0x344>)
 800118c:	2204      	movs	r2, #4
 800118e:	801a      	strh	r2, [r3, #0]
					break;
 8001190:	e099      	b.n	80012c6 <main+0x30a>
				case 4:
					Move_TO_jianzhi2(9000, 4335);     //ACTION调整
 8001192:	eddf 0a60 	vldr	s1, [pc, #384]	@ 8001314 <main+0x358>
 8001196:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 8001320 <main+0x364>
 800119a:	f00b fdad 	bl	800ccf8 <Move_TO_jianzhi2>
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 800119e:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8001324 <main+0x368>
 80011a2:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 8001328 <main+0x36c>
 80011a6:	f00b ff7f 	bl	800d0a8 <Move_Action_Nopid_Forward_Ctrl>
					flag = 5;
 80011aa:	4b55      	ldr	r3, [pc, #340]	@ (8001300 <main+0x344>)
 80011ac:	2205      	movs	r2, #5
 80011ae:	801a      	strh	r2, [r3, #0]
					break;
 80011b0:	e089      	b.n	80012c6 <main+0x30a>
				case 5:       //粗加工区
					Move_TO_cujiagongqu(10000);
 80011b2:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 800132c <main+0x370>
 80011b6:	f00b fdc4 	bl	800cd42 <Move_TO_cujiagongqu>
					put_wuliao_to_circular_second();
 80011ba:	f00a fd45 	bl	800bc48 <put_wuliao_to_circular_second>
					flag = 6;
 80011be:	4b50      	ldr	r3, [pc, #320]	@ (8001300 <main+0x344>)
 80011c0:	2206      	movs	r2, #6
 80011c2:	801a      	strh	r2, [r3, #0]
					break;
 80011c4:	e07f      	b.n	80012c6 <main+0x30a>
				case 6:
					Move_TO_jianzhi3(9000, 4335);
 80011c6:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8001314 <main+0x358>
 80011ca:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 8001320 <main+0x364>
 80011ce:	f00b fdce 	bl	800cd6e <Move_TO_jianzhi3>
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 80011d2:	eddf 0a54 	vldr	s1, [pc, #336]	@ 8001324 <main+0x368>
 80011d6:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8001330 <main+0x374>
 80011da:	f00b fe05 	bl	800cde8 <Move_Action_Nopid_Left_Ctrl>
					Drop_Location_jiang(50, 50, 11000);
 80011de:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80011e2:	2132      	movs	r1, #50	@ 0x32
 80011e4:	2032      	movs	r0, #50	@ 0x32
 80011e6:	f00b fc9f 	bl	800cb28 <Drop_Location_jiang>
					flag = 7;
 80011ea:	4b45      	ldr	r3, [pc, #276]	@ (8001300 <main+0x344>)
 80011ec:	2207      	movs	r2, #7
 80011ee:	801a      	strh	r2, [r3, #0]
					break;
 80011f0:	e069      	b.n	80012c6 <main+0x30a>
				case 7:      //原料�??
					Move_TO_fanyuanliaoqu(4000);
 80011f2:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 8001334 <main+0x378>
 80011f6:	f00b fddf 	bl	800cdb8 <Move_TO_fanyuanliaoqu>
					Move_Action_Nopid_Left_Ctrl(160, 1400);      //ACTION调整
 80011fa:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 8001338 <main+0x37c>
 80011fe:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 800133c <main+0x380>
 8001202:	f00b fdf1 	bl	800cde8 <Move_Action_Nopid_Left_Ctrl>
					Second_Run_Frist_Grab_Wuliao();
 8001206:	f00a fdab 	bl	800bd60 <Second_Run_Frist_Grab_Wuliao>
					flag = 8;
 800120a:	4b3d      	ldr	r3, [pc, #244]	@ (8001300 <main+0x344>)
 800120c:	2208      	movs	r2, #8
 800120e:	801a      	strh	r2, [r3, #0]
					break;
 8001210:	e059      	b.n	80012c6 <main+0x30a>
				case 8:
					Move_TO_jianzhi1(4500, 4335);
 8001212:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8001314 <main+0x358>
 8001216:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8001318 <main+0x35c>
 800121a:	f00b fd23 	bl	800cc64 <Move_TO_jianzhi1>
					Drop_Location_jiang(50, 50, 11000);
 800121e:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8001222:	2132      	movs	r1, #50	@ 0x32
 8001224:	2032      	movs	r0, #50	@ 0x32
 8001226:	f00b fc7f 	bl	800cb28 <Drop_Location_jiang>
					Move_Action_Nopid_Forward_Ctrl(160, 1070);
 800122a:	eddf 0a45 	vldr	s1, [pc, #276]	@ 8001340 <main+0x384>
 800122e:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 800133c <main+0x380>
 8001232:	f00b ff39 	bl	800d0a8 <Move_Action_Nopid_Forward_Ctrl>
					flag = 9;
 8001236:	4b32      	ldr	r3, [pc, #200]	@ (8001300 <main+0x344>)
 8001238:	2209      	movs	r2, #9
 800123a:	801a      	strh	r2, [r3, #0]
					break;
 800123c:	e043      	b.n	80012c6 <main+0x30a>
				case 9:    //暂存�??
					Move_TO_zancunqu(22000, 4335);
 800123e:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8001314 <main+0x358>
 8001242:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 800131c <main+0x360>
 8001246:	f00b fd32 	bl	800ccae <Move_TO_zancunqu>
					Second_Run_put_wuliao_to_circular_frist();
 800124a:	f00a fe6d 	bl	800bf28 <Second_Run_put_wuliao_to_circular_frist>

					Second_Run_put_wuliao_to_Car_frist();
 800124e:	f00a fde7 	bl	800be20 <Second_Run_put_wuliao_to_Car_frist>
					HAL_Delay(yanshi);
 8001252:	2032      	movs	r0, #50	@ 0x32
 8001254:	f001 fd82 	bl	8002d5c <HAL_Delay>
					flag = 10;
 8001258:	4b29      	ldr	r3, [pc, #164]	@ (8001300 <main+0x344>)
 800125a:	220a      	movs	r2, #10
 800125c:	801a      	strh	r2, [r3, #0]
					break;
 800125e:	e032      	b.n	80012c6 <main+0x30a>
				case 10:
					Move_TO_jianzhi2(9000, 4335);     //ACTION调整
 8001260:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8001314 <main+0x358>
 8001264:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8001320 <main+0x364>
 8001268:	f00b fd46 	bl	800ccf8 <Move_TO_jianzhi2>
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 800126c:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8001324 <main+0x368>
 8001270:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8001328 <main+0x36c>
 8001274:	f00b ff18 	bl	800d0a8 <Move_Action_Nopid_Forward_Ctrl>
					flag = 11;
 8001278:	4b21      	ldr	r3, [pc, #132]	@ (8001300 <main+0x344>)
 800127a:	220b      	movs	r2, #11
 800127c:	801a      	strh	r2, [r3, #0]
					break;
 800127e:	e022      	b.n	80012c6 <main+0x30a>
				case 11:       //粗加工区
					Move_TO_cujiagongqu(10000);
 8001280:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 800132c <main+0x370>
 8001284:	f00b fd5d 	bl	800cd42 <Move_TO_cujiagongqu>

					flag = 12;
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <main+0x344>)
 800128a:	220c      	movs	r2, #12
 800128c:	801a      	strh	r2, [r3, #0]
					break;
 800128e:	e01a      	b.n	80012c6 <main+0x30a>
				case 12:
					Move_TO_jianzhi3(9000, 4335);
 8001290:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8001314 <main+0x358>
 8001294:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001320 <main+0x364>
 8001298:	f00b fd69 	bl	800cd6e <Move_TO_jianzhi3>
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 800129c:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8001324 <main+0x368>
 80012a0:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8001330 <main+0x374>
 80012a4:	f00b fda0 	bl	800cde8 <Move_Action_Nopid_Left_Ctrl>
					flag = 13;
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <main+0x344>)
 80012aa:	220d      	movs	r2, #13
 80012ac:	801a      	strh	r2, [r3, #0]
					break;
 80012ae:	e00a      	b.n	80012c6 <main+0x30a>
				case 13:      //原料�??
					Move_TO_fanyuanliaoqu(22000);
 80012b0:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 800131c <main+0x360>
 80012b4:	f00b fd80 	bl	800cdb8 <Move_TO_fanyuanliaoqu>
					flag = 14;
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <main+0x344>)
 80012ba:	220e      	movs	r2, #14
 80012bc:	801a      	strh	r2, [r3, #0]
					break;
 80012be:	e002      	b.n	80012c6 <main+0x30a>
				default:
					Move_Stop();
 80012c0:	f00b fcba 	bl	800cc38 <Move_Stop>
					break;
 80012c4:	bf00      	nop
				switch (flag)
 80012c6:	e6db      	b.n	8001080 <main+0xc4>
 80012c8:	24000490 	.word	0x24000490
 80012cc:	24000528 	.word	0x24000528
 80012d0:	240004dc 	.word	0x240004dc
 80012d4:	2400034c 	.word	0x2400034c
 80012d8:	240005c0 	.word	0x240005c0
 80012dc:	2400034d 	.word	0x2400034d
 80012e0:	240008a4 	.word	0x240008a4
 80012e4:	2400034e 	.word	0x2400034e
 80012e8:	24000a60 	.word	0x24000a60
 80012ec:	2400034b 	.word	0x2400034b
 80012f0:	24000810 	.word	0x24000810
 80012f4:	24000d27 	.word	0x24000d27
 80012f8:	24000d26 	.word	0x24000d26
 80012fc:	080131b8 	.word	0x080131b8
 8001300:	24000478 	.word	0x24000478
 8001304:	24000c2c 	.word	0x24000c2c
 8001308:	44b5e000 	.word	0x44b5e000
 800130c:	43160000 	.word	0x43160000
 8001310:	2400045c 	.word	0x2400045c
 8001314:	45877800 	.word	0x45877800
 8001318:	458ca000 	.word	0x458ca000
 800131c:	46abe000 	.word	0x46abe000
 8001320:	460ca000 	.word	0x460ca000
 8001324:	44e88000 	.word	0x44e88000
 8001328:	44e9c000 	.word	0x44e9c000
 800132c:	461c4000 	.word	0x461c4000
 8001330:	432a0000 	.word	0x432a0000
 8001334:	457a0000 	.word	0x457a0000
 8001338:	44af0000 	.word	0x44af0000
 800133c:	43200000 	.word	0x43200000
 8001340:	4485c000 	.word	0x4485c000

08001344 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b09c      	sub	sp, #112	@ 0x70
 8001348:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800134a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134e:	224c      	movs	r2, #76	@ 0x4c
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f00e fe6d 	bl	8010032 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2220      	movs	r2, #32
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f00e fe67 	bl	8010032 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001364:	2002      	movs	r0, #2
 8001366:	f003 ff9b 	bl	80052a0 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <SystemClock_Config+0xd8>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a2a      	ldr	r2, [pc, #168]	@ (800141c <SystemClock_Config+0xd8>)
 8001374:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b28      	ldr	r3, [pc, #160]	@ (800141c <SystemClock_Config+0xd8>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8001386:	bf00      	nop
 8001388:	4b24      	ldr	r3, [pc, #144]	@ (800141c <SystemClock_Config+0xd8>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001394:	d1f8      	bne.n	8001388 <SystemClock_Config+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001396:	2301      	movs	r3, #1
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800139a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a0:	2302      	movs	r3, #2
 80013a2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a4:	2302      	movs	r3, #2
 80013a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 44;
 80013ac:	232c      	movs	r3, #44	@ 0x2c
 80013ae:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013bc:	230c      	movs	r3, #12
 80013be:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 ffa1 	bl	8005314 <HAL_RCC_OscConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x98>
	{
		Error_Handler();
 80013d8:	f000 f9bc 	bl	8001754 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013dc:	233f      	movs	r3, #63	@ 0x3f
 80013de:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e0:	2303      	movs	r3, #3
 80013e2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013e8:	2308      	movs	r3, #8
 80013ea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013ec:	2340      	movs	r3, #64	@ 0x40
 80013ee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013f0:	2340      	movs	r3, #64	@ 0x40
 80013f2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013f8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013fa:	2340      	movs	r3, #64	@ 0x40
 80013fc:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2103      	movs	r1, #3
 8001402:	4618      	mov	r0, r3
 8001404:	f004 fb60 	bl	8005ac8 <HAL_RCC_ClockConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0xce>
	{
		Error_Handler();
 800140e:	f000 f9a1 	bl	8001754 <Error_Handler>
	}
}
 8001412:	bf00      	nop
 8001414:	3770      	adds	r7, #112	@ 0x70
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	58024800 	.word	0x58024800

08001420 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*) &ch, 1, 0xFFFF);
 8001428:	1d39      	adds	r1, r7, #4
 800142a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800142e:	2201      	movs	r2, #1
 8001430:	4803      	ldr	r0, [pc, #12]	@ (8001440 <__io_putchar+0x20>)
 8001432:	f007 fa25 	bl	8008880 <HAL_UART_Transmit>
	return ch;
 8001436:	687b      	ldr	r3, [r7, #4]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	240005c0 	.word	0x240005c0

08001444 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af04      	add	r7, sp, #16
 800144a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART9)                          // 判断中断�?
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a50      	ldr	r2, [pc, #320]	@ (8001594 <HAL_UART_RxCpltCallback+0x150>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d10a      	bne.n	800146c <HAL_UART_RxCpltCallback+0x28>
	{
		Data_Analyse(data);                                // 处理Action数据
 8001456:	4b50      	ldr	r3, [pc, #320]	@ (8001598 <HAL_UART_RxCpltCallback+0x154>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f009 ffba 	bl	800b3d4 <Data_Analyse>
		HAL_UART_Receive_IT(&huart9, &data, 1);            // 继续中断回调
 8001460:	2201      	movs	r2, #1
 8001462:	494d      	ldr	r1, [pc, #308]	@ (8001598 <HAL_UART_RxCpltCallback+0x154>)
 8001464:	484d      	ldr	r0, [pc, #308]	@ (800159c <HAL_UART_RxCpltCallback+0x158>)
 8001466:	f007 fb61 	bl	8008b2c <HAL_UART_Receive_IT>
 800146a:	e090      	b.n	800158e <HAL_UART_RxCpltCallback+0x14a>

	}
	else if (huart->Instance == UART4)                   // 判断中断�?
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a4b      	ldr	r2, [pc, #300]	@ (80015a0 <HAL_UART_RxCpltCallback+0x15c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d10a      	bne.n	800148c <HAL_UART_RxCpltCallback+0x48>
	{
		Check_Flag(Screen_data);                       	   // 处理串口屏数�?
 8001476:	4b4b      	ldr	r3, [pc, #300]	@ (80015a4 <HAL_UART_RxCpltCallback+0x160>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f00c fdce 	bl	800e01c <Check_Flag>
		HAL_UART_Receive_IT(&huart4, &Screen_data, 1);     // 继续中断回调
 8001480:	2201      	movs	r2, #1
 8001482:	4948      	ldr	r1, [pc, #288]	@ (80015a4 <HAL_UART_RxCpltCallback+0x160>)
 8001484:	4848      	ldr	r0, [pc, #288]	@ (80015a8 <HAL_UART_RxCpltCallback+0x164>)
 8001486:	f007 fb51 	bl	8008b2c <HAL_UART_Receive_IT>
 800148a:	e080      	b.n	800158e <HAL_UART_RxCpltCallback+0x14a>
	}

	else if (huart->Instance == USART10)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a46      	ldr	r2, [pc, #280]	@ (80015ac <HAL_UART_RxCpltCallback+0x168>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d17b      	bne.n	800158e <HAL_UART_RxCpltCallback+0x14a>
	{
		//static uint8_t RxState = 0;

		RxBuffer[Uart10_Rx_Cnt++] = aRxBuffer;
 8001496:	4b46      	ldr	r3, [pc, #280]	@ (80015b0 <HAL_UART_RxCpltCallback+0x16c>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	b2d1      	uxtb	r1, r2
 800149e:	4a44      	ldr	r2, [pc, #272]	@ (80015b0 <HAL_UART_RxCpltCallback+0x16c>)
 80014a0:	7011      	strb	r1, [r2, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b43      	ldr	r3, [pc, #268]	@ (80015b4 <HAL_UART_RxCpltCallback+0x170>)
 80014a6:	7819      	ldrb	r1, [r3, #0]
 80014a8:	4b43      	ldr	r3, [pc, #268]	@ (80015b8 <HAL_UART_RxCpltCallback+0x174>)
 80014aa:	5499      	strb	r1, [r3, r2]
			memset(RxBuffer, 0, sizeof(RxBuffer));
			Uart10_Rx_Cnt = 0;
			return;
		}

		if (aRxBuffer == 'd')
 80014ac:	4b41      	ldr	r3, [pc, #260]	@ (80015b4 <HAL_UART_RxCpltCallback+0x170>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b64      	cmp	r3, #100	@ 0x64
 80014b2:	d12e      	bne.n	8001512 <HAL_UART_RxCpltCallback+0xce>
		{ // 如果包尾�?'d'，说明是物料和圆环点位数�?
			char *start = strchr(RxBuffer, 'a');
 80014b4:	2161      	movs	r1, #97	@ 0x61
 80014b6:	4840      	ldr	r0, [pc, #256]	@ (80015b8 <HAL_UART_RxCpltCallback+0x174>)
 80014b8:	f00e fdc3 	bl	8010042 <strchr>
 80014bc:	6178      	str	r0, [r7, #20]
			char *end = strchr(RxBuffer, 'd');
 80014be:	2164      	movs	r1, #100	@ 0x64
 80014c0:	483d      	ldr	r0, [pc, #244]	@ (80015b8 <HAL_UART_RxCpltCallback+0x174>)
 80014c2:	f00e fdbe 	bl	8010042 <strchr>
 80014c6:	6138      	str	r0, [r7, #16]

			if (start != NULL && end != NULL && end > start)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d021      	beq.n	8001512 <HAL_UART_RxCpltCallback+0xce>
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d01e      	beq.n	8001512 <HAL_UART_RxCpltCallback+0xce>
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d91a      	bls.n	8001512 <HAL_UART_RxCpltCallback+0xce>
			{
				*end = '\0';
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
				if (sscanf(start + 1, "%f,%f,%d", &x, &y, &colour) == 3)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	1c58      	adds	r0, r3, #1
 80014e6:	4b35      	ldr	r3, [pc, #212]	@ (80015bc <HAL_UART_RxCpltCallback+0x178>)
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4b35      	ldr	r3, [pc, #212]	@ (80015c0 <HAL_UART_RxCpltCallback+0x17c>)
 80014ec:	4a35      	ldr	r2, [pc, #212]	@ (80015c4 <HAL_UART_RxCpltCallback+0x180>)
 80014ee:	4936      	ldr	r1, [pc, #216]	@ (80015c8 <HAL_UART_RxCpltCallback+0x184>)
 80014f0:	f00e fd30 	bl	800ff54 <siscanf>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d102      	bne.n	8001500 <HAL_UART_RxCpltCallback+0xbc>
				{
					// 数据解析成功
					Point_Flag = 1;
 80014fa:	4b34      	ldr	r3, [pc, #208]	@ (80015cc <HAL_UART_RxCpltCallback+0x188>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]
				}

				// 清空缓冲�?
				memset(RxBuffer, 0, sizeof(RxBuffer));
 8001500:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001504:	2100      	movs	r1, #0
 8001506:	482c      	ldr	r0, [pc, #176]	@ (80015b8 <HAL_UART_RxCpltCallback+0x174>)
 8001508:	f00e fd93 	bl	8010032 <memset>
				Uart10_Rx_Cnt = 0;
 800150c:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <HAL_UART_RxCpltCallback+0x16c>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
			}
		}

		if (aRxBuffer == 'b')
 8001512:	4b28      	ldr	r3, [pc, #160]	@ (80015b4 <HAL_UART_RxCpltCallback+0x170>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b62      	cmp	r3, #98	@ 0x62
 8001518:	d134      	bne.n	8001584 <HAL_UART_RxCpltCallback+0x140>
		{ // 如果包尾�?'b'，说明是二维码数�?
			char *start = strchr(RxBuffer, 'c');
 800151a:	2163      	movs	r1, #99	@ 0x63
 800151c:	4826      	ldr	r0, [pc, #152]	@ (80015b8 <HAL_UART_RxCpltCallback+0x174>)
 800151e:	f00e fd90 	bl	8010042 <strchr>
 8001522:	60f8      	str	r0, [r7, #12]
			char *end = strchr(RxBuffer, 'b');
 8001524:	2162      	movs	r1, #98	@ 0x62
 8001526:	4824      	ldr	r0, [pc, #144]	@ (80015b8 <HAL_UART_RxCpltCallback+0x174>)
 8001528:	f00e fd8b 	bl	8010042 <strchr>
 800152c:	60b8      	str	r0, [r7, #8]

			if (start != NULL && end != NULL && end > start)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d027      	beq.n	8001584 <HAL_UART_RxCpltCallback+0x140>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d024      	beq.n	8001584 <HAL_UART_RxCpltCallback+0x140>
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	429a      	cmp	r2, r3
 8001540:	d920      	bls.n	8001584 <HAL_UART_RxCpltCallback+0x140>
			{
				*end = '\0';
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
//				for (int i = 0; i < 6; i++) {
//					if (sscanf(start +1+ i, "%d", &QR_data[i])) {
				if (sscanf(start + 1, "%d,%d,%d,%d,%d,%d", &QR_data[0],
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1c58      	adds	r0, r3, #1
 800154c:	4b20      	ldr	r3, [pc, #128]	@ (80015d0 <HAL_UART_RxCpltCallback+0x18c>)
 800154e:	9303      	str	r3, [sp, #12]
 8001550:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <HAL_UART_RxCpltCallback+0x190>)
 8001552:	9302      	str	r3, [sp, #8]
 8001554:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <HAL_UART_RxCpltCallback+0x194>)
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <HAL_UART_RxCpltCallback+0x198>)
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <HAL_UART_RxCpltCallback+0x19c>)
 800155e:	4a21      	ldr	r2, [pc, #132]	@ (80015e4 <HAL_UART_RxCpltCallback+0x1a0>)
 8001560:	4921      	ldr	r1, [pc, #132]	@ (80015e8 <HAL_UART_RxCpltCallback+0x1a4>)
 8001562:	f00e fcf7 	bl	800ff54 <siscanf>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <HAL_UART_RxCpltCallback+0x12e>
						&QR_data[1], &QR_data[2], &QR_data[3], &QR_data[4],
						&QR_data[5]))
				{
					// 数据解析成功
//						if(i==5) QR_Flag =  1;
					QR_Flag = 1;
 800156c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <HAL_UART_RxCpltCallback+0x1a8>)
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]
				}
//				}
				// 清空缓冲�?
				memset(RxBuffer, 0, sizeof(RxBuffer));
 8001572:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001576:	2100      	movs	r1, #0
 8001578:	480f      	ldr	r0, [pc, #60]	@ (80015b8 <HAL_UART_RxCpltCallback+0x174>)
 800157a:	f00e fd5a 	bl	8010032 <memset>
				Uart10_Rx_Cnt = 0;
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <HAL_UART_RxCpltCallback+0x16c>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
			}
		}
		// 重新启动接收
		HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 8001584:	2201      	movs	r2, #1
 8001586:	490b      	ldr	r1, [pc, #44]	@ (80015b4 <HAL_UART_RxCpltCallback+0x170>)
 8001588:	4819      	ldr	r0, [pc, #100]	@ (80015f0 <HAL_UART_RxCpltCallback+0x1ac>)
 800158a:	f007 facf 	bl	8008b2c <HAL_UART_Receive_IT>
//	else if (huart->Instance == USART10)                            // 判断中断
//	{
//		Recive_Joydata(Joy_data);                             	// 处理Joy_data数据
//		HAL_UART_Receive_IT(&huart10, &Joy_data, 1);       // 继续中断回调
//	}
}
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40011800 	.word	0x40011800
 8001598:	2400034b 	.word	0x2400034b
 800159c:	24000810 	.word	0x24000810
 80015a0:	40004c00 	.word	0x40004c00
 80015a4:	2400034c 	.word	0x2400034c
 80015a8:	240005c0 	.word	0x240005c0
 80015ac:	40011c00 	.word	0x40011c00
 80015b0:	24000450 	.word	0x24000450
 80015b4:	2400034e 	.word	0x2400034e
 80015b8:	24000350 	.word	0x24000350
 80015bc:	2400047c 	.word	0x2400047c
 80015c0:	24000458 	.word	0x24000458
 80015c4:	24000454 	.word	0x24000454
 80015c8:	080131bc 	.word	0x080131bc
 80015cc:	2400045c 	.word	0x2400045c
 80015d0:	24000474 	.word	0x24000474
 80015d4:	24000470 	.word	0x24000470
 80015d8:	2400046c 	.word	0x2400046c
 80015dc:	24000468 	.word	0x24000468
 80015e0:	24000464 	.word	0x24000464
 80015e4:	24000460 	.word	0x24000460
 80015e8:	080131c8 	.word	0x080131c8
 80015ec:	24000484 	.word	0x24000484
 80015f0:	24000a60 	.word	0x24000a60

080015f4 <HAL_TIM_PeriodElapsedCallback>:
extern uint16_t time_tx;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a30      	ldr	r2, [pc, #192]	@ (80016c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d106      	bne.n	8001612 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{

//		X_out = X_Ctrl(&XPID, x_goal);
//		Y_out = Y_Ctrl(&YPID, y_goal);
//		A_out = A_Ctrl(&APID, a_goal);
		Action_Show();
 8001604:	f00c fbc2 	bl	800dd8c <Action_Show>
		QR_Show();
 8001608:	f00c fc3c 	bl	800de84 <QR_Show>
		Point_Show();
 800160c:	f00c fc76 	bl	800defc <Point_Show>
 8001610:	e052      	b.n	80016b8 <HAL_TIM_PeriodElapsedCallback+0xc4>

	}
	else if (htim == &htim3)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a2b      	ldr	r2, [pc, #172]	@ (80016c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d126      	bne.n	8001668 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		TX_X_out = Tx_X_Ctrl(&TXPID, tx_target);
 800161a:	4b2b      	ldr	r3, [pc, #172]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	eeb0 0a67 	vmov.f32	s0, s15
 8001624:	4829      	ldr	r0, [pc, #164]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001626:	f00a feb3 	bl	800c390 <Tx_X_Ctrl>
 800162a:	4603      	mov	r3, r0
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001634:	4b26      	ldr	r3, [pc, #152]	@ (80016d0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001636:	edc3 7a00 	vstr	s15, [r3]
		TX_Y_out = Tx_Y_Ctrl(&TYPID, ty_target);
 800163a:	4b26      	ldr	r3, [pc, #152]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	4824      	ldr	r0, [pc, #144]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001646:	f00a ff49 	bl	800c4dc <Tx_Y_Ctrl>
 800164a:	4603      	mov	r3, r0
 800164c:	ee07 3a90 	vmov	s15, r3
 8001650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001654:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001656:	edc3 7a00 	vstr	s15, [r3]
		time_tx++;
 800165a:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001664:	801a      	strh	r2, [r3, #0]
 8001666:	e027      	b.n	80016b8 <HAL_TIM_PeriodElapsedCallback+0xc4>
	}
	else if (htim == &htim5)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a1e      	ldr	r2, [pc, #120]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d109      	bne.n	8001684 <HAL_TIM_PeriodElapsedCallback+0x90>
	{

		if (time5_jiancha != 0)
 8001670:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01f      	beq.n	80016b8 <HAL_TIM_PeriodElapsedCallback+0xc4>
			time5_jiancha--;
 8001678:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3b01      	subs	r3, #1
 800167e:	4a1a      	ldr	r2, [pc, #104]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e019      	b.n	80016b8 <HAL_TIM_PeriodElapsedCallback+0xc4>
	}
//	步进电机阻塞操作回调
	else if (htim == &htim12)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a19      	ldr	r2, [pc, #100]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d115      	bne.n	80016b8 <HAL_TIM_PeriodElapsedCallback+0xc4>
	{
		if(Apply_Chock == true)
 800168c:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d011      	beq.n	80016b8 <HAL_TIM_PeriodElapsedCallback+0xc4>
		{
			if(Base_Data == true)
 8001694:	4b17      	ldr	r3, [pc, #92]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00c      	beq.n	80016b6 <HAL_TIM_PeriodElapsedCallback+0xc2>
			{
				Choke_Flag = false;
 800169c:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
				Apply_Chock = false;
 80016a2:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim12);
 80016a8:	4810      	ldr	r0, [pc, #64]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80016aa:	f006 fc39 	bl	8007f20 <HAL_TIM_Base_Stop_IT>
				Base_Data = false;
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	e000      	b.n	80016b8 <HAL_TIM_PeriodElapsedCallback+0xc4>
			}
			else
			{
				return ;
 80016b6:	bf00      	nop
			}
		}
//		根据查询情况来确定是否要继续阻塞 Choke_Flag
	}
}
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	24000490 	.word	0x24000490
 80016c4:	240004dc 	.word	0x240004dc
 80016c8:	24000000 	.word	0x24000000
 80016cc:	24000bcc 	.word	0x24000bcc
 80016d0:	24000c24 	.word	0x24000c24
 80016d4:	24000004 	.word	0x24000004
 80016d8:	24000bf8 	.word	0x24000bf8
 80016dc:	24000c28 	.word	0x24000c28
 80016e0:	24000c34 	.word	0x24000c34
 80016e4:	24000528 	.word	0x24000528
 80016e8:	24000c30 	.word	0x24000c30
 80016ec:	24000574 	.word	0x24000574
 80016f0:	24000c2d 	.word	0x24000c2d
 80016f4:	24000349 	.word	0x24000349
 80016f8:	24000c2c 	.word	0x24000c2c

080016fc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct =
 8001702:	463b      	mov	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
	{ 0 };

	/* Disables the MPU */
	HAL_MPU_Disable();
 800170e:	f001 fc59 	bl	8002fc4 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001712:	2301      	movs	r3, #1
 8001714:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001716:	2300      	movs	r3, #0
 8001718:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800171e:	231f      	movs	r3, #31
 8001720:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8001722:	2387      	movs	r3, #135	@ 0x87
 8001724:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001726:	2300      	movs	r3, #0
 8001728:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800172a:	2300      	movs	r3, #0
 800172c:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800172e:	2301      	movs	r3, #1
 8001730:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001732:	2301      	movs	r3, #1
 8001734:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800173e:	463b      	mov	r3, r7
 8001740:	4618      	mov	r0, r3
 8001742:	f001 fc77 	bl	8003034 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001746:	2004      	movs	r0, #4
 8001748:	f001 fc54 	bl	8002ff4 <HAL_MPU_Enable>

}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <Error_Handler+0x8>

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <HAL_MspInit+0x30>)
 8001768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800176c:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <HAL_MspInit+0x30>)
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_MspInit+0x30>)
 8001778:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	58024400 	.word	0x58024400

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ea:	f001 fa97 	bl	8002d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <FDCAN1_IT0_IRQHandler+0x10>)
 80017fa:	f002 fead 	bl	8004558 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	240002a0 	.word	0x240002a0

08001808 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <TIM2_IRQHandler+0x10>)
 800180e:	f006 fbb6 	bl	8007f7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	24000490 	.word	0x24000490

0800181c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <TIM3_IRQHandler+0x10>)
 8001822:	f006 fbac 	bl	8007f7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	240004dc 	.word	0x240004dc

08001830 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <USART2_IRQHandler+0x10>)
 8001836:	f007 f9c5 	bl	8008bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	240008a4 	.word	0x240008a4

08001844 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <USART3_IRQHandler+0x10>)
 800184a:	f007 f9bb 	bl	8008bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	24000938 	.word	0x24000938

08001858 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 800185c:	4802      	ldr	r0, [pc, #8]	@ (8001868 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800185e:	f006 fb8e 	bl	8007f7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	24000574 	.word	0x24000574

0800186c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001870:	4802      	ldr	r0, [pc, #8]	@ (800187c <TIM5_IRQHandler+0x10>)
 8001872:	f006 fb84 	bl	8007f7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	24000528 	.word	0x24000528

08001880 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001884:	4802      	ldr	r0, [pc, #8]	@ (8001890 <UART4_IRQHandler+0x10>)
 8001886:	f007 f99d 	bl	8008bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	240005c0 	.word	0x240005c0

08001894 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <UART7_IRQHandler+0x10>)
 800189a:	f007 f993 	bl	8008bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	240006e8 	.word	0x240006e8

080018a8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <UART8_IRQHandler+0x10>)
 80018ae:	f007 f989 	bl	8008bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2400077c 	.word	0x2400077c

080018bc <UART9_IRQHandler>:

/**
  * @brief This function handles UART9 global interrupt.
  */
void UART9_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART9_IRQn 0 */

  /* USER CODE END UART9_IRQn 0 */
  HAL_UART_IRQHandler(&huart9);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <UART9_IRQHandler+0x10>)
 80018c2:	f007 f97f 	bl	8008bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART9_IRQn 1 */

  /* USER CODE END UART9_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	24000810 	.word	0x24000810

080018d0 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <USART10_IRQHandler+0x10>)
 80018d6:	f007 f975 	bl	8008bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	24000a60 	.word	0x24000a60

080018e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
	return 1;
 80018e8:	2301      	movs	r3, #1
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_kill>:

int _kill(int pid, int sig)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80018fe:	f00e fc19 	bl	8010134 <__errno>
 8001902:	4603      	mov	r3, r0
 8001904:	2216      	movs	r2, #22
 8001906:	601a      	str	r2, [r3, #0]
	return -1;
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_exit>:

void _exit(int status)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800191c:	f04f 31ff 	mov.w	r1, #4294967295
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ffe7 	bl	80018f4 <_kill>
	while (1)
 8001926:	bf00      	nop
 8001928:	e7fd      	b.n	8001926 <_exit+0x12>

0800192a <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e00a      	b.n	8001952 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800193c:	f3af 8000 	nop.w
 8001940:	4601      	mov	r1, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	60ba      	str	r2, [r7, #8]
 8001948:	b2ca      	uxtb	r2, r1
 800194a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3301      	adds	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	429a      	cmp	r2, r3
 8001958:	dbf0      	blt.n	800193c <_read+0x12>
	}

	return len;
 800195a:	687b      	ldr	r3, [r7, #4]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	e009      	b.n	800198a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	60ba      	str	r2, [r7, #8]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fd4e 	bl	8001420 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3301      	adds	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	429a      	cmp	r2, r3
 8001990:	dbf1      	blt.n	8001976 <_write+0x12>
	}
	return len;
 8001992:	687b      	ldr	r3, [r7, #4]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <_close>:

int _close(int file)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_fstat>:

int _fstat(int file, struct stat *st)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019c4:	605a      	str	r2, [r3, #4]
	return 0;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <_isatty>:

int _isatty(int file)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80019dc:	2301      	movs	r3, #1
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b085      	sub	sp, #20
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001a0c:	4a14      	ldr	r2, [pc, #80]	@ (8001a60 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001a18:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001a20:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <_sbrk+0x64>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	@ (8001a6c <_sbrk+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d207      	bcs.n	8001a44 <_sbrk+0x40>
		errno = ENOMEM;
 8001a34:	f00e fb7e 	bl	8010134 <__errno>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	e009      	b.n	8001a58 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001a44:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <_sbrk+0x64>)
 8001a54:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	24050000 	.word	0x24050000
 8001a64:	00000400 	.word	0x00000400
 8001a68:	2400048c 	.word	0x2400048c
 8001a6c:	24000ed0 	.word	0x24000ed0

08001a70 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001a74:	4b32      	ldr	r3, [pc, #200]	@ (8001b40 <SystemInit+0xd0>)
 8001a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a7a:	4a31      	ldr	r2, [pc, #196]	@ (8001b40 <SystemInit+0xd0>)
 8001a7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a84:	4b2f      	ldr	r3, [pc, #188]	@ (8001b44 <SystemInit+0xd4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	2b06      	cmp	r3, #6
 8001a8e:	d807      	bhi.n	8001aa0 <SystemInit+0x30>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001a90:	4b2c      	ldr	r3, [pc, #176]	@ (8001b44 <SystemInit+0xd4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 030f 	bic.w	r3, r3, #15
 8001a98:	4a2a      	ldr	r2, [pc, #168]	@ (8001b44 <SystemInit+0xd4>)
 8001a9a:	f043 0307 	orr.w	r3, r3, #7
 8001a9e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001aa0:	4b29      	ldr	r3, [pc, #164]	@ (8001b48 <SystemInit+0xd8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a28      	ldr	r2, [pc, #160]	@ (8001b48 <SystemInit+0xd8>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001aac:	4b26      	ldr	r3, [pc, #152]	@ (8001b48 <SystemInit+0xd8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001ab2:	4b25      	ldr	r3, [pc, #148]	@ (8001b48 <SystemInit+0xd8>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4924      	ldr	r1, [pc, #144]	@ (8001b48 <SystemInit+0xd8>)
 8001ab8:	4b24      	ldr	r3, [pc, #144]	@ (8001b4c <SystemInit+0xdc>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001abe:	4b21      	ldr	r3, [pc, #132]	@ (8001b44 <SystemInit+0xd4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <SystemInit+0x6a>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001aca:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <SystemInit+0xd4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 030f 	bic.w	r3, r3, #15
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b44 <SystemInit+0xd4>)
 8001ad4:	f043 0307 	orr.w	r3, r3, #7
 8001ad8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001ada:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <SystemInit+0xd8>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <SystemInit+0xd8>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <SystemInit+0xd8>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001aec:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <SystemInit+0xd8>)
 8001aee:	4a18      	ldr	r2, [pc, #96]	@ (8001b50 <SystemInit+0xe0>)
 8001af0:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <SystemInit+0xd8>)
 8001af4:	4a17      	ldr	r2, [pc, #92]	@ (8001b54 <SystemInit+0xe4>)
 8001af6:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001af8:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <SystemInit+0xd8>)
 8001afa:	4a17      	ldr	r2, [pc, #92]	@ (8001b58 <SystemInit+0xe8>)
 8001afc:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8001afe:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <SystemInit+0xd8>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001b04:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <SystemInit+0xd8>)
 8001b06:	4a14      	ldr	r2, [pc, #80]	@ (8001b58 <SystemInit+0xe8>)
 8001b08:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <SystemInit+0xd8>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8001b10:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <SystemInit+0xd8>)
 8001b12:	4a11      	ldr	r2, [pc, #68]	@ (8001b58 <SystemInit+0xe8>)
 8001b14:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001b16:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <SystemInit+0xd8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <SystemInit+0xd8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a09      	ldr	r2, [pc, #36]	@ (8001b48 <SystemInit+0xd8>)
 8001b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b26:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001b28:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <SystemInit+0xd8>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	661a      	str	r2, [r3, #96]	@ 0x60
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <SystemInit+0xec>)
 8001b30:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001b34:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00
 8001b44:	52002000 	.word	0x52002000
 8001b48:	58024400 	.word	0x58024400
 8001b4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b50:	02020200 	.word	0x02020200
 8001b54:	01ff0000 	.word	0x01ff0000
 8001b58:	01010280 	.word	0x01010280
 8001b5c:	52004000 	.word	0x52004000

08001b60 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf8 <MX_TIM2_Init+0x98>)
 8001b80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 550-1;
 8001b86:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <MX_TIM2_Init+0x98>)
 8001b88:	f240 2225 	movw	r2, #549	@ 0x225
 8001b8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <MX_TIM2_Init+0x98>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001b94:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <MX_TIM2_Init+0x98>)
 8001b96:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001b9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	@ (8001bf8 <MX_TIM2_Init+0x98>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <MX_TIM2_Init+0x98>)
 8001ba4:	2280      	movs	r2, #128	@ 0x80
 8001ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ba8:	4813      	ldr	r0, [pc, #76]	@ (8001bf8 <MX_TIM2_Init+0x98>)
 8001baa:	f006 f8db 	bl	8007d64 <HAL_TIM_Base_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001bb4:	f7ff fdce 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bbe:	f107 0310 	add.w	r3, r7, #16
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480c      	ldr	r0, [pc, #48]	@ (8001bf8 <MX_TIM2_Init+0x98>)
 8001bc6:	f006 fae1 	bl	800818c <HAL_TIM_ConfigClockSource>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001bd0:	f7ff fdc0 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <MX_TIM2_Init+0x98>)
 8001be2:	f006 fd43 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001bec:	f7ff fdb2 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	24000490 	.word	0x24000490

08001bfc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c02:	f107 0310 	add.w	r3, r7, #16
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <MX_TIM3_Init+0x98>)
 8001c1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001c98 <MX_TIM3_Init+0x9c>)
 8001c1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 550-1;
 8001c20:	4b1c      	ldr	r3, [pc, #112]	@ (8001c94 <MX_TIM3_Init+0x98>)
 8001c22:	f240 2225 	movw	r2, #549	@ 0x225
 8001c26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <MX_TIM3_Init+0x98>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	@ (8001c94 <MX_TIM3_Init+0x98>)
 8001c30:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001c34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c36:	4b17      	ldr	r3, [pc, #92]	@ (8001c94 <MX_TIM3_Init+0x98>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <MX_TIM3_Init+0x98>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c42:	4814      	ldr	r0, [pc, #80]	@ (8001c94 <MX_TIM3_Init+0x98>)
 8001c44:	f006 f88e 	bl	8007d64 <HAL_TIM_Base_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001c4e:	f7ff fd81 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480d      	ldr	r0, [pc, #52]	@ (8001c94 <MX_TIM3_Init+0x98>)
 8001c60:	f006 fa94 	bl	800818c <HAL_TIM_ConfigClockSource>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001c6a:	f7ff fd73 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	@ (8001c94 <MX_TIM3_Init+0x98>)
 8001c7c:	f006 fcf6 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001c86:	f7ff fd65 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	240004dc 	.word	0x240004dc
 8001c98:	40000400 	.word	0x40000400

08001c9c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001cba:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <MX_TIM5_Init+0x98>)
 8001cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8001d38 <MX_TIM5_Init+0x9c>)
 8001cbe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 550-1;
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <MX_TIM5_Init+0x98>)
 8001cc2:	f240 2225 	movw	r2, #549	@ 0x225
 8001cc6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <MX_TIM5_Init+0x98>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8001cce:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <MX_TIM5_Init+0x98>)
 8001cd0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001cd4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd6:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <MX_TIM5_Init+0x98>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <MX_TIM5_Init+0x98>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ce2:	4814      	ldr	r0, [pc, #80]	@ (8001d34 <MX_TIM5_Init+0x98>)
 8001ce4:	f006 f83e 	bl	8007d64 <HAL_TIM_Base_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001cee:	f7ff fd31 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480d      	ldr	r0, [pc, #52]	@ (8001d34 <MX_TIM5_Init+0x98>)
 8001d00:	f006 fa44 	bl	800818c <HAL_TIM_ConfigClockSource>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001d0a:	f7ff fd23 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4806      	ldr	r0, [pc, #24]	@ (8001d34 <MX_TIM5_Init+0x98>)
 8001d1c:	f006 fca6 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001d26:	f7ff fd15 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	3720      	adds	r7, #32
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	24000528 	.word	0x24000528
 8001d38:	40000c00 	.word	0x40000c00

08001d3c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <MX_TIM12_Init+0x94>)
 8001d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd4 <MX_TIM12_Init+0x98>)
 8001d5e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 65535;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd0 <MX_TIM12_Init+0x94>)
 8001d62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d66:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <MX_TIM12_Init+0x94>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19;
 8001d6e:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <MX_TIM12_Init+0x94>)
 8001d70:	2213      	movs	r2, #19
 8001d72:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d74:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <MX_TIM12_Init+0x94>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <MX_TIM12_Init+0x94>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001d80:	4813      	ldr	r0, [pc, #76]	@ (8001dd0 <MX_TIM12_Init+0x94>)
 8001d82:	f005 ffef 	bl	8007d64 <HAL_TIM_Base_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM12_Init+0x54>
  {
    Error_Handler();
 8001d8c:	f7ff fce2 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <MX_TIM12_Init+0x94>)
 8001d9e:	f006 f9f5 	bl	800818c <HAL_TIM_ConfigClockSource>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM12_Init+0x70>
  {
    Error_Handler();
 8001da8:	f7ff fcd4 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <MX_TIM12_Init+0x94>)
 8001dba:	f006 fc57 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8001dc4:	f7ff fcc6 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	24000574 	.word	0x24000574
 8001dd4:	40001800 	.word	0x40001800

08001dd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de8:	d117      	bne.n	8001e1a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dea:	4b39      	ldr	r3, [pc, #228]	@ (8001ed0 <HAL_TIM_Base_MspInit+0xf8>)
 8001dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001df0:	4a37      	ldr	r2, [pc, #220]	@ (8001ed0 <HAL_TIM_Base_MspInit+0xf8>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dfa:	4b35      	ldr	r3, [pc, #212]	@ (8001ed0 <HAL_TIM_Base_MspInit+0xf8>)
 8001dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 11, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	210b      	movs	r1, #11
 8001e0c:	201c      	movs	r0, #28
 8001e0e:	f001 f8a4 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e12:	201c      	movs	r0, #28
 8001e14:	f001 f8bb 	bl	8002f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001e18:	e055      	b.n	8001ec6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ed4 <HAL_TIM_Base_MspInit+0xfc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d117      	bne.n	8001e54 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e24:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e2a:	4a29      	ldr	r2, [pc, #164]	@ (8001ed0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e34:	4b26      	ldr	r3, [pc, #152]	@ (8001ed0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2102      	movs	r1, #2
 8001e46:	201d      	movs	r0, #29
 8001e48:	f001 f887 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e4c:	201d      	movs	r0, #29
 8001e4e:	f001 f89e 	bl	8002f8e <HAL_NVIC_EnableIRQ>
}
 8001e52:	e038      	b.n	8001ec6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM5)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x100>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d117      	bne.n	8001e8e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e64:	4a1a      	ldr	r2, [pc, #104]	@ (8001ed0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e66:	f043 0308 	orr.w	r3, r3, #8
 8001e6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 13, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	210d      	movs	r1, #13
 8001e80:	2032      	movs	r0, #50	@ 0x32
 8001e82:	f001 f86a 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e86:	2032      	movs	r0, #50	@ 0x32
 8001e88:	f001 f881 	bl	8002f8e <HAL_NVIC_EnableIRQ>
}
 8001e8c:	e01b      	b.n	8001ec6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM12)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a12      	ldr	r2, [pc, #72]	@ (8001edc <HAL_TIM_Base_MspInit+0x104>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d116      	bne.n	8001ec6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001e98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed0 <HAL_TIM_Base_MspInit+0xf8>)
 8001ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ea4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ea8:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <HAL_TIM_Base_MspInit+0xf8>)
 8001eaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 12, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	210c      	movs	r1, #12
 8001eba:	202b      	movs	r0, #43	@ 0x2b
 8001ebc:	f001 f84d 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001ec0:	202b      	movs	r0, #43	@ 0x2b
 8001ec2:	f001 f864 	bl	8002f8e <HAL_NVIC_EnableIRQ>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	58024400 	.word	0x58024400
 8001ed4:	40000400 	.word	0x40000400
 8001ed8:	40000c00 	.word	0x40000c00
 8001edc:	40001800 	.word	0x40001800

08001ee0 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
UART_HandleTypeDef huart10;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ee4:	4b22      	ldr	r3, [pc, #136]	@ (8001f70 <MX_UART4_Init+0x90>)
 8001ee6:	4a23      	ldr	r2, [pc, #140]	@ (8001f74 <MX_UART4_Init+0x94>)
 8001ee8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001eea:	4b21      	ldr	r3, [pc, #132]	@ (8001f70 <MX_UART4_Init+0x90>)
 8001eec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ef0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f70 <MX_UART4_Init+0x90>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <MX_UART4_Init+0x90>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001efe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <MX_UART4_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f04:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <MX_UART4_Init+0x90>)
 8001f06:	220c      	movs	r2, #12
 8001f08:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0a:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <MX_UART4_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f10:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <MX_UART4_Init+0x90>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f16:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <MX_UART4_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f1c:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <MX_UART4_Init+0x90>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f22:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <MX_UART4_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f28:	4811      	ldr	r0, [pc, #68]	@ (8001f70 <MX_UART4_Init+0x90>)
 8001f2a:	f006 fc59 	bl	80087e0 <HAL_UART_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001f34:	f7ff fc0e 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f38:	2100      	movs	r1, #0
 8001f3a:	480d      	ldr	r0, [pc, #52]	@ (8001f70 <MX_UART4_Init+0x90>)
 8001f3c:	f009 f97f 	bl	800b23e <HAL_UARTEx_SetTxFifoThreshold>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001f46:	f7ff fc05 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4808      	ldr	r0, [pc, #32]	@ (8001f70 <MX_UART4_Init+0x90>)
 8001f4e:	f009 f9b4 	bl	800b2ba <HAL_UARTEx_SetRxFifoThreshold>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001f58:	f7ff fbfc 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001f5c:	4804      	ldr	r0, [pc, #16]	@ (8001f70 <MX_UART4_Init+0x90>)
 8001f5e:	f009 f935 	bl	800b1cc <HAL_UARTEx_DisableFifoMode>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001f68:	f7ff fbf4 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	240005c0 	.word	0x240005c0
 8001f74:	40004c00 	.word	0x40004c00

08001f78 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f7c:	4b22      	ldr	r3, [pc, #136]	@ (8002008 <MX_UART5_Init+0x90>)
 8001f7e:	4a23      	ldr	r2, [pc, #140]	@ (800200c <MX_UART5_Init+0x94>)
 8001f80:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001f82:	4b21      	ldr	r3, [pc, #132]	@ (8002008 <MX_UART5_Init+0x90>)
 8001f84:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f88:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8002008 <MX_UART5_Init+0x90>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f90:	4b1d      	ldr	r3, [pc, #116]	@ (8002008 <MX_UART5_Init+0x90>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f96:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <MX_UART5_Init+0x90>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <MX_UART5_Init+0x90>)
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <MX_UART5_Init+0x90>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	@ (8002008 <MX_UART5_Init+0x90>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fae:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <MX_UART5_Init+0x90>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <MX_UART5_Init+0x90>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fba:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <MX_UART5_Init+0x90>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001fc0:	4811      	ldr	r0, [pc, #68]	@ (8002008 <MX_UART5_Init+0x90>)
 8001fc2:	f006 fc0d 	bl	80087e0 <HAL_UART_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001fcc:	f7ff fbc2 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	480d      	ldr	r0, [pc, #52]	@ (8002008 <MX_UART5_Init+0x90>)
 8001fd4:	f009 f933 	bl	800b23e <HAL_UARTEx_SetTxFifoThreshold>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001fde:	f7ff fbb9 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4808      	ldr	r0, [pc, #32]	@ (8002008 <MX_UART5_Init+0x90>)
 8001fe6:	f009 f968 	bl	800b2ba <HAL_UARTEx_SetRxFifoThreshold>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001ff0:	f7ff fbb0 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001ff4:	4804      	ldr	r0, [pc, #16]	@ (8002008 <MX_UART5_Init+0x90>)
 8001ff6:	f009 f8e9 	bl	800b1cc <HAL_UARTEx_DisableFifoMode>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002000:	f7ff fba8 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	24000654 	.word	0x24000654
 800200c:	40005000 	.word	0x40005000

08002010 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002014:	4b22      	ldr	r3, [pc, #136]	@ (80020a0 <MX_UART7_Init+0x90>)
 8002016:	4a23      	ldr	r2, [pc, #140]	@ (80020a4 <MX_UART7_Init+0x94>)
 8002018:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800201a:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <MX_UART7_Init+0x90>)
 800201c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002020:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002022:	4b1f      	ldr	r3, [pc, #124]	@ (80020a0 <MX_UART7_Init+0x90>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002028:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <MX_UART7_Init+0x90>)
 800202a:	2200      	movs	r2, #0
 800202c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800202e:	4b1c      	ldr	r3, [pc, #112]	@ (80020a0 <MX_UART7_Init+0x90>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002034:	4b1a      	ldr	r3, [pc, #104]	@ (80020a0 <MX_UART7_Init+0x90>)
 8002036:	220c      	movs	r2, #12
 8002038:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800203a:	4b19      	ldr	r3, [pc, #100]	@ (80020a0 <MX_UART7_Init+0x90>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002040:	4b17      	ldr	r3, [pc, #92]	@ (80020a0 <MX_UART7_Init+0x90>)
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002046:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <MX_UART7_Init+0x90>)
 8002048:	2200      	movs	r2, #0
 800204a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800204c:	4b14      	ldr	r3, [pc, #80]	@ (80020a0 <MX_UART7_Init+0x90>)
 800204e:	2200      	movs	r2, #0
 8002050:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002052:	4b13      	ldr	r3, [pc, #76]	@ (80020a0 <MX_UART7_Init+0x90>)
 8002054:	2200      	movs	r2, #0
 8002056:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002058:	4811      	ldr	r0, [pc, #68]	@ (80020a0 <MX_UART7_Init+0x90>)
 800205a:	f006 fbc1 	bl	80087e0 <HAL_UART_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8002064:	f7ff fb76 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002068:	2100      	movs	r1, #0
 800206a:	480d      	ldr	r0, [pc, #52]	@ (80020a0 <MX_UART7_Init+0x90>)
 800206c:	f009 f8e7 	bl	800b23e <HAL_UARTEx_SetTxFifoThreshold>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8002076:	f7ff fb6d 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800207a:	2100      	movs	r1, #0
 800207c:	4808      	ldr	r0, [pc, #32]	@ (80020a0 <MX_UART7_Init+0x90>)
 800207e:	f009 f91c 	bl	800b2ba <HAL_UARTEx_SetRxFifoThreshold>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8002088:	f7ff fb64 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800208c:	4804      	ldr	r0, [pc, #16]	@ (80020a0 <MX_UART7_Init+0x90>)
 800208e:	f009 f89d 	bl	800b1cc <HAL_UARTEx_DisableFifoMode>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8002098:	f7ff fb5c 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	240006e8 	.word	0x240006e8
 80020a4:	40007800 	.word	0x40007800

080020a8 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80020ac:	4b22      	ldr	r3, [pc, #136]	@ (8002138 <MX_UART8_Init+0x90>)
 80020ae:	4a23      	ldr	r2, [pc, #140]	@ (800213c <MX_UART8_Init+0x94>)
 80020b0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80020b2:	4b21      	ldr	r3, [pc, #132]	@ (8002138 <MX_UART8_Init+0x90>)
 80020b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020b8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80020ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002138 <MX_UART8_Init+0x90>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80020c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <MX_UART8_Init+0x90>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80020c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002138 <MX_UART8_Init+0x90>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80020cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <MX_UART8_Init+0x90>)
 80020ce:	220c      	movs	r2, #12
 80020d0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d2:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <MX_UART8_Init+0x90>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d8:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <MX_UART8_Init+0x90>)
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020de:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <MX_UART8_Init+0x90>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020e4:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <MX_UART8_Init+0x90>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ea:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <MX_UART8_Init+0x90>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80020f0:	4811      	ldr	r0, [pc, #68]	@ (8002138 <MX_UART8_Init+0x90>)
 80020f2:	f006 fb75 	bl	80087e0 <HAL_UART_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80020fc:	f7ff fb2a 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002100:	2100      	movs	r1, #0
 8002102:	480d      	ldr	r0, [pc, #52]	@ (8002138 <MX_UART8_Init+0x90>)
 8002104:	f009 f89b 	bl	800b23e <HAL_UARTEx_SetTxFifoThreshold>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800210e:	f7ff fb21 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002112:	2100      	movs	r1, #0
 8002114:	4808      	ldr	r0, [pc, #32]	@ (8002138 <MX_UART8_Init+0x90>)
 8002116:	f009 f8d0 	bl	800b2ba <HAL_UARTEx_SetRxFifoThreshold>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002120:	f7ff fb18 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002124:	4804      	ldr	r0, [pc, #16]	@ (8002138 <MX_UART8_Init+0x90>)
 8002126:	f009 f851 	bl	800b1cc <HAL_UARTEx_DisableFifoMode>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002130:	f7ff fb10 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	2400077c 	.word	0x2400077c
 800213c:	40007c00 	.word	0x40007c00

08002140 <MX_UART9_Init>:
/* UART9 init function */
void MX_UART9_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 8002144:	4b22      	ldr	r3, [pc, #136]	@ (80021d0 <MX_UART9_Init+0x90>)
 8002146:	4a23      	ldr	r2, [pc, #140]	@ (80021d4 <MX_UART9_Init+0x94>)
 8002148:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 115200;
 800214a:	4b21      	ldr	r3, [pc, #132]	@ (80021d0 <MX_UART9_Init+0x90>)
 800214c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002150:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 8002152:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <MX_UART9_Init+0x90>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 8002158:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <MX_UART9_Init+0x90>)
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 800215e:	4b1c      	ldr	r3, [pc, #112]	@ (80021d0 <MX_UART9_Init+0x90>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 8002164:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <MX_UART9_Init+0x90>)
 8002166:	220c      	movs	r2, #12
 8002168:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216a:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <MX_UART9_Init+0x90>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 8002170:	4b17      	ldr	r3, [pc, #92]	@ (80021d0 <MX_UART9_Init+0x90>)
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
  huart9.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002176:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <MX_UART9_Init+0x90>)
 8002178:	2200      	movs	r2, #0
 800217a:	621a      	str	r2, [r3, #32]
  huart9.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800217c:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <MX_UART9_Init+0x90>)
 800217e:	2200      	movs	r2, #0
 8002180:	625a      	str	r2, [r3, #36]	@ 0x24
  huart9.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002182:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <MX_UART9_Init+0x90>)
 8002184:	2200      	movs	r2, #0
 8002186:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart9) != HAL_OK)
 8002188:	4811      	ldr	r0, [pc, #68]	@ (80021d0 <MX_UART9_Init+0x90>)
 800218a:	f006 fb29 	bl	80087e0 <HAL_UART_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_UART9_Init+0x58>
  {
    Error_Handler();
 8002194:	f7ff fade 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart9, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002198:	2100      	movs	r1, #0
 800219a:	480d      	ldr	r0, [pc, #52]	@ (80021d0 <MX_UART9_Init+0x90>)
 800219c:	f009 f84f 	bl	800b23e <HAL_UARTEx_SetTxFifoThreshold>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_UART9_Init+0x6a>
  {
    Error_Handler();
 80021a6:	f7ff fad5 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart9, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021aa:	2100      	movs	r1, #0
 80021ac:	4808      	ldr	r0, [pc, #32]	@ (80021d0 <MX_UART9_Init+0x90>)
 80021ae:	f009 f884 	bl	800b2ba <HAL_UARTEx_SetRxFifoThreshold>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_UART9_Init+0x7c>
  {
    Error_Handler();
 80021b8:	f7ff facc 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart9) != HAL_OK)
 80021bc:	4804      	ldr	r0, [pc, #16]	@ (80021d0 <MX_UART9_Init+0x90>)
 80021be:	f009 f805 	bl	800b1cc <HAL_UARTEx_DisableFifoMode>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_UART9_Init+0x8c>
  {
    Error_Handler();
 80021c8:	f7ff fac4 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	24000810 	.word	0x24000810
 80021d4:	40011800 	.word	0x40011800

080021d8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021dc:	4b39      	ldr	r3, [pc, #228]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 80021de:	4a3a      	ldr	r2, [pc, #232]	@ (80022c8 <MX_USART2_UART_Init+0xf0>)
 80021e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021e2:	4b38      	ldr	r3, [pc, #224]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 80021e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ea:	4b36      	ldr	r3, [pc, #216]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021f0:	4b34      	ldr	r3, [pc, #208]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021f6:	4b33      	ldr	r3, [pc, #204]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021fc:	4b31      	ldr	r3, [pc, #196]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 80021fe:	220c      	movs	r2, #12
 8002200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002202:	4b30      	ldr	r3, [pc, #192]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002208:	4b2e      	ldr	r3, [pc, #184]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800220e:	4b2d      	ldr	r3, [pc, #180]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 8002210:	2200      	movs	r2, #0
 8002212:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002214:	4b2b      	ldr	r3, [pc, #172]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 8002216:	2200      	movs	r2, #0
 8002218:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800221a:	4b2a      	ldr	r3, [pc, #168]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 800221c:	2200      	movs	r2, #0
 800221e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002220:	4828      	ldr	r0, [pc, #160]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 8002222:	f006 fadd 	bl	80087e0 <HAL_UART_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800222c:	f7ff fa92 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002230:	2100      	movs	r1, #0
 8002232:	4824      	ldr	r0, [pc, #144]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 8002234:	f009 f803 	bl	800b23e <HAL_UARTEx_SetTxFifoThreshold>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800223e:	f7ff fa89 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002242:	2100      	movs	r1, #0
 8002244:	481f      	ldr	r0, [pc, #124]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 8002246:	f009 f838 	bl	800b2ba <HAL_UARTEx_SetRxFifoThreshold>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002250:	f7ff fa80 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002254:	481b      	ldr	r0, [pc, #108]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 8002256:	f008 ffb9 	bl	800b1cc <HAL_UARTEx_DisableFifoMode>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002260:	f7ff fa78 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  HAL_UART_Transmit(&huart2,unlock_register, sizeof(unlock_register),1000);
 8002264:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002268:	2205      	movs	r2, #5
 800226a:	4918      	ldr	r1, [pc, #96]	@ (80022cc <MX_USART2_UART_Init+0xf4>)
 800226c:	4815      	ldr	r0, [pc, #84]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 800226e:	f006 fb07 	bl	8008880 <HAL_UART_Transmit>
  HAL_Delay(5);
 8002272:	2005      	movs	r0, #5
 8002274:	f000 fd72 	bl	8002d5c <HAL_Delay>
  HAL_UART_Transmit(&huart2,reset_z_axis, sizeof(reset_z_axis),1000);
 8002278:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800227c:	2205      	movs	r2, #5
 800227e:	4914      	ldr	r1, [pc, #80]	@ (80022d0 <MX_USART2_UART_Init+0xf8>)
 8002280:	4810      	ldr	r0, [pc, #64]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 8002282:	f006 fafd 	bl	8008880 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_output_200Hz, sizeof(set_output_200Hz),1000);
 8002286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800228a:	2205      	movs	r2, #5
 800228c:	4911      	ldr	r1, [pc, #68]	@ (80022d4 <MX_USART2_UART_Init+0xfc>)
 800228e:	480d      	ldr	r0, [pc, #52]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 8002290:	f006 faf6 	bl	8008880 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_baudrate_115200, sizeof(set_baudrate_115200),1000);
 8002294:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002298:	2205      	movs	r2, #5
 800229a:	490f      	ldr	r1, [pc, #60]	@ (80022d8 <MX_USART2_UART_Init+0x100>)
 800229c:	4809      	ldr	r0, [pc, #36]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 800229e:	f006 faef 	bl	8008880 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,save_settings, sizeof(save_settings),1000);
 80022a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022a6:	2205      	movs	r2, #5
 80022a8:	490c      	ldr	r1, [pc, #48]	@ (80022dc <MX_USART2_UART_Init+0x104>)
 80022aa:	4806      	ldr	r0, [pc, #24]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 80022ac:	f006 fae8 	bl	8008880 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,restart_device, sizeof(restart_device),1000);
 80022b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022b4:	2205      	movs	r2, #5
 80022b6:	490a      	ldr	r1, [pc, #40]	@ (80022e0 <MX_USART2_UART_Init+0x108>)
 80022b8:	4802      	ldr	r0, [pc, #8]	@ (80022c4 <MX_USART2_UART_Init+0xec>)
 80022ba:	f006 fae1 	bl	8008880 <HAL_UART_Transmit>


  /* USER CODE END USART2_Init 2 */

}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	240008a4 	.word	0x240008a4
 80022c8:	40004400 	.word	0x40004400
 80022cc:	24000010 	.word	0x24000010
 80022d0:	24000018 	.word	0x24000018
 80022d4:	24000020 	.word	0x24000020
 80022d8:	24000028 	.word	0x24000028
 80022dc:	24000030 	.word	0x24000030
 80022e0:	24000038 	.word	0x24000038

080022e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022e8:	4b22      	ldr	r3, [pc, #136]	@ (8002374 <MX_USART3_UART_Init+0x90>)
 80022ea:	4a23      	ldr	r2, [pc, #140]	@ (8002378 <MX_USART3_UART_Init+0x94>)
 80022ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022ee:	4b21      	ldr	r3, [pc, #132]	@ (8002374 <MX_USART3_UART_Init+0x90>)
 80022f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002374 <MX_USART3_UART_Init+0x90>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002374 <MX_USART3_UART_Init+0x90>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002302:	4b1c      	ldr	r3, [pc, #112]	@ (8002374 <MX_USART3_UART_Init+0x90>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002308:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <MX_USART3_UART_Init+0x90>)
 800230a:	220c      	movs	r2, #12
 800230c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230e:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <MX_USART3_UART_Init+0x90>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002314:	4b17      	ldr	r3, [pc, #92]	@ (8002374 <MX_USART3_UART_Init+0x90>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800231a:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <MX_USART3_UART_Init+0x90>)
 800231c:	2200      	movs	r2, #0
 800231e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002320:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <MX_USART3_UART_Init+0x90>)
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002326:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <MX_USART3_UART_Init+0x90>)
 8002328:	2200      	movs	r2, #0
 800232a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800232c:	4811      	ldr	r0, [pc, #68]	@ (8002374 <MX_USART3_UART_Init+0x90>)
 800232e:	f006 fa57 	bl	80087e0 <HAL_UART_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002338:	f7ff fa0c 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800233c:	2100      	movs	r1, #0
 800233e:	480d      	ldr	r0, [pc, #52]	@ (8002374 <MX_USART3_UART_Init+0x90>)
 8002340:	f008 ff7d 	bl	800b23e <HAL_UARTEx_SetTxFifoThreshold>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800234a:	f7ff fa03 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800234e:	2100      	movs	r1, #0
 8002350:	4808      	ldr	r0, [pc, #32]	@ (8002374 <MX_USART3_UART_Init+0x90>)
 8002352:	f008 ffb2 	bl	800b2ba <HAL_UARTEx_SetRxFifoThreshold>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800235c:	f7ff f9fa 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002360:	4804      	ldr	r0, [pc, #16]	@ (8002374 <MX_USART3_UART_Init+0x90>)
 8002362:	f008 ff33 	bl	800b1cc <HAL_UARTEx_DisableFifoMode>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800236c:	f7ff f9f2 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	24000938 	.word	0x24000938
 8002378:	40004800 	.word	0x40004800

0800237c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002380:	4b22      	ldr	r3, [pc, #136]	@ (800240c <MX_USART6_UART_Init+0x90>)
 8002382:	4a23      	ldr	r2, [pc, #140]	@ (8002410 <MX_USART6_UART_Init+0x94>)
 8002384:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002386:	4b21      	ldr	r3, [pc, #132]	@ (800240c <MX_USART6_UART_Init+0x90>)
 8002388:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800238c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800238e:	4b1f      	ldr	r3, [pc, #124]	@ (800240c <MX_USART6_UART_Init+0x90>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002394:	4b1d      	ldr	r3, [pc, #116]	@ (800240c <MX_USART6_UART_Init+0x90>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800239a:	4b1c      	ldr	r3, [pc, #112]	@ (800240c <MX_USART6_UART_Init+0x90>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	@ (800240c <MX_USART6_UART_Init+0x90>)
 80023a2:	220c      	movs	r2, #12
 80023a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a6:	4b19      	ldr	r3, [pc, #100]	@ (800240c <MX_USART6_UART_Init+0x90>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ac:	4b17      	ldr	r3, [pc, #92]	@ (800240c <MX_USART6_UART_Init+0x90>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023b2:	4b16      	ldr	r3, [pc, #88]	@ (800240c <MX_USART6_UART_Init+0x90>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023b8:	4b14      	ldr	r3, [pc, #80]	@ (800240c <MX_USART6_UART_Init+0x90>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023be:	4b13      	ldr	r3, [pc, #76]	@ (800240c <MX_USART6_UART_Init+0x90>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023c4:	4811      	ldr	r0, [pc, #68]	@ (800240c <MX_USART6_UART_Init+0x90>)
 80023c6:	f006 fa0b 	bl	80087e0 <HAL_UART_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80023d0:	f7ff f9c0 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023d4:	2100      	movs	r1, #0
 80023d6:	480d      	ldr	r0, [pc, #52]	@ (800240c <MX_USART6_UART_Init+0x90>)
 80023d8:	f008 ff31 	bl	800b23e <HAL_UARTEx_SetTxFifoThreshold>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80023e2:	f7ff f9b7 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023e6:	2100      	movs	r1, #0
 80023e8:	4808      	ldr	r0, [pc, #32]	@ (800240c <MX_USART6_UART_Init+0x90>)
 80023ea:	f008 ff66 	bl	800b2ba <HAL_UARTEx_SetRxFifoThreshold>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80023f4:	f7ff f9ae 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80023f8:	4804      	ldr	r0, [pc, #16]	@ (800240c <MX_USART6_UART_Init+0x90>)
 80023fa:	f008 fee7 	bl	800b1cc <HAL_UARTEx_DisableFifoMode>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002404:	f7ff f9a6 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	240009cc 	.word	0x240009cc
 8002410:	40011400 	.word	0x40011400

08002414 <MX_USART10_UART_Init>:
/* USART10 init function */

void MX_USART10_UART_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8002418:	4b22      	ldr	r3, [pc, #136]	@ (80024a4 <MX_USART10_UART_Init+0x90>)
 800241a:	4a23      	ldr	r2, [pc, #140]	@ (80024a8 <MX_USART10_UART_Init+0x94>)
 800241c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800241e:	4b21      	ldr	r3, [pc, #132]	@ (80024a4 <MX_USART10_UART_Init+0x90>)
 8002420:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002424:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8002426:	4b1f      	ldr	r3, [pc, #124]	@ (80024a4 <MX_USART10_UART_Init+0x90>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 800242c:	4b1d      	ldr	r3, [pc, #116]	@ (80024a4 <MX_USART10_UART_Init+0x90>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8002432:	4b1c      	ldr	r3, [pc, #112]	@ (80024a4 <MX_USART10_UART_Init+0x90>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8002438:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <MX_USART10_UART_Init+0x90>)
 800243a:	220c      	movs	r2, #12
 800243c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243e:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <MX_USART10_UART_Init+0x90>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8002444:	4b17      	ldr	r3, [pc, #92]	@ (80024a4 <MX_USART10_UART_Init+0x90>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800244a:	4b16      	ldr	r3, [pc, #88]	@ (80024a4 <MX_USART10_UART_Init+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002450:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <MX_USART10_UART_Init+0x90>)
 8002452:	2200      	movs	r2, #0
 8002454:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002456:	4b13      	ldr	r3, [pc, #76]	@ (80024a4 <MX_USART10_UART_Init+0x90>)
 8002458:	2200      	movs	r2, #0
 800245a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 800245c:	4811      	ldr	r0, [pc, #68]	@ (80024a4 <MX_USART10_UART_Init+0x90>)
 800245e:	f006 f9bf 	bl	80087e0 <HAL_UART_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8002468:	f7ff f974 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800246c:	2100      	movs	r1, #0
 800246e:	480d      	ldr	r0, [pc, #52]	@ (80024a4 <MX_USART10_UART_Init+0x90>)
 8002470:	f008 fee5 	bl	800b23e <HAL_UARTEx_SetTxFifoThreshold>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 800247a:	f7ff f96b 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800247e:	2100      	movs	r1, #0
 8002480:	4808      	ldr	r0, [pc, #32]	@ (80024a4 <MX_USART10_UART_Init+0x90>)
 8002482:	f008 ff1a 	bl	800b2ba <HAL_UARTEx_SetRxFifoThreshold>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 800248c:	f7ff f962 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8002490:	4804      	ldr	r0, [pc, #16]	@ (80024a4 <MX_USART10_UART_Init+0x90>)
 8002492:	f008 fe9b 	bl	800b1cc <HAL_UARTEx_DisableFifoMode>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 800249c:	f7ff f95a 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	24000a60 	.word	0x24000a60
 80024a8:	40011c00 	.word	0x40011c00

080024ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b0c8      	sub	sp, #288	@ 0x120
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80024ba:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024cc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80024d0:	22b8      	movs	r2, #184	@ 0xb8
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f00d fdac 	bl	8010032 <memset>
  if(uartHandle->Instance==UART4)
 80024da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4aaa      	ldr	r2, [pc, #680]	@ (8002790 <HAL_UART_MspInit+0x2e4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d14e      	bne.n	800258a <HAL_UART_MspInit+0xde>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80024ec:	f04f 0202 	mov.w	r2, #2
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002502:	4618      	mov	r0, r3
 8002504:	f003 fe6c 	bl	80061e0 <HAL_RCCEx_PeriphCLKConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 800250e:	f7ff f921 	bl	8001754 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002512:	4ba0      	ldr	r3, [pc, #640]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 8002514:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002518:	4a9e      	ldr	r2, [pc, #632]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 800251a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800251e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002522:	4b9c      	ldr	r3, [pc, #624]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 8002524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002528:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800252c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800252e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002530:	4b98      	ldr	r3, [pc, #608]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 8002532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002536:	4a97      	ldr	r2, [pc, #604]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002540:	4b94      	ldr	r3, [pc, #592]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 8002542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800254c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800254e:	2303      	movs	r3, #3
 8002550:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002566:	2308      	movs	r3, #8
 8002568:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002570:	4619      	mov	r1, r3
 8002572:	4889      	ldr	r0, [pc, #548]	@ (8002798 <HAL_UART_MspInit+0x2ec>)
 8002574:	f002 fcec 	bl	8004f50 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	2108      	movs	r1, #8
 800257c:	2034      	movs	r0, #52	@ 0x34
 800257e:	f000 fcec 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002582:	2034      	movs	r0, #52	@ 0x34
 8002584:	f000 fd03 	bl	8002f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }
}
 8002588:	e320      	b.n	8002bcc <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART5)
 800258a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800258e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a81      	ldr	r2, [pc, #516]	@ (800279c <HAL_UART_MspInit+0x2f0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d147      	bne.n	800262c <HAL_UART_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800259c:	f04f 0202 	mov.w	r2, #2
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ae:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80025b2:	4618      	mov	r0, r3
 80025b4:	f003 fe14 	bl	80061e0 <HAL_RCCEx_PeriphCLKConfig>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_UART_MspInit+0x116>
      Error_Handler();
 80025be:	f7ff f8c9 	bl	8001754 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80025c2:	4b74      	ldr	r3, [pc, #464]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 80025c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025c8:	4a72      	ldr	r2, [pc, #456]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 80025ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025d2:	4b70      	ldr	r3, [pc, #448]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 80025d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80025de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 80025e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025e6:	4a6b      	ldr	r2, [pc, #428]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025f0:	4b68      	ldr	r3, [pc, #416]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 80025f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80025fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 80025fe:	f242 0320 	movw	r3, #8224	@ 0x2020
 8002602:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002618:	230e      	movs	r3, #14
 800261a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002622:	4619      	mov	r1, r3
 8002624:	485e      	ldr	r0, [pc, #376]	@ (80027a0 <HAL_UART_MspInit+0x2f4>)
 8002626:	f002 fc93 	bl	8004f50 <HAL_GPIO_Init>
}
 800262a:	e2cf      	b.n	8002bcc <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART7)
 800262c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002630:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a5a      	ldr	r2, [pc, #360]	@ (80027a4 <HAL_UART_MspInit+0x2f8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d14f      	bne.n	80026de <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800263e:	f04f 0202 	mov.w	r2, #2
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800264a:	2300      	movs	r3, #0
 800264c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002650:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002654:	4618      	mov	r0, r3
 8002656:	f003 fdc3 	bl	80061e0 <HAL_RCCEx_PeriphCLKConfig>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8002660:	f7ff f878 	bl	8001754 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002664:	4b4b      	ldr	r3, [pc, #300]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 8002666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800266a:	4a4a      	ldr	r2, [pc, #296]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 800266c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002670:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002674:	4b47      	ldr	r3, [pc, #284]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 8002676:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800267a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800267e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002682:	4b44      	ldr	r3, [pc, #272]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 8002684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002688:	4a42      	ldr	r2, [pc, #264]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 800268a:	f043 0310 	orr.w	r3, r3, #16
 800268e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002692:	4b40      	ldr	r3, [pc, #256]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 8002694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800269e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80026a0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80026a4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80026ba:	2307      	movs	r3, #7
 80026bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026c0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80026c4:	4619      	mov	r1, r3
 80026c6:	4838      	ldr	r0, [pc, #224]	@ (80027a8 <HAL_UART_MspInit+0x2fc>)
 80026c8:	f002 fc42 	bl	8004f50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 6, 0);
 80026cc:	2200      	movs	r2, #0
 80026ce:	2106      	movs	r1, #6
 80026d0:	2052      	movs	r0, #82	@ 0x52
 80026d2:	f000 fc42 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80026d6:	2052      	movs	r0, #82	@ 0x52
 80026d8:	f000 fc59 	bl	8002f8e <HAL_NVIC_EnableIRQ>
}
 80026dc:	e276      	b.n	8002bcc <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART8)
 80026de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a30      	ldr	r2, [pc, #192]	@ (80027ac <HAL_UART_MspInit+0x300>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d15f      	bne.n	80027b0 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80026f0:	f04f 0202 	mov.w	r2, #2
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002702:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002706:	4618      	mov	r0, r3
 8002708:	f003 fd6a 	bl	80061e0 <HAL_RCCEx_PeriphCLKConfig>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 8002712:	f7ff f81f 	bl	8001754 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002716:	4b1f      	ldr	r3, [pc, #124]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 8002718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800271c:	4a1d      	ldr	r2, [pc, #116]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 800271e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002722:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002726:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 8002728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800272c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002730:	637b      	str	r3, [r7, #52]	@ 0x34
 8002732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002734:	4b17      	ldr	r3, [pc, #92]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 8002736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800273a:	4a16      	ldr	r2, [pc, #88]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 800273c:	f043 0310 	orr.w	r3, r3, #16
 8002740:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <HAL_UART_MspInit+0x2e8>)
 8002746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002752:	2303      	movs	r3, #3
 8002754:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800276a:	2308      	movs	r3, #8
 800276c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002770:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002774:	4619      	mov	r1, r3
 8002776:	480c      	ldr	r0, [pc, #48]	@ (80027a8 <HAL_UART_MspInit+0x2fc>)
 8002778:	f002 fbea 	bl	8004f50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 15, 0);
 800277c:	2200      	movs	r2, #0
 800277e:	210f      	movs	r1, #15
 8002780:	2053      	movs	r0, #83	@ 0x53
 8002782:	f000 fbea 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002786:	2053      	movs	r0, #83	@ 0x53
 8002788:	f000 fc01 	bl	8002f8e <HAL_NVIC_EnableIRQ>
}
 800278c:	e21e      	b.n	8002bcc <HAL_UART_MspInit+0x720>
 800278e:	bf00      	nop
 8002790:	40004c00 	.word	0x40004c00
 8002794:	58024400 	.word	0x58024400
 8002798:	58020000 	.word	0x58020000
 800279c:	40005000 	.word	0x40005000
 80027a0:	58020400 	.word	0x58020400
 80027a4:	40007800 	.word	0x40007800
 80027a8:	58021000 	.word	0x58021000
 80027ac:	40007c00 	.word	0x40007c00
  else if(uartHandle->Instance==UART9)
 80027b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027b4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4abd      	ldr	r2, [pc, #756]	@ (8002ab4 <HAL_UART_MspInit+0x608>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d14f      	bne.n	8002862 <HAL_UART_MspInit+0x3b6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART9;
 80027c2:	f04f 0201 	mov.w	r2, #1
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80027d8:	4618      	mov	r0, r3
 80027da:	f003 fd01 	bl	80061e0 <HAL_RCCEx_PeriphCLKConfig>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 80027e4:	f7fe ffb6 	bl	8001754 <Error_Handler>
    __HAL_RCC_UART9_CLK_ENABLE();
 80027e8:	4bb3      	ldr	r3, [pc, #716]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 80027ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027ee:	4ab2      	ldr	r2, [pc, #712]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 80027f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027f8:	4baf      	ldr	r3, [pc, #700]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 80027fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002806:	4bac      	ldr	r3, [pc, #688]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 8002808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800280c:	4aaa      	ldr	r2, [pc, #680]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 800280e:	f043 0308 	orr.w	r3, r3, #8
 8002812:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002816:	4ba8      	ldr	r3, [pc, #672]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 8002818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002824:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002828:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002838:	2300      	movs	r3, #0
 800283a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 800283e:	230b      	movs	r3, #11
 8002840:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002844:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002848:	4619      	mov	r1, r3
 800284a:	489c      	ldr	r0, [pc, #624]	@ (8002abc <HAL_UART_MspInit+0x610>)
 800284c:	f002 fb80 	bl	8004f50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART9_IRQn, 5, 0);
 8002850:	2200      	movs	r2, #0
 8002852:	2105      	movs	r1, #5
 8002854:	209b      	movs	r0, #155	@ 0x9b
 8002856:	f000 fb80 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART9_IRQn);
 800285a:	209b      	movs	r0, #155	@ 0x9b
 800285c:	f000 fb97 	bl	8002f8e <HAL_NVIC_EnableIRQ>
}
 8002860:	e1b4      	b.n	8002bcc <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART2)
 8002862:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002866:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a94      	ldr	r2, [pc, #592]	@ (8002ac0 <HAL_UART_MspInit+0x614>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d156      	bne.n	8002922 <HAL_UART_MspInit+0x476>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002874:	f04f 0202 	mov.w	r2, #2
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002880:	2300      	movs	r3, #0
 8002882:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002886:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800288a:	4618      	mov	r0, r3
 800288c:	f003 fca8 	bl	80061e0 <HAL_RCCEx_PeriphCLKConfig>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_UART_MspInit+0x3ee>
      Error_Handler();
 8002896:	f7fe ff5d 	bl	8001754 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800289a:	4b87      	ldr	r3, [pc, #540]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 800289c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028a0:	4a85      	ldr	r2, [pc, #532]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 80028a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028aa:	4b83      	ldr	r3, [pc, #524]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 80028ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b8:	4b7f      	ldr	r3, [pc, #508]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 80028ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028be:	4a7e      	ldr	r2, [pc, #504]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028c8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 80028ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ce:	f003 0201 	and.w	r2, r3, #1
 80028d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028d6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028e0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028e4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028e6:	230c      	movs	r3, #12
 80028e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028fe:	2307      	movs	r3, #7
 8002900:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002904:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002908:	4619      	mov	r1, r3
 800290a:	486e      	ldr	r0, [pc, #440]	@ (8002ac4 <HAL_UART_MspInit+0x618>)
 800290c:	f002 fb20 	bl	8004f50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8002910:	2200      	movs	r2, #0
 8002912:	210f      	movs	r1, #15
 8002914:	2026      	movs	r0, #38	@ 0x26
 8002916:	f000 fb20 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800291a:	2026      	movs	r0, #38	@ 0x26
 800291c:	f000 fb37 	bl	8002f8e <HAL_NVIC_EnableIRQ>
}
 8002920:	e154      	b.n	8002bcc <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART3)
 8002922:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002926:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a66      	ldr	r2, [pc, #408]	@ (8002ac8 <HAL_UART_MspInit+0x61c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d15f      	bne.n	80029f4 <HAL_UART_MspInit+0x548>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002934:	f04f 0202 	mov.w	r2, #2
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002946:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800294a:	4618      	mov	r0, r3
 800294c:	f003 fc48 	bl	80061e0 <HAL_RCCEx_PeriphCLKConfig>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_UART_MspInit+0x4ae>
      Error_Handler();
 8002956:	f7fe fefd 	bl	8001754 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800295a:	4b57      	ldr	r3, [pc, #348]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 800295c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002960:	4a55      	ldr	r2, [pc, #340]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 8002962:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002966:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800296a:	4b53      	ldr	r3, [pc, #332]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 800296c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002970:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002974:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002978:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002982:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002986:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002988:	4b4b      	ldr	r3, [pc, #300]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 800298a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800298e:	4a4a      	ldr	r2, [pc, #296]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 8002990:	f043 0308 	orr.w	r3, r3, #8
 8002994:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002998:	4b47      	ldr	r3, [pc, #284]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 800299a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800299e:	f003 0208 	and.w	r2, r3, #8
 80029a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80029b4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029d0:	2307      	movs	r3, #7
 80029d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029d6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80029da:	4619      	mov	r1, r3
 80029dc:	4837      	ldr	r0, [pc, #220]	@ (8002abc <HAL_UART_MspInit+0x610>)
 80029de:	f002 fab7 	bl	8004f50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	210e      	movs	r1, #14
 80029e6:	2027      	movs	r0, #39	@ 0x27
 80029e8:	f000 fab7 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029ec:	2027      	movs	r0, #39	@ 0x27
 80029ee:	f000 face 	bl	8002f8e <HAL_NVIC_EnableIRQ>
}
 80029f2:	e0eb      	b.n	8002bcc <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART6)
 80029f4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029f8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a32      	ldr	r2, [pc, #200]	@ (8002acc <HAL_UART_MspInit+0x620>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d166      	bne.n	8002ad4 <HAL_UART_MspInit+0x628>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002a06:	f04f 0201 	mov.w	r2, #1
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a18:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f003 fbdf 	bl	80061e0 <HAL_RCCEx_PeriphCLKConfig>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_UART_MspInit+0x580>
      Error_Handler();
 8002a28:	f7fe fe94 	bl	8001754 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a2c:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 8002a2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a32:	4a21      	ldr	r2, [pc, #132]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 8002a34:	f043 0320 	orr.w	r3, r3, #32
 8002a38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 8002a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a42:	f003 0220 	and.w	r2, r3, #32
 8002a46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a54:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a58:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5a:	4b17      	ldr	r3, [pc, #92]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 8002a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a60:	4a15      	ldr	r2, [pc, #84]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a6a:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <HAL_UART_MspInit+0x60c>)
 8002a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a70:	f003 0204 	and.w	r2, r3, #4
 8002a74:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a86:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a88:	23c0      	movs	r3, #192	@ 0xc0
 8002a8a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002aa0:	2307      	movs	r3, #7
 8002aa2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4808      	ldr	r0, [pc, #32]	@ (8002ad0 <HAL_UART_MspInit+0x624>)
 8002aae:	f002 fa4f 	bl	8004f50 <HAL_GPIO_Init>
}
 8002ab2:	e08b      	b.n	8002bcc <HAL_UART_MspInit+0x720>
 8002ab4:	40011800 	.word	0x40011800
 8002ab8:	58024400 	.word	0x58024400
 8002abc:	58020c00 	.word	0x58020c00
 8002ac0:	40004400 	.word	0x40004400
 8002ac4:	58020000 	.word	0x58020000
 8002ac8:	40004800 	.word	0x40004800
 8002acc:	40011400 	.word	0x40011400
 8002ad0:	58020800 	.word	0x58020800
  else if(uartHandle->Instance==USART10)
 8002ad4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ad8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a3d      	ldr	r2, [pc, #244]	@ (8002bd8 <HAL_UART_MspInit+0x72c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d172      	bne.n	8002bcc <HAL_UART_MspInit+0x720>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8002ae6:	f04f 0201 	mov.w	r2, #1
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002af8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002afc:	4618      	mov	r0, r3
 8002afe:	f003 fb6f 	bl	80061e0 <HAL_RCCEx_PeriphCLKConfig>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_UART_MspInit+0x660>
      Error_Handler();
 8002b08:	f7fe fe24 	bl	8001754 <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8002b0c:	4b33      	ldr	r3, [pc, #204]	@ (8002bdc <HAL_UART_MspInit+0x730>)
 8002b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b12:	4a32      	ldr	r2, [pc, #200]	@ (8002bdc <HAL_UART_MspInit+0x730>)
 8002b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002bdc <HAL_UART_MspInit+0x730>)
 8002b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b22:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002b26:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b34:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b38:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b3a:	4b28      	ldr	r3, [pc, #160]	@ (8002bdc <HAL_UART_MspInit+0x730>)
 8002b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b40:	4a26      	ldr	r2, [pc, #152]	@ (8002bdc <HAL_UART_MspInit+0x730>)
 8002b42:	f043 0310 	orr.w	r3, r3, #16
 8002b46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b4a:	4b24      	ldr	r3, [pc, #144]	@ (8002bdc <HAL_UART_MspInit+0x730>)
 8002b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b50:	f003 0210 	and.w	r2, r3, #16
 8002b54:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b58:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b62:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002b66:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b68:	2304      	movs	r3, #4
 8002b6a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8002b80:	2304      	movs	r3, #4
 8002b82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b86:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4814      	ldr	r0, [pc, #80]	@ (8002be0 <HAL_UART_MspInit+0x734>)
 8002b8e:	f002 f9df 	bl	8004f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b92:	2308      	movs	r3, #8
 8002b94:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8002baa:	230b      	movs	r3, #11
 8002bac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bb0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	480a      	ldr	r0, [pc, #40]	@ (8002be0 <HAL_UART_MspInit+0x734>)
 8002bb8:	f002 f9ca 	bl	8004f50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART10_IRQn, 1, 0);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	209c      	movs	r0, #156	@ 0x9c
 8002bc2:	f000 f9ca 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8002bc6:	209c      	movs	r0, #156	@ 0x9c
 8002bc8:	f000 f9e1 	bl	8002f8e <HAL_NVIC_EnableIRQ>
}
 8002bcc:	bf00      	nop
 8002bce:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40011c00 	.word	0x40011c00
 8002bdc:	58024400 	.word	0x58024400
 8002be0:	58021000 	.word	0x58021000

08002be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
     ldr   sp, =_estack      /* set stack pointer */
 8002be4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002be8:	f7fe ff42 	bl	8001a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bec:	480c      	ldr	r0, [pc, #48]	@ (8002c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bee:	490d      	ldr	r1, [pc, #52]	@ (8002c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf4:	e002      	b.n	8002bfc <LoopCopyDataInit>

08002bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfa:	3304      	adds	r3, #4

08002bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c00:	d3f9      	bcc.n	8002bf6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c02:	4a0a      	ldr	r2, [pc, #40]	@ (8002c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c04:	4c0a      	ldr	r4, [pc, #40]	@ (8002c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c08:	e001      	b.n	8002c0e <LoopFillZerobss>

08002c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c0c:	3204      	adds	r2, #4

08002c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c10:	d3fb      	bcc.n	8002c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c12:	f00d fa95 	bl	8010140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c16:	f7fe f9d1 	bl	8000fbc <main>
  bx  lr
 8002c1a:	4770      	bx	lr
     ldr   sp, =_estack      /* set stack pointer */
 8002c1c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002c20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002c24:	24000214 	.word	0x24000214
  ldr r2, =_sidata
 8002c28:	08013744 	.word	0x08013744
  ldr r2, =_sbss
 8002c2c:	24000214 	.word	0x24000214
  ldr r4, =_ebss
 8002c30:	24000ecc 	.word	0x24000ecc

08002c34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c34:	e7fe      	b.n	8002c34 <ADC3_IRQHandler>
	...

08002c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c3e:	2003      	movs	r0, #3
 8002c40:	f000 f980 	bl	8002f44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c44:	f003 f8f6 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ca0 <HAL_Init+0x68>)
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	4913      	ldr	r1, [pc, #76]	@ (8002ca4 <HAL_Init+0x6c>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c62:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca0 <HAL_Init+0x68>)
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca4 <HAL_Init+0x6c>)
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
 8002c78:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca8 <HAL_Init+0x70>)
 8002c7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8002cac <HAL_Init+0x74>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c82:	200f      	movs	r0, #15
 8002c84:	f000 f814 	bl	8002cb0 <HAL_InitTick>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e002      	b.n	8002c98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c92:	f7fe fd65 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	58024400 	.word	0x58024400
 8002ca4:	080132a0 	.word	0x080132a0
 8002ca8:	2400000c 	.word	0x2400000c
 8002cac:	24000008 	.word	0x24000008

08002cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002cb8:	4b15      	ldr	r3, [pc, #84]	@ (8002d10 <HAL_InitTick+0x60>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e021      	b.n	8002d08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002cc4:	4b13      	ldr	r3, [pc, #76]	@ (8002d14 <HAL_InitTick+0x64>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <HAL_InitTick+0x60>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f965 	bl	8002faa <HAL_SYSTICK_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00e      	b.n	8002d08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b0f      	cmp	r3, #15
 8002cee:	d80a      	bhi.n	8002d06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	f000 f92f 	bl	8002f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cfc:	4a06      	ldr	r2, [pc, #24]	@ (8002d18 <HAL_InitTick+0x68>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	24000044 	.word	0x24000044
 8002d14:	24000008 	.word	0x24000008
 8002d18:	24000040 	.word	0x24000040

08002d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d20:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_IncTick+0x20>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <HAL_IncTick+0x24>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a04      	ldr	r2, [pc, #16]	@ (8002d40 <HAL_IncTick+0x24>)
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	24000044 	.word	0x24000044
 8002d40:	24000af4 	.word	0x24000af4

08002d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b03      	ldr	r3, [pc, #12]	@ (8002d58 <HAL_GetTick+0x14>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	24000af4 	.word	0x24000af4

08002d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d64:	f7ff ffee 	bl	8002d44 <HAL_GetTick>
 8002d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d005      	beq.n	8002d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d76:	4b0a      	ldr	r3, [pc, #40]	@ (8002da0 <HAL_Delay+0x44>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4413      	add	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d82:	bf00      	nop
 8002d84:	f7ff ffde 	bl	8002d44 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d8f7      	bhi.n	8002d84 <HAL_Delay+0x28>
  {
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	24000044 	.word	0x24000044

08002da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db4:	4b0b      	ldr	r3, [pc, #44]	@ (8002de4 <__NVIC_SetPriorityGrouping+0x40>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dcc:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd2:	4a04      	ldr	r2, [pc, #16]	@ (8002de4 <__NVIC_SetPriorityGrouping+0x40>)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	60d3      	str	r3, [r2, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000ed00 	.word	0xe000ed00
 8002de8:	05fa0000 	.word	0x05fa0000

08002dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df0:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <__NVIC_GetPriorityGrouping+0x18>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 0307 	and.w	r3, r3, #7
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	db0b      	blt.n	8002e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	f003 021f 	and.w	r2, r3, #31
 8002e20:	4907      	ldr	r1, [pc, #28]	@ (8002e40 <__NVIC_EnableIRQ+0x38>)
 8002e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2001      	movs	r0, #1
 8002e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100

08002e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	db0a      	blt.n	8002e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	490c      	ldr	r1, [pc, #48]	@ (8002e90 <__NVIC_SetPriority+0x4c>)
 8002e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	440b      	add	r3, r1
 8002e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e6c:	e00a      	b.n	8002e84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4908      	ldr	r1, [pc, #32]	@ (8002e94 <__NVIC_SetPriority+0x50>)
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	3b04      	subs	r3, #4
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	440b      	add	r3, r1
 8002e82:	761a      	strb	r2, [r3, #24]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000e100 	.word	0xe000e100
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	@ 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f1c3 0307 	rsb	r3, r3, #7
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf28      	it	cs
 8002eb6:	2304      	movcs	r3, #4
 8002eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d902      	bls.n	8002ec8 <NVIC_EncodePriority+0x30>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3b03      	subs	r3, #3
 8002ec6:	e000      	b.n	8002eca <NVIC_EncodePriority+0x32>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43d9      	mvns	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	4313      	orrs	r3, r2
         );
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	@ 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f10:	d301      	bcc.n	8002f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00f      	b.n	8002f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f16:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <SysTick_Config+0x40>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1e:	210f      	movs	r1, #15
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	f7ff ff8e 	bl	8002e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <SysTick_Config+0x40>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2e:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <SysTick_Config+0x40>)
 8002f30:	2207      	movs	r2, #7
 8002f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	e000e010 	.word	0xe000e010

08002f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff29 	bl	8002da4 <__NVIC_SetPriorityGrouping>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f68:	f7ff ff40 	bl	8002dec <__NVIC_GetPriorityGrouping>
 8002f6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	6978      	ldr	r0, [r7, #20]
 8002f74:	f7ff ff90 	bl	8002e98 <NVIC_EncodePriority>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff5f 	bl	8002e44 <__NVIC_SetPriority>
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff33 	bl	8002e08 <__NVIC_EnableIRQ>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ffa4 	bl	8002f00 <SysTick_Config>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002fc8:	f3bf 8f5f 	dmb	sy
}
 8002fcc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002fce:	4b07      	ldr	r3, [pc, #28]	@ (8002fec <HAL_MPU_Disable+0x28>)
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	4a06      	ldr	r2, [pc, #24]	@ (8002fec <HAL_MPU_Disable+0x28>)
 8002fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002fda:	4b05      	ldr	r3, [pc, #20]	@ (8002ff0 <HAL_MPU_Disable+0x2c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	605a      	str	r2, [r3, #4]
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	e000ed00 	.word	0xe000ed00
 8002ff0:	e000ed90 	.word	0xe000ed90

08002ff4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800302c <HAL_MPU_Enable+0x38>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003006:	4b0a      	ldr	r3, [pc, #40]	@ (8003030 <HAL_MPU_Enable+0x3c>)
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	4a09      	ldr	r2, [pc, #36]	@ (8003030 <HAL_MPU_Enable+0x3c>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003010:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003012:	f3bf 8f4f 	dsb	sy
}
 8003016:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003018:	f3bf 8f6f 	isb	sy
}
 800301c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	e000ed90 	.word	0xe000ed90
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	785a      	ldrb	r2, [r3, #1]
 8003040:	4b1b      	ldr	r3, [pc, #108]	@ (80030b0 <HAL_MPU_ConfigRegion+0x7c>)
 8003042:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003044:	4b1a      	ldr	r3, [pc, #104]	@ (80030b0 <HAL_MPU_ConfigRegion+0x7c>)
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	4a19      	ldr	r2, [pc, #100]	@ (80030b0 <HAL_MPU_ConfigRegion+0x7c>)
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003050:	4a17      	ldr	r2, [pc, #92]	@ (80030b0 <HAL_MPU_ConfigRegion+0x7c>)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7b1b      	ldrb	r3, [r3, #12]
 800305c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7adb      	ldrb	r3, [r3, #11]
 8003062:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003064:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	7a9b      	ldrb	r3, [r3, #10]
 800306a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800306c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	7b5b      	ldrb	r3, [r3, #13]
 8003072:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003074:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	7b9b      	ldrb	r3, [r3, #14]
 800307a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800307c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	7bdb      	ldrb	r3, [r3, #15]
 8003082:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003084:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7a5b      	ldrb	r3, [r3, #9]
 800308a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800308c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7a1b      	ldrb	r3, [r3, #8]
 8003092:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003094:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	7812      	ldrb	r2, [r2, #0]
 800309a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800309c:	4a04      	ldr	r2, [pc, #16]	@ (80030b0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800309e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030a0:	6113      	str	r3, [r2, #16]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000ed90 	.word	0xe000ed90

080030b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80030bc:	f7ff fe42 	bl	8002d44 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e2dc      	b.n	8003686 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d008      	beq.n	80030ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2280      	movs	r2, #128	@ 0x80
 80030dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e2cd      	b.n	8003686 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a76      	ldr	r2, [pc, #472]	@ (80032c8 <HAL_DMA_Abort+0x214>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d04a      	beq.n	800318a <HAL_DMA_Abort+0xd6>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a74      	ldr	r2, [pc, #464]	@ (80032cc <HAL_DMA_Abort+0x218>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d045      	beq.n	800318a <HAL_DMA_Abort+0xd6>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a73      	ldr	r2, [pc, #460]	@ (80032d0 <HAL_DMA_Abort+0x21c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d040      	beq.n	800318a <HAL_DMA_Abort+0xd6>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a71      	ldr	r2, [pc, #452]	@ (80032d4 <HAL_DMA_Abort+0x220>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d03b      	beq.n	800318a <HAL_DMA_Abort+0xd6>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a70      	ldr	r2, [pc, #448]	@ (80032d8 <HAL_DMA_Abort+0x224>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d036      	beq.n	800318a <HAL_DMA_Abort+0xd6>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6e      	ldr	r2, [pc, #440]	@ (80032dc <HAL_DMA_Abort+0x228>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d031      	beq.n	800318a <HAL_DMA_Abort+0xd6>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6d      	ldr	r2, [pc, #436]	@ (80032e0 <HAL_DMA_Abort+0x22c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d02c      	beq.n	800318a <HAL_DMA_Abort+0xd6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a6b      	ldr	r2, [pc, #428]	@ (80032e4 <HAL_DMA_Abort+0x230>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d027      	beq.n	800318a <HAL_DMA_Abort+0xd6>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a6a      	ldr	r2, [pc, #424]	@ (80032e8 <HAL_DMA_Abort+0x234>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d022      	beq.n	800318a <HAL_DMA_Abort+0xd6>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a68      	ldr	r2, [pc, #416]	@ (80032ec <HAL_DMA_Abort+0x238>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01d      	beq.n	800318a <HAL_DMA_Abort+0xd6>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a67      	ldr	r2, [pc, #412]	@ (80032f0 <HAL_DMA_Abort+0x23c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d018      	beq.n	800318a <HAL_DMA_Abort+0xd6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a65      	ldr	r2, [pc, #404]	@ (80032f4 <HAL_DMA_Abort+0x240>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_DMA_Abort+0xd6>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a64      	ldr	r2, [pc, #400]	@ (80032f8 <HAL_DMA_Abort+0x244>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00e      	beq.n	800318a <HAL_DMA_Abort+0xd6>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a62      	ldr	r2, [pc, #392]	@ (80032fc <HAL_DMA_Abort+0x248>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d009      	beq.n	800318a <HAL_DMA_Abort+0xd6>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a61      	ldr	r2, [pc, #388]	@ (8003300 <HAL_DMA_Abort+0x24c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d004      	beq.n	800318a <HAL_DMA_Abort+0xd6>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5f      	ldr	r2, [pc, #380]	@ (8003304 <HAL_DMA_Abort+0x250>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d101      	bne.n	800318e <HAL_DMA_Abort+0xda>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_DMA_Abort+0xdc>
 800318e:	2300      	movs	r3, #0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d013      	beq.n	80031bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 021e 	bic.w	r2, r2, #30
 80031a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e00a      	b.n	80031d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 020e 	bic.w	r2, r2, #14
 80031ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a3c      	ldr	r2, [pc, #240]	@ (80032c8 <HAL_DMA_Abort+0x214>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d072      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a3a      	ldr	r2, [pc, #232]	@ (80032cc <HAL_DMA_Abort+0x218>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d06d      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a39      	ldr	r2, [pc, #228]	@ (80032d0 <HAL_DMA_Abort+0x21c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d068      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a37      	ldr	r2, [pc, #220]	@ (80032d4 <HAL_DMA_Abort+0x220>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d063      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a36      	ldr	r2, [pc, #216]	@ (80032d8 <HAL_DMA_Abort+0x224>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d05e      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a34      	ldr	r2, [pc, #208]	@ (80032dc <HAL_DMA_Abort+0x228>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d059      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a33      	ldr	r2, [pc, #204]	@ (80032e0 <HAL_DMA_Abort+0x22c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d054      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a31      	ldr	r2, [pc, #196]	@ (80032e4 <HAL_DMA_Abort+0x230>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d04f      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a30      	ldr	r2, [pc, #192]	@ (80032e8 <HAL_DMA_Abort+0x234>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d04a      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a2e      	ldr	r2, [pc, #184]	@ (80032ec <HAL_DMA_Abort+0x238>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d045      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2d      	ldr	r2, [pc, #180]	@ (80032f0 <HAL_DMA_Abort+0x23c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d040      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2b      	ldr	r2, [pc, #172]	@ (80032f4 <HAL_DMA_Abort+0x240>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d03b      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2a      	ldr	r2, [pc, #168]	@ (80032f8 <HAL_DMA_Abort+0x244>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d036      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a28      	ldr	r2, [pc, #160]	@ (80032fc <HAL_DMA_Abort+0x248>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d031      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a27      	ldr	r2, [pc, #156]	@ (8003300 <HAL_DMA_Abort+0x24c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d02c      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a25      	ldr	r2, [pc, #148]	@ (8003304 <HAL_DMA_Abort+0x250>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d027      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a24      	ldr	r2, [pc, #144]	@ (8003308 <HAL_DMA_Abort+0x254>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d022      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a22      	ldr	r2, [pc, #136]	@ (800330c <HAL_DMA_Abort+0x258>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01d      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a21      	ldr	r2, [pc, #132]	@ (8003310 <HAL_DMA_Abort+0x25c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d018      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1f      	ldr	r2, [pc, #124]	@ (8003314 <HAL_DMA_Abort+0x260>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1e      	ldr	r2, [pc, #120]	@ (8003318 <HAL_DMA_Abort+0x264>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00e      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1c      	ldr	r2, [pc, #112]	@ (800331c <HAL_DMA_Abort+0x268>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d009      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003320 <HAL_DMA_Abort+0x26c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d004      	beq.n	80032c2 <HAL_DMA_Abort+0x20e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a19      	ldr	r2, [pc, #100]	@ (8003324 <HAL_DMA_Abort+0x270>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d132      	bne.n	8003328 <HAL_DMA_Abort+0x274>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e031      	b.n	800332a <HAL_DMA_Abort+0x276>
 80032c6:	bf00      	nop
 80032c8:	40020010 	.word	0x40020010
 80032cc:	40020028 	.word	0x40020028
 80032d0:	40020040 	.word	0x40020040
 80032d4:	40020058 	.word	0x40020058
 80032d8:	40020070 	.word	0x40020070
 80032dc:	40020088 	.word	0x40020088
 80032e0:	400200a0 	.word	0x400200a0
 80032e4:	400200b8 	.word	0x400200b8
 80032e8:	40020410 	.word	0x40020410
 80032ec:	40020428 	.word	0x40020428
 80032f0:	40020440 	.word	0x40020440
 80032f4:	40020458 	.word	0x40020458
 80032f8:	40020470 	.word	0x40020470
 80032fc:	40020488 	.word	0x40020488
 8003300:	400204a0 	.word	0x400204a0
 8003304:	400204b8 	.word	0x400204b8
 8003308:	58025408 	.word	0x58025408
 800330c:	5802541c 	.word	0x5802541c
 8003310:	58025430 	.word	0x58025430
 8003314:	58025444 	.word	0x58025444
 8003318:	58025458 	.word	0x58025458
 800331c:	5802546c 	.word	0x5802546c
 8003320:	58025480 	.word	0x58025480
 8003324:	58025494 	.word	0x58025494
 8003328:	2300      	movs	r3, #0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800333c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a6d      	ldr	r2, [pc, #436]	@ (80034f8 <HAL_DMA_Abort+0x444>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d04a      	beq.n	80033de <HAL_DMA_Abort+0x32a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a6b      	ldr	r2, [pc, #428]	@ (80034fc <HAL_DMA_Abort+0x448>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d045      	beq.n	80033de <HAL_DMA_Abort+0x32a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a6a      	ldr	r2, [pc, #424]	@ (8003500 <HAL_DMA_Abort+0x44c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d040      	beq.n	80033de <HAL_DMA_Abort+0x32a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a68      	ldr	r2, [pc, #416]	@ (8003504 <HAL_DMA_Abort+0x450>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d03b      	beq.n	80033de <HAL_DMA_Abort+0x32a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a67      	ldr	r2, [pc, #412]	@ (8003508 <HAL_DMA_Abort+0x454>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d036      	beq.n	80033de <HAL_DMA_Abort+0x32a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a65      	ldr	r2, [pc, #404]	@ (800350c <HAL_DMA_Abort+0x458>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d031      	beq.n	80033de <HAL_DMA_Abort+0x32a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a64      	ldr	r2, [pc, #400]	@ (8003510 <HAL_DMA_Abort+0x45c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d02c      	beq.n	80033de <HAL_DMA_Abort+0x32a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a62      	ldr	r2, [pc, #392]	@ (8003514 <HAL_DMA_Abort+0x460>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d027      	beq.n	80033de <HAL_DMA_Abort+0x32a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a61      	ldr	r2, [pc, #388]	@ (8003518 <HAL_DMA_Abort+0x464>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d022      	beq.n	80033de <HAL_DMA_Abort+0x32a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a5f      	ldr	r2, [pc, #380]	@ (800351c <HAL_DMA_Abort+0x468>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d01d      	beq.n	80033de <HAL_DMA_Abort+0x32a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003520 <HAL_DMA_Abort+0x46c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d018      	beq.n	80033de <HAL_DMA_Abort+0x32a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a5c      	ldr	r2, [pc, #368]	@ (8003524 <HAL_DMA_Abort+0x470>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <HAL_DMA_Abort+0x32a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003528 <HAL_DMA_Abort+0x474>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00e      	beq.n	80033de <HAL_DMA_Abort+0x32a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a59      	ldr	r2, [pc, #356]	@ (800352c <HAL_DMA_Abort+0x478>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d009      	beq.n	80033de <HAL_DMA_Abort+0x32a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a58      	ldr	r2, [pc, #352]	@ (8003530 <HAL_DMA_Abort+0x47c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d004      	beq.n	80033de <HAL_DMA_Abort+0x32a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a56      	ldr	r2, [pc, #344]	@ (8003534 <HAL_DMA_Abort+0x480>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d108      	bne.n	80033f0 <HAL_DMA_Abort+0x33c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	e007      	b.n	8003400 <HAL_DMA_Abort+0x34c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003400:	e013      	b.n	800342a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003402:	f7ff fc9f 	bl	8002d44 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b05      	cmp	r3, #5
 800340e:	d90c      	bls.n	800342a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2203      	movs	r2, #3
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e12d      	b.n	8003686 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1e5      	bne.n	8003402 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a2f      	ldr	r2, [pc, #188]	@ (80034f8 <HAL_DMA_Abort+0x444>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d04a      	beq.n	80034d6 <HAL_DMA_Abort+0x422>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a2d      	ldr	r2, [pc, #180]	@ (80034fc <HAL_DMA_Abort+0x448>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d045      	beq.n	80034d6 <HAL_DMA_Abort+0x422>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a2c      	ldr	r2, [pc, #176]	@ (8003500 <HAL_DMA_Abort+0x44c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d040      	beq.n	80034d6 <HAL_DMA_Abort+0x422>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a2a      	ldr	r2, [pc, #168]	@ (8003504 <HAL_DMA_Abort+0x450>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d03b      	beq.n	80034d6 <HAL_DMA_Abort+0x422>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a29      	ldr	r2, [pc, #164]	@ (8003508 <HAL_DMA_Abort+0x454>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d036      	beq.n	80034d6 <HAL_DMA_Abort+0x422>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a27      	ldr	r2, [pc, #156]	@ (800350c <HAL_DMA_Abort+0x458>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d031      	beq.n	80034d6 <HAL_DMA_Abort+0x422>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a26      	ldr	r2, [pc, #152]	@ (8003510 <HAL_DMA_Abort+0x45c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d02c      	beq.n	80034d6 <HAL_DMA_Abort+0x422>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a24      	ldr	r2, [pc, #144]	@ (8003514 <HAL_DMA_Abort+0x460>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d027      	beq.n	80034d6 <HAL_DMA_Abort+0x422>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a23      	ldr	r2, [pc, #140]	@ (8003518 <HAL_DMA_Abort+0x464>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d022      	beq.n	80034d6 <HAL_DMA_Abort+0x422>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a21      	ldr	r2, [pc, #132]	@ (800351c <HAL_DMA_Abort+0x468>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01d      	beq.n	80034d6 <HAL_DMA_Abort+0x422>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a20      	ldr	r2, [pc, #128]	@ (8003520 <HAL_DMA_Abort+0x46c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d018      	beq.n	80034d6 <HAL_DMA_Abort+0x422>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003524 <HAL_DMA_Abort+0x470>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <HAL_DMA_Abort+0x422>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003528 <HAL_DMA_Abort+0x474>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00e      	beq.n	80034d6 <HAL_DMA_Abort+0x422>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1b      	ldr	r2, [pc, #108]	@ (800352c <HAL_DMA_Abort+0x478>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d009      	beq.n	80034d6 <HAL_DMA_Abort+0x422>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003530 <HAL_DMA_Abort+0x47c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d004      	beq.n	80034d6 <HAL_DMA_Abort+0x422>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a18      	ldr	r2, [pc, #96]	@ (8003534 <HAL_DMA_Abort+0x480>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d101      	bne.n	80034da <HAL_DMA_Abort+0x426>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_DMA_Abort+0x428>
 80034da:	2300      	movs	r3, #0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d02b      	beq.n	8003538 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	223f      	movs	r2, #63	@ 0x3f
 80034f0:	409a      	lsls	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	609a      	str	r2, [r3, #8]
 80034f6:	e02a      	b.n	800354e <HAL_DMA_Abort+0x49a>
 80034f8:	40020010 	.word	0x40020010
 80034fc:	40020028 	.word	0x40020028
 8003500:	40020040 	.word	0x40020040
 8003504:	40020058 	.word	0x40020058
 8003508:	40020070 	.word	0x40020070
 800350c:	40020088 	.word	0x40020088
 8003510:	400200a0 	.word	0x400200a0
 8003514:	400200b8 	.word	0x400200b8
 8003518:	40020410 	.word	0x40020410
 800351c:	40020428 	.word	0x40020428
 8003520:	40020440 	.word	0x40020440
 8003524:	40020458 	.word	0x40020458
 8003528:	40020470 	.word	0x40020470
 800352c:	40020488 	.word	0x40020488
 8003530:	400204a0 	.word	0x400204a0
 8003534:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	2201      	movs	r2, #1
 8003548:	409a      	lsls	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a4f      	ldr	r2, [pc, #316]	@ (8003690 <HAL_DMA_Abort+0x5dc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d072      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a4d      	ldr	r2, [pc, #308]	@ (8003694 <HAL_DMA_Abort+0x5e0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d06d      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a4c      	ldr	r2, [pc, #304]	@ (8003698 <HAL_DMA_Abort+0x5e4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d068      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a4a      	ldr	r2, [pc, #296]	@ (800369c <HAL_DMA_Abort+0x5e8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d063      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a49      	ldr	r2, [pc, #292]	@ (80036a0 <HAL_DMA_Abort+0x5ec>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d05e      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a47      	ldr	r2, [pc, #284]	@ (80036a4 <HAL_DMA_Abort+0x5f0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d059      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a46      	ldr	r2, [pc, #280]	@ (80036a8 <HAL_DMA_Abort+0x5f4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d054      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a44      	ldr	r2, [pc, #272]	@ (80036ac <HAL_DMA_Abort+0x5f8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d04f      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a43      	ldr	r2, [pc, #268]	@ (80036b0 <HAL_DMA_Abort+0x5fc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d04a      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a41      	ldr	r2, [pc, #260]	@ (80036b4 <HAL_DMA_Abort+0x600>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d045      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a40      	ldr	r2, [pc, #256]	@ (80036b8 <HAL_DMA_Abort+0x604>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d040      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a3e      	ldr	r2, [pc, #248]	@ (80036bc <HAL_DMA_Abort+0x608>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d03b      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a3d      	ldr	r2, [pc, #244]	@ (80036c0 <HAL_DMA_Abort+0x60c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d036      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a3b      	ldr	r2, [pc, #236]	@ (80036c4 <HAL_DMA_Abort+0x610>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d031      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a3a      	ldr	r2, [pc, #232]	@ (80036c8 <HAL_DMA_Abort+0x614>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d02c      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a38      	ldr	r2, [pc, #224]	@ (80036cc <HAL_DMA_Abort+0x618>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d027      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a37      	ldr	r2, [pc, #220]	@ (80036d0 <HAL_DMA_Abort+0x61c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a35      	ldr	r2, [pc, #212]	@ (80036d4 <HAL_DMA_Abort+0x620>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01d      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a34      	ldr	r2, [pc, #208]	@ (80036d8 <HAL_DMA_Abort+0x624>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d018      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a32      	ldr	r2, [pc, #200]	@ (80036dc <HAL_DMA_Abort+0x628>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a31      	ldr	r2, [pc, #196]	@ (80036e0 <HAL_DMA_Abort+0x62c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a2f      	ldr	r2, [pc, #188]	@ (80036e4 <HAL_DMA_Abort+0x630>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2e      	ldr	r2, [pc, #184]	@ (80036e8 <HAL_DMA_Abort+0x634>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_DMA_Abort+0x58a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a2c      	ldr	r2, [pc, #176]	@ (80036ec <HAL_DMA_Abort+0x638>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d101      	bne.n	8003642 <HAL_DMA_Abort+0x58e>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <HAL_DMA_Abort+0x590>
 8003642:	2300      	movs	r3, #0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d015      	beq.n	8003674 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003650:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00c      	beq.n	8003674 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003664:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003668:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003672:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40020010 	.word	0x40020010
 8003694:	40020028 	.word	0x40020028
 8003698:	40020040 	.word	0x40020040
 800369c:	40020058 	.word	0x40020058
 80036a0:	40020070 	.word	0x40020070
 80036a4:	40020088 	.word	0x40020088
 80036a8:	400200a0 	.word	0x400200a0
 80036ac:	400200b8 	.word	0x400200b8
 80036b0:	40020410 	.word	0x40020410
 80036b4:	40020428 	.word	0x40020428
 80036b8:	40020440 	.word	0x40020440
 80036bc:	40020458 	.word	0x40020458
 80036c0:	40020470 	.word	0x40020470
 80036c4:	40020488 	.word	0x40020488
 80036c8:	400204a0 	.word	0x400204a0
 80036cc:	400204b8 	.word	0x400204b8
 80036d0:	58025408 	.word	0x58025408
 80036d4:	5802541c 	.word	0x5802541c
 80036d8:	58025430 	.word	0x58025430
 80036dc:	58025444 	.word	0x58025444
 80036e0:	58025458 	.word	0x58025458
 80036e4:	5802546c 	.word	0x5802546c
 80036e8:	58025480 	.word	0x58025480
 80036ec:	58025494 	.word	0x58025494

080036f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e237      	b.n	8003b72 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d004      	beq.n	8003718 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2280      	movs	r2, #128	@ 0x80
 8003712:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e22c      	b.n	8003b72 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a5c      	ldr	r2, [pc, #368]	@ (8003890 <HAL_DMA_Abort_IT+0x1a0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d04a      	beq.n	80037b8 <HAL_DMA_Abort_IT+0xc8>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a5b      	ldr	r2, [pc, #364]	@ (8003894 <HAL_DMA_Abort_IT+0x1a4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d045      	beq.n	80037b8 <HAL_DMA_Abort_IT+0xc8>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a59      	ldr	r2, [pc, #356]	@ (8003898 <HAL_DMA_Abort_IT+0x1a8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d040      	beq.n	80037b8 <HAL_DMA_Abort_IT+0xc8>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a58      	ldr	r2, [pc, #352]	@ (800389c <HAL_DMA_Abort_IT+0x1ac>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d03b      	beq.n	80037b8 <HAL_DMA_Abort_IT+0xc8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a56      	ldr	r2, [pc, #344]	@ (80038a0 <HAL_DMA_Abort_IT+0x1b0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d036      	beq.n	80037b8 <HAL_DMA_Abort_IT+0xc8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a55      	ldr	r2, [pc, #340]	@ (80038a4 <HAL_DMA_Abort_IT+0x1b4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d031      	beq.n	80037b8 <HAL_DMA_Abort_IT+0xc8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a53      	ldr	r2, [pc, #332]	@ (80038a8 <HAL_DMA_Abort_IT+0x1b8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d02c      	beq.n	80037b8 <HAL_DMA_Abort_IT+0xc8>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a52      	ldr	r2, [pc, #328]	@ (80038ac <HAL_DMA_Abort_IT+0x1bc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d027      	beq.n	80037b8 <HAL_DMA_Abort_IT+0xc8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a50      	ldr	r2, [pc, #320]	@ (80038b0 <HAL_DMA_Abort_IT+0x1c0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d022      	beq.n	80037b8 <HAL_DMA_Abort_IT+0xc8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a4f      	ldr	r2, [pc, #316]	@ (80038b4 <HAL_DMA_Abort_IT+0x1c4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d01d      	beq.n	80037b8 <HAL_DMA_Abort_IT+0xc8>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a4d      	ldr	r2, [pc, #308]	@ (80038b8 <HAL_DMA_Abort_IT+0x1c8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d018      	beq.n	80037b8 <HAL_DMA_Abort_IT+0xc8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a4c      	ldr	r2, [pc, #304]	@ (80038bc <HAL_DMA_Abort_IT+0x1cc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d013      	beq.n	80037b8 <HAL_DMA_Abort_IT+0xc8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a4a      	ldr	r2, [pc, #296]	@ (80038c0 <HAL_DMA_Abort_IT+0x1d0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00e      	beq.n	80037b8 <HAL_DMA_Abort_IT+0xc8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a49      	ldr	r2, [pc, #292]	@ (80038c4 <HAL_DMA_Abort_IT+0x1d4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d009      	beq.n	80037b8 <HAL_DMA_Abort_IT+0xc8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a47      	ldr	r2, [pc, #284]	@ (80038c8 <HAL_DMA_Abort_IT+0x1d8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d004      	beq.n	80037b8 <HAL_DMA_Abort_IT+0xc8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a46      	ldr	r2, [pc, #280]	@ (80038cc <HAL_DMA_Abort_IT+0x1dc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d101      	bne.n	80037bc <HAL_DMA_Abort_IT+0xcc>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <HAL_DMA_Abort_IT+0xce>
 80037bc:	2300      	movs	r3, #0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 8086 	beq.w	80038d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2204      	movs	r2, #4
 80037c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a2f      	ldr	r2, [pc, #188]	@ (8003890 <HAL_DMA_Abort_IT+0x1a0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d04a      	beq.n	800386c <HAL_DMA_Abort_IT+0x17c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2e      	ldr	r2, [pc, #184]	@ (8003894 <HAL_DMA_Abort_IT+0x1a4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d045      	beq.n	800386c <HAL_DMA_Abort_IT+0x17c>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003898 <HAL_DMA_Abort_IT+0x1a8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d040      	beq.n	800386c <HAL_DMA_Abort_IT+0x17c>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a2b      	ldr	r2, [pc, #172]	@ (800389c <HAL_DMA_Abort_IT+0x1ac>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d03b      	beq.n	800386c <HAL_DMA_Abort_IT+0x17c>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a29      	ldr	r2, [pc, #164]	@ (80038a0 <HAL_DMA_Abort_IT+0x1b0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d036      	beq.n	800386c <HAL_DMA_Abort_IT+0x17c>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a28      	ldr	r2, [pc, #160]	@ (80038a4 <HAL_DMA_Abort_IT+0x1b4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d031      	beq.n	800386c <HAL_DMA_Abort_IT+0x17c>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a26      	ldr	r2, [pc, #152]	@ (80038a8 <HAL_DMA_Abort_IT+0x1b8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d02c      	beq.n	800386c <HAL_DMA_Abort_IT+0x17c>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a25      	ldr	r2, [pc, #148]	@ (80038ac <HAL_DMA_Abort_IT+0x1bc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d027      	beq.n	800386c <HAL_DMA_Abort_IT+0x17c>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a23      	ldr	r2, [pc, #140]	@ (80038b0 <HAL_DMA_Abort_IT+0x1c0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d022      	beq.n	800386c <HAL_DMA_Abort_IT+0x17c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a22      	ldr	r2, [pc, #136]	@ (80038b4 <HAL_DMA_Abort_IT+0x1c4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d01d      	beq.n	800386c <HAL_DMA_Abort_IT+0x17c>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a20      	ldr	r2, [pc, #128]	@ (80038b8 <HAL_DMA_Abort_IT+0x1c8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d018      	beq.n	800386c <HAL_DMA_Abort_IT+0x17c>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1f      	ldr	r2, [pc, #124]	@ (80038bc <HAL_DMA_Abort_IT+0x1cc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d013      	beq.n	800386c <HAL_DMA_Abort_IT+0x17c>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1d      	ldr	r2, [pc, #116]	@ (80038c0 <HAL_DMA_Abort_IT+0x1d0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00e      	beq.n	800386c <HAL_DMA_Abort_IT+0x17c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1c      	ldr	r2, [pc, #112]	@ (80038c4 <HAL_DMA_Abort_IT+0x1d4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d009      	beq.n	800386c <HAL_DMA_Abort_IT+0x17c>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1a      	ldr	r2, [pc, #104]	@ (80038c8 <HAL_DMA_Abort_IT+0x1d8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d004      	beq.n	800386c <HAL_DMA_Abort_IT+0x17c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a19      	ldr	r2, [pc, #100]	@ (80038cc <HAL_DMA_Abort_IT+0x1dc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d108      	bne.n	800387e <HAL_DMA_Abort_IT+0x18e>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0201 	bic.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e178      	b.n	8003b70 <HAL_DMA_Abort_IT+0x480>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e16f      	b.n	8003b70 <HAL_DMA_Abort_IT+0x480>
 8003890:	40020010 	.word	0x40020010
 8003894:	40020028 	.word	0x40020028
 8003898:	40020040 	.word	0x40020040
 800389c:	40020058 	.word	0x40020058
 80038a0:	40020070 	.word	0x40020070
 80038a4:	40020088 	.word	0x40020088
 80038a8:	400200a0 	.word	0x400200a0
 80038ac:	400200b8 	.word	0x400200b8
 80038b0:	40020410 	.word	0x40020410
 80038b4:	40020428 	.word	0x40020428
 80038b8:	40020440 	.word	0x40020440
 80038bc:	40020458 	.word	0x40020458
 80038c0:	40020470 	.word	0x40020470
 80038c4:	40020488 	.word	0x40020488
 80038c8:	400204a0 	.word	0x400204a0
 80038cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 020e 	bic.w	r2, r2, #14
 80038de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a6c      	ldr	r2, [pc, #432]	@ (8003a98 <HAL_DMA_Abort_IT+0x3a8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d04a      	beq.n	8003980 <HAL_DMA_Abort_IT+0x290>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a6b      	ldr	r2, [pc, #428]	@ (8003a9c <HAL_DMA_Abort_IT+0x3ac>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d045      	beq.n	8003980 <HAL_DMA_Abort_IT+0x290>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a69      	ldr	r2, [pc, #420]	@ (8003aa0 <HAL_DMA_Abort_IT+0x3b0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d040      	beq.n	8003980 <HAL_DMA_Abort_IT+0x290>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a68      	ldr	r2, [pc, #416]	@ (8003aa4 <HAL_DMA_Abort_IT+0x3b4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d03b      	beq.n	8003980 <HAL_DMA_Abort_IT+0x290>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a66      	ldr	r2, [pc, #408]	@ (8003aa8 <HAL_DMA_Abort_IT+0x3b8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d036      	beq.n	8003980 <HAL_DMA_Abort_IT+0x290>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a65      	ldr	r2, [pc, #404]	@ (8003aac <HAL_DMA_Abort_IT+0x3bc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d031      	beq.n	8003980 <HAL_DMA_Abort_IT+0x290>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a63      	ldr	r2, [pc, #396]	@ (8003ab0 <HAL_DMA_Abort_IT+0x3c0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d02c      	beq.n	8003980 <HAL_DMA_Abort_IT+0x290>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a62      	ldr	r2, [pc, #392]	@ (8003ab4 <HAL_DMA_Abort_IT+0x3c4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d027      	beq.n	8003980 <HAL_DMA_Abort_IT+0x290>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a60      	ldr	r2, [pc, #384]	@ (8003ab8 <HAL_DMA_Abort_IT+0x3c8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d022      	beq.n	8003980 <HAL_DMA_Abort_IT+0x290>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a5f      	ldr	r2, [pc, #380]	@ (8003abc <HAL_DMA_Abort_IT+0x3cc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d01d      	beq.n	8003980 <HAL_DMA_Abort_IT+0x290>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a5d      	ldr	r2, [pc, #372]	@ (8003ac0 <HAL_DMA_Abort_IT+0x3d0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d018      	beq.n	8003980 <HAL_DMA_Abort_IT+0x290>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a5c      	ldr	r2, [pc, #368]	@ (8003ac4 <HAL_DMA_Abort_IT+0x3d4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <HAL_DMA_Abort_IT+0x290>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ac8 <HAL_DMA_Abort_IT+0x3d8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00e      	beq.n	8003980 <HAL_DMA_Abort_IT+0x290>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a59      	ldr	r2, [pc, #356]	@ (8003acc <HAL_DMA_Abort_IT+0x3dc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_DMA_Abort_IT+0x290>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a57      	ldr	r2, [pc, #348]	@ (8003ad0 <HAL_DMA_Abort_IT+0x3e0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_DMA_Abort_IT+0x290>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a56      	ldr	r2, [pc, #344]	@ (8003ad4 <HAL_DMA_Abort_IT+0x3e4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d108      	bne.n	8003992 <HAL_DMA_Abort_IT+0x2a2>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	e007      	b.n	80039a2 <HAL_DMA_Abort_IT+0x2b2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a3c      	ldr	r2, [pc, #240]	@ (8003a98 <HAL_DMA_Abort_IT+0x3a8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d072      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a3a      	ldr	r2, [pc, #232]	@ (8003a9c <HAL_DMA_Abort_IT+0x3ac>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d06d      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a39      	ldr	r2, [pc, #228]	@ (8003aa0 <HAL_DMA_Abort_IT+0x3b0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d068      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a37      	ldr	r2, [pc, #220]	@ (8003aa4 <HAL_DMA_Abort_IT+0x3b4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d063      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a36      	ldr	r2, [pc, #216]	@ (8003aa8 <HAL_DMA_Abort_IT+0x3b8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d05e      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a34      	ldr	r2, [pc, #208]	@ (8003aac <HAL_DMA_Abort_IT+0x3bc>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d059      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a33      	ldr	r2, [pc, #204]	@ (8003ab0 <HAL_DMA_Abort_IT+0x3c0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d054      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a31      	ldr	r2, [pc, #196]	@ (8003ab4 <HAL_DMA_Abort_IT+0x3c4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d04f      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a30      	ldr	r2, [pc, #192]	@ (8003ab8 <HAL_DMA_Abort_IT+0x3c8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d04a      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a2e      	ldr	r2, [pc, #184]	@ (8003abc <HAL_DMA_Abort_IT+0x3cc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d045      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac0 <HAL_DMA_Abort_IT+0x3d0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d040      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac4 <HAL_DMA_Abort_IT+0x3d4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d03b      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac8 <HAL_DMA_Abort_IT+0x3d8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d036      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a28      	ldr	r2, [pc, #160]	@ (8003acc <HAL_DMA_Abort_IT+0x3dc>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d031      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a27      	ldr	r2, [pc, #156]	@ (8003ad0 <HAL_DMA_Abort_IT+0x3e0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d02c      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a25      	ldr	r2, [pc, #148]	@ (8003ad4 <HAL_DMA_Abort_IT+0x3e4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d027      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a24      	ldr	r2, [pc, #144]	@ (8003ad8 <HAL_DMA_Abort_IT+0x3e8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d022      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a22      	ldr	r2, [pc, #136]	@ (8003adc <HAL_DMA_Abort_IT+0x3ec>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01d      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a21      	ldr	r2, [pc, #132]	@ (8003ae0 <HAL_DMA_Abort_IT+0x3f0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d018      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae4 <HAL_DMA_Abort_IT+0x3f4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae8 <HAL_DMA_Abort_IT+0x3f8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00e      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1c      	ldr	r2, [pc, #112]	@ (8003aec <HAL_DMA_Abort_IT+0x3fc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d009      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1b      	ldr	r2, [pc, #108]	@ (8003af0 <HAL_DMA_Abort_IT+0x400>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d004      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x3a2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a19      	ldr	r2, [pc, #100]	@ (8003af4 <HAL_DMA_Abort_IT+0x404>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d132      	bne.n	8003af8 <HAL_DMA_Abort_IT+0x408>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e031      	b.n	8003afa <HAL_DMA_Abort_IT+0x40a>
 8003a96:	bf00      	nop
 8003a98:	40020010 	.word	0x40020010
 8003a9c:	40020028 	.word	0x40020028
 8003aa0:	40020040 	.word	0x40020040
 8003aa4:	40020058 	.word	0x40020058
 8003aa8:	40020070 	.word	0x40020070
 8003aac:	40020088 	.word	0x40020088
 8003ab0:	400200a0 	.word	0x400200a0
 8003ab4:	400200b8 	.word	0x400200b8
 8003ab8:	40020410 	.word	0x40020410
 8003abc:	40020428 	.word	0x40020428
 8003ac0:	40020440 	.word	0x40020440
 8003ac4:	40020458 	.word	0x40020458
 8003ac8:	40020470 	.word	0x40020470
 8003acc:	40020488 	.word	0x40020488
 8003ad0:	400204a0 	.word	0x400204a0
 8003ad4:	400204b8 	.word	0x400204b8
 8003ad8:	58025408 	.word	0x58025408
 8003adc:	5802541c 	.word	0x5802541c
 8003ae0:	58025430 	.word	0x58025430
 8003ae4:	58025444 	.word	0x58025444
 8003ae8:	58025458 	.word	0x58025458
 8003aec:	5802546c 	.word	0x5802546c
 8003af0:	58025480 	.word	0x58025480
 8003af4:	58025494 	.word	0x58025494
 8003af8:	2300      	movs	r3, #0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d028      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b0c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b12:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b2c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00c      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b44:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b4e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop

08003b7c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b098      	sub	sp, #96	@ 0x60
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003b84:	4a84      	ldr	r2, [pc, #528]	@ (8003d98 <HAL_FDCAN_Init+0x21c>)
 8003b86:	f107 030c 	add.w	r3, r7, #12
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	224c      	movs	r2, #76	@ 0x4c
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f00c fafd 	bl	801018e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e1c6      	b.n	8003f2c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a7e      	ldr	r2, [pc, #504]	@ (8003d9c <HAL_FDCAN_Init+0x220>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d106      	bne.n	8003bb6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fc fff4 	bl	8000bb8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0210 	bic.w	r2, r2, #16
 8003bde:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003be0:	f7ff f8b0 	bl	8002d44 <HAL_GetTick>
 8003be4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003be6:	e014      	b.n	8003c12 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003be8:	f7ff f8ac 	bl	8002d44 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b0a      	cmp	r3, #10
 8003bf4:	d90d      	bls.n	8003c12 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bfc:	f043 0201 	orr.w	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2203      	movs	r2, #3
 8003c0a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e18c      	b.n	8003f2c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d0e3      	beq.n	8003be8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c30:	f7ff f888 	bl	8002d44 <HAL_GetTick>
 8003c34:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c36:	e014      	b.n	8003c62 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c38:	f7ff f884 	bl	8002d44 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b0a      	cmp	r3, #10
 8003c44:	d90d      	bls.n	8003c62 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c4c:	f043 0201 	orr.w	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2203      	movs	r2, #3
 8003c5a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e164      	b.n	8003f2c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0e3      	beq.n	8003c38 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0202 	orr.w	r2, r2, #2
 8003c7e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	7c1b      	ldrb	r3, [r3, #16]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d108      	bne.n	8003c9a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c96:	619a      	str	r2, [r3, #24]
 8003c98:	e007      	b.n	8003caa <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699a      	ldr	r2, [r3, #24]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ca8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	7c5b      	ldrb	r3, [r3, #17]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d108      	bne.n	8003cc4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cc0:	619a      	str	r2, [r3, #24]
 8003cc2:	e007      	b.n	8003cd4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003cd2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	7c9b      	ldrb	r3, [r3, #18]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d108      	bne.n	8003cee <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003cea:	619a      	str	r2, [r3, #24]
 8003cec:	e007      	b.n	8003cfe <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699a      	ldr	r2, [r3, #24]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003cfc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003d22:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0210 	bic.w	r2, r2, #16
 8003d32:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d108      	bne.n	8003d4e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0204 	orr.w	r2, r2, #4
 8003d4a:	619a      	str	r2, [r3, #24]
 8003d4c:	e030      	b.n	8003db0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d02c      	beq.n	8003db0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d020      	beq.n	8003da0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699a      	ldr	r2, [r3, #24]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d6c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0210 	orr.w	r2, r2, #16
 8003d7c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d114      	bne.n	8003db0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699a      	ldr	r2, [r3, #24]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0220 	orr.w	r2, r2, #32
 8003d94:	619a      	str	r2, [r3, #24]
 8003d96:	e00b      	b.n	8003db0 <HAL_FDCAN_Init+0x234>
 8003d98:	080131dc 	.word	0x080131dc
 8003d9c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0220 	orr.w	r2, r2, #32
 8003dae:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003dc0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003dc8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003dd8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003dda:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003de4:	d115      	bne.n	8003e12 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dea:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df0:	3b01      	subs	r3, #1
 8003df2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003df4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003dfe:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	3b01      	subs	r3, #1
 8003e08:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003e0e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e10:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e38:	4413      	add	r3, r2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d011      	beq.n	8003e62 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003e46:	f023 0107 	bic.w	r1, r3, #7
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	3360      	adds	r3, #96	@ 0x60
 8003e52:	443b      	add	r3, r7
 8003e54:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d011      	beq.n	8003e8e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e72:	f023 0107 	bic.w	r1, r3, #7
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	3360      	adds	r3, #96	@ 0x60
 8003e7e:	443b      	add	r3, r7
 8003e80:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d012      	beq.n	8003ebc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e9e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	3360      	adds	r3, #96	@ 0x60
 8003eaa:	443b      	add	r3, r7
 8003eac:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003eb0:	011a      	lsls	r2, r3, #4
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d012      	beq.n	8003eea <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003ecc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	3360      	adds	r3, #96	@ 0x60
 8003ed8:	443b      	add	r3, r7
 8003eda:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003ede:	021a      	lsls	r2, r3, #8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a11      	ldr	r2, [pc, #68]	@ (8003f34 <HAL_FDCAN_Init+0x3b8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d107      	bne.n	8003f04 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f022 0203 	bic.w	r2, r2, #3
 8003f02:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fe13 	bl	8004b48 <FDCAN_CalcultateRamBlockAddresses>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003f28:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3760      	adds	r7, #96	@ 0x60
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	4000a000 	.word	0x4000a000

08003f38 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003f48:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d002      	beq.n	8003f56 <HAL_FDCAN_ConfigFilter+0x1e>
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d157      	bne.n	8004006 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d12b      	bne.n	8003fb6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	2b07      	cmp	r3, #7
 8003f64:	d10d      	bne.n	8003f82 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003f72:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003f78:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003f7a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e00e      	b.n	8003fa0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f8e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003f96:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	e025      	b.n	8004002 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	075a      	lsls	r2, r3, #29
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b07      	cmp	r3, #7
 8003fca:	d103      	bne.n	8003fd4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	e006      	b.n	8003fe2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	079a      	lsls	r2, r3, #30
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4413      	add	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	e008      	b.n	8004018 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800400c:	f043 0202 	orr.w	r2, r3, #2
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b01      	cmp	r3, #1
 800403c:	d110      	bne.n	8004060 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004046:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800404c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004058:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e008      	b.n	8004072 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004066:	f043 0204 	orr.w	r2, r3, #4
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
  }
}
 8004072:	4618      	mov	r0, r3
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d111      	bne.n	80040b6 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2202      	movs	r2, #2
 8004096:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699a      	ldr	r2, [r3, #24]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0201 	bic.w	r2, r2, #1
 80040a8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e008      	b.n	80040c8 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040bc:	f043 0204 	orr.w	r2, r3, #4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
  }
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d141      	bne.n	8004170 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80040f4:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d109      	bne.n	8004110 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004102:	f043 0220 	orr.w	r2, r3, #32
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e038      	b.n	8004182 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004118:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004126:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e026      	b.n	8004182 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 fe82 	bl	8004e54 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2101      	movs	r1, #1
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	fa01 f202 	lsl.w	r2, r1, r2
 800415c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004160:	2201      	movs	r2, #1
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	409a      	lsls	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	e008      	b.n	8004182 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004176:	f043 0208 	orr.w	r2, r3, #8
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
  }
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800418c:	b480      	push	{r7}
 800418e:	b08b      	sub	sp, #44	@ 0x2c
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80041a4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80041a6:	7efb      	ldrb	r3, [r7, #27]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	f040 8149 	bne.w	8004440 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b40      	cmp	r3, #64	@ 0x40
 80041b2:	d14c      	bne.n	800424e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041bc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d109      	bne.n	80041d8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e13c      	b.n	8004452 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e12a      	b.n	8004452 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004204:	0e1b      	lsrs	r3, r3, #24
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b01      	cmp	r3, #1
 800420c:	d10a      	bne.n	8004224 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004216:	0fdb      	lsrs	r3, r3, #31
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004220:	2301      	movs	r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	4413      	add	r3, r2
 8004236:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004240:	69f9      	ldr	r1, [r7, #28]
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	627b      	str	r3, [r7, #36]	@ 0x24
 800424c:	e068      	b.n	8004320 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b41      	cmp	r3, #65	@ 0x41
 8004252:	d14c      	bne.n	80042ee <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800425c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800426a:	f043 0220 	orr.w	r2, r3, #32
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0ec      	b.n	8004452 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800428e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0da      	b.n	8004452 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042a4:	0e1b      	lsrs	r3, r3, #24
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d10a      	bne.n	80042c4 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042b6:	0fdb      	lsrs	r3, r3, #31
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80042c0:	2301      	movs	r3, #1
 80042c2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042cc:	0a1b      	lsrs	r3, r3, #8
 80042ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	4413      	add	r3, r2
 80042d6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e0:	69f9      	ldr	r1, [r7, #28]
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ec:	e018      	b.n	8004320 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d309      	bcc.n	800430c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042fe:	f043 0220 	orr.w	r2, r3, #32
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0a2      	b.n	8004452 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	fb01 f303 	mul.w	r3, r1, r3
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d107      	bne.n	8004344 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	0c9b      	lsrs	r3, r3, #18
 800433a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	e005      	b.n	8004350 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	3304      	adds	r3, #4
 800436c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	b29a      	uxth	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	f003 020f 	and.w	r2, r3, #15
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	0e1b      	lsrs	r3, r3, #24
 80043a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	0fda      	lsrs	r2, r3, #31
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	3304      	adds	r3, #4
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80043c0:	2300      	movs	r3, #0
 80043c2:	623b      	str	r3, [r7, #32]
 80043c4:	e00a      	b.n	80043dc <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	441a      	add	r2, r3
 80043cc:	6839      	ldr	r1, [r7, #0]
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	440b      	add	r3, r1
 80043d2:	7812      	ldrb	r2, [r2, #0]
 80043d4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	3301      	adds	r3, #1
 80043da:	623b      	str	r3, [r7, #32]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004460 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80043e2:	5cd3      	ldrb	r3, [r2, r3]
 80043e4:	461a      	mov	r2, r3
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d3ec      	bcc.n	80043c6 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b40      	cmp	r3, #64	@ 0x40
 80043f0:	d105      	bne.n	80043fe <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80043fc:	e01e      	b.n	800443c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b41      	cmp	r3, #65	@ 0x41
 8004402:	d105      	bne.n	8004410 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800440e:	e015      	b.n	800443c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b1f      	cmp	r3, #31
 8004414:	d808      	bhi.n	8004428 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2101      	movs	r1, #1
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	fa01 f202 	lsl.w	r2, r1, r2
 8004422:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8004426:	e009      	b.n	800443c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 021f 	and.w	r2, r3, #31
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2101      	movs	r1, #1
 8004434:	fa01 f202 	lsl.w	r2, r1, r2
 8004438:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	e008      	b.n	8004452 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004446:	f043 0208 	orr.w	r2, r3, #8
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
  }
}
 8004452:	4618      	mov	r0, r3
 8004454:	372c      	adds	r7, #44	@ 0x2c
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	080132b0 	.word	0x080132b0

08004464 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004476:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d002      	beq.n	8004484 <HAL_FDCAN_ActivateNotification+0x20>
 800447e:	7dfb      	ldrb	r3, [r7, #23]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d155      	bne.n	8004530 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d108      	bne.n	80044a4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0201 	orr.w	r2, r2, #1
 80044a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044a2:	e014      	b.n	80044ce <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4013      	ands	r3, r2
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d108      	bne.n	80044c6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0202 	orr.w	r2, r2, #2
 80044c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044c4:	e003      	b.n	80044ce <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2203      	movs	r2, #3
 80044cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d009      	beq.n	80044ec <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d009      	beq.n	800450a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	430a      	orrs	r2, r1
 8004506:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	4b0f      	ldr	r3, [pc, #60]	@ (8004550 <HAL_FDCAN_ActivateNotification+0xec>)
 8004514:	4013      	ands	r3, r2
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	430b      	orrs	r3, r1
 800451c:	6553      	str	r3, [r2, #84]	@ 0x54
 800451e:	4b0d      	ldr	r3, [pc, #52]	@ (8004554 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	0f9b      	lsrs	r3, r3, #30
 8004526:	490b      	ldr	r1, [pc, #44]	@ (8004554 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004528:	4313      	orrs	r3, r2
 800452a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	e008      	b.n	8004542 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004536:	f043 0202 	orr.w	r2, r3, #2
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
  }
}
 8004542:	4618      	mov	r0, r3
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	3fcfffff 	.word	0x3fcfffff
 8004554:	4000a800 	.word	0x4000a800

08004558 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b096      	sub	sp, #88	@ 0x58
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004560:	4b95      	ldr	r3, [pc, #596]	@ (80047b8 <HAL_FDCAN_IRQHandler+0x260>)
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	079b      	lsls	r3, r3, #30
 8004566:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004568:	4b93      	ldr	r3, [pc, #588]	@ (80047b8 <HAL_FDCAN_IRQHandler+0x260>)
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	079b      	lsls	r3, r3, #30
 800456e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004570:	4013      	ands	r3, r2
 8004572:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800457a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800457e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004586:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004588:	4013      	ands	r3, r2
 800458a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045a0:	4013      	ands	r3, r2
 80045a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045b8:	4013      	ands	r3, r2
 80045ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c2:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80045c6:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045d0:	4013      	ands	r3, r2
 80045d2:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045da:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80045de:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045e8:	4013      	ands	r3, r2
 80045ea:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80045fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00f      	beq.n	8004626 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004618:	651a      	str	r2, [r3, #80]	@ 0x50
 800461a:	4b67      	ldr	r3, [pc, #412]	@ (80047b8 <HAL_FDCAN_IRQHandler+0x260>)
 800461c:	2200      	movs	r2, #0
 800461e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fa44 	bl	8004aae <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01c      	beq.n	800466a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004636:	2b00      	cmp	r3, #0
 8004638:	d017      	beq.n	800466a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004642:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800464c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800464e:	4013      	ands	r3, r2
 8004650:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800465a:	651a      	str	r2, [r3, #80]	@ 0x50
 800465c:	4b56      	ldr	r3, [pc, #344]	@ (80047b8 <HAL_FDCAN_IRQHandler+0x260>)
 800465e:	2200      	movs	r2, #0
 8004660:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004662:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f9f9 	bl	8004a5c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800466a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00d      	beq.n	800468c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004676:	4b51      	ldr	r3, [pc, #324]	@ (80047bc <HAL_FDCAN_IRQHandler+0x264>)
 8004678:	400b      	ands	r3, r1
 800467a:	6513      	str	r3, [r2, #80]	@ 0x50
 800467c:	4a4e      	ldr	r2, [pc, #312]	@ (80047b8 <HAL_FDCAN_IRQHandler+0x260>)
 800467e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004680:	0f9b      	lsrs	r3, r3, #30
 8004682:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004684:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f9b2 	bl	80049f0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800468c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00d      	beq.n	80046ae <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004698:	4b48      	ldr	r3, [pc, #288]	@ (80047bc <HAL_FDCAN_IRQHandler+0x264>)
 800469a:	400b      	ands	r3, r1
 800469c:	6513      	str	r3, [r2, #80]	@ 0x50
 800469e:	4a46      	ldr	r2, [pc, #280]	@ (80047b8 <HAL_FDCAN_IRQHandler+0x260>)
 80046a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046a2:	0f9b      	lsrs	r3, r3, #30
 80046a4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80046a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f9ac 	bl	8004a06 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80046ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00d      	beq.n	80046d0 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80046ba:	4b40      	ldr	r3, [pc, #256]	@ (80047bc <HAL_FDCAN_IRQHandler+0x264>)
 80046bc:	400b      	ands	r3, r1
 80046be:	6513      	str	r3, [r2, #80]	@ 0x50
 80046c0:	4a3d      	ldr	r2, [pc, #244]	@ (80047b8 <HAL_FDCAN_IRQHandler+0x260>)
 80046c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046c4:	0f9b      	lsrs	r3, r3, #30
 80046c6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80046c8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fc fb94 	bl	8000df8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80046d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00d      	beq.n	80046f2 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80046dc:	4b37      	ldr	r3, [pc, #220]	@ (80047bc <HAL_FDCAN_IRQHandler+0x264>)
 80046de:	400b      	ands	r3, r1
 80046e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80046e2:	4a35      	ldr	r2, [pc, #212]	@ (80047b8 <HAL_FDCAN_IRQHandler+0x260>)
 80046e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046e6:	0f9b      	lsrs	r3, r3, #30
 80046e8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80046ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f995 	bl	8004a1c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80046f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00f      	beq.n	800471c <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80046fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800470e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004710:	4b29      	ldr	r3, [pc, #164]	@ (80047b8 <HAL_FDCAN_IRQHandler+0x260>)
 8004712:	2200      	movs	r2, #0
 8004714:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f98b 	bl	8004a32 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800471c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800471e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004722:	2b00      	cmp	r3, #0
 8004724:	d01c      	beq.n	8004760 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800472c:	2b00      	cmp	r3, #0
 800472e:	d017      	beq.n	8004760 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004738:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004744:	4013      	ands	r3, r2
 8004746:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004750:	651a      	str	r2, [r3, #80]	@ 0x50
 8004752:	4b19      	ldr	r3, [pc, #100]	@ (80047b8 <HAL_FDCAN_IRQHandler+0x260>)
 8004754:	2200      	movs	r2, #0
 8004756:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004758:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f973 	bl	8004a46 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004762:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00f      	beq.n	800478a <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800476a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800477c:	651a      	str	r2, [r3, #80]	@ 0x50
 800477e:	4b0e      	ldr	r3, [pc, #56]	@ (80047b8 <HAL_FDCAN_IRQHandler+0x260>)
 8004780:	2200      	movs	r2, #0
 8004782:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f974 	bl	8004a72 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800478a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800478c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d015      	beq.n	80047c0 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d010      	beq.n	80047c0 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80047a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80047a8:	4b03      	ldr	r3, [pc, #12]	@ (80047b8 <HAL_FDCAN_IRQHandler+0x260>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f969 	bl	8004a86 <HAL_FDCAN_TimestampWraparoundCallback>
 80047b4:	e004      	b.n	80047c0 <HAL_FDCAN_IRQHandler+0x268>
 80047b6:	bf00      	nop
 80047b8:	4000a800 	.word	0x4000a800
 80047bc:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80047c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00f      	beq.n	80047ea <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80047ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80047dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80047de:	4b81      	ldr	r3, [pc, #516]	@ (80049e4 <HAL_FDCAN_IRQHandler+0x48c>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f958 	bl	8004a9a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80047ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d014      	beq.n	800481e <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80047f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00f      	beq.n	800481e <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004806:	651a      	str	r2, [r3, #80]	@ 0x50
 8004808:	4b76      	ldr	r3, [pc, #472]	@ (80049e4 <HAL_FDCAN_IRQHandler+0x48c>)
 800480a:	2200      	movs	r2, #0
 800480c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004814:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800481e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00d      	beq.n	8004840 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800482a:	4b6f      	ldr	r3, [pc, #444]	@ (80049e8 <HAL_FDCAN_IRQHandler+0x490>)
 800482c:	400b      	ands	r3, r1
 800482e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004830:	4a6c      	ldr	r2, [pc, #432]	@ (80049e4 <HAL_FDCAN_IRQHandler+0x48c>)
 8004832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004834:	0f9b      	lsrs	r3, r3, #30
 8004836:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004838:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f94b 	bl	8004ad6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004842:	2b00      	cmp	r3, #0
 8004844:	d011      	beq.n	800486a <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800484c:	4b66      	ldr	r3, [pc, #408]	@ (80049e8 <HAL_FDCAN_IRQHandler+0x490>)
 800484e:	400b      	ands	r3, r1
 8004850:	6513      	str	r3, [r2, #80]	@ 0x50
 8004852:	4a64      	ldr	r2, [pc, #400]	@ (80049e4 <HAL_FDCAN_IRQHandler+0x48c>)
 8004854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004856:	0f9b      	lsrs	r3, r3, #30
 8004858:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a5f      	ldr	r2, [pc, #380]	@ (80049ec <HAL_FDCAN_IRQHandler+0x494>)
 8004870:	4293      	cmp	r3, r2
 8004872:	f040 80aa 	bne.w	80049ca <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80a2 	beq.w	80049ca <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800489a:	4013      	ands	r3, r2
 800489c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048b2:	4013      	ands	r3, r2
 80048b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80048c0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ca:	4013      	ands	r3, r2
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80048d8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	6a3a      	ldr	r2, [r7, #32]
 80048e2:	4013      	ands	r3, r2
 80048e4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80048f0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	4013      	ands	r3, r2
 80048fc:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800490e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800491a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800491c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8e4 	bl	8004aec <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004930:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004932:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f8e4 	bl	8004b02 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d019      	beq.n	8004978 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d014      	beq.n	8004978 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	b29b      	uxth	r3, r3
 8004958:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004960:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004964:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2240      	movs	r2, #64	@ 0x40
 800496c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	6939      	ldr	r1, [r7, #16]
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f8d0 	bl	8004b18 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004984:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004986:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8d1 	bl	8004b30 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00b      	beq.n	80049ac <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	6a3a      	ldr	r2, [r7, #32]
 800499a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	69fa      	ldr	r2, [r7, #28]
 80049b8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f874 	bl	8004ac2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80049da:	bf00      	nop
 80049dc:	3758      	adds	r7, #88	@ 0x58
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	4000a800 	.word	0x4000a800
 80049e8:	3fcfffff 	.word	0x3fcfffff
 80049ec:	4000a000 	.word	0x4000a000

080049f0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b54:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004b5e:	4ba7      	ldr	r3, [pc, #668]	@ (8004dfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	0091      	lsls	r1, r2, #2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6812      	ldr	r2, [r2, #0]
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b78:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	041a      	lsls	r2, r3, #16
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	4413      	add	r3, r2
 8004b94:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004b9e:	4b97      	ldr	r3, [pc, #604]	@ (8004dfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	0091      	lsls	r1, r2, #2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6812      	ldr	r2, [r2, #0]
 8004baa:	430b      	orrs	r3, r1
 8004bac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb8:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc0:	041a      	lsls	r2, r3, #16
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004be0:	4b86      	ldr	r3, [pc, #536]	@ (8004dfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	0091      	lsls	r1, r2, #2
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	430b      	orrs	r3, r1
 8004bee:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004bfa:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	041a      	lsls	r2, r3, #16
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004c28:	4b74      	ldr	r3, [pc, #464]	@ (8004dfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	0091      	lsls	r1, r2, #2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	430b      	orrs	r3, r1
 8004c36:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c42:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c4a:	041a      	lsls	r2, r3, #16
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004c5e:	fb02 f303 	mul.w	r3, r2, r3
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	4413      	add	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004c70:	4b62      	ldr	r3, [pc, #392]	@ (8004dfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	0091      	lsls	r1, r2, #2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6812      	ldr	r2, [r2, #0]
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4413      	add	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004c9c:	4b57      	ldr	r3, [pc, #348]	@ (8004dfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	0091      	lsls	r1, r2, #2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cb6:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cbe:	041a      	lsls	r2, r3, #16
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004cde:	4b47      	ldr	r3, [pc, #284]	@ (8004dfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	0091      	lsls	r1, r2, #2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6812      	ldr	r2, [r2, #0]
 8004cea:	430b      	orrs	r3, r1
 8004cec:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004cf8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d00:	041a      	lsls	r2, r3, #16
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004d14:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d1c:	061a      	lsls	r2, r3, #24
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d2c:	4b34      	ldr	r3, [pc, #208]	@ (8004e00 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004d2e:	4413      	add	r3, r2
 8004d30:	009a      	lsls	r2, r3, #2
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	441a      	add	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004d68:	441a      	add	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8004d7a:	fb01 f303 	mul.w	r3, r1, r3
 8004d7e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004d80:	441a      	add	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004d98:	441a      	add	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	441a      	add	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004dc2:	fb01 f303 	mul.w	r3, r1, r3
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	441a      	add	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004dde:	fb01 f303 	mul.w	r3, r1, r3
 8004de2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004de4:	441a      	add	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df2:	4a04      	ldr	r2, [pc, #16]	@ (8004e04 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d915      	bls.n	8004e24 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004df8:	e006      	b.n	8004e08 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004dfa:	bf00      	nop
 8004dfc:	ffff0003 	.word	0xffff0003
 8004e00:	10002b00 	.word	0x10002b00
 8004e04:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e010      	b.n	8004e46 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	e005      	b.n	8004e38 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	3304      	adds	r3, #4
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d3f3      	bcc.n	8004e2c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop

08004e54 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b089      	sub	sp, #36	@ 0x24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10a      	bne.n	8004e80 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004e72:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	e00a      	b.n	8004e96 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004e88:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004e8e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e94:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004ea0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004ea6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004eac:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ec2:	6839      	ldr	r1, [r7, #0]
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	e020      	b.n	8004f2e <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	3303      	adds	r3, #3
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	3302      	adds	r3, #2
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	440b      	add	r3, r1
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004f04:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	440b      	add	r3, r1
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004f12:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	440a      	add	r2, r1
 8004f1a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004f1c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	3304      	adds	r3, #4
 8004f26:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	4a06      	ldr	r2, [pc, #24]	@ (8004f4c <FDCAN_CopyMessageToRAM+0xf8>)
 8004f34:	5cd3      	ldrb	r3, [r2, r3]
 8004f36:	461a      	mov	r2, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d3d6      	bcc.n	8004eec <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8004f3e:	bf00      	nop
 8004f40:	bf00      	nop
 8004f42:	3724      	adds	r7, #36	@ 0x24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	080132b0 	.word	0x080132b0

08004f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b089      	sub	sp, #36	@ 0x24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f5e:	4b86      	ldr	r3, [pc, #536]	@ (8005178 <HAL_GPIO_Init+0x228>)
 8004f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f62:	e18c      	b.n	800527e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	2101      	movs	r1, #1
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f70:	4013      	ands	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 817e 	beq.w	8005278 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 0303 	and.w	r3, r3, #3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d005      	beq.n	8004f94 <HAL_GPIO_Init+0x44>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d130      	bne.n	8004ff6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	2203      	movs	r2, #3
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fca:	2201      	movs	r2, #1
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	091b      	lsrs	r3, r3, #4
 8004fe0:	f003 0201 	and.w	r2, r3, #1
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d017      	beq.n	8005032 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	2203      	movs	r2, #3
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4313      	orrs	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d123      	bne.n	8005086 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	08da      	lsrs	r2, r3, #3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3208      	adds	r2, #8
 8005046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800504a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	220f      	movs	r2, #15
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43db      	mvns	r3, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4013      	ands	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	fa02 f303 	lsl.w	r3, r2, r3
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	4313      	orrs	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	08da      	lsrs	r2, r3, #3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3208      	adds	r2, #8
 8005080:	69b9      	ldr	r1, [r7, #24]
 8005082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	2203      	movs	r2, #3
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	43db      	mvns	r3, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	4013      	ands	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f003 0203 	and.w	r2, r3, #3
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 80d8 	beq.w	8005278 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050c8:	4b2c      	ldr	r3, [pc, #176]	@ (800517c <HAL_GPIO_Init+0x22c>)
 80050ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050ce:	4a2b      	ldr	r2, [pc, #172]	@ (800517c <HAL_GPIO_Init+0x22c>)
 80050d0:	f043 0302 	orr.w	r3, r3, #2
 80050d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80050d8:	4b28      	ldr	r3, [pc, #160]	@ (800517c <HAL_GPIO_Init+0x22c>)
 80050da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050e6:	4a26      	ldr	r2, [pc, #152]	@ (8005180 <HAL_GPIO_Init+0x230>)
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	089b      	lsrs	r3, r3, #2
 80050ec:	3302      	adds	r3, #2
 80050ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	220f      	movs	r2, #15
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	43db      	mvns	r3, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4013      	ands	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a1d      	ldr	r2, [pc, #116]	@ (8005184 <HAL_GPIO_Init+0x234>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d04a      	beq.n	80051a8 <HAL_GPIO_Init+0x258>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a1c      	ldr	r2, [pc, #112]	@ (8005188 <HAL_GPIO_Init+0x238>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d02b      	beq.n	8005172 <HAL_GPIO_Init+0x222>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a1b      	ldr	r2, [pc, #108]	@ (800518c <HAL_GPIO_Init+0x23c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d025      	beq.n	800516e <HAL_GPIO_Init+0x21e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a1a      	ldr	r2, [pc, #104]	@ (8005190 <HAL_GPIO_Init+0x240>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d01f      	beq.n	800516a <HAL_GPIO_Init+0x21a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a19      	ldr	r2, [pc, #100]	@ (8005194 <HAL_GPIO_Init+0x244>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d019      	beq.n	8005166 <HAL_GPIO_Init+0x216>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a18      	ldr	r2, [pc, #96]	@ (8005198 <HAL_GPIO_Init+0x248>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d013      	beq.n	8005162 <HAL_GPIO_Init+0x212>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a17      	ldr	r2, [pc, #92]	@ (800519c <HAL_GPIO_Init+0x24c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00d      	beq.n	800515e <HAL_GPIO_Init+0x20e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a16      	ldr	r2, [pc, #88]	@ (80051a0 <HAL_GPIO_Init+0x250>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d007      	beq.n	800515a <HAL_GPIO_Init+0x20a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a15      	ldr	r2, [pc, #84]	@ (80051a4 <HAL_GPIO_Init+0x254>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d101      	bne.n	8005156 <HAL_GPIO_Init+0x206>
 8005152:	2309      	movs	r3, #9
 8005154:	e029      	b.n	80051aa <HAL_GPIO_Init+0x25a>
 8005156:	230a      	movs	r3, #10
 8005158:	e027      	b.n	80051aa <HAL_GPIO_Init+0x25a>
 800515a:	2307      	movs	r3, #7
 800515c:	e025      	b.n	80051aa <HAL_GPIO_Init+0x25a>
 800515e:	2306      	movs	r3, #6
 8005160:	e023      	b.n	80051aa <HAL_GPIO_Init+0x25a>
 8005162:	2305      	movs	r3, #5
 8005164:	e021      	b.n	80051aa <HAL_GPIO_Init+0x25a>
 8005166:	2304      	movs	r3, #4
 8005168:	e01f      	b.n	80051aa <HAL_GPIO_Init+0x25a>
 800516a:	2303      	movs	r3, #3
 800516c:	e01d      	b.n	80051aa <HAL_GPIO_Init+0x25a>
 800516e:	2302      	movs	r3, #2
 8005170:	e01b      	b.n	80051aa <HAL_GPIO_Init+0x25a>
 8005172:	2301      	movs	r3, #1
 8005174:	e019      	b.n	80051aa <HAL_GPIO_Init+0x25a>
 8005176:	bf00      	nop
 8005178:	58000080 	.word	0x58000080
 800517c:	58024400 	.word	0x58024400
 8005180:	58000400 	.word	0x58000400
 8005184:	58020000 	.word	0x58020000
 8005188:	58020400 	.word	0x58020400
 800518c:	58020800 	.word	0x58020800
 8005190:	58020c00 	.word	0x58020c00
 8005194:	58021000 	.word	0x58021000
 8005198:	58021400 	.word	0x58021400
 800519c:	58021800 	.word	0x58021800
 80051a0:	58021c00 	.word	0x58021c00
 80051a4:	58022400 	.word	0x58022400
 80051a8:	2300      	movs	r3, #0
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	f002 0203 	and.w	r2, r2, #3
 80051b0:	0092      	lsls	r2, r2, #2
 80051b2:	4093      	lsls	r3, r2
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051ba:	4938      	ldr	r1, [pc, #224]	@ (800529c <HAL_GPIO_Init+0x34c>)
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	089b      	lsrs	r3, r3, #2
 80051c0:	3302      	adds	r3, #2
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	43db      	mvns	r3, r3
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	4013      	ands	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	43db      	mvns	r3, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4013      	ands	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800521c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	43db      	mvns	r3, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	43db      	mvns	r3, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4013      	ands	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	3301      	adds	r3, #1
 800527c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	f47f ae6b 	bne.w	8004f64 <HAL_GPIO_Init+0x14>
  }
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	3724      	adds	r7, #36	@ 0x24
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	58000400 	.word	0x58000400

080052a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80052a8:	4b19      	ldr	r3, [pc, #100]	@ (8005310 <HAL_PWREx_ConfigSupply+0x70>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d00a      	beq.n	80052ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052b4:	4b16      	ldr	r3, [pc, #88]	@ (8005310 <HAL_PWREx_ConfigSupply+0x70>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d001      	beq.n	80052c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e01f      	b.n	8005306 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e01d      	b.n	8005306 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052ca:	4b11      	ldr	r3, [pc, #68]	@ (8005310 <HAL_PWREx_ConfigSupply+0x70>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f023 0207 	bic.w	r2, r3, #7
 80052d2:	490f      	ldr	r1, [pc, #60]	@ (8005310 <HAL_PWREx_ConfigSupply+0x70>)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052da:	f7fd fd33 	bl	8002d44 <HAL_GetTick>
 80052de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052e0:	e009      	b.n	80052f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052e2:	f7fd fd2f 	bl	8002d44 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052f0:	d901      	bls.n	80052f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e007      	b.n	8005306 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052f6:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <HAL_PWREx_ConfigSupply+0x70>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005302:	d1ee      	bne.n	80052e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	58024800 	.word	0x58024800

08005314 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08c      	sub	sp, #48	@ 0x30
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e3c8      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 8087 	beq.w	8005442 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005334:	4b88      	ldr	r3, [pc, #544]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800533c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800533e:	4b86      	ldr	r3, [pc, #536]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 8005340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005342:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005346:	2b10      	cmp	r3, #16
 8005348:	d007      	beq.n	800535a <HAL_RCC_OscConfig+0x46>
 800534a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534c:	2b18      	cmp	r3, #24
 800534e:	d110      	bne.n	8005372 <HAL_RCC_OscConfig+0x5e>
 8005350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d10b      	bne.n	8005372 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800535a:	4b7f      	ldr	r3, [pc, #508]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d06c      	beq.n	8005440 <HAL_RCC_OscConfig+0x12c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d168      	bne.n	8005440 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e3a2      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800537a:	d106      	bne.n	800538a <HAL_RCC_OscConfig+0x76>
 800537c:	4b76      	ldr	r3, [pc, #472]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a75      	ldr	r2, [pc, #468]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 8005382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	e02e      	b.n	80053e8 <HAL_RCC_OscConfig+0xd4>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10c      	bne.n	80053ac <HAL_RCC_OscConfig+0x98>
 8005392:	4b71      	ldr	r3, [pc, #452]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a70      	ldr	r2, [pc, #448]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 8005398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	4b6e      	ldr	r3, [pc, #440]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a6d      	ldr	r2, [pc, #436]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 80053a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	e01d      	b.n	80053e8 <HAL_RCC_OscConfig+0xd4>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053b4:	d10c      	bne.n	80053d0 <HAL_RCC_OscConfig+0xbc>
 80053b6:	4b68      	ldr	r3, [pc, #416]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a67      	ldr	r2, [pc, #412]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 80053bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	4b65      	ldr	r3, [pc, #404]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a64      	ldr	r2, [pc, #400]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 80053c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	e00b      	b.n	80053e8 <HAL_RCC_OscConfig+0xd4>
 80053d0:	4b61      	ldr	r3, [pc, #388]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a60      	ldr	r2, [pc, #384]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 80053d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	4b5e      	ldr	r3, [pc, #376]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a5d      	ldr	r2, [pc, #372]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 80053e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d013      	beq.n	8005418 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f0:	f7fd fca8 	bl	8002d44 <HAL_GetTick>
 80053f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053f8:	f7fd fca4 	bl	8002d44 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b64      	cmp	r3, #100	@ 0x64
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e356      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800540a:	4b53      	ldr	r3, [pc, #332]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0f0      	beq.n	80053f8 <HAL_RCC_OscConfig+0xe4>
 8005416:	e014      	b.n	8005442 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fd fc94 	bl	8002d44 <HAL_GetTick>
 800541c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005420:	f7fd fc90 	bl	8002d44 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b64      	cmp	r3, #100	@ 0x64
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e342      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005432:	4b49      	ldr	r3, [pc, #292]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f0      	bne.n	8005420 <HAL_RCC_OscConfig+0x10c>
 800543e:	e000      	b.n	8005442 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 808c 	beq.w	8005568 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005450:	4b41      	ldr	r3, [pc, #260]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005458:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800545a:	4b3f      	ldr	r3, [pc, #252]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 800545c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HAL_RCC_OscConfig+0x162>
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	2b18      	cmp	r3, #24
 800546a:	d137      	bne.n	80054dc <HAL_RCC_OscConfig+0x1c8>
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d132      	bne.n	80054dc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005476:	4b38      	ldr	r3, [pc, #224]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_RCC_OscConfig+0x17a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e314      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800548e:	4b32      	ldr	r3, [pc, #200]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f023 0219 	bic.w	r2, r3, #25
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	492f      	ldr	r1, [pc, #188]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 800549c:	4313      	orrs	r3, r2
 800549e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fd fc50 	bl	8002d44 <HAL_GetTick>
 80054a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a8:	f7fd fc4c 	bl	8002d44 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e2fe      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054ba:	4b27      	ldr	r3, [pc, #156]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f0      	beq.n	80054a8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c6:	4b24      	ldr	r3, [pc, #144]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	061b      	lsls	r3, r3, #24
 80054d4:	4920      	ldr	r1, [pc, #128]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054da:	e045      	b.n	8005568 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d026      	beq.n	8005532 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f023 0219 	bic.w	r2, r3, #25
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	4919      	ldr	r1, [pc, #100]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f6:	f7fd fc25 	bl	8002d44 <HAL_GetTick>
 80054fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054fe:	f7fd fc21 	bl	8002d44 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e2d3      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005510:	4b11      	ldr	r3, [pc, #68]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551c:	4b0e      	ldr	r3, [pc, #56]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	061b      	lsls	r3, r3, #24
 800552a:	490b      	ldr	r1, [pc, #44]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 800552c:	4313      	orrs	r3, r2
 800552e:	604b      	str	r3, [r1, #4]
 8005530:	e01a      	b.n	8005568 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005532:	4b09      	ldr	r3, [pc, #36]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a08      	ldr	r2, [pc, #32]	@ (8005558 <HAL_RCC_OscConfig+0x244>)
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553e:	f7fd fc01 	bl	8002d44 <HAL_GetTick>
 8005542:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005544:	e00a      	b.n	800555c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005546:	f7fd fbfd 	bl	8002d44 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d903      	bls.n	800555c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e2af      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
 8005558:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800555c:	4b96      	ldr	r3, [pc, #600]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1ee      	bne.n	8005546 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	2b00      	cmp	r3, #0
 8005572:	d06a      	beq.n	800564a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005574:	4b90      	ldr	r3, [pc, #576]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800557c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800557e:	4b8e      	ldr	r3, [pc, #568]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 8005580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005582:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	2b08      	cmp	r3, #8
 8005588:	d007      	beq.n	800559a <HAL_RCC_OscConfig+0x286>
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b18      	cmp	r3, #24
 800558e:	d11b      	bne.n	80055c8 <HAL_RCC_OscConfig+0x2b4>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d116      	bne.n	80055c8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800559a:	4b87      	ldr	r3, [pc, #540]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d005      	beq.n	80055b2 <HAL_RCC_OscConfig+0x29e>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	2b80      	cmp	r3, #128	@ 0x80
 80055ac:	d001      	beq.n	80055b2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e282      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055b2:	4b81      	ldr	r3, [pc, #516]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	061b      	lsls	r3, r3, #24
 80055c0:	497d      	ldr	r1, [pc, #500]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055c6:	e040      	b.n	800564a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d023      	beq.n	8005618 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055d0:	4b79      	ldr	r3, [pc, #484]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a78      	ldr	r2, [pc, #480]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 80055d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055dc:	f7fd fbb2 	bl	8002d44 <HAL_GetTick>
 80055e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80055e4:	f7fd fbae 	bl	8002d44 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e260      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055f6:	4b70      	ldr	r3, [pc, #448]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f0      	beq.n	80055e4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005602:	4b6d      	ldr	r3, [pc, #436]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	061b      	lsls	r3, r3, #24
 8005610:	4969      	ldr	r1, [pc, #420]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 8005612:	4313      	orrs	r3, r2
 8005614:	60cb      	str	r3, [r1, #12]
 8005616:	e018      	b.n	800564a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005618:	4b67      	ldr	r3, [pc, #412]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a66      	ldr	r2, [pc, #408]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 800561e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005624:	f7fd fb8e 	bl	8002d44 <HAL_GetTick>
 8005628:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800562c:	f7fd fb8a 	bl	8002d44 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e23c      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800563e:	4b5e      	ldr	r3, [pc, #376]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f0      	bne.n	800562c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d036      	beq.n	80056c4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d019      	beq.n	8005692 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800565e:	4b56      	ldr	r3, [pc, #344]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 8005660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005662:	4a55      	ldr	r2, [pc, #340]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 8005664:	f043 0301 	orr.w	r3, r3, #1
 8005668:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566a:	f7fd fb6b 	bl	8002d44 <HAL_GetTick>
 800566e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005672:	f7fd fb67 	bl	8002d44 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e219      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005684:	4b4c      	ldr	r3, [pc, #304]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 8005686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x35e>
 8005690:	e018      	b.n	80056c4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005692:	4b49      	ldr	r3, [pc, #292]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 8005694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005696:	4a48      	ldr	r2, [pc, #288]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 8005698:	f023 0301 	bic.w	r3, r3, #1
 800569c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569e:	f7fd fb51 	bl	8002d44 <HAL_GetTick>
 80056a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056a6:	f7fd fb4d 	bl	8002d44 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e1ff      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056b8:	4b3f      	ldr	r3, [pc, #252]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 80056ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1f0      	bne.n	80056a6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d036      	beq.n	800573e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d019      	beq.n	800570c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056d8:	4b37      	ldr	r3, [pc, #220]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a36      	ldr	r2, [pc, #216]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 80056de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80056e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056e4:	f7fd fb2e 	bl	8002d44 <HAL_GetTick>
 80056e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056ec:	f7fd fb2a 	bl	8002d44 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e1dc      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056fe:	4b2e      	ldr	r3, [pc, #184]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0f0      	beq.n	80056ec <HAL_RCC_OscConfig+0x3d8>
 800570a:	e018      	b.n	800573e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800570c:	4b2a      	ldr	r3, [pc, #168]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a29      	ldr	r2, [pc, #164]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 8005712:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005716:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005718:	f7fd fb14 	bl	8002d44 <HAL_GetTick>
 800571c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005720:	f7fd fb10 	bl	8002d44 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e1c2      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005732:	4b21      	ldr	r3, [pc, #132]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f0      	bne.n	8005720 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8086 	beq.w	8005858 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800574c:	4b1b      	ldr	r3, [pc, #108]	@ (80057bc <HAL_RCC_OscConfig+0x4a8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1a      	ldr	r2, [pc, #104]	@ (80057bc <HAL_RCC_OscConfig+0x4a8>)
 8005752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005756:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005758:	f7fd faf4 	bl	8002d44 <HAL_GetTick>
 800575c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005760:	f7fd faf0 	bl	8002d44 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b64      	cmp	r3, #100	@ 0x64
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e1a2      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005772:	4b12      	ldr	r3, [pc, #72]	@ (80057bc <HAL_RCC_OscConfig+0x4a8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0f0      	beq.n	8005760 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d106      	bne.n	8005794 <HAL_RCC_OscConfig+0x480>
 8005786:	4b0c      	ldr	r3, [pc, #48]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800578a:	4a0b      	ldr	r2, [pc, #44]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	6713      	str	r3, [r2, #112]	@ 0x70
 8005792:	e032      	b.n	80057fa <HAL_RCC_OscConfig+0x4e6>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d111      	bne.n	80057c0 <HAL_RCC_OscConfig+0x4ac>
 800579c:	4b06      	ldr	r3, [pc, #24]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a0:	4a05      	ldr	r2, [pc, #20]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 80057a2:	f023 0301 	bic.w	r3, r3, #1
 80057a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057a8:	4b03      	ldr	r3, [pc, #12]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 80057aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ac:	4a02      	ldr	r2, [pc, #8]	@ (80057b8 <HAL_RCC_OscConfig+0x4a4>)
 80057ae:	f023 0304 	bic.w	r3, r3, #4
 80057b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057b4:	e021      	b.n	80057fa <HAL_RCC_OscConfig+0x4e6>
 80057b6:	bf00      	nop
 80057b8:	58024400 	.word	0x58024400
 80057bc:	58024800 	.word	0x58024800
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b05      	cmp	r3, #5
 80057c6:	d10c      	bne.n	80057e2 <HAL_RCC_OscConfig+0x4ce>
 80057c8:	4b83      	ldr	r3, [pc, #524]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80057ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057cc:	4a82      	ldr	r2, [pc, #520]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80057ce:	f043 0304 	orr.w	r3, r3, #4
 80057d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057d4:	4b80      	ldr	r3, [pc, #512]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d8:	4a7f      	ldr	r2, [pc, #508]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80057da:	f043 0301 	orr.w	r3, r3, #1
 80057de:	6713      	str	r3, [r2, #112]	@ 0x70
 80057e0:	e00b      	b.n	80057fa <HAL_RCC_OscConfig+0x4e6>
 80057e2:	4b7d      	ldr	r3, [pc, #500]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80057e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e6:	4a7c      	ldr	r2, [pc, #496]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80057e8:	f023 0301 	bic.w	r3, r3, #1
 80057ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ee:	4b7a      	ldr	r3, [pc, #488]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80057f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f2:	4a79      	ldr	r2, [pc, #484]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80057f4:	f023 0304 	bic.w	r3, r3, #4
 80057f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d015      	beq.n	800582e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005802:	f7fd fa9f 	bl	8002d44 <HAL_GetTick>
 8005806:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005808:	e00a      	b.n	8005820 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580a:	f7fd fa9b 	bl	8002d44 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005818:	4293      	cmp	r3, r2
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e14b      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005820:	4b6d      	ldr	r3, [pc, #436]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 8005822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005824:	f003 0302 	and.w	r3, r3, #2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0ee      	beq.n	800580a <HAL_RCC_OscConfig+0x4f6>
 800582c:	e014      	b.n	8005858 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582e:	f7fd fa89 	bl	8002d44 <HAL_GetTick>
 8005832:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005834:	e00a      	b.n	800584c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005836:	f7fd fa85 	bl	8002d44 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005844:	4293      	cmp	r3, r2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e135      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800584c:	4b62      	ldr	r3, [pc, #392]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 800584e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1ee      	bne.n	8005836 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 812a 	beq.w	8005ab6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005862:	4b5d      	ldr	r3, [pc, #372]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800586a:	2b18      	cmp	r3, #24
 800586c:	f000 80ba 	beq.w	80059e4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005874:	2b02      	cmp	r3, #2
 8005876:	f040 8095 	bne.w	80059a4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587a:	4b57      	ldr	r3, [pc, #348]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a56      	ldr	r2, [pc, #344]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 8005880:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005886:	f7fd fa5d 	bl	8002d44 <HAL_GetTick>
 800588a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800588c:	e008      	b.n	80058a0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800588e:	f7fd fa59 	bl	8002d44 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e10b      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058a0:	4b4d      	ldr	r3, [pc, #308]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1f0      	bne.n	800588e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058ac:	4b4a      	ldr	r3, [pc, #296]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80058ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058b0:	4b4a      	ldr	r3, [pc, #296]	@ (80059dc <HAL_RCC_OscConfig+0x6c8>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058bc:	0112      	lsls	r2, r2, #4
 80058be:	430a      	orrs	r2, r1
 80058c0:	4945      	ldr	r1, [pc, #276]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	628b      	str	r3, [r1, #40]	@ 0x28
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ca:	3b01      	subs	r3, #1
 80058cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d4:	3b01      	subs	r3, #1
 80058d6:	025b      	lsls	r3, r3, #9
 80058d8:	b29b      	uxth	r3, r3
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e0:	3b01      	subs	r3, #1
 80058e2:	041b      	lsls	r3, r3, #16
 80058e4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ee:	3b01      	subs	r3, #1
 80058f0:	061b      	lsls	r3, r3, #24
 80058f2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058f6:	4938      	ldr	r1, [pc, #224]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80058fc:	4b36      	ldr	r3, [pc, #216]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	4a35      	ldr	r2, [pc, #212]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 8005902:	f023 0301 	bic.w	r3, r3, #1
 8005906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005908:	4b33      	ldr	r3, [pc, #204]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 800590a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800590c:	4b34      	ldr	r3, [pc, #208]	@ (80059e0 <HAL_RCC_OscConfig+0x6cc>)
 800590e:	4013      	ands	r3, r2
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005914:	00d2      	lsls	r2, r2, #3
 8005916:	4930      	ldr	r1, [pc, #192]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 8005918:	4313      	orrs	r3, r2
 800591a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800591c:	4b2e      	ldr	r3, [pc, #184]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 800591e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005920:	f023 020c 	bic.w	r2, r3, #12
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005928:	492b      	ldr	r1, [pc, #172]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 800592a:	4313      	orrs	r3, r2
 800592c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800592e:	4b2a      	ldr	r3, [pc, #168]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 8005930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005932:	f023 0202 	bic.w	r2, r3, #2
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593a:	4927      	ldr	r1, [pc, #156]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 800593c:	4313      	orrs	r3, r2
 800593e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005940:	4b25      	ldr	r3, [pc, #148]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 8005942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005944:	4a24      	ldr	r2, [pc, #144]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 8005946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800594a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800594c:	4b22      	ldr	r3, [pc, #136]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 800594e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005950:	4a21      	ldr	r2, [pc, #132]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 8005952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005956:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005958:	4b1f      	ldr	r3, [pc, #124]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 800595a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595c:	4a1e      	ldr	r2, [pc, #120]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 800595e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005964:	4b1c      	ldr	r3, [pc, #112]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 8005966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005968:	4a1b      	ldr	r2, [pc, #108]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005970:	4b19      	ldr	r3, [pc, #100]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a18      	ldr	r2, [pc, #96]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 8005976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800597a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fd f9e2 	bl	8002d44 <HAL_GetTick>
 8005980:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005984:	f7fd f9de 	bl	8002d44 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e090      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005996:	4b10      	ldr	r3, [pc, #64]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f0      	beq.n	8005984 <HAL_RCC_OscConfig+0x670>
 80059a2:	e088      	b.n	8005ab6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a4:	4b0c      	ldr	r3, [pc, #48]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a0b      	ldr	r2, [pc, #44]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80059aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b0:	f7fd f9c8 	bl	8002d44 <HAL_GetTick>
 80059b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b8:	f7fd f9c4 	bl	8002d44 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e076      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059ca:	4b03      	ldr	r3, [pc, #12]	@ (80059d8 <HAL_RCC_OscConfig+0x6c4>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1f0      	bne.n	80059b8 <HAL_RCC_OscConfig+0x6a4>
 80059d6:	e06e      	b.n	8005ab6 <HAL_RCC_OscConfig+0x7a2>
 80059d8:	58024400 	.word	0x58024400
 80059dc:	fffffc0c 	.word	0xfffffc0c
 80059e0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059e4:	4b36      	ldr	r3, [pc, #216]	@ (8005ac0 <HAL_RCC_OscConfig+0x7ac>)
 80059e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059ea:	4b35      	ldr	r3, [pc, #212]	@ (8005ac0 <HAL_RCC_OscConfig+0x7ac>)
 80059ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d031      	beq.n	8005a5c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f003 0203 	and.w	r2, r3, #3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d12a      	bne.n	8005a5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d122      	bne.n	8005a5c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d11a      	bne.n	8005a5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	0a5b      	lsrs	r3, r3, #9
 8005a2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d111      	bne.n	8005a5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	0c1b      	lsrs	r3, r3, #16
 8005a3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d108      	bne.n	8005a5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	0e1b      	lsrs	r3, r3, #24
 8005a4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d001      	beq.n	8005a60 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e02b      	b.n	8005ab8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005a60:	4b17      	ldr	r3, [pc, #92]	@ (8005ac0 <HAL_RCC_OscConfig+0x7ac>)
 8005a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a64:	08db      	lsrs	r3, r3, #3
 8005a66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d01f      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005a76:	4b12      	ldr	r3, [pc, #72]	@ (8005ac0 <HAL_RCC_OscConfig+0x7ac>)
 8005a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7a:	4a11      	ldr	r2, [pc, #68]	@ (8005ac0 <HAL_RCC_OscConfig+0x7ac>)
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a82:	f7fd f95f 	bl	8002d44 <HAL_GetTick>
 8005a86:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005a88:	bf00      	nop
 8005a8a:	f7fd f95b 	bl	8002d44 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d0f9      	beq.n	8005a8a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a96:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac0 <HAL_RCC_OscConfig+0x7ac>)
 8005a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac4 <HAL_RCC_OscConfig+0x7b0>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005aa2:	00d2      	lsls	r2, r2, #3
 8005aa4:	4906      	ldr	r1, [pc, #24]	@ (8005ac0 <HAL_RCC_OscConfig+0x7ac>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005aaa:	4b05      	ldr	r3, [pc, #20]	@ (8005ac0 <HAL_RCC_OscConfig+0x7ac>)
 8005aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aae:	4a04      	ldr	r2, [pc, #16]	@ (8005ac0 <HAL_RCC_OscConfig+0x7ac>)
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3730      	adds	r7, #48	@ 0x30
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	ffff0007 	.word	0xffff0007

08005ac8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e19c      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005adc:	4b8a      	ldr	r3, [pc, #552]	@ (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d910      	bls.n	8005b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aea:	4b87      	ldr	r3, [pc, #540]	@ (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f023 020f 	bic.w	r2, r3, #15
 8005af2:	4985      	ldr	r1, [pc, #532]	@ (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afa:	4b83      	ldr	r3, [pc, #524]	@ (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d001      	beq.n	8005b0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e184      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d010      	beq.n	8005b3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	4b7b      	ldr	r3, [pc, #492]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d908      	bls.n	8005b3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b28:	4b78      	ldr	r3, [pc, #480]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	4975      	ldr	r1, [pc, #468]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d010      	beq.n	8005b68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695a      	ldr	r2, [r3, #20]
 8005b4a:	4b70      	ldr	r3, [pc, #448]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d908      	bls.n	8005b68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b56:	4b6d      	ldr	r3, [pc, #436]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	496a      	ldr	r1, [pc, #424]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0310 	and.w	r3, r3, #16
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d010      	beq.n	8005b96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	699a      	ldr	r2, [r3, #24]
 8005b78:	4b64      	ldr	r3, [pc, #400]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d908      	bls.n	8005b96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b84:	4b61      	ldr	r3, [pc, #388]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	495e      	ldr	r1, [pc, #376]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d010      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69da      	ldr	r2, [r3, #28]
 8005ba6:	4b59      	ldr	r3, [pc, #356]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d908      	bls.n	8005bc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005bb2:	4b56      	ldr	r3, [pc, #344]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	4953      	ldr	r1, [pc, #332]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d010      	beq.n	8005bf2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d908      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005be0:	4b4a      	ldr	r3, [pc, #296]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	f023 020f 	bic.w	r2, r3, #15
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4947      	ldr	r1, [pc, #284]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d055      	beq.n	8005caa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bfe:	4b43      	ldr	r3, [pc, #268]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	4940      	ldr	r1, [pc, #256]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d107      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c18:	4b3c      	ldr	r3, [pc, #240]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d121      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e0f6      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d107      	bne.n	8005c40 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c30:	4b36      	ldr	r3, [pc, #216]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d115      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0ea      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d107      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c48:	4b30      	ldr	r3, [pc, #192]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d109      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0de      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c58:	4b2c      	ldr	r3, [pc, #176]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0d6      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c68:	4b28      	ldr	r3, [pc, #160]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f023 0207 	bic.w	r2, r3, #7
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	4925      	ldr	r1, [pc, #148]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c7a:	f7fd f863 	bl	8002d44 <HAL_GetTick>
 8005c7e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c80:	e00a      	b.n	8005c98 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c82:	f7fd f85f 	bl	8002d44 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e0be      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c98:	4b1c      	ldr	r3, [pc, #112]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d1eb      	bne.n	8005c82 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d010      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	4b14      	ldr	r3, [pc, #80]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d208      	bcs.n	8005cd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc6:	4b11      	ldr	r3, [pc, #68]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	f023 020f 	bic.w	r2, r3, #15
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	490e      	ldr	r1, [pc, #56]	@ (8005d0c <HAL_RCC_ClockConfig+0x244>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 030f 	and.w	r3, r3, #15
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d214      	bcs.n	8005d10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce6:	4b08      	ldr	r3, [pc, #32]	@ (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f023 020f 	bic.w	r2, r3, #15
 8005cee:	4906      	ldr	r1, [pc, #24]	@ (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf6:	4b04      	ldr	r3, [pc, #16]	@ (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d005      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e086      	b.n	8005e16 <HAL_RCC_ClockConfig+0x34e>
 8005d08:	52002000 	.word	0x52002000
 8005d0c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d010      	beq.n	8005d3e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	4b3f      	ldr	r3, [pc, #252]	@ (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d208      	bcs.n	8005d3e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d2c:	4b3c      	ldr	r3, [pc, #240]	@ (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	4939      	ldr	r1, [pc, #228]	@ (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0308 	and.w	r3, r3, #8
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d010      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	695a      	ldr	r2, [r3, #20]
 8005d4e:	4b34      	ldr	r3, [pc, #208]	@ (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d208      	bcs.n	8005d6c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d5a:	4b31      	ldr	r3, [pc, #196]	@ (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	492e      	ldr	r1, [pc, #184]	@ (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0310 	and.w	r3, r3, #16
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d010      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699a      	ldr	r2, [r3, #24]
 8005d7c:	4b28      	ldr	r3, [pc, #160]	@ (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d208      	bcs.n	8005d9a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d88:	4b25      	ldr	r3, [pc, #148]	@ (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	4922      	ldr	r1, [pc, #136]	@ (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d010      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69da      	ldr	r2, [r3, #28]
 8005daa:	4b1d      	ldr	r3, [pc, #116]	@ (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d208      	bcs.n	8005dc8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005db6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	4917      	ldr	r1, [pc, #92]	@ (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005dc8:	f000 f834 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	4b14      	ldr	r3, [pc, #80]	@ (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	0a1b      	lsrs	r3, r3, #8
 8005dd4:	f003 030f 	and.w	r3, r3, #15
 8005dd8:	4912      	ldr	r1, [pc, #72]	@ (8005e24 <HAL_RCC_ClockConfig+0x35c>)
 8005dda:	5ccb      	ldrb	r3, [r1, r3]
 8005ddc:	f003 031f 	and.w	r3, r3, #31
 8005de0:	fa22 f303 	lsr.w	r3, r2, r3
 8005de4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005de6:	4b0e      	ldr	r3, [pc, #56]	@ (8005e20 <HAL_RCC_ClockConfig+0x358>)
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	4a0d      	ldr	r2, [pc, #52]	@ (8005e24 <HAL_RCC_ClockConfig+0x35c>)
 8005df0:	5cd3      	ldrb	r3, [r2, r3]
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8005e28 <HAL_RCC_ClockConfig+0x360>)
 8005dfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e00:	4a0a      	ldr	r2, [pc, #40]	@ (8005e2c <HAL_RCC_ClockConfig+0x364>)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005e06:	4b0a      	ldr	r3, [pc, #40]	@ (8005e30 <HAL_RCC_ClockConfig+0x368>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fc ff50 	bl	8002cb0 <HAL_InitTick>
 8005e10:	4603      	mov	r3, r0
 8005e12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	58024400 	.word	0x58024400
 8005e24:	080132a0 	.word	0x080132a0
 8005e28:	2400000c 	.word	0x2400000c
 8005e2c:	24000008 	.word	0x24000008
 8005e30:	24000040 	.word	0x24000040

08005e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b089      	sub	sp, #36	@ 0x24
 8005e38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e3a:	4bb3      	ldr	r3, [pc, #716]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e42:	2b18      	cmp	r3, #24
 8005e44:	f200 8155 	bhi.w	80060f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005e48:	a201      	add	r2, pc, #4	@ (adr r2, 8005e50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005eb5 	.word	0x08005eb5
 8005e54:	080060f3 	.word	0x080060f3
 8005e58:	080060f3 	.word	0x080060f3
 8005e5c:	080060f3 	.word	0x080060f3
 8005e60:	080060f3 	.word	0x080060f3
 8005e64:	080060f3 	.word	0x080060f3
 8005e68:	080060f3 	.word	0x080060f3
 8005e6c:	080060f3 	.word	0x080060f3
 8005e70:	08005edb 	.word	0x08005edb
 8005e74:	080060f3 	.word	0x080060f3
 8005e78:	080060f3 	.word	0x080060f3
 8005e7c:	080060f3 	.word	0x080060f3
 8005e80:	080060f3 	.word	0x080060f3
 8005e84:	080060f3 	.word	0x080060f3
 8005e88:	080060f3 	.word	0x080060f3
 8005e8c:	080060f3 	.word	0x080060f3
 8005e90:	08005ee1 	.word	0x08005ee1
 8005e94:	080060f3 	.word	0x080060f3
 8005e98:	080060f3 	.word	0x080060f3
 8005e9c:	080060f3 	.word	0x080060f3
 8005ea0:	080060f3 	.word	0x080060f3
 8005ea4:	080060f3 	.word	0x080060f3
 8005ea8:	080060f3 	.word	0x080060f3
 8005eac:	080060f3 	.word	0x080060f3
 8005eb0:	08005ee7 	.word	0x08005ee7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eb4:	4b94      	ldr	r3, [pc, #592]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d009      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ec0:	4b91      	ldr	r3, [pc, #580]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	08db      	lsrs	r3, r3, #3
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	4a90      	ldr	r2, [pc, #576]	@ (800610c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005ed2:	e111      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ed4:	4b8d      	ldr	r3, [pc, #564]	@ (800610c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ed6:	61bb      	str	r3, [r7, #24]
      break;
 8005ed8:	e10e      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005eda:	4b8d      	ldr	r3, [pc, #564]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005edc:	61bb      	str	r3, [r7, #24]
      break;
 8005ede:	e10b      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005ee0:	4b8c      	ldr	r3, [pc, #560]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005ee2:	61bb      	str	r3, [r7, #24]
      break;
 8005ee4:	e108      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ee6:	4b88      	ldr	r3, [pc, #544]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005ef0:	4b85      	ldr	r3, [pc, #532]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef4:	091b      	lsrs	r3, r3, #4
 8005ef6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005efa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005efc:	4b82      	ldr	r3, [pc, #520]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f06:	4b80      	ldr	r3, [pc, #512]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f0a:	08db      	lsrs	r3, r3, #3
 8005f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	fb02 f303 	mul.w	r3, r2, r3
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80e1 	beq.w	80060ec <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	f000 8083 	beq.w	8006038 <HAL_RCC_GetSysClockFreq+0x204>
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	f200 80a1 	bhi.w	800607c <HAL_RCC_GetSysClockFreq+0x248>
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_RCC_GetSysClockFreq+0x114>
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d056      	beq.n	8005ff4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f46:	e099      	b.n	800607c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f48:	4b6f      	ldr	r3, [pc, #444]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d02d      	beq.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f54:	4b6c      	ldr	r3, [pc, #432]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	08db      	lsrs	r3, r3, #3
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	4a6b      	ldr	r2, [pc, #428]	@ (800610c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
 8005f64:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	ee07 3a90 	vmov	s15, r3
 8005f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7e:	4b62      	ldr	r3, [pc, #392]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f92:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006118 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005faa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005fae:	e087      	b.n	80060c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800611c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc2:	4b51      	ldr	r3, [pc, #324]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fd6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006118 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ff2:	e065      	b.n	80060c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006120 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006006:	4b40      	ldr	r3, [pc, #256]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006016:	ed97 6a02 	vldr	s12, [r7, #8]
 800601a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006118 <HAL_RCC_GetSysClockFreq+0x2e4>
 800601e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800602a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006032:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006036:	e043      	b.n	80060c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	ee07 3a90 	vmov	s15, r3
 800603e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006042:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006124 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800604a:	4b2f      	ldr	r3, [pc, #188]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800604c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006052:	ee07 3a90 	vmov	s15, r3
 8006056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800605a:	ed97 6a02 	vldr	s12, [r7, #8]
 800605e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006118 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800606a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800606e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006076:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800607a:	e021      	b.n	80060c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	ee07 3a90 	vmov	s15, r3
 8006082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006086:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006120 <HAL_RCC_GetSysClockFreq+0x2ec>
 800608a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800608e:	4b1e      	ldr	r3, [pc, #120]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006096:	ee07 3a90 	vmov	s15, r3
 800609a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800609e:	ed97 6a02 	vldr	s12, [r7, #8]
 80060a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006118 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80060c0:	4b11      	ldr	r3, [pc, #68]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c4:	0a5b      	lsrs	r3, r3, #9
 80060c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060ca:	3301      	adds	r3, #1
 80060cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060e4:	ee17 3a90 	vmov	r3, s15
 80060e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80060ea:	e005      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61bb      	str	r3, [r7, #24]
      break;
 80060f0:	e002      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80060f2:	4b07      	ldr	r3, [pc, #28]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060f4:	61bb      	str	r3, [r7, #24]
      break;
 80060f6:	bf00      	nop
  }

  return sysclockfreq;
 80060f8:	69bb      	ldr	r3, [r7, #24]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3724      	adds	r7, #36	@ 0x24
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	58024400 	.word	0x58024400
 800610c:	03d09000 	.word	0x03d09000
 8006110:	003d0900 	.word	0x003d0900
 8006114:	017d7840 	.word	0x017d7840
 8006118:	46000000 	.word	0x46000000
 800611c:	4c742400 	.word	0x4c742400
 8006120:	4a742400 	.word	0x4a742400
 8006124:	4bbebc20 	.word	0x4bbebc20

08006128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800612e:	f7ff fe81 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 8006132:	4602      	mov	r2, r0
 8006134:	4b10      	ldr	r3, [pc, #64]	@ (8006178 <HAL_RCC_GetHCLKFreq+0x50>)
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	0a1b      	lsrs	r3, r3, #8
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	490f      	ldr	r1, [pc, #60]	@ (800617c <HAL_RCC_GetHCLKFreq+0x54>)
 8006140:	5ccb      	ldrb	r3, [r1, r3]
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	fa22 f303 	lsr.w	r3, r2, r3
 800614a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800614c:	4b0a      	ldr	r3, [pc, #40]	@ (8006178 <HAL_RCC_GetHCLKFreq+0x50>)
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	4a09      	ldr	r2, [pc, #36]	@ (800617c <HAL_RCC_GetHCLKFreq+0x54>)
 8006156:	5cd3      	ldrb	r3, [r2, r3]
 8006158:	f003 031f 	and.w	r3, r3, #31
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	fa22 f303 	lsr.w	r3, r2, r3
 8006162:	4a07      	ldr	r2, [pc, #28]	@ (8006180 <HAL_RCC_GetHCLKFreq+0x58>)
 8006164:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006166:	4a07      	ldr	r2, [pc, #28]	@ (8006184 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800616c:	4b04      	ldr	r3, [pc, #16]	@ (8006180 <HAL_RCC_GetHCLKFreq+0x58>)
 800616e:	681b      	ldr	r3, [r3, #0]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	58024400 	.word	0x58024400
 800617c:	080132a0 	.word	0x080132a0
 8006180:	2400000c 	.word	0x2400000c
 8006184:	24000008 	.word	0x24000008

08006188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800618c:	f7ff ffcc 	bl	8006128 <HAL_RCC_GetHCLKFreq>
 8006190:	4602      	mov	r2, r0
 8006192:	4b06      	ldr	r3, [pc, #24]	@ (80061ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	091b      	lsrs	r3, r3, #4
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	4904      	ldr	r1, [pc, #16]	@ (80061b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800619e:	5ccb      	ldrb	r3, [r1, r3]
 80061a0:	f003 031f 	and.w	r3, r3, #31
 80061a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	58024400 	.word	0x58024400
 80061b0:	080132a0 	.word	0x080132a0

080061b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80061b8:	f7ff ffb6 	bl	8006128 <HAL_RCC_GetHCLKFreq>
 80061bc:	4602      	mov	r2, r0
 80061be:	4b06      	ldr	r3, [pc, #24]	@ (80061d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	0a1b      	lsrs	r3, r3, #8
 80061c4:	f003 0307 	and.w	r3, r3, #7
 80061c8:	4904      	ldr	r1, [pc, #16]	@ (80061dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80061ca:	5ccb      	ldrb	r3, [r1, r3]
 80061cc:	f003 031f 	and.w	r3, r3, #31
 80061d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	58024400 	.word	0x58024400
 80061dc:	080132a0 	.word	0x080132a0

080061e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061e4:	b0c6      	sub	sp, #280	@ 0x118
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061ec:	2300      	movs	r3, #0
 80061ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061f2:	2300      	movs	r3, #0
 80061f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006204:	2500      	movs	r5, #0
 8006206:	ea54 0305 	orrs.w	r3, r4, r5
 800620a:	d049      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800620c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006212:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006216:	d02f      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006218:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800621c:	d828      	bhi.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800621e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006222:	d01a      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006224:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006228:	d822      	bhi.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800622e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006232:	d007      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006234:	e01c      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006236:	4bab      	ldr	r3, [pc, #684]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623a:	4aaa      	ldr	r2, [pc, #680]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800623c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006240:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006242:	e01a      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006248:	3308      	adds	r3, #8
 800624a:	2102      	movs	r1, #2
 800624c:	4618      	mov	r0, r3
 800624e:	f001 fc25 	bl	8007a9c <RCCEx_PLL2_Config>
 8006252:	4603      	mov	r3, r0
 8006254:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006258:	e00f      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800625a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625e:	3328      	adds	r3, #40	@ 0x28
 8006260:	2102      	movs	r1, #2
 8006262:	4618      	mov	r0, r3
 8006264:	f001 fccc 	bl	8007c00 <RCCEx_PLL3_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800626e:	e004      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006276:	e000      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800627a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10a      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006282:	4b98      	ldr	r3, [pc, #608]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006286:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800628a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006290:	4a94      	ldr	r2, [pc, #592]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006292:	430b      	orrs	r3, r1
 8006294:	6513      	str	r3, [r2, #80]	@ 0x50
 8006296:	e003      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800629c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80062ac:	f04f 0900 	mov.w	r9, #0
 80062b0:	ea58 0309 	orrs.w	r3, r8, r9
 80062b4:	d047      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80062b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062bc:	2b04      	cmp	r3, #4
 80062be:	d82a      	bhi.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80062c0:	a201      	add	r2, pc, #4	@ (adr r2, 80062c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80062c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	080062dd 	.word	0x080062dd
 80062cc:	080062eb 	.word	0x080062eb
 80062d0:	08006301 	.word	0x08006301
 80062d4:	0800631f 	.word	0x0800631f
 80062d8:	0800631f 	.word	0x0800631f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062dc:	4b81      	ldr	r3, [pc, #516]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e0:	4a80      	ldr	r2, [pc, #512]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062e8:	e01a      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ee:	3308      	adds	r3, #8
 80062f0:	2100      	movs	r1, #0
 80062f2:	4618      	mov	r0, r3
 80062f4:	f001 fbd2 	bl	8007a9c <RCCEx_PLL2_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062fe:	e00f      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006304:	3328      	adds	r3, #40	@ 0x28
 8006306:	2100      	movs	r1, #0
 8006308:	4618      	mov	r0, r3
 800630a:	f001 fc79 	bl	8007c00 <RCCEx_PLL3_Config>
 800630e:	4603      	mov	r3, r0
 8006310:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006314:	e004      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800631c:	e000      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800631e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006320:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006328:	4b6e      	ldr	r3, [pc, #440]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800632a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800632c:	f023 0107 	bic.w	r1, r3, #7
 8006330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006336:	4a6b      	ldr	r2, [pc, #428]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006338:	430b      	orrs	r3, r1
 800633a:	6513      	str	r3, [r2, #80]	@ 0x50
 800633c:	e003      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006342:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006352:	f04f 0b00 	mov.w	fp, #0
 8006356:	ea5a 030b 	orrs.w	r3, sl, fp
 800635a:	d05b      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800635c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006360:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006364:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006368:	d03b      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800636a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800636e:	d834      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006370:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006374:	d037      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006376:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800637a:	d82e      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800637c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006380:	d033      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006382:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006386:	d828      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006388:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800638c:	d01a      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800638e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006392:	d822      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006398:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800639c:	d007      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800639e:	e01c      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a0:	4b50      	ldr	r3, [pc, #320]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a4:	4a4f      	ldr	r2, [pc, #316]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063ac:	e01e      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b2:	3308      	adds	r3, #8
 80063b4:	2100      	movs	r1, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 fb70 	bl	8007a9c <RCCEx_PLL2_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80063c2:	e013      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c8:	3328      	adds	r3, #40	@ 0x28
 80063ca:	2100      	movs	r1, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 fc17 	bl	8007c00 <RCCEx_PLL3_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063d8:	e008      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063e0:	e004      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80063e2:	bf00      	nop
 80063e4:	e002      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80063e6:	bf00      	nop
 80063e8:	e000      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80063ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10b      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063f4:	4b3b      	ldr	r3, [pc, #236]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80063fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006400:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006404:	4a37      	ldr	r2, [pc, #220]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006406:	430b      	orrs	r3, r1
 8006408:	6593      	str	r3, [r2, #88]	@ 0x58
 800640a:	e003      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006410:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006420:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006424:	2300      	movs	r3, #0
 8006426:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800642a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800642e:	460b      	mov	r3, r1
 8006430:	4313      	orrs	r3, r2
 8006432:	d05d      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006438:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800643c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006440:	d03b      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006442:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006446:	d834      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006448:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800644c:	d037      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800644e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006452:	d82e      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006454:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006458:	d033      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800645a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800645e:	d828      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006460:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006464:	d01a      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006466:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800646a:	d822      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006474:	d007      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006476:	e01c      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006478:	4b1a      	ldr	r3, [pc, #104]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800647a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647c:	4a19      	ldr	r2, [pc, #100]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800647e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006484:	e01e      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648a:	3308      	adds	r3, #8
 800648c:	2100      	movs	r1, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f001 fb04 	bl	8007a9c <RCCEx_PLL2_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800649a:	e013      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a0:	3328      	adds	r3, #40	@ 0x28
 80064a2:	2100      	movs	r1, #0
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 fbab 	bl	8007c00 <RCCEx_PLL3_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064b0:	e008      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064b8:	e004      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80064ba:	bf00      	nop
 80064bc:	e002      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80064be:	bf00      	nop
 80064c0:	e000      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80064c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10d      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064cc:	4b05      	ldr	r3, [pc, #20]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80064d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80064dc:	4a01      	ldr	r2, [pc, #4]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064de:	430b      	orrs	r3, r1
 80064e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80064e2:	e005      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80064e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80064fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006500:	2300      	movs	r3, #0
 8006502:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006506:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800650a:	460b      	mov	r3, r1
 800650c:	4313      	orrs	r3, r2
 800650e:	d03a      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006516:	2b30      	cmp	r3, #48	@ 0x30
 8006518:	d01f      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800651a:	2b30      	cmp	r3, #48	@ 0x30
 800651c:	d819      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800651e:	2b20      	cmp	r3, #32
 8006520:	d00c      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006522:	2b20      	cmp	r3, #32
 8006524:	d815      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006526:	2b00      	cmp	r3, #0
 8006528:	d019      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800652a:	2b10      	cmp	r3, #16
 800652c:	d111      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800652e:	4baa      	ldr	r3, [pc, #680]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006532:	4aa9      	ldr	r2, [pc, #676]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006534:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006538:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800653a:	e011      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006540:	3308      	adds	r3, #8
 8006542:	2102      	movs	r1, #2
 8006544:	4618      	mov	r0, r3
 8006546:	f001 faa9 	bl	8007a9c <RCCEx_PLL2_Config>
 800654a:	4603      	mov	r3, r0
 800654c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006550:	e006      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006558:	e002      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800655a:	bf00      	nop
 800655c:	e000      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800655e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006560:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006568:	4b9b      	ldr	r3, [pc, #620]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800656a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800656c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006576:	4a98      	ldr	r2, [pc, #608]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006578:	430b      	orrs	r3, r1
 800657a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800657c:	e003      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006582:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006592:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006596:	2300      	movs	r3, #0
 8006598:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800659c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80065a0:	460b      	mov	r3, r1
 80065a2:	4313      	orrs	r3, r2
 80065a4:	d051      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065b0:	d035      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80065b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065b6:	d82e      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80065b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065bc:	d031      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80065be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065c2:	d828      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80065c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065c8:	d01a      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80065ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ce:	d822      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80065d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065d8:	d007      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80065da:	e01c      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065dc:	4b7e      	ldr	r3, [pc, #504]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e0:	4a7d      	ldr	r2, [pc, #500]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065e8:	e01c      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ee:	3308      	adds	r3, #8
 80065f0:	2100      	movs	r1, #0
 80065f2:	4618      	mov	r0, r3
 80065f4:	f001 fa52 	bl	8007a9c <RCCEx_PLL2_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065fe:	e011      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006604:	3328      	adds	r3, #40	@ 0x28
 8006606:	2100      	movs	r1, #0
 8006608:	4618      	mov	r0, r3
 800660a:	f001 faf9 	bl	8007c00 <RCCEx_PLL3_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006614:	e006      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800661c:	e002      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800661e:	bf00      	nop
 8006620:	e000      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006624:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800662c:	4b6a      	ldr	r3, [pc, #424]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800662e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006630:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800663a:	4a67      	ldr	r2, [pc, #412]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800663c:	430b      	orrs	r3, r1
 800663e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006640:	e003      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006642:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006646:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800664a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006656:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800665a:	2300      	movs	r3, #0
 800665c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006660:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006664:	460b      	mov	r3, r1
 8006666:	4313      	orrs	r3, r2
 8006668:	d053      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800666a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006674:	d033      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006676:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800667a:	d82c      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800667c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006680:	d02f      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006682:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006686:	d826      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006688:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800668c:	d02b      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800668e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006692:	d820      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006698:	d012      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800669a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800669e:	d81a      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d022      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80066a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066a8:	d115      	bne.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ae:	3308      	adds	r3, #8
 80066b0:	2101      	movs	r1, #1
 80066b2:	4618      	mov	r0, r3
 80066b4:	f001 f9f2 	bl	8007a9c <RCCEx_PLL2_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066be:	e015      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c4:	3328      	adds	r3, #40	@ 0x28
 80066c6:	2101      	movs	r1, #1
 80066c8:	4618      	mov	r0, r3
 80066ca:	f001 fa99 	bl	8007c00 <RCCEx_PLL3_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066d4:	e00a      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066dc:	e006      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066de:	bf00      	nop
 80066e0:	e004      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066e2:	bf00      	nop
 80066e4:	e002      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066e6:	bf00      	nop
 80066e8:	e000      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80066f4:	4b38      	ldr	r3, [pc, #224]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80066fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006702:	4a35      	ldr	r2, [pc, #212]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006704:	430b      	orrs	r3, r1
 8006706:	6513      	str	r3, [r2, #80]	@ 0x50
 8006708:	e003      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800670e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800671e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006722:	2300      	movs	r3, #0
 8006724:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006728:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800672c:	460b      	mov	r3, r1
 800672e:	4313      	orrs	r3, r2
 8006730:	d058      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006736:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800673a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800673e:	d033      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006744:	d82c      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800674a:	d02f      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800674c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006750:	d826      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006752:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006756:	d02b      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006758:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800675c:	d820      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800675e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006762:	d012      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006768:	d81a      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d022      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800676e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006772:	d115      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006778:	3308      	adds	r3, #8
 800677a:	2101      	movs	r1, #1
 800677c:	4618      	mov	r0, r3
 800677e:	f001 f98d 	bl	8007a9c <RCCEx_PLL2_Config>
 8006782:	4603      	mov	r3, r0
 8006784:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006788:	e015      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800678e:	3328      	adds	r3, #40	@ 0x28
 8006790:	2101      	movs	r1, #1
 8006792:	4618      	mov	r0, r3
 8006794:	f001 fa34 	bl	8007c00 <RCCEx_PLL3_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800679e:	e00a      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067a6:	e006      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067a8:	bf00      	nop
 80067aa:	e004      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067ac:	bf00      	nop
 80067ae:	e002      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067b0:	bf00      	nop
 80067b2:	e000      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10e      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067be:	4b06      	ldr	r3, [pc, #24]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80067c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80067ce:	4a02      	ldr	r2, [pc, #8]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067d0:	430b      	orrs	r3, r1
 80067d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80067d4:	e006      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80067d6:	bf00      	nop
 80067d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80067f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067f4:	2300      	movs	r3, #0
 80067f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80067fe:	460b      	mov	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	d037      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800680a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800680e:	d00e      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006814:	d816      	bhi.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d018      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800681a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800681e:	d111      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006820:	4bc4      	ldr	r3, [pc, #784]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006824:	4ac3      	ldr	r2, [pc, #780]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800682a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800682c:	e00f      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800682e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006832:	3308      	adds	r3, #8
 8006834:	2101      	movs	r1, #1
 8006836:	4618      	mov	r0, r3
 8006838:	f001 f930 	bl	8007a9c <RCCEx_PLL2_Config>
 800683c:	4603      	mov	r3, r0
 800683e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006842:	e004      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800684a:	e000      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800684c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800684e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006856:	4bb7      	ldr	r3, [pc, #732]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800685a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800685e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006864:	4ab3      	ldr	r2, [pc, #716]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006866:	430b      	orrs	r3, r1
 8006868:	6513      	str	r3, [r2, #80]	@ 0x50
 800686a:	e003      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006870:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006880:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006884:	2300      	movs	r3, #0
 8006886:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800688a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800688e:	460b      	mov	r3, r1
 8006890:	4313      	orrs	r3, r2
 8006892:	d039      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800689a:	2b03      	cmp	r3, #3
 800689c:	d81c      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800689e:	a201      	add	r2, pc, #4	@ (adr r2, 80068a4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	080068e1 	.word	0x080068e1
 80068a8:	080068b5 	.word	0x080068b5
 80068ac:	080068c3 	.word	0x080068c3
 80068b0:	080068e1 	.word	0x080068e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068b4:	4b9f      	ldr	r3, [pc, #636]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b8:	4a9e      	ldr	r2, [pc, #632]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068c0:	e00f      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c6:	3308      	adds	r3, #8
 80068c8:	2102      	movs	r1, #2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 f8e6 	bl	8007a9c <RCCEx_PLL2_Config>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068d6:	e004      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068de:	e000      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80068e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10a      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068ea:	4b92      	ldr	r3, [pc, #584]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ee:	f023 0103 	bic.w	r1, r3, #3
 80068f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068f8:	4a8e      	ldr	r2, [pc, #568]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068fa:	430b      	orrs	r3, r1
 80068fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068fe:	e003      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006900:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006904:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006914:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006918:	2300      	movs	r3, #0
 800691a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800691e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006922:	460b      	mov	r3, r1
 8006924:	4313      	orrs	r3, r2
 8006926:	f000 8099 	beq.w	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800692a:	4b83      	ldr	r3, [pc, #524]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a82      	ldr	r2, [pc, #520]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006934:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006936:	f7fc fa05 	bl	8002d44 <HAL_GetTick>
 800693a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800693e:	e00b      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006940:	f7fc fa00 	bl	8002d44 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b64      	cmp	r3, #100	@ 0x64
 800694e:	d903      	bls.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006956:	e005      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006958:	4b77      	ldr	r3, [pc, #476]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006960:	2b00      	cmp	r3, #0
 8006962:	d0ed      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006964:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006968:	2b00      	cmp	r3, #0
 800696a:	d173      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800696c:	4b71      	ldr	r3, [pc, #452]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800696e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006978:	4053      	eors	r3, r2
 800697a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800697e:	2b00      	cmp	r3, #0
 8006980:	d015      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006982:	4b6c      	ldr	r3, [pc, #432]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800698a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800698e:	4b69      	ldr	r3, [pc, #420]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006992:	4a68      	ldr	r2, [pc, #416]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006998:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800699a:	4b66      	ldr	r3, [pc, #408]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800699c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699e:	4a65      	ldr	r2, [pc, #404]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069a4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80069a6:	4a63      	ldr	r2, [pc, #396]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ba:	d118      	bne.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069bc:	f7fc f9c2 	bl	8002d44 <HAL_GetTick>
 80069c0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069c4:	e00d      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069c6:	f7fc f9bd 	bl	8002d44 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80069d0:	1ad2      	subs	r2, r2, r3
 80069d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d903      	bls.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80069e0:	e005      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069e2:	4b54      	ldr	r3, [pc, #336]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0eb      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80069ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d129      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a06:	d10e      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006a08:	4b4a      	ldr	r3, [pc, #296]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a18:	091a      	lsrs	r2, r3, #4
 8006a1a:	4b48      	ldr	r3, [pc, #288]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	4a45      	ldr	r2, [pc, #276]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a20:	430b      	orrs	r3, r1
 8006a22:	6113      	str	r3, [r2, #16]
 8006a24:	e005      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006a26:	4b43      	ldr	r3, [pc, #268]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	4a42      	ldr	r2, [pc, #264]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a30:	6113      	str	r3, [r2, #16]
 8006a32:	4b40      	ldr	r3, [pc, #256]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a42:	4a3c      	ldr	r2, [pc, #240]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a44:	430b      	orrs	r3, r1
 8006a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a48:	e008      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006a52:	e003      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a64:	f002 0301 	and.w	r3, r2, #1
 8006a68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a76:	460b      	mov	r3, r1
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	f000 808f 	beq.w	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a84:	2b28      	cmp	r3, #40	@ 0x28
 8006a86:	d871      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006a88:	a201      	add	r2, pc, #4	@ (adr r2, 8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8e:	bf00      	nop
 8006a90:	08006b75 	.word	0x08006b75
 8006a94:	08006b6d 	.word	0x08006b6d
 8006a98:	08006b6d 	.word	0x08006b6d
 8006a9c:	08006b6d 	.word	0x08006b6d
 8006aa0:	08006b6d 	.word	0x08006b6d
 8006aa4:	08006b6d 	.word	0x08006b6d
 8006aa8:	08006b6d 	.word	0x08006b6d
 8006aac:	08006b6d 	.word	0x08006b6d
 8006ab0:	08006b41 	.word	0x08006b41
 8006ab4:	08006b6d 	.word	0x08006b6d
 8006ab8:	08006b6d 	.word	0x08006b6d
 8006abc:	08006b6d 	.word	0x08006b6d
 8006ac0:	08006b6d 	.word	0x08006b6d
 8006ac4:	08006b6d 	.word	0x08006b6d
 8006ac8:	08006b6d 	.word	0x08006b6d
 8006acc:	08006b6d 	.word	0x08006b6d
 8006ad0:	08006b57 	.word	0x08006b57
 8006ad4:	08006b6d 	.word	0x08006b6d
 8006ad8:	08006b6d 	.word	0x08006b6d
 8006adc:	08006b6d 	.word	0x08006b6d
 8006ae0:	08006b6d 	.word	0x08006b6d
 8006ae4:	08006b6d 	.word	0x08006b6d
 8006ae8:	08006b6d 	.word	0x08006b6d
 8006aec:	08006b6d 	.word	0x08006b6d
 8006af0:	08006b75 	.word	0x08006b75
 8006af4:	08006b6d 	.word	0x08006b6d
 8006af8:	08006b6d 	.word	0x08006b6d
 8006afc:	08006b6d 	.word	0x08006b6d
 8006b00:	08006b6d 	.word	0x08006b6d
 8006b04:	08006b6d 	.word	0x08006b6d
 8006b08:	08006b6d 	.word	0x08006b6d
 8006b0c:	08006b6d 	.word	0x08006b6d
 8006b10:	08006b75 	.word	0x08006b75
 8006b14:	08006b6d 	.word	0x08006b6d
 8006b18:	08006b6d 	.word	0x08006b6d
 8006b1c:	08006b6d 	.word	0x08006b6d
 8006b20:	08006b6d 	.word	0x08006b6d
 8006b24:	08006b6d 	.word	0x08006b6d
 8006b28:	08006b6d 	.word	0x08006b6d
 8006b2c:	08006b6d 	.word	0x08006b6d
 8006b30:	08006b75 	.word	0x08006b75
 8006b34:	58024400 	.word	0x58024400
 8006b38:	58024800 	.word	0x58024800
 8006b3c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b44:	3308      	adds	r3, #8
 8006b46:	2101      	movs	r1, #1
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 ffa7 	bl	8007a9c <RCCEx_PLL2_Config>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b54:	e00f      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5a:	3328      	adds	r3, #40	@ 0x28
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f001 f84e 	bl	8007c00 <RCCEx_PLL3_Config>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b6a:	e004      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b72:	e000      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b7e:	4bbf      	ldr	r3, [pc, #764]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b8c:	4abb      	ldr	r2, [pc, #748]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b8e:	430b      	orrs	r3, r1
 8006b90:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b92:	e003      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba4:	f002 0302 	and.w	r3, r2, #2
 8006ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bac:	2300      	movs	r3, #0
 8006bae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bb2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	d041      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bc2:	2b05      	cmp	r3, #5
 8006bc4:	d824      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bcc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006c19 	.word	0x08006c19
 8006bd0:	08006be5 	.word	0x08006be5
 8006bd4:	08006bfb 	.word	0x08006bfb
 8006bd8:	08006c19 	.word	0x08006c19
 8006bdc:	08006c19 	.word	0x08006c19
 8006be0:	08006c19 	.word	0x08006c19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be8:	3308      	adds	r3, #8
 8006bea:	2101      	movs	r1, #1
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 ff55 	bl	8007a9c <RCCEx_PLL2_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006bf8:	e00f      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfe:	3328      	adds	r3, #40	@ 0x28
 8006c00:	2101      	movs	r1, #1
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fffc 	bl	8007c00 <RCCEx_PLL3_Config>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c0e:	e004      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c16:	e000      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c22:	4b96      	ldr	r3, [pc, #600]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c26:	f023 0107 	bic.w	r1, r3, #7
 8006c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c30:	4a92      	ldr	r2, [pc, #584]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c32:	430b      	orrs	r3, r1
 8006c34:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c36:	e003      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f002 0304 	and.w	r3, r2, #4
 8006c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c50:	2300      	movs	r3, #0
 8006c52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c56:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	d044      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c68:	2b05      	cmp	r3, #5
 8006c6a:	d825      	bhi.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c74 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c72:	bf00      	nop
 8006c74:	08006cc1 	.word	0x08006cc1
 8006c78:	08006c8d 	.word	0x08006c8d
 8006c7c:	08006ca3 	.word	0x08006ca3
 8006c80:	08006cc1 	.word	0x08006cc1
 8006c84:	08006cc1 	.word	0x08006cc1
 8006c88:	08006cc1 	.word	0x08006cc1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c90:	3308      	adds	r3, #8
 8006c92:	2101      	movs	r1, #1
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 ff01 	bl	8007a9c <RCCEx_PLL2_Config>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ca0:	e00f      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca6:	3328      	adds	r3, #40	@ 0x28
 8006ca8:	2101      	movs	r1, #1
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 ffa8 	bl	8007c00 <RCCEx_PLL3_Config>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cb6:	e004      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cbe:	e000      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10b      	bne.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cca:	4b6c      	ldr	r3, [pc, #432]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cce:	f023 0107 	bic.w	r1, r3, #7
 8006cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cda:	4a68      	ldr	r2, [pc, #416]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ce0:	e003      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ce6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	f002 0320 	and.w	r3, r2, #32
 8006cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006d00:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006d04:	460b      	mov	r3, r1
 8006d06:	4313      	orrs	r3, r2
 8006d08:	d055      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d16:	d033      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d1c:	d82c      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d22:	d02f      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d28:	d826      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d2e:	d02b      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006d30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d34:	d820      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d3a:	d012      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006d3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d40:	d81a      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d022      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d4a:	d115      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d50:	3308      	adds	r3, #8
 8006d52:	2100      	movs	r1, #0
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 fea1 	bl	8007a9c <RCCEx_PLL2_Config>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d60:	e015      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d66:	3328      	adds	r3, #40	@ 0x28
 8006d68:	2102      	movs	r1, #2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 ff48 	bl	8007c00 <RCCEx_PLL3_Config>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d76:	e00a      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d7e:	e006      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d80:	bf00      	nop
 8006d82:	e004      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d84:	bf00      	nop
 8006d86:	e002      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d88:	bf00      	nop
 8006d8a:	e000      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10b      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d96:	4b39      	ldr	r3, [pc, #228]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d9a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006da6:	4a35      	ldr	r2, [pc, #212]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006da8:	430b      	orrs	r3, r1
 8006daa:	6553      	str	r3, [r2, #84]	@ 0x54
 8006dac:	e003      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006dc2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006dcc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	d058      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dde:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006de2:	d033      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006de4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006de8:	d82c      	bhi.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dee:	d02f      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df4:	d826      	bhi.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006df6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dfa:	d02b      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006dfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e00:	d820      	bhi.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006e02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e06:	d012      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006e08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e0c:	d81a      	bhi.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d022      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e16:	d115      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 fe3b 	bl	8007a9c <RCCEx_PLL2_Config>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e2c:	e015      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e32:	3328      	adds	r3, #40	@ 0x28
 8006e34:	2102      	movs	r1, #2
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 fee2 	bl	8007c00 <RCCEx_PLL3_Config>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e42:	e00a      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e4a:	e006      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e4c:	bf00      	nop
 8006e4e:	e004      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e50:	bf00      	nop
 8006e52:	e002      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e54:	bf00      	nop
 8006e56:	e000      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10e      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e62:	4b06      	ldr	r3, [pc, #24]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e66:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e72:	4a02      	ldr	r2, [pc, #8]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e74:	430b      	orrs	r3, r1
 8006e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e78:	e006      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006e7a:	bf00      	nop
 8006e7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006e94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e9e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	d055      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006eb0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006eb4:	d033      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006eb6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006eba:	d82c      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ec0:	d02f      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006ec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ec6:	d826      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ec8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ecc:	d02b      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006ece:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ed2:	d820      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ed4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ed8:	d012      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006eda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ede:	d81a      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d022      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006ee4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ee8:	d115      	bne.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eee:	3308      	adds	r3, #8
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 fdd2 	bl	8007a9c <RCCEx_PLL2_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006efe:	e015      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f04:	3328      	adds	r3, #40	@ 0x28
 8006f06:	2102      	movs	r1, #2
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 fe79 	bl	8007c00 <RCCEx_PLL3_Config>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f14:	e00a      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f1c:	e006      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006f1e:	bf00      	nop
 8006f20:	e004      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006f22:	bf00      	nop
 8006f24:	e002      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006f26:	bf00      	nop
 8006f28:	e000      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10b      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f34:	4ba0      	ldr	r3, [pc, #640]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f38:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f44:	4a9c      	ldr	r2, [pc, #624]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f46:	430b      	orrs	r3, r1
 8006f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f4a:	e003      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	f002 0308 	and.w	r3, r2, #8
 8006f60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f64:	2300      	movs	r3, #0
 8006f66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f6a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4313      	orrs	r3, r2
 8006f72:	d01e      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f80:	d10c      	bne.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f86:	3328      	adds	r3, #40	@ 0x28
 8006f88:	2102      	movs	r1, #2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fe38 	bl	8007c00 <RCCEx_PLL3_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006f9c:	4b86      	ldr	r3, [pc, #536]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fa0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fac:	4a82      	ldr	r2, [pc, #520]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fae:	430b      	orrs	r3, r1
 8006fb0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f002 0310 	and.w	r3, r2, #16
 8006fbe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fc8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	d01e      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fde:	d10c      	bne.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe4:	3328      	adds	r3, #40	@ 0x28
 8006fe6:	2102      	movs	r1, #2
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fe09 	bl	8007c00 <RCCEx_PLL3_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ffa:	4b6f      	ldr	r3, [pc, #444]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800700a:	4a6b      	ldr	r2, [pc, #428]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800700c:	430b      	orrs	r3, r1
 800700e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800701c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800701e:	2300      	movs	r3, #0
 8007020:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007022:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007026:	460b      	mov	r3, r1
 8007028:	4313      	orrs	r3, r2
 800702a:	d03e      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800702c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007030:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007034:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007038:	d022      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800703a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800703e:	d81b      	bhi.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007048:	d00b      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800704a:	e015      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800704c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007050:	3308      	adds	r3, #8
 8007052:	2100      	movs	r1, #0
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fd21 	bl	8007a9c <RCCEx_PLL2_Config>
 800705a:	4603      	mov	r3, r0
 800705c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007060:	e00f      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007066:	3328      	adds	r3, #40	@ 0x28
 8007068:	2102      	movs	r1, #2
 800706a:	4618      	mov	r0, r3
 800706c:	f000 fdc8 	bl	8007c00 <RCCEx_PLL3_Config>
 8007070:	4603      	mov	r3, r0
 8007072:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007076:	e004      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800707e:	e000      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007082:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10b      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800708a:	4b4b      	ldr	r3, [pc, #300]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800708c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800708e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007096:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800709a:	4a47      	ldr	r2, [pc, #284]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800709c:	430b      	orrs	r3, r1
 800709e:	6593      	str	r3, [r2, #88]	@ 0x58
 80070a0:	e003      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80070b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80070b8:	2300      	movs	r3, #0
 80070ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80070bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80070c0:	460b      	mov	r3, r1
 80070c2:	4313      	orrs	r3, r2
 80070c4:	d03b      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80070c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070d2:	d01f      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80070d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070d8:	d818      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80070da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070de:	d003      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80070e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070e4:	d007      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80070e6:	e011      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e8:	4b33      	ldr	r3, [pc, #204]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ec:	4a32      	ldr	r2, [pc, #200]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80070f4:	e00f      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fa:	3328      	adds	r3, #40	@ 0x28
 80070fc:	2101      	movs	r1, #1
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fd7e 	bl	8007c00 <RCCEx_PLL3_Config>
 8007104:	4603      	mov	r3, r0
 8007106:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800710a:	e004      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007112:	e000      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007116:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10b      	bne.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800711e:	4b26      	ldr	r3, [pc, #152]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007122:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800712e:	4a22      	ldr	r2, [pc, #136]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007130:	430b      	orrs	r3, r1
 8007132:	6553      	str	r3, [r2, #84]	@ 0x54
 8007134:	e003      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007136:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800713a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800713e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800714a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800714c:	2300      	movs	r3, #0
 800714e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007150:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007154:	460b      	mov	r3, r1
 8007156:	4313      	orrs	r3, r2
 8007158:	d034      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800715a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007168:	d007      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800716a:	e011      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800716c:	4b12      	ldr	r3, [pc, #72]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	4a11      	ldr	r2, [pc, #68]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007178:	e00e      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800717a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717e:	3308      	adds	r3, #8
 8007180:	2102      	movs	r1, #2
 8007182:	4618      	mov	r0, r3
 8007184:	f000 fc8a 	bl	8007a9c <RCCEx_PLL2_Config>
 8007188:	4603      	mov	r3, r0
 800718a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800718e:	e003      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007198:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10d      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80071a0:	4b05      	ldr	r3, [pc, #20]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ae:	4a02      	ldr	r2, [pc, #8]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071b0:	430b      	orrs	r3, r1
 80071b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071b4:	e006      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80071b6:	bf00      	nop
 80071b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80071d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80071d2:	2300      	movs	r3, #0
 80071d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80071d6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80071da:	460b      	mov	r3, r1
 80071dc:	4313      	orrs	r3, r2
 80071de:	d00c      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e4:	3328      	adds	r3, #40	@ 0x28
 80071e6:	2102      	movs	r1, #2
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 fd09 	bl	8007c00 <RCCEx_PLL3_Config>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d002      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80071fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007206:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007208:	2300      	movs	r3, #0
 800720a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800720c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007210:	460b      	mov	r3, r1
 8007212:	4313      	orrs	r3, r2
 8007214:	d036      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800721a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800721c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007220:	d018      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007226:	d811      	bhi.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800722c:	d014      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800722e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007232:	d80b      	bhi.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007234:	2b00      	cmp	r3, #0
 8007236:	d011      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800723c:	d106      	bne.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800723e:	4bb7      	ldr	r3, [pc, #732]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007242:	4ab6      	ldr	r2, [pc, #728]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007248:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800724a:	e008      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007252:	e004      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007254:	bf00      	nop
 8007256:	e002      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007258:	bf00      	nop
 800725a:	e000      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800725c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800725e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10a      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007266:	4bad      	ldr	r3, [pc, #692]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800726a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800726e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007272:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007274:	4aa9      	ldr	r2, [pc, #676]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007276:	430b      	orrs	r3, r1
 8007278:	6553      	str	r3, [r2, #84]	@ 0x54
 800727a:	e003      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007280:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007290:	653b      	str	r3, [r7, #80]	@ 0x50
 8007292:	2300      	movs	r3, #0
 8007294:	657b      	str	r3, [r7, #84]	@ 0x54
 8007296:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800729a:	460b      	mov	r3, r1
 800729c:	4313      	orrs	r3, r2
 800729e:	d009      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072a0:	4b9e      	ldr	r3, [pc, #632]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80072a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ae:	4a9b      	ldr	r2, [pc, #620]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072b0:	430b      	orrs	r3, r1
 80072b2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80072c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072c2:	2300      	movs	r3, #0
 80072c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80072ca:	460b      	mov	r3, r1
 80072cc:	4313      	orrs	r3, r2
 80072ce:	d009      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072d0:	4b92      	ldr	r3, [pc, #584]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072d4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80072d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072de:	4a8f      	ldr	r2, [pc, #572]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072e0:	430b      	orrs	r3, r1
 80072e2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80072f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80072f2:	2300      	movs	r3, #0
 80072f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80072fa:	460b      	mov	r3, r1
 80072fc:	4313      	orrs	r3, r2
 80072fe:	d00e      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007300:	4b86      	ldr	r3, [pc, #536]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	4a85      	ldr	r2, [pc, #532]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007306:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800730a:	6113      	str	r3, [r2, #16]
 800730c:	4b83      	ldr	r3, [pc, #524]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800730e:	6919      	ldr	r1, [r3, #16]
 8007310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007314:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007318:	4a80      	ldr	r2, [pc, #512]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800731a:	430b      	orrs	r3, r1
 800731c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800731e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800732a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800732c:	2300      	movs	r3, #0
 800732e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007330:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007334:	460b      	mov	r3, r1
 8007336:	4313      	orrs	r3, r2
 8007338:	d009      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800733a:	4b78      	ldr	r3, [pc, #480]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800733c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800733e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007348:	4a74      	ldr	r2, [pc, #464]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800734a:	430b      	orrs	r3, r1
 800734c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800734e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800735a:	633b      	str	r3, [r7, #48]	@ 0x30
 800735c:	2300      	movs	r3, #0
 800735e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007360:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007364:	460b      	mov	r3, r1
 8007366:	4313      	orrs	r3, r2
 8007368:	d00a      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800736a:	4b6c      	ldr	r3, [pc, #432]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800736c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800736e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800737a:	4a68      	ldr	r2, [pc, #416]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800737c:	430b      	orrs	r3, r1
 800737e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007388:	2100      	movs	r1, #0
 800738a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007392:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007396:	460b      	mov	r3, r1
 8007398:	4313      	orrs	r3, r2
 800739a:	d011      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800739c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a0:	3308      	adds	r3, #8
 80073a2:	2100      	movs	r1, #0
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 fb79 	bl	8007a9c <RCCEx_PLL2_Config>
 80073aa:	4603      	mov	r3, r0
 80073ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80073b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80073c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	2100      	movs	r1, #0
 80073ca:	6239      	str	r1, [r7, #32]
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80073d6:	460b      	mov	r3, r1
 80073d8:	4313      	orrs	r3, r2
 80073da:	d011      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e0:	3308      	adds	r3, #8
 80073e2:	2101      	movs	r1, #1
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fb59 	bl	8007a9c <RCCEx_PLL2_Config>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80073f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d003      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	2100      	movs	r1, #0
 800740a:	61b9      	str	r1, [r7, #24]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007416:	460b      	mov	r3, r1
 8007418:	4313      	orrs	r3, r2
 800741a:	d011      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800741c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007420:	3308      	adds	r3, #8
 8007422:	2102      	movs	r1, #2
 8007424:	4618      	mov	r0, r3
 8007426:	f000 fb39 	bl	8007a9c <RCCEx_PLL2_Config>
 800742a:	4603      	mov	r3, r0
 800742c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007434:	2b00      	cmp	r3, #0
 8007436:	d003      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007438:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800743c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007448:	2100      	movs	r1, #0
 800744a:	6139      	str	r1, [r7, #16]
 800744c:	f003 0308 	and.w	r3, r3, #8
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007456:	460b      	mov	r3, r1
 8007458:	4313      	orrs	r3, r2
 800745a:	d011      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800745c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007460:	3328      	adds	r3, #40	@ 0x28
 8007462:	2100      	movs	r1, #0
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fbcb 	bl	8007c00 <RCCEx_PLL3_Config>
 800746a:	4603      	mov	r3, r0
 800746c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007470:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007478:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800747c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	2100      	movs	r1, #0
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	f003 0310 	and.w	r3, r3, #16
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007496:	460b      	mov	r3, r1
 8007498:	4313      	orrs	r3, r2
 800749a:	d011      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800749c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a0:	3328      	adds	r3, #40	@ 0x28
 80074a2:	2101      	movs	r1, #1
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fbab 	bl	8007c00 <RCCEx_PLL3_Config>
 80074aa:	4603      	mov	r3, r0
 80074ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80074b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80074c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c8:	2100      	movs	r1, #0
 80074ca:	6039      	str	r1, [r7, #0]
 80074cc:	f003 0320 	and.w	r3, r3, #32
 80074d0:	607b      	str	r3, [r7, #4]
 80074d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80074d6:	460b      	mov	r3, r1
 80074d8:	4313      	orrs	r3, r2
 80074da:	d011      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e0:	3328      	adds	r3, #40	@ 0x28
 80074e2:	2102      	movs	r1, #2
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 fb8b 	bl	8007c00 <RCCEx_PLL3_Config>
 80074ea:	4603      	mov	r3, r0
 80074ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80074f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007500:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	e000      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
}
 800750e:	4618      	mov	r0, r3
 8007510:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007514:	46bd      	mov	sp, r7
 8007516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800751a:	bf00      	nop
 800751c:	58024400 	.word	0x58024400

08007520 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007524:	f7fe fe00 	bl	8006128 <HAL_RCC_GetHCLKFreq>
 8007528:	4602      	mov	r2, r0
 800752a:	4b06      	ldr	r3, [pc, #24]	@ (8007544 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	091b      	lsrs	r3, r3, #4
 8007530:	f003 0307 	and.w	r3, r3, #7
 8007534:	4904      	ldr	r1, [pc, #16]	@ (8007548 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007536:	5ccb      	ldrb	r3, [r1, r3]
 8007538:	f003 031f 	and.w	r3, r3, #31
 800753c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007540:	4618      	mov	r0, r3
 8007542:	bd80      	pop	{r7, pc}
 8007544:	58024400 	.word	0x58024400
 8007548:	080132a0 	.word	0x080132a0

0800754c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800754c:	b480      	push	{r7}
 800754e:	b089      	sub	sp, #36	@ 0x24
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007554:	4ba1      	ldr	r3, [pc, #644]	@ (80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007558:	f003 0303 	and.w	r3, r3, #3
 800755c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800755e:	4b9f      	ldr	r3, [pc, #636]	@ (80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007562:	0b1b      	lsrs	r3, r3, #12
 8007564:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007568:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800756a:	4b9c      	ldr	r3, [pc, #624]	@ (80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800756c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756e:	091b      	lsrs	r3, r3, #4
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007576:	4b99      	ldr	r3, [pc, #612]	@ (80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800757a:	08db      	lsrs	r3, r3, #3
 800757c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	fb02 f303 	mul.w	r3, r2, r3
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 8111 	beq.w	80077bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	2b02      	cmp	r3, #2
 800759e:	f000 8083 	beq.w	80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	f200 80a1 	bhi.w	80076ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d056      	beq.n	8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80075b6:	e099      	b.n	80076ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075b8:	4b88      	ldr	r3, [pc, #544]	@ (80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d02d      	beq.n	8007620 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075c4:	4b85      	ldr	r3, [pc, #532]	@ (80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	08db      	lsrs	r3, r3, #3
 80075ca:	f003 0303 	and.w	r3, r3, #3
 80075ce:	4a84      	ldr	r2, [pc, #528]	@ (80077e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80075d0:	fa22 f303 	lsr.w	r3, r2, r3
 80075d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	ee07 3a90 	vmov	s15, r3
 80075dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ee:	4b7b      	ldr	r3, [pc, #492]	@ (80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007602:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800760a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800761e:	e087      	b.n	8007730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800762e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007632:	4b6a      	ldr	r3, [pc, #424]	@ (80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007642:	ed97 6a03 	vldr	s12, [r7, #12]
 8007646:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800764a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800765a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007662:	e065      	b.n	8007730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007676:	4b59      	ldr	r3, [pc, #356]	@ (80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767e:	ee07 3a90 	vmov	s15, r3
 8007682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007686:	ed97 6a03 	vldr	s12, [r7, #12]
 800768a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800768e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800769a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076a6:	e043      	b.n	8007730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	ee07 3a90 	vmov	s15, r3
 80076ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80077f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80076b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ba:	4b48      	ldr	r3, [pc, #288]	@ (80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ea:	e021      	b.n	8007730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	ee07 3a90 	vmov	s15, r3
 80076f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fe:	4b37      	ldr	r3, [pc, #220]	@ (80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007712:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800771a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800772e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007730:	4b2a      	ldr	r3, [pc, #168]	@ (80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007734:	0a5b      	lsrs	r3, r3, #9
 8007736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007742:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800774a:	edd7 6a07 	vldr	s13, [r7, #28]
 800774e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007756:	ee17 2a90 	vmov	r2, s15
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800775e:	4b1f      	ldr	r3, [pc, #124]	@ (80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007762:	0c1b      	lsrs	r3, r3, #16
 8007764:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007768:	ee07 3a90 	vmov	s15, r3
 800776c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007770:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007774:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007778:	edd7 6a07 	vldr	s13, [r7, #28]
 800777c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007784:	ee17 2a90 	vmov	r2, s15
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800778c:	4b13      	ldr	r3, [pc, #76]	@ (80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800778e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007790:	0e1b      	lsrs	r3, r3, #24
 8007792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007796:	ee07 3a90 	vmov	s15, r3
 800779a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80077aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077b2:	ee17 2a90 	vmov	r2, s15
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80077ba:	e008      	b.n	80077ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	609a      	str	r2, [r3, #8]
}
 80077ce:	bf00      	nop
 80077d0:	3724      	adds	r7, #36	@ 0x24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	58024400 	.word	0x58024400
 80077e0:	03d09000 	.word	0x03d09000
 80077e4:	46000000 	.word	0x46000000
 80077e8:	4c742400 	.word	0x4c742400
 80077ec:	4a742400 	.word	0x4a742400
 80077f0:	4bbebc20 	.word	0x4bbebc20

080077f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b089      	sub	sp, #36	@ 0x24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077fc:	4ba1      	ldr	r3, [pc, #644]	@ (8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007800:	f003 0303 	and.w	r3, r3, #3
 8007804:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007806:	4b9f      	ldr	r3, [pc, #636]	@ (8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800780a:	0d1b      	lsrs	r3, r3, #20
 800780c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007810:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007812:	4b9c      	ldr	r3, [pc, #624]	@ (8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007816:	0a1b      	lsrs	r3, r3, #8
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800781e:	4b99      	ldr	r3, [pc, #612]	@ (8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007822:	08db      	lsrs	r3, r3, #3
 8007824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	fb02 f303 	mul.w	r3, r2, r3
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007836:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 8111 	beq.w	8007a64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b02      	cmp	r3, #2
 8007846:	f000 8083 	beq.w	8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	2b02      	cmp	r3, #2
 800784e:	f200 80a1 	bhi.w	8007994 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d056      	beq.n	800790c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800785e:	e099      	b.n	8007994 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007860:	4b88      	ldr	r3, [pc, #544]	@ (8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0320 	and.w	r3, r3, #32
 8007868:	2b00      	cmp	r3, #0
 800786a:	d02d      	beq.n	80078c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800786c:	4b85      	ldr	r3, [pc, #532]	@ (8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	08db      	lsrs	r3, r3, #3
 8007872:	f003 0303 	and.w	r3, r3, #3
 8007876:	4a84      	ldr	r2, [pc, #528]	@ (8007a88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007878:	fa22 f303 	lsr.w	r3, r2, r3
 800787c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	ee07 3a90 	vmov	s15, r3
 8007884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007896:	4b7b      	ldr	r3, [pc, #492]	@ (8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789e:	ee07 3a90 	vmov	s15, r3
 80078a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80078c6:	e087      	b.n	80079d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	ee07 3a90 	vmov	s15, r3
 80078ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007a90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80078d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078da:	4b6a      	ldr	r3, [pc, #424]	@ (8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e2:	ee07 3a90 	vmov	s15, r3
 80078e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800790a:	e065      	b.n	80079d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	ee07 3a90 	vmov	s15, r3
 8007912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007916:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800791a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800791e:	4b59      	ldr	r3, [pc, #356]	@ (8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007926:	ee07 3a90 	vmov	s15, r3
 800792a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800792e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007932:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800793a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800793e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800794a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800794e:	e043      	b.n	80079d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	ee07 3a90 	vmov	s15, r3
 8007956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800795a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007a98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800795e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007962:	4b48      	ldr	r3, [pc, #288]	@ (8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007972:	ed97 6a03 	vldr	s12, [r7, #12]
 8007976:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800797a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800798a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007992:	e021      	b.n	80079d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	ee07 3a90 	vmov	s15, r3
 800799a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a6:	4b37      	ldr	r3, [pc, #220]	@ (8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ae:	ee07 3a90 	vmov	s15, r3
 80079b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80079d8:	4b2a      	ldr	r3, [pc, #168]	@ (8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079dc:	0a5b      	lsrs	r3, r3, #9
 80079de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079e2:	ee07 3a90 	vmov	s15, r3
 80079e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80079f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079fe:	ee17 2a90 	vmov	r2, s15
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007a06:	4b1f      	ldr	r3, [pc, #124]	@ (8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0a:	0c1b      	lsrs	r3, r3, #16
 8007a0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a10:	ee07 3a90 	vmov	s15, r3
 8007a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a20:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a2c:	ee17 2a90 	vmov	r2, s15
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007a34:	4b13      	ldr	r3, [pc, #76]	@ (8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a38:	0e1b      	lsrs	r3, r3, #24
 8007a3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a3e:	ee07 3a90 	vmov	s15, r3
 8007a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a5a:	ee17 2a90 	vmov	r2, s15
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a62:	e008      	b.n	8007a76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	609a      	str	r2, [r3, #8]
}
 8007a76:	bf00      	nop
 8007a78:	3724      	adds	r7, #36	@ 0x24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	58024400 	.word	0x58024400
 8007a88:	03d09000 	.word	0x03d09000
 8007a8c:	46000000 	.word	0x46000000
 8007a90:	4c742400 	.word	0x4c742400
 8007a94:	4a742400 	.word	0x4a742400
 8007a98:	4bbebc20 	.word	0x4bbebc20

08007a9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007aaa:	4b53      	ldr	r3, [pc, #332]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aae:	f003 0303 	and.w	r3, r3, #3
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d101      	bne.n	8007aba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e099      	b.n	8007bee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007aba:	4b4f      	ldr	r3, [pc, #316]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a4e      	ldr	r2, [pc, #312]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007ac0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac6:	f7fb f93d 	bl	8002d44 <HAL_GetTick>
 8007aca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007acc:	e008      	b.n	8007ae0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ace:	f7fb f939 	bl	8002d44 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d901      	bls.n	8007ae0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e086      	b.n	8007bee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ae0:	4b45      	ldr	r3, [pc, #276]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1f0      	bne.n	8007ace <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007aec:	4b42      	ldr	r3, [pc, #264]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	031b      	lsls	r3, r3, #12
 8007afa:	493f      	ldr	r1, [pc, #252]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007afc:	4313      	orrs	r3, r2
 8007afe:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	025b      	lsls	r3, r3, #9
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	431a      	orrs	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	041b      	lsls	r3, r3, #16
 8007b1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b22:	431a      	orrs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	061b      	lsls	r3, r3, #24
 8007b2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b30:	4931      	ldr	r1, [pc, #196]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b36:	4b30      	ldr	r3, [pc, #192]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	492d      	ldr	r1, [pc, #180]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b48:	4b2b      	ldr	r3, [pc, #172]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4c:	f023 0220 	bic.w	r2, r3, #32
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	4928      	ldr	r1, [pc, #160]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b5a:	4b27      	ldr	r3, [pc, #156]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5e:	4a26      	ldr	r2, [pc, #152]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007b60:	f023 0310 	bic.w	r3, r3, #16
 8007b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b66:	4b24      	ldr	r3, [pc, #144]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007b68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b6a:	4b24      	ldr	r3, [pc, #144]	@ (8007bfc <RCCEx_PLL2_Config+0x160>)
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	69d2      	ldr	r2, [r2, #28]
 8007b72:	00d2      	lsls	r2, r2, #3
 8007b74:	4920      	ldr	r1, [pc, #128]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007b80:	f043 0310 	orr.w	r3, r3, #16
 8007b84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d106      	bne.n	8007b9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b90:	4a19      	ldr	r2, [pc, #100]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007b92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b98:	e00f      	b.n	8007bba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d106      	bne.n	8007bae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007ba0:	4b15      	ldr	r3, [pc, #84]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba4:	4a14      	ldr	r2, [pc, #80]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007ba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007baa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bac:	e005      	b.n	8007bba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007bae:	4b12      	ldr	r3, [pc, #72]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb2:	4a11      	ldr	r2, [pc, #68]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007bb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007bba:	4b0f      	ldr	r3, [pc, #60]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007bc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc6:	f7fb f8bd 	bl	8002d44 <HAL_GetTick>
 8007bca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bcc:	e008      	b.n	8007be0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bce:	f7fb f8b9 	bl	8002d44 <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d901      	bls.n	8007be0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e006      	b.n	8007bee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007be0:	4b05      	ldr	r3, [pc, #20]	@ (8007bf8 <RCCEx_PLL2_Config+0x15c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d0f0      	beq.n	8007bce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	58024400 	.word	0x58024400
 8007bfc:	ffff0007 	.word	0xffff0007

08007c00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c0e:	4b53      	ldr	r3, [pc, #332]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c12:	f003 0303 	and.w	r3, r3, #3
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d101      	bne.n	8007c1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e099      	b.n	8007d52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a4e      	ldr	r2, [pc, #312]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c2a:	f7fb f88b 	bl	8002d44 <HAL_GetTick>
 8007c2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c30:	e008      	b.n	8007c44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c32:	f7fb f887 	bl	8002d44 <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d901      	bls.n	8007c44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e086      	b.n	8007d52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c44:	4b45      	ldr	r3, [pc, #276]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1f0      	bne.n	8007c32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c50:	4b42      	ldr	r3, [pc, #264]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c54:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	051b      	lsls	r3, r3, #20
 8007c5e:	493f      	ldr	r1, [pc, #252]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007c60:	4313      	orrs	r3, r2
 8007c62:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	025b      	lsls	r3, r3, #9
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	041b      	lsls	r3, r3, #16
 8007c82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c86:	431a      	orrs	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	061b      	lsls	r3, r3, #24
 8007c90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c94:	4931      	ldr	r1, [pc, #196]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c9a:	4b30      	ldr	r3, [pc, #192]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	492d      	ldr	r1, [pc, #180]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007cac:	4b2b      	ldr	r3, [pc, #172]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	4928      	ldr	r1, [pc, #160]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007cbe:	4b27      	ldr	r3, [pc, #156]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc2:	4a26      	ldr	r2, [pc, #152]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007cca:	4b24      	ldr	r3, [pc, #144]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cce:	4b24      	ldr	r3, [pc, #144]	@ (8007d60 <RCCEx_PLL3_Config+0x160>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	69d2      	ldr	r2, [r2, #28]
 8007cd6:	00d2      	lsls	r2, r2, #3
 8007cd8:	4920      	ldr	r1, [pc, #128]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007cde:	4b1f      	ldr	r3, [pc, #124]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d106      	bne.n	8007cfe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf4:	4a19      	ldr	r2, [pc, #100]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007cf6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007cfc:	e00f      	b.n	8007d1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d106      	bne.n	8007d12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d04:	4b15      	ldr	r3, [pc, #84]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d08:	4a14      	ldr	r2, [pc, #80]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007d0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d10:	e005      	b.n	8007d1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d12:	4b12      	ldr	r3, [pc, #72]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d16:	4a11      	ldr	r2, [pc, #68]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007d18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a0e      	ldr	r2, [pc, #56]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d2a:	f7fb f80b 	bl	8002d44 <HAL_GetTick>
 8007d2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d30:	e008      	b.n	8007d44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d32:	f7fb f807 	bl	8002d44 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d901      	bls.n	8007d44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e006      	b.n	8007d52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d44:	4b05      	ldr	r3, [pc, #20]	@ (8007d5c <RCCEx_PLL3_Config+0x15c>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d0f0      	beq.n	8007d32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	58024400 	.word	0x58024400
 8007d60:	ffff0007 	.word	0xffff0007

08007d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e049      	b.n	8007e0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d106      	bne.n	8007d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7fa f824 	bl	8001dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	4619      	mov	r1, r3
 8007da2:	4610      	mov	r0, r2
 8007da4:	f000 fb12 	bl	80083cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d001      	beq.n	8007e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e05e      	b.n	8007eea <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0201 	orr.w	r2, r2, #1
 8007e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a2b      	ldr	r2, [pc, #172]	@ (8007ef8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d02c      	beq.n	8007ea8 <HAL_TIM_Base_Start_IT+0x94>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e56:	d027      	beq.n	8007ea8 <HAL_TIM_Base_Start_IT+0x94>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a27      	ldr	r2, [pc, #156]	@ (8007efc <HAL_TIM_Base_Start_IT+0xe8>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d022      	beq.n	8007ea8 <HAL_TIM_Base_Start_IT+0x94>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a26      	ldr	r2, [pc, #152]	@ (8007f00 <HAL_TIM_Base_Start_IT+0xec>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d01d      	beq.n	8007ea8 <HAL_TIM_Base_Start_IT+0x94>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a24      	ldr	r2, [pc, #144]	@ (8007f04 <HAL_TIM_Base_Start_IT+0xf0>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d018      	beq.n	8007ea8 <HAL_TIM_Base_Start_IT+0x94>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a23      	ldr	r2, [pc, #140]	@ (8007f08 <HAL_TIM_Base_Start_IT+0xf4>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d013      	beq.n	8007ea8 <HAL_TIM_Base_Start_IT+0x94>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a21      	ldr	r2, [pc, #132]	@ (8007f0c <HAL_TIM_Base_Start_IT+0xf8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d00e      	beq.n	8007ea8 <HAL_TIM_Base_Start_IT+0x94>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a20      	ldr	r2, [pc, #128]	@ (8007f10 <HAL_TIM_Base_Start_IT+0xfc>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d009      	beq.n	8007ea8 <HAL_TIM_Base_Start_IT+0x94>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1e      	ldr	r2, [pc, #120]	@ (8007f14 <HAL_TIM_Base_Start_IT+0x100>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d004      	beq.n	8007ea8 <HAL_TIM_Base_Start_IT+0x94>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1d      	ldr	r2, [pc, #116]	@ (8007f18 <HAL_TIM_Base_Start_IT+0x104>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d115      	bne.n	8007ed4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	4b1b      	ldr	r3, [pc, #108]	@ (8007f1c <HAL_TIM_Base_Start_IT+0x108>)
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2b06      	cmp	r3, #6
 8007eb8:	d015      	beq.n	8007ee6 <HAL_TIM_Base_Start_IT+0xd2>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ec0:	d011      	beq.n	8007ee6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f042 0201 	orr.w	r2, r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed2:	e008      	b.n	8007ee6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0201 	orr.w	r2, r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	e000      	b.n	8007ee8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	40010000 	.word	0x40010000
 8007efc:	40000400 	.word	0x40000400
 8007f00:	40000800 	.word	0x40000800
 8007f04:	40000c00 	.word	0x40000c00
 8007f08:	40010400 	.word	0x40010400
 8007f0c:	40001800 	.word	0x40001800
 8007f10:	40014000 	.word	0x40014000
 8007f14:	4000e000 	.word	0x4000e000
 8007f18:	4000e400 	.word	0x4000e400
 8007f1c:	00010007 	.word	0x00010007

08007f20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 0201 	bic.w	r2, r2, #1
 8007f36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6a1a      	ldr	r2, [r3, #32]
 8007f3e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007f42:	4013      	ands	r3, r2
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10f      	bne.n	8007f68 <HAL_TIM_Base_Stop_IT+0x48>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6a1a      	ldr	r2, [r3, #32]
 8007f4e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007f52:	4013      	ands	r3, r2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d107      	bne.n	8007f68 <HAL_TIM_Base_Stop_IT+0x48>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0201 	bic.w	r2, r2, #1
 8007f66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f003 0302 	and.w	r3, r3, #2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d020      	beq.n	8007fe2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d01b      	beq.n	8007fe2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f06f 0202 	mvn.w	r2, #2
 8007fb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	f003 0303 	and.w	r3, r3, #3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d003      	beq.n	8007fd0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f9e1 	bl	8008390 <HAL_TIM_IC_CaptureCallback>
 8007fce:	e005      	b.n	8007fdc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f9d3 	bl	800837c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f9e4 	bl	80083a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d020      	beq.n	800802e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f003 0304 	and.w	r3, r3, #4
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d01b      	beq.n	800802e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f06f 0204 	mvn.w	r2, #4
 8007ffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008010:	2b00      	cmp	r3, #0
 8008012:	d003      	beq.n	800801c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f9bb 	bl	8008390 <HAL_TIM_IC_CaptureCallback>
 800801a:	e005      	b.n	8008028 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f9ad 	bl	800837c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f9be 	bl	80083a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f003 0308 	and.w	r3, r3, #8
 8008034:	2b00      	cmp	r3, #0
 8008036:	d020      	beq.n	800807a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f003 0308 	and.w	r3, r3, #8
 800803e:	2b00      	cmp	r3, #0
 8008040:	d01b      	beq.n	800807a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f06f 0208 	mvn.w	r2, #8
 800804a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2204      	movs	r2, #4
 8008050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	f003 0303 	and.w	r3, r3, #3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f995 	bl	8008390 <HAL_TIM_IC_CaptureCallback>
 8008066:	e005      	b.n	8008074 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f987 	bl	800837c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f998 	bl	80083a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b00      	cmp	r3, #0
 8008082:	d020      	beq.n	80080c6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f003 0310 	and.w	r3, r3, #16
 800808a:	2b00      	cmp	r3, #0
 800808c:	d01b      	beq.n	80080c6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f06f 0210 	mvn.w	r2, #16
 8008096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2208      	movs	r2, #8
 800809c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f96f 	bl	8008390 <HAL_TIM_IC_CaptureCallback>
 80080b2:	e005      	b.n	80080c0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f961 	bl	800837c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f972 	bl	80083a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00c      	beq.n	80080ea <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d007      	beq.n	80080ea <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f06f 0201 	mvn.w	r2, #1
 80080e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7f9 fa85 	bl	80015f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d104      	bne.n	80080fe <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00c      	beq.n	8008118 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008104:	2b00      	cmp	r3, #0
 8008106:	d007      	beq.n	8008118 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fb50 	bl	80087b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00c      	beq.n	800813c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008128:	2b00      	cmp	r3, #0
 800812a:	d007      	beq.n	800813c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fb48 	bl	80087cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00c      	beq.n	8008160 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800814c:	2b00      	cmp	r3, #0
 800814e:	d007      	beq.n	8008160 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f92c 	bl	80083b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00c      	beq.n	8008184 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f003 0320 	and.w	r3, r3, #32
 8008170:	2b00      	cmp	r3, #0
 8008172:	d007      	beq.n	8008184 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f06f 0220 	mvn.w	r2, #32
 800817c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fb10 	bl	80087a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008184:	bf00      	nop
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d101      	bne.n	80081a8 <HAL_TIM_ConfigClockSource+0x1c>
 80081a4:	2302      	movs	r3, #2
 80081a6:	e0dc      	b.n	8008362 <HAL_TIM_ConfigClockSource+0x1d6>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	4b6a      	ldr	r3, [pc, #424]	@ (800836c <HAL_TIM_ConfigClockSource+0x1e0>)
 80081c4:	4013      	ands	r3, r2
 80081c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a64      	ldr	r2, [pc, #400]	@ (8008370 <HAL_TIM_ConfigClockSource+0x1e4>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	f000 80a9 	beq.w	8008336 <HAL_TIM_ConfigClockSource+0x1aa>
 80081e4:	4a62      	ldr	r2, [pc, #392]	@ (8008370 <HAL_TIM_ConfigClockSource+0x1e4>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	f200 80ae 	bhi.w	8008348 <HAL_TIM_ConfigClockSource+0x1bc>
 80081ec:	4a61      	ldr	r2, [pc, #388]	@ (8008374 <HAL_TIM_ConfigClockSource+0x1e8>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	f000 80a1 	beq.w	8008336 <HAL_TIM_ConfigClockSource+0x1aa>
 80081f4:	4a5f      	ldr	r2, [pc, #380]	@ (8008374 <HAL_TIM_ConfigClockSource+0x1e8>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	f200 80a6 	bhi.w	8008348 <HAL_TIM_ConfigClockSource+0x1bc>
 80081fc:	4a5e      	ldr	r2, [pc, #376]	@ (8008378 <HAL_TIM_ConfigClockSource+0x1ec>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	f000 8099 	beq.w	8008336 <HAL_TIM_ConfigClockSource+0x1aa>
 8008204:	4a5c      	ldr	r2, [pc, #368]	@ (8008378 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008206:	4293      	cmp	r3, r2
 8008208:	f200 809e 	bhi.w	8008348 <HAL_TIM_ConfigClockSource+0x1bc>
 800820c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008210:	f000 8091 	beq.w	8008336 <HAL_TIM_ConfigClockSource+0x1aa>
 8008214:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008218:	f200 8096 	bhi.w	8008348 <HAL_TIM_ConfigClockSource+0x1bc>
 800821c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008220:	f000 8089 	beq.w	8008336 <HAL_TIM_ConfigClockSource+0x1aa>
 8008224:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008228:	f200 808e 	bhi.w	8008348 <HAL_TIM_ConfigClockSource+0x1bc>
 800822c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008230:	d03e      	beq.n	80082b0 <HAL_TIM_ConfigClockSource+0x124>
 8008232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008236:	f200 8087 	bhi.w	8008348 <HAL_TIM_ConfigClockSource+0x1bc>
 800823a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800823e:	f000 8086 	beq.w	800834e <HAL_TIM_ConfigClockSource+0x1c2>
 8008242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008246:	d87f      	bhi.n	8008348 <HAL_TIM_ConfigClockSource+0x1bc>
 8008248:	2b70      	cmp	r3, #112	@ 0x70
 800824a:	d01a      	beq.n	8008282 <HAL_TIM_ConfigClockSource+0xf6>
 800824c:	2b70      	cmp	r3, #112	@ 0x70
 800824e:	d87b      	bhi.n	8008348 <HAL_TIM_ConfigClockSource+0x1bc>
 8008250:	2b60      	cmp	r3, #96	@ 0x60
 8008252:	d050      	beq.n	80082f6 <HAL_TIM_ConfigClockSource+0x16a>
 8008254:	2b60      	cmp	r3, #96	@ 0x60
 8008256:	d877      	bhi.n	8008348 <HAL_TIM_ConfigClockSource+0x1bc>
 8008258:	2b50      	cmp	r3, #80	@ 0x50
 800825a:	d03c      	beq.n	80082d6 <HAL_TIM_ConfigClockSource+0x14a>
 800825c:	2b50      	cmp	r3, #80	@ 0x50
 800825e:	d873      	bhi.n	8008348 <HAL_TIM_ConfigClockSource+0x1bc>
 8008260:	2b40      	cmp	r3, #64	@ 0x40
 8008262:	d058      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x18a>
 8008264:	2b40      	cmp	r3, #64	@ 0x40
 8008266:	d86f      	bhi.n	8008348 <HAL_TIM_ConfigClockSource+0x1bc>
 8008268:	2b30      	cmp	r3, #48	@ 0x30
 800826a:	d064      	beq.n	8008336 <HAL_TIM_ConfigClockSource+0x1aa>
 800826c:	2b30      	cmp	r3, #48	@ 0x30
 800826e:	d86b      	bhi.n	8008348 <HAL_TIM_ConfigClockSource+0x1bc>
 8008270:	2b20      	cmp	r3, #32
 8008272:	d060      	beq.n	8008336 <HAL_TIM_ConfigClockSource+0x1aa>
 8008274:	2b20      	cmp	r3, #32
 8008276:	d867      	bhi.n	8008348 <HAL_TIM_ConfigClockSource+0x1bc>
 8008278:	2b00      	cmp	r3, #0
 800827a:	d05c      	beq.n	8008336 <HAL_TIM_ConfigClockSource+0x1aa>
 800827c:	2b10      	cmp	r3, #16
 800827e:	d05a      	beq.n	8008336 <HAL_TIM_ConfigClockSource+0x1aa>
 8008280:	e062      	b.n	8008348 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008292:	f000 f9cb 	bl	800862c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80082a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	609a      	str	r2, [r3, #8]
      break;
 80082ae:	e04f      	b.n	8008350 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80082c0:	f000 f9b4 	bl	800862c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689a      	ldr	r2, [r3, #8]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082d2:	609a      	str	r2, [r3, #8]
      break;
 80082d4:	e03c      	b.n	8008350 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082e2:	461a      	mov	r2, r3
 80082e4:	f000 f924 	bl	8008530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2150      	movs	r1, #80	@ 0x50
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 f97e 	bl	80085f0 <TIM_ITRx_SetConfig>
      break;
 80082f4:	e02c      	b.n	8008350 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008302:	461a      	mov	r2, r3
 8008304:	f000 f943 	bl	800858e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2160      	movs	r1, #96	@ 0x60
 800830e:	4618      	mov	r0, r3
 8008310:	f000 f96e 	bl	80085f0 <TIM_ITRx_SetConfig>
      break;
 8008314:	e01c      	b.n	8008350 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008322:	461a      	mov	r2, r3
 8008324:	f000 f904 	bl	8008530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2140      	movs	r1, #64	@ 0x40
 800832e:	4618      	mov	r0, r3
 8008330:	f000 f95e 	bl	80085f0 <TIM_ITRx_SetConfig>
      break;
 8008334:	e00c      	b.n	8008350 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4619      	mov	r1, r3
 8008340:	4610      	mov	r0, r2
 8008342:	f000 f955 	bl	80085f0 <TIM_ITRx_SetConfig>
      break;
 8008346:	e003      	b.n	8008350 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	73fb      	strb	r3, [r7, #15]
      break;
 800834c:	e000      	b.n	8008350 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800834e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008360:	7bfb      	ldrb	r3, [r7, #15]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	ffceff88 	.word	0xffceff88
 8008370:	00100040 	.word	0x00100040
 8008374:	00100030 	.word	0x00100030
 8008378:	00100020 	.word	0x00100020

0800837c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a4a      	ldr	r2, [pc, #296]	@ (8008508 <TIM_Base_SetConfig+0x13c>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d013      	beq.n	800840c <TIM_Base_SetConfig+0x40>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ea:	d00f      	beq.n	800840c <TIM_Base_SetConfig+0x40>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a47      	ldr	r2, [pc, #284]	@ (800850c <TIM_Base_SetConfig+0x140>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d00b      	beq.n	800840c <TIM_Base_SetConfig+0x40>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a46      	ldr	r2, [pc, #280]	@ (8008510 <TIM_Base_SetConfig+0x144>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d007      	beq.n	800840c <TIM_Base_SetConfig+0x40>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a45      	ldr	r2, [pc, #276]	@ (8008514 <TIM_Base_SetConfig+0x148>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d003      	beq.n	800840c <TIM_Base_SetConfig+0x40>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a44      	ldr	r2, [pc, #272]	@ (8008518 <TIM_Base_SetConfig+0x14c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d108      	bne.n	800841e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	4313      	orrs	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a39      	ldr	r2, [pc, #228]	@ (8008508 <TIM_Base_SetConfig+0x13c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d027      	beq.n	8008476 <TIM_Base_SetConfig+0xaa>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800842c:	d023      	beq.n	8008476 <TIM_Base_SetConfig+0xaa>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a36      	ldr	r2, [pc, #216]	@ (800850c <TIM_Base_SetConfig+0x140>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d01f      	beq.n	8008476 <TIM_Base_SetConfig+0xaa>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a35      	ldr	r2, [pc, #212]	@ (8008510 <TIM_Base_SetConfig+0x144>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d01b      	beq.n	8008476 <TIM_Base_SetConfig+0xaa>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a34      	ldr	r2, [pc, #208]	@ (8008514 <TIM_Base_SetConfig+0x148>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d017      	beq.n	8008476 <TIM_Base_SetConfig+0xaa>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a33      	ldr	r2, [pc, #204]	@ (8008518 <TIM_Base_SetConfig+0x14c>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d013      	beq.n	8008476 <TIM_Base_SetConfig+0xaa>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a32      	ldr	r2, [pc, #200]	@ (800851c <TIM_Base_SetConfig+0x150>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d00f      	beq.n	8008476 <TIM_Base_SetConfig+0xaa>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a31      	ldr	r2, [pc, #196]	@ (8008520 <TIM_Base_SetConfig+0x154>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00b      	beq.n	8008476 <TIM_Base_SetConfig+0xaa>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a30      	ldr	r2, [pc, #192]	@ (8008524 <TIM_Base_SetConfig+0x158>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d007      	beq.n	8008476 <TIM_Base_SetConfig+0xaa>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a2f      	ldr	r2, [pc, #188]	@ (8008528 <TIM_Base_SetConfig+0x15c>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d003      	beq.n	8008476 <TIM_Base_SetConfig+0xaa>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a2e      	ldr	r2, [pc, #184]	@ (800852c <TIM_Base_SetConfig+0x160>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d108      	bne.n	8008488 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800847c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	4313      	orrs	r3, r2
 8008486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	4313      	orrs	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a16      	ldr	r2, [pc, #88]	@ (8008508 <TIM_Base_SetConfig+0x13c>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d00f      	beq.n	80084d4 <TIM_Base_SetConfig+0x108>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a18      	ldr	r2, [pc, #96]	@ (8008518 <TIM_Base_SetConfig+0x14c>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00b      	beq.n	80084d4 <TIM_Base_SetConfig+0x108>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a17      	ldr	r2, [pc, #92]	@ (800851c <TIM_Base_SetConfig+0x150>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d007      	beq.n	80084d4 <TIM_Base_SetConfig+0x108>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a16      	ldr	r2, [pc, #88]	@ (8008520 <TIM_Base_SetConfig+0x154>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d003      	beq.n	80084d4 <TIM_Base_SetConfig+0x108>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a15      	ldr	r2, [pc, #84]	@ (8008524 <TIM_Base_SetConfig+0x158>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d103      	bne.n	80084dc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	691a      	ldr	r2, [r3, #16]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d105      	bne.n	80084fa <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	f023 0201 	bic.w	r2, r3, #1
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	611a      	str	r2, [r3, #16]
  }
}
 80084fa:	bf00      	nop
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	40010000 	.word	0x40010000
 800850c:	40000400 	.word	0x40000400
 8008510:	40000800 	.word	0x40000800
 8008514:	40000c00 	.word	0x40000c00
 8008518:	40010400 	.word	0x40010400
 800851c:	40014000 	.word	0x40014000
 8008520:	40014400 	.word	0x40014400
 8008524:	40014800 	.word	0x40014800
 8008528:	4000e000 	.word	0x4000e000
 800852c:	4000e400 	.word	0x4000e400

08008530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	f023 0201 	bic.w	r2, r3, #1
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800855a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	011b      	lsls	r3, r3, #4
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	4313      	orrs	r3, r2
 8008564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f023 030a 	bic.w	r3, r3, #10
 800856c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	4313      	orrs	r3, r2
 8008574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	621a      	str	r2, [r3, #32]
}
 8008582:	bf00      	nop
 8008584:	371c      	adds	r7, #28
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800858e:	b480      	push	{r7}
 8008590:	b087      	sub	sp, #28
 8008592:	af00      	add	r7, sp, #0
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	60b9      	str	r1, [r7, #8]
 8008598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	f023 0210 	bic.w	r2, r3, #16
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	031b      	lsls	r3, r3, #12
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80085ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	011b      	lsls	r3, r3, #4
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	621a      	str	r2, [r3, #32]
}
 80085e2:	bf00      	nop
 80085e4:	371c      	adds	r7, #28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
	...

080085f0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4b09      	ldr	r3, [pc, #36]	@ (8008628 <TIM_ITRx_SetConfig+0x38>)
 8008604:	4013      	ands	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	4313      	orrs	r3, r2
 800860e:	f043 0307 	orr.w	r3, r3, #7
 8008612:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	609a      	str	r2, [r3, #8]
}
 800861a:	bf00      	nop
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	ffcfff8f 	.word	0xffcfff8f

0800862c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800862c:	b480      	push	{r7}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
 8008638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	021a      	lsls	r2, r3, #8
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	431a      	orrs	r2, r3
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	4313      	orrs	r3, r2
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	4313      	orrs	r3, r2
 8008658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	609a      	str	r2, [r3, #8]
}
 8008660:	bf00      	nop
 8008662:	371c      	adds	r7, #28
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008680:	2302      	movs	r3, #2
 8008682:	e077      	b.n	8008774 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2202      	movs	r2, #2
 8008690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a35      	ldr	r2, [pc, #212]	@ (8008780 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d004      	beq.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a34      	ldr	r2, [pc, #208]	@ (8008784 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d108      	bne.n	80086ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80086be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	4313      	orrs	r3, r2
 80086da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a25      	ldr	r2, [pc, #148]	@ (8008780 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d02c      	beq.n	8008748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086f6:	d027      	beq.n	8008748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a22      	ldr	r2, [pc, #136]	@ (8008788 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d022      	beq.n	8008748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a21      	ldr	r2, [pc, #132]	@ (800878c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d01d      	beq.n	8008748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a1f      	ldr	r2, [pc, #124]	@ (8008790 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d018      	beq.n	8008748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a1a      	ldr	r2, [pc, #104]	@ (8008784 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d013      	beq.n	8008748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a1b      	ldr	r2, [pc, #108]	@ (8008794 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d00e      	beq.n	8008748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a1a      	ldr	r2, [pc, #104]	@ (8008798 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d009      	beq.n	8008748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a18      	ldr	r2, [pc, #96]	@ (800879c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d004      	beq.n	8008748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a17      	ldr	r2, [pc, #92]	@ (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d10c      	bne.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800874e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	4313      	orrs	r3, r2
 8008758:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	40010000 	.word	0x40010000
 8008784:	40010400 	.word	0x40010400
 8008788:	40000400 	.word	0x40000400
 800878c:	40000800 	.word	0x40000800
 8008790:	40000c00 	.word	0x40000c00
 8008794:	40001800 	.word	0x40001800
 8008798:	40014000 	.word	0x40014000
 800879c:	4000e000 	.word	0x4000e000
 80087a0:	4000e400 	.word	0x4000e400

080087a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e042      	b.n	8008878 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d106      	bne.n	800880a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7f9 fe51 	bl	80024ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2224      	movs	r2, #36	@ 0x24
 800880e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 0201 	bic.w	r2, r2, #1
 8008820:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 fc10 	bl	800a050 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fda1 	bl	8009378 <UART_SetConfig>
 8008836:	4603      	mov	r3, r0
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e01b      	b.n	8008878 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800884e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689a      	ldr	r2, [r3, #8]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800885e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f042 0201 	orr.w	r2, r2, #1
 800886e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f001 fc8f 	bl	800a194 <UART_CheckIdleState>
 8008876:	4603      	mov	r3, r0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08a      	sub	sp, #40	@ 0x28
 8008884:	af02      	add	r7, sp, #8
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	603b      	str	r3, [r7, #0]
 800888c:	4613      	mov	r3, r2
 800888e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008896:	2b20      	cmp	r3, #32
 8008898:	d17b      	bne.n	8008992 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <HAL_UART_Transmit+0x26>
 80088a0:	88fb      	ldrh	r3, [r7, #6]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e074      	b.n	8008994 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2221      	movs	r2, #33	@ 0x21
 80088b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088ba:	f7fa fa43 	bl	8002d44 <HAL_GetTick>
 80088be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	88fa      	ldrh	r2, [r7, #6]
 80088c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	88fa      	ldrh	r2, [r7, #6]
 80088cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d8:	d108      	bne.n	80088ec <HAL_UART_Transmit+0x6c>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d104      	bne.n	80088ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	61bb      	str	r3, [r7, #24]
 80088ea:	e003      	b.n	80088f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088f0:	2300      	movs	r3, #0
 80088f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088f4:	e030      	b.n	8008958 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	2200      	movs	r2, #0
 80088fe:	2180      	movs	r1, #128	@ 0x80
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f001 fcf1 	bl	800a2e8 <UART_WaitOnFlagUntilTimeout>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d005      	beq.n	8008918 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2220      	movs	r2, #32
 8008910:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e03d      	b.n	8008994 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10b      	bne.n	8008936 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800892c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	3302      	adds	r3, #2
 8008932:	61bb      	str	r3, [r7, #24]
 8008934:	e007      	b.n	8008946 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	781a      	ldrb	r2, [r3, #0]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	3301      	adds	r3, #1
 8008944:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800894c:	b29b      	uxth	r3, r3
 800894e:	3b01      	subs	r3, #1
 8008950:	b29a      	uxth	r2, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800895e:	b29b      	uxth	r3, r3
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1c8      	bne.n	80088f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	2200      	movs	r2, #0
 800896c:	2140      	movs	r1, #64	@ 0x40
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f001 fcba 	bl	800a2e8 <UART_WaitOnFlagUntilTimeout>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d005      	beq.n	8008986 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2220      	movs	r2, #32
 800897e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e006      	b.n	8008994 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2220      	movs	r2, #32
 800898a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	e000      	b.n	8008994 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008992:	2302      	movs	r3, #2
  }
}
 8008994:	4618      	mov	r0, r3
 8008996:	3720      	adds	r7, #32
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b08a      	sub	sp, #40	@ 0x28
 80089a0:	af02      	add	r7, sp, #8
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	4613      	mov	r3, r2
 80089aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089b2:	2b20      	cmp	r3, #32
 80089b4:	f040 80b5 	bne.w	8008b22 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d002      	beq.n	80089c4 <HAL_UART_Receive+0x28>
 80089be:	88fb      	ldrh	r3, [r7, #6]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d101      	bne.n	80089c8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e0ad      	b.n	8008b24 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2222      	movs	r2, #34	@ 0x22
 80089d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089de:	f7fa f9b1 	bl	8002d44 <HAL_GetTick>
 80089e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	88fa      	ldrh	r2, [r7, #6]
 80089e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	88fa      	ldrh	r2, [r7, #6]
 80089f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089fc:	d10e      	bne.n	8008a1c <HAL_UART_Receive+0x80>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d105      	bne.n	8008a12 <HAL_UART_Receive+0x76>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008a0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a10:	e02d      	b.n	8008a6e <HAL_UART_Receive+0xd2>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	22ff      	movs	r2, #255	@ 0xff
 8008a16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a1a:	e028      	b.n	8008a6e <HAL_UART_Receive+0xd2>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10d      	bne.n	8008a40 <HAL_UART_Receive+0xa4>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d104      	bne.n	8008a36 <HAL_UART_Receive+0x9a>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	22ff      	movs	r2, #255	@ 0xff
 8008a30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a34:	e01b      	b.n	8008a6e <HAL_UART_Receive+0xd2>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	227f      	movs	r2, #127	@ 0x7f
 8008a3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a3e:	e016      	b.n	8008a6e <HAL_UART_Receive+0xd2>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a48:	d10d      	bne.n	8008a66 <HAL_UART_Receive+0xca>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d104      	bne.n	8008a5c <HAL_UART_Receive+0xc0>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	227f      	movs	r2, #127	@ 0x7f
 8008a56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a5a:	e008      	b.n	8008a6e <HAL_UART_Receive+0xd2>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	223f      	movs	r2, #63	@ 0x3f
 8008a60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008a64:	e003      	b.n	8008a6e <HAL_UART_Receive+0xd2>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a74:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a7e:	d108      	bne.n	8008a92 <HAL_UART_Receive+0xf6>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d104      	bne.n	8008a92 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	61bb      	str	r3, [r7, #24]
 8008a90:	e003      	b.n	8008a9a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008a9a:	e036      	b.n	8008b0a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2120      	movs	r1, #32
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f001 fc1e 	bl	800a2e8 <UART_WaitOnFlagUntilTimeout>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d005      	beq.n	8008abe <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e032      	b.n	8008b24 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10c      	bne.n	8008ade <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	8a7b      	ldrh	r3, [r7, #18]
 8008ace:	4013      	ands	r3, r2
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	3302      	adds	r3, #2
 8008ada:	61bb      	str	r3, [r7, #24]
 8008adc:	e00c      	b.n	8008af8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	8a7b      	ldrh	r3, [r7, #18]
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	4013      	ands	r3, r2
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	3301      	adds	r3, #1
 8008af6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	3b01      	subs	r3, #1
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1c2      	bne.n	8008a9c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2220      	movs	r2, #32
 8008b1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	e000      	b.n	8008b24 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008b22:	2302      	movs	r3, #2
  }
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3720      	adds	r7, #32
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08a      	sub	sp, #40	@ 0x28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	4613      	mov	r3, r2
 8008b38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b40:	2b20      	cmp	r3, #32
 8008b42:	d137      	bne.n	8008bb4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <HAL_UART_Receive_IT+0x24>
 8008b4a:	88fb      	ldrh	r3, [r7, #6]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d101      	bne.n	8008b54 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e030      	b.n	8008bb6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a18      	ldr	r2, [pc, #96]	@ (8008bc0 <HAL_UART_Receive_IT+0x94>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d01f      	beq.n	8008ba4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d018      	beq.n	8008ba4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	e853 3f00 	ldrex	r3, [r3]
 8008b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b90:	623b      	str	r3, [r7, #32]
 8008b92:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b94:	69f9      	ldr	r1, [r7, #28]
 8008b96:	6a3a      	ldr	r2, [r7, #32]
 8008b98:	e841 2300 	strex	r3, r2, [r1]
 8008b9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1e6      	bne.n	8008b72 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008ba4:	88fb      	ldrh	r3, [r7, #6]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	68b9      	ldr	r1, [r7, #8]
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f001 fc0a 	bl	800a3c4 <UART_Start_Receive_IT>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	e000      	b.n	8008bb6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008bb4:	2302      	movs	r3, #2
  }
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3728      	adds	r7, #40	@ 0x28
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	58000c00 	.word	0x58000c00

08008bc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b0ba      	sub	sp, #232	@ 0xe8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008bee:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008bf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d11b      	bne.n	8008c38 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c04:	f003 0320 	and.w	r3, r3, #32
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d015      	beq.n	8008c38 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c10:	f003 0320 	and.w	r3, r3, #32
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d105      	bne.n	8008c24 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d009      	beq.n	8008c38 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 8377 	beq.w	800931c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	4798      	blx	r3
      }
      return;
 8008c36:	e371      	b.n	800931c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 8123 	beq.w	8008e88 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008c46:	4b8d      	ldr	r3, [pc, #564]	@ (8008e7c <HAL_UART_IRQHandler+0x2b8>)
 8008c48:	4013      	ands	r3, r2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d106      	bne.n	8008c5c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008c52:	4b8b      	ldr	r3, [pc, #556]	@ (8008e80 <HAL_UART_IRQHandler+0x2bc>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 8116 	beq.w	8008e88 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d011      	beq.n	8008c8c <HAL_UART_IRQHandler+0xc8>
 8008c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00b      	beq.n	8008c8c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c82:	f043 0201 	orr.w	r2, r3, #1
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d011      	beq.n	8008cbc <HAL_UART_IRQHandler+0xf8>
 8008c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c9c:	f003 0301 	and.w	r3, r3, #1
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00b      	beq.n	8008cbc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2202      	movs	r2, #2
 8008caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cb2:	f043 0204 	orr.w	r2, r3, #4
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d011      	beq.n	8008cec <HAL_UART_IRQHandler+0x128>
 8008cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00b      	beq.n	8008cec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2204      	movs	r2, #4
 8008cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ce2:	f043 0202 	orr.w	r2, r3, #2
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf0:	f003 0308 	and.w	r3, r3, #8
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d017      	beq.n	8008d28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d105      	bne.n	8008d10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008d04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008d08:	4b5c      	ldr	r3, [pc, #368]	@ (8008e7c <HAL_UART_IRQHandler+0x2b8>)
 8008d0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00b      	beq.n	8008d28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2208      	movs	r2, #8
 8008d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d1e:	f043 0208 	orr.w	r2, r3, #8
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d012      	beq.n	8008d5a <HAL_UART_IRQHandler+0x196>
 8008d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00c      	beq.n	8008d5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d50:	f043 0220 	orr.w	r2, r3, #32
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 82dd 	beq.w	8009320 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d6a:	f003 0320 	and.w	r3, r3, #32
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d013      	beq.n	8008d9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d76:	f003 0320 	and.w	r3, r3, #32
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d105      	bne.n	8008d8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d007      	beq.n	8008d9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d003      	beq.n	8008d9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008da0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dae:	2b40      	cmp	r3, #64	@ 0x40
 8008db0:	d005      	beq.n	8008dbe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008db6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d054      	beq.n	8008e68 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f001 fc22 	bl	800a608 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dce:	2b40      	cmp	r3, #64	@ 0x40
 8008dd0:	d146      	bne.n	8008e60 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008de0:	e853 3f00 	ldrex	r3, [r3]
 8008de4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008dec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008df0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3308      	adds	r3, #8
 8008dfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008dfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008e02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008e0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008e0e:	e841 2300 	strex	r3, r2, [r1]
 8008e12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008e16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1d9      	bne.n	8008dd2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d017      	beq.n	8008e58 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e2e:	4a15      	ldr	r2, [pc, #84]	@ (8008e84 <HAL_UART_IRQHandler+0x2c0>)
 8008e30:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7fa fc59 	bl	80036f0 <HAL_DMA_Abort_IT>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d019      	beq.n	8008e78 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008e52:	4610      	mov	r0, r2
 8008e54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e56:	e00f      	b.n	8008e78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fa77 	bl	800934c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e5e:	e00b      	b.n	8008e78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fa73 	bl	800934c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e66:	e007      	b.n	8008e78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fa6f 	bl	800934c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008e76:	e253      	b.n	8009320 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e78:	bf00      	nop
    return;
 8008e7a:	e251      	b.n	8009320 <HAL_UART_IRQHandler+0x75c>
 8008e7c:	10000001 	.word	0x10000001
 8008e80:	04000120 	.word	0x04000120
 8008e84:	0800a6d5 	.word	0x0800a6d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	f040 81e7 	bne.w	8009260 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e96:	f003 0310 	and.w	r3, r3, #16
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f000 81e0 	beq.w	8009260 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ea4:	f003 0310 	and.w	r3, r3, #16
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f000 81d9 	beq.w	8009260 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2210      	movs	r2, #16
 8008eb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec0:	2b40      	cmp	r3, #64	@ 0x40
 8008ec2:	f040 8151 	bne.w	8009168 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a96      	ldr	r2, [pc, #600]	@ (8009128 <HAL_UART_IRQHandler+0x564>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d068      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x3e2>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a93      	ldr	r2, [pc, #588]	@ (800912c <HAL_UART_IRQHandler+0x568>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d061      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x3e2>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a91      	ldr	r2, [pc, #580]	@ (8009130 <HAL_UART_IRQHandler+0x56c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d05a      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x3e2>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a8e      	ldr	r2, [pc, #568]	@ (8009134 <HAL_UART_IRQHandler+0x570>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d053      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x3e2>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a8c      	ldr	r2, [pc, #560]	@ (8009138 <HAL_UART_IRQHandler+0x574>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d04c      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x3e2>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a89      	ldr	r2, [pc, #548]	@ (800913c <HAL_UART_IRQHandler+0x578>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d045      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x3e2>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a87      	ldr	r2, [pc, #540]	@ (8009140 <HAL_UART_IRQHandler+0x57c>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d03e      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x3e2>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a84      	ldr	r2, [pc, #528]	@ (8009144 <HAL_UART_IRQHandler+0x580>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d037      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x3e2>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a82      	ldr	r2, [pc, #520]	@ (8009148 <HAL_UART_IRQHandler+0x584>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d030      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x3e2>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a7f      	ldr	r2, [pc, #508]	@ (800914c <HAL_UART_IRQHandler+0x588>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d029      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x3e2>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a7d      	ldr	r2, [pc, #500]	@ (8009150 <HAL_UART_IRQHandler+0x58c>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d022      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x3e2>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a7a      	ldr	r2, [pc, #488]	@ (8009154 <HAL_UART_IRQHandler+0x590>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d01b      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x3e2>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a78      	ldr	r2, [pc, #480]	@ (8009158 <HAL_UART_IRQHandler+0x594>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d014      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x3e2>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a75      	ldr	r2, [pc, #468]	@ (800915c <HAL_UART_IRQHandler+0x598>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d00d      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x3e2>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a73      	ldr	r2, [pc, #460]	@ (8009160 <HAL_UART_IRQHandler+0x59c>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d006      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x3e2>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a70      	ldr	r2, [pc, #448]	@ (8009164 <HAL_UART_IRQHandler+0x5a0>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d106      	bne.n	8008fb4 <HAL_UART_IRQHandler+0x3f0>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	e005      	b.n	8008fc0 <HAL_UART_IRQHandler+0x3fc>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 81ab 	beq.w	8009324 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	f080 81a3 	bcs.w	8009324 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fe4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ff4:	f000 8087 	beq.w	8009106 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009004:	e853 3f00 	ldrex	r3, [r3]
 8009008:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800900c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009014:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	461a      	mov	r2, r3
 800901e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009022:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009026:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800902e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009032:	e841 2300 	strex	r3, r2, [r1]
 8009036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800903a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1da      	bne.n	8008ff8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3308      	adds	r3, #8
 8009048:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800904c:	e853 3f00 	ldrex	r3, [r3]
 8009050:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009052:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009054:	f023 0301 	bic.w	r3, r3, #1
 8009058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	3308      	adds	r3, #8
 8009062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009066:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800906a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800906e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009078:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e1      	bne.n	8009042 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3308      	adds	r3, #8
 8009084:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009086:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009088:	e853 3f00 	ldrex	r3, [r3]
 800908c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800908e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009094:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3308      	adds	r3, #8
 800909e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80090a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090aa:	e841 2300 	strex	r3, r2, [r1]
 80090ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1e3      	bne.n	800907e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2220      	movs	r2, #32
 80090ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090d4:	f023 0310 	bic.w	r3, r3, #16
 80090d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090ee:	e841 2300 	strex	r3, r2, [r1]
 80090f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1e4      	bne.n	80090c4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009100:	4618      	mov	r0, r3
 8009102:	f7f9 ffd7 	bl	80030b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2202      	movs	r2, #2
 800910a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009118:	b29b      	uxth	r3, r3
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	b29b      	uxth	r3, r3
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f91d 	bl	8009360 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009126:	e0fd      	b.n	8009324 <HAL_UART_IRQHandler+0x760>
 8009128:	40020010 	.word	0x40020010
 800912c:	40020028 	.word	0x40020028
 8009130:	40020040 	.word	0x40020040
 8009134:	40020058 	.word	0x40020058
 8009138:	40020070 	.word	0x40020070
 800913c:	40020088 	.word	0x40020088
 8009140:	400200a0 	.word	0x400200a0
 8009144:	400200b8 	.word	0x400200b8
 8009148:	40020410 	.word	0x40020410
 800914c:	40020428 	.word	0x40020428
 8009150:	40020440 	.word	0x40020440
 8009154:	40020458 	.word	0x40020458
 8009158:	40020470 	.word	0x40020470
 800915c:	40020488 	.word	0x40020488
 8009160:	400204a0 	.word	0x400204a0
 8009164:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009174:	b29b      	uxth	r3, r3
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009182:	b29b      	uxth	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 80cf 	beq.w	8009328 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800918a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 80ca 	beq.w	8009328 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919c:	e853 3f00 	ldrex	r3, [r3]
 80091a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	461a      	mov	r2, r3
 80091b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80091b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80091b8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091be:	e841 2300 	strex	r3, r2, [r1]
 80091c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1e4      	bne.n	8009194 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3308      	adds	r3, #8
 80091d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d4:	e853 3f00 	ldrex	r3, [r3]
 80091d8:	623b      	str	r3, [r7, #32]
   return(result);
 80091da:	6a3a      	ldr	r2, [r7, #32]
 80091dc:	4b55      	ldr	r3, [pc, #340]	@ (8009334 <HAL_UART_IRQHandler+0x770>)
 80091de:	4013      	ands	r3, r2
 80091e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3308      	adds	r3, #8
 80091ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80091f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091f6:	e841 2300 	strex	r3, r2, [r1]
 80091fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1e3      	bne.n	80091ca <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2220      	movs	r2, #32
 8009206:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	60fb      	str	r3, [r7, #12]
   return(result);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0310 	bic.w	r3, r3, #16
 800922a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009238:	61fb      	str	r3, [r7, #28]
 800923a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923c:	69b9      	ldr	r1, [r7, #24]
 800923e:	69fa      	ldr	r2, [r7, #28]
 8009240:	e841 2300 	strex	r3, r2, [r1]
 8009244:	617b      	str	r3, [r7, #20]
   return(result);
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1e4      	bne.n	8009216 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2202      	movs	r2, #2
 8009250:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009252:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f881 	bl	8009360 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800925e:	e063      	b.n	8009328 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009264:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00e      	beq.n	800928a <HAL_UART_IRQHandler+0x6c6>
 800926c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009270:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d008      	beq.n	800928a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009280:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f001 ff84 	bl	800b190 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009288:	e051      	b.n	800932e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800928a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800928e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009292:	2b00      	cmp	r3, #0
 8009294:	d014      	beq.n	80092c0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800929a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d105      	bne.n	80092ae <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80092a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d008      	beq.n	80092c0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d03a      	beq.n	800932c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	4798      	blx	r3
    }
    return;
 80092be:	e035      	b.n	800932c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80092c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d009      	beq.n	80092e0 <HAL_UART_IRQHandler+0x71c>
 80092cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d003      	beq.n	80092e0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 fa11 	bl	800a700 <UART_EndTransmit_IT>
    return;
 80092de:	e026      	b.n	800932e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80092e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d009      	beq.n	8009300 <HAL_UART_IRQHandler+0x73c>
 80092ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d003      	beq.n	8009300 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f001 ff5d 	bl	800b1b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092fe:	e016      	b.n	800932e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009304:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d010      	beq.n	800932e <HAL_UART_IRQHandler+0x76a>
 800930c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009310:	2b00      	cmp	r3, #0
 8009312:	da0c      	bge.n	800932e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f001 ff45 	bl	800b1a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800931a:	e008      	b.n	800932e <HAL_UART_IRQHandler+0x76a>
      return;
 800931c:	bf00      	nop
 800931e:	e006      	b.n	800932e <HAL_UART_IRQHandler+0x76a>
    return;
 8009320:	bf00      	nop
 8009322:	e004      	b.n	800932e <HAL_UART_IRQHandler+0x76a>
      return;
 8009324:	bf00      	nop
 8009326:	e002      	b.n	800932e <HAL_UART_IRQHandler+0x76a>
      return;
 8009328:	bf00      	nop
 800932a:	e000      	b.n	800932e <HAL_UART_IRQHandler+0x76a>
    return;
 800932c:	bf00      	nop
  }
}
 800932e:	37e8      	adds	r7, #232	@ 0xe8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	effffffe 	.word	0xeffffffe

08009338 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800937c:	b092      	sub	sp, #72	@ 0x48
 800937e:	af00      	add	r7, sp, #0
 8009380:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	689a      	ldr	r2, [r3, #8]
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	431a      	orrs	r2, r3
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	695b      	ldr	r3, [r3, #20]
 8009396:	431a      	orrs	r2, r3
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	69db      	ldr	r3, [r3, #28]
 800939c:	4313      	orrs	r3, r2
 800939e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	4bbe      	ldr	r3, [pc, #760]	@ (80096a0 <UART_SetConfig+0x328>)
 80093a8:	4013      	ands	r3, r2
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	6812      	ldr	r2, [r2, #0]
 80093ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80093b0:	430b      	orrs	r3, r1
 80093b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	68da      	ldr	r2, [r3, #12]
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4ab3      	ldr	r2, [pc, #716]	@ (80096a4 <UART_SetConfig+0x32c>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d004      	beq.n	80093e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093e0:	4313      	orrs	r3, r2
 80093e2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689a      	ldr	r2, [r3, #8]
 80093ea:	4baf      	ldr	r3, [pc, #700]	@ (80096a8 <UART_SetConfig+0x330>)
 80093ec:	4013      	ands	r3, r2
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	6812      	ldr	r2, [r2, #0]
 80093f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80093f4:	430b      	orrs	r3, r1
 80093f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093fe:	f023 010f 	bic.w	r1, r3, #15
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	430a      	orrs	r2, r1
 800940c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4aa6      	ldr	r2, [pc, #664]	@ (80096ac <UART_SetConfig+0x334>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d177      	bne.n	8009508 <UART_SetConfig+0x190>
 8009418:	4ba5      	ldr	r3, [pc, #660]	@ (80096b0 <UART_SetConfig+0x338>)
 800941a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800941c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009420:	2b28      	cmp	r3, #40	@ 0x28
 8009422:	d86d      	bhi.n	8009500 <UART_SetConfig+0x188>
 8009424:	a201      	add	r2, pc, #4	@ (adr r2, 800942c <UART_SetConfig+0xb4>)
 8009426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942a:	bf00      	nop
 800942c:	080094d1 	.word	0x080094d1
 8009430:	08009501 	.word	0x08009501
 8009434:	08009501 	.word	0x08009501
 8009438:	08009501 	.word	0x08009501
 800943c:	08009501 	.word	0x08009501
 8009440:	08009501 	.word	0x08009501
 8009444:	08009501 	.word	0x08009501
 8009448:	08009501 	.word	0x08009501
 800944c:	080094d9 	.word	0x080094d9
 8009450:	08009501 	.word	0x08009501
 8009454:	08009501 	.word	0x08009501
 8009458:	08009501 	.word	0x08009501
 800945c:	08009501 	.word	0x08009501
 8009460:	08009501 	.word	0x08009501
 8009464:	08009501 	.word	0x08009501
 8009468:	08009501 	.word	0x08009501
 800946c:	080094e1 	.word	0x080094e1
 8009470:	08009501 	.word	0x08009501
 8009474:	08009501 	.word	0x08009501
 8009478:	08009501 	.word	0x08009501
 800947c:	08009501 	.word	0x08009501
 8009480:	08009501 	.word	0x08009501
 8009484:	08009501 	.word	0x08009501
 8009488:	08009501 	.word	0x08009501
 800948c:	080094e9 	.word	0x080094e9
 8009490:	08009501 	.word	0x08009501
 8009494:	08009501 	.word	0x08009501
 8009498:	08009501 	.word	0x08009501
 800949c:	08009501 	.word	0x08009501
 80094a0:	08009501 	.word	0x08009501
 80094a4:	08009501 	.word	0x08009501
 80094a8:	08009501 	.word	0x08009501
 80094ac:	080094f1 	.word	0x080094f1
 80094b0:	08009501 	.word	0x08009501
 80094b4:	08009501 	.word	0x08009501
 80094b8:	08009501 	.word	0x08009501
 80094bc:	08009501 	.word	0x08009501
 80094c0:	08009501 	.word	0x08009501
 80094c4:	08009501 	.word	0x08009501
 80094c8:	08009501 	.word	0x08009501
 80094cc:	080094f9 	.word	0x080094f9
 80094d0:	2301      	movs	r3, #1
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e326      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80094d8:	2304      	movs	r3, #4
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094de:	e322      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80094e0:	2308      	movs	r3, #8
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e31e      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80094e8:	2310      	movs	r3, #16
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ee:	e31a      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80094f0:	2320      	movs	r3, #32
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f6:	e316      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80094f8:	2340      	movs	r3, #64	@ 0x40
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fe:	e312      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009500:	2380      	movs	r3, #128	@ 0x80
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009506:	e30e      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a69      	ldr	r2, [pc, #420]	@ (80096b4 <UART_SetConfig+0x33c>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d130      	bne.n	8009574 <UART_SetConfig+0x1fc>
 8009512:	4b67      	ldr	r3, [pc, #412]	@ (80096b0 <UART_SetConfig+0x338>)
 8009514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	2b05      	cmp	r3, #5
 800951c:	d826      	bhi.n	800956c <UART_SetConfig+0x1f4>
 800951e:	a201      	add	r2, pc, #4	@ (adr r2, 8009524 <UART_SetConfig+0x1ac>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	0800953d 	.word	0x0800953d
 8009528:	08009545 	.word	0x08009545
 800952c:	0800954d 	.word	0x0800954d
 8009530:	08009555 	.word	0x08009555
 8009534:	0800955d 	.word	0x0800955d
 8009538:	08009565 	.word	0x08009565
 800953c:	2300      	movs	r3, #0
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e2f0      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009544:	2304      	movs	r3, #4
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954a:	e2ec      	b.n	8009b26 <UART_SetConfig+0x7ae>
 800954c:	2308      	movs	r3, #8
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e2e8      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009554:	2310      	movs	r3, #16
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955a:	e2e4      	b.n	8009b26 <UART_SetConfig+0x7ae>
 800955c:	2320      	movs	r3, #32
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009562:	e2e0      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009564:	2340      	movs	r3, #64	@ 0x40
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956a:	e2dc      	b.n	8009b26 <UART_SetConfig+0x7ae>
 800956c:	2380      	movs	r3, #128	@ 0x80
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009572:	e2d8      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a4f      	ldr	r2, [pc, #316]	@ (80096b8 <UART_SetConfig+0x340>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d130      	bne.n	80095e0 <UART_SetConfig+0x268>
 800957e:	4b4c      	ldr	r3, [pc, #304]	@ (80096b0 <UART_SetConfig+0x338>)
 8009580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b05      	cmp	r3, #5
 8009588:	d826      	bhi.n	80095d8 <UART_SetConfig+0x260>
 800958a:	a201      	add	r2, pc, #4	@ (adr r2, 8009590 <UART_SetConfig+0x218>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095a9 	.word	0x080095a9
 8009594:	080095b1 	.word	0x080095b1
 8009598:	080095b9 	.word	0x080095b9
 800959c:	080095c1 	.word	0x080095c1
 80095a0:	080095c9 	.word	0x080095c9
 80095a4:	080095d1 	.word	0x080095d1
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e2ba      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80095b0:	2304      	movs	r3, #4
 80095b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b6:	e2b6      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80095b8:	2308      	movs	r3, #8
 80095ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095be:	e2b2      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80095c0:	2310      	movs	r3, #16
 80095c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c6:	e2ae      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80095c8:	2320      	movs	r3, #32
 80095ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ce:	e2aa      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80095d0:	2340      	movs	r3, #64	@ 0x40
 80095d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d6:	e2a6      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80095d8:	2380      	movs	r3, #128	@ 0x80
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095de:	e2a2      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a35      	ldr	r2, [pc, #212]	@ (80096bc <UART_SetConfig+0x344>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d130      	bne.n	800964c <UART_SetConfig+0x2d4>
 80095ea:	4b31      	ldr	r3, [pc, #196]	@ (80096b0 <UART_SetConfig+0x338>)
 80095ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ee:	f003 0307 	and.w	r3, r3, #7
 80095f2:	2b05      	cmp	r3, #5
 80095f4:	d826      	bhi.n	8009644 <UART_SetConfig+0x2cc>
 80095f6:	a201      	add	r2, pc, #4	@ (adr r2, 80095fc <UART_SetConfig+0x284>)
 80095f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fc:	08009615 	.word	0x08009615
 8009600:	0800961d 	.word	0x0800961d
 8009604:	08009625 	.word	0x08009625
 8009608:	0800962d 	.word	0x0800962d
 800960c:	08009635 	.word	0x08009635
 8009610:	0800963d 	.word	0x0800963d
 8009614:	2300      	movs	r3, #0
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e284      	b.n	8009b26 <UART_SetConfig+0x7ae>
 800961c:	2304      	movs	r3, #4
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009622:	e280      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009624:	2308      	movs	r3, #8
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962a:	e27c      	b.n	8009b26 <UART_SetConfig+0x7ae>
 800962c:	2310      	movs	r3, #16
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009632:	e278      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009634:	2320      	movs	r3, #32
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963a:	e274      	b.n	8009b26 <UART_SetConfig+0x7ae>
 800963c:	2340      	movs	r3, #64	@ 0x40
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009642:	e270      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009644:	2380      	movs	r3, #128	@ 0x80
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964a:	e26c      	b.n	8009b26 <UART_SetConfig+0x7ae>
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a1b      	ldr	r2, [pc, #108]	@ (80096c0 <UART_SetConfig+0x348>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d142      	bne.n	80096dc <UART_SetConfig+0x364>
 8009656:	4b16      	ldr	r3, [pc, #88]	@ (80096b0 <UART_SetConfig+0x338>)
 8009658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800965a:	f003 0307 	and.w	r3, r3, #7
 800965e:	2b05      	cmp	r3, #5
 8009660:	d838      	bhi.n	80096d4 <UART_SetConfig+0x35c>
 8009662:	a201      	add	r2, pc, #4	@ (adr r2, 8009668 <UART_SetConfig+0x2f0>)
 8009664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009668:	08009681 	.word	0x08009681
 800966c:	08009689 	.word	0x08009689
 8009670:	08009691 	.word	0x08009691
 8009674:	08009699 	.word	0x08009699
 8009678:	080096c5 	.word	0x080096c5
 800967c:	080096cd 	.word	0x080096cd
 8009680:	2300      	movs	r3, #0
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009686:	e24e      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009688:	2304      	movs	r3, #4
 800968a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800968e:	e24a      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009690:	2308      	movs	r3, #8
 8009692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009696:	e246      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009698:	2310      	movs	r3, #16
 800969a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969e:	e242      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80096a0:	cfff69f3 	.word	0xcfff69f3
 80096a4:	58000c00 	.word	0x58000c00
 80096a8:	11fff4ff 	.word	0x11fff4ff
 80096ac:	40011000 	.word	0x40011000
 80096b0:	58024400 	.word	0x58024400
 80096b4:	40004400 	.word	0x40004400
 80096b8:	40004800 	.word	0x40004800
 80096bc:	40004c00 	.word	0x40004c00
 80096c0:	40005000 	.word	0x40005000
 80096c4:	2320      	movs	r3, #32
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ca:	e22c      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80096cc:	2340      	movs	r3, #64	@ 0x40
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d2:	e228      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80096d4:	2380      	movs	r3, #128	@ 0x80
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096da:	e224      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4ab1      	ldr	r2, [pc, #708]	@ (80099a8 <UART_SetConfig+0x630>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d176      	bne.n	80097d4 <UART_SetConfig+0x45c>
 80096e6:	4bb1      	ldr	r3, [pc, #708]	@ (80099ac <UART_SetConfig+0x634>)
 80096e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096ee:	2b28      	cmp	r3, #40	@ 0x28
 80096f0:	d86c      	bhi.n	80097cc <UART_SetConfig+0x454>
 80096f2:	a201      	add	r2, pc, #4	@ (adr r2, 80096f8 <UART_SetConfig+0x380>)
 80096f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f8:	0800979d 	.word	0x0800979d
 80096fc:	080097cd 	.word	0x080097cd
 8009700:	080097cd 	.word	0x080097cd
 8009704:	080097cd 	.word	0x080097cd
 8009708:	080097cd 	.word	0x080097cd
 800970c:	080097cd 	.word	0x080097cd
 8009710:	080097cd 	.word	0x080097cd
 8009714:	080097cd 	.word	0x080097cd
 8009718:	080097a5 	.word	0x080097a5
 800971c:	080097cd 	.word	0x080097cd
 8009720:	080097cd 	.word	0x080097cd
 8009724:	080097cd 	.word	0x080097cd
 8009728:	080097cd 	.word	0x080097cd
 800972c:	080097cd 	.word	0x080097cd
 8009730:	080097cd 	.word	0x080097cd
 8009734:	080097cd 	.word	0x080097cd
 8009738:	080097ad 	.word	0x080097ad
 800973c:	080097cd 	.word	0x080097cd
 8009740:	080097cd 	.word	0x080097cd
 8009744:	080097cd 	.word	0x080097cd
 8009748:	080097cd 	.word	0x080097cd
 800974c:	080097cd 	.word	0x080097cd
 8009750:	080097cd 	.word	0x080097cd
 8009754:	080097cd 	.word	0x080097cd
 8009758:	080097b5 	.word	0x080097b5
 800975c:	080097cd 	.word	0x080097cd
 8009760:	080097cd 	.word	0x080097cd
 8009764:	080097cd 	.word	0x080097cd
 8009768:	080097cd 	.word	0x080097cd
 800976c:	080097cd 	.word	0x080097cd
 8009770:	080097cd 	.word	0x080097cd
 8009774:	080097cd 	.word	0x080097cd
 8009778:	080097bd 	.word	0x080097bd
 800977c:	080097cd 	.word	0x080097cd
 8009780:	080097cd 	.word	0x080097cd
 8009784:	080097cd 	.word	0x080097cd
 8009788:	080097cd 	.word	0x080097cd
 800978c:	080097cd 	.word	0x080097cd
 8009790:	080097cd 	.word	0x080097cd
 8009794:	080097cd 	.word	0x080097cd
 8009798:	080097c5 	.word	0x080097c5
 800979c:	2301      	movs	r3, #1
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e1c0      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80097a4:	2304      	movs	r3, #4
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097aa:	e1bc      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80097ac:	2308      	movs	r3, #8
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b2:	e1b8      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80097b4:	2310      	movs	r3, #16
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ba:	e1b4      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80097bc:	2320      	movs	r3, #32
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c2:	e1b0      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80097c4:	2340      	movs	r3, #64	@ 0x40
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ca:	e1ac      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80097cc:	2380      	movs	r3, #128	@ 0x80
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d2:	e1a8      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a75      	ldr	r2, [pc, #468]	@ (80099b0 <UART_SetConfig+0x638>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d130      	bne.n	8009840 <UART_SetConfig+0x4c8>
 80097de:	4b73      	ldr	r3, [pc, #460]	@ (80099ac <UART_SetConfig+0x634>)
 80097e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	2b05      	cmp	r3, #5
 80097e8:	d826      	bhi.n	8009838 <UART_SetConfig+0x4c0>
 80097ea:	a201      	add	r2, pc, #4	@ (adr r2, 80097f0 <UART_SetConfig+0x478>)
 80097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f0:	08009809 	.word	0x08009809
 80097f4:	08009811 	.word	0x08009811
 80097f8:	08009819 	.word	0x08009819
 80097fc:	08009821 	.word	0x08009821
 8009800:	08009829 	.word	0x08009829
 8009804:	08009831 	.word	0x08009831
 8009808:	2300      	movs	r3, #0
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980e:	e18a      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009810:	2304      	movs	r3, #4
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009816:	e186      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009818:	2308      	movs	r3, #8
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e182      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009820:	2310      	movs	r3, #16
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e17e      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009828:	2320      	movs	r3, #32
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e17a      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009830:	2340      	movs	r3, #64	@ 0x40
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009836:	e176      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009838:	2380      	movs	r3, #128	@ 0x80
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e172      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a5b      	ldr	r2, [pc, #364]	@ (80099b4 <UART_SetConfig+0x63c>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d130      	bne.n	80098ac <UART_SetConfig+0x534>
 800984a:	4b58      	ldr	r3, [pc, #352]	@ (80099ac <UART_SetConfig+0x634>)
 800984c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	2b05      	cmp	r3, #5
 8009854:	d826      	bhi.n	80098a4 <UART_SetConfig+0x52c>
 8009856:	a201      	add	r2, pc, #4	@ (adr r2, 800985c <UART_SetConfig+0x4e4>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	08009875 	.word	0x08009875
 8009860:	0800987d 	.word	0x0800987d
 8009864:	08009885 	.word	0x08009885
 8009868:	0800988d 	.word	0x0800988d
 800986c:	08009895 	.word	0x08009895
 8009870:	0800989d 	.word	0x0800989d
 8009874:	2300      	movs	r3, #0
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987a:	e154      	b.n	8009b26 <UART_SetConfig+0x7ae>
 800987c:	2304      	movs	r3, #4
 800987e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009882:	e150      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009884:	2308      	movs	r3, #8
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988a:	e14c      	b.n	8009b26 <UART_SetConfig+0x7ae>
 800988c:	2310      	movs	r3, #16
 800988e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009892:	e148      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009894:	2320      	movs	r3, #32
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800989a:	e144      	b.n	8009b26 <UART_SetConfig+0x7ae>
 800989c:	2340      	movs	r3, #64	@ 0x40
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098a2:	e140      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80098a4:	2380      	movs	r3, #128	@ 0x80
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098aa:	e13c      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a41      	ldr	r2, [pc, #260]	@ (80099b8 <UART_SetConfig+0x640>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	f040 8082 	bne.w	80099bc <UART_SetConfig+0x644>
 80098b8:	4b3c      	ldr	r3, [pc, #240]	@ (80099ac <UART_SetConfig+0x634>)
 80098ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098c0:	2b28      	cmp	r3, #40	@ 0x28
 80098c2:	d86d      	bhi.n	80099a0 <UART_SetConfig+0x628>
 80098c4:	a201      	add	r2, pc, #4	@ (adr r2, 80098cc <UART_SetConfig+0x554>)
 80098c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ca:	bf00      	nop
 80098cc:	08009971 	.word	0x08009971
 80098d0:	080099a1 	.word	0x080099a1
 80098d4:	080099a1 	.word	0x080099a1
 80098d8:	080099a1 	.word	0x080099a1
 80098dc:	080099a1 	.word	0x080099a1
 80098e0:	080099a1 	.word	0x080099a1
 80098e4:	080099a1 	.word	0x080099a1
 80098e8:	080099a1 	.word	0x080099a1
 80098ec:	08009979 	.word	0x08009979
 80098f0:	080099a1 	.word	0x080099a1
 80098f4:	080099a1 	.word	0x080099a1
 80098f8:	080099a1 	.word	0x080099a1
 80098fc:	080099a1 	.word	0x080099a1
 8009900:	080099a1 	.word	0x080099a1
 8009904:	080099a1 	.word	0x080099a1
 8009908:	080099a1 	.word	0x080099a1
 800990c:	08009981 	.word	0x08009981
 8009910:	080099a1 	.word	0x080099a1
 8009914:	080099a1 	.word	0x080099a1
 8009918:	080099a1 	.word	0x080099a1
 800991c:	080099a1 	.word	0x080099a1
 8009920:	080099a1 	.word	0x080099a1
 8009924:	080099a1 	.word	0x080099a1
 8009928:	080099a1 	.word	0x080099a1
 800992c:	08009989 	.word	0x08009989
 8009930:	080099a1 	.word	0x080099a1
 8009934:	080099a1 	.word	0x080099a1
 8009938:	080099a1 	.word	0x080099a1
 800993c:	080099a1 	.word	0x080099a1
 8009940:	080099a1 	.word	0x080099a1
 8009944:	080099a1 	.word	0x080099a1
 8009948:	080099a1 	.word	0x080099a1
 800994c:	08009991 	.word	0x08009991
 8009950:	080099a1 	.word	0x080099a1
 8009954:	080099a1 	.word	0x080099a1
 8009958:	080099a1 	.word	0x080099a1
 800995c:	080099a1 	.word	0x080099a1
 8009960:	080099a1 	.word	0x080099a1
 8009964:	080099a1 	.word	0x080099a1
 8009968:	080099a1 	.word	0x080099a1
 800996c:	08009999 	.word	0x08009999
 8009970:	2301      	movs	r3, #1
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009976:	e0d6      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009978:	2304      	movs	r3, #4
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800997e:	e0d2      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009980:	2308      	movs	r3, #8
 8009982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009986:	e0ce      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009988:	2310      	movs	r3, #16
 800998a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998e:	e0ca      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009990:	2320      	movs	r3, #32
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009996:	e0c6      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009998:	2340      	movs	r3, #64	@ 0x40
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999e:	e0c2      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80099a0:	2380      	movs	r3, #128	@ 0x80
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a6:	e0be      	b.n	8009b26 <UART_SetConfig+0x7ae>
 80099a8:	40011400 	.word	0x40011400
 80099ac:	58024400 	.word	0x58024400
 80099b0:	40007800 	.word	0x40007800
 80099b4:	40007c00 	.word	0x40007c00
 80099b8:	40011800 	.word	0x40011800
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4aad      	ldr	r2, [pc, #692]	@ (8009c78 <UART_SetConfig+0x900>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d176      	bne.n	8009ab4 <UART_SetConfig+0x73c>
 80099c6:	4bad      	ldr	r3, [pc, #692]	@ (8009c7c <UART_SetConfig+0x904>)
 80099c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099ce:	2b28      	cmp	r3, #40	@ 0x28
 80099d0:	d86c      	bhi.n	8009aac <UART_SetConfig+0x734>
 80099d2:	a201      	add	r2, pc, #4	@ (adr r2, 80099d8 <UART_SetConfig+0x660>)
 80099d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d8:	08009a7d 	.word	0x08009a7d
 80099dc:	08009aad 	.word	0x08009aad
 80099e0:	08009aad 	.word	0x08009aad
 80099e4:	08009aad 	.word	0x08009aad
 80099e8:	08009aad 	.word	0x08009aad
 80099ec:	08009aad 	.word	0x08009aad
 80099f0:	08009aad 	.word	0x08009aad
 80099f4:	08009aad 	.word	0x08009aad
 80099f8:	08009a85 	.word	0x08009a85
 80099fc:	08009aad 	.word	0x08009aad
 8009a00:	08009aad 	.word	0x08009aad
 8009a04:	08009aad 	.word	0x08009aad
 8009a08:	08009aad 	.word	0x08009aad
 8009a0c:	08009aad 	.word	0x08009aad
 8009a10:	08009aad 	.word	0x08009aad
 8009a14:	08009aad 	.word	0x08009aad
 8009a18:	08009a8d 	.word	0x08009a8d
 8009a1c:	08009aad 	.word	0x08009aad
 8009a20:	08009aad 	.word	0x08009aad
 8009a24:	08009aad 	.word	0x08009aad
 8009a28:	08009aad 	.word	0x08009aad
 8009a2c:	08009aad 	.word	0x08009aad
 8009a30:	08009aad 	.word	0x08009aad
 8009a34:	08009aad 	.word	0x08009aad
 8009a38:	08009a95 	.word	0x08009a95
 8009a3c:	08009aad 	.word	0x08009aad
 8009a40:	08009aad 	.word	0x08009aad
 8009a44:	08009aad 	.word	0x08009aad
 8009a48:	08009aad 	.word	0x08009aad
 8009a4c:	08009aad 	.word	0x08009aad
 8009a50:	08009aad 	.word	0x08009aad
 8009a54:	08009aad 	.word	0x08009aad
 8009a58:	08009a9d 	.word	0x08009a9d
 8009a5c:	08009aad 	.word	0x08009aad
 8009a60:	08009aad 	.word	0x08009aad
 8009a64:	08009aad 	.word	0x08009aad
 8009a68:	08009aad 	.word	0x08009aad
 8009a6c:	08009aad 	.word	0x08009aad
 8009a70:	08009aad 	.word	0x08009aad
 8009a74:	08009aad 	.word	0x08009aad
 8009a78:	08009aa5 	.word	0x08009aa5
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a82:	e050      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009a84:	2304      	movs	r3, #4
 8009a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a8a:	e04c      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009a8c:	2308      	movs	r3, #8
 8009a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a92:	e048      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009a94:	2310      	movs	r3, #16
 8009a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9a:	e044      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009a9c:	2320      	movs	r3, #32
 8009a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aa2:	e040      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009aa4:	2340      	movs	r3, #64	@ 0x40
 8009aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aaa:	e03c      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009aac:	2380      	movs	r3, #128	@ 0x80
 8009aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab2:	e038      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a71      	ldr	r2, [pc, #452]	@ (8009c80 <UART_SetConfig+0x908>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d130      	bne.n	8009b20 <UART_SetConfig+0x7a8>
 8009abe:	4b6f      	ldr	r3, [pc, #444]	@ (8009c7c <UART_SetConfig+0x904>)
 8009ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ac2:	f003 0307 	and.w	r3, r3, #7
 8009ac6:	2b05      	cmp	r3, #5
 8009ac8:	d826      	bhi.n	8009b18 <UART_SetConfig+0x7a0>
 8009aca:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad0 <UART_SetConfig+0x758>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009ae9 	.word	0x08009ae9
 8009ad4:	08009af1 	.word	0x08009af1
 8009ad8:	08009af9 	.word	0x08009af9
 8009adc:	08009b01 	.word	0x08009b01
 8009ae0:	08009b09 	.word	0x08009b09
 8009ae4:	08009b11 	.word	0x08009b11
 8009ae8:	2302      	movs	r3, #2
 8009aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aee:	e01a      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009af0:	2304      	movs	r3, #4
 8009af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af6:	e016      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009af8:	2308      	movs	r3, #8
 8009afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afe:	e012      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009b00:	2310      	movs	r3, #16
 8009b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b06:	e00e      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009b08:	2320      	movs	r3, #32
 8009b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0e:	e00a      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009b10:	2340      	movs	r3, #64	@ 0x40
 8009b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b16:	e006      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009b18:	2380      	movs	r3, #128	@ 0x80
 8009b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1e:	e002      	b.n	8009b26 <UART_SetConfig+0x7ae>
 8009b20:	2380      	movs	r3, #128	@ 0x80
 8009b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a55      	ldr	r2, [pc, #340]	@ (8009c80 <UART_SetConfig+0x908>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	f040 80f8 	bne.w	8009d22 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b36:	2b20      	cmp	r3, #32
 8009b38:	dc46      	bgt.n	8009bc8 <UART_SetConfig+0x850>
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	db75      	blt.n	8009c2a <UART_SetConfig+0x8b2>
 8009b3e:	3b02      	subs	r3, #2
 8009b40:	2b1e      	cmp	r3, #30
 8009b42:	d872      	bhi.n	8009c2a <UART_SetConfig+0x8b2>
 8009b44:	a201      	add	r2, pc, #4	@ (adr r2, 8009b4c <UART_SetConfig+0x7d4>)
 8009b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4a:	bf00      	nop
 8009b4c:	08009bcf 	.word	0x08009bcf
 8009b50:	08009c2b 	.word	0x08009c2b
 8009b54:	08009bd7 	.word	0x08009bd7
 8009b58:	08009c2b 	.word	0x08009c2b
 8009b5c:	08009c2b 	.word	0x08009c2b
 8009b60:	08009c2b 	.word	0x08009c2b
 8009b64:	08009be7 	.word	0x08009be7
 8009b68:	08009c2b 	.word	0x08009c2b
 8009b6c:	08009c2b 	.word	0x08009c2b
 8009b70:	08009c2b 	.word	0x08009c2b
 8009b74:	08009c2b 	.word	0x08009c2b
 8009b78:	08009c2b 	.word	0x08009c2b
 8009b7c:	08009c2b 	.word	0x08009c2b
 8009b80:	08009c2b 	.word	0x08009c2b
 8009b84:	08009bf7 	.word	0x08009bf7
 8009b88:	08009c2b 	.word	0x08009c2b
 8009b8c:	08009c2b 	.word	0x08009c2b
 8009b90:	08009c2b 	.word	0x08009c2b
 8009b94:	08009c2b 	.word	0x08009c2b
 8009b98:	08009c2b 	.word	0x08009c2b
 8009b9c:	08009c2b 	.word	0x08009c2b
 8009ba0:	08009c2b 	.word	0x08009c2b
 8009ba4:	08009c2b 	.word	0x08009c2b
 8009ba8:	08009c2b 	.word	0x08009c2b
 8009bac:	08009c2b 	.word	0x08009c2b
 8009bb0:	08009c2b 	.word	0x08009c2b
 8009bb4:	08009c2b 	.word	0x08009c2b
 8009bb8:	08009c2b 	.word	0x08009c2b
 8009bbc:	08009c2b 	.word	0x08009c2b
 8009bc0:	08009c2b 	.word	0x08009c2b
 8009bc4:	08009c1d 	.word	0x08009c1d
 8009bc8:	2b40      	cmp	r3, #64	@ 0x40
 8009bca:	d02a      	beq.n	8009c22 <UART_SetConfig+0x8aa>
 8009bcc:	e02d      	b.n	8009c2a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009bce:	f7fd fca7 	bl	8007520 <HAL_RCCEx_GetD3PCLK1Freq>
 8009bd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009bd4:	e02f      	b.n	8009c36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fd fcb6 	bl	800754c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009be4:	e027      	b.n	8009c36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009be6:	f107 0318 	add.w	r3, r7, #24
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fd fe02 	bl	80077f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf4:	e01f      	b.n	8009c36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bf6:	4b21      	ldr	r3, [pc, #132]	@ (8009c7c <UART_SetConfig+0x904>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0320 	and.w	r3, r3, #32
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d009      	beq.n	8009c16 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c02:	4b1e      	ldr	r3, [pc, #120]	@ (8009c7c <UART_SetConfig+0x904>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	08db      	lsrs	r3, r3, #3
 8009c08:	f003 0303 	and.w	r3, r3, #3
 8009c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8009c84 <UART_SetConfig+0x90c>)
 8009c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c14:	e00f      	b.n	8009c36 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009c16:	4b1b      	ldr	r3, [pc, #108]	@ (8009c84 <UART_SetConfig+0x90c>)
 8009c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c1a:	e00c      	b.n	8009c36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8009c88 <UART_SetConfig+0x910>)
 8009c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c20:	e009      	b.n	8009c36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c28:	e005      	b.n	8009c36 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f000 81ee 	beq.w	800a01a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c42:	4a12      	ldr	r2, [pc, #72]	@ (8009c8c <UART_SetConfig+0x914>)
 8009c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c48:	461a      	mov	r2, r3
 8009c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c50:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	4613      	mov	r3, r2
 8009c58:	005b      	lsls	r3, r3, #1
 8009c5a:	4413      	add	r3, r2
 8009c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d305      	bcc.n	8009c6e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d910      	bls.n	8009c90 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c74:	e1d1      	b.n	800a01a <UART_SetConfig+0xca2>
 8009c76:	bf00      	nop
 8009c78:	40011c00 	.word	0x40011c00
 8009c7c:	58024400 	.word	0x58024400
 8009c80:	58000c00 	.word	0x58000c00
 8009c84:	03d09000 	.word	0x03d09000
 8009c88:	003d0900 	.word	0x003d0900
 8009c8c:	080132c0 	.word	0x080132c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c92:	2200      	movs	r2, #0
 8009c94:	60bb      	str	r3, [r7, #8]
 8009c96:	60fa      	str	r2, [r7, #12]
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9c:	4ac0      	ldr	r2, [pc, #768]	@ (8009fa0 <UART_SetConfig+0xc28>)
 8009c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	603b      	str	r3, [r7, #0]
 8009ca8:	607a      	str	r2, [r7, #4]
 8009caa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009cb2:	f7f6 fd41 	bl	8000738 <__aeabi_uldivmod>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	460b      	mov	r3, r1
 8009cba:	4610      	mov	r0, r2
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	f04f 0200 	mov.w	r2, #0
 8009cc2:	f04f 0300 	mov.w	r3, #0
 8009cc6:	020b      	lsls	r3, r1, #8
 8009cc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ccc:	0202      	lsls	r2, r0, #8
 8009cce:	6979      	ldr	r1, [r7, #20]
 8009cd0:	6849      	ldr	r1, [r1, #4]
 8009cd2:	0849      	lsrs	r1, r1, #1
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	4605      	mov	r5, r0
 8009cda:	eb12 0804 	adds.w	r8, r2, r4
 8009cde:	eb43 0905 	adc.w	r9, r3, r5
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	469a      	mov	sl, r3
 8009cea:	4693      	mov	fp, r2
 8009cec:	4652      	mov	r2, sl
 8009cee:	465b      	mov	r3, fp
 8009cf0:	4640      	mov	r0, r8
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	f7f6 fd20 	bl	8000738 <__aeabi_uldivmod>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d06:	d308      	bcc.n	8009d1a <UART_SetConfig+0x9a2>
 8009d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d0e:	d204      	bcs.n	8009d1a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d16:	60da      	str	r2, [r3, #12]
 8009d18:	e17f      	b.n	800a01a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d20:	e17b      	b.n	800a01a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	69db      	ldr	r3, [r3, #28]
 8009d26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d2a:	f040 80bd 	bne.w	8009ea8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009d2e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d32:	2b20      	cmp	r3, #32
 8009d34:	dc48      	bgt.n	8009dc8 <UART_SetConfig+0xa50>
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	db7b      	blt.n	8009e32 <UART_SetConfig+0xaba>
 8009d3a:	2b20      	cmp	r3, #32
 8009d3c:	d879      	bhi.n	8009e32 <UART_SetConfig+0xaba>
 8009d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d44 <UART_SetConfig+0x9cc>)
 8009d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d44:	08009dcf 	.word	0x08009dcf
 8009d48:	08009dd7 	.word	0x08009dd7
 8009d4c:	08009e33 	.word	0x08009e33
 8009d50:	08009e33 	.word	0x08009e33
 8009d54:	08009ddf 	.word	0x08009ddf
 8009d58:	08009e33 	.word	0x08009e33
 8009d5c:	08009e33 	.word	0x08009e33
 8009d60:	08009e33 	.word	0x08009e33
 8009d64:	08009def 	.word	0x08009def
 8009d68:	08009e33 	.word	0x08009e33
 8009d6c:	08009e33 	.word	0x08009e33
 8009d70:	08009e33 	.word	0x08009e33
 8009d74:	08009e33 	.word	0x08009e33
 8009d78:	08009e33 	.word	0x08009e33
 8009d7c:	08009e33 	.word	0x08009e33
 8009d80:	08009e33 	.word	0x08009e33
 8009d84:	08009dff 	.word	0x08009dff
 8009d88:	08009e33 	.word	0x08009e33
 8009d8c:	08009e33 	.word	0x08009e33
 8009d90:	08009e33 	.word	0x08009e33
 8009d94:	08009e33 	.word	0x08009e33
 8009d98:	08009e33 	.word	0x08009e33
 8009d9c:	08009e33 	.word	0x08009e33
 8009da0:	08009e33 	.word	0x08009e33
 8009da4:	08009e33 	.word	0x08009e33
 8009da8:	08009e33 	.word	0x08009e33
 8009dac:	08009e33 	.word	0x08009e33
 8009db0:	08009e33 	.word	0x08009e33
 8009db4:	08009e33 	.word	0x08009e33
 8009db8:	08009e33 	.word	0x08009e33
 8009dbc:	08009e33 	.word	0x08009e33
 8009dc0:	08009e33 	.word	0x08009e33
 8009dc4:	08009e25 	.word	0x08009e25
 8009dc8:	2b40      	cmp	r3, #64	@ 0x40
 8009dca:	d02e      	beq.n	8009e2a <UART_SetConfig+0xab2>
 8009dcc:	e031      	b.n	8009e32 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dce:	f7fc f9db 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 8009dd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009dd4:	e033      	b.n	8009e3e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dd6:	f7fc f9ed 	bl	80061b4 <HAL_RCC_GetPCLK2Freq>
 8009dda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ddc:	e02f      	b.n	8009e3e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fd fbb2 	bl	800754c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dec:	e027      	b.n	8009e3e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dee:	f107 0318 	add.w	r3, r7, #24
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fd fcfe 	bl	80077f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dfc:	e01f      	b.n	8009e3e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dfe:	4b69      	ldr	r3, [pc, #420]	@ (8009fa4 <UART_SetConfig+0xc2c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 0320 	and.w	r3, r3, #32
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d009      	beq.n	8009e1e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e0a:	4b66      	ldr	r3, [pc, #408]	@ (8009fa4 <UART_SetConfig+0xc2c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	08db      	lsrs	r3, r3, #3
 8009e10:	f003 0303 	and.w	r3, r3, #3
 8009e14:	4a64      	ldr	r2, [pc, #400]	@ (8009fa8 <UART_SetConfig+0xc30>)
 8009e16:	fa22 f303 	lsr.w	r3, r2, r3
 8009e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e1c:	e00f      	b.n	8009e3e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009e1e:	4b62      	ldr	r3, [pc, #392]	@ (8009fa8 <UART_SetConfig+0xc30>)
 8009e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e22:	e00c      	b.n	8009e3e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e24:	4b61      	ldr	r3, [pc, #388]	@ (8009fac <UART_SetConfig+0xc34>)
 8009e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e28:	e009      	b.n	8009e3e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e30:	e005      	b.n	8009e3e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009e32:	2300      	movs	r3, #0
 8009e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 80ea 	beq.w	800a01a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e4a:	4a55      	ldr	r2, [pc, #340]	@ (8009fa0 <UART_SetConfig+0xc28>)
 8009e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e50:	461a      	mov	r2, r3
 8009e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e58:	005a      	lsls	r2, r3, #1
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	085b      	lsrs	r3, r3, #1
 8009e60:	441a      	add	r2, r3
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6e:	2b0f      	cmp	r3, #15
 8009e70:	d916      	bls.n	8009ea0 <UART_SetConfig+0xb28>
 8009e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e78:	d212      	bcs.n	8009ea0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	f023 030f 	bic.w	r3, r3, #15
 8009e82:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e86:	085b      	lsrs	r3, r3, #1
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	f003 0307 	and.w	r3, r3, #7
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009e92:	4313      	orrs	r3, r2
 8009e94:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009e9c:	60da      	str	r2, [r3, #12]
 8009e9e:	e0bc      	b.n	800a01a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009ea6:	e0b8      	b.n	800a01a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ea8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009eac:	2b20      	cmp	r3, #32
 8009eae:	dc4b      	bgt.n	8009f48 <UART_SetConfig+0xbd0>
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f2c0 8087 	blt.w	8009fc4 <UART_SetConfig+0xc4c>
 8009eb6:	2b20      	cmp	r3, #32
 8009eb8:	f200 8084 	bhi.w	8009fc4 <UART_SetConfig+0xc4c>
 8009ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec4 <UART_SetConfig+0xb4c>)
 8009ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec2:	bf00      	nop
 8009ec4:	08009f4f 	.word	0x08009f4f
 8009ec8:	08009f57 	.word	0x08009f57
 8009ecc:	08009fc5 	.word	0x08009fc5
 8009ed0:	08009fc5 	.word	0x08009fc5
 8009ed4:	08009f5f 	.word	0x08009f5f
 8009ed8:	08009fc5 	.word	0x08009fc5
 8009edc:	08009fc5 	.word	0x08009fc5
 8009ee0:	08009fc5 	.word	0x08009fc5
 8009ee4:	08009f6f 	.word	0x08009f6f
 8009ee8:	08009fc5 	.word	0x08009fc5
 8009eec:	08009fc5 	.word	0x08009fc5
 8009ef0:	08009fc5 	.word	0x08009fc5
 8009ef4:	08009fc5 	.word	0x08009fc5
 8009ef8:	08009fc5 	.word	0x08009fc5
 8009efc:	08009fc5 	.word	0x08009fc5
 8009f00:	08009fc5 	.word	0x08009fc5
 8009f04:	08009f7f 	.word	0x08009f7f
 8009f08:	08009fc5 	.word	0x08009fc5
 8009f0c:	08009fc5 	.word	0x08009fc5
 8009f10:	08009fc5 	.word	0x08009fc5
 8009f14:	08009fc5 	.word	0x08009fc5
 8009f18:	08009fc5 	.word	0x08009fc5
 8009f1c:	08009fc5 	.word	0x08009fc5
 8009f20:	08009fc5 	.word	0x08009fc5
 8009f24:	08009fc5 	.word	0x08009fc5
 8009f28:	08009fc5 	.word	0x08009fc5
 8009f2c:	08009fc5 	.word	0x08009fc5
 8009f30:	08009fc5 	.word	0x08009fc5
 8009f34:	08009fc5 	.word	0x08009fc5
 8009f38:	08009fc5 	.word	0x08009fc5
 8009f3c:	08009fc5 	.word	0x08009fc5
 8009f40:	08009fc5 	.word	0x08009fc5
 8009f44:	08009fb7 	.word	0x08009fb7
 8009f48:	2b40      	cmp	r3, #64	@ 0x40
 8009f4a:	d037      	beq.n	8009fbc <UART_SetConfig+0xc44>
 8009f4c:	e03a      	b.n	8009fc4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f4e:	f7fc f91b 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 8009f52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f54:	e03c      	b.n	8009fd0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f56:	f7fc f92d 	bl	80061b4 <HAL_RCC_GetPCLK2Freq>
 8009f5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f5c:	e038      	b.n	8009fd0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fd faf2 	bl	800754c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f6c:	e030      	b.n	8009fd0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f6e:	f107 0318 	add.w	r3, r7, #24
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fd fc3e 	bl	80077f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f7c:	e028      	b.n	8009fd0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f7e:	4b09      	ldr	r3, [pc, #36]	@ (8009fa4 <UART_SetConfig+0xc2c>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 0320 	and.w	r3, r3, #32
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d012      	beq.n	8009fb0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f8a:	4b06      	ldr	r3, [pc, #24]	@ (8009fa4 <UART_SetConfig+0xc2c>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	08db      	lsrs	r3, r3, #3
 8009f90:	f003 0303 	and.w	r3, r3, #3
 8009f94:	4a04      	ldr	r2, [pc, #16]	@ (8009fa8 <UART_SetConfig+0xc30>)
 8009f96:	fa22 f303 	lsr.w	r3, r2, r3
 8009f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f9c:	e018      	b.n	8009fd0 <UART_SetConfig+0xc58>
 8009f9e:	bf00      	nop
 8009fa0:	080132c0 	.word	0x080132c0
 8009fa4:	58024400 	.word	0x58024400
 8009fa8:	03d09000 	.word	0x03d09000
 8009fac:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009fb0:	4b24      	ldr	r3, [pc, #144]	@ (800a044 <UART_SetConfig+0xccc>)
 8009fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fb4:	e00c      	b.n	8009fd0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fb6:	4b24      	ldr	r3, [pc, #144]	@ (800a048 <UART_SetConfig+0xcd0>)
 8009fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fba:	e009      	b.n	8009fd0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fc2:	e005      	b.n	8009fd0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009fce:	bf00      	nop
    }

    if (pclk != 0U)
 8009fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d021      	beq.n	800a01a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fda:	4a1c      	ldr	r2, [pc, #112]	@ (800a04c <UART_SetConfig+0xcd4>)
 8009fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fe4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	085b      	lsrs	r3, r3, #1
 8009fee:	441a      	add	r2, r3
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffc:	2b0f      	cmp	r3, #15
 8009ffe:	d909      	bls.n	800a014 <UART_SetConfig+0xc9c>
 800a000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a006:	d205      	bcs.n	800a014 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	60da      	str	r2, [r3, #12]
 800a012:	e002      	b.n	800a01a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	2201      	movs	r2, #1
 800a026:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	2200      	movs	r2, #0
 800a02e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	2200      	movs	r2, #0
 800a034:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a036:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3748      	adds	r7, #72	@ 0x48
 800a03e:	46bd      	mov	sp, r7
 800a040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a044:	03d09000 	.word	0x03d09000
 800a048:	003d0900 	.word	0x003d0900
 800a04c:	080132c0 	.word	0x080132c0

0800a050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a05c:	f003 0308 	and.w	r3, r3, #8
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00a      	beq.n	800a07a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a07e:	f003 0301 	and.w	r3, r3, #1
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00a      	beq.n	800a09c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	430a      	orrs	r2, r1
 800a09a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a0:	f003 0302 	and.w	r3, r3, #2
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00a      	beq.n	800a0be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c2:	f003 0304 	and.w	r3, r3, #4
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00a      	beq.n	800a0e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	430a      	orrs	r2, r1
 800a0de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e4:	f003 0310 	and.w	r3, r3, #16
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00a      	beq.n	800a102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	430a      	orrs	r2, r1
 800a100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a106:	f003 0320 	and.w	r3, r3, #32
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00a      	beq.n	800a124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	430a      	orrs	r2, r1
 800a122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d01a      	beq.n	800a166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	430a      	orrs	r2, r1
 800a144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a14a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a14e:	d10a      	bne.n	800a166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	430a      	orrs	r2, r1
 800a164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a16a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00a      	beq.n	800a188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	430a      	orrs	r2, r1
 800a186:	605a      	str	r2, [r3, #4]
  }
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b098      	sub	sp, #96	@ 0x60
 800a198:	af02      	add	r7, sp, #8
 800a19a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1a4:	f7f8 fdce 	bl	8002d44 <HAL_GetTick>
 800a1a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0308 	and.w	r3, r3, #8
 800a1b4:	2b08      	cmp	r3, #8
 800a1b6:	d12f      	bne.n	800a218 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f88e 	bl	800a2e8 <UART_WaitOnFlagUntilTimeout>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d022      	beq.n	800a218 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1da:	e853 3f00 	ldrex	r3, [r3]
 800a1de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1f8:	e841 2300 	strex	r3, r2, [r1]
 800a1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1e6      	bne.n	800a1d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2220      	movs	r2, #32
 800a208:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a214:	2303      	movs	r3, #3
 800a216:	e063      	b.n	800a2e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 0304 	and.w	r3, r3, #4
 800a222:	2b04      	cmp	r3, #4
 800a224:	d149      	bne.n	800a2ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a226:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a22e:	2200      	movs	r2, #0
 800a230:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f857 	bl	800a2e8 <UART_WaitOnFlagUntilTimeout>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d03c      	beq.n	800a2ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a248:	e853 3f00 	ldrex	r3, [r3]
 800a24c:	623b      	str	r3, [r7, #32]
   return(result);
 800a24e:	6a3b      	ldr	r3, [r7, #32]
 800a250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a254:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	461a      	mov	r2, r3
 800a25c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a25e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a260:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a266:	e841 2300 	strex	r3, r2, [r1]
 800a26a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1e6      	bne.n	800a240 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3308      	adds	r3, #8
 800a278:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	e853 3f00 	ldrex	r3, [r3]
 800a280:	60fb      	str	r3, [r7, #12]
   return(result);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f023 0301 	bic.w	r3, r3, #1
 800a288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	3308      	adds	r3, #8
 800a290:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a292:	61fa      	str	r2, [r7, #28]
 800a294:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a296:	69b9      	ldr	r1, [r7, #24]
 800a298:	69fa      	ldr	r2, [r7, #28]
 800a29a:	e841 2300 	strex	r3, r2, [r1]
 800a29e:	617b      	str	r3, [r7, #20]
   return(result);
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1e5      	bne.n	800a272 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2220      	movs	r2, #32
 800a2aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	e012      	b.n	800a2e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2220      	movs	r2, #32
 800a2be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2220      	movs	r2, #32
 800a2c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3758      	adds	r7, #88	@ 0x58
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	603b      	str	r3, [r7, #0]
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2f8:	e04f      	b.n	800a39a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a300:	d04b      	beq.n	800a39a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a302:	f7f8 fd1f 	bl	8002d44 <HAL_GetTick>
 800a306:	4602      	mov	r2, r0
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	69ba      	ldr	r2, [r7, #24]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d302      	bcc.n	800a318 <UART_WaitOnFlagUntilTimeout+0x30>
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d101      	bne.n	800a31c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a318:	2303      	movs	r3, #3
 800a31a:	e04e      	b.n	800a3ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 0304 	and.w	r3, r3, #4
 800a326:	2b00      	cmp	r3, #0
 800a328:	d037      	beq.n	800a39a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	2b80      	cmp	r3, #128	@ 0x80
 800a32e:	d034      	beq.n	800a39a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	2b40      	cmp	r3, #64	@ 0x40
 800a334:	d031      	beq.n	800a39a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	69db      	ldr	r3, [r3, #28]
 800a33c:	f003 0308 	and.w	r3, r3, #8
 800a340:	2b08      	cmp	r3, #8
 800a342:	d110      	bne.n	800a366 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2208      	movs	r2, #8
 800a34a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f000 f95b 	bl	800a608 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2208      	movs	r2, #8
 800a356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e029      	b.n	800a3ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	69db      	ldr	r3, [r3, #28]
 800a36c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a374:	d111      	bne.n	800a39a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a37e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 f941 	bl	800a608 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2220      	movs	r2, #32
 800a38a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a396:	2303      	movs	r3, #3
 800a398:	e00f      	b.n	800a3ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	69da      	ldr	r2, [r3, #28]
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	bf0c      	ite	eq
 800a3aa:	2301      	moveq	r3, #1
 800a3ac:	2300      	movne	r3, #0
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	79fb      	ldrb	r3, [r7, #7]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d0a0      	beq.n	800a2fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
	...

0800a3c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b0a3      	sub	sp, #140	@ 0x8c
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	88fa      	ldrh	r2, [r7, #6]
 800a3dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	88fa      	ldrh	r2, [r7, #6]
 800a3e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3f6:	d10e      	bne.n	800a416 <UART_Start_Receive_IT+0x52>
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d105      	bne.n	800a40c <UART_Start_Receive_IT+0x48>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a406:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a40a:	e02d      	b.n	800a468 <UART_Start_Receive_IT+0xa4>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	22ff      	movs	r2, #255	@ 0xff
 800a410:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a414:	e028      	b.n	800a468 <UART_Start_Receive_IT+0xa4>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10d      	bne.n	800a43a <UART_Start_Receive_IT+0x76>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d104      	bne.n	800a430 <UART_Start_Receive_IT+0x6c>
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	22ff      	movs	r2, #255	@ 0xff
 800a42a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a42e:	e01b      	b.n	800a468 <UART_Start_Receive_IT+0xa4>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	227f      	movs	r2, #127	@ 0x7f
 800a434:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a438:	e016      	b.n	800a468 <UART_Start_Receive_IT+0xa4>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a442:	d10d      	bne.n	800a460 <UART_Start_Receive_IT+0x9c>
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d104      	bne.n	800a456 <UART_Start_Receive_IT+0x92>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	227f      	movs	r2, #127	@ 0x7f
 800a450:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a454:	e008      	b.n	800a468 <UART_Start_Receive_IT+0xa4>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	223f      	movs	r2, #63	@ 0x3f
 800a45a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a45e:	e003      	b.n	800a468 <UART_Start_Receive_IT+0xa4>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2222      	movs	r2, #34	@ 0x22
 800a474:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3308      	adds	r3, #8
 800a47e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a482:	e853 3f00 	ldrex	r3, [r3]
 800a486:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a488:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a48a:	f043 0301 	orr.w	r3, r3, #1
 800a48e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	3308      	adds	r3, #8
 800a498:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a49c:	673a      	str	r2, [r7, #112]	@ 0x70
 800a49e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a4a2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a4a4:	e841 2300 	strex	r3, r2, [r1]
 800a4a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a4aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1e3      	bne.n	800a478 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4b8:	d14f      	bne.n	800a55a <UART_Start_Receive_IT+0x196>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a4c0:	88fa      	ldrh	r2, [r7, #6]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d349      	bcc.n	800a55a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4ce:	d107      	bne.n	800a4e0 <UART_Start_Receive_IT+0x11c>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d103      	bne.n	800a4e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	4a47      	ldr	r2, [pc, #284]	@ (800a5f8 <UART_Start_Receive_IT+0x234>)
 800a4dc:	675a      	str	r2, [r3, #116]	@ 0x74
 800a4de:	e002      	b.n	800a4e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4a46      	ldr	r2, [pc, #280]	@ (800a5fc <UART_Start_Receive_IT+0x238>)
 800a4e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d01a      	beq.n	800a524 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4f6:	e853 3f00 	ldrex	r3, [r3]
 800a4fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a4fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a502:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a510:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a512:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a514:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a516:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a518:	e841 2300 	strex	r3, r2, [r1]
 800a51c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a51e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1e4      	bne.n	800a4ee <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3308      	adds	r3, #8
 800a52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a52e:	e853 3f00 	ldrex	r3, [r3]
 800a532:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a53a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3308      	adds	r3, #8
 800a542:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a544:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a546:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a548:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a54a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a54c:	e841 2300 	strex	r3, r2, [r1]
 800a550:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1e5      	bne.n	800a524 <UART_Start_Receive_IT+0x160>
 800a558:	e046      	b.n	800a5e8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a562:	d107      	bne.n	800a574 <UART_Start_Receive_IT+0x1b0>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d103      	bne.n	800a574 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4a24      	ldr	r2, [pc, #144]	@ (800a600 <UART_Start_Receive_IT+0x23c>)
 800a570:	675a      	str	r2, [r3, #116]	@ 0x74
 800a572:	e002      	b.n	800a57a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4a23      	ldr	r2, [pc, #140]	@ (800a604 <UART_Start_Receive_IT+0x240>)
 800a578:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d019      	beq.n	800a5b6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58a:	e853 3f00 	ldrex	r3, [r3]
 800a58e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a592:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a596:	677b      	str	r3, [r7, #116]	@ 0x74
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	461a      	mov	r2, r3
 800a59e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a5a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5a2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a5a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5a8:	e841 2300 	strex	r3, r2, [r1]
 800a5ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1e6      	bne.n	800a582 <UART_Start_Receive_IT+0x1be>
 800a5b4:	e018      	b.n	800a5e8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	e853 3f00 	ldrex	r3, [r3]
 800a5c2:	613b      	str	r3, [r7, #16]
   return(result);
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	f043 0320 	orr.w	r3, r3, #32
 800a5ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5d4:	623b      	str	r3, [r7, #32]
 800a5d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d8:	69f9      	ldr	r1, [r7, #28]
 800a5da:	6a3a      	ldr	r2, [r7, #32]
 800a5dc:	e841 2300 	strex	r3, r2, [r1]
 800a5e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d1e6      	bne.n	800a5b6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	378c      	adds	r7, #140	@ 0x8c
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	0800ae29 	.word	0x0800ae29
 800a5fc:	0800aac9 	.word	0x0800aac9
 800a600:	0800a911 	.word	0x0800a911
 800a604:	0800a759 	.word	0x0800a759

0800a608 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a608:	b480      	push	{r7}
 800a60a:	b095      	sub	sp, #84	@ 0x54
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a618:	e853 3f00 	ldrex	r3, [r3]
 800a61c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a620:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a624:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a62e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a630:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a632:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a634:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a636:	e841 2300 	strex	r3, r2, [r1]
 800a63a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a63c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1e6      	bne.n	800a610 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	3308      	adds	r3, #8
 800a648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64a:	6a3b      	ldr	r3, [r7, #32]
 800a64c:	e853 3f00 	ldrex	r3, [r3]
 800a650:	61fb      	str	r3, [r7, #28]
   return(result);
 800a652:	69fa      	ldr	r2, [r7, #28]
 800a654:	4b1e      	ldr	r3, [pc, #120]	@ (800a6d0 <UART_EndRxTransfer+0xc8>)
 800a656:	4013      	ands	r3, r2
 800a658:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	3308      	adds	r3, #8
 800a660:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a662:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a664:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a666:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a668:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a66a:	e841 2300 	strex	r3, r2, [r1]
 800a66e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1e5      	bne.n	800a642 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d118      	bne.n	800a6b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	e853 3f00 	ldrex	r3, [r3]
 800a68a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	f023 0310 	bic.w	r3, r3, #16
 800a692:	647b      	str	r3, [r7, #68]	@ 0x44
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	461a      	mov	r2, r3
 800a69a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a69c:	61bb      	str	r3, [r7, #24]
 800a69e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a0:	6979      	ldr	r1, [r7, #20]
 800a6a2:	69ba      	ldr	r2, [r7, #24]
 800a6a4:	e841 2300 	strex	r3, r2, [r1]
 800a6a8:	613b      	str	r3, [r7, #16]
   return(result);
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1e6      	bne.n	800a67e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2220      	movs	r2, #32
 800a6b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a6c4:	bf00      	nop
 800a6c6:	3754      	adds	r7, #84	@ 0x54
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	effffffe 	.word	0xeffffffe

0800a6d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f7fe fe2a 	bl	800934c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6f8:	bf00      	nop
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b088      	sub	sp, #32
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	e853 3f00 	ldrex	r3, [r3]
 800a714:	60bb      	str	r3, [r7, #8]
   return(result);
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a71c:	61fb      	str	r3, [r7, #28]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	461a      	mov	r2, r3
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	61bb      	str	r3, [r7, #24]
 800a728:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72a:	6979      	ldr	r1, [r7, #20]
 800a72c:	69ba      	ldr	r2, [r7, #24]
 800a72e:	e841 2300 	strex	r3, r2, [r1]
 800a732:	613b      	str	r3, [r7, #16]
   return(result);
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1e6      	bne.n	800a708 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2220      	movs	r2, #32
 800a73e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f7fe fdf5 	bl	8009338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a74e:	bf00      	nop
 800a750:	3720      	adds	r7, #32
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
	...

0800a758 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b09c      	sub	sp, #112	@ 0x70
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a766:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a770:	2b22      	cmp	r3, #34	@ 0x22
 800a772:	f040 80be 	bne.w	800a8f2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a77c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a780:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a784:	b2d9      	uxtb	r1, r3
 800a786:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a790:	400a      	ands	r2, r1
 800a792:	b2d2      	uxtb	r2, r2
 800a794:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f040 80a1 	bne.w	800a902 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7c8:	e853 3f00 	ldrex	r3, [r3]
 800a7cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a7ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e6      	bne.n	800a7c0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3308      	adds	r3, #8
 800a7f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fc:	e853 3f00 	ldrex	r3, [r3]
 800a800:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a804:	f023 0301 	bic.w	r3, r3, #1
 800a808:	667b      	str	r3, [r7, #100]	@ 0x64
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3308      	adds	r3, #8
 800a810:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a812:	647a      	str	r2, [r7, #68]	@ 0x44
 800a814:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a816:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a818:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a81a:	e841 2300 	strex	r3, r2, [r1]
 800a81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1e5      	bne.n	800a7f2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2220      	movs	r2, #32
 800a82a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a33      	ldr	r2, [pc, #204]	@ (800a90c <UART_RxISR_8BIT+0x1b4>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d01f      	beq.n	800a884 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d018      	beq.n	800a884 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85a:	e853 3f00 	ldrex	r3, [r3]
 800a85e:	623b      	str	r3, [r7, #32]
   return(result);
 800a860:	6a3b      	ldr	r3, [r7, #32]
 800a862:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a866:	663b      	str	r3, [r7, #96]	@ 0x60
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	461a      	mov	r2, r3
 800a86e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a870:	633b      	str	r3, [r7, #48]	@ 0x30
 800a872:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a874:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a878:	e841 2300 	strex	r3, r2, [r1]
 800a87c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1e6      	bne.n	800a852 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d12e      	bne.n	800a8ea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	e853 3f00 	ldrex	r3, [r3]
 800a89e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f023 0310 	bic.w	r3, r3, #16
 800a8a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8b0:	61fb      	str	r3, [r7, #28]
 800a8b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b4:	69b9      	ldr	r1, [r7, #24]
 800a8b6:	69fa      	ldr	r2, [r7, #28]
 800a8b8:	e841 2300 	strex	r3, r2, [r1]
 800a8bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1e6      	bne.n	800a892 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	69db      	ldr	r3, [r3, #28]
 800a8ca:	f003 0310 	and.w	r3, r3, #16
 800a8ce:	2b10      	cmp	r3, #16
 800a8d0:	d103      	bne.n	800a8da <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2210      	movs	r2, #16
 800a8d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f7fe fd3c 	bl	8009360 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a8e8:	e00b      	b.n	800a902 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7f6 fdaa 	bl	8001444 <HAL_UART_RxCpltCallback>
}
 800a8f0:	e007      	b.n	800a902 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	699a      	ldr	r2, [r3, #24]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f042 0208 	orr.w	r2, r2, #8
 800a900:	619a      	str	r2, [r3, #24]
}
 800a902:	bf00      	nop
 800a904:	3770      	adds	r7, #112	@ 0x70
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	58000c00 	.word	0x58000c00

0800a910 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b09c      	sub	sp, #112	@ 0x70
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a91e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a928:	2b22      	cmp	r3, #34	@ 0x22
 800a92a:	f040 80be 	bne.w	800aaaa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a934:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a93c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a93e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a942:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a946:	4013      	ands	r3, r2
 800a948:	b29a      	uxth	r2, r3
 800a94a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a94c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a952:	1c9a      	adds	r2, r3, #2
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a95e:	b29b      	uxth	r3, r3
 800a960:	3b01      	subs	r3, #1
 800a962:	b29a      	uxth	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a970:	b29b      	uxth	r3, r3
 800a972:	2b00      	cmp	r3, #0
 800a974:	f040 80a1 	bne.w	800aaba <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a980:	e853 3f00 	ldrex	r3, [r3]
 800a984:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a988:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a98c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a996:	657b      	str	r3, [r7, #84]	@ 0x54
 800a998:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a99c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a99e:	e841 2300 	strex	r3, r2, [r1]
 800a9a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a9a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d1e6      	bne.n	800a978 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	3308      	adds	r3, #8
 800a9b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b4:	e853 3f00 	ldrex	r3, [r3]
 800a9b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9bc:	f023 0301 	bic.w	r3, r3, #1
 800a9c0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	3308      	adds	r3, #8
 800a9c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a9ca:	643a      	str	r2, [r7, #64]	@ 0x40
 800a9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a9d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a9d2:	e841 2300 	strex	r3, r2, [r1]
 800a9d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1e5      	bne.n	800a9aa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2220      	movs	r2, #32
 800a9e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a33      	ldr	r2, [pc, #204]	@ (800aac4 <UART_RxISR_16BIT+0x1b4>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d01f      	beq.n	800aa3c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d018      	beq.n	800aa3c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa10:	6a3b      	ldr	r3, [r7, #32]
 800aa12:	e853 3f00 	ldrex	r3, [r3]
 800aa16:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aa1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	461a      	mov	r2, r3
 800aa26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa2a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa30:	e841 2300 	strex	r3, r2, [r1]
 800aa34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1e6      	bne.n	800aa0a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d12e      	bne.n	800aaa2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	e853 3f00 	ldrex	r3, [r3]
 800aa56:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	f023 0310 	bic.w	r3, r3, #16
 800aa5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	461a      	mov	r2, r3
 800aa66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa68:	61bb      	str	r3, [r7, #24]
 800aa6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6c:	6979      	ldr	r1, [r7, #20]
 800aa6e:	69ba      	ldr	r2, [r7, #24]
 800aa70:	e841 2300 	strex	r3, r2, [r1]
 800aa74:	613b      	str	r3, [r7, #16]
   return(result);
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1e6      	bne.n	800aa4a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	69db      	ldr	r3, [r3, #28]
 800aa82:	f003 0310 	and.w	r3, r3, #16
 800aa86:	2b10      	cmp	r3, #16
 800aa88:	d103      	bne.n	800aa92 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2210      	movs	r2, #16
 800aa90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7fe fc60 	bl	8009360 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aaa0:	e00b      	b.n	800aaba <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7f6 fcce 	bl	8001444 <HAL_UART_RxCpltCallback>
}
 800aaa8:	e007      	b.n	800aaba <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	699a      	ldr	r2, [r3, #24]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f042 0208 	orr.w	r2, r2, #8
 800aab8:	619a      	str	r2, [r3, #24]
}
 800aaba:	bf00      	nop
 800aabc:	3770      	adds	r7, #112	@ 0x70
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	58000c00 	.word	0x58000c00

0800aac8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b0ac      	sub	sp, #176	@ 0xb0
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aad6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	69db      	ldr	r3, [r3, #28]
 800aae0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aafe:	2b22      	cmp	r3, #34	@ 0x22
 800ab00:	f040 8180 	bne.w	800ae04 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ab0a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab0e:	e123      	b.n	800ad58 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab16:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ab1a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ab1e:	b2d9      	uxtb	r1, r3
 800ab20:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab2a:	400a      	ands	r2, r1
 800ab2c:	b2d2      	uxtb	r2, r2
 800ab2e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab34:	1c5a      	adds	r2, r3, #1
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	3b01      	subs	r3, #1
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	69db      	ldr	r3, [r3, #28]
 800ab52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ab56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab5a:	f003 0307 	and.w	r3, r3, #7
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d053      	beq.n	800ac0a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab66:	f003 0301 	and.w	r3, r3, #1
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d011      	beq.n	800ab92 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ab6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ab72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00b      	beq.n	800ab92 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab88:	f043 0201 	orr.w	r2, r3, #1
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab96:	f003 0302 	and.w	r3, r3, #2
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d011      	beq.n	800abc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ab9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00b      	beq.n	800abc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2202      	movs	r2, #2
 800abb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abb8:	f043 0204 	orr.w	r2, r3, #4
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abc6:	f003 0304 	and.w	r3, r3, #4
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d011      	beq.n	800abf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800abce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abd2:	f003 0301 	and.w	r3, r3, #1
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00b      	beq.n	800abf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2204      	movs	r2, #4
 800abe0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abe8:	f043 0202 	orr.w	r2, r3, #2
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d006      	beq.n	800ac0a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f7fe fba5 	bl	800934c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f040 80a0 	bne.w	800ad58 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac20:	e853 3f00 	ldrex	r3, [r3]
 800ac24:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ac26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	461a      	mov	r2, r3
 800ac36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac3c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ac40:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ac42:	e841 2300 	strex	r3, r2, [r1]
 800ac46:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ac48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1e4      	bne.n	800ac18 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	3308      	adds	r3, #8
 800ac54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac58:	e853 3f00 	ldrex	r3, [r3]
 800ac5c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ac5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac60:	4b6e      	ldr	r3, [pc, #440]	@ (800ae1c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800ac62:	4013      	ands	r3, r2
 800ac64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	3308      	adds	r3, #8
 800ac6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ac72:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ac74:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac76:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ac78:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ac7a:	e841 2300 	strex	r3, r2, [r1]
 800ac7e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ac80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1e3      	bne.n	800ac4e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2220      	movs	r2, #32
 800ac8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a60      	ldr	r2, [pc, #384]	@ (800ae20 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d021      	beq.n	800ace8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d01a      	beq.n	800ace8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acba:	e853 3f00 	ldrex	r3, [r3]
 800acbe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800acc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800acc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800acd4:	657b      	str	r3, [r7, #84]	@ 0x54
 800acd6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800acda:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800acdc:	e841 2300 	strex	r3, r2, [r1]
 800ace0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ace2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1e4      	bne.n	800acb2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acec:	2b01      	cmp	r3, #1
 800acee:	d130      	bne.n	800ad52 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acfe:	e853 3f00 	ldrex	r3, [r3]
 800ad02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad06:	f023 0310 	bic.w	r3, r3, #16
 800ad0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	461a      	mov	r2, r3
 800ad14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad18:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad20:	e841 2300 	strex	r3, r2, [r1]
 800ad24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d1e4      	bne.n	800acf6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	69db      	ldr	r3, [r3, #28]
 800ad32:	f003 0310 	and.w	r3, r3, #16
 800ad36:	2b10      	cmp	r3, #16
 800ad38:	d103      	bne.n	800ad42 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2210      	movs	r2, #16
 800ad40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad48:	4619      	mov	r1, r3
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7fe fb08 	bl	8009360 <HAL_UARTEx_RxEventCallback>
 800ad50:	e002      	b.n	800ad58 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7f6 fb76 	bl	8001444 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad58:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d006      	beq.n	800ad6e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ad60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad64:	f003 0320 	and.w	r3, r3, #32
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	f47f aed1 	bne.w	800ab10 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad74:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ad78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d049      	beq.n	800ae14 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad86:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d242      	bcs.n	800ae14 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3308      	adds	r3, #8
 800ad94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad96:	6a3b      	ldr	r3, [r7, #32]
 800ad98:	e853 3f00 	ldrex	r3, [r3]
 800ad9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ada4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3308      	adds	r3, #8
 800adae:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800adb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800adb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800adb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adba:	e841 2300 	strex	r3, r2, [r1]
 800adbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800adc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1e3      	bne.n	800ad8e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4a16      	ldr	r2, [pc, #88]	@ (800ae24 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800adca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	e853 3f00 	ldrex	r3, [r3]
 800add8:	60bb      	str	r3, [r7, #8]
   return(result);
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	f043 0320 	orr.w	r3, r3, #32
 800ade0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	461a      	mov	r2, r3
 800adea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800adee:	61bb      	str	r3, [r7, #24]
 800adf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf2:	6979      	ldr	r1, [r7, #20]
 800adf4:	69ba      	ldr	r2, [r7, #24]
 800adf6:	e841 2300 	strex	r3, r2, [r1]
 800adfa:	613b      	str	r3, [r7, #16]
   return(result);
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1e4      	bne.n	800adcc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae02:	e007      	b.n	800ae14 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	699a      	ldr	r2, [r3, #24]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f042 0208 	orr.w	r2, r2, #8
 800ae12:	619a      	str	r2, [r3, #24]
}
 800ae14:	bf00      	nop
 800ae16:	37b0      	adds	r7, #176	@ 0xb0
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	effffffe 	.word	0xeffffffe
 800ae20:	58000c00 	.word	0x58000c00
 800ae24:	0800a759 	.word	0x0800a759

0800ae28 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b0ae      	sub	sp, #184	@ 0xb8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae36:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	69db      	ldr	r3, [r3, #28]
 800ae40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae5e:	2b22      	cmp	r3, #34	@ 0x22
 800ae60:	f040 8184 	bne.w	800b16c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ae6a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ae6e:	e127      	b.n	800b0c0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae76:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ae82:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ae86:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ae92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae98:	1c9a      	adds	r2, r3, #2
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	3b01      	subs	r3, #1
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	69db      	ldr	r3, [r3, #28]
 800aeb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aeba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aebe:	f003 0307 	and.w	r3, r3, #7
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d053      	beq.n	800af6e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aec6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aeca:	f003 0301 	and.w	r3, r3, #1
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d011      	beq.n	800aef6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800aed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00b      	beq.n	800aef6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2201      	movs	r2, #1
 800aee4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeec:	f043 0201 	orr.w	r2, r3, #1
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aef6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aefa:	f003 0302 	and.w	r3, r3, #2
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d011      	beq.n	800af26 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800af02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00b      	beq.n	800af26 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2202      	movs	r2, #2
 800af14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af1c:	f043 0204 	orr.w	r2, r3, #4
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af2a:	f003 0304 	and.w	r3, r3, #4
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d011      	beq.n	800af56 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800af32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af36:	f003 0301 	and.w	r3, r3, #1
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00b      	beq.n	800af56 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2204      	movs	r2, #4
 800af44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af4c:	f043 0202 	orr.w	r2, r3, #2
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d006      	beq.n	800af6e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f7fe f9f3 	bl	800934c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af74:	b29b      	uxth	r3, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	f040 80a2 	bne.w	800b0c0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af84:	e853 3f00 	ldrex	r3, [r3]
 800af88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800af8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	461a      	mov	r2, r3
 800af9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800afa2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800afa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800afaa:	e841 2300 	strex	r3, r2, [r1]
 800afae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800afb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1e2      	bne.n	800af7c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	3308      	adds	r3, #8
 800afbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800afc0:	e853 3f00 	ldrex	r3, [r3]
 800afc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800afc6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800afc8:	4b6e      	ldr	r3, [pc, #440]	@ (800b184 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800afca:	4013      	ands	r3, r2
 800afcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3308      	adds	r3, #8
 800afd6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800afda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800afdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800afe0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800afe2:	e841 2300 	strex	r3, r2, [r1]
 800afe6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800afe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1e3      	bne.n	800afb6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2220      	movs	r2, #32
 800aff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a60      	ldr	r2, [pc, #384]	@ (800b188 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d021      	beq.n	800b050 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b016:	2b00      	cmp	r3, #0
 800b018:	d01a      	beq.n	800b050 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b022:	e853 3f00 	ldrex	r3, [r3]
 800b026:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b028:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b02a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b02e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	461a      	mov	r2, r3
 800b038:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b03c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b03e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b040:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b042:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b044:	e841 2300 	strex	r3, r2, [r1]
 800b048:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b04a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1e4      	bne.n	800b01a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b054:	2b01      	cmp	r3, #1
 800b056:	d130      	bne.n	800b0ba <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b066:	e853 3f00 	ldrex	r3, [r3]
 800b06a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b06e:	f023 0310 	bic.w	r3, r3, #16
 800b072:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	461a      	mov	r2, r3
 800b07c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b080:	647b      	str	r3, [r7, #68]	@ 0x44
 800b082:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b084:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b086:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b088:	e841 2300 	strex	r3, r2, [r1]
 800b08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b08e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1e4      	bne.n	800b05e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	69db      	ldr	r3, [r3, #28]
 800b09a:	f003 0310 	and.w	r3, r3, #16
 800b09e:	2b10      	cmp	r3, #16
 800b0a0:	d103      	bne.n	800b0aa <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2210      	movs	r2, #16
 800b0a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7fe f954 	bl	8009360 <HAL_UARTEx_RxEventCallback>
 800b0b8:	e002      	b.n	800b0c0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7f6 f9c2 	bl	8001444 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b0c0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d006      	beq.n	800b0d6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b0c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b0cc:	f003 0320 	and.w	r3, r3, #32
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f47f aecd 	bne.w	800ae70 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0dc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b0e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d049      	beq.n	800b17c <UART_RxISR_16BIT_FIFOEN+0x354>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b0ee:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d242      	bcs.n	800b17c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b100:	e853 3f00 	ldrex	r3, [r3]
 800b104:	623b      	str	r3, [r7, #32]
   return(result);
 800b106:	6a3b      	ldr	r3, [r7, #32]
 800b108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b10c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	3308      	adds	r3, #8
 800b116:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b11a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b11c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b122:	e841 2300 	strex	r3, r2, [r1]
 800b126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1e3      	bne.n	800b0f6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a16      	ldr	r2, [pc, #88]	@ (800b18c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b132:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	e853 3f00 	ldrex	r3, [r3]
 800b140:	60fb      	str	r3, [r7, #12]
   return(result);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f043 0320 	orr.w	r3, r3, #32
 800b148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	461a      	mov	r2, r3
 800b152:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b156:	61fb      	str	r3, [r7, #28]
 800b158:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15a:	69b9      	ldr	r1, [r7, #24]
 800b15c:	69fa      	ldr	r2, [r7, #28]
 800b15e:	e841 2300 	strex	r3, r2, [r1]
 800b162:	617b      	str	r3, [r7, #20]
   return(result);
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d1e4      	bne.n	800b134 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b16a:	e007      	b.n	800b17c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	699a      	ldr	r2, [r3, #24]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f042 0208 	orr.w	r2, r2, #8
 800b17a:	619a      	str	r2, [r3, #24]
}
 800b17c:	bf00      	nop
 800b17e:	37b8      	adds	r7, #184	@ 0xb8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	effffffe 	.word	0xeffffffe
 800b188:	58000c00 	.word	0x58000c00
 800b18c:	0800a911 	.word	0x0800a911

0800b190 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d101      	bne.n	800b1e2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b1de:	2302      	movs	r3, #2
 800b1e0:	e027      	b.n	800b232 <HAL_UARTEx_DisableFifoMode+0x66>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2224      	movs	r2, #36	@ 0x24
 800b1ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f022 0201 	bic.w	r2, r2, #1
 800b208:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b210:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2220      	movs	r2, #32
 800b224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3714      	adds	r7, #20
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b084      	sub	sp, #16
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d101      	bne.n	800b256 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b252:	2302      	movs	r3, #2
 800b254:	e02d      	b.n	800b2b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2201      	movs	r2, #1
 800b25a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2224      	movs	r2, #36	@ 0x24
 800b262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f022 0201 	bic.w	r2, r2, #1
 800b27c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	683a      	ldr	r2, [r7, #0]
 800b28e:	430a      	orrs	r2, r1
 800b290:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f850 	bl	800b338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2220      	movs	r2, #32
 800b2a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b084      	sub	sp, #16
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
 800b2c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d101      	bne.n	800b2d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2ce:	2302      	movs	r3, #2
 800b2d0:	e02d      	b.n	800b32e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2224      	movs	r2, #36	@ 0x24
 800b2de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f022 0201 	bic.w	r2, r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	683a      	ldr	r2, [r7, #0]
 800b30a:	430a      	orrs	r2, r1
 800b30c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f812 	bl	800b338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2220      	movs	r2, #32
 800b320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
	...

0800b338 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b344:	2b00      	cmp	r3, #0
 800b346:	d108      	bne.n	800b35a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b358:	e031      	b.n	800b3be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b35a:	2310      	movs	r3, #16
 800b35c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b35e:	2310      	movs	r3, #16
 800b360:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	0e5b      	lsrs	r3, r3, #25
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	f003 0307 	and.w	r3, r3, #7
 800b370:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	0f5b      	lsrs	r3, r3, #29
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	f003 0307 	and.w	r3, r3, #7
 800b380:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b382:	7bbb      	ldrb	r3, [r7, #14]
 800b384:	7b3a      	ldrb	r2, [r7, #12]
 800b386:	4911      	ldr	r1, [pc, #68]	@ (800b3cc <UARTEx_SetNbDataToProcess+0x94>)
 800b388:	5c8a      	ldrb	r2, [r1, r2]
 800b38a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b38e:	7b3a      	ldrb	r2, [r7, #12]
 800b390:	490f      	ldr	r1, [pc, #60]	@ (800b3d0 <UARTEx_SetNbDataToProcess+0x98>)
 800b392:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b394:	fb93 f3f2 	sdiv	r3, r3, r2
 800b398:	b29a      	uxth	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
 800b3a2:	7b7a      	ldrb	r2, [r7, #13]
 800b3a4:	4909      	ldr	r1, [pc, #36]	@ (800b3cc <UARTEx_SetNbDataToProcess+0x94>)
 800b3a6:	5c8a      	ldrb	r2, [r1, r2]
 800b3a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3ac:	7b7a      	ldrb	r2, [r7, #13]
 800b3ae:	4908      	ldr	r1, [pc, #32]	@ (800b3d0 <UARTEx_SetNbDataToProcess+0x98>)
 800b3b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b3be:	bf00      	nop
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	080132d8 	.word	0x080132d8
 800b3d0:	080132e0 	.word	0x080132e0

0800b3d4 <Data_Analyse>:
/**
 * @brief 数据解析函数  如更换MCU平台或更换软件库，只需将串口接收到的值传入该函数即可解析
 * @param  rec 串口接收到的字节数据
 */
void Data_Analyse(uint8_t rec)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	4603      	mov	r3, r0
 800b3dc:	71fb      	strb	r3, [r7, #7]
		float ActVal[6];
	} posture;
	static uint8_t count = 0;
	static uint8_t i = 0;

	ch = rec;
 800b3de:	4a48      	ldr	r2, [pc, #288]	@ (800b500 <Data_Analyse+0x12c>)
 800b3e0:	79fb      	ldrb	r3, [r7, #7]
 800b3e2:	7013      	strb	r3, [r2, #0]
//	HAL_UART_Transmit(&huart10, &ch, 1, 0xff);
//	HAL_UART_Transmit(&huart10, (uint8_t*) ch, 1, 0xff);
	switch (count)
 800b3e4:	4b47      	ldr	r3, [pc, #284]	@ (800b504 <Data_Analyse+0x130>)
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	2b04      	cmp	r3, #4
 800b3ea:	d87c      	bhi.n	800b4e6 <Data_Analyse+0x112>
 800b3ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f4 <Data_Analyse+0x20>)
 800b3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f2:	bf00      	nop
 800b3f4:	0800b409 	.word	0x0800b409
 800b3f8:	0800b427 	.word	0x0800b427
 800b3fc:	0800b453 	.word	0x0800b453
 800b400:	0800b489 	.word	0x0800b489
 800b404:	0800b4a7 	.word	0x0800b4a7
	{
	case 0:
		if (ch == 0x0d)
 800b408:	4b3d      	ldr	r3, [pc, #244]	@ (800b500 <Data_Analyse+0x12c>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	2b0d      	cmp	r3, #13
 800b40e:	d106      	bne.n	800b41e <Data_Analyse+0x4a>
			count++;
 800b410:	4b3c      	ldr	r3, [pc, #240]	@ (800b504 <Data_Analyse+0x130>)
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	3301      	adds	r3, #1
 800b416:	b2da      	uxtb	r2, r3
 800b418:	4b3a      	ldr	r3, [pc, #232]	@ (800b504 <Data_Analyse+0x130>)
 800b41a:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b41c:	e06a      	b.n	800b4f4 <Data_Analyse+0x120>
			count = 0;
 800b41e:	4b39      	ldr	r3, [pc, #228]	@ (800b504 <Data_Analyse+0x130>)
 800b420:	2200      	movs	r2, #0
 800b422:	701a      	strb	r2, [r3, #0]
		break;
 800b424:	e066      	b.n	800b4f4 <Data_Analyse+0x120>
	case 1:
		if (ch == 0x0a)
 800b426:	4b36      	ldr	r3, [pc, #216]	@ (800b500 <Data_Analyse+0x12c>)
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	2b0a      	cmp	r3, #10
 800b42c:	d109      	bne.n	800b442 <Data_Analyse+0x6e>
		{
			i = 0;
 800b42e:	4b36      	ldr	r3, [pc, #216]	@ (800b508 <Data_Analyse+0x134>)
 800b430:	2200      	movs	r2, #0
 800b432:	701a      	strb	r2, [r3, #0]
			count++;
 800b434:	4b33      	ldr	r3, [pc, #204]	@ (800b504 <Data_Analyse+0x130>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	3301      	adds	r3, #1
 800b43a:	b2da      	uxtb	r2, r3
 800b43c:	4b31      	ldr	r3, [pc, #196]	@ (800b504 <Data_Analyse+0x130>)
 800b43e:	701a      	strb	r2, [r3, #0]
		}
		else if (ch == 0x0d)
			;
		else
			count = 0;
		break;
 800b440:	e055      	b.n	800b4ee <Data_Analyse+0x11a>
		else if (ch == 0x0d)
 800b442:	4b2f      	ldr	r3, [pc, #188]	@ (800b500 <Data_Analyse+0x12c>)
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	2b0d      	cmp	r3, #13
 800b448:	d051      	beq.n	800b4ee <Data_Analyse+0x11a>
			count = 0;
 800b44a:	4b2e      	ldr	r3, [pc, #184]	@ (800b504 <Data_Analyse+0x130>)
 800b44c:	2200      	movs	r2, #0
 800b44e:	701a      	strb	r2, [r3, #0]
		break;
 800b450:	e04d      	b.n	800b4ee <Data_Analyse+0x11a>
	case 2:
		posture.date[i] = ch;
 800b452:	4b2d      	ldr	r3, [pc, #180]	@ (800b508 <Data_Analyse+0x134>)
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	461a      	mov	r2, r3
 800b458:	4b29      	ldr	r3, [pc, #164]	@ (800b500 <Data_Analyse+0x12c>)
 800b45a:	7819      	ldrb	r1, [r3, #0]
 800b45c:	4b2b      	ldr	r3, [pc, #172]	@ (800b50c <Data_Analyse+0x138>)
 800b45e:	5499      	strb	r1, [r3, r2]
		i++;
 800b460:	4b29      	ldr	r3, [pc, #164]	@ (800b508 <Data_Analyse+0x134>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	3301      	adds	r3, #1
 800b466:	b2da      	uxtb	r2, r3
 800b468:	4b27      	ldr	r3, [pc, #156]	@ (800b508 <Data_Analyse+0x134>)
 800b46a:	701a      	strb	r2, [r3, #0]
		if (i >= 24)
 800b46c:	4b26      	ldr	r3, [pc, #152]	@ (800b508 <Data_Analyse+0x134>)
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	2b17      	cmp	r3, #23
 800b472:	d93e      	bls.n	800b4f2 <Data_Analyse+0x11e>
		{
			i = 0;
 800b474:	4b24      	ldr	r3, [pc, #144]	@ (800b508 <Data_Analyse+0x134>)
 800b476:	2200      	movs	r2, #0
 800b478:	701a      	strb	r2, [r3, #0]
			count++;
 800b47a:	4b22      	ldr	r3, [pc, #136]	@ (800b504 <Data_Analyse+0x130>)
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	3301      	adds	r3, #1
 800b480:	b2da      	uxtb	r2, r3
 800b482:	4b20      	ldr	r3, [pc, #128]	@ (800b504 <Data_Analyse+0x130>)
 800b484:	701a      	strb	r2, [r3, #0]
		}
		break;
 800b486:	e034      	b.n	800b4f2 <Data_Analyse+0x11e>
	case 3:
		if (ch == 0x0a)
 800b488:	4b1d      	ldr	r3, [pc, #116]	@ (800b500 <Data_Analyse+0x12c>)
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	2b0a      	cmp	r3, #10
 800b48e:	d106      	bne.n	800b49e <Data_Analyse+0xca>
			count++;
 800b490:	4b1c      	ldr	r3, [pc, #112]	@ (800b504 <Data_Analyse+0x130>)
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	3301      	adds	r3, #1
 800b496:	b2da      	uxtb	r2, r3
 800b498:	4b1a      	ldr	r3, [pc, #104]	@ (800b504 <Data_Analyse+0x130>)
 800b49a:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b49c:	e02a      	b.n	800b4f4 <Data_Analyse+0x120>
			count = 0;
 800b49e:	4b19      	ldr	r3, [pc, #100]	@ (800b504 <Data_Analyse+0x130>)
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	701a      	strb	r2, [r3, #0]
		break;
 800b4a4:	e026      	b.n	800b4f4 <Data_Analyse+0x120>
	case 4:
		if (ch == 0x0d)
 800b4a6:	4b16      	ldr	r3, [pc, #88]	@ (800b500 <Data_Analyse+0x12c>)
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	2b0d      	cmp	r3, #13
 800b4ac:	d117      	bne.n	800b4de <Data_Analyse+0x10a>
		{
			zangle = posture.ActVal[0];
 800b4ae:	4b17      	ldr	r3, [pc, #92]	@ (800b50c <Data_Analyse+0x138>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a17      	ldr	r2, [pc, #92]	@ (800b510 <Data_Analyse+0x13c>)
 800b4b4:	6013      	str	r3, [r2, #0]
			xangle = posture.ActVal[1];
 800b4b6:	4b15      	ldr	r3, [pc, #84]	@ (800b50c <Data_Analyse+0x138>)
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	4a16      	ldr	r2, [pc, #88]	@ (800b514 <Data_Analyse+0x140>)
 800b4bc:	6013      	str	r3, [r2, #0]
			yangle = posture.ActVal[2];
 800b4be:	4b13      	ldr	r3, [pc, #76]	@ (800b50c <Data_Analyse+0x138>)
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	4a15      	ldr	r2, [pc, #84]	@ (800b518 <Data_Analyse+0x144>)
 800b4c4:	6013      	str	r3, [r2, #0]
			pos_x = posture.ActVal[3];
 800b4c6:	4b11      	ldr	r3, [pc, #68]	@ (800b50c <Data_Analyse+0x138>)
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	4a14      	ldr	r2, [pc, #80]	@ (800b51c <Data_Analyse+0x148>)
 800b4cc:	6013      	str	r3, [r2, #0]
			pos_y = posture.ActVal[4];
 800b4ce:	4b0f      	ldr	r3, [pc, #60]	@ (800b50c <Data_Analyse+0x138>)
 800b4d0:	691b      	ldr	r3, [r3, #16]
 800b4d2:	4a13      	ldr	r2, [pc, #76]	@ (800b520 <Data_Analyse+0x14c>)
 800b4d4:	6013      	str	r3, [r2, #0]
			w_z = posture.ActVal[5];
 800b4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b50c <Data_Analyse+0x138>)
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	4a12      	ldr	r2, [pc, #72]	@ (800b524 <Data_Analyse+0x150>)
 800b4dc:	6013      	str	r3, [r2, #0]
		}
		count = 0;
 800b4de:	4b09      	ldr	r3, [pc, #36]	@ (800b504 <Data_Analyse+0x130>)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	701a      	strb	r2, [r3, #0]
		break;
 800b4e4:	e006      	b.n	800b4f4 <Data_Analyse+0x120>
	default:
		count = 0;
 800b4e6:	4b07      	ldr	r3, [pc, #28]	@ (800b504 <Data_Analyse+0x130>)
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	701a      	strb	r2, [r3, #0]
		break;
 800b4ec:	e002      	b.n	800b4f4 <Data_Analyse+0x120>
		break;
 800b4ee:	bf00      	nop
 800b4f0:	e000      	b.n	800b4f4 <Data_Analyse+0x120>
		break;
 800b4f2:	bf00      	nop
	}
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr
 800b500:	24000b10 	.word	0x24000b10
 800b504:	24000b11 	.word	0x24000b11
 800b508:	24000b12 	.word	0x24000b12
 800b50c:	24000b14 	.word	0x24000b14
 800b510:	24000b00 	.word	0x24000b00
 800b514:	24000b04 	.word	0x24000b04
 800b518:	24000b08 	.word	0x24000b08
 800b51c:	24000af8 	.word	0x24000af8
 800b520:	24000afc 	.word	0x24000afc
 800b524:	24000b0c 	.word	0x24000b0c

0800b528 <Move_Arm>:
extern float tx_target;
extern float ty_target;

//控制单个舵机运动
//参数：sevoID:舵机ID，Position:转动角度（这里以270°为例）,Time:转动时间
void Move_Arm(uint8_t servoID, int16_t Position, uint16_t Time) {
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	71fb      	strb	r3, [r7, #7]
 800b532:	460b      	mov	r3, r1
 800b534:	80bb      	strh	r3, [r7, #4]
 800b536:	4613      	mov	r3, r2
 800b538:	807b      	strh	r3, [r7, #2]
	uint8_t TxBuf[11];
	if (servoID > 31 || !(Time > 0) || Position > 32767) {
 800b53a:	79fb      	ldrb	r3, [r7, #7]
 800b53c:	2b1f      	cmp	r3, #31
 800b53e:	d82b      	bhi.n	800b598 <Move_Arm+0x70>
 800b540:	887b      	ldrh	r3, [r7, #2]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d028      	beq.n	800b598 <Move_Arm+0x70>
		return;
	}
	TxBuf[0] = FRAME_HEADER;
 800b546:	2355      	movs	r3, #85	@ 0x55
 800b548:	733b      	strb	r3, [r7, #12]
	TxBuf[1] = FRAME_HEADER;
 800b54a:	2355      	movs	r3, #85	@ 0x55
 800b54c:	737b      	strb	r3, [r7, #13]
	TxBuf[2] = 8;
 800b54e:	2308      	movs	r3, #8
 800b550:	73bb      	strb	r3, [r7, #14]
	TxBuf[3] = CMD_SERVO_MOVE;
 800b552:	2303      	movs	r3, #3
 800b554:	73fb      	strb	r3, [r7, #15]
	TxBuf[4] = 1;
 800b556:	2301      	movs	r3, #1
 800b558:	743b      	strb	r3, [r7, #16]
	TxBuf[5] = (uint8_t) Time;
 800b55a:	887b      	ldrh	r3, [r7, #2]
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	747b      	strb	r3, [r7, #17]
	TxBuf[6] = (uint8_t) (Time >> 8);
 800b560:	887b      	ldrh	r3, [r7, #2]
 800b562:	0a1b      	lsrs	r3, r3, #8
 800b564:	b29b      	uxth	r3, r3
 800b566:	b2db      	uxtb	r3, r3
 800b568:	74bb      	strb	r3, [r7, #18]
	TxBuf[7] = servoID;
 800b56a:	79fb      	ldrb	r3, [r7, #7]
 800b56c:	74fb      	strb	r3, [r7, #19]
	TxBuf[8] = (uint8_t) Position;
 800b56e:	88bb      	ldrh	r3, [r7, #4]
 800b570:	b2db      	uxtb	r3, r3
 800b572:	753b      	strb	r3, [r7, #20]
	TxBuf[9] = (uint8_t) (Position >> 8);
 800b574:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b578:	121b      	asrs	r3, r3, #8
 800b57a:	b21b      	sxth	r3, r3
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&jixiebi_usart, TxBuf, 10, 0xffff);
 800b580:	f107 010c 	add.w	r1, r7, #12
 800b584:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b588:	220a      	movs	r2, #10
 800b58a:	4805      	ldr	r0, [pc, #20]	@ (800b5a0 <Move_Arm+0x78>)
 800b58c:	f7fd f978 	bl	8008880 <HAL_UART_Transmit>
	HAL_Delay(5);
 800b590:	2005      	movs	r0, #5
 800b592:	f7f7 fbe3 	bl	8002d5c <HAL_Delay>
 800b596:	e000      	b.n	800b59a <Move_Arm+0x72>
		return;
 800b598:	bf00      	nop

}
 800b59a:	3718      	adds	r7, #24
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	24000654 	.word	0x24000654

0800b5a4 <catch_Frist>:

}
//步进上升1800  下降1800
extern float x, y;
void catch_Frist(uint16_t Pos1, uint16_t Pos2) //5400
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	460a      	mov	r2, r1
 800b5ae:	80fb      	strh	r3, [r7, #6]
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	80bb      	strh	r3, [r7, #4]
	WritePosEx(0, Pos1, 500, 50); //物料底盘移动
 800b5b4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b5b8:	2332      	movs	r3, #50	@ 0x32
 800b5ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b5be:	2000      	movs	r0, #0
 800b5c0:	f002 fb70 	bl	800dca4 <WritePosEx>

	Move_Arm(1, Arm_close, time); //爪子闭合
 800b5c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b5c8:	2114      	movs	r1, #20
 800b5ca:	2001      	movs	r0, #1
 800b5cc:	f7ff ffac 	bl	800b528 <Move_Arm>
	HAL_Delay(time);
 800b5d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b5d4:	f7f7 fbc2 	bl	8002d5c <HAL_Delay>
	Drop_Location_Sheng(Emm_Speed, Emm_Acc, 500);
 800b5d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b5dc:	2132      	movs	r1, #50	@ 0x32
 800b5de:	2032      	movs	r0, #50	@ 0x32
 800b5e0:	f001 fae6 	bl	800cbb0 <Drop_Location_Sheng>
//	HAL_Delay(3000);
	WritePosEx(1, Pos2, 500, 50); //爪子底盘向左
 800b5e4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b5e8:	2332      	movs	r3, #50	@ 0x32
 800b5ea:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b5ee:	2001      	movs	r0, #1
 800b5f0:	f002 fb58 	bl	800dca4 <WritePosEx>
	HAL_Delay(3000);
 800b5f4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800b5f8:	f7f7 fbb0 	bl	8002d5c <HAL_Delay>
//	{
//		WritePosEx(1, 4045, 500, 50); //爪子底盘向左
//		HAL_Delay(1500);
//		Grab_count--;
//	}
	Move_Arm(6, 550, time); //爪子下降
 800b5fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b600:	f240 2126 	movw	r1, #550	@ 0x226
 800b604:	2006      	movs	r0, #6
 800b606:	f7ff ff8f 	bl	800b528 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 4500);
 800b60a:	f241 1294 	movw	r2, #4500	@ 0x1194
 800b60e:	2132      	movs	r1, #50	@ 0x32
 800b610:	2032      	movs	r0, #50	@ 0x32
 800b612:	f001 fa89 	bl	800cb28 <Drop_Location_jiang>
	Move_Arm(1, 190, time); //爪子张开
 800b616:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b61a:	21be      	movs	r1, #190	@ 0xbe
 800b61c:	2001      	movs	r0, #1
 800b61e:	f7ff ff83 	bl	800b528 <Move_Arm>
	HAL_Delay(time);
 800b622:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b626:	f7f7 fb99 	bl	8002d5c <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b62a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b62e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b632:	2006      	movs	r0, #6
 800b634:	f7ff ff78 	bl	800b528 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 500);
 800b638:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b63c:	2132      	movs	r1, #50	@ 0x32
 800b63e:	2032      	movs	r0, #50	@ 0x32
 800b640:	f001 fa72 	bl	800cb28 <Drop_Location_jiang>

	WritePosEx(1, 4050, 500, 50); //爪子底盘向左
 800b644:	2332      	movs	r3, #50	@ 0x32
 800b646:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b64a:	f640 71d2 	movw	r1, #4050	@ 0xfd2
 800b64e:	2001      	movs	r0, #1
 800b650:	f002 fb28 	bl	800dca4 <WritePosEx>
	HAL_Delay(1500);
 800b654:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800b658:	f7f7 fb80 	bl	8002d5c <HAL_Delay>
	Move_Arm(1, 500, time); //爪子张开
 800b65c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b660:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b664:	2001      	movs	r0, #1
 800b666:	f7ff ff5f 	bl	800b528 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 8600);
 800b66a:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b66e:	2132      	movs	r1, #50	@ 0x32
 800b670:	2032      	movs	r0, #50	@ 0x32
 800b672:	f001 fa59 	bl	800cb28 <Drop_Location_jiang>
}
 800b676:	bf00      	nop
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <catch_Second>:
//上升1800，下降1800
void catch_Second(uint16_t Pos1, uint16_t Pos2) //从地上抓取到车上
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b082      	sub	sp, #8
 800b682:	af00      	add	r7, sp, #0
 800b684:	4603      	mov	r3, r0
 800b686:	460a      	mov	r2, r1
 800b688:	80fb      	strh	r3, [r7, #6]
 800b68a:	4613      	mov	r3, r2
 800b68c:	80bb      	strh	r3, [r7, #4]

	WritePosEx(0, Pos1, 500, 50); //物料底盘移动
 800b68e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b692:	2332      	movs	r3, #50	@ 0x32
 800b694:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b698:	2000      	movs	r0, #0
 800b69a:	f002 fb03 	bl	800dca4 <WritePosEx>
	Move_Arm(1, 500, time); //爪子张开
 800b69e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6a2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b6a6:	2001      	movs	r0, #1
 800b6a8:	f7ff ff3e 	bl	800b528 <Move_Arm>
	HAL_Delay(time);
 800b6ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6b0:	f7f7 fb54 	bl	8002d5c <HAL_Delay>
	Move_Arm(6, 360, time); //爪子下降
 800b6b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6b8:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800b6bc:	2006      	movs	r0, #6
 800b6be:	f7ff ff33 	bl	800b528 <Move_Arm>
	HAL_Delay(time);
 800b6c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6c6:	f7f7 fb49 	bl	8002d5c <HAL_Delay>

	Move_Arm(1, Arm_close, time); //爪子闭合
 800b6ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6ce:	2114      	movs	r1, #20
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	f7ff ff29 	bl	800b528 <Move_Arm>
	HAL_Delay(time);
 800b6d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6da:	f7f7 fb3f 	bl	8002d5c <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b6de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6e2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b6e6:	2006      	movs	r0, #6
 800b6e8:	f7ff ff1e 	bl	800b528 <Move_Arm>
	HAL_Delay(time);
 800b6ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6f0:	f7f7 fb34 	bl	8002d5c <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 1000);
 800b6f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6f8:	2132      	movs	r1, #50	@ 0x32
 800b6fa:	2032      	movs	r0, #50	@ 0x32
 800b6fc:	f001 fa14 	bl	800cb28 <Drop_Location_jiang>
	WritePosEx(1, Pos2, 500, 50); //爪子底盘向左
 800b700:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b704:	2332      	movs	r3, #50	@ 0x32
 800b706:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b70a:	2001      	movs	r0, #1
 800b70c:	f002 faca 	bl	800dca4 <WritePosEx>
	HAL_Delay(5000);
 800b710:	f241 3088 	movw	r0, #5000	@ 0x1388
 800b714:	f7f7 fb22 	bl	8002d5c <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 5000);
 800b718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b71c:	2132      	movs	r1, #50	@ 0x32
 800b71e:	2032      	movs	r0, #50	@ 0x32
 800b720:	f001 fa02 	bl	800cb28 <Drop_Location_jiang>
	Move_Arm(6, 550, time); //爪子下降
 800b724:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b728:	f240 2126 	movw	r1, #550	@ 0x226
 800b72c:	2006      	movs	r0, #6
 800b72e:	f7ff fefb 	bl	800b528 <Move_Arm>
	HAL_Delay(time);
 800b732:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b736:	f7f7 fb11 	bl	8002d5c <HAL_Delay>
	Move_Arm(1, 190, time); //爪子张开
 800b73a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b73e:	21be      	movs	r1, #190	@ 0xbe
 800b740:	2001      	movs	r0, #1
 800b742:	f7ff fef1 	bl	800b528 <Move_Arm>
	HAL_Delay(time);
 800b746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b74a:	f7f7 fb07 	bl	8002d5c <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b74e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b752:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b756:	2006      	movs	r0, #6
 800b758:	f7ff fee6 	bl	800b528 <Move_Arm>
	HAL_Delay(time);
 800b75c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b760:	f7f7 fafc 	bl	8002d5c <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 5000);
 800b764:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b768:	2132      	movs	r1, #50	@ 0x32
 800b76a:	2032      	movs	r0, #50	@ 0x32
 800b76c:	f001 f9dc 	bl	800cb28 <Drop_Location_jiang>
	WritePosEx(1, 4045, 500, 50); //爪子底盘向左
 800b770:	2332      	movs	r3, #50	@ 0x32
 800b772:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b776:	f640 71cd 	movw	r1, #4045	@ 0xfcd
 800b77a:	2001      	movs	r0, #1
 800b77c:	f002 fa92 	bl	800dca4 <WritePosEx>
	HAL_Delay(1500);
 800b780:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800b784:	f7f7 faea 	bl	8002d5c <HAL_Delay>
	Move_Arm(1, 500, time); //爪子张开
 800b788:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b78c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b790:	2001      	movs	r0, #1
 800b792:	f7ff fec9 	bl	800b528 <Move_Arm>
	HAL_Delay(time);
 800b796:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b79a:	f7f7 fadf 	bl	8002d5c <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 11000);
 800b79e:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800b7a2:	2132      	movs	r1, #50	@ 0x32
 800b7a4:	2032      	movs	r0, #50	@ 0x32
 800b7a6:	f001 f9bf 	bl	800cb28 <Drop_Location_jiang>

}
 800b7aa:	bf00      	nop
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <Start>:

extern int QR_Flag;
void Start(void) //下降14000
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b082      	sub	sp, #8
 800b7b6:	af00      	add	r7, sp, #0
//	HAL_Delay(2000);
	bool temp = Move_Line(RunSpeed, RunAcc, 8250);
 800b7b8:	f242 023a 	movw	r2, #8250	@ 0x203a
 800b7bc:	2178      	movs	r1, #120	@ 0x78
 800b7be:	2064      	movs	r0, #100	@ 0x64
 800b7c0:	f000 ff46 	bl	800c650 <Move_Line>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	71fb      	strb	r3, [r7, #7]
	while(temp != true)
 800b7c8:	e007      	b.n	800b7da <Start+0x28>
	{
		temp = Move_Line(RunSpeed, RunAcc, 8250);
 800b7ca:	f242 023a 	movw	r2, #8250	@ 0x203a
 800b7ce:	2178      	movs	r1, #120	@ 0x78
 800b7d0:	2064      	movs	r0, #100	@ 0x64
 800b7d2:	f000 ff3d 	bl	800c650 <Move_Line>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	71fb      	strb	r3, [r7, #7]
	while(temp != true)
 800b7da:	79fb      	ldrb	r3, [r7, #7]
 800b7dc:	f083 0301 	eor.w	r3, r3, #1
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1f1      	bne.n	800b7ca <Start+0x18>
	}
//	先将爪子升起来，避免打到TX2或者物料盘
	Drop_Location_jiang(200, 120, 4000);
 800b7e6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800b7ea:	2178      	movs	r1, #120	@ 0x78
 800b7ec:	20c8      	movs	r0, #200	@ 0xc8
 800b7ee:	f001 f99b 	bl	800cb28 <Drop_Location_jiang>
//	将舵机向外转动
	FT_Servo_Orth();
 800b7f2:	f002 fdca 	bl	800e38a <FT_Servo_Orth>
//	HAL_Delay(2000);
	Drop_Location_jiang(200, 120, 12000);
 800b7f6:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800b7fa:	2178      	movs	r1, #120	@ 0x78
 800b7fc:	20c8      	movs	r0, #200	@ 0xc8
 800b7fe:	f001 f993 	bl	800cb28 <Drop_Location_jiang>
	Move_Arm(1, 500, 300); //爪子张开
 800b802:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b806:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b80a:	2001      	movs	r0, #1
 800b80c:	f7ff fe8c 	bl	800b528 <Move_Arm>
	Move_Arm(6, 500, 300);
 800b810:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b814:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b818:	2006      	movs	r0, #6
 800b81a:	f7ff fe85 	bl	800b528 <Move_Arm>
//	Move_Line(RunSpeed, RunAcc, 8250);
//	while (!QR_Flag)
//		;  //等待扫码完成
//	扫码完成后将爪子提起俩
	Drop_Location_jiang(200, 120, 8600);
 800b81e:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b822:	2178      	movs	r1, #120	@ 0x78
 800b824:	20c8      	movs	r0, #200	@ 0xc8
 800b826:	f001 f97f 	bl	800cb28 <Drop_Location_jiang>
	Move_Arm(6, 900, 300);
 800b82a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b82e:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800b832:	2006      	movs	r0, #6
 800b834:	f7ff fe78 	bl	800b528 <Move_Arm>
}
 800b838:	bf00      	nop
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <put>:
void put(uint16_t Pos1, uint16_t Pos2) {
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	4603      	mov	r3, r0
 800b848:	460a      	mov	r2, r1
 800b84a:	80fb      	strh	r3, [r7, #6]
 800b84c:	4613      	mov	r3, r2
 800b84e:	80bb      	strh	r3, [r7, #4]
	WritePosEx(0, Pos1, 1000, 100); //物料底盘移动
 800b850:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b854:	2364      	movs	r3, #100	@ 0x64
 800b856:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b85a:	2000      	movs	r0, #0
 800b85c:	f002 fa22 	bl	800dca4 <WritePosEx>
	Move_Arm(6, 1000, time); //爪子上升
 800b860:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b864:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b868:	2006      	movs	r0, #6
 800b86a:	f7ff fe5d 	bl	800b528 <Move_Arm>
	Move_Arm(1, 150, time); //爪子张开
 800b86e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b872:	2196      	movs	r1, #150	@ 0x96
 800b874:	2001      	movs	r0, #1
 800b876:	f7ff fe57 	bl	800b528 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 3500);
 800b87a:	f640 52ac 	movw	r2, #3500	@ 0xdac
 800b87e:	2132      	movs	r1, #50	@ 0x32
 800b880:	2032      	movs	r0, #50	@ 0x32
 800b882:	f001 f951 	bl	800cb28 <Drop_Location_jiang>
	HAL_Delay(1000);
 800b886:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b88a:	f7f7 fa67 	bl	8002d5c <HAL_Delay>
	WritePosEx(1, Pos2, 800, 50); //爪子底盘向左
 800b88e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b892:	2332      	movs	r3, #50	@ 0x32
 800b894:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800b898:	2001      	movs	r0, #1
 800b89a:	f002 fa03 	bl	800dca4 <WritePosEx>
	HAL_Delay(2000);                                       //延时是为了抓取底盘降下来，防止变转变降
 800b89e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b8a2:	f7f7 fa5b 	bl	8002d5c <HAL_Delay>
	Move_Arm(6, 410, time); //爪子下降
 800b8a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b8aa:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800b8ae:	2006      	movs	r0, #6
 800b8b0:	f7ff fe3a 	bl	800b528 <Move_Arm>
	HAL_Delay(time);
 800b8b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b8b8:	f7f7 fa50 	bl	8002d5c <HAL_Delay>
	Move_Arm(1, Arm_close, time); //爪子闭合
 800b8bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b8c0:	2114      	movs	r1, #20
 800b8c2:	2001      	movs	r0, #1
 800b8c4:	f7ff fe30 	bl	800b528 <Move_Arm>
	HAL_Delay(time);
 800b8c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b8cc:	f7f7 fa46 	bl	8002d5c <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b8d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b8d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b8d8:	2006      	movs	r0, #6
 800b8da:	f7ff fe25 	bl	800b528 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 1000);
 800b8de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b8e2:	2132      	movs	r1, #50	@ 0x32
 800b8e4:	2032      	movs	r0, #50	@ 0x32
 800b8e6:	f001 f91f 	bl	800cb28 <Drop_Location_jiang>
	WritePosEx(1, 4100, 800, 50); //抓取底盘向摆放位置
 800b8ea:	2332      	movs	r3, #50	@ 0x32
 800b8ec:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800b8f0:	f241 0104 	movw	r1, #4100	@ 0x1004
 800b8f4:	2001      	movs	r0, #1
 800b8f6:	f002 f9d5 	bl	800dca4 <WritePosEx>
	HAL_Delay(2000);                                        //延时是为了让抓取底盘转过来
 800b8fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b8fe:	f7f7 fa2d 	bl	8002d5c <HAL_Delay>
	Move_Arm(6, 360, time); //爪子下降
 800b902:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b906:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800b90a:	2006      	movs	r0, #6
 800b90c:	f7ff fe0c 	bl	800b528 <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 11000);
 800b910:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800b914:	2132      	movs	r1, #50	@ 0x32
 800b916:	2032      	movs	r0, #50	@ 0x32
 800b918:	f001 f906 	bl	800cb28 <Drop_Location_jiang>
	Move_Arm(1, 500, time); //爪子张开
 800b91c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b920:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b924:	2001      	movs	r0, #1
 800b926:	f7ff fdff 	bl	800b528 <Move_Arm>

}
 800b92a:	bf00      	nop
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
	...

0800b934 <Frist_Grab_Wuliao>:
}
// 抓取过程标志位
extern char Match_Flag;
// 抓取计算稳定性标志位，0为识别有故障,1为正常计算
extern char Check_flag;
void Frist_Grab_Wuliao(void) {
 800b934:	b580      	push	{r7, lr}
 800b936:	af00      	add	r7, sp, #0
//	FIXME:在每一次抓取前都应该判断物料停止与基于TX2坐标闭环
//	Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
	static uint8_t Grab_count = 1;
	while (Grab_count < 4) {
 800b938:	e066      	b.n	800ba08 <Frist_Grab_Wuliao+0xd4>
//		抓取物料过程，置标志位,标志位为颜色
	Match_Flag = Grab_count;
 800b93a:	4b38      	ldr	r3, [pc, #224]	@ (800ba1c <Frist_Grab_Wuliao+0xe8>)
 800b93c:	781a      	ldrb	r2, [r3, #0]
 800b93e:	4b38      	ldr	r3, [pc, #224]	@ (800ba20 <Frist_Grab_Wuliao+0xec>)
 800b940:	701a      	strb	r2, [r3, #0]
//		if (QR_data[0] == colour && wuliao_falg == 0) {
//			先判断物料是否停止
	while(Check_Stability(x,y,Check_flag) == 2)
 800b942:	e002      	b.n	800b94a <Frist_Grab_Wuliao+0x16>
	{
		HAL_Delay(30);
 800b944:	201e      	movs	r0, #30
 800b946:	f7f7 fa09 	bl	8002d5c <HAL_Delay>
	while(Check_Stability(x,y,Check_flag) == 2)
 800b94a:	4b36      	ldr	r3, [pc, #216]	@ (800ba24 <Frist_Grab_Wuliao+0xf0>)
 800b94c:	edd3 7a00 	vldr	s15, [r3]
 800b950:	4b35      	ldr	r3, [pc, #212]	@ (800ba28 <Frist_Grab_Wuliao+0xf4>)
 800b952:	ed93 7a00 	vldr	s14, [r3]
 800b956:	4b35      	ldr	r3, [pc, #212]	@ (800ba2c <Frist_Grab_Wuliao+0xf8>)
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	4618      	mov	r0, r3
 800b95c:	eef0 0a47 	vmov.f32	s1, s14
 800b960:	eeb0 0a67 	vmov.f32	s0, s15
 800b964:	f002 fc6c 	bl	800e240 <Check_Stability>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d0ea      	beq.n	800b944 <Frist_Grab_Wuliao+0x10>
	}
//			Realize_Stop();
//			基于TX2坐标进行闭环
	Move_Tx_Pid_Ctrl(tx_target, ty_target);
 800b96e:	4b30      	ldr	r3, [pc, #192]	@ (800ba30 <Frist_Grab_Wuliao+0xfc>)
 800b970:	edd3 7a00 	vldr	s15, [r3]
 800b974:	4b2f      	ldr	r3, [pc, #188]	@ (800ba34 <Frist_Grab_Wuliao+0x100>)
 800b976:	ed93 7a00 	vldr	s14, [r3]
 800b97a:	eef0 0a47 	vmov.f32	s1, s14
 800b97e:	eeb0 0a67 	vmov.f32	s0, s15
 800b982:	f001 fe51 	bl	800d628 <Move_Tx_Pid_Ctrl>
//			抓取第一个物料
//			物料盘先转动到目标位置
	FT_Servo_Put(0,Grab_count);
 800b986:	4b25      	ldr	r3, [pc, #148]	@ (800ba1c <Frist_Grab_Wuliao+0xe8>)
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	4619      	mov	r1, r3
 800b98c:	2000      	movs	r0, #0
 800b98e:	f002 fd08 	bl	800e3a2 <FT_Servo_Put>

	Move_Arm(1, 50, 300);
 800b992:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b996:	2132      	movs	r1, #50	@ 0x32
 800b998:	2001      	movs	r0, #1
 800b99a:	f7ff fdc5 	bl	800b528 <Move_Arm>
//			上升
	Drop_Location_jiang(200, 120, 1000);
 800b99e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b9a2:	2178      	movs	r1, #120	@ 0x78
 800b9a4:	20c8      	movs	r0, #200	@ 0xc8
 800b9a6:	f001 f8bf 	bl	800cb28 <Drop_Location_jiang>
//			catch_Frist(860, 2375);
//			爪子舵机转动到放置物料到车上的角度
	FT_Servo_Put(1,Grab_count);
 800b9aa:	4b1c      	ldr	r3, [pc, #112]	@ (800ba1c <Frist_Grab_Wuliao+0xe8>)
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	2001      	movs	r0, #1
 800b9b2:	f002 fcf6 	bl	800e3a2 <FT_Servo_Put>
//			TODO:调试，失能五号舵机
	Drop_Location_jiang(200, 120, 6000);
 800b9b6:	f241 7270 	movw	r2, #6000	@ 0x1770
 800b9ba:	2178      	movs	r1, #120	@ 0x78
 800b9bc:	20c8      	movs	r0, #200	@ 0xc8
 800b9be:	f001 f8b3 	bl	800cb28 <Drop_Location_jiang>
//			while(1)
//			{
//				;
//			}
//			松开爪子
	Move_Arm(1, 300, 300);
 800b9c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b9c6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800b9ca:	2001      	movs	r0, #1
 800b9cc:	f7ff fdac 	bl	800b528 <Move_Arm>
//			上升
	Drop_Location_jiang(200, 120, 1000);
 800b9d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b9d4:	2178      	movs	r1, #120	@ 0x78
 800b9d6:	20c8      	movs	r0, #200	@ 0xc8
 800b9d8:	f001 f8a6 	bl	800cb28 <Drop_Location_jiang>
//			向右转，与车身正交
	if(Grab_count < 3)
 800b9dc:	4b0f      	ldr	r3, [pc, #60]	@ (800ba1c <Frist_Grab_Wuliao+0xe8>)
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d808      	bhi.n	800b9f6 <Frist_Grab_Wuliao+0xc2>
	{
		FT_Servo_Orth();
 800b9e4:	f002 fcd1 	bl	800e38a <FT_Servo_Orth>
		Drop_Location_jiang(200, 120, 8600);
 800b9e8:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b9ec:	2178      	movs	r1, #120	@ 0x78
 800b9ee:	20c8      	movs	r0, #200	@ 0xc8
 800b9f0:	f001 f89a 	bl	800cb28 <Drop_Location_jiang>
 800b9f4:	e002      	b.n	800b9fc <Frist_Grab_Wuliao+0xc8>
	}
	else
		FT_Servo_Zero(1);
 800b9f6:	2001      	movs	r0, #1
 800b9f8:	f002 fca9 	bl	800e34e <FT_Servo_Zero>
	Grab_count += 1;
 800b9fc:	4b07      	ldr	r3, [pc, #28]	@ (800ba1c <Frist_Grab_Wuliao+0xe8>)
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	3301      	adds	r3, #1
 800ba02:	b2da      	uxtb	r2, r3
 800ba04:	4b05      	ldr	r3, [pc, #20]	@ (800ba1c <Frist_Grab_Wuliao+0xe8>)
 800ba06:	701a      	strb	r2, [r3, #0]
	while (Grab_count < 4) {
 800ba08:	4b04      	ldr	r3, [pc, #16]	@ (800ba1c <Frist_Grab_Wuliao+0xe8>)
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b03      	cmp	r3, #3
 800ba0e:	d994      	bls.n	800b93a <Frist_Grab_Wuliao+0x6>
	}
	Grab_count = 0;
 800ba10:	4b02      	ldr	r3, [pc, #8]	@ (800ba1c <Frist_Grab_Wuliao+0xe8>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	701a      	strb	r2, [r3, #0]
}
 800ba16:	bf00      	nop
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	24000045 	.word	0x24000045
 800ba20:	24000488 	.word	0x24000488
 800ba24:	24000454 	.word	0x24000454
 800ba28:	24000458 	.word	0x24000458
 800ba2c:	24000489 	.word	0x24000489
 800ba30:	24000000 	.word	0x24000000
 800ba34:	24000004 	.word	0x24000004

0800ba38 <put_wuliao_to_circular_frist>:
////		}
//
//	}
//}

void put_wuliao_to_circular_frist(void) {
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0

	for (int i = 0; i < 3; i++) {
 800ba3e:	2300      	movs	r3, #0
 800ba40:	607b      	str	r3, [r7, #4]
 800ba42:	e067      	b.n	800bb14 <put_wuliao_to_circular_frist+0xdc>
		if (QR_data[i] + 3 == 4) {
 800ba44:	4a37      	ldr	r2, [pc, #220]	@ (800bb24 <put_wuliao_to_circular_frist+0xec>)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d105      	bne.n	800ba5c <put_wuliao_to_circular_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800ba50:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800bb28 <put_wuliao_to_circular_frist+0xf0>
 800ba54:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800bb2c <put_wuliao_to_circular_frist+0xf4>
 800ba58:	f001 fc86 	bl	800d368 <Move_Action_Nopid_Right_Ctrl>

		}
		if (QR_data[i] + 3 == 5) {
 800ba5c:	4a31      	ldr	r2, [pc, #196]	@ (800bb24 <put_wuliao_to_circular_frist+0xec>)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	d105      	bne.n	800ba74 <put_wuliao_to_circular_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800ba68:	eddf 0a31 	vldr	s1, [pc, #196]	@ 800bb30 <put_wuliao_to_circular_frist+0xf8>
 800ba6c:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800bb2c <put_wuliao_to_circular_frist+0xf4>
 800ba70:	f001 fc7a 	bl	800d368 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] + 3 == 6) {
 800ba74:	4a2b      	ldr	r2, [pc, #172]	@ (800bb24 <put_wuliao_to_circular_frist+0xec>)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba7c:	2b03      	cmp	r3, #3
 800ba7e:	d105      	bne.n	800ba8c <put_wuliao_to_circular_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800ba80:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800bb34 <put_wuliao_to_circular_frist+0xfc>
 800ba84:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800bb2c <put_wuliao_to_circular_frist+0xf4>
 800ba88:	f001 fc6e 	bl	800d368 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 0) {
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d112      	bne.n	800bab8 <put_wuliao_to_circular_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800ba92:	4b29      	ldr	r3, [pc, #164]	@ (800bb38 <put_wuliao_to_circular_frist+0x100>)
 800ba94:	edd3 7a00 	vldr	s15, [r3]
 800ba98:	4b28      	ldr	r3, [pc, #160]	@ (800bb3c <put_wuliao_to_circular_frist+0x104>)
 800ba9a:	ed93 7a00 	vldr	s14, [r3]
 800ba9e:	eef0 0a47 	vmov.f32	s1, s14
 800baa2:	eeb0 0a67 	vmov.f32	s0, s15
 800baa6:	f001 fdbf 	bl	800d628 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800baaa:	f640 2178 	movw	r1, #2680	@ 0xa78
 800baae:	f640 0066 	movw	r0, #2150	@ 0x866
 800bab2:	f7ff fec5 	bl	800b840 <put>
 800bab6:	e02a      	b.n	800bb0e <put_wuliao_to_circular_frist+0xd6>
		} else if (i == 1) {
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b01      	cmp	r3, #1
 800babc:	d112      	bne.n	800bae4 <put_wuliao_to_circular_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800babe:	4b1e      	ldr	r3, [pc, #120]	@ (800bb38 <put_wuliao_to_circular_frist+0x100>)
 800bac0:	edd3 7a00 	vldr	s15, [r3]
 800bac4:	4b1d      	ldr	r3, [pc, #116]	@ (800bb3c <put_wuliao_to_circular_frist+0x104>)
 800bac6:	ed93 7a00 	vldr	s14, [r3]
 800baca:	eef0 0a47 	vmov.f32	s1, s14
 800bace:	eeb0 0a67 	vmov.f32	s0, s15
 800bad2:	f001 fda9 	bl	800d628 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800bad6:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bada:	f640 4085 	movw	r0, #3205	@ 0xc85
 800bade:	f7ff feaf 	bl	800b840 <put>
 800bae2:	e014      	b.n	800bb0e <put_wuliao_to_circular_frist+0xd6>
		} else if (i == 2) {
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	d111      	bne.n	800bb0e <put_wuliao_to_circular_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800baea:	4b13      	ldr	r3, [pc, #76]	@ (800bb38 <put_wuliao_to_circular_frist+0x100>)
 800baec:	edd3 7a00 	vldr	s15, [r3]
 800baf0:	4b12      	ldr	r3, [pc, #72]	@ (800bb3c <put_wuliao_to_circular_frist+0x104>)
 800baf2:	ed93 7a00 	vldr	s14, [r3]
 800baf6:	eef0 0a47 	vmov.f32	s1, s14
 800bafa:	eeb0 0a67 	vmov.f32	s0, s15
 800bafe:	f001 fd93 	bl	800d628 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800bb02:	f640 1142 	movw	r1, #2370	@ 0x942
 800bb06:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bb0a:	f7ff fe99 	bl	800b840 <put>
	for (int i = 0; i < 3; i++) {
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	3301      	adds	r3, #1
 800bb12:	607b      	str	r3, [r7, #4]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	dd94      	ble.n	800ba44 <put_wuliao_to_circular_frist+0xc>
		}

	}
}
 800bb1a:	bf00      	nop
 800bb1c:	bf00      	nop
 800bb1e:	3708      	adds	r7, #8
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	24000460 	.word	0x24000460
 800bb28:	44960000 	.word	0x44960000
 800bb2c:	44e74000 	.word	0x44e74000
 800bb30:	44834000 	.word	0x44834000
 800bb34:	445d4000 	.word	0x445d4000
 800bb38:	24000000 	.word	0x24000000
 800bb3c:	24000004 	.word	0x24000004

0800bb40 <put_wuliao_to_Car_frist>:

void put_wuliao_to_Car_frist(void) {
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 800bb46:	2300      	movs	r3, #0
 800bb48:	607b      	str	r3, [r7, #4]
 800bb4a:	e067      	b.n	800bc1c <put_wuliao_to_Car_frist+0xdc>
		if (QR_data[i] == 1) {
 800bb4c:	4a37      	ldr	r2, [pc, #220]	@ (800bc2c <put_wuliao_to_Car_frist+0xec>)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d105      	bne.n	800bb64 <put_wuliao_to_Car_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800bb58:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800bc30 <put_wuliao_to_Car_frist+0xf0>
 800bb5c:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800bc34 <put_wuliao_to_Car_frist+0xf4>
 800bb60:	f001 fc02 	bl	800d368 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 2) {
 800bb64:	4a31      	ldr	r2, [pc, #196]	@ (800bc2c <put_wuliao_to_Car_frist+0xec>)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d105      	bne.n	800bb7c <put_wuliao_to_Car_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800bb70:	eddf 0a31 	vldr	s1, [pc, #196]	@ 800bc38 <put_wuliao_to_Car_frist+0xf8>
 800bb74:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800bc34 <put_wuliao_to_Car_frist+0xf4>
 800bb78:	f001 fbf6 	bl	800d368 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800bb7c:	4a2b      	ldr	r2, [pc, #172]	@ (800bc2c <put_wuliao_to_Car_frist+0xec>)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb84:	2b03      	cmp	r3, #3
 800bb86:	d105      	bne.n	800bb94 <put_wuliao_to_Car_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800bb88:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800bc3c <put_wuliao_to_Car_frist+0xfc>
 800bb8c:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800bc34 <put_wuliao_to_Car_frist+0xf4>
 800bb90:	f001 fbea 	bl	800d368 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 0) {
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d112      	bne.n	800bbc0 <put_wuliao_to_Car_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bb9a:	4b29      	ldr	r3, [pc, #164]	@ (800bc40 <put_wuliao_to_Car_frist+0x100>)
 800bb9c:	edd3 7a00 	vldr	s15, [r3]
 800bba0:	4b28      	ldr	r3, [pc, #160]	@ (800bc44 <put_wuliao_to_Car_frist+0x104>)
 800bba2:	ed93 7a00 	vldr	s14, [r3]
 800bba6:	eef0 0a47 	vmov.f32	s1, s14
 800bbaa:	eeb0 0a67 	vmov.f32	s0, s15
 800bbae:	f001 fd3b 	bl	800d628 <Move_Tx_Pid_Ctrl>
			catch_Second(860, 2375);
 800bbb2:	f640 1147 	movw	r1, #2375	@ 0x947
 800bbb6:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800bbba:	f7ff fd60 	bl	800b67e <catch_Second>
 800bbbe:	e02a      	b.n	800bc16 <put_wuliao_to_Car_frist+0xd6>

		} else if (i == 1) {
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d112      	bne.n	800bbec <put_wuliao_to_Car_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bbc6:	4b1e      	ldr	r3, [pc, #120]	@ (800bc40 <put_wuliao_to_Car_frist+0x100>)
 800bbc8:	edd3 7a00 	vldr	s15, [r3]
 800bbcc:	4b1d      	ldr	r3, [pc, #116]	@ (800bc44 <put_wuliao_to_Car_frist+0x104>)
 800bbce:	ed93 7a00 	vldr	s14, [r3]
 800bbd2:	eef0 0a47 	vmov.f32	s1, s14
 800bbd6:	eeb0 0a67 	vmov.f32	s0, s15
 800bbda:	f001 fd25 	bl	800d628 <Move_Tx_Pid_Ctrl>
			catch_Second(1910, 2370);
 800bbde:	f640 1142 	movw	r1, #2370	@ 0x942
 800bbe2:	f240 7076 	movw	r0, #1910	@ 0x776
 800bbe6:	f7ff fd4a 	bl	800b67e <catch_Second>
 800bbea:	e014      	b.n	800bc16 <put_wuliao_to_Car_frist+0xd6>
		} else if (i == 2) {
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b02      	cmp	r3, #2
 800bbf0:	d111      	bne.n	800bc16 <put_wuliao_to_Car_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bbf2:	4b13      	ldr	r3, [pc, #76]	@ (800bc40 <put_wuliao_to_Car_frist+0x100>)
 800bbf4:	edd3 7a00 	vldr	s15, [r3]
 800bbf8:	4b12      	ldr	r3, [pc, #72]	@ (800bc44 <put_wuliao_to_Car_frist+0x104>)
 800bbfa:	ed93 7a00 	vldr	s14, [r3]
 800bbfe:	eef0 0a47 	vmov.f32	s1, s14
 800bc02:	eeb0 0a67 	vmov.f32	s0, s15
 800bc06:	f001 fd0f 	bl	800d628 <Move_Tx_Pid_Ctrl>
			catch_Second(2960, 2370);
 800bc0a:	f640 1142 	movw	r1, #2370	@ 0x942
 800bc0e:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bc12:	f7ff fd34 	bl	800b67e <catch_Second>
	for (int i = 0; i < 3; i++) {
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	607b      	str	r3, [r7, #4]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	dd94      	ble.n	800bb4c <put_wuliao_to_Car_frist+0xc>
		}

	}
}
 800bc22:	bf00      	nop
 800bc24:	bf00      	nop
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	24000460 	.word	0x24000460
 800bc30:	44960000 	.word	0x44960000
 800bc34:	44e74000 	.word	0x44e74000
 800bc38:	44834000 	.word	0x44834000
 800bc3c:	445d4000 	.word	0x445d4000
 800bc40:	24000000 	.word	0x24000000
 800bc44:	24000004 	.word	0x24000004

0800bc48 <put_wuliao_to_circular_second>:

void put_wuliao_to_circular_second(void) {
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 800bc4e:	2300      	movs	r3, #0
 800bc50:	607b      	str	r3, [r7, #4]
 800bc52:	e067      	b.n	800bd24 <put_wuliao_to_circular_second+0xdc>
		if (QR_data[i] + 3 == 4) {
 800bc54:	4a3a      	ldr	r2, [pc, #232]	@ (800bd40 <put_wuliao_to_circular_second+0xf8>)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d105      	bne.n	800bc6c <put_wuliao_to_circular_second+0x24>
			Move_Action_Nopid_Forward_Ctrl(954, 1850);
 800bc60:	eddf 0a38 	vldr	s1, [pc, #224]	@ 800bd44 <put_wuliao_to_circular_second+0xfc>
 800bc64:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800bd48 <put_wuliao_to_circular_second+0x100>
 800bc68:	f001 fa1e 	bl	800d0a8 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (QR_data[i] + 3 == 5) {
 800bc6c:	4a34      	ldr	r2, [pc, #208]	@ (800bd40 <put_wuliao_to_circular_second+0xf8>)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d105      	bne.n	800bc84 <put_wuliao_to_circular_second+0x3c>
			Move_Action_Nopid_Forward_Ctrl(1050, 1850);
 800bc78:	eddf 0a32 	vldr	s1, [pc, #200]	@ 800bd44 <put_wuliao_to_circular_second+0xfc>
 800bc7c:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 800bd4c <put_wuliao_to_circular_second+0x104>
 800bc80:	f001 fa12 	bl	800d0a8 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (QR_data[i] + 3 == 6) {
 800bc84:	4a2e      	ldr	r2, [pc, #184]	@ (800bd40 <put_wuliao_to_circular_second+0xf8>)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d105      	bne.n	800bc9c <put_wuliao_to_circular_second+0x54>
			Move_Action_Nopid_Forward_Ctrl(1208, 1850);
 800bc90:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800bd44 <put_wuliao_to_circular_second+0xfc>
 800bc94:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 800bd50 <put_wuliao_to_circular_second+0x108>
 800bc98:	f001 fa06 	bl	800d0a8 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (i == 0) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d112      	bne.n	800bcc8 <put_wuliao_to_circular_second+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bca2:	4b2c      	ldr	r3, [pc, #176]	@ (800bd54 <put_wuliao_to_circular_second+0x10c>)
 800bca4:	edd3 7a00 	vldr	s15, [r3]
 800bca8:	4b2b      	ldr	r3, [pc, #172]	@ (800bd58 <put_wuliao_to_circular_second+0x110>)
 800bcaa:	ed93 7a00 	vldr	s14, [r3]
 800bcae:	eef0 0a47 	vmov.f32	s1, s14
 800bcb2:	eeb0 0a67 	vmov.f32	s0, s15
 800bcb6:	f001 fcb7 	bl	800d628 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800bcba:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bcbe:	f640 0066 	movw	r0, #2150	@ 0x866
 800bcc2:	f7ff fdbd 	bl	800b840 <put>
 800bcc6:	e02a      	b.n	800bd1e <put_wuliao_to_circular_second+0xd6>

		} else if (i == 1) {
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d112      	bne.n	800bcf4 <put_wuliao_to_circular_second+0xac>

			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bcce:	4b21      	ldr	r3, [pc, #132]	@ (800bd54 <put_wuliao_to_circular_second+0x10c>)
 800bcd0:	edd3 7a00 	vldr	s15, [r3]
 800bcd4:	4b20      	ldr	r3, [pc, #128]	@ (800bd58 <put_wuliao_to_circular_second+0x110>)
 800bcd6:	ed93 7a00 	vldr	s14, [r3]
 800bcda:	eef0 0a47 	vmov.f32	s1, s14
 800bcde:	eeb0 0a67 	vmov.f32	s0, s15
 800bce2:	f001 fca1 	bl	800d628 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800bce6:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bcea:	f640 4085 	movw	r0, #3205	@ 0xc85
 800bcee:	f7ff fda7 	bl	800b840 <put>
 800bcf2:	e014      	b.n	800bd1e <put_wuliao_to_circular_second+0xd6>
		} else if (i == 2) {
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	d111      	bne.n	800bd1e <put_wuliao_to_circular_second+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bcfa:	4b16      	ldr	r3, [pc, #88]	@ (800bd54 <put_wuliao_to_circular_second+0x10c>)
 800bcfc:	edd3 7a00 	vldr	s15, [r3]
 800bd00:	4b15      	ldr	r3, [pc, #84]	@ (800bd58 <put_wuliao_to_circular_second+0x110>)
 800bd02:	ed93 7a00 	vldr	s14, [r3]
 800bd06:	eef0 0a47 	vmov.f32	s1, s14
 800bd0a:	eeb0 0a67 	vmov.f32	s0, s15
 800bd0e:	f001 fc8b 	bl	800d628 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800bd12:	f640 1142 	movw	r1, #2370	@ 0x942
 800bd16:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bd1a:	f7ff fd91 	bl	800b840 <put>
	for (int i = 0; i < 3; i++) {
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	3301      	adds	r3, #1
 800bd22:	607b      	str	r3, [r7, #4]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	dd94      	ble.n	800bc54 <put_wuliao_to_circular_second+0xc>
		}

	}
	Move_Action_Nopid_Forward_Ctrl(1000, 1850);
 800bd2a:	eddf 0a06 	vldr	s1, [pc, #24]	@ 800bd44 <put_wuliao_to_circular_second+0xfc>
 800bd2e:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800bd5c <put_wuliao_to_circular_second+0x114>
 800bd32:	f001 f9b9 	bl	800d0a8 <Move_Action_Nopid_Forward_Ctrl>
}
 800bd36:	bf00      	nop
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	24000460 	.word	0x24000460
 800bd44:	44e74000 	.word	0x44e74000
 800bd48:	446e8000 	.word	0x446e8000
 800bd4c:	44834000 	.word	0x44834000
 800bd50:	44970000 	.word	0x44970000
 800bd54:	24000000 	.word	0x24000000
 800bd58:	24000004 	.word	0x24000004
 800bd5c:	447a0000 	.word	0x447a0000

0800bd60 <Second_Run_Frist_Grab_Wuliao>:

/*************************第二次抓取***********************************************/
void Second_Run_Frist_Grab_Wuliao(void) {
 800bd60:	b580      	push	{r7, lr}
 800bd62:	af00      	add	r7, sp, #0
	static uint8_t Grab_count = 0;
	wuliao_falg = 0;
 800bd64:	4b2a      	ldr	r3, [pc, #168]	@ (800be10 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd66:	2200      	movs	r2, #0
 800bd68:	601a      	str	r2, [r3, #0]
	while (Grab_count < 3) {
 800bd6a:	e04a      	b.n	800be02 <Second_Run_Frist_Grab_Wuliao+0xa2>
		if (QR_data[3] == colour && wuliao_falg == 0) {
 800bd6c:	4b29      	ldr	r3, [pc, #164]	@ (800be14 <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800bd6e:	68da      	ldr	r2, [r3, #12]
 800bd70:	4b29      	ldr	r3, [pc, #164]	@ (800be18 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d112      	bne.n	800bd9e <Second_Run_Frist_Grab_Wuliao+0x3e>
 800bd78:	4b25      	ldr	r3, [pc, #148]	@ (800be10 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10e      	bne.n	800bd9e <Second_Run_Frist_Grab_Wuliao+0x3e>
			catch_Frist(860, 2375);
 800bd80:	f640 1147 	movw	r1, #2375	@ 0x947
 800bd84:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800bd88:	f7ff fc0c 	bl	800b5a4 <catch_Frist>
			wuliao_falg = 1;
 800bd8c:	4b20      	ldr	r3, [pc, #128]	@ (800be10 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bd8e:	2201      	movs	r2, #1
 800bd90:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bd92:	4b22      	ldr	r3, [pc, #136]	@ (800be1c <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	3301      	adds	r3, #1
 800bd98:	b2da      	uxtb	r2, r3
 800bd9a:	4b20      	ldr	r3, [pc, #128]	@ (800be1c <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bd9c:	701a      	strb	r2, [r3, #0]
		}
		if (QR_data[4] == colour && wuliao_falg == 1) {
 800bd9e:	4b1d      	ldr	r3, [pc, #116]	@ (800be14 <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800bda0:	691a      	ldr	r2, [r3, #16]
 800bda2:	4b1d      	ldr	r3, [pc, #116]	@ (800be18 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d112      	bne.n	800bdd0 <Second_Run_Frist_Grab_Wuliao+0x70>
 800bdaa:	4b19      	ldr	r3, [pc, #100]	@ (800be10 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d10e      	bne.n	800bdd0 <Second_Run_Frist_Grab_Wuliao+0x70>
			catch_Frist(1910, 2370);
 800bdb2:	f640 1142 	movw	r1, #2370	@ 0x942
 800bdb6:	f240 7076 	movw	r0, #1910	@ 0x776
 800bdba:	f7ff fbf3 	bl	800b5a4 <catch_Frist>
			wuliao_falg = 2;
 800bdbe:	4b14      	ldr	r3, [pc, #80]	@ (800be10 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bdc0:	2202      	movs	r2, #2
 800bdc2:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bdc4:	4b15      	ldr	r3, [pc, #84]	@ (800be1c <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	b2da      	uxtb	r2, r3
 800bdcc:	4b13      	ldr	r3, [pc, #76]	@ (800be1c <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bdce:	701a      	strb	r2, [r3, #0]
		}
		if (QR_data[5] == colour && wuliao_falg == 2) {
 800bdd0:	4b10      	ldr	r3, [pc, #64]	@ (800be14 <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800bdd2:	695a      	ldr	r2, [r3, #20]
 800bdd4:	4b10      	ldr	r3, [pc, #64]	@ (800be18 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d112      	bne.n	800be02 <Second_Run_Frist_Grab_Wuliao+0xa2>
 800bddc:	4b0c      	ldr	r3, [pc, #48]	@ (800be10 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	d10e      	bne.n	800be02 <Second_Run_Frist_Grab_Wuliao+0xa2>
			catch_Frist(2960, 2370);
 800bde4:	f640 1142 	movw	r1, #2370	@ 0x942
 800bde8:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bdec:	f7ff fbda 	bl	800b5a4 <catch_Frist>
			wuliao_falg = 0;
 800bdf0:	4b07      	ldr	r3, [pc, #28]	@ (800be10 <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bdf6:	4b09      	ldr	r3, [pc, #36]	@ (800be1c <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	4b07      	ldr	r3, [pc, #28]	@ (800be1c <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800be00:	701a      	strb	r2, [r3, #0]
	while (Grab_count < 3) {
 800be02:	4b06      	ldr	r3, [pc, #24]	@ (800be1c <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	2b02      	cmp	r3, #2
 800be08:	d9b0      	bls.n	800bd6c <Second_Run_Frist_Grab_Wuliao+0xc>
		}

	}
}
 800be0a:	bf00      	nop
 800be0c:	bf00      	nop
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	24000480 	.word	0x24000480
 800be14:	24000460 	.word	0x24000460
 800be18:	2400047c 	.word	0x2400047c
 800be1c:	24000b2c 	.word	0x24000b2c

0800be20 <Second_Run_put_wuliao_to_Car_frist>:
void Second_Run_put_wuliao_to_Car_frist(void) {
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
	for (int i = 3; i < 6; i++) {
 800be26:	2303      	movs	r3, #3
 800be28:	607b      	str	r3, [r7, #4]
 800be2a:	e067      	b.n	800befc <Second_Run_put_wuliao_to_Car_frist+0xdc>
		if (QR_data[i] == 1) {
 800be2c:	4a37      	ldr	r2, [pc, #220]	@ (800bf0c <Second_Run_put_wuliao_to_Car_frist+0xec>)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d105      	bne.n	800be44 <Second_Run_put_wuliao_to_Car_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800be38:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800bf10 <Second_Run_put_wuliao_to_Car_frist+0xf0>
 800be3c:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800bf14 <Second_Run_put_wuliao_to_Car_frist+0xf4>
 800be40:	f001 fa92 	bl	800d368 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 2) {
 800be44:	4a31      	ldr	r2, [pc, #196]	@ (800bf0c <Second_Run_put_wuliao_to_Car_frist+0xec>)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d105      	bne.n	800be5c <Second_Run_put_wuliao_to_Car_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800be50:	eddf 0a31 	vldr	s1, [pc, #196]	@ 800bf18 <Second_Run_put_wuliao_to_Car_frist+0xf8>
 800be54:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 800bf14 <Second_Run_put_wuliao_to_Car_frist+0xf4>
 800be58:	f001 fa86 	bl	800d368 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800be5c:	4a2b      	ldr	r2, [pc, #172]	@ (800bf0c <Second_Run_put_wuliao_to_Car_frist+0xec>)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be64:	2b03      	cmp	r3, #3
 800be66:	d105      	bne.n	800be74 <Second_Run_put_wuliao_to_Car_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800be68:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800bf1c <Second_Run_put_wuliao_to_Car_frist+0xfc>
 800be6c:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800bf14 <Second_Run_put_wuliao_to_Car_frist+0xf4>
 800be70:	f001 fa7a 	bl	800d368 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 3) {
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b03      	cmp	r3, #3
 800be78:	d112      	bne.n	800bea0 <Second_Run_put_wuliao_to_Car_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800be7a:	4b29      	ldr	r3, [pc, #164]	@ (800bf20 <Second_Run_put_wuliao_to_Car_frist+0x100>)
 800be7c:	edd3 7a00 	vldr	s15, [r3]
 800be80:	4b28      	ldr	r3, [pc, #160]	@ (800bf24 <Second_Run_put_wuliao_to_Car_frist+0x104>)
 800be82:	ed93 7a00 	vldr	s14, [r3]
 800be86:	eef0 0a47 	vmov.f32	s1, s14
 800be8a:	eeb0 0a67 	vmov.f32	s0, s15
 800be8e:	f001 fbcb 	bl	800d628 <Move_Tx_Pid_Ctrl>
			catch_Second(860, 2375);
 800be92:	f640 1147 	movw	r1, #2375	@ 0x947
 800be96:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800be9a:	f7ff fbf0 	bl	800b67e <catch_Second>
 800be9e:	e02a      	b.n	800bef6 <Second_Run_put_wuliao_to_Car_frist+0xd6>

		} else if (i == 4) {
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b04      	cmp	r3, #4
 800bea4:	d112      	bne.n	800becc <Second_Run_put_wuliao_to_Car_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bea6:	4b1e      	ldr	r3, [pc, #120]	@ (800bf20 <Second_Run_put_wuliao_to_Car_frist+0x100>)
 800bea8:	edd3 7a00 	vldr	s15, [r3]
 800beac:	4b1d      	ldr	r3, [pc, #116]	@ (800bf24 <Second_Run_put_wuliao_to_Car_frist+0x104>)
 800beae:	ed93 7a00 	vldr	s14, [r3]
 800beb2:	eef0 0a47 	vmov.f32	s1, s14
 800beb6:	eeb0 0a67 	vmov.f32	s0, s15
 800beba:	f001 fbb5 	bl	800d628 <Move_Tx_Pid_Ctrl>
			catch_Second(1910, 2370);
 800bebe:	f640 1142 	movw	r1, #2370	@ 0x942
 800bec2:	f240 7076 	movw	r0, #1910	@ 0x776
 800bec6:	f7ff fbda 	bl	800b67e <catch_Second>
 800beca:	e014      	b.n	800bef6 <Second_Run_put_wuliao_to_Car_frist+0xd6>
		} else if (i == 5) {
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b05      	cmp	r3, #5
 800bed0:	d111      	bne.n	800bef6 <Second_Run_put_wuliao_to_Car_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bed2:	4b13      	ldr	r3, [pc, #76]	@ (800bf20 <Second_Run_put_wuliao_to_Car_frist+0x100>)
 800bed4:	edd3 7a00 	vldr	s15, [r3]
 800bed8:	4b12      	ldr	r3, [pc, #72]	@ (800bf24 <Second_Run_put_wuliao_to_Car_frist+0x104>)
 800beda:	ed93 7a00 	vldr	s14, [r3]
 800bede:	eef0 0a47 	vmov.f32	s1, s14
 800bee2:	eeb0 0a67 	vmov.f32	s0, s15
 800bee6:	f001 fb9f 	bl	800d628 <Move_Tx_Pid_Ctrl>
			catch_Second(2960, 2370);
 800beea:	f640 1142 	movw	r1, #2370	@ 0x942
 800beee:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bef2:	f7ff fbc4 	bl	800b67e <catch_Second>
	for (int i = 3; i < 6; i++) {
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	3301      	adds	r3, #1
 800befa:	607b      	str	r3, [r7, #4]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2b05      	cmp	r3, #5
 800bf00:	dd94      	ble.n	800be2c <Second_Run_put_wuliao_to_Car_frist+0xc>
		}

	}
}
 800bf02:	bf00      	nop
 800bf04:	bf00      	nop
 800bf06:	3708      	adds	r7, #8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	24000460 	.word	0x24000460
 800bf10:	44960000 	.word	0x44960000
 800bf14:	44e74000 	.word	0x44e74000
 800bf18:	44834000 	.word	0x44834000
 800bf1c:	445d4000 	.word	0x445d4000
 800bf20:	24000000 	.word	0x24000000
 800bf24:	24000004 	.word	0x24000004

0800bf28 <Second_Run_put_wuliao_to_circular_frist>:

void Second_Run_put_wuliao_to_circular_frist(void) {
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0

	for (int i = 3; i < 6; i++) {
 800bf2e:	2303      	movs	r3, #3
 800bf30:	607b      	str	r3, [r7, #4]
 800bf32:	e067      	b.n	800c004 <Second_Run_put_wuliao_to_circular_frist+0xdc>
		if (QR_data[i] == 1) {
 800bf34:	4a37      	ldr	r2, [pc, #220]	@ (800c014 <Second_Run_put_wuliao_to_circular_frist+0xec>)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d105      	bne.n	800bf4c <Second_Run_put_wuliao_to_circular_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(910, 1910);
 800bf40:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800c018 <Second_Run_put_wuliao_to_circular_frist+0xf0>
 800bf44:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 800c01c <Second_Run_put_wuliao_to_circular_frist+0xf4>
 800bf48:	f001 fa0e 	bl	800d368 <Move_Action_Nopid_Right_Ctrl>

		}
		if (QR_data[i] == 2) {
 800bf4c:	4a31      	ldr	r2, [pc, #196]	@ (800c014 <Second_Run_put_wuliao_to_circular_frist+0xec>)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf54:	2b02      	cmp	r3, #2
 800bf56:	d105      	bne.n	800bf64 <Second_Run_put_wuliao_to_circular_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1060, 1910);
 800bf58:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 800c018 <Second_Run_put_wuliao_to_circular_frist+0xf0>
 800bf5c:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 800c020 <Second_Run_put_wuliao_to_circular_frist+0xf8>
 800bf60:	f001 fa02 	bl	800d368 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800bf64:	4a2b      	ldr	r2, [pc, #172]	@ (800c014 <Second_Run_put_wuliao_to_circular_frist+0xec>)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf6c:	2b03      	cmp	r3, #3
 800bf6e:	d105      	bne.n	800bf7c <Second_Run_put_wuliao_to_circular_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1185, 1910);
 800bf70:	eddf 0a29 	vldr	s1, [pc, #164]	@ 800c018 <Second_Run_put_wuliao_to_circular_frist+0xf0>
 800bf74:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800c024 <Second_Run_put_wuliao_to_circular_frist+0xfc>
 800bf78:	f001 f9f6 	bl	800d368 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 3) {
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2b03      	cmp	r3, #3
 800bf80:	d112      	bne.n	800bfa8 <Second_Run_put_wuliao_to_circular_frist+0x80>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bf82:	4b29      	ldr	r3, [pc, #164]	@ (800c028 <Second_Run_put_wuliao_to_circular_frist+0x100>)
 800bf84:	edd3 7a00 	vldr	s15, [r3]
 800bf88:	4b28      	ldr	r3, [pc, #160]	@ (800c02c <Second_Run_put_wuliao_to_circular_frist+0x104>)
 800bf8a:	ed93 7a00 	vldr	s14, [r3]
 800bf8e:	eef0 0a47 	vmov.f32	s1, s14
 800bf92:	eeb0 0a67 	vmov.f32	s0, s15
 800bf96:	f001 fb47 	bl	800d628 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800bf9a:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bf9e:	f640 0066 	movw	r0, #2150	@ 0x866
 800bfa2:	f7ff fc4d 	bl	800b840 <put>
 800bfa6:	e02a      	b.n	800bffe <Second_Run_put_wuliao_to_circular_frist+0xd6>
		} else if (i == 4) {
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b04      	cmp	r3, #4
 800bfac:	d112      	bne.n	800bfd4 <Second_Run_put_wuliao_to_circular_frist+0xac>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bfae:	4b1e      	ldr	r3, [pc, #120]	@ (800c028 <Second_Run_put_wuliao_to_circular_frist+0x100>)
 800bfb0:	edd3 7a00 	vldr	s15, [r3]
 800bfb4:	4b1d      	ldr	r3, [pc, #116]	@ (800c02c <Second_Run_put_wuliao_to_circular_frist+0x104>)
 800bfb6:	ed93 7a00 	vldr	s14, [r3]
 800bfba:	eef0 0a47 	vmov.f32	s1, s14
 800bfbe:	eeb0 0a67 	vmov.f32	s0, s15
 800bfc2:	f001 fb31 	bl	800d628 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800bfc6:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bfca:	f640 4085 	movw	r0, #3205	@ 0xc85
 800bfce:	f7ff fc37 	bl	800b840 <put>
 800bfd2:	e014      	b.n	800bffe <Second_Run_put_wuliao_to_circular_frist+0xd6>
		} else if (i == 5) {
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b05      	cmp	r3, #5
 800bfd8:	d111      	bne.n	800bffe <Second_Run_put_wuliao_to_circular_frist+0xd6>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bfda:	4b13      	ldr	r3, [pc, #76]	@ (800c028 <Second_Run_put_wuliao_to_circular_frist+0x100>)
 800bfdc:	edd3 7a00 	vldr	s15, [r3]
 800bfe0:	4b12      	ldr	r3, [pc, #72]	@ (800c02c <Second_Run_put_wuliao_to_circular_frist+0x104>)
 800bfe2:	ed93 7a00 	vldr	s14, [r3]
 800bfe6:	eef0 0a47 	vmov.f32	s1, s14
 800bfea:	eeb0 0a67 	vmov.f32	s0, s15
 800bfee:	f001 fb1b 	bl	800d628 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800bff2:	f640 1142 	movw	r1, #2370	@ 0x942
 800bff6:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bffa:	f7ff fc21 	bl	800b840 <put>
	for (int i = 3; i < 6; i++) {
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	3301      	adds	r3, #1
 800c002:	607b      	str	r3, [r7, #4]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2b05      	cmp	r3, #5
 800c008:	dd94      	ble.n	800bf34 <Second_Run_put_wuliao_to_circular_frist+0xc>
		}

	}
}
 800c00a:	bf00      	nop
 800c00c:	bf00      	nop
 800c00e:	3708      	adds	r7, #8
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	24000460 	.word	0x24000460
 800c018:	44eec000 	.word	0x44eec000
 800c01c:	44638000 	.word	0x44638000
 800c020:	44848000 	.word	0x44848000
 800c024:	44942000 	.word	0x44942000
 800c028:	24000000 	.word	0x24000000
 800c02c:	24000004 	.word	0x24000004

0800c030 <Emm_V5_Pos_Control>:
 * @param    raF ：相位/绝对标志，false为相对运动，true为绝对值运动
 * @param    snF ：多机同步标志 ，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Pos_Control(uint8_t addr, uint8_t dir, uint16_t vel, uint8_t acc,
		uint32_t clk, bool raF, bool snF) {
 800c030:	b590      	push	{r4, r7, lr}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	4604      	mov	r4, r0
 800c038:	4608      	mov	r0, r1
 800c03a:	4611      	mov	r1, r2
 800c03c:	461a      	mov	r2, r3
 800c03e:	4623      	mov	r3, r4
 800c040:	71fb      	strb	r3, [r7, #7]
 800c042:	4603      	mov	r3, r0
 800c044:	71bb      	strb	r3, [r7, #6]
 800c046:	460b      	mov	r3, r1
 800c048:	80bb      	strh	r3, [r7, #4]
 800c04a:	4613      	mov	r3, r2
 800c04c:	70fb      	strb	r3, [r7, #3]

	// 装载命令
	cmd[0] = addr;                      // 地址
 800c04e:	4a20      	ldr	r2, [pc, #128]	@ (800c0d0 <Emm_V5_Pos_Control+0xa0>)
 800c050:	79fb      	ldrb	r3, [r7, #7]
 800c052:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFD;                      // 功能码
 800c054:	4b1e      	ldr	r3, [pc, #120]	@ (800c0d0 <Emm_V5_Pos_Control+0xa0>)
 800c056:	22fd      	movs	r2, #253	@ 0xfd
 800c058:	705a      	strb	r2, [r3, #1]
	cmd[2] = dir;                       // 方向
 800c05a:	4a1d      	ldr	r2, [pc, #116]	@ (800c0d0 <Emm_V5_Pos_Control+0xa0>)
 800c05c:	79bb      	ldrb	r3, [r7, #6]
 800c05e:	7093      	strb	r3, [r2, #2]
	cmd[3] = (uint8_t) (vel >> 8);       // 速度(RPM)高8位字节
 800c060:	88bb      	ldrh	r3, [r7, #4]
 800c062:	0a1b      	lsrs	r3, r3, #8
 800c064:	b29b      	uxth	r3, r3
 800c066:	b2da      	uxtb	r2, r3
 800c068:	4b19      	ldr	r3, [pc, #100]	@ (800c0d0 <Emm_V5_Pos_Control+0xa0>)
 800c06a:	70da      	strb	r2, [r3, #3]
	cmd[4] = (uint8_t) (vel >> 0);       // 速度(RPM)低8位字节
 800c06c:	88bb      	ldrh	r3, [r7, #4]
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	4b17      	ldr	r3, [pc, #92]	@ (800c0d0 <Emm_V5_Pos_Control+0xa0>)
 800c072:	711a      	strb	r2, [r3, #4]
	cmd[5] = acc;                       // 加速度，注意：0是直接启动
 800c074:	4a16      	ldr	r2, [pc, #88]	@ (800c0d0 <Emm_V5_Pos_Control+0xa0>)
 800c076:	78fb      	ldrb	r3, [r7, #3]
 800c078:	7153      	strb	r3, [r2, #5]
	cmd[6] = (uint8_t) (clk >> 24);      // 脉冲数(bit24 - bit31)
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	0e1b      	lsrs	r3, r3, #24
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	4b13      	ldr	r3, [pc, #76]	@ (800c0d0 <Emm_V5_Pos_Control+0xa0>)
 800c082:	719a      	strb	r2, [r3, #6]
	cmd[7] = (uint8_t) (clk >> 16);      // 脉冲数(bit16 - bit23)
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	0c1b      	lsrs	r3, r3, #16
 800c088:	b2da      	uxtb	r2, r3
 800c08a:	4b11      	ldr	r3, [pc, #68]	@ (800c0d0 <Emm_V5_Pos_Control+0xa0>)
 800c08c:	71da      	strb	r2, [r3, #7]
	cmd[8] = (uint8_t) (clk >> 8);       // 脉冲数(bit8  - bit15)
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	0a1b      	lsrs	r3, r3, #8
 800c092:	b2da      	uxtb	r2, r3
 800c094:	4b0e      	ldr	r3, [pc, #56]	@ (800c0d0 <Emm_V5_Pos_Control+0xa0>)
 800c096:	721a      	strb	r2, [r3, #8]
	cmd[9] = (uint8_t) (clk >> 0);       // 脉冲数(bit0  - bit7 )
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	b2da      	uxtb	r2, r3
 800c09c:	4b0c      	ldr	r3, [pc, #48]	@ (800c0d0 <Emm_V5_Pos_Control+0xa0>)
 800c09e:	725a      	strb	r2, [r3, #9]
	cmd[10] = raF;                       // 相位/绝对标志，false为相对运动，true为绝对值运动
 800c0a0:	7f3a      	ldrb	r2, [r7, #28]
 800c0a2:	4b0b      	ldr	r3, [pc, #44]	@ (800c0d0 <Emm_V5_Pos_Control+0xa0>)
 800c0a4:	729a      	strb	r2, [r3, #10]
	cmd[11] = snF;                       // 多机同步运动标志，false为不启用，true为启用
 800c0a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c0aa:	4b09      	ldr	r3, [pc, #36]	@ (800c0d0 <Emm_V5_Pos_Control+0xa0>)
 800c0ac:	72da      	strb	r2, [r3, #11]
	cmd[12] = 0x6B;                      // 校验字节
 800c0ae:	4b08      	ldr	r3, [pc, #32]	@ (800c0d0 <Emm_V5_Pos_Control+0xa0>)
 800c0b0:	226b      	movs	r2, #107	@ 0x6b
 800c0b2:	731a      	strb	r2, [r3, #12]

	// 发送命令
	FDCAN_Send_Msg(cmd, 13);
 800c0b4:	210d      	movs	r1, #13
 800c0b6:	4806      	ldr	r0, [pc, #24]	@ (800c0d0 <Emm_V5_Pos_Control+0xa0>)
 800c0b8:	f7f4 fdee 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(10);
 800c0bc:	200a      	movs	r0, #10
 800c0be:	f7f6 fe4d 	bl	8002d5c <HAL_Delay>
	Emm_mode = 1;
 800c0c2:	4b04      	ldr	r3, [pc, #16]	@ (800c0d4 <Emm_V5_Pos_Control+0xa4>)
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	701a      	strb	r2, [r3, #0]
}
 800c0c8:	bf00      	nop
 800c0ca:	370c      	adds	r7, #12
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd90      	pop	{r4, r7, pc}
 800c0d0:	24000b30 	.word	0x24000b30
 800c0d4:	2400029c 	.word	0x2400029c

0800c0d8 <Emm_V5_Stop_Now>:
 * @brief    立即停止（所有控制模式都通用）
 * @param    addr  ：电机地址
 * @param    snF   ：多机同步标志，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Stop_Now(uint8_t addr, bool snF) {
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	4603      	mov	r3, r0
 800c0e0:	460a      	mov	r2, r1
 800c0e2:	71fb      	strb	r3, [r7, #7]
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	71bb      	strb	r3, [r7, #6]

	// 装载命令
	cmd[0] = addr;                       // 地址
 800c0e8:	4a0b      	ldr	r2, [pc, #44]	@ (800c118 <Emm_V5_Stop_Now+0x40>)
 800c0ea:	79fb      	ldrb	r3, [r7, #7]
 800c0ec:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFE;                       // 功能码
 800c0ee:	4b0a      	ldr	r3, [pc, #40]	@ (800c118 <Emm_V5_Stop_Now+0x40>)
 800c0f0:	22fe      	movs	r2, #254	@ 0xfe
 800c0f2:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x98;                       // 辅助码
 800c0f4:	4b08      	ldr	r3, [pc, #32]	@ (800c118 <Emm_V5_Stop_Now+0x40>)
 800c0f6:	2298      	movs	r2, #152	@ 0x98
 800c0f8:	709a      	strb	r2, [r3, #2]
	cmd[3] = snF;                        // 多机同步运动标志
 800c0fa:	79ba      	ldrb	r2, [r7, #6]
 800c0fc:	4b06      	ldr	r3, [pc, #24]	@ (800c118 <Emm_V5_Stop_Now+0x40>)
 800c0fe:	70da      	strb	r2, [r3, #3]
	cmd[4] = 0x6B;                       // 校验字节
 800c100:	4b05      	ldr	r3, [pc, #20]	@ (800c118 <Emm_V5_Stop_Now+0x40>)
 800c102:	226b      	movs	r2, #107	@ 0x6b
 800c104:	711a      	strb	r2, [r3, #4]

	// 发送命令
	FDCAN_Send_Msg(cmd, 5);
 800c106:	2105      	movs	r1, #5
 800c108:	4803      	ldr	r0, [pc, #12]	@ (800c118 <Emm_V5_Stop_Now+0x40>)
 800c10a:	f7f4 fdc5 	bl	8000c98 <FDCAN_Send_Msg>
}
 800c10e:	bf00      	nop
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	24000b30 	.word	0x24000b30

0800c11c <Emm_V5_Synchronous_motion>:
/**
 * @brief    多机同步运动
 * @param    addr  ：电机地址
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Synchronous_motion(void) {
 800c11c:	b580      	push	{r7, lr}
 800c11e:	af00      	add	r7, sp, #0

	// 装载命令
	cmd[0] = 0x00;                       // 地址
 800c120:	4b0a      	ldr	r3, [pc, #40]	@ (800c14c <Emm_V5_Synchronous_motion+0x30>)
 800c122:	2200      	movs	r2, #0
 800c124:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0xFF;                       // 功能码
 800c126:	4b09      	ldr	r3, [pc, #36]	@ (800c14c <Emm_V5_Synchronous_motion+0x30>)
 800c128:	22ff      	movs	r2, #255	@ 0xff
 800c12a:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x66;                       // 辅助码
 800c12c:	4b07      	ldr	r3, [pc, #28]	@ (800c14c <Emm_V5_Synchronous_motion+0x30>)
 800c12e:	2266      	movs	r2, #102	@ 0x66
 800c130:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6B;                       // 校验字节
 800c132:	4b06      	ldr	r3, [pc, #24]	@ (800c14c <Emm_V5_Synchronous_motion+0x30>)
 800c134:	226b      	movs	r2, #107	@ 0x6b
 800c136:	70da      	strb	r2, [r3, #3]

	// 发送命令
	FDCAN_Send_Msg(cmd, 4);
 800c138:	2104      	movs	r1, #4
 800c13a:	4804      	ldr	r0, [pc, #16]	@ (800c14c <Emm_V5_Synchronous_motion+0x30>)
 800c13c:	f7f4 fdac 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(5);
 800c140:	2005      	movs	r0, #5
 800c142:	f7f6 fe0b 	bl	8002d5c <HAL_Delay>
}
 800c146:	bf00      	nop
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	24000b30 	.word	0x24000b30

0800c150 <limit>:
float A_out;
float TX_X_out;
float TX_Y_out;

// 输出限幅
float limit(float x, float min, float max) {
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	ed87 0a03 	vstr	s0, [r7, #12]
 800c15a:	edc7 0a02 	vstr	s1, [r7, #8]
 800c15e:	ed87 1a01 	vstr	s2, [r7, #4]
	x = (x > max) ? max : ((x < min) ? min : x);
 800c162:	ed97 7a03 	vldr	s14, [r7, #12]
 800c166:	edd7 7a01 	vldr	s15, [r7, #4]
 800c16a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c172:	dd01      	ble.n	800c178 <limit+0x28>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	e00b      	b.n	800c190 <limit+0x40>
 800c178:	ed97 7a03 	vldr	s14, [r7, #12]
 800c17c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c188:	d501      	bpl.n	800c18e <limit+0x3e>
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	e000      	b.n	800c190 <limit+0x40>
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	60fb      	str	r3, [r7, #12]
	return x;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	ee07 3a90 	vmov	s15, r3
}
 800c198:	eeb0 0a67 	vmov.f32	s0, s15
 800c19c:	3714      	adds	r7, #20
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
	...

0800c1a8 <PID_Init>:
		return in;
	}
}

//	初始化PID结构体
void PID_Init(void) {
 800c1a8:	b480      	push	{r7}
 800c1aa:	af00      	add	r7, sp, #0
	//======================X=====================//   20   60
	XPID.P = 20;    //0.57    0  0.1
 800c1ac:	4b69      	ldr	r3, [pc, #420]	@ (800c354 <PID_Init+0x1ac>)
 800c1ae:	4a6a      	ldr	r2, [pc, #424]	@ (800c358 <PID_Init+0x1b0>)
 800c1b0:	601a      	str	r2, [r3, #0]
	XPID.I = 0;
 800c1b2:	4b68      	ldr	r3, [pc, #416]	@ (800c354 <PID_Init+0x1ac>)
 800c1b4:	f04f 0200 	mov.w	r2, #0
 800c1b8:	609a      	str	r2, [r3, #8]
	XPID.D = 60;
 800c1ba:	4b66      	ldr	r3, [pc, #408]	@ (800c354 <PID_Init+0x1ac>)
 800c1bc:	4a67      	ldr	r2, [pc, #412]	@ (800c35c <PID_Init+0x1b4>)
 800c1be:	615a      	str	r2, [r3, #20]

	XPID.I_LIMIT = 100.0;
 800c1c0:	4b64      	ldr	r3, [pc, #400]	@ (800c354 <PID_Init+0x1ac>)
 800c1c2:	4a67      	ldr	r2, [pc, #412]	@ (800c360 <PID_Init+0x1b8>)
 800c1c4:	611a      	str	r2, [r3, #16]
	XPID.OUT_LIMIT = 100.0;
 800c1c6:	4b63      	ldr	r3, [pc, #396]	@ (800c354 <PID_Init+0x1ac>)
 800c1c8:	4a65      	ldr	r2, [pc, #404]	@ (800c360 <PID_Init+0x1b8>)
 800c1ca:	621a      	str	r2, [r3, #32]

	XPID.P_OUT = 0.0;
 800c1cc:	4b61      	ldr	r3, [pc, #388]	@ (800c354 <PID_Init+0x1ac>)
 800c1ce:	f04f 0200 	mov.w	r2, #0
 800c1d2:	605a      	str	r2, [r3, #4]
	XPID.I_OUT = 0.0;
 800c1d4:	4b5f      	ldr	r3, [pc, #380]	@ (800c354 <PID_Init+0x1ac>)
 800c1d6:	f04f 0200 	mov.w	r2, #0
 800c1da:	60da      	str	r2, [r3, #12]
	XPID.D_OUT = 0.0;
 800c1dc:	4b5d      	ldr	r3, [pc, #372]	@ (800c354 <PID_Init+0x1ac>)
 800c1de:	f04f 0200 	mov.w	r2, #0
 800c1e2:	619a      	str	r2, [r3, #24]

	XPID.OUT = 0.0;
 800c1e4:	4b5b      	ldr	r3, [pc, #364]	@ (800c354 <PID_Init+0x1ac>)
 800c1e6:	f04f 0200 	mov.w	r2, #0
 800c1ea:	61da      	str	r2, [r3, #28]

	XPID.err = 0.0;
 800c1ec:	4b59      	ldr	r3, [pc, #356]	@ (800c354 <PID_Init+0x1ac>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	849a      	strh	r2, [r3, #36]	@ 0x24
	XPID.err_err = 0.0;
 800c1f2:	4b58      	ldr	r3, [pc, #352]	@ (800c354 <PID_Init+0x1ac>)
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	84da      	strh	r2, [r3, #38]	@ 0x26
	XPID.err_old = 0.0;
 800c1f8:	4b56      	ldr	r3, [pc, #344]	@ (800c354 <PID_Init+0x1ac>)
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	851a      	strh	r2, [r3, #40]	@ 0x28

	//========= =============Y=====================//
	YPID.P = 20;    //0.89                     //0.8 0 0.01
 800c1fe:	4b59      	ldr	r3, [pc, #356]	@ (800c364 <PID_Init+0x1bc>)
 800c200:	4a55      	ldr	r2, [pc, #340]	@ (800c358 <PID_Init+0x1b0>)
 800c202:	601a      	str	r2, [r3, #0]
	YPID.I = 0;
 800c204:	4b57      	ldr	r3, [pc, #348]	@ (800c364 <PID_Init+0x1bc>)
 800c206:	f04f 0200 	mov.w	r2, #0
 800c20a:	609a      	str	r2, [r3, #8]
	YPID.D = 60;    //60
 800c20c:	4b55      	ldr	r3, [pc, #340]	@ (800c364 <PID_Init+0x1bc>)
 800c20e:	4a53      	ldr	r2, [pc, #332]	@ (800c35c <PID_Init+0x1b4>)
 800c210:	615a      	str	r2, [r3, #20]
	YPID.I_LIMIT = 100.0;
 800c212:	4b54      	ldr	r3, [pc, #336]	@ (800c364 <PID_Init+0x1bc>)
 800c214:	4a52      	ldr	r2, [pc, #328]	@ (800c360 <PID_Init+0x1b8>)
 800c216:	611a      	str	r2, [r3, #16]
	YPID.OUT_LIMIT = 100.0;
 800c218:	4b52      	ldr	r3, [pc, #328]	@ (800c364 <PID_Init+0x1bc>)
 800c21a:	4a51      	ldr	r2, [pc, #324]	@ (800c360 <PID_Init+0x1b8>)
 800c21c:	621a      	str	r2, [r3, #32]

	YPID.P_OUT = 0.0;
 800c21e:	4b51      	ldr	r3, [pc, #324]	@ (800c364 <PID_Init+0x1bc>)
 800c220:	f04f 0200 	mov.w	r2, #0
 800c224:	605a      	str	r2, [r3, #4]
	YPID.I_OUT = 0.0;
 800c226:	4b4f      	ldr	r3, [pc, #316]	@ (800c364 <PID_Init+0x1bc>)
 800c228:	f04f 0200 	mov.w	r2, #0
 800c22c:	60da      	str	r2, [r3, #12]
	YPID.D_OUT = 0.0;
 800c22e:	4b4d      	ldr	r3, [pc, #308]	@ (800c364 <PID_Init+0x1bc>)
 800c230:	f04f 0200 	mov.w	r2, #0
 800c234:	619a      	str	r2, [r3, #24]

	YPID.OUT = 0.0;
 800c236:	4b4b      	ldr	r3, [pc, #300]	@ (800c364 <PID_Init+0x1bc>)
 800c238:	f04f 0200 	mov.w	r2, #0
 800c23c:	61da      	str	r2, [r3, #28]

	YPID.err = 0.0;
 800c23e:	4b49      	ldr	r3, [pc, #292]	@ (800c364 <PID_Init+0x1bc>)
 800c240:	2200      	movs	r2, #0
 800c242:	849a      	strh	r2, [r3, #36]	@ 0x24
	YPID.err_err = 0.0;
 800c244:	4b47      	ldr	r3, [pc, #284]	@ (800c364 <PID_Init+0x1bc>)
 800c246:	2200      	movs	r2, #0
 800c248:	84da      	strh	r2, [r3, #38]	@ 0x26
	YPID.err_old = 0.0;
 800c24a:	4b46      	ldr	r3, [pc, #280]	@ (800c364 <PID_Init+0x1bc>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================A=====================//
	APID.P = 0.9;
 800c250:	4b45      	ldr	r3, [pc, #276]	@ (800c368 <PID_Init+0x1c0>)
 800c252:	4a46      	ldr	r2, [pc, #280]	@ (800c36c <PID_Init+0x1c4>)
 800c254:	601a      	str	r2, [r3, #0]
	APID.I = 0.0;
 800c256:	4b44      	ldr	r3, [pc, #272]	@ (800c368 <PID_Init+0x1c0>)
 800c258:	f04f 0200 	mov.w	r2, #0
 800c25c:	609a      	str	r2, [r3, #8]
	APID.D = 0.0;
 800c25e:	4b42      	ldr	r3, [pc, #264]	@ (800c368 <PID_Init+0x1c0>)
 800c260:	f04f 0200 	mov.w	r2, #0
 800c264:	615a      	str	r2, [r3, #20]

	APID.I_LIMIT = 1000.0;
 800c266:	4b40      	ldr	r3, [pc, #256]	@ (800c368 <PID_Init+0x1c0>)
 800c268:	4a41      	ldr	r2, [pc, #260]	@ (800c370 <PID_Init+0x1c8>)
 800c26a:	611a      	str	r2, [r3, #16]
	APID.OUT_LIMIT = 2350.0;
 800c26c:	4b3e      	ldr	r3, [pc, #248]	@ (800c368 <PID_Init+0x1c0>)
 800c26e:	4a41      	ldr	r2, [pc, #260]	@ (800c374 <PID_Init+0x1cc>)
 800c270:	621a      	str	r2, [r3, #32]

	APID.P_OUT = 0.0;
 800c272:	4b3d      	ldr	r3, [pc, #244]	@ (800c368 <PID_Init+0x1c0>)
 800c274:	f04f 0200 	mov.w	r2, #0
 800c278:	605a      	str	r2, [r3, #4]
	APID.I_OUT = 0.0;
 800c27a:	4b3b      	ldr	r3, [pc, #236]	@ (800c368 <PID_Init+0x1c0>)
 800c27c:	f04f 0200 	mov.w	r2, #0
 800c280:	60da      	str	r2, [r3, #12]
	APID.D_OUT = 0.0;
 800c282:	4b39      	ldr	r3, [pc, #228]	@ (800c368 <PID_Init+0x1c0>)
 800c284:	f04f 0200 	mov.w	r2, #0
 800c288:	619a      	str	r2, [r3, #24]

	APID.OUT = 0.0;
 800c28a:	4b37      	ldr	r3, [pc, #220]	@ (800c368 <PID_Init+0x1c0>)
 800c28c:	f04f 0200 	mov.w	r2, #0
 800c290:	61da      	str	r2, [r3, #28]

	APID.err = 0.0;
 800c292:	4b35      	ldr	r3, [pc, #212]	@ (800c368 <PID_Init+0x1c0>)
 800c294:	2200      	movs	r2, #0
 800c296:	849a      	strh	r2, [r3, #36]	@ 0x24
	APID.err_err = 0.0;
 800c298:	4b33      	ldr	r3, [pc, #204]	@ (800c368 <PID_Init+0x1c0>)
 800c29a:	2200      	movs	r2, #0
 800c29c:	84da      	strh	r2, [r3, #38]	@ 0x26
	APID.err_old = 0.0;
 800c29e:	4b32      	ldr	r3, [pc, #200]	@ (800c368 <PID_Init+0x1c0>)
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	851a      	strh	r2, [r3, #40]	@ 0x28
	//======================TX=====================//
	TXPID.P = 1;
 800c2a4:	4b34      	ldr	r3, [pc, #208]	@ (800c378 <PID_Init+0x1d0>)
 800c2a6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c2aa:	601a      	str	r2, [r3, #0]
	TXPID.I = 0;
 800c2ac:	4b32      	ldr	r3, [pc, #200]	@ (800c378 <PID_Init+0x1d0>)
 800c2ae:	f04f 0200 	mov.w	r2, #0
 800c2b2:	609a      	str	r2, [r3, #8]
	TXPID.D = 0.3;
 800c2b4:	4b30      	ldr	r3, [pc, #192]	@ (800c378 <PID_Init+0x1d0>)
 800c2b6:	4a31      	ldr	r2, [pc, #196]	@ (800c37c <PID_Init+0x1d4>)
 800c2b8:	615a      	str	r2, [r3, #20]

	TXPID.I_LIMIT = 100.0;
 800c2ba:	4b2f      	ldr	r3, [pc, #188]	@ (800c378 <PID_Init+0x1d0>)
 800c2bc:	4a28      	ldr	r2, [pc, #160]	@ (800c360 <PID_Init+0x1b8>)
 800c2be:	611a      	str	r2, [r3, #16]
	TXPID.OUT_LIMIT = 300.0;
 800c2c0:	4b2d      	ldr	r3, [pc, #180]	@ (800c378 <PID_Init+0x1d0>)
 800c2c2:	4a2f      	ldr	r2, [pc, #188]	@ (800c380 <PID_Init+0x1d8>)
 800c2c4:	621a      	str	r2, [r3, #32]

	TXPID.P_OUT = 0.0;
 800c2c6:	4b2c      	ldr	r3, [pc, #176]	@ (800c378 <PID_Init+0x1d0>)
 800c2c8:	f04f 0200 	mov.w	r2, #0
 800c2cc:	605a      	str	r2, [r3, #4]
	TXPID.I_OUT = 0.0;
 800c2ce:	4b2a      	ldr	r3, [pc, #168]	@ (800c378 <PID_Init+0x1d0>)
 800c2d0:	f04f 0200 	mov.w	r2, #0
 800c2d4:	60da      	str	r2, [r3, #12]
	TXPID.D_OUT = 0.0;
 800c2d6:	4b28      	ldr	r3, [pc, #160]	@ (800c378 <PID_Init+0x1d0>)
 800c2d8:	f04f 0200 	mov.w	r2, #0
 800c2dc:	619a      	str	r2, [r3, #24]

	TXPID.OUT = 0.0;
 800c2de:	4b26      	ldr	r3, [pc, #152]	@ (800c378 <PID_Init+0x1d0>)
 800c2e0:	f04f 0200 	mov.w	r2, #0
 800c2e4:	61da      	str	r2, [r3, #28]

	TXPID.err = 0.0;
 800c2e6:	4b24      	ldr	r3, [pc, #144]	@ (800c378 <PID_Init+0x1d0>)
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	849a      	strh	r2, [r3, #36]	@ 0x24
	TXPID.err_err = 0.0;
 800c2ec:	4b22      	ldr	r3, [pc, #136]	@ (800c378 <PID_Init+0x1d0>)
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	84da      	strh	r2, [r3, #38]	@ 0x26
	TXPID.err_old = 0.0;
 800c2f2:	4b21      	ldr	r3, [pc, #132]	@ (800c378 <PID_Init+0x1d0>)
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================TY=====================//
	TYPID.P = -1;
 800c2f8:	4b22      	ldr	r3, [pc, #136]	@ (800c384 <PID_Init+0x1dc>)
 800c2fa:	4a23      	ldr	r2, [pc, #140]	@ (800c388 <PID_Init+0x1e0>)
 800c2fc:	601a      	str	r2, [r3, #0]
	TYPID.I = -0;      //0.9  0.01   0.3
 800c2fe:	4b21      	ldr	r3, [pc, #132]	@ (800c384 <PID_Init+0x1dc>)
 800c300:	f04f 0200 	mov.w	r2, #0
 800c304:	609a      	str	r2, [r3, #8]
	//0.9 0 0.2
	TYPID.D = -0.3;
 800c306:	4b1f      	ldr	r3, [pc, #124]	@ (800c384 <PID_Init+0x1dc>)
 800c308:	4a20      	ldr	r2, [pc, #128]	@ (800c38c <PID_Init+0x1e4>)
 800c30a:	615a      	str	r2, [r3, #20]

	TYPID.I_LIMIT = 100.0;
 800c30c:	4b1d      	ldr	r3, [pc, #116]	@ (800c384 <PID_Init+0x1dc>)
 800c30e:	4a14      	ldr	r2, [pc, #80]	@ (800c360 <PID_Init+0x1b8>)
 800c310:	611a      	str	r2, [r3, #16]
	TYPID.OUT_LIMIT = 300.0;
 800c312:	4b1c      	ldr	r3, [pc, #112]	@ (800c384 <PID_Init+0x1dc>)
 800c314:	4a1a      	ldr	r2, [pc, #104]	@ (800c380 <PID_Init+0x1d8>)
 800c316:	621a      	str	r2, [r3, #32]

	TYPID.P_OUT = 0.0;
 800c318:	4b1a      	ldr	r3, [pc, #104]	@ (800c384 <PID_Init+0x1dc>)
 800c31a:	f04f 0200 	mov.w	r2, #0
 800c31e:	605a      	str	r2, [r3, #4]
	TYPID.I_OUT = 0.0;
 800c320:	4b18      	ldr	r3, [pc, #96]	@ (800c384 <PID_Init+0x1dc>)
 800c322:	f04f 0200 	mov.w	r2, #0
 800c326:	60da      	str	r2, [r3, #12]
	TYPID.D_OUT = 0.0;
 800c328:	4b16      	ldr	r3, [pc, #88]	@ (800c384 <PID_Init+0x1dc>)
 800c32a:	f04f 0200 	mov.w	r2, #0
 800c32e:	619a      	str	r2, [r3, #24]

	TYPID.OUT = 0.0;
 800c330:	4b14      	ldr	r3, [pc, #80]	@ (800c384 <PID_Init+0x1dc>)
 800c332:	f04f 0200 	mov.w	r2, #0
 800c336:	61da      	str	r2, [r3, #28]

	TYPID.err = 0.0;
 800c338:	4b12      	ldr	r3, [pc, #72]	@ (800c384 <PID_Init+0x1dc>)
 800c33a:	2200      	movs	r2, #0
 800c33c:	849a      	strh	r2, [r3, #36]	@ 0x24
	TYPID.err_err = 0.0;
 800c33e:	4b11      	ldr	r3, [pc, #68]	@ (800c384 <PID_Init+0x1dc>)
 800c340:	2200      	movs	r2, #0
 800c342:	84da      	strh	r2, [r3, #38]	@ 0x26
	TYPID.err_old = 0.0;
 800c344:	4b0f      	ldr	r3, [pc, #60]	@ (800c384 <PID_Init+0x1dc>)
 800c346:	2200      	movs	r2, #0
 800c348:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800c34a:	bf00      	nop
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr
 800c354:	24000b48 	.word	0x24000b48
 800c358:	41a00000 	.word	0x41a00000
 800c35c:	42700000 	.word	0x42700000
 800c360:	42c80000 	.word	0x42c80000
 800c364:	24000b74 	.word	0x24000b74
 800c368:	24000ba0 	.word	0x24000ba0
 800c36c:	3f666666 	.word	0x3f666666
 800c370:	447a0000 	.word	0x447a0000
 800c374:	4512e000 	.word	0x4512e000
 800c378:	24000bcc 	.word	0x24000bcc
 800c37c:	3e99999a 	.word	0x3e99999a
 800c380:	43960000 	.word	0x43960000
 800c384:	24000bf8 	.word	0x24000bf8
 800c388:	bf800000 	.word	0xbf800000
 800c38c:	be99999a 	.word	0xbe99999a

0800c390 <Tx_X_Ctrl>:
	PID->err_old = PID->err;

	return PID->OUT;
}
/* TX的X轴调整 */
short Tx_X_Ctrl(_PID *PID, float goal) {
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Tx_NOW - goal;
 800c39c:	4b4e      	ldr	r3, [pc, #312]	@ (800c4d8 <Tx_X_Ctrl+0x148>)
 800c39e:	ed93 7a00 	vldr	s14, [r3]
 800c3a2:	edd7 7a00 	vldr	s15, [r7]
 800c3a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3ae:	ee17 3a90 	vmov	r3, s15
 800c3b2:	b21a      	sxth	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	1ad3      	subs	r3, r2, r3
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	b21a      	sxth	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	ed93 7a00 	vldr	s14, [r3]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c3de:	ee07 3a90 	vmov	s15, r3
 800c3e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	ed93 7a03 	vldr	s14, [r3, #12]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	edd3 6a02 	vldr	s13, [r3, #8]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c402:	ee07 3a90 	vmov	s15, r3
 800c406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c40a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c40e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	ed93 7a05 	vldr	s14, [r3, #20]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c424:	ee07 3a90 	vmov	s15, r3
 800c428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c42c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	ed93 7a03 	vldr	s14, [r3, #12]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	edd3 7a04 	vldr	s15, [r3, #16]
 800c442:	eef1 7a67 	vneg.f32	s15, s15
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	edd3 6a04 	vldr	s13, [r3, #16]
 800c44c:	eeb0 1a66 	vmov.f32	s2, s13
 800c450:	eef0 0a67 	vmov.f32	s1, s15
 800c454:	eeb0 0a47 	vmov.f32	s0, s14
 800c458:	f7ff fe7a 	bl	800c150 <limit>
 800c45c:	eef0 7a40 	vmov.f32	s15, s0
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	ed93 7a01 	vldr	s14, [r3, #4]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	edd3 7a03 	vldr	s15, [r3, #12]
 800c472:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	edd3 7a06 	vldr	s15, [r3, #24]
 800c47c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	ed93 7a07 	vldr	s14, [r3, #28]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c492:	eef1 7a67 	vneg.f32	s15, s15
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	edd3 6a08 	vldr	s13, [r3, #32]
 800c49c:	eeb0 1a66 	vmov.f32	s2, s13
 800c4a0:	eef0 0a67 	vmov.f32	s1, s15
 800c4a4:	eeb0 0a47 	vmov.f32	s0, s14
 800c4a8:	f7ff fe52 	bl	800c150 <limit>
 800c4ac:	eef0 7a40 	vmov.f32	s15, s0
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	edd3 7a07 	vldr	s15, [r3, #28]
 800c4c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4ca:	ee17 3a90 	vmov	r3, s15
 800c4ce:	b21b      	sxth	r3, r3
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	24000454 	.word	0x24000454

0800c4dc <Tx_Y_Ctrl>:

/* TX的Y轴调整 */
short Tx_Y_Ctrl(_PID *PID, float goal) {
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Ty_NOW - goal;
 800c4e8:	4b4e      	ldr	r3, [pc, #312]	@ (800c624 <Tx_Y_Ctrl+0x148>)
 800c4ea:	ed93 7a00 	vldr	s14, [r3]
 800c4ee:	edd7 7a00 	vldr	s15, [r7]
 800c4f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4fa:	ee17 3a90 	vmov	r3, s15
 800c4fe:	b21a      	sxth	r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800c512:	b29b      	uxth	r3, r3
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	b29b      	uxth	r3, r3
 800c518:	b21a      	sxth	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	ed93 7a00 	vldr	s14, [r3]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c52a:	ee07 3a90 	vmov	s15, r3
 800c52e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	ed93 7a03 	vldr	s14, [r3, #12]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	edd3 6a02 	vldr	s13, [r3, #8]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c54e:	ee07 3a90 	vmov	s15, r3
 800c552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c55a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	ed93 7a05 	vldr	s14, [r3, #20]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c570:	ee07 3a90 	vmov	s15, r3
 800c574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	ed93 7a03 	vldr	s14, [r3, #12]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	edd3 7a04 	vldr	s15, [r3, #16]
 800c58e:	eef1 7a67 	vneg.f32	s15, s15
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	edd3 6a04 	vldr	s13, [r3, #16]
 800c598:	eeb0 1a66 	vmov.f32	s2, s13
 800c59c:	eef0 0a67 	vmov.f32	s1, s15
 800c5a0:	eeb0 0a47 	vmov.f32	s0, s14
 800c5a4:	f7ff fdd4 	bl	800c150 <limit>
 800c5a8:	eef0 7a40 	vmov.f32	s15, s0
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	ed93 7a01 	vldr	s14, [r3, #4]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	edd3 7a03 	vldr	s15, [r3, #12]
 800c5be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	edd3 7a06 	vldr	s15, [r3, #24]
 800c5c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	ed93 7a07 	vldr	s14, [r3, #28]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	edd3 7a08 	vldr	s15, [r3, #32]
 800c5de:	eef1 7a67 	vneg.f32	s15, s15
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	edd3 6a08 	vldr	s13, [r3, #32]
 800c5e8:	eeb0 1a66 	vmov.f32	s2, s13
 800c5ec:	eef0 0a67 	vmov.f32	s1, s15
 800c5f0:	eeb0 0a47 	vmov.f32	s0, s14
 800c5f4:	f7ff fdac 	bl	800c150 <limit>
 800c5f8:	eef0 7a40 	vmov.f32	s15, s0
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c616:	ee17 3a90 	vmov	r3, s15
 800c61a:	b21b      	sxth	r3, r3
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	24000458 	.word	0x24000458

0800c628 <GetRxFlag>:



int time5_jiancha = 0;

uint8_t GetRxFlag(void) {
 800c628:	b480      	push	{r7}
 800c62a:	af00      	add	r7, sp, #0
	if (RxFlag == 1) {
 800c62c:	4b07      	ldr	r3, [pc, #28]	@ (800c64c <GetRxFlag+0x24>)
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d104      	bne.n	800c63e <GetRxFlag+0x16>
		RxFlag = 0;
 800c634:	4b05      	ldr	r3, [pc, #20]	@ (800c64c <GetRxFlag+0x24>)
 800c636:	2200      	movs	r2, #0
 800c638:	701a      	strb	r2, [r3, #0]
		return 1;
 800c63a:	2301      	movs	r3, #1
 800c63c:	e000      	b.n	800c640 <GetRxFlag+0x18>
	}
	return 0;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	2400029d 	.word	0x2400029d

0800c650 <Move_Line>:
//		;
////	RxFlag = 0;·
//	HAL_Delay(30);
//}

bool Move_Line(u16 speed, u8 acc, u32 length) {
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af04      	add	r7, sp, #16
 800c656:	4603      	mov	r3, r0
 800c658:	603a      	str	r2, [r7, #0]
 800c65a:	80fb      	strh	r3, [r7, #6]
 800c65c:	460b      	mov	r3, r1
 800c65e:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if(Choke_Flag == true)
 800c660:	4b26      	ldr	r3, [pc, #152]	@ (800c6fc <Move_Line+0xac>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d001      	beq.n	800c66c <Move_Line+0x1c>
		return  false;
 800c668:	2300      	movs	r3, #0
 800c66a:	e042      	b.n	800c6f2 <Move_Line+0xa2>
	else
		Choke_Flag = true;
 800c66c:	4b23      	ldr	r3, [pc, #140]	@ (800c6fc <Move_Line+0xac>)
 800c66e:	2201      	movs	r2, #1
 800c670:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c672:	4b23      	ldr	r3, [pc, #140]	@ (800c700 <Move_Line+0xb0>)
 800c674:	2201      	movs	r2, #1
 800c676:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c678:	7979      	ldrb	r1, [r7, #5]
 800c67a:	88fa      	ldrh	r2, [r7, #6]
 800c67c:	2301      	movs	r3, #1
 800c67e:	9302      	str	r3, [sp, #8]
 800c680:	2300      	movs	r3, #0
 800c682:	9301      	str	r3, [sp, #4]
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	460b      	mov	r3, r1
 800c68a:	2100      	movs	r1, #0
 800c68c:	2001      	movs	r0, #1
 800c68e:	f7ff fccf 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c692:	7979      	ldrb	r1, [r7, #5]
 800c694:	88fa      	ldrh	r2, [r7, #6]
 800c696:	2301      	movs	r3, #1
 800c698:	9302      	str	r3, [sp, #8]
 800c69a:	2300      	movs	r3, #0
 800c69c:	9301      	str	r3, [sp, #4]
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	2002      	movs	r0, #2
 800c6a8:	f7ff fcc2 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c6ac:	7979      	ldrb	r1, [r7, #5]
 800c6ae:	88fa      	ldrh	r2, [r7, #6]
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	9302      	str	r3, [sp, #8]
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	9301      	str	r3, [sp, #4]
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	2100      	movs	r1, #0
 800c6c0:	2003      	movs	r0, #3
 800c6c2:	f7ff fcb5 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c6c6:	7979      	ldrb	r1, [r7, #5]
 800c6c8:	88fa      	ldrh	r2, [r7, #6]
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	9302      	str	r3, [sp, #8]
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	9301      	str	r3, [sp, #4]
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	2100      	movs	r1, #0
 800c6da:	2004      	movs	r0, #4
 800c6dc:	f7ff fca8 	bl	800c030 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c6e0:	f7ff fd1c 	bl	800c11c <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c6e4:	4807      	ldr	r0, [pc, #28]	@ (800c704 <Move_Line+0xb4>)
 800c6e6:	f7fb fb95 	bl	8007e14 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c6ea:	4b07      	ldr	r3, [pc, #28]	@ (800c708 <Move_Line+0xb8>)
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	701a      	strb	r2, [r3, #0]
	return true;
 800c6f0:	2301      	movs	r3, #1
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	24000c2c 	.word	0x24000c2c
 800c700:	24000c2d 	.word	0x24000c2d
 800c704:	24000574 	.word	0x24000574
 800c708:	24000c2e 	.word	0x24000c2e

0800c70c <Move_Left>:
bool Move_Left(u16 speed, u8 acc, u32 length) {
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b086      	sub	sp, #24
 800c710:	af04      	add	r7, sp, #16
 800c712:	4603      	mov	r3, r0
 800c714:	603a      	str	r2, [r7, #0]
 800c716:	80fb      	strh	r3, [r7, #6]
 800c718:	460b      	mov	r3, r1
 800c71a:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if(Choke_Flag == true)
 800c71c:	4b26      	ldr	r3, [pc, #152]	@ (800c7b8 <Move_Left+0xac>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <Move_Left+0x1c>
		return  false;
 800c724:	2300      	movs	r3, #0
 800c726:	e042      	b.n	800c7ae <Move_Left+0xa2>
	else
		Choke_Flag = true;
 800c728:	4b23      	ldr	r3, [pc, #140]	@ (800c7b8 <Move_Left+0xac>)
 800c72a:	2201      	movs	r2, #1
 800c72c:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c72e:	4b23      	ldr	r3, [pc, #140]	@ (800c7bc <Move_Left+0xb0>)
 800c730:	2201      	movs	r2, #1
 800c732:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c734:	7979      	ldrb	r1, [r7, #5]
 800c736:	88fa      	ldrh	r2, [r7, #6]
 800c738:	2301      	movs	r3, #1
 800c73a:	9302      	str	r3, [sp, #8]
 800c73c:	2300      	movs	r3, #0
 800c73e:	9301      	str	r3, [sp, #4]
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	9300      	str	r3, [sp, #0]
 800c744:	460b      	mov	r3, r1
 800c746:	2101      	movs	r1, #1
 800c748:	2001      	movs	r0, #1
 800c74a:	f7ff fc71 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c74e:	7979      	ldrb	r1, [r7, #5]
 800c750:	88fa      	ldrh	r2, [r7, #6]
 800c752:	2301      	movs	r3, #1
 800c754:	9302      	str	r3, [sp, #8]
 800c756:	2300      	movs	r3, #0
 800c758:	9301      	str	r3, [sp, #4]
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	9300      	str	r3, [sp, #0]
 800c75e:	460b      	mov	r3, r1
 800c760:	2100      	movs	r1, #0
 800c762:	2002      	movs	r0, #2
 800c764:	f7ff fc64 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c768:	7979      	ldrb	r1, [r7, #5]
 800c76a:	88fa      	ldrh	r2, [r7, #6]
 800c76c:	2301      	movs	r3, #1
 800c76e:	9302      	str	r3, [sp, #8]
 800c770:	2300      	movs	r3, #0
 800c772:	9301      	str	r3, [sp, #4]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	9300      	str	r3, [sp, #0]
 800c778:	460b      	mov	r3, r1
 800c77a:	2101      	movs	r1, #1
 800c77c:	2003      	movs	r0, #3
 800c77e:	f7ff fc57 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c782:	7979      	ldrb	r1, [r7, #5]
 800c784:	88fa      	ldrh	r2, [r7, #6]
 800c786:	2301      	movs	r3, #1
 800c788:	9302      	str	r3, [sp, #8]
 800c78a:	2300      	movs	r3, #0
 800c78c:	9301      	str	r3, [sp, #4]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	460b      	mov	r3, r1
 800c794:	2100      	movs	r1, #0
 800c796:	2004      	movs	r0, #4
 800c798:	f7ff fc4a 	bl	800c030 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c79c:	f7ff fcbe 	bl	800c11c <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c7a0:	4807      	ldr	r0, [pc, #28]	@ (800c7c0 <Move_Left+0xb4>)
 800c7a2:	f7fb fb37 	bl	8007e14 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c7a6:	4b07      	ldr	r3, [pc, #28]	@ (800c7c4 <Move_Left+0xb8>)
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	701a      	strb	r2, [r3, #0]
	return true;
 800c7ac:	2301      	movs	r3, #1
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	24000c2c 	.word	0x24000c2c
 800c7bc:	24000c2d 	.word	0x24000c2d
 800c7c0:	24000574 	.word	0x24000574
 800c7c4:	24000c2e 	.word	0x24000c2e

0800c7c8 <Move_Back>:
// 		;
// //	RxFlag = 0;
// 	HAL_Delay(30);
// }

void Move_Back(u16 speed, u8 acc, u32 length) {
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b088      	sub	sp, #32
 800c7cc:	af04      	add	r7, sp, #16
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	603a      	str	r2, [r7, #0]
 800c7d2:	80fb      	strh	r3, [r7, #6]
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c7d8:	88fb      	ldrh	r3, [r7, #6]
 800c7da:	683a      	ldr	r2, [r7, #0]
 800c7dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	4413      	add	r3, r2
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c7ea:	7979      	ldrb	r1, [r7, #5]
 800c7ec:	88fa      	ldrh	r2, [r7, #6]
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	9302      	str	r3, [sp, #8]
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	9301      	str	r3, [sp, #4]
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	2101      	movs	r1, #1
 800c7fe:	2001      	movs	r0, #1
 800c800:	f7ff fc16 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c804:	7979      	ldrb	r1, [r7, #5]
 800c806:	88fa      	ldrh	r2, [r7, #6]
 800c808:	2301      	movs	r3, #1
 800c80a:	9302      	str	r3, [sp, #8]
 800c80c:	2300      	movs	r3, #0
 800c80e:	9301      	str	r3, [sp, #4]
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	460b      	mov	r3, r1
 800c816:	2101      	movs	r1, #1
 800c818:	2002      	movs	r0, #2
 800c81a:	f7ff fc09 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c81e:	7979      	ldrb	r1, [r7, #5]
 800c820:	88fa      	ldrh	r2, [r7, #6]
 800c822:	2301      	movs	r3, #1
 800c824:	9302      	str	r3, [sp, #8]
 800c826:	2300      	movs	r3, #0
 800c828:	9301      	str	r3, [sp, #4]
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	9300      	str	r3, [sp, #0]
 800c82e:	460b      	mov	r3, r1
 800c830:	2101      	movs	r1, #1
 800c832:	2003      	movs	r0, #3
 800c834:	f7ff fbfc 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c838:	7979      	ldrb	r1, [r7, #5]
 800c83a:	88fa      	ldrh	r2, [r7, #6]
 800c83c:	2301      	movs	r3, #1
 800c83e:	9302      	str	r3, [sp, #8]
 800c840:	2300      	movs	r3, #0
 800c842:	9301      	str	r3, [sp, #4]
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	460b      	mov	r3, r1
 800c84a:	2101      	movs	r1, #1
 800c84c:	2004      	movs	r0, #4
 800c84e:	f7ff fbef 	bl	800c030 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800c852:	f7ff fc63 	bl	800c11c <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800c856:	4b0f      	ldr	r3, [pc, #60]	@ (800c894 <Move_Back+0xcc>)
 800c858:	2201      	movs	r2, #1
 800c85a:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c862:	4a0d      	ldr	r2, [pc, #52]	@ (800c898 <Move_Back+0xd0>)
 800c864:	fb82 1203 	smull	r1, r2, r2, r3
 800c868:	1092      	asrs	r2, r2, #2
 800c86a:	17db      	asrs	r3, r3, #31
 800c86c:	1ad3      	subs	r3, r2, r3
 800c86e:	4a0b      	ldr	r2, [pc, #44]	@ (800c89c <Move_Back+0xd4>)
 800c870:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c872:	bf00      	nop
 800c874:	f7ff fed8 	bl	800c628 <GetRxFlag>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d103      	bne.n	800c886 <Move_Back+0xbe>
 800c87e:	4b07      	ldr	r3, [pc, #28]	@ (800c89c <Move_Back+0xd4>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1f6      	bne.n	800c874 <Move_Back+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c886:	201e      	movs	r0, #30
 800c888:	f7f6 fa68 	bl	8002d5c <HAL_Delay>
}
 800c88c:	bf00      	nop
 800c88e:	3710      	adds	r7, #16
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	2400029c 	.word	0x2400029c
 800c898:	66666667 	.word	0x66666667
 800c89c:	24000c30 	.word	0x24000c30

0800c8a0 <Move_Right>:

void Move_Right(u16 speed, u8 acc, u32 length) {
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b088      	sub	sp, #32
 800c8a4:	af04      	add	r7, sp, #16
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	603a      	str	r2, [r7, #0]
 800c8aa:	80fb      	strh	r3, [r7, #6]
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c8b0:	88fb      	ldrh	r3, [r7, #6]
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	4413      	add	r3, r2
 800c8be:	009b      	lsls	r3, r3, #2
 800c8c0:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c8c2:	7979      	ldrb	r1, [r7, #5]
 800c8c4:	88fa      	ldrh	r2, [r7, #6]
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	9302      	str	r3, [sp, #8]
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	9301      	str	r3, [sp, #4]
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	2001      	movs	r0, #1
 800c8d8:	f7ff fbaa 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c8dc:	7979      	ldrb	r1, [r7, #5]
 800c8de:	88fa      	ldrh	r2, [r7, #6]
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	9302      	str	r3, [sp, #8]
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	9301      	str	r3, [sp, #4]
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	9300      	str	r3, [sp, #0]
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	2101      	movs	r1, #1
 800c8f0:	2002      	movs	r0, #2
 800c8f2:	f7ff fb9d 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c8f6:	7979      	ldrb	r1, [r7, #5]
 800c8f8:	88fa      	ldrh	r2, [r7, #6]
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	9302      	str	r3, [sp, #8]
 800c8fe:	2300      	movs	r3, #0
 800c900:	9301      	str	r3, [sp, #4]
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	9300      	str	r3, [sp, #0]
 800c906:	460b      	mov	r3, r1
 800c908:	2100      	movs	r1, #0
 800c90a:	2003      	movs	r0, #3
 800c90c:	f7ff fb90 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c910:	7979      	ldrb	r1, [r7, #5]
 800c912:	88fa      	ldrh	r2, [r7, #6]
 800c914:	2301      	movs	r3, #1
 800c916:	9302      	str	r3, [sp, #8]
 800c918:	2300      	movs	r3, #0
 800c91a:	9301      	str	r3, [sp, #4]
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	460b      	mov	r3, r1
 800c922:	2101      	movs	r1, #1
 800c924:	2004      	movs	r0, #4
 800c926:	f7ff fb83 	bl	800c030 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion();
 800c92a:	f7ff fbf7 	bl	800c11c <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800c92e:	4b0f      	ldr	r3, [pc, #60]	@ (800c96c <Move_Right+0xcc>)
 800c930:	2201      	movs	r2, #1
 800c932:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c93a:	4a0d      	ldr	r2, [pc, #52]	@ (800c970 <Move_Right+0xd0>)
 800c93c:	fb82 1203 	smull	r1, r2, r2, r3
 800c940:	1092      	asrs	r2, r2, #2
 800c942:	17db      	asrs	r3, r3, #31
 800c944:	1ad3      	subs	r3, r2, r3
 800c946:	4a0b      	ldr	r2, [pc, #44]	@ (800c974 <Move_Right+0xd4>)
 800c948:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c94a:	bf00      	nop
 800c94c:	f7ff fe6c 	bl	800c628 <GetRxFlag>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d103      	bne.n	800c95e <Move_Right+0xbe>
 800c956:	4b07      	ldr	r3, [pc, #28]	@ (800c974 <Move_Right+0xd4>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1f6      	bne.n	800c94c <Move_Right+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c95e:	201e      	movs	r0, #30
 800c960:	f7f6 f9fc 	bl	8002d5c <HAL_Delay>
}
 800c964:	bf00      	nop
 800c966:	3710      	adds	r7, #16
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	2400029c 	.word	0x2400029c
 800c970:	66666667 	.word	0x66666667
 800c974:	24000c30 	.word	0x24000c30

0800c978 <Move_zhengxuzhuan>:
void Move_zhengxuzhuan(u16 speed, u8 acc, u32 length) {
 800c978:	b580      	push	{r7, lr}
 800c97a:	b088      	sub	sp, #32
 800c97c:	af04      	add	r7, sp, #16
 800c97e:	4603      	mov	r3, r0
 800c980:	603a      	str	r2, [r7, #0]
 800c982:	80fb      	strh	r3, [r7, #6]
 800c984:	460b      	mov	r3, r1
 800c986:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c988:	88fb      	ldrh	r3, [r7, #6]
 800c98a:	683a      	ldr	r2, [r7, #0]
 800c98c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c990:	4613      	mov	r3, r2
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4413      	add	r3, r2
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c99a:	7979      	ldrb	r1, [r7, #5]
 800c99c:	88fa      	ldrh	r2, [r7, #6]
 800c99e:	2301      	movs	r3, #1
 800c9a0:	9302      	str	r3, [sp, #8]
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	9301      	str	r3, [sp, #4]
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	9300      	str	r3, [sp, #0]
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	2001      	movs	r0, #1
 800c9b0:	f7ff fb3e 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c9b4:	7979      	ldrb	r1, [r7, #5]
 800c9b6:	88fa      	ldrh	r2, [r7, #6]
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	9302      	str	r3, [sp, #8]
 800c9bc:	2300      	movs	r3, #0
 800c9be:	9301      	str	r3, [sp, #4]
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	2101      	movs	r1, #1
 800c9c8:	2002      	movs	r0, #2
 800c9ca:	f7ff fb31 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c9ce:	7979      	ldrb	r1, [r7, #5]
 800c9d0:	88fa      	ldrh	r2, [r7, #6]
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	9302      	str	r3, [sp, #8]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	9301      	str	r3, [sp, #4]
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	460b      	mov	r3, r1
 800c9e0:	2101      	movs	r1, #1
 800c9e2:	2003      	movs	r0, #3
 800c9e4:	f7ff fb24 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c9e8:	7979      	ldrb	r1, [r7, #5]
 800c9ea:	88fa      	ldrh	r2, [r7, #6]
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	9302      	str	r3, [sp, #8]
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	9301      	str	r3, [sp, #4]
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	2100      	movs	r1, #0
 800c9fc:	2004      	movs	r0, #4
 800c9fe:	f7ff fb17 	bl	800c030 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800ca02:	f7ff fb8b 	bl	800c11c <Emm_V5_Synchronous_motion>

	Emm_mode = 1;
 800ca06:	4b0f      	ldr	r3, [pc, #60]	@ (800ca44 <Move_zhengxuzhuan+0xcc>)
 800ca08:	2201      	movs	r2, #1
 800ca0a:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800ca12:	4a0d      	ldr	r2, [pc, #52]	@ (800ca48 <Move_zhengxuzhuan+0xd0>)
 800ca14:	fb82 1203 	smull	r1, r2, r2, r3
 800ca18:	1092      	asrs	r2, r2, #2
 800ca1a:	17db      	asrs	r3, r3, #31
 800ca1c:	1ad3      	subs	r3, r2, r3
 800ca1e:	4a0b      	ldr	r2, [pc, #44]	@ (800ca4c <Move_zhengxuzhuan+0xd4>)
 800ca20:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800ca22:	bf00      	nop
 800ca24:	f7ff fe00 	bl	800c628 <GetRxFlag>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d103      	bne.n	800ca36 <Move_zhengxuzhuan+0xbe>
 800ca2e:	4b07      	ldr	r3, [pc, #28]	@ (800ca4c <Move_zhengxuzhuan+0xd4>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1f6      	bne.n	800ca24 <Move_zhengxuzhuan+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800ca36:	201e      	movs	r0, #30
 800ca38:	f7f6 f990 	bl	8002d5c <HAL_Delay>
}
 800ca3c:	bf00      	nop
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	2400029c 	.word	0x2400029c
 800ca48:	66666667 	.word	0x66666667
 800ca4c:	24000c30 	.word	0x24000c30

0800ca50 <Move_fanxuzhuan>:

void Move_fanxuzhuan(u16 speed, u8 acc, u32 length) //4340是90度
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b088      	sub	sp, #32
 800ca54:	af04      	add	r7, sp, #16
 800ca56:	4603      	mov	r3, r0
 800ca58:	603a      	str	r2, [r7, #0]
 800ca5a:	80fb      	strh	r3, [r7, #6]
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800ca60:	88fb      	ldrh	r3, [r7, #6]
 800ca62:	683a      	ldr	r2, [r7, #0]
 800ca64:	fbb2 f2f3 	udiv	r2, r2, r3
 800ca68:	4613      	mov	r3, r2
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	4413      	add	r3, r2
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	60fb      	str	r3, [r7, #12]

	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800ca72:	7979      	ldrb	r1, [r7, #5]
 800ca74:	88fa      	ldrh	r2, [r7, #6]
 800ca76:	2301      	movs	r3, #1
 800ca78:	9302      	str	r3, [sp, #8]
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	9301      	str	r3, [sp, #4]
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	460b      	mov	r3, r1
 800ca84:	2101      	movs	r1, #1
 800ca86:	2001      	movs	r0, #1
 800ca88:	f7ff fad2 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800ca8c:	7979      	ldrb	r1, [r7, #5]
 800ca8e:	88fa      	ldrh	r2, [r7, #6]
 800ca90:	2301      	movs	r3, #1
 800ca92:	9302      	str	r3, [sp, #8]
 800ca94:	2300      	movs	r3, #0
 800ca96:	9301      	str	r3, [sp, #4]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	2100      	movs	r1, #0
 800caa0:	2002      	movs	r0, #2
 800caa2:	f7ff fac5 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800caa6:	7979      	ldrb	r1, [r7, #5]
 800caa8:	88fa      	ldrh	r2, [r7, #6]
 800caaa:	2301      	movs	r3, #1
 800caac:	9302      	str	r3, [sp, #8]
 800caae:	2300      	movs	r3, #0
 800cab0:	9301      	str	r3, [sp, #4]
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	9300      	str	r3, [sp, #0]
 800cab6:	460b      	mov	r3, r1
 800cab8:	2100      	movs	r1, #0
 800caba:	2003      	movs	r0, #3
 800cabc:	f7ff fab8 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800cac0:	7979      	ldrb	r1, [r7, #5]
 800cac2:	88fa      	ldrh	r2, [r7, #6]
 800cac4:	2301      	movs	r3, #1
 800cac6:	9302      	str	r3, [sp, #8]
 800cac8:	2300      	movs	r3, #0
 800caca:	9301      	str	r3, [sp, #4]
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	460b      	mov	r3, r1
 800cad2:	2101      	movs	r1, #1
 800cad4:	2004      	movs	r0, #4
 800cad6:	f7ff faab 	bl	800c030 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800cada:	f7ff fb1f 	bl	800c11c <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800cade:	4b0f      	ldr	r3, [pc, #60]	@ (800cb1c <Move_fanxuzhuan+0xcc>)
 800cae0:	2201      	movs	r2, #1
 800cae2:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800caea:	4a0d      	ldr	r2, [pc, #52]	@ (800cb20 <Move_fanxuzhuan+0xd0>)
 800caec:	fb82 1203 	smull	r1, r2, r2, r3
 800caf0:	1092      	asrs	r2, r2, #2
 800caf2:	17db      	asrs	r3, r3, #31
 800caf4:	1ad3      	subs	r3, r2, r3
 800caf6:	4a0b      	ldr	r2, [pc, #44]	@ (800cb24 <Move_fanxuzhuan+0xd4>)
 800caf8:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800cafa:	bf00      	nop
 800cafc:	f7ff fd94 	bl	800c628 <GetRxFlag>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d103      	bne.n	800cb0e <Move_fanxuzhuan+0xbe>
 800cb06:	4b07      	ldr	r3, [pc, #28]	@ (800cb24 <Move_fanxuzhuan+0xd4>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d1f6      	bne.n	800cafc <Move_fanxuzhuan+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800cb0e:	201e      	movs	r0, #30
 800cb10:	f7f6 f924 	bl	8002d5c <HAL_Delay>
}
 800cb14:	bf00      	nop
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	2400029c 	.word	0x2400029c
 800cb20:	66666667 	.word	0x66666667
 800cb24:	24000c30 	.word	0x24000c30

0800cb28 <Drop_Location_jiang>:
////	RxFlag = 0;
//	if(High_Length>=14000)
//		Emm_V5_Stop_Now(5,0);
//	HAL_Delay(30);
//}
void Drop_Location_jiang(u16 speed, u8 acc, u32 length) {
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b088      	sub	sp, #32
 800cb2c:	af04      	add	r7, sp, #16
 800cb2e:	4603      	mov	r3, r0
 800cb30:	603a      	str	r2, [r7, #0]
 800cb32:	80fb      	strh	r3, [r7, #6]
 800cb34:	460b      	mov	r3, r1
 800cb36:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800cb38:	88fb      	ldrh	r3, [r7, #6]
 800cb3a:	683a      	ldr	r2, [r7, #0]
 800cb3c:	fbb2 f2f3 	udiv	r2, r2, r3
 800cb40:	4613      	mov	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(5, 1, speed, acc, length, 1, 0);
 800cb4a:	7979      	ldrb	r1, [r7, #5]
 800cb4c:	88fa      	ldrh	r2, [r7, #6]
 800cb4e:	2300      	movs	r3, #0
 800cb50:	9302      	str	r3, [sp, #8]
 800cb52:	2301      	movs	r3, #1
 800cb54:	9301      	str	r3, [sp, #4]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	2101      	movs	r1, #1
 800cb5e:	2005      	movs	r0, #5
 800cb60:	f7ff fa66 	bl	800c030 <Emm_V5_Pos_Control>
//	检查到位回读
	Emm_mode = 1;
 800cb64:	4b0f      	ldr	r3, [pc, #60]	@ (800cba4 <Drop_Location_jiang+0x7c>)
 800cb66:	2201      	movs	r2, #1
 800cb68:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800cb70:	4a0d      	ldr	r2, [pc, #52]	@ (800cba8 <Drop_Location_jiang+0x80>)
 800cb72:	fb82 1203 	smull	r1, r2, r2, r3
 800cb76:	1092      	asrs	r2, r2, #2
 800cb78:	17db      	asrs	r3, r3, #31
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	4a0b      	ldr	r2, [pc, #44]	@ (800cbac <Drop_Location_jiang+0x84>)
 800cb7e:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800cb80:	bf00      	nop
 800cb82:	f7ff fd51 	bl	800c628 <GetRxFlag>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d103      	bne.n	800cb94 <Drop_Location_jiang+0x6c>
 800cb8c:	4b07      	ldr	r3, [pc, #28]	@ (800cbac <Drop_Location_jiang+0x84>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d1f6      	bne.n	800cb82 <Drop_Location_jiang+0x5a>
		;
	HAL_Delay(30);
 800cb94:	201e      	movs	r0, #30
 800cb96:	f7f6 f8e1 	bl	8002d5c <HAL_Delay>
}
 800cb9a:	bf00      	nop
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	2400029c 	.word	0x2400029c
 800cba8:	66666667 	.word	0x66666667
 800cbac:	24000c30 	.word	0x24000c30

0800cbb0 <Drop_Location_Sheng>:
void Drop_Location_Sheng(u16 speed, u8 acc, u32 length) {
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b088      	sub	sp, #32
 800cbb4:	af04      	add	r7, sp, #16
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	603a      	str	r2, [r7, #0]
 800cbba:	80fb      	strh	r3, [r7, #6]
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800cbc0:	88fb      	ldrh	r3, [r7, #6]
 800cbc2:	683a      	ldr	r2, [r7, #0]
 800cbc4:	fbb2 f2f3 	udiv	r2, r2, r3
 800cbc8:	4613      	mov	r3, r2
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	4413      	add	r3, r2
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(5, 1, speed, acc, length, 1, 0);
 800cbd2:	7979      	ldrb	r1, [r7, #5]
 800cbd4:	88fa      	ldrh	r2, [r7, #6]
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	9302      	str	r3, [sp, #8]
 800cbda:	2301      	movs	r3, #1
 800cbdc:	9301      	str	r3, [sp, #4]
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	9300      	str	r3, [sp, #0]
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	2101      	movs	r1, #1
 800cbe6:	2005      	movs	r0, #5
 800cbe8:	f7ff fa22 	bl	800c030 <Emm_V5_Pos_Control>
	Emm_mode = 1;
 800cbec:	4b0f      	ldr	r3, [pc, #60]	@ (800cc2c <Drop_Location_Sheng+0x7c>)
 800cbee:	2201      	movs	r2, #1
 800cbf0:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800cbf8:	4a0d      	ldr	r2, [pc, #52]	@ (800cc30 <Drop_Location_Sheng+0x80>)
 800cbfa:	fb82 1203 	smull	r1, r2, r2, r3
 800cbfe:	1092      	asrs	r2, r2, #2
 800cc00:	17db      	asrs	r3, r3, #31
 800cc02:	1ad3      	subs	r3, r2, r3
 800cc04:	4a0b      	ldr	r2, [pc, #44]	@ (800cc34 <Drop_Location_Sheng+0x84>)
 800cc06:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800cc08:	bf00      	nop
 800cc0a:	f7ff fd0d 	bl	800c628 <GetRxFlag>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d103      	bne.n	800cc1c <Drop_Location_Sheng+0x6c>
 800cc14:	4b07      	ldr	r3, [pc, #28]	@ (800cc34 <Drop_Location_Sheng+0x84>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1f6      	bne.n	800cc0a <Drop_Location_Sheng+0x5a>
		;

	HAL_Delay(30);
 800cc1c:	201e      	movs	r0, #30
 800cc1e:	f7f6 f89d 	bl	8002d5c <HAL_Delay>
}
 800cc22:	bf00      	nop
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	2400029c 	.word	0x2400029c
 800cc30:	66666667 	.word	0x66666667
 800cc34:	24000c30 	.word	0x24000c30

0800cc38 <Move_Stop>:
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动

}

void Move_Stop(void)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	af00      	add	r7, sp, #0
	Emm_V5_Stop_Now(1,true);
 800cc3c:	2101      	movs	r1, #1
 800cc3e:	2001      	movs	r0, #1
 800cc40:	f7ff fa4a 	bl	800c0d8 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(2,true);
 800cc44:	2101      	movs	r1, #1
 800cc46:	2002      	movs	r0, #2
 800cc48:	f7ff fa46 	bl	800c0d8 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(3,true);
 800cc4c:	2101      	movs	r1, #1
 800cc4e:	2003      	movs	r0, #3
 800cc50:	f7ff fa42 	bl	800c0d8 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(4,true);
 800cc54:	2101      	movs	r1, #1
 800cc56:	2004      	movs	r0, #4
 800cc58:	f7ff fa3e 	bl	800c0d8 <Emm_V5_Stop_Now>
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动
 800cc5c:	f7ff fa5e 	bl	800c11c <Emm_V5_Synchronous_motion>
}
 800cc60:	bf00      	nop
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <Move_TO_jianzhi1>:
	Move_Line(RunSpeed, RunAcc, Lineclk);
	HAL_Delay(yanshi);
}

void Move_TO_jianzhi1(float Backclk, float fanzhuanclk) //粗加工区
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	ed87 0a01 	vstr	s0, [r7, #4]
 800cc6e:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cc72:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc7a:	ee17 2a90 	vmov	r2, s15
 800cc7e:	2178      	movs	r1, #120	@ 0x78
 800cc80:	2064      	movs	r0, #100	@ 0x64
 800cc82:	f7ff fda1 	bl	800c7c8 <Move_Back>
	HAL_Delay(yanshi);
 800cc86:	2032      	movs	r0, #50	@ 0x32
 800cc88:	f7f6 f868 	bl	8002d5c <HAL_Delay>
	Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800cc8c:	edd7 7a00 	vldr	s15, [r7]
 800cc90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc94:	ee17 2a90 	vmov	r2, s15
 800cc98:	2178      	movs	r1, #120	@ 0x78
 800cc9a:	2064      	movs	r0, #100	@ 0x64
 800cc9c:	f7ff fed8 	bl	800ca50 <Move_fanxuzhuan>
	HAL_Delay(yanshi);
 800cca0:	2032      	movs	r0, #50	@ 0x32
 800cca2:	f7f6 f85b 	bl	8002d5c <HAL_Delay>
}
 800cca6:	bf00      	nop
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <Move_TO_zancunqu>:

void Move_TO_zancunqu(float Lineclk, float fanzhuanclk) //暂存区
{
 800ccae:	b580      	push	{r7, lr}
 800ccb0:	b082      	sub	sp, #8
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	ed87 0a01 	vstr	s0, [r7, #4]
 800ccb8:	edc7 0a00 	vstr	s1, [r7]
	Move_Line(RunSpeed, RunAcc, Lineclk);
 800ccbc:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccc4:	ee17 2a90 	vmov	r2, s15
 800ccc8:	2178      	movs	r1, #120	@ 0x78
 800ccca:	2064      	movs	r0, #100	@ 0x64
 800cccc:	f7ff fcc0 	bl	800c650 <Move_Line>
	HAL_Delay(yanshi);
 800ccd0:	2032      	movs	r0, #50	@ 0x32
 800ccd2:	f7f6 f843 	bl	8002d5c <HAL_Delay>
	Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800ccd6:	edd7 7a00 	vldr	s15, [r7]
 800ccda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccde:	ee17 2a90 	vmov	r2, s15
 800cce2:	2178      	movs	r1, #120	@ 0x78
 800cce4:	2064      	movs	r0, #100	@ 0x64
 800cce6:	f7ff feb3 	bl	800ca50 <Move_fanxuzhuan>
	HAL_Delay(yanshi);
 800ccea:	2032      	movs	r0, #50	@ 0x32
 800ccec:	f7f6 f836 	bl	8002d5c <HAL_Delay>
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <Move_TO_jianzhi2>:
void Move_TO_jianzhi2(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	ed87 0a01 	vstr	s0, [r7, #4]
 800cd02:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cd06:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd0e:	ee17 2a90 	vmov	r2, s15
 800cd12:	2178      	movs	r1, #120	@ 0x78
 800cd14:	2064      	movs	r0, #100	@ 0x64
 800cd16:	f7ff fd57 	bl	800c7c8 <Move_Back>
	HAL_Delay(yanshi);
 800cd1a:	2032      	movs	r0, #50	@ 0x32
 800cd1c:	f7f6 f81e 	bl	8002d5c <HAL_Delay>
	Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800cd20:	edd7 7a00 	vldr	s15, [r7]
 800cd24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd28:	ee17 2a90 	vmov	r2, s15
 800cd2c:	2178      	movs	r1, #120	@ 0x78
 800cd2e:	2064      	movs	r0, #100	@ 0x64
 800cd30:	f7ff fe22 	bl	800c978 <Move_zhengxuzhuan>
	HAL_Delay(yanshi);
 800cd34:	2032      	movs	r0, #50	@ 0x32
 800cd36:	f7f6 f811 	bl	8002d5c <HAL_Delay>
}
 800cd3a:	bf00      	nop
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <Move_TO_cujiagongqu>:
void Move_TO_cujiagongqu(float Backclk) //粗加工区
{
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b082      	sub	sp, #8
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	ed87 0a01 	vstr	s0, [r7, #4]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cd4c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd54:	ee17 2a90 	vmov	r2, s15
 800cd58:	2178      	movs	r1, #120	@ 0x78
 800cd5a:	2064      	movs	r0, #100	@ 0x64
 800cd5c:	f7ff fd34 	bl	800c7c8 <Move_Back>
	HAL_Delay(yanshi);
 800cd60:	2032      	movs	r0, #50	@ 0x32
 800cd62:	f7f5 fffb 	bl	8002d5c <HAL_Delay>
}
 800cd66:	bf00      	nop
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <Move_TO_jianzhi3>:
void Move_TO_jianzhi3(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b082      	sub	sp, #8
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	ed87 0a01 	vstr	s0, [r7, #4]
 800cd78:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cd7c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd84:	ee17 2a90 	vmov	r2, s15
 800cd88:	2178      	movs	r1, #120	@ 0x78
 800cd8a:	2064      	movs	r0, #100	@ 0x64
 800cd8c:	f7ff fd1c 	bl	800c7c8 <Move_Back>
	HAL_Delay(yanshi);
 800cd90:	2032      	movs	r0, #50	@ 0x32
 800cd92:	f7f5 ffe3 	bl	8002d5c <HAL_Delay>
	Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800cd96:	edd7 7a00 	vldr	s15, [r7]
 800cd9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd9e:	ee17 2a90 	vmov	r2, s15
 800cda2:	2178      	movs	r1, #120	@ 0x78
 800cda4:	2064      	movs	r0, #100	@ 0x64
 800cda6:	f7ff fde7 	bl	800c978 <Move_zhengxuzhuan>
	HAL_Delay(yanshi);
 800cdaa:	2032      	movs	r0, #50	@ 0x32
 800cdac:	f7f5 ffd6 	bl	8002d5c <HAL_Delay>
}
 800cdb0:	bf00      	nop
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <Move_TO_fanyuanliaoqu>:
void Move_TO_fanyuanliaoqu(float Lineclk) //物料区
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	ed87 0a01 	vstr	s0, [r7, #4]
	Move_Back(RunSpeed, RunAcc, Lineclk);
 800cdc2:	edd7 7a01 	vldr	s15, [r7, #4]
 800cdc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdca:	ee17 2a90 	vmov	r2, s15
 800cdce:	2178      	movs	r1, #120	@ 0x78
 800cdd0:	2064      	movs	r0, #100	@ 0x64
 800cdd2:	f7ff fcf9 	bl	800c7c8 <Move_Back>
	HAL_Delay(20000);
 800cdd6:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800cdda:	f7f5 ffbf 	bl	8002d5c <HAL_Delay>
}
 800cdde:	bf00      	nop
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
	...

0800cde8 <Move_Action_Nopid_Left_Ctrl>:
	} else {
		Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
		HAL_Delay(yanshi);
	}
}
void Move_Action_Nopid_Left_Ctrl(float x_goal, float y_goal) {
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	ed87 0a01 	vstr	s0, [r7, #4]
 800cdf2:	edc7 0a00 	vstr	s1, [r7]
	while (1) {
		if ((X_NOW - x_goal) < 0) {
 800cdf6:	4baa      	ldr	r3, [pc, #680]	@ (800d0a0 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cdf8:	ed93 7a00 	vldr	s14, [r3]
 800cdfc:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce00:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce0c:	d52e      	bpl.n	800ce6c <Move_Action_Nopid_Left_Ctrl+0x84>
			Move_Left(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800ce0e:	4ba4      	ldr	r3, [pc, #656]	@ (800d0a0 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce10:	ed93 7a00 	vldr	s14, [r3]
 800ce14:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce24:	dd07      	ble.n	800ce36 <Move_Action_Nopid_Left_Ctrl+0x4e>
 800ce26:	4b9e      	ldr	r3, [pc, #632]	@ (800d0a0 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce28:	ed93 7a00 	vldr	s14, [r3]
 800ce2c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce34:	e008      	b.n	800ce48 <Move_Action_Nopid_Left_Ctrl+0x60>
 800ce36:	4b9a      	ldr	r3, [pc, #616]	@ (800d0a0 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce38:	ed93 7a00 	vldr	s14, [r3]
 800ce3c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce44:	eef1 7a67 	vneg.f32	s15, s15
 800ce48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ce4c:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800d098 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800ce50:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ce58:	ee17 2a90 	vmov	r2, s15
 800ce5c:	2164      	movs	r1, #100	@ 0x64
 800ce5e:	2064      	movs	r0, #100	@ 0x64
 800ce60:	f7ff fc54 	bl	800c70c <Move_Left>
			HAL_Delay(yanshi);
 800ce64:	2032      	movs	r0, #50	@ 0x32
 800ce66:	f7f5 ff79 	bl	8002d5c <HAL_Delay>
 800ce6a:	e02d      	b.n	800cec8 <Move_Action_Nopid_Left_Ctrl+0xe0>
		} else {
			Move_Right(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800ce6c:	4b8c      	ldr	r3, [pc, #560]	@ (800d0a0 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce6e:	ed93 7a00 	vldr	s14, [r3]
 800ce72:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce82:	dd07      	ble.n	800ce94 <Move_Action_Nopid_Left_Ctrl+0xac>
 800ce84:	4b86      	ldr	r3, [pc, #536]	@ (800d0a0 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce86:	ed93 7a00 	vldr	s14, [r3]
 800ce8a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce92:	e008      	b.n	800cea6 <Move_Action_Nopid_Left_Ctrl+0xbe>
 800ce94:	4b82      	ldr	r3, [pc, #520]	@ (800d0a0 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800ce96:	ed93 7a00 	vldr	s14, [r3]
 800ce9a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cea2:	eef1 7a67 	vneg.f32	s15, s15
 800cea6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ceaa:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800d098 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800ceae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ceb2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ceb6:	ee17 2a90 	vmov	r2, s15
 800ceba:	2164      	movs	r1, #100	@ 0x64
 800cebc:	2064      	movs	r0, #100	@ 0x64
 800cebe:	f7ff fcef 	bl	800c8a0 <Move_Right>
			HAL_Delay(yanshi);
 800cec2:	2032      	movs	r0, #50	@ 0x32
 800cec4:	f7f5 ff4a 	bl	8002d5c <HAL_Delay>
		}
		if (Y_NOW - y_goal < 0) {
 800cec8:	4b76      	ldr	r3, [pc, #472]	@ (800d0a4 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ceca:	edd3 7a00 	vldr	s15, [r3]
 800cece:	eeb1 7a67 	vneg.f32	s14, s15
 800ced2:	edd7 7a00 	vldr	s15, [r7]
 800ced6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cee2:	d534      	bpl.n	800cf4e <Move_Action_Nopid_Left_Ctrl+0x166>
			Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800cee4:	4b6f      	ldr	r3, [pc, #444]	@ (800d0a4 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cee6:	edd3 7a00 	vldr	s15, [r3]
 800ceea:	eeb1 7a67 	vneg.f32	s14, s15
 800ceee:	edd7 7a00 	vldr	s15, [r7]
 800cef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cef6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cefe:	dd09      	ble.n	800cf14 <Move_Action_Nopid_Left_Ctrl+0x12c>
 800cf00:	4b68      	ldr	r3, [pc, #416]	@ (800d0a4 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cf02:	edd3 7a00 	vldr	s15, [r3]
 800cf06:	eeb1 7a67 	vneg.f32	s14, s15
 800cf0a:	edd7 7a00 	vldr	s15, [r7]
 800cf0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf12:	e00a      	b.n	800cf2a <Move_Action_Nopid_Left_Ctrl+0x142>
 800cf14:	4b63      	ldr	r3, [pc, #396]	@ (800d0a4 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cf16:	edd3 7a00 	vldr	s15, [r3]
 800cf1a:	eeb1 7a67 	vneg.f32	s14, s15
 800cf1e:	edd7 7a00 	vldr	s15, [r7]
 800cf22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf26:	eef1 7a67 	vneg.f32	s15, s15
 800cf2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cf2e:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800d098 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800cf32:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf36:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cf3a:	ee17 2a90 	vmov	r2, s15
 800cf3e:	2164      	movs	r1, #100	@ 0x64
 800cf40:	2064      	movs	r0, #100	@ 0x64
 800cf42:	f7ff fb85 	bl	800c650 <Move_Line>
			HAL_Delay(yanshi);
 800cf46:	2032      	movs	r0, #50	@ 0x32
 800cf48:	f7f5 ff08 	bl	8002d5c <HAL_Delay>
 800cf4c:	e033      	b.n	800cfb6 <Move_Action_Nopid_Left_Ctrl+0x1ce>
		} else {
			Move_Back(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800cf4e:	4b55      	ldr	r3, [pc, #340]	@ (800d0a4 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cf50:	edd3 7a00 	vldr	s15, [r3]
 800cf54:	eeb1 7a67 	vneg.f32	s14, s15
 800cf58:	edd7 7a00 	vldr	s15, [r7]
 800cf5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf68:	dd09      	ble.n	800cf7e <Move_Action_Nopid_Left_Ctrl+0x196>
 800cf6a:	4b4e      	ldr	r3, [pc, #312]	@ (800d0a4 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cf6c:	edd3 7a00 	vldr	s15, [r3]
 800cf70:	eeb1 7a67 	vneg.f32	s14, s15
 800cf74:	edd7 7a00 	vldr	s15, [r7]
 800cf78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf7c:	e00a      	b.n	800cf94 <Move_Action_Nopid_Left_Ctrl+0x1ac>
 800cf7e:	4b49      	ldr	r3, [pc, #292]	@ (800d0a4 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cf80:	edd3 7a00 	vldr	s15, [r3]
 800cf84:	eeb1 7a67 	vneg.f32	s14, s15
 800cf88:	edd7 7a00 	vldr	s15, [r7]
 800cf8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf90:	eef1 7a67 	vneg.f32	s15, s15
 800cf94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cf98:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800d098 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800cf9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cfa0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cfa4:	ee17 2a90 	vmov	r2, s15
 800cfa8:	2164      	movs	r1, #100	@ 0x64
 800cfaa:	2064      	movs	r0, #100	@ 0x64
 800cfac:	f7ff fc0c 	bl	800c7c8 <Move_Back>
			HAL_Delay(yanshi);
 800cfb0:	2032      	movs	r0, #50	@ 0x32
 800cfb2:	f7f5 fed3 	bl	8002d5c <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 2 && ABS(Y_NOW - y_goal) < 2) {
 800cfb6:	4b3a      	ldr	r3, [pc, #232]	@ (800d0a0 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cfb8:	ed93 7a00 	vldr	s14, [r3]
 800cfbc:	edd7 7a01 	vldr	s15, [r7, #4]
 800cfc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cfc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfcc:	dd11      	ble.n	800cff2 <Move_Action_Nopid_Left_Ctrl+0x20a>
 800cfce:	4b34      	ldr	r3, [pc, #208]	@ (800d0a0 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cfd0:	ed93 7a00 	vldr	s14, [r3]
 800cfd4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cfd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfdc:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800cfe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cfe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe8:	bf4c      	ite	mi
 800cfea:	2301      	movmi	r3, #1
 800cfec:	2300      	movpl	r3, #0
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	e010      	b.n	800d014 <Move_Action_Nopid_Left_Ctrl+0x22c>
 800cff2:	4b2b      	ldr	r3, [pc, #172]	@ (800d0a0 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cff4:	ed93 7a00 	vldr	s14, [r3]
 800cff8:	edd7 7a01 	vldr	s15, [r7, #4]
 800cffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d000:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800d004:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d00c:	bfcc      	ite	gt
 800d00e:	2301      	movgt	r3, #1
 800d010:	2300      	movle	r3, #0
 800d012:	b2db      	uxtb	r3, r3
 800d014:	2b00      	cmp	r3, #0
 800d016:	f43f aeee 	beq.w	800cdf6 <Move_Action_Nopid_Left_Ctrl+0xe>
 800d01a:	4b22      	ldr	r3, [pc, #136]	@ (800d0a4 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800d01c:	edd3 7a00 	vldr	s15, [r3]
 800d020:	eeb1 7a67 	vneg.f32	s14, s15
 800d024:	edd7 7a00 	vldr	s15, [r7]
 800d028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d02c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d034:	dd13      	ble.n	800d05e <Move_Action_Nopid_Left_Ctrl+0x276>
 800d036:	4b1b      	ldr	r3, [pc, #108]	@ (800d0a4 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800d038:	edd3 7a00 	vldr	s15, [r3]
 800d03c:	eeb1 7a67 	vneg.f32	s14, s15
 800d040:	edd7 7a00 	vldr	s15, [r7]
 800d044:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d048:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800d04c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d054:	bf4c      	ite	mi
 800d056:	2301      	movmi	r3, #1
 800d058:	2300      	movpl	r3, #0
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	e012      	b.n	800d084 <Move_Action_Nopid_Left_Ctrl+0x29c>
 800d05e:	4b11      	ldr	r3, [pc, #68]	@ (800d0a4 <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800d060:	edd3 7a00 	vldr	s15, [r3]
 800d064:	eeb1 7a67 	vneg.f32	s14, s15
 800d068:	edd7 7a00 	vldr	s15, [r7]
 800d06c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d070:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800d074:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d07c:	bfcc      	ite	gt
 800d07e:	2301      	movgt	r3, #1
 800d080:	2300      	movle	r3, #0
 800d082:	b2db      	uxtb	r3, r3
 800d084:	2b00      	cmp	r3, #0
 800d086:	d100      	bne.n	800d08a <Move_Action_Nopid_Left_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800d088:	e6b5      	b.n	800cdf6 <Move_Action_Nopid_Left_Ctrl+0xe>
			break; /* 到达目标 */
 800d08a:	bf00      	nop
		}
	}
}
 800d08c:	bf00      	nop
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	f3af 8000 	nop.w
 800d098:	9999999a 	.word	0x9999999a
 800d09c:	402b9999 	.word	0x402b9999
 800d0a0:	24000af8 	.word	0x24000af8
 800d0a4:	24000afc 	.word	0x24000afc

0800d0a8 <Move_Action_Nopid_Forward_Ctrl>:
void Move_Action_Nopid_Forward_Ctrl(float x_goal, float y_goal) {
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	ed87 0a01 	vstr	s0, [r7, #4]
 800d0b2:	edc7 0a00 	vstr	s1, [r7]
	//ACTION调整
	while (1) {

		if ((X_NOW - x_goal) < 0) {
 800d0b6:	4baa      	ldr	r3, [pc, #680]	@ (800d360 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d0b8:	ed93 7a00 	vldr	s14, [r3]
 800d0bc:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0cc:	d52e      	bpl.n	800d12c <Move_Action_Nopid_Forward_Ctrl+0x84>
			Move_Line(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d0ce:	4ba4      	ldr	r3, [pc, #656]	@ (800d360 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d0d0:	ed93 7a00 	vldr	s14, [r3]
 800d0d4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e4:	dd07      	ble.n	800d0f6 <Move_Action_Nopid_Forward_Ctrl+0x4e>
 800d0e6:	4b9e      	ldr	r3, [pc, #632]	@ (800d360 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d0e8:	ed93 7a00 	vldr	s14, [r3]
 800d0ec:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0f4:	e008      	b.n	800d108 <Move_Action_Nopid_Forward_Ctrl+0x60>
 800d0f6:	4b9a      	ldr	r3, [pc, #616]	@ (800d360 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d0f8:	ed93 7a00 	vldr	s14, [r3]
 800d0fc:	edd7 7a01 	vldr	s15, [r7, #4]
 800d100:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d104:	eef1 7a67 	vneg.f32	s15, s15
 800d108:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d10c:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800d358 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d110:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d114:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d118:	ee17 2a90 	vmov	r2, s15
 800d11c:	2164      	movs	r1, #100	@ 0x64
 800d11e:	2064      	movs	r0, #100	@ 0x64
 800d120:	f7ff fa96 	bl	800c650 <Move_Line>
			HAL_Delay(yanshi);
 800d124:	2032      	movs	r0, #50	@ 0x32
 800d126:	f7f5 fe19 	bl	8002d5c <HAL_Delay>
 800d12a:	e02d      	b.n	800d188 <Move_Action_Nopid_Forward_Ctrl+0xe0>
		} else {
			Move_Back(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d12c:	4b8c      	ldr	r3, [pc, #560]	@ (800d360 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d12e:	ed93 7a00 	vldr	s14, [r3]
 800d132:	edd7 7a01 	vldr	s15, [r7, #4]
 800d136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d13a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d142:	dd07      	ble.n	800d154 <Move_Action_Nopid_Forward_Ctrl+0xac>
 800d144:	4b86      	ldr	r3, [pc, #536]	@ (800d360 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d146:	ed93 7a00 	vldr	s14, [r3]
 800d14a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d14e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d152:	e008      	b.n	800d166 <Move_Action_Nopid_Forward_Ctrl+0xbe>
 800d154:	4b82      	ldr	r3, [pc, #520]	@ (800d360 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d156:	ed93 7a00 	vldr	s14, [r3]
 800d15a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d15e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d162:	eef1 7a67 	vneg.f32	s15, s15
 800d166:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d16a:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800d358 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d16e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d172:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d176:	ee17 2a90 	vmov	r2, s15
 800d17a:	2164      	movs	r1, #100	@ 0x64
 800d17c:	2064      	movs	r0, #100	@ 0x64
 800d17e:	f7ff fb23 	bl	800c7c8 <Move_Back>
			HAL_Delay(yanshi);
 800d182:	2032      	movs	r0, #50	@ 0x32
 800d184:	f7f5 fdea 	bl	8002d5c <HAL_Delay>
		}
		if ((Y_NOW - y_goal) < 0) {
 800d188:	4b76      	ldr	r3, [pc, #472]	@ (800d364 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d18a:	edd3 7a00 	vldr	s15, [r3]
 800d18e:	eeb1 7a67 	vneg.f32	s14, s15
 800d192:	edd7 7a00 	vldr	s15, [r7]
 800d196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d19a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a2:	d534      	bpl.n	800d20e <Move_Action_Nopid_Forward_Ctrl+0x166>
			Move_Right(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d1a4:	4b6f      	ldr	r3, [pc, #444]	@ (800d364 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d1a6:	edd3 7a00 	vldr	s15, [r3]
 800d1aa:	eeb1 7a67 	vneg.f32	s14, s15
 800d1ae:	edd7 7a00 	vldr	s15, [r7]
 800d1b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1be:	dd09      	ble.n	800d1d4 <Move_Action_Nopid_Forward_Ctrl+0x12c>
 800d1c0:	4b68      	ldr	r3, [pc, #416]	@ (800d364 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d1c2:	edd3 7a00 	vldr	s15, [r3]
 800d1c6:	eeb1 7a67 	vneg.f32	s14, s15
 800d1ca:	edd7 7a00 	vldr	s15, [r7]
 800d1ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1d2:	e00a      	b.n	800d1ea <Move_Action_Nopid_Forward_Ctrl+0x142>
 800d1d4:	4b63      	ldr	r3, [pc, #396]	@ (800d364 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d1d6:	edd3 7a00 	vldr	s15, [r3]
 800d1da:	eeb1 7a67 	vneg.f32	s14, s15
 800d1de:	edd7 7a00 	vldr	s15, [r7]
 800d1e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1e6:	eef1 7a67 	vneg.f32	s15, s15
 800d1ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d1ee:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800d358 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d1f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d1f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d1fa:	ee17 2a90 	vmov	r2, s15
 800d1fe:	2164      	movs	r1, #100	@ 0x64
 800d200:	2064      	movs	r0, #100	@ 0x64
 800d202:	f7ff fb4d 	bl	800c8a0 <Move_Right>
			HAL_Delay(yanshi);
 800d206:	2032      	movs	r0, #50	@ 0x32
 800d208:	f7f5 fda8 	bl	8002d5c <HAL_Delay>
 800d20c:	e033      	b.n	800d276 <Move_Action_Nopid_Forward_Ctrl+0x1ce>
		} else {
			Move_Left(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d20e:	4b55      	ldr	r3, [pc, #340]	@ (800d364 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d210:	edd3 7a00 	vldr	s15, [r3]
 800d214:	eeb1 7a67 	vneg.f32	s14, s15
 800d218:	edd7 7a00 	vldr	s15, [r7]
 800d21c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d220:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d228:	dd09      	ble.n	800d23e <Move_Action_Nopid_Forward_Ctrl+0x196>
 800d22a:	4b4e      	ldr	r3, [pc, #312]	@ (800d364 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d22c:	edd3 7a00 	vldr	s15, [r3]
 800d230:	eeb1 7a67 	vneg.f32	s14, s15
 800d234:	edd7 7a00 	vldr	s15, [r7]
 800d238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d23c:	e00a      	b.n	800d254 <Move_Action_Nopid_Forward_Ctrl+0x1ac>
 800d23e:	4b49      	ldr	r3, [pc, #292]	@ (800d364 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d240:	edd3 7a00 	vldr	s15, [r3]
 800d244:	eeb1 7a67 	vneg.f32	s14, s15
 800d248:	edd7 7a00 	vldr	s15, [r7]
 800d24c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d250:	eef1 7a67 	vneg.f32	s15, s15
 800d254:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d258:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800d358 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d25c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d260:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d264:	ee17 2a90 	vmov	r2, s15
 800d268:	2164      	movs	r1, #100	@ 0x64
 800d26a:	2064      	movs	r0, #100	@ 0x64
 800d26c:	f7ff fa4e 	bl	800c70c <Move_Left>
			HAL_Delay(yanshi);
 800d270:	2032      	movs	r0, #50	@ 0x32
 800d272:	f7f5 fd73 	bl	8002d5c <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 5 && ABS(Y_NOW - y_goal) < 5) {
 800d276:	4b3a      	ldr	r3, [pc, #232]	@ (800d360 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d278:	ed93 7a00 	vldr	s14, [r3]
 800d27c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d280:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d284:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d28c:	dd11      	ble.n	800d2b2 <Move_Action_Nopid_Forward_Ctrl+0x20a>
 800d28e:	4b34      	ldr	r3, [pc, #208]	@ (800d360 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d290:	ed93 7a00 	vldr	s14, [r3]
 800d294:	edd7 7a01 	vldr	s15, [r7, #4]
 800d298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d29c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d2a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2a8:	bf4c      	ite	mi
 800d2aa:	2301      	movmi	r3, #1
 800d2ac:	2300      	movpl	r3, #0
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	e010      	b.n	800d2d4 <Move_Action_Nopid_Forward_Ctrl+0x22c>
 800d2b2:	4b2b      	ldr	r3, [pc, #172]	@ (800d360 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d2b4:	ed93 7a00 	vldr	s14, [r3]
 800d2b8:	edd7 7a01 	vldr	s15, [r7, #4]
 800d2bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2c0:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d2c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2cc:	bfcc      	ite	gt
 800d2ce:	2301      	movgt	r3, #1
 800d2d0:	2300      	movle	r3, #0
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	f43f aeee 	beq.w	800d0b6 <Move_Action_Nopid_Forward_Ctrl+0xe>
 800d2da:	4b22      	ldr	r3, [pc, #136]	@ (800d364 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d2dc:	edd3 7a00 	vldr	s15, [r3]
 800d2e0:	eeb1 7a67 	vneg.f32	s14, s15
 800d2e4:	edd7 7a00 	vldr	s15, [r7]
 800d2e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2f4:	dd13      	ble.n	800d31e <Move_Action_Nopid_Forward_Ctrl+0x276>
 800d2f6:	4b1b      	ldr	r3, [pc, #108]	@ (800d364 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d2f8:	edd3 7a00 	vldr	s15, [r3]
 800d2fc:	eeb1 7a67 	vneg.f32	s14, s15
 800d300:	edd7 7a00 	vldr	s15, [r7]
 800d304:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d308:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d30c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d314:	bf4c      	ite	mi
 800d316:	2301      	movmi	r3, #1
 800d318:	2300      	movpl	r3, #0
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	e012      	b.n	800d344 <Move_Action_Nopid_Forward_Ctrl+0x29c>
 800d31e:	4b11      	ldr	r3, [pc, #68]	@ (800d364 <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d320:	edd3 7a00 	vldr	s15, [r3]
 800d324:	eeb1 7a67 	vneg.f32	s14, s15
 800d328:	edd7 7a00 	vldr	s15, [r7]
 800d32c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d330:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d334:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d33c:	bfcc      	ite	gt
 800d33e:	2301      	movgt	r3, #1
 800d340:	2300      	movle	r3, #0
 800d342:	b2db      	uxtb	r3, r3
 800d344:	2b00      	cmp	r3, #0
 800d346:	d100      	bne.n	800d34a <Move_Action_Nopid_Forward_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800d348:	e6b5      	b.n	800d0b6 <Move_Action_Nopid_Forward_Ctrl+0xe>
			break; /* 到达目标 */
 800d34a:	bf00      	nop
		}
	}
}
 800d34c:	bf00      	nop
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	f3af 8000 	nop.w
 800d358:	9999999a 	.word	0x9999999a
 800d35c:	402b9999 	.word	0x402b9999
 800d360:	24000af8 	.word	0x24000af8
 800d364:	24000afc 	.word	0x24000afc

0800d368 <Move_Action_Nopid_Right_Ctrl>:

void Move_Action_Nopid_Right_Ctrl(float x_goal, float y_goal) {
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	ed87 0a01 	vstr	s0, [r7, #4]
 800d372:	edc7 0a00 	vstr	s1, [r7]
	while (1) {
		if ((X_NOW - x_goal) < 0) {
 800d376:	4baa      	ldr	r3, [pc, #680]	@ (800d620 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d378:	ed93 7a00 	vldr	s14, [r3]
 800d37c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d380:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d384:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d38c:	d52e      	bpl.n	800d3ec <Move_Action_Nopid_Right_Ctrl+0x84>

			Move_Right(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d38e:	4ba4      	ldr	r3, [pc, #656]	@ (800d620 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d390:	ed93 7a00 	vldr	s14, [r3]
 800d394:	edd7 7a01 	vldr	s15, [r7, #4]
 800d398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d39c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3a4:	dd07      	ble.n	800d3b6 <Move_Action_Nopid_Right_Ctrl+0x4e>
 800d3a6:	4b9e      	ldr	r3, [pc, #632]	@ (800d620 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d3a8:	ed93 7a00 	vldr	s14, [r3]
 800d3ac:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3b4:	e008      	b.n	800d3c8 <Move_Action_Nopid_Right_Ctrl+0x60>
 800d3b6:	4b9a      	ldr	r3, [pc, #616]	@ (800d620 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d3b8:	ed93 7a00 	vldr	s14, [r3]
 800d3bc:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3c4:	eef1 7a67 	vneg.f32	s15, s15
 800d3c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d3cc:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800d618 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d3d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d3d8:	ee17 2a90 	vmov	r2, s15
 800d3dc:	2164      	movs	r1, #100	@ 0x64
 800d3de:	2064      	movs	r0, #100	@ 0x64
 800d3e0:	f7ff fa5e 	bl	800c8a0 <Move_Right>
			HAL_Delay(yanshi);
 800d3e4:	2032      	movs	r0, #50	@ 0x32
 800d3e6:	f7f5 fcb9 	bl	8002d5c <HAL_Delay>
 800d3ea:	e02d      	b.n	800d448 <Move_Action_Nopid_Right_Ctrl+0xe0>
		} else {
			Move_Left(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d3ec:	4b8c      	ldr	r3, [pc, #560]	@ (800d620 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d3ee:	ed93 7a00 	vldr	s14, [r3]
 800d3f2:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d402:	dd07      	ble.n	800d414 <Move_Action_Nopid_Right_Ctrl+0xac>
 800d404:	4b86      	ldr	r3, [pc, #536]	@ (800d620 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d406:	ed93 7a00 	vldr	s14, [r3]
 800d40a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d40e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d412:	e008      	b.n	800d426 <Move_Action_Nopid_Right_Ctrl+0xbe>
 800d414:	4b82      	ldr	r3, [pc, #520]	@ (800d620 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d416:	ed93 7a00 	vldr	s14, [r3]
 800d41a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d41e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d422:	eef1 7a67 	vneg.f32	s15, s15
 800d426:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d42a:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800d618 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d42e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d432:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d436:	ee17 2a90 	vmov	r2, s15
 800d43a:	2164      	movs	r1, #100	@ 0x64
 800d43c:	2064      	movs	r0, #100	@ 0x64
 800d43e:	f7ff f965 	bl	800c70c <Move_Left>
			HAL_Delay(yanshi);
 800d442:	2032      	movs	r0, #50	@ 0x32
 800d444:	f7f5 fc8a 	bl	8002d5c <HAL_Delay>
		}
		if ((Y_NOW - y_goal) < 0) {
 800d448:	4b76      	ldr	r3, [pc, #472]	@ (800d624 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d44a:	edd3 7a00 	vldr	s15, [r3]
 800d44e:	eeb1 7a67 	vneg.f32	s14, s15
 800d452:	edd7 7a00 	vldr	s15, [r7]
 800d456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d45a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d462:	d534      	bpl.n	800d4ce <Move_Action_Nopid_Right_Ctrl+0x166>
			Move_Back(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d464:	4b6f      	ldr	r3, [pc, #444]	@ (800d624 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d466:	edd3 7a00 	vldr	s15, [r3]
 800d46a:	eeb1 7a67 	vneg.f32	s14, s15
 800d46e:	edd7 7a00 	vldr	s15, [r7]
 800d472:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d47e:	dd09      	ble.n	800d494 <Move_Action_Nopid_Right_Ctrl+0x12c>
 800d480:	4b68      	ldr	r3, [pc, #416]	@ (800d624 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d482:	edd3 7a00 	vldr	s15, [r3]
 800d486:	eeb1 7a67 	vneg.f32	s14, s15
 800d48a:	edd7 7a00 	vldr	s15, [r7]
 800d48e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d492:	e00a      	b.n	800d4aa <Move_Action_Nopid_Right_Ctrl+0x142>
 800d494:	4b63      	ldr	r3, [pc, #396]	@ (800d624 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d496:	edd3 7a00 	vldr	s15, [r3]
 800d49a:	eeb1 7a67 	vneg.f32	s14, s15
 800d49e:	edd7 7a00 	vldr	s15, [r7]
 800d4a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4a6:	eef1 7a67 	vneg.f32	s15, s15
 800d4aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d4ae:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800d618 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d4b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d4b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d4ba:	ee17 2a90 	vmov	r2, s15
 800d4be:	2164      	movs	r1, #100	@ 0x64
 800d4c0:	2064      	movs	r0, #100	@ 0x64
 800d4c2:	f7ff f981 	bl	800c7c8 <Move_Back>
			HAL_Delay(yanshi);
 800d4c6:	2032      	movs	r0, #50	@ 0x32
 800d4c8:	f7f5 fc48 	bl	8002d5c <HAL_Delay>
 800d4cc:	e033      	b.n	800d536 <Move_Action_Nopid_Right_Ctrl+0x1ce>
		} else {
			Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d4ce:	4b55      	ldr	r3, [pc, #340]	@ (800d624 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d4d0:	edd3 7a00 	vldr	s15, [r3]
 800d4d4:	eeb1 7a67 	vneg.f32	s14, s15
 800d4d8:	edd7 7a00 	vldr	s15, [r7]
 800d4dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e8:	dd09      	ble.n	800d4fe <Move_Action_Nopid_Right_Ctrl+0x196>
 800d4ea:	4b4e      	ldr	r3, [pc, #312]	@ (800d624 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d4ec:	edd3 7a00 	vldr	s15, [r3]
 800d4f0:	eeb1 7a67 	vneg.f32	s14, s15
 800d4f4:	edd7 7a00 	vldr	s15, [r7]
 800d4f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4fc:	e00a      	b.n	800d514 <Move_Action_Nopid_Right_Ctrl+0x1ac>
 800d4fe:	4b49      	ldr	r3, [pc, #292]	@ (800d624 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d500:	edd3 7a00 	vldr	s15, [r3]
 800d504:	eeb1 7a67 	vneg.f32	s14, s15
 800d508:	edd7 7a00 	vldr	s15, [r7]
 800d50c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d510:	eef1 7a67 	vneg.f32	s15, s15
 800d514:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d518:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800d618 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d51c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d520:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d524:	ee17 2a90 	vmov	r2, s15
 800d528:	2164      	movs	r1, #100	@ 0x64
 800d52a:	2064      	movs	r0, #100	@ 0x64
 800d52c:	f7ff f890 	bl	800c650 <Move_Line>
			HAL_Delay(yanshi);
 800d530:	2032      	movs	r0, #50	@ 0x32
 800d532:	f7f5 fc13 	bl	8002d5c <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 5 && ABS(Y_NOW - y_goal) < 5) {
 800d536:	4b3a      	ldr	r3, [pc, #232]	@ (800d620 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d538:	ed93 7a00 	vldr	s14, [r3]
 800d53c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d540:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d544:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d54c:	dd11      	ble.n	800d572 <Move_Action_Nopid_Right_Ctrl+0x20a>
 800d54e:	4b34      	ldr	r3, [pc, #208]	@ (800d620 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d550:	ed93 7a00 	vldr	s14, [r3]
 800d554:	edd7 7a01 	vldr	s15, [r7, #4]
 800d558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d55c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d560:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d568:	bf4c      	ite	mi
 800d56a:	2301      	movmi	r3, #1
 800d56c:	2300      	movpl	r3, #0
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	e010      	b.n	800d594 <Move_Action_Nopid_Right_Ctrl+0x22c>
 800d572:	4b2b      	ldr	r3, [pc, #172]	@ (800d620 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d574:	ed93 7a00 	vldr	s14, [r3]
 800d578:	edd7 7a01 	vldr	s15, [r7, #4]
 800d57c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d580:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d584:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d58c:	bfcc      	ite	gt
 800d58e:	2301      	movgt	r3, #1
 800d590:	2300      	movle	r3, #0
 800d592:	b2db      	uxtb	r3, r3
 800d594:	2b00      	cmp	r3, #0
 800d596:	f43f aeee 	beq.w	800d376 <Move_Action_Nopid_Right_Ctrl+0xe>
 800d59a:	4b22      	ldr	r3, [pc, #136]	@ (800d624 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d59c:	edd3 7a00 	vldr	s15, [r3]
 800d5a0:	eeb1 7a67 	vneg.f32	s14, s15
 800d5a4:	edd7 7a00 	vldr	s15, [r7]
 800d5a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b4:	dd13      	ble.n	800d5de <Move_Action_Nopid_Right_Ctrl+0x276>
 800d5b6:	4b1b      	ldr	r3, [pc, #108]	@ (800d624 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d5b8:	edd3 7a00 	vldr	s15, [r3]
 800d5bc:	eeb1 7a67 	vneg.f32	s14, s15
 800d5c0:	edd7 7a00 	vldr	s15, [r7]
 800d5c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5c8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d5cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d4:	bf4c      	ite	mi
 800d5d6:	2301      	movmi	r3, #1
 800d5d8:	2300      	movpl	r3, #0
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	e012      	b.n	800d604 <Move_Action_Nopid_Right_Ctrl+0x29c>
 800d5de:	4b11      	ldr	r3, [pc, #68]	@ (800d624 <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d5e0:	edd3 7a00 	vldr	s15, [r3]
 800d5e4:	eeb1 7a67 	vneg.f32	s14, s15
 800d5e8:	edd7 7a00 	vldr	s15, [r7]
 800d5ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5f0:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d5f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5fc:	bfcc      	ite	gt
 800d5fe:	2301      	movgt	r3, #1
 800d600:	2300      	movle	r3, #0
 800d602:	b2db      	uxtb	r3, r3
 800d604:	2b00      	cmp	r3, #0
 800d606:	d100      	bne.n	800d60a <Move_Action_Nopid_Right_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800d608:	e6b5      	b.n	800d376 <Move_Action_Nopid_Right_Ctrl+0xe>
			break; /* 到达目标 */
 800d60a:	bf00      	nop
		}
	}
}
 800d60c:	bf00      	nop
 800d60e:	3708      	adds	r7, #8
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	f3af 8000 	nop.w
 800d618:	9999999a 	.word	0x9999999a
 800d61c:	402b9999 	.word	0x402b9999
 800d620:	24000af8 	.word	0x24000af8
 800d624:	24000afc 	.word	0x24000afc

0800d628 <Move_Tx_Pid_Ctrl>:

/* Tx姿态调整 */
uint16_t time_tx=0;
void Move_Tx_Pid_Ctrl(float TX_X_Goal,float TX_Y_Goal) {
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	ed87 0a01 	vstr	s0, [r7, #4]
 800d632:	edc7 0a00 	vstr	s1, [r7]

	while (1) {
	if (TX_Y_out >= 0) {
 800d636:	4b72      	ldr	r3, [pc, #456]	@ (800d800 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d638:	edd3 7a00 	vldr	s15, [r3]
 800d63c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d644:	db12      	blt.n	800d66c <Move_Tx_Pid_Ctrl+0x44>
			Move_Right(80, 80, TX_Y_out * 5);
 800d646:	4b6e      	ldr	r3, [pc, #440]	@ (800d800 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d648:	edd3 7a00 	vldr	s15, [r3]
 800d64c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d650:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d658:	ee17 2a90 	vmov	r2, s15
 800d65c:	2150      	movs	r1, #80	@ 0x50
 800d65e:	2050      	movs	r0, #80	@ 0x50
 800d660:	f7ff f91e 	bl	800c8a0 <Move_Right>
			HAL_Delay(5);
 800d664:	2005      	movs	r0, #5
 800d666:	f7f5 fb79 	bl	8002d5c <HAL_Delay>
 800d66a:	e013      	b.n	800d694 <Move_Tx_Pid_Ctrl+0x6c>
		} else {
			Move_Left(80, 80, -TX_Y_out * 5);
 800d66c:	4b64      	ldr	r3, [pc, #400]	@ (800d800 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d66e:	edd3 7a00 	vldr	s15, [r3]
 800d672:	eef1 7a67 	vneg.f32	s15, s15
 800d676:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d67a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d67e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d682:	ee17 2a90 	vmov	r2, s15
 800d686:	2150      	movs	r1, #80	@ 0x50
 800d688:	2050      	movs	r0, #80	@ 0x50
 800d68a:	f7ff f83f 	bl	800c70c <Move_Left>
			HAL_Delay(5);
 800d68e:	2005      	movs	r0, #5
 800d690:	f7f5 fb64 	bl	8002d5c <HAL_Delay>
		}

		if (TX_X_out >= 0) {
 800d694:	4b5b      	ldr	r3, [pc, #364]	@ (800d804 <Move_Tx_Pid_Ctrl+0x1dc>)
 800d696:	edd3 7a00 	vldr	s15, [r3]
 800d69a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a2:	db12      	blt.n	800d6ca <Move_Tx_Pid_Ctrl+0xa2>
			Move_Back(80, 80, TX_X_out * 5);
 800d6a4:	4b57      	ldr	r3, [pc, #348]	@ (800d804 <Move_Tx_Pid_Ctrl+0x1dc>)
 800d6a6:	edd3 7a00 	vldr	s15, [r3]
 800d6aa:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d6ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6b6:	ee17 2a90 	vmov	r2, s15
 800d6ba:	2150      	movs	r1, #80	@ 0x50
 800d6bc:	2050      	movs	r0, #80	@ 0x50
 800d6be:	f7ff f883 	bl	800c7c8 <Move_Back>
			HAL_Delay(5);
 800d6c2:	2005      	movs	r0, #5
 800d6c4:	f7f5 fb4a 	bl	8002d5c <HAL_Delay>
 800d6c8:	e013      	b.n	800d6f2 <Move_Tx_Pid_Ctrl+0xca>
		} else {
			Move_Line(80, 80, -TX_X_out * 5);
 800d6ca:	4b4e      	ldr	r3, [pc, #312]	@ (800d804 <Move_Tx_Pid_Ctrl+0x1dc>)
 800d6cc:	edd3 7a00 	vldr	s15, [r3]
 800d6d0:	eef1 7a67 	vneg.f32	s15, s15
 800d6d4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d6d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6e0:	ee17 2a90 	vmov	r2, s15
 800d6e4:	2150      	movs	r1, #80	@ 0x50
 800d6e6:	2050      	movs	r0, #80	@ 0x50
 800d6e8:	f7fe ffb2 	bl	800c650 <Move_Line>
			HAL_Delay(5);
 800d6ec:	2005      	movs	r0, #5
 800d6ee:	f7f5 fb35 	bl	8002d5c <HAL_Delay>
		}

		if (ABS(Tx_NOW - 370.5) < 5 && ABS(Ty_NOW -230.5) < 5) {
 800d6f2:	4b45      	ldr	r3, [pc, #276]	@ (800d808 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d6f4:	edd3 7a00 	vldr	s15, [r3]
 800d6f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d6fc:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800d7f0 <Move_Tx_Pid_Ctrl+0x1c8>
 800d700:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d704:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d70c:	dd13      	ble.n	800d736 <Move_Tx_Pid_Ctrl+0x10e>
 800d70e:	4b3e      	ldr	r3, [pc, #248]	@ (800d808 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d710:	edd3 7a00 	vldr	s15, [r3]
 800d714:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d718:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 800d7f0 <Move_Tx_Pid_Ctrl+0x1c8>
 800d71c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d720:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 800d724:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d72c:	bf4c      	ite	mi
 800d72e:	2301      	movmi	r3, #1
 800d730:	2300      	movpl	r3, #0
 800d732:	b2db      	uxtb	r3, r3
 800d734:	e012      	b.n	800d75c <Move_Tx_Pid_Ctrl+0x134>
 800d736:	4b34      	ldr	r3, [pc, #208]	@ (800d808 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d738:	edd3 7a00 	vldr	s15, [r3]
 800d73c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d740:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 800d7f0 <Move_Tx_Pid_Ctrl+0x1c8>
 800d744:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d748:	eeb9 6b04 	vmov.f64	d6, #148	@ 0xc0a00000 -5.0
 800d74c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d754:	bfcc      	ite	gt
 800d756:	2301      	movgt	r3, #1
 800d758:	2300      	movle	r3, #0
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d036      	beq.n	800d7ce <Move_Tx_Pid_Ctrl+0x1a6>
 800d760:	4b2a      	ldr	r3, [pc, #168]	@ (800d80c <Move_Tx_Pid_Ctrl+0x1e4>)
 800d762:	edd3 7a00 	vldr	s15, [r3]
 800d766:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d76a:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 800d7f8 <Move_Tx_Pid_Ctrl+0x1d0>
 800d76e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d77a:	dd13      	ble.n	800d7a4 <Move_Tx_Pid_Ctrl+0x17c>
 800d77c:	4b23      	ldr	r3, [pc, #140]	@ (800d80c <Move_Tx_Pid_Ctrl+0x1e4>)
 800d77e:	edd3 7a00 	vldr	s15, [r3]
 800d782:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d786:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 800d7f8 <Move_Tx_Pid_Ctrl+0x1d0>
 800d78a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d78e:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 800d792:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79a:	bf4c      	ite	mi
 800d79c:	2301      	movmi	r3, #1
 800d79e:	2300      	movpl	r3, #0
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	e012      	b.n	800d7ca <Move_Tx_Pid_Ctrl+0x1a2>
 800d7a4:	4b19      	ldr	r3, [pc, #100]	@ (800d80c <Move_Tx_Pid_Ctrl+0x1e4>)
 800d7a6:	edd3 7a00 	vldr	s15, [r3]
 800d7aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d7ae:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 800d7f8 <Move_Tx_Pid_Ctrl+0x1d0>
 800d7b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d7b6:	eeb9 6b04 	vmov.f64	d6, #148	@ 0xc0a00000 -5.0
 800d7ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c2:	bfcc      	ite	gt
 800d7c4:	2301      	movgt	r3, #1
 800d7c6:	2300      	movle	r3, #0
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d108      	bne.n	800d7e0 <Move_Tx_Pid_Ctrl+0x1b8>
			break;
		}
		if(time_tx>=250)
 800d7ce:	4b10      	ldr	r3, [pc, #64]	@ (800d810 <Move_Tx_Pid_Ctrl+0x1e8>)
 800d7d0:	881b      	ldrh	r3, [r3, #0]
 800d7d2:	2bf9      	cmp	r3, #249	@ 0xf9
 800d7d4:	f67f af2f 	bls.w	800d636 <Move_Tx_Pid_Ctrl+0xe>
		{time_tx=0;
 800d7d8:	4b0d      	ldr	r3, [pc, #52]	@ (800d810 <Move_Tx_Pid_Ctrl+0x1e8>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	801a      	strh	r2, [r3, #0]
			break;
 800d7de:	e000      	b.n	800d7e2 <Move_Tx_Pid_Ctrl+0x1ba>
			break;
 800d7e0:	bf00      	nop
		}
	}

}
 800d7e2:	bf00      	nop
 800d7e4:	3708      	adds	r7, #8
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	f3af 8000 	nop.w
 800d7f0:	00000000 	.word	0x00000000
 800d7f4:	40772800 	.word	0x40772800
 800d7f8:	00000000 	.word	0x00000000
 800d7fc:	406cd000 	.word	0x406cd000
 800d800:	24000c28 	.word	0x24000c28
 800d804:	24000c24 	.word	0x24000c24
 800d808:	24000454 	.word	0x24000454
 800d80c:	24000458 	.word	0x24000458
 800d810:	24000c34 	.word	0x24000c34

0800d814 <Host2SCS>:
}

//1个16位数拆分为2个8位数
//DataL为低位，DataH为高位
void Host2SCS(uint8_t *DataL, uint8_t *DataH, int Data)
{
 800d814:	b480      	push	{r7}
 800d816:	b085      	sub	sp, #20
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
	if (End)
 800d820:	4b0e      	ldr	r3, [pc, #56]	@ (800d85c <Host2SCS+0x48>)
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d009      	beq.n	800d83c <Host2SCS+0x28>
	{
		*DataL = (Data >> 8);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	121b      	asrs	r3, r3, #8
 800d82c:	b2da      	uxtb	r2, r3
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	701a      	strb	r2, [r3, #0]
		*DataH = (Data & 0xff);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	b2da      	uxtb	r2, r3
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	701a      	strb	r2, [r3, #0]
	else
	{
		*DataH = (Data >> 8);
		*DataL = (Data & 0xff);
	}
}
 800d83a:	e008      	b.n	800d84e <Host2SCS+0x3a>
		*DataH = (Data >> 8);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	121b      	asrs	r3, r3, #8
 800d840:	b2da      	uxtb	r2, r3
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	701a      	strb	r2, [r3, #0]
		*DataL = (Data & 0xff);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	b2da      	uxtb	r2, r3
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	701a      	strb	r2, [r3, #0]
}
 800d84e:	bf00      	nop
 800d850:	3714      	adds	r7, #20
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop
 800d85c:	24000c36 	.word	0x24000c36

0800d860 <writeBuf>:
	return Data;
}

void writeBuf(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen,
		uint8_t Fun)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
 800d866:	603a      	str	r2, [r7, #0]
 800d868:	461a      	mov	r2, r3
 800d86a:	4603      	mov	r3, r0
 800d86c:	71fb      	strb	r3, [r7, #7]
 800d86e:	460b      	mov	r3, r1
 800d870:	71bb      	strb	r3, [r7, #6]
 800d872:	4613      	mov	r3, r2
 800d874:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t msgLen = 2;
 800d876:	2302      	movs	r3, #2
 800d878:	75bb      	strb	r3, [r7, #22]
	uint8_t bBuf[6];
	uint8_t CheckSum = 0;
 800d87a:	2300      	movs	r3, #0
 800d87c:	73fb      	strb	r3, [r7, #15]
	bBuf[0] = 0xff;
 800d87e:	23ff      	movs	r3, #255	@ 0xff
 800d880:	743b      	strb	r3, [r7, #16]
	bBuf[1] = 0xff;
 800d882:	23ff      	movs	r3, #255	@ 0xff
 800d884:	747b      	strb	r3, [r7, #17]
	bBuf[2] = ID;
 800d886:	79fb      	ldrb	r3, [r7, #7]
 800d888:	74bb      	strb	r3, [r7, #18]
	bBuf[4] = Fun;
 800d88a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d88e:	753b      	strb	r3, [r7, #20]
	if (nDat)
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d010      	beq.n	800d8b8 <writeBuf+0x58>
	{
		msgLen += nLen + 1;
 800d896:	797a      	ldrb	r2, [r7, #5]
 800d898:	7dbb      	ldrb	r3, [r7, #22]
 800d89a:	4413      	add	r3, r2
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	3301      	adds	r3, #1
 800d8a0:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = msgLen;
 800d8a2:	7dbb      	ldrb	r3, [r7, #22]
 800d8a4:	74fb      	strb	r3, [r7, #19]
		bBuf[5] = MemAddr;
 800d8a6:	79bb      	ldrb	r3, [r7, #6]
 800d8a8:	757b      	strb	r3, [r7, #21]
		writeSCS(bBuf, 6);
 800d8aa:	f107 0310 	add.w	r3, r7, #16
 800d8ae:	2106      	movs	r1, #6
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f000 f99b 	bl	800dbec <writeSCS>
 800d8b6:	e007      	b.n	800d8c8 <writeBuf+0x68>

	}
	else
	{
		bBuf[3] = msgLen;
 800d8b8:	7dbb      	ldrb	r3, [r7, #22]
 800d8ba:	74fb      	strb	r3, [r7, #19]
		writeSCS(bBuf, 5);
 800d8bc:	f107 0310 	add.w	r3, r7, #16
 800d8c0:	2105      	movs	r1, #5
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f000 f992 	bl	800dbec <writeSCS>
	}
	CheckSum = ID + msgLen + Fun + MemAddr;
 800d8c8:	79fa      	ldrb	r2, [r7, #7]
 800d8ca:	7dbb      	ldrb	r3, [r7, #22]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	b2da      	uxtb	r2, r3
 800d8d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	b2da      	uxtb	r2, r3
 800d8d8:	79bb      	ldrb	r3, [r7, #6]
 800d8da:	4413      	add	r3, r2
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	73fb      	strb	r3, [r7, #15]
	if (nDat)
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d016      	beq.n	800d914 <writeBuf+0xb4>
	{
		for (i = 0; i < nLen; i++)
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	75fb      	strb	r3, [r7, #23]
 800d8ea:	e00a      	b.n	800d902 <writeBuf+0xa2>
		{
			CheckSum += nDat[i];
 800d8ec:	7dfb      	ldrb	r3, [r7, #23]
 800d8ee:	683a      	ldr	r2, [r7, #0]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	781a      	ldrb	r2, [r3, #0]
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < nLen; i++)
 800d8fc:	7dfb      	ldrb	r3, [r7, #23]
 800d8fe:	3301      	adds	r3, #1
 800d900:	75fb      	strb	r3, [r7, #23]
 800d902:	7dfa      	ldrb	r2, [r7, #23]
 800d904:	797b      	ldrb	r3, [r7, #5]
 800d906:	429a      	cmp	r2, r3
 800d908:	d3f0      	bcc.n	800d8ec <writeBuf+0x8c>
		}
		writeSCS(nDat, nLen);
 800d90a:	797b      	ldrb	r3, [r7, #5]
 800d90c:	4619      	mov	r1, r3
 800d90e:	6838      	ldr	r0, [r7, #0]
 800d910:	f000 f96c 	bl	800dbec <writeSCS>
	}
	CheckSum = ~CheckSum;
 800d914:	7bfb      	ldrb	r3, [r7, #15]
 800d916:	43db      	mvns	r3, r3
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	73fb      	strb	r3, [r7, #15]
	writeSCS(&CheckSum, 1);
 800d91c:	f107 030f 	add.w	r3, r7, #15
 800d920:	2101      	movs	r1, #1
 800d922:	4618      	mov	r0, r3
 800d924:	f000 f962 	bl	800dbec <writeSCS>
}
 800d928:	bf00      	nop
 800d92a:	3718      	adds	r7, #24
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <genWrite>:

//普通写指令
//舵机ID，MemAddr内存表地址，写入数据，写入长度
int genWrite(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af02      	add	r7, sp, #8
 800d936:	603a      	str	r2, [r7, #0]
 800d938:	461a      	mov	r2, r3
 800d93a:	4603      	mov	r3, r0
 800d93c:	71fb      	strb	r3, [r7, #7]
 800d93e:	460b      	mov	r3, r1
 800d940:	71bb      	strb	r3, [r7, #6]
 800d942:	4613      	mov	r3, r2
 800d944:	717b      	strb	r3, [r7, #5]
	rFlushSCS();
 800d946:	f000 f990 	bl	800dc6a <rFlushSCS>
	writeBuf(ID, MemAddr, nDat, nLen, INST_WRITE);
 800d94a:	797b      	ldrb	r3, [r7, #5]
 800d94c:	79b9      	ldrb	r1, [r7, #6]
 800d94e:	79f8      	ldrb	r0, [r7, #7]
 800d950:	2203      	movs	r2, #3
 800d952:	9200      	str	r2, [sp, #0]
 800d954:	683a      	ldr	r2, [r7, #0]
 800d956:	f7ff ff83 	bl	800d860 <writeBuf>
	wFlushSCS();
 800d95a:	f000 f98d 	bl	800dc78 <wFlushSCS>
	return Ack(ID);
 800d95e:	79fb      	ldrb	r3, [r7, #7]
 800d960:	4618      	mov	r0, r3
 800d962:	f000 f8b9 	bl	800dad8 <Ack>
 800d966:	4603      	mov	r3, r0
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <Read>:
}

//读指令
//舵机ID，MemAddr内存表地址，返回数据nData，数据长度nLen
int Read(uint8_t ID, uint8_t MemAddr, uint8_t *nData, uint8_t nLen)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b088      	sub	sp, #32
 800d974:	af02      	add	r7, sp, #8
 800d976:	603a      	str	r2, [r7, #0]
 800d978:	461a      	mov	r2, r3
 800d97a:	4603      	mov	r3, r0
 800d97c:	71fb      	strb	r3, [r7, #7]
 800d97e:	460b      	mov	r3, r1
 800d980:	71bb      	strb	r3, [r7, #6]
 800d982:	4613      	mov	r3, r2
 800d984:	717b      	strb	r3, [r7, #5]
	int Size;
	uint8_t bBuf[4];
	uint8_t calSum;
	uint8_t i;
	rFlushSCS();
 800d986:	f000 f970 	bl	800dc6a <rFlushSCS>
	writeBuf(ID, MemAddr, &nLen, 1, INST_READ);
 800d98a:	1d7a      	adds	r2, r7, #5
 800d98c:	79b9      	ldrb	r1, [r7, #6]
 800d98e:	79f8      	ldrb	r0, [r7, #7]
 800d990:	2302      	movs	r3, #2
 800d992:	9300      	str	r3, [sp, #0]
 800d994:	2301      	movs	r3, #1
 800d996:	f7ff ff63 	bl	800d860 <writeBuf>
	wFlushSCS();
 800d99a:	f000 f96d 	bl	800dc78 <wFlushSCS>
	if (!checkHead())
 800d99e:	f000 f872 	bl	800da86 <checkHead>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d101      	bne.n	800d9ac <Read+0x3c>
	{
		return 0;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	e04b      	b.n	800da44 <Read+0xd4>
	}
	Error = 0;
 800d9ac:	4b27      	ldr	r3, [pc, #156]	@ (800da4c <Read+0xdc>)
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	701a      	strb	r2, [r3, #0]
	if (readSCS(bBuf, 3) != 3)
 800d9b2:	f107 030c 	add.w	r3, r7, #12
 800d9b6:	2103      	movs	r1, #3
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f000 f903 	bl	800dbc4 <readSCS>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	2b03      	cmp	r3, #3
 800d9c2:	d001      	beq.n	800d9c8 <Read+0x58>
	{
		return 0;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	e03d      	b.n	800da44 <Read+0xd4>
	}
	Size = readSCS(nData, nLen);
 800d9c8:	797b      	ldrb	r3, [r7, #5]
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	6838      	ldr	r0, [r7, #0]
 800d9ce:	f000 f8f9 	bl	800dbc4 <readSCS>
 800d9d2:	6138      	str	r0, [r7, #16]
	if (Size != nLen)
 800d9d4:	797b      	ldrb	r3, [r7, #5]
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d001      	beq.n	800d9e2 <Read+0x72>
	{
		return 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	e030      	b.n	800da44 <Read+0xd4>
	}
	if (readSCS(bBuf + 3, 1) != 1)
 800d9e2:	f107 030c 	add.w	r3, r7, #12
 800d9e6:	3303      	adds	r3, #3
 800d9e8:	2101      	movs	r1, #1
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f000 f8ea 	bl	800dbc4 <readSCS>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d001      	beq.n	800d9fa <Read+0x8a>
	{
		return 0;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	e024      	b.n	800da44 <Read+0xd4>
	}
	calSum = bBuf[0] + bBuf[1] + bBuf[2];
 800d9fa:	7b3a      	ldrb	r2, [r7, #12]
 800d9fc:	7b7b      	ldrb	r3, [r7, #13]
 800d9fe:	4413      	add	r3, r2
 800da00:	b2da      	uxtb	r2, r3
 800da02:	7bbb      	ldrb	r3, [r7, #14]
 800da04:	4413      	add	r3, r2
 800da06:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < Size; i++)
 800da08:	2300      	movs	r3, #0
 800da0a:	75bb      	strb	r3, [r7, #22]
 800da0c:	e009      	b.n	800da22 <Read+0xb2>
	{
		calSum += nData[i];
 800da0e:	7dbb      	ldrb	r3, [r7, #22]
 800da10:	683a      	ldr	r2, [r7, #0]
 800da12:	4413      	add	r3, r2
 800da14:	781a      	ldrb	r2, [r3, #0]
 800da16:	7dfb      	ldrb	r3, [r7, #23]
 800da18:	4413      	add	r3, r2
 800da1a:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < Size; i++)
 800da1c:	7dbb      	ldrb	r3, [r7, #22]
 800da1e:	3301      	adds	r3, #1
 800da20:	75bb      	strb	r3, [r7, #22]
 800da22:	7dbb      	ldrb	r3, [r7, #22]
 800da24:	693a      	ldr	r2, [r7, #16]
 800da26:	429a      	cmp	r2, r3
 800da28:	dcf1      	bgt.n	800da0e <Read+0x9e>
	}
	calSum = ~calSum;
 800da2a:	7dfb      	ldrb	r3, [r7, #23]
 800da2c:	43db      	mvns	r3, r3
 800da2e:	75fb      	strb	r3, [r7, #23]
	if (calSum != bBuf[3])
 800da30:	7bfb      	ldrb	r3, [r7, #15]
 800da32:	7dfa      	ldrb	r2, [r7, #23]
 800da34:	429a      	cmp	r2, r3
 800da36:	d001      	beq.n	800da3c <Read+0xcc>
	{
		return 0;
 800da38:	2300      	movs	r3, #0
 800da3a:	e003      	b.n	800da44 <Read+0xd4>
	}
	Error = bBuf[2];
 800da3c:	7bba      	ldrb	r2, [r7, #14]
 800da3e:	4b03      	ldr	r3, [pc, #12]	@ (800da4c <Read+0xdc>)
 800da40:	701a      	strb	r2, [r3, #0]
	return Size;
 800da42:	693b      	ldr	r3, [r7, #16]
}
 800da44:	4618      	mov	r0, r3
 800da46:	3718      	adds	r7, #24
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	24000c37 	.word	0x24000c37

0800da50 <readByte>:

//读1字节，超时返回-1
int readByte(uint8_t ID, uint8_t MemAddr)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	460a      	mov	r2, r1
 800da5a:	71fb      	strb	r3, [r7, #7]
 800da5c:	4613      	mov	r3, r2
 800da5e:	71bb      	strb	r3, [r7, #6]
	uint8_t bDat;
	int Size = Read(ID, MemAddr, &bDat, 1);
 800da60:	f107 020b 	add.w	r2, r7, #11
 800da64:	79b9      	ldrb	r1, [r7, #6]
 800da66:	79f8      	ldrb	r0, [r7, #7]
 800da68:	2301      	movs	r3, #1
 800da6a:	f7ff ff81 	bl	800d970 <Read>
 800da6e:	60f8      	str	r0, [r7, #12]
	if (Size != 1)
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2b01      	cmp	r3, #1
 800da74:	d002      	beq.n	800da7c <readByte+0x2c>
	{
		return -1;
 800da76:	f04f 33ff 	mov.w	r3, #4294967295
 800da7a:	e000      	b.n	800da7e <readByte+0x2e>
	}
	else
	{
		return bDat;
 800da7c:	7afb      	ldrb	r3, [r7, #11]
	}
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}

0800da86 <checkHead>:
	Error = bBuf[2];
	return bBuf[0];
}

int checkHead(void)
{
 800da86:	b580      	push	{r7, lr}
 800da88:	b082      	sub	sp, #8
 800da8a:	af00      	add	r7, sp, #0
	uint8_t bDat;
	uint8_t bBuf[2] =
 800da8c:	2300      	movs	r3, #0
 800da8e:	80bb      	strh	r3, [r7, #4]
	{ 0, 0 };
	uint8_t Cnt = 0;
 800da90:	2300      	movs	r3, #0
 800da92:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		if (!readSCS(&bDat, 1))
 800da94:	1dbb      	adds	r3, r7, #6
 800da96:	2101      	movs	r1, #1
 800da98:	4618      	mov	r0, r3
 800da9a:	f000 f893 	bl	800dbc4 <readSCS>
 800da9e:	4603      	mov	r3, r0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d101      	bne.n	800daa8 <checkHead+0x22>
		{
			return 0;
 800daa4:	2300      	movs	r3, #0
 800daa6:	e013      	b.n	800dad0 <checkHead+0x4a>
		}
		bBuf[1] = bBuf[0];
 800daa8:	793b      	ldrb	r3, [r7, #4]
 800daaa:	717b      	strb	r3, [r7, #5]
		bBuf[0] = bDat;
 800daac:	79bb      	ldrb	r3, [r7, #6]
 800daae:	713b      	strb	r3, [r7, #4]
		if (bBuf[0] == 0xff && bBuf[1] == 0xff)
 800dab0:	793b      	ldrb	r3, [r7, #4]
 800dab2:	2bff      	cmp	r3, #255	@ 0xff
 800dab4:	d102      	bne.n	800dabc <checkHead+0x36>
 800dab6:	797b      	ldrb	r3, [r7, #5]
 800dab8:	2bff      	cmp	r3, #255	@ 0xff
 800daba:	d007      	beq.n	800dacc <checkHead+0x46>
		{
			break;
		}
		Cnt++;
 800dabc:	79fb      	ldrb	r3, [r7, #7]
 800dabe:	3301      	adds	r3, #1
 800dac0:	71fb      	strb	r3, [r7, #7]
		if (Cnt > 10)
 800dac2:	79fb      	ldrb	r3, [r7, #7]
 800dac4:	2b0a      	cmp	r3, #10
 800dac6:	d9e5      	bls.n	800da94 <checkHead+0xe>
		{
			return 0;
 800dac8:	2300      	movs	r3, #0
 800daca:	e001      	b.n	800dad0 <checkHead+0x4a>
			break;
 800dacc:	bf00      	nop
		}
	}
	return 1;
 800dace:	2301      	movs	r3, #1
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <Ack>:

//指令应答
int Ack(uint8_t ID)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b084      	sub	sp, #16
 800dadc:	af00      	add	r7, sp, #0
 800dade:	4603      	mov	r3, r0
 800dae0:	71fb      	strb	r3, [r7, #7]
	uint8_t bBuf[4];
	uint8_t calSum;
	Error = 0;
 800dae2:	4b1f      	ldr	r3, [pc, #124]	@ (800db60 <Ack+0x88>)
 800dae4:	2200      	movs	r2, #0
 800dae6:	701a      	strb	r2, [r3, #0]
	if (ID != 0xfe && Level)
 800dae8:	79fb      	ldrb	r3, [r7, #7]
 800daea:	2bfe      	cmp	r3, #254	@ 0xfe
 800daec:	d032      	beq.n	800db54 <Ack+0x7c>
 800daee:	4b1d      	ldr	r3, [pc, #116]	@ (800db64 <Ack+0x8c>)
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d02e      	beq.n	800db54 <Ack+0x7c>
	{
		if (!checkHead())
 800daf6:	f7ff ffc6 	bl	800da86 <checkHead>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d101      	bne.n	800db04 <Ack+0x2c>
		{
			return 0;
 800db00:	2300      	movs	r3, #0
 800db02:	e028      	b.n	800db56 <Ack+0x7e>
		}
		if (readSCS(bBuf, 4) != 4)
 800db04:	f107 0308 	add.w	r3, r7, #8
 800db08:	2104      	movs	r1, #4
 800db0a:	4618      	mov	r0, r3
 800db0c:	f000 f85a 	bl	800dbc4 <readSCS>
 800db10:	4603      	mov	r3, r0
 800db12:	2b04      	cmp	r3, #4
 800db14:	d001      	beq.n	800db1a <Ack+0x42>
		{
			return 0;
 800db16:	2300      	movs	r3, #0
 800db18:	e01d      	b.n	800db56 <Ack+0x7e>
		}
		if (bBuf[0] != ID)
 800db1a:	7a3b      	ldrb	r3, [r7, #8]
 800db1c:	79fa      	ldrb	r2, [r7, #7]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d001      	beq.n	800db26 <Ack+0x4e>
		{
			return 0;
 800db22:	2300      	movs	r3, #0
 800db24:	e017      	b.n	800db56 <Ack+0x7e>
		}
		if (bBuf[1] != 2)
 800db26:	7a7b      	ldrb	r3, [r7, #9]
 800db28:	2b02      	cmp	r3, #2
 800db2a:	d001      	beq.n	800db30 <Ack+0x58>
		{
			return 0;
 800db2c:	2300      	movs	r3, #0
 800db2e:	e012      	b.n	800db56 <Ack+0x7e>
		}
		calSum = ~(bBuf[0] + bBuf[1] + bBuf[2]);
 800db30:	7a3a      	ldrb	r2, [r7, #8]
 800db32:	7a7b      	ldrb	r3, [r7, #9]
 800db34:	4413      	add	r3, r2
 800db36:	b2da      	uxtb	r2, r3
 800db38:	7abb      	ldrb	r3, [r7, #10]
 800db3a:	4413      	add	r3, r2
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	43db      	mvns	r3, r3
 800db40:	73fb      	strb	r3, [r7, #15]
		if (calSum != bBuf[3])
 800db42:	7afb      	ldrb	r3, [r7, #11]
 800db44:	7bfa      	ldrb	r2, [r7, #15]
 800db46:	429a      	cmp	r2, r3
 800db48:	d001      	beq.n	800db4e <Ack+0x76>
		{
			return 0;
 800db4a:	2300      	movs	r3, #0
 800db4c:	e003      	b.n	800db56 <Ack+0x7e>
		}
		Error = bBuf[2];
 800db4e:	7aba      	ldrb	r2, [r7, #10]
 800db50:	4b03      	ldr	r3, [pc, #12]	@ (800db60 <Ack+0x88>)
 800db52:	701a      	strb	r2, [r3, #0]
	}
	return 1;
 800db54:	2301      	movs	r3, #1
}
 800db56:	4618      	mov	r0, r3
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	24000c37 	.word	0x24000c37
 800db64:	24000046 	.word	0x24000046

0800db68 <Uart_Send>:
#include "stm32h7xx_hal.h"
#include "SCS_Uart.h"
#include "usart.h"

void Uart_Send(uint8_t *buf, uint16_t len)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	460b      	mov	r3, r1
 800db72:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart6, buf, len, HAL_MAX_DELAY);
 800db74:	887a      	ldrh	r2, [r7, #2]
 800db76:	f04f 33ff 	mov.w	r3, #4294967295
 800db7a:	6879      	ldr	r1, [r7, #4]
 800db7c:	4803      	ldr	r0, [pc, #12]	@ (800db8c <Uart_Send+0x24>)
 800db7e:	f7fa fe7f 	bl	8008880 <HAL_UART_Transmit>
}
 800db82:	bf00      	nop
 800db84:	3708      	adds	r7, #8
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	240009cc 	.word	0x240009cc

0800db90 <Uart_Read>:

int16_t Uart_Read(uint8_t *buf, uint16_t len, uint32_t timeout)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	460b      	mov	r3, r1
 800db9a:	607a      	str	r2, [r7, #4]
 800db9c:	817b      	strh	r3, [r7, #10]
	if (HAL_UART_Receive(&huart6, buf, len, timeout) == HAL_OK)
 800db9e:	897a      	ldrh	r2, [r7, #10]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	68f9      	ldr	r1, [r7, #12]
 800dba4:	4806      	ldr	r0, [pc, #24]	@ (800dbc0 <Uart_Read+0x30>)
 800dba6:	f7fa fef9 	bl	800899c <HAL_UART_Receive>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d102      	bne.n	800dbb6 <Uart_Read+0x26>
	{
		return len;
 800dbb0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dbb4:	e000      	b.n	800dbb8 <Uart_Read+0x28>
	}
	else
	{
		return 0;
 800dbb6:	2300      	movs	r3, #0
	}
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3710      	adds	r7, #16
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	240009cc 	.word	0x240009cc

0800dbc4 <readSCS>:
uint8_t wBuf[128];
uint8_t wLen = 0;

//UART 接收数据接口
int readSCS(unsigned char *nDat, int nLen)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
	return Uart_Read(nDat, nLen, IOTimeOut);
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	4a05      	ldr	r2, [pc, #20]	@ (800dbe8 <readSCS+0x24>)
 800dbd4:	6812      	ldr	r2, [r2, #0]
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f7ff ffd9 	bl	800db90 <Uart_Read>
 800dbde:	4603      	mov	r3, r0
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	24000048 	.word	0x24000048

0800dbec <writeSCS>:

//UART 发送数据接口
int writeSCS(unsigned char *nDat, int nLen)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
	while (nLen--)
 800dbf6:	e014      	b.n	800dc22 <writeSCS+0x36>
	{
		if (wLen < sizeof(wBuf))
 800dbf8:	4b10      	ldr	r3, [pc, #64]	@ (800dc3c <writeSCS+0x50>)
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	b25b      	sxtb	r3, r3
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	db0f      	blt.n	800dc22 <writeSCS+0x36>
		{
			wBuf[wLen] = *nDat;
 800dc02:	4b0e      	ldr	r3, [pc, #56]	@ (800dc3c <writeSCS+0x50>)
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	461a      	mov	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	7819      	ldrb	r1, [r3, #0]
 800dc0c:	4b0c      	ldr	r3, [pc, #48]	@ (800dc40 <writeSCS+0x54>)
 800dc0e:	5499      	strb	r1, [r3, r2]
			wLen++;
 800dc10:	4b0a      	ldr	r3, [pc, #40]	@ (800dc3c <writeSCS+0x50>)
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	3301      	adds	r3, #1
 800dc16:	b2da      	uxtb	r2, r3
 800dc18:	4b08      	ldr	r3, [pc, #32]	@ (800dc3c <writeSCS+0x50>)
 800dc1a:	701a      	strb	r2, [r3, #0]
			nDat++;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	607b      	str	r3, [r7, #4]
	while (nLen--)
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	1e5a      	subs	r2, r3, #1
 800dc26:	603a      	str	r2, [r7, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d1e5      	bne.n	800dbf8 <writeSCS+0xc>
		}
	}
	return wLen;
 800dc2c:	4b03      	ldr	r3, [pc, #12]	@ (800dc3c <writeSCS+0x50>)
 800dc2e:	781b      	ldrb	r3, [r3, #0]
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr
 800dc3c:	24000cb8 	.word	0x24000cb8
 800dc40:	24000c38 	.word	0x24000c38

0800dc44 <nopDelay>:
	return wLen;
}

//等待舵机总线切换(约8us)
void nopDelay(void)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b083      	sub	sp, #12
 800dc48:	af00      	add	r7, sp, #0
	uint16_t i = 500;
 800dc4a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800dc4e:	80fb      	strh	r3, [r7, #6]
	while (i--)
 800dc50:	bf00      	nop
 800dc52:	88fb      	ldrh	r3, [r7, #6]
 800dc54:	1e5a      	subs	r2, r3, #1
 800dc56:	80fa      	strh	r2, [r7, #6]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d1fa      	bne.n	800dc52 <nopDelay+0xe>
		;
}
 800dc5c:	bf00      	nop
 800dc5e:	bf00      	nop
 800dc60:	370c      	adds	r7, #12
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr

0800dc6a <rFlushSCS>:

//接收缓冲区刷新
void rFlushSCS()
{
 800dc6a:	b580      	push	{r7, lr}
 800dc6c:	af00      	add	r7, sp, #0
	nopDelay();
 800dc6e:	f7ff ffe9 	bl	800dc44 <nopDelay>
}
 800dc72:	bf00      	nop
 800dc74:	bd80      	pop	{r7, pc}
	...

0800dc78 <wFlushSCS>:

//发送缓冲区刷新
void wFlushSCS()
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	af00      	add	r7, sp, #0
	if (wLen)
 800dc7c:	4b07      	ldr	r3, [pc, #28]	@ (800dc9c <wFlushSCS+0x24>)
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d008      	beq.n	800dc96 <wFlushSCS+0x1e>
	{
		Uart_Send(wBuf, wLen);
 800dc84:	4b05      	ldr	r3, [pc, #20]	@ (800dc9c <wFlushSCS+0x24>)
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	4619      	mov	r1, r3
 800dc8a:	4805      	ldr	r0, [pc, #20]	@ (800dca0 <wFlushSCS+0x28>)
 800dc8c:	f7ff ff6c 	bl	800db68 <Uart_Send>
		wLen = 0;
 800dc90:	4b02      	ldr	r3, [pc, #8]	@ (800dc9c <wFlushSCS+0x24>)
 800dc92:	2200      	movs	r2, #0
 800dc94:	701a      	strb	r2, [r3, #0]
	}
}
 800dc96:	bf00      	nop
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	24000cb8 	.word	0x24000cb8
 800dca0:	24000c38 	.word	0x24000c38

0800dca4 <WritePosEx>:
{
	return Err;
}

int WritePosEx(uint8_t ID, int16_t Position, uint16_t Speed, uint8_t ACC)
{
 800dca4:	b590      	push	{r4, r7, lr}
 800dca6:	b085      	sub	sp, #20
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	4604      	mov	r4, r0
 800dcac:	4608      	mov	r0, r1
 800dcae:	4611      	mov	r1, r2
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	4623      	mov	r3, r4
 800dcb4:	71fb      	strb	r3, [r7, #7]
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	80bb      	strh	r3, [r7, #4]
 800dcba:	460b      	mov	r3, r1
 800dcbc:	807b      	strh	r3, [r7, #2]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	71bb      	strb	r3, [r7, #6]
	uint8_t bBuf[7];
	if (Position < 0)
 800dcc2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	da09      	bge.n	800dcde <WritePosEx+0x3a>
	{
		Position = -Position;
 800dcca:	88bb      	ldrh	r3, [r7, #4]
 800dccc:	425b      	negs	r3, r3
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	80bb      	strh	r3, [r7, #4]
		Position |= (1 << 15);
 800dcd2:	88bb      	ldrh	r3, [r7, #4]
 800dcd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcdc:	80bb      	strh	r3, [r7, #4]
	}

	bBuf[0] = ACC;
 800dcde:	79bb      	ldrb	r3, [r7, #6]
 800dce0:	723b      	strb	r3, [r7, #8]
	Host2SCS(bBuf + 1, bBuf + 2, Position);
 800dce2:	f107 0308 	add.w	r3, r7, #8
 800dce6:	3301      	adds	r3, #1
 800dce8:	f107 0108 	add.w	r1, r7, #8
 800dcec:	3102      	adds	r1, #2
 800dcee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7ff fd8e 	bl	800d814 <Host2SCS>
	Host2SCS(bBuf + 3, bBuf + 4, 0);
 800dcf8:	f107 0308 	add.w	r3, r7, #8
 800dcfc:	3303      	adds	r3, #3
 800dcfe:	f107 0108 	add.w	r1, r7, #8
 800dd02:	3104      	adds	r1, #4
 800dd04:	2200      	movs	r2, #0
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7ff fd84 	bl	800d814 <Host2SCS>
	Host2SCS(bBuf + 5, bBuf + 6, Speed);
 800dd0c:	f107 0308 	add.w	r3, r7, #8
 800dd10:	3305      	adds	r3, #5
 800dd12:	f107 0108 	add.w	r1, r7, #8
 800dd16:	3106      	adds	r1, #6
 800dd18:	887a      	ldrh	r2, [r7, #2]
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7ff fd7a 	bl	800d814 <Host2SCS>

	return genWrite(ID, SMS_STS_ACC, bBuf, 7);
 800dd20:	f107 0208 	add.w	r2, r7, #8
 800dd24:	79f8      	ldrb	r0, [r7, #7]
 800dd26:	2307      	movs	r3, #7
 800dd28:	2129      	movs	r1, #41	@ 0x29
 800dd2a:	f7ff fe01 	bl	800d930 <genWrite>
 800dd2e:	4603      	mov	r3, r0
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3714      	adds	r7, #20
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd90      	pop	{r4, r7, pc}

0800dd38 <ReadMove>:
	}
	return Temper;
}

int ReadMove(int ID)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
	int Move = -1;
 800dd40:	f04f 33ff 	mov.w	r3, #4294967295
 800dd44:	60fb      	str	r3, [r7, #12]
	if (ID == -1)
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4c:	d103      	bne.n	800dd56 <ReadMove+0x1e>
	{
		Move = Mem[SMS_STS_MOVING - SMS_STS_PRESENT_POSITION_L];
 800dd4e:	4b0d      	ldr	r3, [pc, #52]	@ (800dd84 <ReadMove+0x4c>)
 800dd50:	7a9b      	ldrb	r3, [r3, #10]
 800dd52:	60fb      	str	r3, [r7, #12]
 800dd54:	e010      	b.n	800dd78 <ReadMove+0x40>
	}
	else
	{
		Err = 0;
 800dd56:	4b0c      	ldr	r3, [pc, #48]	@ (800dd88 <ReadMove+0x50>)
 800dd58:	2200      	movs	r2, #0
 800dd5a:	601a      	str	r2, [r3, #0]
		Move = readByte(ID, SMS_STS_MOVING);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	2142      	movs	r1, #66	@ 0x42
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7ff fe74 	bl	800da50 <readByte>
 800dd68:	60f8      	str	r0, [r7, #12]
		if (Move == -1)
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd70:	d102      	bne.n	800dd78 <ReadMove+0x40>
		{
			Err = 1;
 800dd72:	4b05      	ldr	r3, [pc, #20]	@ (800dd88 <ReadMove+0x50>)
 800dd74:	2201      	movs	r2, #1
 800dd76:	601a      	str	r2, [r3, #0]
		}
	}
	return Move;
 800dd78:	68fb      	ldr	r3, [r7, #12]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	24000cbc 	.word	0x24000cbc
 800dd88:	24000ccc 	.word	0x24000ccc

0800dd8c <Action_Show>:
extern float x;
extern float y;
extern int colour;
extern char Point_Flag;

void Action_Show(void) {
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	af00      	add	r7, sp, #0
	sprintf(Z_str, "%.2f", zangle);
 800dd90:	4b30      	ldr	r3, [pc, #192]	@ (800de54 <Action_Show+0xc8>)
 800dd92:	edd3 7a00 	vldr	s15, [r3]
 800dd96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dd9a:	ec53 2b17 	vmov	r2, r3, d7
 800dd9e:	492e      	ldr	r1, [pc, #184]	@ (800de58 <Action_Show+0xcc>)
 800dda0:	482e      	ldr	r0, [pc, #184]	@ (800de5c <Action_Show+0xd0>)
 800dda2:	f002 f8b7 	bl	800ff14 <siprintf>
	sprintf(X_srt, "%.2f", pos_x);
 800dda6:	4b2e      	ldr	r3, [pc, #184]	@ (800de60 <Action_Show+0xd4>)
 800dda8:	edd3 7a00 	vldr	s15, [r3]
 800ddac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ddb0:	ec53 2b17 	vmov	r2, r3, d7
 800ddb4:	4928      	ldr	r1, [pc, #160]	@ (800de58 <Action_Show+0xcc>)
 800ddb6:	482b      	ldr	r0, [pc, #172]	@ (800de64 <Action_Show+0xd8>)
 800ddb8:	f002 f8ac 	bl	800ff14 <siprintf>
	sprintf(Y_srt, "%.2f", pos_y);
 800ddbc:	4b2a      	ldr	r3, [pc, #168]	@ (800de68 <Action_Show+0xdc>)
 800ddbe:	edd3 7a00 	vldr	s15, [r3]
 800ddc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ddc6:	ec53 2b17 	vmov	r2, r3, d7
 800ddca:	4923      	ldr	r1, [pc, #140]	@ (800de58 <Action_Show+0xcc>)
 800ddcc:	4827      	ldr	r0, [pc, #156]	@ (800de6c <Action_Show+0xe0>)
 800ddce:	f002 f8a1 	bl	800ff14 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) "Z_Angle.txt=\"",
 800ddd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ddd6:	220d      	movs	r2, #13
 800ddd8:	4925      	ldr	r1, [pc, #148]	@ (800de70 <Action_Show+0xe4>)
 800ddda:	4826      	ldr	r0, [pc, #152]	@ (800de74 <Action_Show+0xe8>)
 800dddc:	f7fa fd50 	bl	8008880 <HAL_UART_Transmit>
			sizeof("Z_Angle.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Z_str, sizeof(X_srt) - 1, 0xffff);
 800dde0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dde4:	2213      	movs	r2, #19
 800dde6:	491d      	ldr	r1, [pc, #116]	@ (800de5c <Action_Show+0xd0>)
 800dde8:	4822      	ldr	r0, [pc, #136]	@ (800de74 <Action_Show+0xe8>)
 800ddea:	f7fa fd49 	bl	8008880 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800ddee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ddf2:	2204      	movs	r2, #4
 800ddf4:	4920      	ldr	r1, [pc, #128]	@ (800de78 <Action_Show+0xec>)
 800ddf6:	481f      	ldr	r0, [pc, #124]	@ (800de74 <Action_Show+0xe8>)
 800ddf8:	f7fa fd42 	bl	8008880 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "X_Point.txt=\"",
 800ddfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de00:	220d      	movs	r2, #13
 800de02:	491e      	ldr	r1, [pc, #120]	@ (800de7c <Action_Show+0xf0>)
 800de04:	481b      	ldr	r0, [pc, #108]	@ (800de74 <Action_Show+0xe8>)
 800de06:	f7fa fd3b 	bl	8008880 <HAL_UART_Transmit>
			sizeof("X_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) X_srt, sizeof(X_srt) - 1, 0xffff);
 800de0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de0e:	2213      	movs	r2, #19
 800de10:	4914      	ldr	r1, [pc, #80]	@ (800de64 <Action_Show+0xd8>)
 800de12:	4818      	ldr	r0, [pc, #96]	@ (800de74 <Action_Show+0xe8>)
 800de14:	f7fa fd34 	bl	8008880 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800de18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de1c:	2204      	movs	r2, #4
 800de1e:	4916      	ldr	r1, [pc, #88]	@ (800de78 <Action_Show+0xec>)
 800de20:	4814      	ldr	r0, [pc, #80]	@ (800de74 <Action_Show+0xe8>)
 800de22:	f7fa fd2d 	bl	8008880 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "Y_Point.txt=\"",
 800de26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de2a:	220d      	movs	r2, #13
 800de2c:	4914      	ldr	r1, [pc, #80]	@ (800de80 <Action_Show+0xf4>)
 800de2e:	4811      	ldr	r0, [pc, #68]	@ (800de74 <Action_Show+0xe8>)
 800de30:	f7fa fd26 	bl	8008880 <HAL_UART_Transmit>
			sizeof("Y_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_srt, sizeof(X_srt) - 1, 0xffff);
 800de34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de38:	2213      	movs	r2, #19
 800de3a:	490c      	ldr	r1, [pc, #48]	@ (800de6c <Action_Show+0xe0>)
 800de3c:	480d      	ldr	r0, [pc, #52]	@ (800de74 <Action_Show+0xe8>)
 800de3e:	f7fa fd1f 	bl	8008880 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800de42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de46:	2204      	movs	r2, #4
 800de48:	490b      	ldr	r1, [pc, #44]	@ (800de78 <Action_Show+0xec>)
 800de4a:	480a      	ldr	r0, [pc, #40]	@ (800de74 <Action_Show+0xe8>)
 800de4c:	f7fa fd18 	bl	8008880 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);
}
 800de50:	bf00      	nop
 800de52:	bd80      	pop	{r7, pc}
 800de54:	24000b00 	.word	0x24000b00
 800de58:	08013228 	.word	0x08013228
 800de5c:	24000cd0 	.word	0x24000cd0
 800de60:	24000af8 	.word	0x24000af8
 800de64:	24000cd8 	.word	0x24000cd8
 800de68:	24000afc 	.word	0x24000afc
 800de6c:	24000cec 	.word	0x24000cec
 800de70:	08013230 	.word	0x08013230
 800de74:	240005c0 	.word	0x240005c0
 800de78:	08013240 	.word	0x08013240
 800de7c:	08013248 	.word	0x08013248
 800de80:	08013258 	.word	0x08013258

0800de84 <QR_Show>:
extern int QR_data[6];
void QR_Show(void) {
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++) {
 800de8a:	2300      	movs	r3, #0
 800de8c:	607b      	str	r3, [r7, #4]
 800de8e:	e00d      	b.n	800deac <QR_Show+0x28>
		sprintf(&Y_pid[i], "%d", QR_data[i]);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	4a14      	ldr	r2, [pc, #80]	@ (800dee4 <QR_Show+0x60>)
 800de94:	1898      	adds	r0, r3, r2
 800de96:	4a14      	ldr	r2, [pc, #80]	@ (800dee8 <QR_Show+0x64>)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de9e:	461a      	mov	r2, r3
 800dea0:	4912      	ldr	r1, [pc, #72]	@ (800deec <QR_Show+0x68>)
 800dea2:	f002 f837 	bl	800ff14 <siprintf>
	for (int i = 0; i < 6; i++) {
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	3301      	adds	r3, #1
 800deaa:	607b      	str	r3, [r7, #4]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b05      	cmp	r3, #5
 800deb0:	ddee      	ble.n	800de90 <QR_Show+0xc>
	}
	HAL_UART_Transmit(&huart4, (uint8_t*) "QR.txt=\"", sizeof("QR.txt=\"") - 1,
 800deb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800deb6:	2208      	movs	r2, #8
 800deb8:	490d      	ldr	r1, [pc, #52]	@ (800def0 <QR_Show+0x6c>)
 800deba:	480e      	ldr	r0, [pc, #56]	@ (800def4 <QR_Show+0x70>)
 800debc:	f7fa fce0 	bl	8008880 <HAL_UART_Transmit>
			0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_pid, sizeof(Y_pid) - 1, 0xffff);
 800dec0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dec4:	2213      	movs	r2, #19
 800dec6:	4907      	ldr	r1, [pc, #28]	@ (800dee4 <QR_Show+0x60>)
 800dec8:	480a      	ldr	r0, [pc, #40]	@ (800def4 <QR_Show+0x70>)
 800deca:	f7fa fcd9 	bl	8008880 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800dece:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ded2:	2204      	movs	r2, #4
 800ded4:	4908      	ldr	r1, [pc, #32]	@ (800def8 <QR_Show+0x74>)
 800ded6:	4807      	ldr	r0, [pc, #28]	@ (800def4 <QR_Show+0x70>)
 800ded8:	f7fa fcd2 	bl	8008880 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart4, (uint8_t*) QR_data, sizeof(QR_data) - 1, 0xffff);
	 HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
	 sizeof("\"\xff\xff\xff") - 1, 0xffff);
	 */

}
 800dedc:	bf00      	nop
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	24000d00 	.word	0x24000d00
 800dee8:	24000460 	.word	0x24000460
 800deec:	08013268 	.word	0x08013268
 800def0:	0801326c 	.word	0x0801326c
 800def4:	240005c0 	.word	0x240005c0
 800def8:	08013240 	.word	0x08013240

0800defc <Point_Show>:
// 抓取过程标志位，值为目标颜色
extern char Match_Flag;
// 抓取计算稳定性标志位，0为识别有故障,1为正常计算
extern char Check_flag;
// TODO：屏幕缺失字符"+",暂时判断为编码格式问题，需要通过串口助手确定编码格式
void Point_Show(void) {
 800defc:	b580      	push	{r7, lr}
 800defe:	af00      	add	r7, sp, #0
	if(Point_Flag == 0)
 800df00:	4b36      	ldr	r3, [pc, #216]	@ (800dfdc <Point_Show+0xe0>)
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d066      	beq.n	800dfd6 <Point_Show+0xda>
	{
//		TX2点位数据还未接收，结束该函数
		return ;
	}
	Point_Flag = 0;
 800df08:	4b34      	ldr	r3, [pc, #208]	@ (800dfdc <Point_Show+0xe0>)
 800df0a:	2200      	movs	r2, #0
 800df0c:	701a      	strb	r2, [r3, #0]
//	在抓取过程中,进行颜色校验，如果颜色与抓取目标颜色不同，则放弃该帧数据，并传递放弃稳定性计算标志位
	if(Match_Flag != colour)
 800df0e:	4b34      	ldr	r3, [pc, #208]	@ (800dfe0 <Point_Show+0xe4>)
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	461a      	mov	r2, r3
 800df14:	4b33      	ldr	r3, [pc, #204]	@ (800dfe4 <Point_Show+0xe8>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d003      	beq.n	800df24 <Point_Show+0x28>
		Check_flag = 0;
 800df1c:	4b32      	ldr	r3, [pc, #200]	@ (800dfe8 <Point_Show+0xec>)
 800df1e:	2200      	movs	r2, #0
 800df20:	701a      	strb	r2, [r3, #0]
 800df22:	e002      	b.n	800df2a <Point_Show+0x2e>
	else
		Check_flag = 1;
 800df24:	4b30      	ldr	r3, [pc, #192]	@ (800dfe8 <Point_Show+0xec>)
 800df26:	2201      	movs	r2, #1
 800df28:	701a      	strb	r2, [r3, #0]
	sprintf(TX2_X_Point, "%.2f", x);
 800df2a:	4b30      	ldr	r3, [pc, #192]	@ (800dfec <Point_Show+0xf0>)
 800df2c:	edd3 7a00 	vldr	s15, [r3]
 800df30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800df34:	ec53 2b17 	vmov	r2, r3, d7
 800df38:	492d      	ldr	r1, [pc, #180]	@ (800dff0 <Point_Show+0xf4>)
 800df3a:	482e      	ldr	r0, [pc, #184]	@ (800dff4 <Point_Show+0xf8>)
 800df3c:	f001 ffea 	bl	800ff14 <siprintf>
	sprintf(TX2_Y_Point, "%.2f", y);
 800df40:	4b2d      	ldr	r3, [pc, #180]	@ (800dff8 <Point_Show+0xfc>)
 800df42:	edd3 7a00 	vldr	s15, [r3]
 800df46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800df4a:	ec53 2b17 	vmov	r2, r3, d7
 800df4e:	4928      	ldr	r1, [pc, #160]	@ (800dff0 <Point_Show+0xf4>)
 800df50:	482a      	ldr	r0, [pc, #168]	@ (800dffc <Point_Show+0x100>)
 800df52:	f001 ffdf 	bl	800ff14 <siprintf>
	sprintf(TX2_Color, "%d", colour);
 800df56:	4b23      	ldr	r3, [pc, #140]	@ (800dfe4 <Point_Show+0xe8>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	461a      	mov	r2, r3
 800df5c:	4928      	ldr	r1, [pc, #160]	@ (800e000 <Point_Show+0x104>)
 800df5e:	4829      	ldr	r0, [pc, #164]	@ (800e004 <Point_Show+0x108>)
 800df60:	f001 ffd8 	bl	800ff14 <siprintf>
//	开始发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Point.txt=\"",sizeof("Point.txt=\"") - 1, 0xffff);
 800df64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df68:	220b      	movs	r2, #11
 800df6a:	4927      	ldr	r1, [pc, #156]	@ (800e008 <Point_Show+0x10c>)
 800df6c:	4827      	ldr	r0, [pc, #156]	@ (800e00c <Point_Show+0x110>)
 800df6e:	f7fa fc87 	bl	8008880 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_X_Point, sizeof(TX2_X_Point) - 2, 0xffff);
 800df72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df76:	2206      	movs	r2, #6
 800df78:	491e      	ldr	r1, [pc, #120]	@ (800dff4 <Point_Show+0xf8>)
 800df7a:	4824      	ldr	r0, [pc, #144]	@ (800e00c <Point_Show+0x110>)
 800df7c:	f7fa fc80 	bl	8008880 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "+", sizeof("+")-2, 0xffff);
 800df80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df84:	2200      	movs	r2, #0
 800df86:	4922      	ldr	r1, [pc, #136]	@ (800e010 <Point_Show+0x114>)
 800df88:	4820      	ldr	r0, [pc, #128]	@ (800e00c <Point_Show+0x110>)
 800df8a:	f7fa fc79 	bl	8008880 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Y_Point, sizeof(TX2_Y_Point) - 1, 0xffff);
 800df8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df92:	2207      	movs	r2, #7
 800df94:	4919      	ldr	r1, [pc, #100]	@ (800dffc <Point_Show+0x100>)
 800df96:	481d      	ldr	r0, [pc, #116]	@ (800e00c <Point_Show+0x110>)
 800df98:	f7fa fc72 	bl	8008880 <HAL_UART_Transmit>
//	结束发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800df9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dfa0:	2204      	movs	r2, #4
 800dfa2:	491c      	ldr	r1, [pc, #112]	@ (800e014 <Point_Show+0x118>)
 800dfa4:	4819      	ldr	r0, [pc, #100]	@ (800e00c <Point_Show+0x110>)
 800dfa6:	f7fa fc6b 	bl	8008880 <HAL_UART_Transmit>

//	开始发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Color.txt=\"",sizeof("Color.txt=\"") - 1, 0xffff);
 800dfaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dfae:	220b      	movs	r2, #11
 800dfb0:	4919      	ldr	r1, [pc, #100]	@ (800e018 <Point_Show+0x11c>)
 800dfb2:	4816      	ldr	r0, [pc, #88]	@ (800e00c <Point_Show+0x110>)
 800dfb4:	f7fa fc64 	bl	8008880 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Color, sizeof(TX2_Color)-1 , 0xffff);
 800dfb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	4911      	ldr	r1, [pc, #68]	@ (800e004 <Point_Show+0x108>)
 800dfc0:	4812      	ldr	r0, [pc, #72]	@ (800e00c <Point_Show+0x110>)
 800dfc2:	f7fa fc5d 	bl	8008880 <HAL_UART_Transmit>

//	结束发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800dfc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dfca:	2204      	movs	r2, #4
 800dfcc:	4911      	ldr	r1, [pc, #68]	@ (800e014 <Point_Show+0x118>)
 800dfce:	480f      	ldr	r0, [pc, #60]	@ (800e00c <Point_Show+0x110>)
 800dfd0:	f7fa fc56 	bl	8008880 <HAL_UART_Transmit>
 800dfd4:	e000      	b.n	800dfd8 <Point_Show+0xdc>
		return ;
 800dfd6:	bf00      	nop
}
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	2400045c 	.word	0x2400045c
 800dfe0:	24000488 	.word	0x24000488
 800dfe4:	2400047c 	.word	0x2400047c
 800dfe8:	24000489 	.word	0x24000489
 800dfec:	24000454 	.word	0x24000454
 800dff0:	08013228 	.word	0x08013228
 800dff4:	24000d14 	.word	0x24000d14
 800dff8:	24000458 	.word	0x24000458
 800dffc:	24000d1c 	.word	0x24000d1c
 800e000:	08013268 	.word	0x08013268
 800e004:	24000d24 	.word	0x24000d24
 800e008:	08013278 	.word	0x08013278
 800e00c:	240005c0 	.word	0x240005c0
 800e010:	08013284 	.word	0x08013284
 800e014:	08013240 	.word	0x08013240
 800e018:	08013288 	.word	0x08013288

0800e01c <Check_Flag>:

void Check_Flag(uint8_t rec) {
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	4603      	mov	r3, r0
 800e024:	71fb      	strb	r3, [r7, #7]
	static uint8_t ch;
	static uint8_t count = 0;

	ch = rec;
 800e026:	4a45      	ldr	r2, [pc, #276]	@ (800e13c <Check_Flag+0x120>)
 800e028:	79fb      	ldrb	r3, [r7, #7]
 800e02a:	7013      	strb	r3, [r2, #0]

	switch (count) {
 800e02c:	4b44      	ldr	r3, [pc, #272]	@ (800e140 <Check_Flag+0x124>)
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	2b05      	cmp	r3, #5
 800e032:	d876      	bhi.n	800e122 <Check_Flag+0x106>
 800e034:	a201      	add	r2, pc, #4	@ (adr r2, 800e03c <Check_Flag+0x20>)
 800e036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e03a:	bf00      	nop
 800e03c:	0800e055 	.word	0x0800e055
 800e040:	0800e08d 	.word	0x0800e08d
 800e044:	0800e0b3 	.word	0x0800e0b3
 800e048:	0800e0d1 	.word	0x0800e0d1
 800e04c:	0800e0ef 	.word	0x0800e0ef
 800e050:	0800e10d 	.word	0x0800e10d
	case 0:
		if (ch == 'G')
 800e054:	4b39      	ldr	r3, [pc, #228]	@ (800e13c <Check_Flag+0x120>)
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	2b47      	cmp	r3, #71	@ 0x47
 800e05a:	d103      	bne.n	800e064 <Check_Flag+0x48>
			count = 1;
 800e05c:	4b38      	ldr	r3, [pc, #224]	@ (800e140 <Check_Flag+0x124>)
 800e05e:	2201      	movs	r2, #1
 800e060:	701a      	strb	r2, [r3, #0]
			count = 2;
		else if (ch == 'M')
			count = 4;
		else
			count = 0;
		break;
 800e062:	e065      	b.n	800e130 <Check_Flag+0x114>
		else if (ch == 'R')
 800e064:	4b35      	ldr	r3, [pc, #212]	@ (800e13c <Check_Flag+0x120>)
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	2b52      	cmp	r3, #82	@ 0x52
 800e06a:	d103      	bne.n	800e074 <Check_Flag+0x58>
			count = 2;
 800e06c:	4b34      	ldr	r3, [pc, #208]	@ (800e140 <Check_Flag+0x124>)
 800e06e:	2202      	movs	r2, #2
 800e070:	701a      	strb	r2, [r3, #0]
		break;
 800e072:	e05d      	b.n	800e130 <Check_Flag+0x114>
		else if (ch == 'M')
 800e074:	4b31      	ldr	r3, [pc, #196]	@ (800e13c <Check_Flag+0x120>)
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	2b4d      	cmp	r3, #77	@ 0x4d
 800e07a:	d103      	bne.n	800e084 <Check_Flag+0x68>
			count = 4;
 800e07c:	4b30      	ldr	r3, [pc, #192]	@ (800e140 <Check_Flag+0x124>)
 800e07e:	2204      	movs	r2, #4
 800e080:	701a      	strb	r2, [r3, #0]
		break;
 800e082:	e055      	b.n	800e130 <Check_Flag+0x114>
			count = 0;
 800e084:	4b2e      	ldr	r3, [pc, #184]	@ (800e140 <Check_Flag+0x124>)
 800e086:	2200      	movs	r2, #0
 800e088:	701a      	strb	r2, [r3, #0]
		break;
 800e08a:	e051      	b.n	800e130 <Check_Flag+0x114>
	case 1:
		if (ch == 'o') {
 800e08c:	4b2b      	ldr	r3, [pc, #172]	@ (800e13c <Check_Flag+0x120>)
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	2b6f      	cmp	r3, #111	@ 0x6f
 800e092:	d106      	bne.n	800e0a2 <Check_Flag+0x86>
			System_Flag = 1;
 800e094:	4b2b      	ldr	r3, [pc, #172]	@ (800e144 <Check_Flag+0x128>)
 800e096:	2201      	movs	r2, #1
 800e098:	701a      	strb	r2, [r3, #0]
			count = 0;
 800e09a:	4b29      	ldr	r3, [pc, #164]	@ (800e140 <Check_Flag+0x124>)
 800e09c:	2200      	movs	r2, #0
 800e09e:	701a      	strb	r2, [r3, #0]
		} else if (ch == 'G')
			;
		else
			count = 0;
		break;
 800e0a0:	e043      	b.n	800e12a <Check_Flag+0x10e>
		} else if (ch == 'G')
 800e0a2:	4b26      	ldr	r3, [pc, #152]	@ (800e13c <Check_Flag+0x120>)
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	2b47      	cmp	r3, #71	@ 0x47
 800e0a8:	d03f      	beq.n	800e12a <Check_Flag+0x10e>
			count = 0;
 800e0aa:	4b25      	ldr	r3, [pc, #148]	@ (800e140 <Check_Flag+0x124>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	701a      	strb	r2, [r3, #0]
		break;
 800e0b0:	e03b      	b.n	800e12a <Check_Flag+0x10e>
	case 2:
//		此处用于判断是否进入准备模式，调整车身姿态
		if (ch == 'e')
 800e0b2:	4b22      	ldr	r3, [pc, #136]	@ (800e13c <Check_Flag+0x120>)
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	2b65      	cmp	r3, #101	@ 0x65
 800e0b8:	d106      	bne.n	800e0c8 <Check_Flag+0xac>
			count++;
 800e0ba:	4b21      	ldr	r3, [pc, #132]	@ (800e140 <Check_Flag+0x124>)
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	b2da      	uxtb	r2, r3
 800e0c2:	4b1f      	ldr	r3, [pc, #124]	@ (800e140 <Check_Flag+0x124>)
 800e0c4:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800e0c6:	e033      	b.n	800e130 <Check_Flag+0x114>
			count = 0;
 800e0c8:	4b1d      	ldr	r3, [pc, #116]	@ (800e140 <Check_Flag+0x124>)
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	701a      	strb	r2, [r3, #0]
		break;
 800e0ce:	e02f      	b.n	800e130 <Check_Flag+0x114>
	case 3:
		if (ch == 'a') {
 800e0d0:	4b1a      	ldr	r3, [pc, #104]	@ (800e13c <Check_Flag+0x120>)
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	2b61      	cmp	r3, #97	@ 0x61
 800e0d6:	d106      	bne.n	800e0e6 <Check_Flag+0xca>
			Ready_Flag = 1;
 800e0d8:	4b1b      	ldr	r3, [pc, #108]	@ (800e148 <Check_Flag+0x12c>)
 800e0da:	2201      	movs	r2, #1
 800e0dc:	701a      	strb	r2, [r3, #0]
			count = 0;
 800e0de:	4b18      	ldr	r3, [pc, #96]	@ (800e140 <Check_Flag+0x124>)
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	701a      	strb	r2, [r3, #0]
		} else
			count = 0;
		break;
 800e0e4:	e024      	b.n	800e130 <Check_Flag+0x114>
			count = 0;
 800e0e6:	4b16      	ldr	r3, [pc, #88]	@ (800e140 <Check_Flag+0x124>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	701a      	strb	r2, [r3, #0]
		break;
 800e0ec:	e020      	b.n	800e130 <Check_Flag+0x114>
	case 4:
		if (ch == 'a')
 800e0ee:	4b13      	ldr	r3, [pc, #76]	@ (800e13c <Check_Flag+0x120>)
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	2b61      	cmp	r3, #97	@ 0x61
 800e0f4:	d106      	bne.n	800e104 <Check_Flag+0xe8>
			count++;
 800e0f6:	4b12      	ldr	r3, [pc, #72]	@ (800e140 <Check_Flag+0x124>)
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	b2da      	uxtb	r2, r3
 800e0fe:	4b10      	ldr	r3, [pc, #64]	@ (800e140 <Check_Flag+0x124>)
 800e100:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800e102:	e015      	b.n	800e130 <Check_Flag+0x114>
			count = 0;
 800e104:	4b0e      	ldr	r3, [pc, #56]	@ (800e140 <Check_Flag+0x124>)
 800e106:	2200      	movs	r2, #0
 800e108:	701a      	strb	r2, [r3, #0]
		break;
 800e10a:	e011      	b.n	800e130 <Check_Flag+0x114>
	case 5:
		if (ch == 't') {
 800e10c:	4b0b      	ldr	r3, [pc, #44]	@ (800e13c <Check_Flag+0x120>)
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	2b74      	cmp	r3, #116	@ 0x74
 800e112:	d10c      	bne.n	800e12e <Check_Flag+0x112>
			System_Flag = 1;
 800e114:	4b0b      	ldr	r3, [pc, #44]	@ (800e144 <Check_Flag+0x128>)
 800e116:	2201      	movs	r2, #1
 800e118:	701a      	strb	r2, [r3, #0]
			count = 0;
 800e11a:	4b09      	ldr	r3, [pc, #36]	@ (800e140 <Check_Flag+0x124>)
 800e11c:	2200      	movs	r2, #0
 800e11e:	701a      	strb	r2, [r3, #0]
		}
		break;
 800e120:	e005      	b.n	800e12e <Check_Flag+0x112>
	default:
		count = 0;
 800e122:	4b07      	ldr	r3, [pc, #28]	@ (800e140 <Check_Flag+0x124>)
 800e124:	2200      	movs	r2, #0
 800e126:	701a      	strb	r2, [r3, #0]
		break;
 800e128:	e002      	b.n	800e130 <Check_Flag+0x114>
		break;
 800e12a:	bf00      	nop
 800e12c:	e000      	b.n	800e130 <Check_Flag+0x114>
		break;
 800e12e:	bf00      	nop
	}

}
 800e130:	bf00      	nop
 800e132:	370c      	adds	r7, #12
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr
 800e13c:	24000d28 	.word	0x24000d28
 800e140:	24000d29 	.word	0x24000d29
 800e144:	24000d26 	.word	0x24000d26
 800e148:	24000d27 	.word	0x24000d27

0800e14c <calculate_mean>:

#include "Stability.h"
#include "Stability_sub.h"

// 计算平均值
double calculate_mean(double data[], int n) {
 800e14c:	b480      	push	{r7}
 800e14e:	b087      	sub	sp, #28
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
    double sum = 0.0;
 800e156:	f04f 0200 	mov.w	r2, #0
 800e15a:	f04f 0300 	mov.w	r3, #0
 800e15e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < n; i++) {
 800e162:	2300      	movs	r3, #0
 800e164:	60fb      	str	r3, [r7, #12]
 800e166:	e00e      	b.n	800e186 <calculate_mean+0x3a>
        sum += data[i];
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	00db      	lsls	r3, r3, #3
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	4413      	add	r3, r2
 800e170:	ed93 7b00 	vldr	d7, [r3]
 800e174:	ed97 6b04 	vldr	d6, [r7, #16]
 800e178:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e17c:	ed87 7b04 	vstr	d7, [r7, #16]
    for (int i = 0; i < n; i++) {
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	3301      	adds	r3, #1
 800e184:	60fb      	str	r3, [r7, #12]
 800e186:	68fa      	ldr	r2, [r7, #12]
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	dbec      	blt.n	800e168 <calculate_mean+0x1c>
    }
    return sum / n;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	ee07 3a90 	vmov	s15, r3
 800e194:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e198:	ed97 6b04 	vldr	d6, [r7, #16]
 800e19c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800e1a0:	eeb0 7b45 	vmov.f64	d7, d5
}
 800e1a4:	eeb0 0b47 	vmov.f64	d0, d7
 800e1a8:	371c      	adds	r7, #28
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr

0800e1b2 <calculate_variance>:

 // 计算方差
double calculate_variance(double data[], int n) {
 800e1b2:	b580      	push	{r7, lr}
 800e1b4:	b088      	sub	sp, #32
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	6078      	str	r0, [r7, #4]
 800e1ba:	6039      	str	r1, [r7, #0]
     double mean = calculate_mean(data, n);
 800e1bc:	6839      	ldr	r1, [r7, #0]
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7ff ffc4 	bl	800e14c <calculate_mean>
 800e1c4:	ed87 0b02 	vstr	d0, [r7, #8]
     double sum_of_squares = 0.0;
 800e1c8:	f04f 0200 	mov.w	r2, #0
 800e1cc:	f04f 0300 	mov.w	r3, #0
 800e1d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
     for (int i = 0; i < n; i++) {
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	617b      	str	r3, [r7, #20]
 800e1d8:	e01e      	b.n	800e218 <calculate_variance+0x66>
         sum_of_squares += (data[i] - mean) * (data[i] - mean);
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	00db      	lsls	r3, r3, #3
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	ed93 6b00 	vldr	d6, [r3]
 800e1e6:	ed97 7b02 	vldr	d7, [r7, #8]
 800e1ea:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	00db      	lsls	r3, r3, #3
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	ed93 5b00 	vldr	d5, [r3]
 800e1fa:	ed97 7b02 	vldr	d7, [r7, #8]
 800e1fe:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e202:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e206:	ed97 6b06 	vldr	d6, [r7, #24]
 800e20a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e20e:	ed87 7b06 	vstr	d7, [r7, #24]
     for (int i = 0; i < n; i++) {
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	3301      	adds	r3, #1
 800e216:	617b      	str	r3, [r7, #20]
 800e218:	697a      	ldr	r2, [r7, #20]
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	dbdc      	blt.n	800e1da <calculate_variance+0x28>
     }
     return sum_of_squares / n;
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	ee07 3a90 	vmov	s15, r3
 800e226:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e22a:	ed97 6b06 	vldr	d6, [r7, #24]
 800e22e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800e232:	eeb0 7b45 	vmov.f64	d7, d5
}
 800e236:	eeb0 0b47 	vmov.f64	d0, d7
 800e23a:	3720      	adds	r7, #32
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <Check_Stability>:

//  使用方差判断稳定性
uint8_t Check_Stability(float check_x,float check_y,uint8_t Check_flag)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b08a      	sub	sp, #40	@ 0x28
 800e244:	af00      	add	r7, sp, #0
 800e246:	ed87 0a03 	vstr	s0, [r7, #12]
 800e24a:	edc7 0a02 	vstr	s1, [r7, #8]
 800e24e:	4603      	mov	r3, r0
 800e250:	71fb      	strb	r3, [r7, #7]
	static float data_x[10];
	static float data_y[10];
	static uint8_t frequency = 0;
//	不满足计算稳定性的条件，清空缓冲区并结束
	if(Check_flag != 1)
 800e252:	79fb      	ldrb	r3, [r7, #7]
 800e254:	2b01      	cmp	r3, #1
 800e256:	d018      	beq.n	800e28a <Check_Stability+0x4a>
	{
		for(int i = 0;i<10;i++)
 800e258:	2300      	movs	r3, #0
 800e25a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e25c:	e010      	b.n	800e280 <Check_Stability+0x40>
		{
			data_x[i] = 0;
 800e25e:	4a27      	ldr	r2, [pc, #156]	@ (800e2fc <Check_Stability+0xbc>)
 800e260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	4413      	add	r3, r2
 800e266:	f04f 0200 	mov.w	r2, #0
 800e26a:	601a      	str	r2, [r3, #0]
			data_y[i] = 0;
 800e26c:	4a24      	ldr	r2, [pc, #144]	@ (800e300 <Check_Stability+0xc0>)
 800e26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	4413      	add	r3, r2
 800e274:	f04f 0200 	mov.w	r2, #0
 800e278:	601a      	str	r2, [r3, #0]
		for(int i = 0;i<10;i++)
 800e27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e27c:	3301      	adds	r3, #1
 800e27e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e282:	2b09      	cmp	r3, #9
 800e284:	ddeb      	ble.n	800e25e <Check_Stability+0x1e>
		}
		return 1;
 800e286:	2301      	movs	r3, #1
 800e288:	e034      	b.n	800e2f4 <Check_Stability+0xb4>
	}
	if(frequency <= 9)
 800e28a:	4b1e      	ldr	r3, [pc, #120]	@ (800e304 <Check_Stability+0xc4>)
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	2b09      	cmp	r3, #9
 800e290:	d80f      	bhi.n	800e2b2 <Check_Stability+0x72>
	{
		data_x[frequency] = check_x;
 800e292:	4b1c      	ldr	r3, [pc, #112]	@ (800e304 <Check_Stability+0xc4>)
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	4a19      	ldr	r2, [pc, #100]	@ (800e2fc <Check_Stability+0xbc>)
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	4413      	add	r3, r2
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	601a      	str	r2, [r3, #0]
		data_y[frequency] = check_y;
 800e2a0:	4b18      	ldr	r3, [pc, #96]	@ (800e304 <Check_Stability+0xc4>)
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	4a16      	ldr	r2, [pc, #88]	@ (800e300 <Check_Stability+0xc0>)
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	4413      	add	r3, r2
 800e2aa:	68ba      	ldr	r2, [r7, #8]
 800e2ac:	601a      	str	r2, [r3, #0]
//		0说明数据量过少
		return 0;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	e020      	b.n	800e2f4 <Check_Stability+0xb4>
	}
//	显式类型转换，调用函数获得方差
	double variance_x = calculate_variance((double*)data_x, 10);
 800e2b2:	210a      	movs	r1, #10
 800e2b4:	4811      	ldr	r0, [pc, #68]	@ (800e2fc <Check_Stability+0xbc>)
 800e2b6:	f7ff ff7c 	bl	800e1b2 <calculate_variance>
 800e2ba:	ed87 0b06 	vstr	d0, [r7, #24]
	double variance_y = calculate_variance((double*)data_y, 10);
 800e2be:	210a      	movs	r1, #10
 800e2c0:	480f      	ldr	r0, [pc, #60]	@ (800e300 <Check_Stability+0xc0>)
 800e2c2:	f7ff ff76 	bl	800e1b2 <calculate_variance>
 800e2c6:	ed87 0b04 	vstr	d0, [r7, #16]
	if((variance_x > 2) || (variance_y >2))
 800e2ca:	ed97 7b06 	vldr	d7, [r7, #24]
 800e2ce:	eeb0 6b00 	vmov.f64	d6, #0	@ 0x40000000  2.0
 800e2d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2da:	dc08      	bgt.n	800e2ee <Check_Stability+0xae>
 800e2dc:	ed97 7b04 	vldr	d7, [r7, #16]
 800e2e0:	eeb0 6b00 	vmov.f64	d6, #0	@ 0x40000000  2.0
 800e2e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ec:	dd01      	ble.n	800e2f2 <Check_Stability+0xb2>
	{
//		1说明还未稳定
		return 1;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e000      	b.n	800e2f4 <Check_Stability+0xb4>
	}
	else
		return 2;
 800e2f2:	2302      	movs	r3, #2
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3728      	adds	r7, #40	@ 0x28
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	24000d2c 	.word	0x24000d2c
 800e300:	24000d54 	.word	0x24000d54
 800e304:	24000d7c 	.word	0x24000d7c

0800e308 <Check_Status>:
	首先，在步进电机上电以后，需要进行调零，找到一个零位用来确定后面一切操作的参考点，因此5号步进电机设置为上电回零
	但是在比赛过程中，要求车身及其垂直投影部分在未发车前全部处于发车区域，这就要求爪子在发车前是在车体内侧的，同时爪子不能处于太高处，否则违规
	因此在Check_Status()函数用于在回零操作已完成后进行调整，以满足发车条件，
*/
uint8_t Check_Status(void)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	af00      	add	r7, sp, #0
//  首先控制步进电机,回到零点
	Drop_Location_jiang(200, 120, 0);
 800e30c:	2200      	movs	r2, #0
 800e30e:	2178      	movs	r1, #120	@ 0x78
 800e310:	20c8      	movs	r0, #200	@ 0xc8
 800e312:	f7fe fc09 	bl	800cb28 <Drop_Location_jiang>
	Move_Arm(1, 50, 300);
 800e316:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800e31a:	2132      	movs	r1, #50	@ 0x32
 800e31c:	2001      	movs	r0, #1
 800e31e:	f7fd f903 	bl	800b528 <Move_Arm>
//  6号舵机900
	Move_Arm(6, 900, 300);
 800e322:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800e326:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800e32a:	2006      	movs	r0, #6
 800e32c:	f7fd f8fc 	bl	800b528 <Move_Arm>
//  旋转物料结构的支撑舵机
	FT_Servo_Zero(0);
 800e330:	2000      	movs	r0, #0
 800e332:	f000 f80c 	bl	800e34e <FT_Servo_Zero>
//  旋转爪子结构的支撑舵机
	FT_Servo_Zero(1);
 800e336:	2001      	movs	r0, #1
 800e338:	f000 f809 	bl	800e34e <FT_Servo_Zero>
//  步进电机下降,将位置调整为最最低点
	Drop_Location_jiang(200, 120, 9000);
 800e33c:	f242 3228 	movw	r2, #9000	@ 0x2328
 800e340:	2178      	movs	r1, #120	@ 0x78
 800e342:	20c8      	movs	r0, #200	@ 0xc8
 800e344:	f7fe fbf0 	bl	800cb28 <Drop_Location_jiang>
	return 1;
 800e348:	2301      	movs	r3, #1
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <FT_Servo_Zero>:

// 将目标舵机回零
uint8_t FT_Servo_Zero(uint8_t Number)
{
 800e34e:	b580      	push	{r7, lr}
 800e350:	b082      	sub	sp, #8
 800e352:	af00      	add	r7, sp, #0
 800e354:	4603      	mov	r3, r0
 800e356:	71fb      	strb	r3, [r7, #7]
	if(Number == 0)
 800e358:	79fb      	ldrb	r3, [r7, #7]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d106      	bne.n	800e36c <FT_Servo_Zero+0x1e>
		WritePosEx(0, 0, 0, 0);
 800e35e:	2300      	movs	r3, #0
 800e360:	2200      	movs	r2, #0
 800e362:	2100      	movs	r1, #0
 800e364:	2000      	movs	r0, #0
 800e366:	f7ff fc9d 	bl	800dca4 <WritePosEx>
 800e36a:	e009      	b.n	800e380 <FT_Servo_Zero+0x32>
	else if (Number == 1)
 800e36c:	79fb      	ldrb	r3, [r7, #7]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d106      	bne.n	800e380 <FT_Servo_Zero+0x32>
		WritePosEx(1, 1020, 0, 0);
 800e372:	2300      	movs	r3, #0
 800e374:	2200      	movs	r2, #0
 800e376:	f44f 717f 	mov.w	r1, #1020	@ 0x3fc
 800e37a:	2001      	movs	r0, #1
 800e37c:	f7ff fc92 	bl	800dca4 <WritePosEx>
	return 1;
 800e380:	2301      	movs	r3, #1
}
 800e382:	4618      	mov	r0, r3
 800e384:	3708      	adds	r7, #8
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}

0800e38a <FT_Servo_Orth>:

// 将爪子处飞特舵机调整为向外，正交于车身
uint8_t FT_Servo_Orth(void)
{
 800e38a:	b580      	push	{r7, lr}
 800e38c:	af00      	add	r7, sp, #0
	WritePosEx(1, 3087, 0, 0);
 800e38e:	2300      	movs	r3, #0
 800e390:	2200      	movs	r2, #0
 800e392:	f640 410f 	movw	r1, #3087	@ 0xc0f
 800e396:	2001      	movs	r0, #1
 800e398:	f7ff fc84 	bl	800dca4 <WritePosEx>
	return 1;
 800e39c:	2301      	movs	r3, #1
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	bd80      	pop	{r7, pc}

0800e3a2 <FT_Servo_Put>:

// 物料摆放
uint8_t FT_Servo_Put(uint8_t Servo_ID, uint8_t Pub_Number)
{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b082      	sub	sp, #8
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	460a      	mov	r2, r1
 800e3ac:	71fb      	strb	r3, [r7, #7]
 800e3ae:	4613      	mov	r3, r2
 800e3b0:	71bb      	strb	r3, [r7, #6]
	if(Servo_ID == 0)
 800e3b2:	79fb      	ldrb	r3, [r7, #7]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d121      	bne.n	800e3fc <FT_Servo_Put+0x5a>
	{
		switch (Pub_Number)
 800e3b8:	79bb      	ldrb	r3, [r7, #6]
 800e3ba:	2b03      	cmp	r3, #3
 800e3bc:	d016      	beq.n	800e3ec <FT_Servo_Put+0x4a>
 800e3be:	2b03      	cmp	r3, #3
 800e3c0:	dc26      	bgt.n	800e410 <FT_Servo_Put+0x6e>
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d002      	beq.n	800e3cc <FT_Servo_Put+0x2a>
 800e3c6:	2b02      	cmp	r3, #2
 800e3c8:	d008      	beq.n	800e3dc <FT_Servo_Put+0x3a>
 800e3ca:	e021      	b.n	800e410 <FT_Servo_Put+0x6e>
		{
			case 1:WritePosEx(0, 1180, 0, 0);break;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f240 419c 	movw	r1, #1180	@ 0x49c
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	f7ff fc65 	bl	800dca4 <WritePosEx>
 800e3da:	e019      	b.n	800e410 <FT_Servo_Put+0x6e>
			case 2:WritePosEx(0, 2245, 0, 0);break;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f640 01c5 	movw	r1, #2245	@ 0x8c5
 800e3e4:	2000      	movs	r0, #0
 800e3e6:	f7ff fc5d 	bl	800dca4 <WritePosEx>
 800e3ea:	e011      	b.n	800e410 <FT_Servo_Put+0x6e>
			case 3:WritePosEx(0, 3292, 0, 0);break;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f640 41dc 	movw	r1, #3292	@ 0xcdc
 800e3f4:	2000      	movs	r0, #0
 800e3f6:	f7ff fc55 	bl	800dca4 <WritePosEx>
 800e3fa:	e009      	b.n	800e410 <FT_Servo_Put+0x6e>
		}
	}
	else if (Servo_ID == 1)
 800e3fc:	79fb      	ldrb	r3, [r7, #7]
 800e3fe:	2b01      	cmp	r3, #1
 800e400:	d106      	bne.n	800e410 <FT_Servo_Put+0x6e>
	{
		WritePosEx(1, 1716, 0, 0);
 800e402:	2300      	movs	r3, #0
 800e404:	2200      	movs	r2, #0
 800e406:	f240 61b4 	movw	r1, #1716	@ 0x6b4
 800e40a:	2001      	movs	r0, #1
 800e40c:	f7ff fc4a 	bl	800dca4 <WritePosEx>
	}
	while(ReadMove(Servo_ID))
 800e410:	bf00      	nop
 800e412:	79fb      	ldrb	r3, [r7, #7]
 800e414:	4618      	mov	r0, r3
 800e416:	f7ff fc8f 	bl	800dd38 <ReadMove>
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d1f8      	bne.n	800e412 <FT_Servo_Put+0x70>
	{
		;
	}
	return 1;
 800e420:	2301      	movs	r3, #1
}
 800e422:	4618      	mov	r0, r3
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
	...

0800e42c <malloc>:
 800e42c:	4b02      	ldr	r3, [pc, #8]	@ (800e438 <malloc+0xc>)
 800e42e:	4601      	mov	r1, r0
 800e430:	6818      	ldr	r0, [r3, #0]
 800e432:	f000 b825 	b.w	800e480 <_malloc_r>
 800e436:	bf00      	nop
 800e438:	240001c4 	.word	0x240001c4

0800e43c <sbrk_aligned>:
 800e43c:	b570      	push	{r4, r5, r6, lr}
 800e43e:	4e0f      	ldr	r6, [pc, #60]	@ (800e47c <sbrk_aligned+0x40>)
 800e440:	460c      	mov	r4, r1
 800e442:	6831      	ldr	r1, [r6, #0]
 800e444:	4605      	mov	r5, r0
 800e446:	b911      	cbnz	r1, 800e44e <sbrk_aligned+0x12>
 800e448:	f001 fe52 	bl	80100f0 <_sbrk_r>
 800e44c:	6030      	str	r0, [r6, #0]
 800e44e:	4621      	mov	r1, r4
 800e450:	4628      	mov	r0, r5
 800e452:	f001 fe4d 	bl	80100f0 <_sbrk_r>
 800e456:	1c43      	adds	r3, r0, #1
 800e458:	d103      	bne.n	800e462 <sbrk_aligned+0x26>
 800e45a:	f04f 34ff 	mov.w	r4, #4294967295
 800e45e:	4620      	mov	r0, r4
 800e460:	bd70      	pop	{r4, r5, r6, pc}
 800e462:	1cc4      	adds	r4, r0, #3
 800e464:	f024 0403 	bic.w	r4, r4, #3
 800e468:	42a0      	cmp	r0, r4
 800e46a:	d0f8      	beq.n	800e45e <sbrk_aligned+0x22>
 800e46c:	1a21      	subs	r1, r4, r0
 800e46e:	4628      	mov	r0, r5
 800e470:	f001 fe3e 	bl	80100f0 <_sbrk_r>
 800e474:	3001      	adds	r0, #1
 800e476:	d1f2      	bne.n	800e45e <sbrk_aligned+0x22>
 800e478:	e7ef      	b.n	800e45a <sbrk_aligned+0x1e>
 800e47a:	bf00      	nop
 800e47c:	24000d80 	.word	0x24000d80

0800e480 <_malloc_r>:
 800e480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e484:	1ccd      	adds	r5, r1, #3
 800e486:	f025 0503 	bic.w	r5, r5, #3
 800e48a:	3508      	adds	r5, #8
 800e48c:	2d0c      	cmp	r5, #12
 800e48e:	bf38      	it	cc
 800e490:	250c      	movcc	r5, #12
 800e492:	2d00      	cmp	r5, #0
 800e494:	4606      	mov	r6, r0
 800e496:	db01      	blt.n	800e49c <_malloc_r+0x1c>
 800e498:	42a9      	cmp	r1, r5
 800e49a:	d904      	bls.n	800e4a6 <_malloc_r+0x26>
 800e49c:	230c      	movs	r3, #12
 800e49e:	6033      	str	r3, [r6, #0]
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e57c <_malloc_r+0xfc>
 800e4aa:	f000 f869 	bl	800e580 <__malloc_lock>
 800e4ae:	f8d8 3000 	ldr.w	r3, [r8]
 800e4b2:	461c      	mov	r4, r3
 800e4b4:	bb44      	cbnz	r4, 800e508 <_malloc_r+0x88>
 800e4b6:	4629      	mov	r1, r5
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f7ff ffbf 	bl	800e43c <sbrk_aligned>
 800e4be:	1c43      	adds	r3, r0, #1
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	d158      	bne.n	800e576 <_malloc_r+0xf6>
 800e4c4:	f8d8 4000 	ldr.w	r4, [r8]
 800e4c8:	4627      	mov	r7, r4
 800e4ca:	2f00      	cmp	r7, #0
 800e4cc:	d143      	bne.n	800e556 <_malloc_r+0xd6>
 800e4ce:	2c00      	cmp	r4, #0
 800e4d0:	d04b      	beq.n	800e56a <_malloc_r+0xea>
 800e4d2:	6823      	ldr	r3, [r4, #0]
 800e4d4:	4639      	mov	r1, r7
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	eb04 0903 	add.w	r9, r4, r3
 800e4dc:	f001 fe08 	bl	80100f0 <_sbrk_r>
 800e4e0:	4581      	cmp	r9, r0
 800e4e2:	d142      	bne.n	800e56a <_malloc_r+0xea>
 800e4e4:	6821      	ldr	r1, [r4, #0]
 800e4e6:	1a6d      	subs	r5, r5, r1
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	f7ff ffa6 	bl	800e43c <sbrk_aligned>
 800e4f0:	3001      	adds	r0, #1
 800e4f2:	d03a      	beq.n	800e56a <_malloc_r+0xea>
 800e4f4:	6823      	ldr	r3, [r4, #0]
 800e4f6:	442b      	add	r3, r5
 800e4f8:	6023      	str	r3, [r4, #0]
 800e4fa:	f8d8 3000 	ldr.w	r3, [r8]
 800e4fe:	685a      	ldr	r2, [r3, #4]
 800e500:	bb62      	cbnz	r2, 800e55c <_malloc_r+0xdc>
 800e502:	f8c8 7000 	str.w	r7, [r8]
 800e506:	e00f      	b.n	800e528 <_malloc_r+0xa8>
 800e508:	6822      	ldr	r2, [r4, #0]
 800e50a:	1b52      	subs	r2, r2, r5
 800e50c:	d420      	bmi.n	800e550 <_malloc_r+0xd0>
 800e50e:	2a0b      	cmp	r2, #11
 800e510:	d917      	bls.n	800e542 <_malloc_r+0xc2>
 800e512:	1961      	adds	r1, r4, r5
 800e514:	42a3      	cmp	r3, r4
 800e516:	6025      	str	r5, [r4, #0]
 800e518:	bf18      	it	ne
 800e51a:	6059      	strne	r1, [r3, #4]
 800e51c:	6863      	ldr	r3, [r4, #4]
 800e51e:	bf08      	it	eq
 800e520:	f8c8 1000 	streq.w	r1, [r8]
 800e524:	5162      	str	r2, [r4, r5]
 800e526:	604b      	str	r3, [r1, #4]
 800e528:	4630      	mov	r0, r6
 800e52a:	f000 f82f 	bl	800e58c <__malloc_unlock>
 800e52e:	f104 000b 	add.w	r0, r4, #11
 800e532:	1d23      	adds	r3, r4, #4
 800e534:	f020 0007 	bic.w	r0, r0, #7
 800e538:	1ac2      	subs	r2, r0, r3
 800e53a:	bf1c      	itt	ne
 800e53c:	1a1b      	subne	r3, r3, r0
 800e53e:	50a3      	strne	r3, [r4, r2]
 800e540:	e7af      	b.n	800e4a2 <_malloc_r+0x22>
 800e542:	6862      	ldr	r2, [r4, #4]
 800e544:	42a3      	cmp	r3, r4
 800e546:	bf0c      	ite	eq
 800e548:	f8c8 2000 	streq.w	r2, [r8]
 800e54c:	605a      	strne	r2, [r3, #4]
 800e54e:	e7eb      	b.n	800e528 <_malloc_r+0xa8>
 800e550:	4623      	mov	r3, r4
 800e552:	6864      	ldr	r4, [r4, #4]
 800e554:	e7ae      	b.n	800e4b4 <_malloc_r+0x34>
 800e556:	463c      	mov	r4, r7
 800e558:	687f      	ldr	r7, [r7, #4]
 800e55a:	e7b6      	b.n	800e4ca <_malloc_r+0x4a>
 800e55c:	461a      	mov	r2, r3
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	42a3      	cmp	r3, r4
 800e562:	d1fb      	bne.n	800e55c <_malloc_r+0xdc>
 800e564:	2300      	movs	r3, #0
 800e566:	6053      	str	r3, [r2, #4]
 800e568:	e7de      	b.n	800e528 <_malloc_r+0xa8>
 800e56a:	230c      	movs	r3, #12
 800e56c:	6033      	str	r3, [r6, #0]
 800e56e:	4630      	mov	r0, r6
 800e570:	f000 f80c 	bl	800e58c <__malloc_unlock>
 800e574:	e794      	b.n	800e4a0 <_malloc_r+0x20>
 800e576:	6005      	str	r5, [r0, #0]
 800e578:	e7d6      	b.n	800e528 <_malloc_r+0xa8>
 800e57a:	bf00      	nop
 800e57c:	24000d84 	.word	0x24000d84

0800e580 <__malloc_lock>:
 800e580:	4801      	ldr	r0, [pc, #4]	@ (800e588 <__malloc_lock+0x8>)
 800e582:	f001 be02 	b.w	801018a <__retarget_lock_acquire_recursive>
 800e586:	bf00      	nop
 800e588:	24000ec8 	.word	0x24000ec8

0800e58c <__malloc_unlock>:
 800e58c:	4801      	ldr	r0, [pc, #4]	@ (800e594 <__malloc_unlock+0x8>)
 800e58e:	f001 bdfd 	b.w	801018c <__retarget_lock_release_recursive>
 800e592:	bf00      	nop
 800e594:	24000ec8 	.word	0x24000ec8

0800e598 <sulp>:
 800e598:	b570      	push	{r4, r5, r6, lr}
 800e59a:	4604      	mov	r4, r0
 800e59c:	460d      	mov	r5, r1
 800e59e:	4616      	mov	r6, r2
 800e5a0:	ec45 4b10 	vmov	d0, r4, r5
 800e5a4:	f003 fafc 	bl	8011ba0 <__ulp>
 800e5a8:	b17e      	cbz	r6, 800e5ca <sulp+0x32>
 800e5aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e5ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	dd09      	ble.n	800e5ca <sulp+0x32>
 800e5b6:	051b      	lsls	r3, r3, #20
 800e5b8:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e5bc:	2000      	movs	r0, #0
 800e5be:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800e5c2:	ec41 0b17 	vmov	d7, r0, r1
 800e5c6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e5ca:	bd70      	pop	{r4, r5, r6, pc}
 800e5cc:	0000      	movs	r0, r0
	...

0800e5d0 <_strtod_l>:
 800e5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d4:	ed2d 8b0a 	vpush	{d8-d12}
 800e5d8:	b097      	sub	sp, #92	@ 0x5c
 800e5da:	4688      	mov	r8, r1
 800e5dc:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5de:	2200      	movs	r2, #0
 800e5e0:	9212      	str	r2, [sp, #72]	@ 0x48
 800e5e2:	9005      	str	r0, [sp, #20]
 800e5e4:	f04f 0a00 	mov.w	sl, #0
 800e5e8:	f04f 0b00 	mov.w	fp, #0
 800e5ec:	460a      	mov	r2, r1
 800e5ee:	9211      	str	r2, [sp, #68]	@ 0x44
 800e5f0:	7811      	ldrb	r1, [r2, #0]
 800e5f2:	292b      	cmp	r1, #43	@ 0x2b
 800e5f4:	d04c      	beq.n	800e690 <_strtod_l+0xc0>
 800e5f6:	d839      	bhi.n	800e66c <_strtod_l+0x9c>
 800e5f8:	290d      	cmp	r1, #13
 800e5fa:	d833      	bhi.n	800e664 <_strtod_l+0x94>
 800e5fc:	2908      	cmp	r1, #8
 800e5fe:	d833      	bhi.n	800e668 <_strtod_l+0x98>
 800e600:	2900      	cmp	r1, #0
 800e602:	d03c      	beq.n	800e67e <_strtod_l+0xae>
 800e604:	2200      	movs	r2, #0
 800e606:	9208      	str	r2, [sp, #32]
 800e608:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e60a:	782a      	ldrb	r2, [r5, #0]
 800e60c:	2a30      	cmp	r2, #48	@ 0x30
 800e60e:	f040 80b5 	bne.w	800e77c <_strtod_l+0x1ac>
 800e612:	786a      	ldrb	r2, [r5, #1]
 800e614:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e618:	2a58      	cmp	r2, #88	@ 0x58
 800e61a:	d170      	bne.n	800e6fe <_strtod_l+0x12e>
 800e61c:	9302      	str	r3, [sp, #8]
 800e61e:	9b08      	ldr	r3, [sp, #32]
 800e620:	9301      	str	r3, [sp, #4]
 800e622:	ab12      	add	r3, sp, #72	@ 0x48
 800e624:	9300      	str	r3, [sp, #0]
 800e626:	4a8b      	ldr	r2, [pc, #556]	@ (800e854 <_strtod_l+0x284>)
 800e628:	9805      	ldr	r0, [sp, #20]
 800e62a:	ab13      	add	r3, sp, #76	@ 0x4c
 800e62c:	a911      	add	r1, sp, #68	@ 0x44
 800e62e:	f002 fc5f 	bl	8010ef0 <__gethex>
 800e632:	f010 060f 	ands.w	r6, r0, #15
 800e636:	4604      	mov	r4, r0
 800e638:	d005      	beq.n	800e646 <_strtod_l+0x76>
 800e63a:	2e06      	cmp	r6, #6
 800e63c:	d12a      	bne.n	800e694 <_strtod_l+0xc4>
 800e63e:	3501      	adds	r5, #1
 800e640:	2300      	movs	r3, #0
 800e642:	9511      	str	r5, [sp, #68]	@ 0x44
 800e644:	9308      	str	r3, [sp, #32]
 800e646:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e648:	2b00      	cmp	r3, #0
 800e64a:	f040 852f 	bne.w	800f0ac <_strtod_l+0xadc>
 800e64e:	9b08      	ldr	r3, [sp, #32]
 800e650:	ec4b ab10 	vmov	d0, sl, fp
 800e654:	b1cb      	cbz	r3, 800e68a <_strtod_l+0xba>
 800e656:	eeb1 0b40 	vneg.f64	d0, d0
 800e65a:	b017      	add	sp, #92	@ 0x5c
 800e65c:	ecbd 8b0a 	vpop	{d8-d12}
 800e660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e664:	2920      	cmp	r1, #32
 800e666:	d1cd      	bne.n	800e604 <_strtod_l+0x34>
 800e668:	3201      	adds	r2, #1
 800e66a:	e7c0      	b.n	800e5ee <_strtod_l+0x1e>
 800e66c:	292d      	cmp	r1, #45	@ 0x2d
 800e66e:	d1c9      	bne.n	800e604 <_strtod_l+0x34>
 800e670:	2101      	movs	r1, #1
 800e672:	9108      	str	r1, [sp, #32]
 800e674:	1c51      	adds	r1, r2, #1
 800e676:	9111      	str	r1, [sp, #68]	@ 0x44
 800e678:	7852      	ldrb	r2, [r2, #1]
 800e67a:	2a00      	cmp	r2, #0
 800e67c:	d1c4      	bne.n	800e608 <_strtod_l+0x38>
 800e67e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e680:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e684:	2b00      	cmp	r3, #0
 800e686:	f040 850f 	bne.w	800f0a8 <_strtod_l+0xad8>
 800e68a:	ec4b ab10 	vmov	d0, sl, fp
 800e68e:	e7e4      	b.n	800e65a <_strtod_l+0x8a>
 800e690:	2100      	movs	r1, #0
 800e692:	e7ee      	b.n	800e672 <_strtod_l+0xa2>
 800e694:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e696:	b13a      	cbz	r2, 800e6a8 <_strtod_l+0xd8>
 800e698:	2135      	movs	r1, #53	@ 0x35
 800e69a:	a814      	add	r0, sp, #80	@ 0x50
 800e69c:	f003 fb77 	bl	8011d8e <__copybits>
 800e6a0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e6a2:	9805      	ldr	r0, [sp, #20]
 800e6a4:	f002 ff48 	bl	8011538 <_Bfree>
 800e6a8:	1e73      	subs	r3, r6, #1
 800e6aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e6ac:	2b04      	cmp	r3, #4
 800e6ae:	d806      	bhi.n	800e6be <_strtod_l+0xee>
 800e6b0:	e8df f003 	tbb	[pc, r3]
 800e6b4:	201d0314 	.word	0x201d0314
 800e6b8:	14          	.byte	0x14
 800e6b9:	00          	.byte	0x00
 800e6ba:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800e6be:	05e3      	lsls	r3, r4, #23
 800e6c0:	bf48      	it	mi
 800e6c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e6c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e6ca:	0d1b      	lsrs	r3, r3, #20
 800e6cc:	051b      	lsls	r3, r3, #20
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d1b9      	bne.n	800e646 <_strtod_l+0x76>
 800e6d2:	f001 fd2f 	bl	8010134 <__errno>
 800e6d6:	2322      	movs	r3, #34	@ 0x22
 800e6d8:	6003      	str	r3, [r0, #0]
 800e6da:	e7b4      	b.n	800e646 <_strtod_l+0x76>
 800e6dc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800e6e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e6e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e6e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e6ec:	e7e7      	b.n	800e6be <_strtod_l+0xee>
 800e6ee:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800e85c <_strtod_l+0x28c>
 800e6f2:	e7e4      	b.n	800e6be <_strtod_l+0xee>
 800e6f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e6f8:	f04f 3aff 	mov.w	sl, #4294967295
 800e6fc:	e7df      	b.n	800e6be <_strtod_l+0xee>
 800e6fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e700:	1c5a      	adds	r2, r3, #1
 800e702:	9211      	str	r2, [sp, #68]	@ 0x44
 800e704:	785b      	ldrb	r3, [r3, #1]
 800e706:	2b30      	cmp	r3, #48	@ 0x30
 800e708:	d0f9      	beq.n	800e6fe <_strtod_l+0x12e>
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d09b      	beq.n	800e646 <_strtod_l+0x76>
 800e70e:	2301      	movs	r3, #1
 800e710:	2600      	movs	r6, #0
 800e712:	9307      	str	r3, [sp, #28]
 800e714:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e716:	930a      	str	r3, [sp, #40]	@ 0x28
 800e718:	46b1      	mov	r9, r6
 800e71a:	4635      	mov	r5, r6
 800e71c:	220a      	movs	r2, #10
 800e71e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e720:	7804      	ldrb	r4, [r0, #0]
 800e722:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e726:	b2d9      	uxtb	r1, r3
 800e728:	2909      	cmp	r1, #9
 800e72a:	d929      	bls.n	800e780 <_strtod_l+0x1b0>
 800e72c:	494a      	ldr	r1, [pc, #296]	@ (800e858 <_strtod_l+0x288>)
 800e72e:	2201      	movs	r2, #1
 800e730:	f001 fc94 	bl	801005c <strncmp>
 800e734:	b378      	cbz	r0, 800e796 <_strtod_l+0x1c6>
 800e736:	2000      	movs	r0, #0
 800e738:	4622      	mov	r2, r4
 800e73a:	462b      	mov	r3, r5
 800e73c:	4607      	mov	r7, r0
 800e73e:	9006      	str	r0, [sp, #24]
 800e740:	2a65      	cmp	r2, #101	@ 0x65
 800e742:	d001      	beq.n	800e748 <_strtod_l+0x178>
 800e744:	2a45      	cmp	r2, #69	@ 0x45
 800e746:	d117      	bne.n	800e778 <_strtod_l+0x1a8>
 800e748:	b91b      	cbnz	r3, 800e752 <_strtod_l+0x182>
 800e74a:	9b07      	ldr	r3, [sp, #28]
 800e74c:	4303      	orrs	r3, r0
 800e74e:	d096      	beq.n	800e67e <_strtod_l+0xae>
 800e750:	2300      	movs	r3, #0
 800e752:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800e756:	f108 0201 	add.w	r2, r8, #1
 800e75a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e75c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e760:	2a2b      	cmp	r2, #43	@ 0x2b
 800e762:	d06b      	beq.n	800e83c <_strtod_l+0x26c>
 800e764:	2a2d      	cmp	r2, #45	@ 0x2d
 800e766:	d071      	beq.n	800e84c <_strtod_l+0x27c>
 800e768:	f04f 0e00 	mov.w	lr, #0
 800e76c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e770:	2c09      	cmp	r4, #9
 800e772:	d979      	bls.n	800e868 <_strtod_l+0x298>
 800e774:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e778:	2400      	movs	r4, #0
 800e77a:	e094      	b.n	800e8a6 <_strtod_l+0x2d6>
 800e77c:	2300      	movs	r3, #0
 800e77e:	e7c7      	b.n	800e710 <_strtod_l+0x140>
 800e780:	2d08      	cmp	r5, #8
 800e782:	f100 0001 	add.w	r0, r0, #1
 800e786:	bfd4      	ite	le
 800e788:	fb02 3909 	mlale	r9, r2, r9, r3
 800e78c:	fb02 3606 	mlagt	r6, r2, r6, r3
 800e790:	3501      	adds	r5, #1
 800e792:	9011      	str	r0, [sp, #68]	@ 0x44
 800e794:	e7c3      	b.n	800e71e <_strtod_l+0x14e>
 800e796:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e798:	1c5a      	adds	r2, r3, #1
 800e79a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e79c:	785a      	ldrb	r2, [r3, #1]
 800e79e:	b375      	cbz	r5, 800e7fe <_strtod_l+0x22e>
 800e7a0:	4607      	mov	r7, r0
 800e7a2:	462b      	mov	r3, r5
 800e7a4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e7a8:	2909      	cmp	r1, #9
 800e7aa:	d913      	bls.n	800e7d4 <_strtod_l+0x204>
 800e7ac:	2101      	movs	r1, #1
 800e7ae:	9106      	str	r1, [sp, #24]
 800e7b0:	e7c6      	b.n	800e740 <_strtod_l+0x170>
 800e7b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e7b4:	1c5a      	adds	r2, r3, #1
 800e7b6:	9211      	str	r2, [sp, #68]	@ 0x44
 800e7b8:	785a      	ldrb	r2, [r3, #1]
 800e7ba:	3001      	adds	r0, #1
 800e7bc:	2a30      	cmp	r2, #48	@ 0x30
 800e7be:	d0f8      	beq.n	800e7b2 <_strtod_l+0x1e2>
 800e7c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e7c4:	2b08      	cmp	r3, #8
 800e7c6:	f200 8476 	bhi.w	800f0b6 <_strtod_l+0xae6>
 800e7ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e7cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7ce:	4607      	mov	r7, r0
 800e7d0:	2000      	movs	r0, #0
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	3a30      	subs	r2, #48	@ 0x30
 800e7d6:	f100 0101 	add.w	r1, r0, #1
 800e7da:	d023      	beq.n	800e824 <_strtod_l+0x254>
 800e7dc:	440f      	add	r7, r1
 800e7de:	eb00 0c03 	add.w	ip, r0, r3
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	240a      	movs	r4, #10
 800e7e6:	4561      	cmp	r1, ip
 800e7e8:	d10b      	bne.n	800e802 <_strtod_l+0x232>
 800e7ea:	1c5c      	adds	r4, r3, #1
 800e7ec:	4403      	add	r3, r0
 800e7ee:	2b08      	cmp	r3, #8
 800e7f0:	4404      	add	r4, r0
 800e7f2:	dc11      	bgt.n	800e818 <_strtod_l+0x248>
 800e7f4:	230a      	movs	r3, #10
 800e7f6:	fb03 2909 	mla	r9, r3, r9, r2
 800e7fa:	2100      	movs	r1, #0
 800e7fc:	e013      	b.n	800e826 <_strtod_l+0x256>
 800e7fe:	4628      	mov	r0, r5
 800e800:	e7dc      	b.n	800e7bc <_strtod_l+0x1ec>
 800e802:	2908      	cmp	r1, #8
 800e804:	f101 0101 	add.w	r1, r1, #1
 800e808:	dc02      	bgt.n	800e810 <_strtod_l+0x240>
 800e80a:	fb04 f909 	mul.w	r9, r4, r9
 800e80e:	e7ea      	b.n	800e7e6 <_strtod_l+0x216>
 800e810:	2910      	cmp	r1, #16
 800e812:	bfd8      	it	le
 800e814:	4366      	mulle	r6, r4
 800e816:	e7e6      	b.n	800e7e6 <_strtod_l+0x216>
 800e818:	2b0f      	cmp	r3, #15
 800e81a:	dcee      	bgt.n	800e7fa <_strtod_l+0x22a>
 800e81c:	230a      	movs	r3, #10
 800e81e:	fb03 2606 	mla	r6, r3, r6, r2
 800e822:	e7ea      	b.n	800e7fa <_strtod_l+0x22a>
 800e824:	461c      	mov	r4, r3
 800e826:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e828:	1c5a      	adds	r2, r3, #1
 800e82a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e82c:	785a      	ldrb	r2, [r3, #1]
 800e82e:	4608      	mov	r0, r1
 800e830:	4623      	mov	r3, r4
 800e832:	e7b7      	b.n	800e7a4 <_strtod_l+0x1d4>
 800e834:	2301      	movs	r3, #1
 800e836:	2700      	movs	r7, #0
 800e838:	9306      	str	r3, [sp, #24]
 800e83a:	e786      	b.n	800e74a <_strtod_l+0x17a>
 800e83c:	f04f 0e00 	mov.w	lr, #0
 800e840:	f108 0202 	add.w	r2, r8, #2
 800e844:	9211      	str	r2, [sp, #68]	@ 0x44
 800e846:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e84a:	e78f      	b.n	800e76c <_strtod_l+0x19c>
 800e84c:	f04f 0e01 	mov.w	lr, #1
 800e850:	e7f6      	b.n	800e840 <_strtod_l+0x270>
 800e852:	bf00      	nop
 800e854:	08013300 	.word	0x08013300
 800e858:	080132e8 	.word	0x080132e8
 800e85c:	7ff00000 	.word	0x7ff00000
 800e860:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e862:	1c54      	adds	r4, r2, #1
 800e864:	9411      	str	r4, [sp, #68]	@ 0x44
 800e866:	7852      	ldrb	r2, [r2, #1]
 800e868:	2a30      	cmp	r2, #48	@ 0x30
 800e86a:	d0f9      	beq.n	800e860 <_strtod_l+0x290>
 800e86c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e870:	2c08      	cmp	r4, #8
 800e872:	d881      	bhi.n	800e778 <_strtod_l+0x1a8>
 800e874:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e878:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e87a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e87c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e87e:	1c51      	adds	r1, r2, #1
 800e880:	9111      	str	r1, [sp, #68]	@ 0x44
 800e882:	7852      	ldrb	r2, [r2, #1]
 800e884:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e888:	2c09      	cmp	r4, #9
 800e88a:	d938      	bls.n	800e8fe <_strtod_l+0x32e>
 800e88c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e88e:	1b0c      	subs	r4, r1, r4
 800e890:	2c08      	cmp	r4, #8
 800e892:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800e896:	dc02      	bgt.n	800e89e <_strtod_l+0x2ce>
 800e898:	4564      	cmp	r4, ip
 800e89a:	bfa8      	it	ge
 800e89c:	4664      	movge	r4, ip
 800e89e:	f1be 0f00 	cmp.w	lr, #0
 800e8a2:	d000      	beq.n	800e8a6 <_strtod_l+0x2d6>
 800e8a4:	4264      	negs	r4, r4
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d14e      	bne.n	800e948 <_strtod_l+0x378>
 800e8aa:	9b07      	ldr	r3, [sp, #28]
 800e8ac:	4318      	orrs	r0, r3
 800e8ae:	f47f aeca 	bne.w	800e646 <_strtod_l+0x76>
 800e8b2:	9b06      	ldr	r3, [sp, #24]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	f47f aee2 	bne.w	800e67e <_strtod_l+0xae>
 800e8ba:	2a69      	cmp	r2, #105	@ 0x69
 800e8bc:	d027      	beq.n	800e90e <_strtod_l+0x33e>
 800e8be:	dc24      	bgt.n	800e90a <_strtod_l+0x33a>
 800e8c0:	2a49      	cmp	r2, #73	@ 0x49
 800e8c2:	d024      	beq.n	800e90e <_strtod_l+0x33e>
 800e8c4:	2a4e      	cmp	r2, #78	@ 0x4e
 800e8c6:	f47f aeda 	bne.w	800e67e <_strtod_l+0xae>
 800e8ca:	4997      	ldr	r1, [pc, #604]	@ (800eb28 <_strtod_l+0x558>)
 800e8cc:	a811      	add	r0, sp, #68	@ 0x44
 800e8ce:	f002 fd31 	bl	8011334 <__match>
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	f43f aed3 	beq.w	800e67e <_strtod_l+0xae>
 800e8d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	2b28      	cmp	r3, #40	@ 0x28
 800e8de:	d12d      	bne.n	800e93c <_strtod_l+0x36c>
 800e8e0:	4992      	ldr	r1, [pc, #584]	@ (800eb2c <_strtod_l+0x55c>)
 800e8e2:	aa14      	add	r2, sp, #80	@ 0x50
 800e8e4:	a811      	add	r0, sp, #68	@ 0x44
 800e8e6:	f002 fd39 	bl	801135c <__hexnan>
 800e8ea:	2805      	cmp	r0, #5
 800e8ec:	d126      	bne.n	800e93c <_strtod_l+0x36c>
 800e8ee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e8f0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e8f4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e8f8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e8fc:	e6a3      	b.n	800e646 <_strtod_l+0x76>
 800e8fe:	240a      	movs	r4, #10
 800e900:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e904:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e908:	e7b8      	b.n	800e87c <_strtod_l+0x2ac>
 800e90a:	2a6e      	cmp	r2, #110	@ 0x6e
 800e90c:	e7db      	b.n	800e8c6 <_strtod_l+0x2f6>
 800e90e:	4988      	ldr	r1, [pc, #544]	@ (800eb30 <_strtod_l+0x560>)
 800e910:	a811      	add	r0, sp, #68	@ 0x44
 800e912:	f002 fd0f 	bl	8011334 <__match>
 800e916:	2800      	cmp	r0, #0
 800e918:	f43f aeb1 	beq.w	800e67e <_strtod_l+0xae>
 800e91c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e91e:	4985      	ldr	r1, [pc, #532]	@ (800eb34 <_strtod_l+0x564>)
 800e920:	3b01      	subs	r3, #1
 800e922:	a811      	add	r0, sp, #68	@ 0x44
 800e924:	9311      	str	r3, [sp, #68]	@ 0x44
 800e926:	f002 fd05 	bl	8011334 <__match>
 800e92a:	b910      	cbnz	r0, 800e932 <_strtod_l+0x362>
 800e92c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e92e:	3301      	adds	r3, #1
 800e930:	9311      	str	r3, [sp, #68]	@ 0x44
 800e932:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800eb48 <_strtod_l+0x578>
 800e936:	f04f 0a00 	mov.w	sl, #0
 800e93a:	e684      	b.n	800e646 <_strtod_l+0x76>
 800e93c:	487e      	ldr	r0, [pc, #504]	@ (800eb38 <_strtod_l+0x568>)
 800e93e:	f001 fc37 	bl	80101b0 <nan>
 800e942:	ec5b ab10 	vmov	sl, fp, d0
 800e946:	e67e      	b.n	800e646 <_strtod_l+0x76>
 800e948:	ee07 9a90 	vmov	s15, r9
 800e94c:	1be2      	subs	r2, r4, r7
 800e94e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e952:	2d00      	cmp	r5, #0
 800e954:	bf08      	it	eq
 800e956:	461d      	moveq	r5, r3
 800e958:	2b10      	cmp	r3, #16
 800e95a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e95c:	461a      	mov	r2, r3
 800e95e:	bfa8      	it	ge
 800e960:	2210      	movge	r2, #16
 800e962:	2b09      	cmp	r3, #9
 800e964:	ec5b ab17 	vmov	sl, fp, d7
 800e968:	dc15      	bgt.n	800e996 <_strtod_l+0x3c6>
 800e96a:	1be1      	subs	r1, r4, r7
 800e96c:	2900      	cmp	r1, #0
 800e96e:	f43f ae6a 	beq.w	800e646 <_strtod_l+0x76>
 800e972:	eba4 0107 	sub.w	r1, r4, r7
 800e976:	dd72      	ble.n	800ea5e <_strtod_l+0x48e>
 800e978:	2916      	cmp	r1, #22
 800e97a:	dc59      	bgt.n	800ea30 <_strtod_l+0x460>
 800e97c:	4b6f      	ldr	r3, [pc, #444]	@ (800eb3c <_strtod_l+0x56c>)
 800e97e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e984:	ed93 7b00 	vldr	d7, [r3]
 800e988:	ec4b ab16 	vmov	d6, sl, fp
 800e98c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e990:	ec5b ab17 	vmov	sl, fp, d7
 800e994:	e657      	b.n	800e646 <_strtod_l+0x76>
 800e996:	4969      	ldr	r1, [pc, #420]	@ (800eb3c <_strtod_l+0x56c>)
 800e998:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e99c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e9a0:	ee06 6a90 	vmov	s13, r6
 800e9a4:	2b0f      	cmp	r3, #15
 800e9a6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e9aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e9ae:	ec5b ab16 	vmov	sl, fp, d6
 800e9b2:	ddda      	ble.n	800e96a <_strtod_l+0x39a>
 800e9b4:	1a9a      	subs	r2, r3, r2
 800e9b6:	1be1      	subs	r1, r4, r7
 800e9b8:	440a      	add	r2, r1
 800e9ba:	2a00      	cmp	r2, #0
 800e9bc:	f340 8094 	ble.w	800eae8 <_strtod_l+0x518>
 800e9c0:	f012 000f 	ands.w	r0, r2, #15
 800e9c4:	d00a      	beq.n	800e9dc <_strtod_l+0x40c>
 800e9c6:	495d      	ldr	r1, [pc, #372]	@ (800eb3c <_strtod_l+0x56c>)
 800e9c8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e9cc:	ed91 7b00 	vldr	d7, [r1]
 800e9d0:	ec4b ab16 	vmov	d6, sl, fp
 800e9d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e9d8:	ec5b ab17 	vmov	sl, fp, d7
 800e9dc:	f032 020f 	bics.w	r2, r2, #15
 800e9e0:	d073      	beq.n	800eaca <_strtod_l+0x4fa>
 800e9e2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e9e6:	dd47      	ble.n	800ea78 <_strtod_l+0x4a8>
 800e9e8:	2400      	movs	r4, #0
 800e9ea:	4625      	mov	r5, r4
 800e9ec:	9407      	str	r4, [sp, #28]
 800e9ee:	4626      	mov	r6, r4
 800e9f0:	9a05      	ldr	r2, [sp, #20]
 800e9f2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800eb48 <_strtod_l+0x578>
 800e9f6:	2322      	movs	r3, #34	@ 0x22
 800e9f8:	6013      	str	r3, [r2, #0]
 800e9fa:	f04f 0a00 	mov.w	sl, #0
 800e9fe:	9b07      	ldr	r3, [sp, #28]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f43f ae20 	beq.w	800e646 <_strtod_l+0x76>
 800ea06:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ea08:	9805      	ldr	r0, [sp, #20]
 800ea0a:	f002 fd95 	bl	8011538 <_Bfree>
 800ea0e:	9805      	ldr	r0, [sp, #20]
 800ea10:	4631      	mov	r1, r6
 800ea12:	f002 fd91 	bl	8011538 <_Bfree>
 800ea16:	9805      	ldr	r0, [sp, #20]
 800ea18:	4629      	mov	r1, r5
 800ea1a:	f002 fd8d 	bl	8011538 <_Bfree>
 800ea1e:	9907      	ldr	r1, [sp, #28]
 800ea20:	9805      	ldr	r0, [sp, #20]
 800ea22:	f002 fd89 	bl	8011538 <_Bfree>
 800ea26:	9805      	ldr	r0, [sp, #20]
 800ea28:	4621      	mov	r1, r4
 800ea2a:	f002 fd85 	bl	8011538 <_Bfree>
 800ea2e:	e60a      	b.n	800e646 <_strtod_l+0x76>
 800ea30:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800ea34:	1be0      	subs	r0, r4, r7
 800ea36:	4281      	cmp	r1, r0
 800ea38:	dbbc      	blt.n	800e9b4 <_strtod_l+0x3e4>
 800ea3a:	4a40      	ldr	r2, [pc, #256]	@ (800eb3c <_strtod_l+0x56c>)
 800ea3c:	f1c3 030f 	rsb	r3, r3, #15
 800ea40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ea44:	ed91 7b00 	vldr	d7, [r1]
 800ea48:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea4a:	ec4b ab16 	vmov	d6, sl, fp
 800ea4e:	1acb      	subs	r3, r1, r3
 800ea50:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ea54:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea58:	ed92 6b00 	vldr	d6, [r2]
 800ea5c:	e796      	b.n	800e98c <_strtod_l+0x3bc>
 800ea5e:	3116      	adds	r1, #22
 800ea60:	dba8      	blt.n	800e9b4 <_strtod_l+0x3e4>
 800ea62:	4b36      	ldr	r3, [pc, #216]	@ (800eb3c <_strtod_l+0x56c>)
 800ea64:	1b3c      	subs	r4, r7, r4
 800ea66:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ea6a:	ed94 7b00 	vldr	d7, [r4]
 800ea6e:	ec4b ab16 	vmov	d6, sl, fp
 800ea72:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ea76:	e78b      	b.n	800e990 <_strtod_l+0x3c0>
 800ea78:	2000      	movs	r0, #0
 800ea7a:	ec4b ab17 	vmov	d7, sl, fp
 800ea7e:	4e30      	ldr	r6, [pc, #192]	@ (800eb40 <_strtod_l+0x570>)
 800ea80:	1112      	asrs	r2, r2, #4
 800ea82:	4601      	mov	r1, r0
 800ea84:	2a01      	cmp	r2, #1
 800ea86:	dc23      	bgt.n	800ead0 <_strtod_l+0x500>
 800ea88:	b108      	cbz	r0, 800ea8e <_strtod_l+0x4be>
 800ea8a:	ec5b ab17 	vmov	sl, fp, d7
 800ea8e:	4a2c      	ldr	r2, [pc, #176]	@ (800eb40 <_strtod_l+0x570>)
 800ea90:	482c      	ldr	r0, [pc, #176]	@ (800eb44 <_strtod_l+0x574>)
 800ea92:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ea96:	ed92 7b00 	vldr	d7, [r2]
 800ea9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ea9e:	ec4b ab16 	vmov	d6, sl, fp
 800eaa2:	4a29      	ldr	r2, [pc, #164]	@ (800eb48 <_strtod_l+0x578>)
 800eaa4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eaa8:	ee17 1a90 	vmov	r1, s15
 800eaac:	400a      	ands	r2, r1
 800eaae:	4282      	cmp	r2, r0
 800eab0:	ec5b ab17 	vmov	sl, fp, d7
 800eab4:	d898      	bhi.n	800e9e8 <_strtod_l+0x418>
 800eab6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800eaba:	4282      	cmp	r2, r0
 800eabc:	bf86      	itte	hi
 800eabe:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800eb4c <_strtod_l+0x57c>
 800eac2:	f04f 3aff 	movhi.w	sl, #4294967295
 800eac6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800eaca:	2200      	movs	r2, #0
 800eacc:	9206      	str	r2, [sp, #24]
 800eace:	e076      	b.n	800ebbe <_strtod_l+0x5ee>
 800ead0:	f012 0f01 	tst.w	r2, #1
 800ead4:	d004      	beq.n	800eae0 <_strtod_l+0x510>
 800ead6:	ed96 6b00 	vldr	d6, [r6]
 800eada:	2001      	movs	r0, #1
 800eadc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eae0:	3101      	adds	r1, #1
 800eae2:	1052      	asrs	r2, r2, #1
 800eae4:	3608      	adds	r6, #8
 800eae6:	e7cd      	b.n	800ea84 <_strtod_l+0x4b4>
 800eae8:	d0ef      	beq.n	800eaca <_strtod_l+0x4fa>
 800eaea:	4252      	negs	r2, r2
 800eaec:	f012 000f 	ands.w	r0, r2, #15
 800eaf0:	d00a      	beq.n	800eb08 <_strtod_l+0x538>
 800eaf2:	4912      	ldr	r1, [pc, #72]	@ (800eb3c <_strtod_l+0x56c>)
 800eaf4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800eaf8:	ed91 7b00 	vldr	d7, [r1]
 800eafc:	ec4b ab16 	vmov	d6, sl, fp
 800eb00:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800eb04:	ec5b ab17 	vmov	sl, fp, d7
 800eb08:	1112      	asrs	r2, r2, #4
 800eb0a:	d0de      	beq.n	800eaca <_strtod_l+0x4fa>
 800eb0c:	2a1f      	cmp	r2, #31
 800eb0e:	dd1f      	ble.n	800eb50 <_strtod_l+0x580>
 800eb10:	2400      	movs	r4, #0
 800eb12:	4625      	mov	r5, r4
 800eb14:	9407      	str	r4, [sp, #28]
 800eb16:	4626      	mov	r6, r4
 800eb18:	9a05      	ldr	r2, [sp, #20]
 800eb1a:	2322      	movs	r3, #34	@ 0x22
 800eb1c:	f04f 0a00 	mov.w	sl, #0
 800eb20:	f04f 0b00 	mov.w	fp, #0
 800eb24:	6013      	str	r3, [r2, #0]
 800eb26:	e76a      	b.n	800e9fe <_strtod_l+0x42e>
 800eb28:	0801334d 	.word	0x0801334d
 800eb2c:	080132ec 	.word	0x080132ec
 800eb30:	08013345 	.word	0x08013345
 800eb34:	08013382 	.word	0x08013382
 800eb38:	08013730 	.word	0x08013730
 800eb3c:	08013500 	.word	0x08013500
 800eb40:	080134d8 	.word	0x080134d8
 800eb44:	7ca00000 	.word	0x7ca00000
 800eb48:	7ff00000 	.word	0x7ff00000
 800eb4c:	7fefffff 	.word	0x7fefffff
 800eb50:	f012 0110 	ands.w	r1, r2, #16
 800eb54:	bf18      	it	ne
 800eb56:	216a      	movne	r1, #106	@ 0x6a
 800eb58:	9106      	str	r1, [sp, #24]
 800eb5a:	ec4b ab17 	vmov	d7, sl, fp
 800eb5e:	49b0      	ldr	r1, [pc, #704]	@ (800ee20 <_strtod_l+0x850>)
 800eb60:	2000      	movs	r0, #0
 800eb62:	07d6      	lsls	r6, r2, #31
 800eb64:	d504      	bpl.n	800eb70 <_strtod_l+0x5a0>
 800eb66:	ed91 6b00 	vldr	d6, [r1]
 800eb6a:	2001      	movs	r0, #1
 800eb6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eb70:	1052      	asrs	r2, r2, #1
 800eb72:	f101 0108 	add.w	r1, r1, #8
 800eb76:	d1f4      	bne.n	800eb62 <_strtod_l+0x592>
 800eb78:	b108      	cbz	r0, 800eb7e <_strtod_l+0x5ae>
 800eb7a:	ec5b ab17 	vmov	sl, fp, d7
 800eb7e:	9a06      	ldr	r2, [sp, #24]
 800eb80:	b1b2      	cbz	r2, 800ebb0 <_strtod_l+0x5e0>
 800eb82:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800eb86:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800eb8a:	2a00      	cmp	r2, #0
 800eb8c:	4658      	mov	r0, fp
 800eb8e:	dd0f      	ble.n	800ebb0 <_strtod_l+0x5e0>
 800eb90:	2a1f      	cmp	r2, #31
 800eb92:	dd55      	ble.n	800ec40 <_strtod_l+0x670>
 800eb94:	2a34      	cmp	r2, #52	@ 0x34
 800eb96:	bfde      	ittt	le
 800eb98:	f04f 32ff 	movle.w	r2, #4294967295
 800eb9c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800eba0:	408a      	lslle	r2, r1
 800eba2:	f04f 0a00 	mov.w	sl, #0
 800eba6:	bfcc      	ite	gt
 800eba8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ebac:	ea02 0b00 	andle.w	fp, r2, r0
 800ebb0:	ec4b ab17 	vmov	d7, sl, fp
 800ebb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ebb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebbc:	d0a8      	beq.n	800eb10 <_strtod_l+0x540>
 800ebbe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ebc0:	9805      	ldr	r0, [sp, #20]
 800ebc2:	f8cd 9000 	str.w	r9, [sp]
 800ebc6:	462a      	mov	r2, r5
 800ebc8:	f002 fd1e 	bl	8011608 <__s2b>
 800ebcc:	9007      	str	r0, [sp, #28]
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	f43f af0a 	beq.w	800e9e8 <_strtod_l+0x418>
 800ebd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebd6:	1b3f      	subs	r7, r7, r4
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	bfb4      	ite	lt
 800ebdc:	463b      	movlt	r3, r7
 800ebde:	2300      	movge	r3, #0
 800ebe0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebe4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800ee10 <_strtod_l+0x840>
 800ebe8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ebec:	2400      	movs	r4, #0
 800ebee:	930d      	str	r3, [sp, #52]	@ 0x34
 800ebf0:	4625      	mov	r5, r4
 800ebf2:	9b07      	ldr	r3, [sp, #28]
 800ebf4:	9805      	ldr	r0, [sp, #20]
 800ebf6:	6859      	ldr	r1, [r3, #4]
 800ebf8:	f002 fc5e 	bl	80114b8 <_Balloc>
 800ebfc:	4606      	mov	r6, r0
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	f43f aef6 	beq.w	800e9f0 <_strtod_l+0x420>
 800ec04:	9b07      	ldr	r3, [sp, #28]
 800ec06:	691a      	ldr	r2, [r3, #16]
 800ec08:	ec4b ab19 	vmov	d9, sl, fp
 800ec0c:	3202      	adds	r2, #2
 800ec0e:	f103 010c 	add.w	r1, r3, #12
 800ec12:	0092      	lsls	r2, r2, #2
 800ec14:	300c      	adds	r0, #12
 800ec16:	f001 faba 	bl	801018e <memcpy>
 800ec1a:	eeb0 0b49 	vmov.f64	d0, d9
 800ec1e:	9805      	ldr	r0, [sp, #20]
 800ec20:	aa14      	add	r2, sp, #80	@ 0x50
 800ec22:	a913      	add	r1, sp, #76	@ 0x4c
 800ec24:	f003 f82c 	bl	8011c80 <__d2b>
 800ec28:	9012      	str	r0, [sp, #72]	@ 0x48
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	f43f aee0 	beq.w	800e9f0 <_strtod_l+0x420>
 800ec30:	9805      	ldr	r0, [sp, #20]
 800ec32:	2101      	movs	r1, #1
 800ec34:	f002 fd7e 	bl	8011734 <__i2b>
 800ec38:	4605      	mov	r5, r0
 800ec3a:	b940      	cbnz	r0, 800ec4e <_strtod_l+0x67e>
 800ec3c:	2500      	movs	r5, #0
 800ec3e:	e6d7      	b.n	800e9f0 <_strtod_l+0x420>
 800ec40:	f04f 31ff 	mov.w	r1, #4294967295
 800ec44:	fa01 f202 	lsl.w	r2, r1, r2
 800ec48:	ea02 0a0a 	and.w	sl, r2, sl
 800ec4c:	e7b0      	b.n	800ebb0 <_strtod_l+0x5e0>
 800ec4e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800ec50:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ec52:	2f00      	cmp	r7, #0
 800ec54:	bfab      	itete	ge
 800ec56:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800ec58:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800ec5a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800ec5e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800ec62:	bfac      	ite	ge
 800ec64:	eb07 0903 	addge.w	r9, r7, r3
 800ec68:	eba3 0807 	sublt.w	r8, r3, r7
 800ec6c:	9b06      	ldr	r3, [sp, #24]
 800ec6e:	1aff      	subs	r7, r7, r3
 800ec70:	4417      	add	r7, r2
 800ec72:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800ec76:	4a6b      	ldr	r2, [pc, #428]	@ (800ee24 <_strtod_l+0x854>)
 800ec78:	3f01      	subs	r7, #1
 800ec7a:	4297      	cmp	r7, r2
 800ec7c:	da51      	bge.n	800ed22 <_strtod_l+0x752>
 800ec7e:	1bd1      	subs	r1, r2, r7
 800ec80:	291f      	cmp	r1, #31
 800ec82:	eba3 0301 	sub.w	r3, r3, r1
 800ec86:	f04f 0201 	mov.w	r2, #1
 800ec8a:	dc3e      	bgt.n	800ed0a <_strtod_l+0x73a>
 800ec8c:	408a      	lsls	r2, r1
 800ec8e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ec90:	2200      	movs	r2, #0
 800ec92:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ec94:	eb09 0703 	add.w	r7, r9, r3
 800ec98:	4498      	add	r8, r3
 800ec9a:	9b06      	ldr	r3, [sp, #24]
 800ec9c:	45b9      	cmp	r9, r7
 800ec9e:	4498      	add	r8, r3
 800eca0:	464b      	mov	r3, r9
 800eca2:	bfa8      	it	ge
 800eca4:	463b      	movge	r3, r7
 800eca6:	4543      	cmp	r3, r8
 800eca8:	bfa8      	it	ge
 800ecaa:	4643      	movge	r3, r8
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	bfc2      	ittt	gt
 800ecb0:	1aff      	subgt	r7, r7, r3
 800ecb2:	eba8 0803 	subgt.w	r8, r8, r3
 800ecb6:	eba9 0903 	subgt.w	r9, r9, r3
 800ecba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	dd16      	ble.n	800ecee <_strtod_l+0x71e>
 800ecc0:	4629      	mov	r1, r5
 800ecc2:	9805      	ldr	r0, [sp, #20]
 800ecc4:	461a      	mov	r2, r3
 800ecc6:	f002 fdf5 	bl	80118b4 <__pow5mult>
 800ecca:	4605      	mov	r5, r0
 800eccc:	2800      	cmp	r0, #0
 800ecce:	d0b5      	beq.n	800ec3c <_strtod_l+0x66c>
 800ecd0:	4601      	mov	r1, r0
 800ecd2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ecd4:	9805      	ldr	r0, [sp, #20]
 800ecd6:	f002 fd43 	bl	8011760 <__multiply>
 800ecda:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	f43f ae87 	beq.w	800e9f0 <_strtod_l+0x420>
 800ece2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ece4:	9805      	ldr	r0, [sp, #20]
 800ece6:	f002 fc27 	bl	8011538 <_Bfree>
 800ecea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecec:	9312      	str	r3, [sp, #72]	@ 0x48
 800ecee:	2f00      	cmp	r7, #0
 800ecf0:	dc1b      	bgt.n	800ed2a <_strtod_l+0x75a>
 800ecf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	dd21      	ble.n	800ed3c <_strtod_l+0x76c>
 800ecf8:	4631      	mov	r1, r6
 800ecfa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ecfc:	9805      	ldr	r0, [sp, #20]
 800ecfe:	f002 fdd9 	bl	80118b4 <__pow5mult>
 800ed02:	4606      	mov	r6, r0
 800ed04:	b9d0      	cbnz	r0, 800ed3c <_strtod_l+0x76c>
 800ed06:	2600      	movs	r6, #0
 800ed08:	e672      	b.n	800e9f0 <_strtod_l+0x420>
 800ed0a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800ed0e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800ed12:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800ed16:	37e2      	adds	r7, #226	@ 0xe2
 800ed18:	fa02 f107 	lsl.w	r1, r2, r7
 800ed1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ed1e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ed20:	e7b8      	b.n	800ec94 <_strtod_l+0x6c4>
 800ed22:	2200      	movs	r2, #0
 800ed24:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ed26:	2201      	movs	r2, #1
 800ed28:	e7f9      	b.n	800ed1e <_strtod_l+0x74e>
 800ed2a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ed2c:	9805      	ldr	r0, [sp, #20]
 800ed2e:	463a      	mov	r2, r7
 800ed30:	f002 fe1a 	bl	8011968 <__lshift>
 800ed34:	9012      	str	r0, [sp, #72]	@ 0x48
 800ed36:	2800      	cmp	r0, #0
 800ed38:	d1db      	bne.n	800ecf2 <_strtod_l+0x722>
 800ed3a:	e659      	b.n	800e9f0 <_strtod_l+0x420>
 800ed3c:	f1b8 0f00 	cmp.w	r8, #0
 800ed40:	dd07      	ble.n	800ed52 <_strtod_l+0x782>
 800ed42:	4631      	mov	r1, r6
 800ed44:	9805      	ldr	r0, [sp, #20]
 800ed46:	4642      	mov	r2, r8
 800ed48:	f002 fe0e 	bl	8011968 <__lshift>
 800ed4c:	4606      	mov	r6, r0
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d0d9      	beq.n	800ed06 <_strtod_l+0x736>
 800ed52:	f1b9 0f00 	cmp.w	r9, #0
 800ed56:	dd08      	ble.n	800ed6a <_strtod_l+0x79a>
 800ed58:	4629      	mov	r1, r5
 800ed5a:	9805      	ldr	r0, [sp, #20]
 800ed5c:	464a      	mov	r2, r9
 800ed5e:	f002 fe03 	bl	8011968 <__lshift>
 800ed62:	4605      	mov	r5, r0
 800ed64:	2800      	cmp	r0, #0
 800ed66:	f43f ae43 	beq.w	800e9f0 <_strtod_l+0x420>
 800ed6a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ed6c:	9805      	ldr	r0, [sp, #20]
 800ed6e:	4632      	mov	r2, r6
 800ed70:	f002 fe82 	bl	8011a78 <__mdiff>
 800ed74:	4604      	mov	r4, r0
 800ed76:	2800      	cmp	r0, #0
 800ed78:	f43f ae3a 	beq.w	800e9f0 <_strtod_l+0x420>
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800ed82:	60c3      	str	r3, [r0, #12]
 800ed84:	4629      	mov	r1, r5
 800ed86:	f002 fe5b 	bl	8011a40 <__mcmp>
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	da4e      	bge.n	800ee2c <_strtod_l+0x85c>
 800ed8e:	ea58 080a 	orrs.w	r8, r8, sl
 800ed92:	d174      	bne.n	800ee7e <_strtod_l+0x8ae>
 800ed94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d170      	bne.n	800ee7e <_strtod_l+0x8ae>
 800ed9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eda0:	0d1b      	lsrs	r3, r3, #20
 800eda2:	051b      	lsls	r3, r3, #20
 800eda4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eda8:	d969      	bls.n	800ee7e <_strtod_l+0x8ae>
 800edaa:	6963      	ldr	r3, [r4, #20]
 800edac:	b913      	cbnz	r3, 800edb4 <_strtod_l+0x7e4>
 800edae:	6923      	ldr	r3, [r4, #16]
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	dd64      	ble.n	800ee7e <_strtod_l+0x8ae>
 800edb4:	4621      	mov	r1, r4
 800edb6:	2201      	movs	r2, #1
 800edb8:	9805      	ldr	r0, [sp, #20]
 800edba:	f002 fdd5 	bl	8011968 <__lshift>
 800edbe:	4629      	mov	r1, r5
 800edc0:	4604      	mov	r4, r0
 800edc2:	f002 fe3d 	bl	8011a40 <__mcmp>
 800edc6:	2800      	cmp	r0, #0
 800edc8:	dd59      	ble.n	800ee7e <_strtod_l+0x8ae>
 800edca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800edce:	9a06      	ldr	r2, [sp, #24]
 800edd0:	0d1b      	lsrs	r3, r3, #20
 800edd2:	051b      	lsls	r3, r3, #20
 800edd4:	2a00      	cmp	r2, #0
 800edd6:	d070      	beq.n	800eeba <_strtod_l+0x8ea>
 800edd8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eddc:	d86d      	bhi.n	800eeba <_strtod_l+0x8ea>
 800edde:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ede2:	f67f ae99 	bls.w	800eb18 <_strtod_l+0x548>
 800ede6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800ee18 <_strtod_l+0x848>
 800edea:	ec4b ab16 	vmov	d6, sl, fp
 800edee:	4b0e      	ldr	r3, [pc, #56]	@ (800ee28 <_strtod_l+0x858>)
 800edf0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800edf4:	ee17 2a90 	vmov	r2, s15
 800edf8:	4013      	ands	r3, r2
 800edfa:	ec5b ab17 	vmov	sl, fp, d7
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	f47f ae01 	bne.w	800ea06 <_strtod_l+0x436>
 800ee04:	9a05      	ldr	r2, [sp, #20]
 800ee06:	2322      	movs	r3, #34	@ 0x22
 800ee08:	6013      	str	r3, [r2, #0]
 800ee0a:	e5fc      	b.n	800ea06 <_strtod_l+0x436>
 800ee0c:	f3af 8000 	nop.w
 800ee10:	ffc00000 	.word	0xffc00000
 800ee14:	41dfffff 	.word	0x41dfffff
 800ee18:	00000000 	.word	0x00000000
 800ee1c:	39500000 	.word	0x39500000
 800ee20:	08013318 	.word	0x08013318
 800ee24:	fffffc02 	.word	0xfffffc02
 800ee28:	7ff00000 	.word	0x7ff00000
 800ee2c:	46d9      	mov	r9, fp
 800ee2e:	d15d      	bne.n	800eeec <_strtod_l+0x91c>
 800ee30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee34:	f1b8 0f00 	cmp.w	r8, #0
 800ee38:	d02a      	beq.n	800ee90 <_strtod_l+0x8c0>
 800ee3a:	4aab      	ldr	r2, [pc, #684]	@ (800f0e8 <_strtod_l+0xb18>)
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	d12a      	bne.n	800ee96 <_strtod_l+0x8c6>
 800ee40:	9b06      	ldr	r3, [sp, #24]
 800ee42:	4652      	mov	r2, sl
 800ee44:	b1fb      	cbz	r3, 800ee86 <_strtod_l+0x8b6>
 800ee46:	4ba9      	ldr	r3, [pc, #676]	@ (800f0ec <_strtod_l+0xb1c>)
 800ee48:	ea0b 0303 	and.w	r3, fp, r3
 800ee4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ee50:	f04f 31ff 	mov.w	r1, #4294967295
 800ee54:	d81a      	bhi.n	800ee8c <_strtod_l+0x8bc>
 800ee56:	0d1b      	lsrs	r3, r3, #20
 800ee58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ee5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d118      	bne.n	800ee96 <_strtod_l+0x8c6>
 800ee64:	4ba2      	ldr	r3, [pc, #648]	@ (800f0f0 <_strtod_l+0xb20>)
 800ee66:	4599      	cmp	r9, r3
 800ee68:	d102      	bne.n	800ee70 <_strtod_l+0x8a0>
 800ee6a:	3201      	adds	r2, #1
 800ee6c:	f43f adc0 	beq.w	800e9f0 <_strtod_l+0x420>
 800ee70:	4b9e      	ldr	r3, [pc, #632]	@ (800f0ec <_strtod_l+0xb1c>)
 800ee72:	ea09 0303 	and.w	r3, r9, r3
 800ee76:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ee7a:	f04f 0a00 	mov.w	sl, #0
 800ee7e:	9b06      	ldr	r3, [sp, #24]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d1b0      	bne.n	800ede6 <_strtod_l+0x816>
 800ee84:	e5bf      	b.n	800ea06 <_strtod_l+0x436>
 800ee86:	f04f 33ff 	mov.w	r3, #4294967295
 800ee8a:	e7e9      	b.n	800ee60 <_strtod_l+0x890>
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	e7e7      	b.n	800ee60 <_strtod_l+0x890>
 800ee90:	ea53 030a 	orrs.w	r3, r3, sl
 800ee94:	d099      	beq.n	800edca <_strtod_l+0x7fa>
 800ee96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee98:	b1c3      	cbz	r3, 800eecc <_strtod_l+0x8fc>
 800ee9a:	ea13 0f09 	tst.w	r3, r9
 800ee9e:	d0ee      	beq.n	800ee7e <_strtod_l+0x8ae>
 800eea0:	9a06      	ldr	r2, [sp, #24]
 800eea2:	4650      	mov	r0, sl
 800eea4:	4659      	mov	r1, fp
 800eea6:	f1b8 0f00 	cmp.w	r8, #0
 800eeaa:	d013      	beq.n	800eed4 <_strtod_l+0x904>
 800eeac:	f7ff fb74 	bl	800e598 <sulp>
 800eeb0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800eeb4:	ec5b ab17 	vmov	sl, fp, d7
 800eeb8:	e7e1      	b.n	800ee7e <_strtod_l+0x8ae>
 800eeba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800eebe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eec2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eec6:	f04f 3aff 	mov.w	sl, #4294967295
 800eeca:	e7d8      	b.n	800ee7e <_strtod_l+0x8ae>
 800eecc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eece:	ea13 0f0a 	tst.w	r3, sl
 800eed2:	e7e4      	b.n	800ee9e <_strtod_l+0x8ce>
 800eed4:	f7ff fb60 	bl	800e598 <sulp>
 800eed8:	ee39 0b40 	vsub.f64	d0, d9, d0
 800eedc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800eee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eee4:	ec5b ab10 	vmov	sl, fp, d0
 800eee8:	d1c9      	bne.n	800ee7e <_strtod_l+0x8ae>
 800eeea:	e615      	b.n	800eb18 <_strtod_l+0x548>
 800eeec:	4629      	mov	r1, r5
 800eeee:	4620      	mov	r0, r4
 800eef0:	f002 ff1e 	bl	8011d30 <__ratio>
 800eef4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800eef8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800eefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef00:	d85d      	bhi.n	800efbe <_strtod_l+0x9ee>
 800ef02:	f1b8 0f00 	cmp.w	r8, #0
 800ef06:	d164      	bne.n	800efd2 <_strtod_l+0xa02>
 800ef08:	f1ba 0f00 	cmp.w	sl, #0
 800ef0c:	d14b      	bne.n	800efa6 <_strtod_l+0x9d6>
 800ef0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef12:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d160      	bne.n	800efdc <_strtod_l+0xa0c>
 800ef1a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800ef1e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ef22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef26:	d401      	bmi.n	800ef2c <_strtod_l+0x95c>
 800ef28:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ef2c:	eeb1 ab48 	vneg.f64	d10, d8
 800ef30:	486e      	ldr	r0, [pc, #440]	@ (800f0ec <_strtod_l+0xb1c>)
 800ef32:	4970      	ldr	r1, [pc, #448]	@ (800f0f4 <_strtod_l+0xb24>)
 800ef34:	ea09 0700 	and.w	r7, r9, r0
 800ef38:	428f      	cmp	r7, r1
 800ef3a:	ec53 2b1a 	vmov	r2, r3, d10
 800ef3e:	d17d      	bne.n	800f03c <_strtod_l+0xa6c>
 800ef40:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800ef44:	ec4b ab1c 	vmov	d12, sl, fp
 800ef48:	eeb0 0b4c 	vmov.f64	d0, d12
 800ef4c:	f002 fe28 	bl	8011ba0 <__ulp>
 800ef50:	4866      	ldr	r0, [pc, #408]	@ (800f0ec <_strtod_l+0xb1c>)
 800ef52:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800ef56:	ee1c 3a90 	vmov	r3, s25
 800ef5a:	4a67      	ldr	r2, [pc, #412]	@ (800f0f8 <_strtod_l+0xb28>)
 800ef5c:	ea03 0100 	and.w	r1, r3, r0
 800ef60:	4291      	cmp	r1, r2
 800ef62:	ec5b ab1c 	vmov	sl, fp, d12
 800ef66:	d93c      	bls.n	800efe2 <_strtod_l+0xa12>
 800ef68:	ee19 2a90 	vmov	r2, s19
 800ef6c:	4b60      	ldr	r3, [pc, #384]	@ (800f0f0 <_strtod_l+0xb20>)
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d104      	bne.n	800ef7c <_strtod_l+0x9ac>
 800ef72:	ee19 3a10 	vmov	r3, s18
 800ef76:	3301      	adds	r3, #1
 800ef78:	f43f ad3a 	beq.w	800e9f0 <_strtod_l+0x420>
 800ef7c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800f0f0 <_strtod_l+0xb20>
 800ef80:	f04f 3aff 	mov.w	sl, #4294967295
 800ef84:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ef86:	9805      	ldr	r0, [sp, #20]
 800ef88:	f002 fad6 	bl	8011538 <_Bfree>
 800ef8c:	9805      	ldr	r0, [sp, #20]
 800ef8e:	4631      	mov	r1, r6
 800ef90:	f002 fad2 	bl	8011538 <_Bfree>
 800ef94:	9805      	ldr	r0, [sp, #20]
 800ef96:	4629      	mov	r1, r5
 800ef98:	f002 face 	bl	8011538 <_Bfree>
 800ef9c:	9805      	ldr	r0, [sp, #20]
 800ef9e:	4621      	mov	r1, r4
 800efa0:	f002 faca 	bl	8011538 <_Bfree>
 800efa4:	e625      	b.n	800ebf2 <_strtod_l+0x622>
 800efa6:	f1ba 0f01 	cmp.w	sl, #1
 800efaa:	d103      	bne.n	800efb4 <_strtod_l+0x9e4>
 800efac:	f1bb 0f00 	cmp.w	fp, #0
 800efb0:	f43f adb2 	beq.w	800eb18 <_strtod_l+0x548>
 800efb4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800efb8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800efbc:	e7b8      	b.n	800ef30 <_strtod_l+0x960>
 800efbe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800efc2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800efc6:	f1b8 0f00 	cmp.w	r8, #0
 800efca:	d0af      	beq.n	800ef2c <_strtod_l+0x95c>
 800efcc:	eeb0 ab48 	vmov.f64	d10, d8
 800efd0:	e7ae      	b.n	800ef30 <_strtod_l+0x960>
 800efd2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800efd6:	eeb0 8b4a 	vmov.f64	d8, d10
 800efda:	e7a9      	b.n	800ef30 <_strtod_l+0x960>
 800efdc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800efe0:	e7a6      	b.n	800ef30 <_strtod_l+0x960>
 800efe2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800efe6:	9b06      	ldr	r3, [sp, #24]
 800efe8:	46d9      	mov	r9, fp
 800efea:	2b00      	cmp	r3, #0
 800efec:	d1ca      	bne.n	800ef84 <_strtod_l+0x9b4>
 800efee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eff2:	0d1b      	lsrs	r3, r3, #20
 800eff4:	051b      	lsls	r3, r3, #20
 800eff6:	429f      	cmp	r7, r3
 800eff8:	d1c4      	bne.n	800ef84 <_strtod_l+0x9b4>
 800effa:	ec51 0b18 	vmov	r0, r1, d8
 800effe:	f7f1 fbb3 	bl	8000768 <__aeabi_d2lz>
 800f002:	f7f1 fb6b 	bl	80006dc <__aeabi_l2d>
 800f006:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800f00a:	ec41 0b17 	vmov	d7, r0, r1
 800f00e:	ea49 090a 	orr.w	r9, r9, sl
 800f012:	ea59 0908 	orrs.w	r9, r9, r8
 800f016:	ee38 8b47 	vsub.f64	d8, d8, d7
 800f01a:	d03c      	beq.n	800f096 <_strtod_l+0xac6>
 800f01c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800f0d0 <_strtod_l+0xb00>
 800f020:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f028:	f53f aced 	bmi.w	800ea06 <_strtod_l+0x436>
 800f02c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800f0d8 <_strtod_l+0xb08>
 800f030:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f038:	dda4      	ble.n	800ef84 <_strtod_l+0x9b4>
 800f03a:	e4e4      	b.n	800ea06 <_strtod_l+0x436>
 800f03c:	9906      	ldr	r1, [sp, #24]
 800f03e:	b1e1      	cbz	r1, 800f07a <_strtod_l+0xaaa>
 800f040:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800f044:	d819      	bhi.n	800f07a <_strtod_l+0xaaa>
 800f046:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800f04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f04e:	d811      	bhi.n	800f074 <_strtod_l+0xaa4>
 800f050:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800f054:	ee18 3a10 	vmov	r3, s16
 800f058:	2b01      	cmp	r3, #1
 800f05a:	bf38      	it	cc
 800f05c:	2301      	movcc	r3, #1
 800f05e:	ee08 3a10 	vmov	s16, r3
 800f062:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800f066:	f1b8 0f00 	cmp.w	r8, #0
 800f06a:	d111      	bne.n	800f090 <_strtod_l+0xac0>
 800f06c:	eeb1 7b48 	vneg.f64	d7, d8
 800f070:	ec53 2b17 	vmov	r2, r3, d7
 800f074:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800f078:	1bcb      	subs	r3, r1, r7
 800f07a:	eeb0 0b49 	vmov.f64	d0, d9
 800f07e:	ec43 2b1a 	vmov	d10, r2, r3
 800f082:	f002 fd8d 	bl	8011ba0 <__ulp>
 800f086:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800f08a:	ec5b ab19 	vmov	sl, fp, d9
 800f08e:	e7aa      	b.n	800efe6 <_strtod_l+0xa16>
 800f090:	eeb0 7b48 	vmov.f64	d7, d8
 800f094:	e7ec      	b.n	800f070 <_strtod_l+0xaa0>
 800f096:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800f0e0 <_strtod_l+0xb10>
 800f09a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a2:	f57f af6f 	bpl.w	800ef84 <_strtod_l+0x9b4>
 800f0a6:	e4ae      	b.n	800ea06 <_strtod_l+0x436>
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	9308      	str	r3, [sp, #32]
 800f0ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f0b0:	6013      	str	r3, [r2, #0]
 800f0b2:	f7ff bacc 	b.w	800e64e <_strtod_l+0x7e>
 800f0b6:	2a65      	cmp	r2, #101	@ 0x65
 800f0b8:	f43f abbc 	beq.w	800e834 <_strtod_l+0x264>
 800f0bc:	2a45      	cmp	r2, #69	@ 0x45
 800f0be:	f43f abb9 	beq.w	800e834 <_strtod_l+0x264>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	9306      	str	r3, [sp, #24]
 800f0c6:	f7ff bbf0 	b.w	800e8aa <_strtod_l+0x2da>
 800f0ca:	bf00      	nop
 800f0cc:	f3af 8000 	nop.w
 800f0d0:	94a03595 	.word	0x94a03595
 800f0d4:	3fdfffff 	.word	0x3fdfffff
 800f0d8:	35afe535 	.word	0x35afe535
 800f0dc:	3fe00000 	.word	0x3fe00000
 800f0e0:	94a03595 	.word	0x94a03595
 800f0e4:	3fcfffff 	.word	0x3fcfffff
 800f0e8:	000fffff 	.word	0x000fffff
 800f0ec:	7ff00000 	.word	0x7ff00000
 800f0f0:	7fefffff 	.word	0x7fefffff
 800f0f4:	7fe00000 	.word	0x7fe00000
 800f0f8:	7c9fffff 	.word	0x7c9fffff

0800f0fc <_strtod_r>:
 800f0fc:	4b01      	ldr	r3, [pc, #4]	@ (800f104 <_strtod_r+0x8>)
 800f0fe:	f7ff ba67 	b.w	800e5d0 <_strtod_l>
 800f102:	bf00      	nop
 800f104:	24000058 	.word	0x24000058

0800f108 <__cvt>:
 800f108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f10a:	ed2d 8b02 	vpush	{d8}
 800f10e:	eeb0 8b40 	vmov.f64	d8, d0
 800f112:	b085      	sub	sp, #20
 800f114:	4617      	mov	r7, r2
 800f116:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f118:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f11a:	ee18 2a90 	vmov	r2, s17
 800f11e:	f025 0520 	bic.w	r5, r5, #32
 800f122:	2a00      	cmp	r2, #0
 800f124:	bfb6      	itet	lt
 800f126:	222d      	movlt	r2, #45	@ 0x2d
 800f128:	2200      	movge	r2, #0
 800f12a:	eeb1 8b40 	vneglt.f64	d8, d0
 800f12e:	2d46      	cmp	r5, #70	@ 0x46
 800f130:	460c      	mov	r4, r1
 800f132:	701a      	strb	r2, [r3, #0]
 800f134:	d004      	beq.n	800f140 <__cvt+0x38>
 800f136:	2d45      	cmp	r5, #69	@ 0x45
 800f138:	d100      	bne.n	800f13c <__cvt+0x34>
 800f13a:	3401      	adds	r4, #1
 800f13c:	2102      	movs	r1, #2
 800f13e:	e000      	b.n	800f142 <__cvt+0x3a>
 800f140:	2103      	movs	r1, #3
 800f142:	ab03      	add	r3, sp, #12
 800f144:	9301      	str	r3, [sp, #4]
 800f146:	ab02      	add	r3, sp, #8
 800f148:	9300      	str	r3, [sp, #0]
 800f14a:	4622      	mov	r2, r4
 800f14c:	4633      	mov	r3, r6
 800f14e:	eeb0 0b48 	vmov.f64	d0, d8
 800f152:	f001 f8c5 	bl	80102e0 <_dtoa_r>
 800f156:	2d47      	cmp	r5, #71	@ 0x47
 800f158:	d114      	bne.n	800f184 <__cvt+0x7c>
 800f15a:	07fb      	lsls	r3, r7, #31
 800f15c:	d50a      	bpl.n	800f174 <__cvt+0x6c>
 800f15e:	1902      	adds	r2, r0, r4
 800f160:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f168:	bf08      	it	eq
 800f16a:	9203      	streq	r2, [sp, #12]
 800f16c:	2130      	movs	r1, #48	@ 0x30
 800f16e:	9b03      	ldr	r3, [sp, #12]
 800f170:	4293      	cmp	r3, r2
 800f172:	d319      	bcc.n	800f1a8 <__cvt+0xa0>
 800f174:	9b03      	ldr	r3, [sp, #12]
 800f176:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f178:	1a1b      	subs	r3, r3, r0
 800f17a:	6013      	str	r3, [r2, #0]
 800f17c:	b005      	add	sp, #20
 800f17e:	ecbd 8b02 	vpop	{d8}
 800f182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f184:	2d46      	cmp	r5, #70	@ 0x46
 800f186:	eb00 0204 	add.w	r2, r0, r4
 800f18a:	d1e9      	bne.n	800f160 <__cvt+0x58>
 800f18c:	7803      	ldrb	r3, [r0, #0]
 800f18e:	2b30      	cmp	r3, #48	@ 0x30
 800f190:	d107      	bne.n	800f1a2 <__cvt+0x9a>
 800f192:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f19a:	bf1c      	itt	ne
 800f19c:	f1c4 0401 	rsbne	r4, r4, #1
 800f1a0:	6034      	strne	r4, [r6, #0]
 800f1a2:	6833      	ldr	r3, [r6, #0]
 800f1a4:	441a      	add	r2, r3
 800f1a6:	e7db      	b.n	800f160 <__cvt+0x58>
 800f1a8:	1c5c      	adds	r4, r3, #1
 800f1aa:	9403      	str	r4, [sp, #12]
 800f1ac:	7019      	strb	r1, [r3, #0]
 800f1ae:	e7de      	b.n	800f16e <__cvt+0x66>

0800f1b0 <__exponent>:
 800f1b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1b2:	2900      	cmp	r1, #0
 800f1b4:	bfba      	itte	lt
 800f1b6:	4249      	neglt	r1, r1
 800f1b8:	232d      	movlt	r3, #45	@ 0x2d
 800f1ba:	232b      	movge	r3, #43	@ 0x2b
 800f1bc:	2909      	cmp	r1, #9
 800f1be:	7002      	strb	r2, [r0, #0]
 800f1c0:	7043      	strb	r3, [r0, #1]
 800f1c2:	dd29      	ble.n	800f218 <__exponent+0x68>
 800f1c4:	f10d 0307 	add.w	r3, sp, #7
 800f1c8:	461d      	mov	r5, r3
 800f1ca:	270a      	movs	r7, #10
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	fbb1 f6f7 	udiv	r6, r1, r7
 800f1d2:	fb07 1416 	mls	r4, r7, r6, r1
 800f1d6:	3430      	adds	r4, #48	@ 0x30
 800f1d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f1dc:	460c      	mov	r4, r1
 800f1de:	2c63      	cmp	r4, #99	@ 0x63
 800f1e0:	f103 33ff 	add.w	r3, r3, #4294967295
 800f1e4:	4631      	mov	r1, r6
 800f1e6:	dcf1      	bgt.n	800f1cc <__exponent+0x1c>
 800f1e8:	3130      	adds	r1, #48	@ 0x30
 800f1ea:	1e94      	subs	r4, r2, #2
 800f1ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f1f0:	1c41      	adds	r1, r0, #1
 800f1f2:	4623      	mov	r3, r4
 800f1f4:	42ab      	cmp	r3, r5
 800f1f6:	d30a      	bcc.n	800f20e <__exponent+0x5e>
 800f1f8:	f10d 0309 	add.w	r3, sp, #9
 800f1fc:	1a9b      	subs	r3, r3, r2
 800f1fe:	42ac      	cmp	r4, r5
 800f200:	bf88      	it	hi
 800f202:	2300      	movhi	r3, #0
 800f204:	3302      	adds	r3, #2
 800f206:	4403      	add	r3, r0
 800f208:	1a18      	subs	r0, r3, r0
 800f20a:	b003      	add	sp, #12
 800f20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f20e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f212:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f216:	e7ed      	b.n	800f1f4 <__exponent+0x44>
 800f218:	2330      	movs	r3, #48	@ 0x30
 800f21a:	3130      	adds	r1, #48	@ 0x30
 800f21c:	7083      	strb	r3, [r0, #2]
 800f21e:	70c1      	strb	r1, [r0, #3]
 800f220:	1d03      	adds	r3, r0, #4
 800f222:	e7f1      	b.n	800f208 <__exponent+0x58>
 800f224:	0000      	movs	r0, r0
	...

0800f228 <_printf_float>:
 800f228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f22c:	b08d      	sub	sp, #52	@ 0x34
 800f22e:	460c      	mov	r4, r1
 800f230:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f234:	4616      	mov	r6, r2
 800f236:	461f      	mov	r7, r3
 800f238:	4605      	mov	r5, r0
 800f23a:	f000 ff21 	bl	8010080 <_localeconv_r>
 800f23e:	f8d0 b000 	ldr.w	fp, [r0]
 800f242:	4658      	mov	r0, fp
 800f244:	f7f1 f8b4 	bl	80003b0 <strlen>
 800f248:	2300      	movs	r3, #0
 800f24a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f24c:	f8d8 3000 	ldr.w	r3, [r8]
 800f250:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f254:	6822      	ldr	r2, [r4, #0]
 800f256:	9005      	str	r0, [sp, #20]
 800f258:	3307      	adds	r3, #7
 800f25a:	f023 0307 	bic.w	r3, r3, #7
 800f25e:	f103 0108 	add.w	r1, r3, #8
 800f262:	f8c8 1000 	str.w	r1, [r8]
 800f266:	ed93 0b00 	vldr	d0, [r3]
 800f26a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f4c8 <_printf_float+0x2a0>
 800f26e:	eeb0 7bc0 	vabs.f64	d7, d0
 800f272:	eeb4 7b46 	vcmp.f64	d7, d6
 800f276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f27a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800f27e:	dd24      	ble.n	800f2ca <_printf_float+0xa2>
 800f280:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f288:	d502      	bpl.n	800f290 <_printf_float+0x68>
 800f28a:	232d      	movs	r3, #45	@ 0x2d
 800f28c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f290:	498f      	ldr	r1, [pc, #572]	@ (800f4d0 <_printf_float+0x2a8>)
 800f292:	4b90      	ldr	r3, [pc, #576]	@ (800f4d4 <_printf_float+0x2ac>)
 800f294:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f298:	bf94      	ite	ls
 800f29a:	4688      	movls	r8, r1
 800f29c:	4698      	movhi	r8, r3
 800f29e:	f022 0204 	bic.w	r2, r2, #4
 800f2a2:	2303      	movs	r3, #3
 800f2a4:	6123      	str	r3, [r4, #16]
 800f2a6:	6022      	str	r2, [r4, #0]
 800f2a8:	f04f 0a00 	mov.w	sl, #0
 800f2ac:	9700      	str	r7, [sp, #0]
 800f2ae:	4633      	mov	r3, r6
 800f2b0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f2b2:	4621      	mov	r1, r4
 800f2b4:	4628      	mov	r0, r5
 800f2b6:	f000 f9d1 	bl	800f65c <_printf_common>
 800f2ba:	3001      	adds	r0, #1
 800f2bc:	f040 8089 	bne.w	800f3d2 <_printf_float+0x1aa>
 800f2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c4:	b00d      	add	sp, #52	@ 0x34
 800f2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ca:	eeb4 0b40 	vcmp.f64	d0, d0
 800f2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d2:	d709      	bvc.n	800f2e8 <_printf_float+0xc0>
 800f2d4:	ee10 3a90 	vmov	r3, s1
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	bfbc      	itt	lt
 800f2dc:	232d      	movlt	r3, #45	@ 0x2d
 800f2de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f2e2:	497d      	ldr	r1, [pc, #500]	@ (800f4d8 <_printf_float+0x2b0>)
 800f2e4:	4b7d      	ldr	r3, [pc, #500]	@ (800f4dc <_printf_float+0x2b4>)
 800f2e6:	e7d5      	b.n	800f294 <_printf_float+0x6c>
 800f2e8:	6863      	ldr	r3, [r4, #4]
 800f2ea:	1c59      	adds	r1, r3, #1
 800f2ec:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f2f0:	d139      	bne.n	800f366 <_printf_float+0x13e>
 800f2f2:	2306      	movs	r3, #6
 800f2f4:	6063      	str	r3, [r4, #4]
 800f2f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	6022      	str	r2, [r4, #0]
 800f2fe:	9303      	str	r3, [sp, #12]
 800f300:	ab0a      	add	r3, sp, #40	@ 0x28
 800f302:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f306:	ab09      	add	r3, sp, #36	@ 0x24
 800f308:	9300      	str	r3, [sp, #0]
 800f30a:	6861      	ldr	r1, [r4, #4]
 800f30c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f310:	4628      	mov	r0, r5
 800f312:	f7ff fef9 	bl	800f108 <__cvt>
 800f316:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f31a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f31c:	4680      	mov	r8, r0
 800f31e:	d129      	bne.n	800f374 <_printf_float+0x14c>
 800f320:	1cc8      	adds	r0, r1, #3
 800f322:	db02      	blt.n	800f32a <_printf_float+0x102>
 800f324:	6863      	ldr	r3, [r4, #4]
 800f326:	4299      	cmp	r1, r3
 800f328:	dd41      	ble.n	800f3ae <_printf_float+0x186>
 800f32a:	f1a9 0902 	sub.w	r9, r9, #2
 800f32e:	fa5f f989 	uxtb.w	r9, r9
 800f332:	3901      	subs	r1, #1
 800f334:	464a      	mov	r2, r9
 800f336:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f33a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f33c:	f7ff ff38 	bl	800f1b0 <__exponent>
 800f340:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f342:	1813      	adds	r3, r2, r0
 800f344:	2a01      	cmp	r2, #1
 800f346:	4682      	mov	sl, r0
 800f348:	6123      	str	r3, [r4, #16]
 800f34a:	dc02      	bgt.n	800f352 <_printf_float+0x12a>
 800f34c:	6822      	ldr	r2, [r4, #0]
 800f34e:	07d2      	lsls	r2, r2, #31
 800f350:	d501      	bpl.n	800f356 <_printf_float+0x12e>
 800f352:	3301      	adds	r3, #1
 800f354:	6123      	str	r3, [r4, #16]
 800f356:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d0a6      	beq.n	800f2ac <_printf_float+0x84>
 800f35e:	232d      	movs	r3, #45	@ 0x2d
 800f360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f364:	e7a2      	b.n	800f2ac <_printf_float+0x84>
 800f366:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f36a:	d1c4      	bne.n	800f2f6 <_printf_float+0xce>
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d1c2      	bne.n	800f2f6 <_printf_float+0xce>
 800f370:	2301      	movs	r3, #1
 800f372:	e7bf      	b.n	800f2f4 <_printf_float+0xcc>
 800f374:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f378:	d9db      	bls.n	800f332 <_printf_float+0x10a>
 800f37a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f37e:	d118      	bne.n	800f3b2 <_printf_float+0x18a>
 800f380:	2900      	cmp	r1, #0
 800f382:	6863      	ldr	r3, [r4, #4]
 800f384:	dd0b      	ble.n	800f39e <_printf_float+0x176>
 800f386:	6121      	str	r1, [r4, #16]
 800f388:	b913      	cbnz	r3, 800f390 <_printf_float+0x168>
 800f38a:	6822      	ldr	r2, [r4, #0]
 800f38c:	07d0      	lsls	r0, r2, #31
 800f38e:	d502      	bpl.n	800f396 <_printf_float+0x16e>
 800f390:	3301      	adds	r3, #1
 800f392:	440b      	add	r3, r1
 800f394:	6123      	str	r3, [r4, #16]
 800f396:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f398:	f04f 0a00 	mov.w	sl, #0
 800f39c:	e7db      	b.n	800f356 <_printf_float+0x12e>
 800f39e:	b913      	cbnz	r3, 800f3a6 <_printf_float+0x17e>
 800f3a0:	6822      	ldr	r2, [r4, #0]
 800f3a2:	07d2      	lsls	r2, r2, #31
 800f3a4:	d501      	bpl.n	800f3aa <_printf_float+0x182>
 800f3a6:	3302      	adds	r3, #2
 800f3a8:	e7f4      	b.n	800f394 <_printf_float+0x16c>
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e7f2      	b.n	800f394 <_printf_float+0x16c>
 800f3ae:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f3b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3b4:	4299      	cmp	r1, r3
 800f3b6:	db05      	blt.n	800f3c4 <_printf_float+0x19c>
 800f3b8:	6823      	ldr	r3, [r4, #0]
 800f3ba:	6121      	str	r1, [r4, #16]
 800f3bc:	07d8      	lsls	r0, r3, #31
 800f3be:	d5ea      	bpl.n	800f396 <_printf_float+0x16e>
 800f3c0:	1c4b      	adds	r3, r1, #1
 800f3c2:	e7e7      	b.n	800f394 <_printf_float+0x16c>
 800f3c4:	2900      	cmp	r1, #0
 800f3c6:	bfd4      	ite	le
 800f3c8:	f1c1 0202 	rsble	r2, r1, #2
 800f3cc:	2201      	movgt	r2, #1
 800f3ce:	4413      	add	r3, r2
 800f3d0:	e7e0      	b.n	800f394 <_printf_float+0x16c>
 800f3d2:	6823      	ldr	r3, [r4, #0]
 800f3d4:	055a      	lsls	r2, r3, #21
 800f3d6:	d407      	bmi.n	800f3e8 <_printf_float+0x1c0>
 800f3d8:	6923      	ldr	r3, [r4, #16]
 800f3da:	4642      	mov	r2, r8
 800f3dc:	4631      	mov	r1, r6
 800f3de:	4628      	mov	r0, r5
 800f3e0:	47b8      	blx	r7
 800f3e2:	3001      	adds	r0, #1
 800f3e4:	d12a      	bne.n	800f43c <_printf_float+0x214>
 800f3e6:	e76b      	b.n	800f2c0 <_printf_float+0x98>
 800f3e8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f3ec:	f240 80e0 	bls.w	800f5b0 <_printf_float+0x388>
 800f3f0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f3f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3fc:	d133      	bne.n	800f466 <_printf_float+0x23e>
 800f3fe:	4a38      	ldr	r2, [pc, #224]	@ (800f4e0 <_printf_float+0x2b8>)
 800f400:	2301      	movs	r3, #1
 800f402:	4631      	mov	r1, r6
 800f404:	4628      	mov	r0, r5
 800f406:	47b8      	blx	r7
 800f408:	3001      	adds	r0, #1
 800f40a:	f43f af59 	beq.w	800f2c0 <_printf_float+0x98>
 800f40e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f412:	4543      	cmp	r3, r8
 800f414:	db02      	blt.n	800f41c <_printf_float+0x1f4>
 800f416:	6823      	ldr	r3, [r4, #0]
 800f418:	07d8      	lsls	r0, r3, #31
 800f41a:	d50f      	bpl.n	800f43c <_printf_float+0x214>
 800f41c:	9b05      	ldr	r3, [sp, #20]
 800f41e:	465a      	mov	r2, fp
 800f420:	4631      	mov	r1, r6
 800f422:	4628      	mov	r0, r5
 800f424:	47b8      	blx	r7
 800f426:	3001      	adds	r0, #1
 800f428:	f43f af4a 	beq.w	800f2c0 <_printf_float+0x98>
 800f42c:	f04f 0900 	mov.w	r9, #0
 800f430:	f108 38ff 	add.w	r8, r8, #4294967295
 800f434:	f104 0a1a 	add.w	sl, r4, #26
 800f438:	45c8      	cmp	r8, r9
 800f43a:	dc09      	bgt.n	800f450 <_printf_float+0x228>
 800f43c:	6823      	ldr	r3, [r4, #0]
 800f43e:	079b      	lsls	r3, r3, #30
 800f440:	f100 8107 	bmi.w	800f652 <_printf_float+0x42a>
 800f444:	68e0      	ldr	r0, [r4, #12]
 800f446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f448:	4298      	cmp	r0, r3
 800f44a:	bfb8      	it	lt
 800f44c:	4618      	movlt	r0, r3
 800f44e:	e739      	b.n	800f2c4 <_printf_float+0x9c>
 800f450:	2301      	movs	r3, #1
 800f452:	4652      	mov	r2, sl
 800f454:	4631      	mov	r1, r6
 800f456:	4628      	mov	r0, r5
 800f458:	47b8      	blx	r7
 800f45a:	3001      	adds	r0, #1
 800f45c:	f43f af30 	beq.w	800f2c0 <_printf_float+0x98>
 800f460:	f109 0901 	add.w	r9, r9, #1
 800f464:	e7e8      	b.n	800f438 <_printf_float+0x210>
 800f466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f468:	2b00      	cmp	r3, #0
 800f46a:	dc3b      	bgt.n	800f4e4 <_printf_float+0x2bc>
 800f46c:	4a1c      	ldr	r2, [pc, #112]	@ (800f4e0 <_printf_float+0x2b8>)
 800f46e:	2301      	movs	r3, #1
 800f470:	4631      	mov	r1, r6
 800f472:	4628      	mov	r0, r5
 800f474:	47b8      	blx	r7
 800f476:	3001      	adds	r0, #1
 800f478:	f43f af22 	beq.w	800f2c0 <_printf_float+0x98>
 800f47c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f480:	ea59 0303 	orrs.w	r3, r9, r3
 800f484:	d102      	bne.n	800f48c <_printf_float+0x264>
 800f486:	6823      	ldr	r3, [r4, #0]
 800f488:	07d9      	lsls	r1, r3, #31
 800f48a:	d5d7      	bpl.n	800f43c <_printf_float+0x214>
 800f48c:	9b05      	ldr	r3, [sp, #20]
 800f48e:	465a      	mov	r2, fp
 800f490:	4631      	mov	r1, r6
 800f492:	4628      	mov	r0, r5
 800f494:	47b8      	blx	r7
 800f496:	3001      	adds	r0, #1
 800f498:	f43f af12 	beq.w	800f2c0 <_printf_float+0x98>
 800f49c:	f04f 0a00 	mov.w	sl, #0
 800f4a0:	f104 0b1a 	add.w	fp, r4, #26
 800f4a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4a6:	425b      	negs	r3, r3
 800f4a8:	4553      	cmp	r3, sl
 800f4aa:	dc01      	bgt.n	800f4b0 <_printf_float+0x288>
 800f4ac:	464b      	mov	r3, r9
 800f4ae:	e794      	b.n	800f3da <_printf_float+0x1b2>
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	465a      	mov	r2, fp
 800f4b4:	4631      	mov	r1, r6
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	47b8      	blx	r7
 800f4ba:	3001      	adds	r0, #1
 800f4bc:	f43f af00 	beq.w	800f2c0 <_printf_float+0x98>
 800f4c0:	f10a 0a01 	add.w	sl, sl, #1
 800f4c4:	e7ee      	b.n	800f4a4 <_printf_float+0x27c>
 800f4c6:	bf00      	nop
 800f4c8:	ffffffff 	.word	0xffffffff
 800f4cc:	7fefffff 	.word	0x7fefffff
 800f4d0:	08013340 	.word	0x08013340
 800f4d4:	08013344 	.word	0x08013344
 800f4d8:	08013348 	.word	0x08013348
 800f4dc:	0801334c 	.word	0x0801334c
 800f4e0:	080136f0 	.word	0x080136f0
 800f4e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f4e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f4ea:	4553      	cmp	r3, sl
 800f4ec:	bfa8      	it	ge
 800f4ee:	4653      	movge	r3, sl
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	4699      	mov	r9, r3
 800f4f4:	dc37      	bgt.n	800f566 <_printf_float+0x33e>
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	9307      	str	r3, [sp, #28]
 800f4fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4fe:	f104 021a 	add.w	r2, r4, #26
 800f502:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f504:	9907      	ldr	r1, [sp, #28]
 800f506:	9306      	str	r3, [sp, #24]
 800f508:	eba3 0309 	sub.w	r3, r3, r9
 800f50c:	428b      	cmp	r3, r1
 800f50e:	dc31      	bgt.n	800f574 <_printf_float+0x34c>
 800f510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f512:	459a      	cmp	sl, r3
 800f514:	dc3b      	bgt.n	800f58e <_printf_float+0x366>
 800f516:	6823      	ldr	r3, [r4, #0]
 800f518:	07da      	lsls	r2, r3, #31
 800f51a:	d438      	bmi.n	800f58e <_printf_float+0x366>
 800f51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f51e:	ebaa 0903 	sub.w	r9, sl, r3
 800f522:	9b06      	ldr	r3, [sp, #24]
 800f524:	ebaa 0303 	sub.w	r3, sl, r3
 800f528:	4599      	cmp	r9, r3
 800f52a:	bfa8      	it	ge
 800f52c:	4699      	movge	r9, r3
 800f52e:	f1b9 0f00 	cmp.w	r9, #0
 800f532:	dc34      	bgt.n	800f59e <_printf_float+0x376>
 800f534:	f04f 0800 	mov.w	r8, #0
 800f538:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f53c:	f104 0b1a 	add.w	fp, r4, #26
 800f540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f542:	ebaa 0303 	sub.w	r3, sl, r3
 800f546:	eba3 0309 	sub.w	r3, r3, r9
 800f54a:	4543      	cmp	r3, r8
 800f54c:	f77f af76 	ble.w	800f43c <_printf_float+0x214>
 800f550:	2301      	movs	r3, #1
 800f552:	465a      	mov	r2, fp
 800f554:	4631      	mov	r1, r6
 800f556:	4628      	mov	r0, r5
 800f558:	47b8      	blx	r7
 800f55a:	3001      	adds	r0, #1
 800f55c:	f43f aeb0 	beq.w	800f2c0 <_printf_float+0x98>
 800f560:	f108 0801 	add.w	r8, r8, #1
 800f564:	e7ec      	b.n	800f540 <_printf_float+0x318>
 800f566:	4642      	mov	r2, r8
 800f568:	4631      	mov	r1, r6
 800f56a:	4628      	mov	r0, r5
 800f56c:	47b8      	blx	r7
 800f56e:	3001      	adds	r0, #1
 800f570:	d1c1      	bne.n	800f4f6 <_printf_float+0x2ce>
 800f572:	e6a5      	b.n	800f2c0 <_printf_float+0x98>
 800f574:	2301      	movs	r3, #1
 800f576:	4631      	mov	r1, r6
 800f578:	4628      	mov	r0, r5
 800f57a:	9206      	str	r2, [sp, #24]
 800f57c:	47b8      	blx	r7
 800f57e:	3001      	adds	r0, #1
 800f580:	f43f ae9e 	beq.w	800f2c0 <_printf_float+0x98>
 800f584:	9b07      	ldr	r3, [sp, #28]
 800f586:	9a06      	ldr	r2, [sp, #24]
 800f588:	3301      	adds	r3, #1
 800f58a:	9307      	str	r3, [sp, #28]
 800f58c:	e7b9      	b.n	800f502 <_printf_float+0x2da>
 800f58e:	9b05      	ldr	r3, [sp, #20]
 800f590:	465a      	mov	r2, fp
 800f592:	4631      	mov	r1, r6
 800f594:	4628      	mov	r0, r5
 800f596:	47b8      	blx	r7
 800f598:	3001      	adds	r0, #1
 800f59a:	d1bf      	bne.n	800f51c <_printf_float+0x2f4>
 800f59c:	e690      	b.n	800f2c0 <_printf_float+0x98>
 800f59e:	9a06      	ldr	r2, [sp, #24]
 800f5a0:	464b      	mov	r3, r9
 800f5a2:	4442      	add	r2, r8
 800f5a4:	4631      	mov	r1, r6
 800f5a6:	4628      	mov	r0, r5
 800f5a8:	47b8      	blx	r7
 800f5aa:	3001      	adds	r0, #1
 800f5ac:	d1c2      	bne.n	800f534 <_printf_float+0x30c>
 800f5ae:	e687      	b.n	800f2c0 <_printf_float+0x98>
 800f5b0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f5b4:	f1b9 0f01 	cmp.w	r9, #1
 800f5b8:	dc01      	bgt.n	800f5be <_printf_float+0x396>
 800f5ba:	07db      	lsls	r3, r3, #31
 800f5bc:	d536      	bpl.n	800f62c <_printf_float+0x404>
 800f5be:	2301      	movs	r3, #1
 800f5c0:	4642      	mov	r2, r8
 800f5c2:	4631      	mov	r1, r6
 800f5c4:	4628      	mov	r0, r5
 800f5c6:	47b8      	blx	r7
 800f5c8:	3001      	adds	r0, #1
 800f5ca:	f43f ae79 	beq.w	800f2c0 <_printf_float+0x98>
 800f5ce:	9b05      	ldr	r3, [sp, #20]
 800f5d0:	465a      	mov	r2, fp
 800f5d2:	4631      	mov	r1, r6
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	47b8      	blx	r7
 800f5d8:	3001      	adds	r0, #1
 800f5da:	f43f ae71 	beq.w	800f2c0 <_printf_float+0x98>
 800f5de:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f5e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ea:	f109 39ff 	add.w	r9, r9, #4294967295
 800f5ee:	d018      	beq.n	800f622 <_printf_float+0x3fa>
 800f5f0:	464b      	mov	r3, r9
 800f5f2:	f108 0201 	add.w	r2, r8, #1
 800f5f6:	4631      	mov	r1, r6
 800f5f8:	4628      	mov	r0, r5
 800f5fa:	47b8      	blx	r7
 800f5fc:	3001      	adds	r0, #1
 800f5fe:	d10c      	bne.n	800f61a <_printf_float+0x3f2>
 800f600:	e65e      	b.n	800f2c0 <_printf_float+0x98>
 800f602:	2301      	movs	r3, #1
 800f604:	465a      	mov	r2, fp
 800f606:	4631      	mov	r1, r6
 800f608:	4628      	mov	r0, r5
 800f60a:	47b8      	blx	r7
 800f60c:	3001      	adds	r0, #1
 800f60e:	f43f ae57 	beq.w	800f2c0 <_printf_float+0x98>
 800f612:	f108 0801 	add.w	r8, r8, #1
 800f616:	45c8      	cmp	r8, r9
 800f618:	dbf3      	blt.n	800f602 <_printf_float+0x3da>
 800f61a:	4653      	mov	r3, sl
 800f61c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f620:	e6dc      	b.n	800f3dc <_printf_float+0x1b4>
 800f622:	f04f 0800 	mov.w	r8, #0
 800f626:	f104 0b1a 	add.w	fp, r4, #26
 800f62a:	e7f4      	b.n	800f616 <_printf_float+0x3ee>
 800f62c:	2301      	movs	r3, #1
 800f62e:	4642      	mov	r2, r8
 800f630:	e7e1      	b.n	800f5f6 <_printf_float+0x3ce>
 800f632:	2301      	movs	r3, #1
 800f634:	464a      	mov	r2, r9
 800f636:	4631      	mov	r1, r6
 800f638:	4628      	mov	r0, r5
 800f63a:	47b8      	blx	r7
 800f63c:	3001      	adds	r0, #1
 800f63e:	f43f ae3f 	beq.w	800f2c0 <_printf_float+0x98>
 800f642:	f108 0801 	add.w	r8, r8, #1
 800f646:	68e3      	ldr	r3, [r4, #12]
 800f648:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f64a:	1a5b      	subs	r3, r3, r1
 800f64c:	4543      	cmp	r3, r8
 800f64e:	dcf0      	bgt.n	800f632 <_printf_float+0x40a>
 800f650:	e6f8      	b.n	800f444 <_printf_float+0x21c>
 800f652:	f04f 0800 	mov.w	r8, #0
 800f656:	f104 0919 	add.w	r9, r4, #25
 800f65a:	e7f4      	b.n	800f646 <_printf_float+0x41e>

0800f65c <_printf_common>:
 800f65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f660:	4616      	mov	r6, r2
 800f662:	4698      	mov	r8, r3
 800f664:	688a      	ldr	r2, [r1, #8]
 800f666:	690b      	ldr	r3, [r1, #16]
 800f668:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f66c:	4293      	cmp	r3, r2
 800f66e:	bfb8      	it	lt
 800f670:	4613      	movlt	r3, r2
 800f672:	6033      	str	r3, [r6, #0]
 800f674:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f678:	4607      	mov	r7, r0
 800f67a:	460c      	mov	r4, r1
 800f67c:	b10a      	cbz	r2, 800f682 <_printf_common+0x26>
 800f67e:	3301      	adds	r3, #1
 800f680:	6033      	str	r3, [r6, #0]
 800f682:	6823      	ldr	r3, [r4, #0]
 800f684:	0699      	lsls	r1, r3, #26
 800f686:	bf42      	ittt	mi
 800f688:	6833      	ldrmi	r3, [r6, #0]
 800f68a:	3302      	addmi	r3, #2
 800f68c:	6033      	strmi	r3, [r6, #0]
 800f68e:	6825      	ldr	r5, [r4, #0]
 800f690:	f015 0506 	ands.w	r5, r5, #6
 800f694:	d106      	bne.n	800f6a4 <_printf_common+0x48>
 800f696:	f104 0a19 	add.w	sl, r4, #25
 800f69a:	68e3      	ldr	r3, [r4, #12]
 800f69c:	6832      	ldr	r2, [r6, #0]
 800f69e:	1a9b      	subs	r3, r3, r2
 800f6a0:	42ab      	cmp	r3, r5
 800f6a2:	dc26      	bgt.n	800f6f2 <_printf_common+0x96>
 800f6a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f6a8:	6822      	ldr	r2, [r4, #0]
 800f6aa:	3b00      	subs	r3, #0
 800f6ac:	bf18      	it	ne
 800f6ae:	2301      	movne	r3, #1
 800f6b0:	0692      	lsls	r2, r2, #26
 800f6b2:	d42b      	bmi.n	800f70c <_printf_common+0xb0>
 800f6b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f6b8:	4641      	mov	r1, r8
 800f6ba:	4638      	mov	r0, r7
 800f6bc:	47c8      	blx	r9
 800f6be:	3001      	adds	r0, #1
 800f6c0:	d01e      	beq.n	800f700 <_printf_common+0xa4>
 800f6c2:	6823      	ldr	r3, [r4, #0]
 800f6c4:	6922      	ldr	r2, [r4, #16]
 800f6c6:	f003 0306 	and.w	r3, r3, #6
 800f6ca:	2b04      	cmp	r3, #4
 800f6cc:	bf02      	ittt	eq
 800f6ce:	68e5      	ldreq	r5, [r4, #12]
 800f6d0:	6833      	ldreq	r3, [r6, #0]
 800f6d2:	1aed      	subeq	r5, r5, r3
 800f6d4:	68a3      	ldr	r3, [r4, #8]
 800f6d6:	bf0c      	ite	eq
 800f6d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f6dc:	2500      	movne	r5, #0
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	bfc4      	itt	gt
 800f6e2:	1a9b      	subgt	r3, r3, r2
 800f6e4:	18ed      	addgt	r5, r5, r3
 800f6e6:	2600      	movs	r6, #0
 800f6e8:	341a      	adds	r4, #26
 800f6ea:	42b5      	cmp	r5, r6
 800f6ec:	d11a      	bne.n	800f724 <_printf_common+0xc8>
 800f6ee:	2000      	movs	r0, #0
 800f6f0:	e008      	b.n	800f704 <_printf_common+0xa8>
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	4652      	mov	r2, sl
 800f6f6:	4641      	mov	r1, r8
 800f6f8:	4638      	mov	r0, r7
 800f6fa:	47c8      	blx	r9
 800f6fc:	3001      	adds	r0, #1
 800f6fe:	d103      	bne.n	800f708 <_printf_common+0xac>
 800f700:	f04f 30ff 	mov.w	r0, #4294967295
 800f704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f708:	3501      	adds	r5, #1
 800f70a:	e7c6      	b.n	800f69a <_printf_common+0x3e>
 800f70c:	18e1      	adds	r1, r4, r3
 800f70e:	1c5a      	adds	r2, r3, #1
 800f710:	2030      	movs	r0, #48	@ 0x30
 800f712:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f716:	4422      	add	r2, r4
 800f718:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f71c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f720:	3302      	adds	r3, #2
 800f722:	e7c7      	b.n	800f6b4 <_printf_common+0x58>
 800f724:	2301      	movs	r3, #1
 800f726:	4622      	mov	r2, r4
 800f728:	4641      	mov	r1, r8
 800f72a:	4638      	mov	r0, r7
 800f72c:	47c8      	blx	r9
 800f72e:	3001      	adds	r0, #1
 800f730:	d0e6      	beq.n	800f700 <_printf_common+0xa4>
 800f732:	3601      	adds	r6, #1
 800f734:	e7d9      	b.n	800f6ea <_printf_common+0x8e>
	...

0800f738 <_printf_i>:
 800f738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f73c:	7e0f      	ldrb	r7, [r1, #24]
 800f73e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f740:	2f78      	cmp	r7, #120	@ 0x78
 800f742:	4691      	mov	r9, r2
 800f744:	4680      	mov	r8, r0
 800f746:	460c      	mov	r4, r1
 800f748:	469a      	mov	sl, r3
 800f74a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f74e:	d807      	bhi.n	800f760 <_printf_i+0x28>
 800f750:	2f62      	cmp	r7, #98	@ 0x62
 800f752:	d80a      	bhi.n	800f76a <_printf_i+0x32>
 800f754:	2f00      	cmp	r7, #0
 800f756:	f000 80d2 	beq.w	800f8fe <_printf_i+0x1c6>
 800f75a:	2f58      	cmp	r7, #88	@ 0x58
 800f75c:	f000 80b9 	beq.w	800f8d2 <_printf_i+0x19a>
 800f760:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f764:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f768:	e03a      	b.n	800f7e0 <_printf_i+0xa8>
 800f76a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f76e:	2b15      	cmp	r3, #21
 800f770:	d8f6      	bhi.n	800f760 <_printf_i+0x28>
 800f772:	a101      	add	r1, pc, #4	@ (adr r1, 800f778 <_printf_i+0x40>)
 800f774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f778:	0800f7d1 	.word	0x0800f7d1
 800f77c:	0800f7e5 	.word	0x0800f7e5
 800f780:	0800f761 	.word	0x0800f761
 800f784:	0800f761 	.word	0x0800f761
 800f788:	0800f761 	.word	0x0800f761
 800f78c:	0800f761 	.word	0x0800f761
 800f790:	0800f7e5 	.word	0x0800f7e5
 800f794:	0800f761 	.word	0x0800f761
 800f798:	0800f761 	.word	0x0800f761
 800f79c:	0800f761 	.word	0x0800f761
 800f7a0:	0800f761 	.word	0x0800f761
 800f7a4:	0800f8e5 	.word	0x0800f8e5
 800f7a8:	0800f80f 	.word	0x0800f80f
 800f7ac:	0800f89f 	.word	0x0800f89f
 800f7b0:	0800f761 	.word	0x0800f761
 800f7b4:	0800f761 	.word	0x0800f761
 800f7b8:	0800f907 	.word	0x0800f907
 800f7bc:	0800f761 	.word	0x0800f761
 800f7c0:	0800f80f 	.word	0x0800f80f
 800f7c4:	0800f761 	.word	0x0800f761
 800f7c8:	0800f761 	.word	0x0800f761
 800f7cc:	0800f8a7 	.word	0x0800f8a7
 800f7d0:	6833      	ldr	r3, [r6, #0]
 800f7d2:	1d1a      	adds	r2, r3, #4
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	6032      	str	r2, [r6, #0]
 800f7d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f7dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	e09d      	b.n	800f920 <_printf_i+0x1e8>
 800f7e4:	6833      	ldr	r3, [r6, #0]
 800f7e6:	6820      	ldr	r0, [r4, #0]
 800f7e8:	1d19      	adds	r1, r3, #4
 800f7ea:	6031      	str	r1, [r6, #0]
 800f7ec:	0606      	lsls	r6, r0, #24
 800f7ee:	d501      	bpl.n	800f7f4 <_printf_i+0xbc>
 800f7f0:	681d      	ldr	r5, [r3, #0]
 800f7f2:	e003      	b.n	800f7fc <_printf_i+0xc4>
 800f7f4:	0645      	lsls	r5, r0, #25
 800f7f6:	d5fb      	bpl.n	800f7f0 <_printf_i+0xb8>
 800f7f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f7fc:	2d00      	cmp	r5, #0
 800f7fe:	da03      	bge.n	800f808 <_printf_i+0xd0>
 800f800:	232d      	movs	r3, #45	@ 0x2d
 800f802:	426d      	negs	r5, r5
 800f804:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f808:	4859      	ldr	r0, [pc, #356]	@ (800f970 <_printf_i+0x238>)
 800f80a:	230a      	movs	r3, #10
 800f80c:	e011      	b.n	800f832 <_printf_i+0xfa>
 800f80e:	6821      	ldr	r1, [r4, #0]
 800f810:	6833      	ldr	r3, [r6, #0]
 800f812:	0608      	lsls	r0, r1, #24
 800f814:	f853 5b04 	ldr.w	r5, [r3], #4
 800f818:	d402      	bmi.n	800f820 <_printf_i+0xe8>
 800f81a:	0649      	lsls	r1, r1, #25
 800f81c:	bf48      	it	mi
 800f81e:	b2ad      	uxthmi	r5, r5
 800f820:	2f6f      	cmp	r7, #111	@ 0x6f
 800f822:	4853      	ldr	r0, [pc, #332]	@ (800f970 <_printf_i+0x238>)
 800f824:	6033      	str	r3, [r6, #0]
 800f826:	bf14      	ite	ne
 800f828:	230a      	movne	r3, #10
 800f82a:	2308      	moveq	r3, #8
 800f82c:	2100      	movs	r1, #0
 800f82e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f832:	6866      	ldr	r6, [r4, #4]
 800f834:	60a6      	str	r6, [r4, #8]
 800f836:	2e00      	cmp	r6, #0
 800f838:	bfa2      	ittt	ge
 800f83a:	6821      	ldrge	r1, [r4, #0]
 800f83c:	f021 0104 	bicge.w	r1, r1, #4
 800f840:	6021      	strge	r1, [r4, #0]
 800f842:	b90d      	cbnz	r5, 800f848 <_printf_i+0x110>
 800f844:	2e00      	cmp	r6, #0
 800f846:	d04b      	beq.n	800f8e0 <_printf_i+0x1a8>
 800f848:	4616      	mov	r6, r2
 800f84a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f84e:	fb03 5711 	mls	r7, r3, r1, r5
 800f852:	5dc7      	ldrb	r7, [r0, r7]
 800f854:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f858:	462f      	mov	r7, r5
 800f85a:	42bb      	cmp	r3, r7
 800f85c:	460d      	mov	r5, r1
 800f85e:	d9f4      	bls.n	800f84a <_printf_i+0x112>
 800f860:	2b08      	cmp	r3, #8
 800f862:	d10b      	bne.n	800f87c <_printf_i+0x144>
 800f864:	6823      	ldr	r3, [r4, #0]
 800f866:	07df      	lsls	r7, r3, #31
 800f868:	d508      	bpl.n	800f87c <_printf_i+0x144>
 800f86a:	6923      	ldr	r3, [r4, #16]
 800f86c:	6861      	ldr	r1, [r4, #4]
 800f86e:	4299      	cmp	r1, r3
 800f870:	bfde      	ittt	le
 800f872:	2330      	movle	r3, #48	@ 0x30
 800f874:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f878:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f87c:	1b92      	subs	r2, r2, r6
 800f87e:	6122      	str	r2, [r4, #16]
 800f880:	f8cd a000 	str.w	sl, [sp]
 800f884:	464b      	mov	r3, r9
 800f886:	aa03      	add	r2, sp, #12
 800f888:	4621      	mov	r1, r4
 800f88a:	4640      	mov	r0, r8
 800f88c:	f7ff fee6 	bl	800f65c <_printf_common>
 800f890:	3001      	adds	r0, #1
 800f892:	d14a      	bne.n	800f92a <_printf_i+0x1f2>
 800f894:	f04f 30ff 	mov.w	r0, #4294967295
 800f898:	b004      	add	sp, #16
 800f89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f89e:	6823      	ldr	r3, [r4, #0]
 800f8a0:	f043 0320 	orr.w	r3, r3, #32
 800f8a4:	6023      	str	r3, [r4, #0]
 800f8a6:	4833      	ldr	r0, [pc, #204]	@ (800f974 <_printf_i+0x23c>)
 800f8a8:	2778      	movs	r7, #120	@ 0x78
 800f8aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f8ae:	6823      	ldr	r3, [r4, #0]
 800f8b0:	6831      	ldr	r1, [r6, #0]
 800f8b2:	061f      	lsls	r7, r3, #24
 800f8b4:	f851 5b04 	ldr.w	r5, [r1], #4
 800f8b8:	d402      	bmi.n	800f8c0 <_printf_i+0x188>
 800f8ba:	065f      	lsls	r7, r3, #25
 800f8bc:	bf48      	it	mi
 800f8be:	b2ad      	uxthmi	r5, r5
 800f8c0:	6031      	str	r1, [r6, #0]
 800f8c2:	07d9      	lsls	r1, r3, #31
 800f8c4:	bf44      	itt	mi
 800f8c6:	f043 0320 	orrmi.w	r3, r3, #32
 800f8ca:	6023      	strmi	r3, [r4, #0]
 800f8cc:	b11d      	cbz	r5, 800f8d6 <_printf_i+0x19e>
 800f8ce:	2310      	movs	r3, #16
 800f8d0:	e7ac      	b.n	800f82c <_printf_i+0xf4>
 800f8d2:	4827      	ldr	r0, [pc, #156]	@ (800f970 <_printf_i+0x238>)
 800f8d4:	e7e9      	b.n	800f8aa <_printf_i+0x172>
 800f8d6:	6823      	ldr	r3, [r4, #0]
 800f8d8:	f023 0320 	bic.w	r3, r3, #32
 800f8dc:	6023      	str	r3, [r4, #0]
 800f8de:	e7f6      	b.n	800f8ce <_printf_i+0x196>
 800f8e0:	4616      	mov	r6, r2
 800f8e2:	e7bd      	b.n	800f860 <_printf_i+0x128>
 800f8e4:	6833      	ldr	r3, [r6, #0]
 800f8e6:	6825      	ldr	r5, [r4, #0]
 800f8e8:	6961      	ldr	r1, [r4, #20]
 800f8ea:	1d18      	adds	r0, r3, #4
 800f8ec:	6030      	str	r0, [r6, #0]
 800f8ee:	062e      	lsls	r6, r5, #24
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	d501      	bpl.n	800f8f8 <_printf_i+0x1c0>
 800f8f4:	6019      	str	r1, [r3, #0]
 800f8f6:	e002      	b.n	800f8fe <_printf_i+0x1c6>
 800f8f8:	0668      	lsls	r0, r5, #25
 800f8fa:	d5fb      	bpl.n	800f8f4 <_printf_i+0x1bc>
 800f8fc:	8019      	strh	r1, [r3, #0]
 800f8fe:	2300      	movs	r3, #0
 800f900:	6123      	str	r3, [r4, #16]
 800f902:	4616      	mov	r6, r2
 800f904:	e7bc      	b.n	800f880 <_printf_i+0x148>
 800f906:	6833      	ldr	r3, [r6, #0]
 800f908:	1d1a      	adds	r2, r3, #4
 800f90a:	6032      	str	r2, [r6, #0]
 800f90c:	681e      	ldr	r6, [r3, #0]
 800f90e:	6862      	ldr	r2, [r4, #4]
 800f910:	2100      	movs	r1, #0
 800f912:	4630      	mov	r0, r6
 800f914:	f7f0 fcfc 	bl	8000310 <memchr>
 800f918:	b108      	cbz	r0, 800f91e <_printf_i+0x1e6>
 800f91a:	1b80      	subs	r0, r0, r6
 800f91c:	6060      	str	r0, [r4, #4]
 800f91e:	6863      	ldr	r3, [r4, #4]
 800f920:	6123      	str	r3, [r4, #16]
 800f922:	2300      	movs	r3, #0
 800f924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f928:	e7aa      	b.n	800f880 <_printf_i+0x148>
 800f92a:	6923      	ldr	r3, [r4, #16]
 800f92c:	4632      	mov	r2, r6
 800f92e:	4649      	mov	r1, r9
 800f930:	4640      	mov	r0, r8
 800f932:	47d0      	blx	sl
 800f934:	3001      	adds	r0, #1
 800f936:	d0ad      	beq.n	800f894 <_printf_i+0x15c>
 800f938:	6823      	ldr	r3, [r4, #0]
 800f93a:	079b      	lsls	r3, r3, #30
 800f93c:	d413      	bmi.n	800f966 <_printf_i+0x22e>
 800f93e:	68e0      	ldr	r0, [r4, #12]
 800f940:	9b03      	ldr	r3, [sp, #12]
 800f942:	4298      	cmp	r0, r3
 800f944:	bfb8      	it	lt
 800f946:	4618      	movlt	r0, r3
 800f948:	e7a6      	b.n	800f898 <_printf_i+0x160>
 800f94a:	2301      	movs	r3, #1
 800f94c:	4632      	mov	r2, r6
 800f94e:	4649      	mov	r1, r9
 800f950:	4640      	mov	r0, r8
 800f952:	47d0      	blx	sl
 800f954:	3001      	adds	r0, #1
 800f956:	d09d      	beq.n	800f894 <_printf_i+0x15c>
 800f958:	3501      	adds	r5, #1
 800f95a:	68e3      	ldr	r3, [r4, #12]
 800f95c:	9903      	ldr	r1, [sp, #12]
 800f95e:	1a5b      	subs	r3, r3, r1
 800f960:	42ab      	cmp	r3, r5
 800f962:	dcf2      	bgt.n	800f94a <_printf_i+0x212>
 800f964:	e7eb      	b.n	800f93e <_printf_i+0x206>
 800f966:	2500      	movs	r5, #0
 800f968:	f104 0619 	add.w	r6, r4, #25
 800f96c:	e7f5      	b.n	800f95a <_printf_i+0x222>
 800f96e:	bf00      	nop
 800f970:	08013350 	.word	0x08013350
 800f974:	08013361 	.word	0x08013361

0800f978 <_scanf_float>:
 800f978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f97c:	b087      	sub	sp, #28
 800f97e:	4617      	mov	r7, r2
 800f980:	9303      	str	r3, [sp, #12]
 800f982:	688b      	ldr	r3, [r1, #8]
 800f984:	1e5a      	subs	r2, r3, #1
 800f986:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f98a:	bf81      	itttt	hi
 800f98c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f990:	eb03 0b05 	addhi.w	fp, r3, r5
 800f994:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f998:	608b      	strhi	r3, [r1, #8]
 800f99a:	680b      	ldr	r3, [r1, #0]
 800f99c:	460a      	mov	r2, r1
 800f99e:	f04f 0500 	mov.w	r5, #0
 800f9a2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f9a6:	f842 3b1c 	str.w	r3, [r2], #28
 800f9aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f9ae:	4680      	mov	r8, r0
 800f9b0:	460c      	mov	r4, r1
 800f9b2:	bf98      	it	ls
 800f9b4:	f04f 0b00 	movls.w	fp, #0
 800f9b8:	9201      	str	r2, [sp, #4]
 800f9ba:	4616      	mov	r6, r2
 800f9bc:	46aa      	mov	sl, r5
 800f9be:	46a9      	mov	r9, r5
 800f9c0:	9502      	str	r5, [sp, #8]
 800f9c2:	68a2      	ldr	r2, [r4, #8]
 800f9c4:	b152      	cbz	r2, 800f9dc <_scanf_float+0x64>
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	2b4e      	cmp	r3, #78	@ 0x4e
 800f9cc:	d864      	bhi.n	800fa98 <_scanf_float+0x120>
 800f9ce:	2b40      	cmp	r3, #64	@ 0x40
 800f9d0:	d83c      	bhi.n	800fa4c <_scanf_float+0xd4>
 800f9d2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f9d6:	b2c8      	uxtb	r0, r1
 800f9d8:	280e      	cmp	r0, #14
 800f9da:	d93a      	bls.n	800fa52 <_scanf_float+0xda>
 800f9dc:	f1b9 0f00 	cmp.w	r9, #0
 800f9e0:	d003      	beq.n	800f9ea <_scanf_float+0x72>
 800f9e2:	6823      	ldr	r3, [r4, #0]
 800f9e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f9e8:	6023      	str	r3, [r4, #0]
 800f9ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f9ee:	f1ba 0f01 	cmp.w	sl, #1
 800f9f2:	f200 8117 	bhi.w	800fc24 <_scanf_float+0x2ac>
 800f9f6:	9b01      	ldr	r3, [sp, #4]
 800f9f8:	429e      	cmp	r6, r3
 800f9fa:	f200 8108 	bhi.w	800fc0e <_scanf_float+0x296>
 800f9fe:	2001      	movs	r0, #1
 800fa00:	b007      	add	sp, #28
 800fa02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa06:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800fa0a:	2a0d      	cmp	r2, #13
 800fa0c:	d8e6      	bhi.n	800f9dc <_scanf_float+0x64>
 800fa0e:	a101      	add	r1, pc, #4	@ (adr r1, 800fa14 <_scanf_float+0x9c>)
 800fa10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fa14:	0800fb5b 	.word	0x0800fb5b
 800fa18:	0800f9dd 	.word	0x0800f9dd
 800fa1c:	0800f9dd 	.word	0x0800f9dd
 800fa20:	0800f9dd 	.word	0x0800f9dd
 800fa24:	0800fbbb 	.word	0x0800fbbb
 800fa28:	0800fb93 	.word	0x0800fb93
 800fa2c:	0800f9dd 	.word	0x0800f9dd
 800fa30:	0800f9dd 	.word	0x0800f9dd
 800fa34:	0800fb69 	.word	0x0800fb69
 800fa38:	0800f9dd 	.word	0x0800f9dd
 800fa3c:	0800f9dd 	.word	0x0800f9dd
 800fa40:	0800f9dd 	.word	0x0800f9dd
 800fa44:	0800f9dd 	.word	0x0800f9dd
 800fa48:	0800fb21 	.word	0x0800fb21
 800fa4c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800fa50:	e7db      	b.n	800fa0a <_scanf_float+0x92>
 800fa52:	290e      	cmp	r1, #14
 800fa54:	d8c2      	bhi.n	800f9dc <_scanf_float+0x64>
 800fa56:	a001      	add	r0, pc, #4	@ (adr r0, 800fa5c <_scanf_float+0xe4>)
 800fa58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fa5c:	0800fb11 	.word	0x0800fb11
 800fa60:	0800f9dd 	.word	0x0800f9dd
 800fa64:	0800fb11 	.word	0x0800fb11
 800fa68:	0800fba7 	.word	0x0800fba7
 800fa6c:	0800f9dd 	.word	0x0800f9dd
 800fa70:	0800fab9 	.word	0x0800fab9
 800fa74:	0800faf7 	.word	0x0800faf7
 800fa78:	0800faf7 	.word	0x0800faf7
 800fa7c:	0800faf7 	.word	0x0800faf7
 800fa80:	0800faf7 	.word	0x0800faf7
 800fa84:	0800faf7 	.word	0x0800faf7
 800fa88:	0800faf7 	.word	0x0800faf7
 800fa8c:	0800faf7 	.word	0x0800faf7
 800fa90:	0800faf7 	.word	0x0800faf7
 800fa94:	0800faf7 	.word	0x0800faf7
 800fa98:	2b6e      	cmp	r3, #110	@ 0x6e
 800fa9a:	d809      	bhi.n	800fab0 <_scanf_float+0x138>
 800fa9c:	2b60      	cmp	r3, #96	@ 0x60
 800fa9e:	d8b2      	bhi.n	800fa06 <_scanf_float+0x8e>
 800faa0:	2b54      	cmp	r3, #84	@ 0x54
 800faa2:	d07b      	beq.n	800fb9c <_scanf_float+0x224>
 800faa4:	2b59      	cmp	r3, #89	@ 0x59
 800faa6:	d199      	bne.n	800f9dc <_scanf_float+0x64>
 800faa8:	2d07      	cmp	r5, #7
 800faaa:	d197      	bne.n	800f9dc <_scanf_float+0x64>
 800faac:	2508      	movs	r5, #8
 800faae:	e02c      	b.n	800fb0a <_scanf_float+0x192>
 800fab0:	2b74      	cmp	r3, #116	@ 0x74
 800fab2:	d073      	beq.n	800fb9c <_scanf_float+0x224>
 800fab4:	2b79      	cmp	r3, #121	@ 0x79
 800fab6:	e7f6      	b.n	800faa6 <_scanf_float+0x12e>
 800fab8:	6821      	ldr	r1, [r4, #0]
 800faba:	05c8      	lsls	r0, r1, #23
 800fabc:	d51b      	bpl.n	800faf6 <_scanf_float+0x17e>
 800fabe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800fac2:	6021      	str	r1, [r4, #0]
 800fac4:	f109 0901 	add.w	r9, r9, #1
 800fac8:	f1bb 0f00 	cmp.w	fp, #0
 800facc:	d003      	beq.n	800fad6 <_scanf_float+0x15e>
 800face:	3201      	adds	r2, #1
 800fad0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fad4:	60a2      	str	r2, [r4, #8]
 800fad6:	68a3      	ldr	r3, [r4, #8]
 800fad8:	3b01      	subs	r3, #1
 800fada:	60a3      	str	r3, [r4, #8]
 800fadc:	6923      	ldr	r3, [r4, #16]
 800fade:	3301      	adds	r3, #1
 800fae0:	6123      	str	r3, [r4, #16]
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	3b01      	subs	r3, #1
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	607b      	str	r3, [r7, #4]
 800faea:	f340 8087 	ble.w	800fbfc <_scanf_float+0x284>
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	3301      	adds	r3, #1
 800faf2:	603b      	str	r3, [r7, #0]
 800faf4:	e765      	b.n	800f9c2 <_scanf_float+0x4a>
 800faf6:	eb1a 0105 	adds.w	r1, sl, r5
 800fafa:	f47f af6f 	bne.w	800f9dc <_scanf_float+0x64>
 800fafe:	6822      	ldr	r2, [r4, #0]
 800fb00:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800fb04:	6022      	str	r2, [r4, #0]
 800fb06:	460d      	mov	r5, r1
 800fb08:	468a      	mov	sl, r1
 800fb0a:	f806 3b01 	strb.w	r3, [r6], #1
 800fb0e:	e7e2      	b.n	800fad6 <_scanf_float+0x15e>
 800fb10:	6822      	ldr	r2, [r4, #0]
 800fb12:	0610      	lsls	r0, r2, #24
 800fb14:	f57f af62 	bpl.w	800f9dc <_scanf_float+0x64>
 800fb18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fb1c:	6022      	str	r2, [r4, #0]
 800fb1e:	e7f4      	b.n	800fb0a <_scanf_float+0x192>
 800fb20:	f1ba 0f00 	cmp.w	sl, #0
 800fb24:	d10e      	bne.n	800fb44 <_scanf_float+0x1cc>
 800fb26:	f1b9 0f00 	cmp.w	r9, #0
 800fb2a:	d10e      	bne.n	800fb4a <_scanf_float+0x1d2>
 800fb2c:	6822      	ldr	r2, [r4, #0]
 800fb2e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fb32:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fb36:	d108      	bne.n	800fb4a <_scanf_float+0x1d2>
 800fb38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fb3c:	6022      	str	r2, [r4, #0]
 800fb3e:	f04f 0a01 	mov.w	sl, #1
 800fb42:	e7e2      	b.n	800fb0a <_scanf_float+0x192>
 800fb44:	f1ba 0f02 	cmp.w	sl, #2
 800fb48:	d055      	beq.n	800fbf6 <_scanf_float+0x27e>
 800fb4a:	2d01      	cmp	r5, #1
 800fb4c:	d002      	beq.n	800fb54 <_scanf_float+0x1dc>
 800fb4e:	2d04      	cmp	r5, #4
 800fb50:	f47f af44 	bne.w	800f9dc <_scanf_float+0x64>
 800fb54:	3501      	adds	r5, #1
 800fb56:	b2ed      	uxtb	r5, r5
 800fb58:	e7d7      	b.n	800fb0a <_scanf_float+0x192>
 800fb5a:	f1ba 0f01 	cmp.w	sl, #1
 800fb5e:	f47f af3d 	bne.w	800f9dc <_scanf_float+0x64>
 800fb62:	f04f 0a02 	mov.w	sl, #2
 800fb66:	e7d0      	b.n	800fb0a <_scanf_float+0x192>
 800fb68:	b97d      	cbnz	r5, 800fb8a <_scanf_float+0x212>
 800fb6a:	f1b9 0f00 	cmp.w	r9, #0
 800fb6e:	f47f af38 	bne.w	800f9e2 <_scanf_float+0x6a>
 800fb72:	6822      	ldr	r2, [r4, #0]
 800fb74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fb78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fb7c:	f040 8101 	bne.w	800fd82 <_scanf_float+0x40a>
 800fb80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fb84:	6022      	str	r2, [r4, #0]
 800fb86:	2501      	movs	r5, #1
 800fb88:	e7bf      	b.n	800fb0a <_scanf_float+0x192>
 800fb8a:	2d03      	cmp	r5, #3
 800fb8c:	d0e2      	beq.n	800fb54 <_scanf_float+0x1dc>
 800fb8e:	2d05      	cmp	r5, #5
 800fb90:	e7de      	b.n	800fb50 <_scanf_float+0x1d8>
 800fb92:	2d02      	cmp	r5, #2
 800fb94:	f47f af22 	bne.w	800f9dc <_scanf_float+0x64>
 800fb98:	2503      	movs	r5, #3
 800fb9a:	e7b6      	b.n	800fb0a <_scanf_float+0x192>
 800fb9c:	2d06      	cmp	r5, #6
 800fb9e:	f47f af1d 	bne.w	800f9dc <_scanf_float+0x64>
 800fba2:	2507      	movs	r5, #7
 800fba4:	e7b1      	b.n	800fb0a <_scanf_float+0x192>
 800fba6:	6822      	ldr	r2, [r4, #0]
 800fba8:	0591      	lsls	r1, r2, #22
 800fbaa:	f57f af17 	bpl.w	800f9dc <_scanf_float+0x64>
 800fbae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fbb2:	6022      	str	r2, [r4, #0]
 800fbb4:	f8cd 9008 	str.w	r9, [sp, #8]
 800fbb8:	e7a7      	b.n	800fb0a <_scanf_float+0x192>
 800fbba:	6822      	ldr	r2, [r4, #0]
 800fbbc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fbc0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fbc4:	d006      	beq.n	800fbd4 <_scanf_float+0x25c>
 800fbc6:	0550      	lsls	r0, r2, #21
 800fbc8:	f57f af08 	bpl.w	800f9dc <_scanf_float+0x64>
 800fbcc:	f1b9 0f00 	cmp.w	r9, #0
 800fbd0:	f000 80d7 	beq.w	800fd82 <_scanf_float+0x40a>
 800fbd4:	0591      	lsls	r1, r2, #22
 800fbd6:	bf58      	it	pl
 800fbd8:	9902      	ldrpl	r1, [sp, #8]
 800fbda:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fbde:	bf58      	it	pl
 800fbe0:	eba9 0101 	subpl.w	r1, r9, r1
 800fbe4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800fbe8:	bf58      	it	pl
 800fbea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fbee:	6022      	str	r2, [r4, #0]
 800fbf0:	f04f 0900 	mov.w	r9, #0
 800fbf4:	e789      	b.n	800fb0a <_scanf_float+0x192>
 800fbf6:	f04f 0a03 	mov.w	sl, #3
 800fbfa:	e786      	b.n	800fb0a <_scanf_float+0x192>
 800fbfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fc00:	4639      	mov	r1, r7
 800fc02:	4640      	mov	r0, r8
 800fc04:	4798      	blx	r3
 800fc06:	2800      	cmp	r0, #0
 800fc08:	f43f aedb 	beq.w	800f9c2 <_scanf_float+0x4a>
 800fc0c:	e6e6      	b.n	800f9dc <_scanf_float+0x64>
 800fc0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fc16:	463a      	mov	r2, r7
 800fc18:	4640      	mov	r0, r8
 800fc1a:	4798      	blx	r3
 800fc1c:	6923      	ldr	r3, [r4, #16]
 800fc1e:	3b01      	subs	r3, #1
 800fc20:	6123      	str	r3, [r4, #16]
 800fc22:	e6e8      	b.n	800f9f6 <_scanf_float+0x7e>
 800fc24:	1e6b      	subs	r3, r5, #1
 800fc26:	2b06      	cmp	r3, #6
 800fc28:	d824      	bhi.n	800fc74 <_scanf_float+0x2fc>
 800fc2a:	2d02      	cmp	r5, #2
 800fc2c:	d836      	bhi.n	800fc9c <_scanf_float+0x324>
 800fc2e:	9b01      	ldr	r3, [sp, #4]
 800fc30:	429e      	cmp	r6, r3
 800fc32:	f67f aee4 	bls.w	800f9fe <_scanf_float+0x86>
 800fc36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fc3e:	463a      	mov	r2, r7
 800fc40:	4640      	mov	r0, r8
 800fc42:	4798      	blx	r3
 800fc44:	6923      	ldr	r3, [r4, #16]
 800fc46:	3b01      	subs	r3, #1
 800fc48:	6123      	str	r3, [r4, #16]
 800fc4a:	e7f0      	b.n	800fc2e <_scanf_float+0x2b6>
 800fc4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc50:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fc54:	463a      	mov	r2, r7
 800fc56:	4640      	mov	r0, r8
 800fc58:	4798      	blx	r3
 800fc5a:	6923      	ldr	r3, [r4, #16]
 800fc5c:	3b01      	subs	r3, #1
 800fc5e:	6123      	str	r3, [r4, #16]
 800fc60:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc64:	fa5f fa8a 	uxtb.w	sl, sl
 800fc68:	f1ba 0f02 	cmp.w	sl, #2
 800fc6c:	d1ee      	bne.n	800fc4c <_scanf_float+0x2d4>
 800fc6e:	3d03      	subs	r5, #3
 800fc70:	b2ed      	uxtb	r5, r5
 800fc72:	1b76      	subs	r6, r6, r5
 800fc74:	6823      	ldr	r3, [r4, #0]
 800fc76:	05da      	lsls	r2, r3, #23
 800fc78:	d530      	bpl.n	800fcdc <_scanf_float+0x364>
 800fc7a:	055b      	lsls	r3, r3, #21
 800fc7c:	d511      	bpl.n	800fca2 <_scanf_float+0x32a>
 800fc7e:	9b01      	ldr	r3, [sp, #4]
 800fc80:	429e      	cmp	r6, r3
 800fc82:	f67f aebc 	bls.w	800f9fe <_scanf_float+0x86>
 800fc86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fc8e:	463a      	mov	r2, r7
 800fc90:	4640      	mov	r0, r8
 800fc92:	4798      	blx	r3
 800fc94:	6923      	ldr	r3, [r4, #16]
 800fc96:	3b01      	subs	r3, #1
 800fc98:	6123      	str	r3, [r4, #16]
 800fc9a:	e7f0      	b.n	800fc7e <_scanf_float+0x306>
 800fc9c:	46aa      	mov	sl, r5
 800fc9e:	46b3      	mov	fp, r6
 800fca0:	e7de      	b.n	800fc60 <_scanf_float+0x2e8>
 800fca2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fca6:	6923      	ldr	r3, [r4, #16]
 800fca8:	2965      	cmp	r1, #101	@ 0x65
 800fcaa:	f103 33ff 	add.w	r3, r3, #4294967295
 800fcae:	f106 35ff 	add.w	r5, r6, #4294967295
 800fcb2:	6123      	str	r3, [r4, #16]
 800fcb4:	d00c      	beq.n	800fcd0 <_scanf_float+0x358>
 800fcb6:	2945      	cmp	r1, #69	@ 0x45
 800fcb8:	d00a      	beq.n	800fcd0 <_scanf_float+0x358>
 800fcba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fcbe:	463a      	mov	r2, r7
 800fcc0:	4640      	mov	r0, r8
 800fcc2:	4798      	blx	r3
 800fcc4:	6923      	ldr	r3, [r4, #16]
 800fcc6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fcca:	3b01      	subs	r3, #1
 800fccc:	1eb5      	subs	r5, r6, #2
 800fcce:	6123      	str	r3, [r4, #16]
 800fcd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fcd4:	463a      	mov	r2, r7
 800fcd6:	4640      	mov	r0, r8
 800fcd8:	4798      	blx	r3
 800fcda:	462e      	mov	r6, r5
 800fcdc:	6822      	ldr	r2, [r4, #0]
 800fcde:	f012 0210 	ands.w	r2, r2, #16
 800fce2:	d001      	beq.n	800fce8 <_scanf_float+0x370>
 800fce4:	2000      	movs	r0, #0
 800fce6:	e68b      	b.n	800fa00 <_scanf_float+0x88>
 800fce8:	7032      	strb	r2, [r6, #0]
 800fcea:	6823      	ldr	r3, [r4, #0]
 800fcec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fcf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fcf4:	d11a      	bne.n	800fd2c <_scanf_float+0x3b4>
 800fcf6:	9b02      	ldr	r3, [sp, #8]
 800fcf8:	454b      	cmp	r3, r9
 800fcfa:	eba3 0209 	sub.w	r2, r3, r9
 800fcfe:	d121      	bne.n	800fd44 <_scanf_float+0x3cc>
 800fd00:	9901      	ldr	r1, [sp, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	4640      	mov	r0, r8
 800fd06:	f7ff f9f9 	bl	800f0fc <_strtod_r>
 800fd0a:	9b03      	ldr	r3, [sp, #12]
 800fd0c:	6821      	ldr	r1, [r4, #0]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f011 0f02 	tst.w	r1, #2
 800fd14:	f103 0204 	add.w	r2, r3, #4
 800fd18:	d01f      	beq.n	800fd5a <_scanf_float+0x3e2>
 800fd1a:	9903      	ldr	r1, [sp, #12]
 800fd1c:	600a      	str	r2, [r1, #0]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	ed83 0b00 	vstr	d0, [r3]
 800fd24:	68e3      	ldr	r3, [r4, #12]
 800fd26:	3301      	adds	r3, #1
 800fd28:	60e3      	str	r3, [r4, #12]
 800fd2a:	e7db      	b.n	800fce4 <_scanf_float+0x36c>
 800fd2c:	9b04      	ldr	r3, [sp, #16]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d0e6      	beq.n	800fd00 <_scanf_float+0x388>
 800fd32:	9905      	ldr	r1, [sp, #20]
 800fd34:	230a      	movs	r3, #10
 800fd36:	3101      	adds	r1, #1
 800fd38:	4640      	mov	r0, r8
 800fd3a:	f002 f8e7 	bl	8011f0c <_strtol_r>
 800fd3e:	9b04      	ldr	r3, [sp, #16]
 800fd40:	9e05      	ldr	r6, [sp, #20]
 800fd42:	1ac2      	subs	r2, r0, r3
 800fd44:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fd48:	429e      	cmp	r6, r3
 800fd4a:	bf28      	it	cs
 800fd4c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fd50:	490d      	ldr	r1, [pc, #52]	@ (800fd88 <_scanf_float+0x410>)
 800fd52:	4630      	mov	r0, r6
 800fd54:	f000 f8de 	bl	800ff14 <siprintf>
 800fd58:	e7d2      	b.n	800fd00 <_scanf_float+0x388>
 800fd5a:	f011 0f04 	tst.w	r1, #4
 800fd5e:	9903      	ldr	r1, [sp, #12]
 800fd60:	600a      	str	r2, [r1, #0]
 800fd62:	d1dc      	bne.n	800fd1e <_scanf_float+0x3a6>
 800fd64:	eeb4 0b40 	vcmp.f64	d0, d0
 800fd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd6c:	681d      	ldr	r5, [r3, #0]
 800fd6e:	d705      	bvc.n	800fd7c <_scanf_float+0x404>
 800fd70:	4806      	ldr	r0, [pc, #24]	@ (800fd8c <_scanf_float+0x414>)
 800fd72:	f000 fa25 	bl	80101c0 <nanf>
 800fd76:	ed85 0a00 	vstr	s0, [r5]
 800fd7a:	e7d3      	b.n	800fd24 <_scanf_float+0x3ac>
 800fd7c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800fd80:	e7f9      	b.n	800fd76 <_scanf_float+0x3fe>
 800fd82:	f04f 0900 	mov.w	r9, #0
 800fd86:	e630      	b.n	800f9ea <_scanf_float+0x72>
 800fd88:	08013372 	.word	0x08013372
 800fd8c:	08013730 	.word	0x08013730

0800fd90 <std>:
 800fd90:	2300      	movs	r3, #0
 800fd92:	b510      	push	{r4, lr}
 800fd94:	4604      	mov	r4, r0
 800fd96:	e9c0 3300 	strd	r3, r3, [r0]
 800fd9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd9e:	6083      	str	r3, [r0, #8]
 800fda0:	8181      	strh	r1, [r0, #12]
 800fda2:	6643      	str	r3, [r0, #100]	@ 0x64
 800fda4:	81c2      	strh	r2, [r0, #14]
 800fda6:	6183      	str	r3, [r0, #24]
 800fda8:	4619      	mov	r1, r3
 800fdaa:	2208      	movs	r2, #8
 800fdac:	305c      	adds	r0, #92	@ 0x5c
 800fdae:	f000 f940 	bl	8010032 <memset>
 800fdb2:	4b0d      	ldr	r3, [pc, #52]	@ (800fde8 <std+0x58>)
 800fdb4:	6263      	str	r3, [r4, #36]	@ 0x24
 800fdb6:	4b0d      	ldr	r3, [pc, #52]	@ (800fdec <std+0x5c>)
 800fdb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fdba:	4b0d      	ldr	r3, [pc, #52]	@ (800fdf0 <std+0x60>)
 800fdbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fdbe:	4b0d      	ldr	r3, [pc, #52]	@ (800fdf4 <std+0x64>)
 800fdc0:	6323      	str	r3, [r4, #48]	@ 0x30
 800fdc2:	4b0d      	ldr	r3, [pc, #52]	@ (800fdf8 <std+0x68>)
 800fdc4:	6224      	str	r4, [r4, #32]
 800fdc6:	429c      	cmp	r4, r3
 800fdc8:	d006      	beq.n	800fdd8 <std+0x48>
 800fdca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fdce:	4294      	cmp	r4, r2
 800fdd0:	d002      	beq.n	800fdd8 <std+0x48>
 800fdd2:	33d0      	adds	r3, #208	@ 0xd0
 800fdd4:	429c      	cmp	r4, r3
 800fdd6:	d105      	bne.n	800fde4 <std+0x54>
 800fdd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fde0:	f000 b9d2 	b.w	8010188 <__retarget_lock_init_recursive>
 800fde4:	bd10      	pop	{r4, pc}
 800fde6:	bf00      	nop
 800fde8:	0800ffa9 	.word	0x0800ffa9
 800fdec:	0800ffcf 	.word	0x0800ffcf
 800fdf0:	08010007 	.word	0x08010007
 800fdf4:	0801002b 	.word	0x0801002b
 800fdf8:	24000d88 	.word	0x24000d88

0800fdfc <stdio_exit_handler>:
 800fdfc:	4a02      	ldr	r2, [pc, #8]	@ (800fe08 <stdio_exit_handler+0xc>)
 800fdfe:	4903      	ldr	r1, [pc, #12]	@ (800fe0c <stdio_exit_handler+0x10>)
 800fe00:	4803      	ldr	r0, [pc, #12]	@ (800fe10 <stdio_exit_handler+0x14>)
 800fe02:	f000 b869 	b.w	800fed8 <_fwalk_sglue>
 800fe06:	bf00      	nop
 800fe08:	2400004c 	.word	0x2400004c
 800fe0c:	08012915 	.word	0x08012915
 800fe10:	240001c8 	.word	0x240001c8

0800fe14 <cleanup_stdio>:
 800fe14:	6841      	ldr	r1, [r0, #4]
 800fe16:	4b0c      	ldr	r3, [pc, #48]	@ (800fe48 <cleanup_stdio+0x34>)
 800fe18:	4299      	cmp	r1, r3
 800fe1a:	b510      	push	{r4, lr}
 800fe1c:	4604      	mov	r4, r0
 800fe1e:	d001      	beq.n	800fe24 <cleanup_stdio+0x10>
 800fe20:	f002 fd78 	bl	8012914 <_fflush_r>
 800fe24:	68a1      	ldr	r1, [r4, #8]
 800fe26:	4b09      	ldr	r3, [pc, #36]	@ (800fe4c <cleanup_stdio+0x38>)
 800fe28:	4299      	cmp	r1, r3
 800fe2a:	d002      	beq.n	800fe32 <cleanup_stdio+0x1e>
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	f002 fd71 	bl	8012914 <_fflush_r>
 800fe32:	68e1      	ldr	r1, [r4, #12]
 800fe34:	4b06      	ldr	r3, [pc, #24]	@ (800fe50 <cleanup_stdio+0x3c>)
 800fe36:	4299      	cmp	r1, r3
 800fe38:	d004      	beq.n	800fe44 <cleanup_stdio+0x30>
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe40:	f002 bd68 	b.w	8012914 <_fflush_r>
 800fe44:	bd10      	pop	{r4, pc}
 800fe46:	bf00      	nop
 800fe48:	24000d88 	.word	0x24000d88
 800fe4c:	24000df0 	.word	0x24000df0
 800fe50:	24000e58 	.word	0x24000e58

0800fe54 <global_stdio_init.part.0>:
 800fe54:	b510      	push	{r4, lr}
 800fe56:	4b0b      	ldr	r3, [pc, #44]	@ (800fe84 <global_stdio_init.part.0+0x30>)
 800fe58:	4c0b      	ldr	r4, [pc, #44]	@ (800fe88 <global_stdio_init.part.0+0x34>)
 800fe5a:	4a0c      	ldr	r2, [pc, #48]	@ (800fe8c <global_stdio_init.part.0+0x38>)
 800fe5c:	601a      	str	r2, [r3, #0]
 800fe5e:	4620      	mov	r0, r4
 800fe60:	2200      	movs	r2, #0
 800fe62:	2104      	movs	r1, #4
 800fe64:	f7ff ff94 	bl	800fd90 <std>
 800fe68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	2109      	movs	r1, #9
 800fe70:	f7ff ff8e 	bl	800fd90 <std>
 800fe74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fe78:	2202      	movs	r2, #2
 800fe7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe7e:	2112      	movs	r1, #18
 800fe80:	f7ff bf86 	b.w	800fd90 <std>
 800fe84:	24000ec0 	.word	0x24000ec0
 800fe88:	24000d88 	.word	0x24000d88
 800fe8c:	0800fdfd 	.word	0x0800fdfd

0800fe90 <__sfp_lock_acquire>:
 800fe90:	4801      	ldr	r0, [pc, #4]	@ (800fe98 <__sfp_lock_acquire+0x8>)
 800fe92:	f000 b97a 	b.w	801018a <__retarget_lock_acquire_recursive>
 800fe96:	bf00      	nop
 800fe98:	24000ec9 	.word	0x24000ec9

0800fe9c <__sfp_lock_release>:
 800fe9c:	4801      	ldr	r0, [pc, #4]	@ (800fea4 <__sfp_lock_release+0x8>)
 800fe9e:	f000 b975 	b.w	801018c <__retarget_lock_release_recursive>
 800fea2:	bf00      	nop
 800fea4:	24000ec9 	.word	0x24000ec9

0800fea8 <__sinit>:
 800fea8:	b510      	push	{r4, lr}
 800feaa:	4604      	mov	r4, r0
 800feac:	f7ff fff0 	bl	800fe90 <__sfp_lock_acquire>
 800feb0:	6a23      	ldr	r3, [r4, #32]
 800feb2:	b11b      	cbz	r3, 800febc <__sinit+0x14>
 800feb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800feb8:	f7ff bff0 	b.w	800fe9c <__sfp_lock_release>
 800febc:	4b04      	ldr	r3, [pc, #16]	@ (800fed0 <__sinit+0x28>)
 800febe:	6223      	str	r3, [r4, #32]
 800fec0:	4b04      	ldr	r3, [pc, #16]	@ (800fed4 <__sinit+0x2c>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d1f5      	bne.n	800feb4 <__sinit+0xc>
 800fec8:	f7ff ffc4 	bl	800fe54 <global_stdio_init.part.0>
 800fecc:	e7f2      	b.n	800feb4 <__sinit+0xc>
 800fece:	bf00      	nop
 800fed0:	0800fe15 	.word	0x0800fe15
 800fed4:	24000ec0 	.word	0x24000ec0

0800fed8 <_fwalk_sglue>:
 800fed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fedc:	4607      	mov	r7, r0
 800fede:	4688      	mov	r8, r1
 800fee0:	4614      	mov	r4, r2
 800fee2:	2600      	movs	r6, #0
 800fee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fee8:	f1b9 0901 	subs.w	r9, r9, #1
 800feec:	d505      	bpl.n	800fefa <_fwalk_sglue+0x22>
 800feee:	6824      	ldr	r4, [r4, #0]
 800fef0:	2c00      	cmp	r4, #0
 800fef2:	d1f7      	bne.n	800fee4 <_fwalk_sglue+0xc>
 800fef4:	4630      	mov	r0, r6
 800fef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fefa:	89ab      	ldrh	r3, [r5, #12]
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d907      	bls.n	800ff10 <_fwalk_sglue+0x38>
 800ff00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff04:	3301      	adds	r3, #1
 800ff06:	d003      	beq.n	800ff10 <_fwalk_sglue+0x38>
 800ff08:	4629      	mov	r1, r5
 800ff0a:	4638      	mov	r0, r7
 800ff0c:	47c0      	blx	r8
 800ff0e:	4306      	orrs	r6, r0
 800ff10:	3568      	adds	r5, #104	@ 0x68
 800ff12:	e7e9      	b.n	800fee8 <_fwalk_sglue+0x10>

0800ff14 <siprintf>:
 800ff14:	b40e      	push	{r1, r2, r3}
 800ff16:	b500      	push	{lr}
 800ff18:	b09c      	sub	sp, #112	@ 0x70
 800ff1a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ff1c:	9002      	str	r0, [sp, #8]
 800ff1e:	9006      	str	r0, [sp, #24]
 800ff20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ff24:	4809      	ldr	r0, [pc, #36]	@ (800ff4c <siprintf+0x38>)
 800ff26:	9107      	str	r1, [sp, #28]
 800ff28:	9104      	str	r1, [sp, #16]
 800ff2a:	4909      	ldr	r1, [pc, #36]	@ (800ff50 <siprintf+0x3c>)
 800ff2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff30:	9105      	str	r1, [sp, #20]
 800ff32:	6800      	ldr	r0, [r0, #0]
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	a902      	add	r1, sp, #8
 800ff38:	f002 f852 	bl	8011fe0 <_svfiprintf_r>
 800ff3c:	9b02      	ldr	r3, [sp, #8]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	701a      	strb	r2, [r3, #0]
 800ff42:	b01c      	add	sp, #112	@ 0x70
 800ff44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff48:	b003      	add	sp, #12
 800ff4a:	4770      	bx	lr
 800ff4c:	240001c4 	.word	0x240001c4
 800ff50:	ffff0208 	.word	0xffff0208

0800ff54 <siscanf>:
 800ff54:	b40e      	push	{r1, r2, r3}
 800ff56:	b530      	push	{r4, r5, lr}
 800ff58:	b09c      	sub	sp, #112	@ 0x70
 800ff5a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ff5c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800ff60:	f854 5b04 	ldr.w	r5, [r4], #4
 800ff64:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ff68:	9002      	str	r0, [sp, #8]
 800ff6a:	9006      	str	r0, [sp, #24]
 800ff6c:	f7f0 fa20 	bl	80003b0 <strlen>
 800ff70:	4b0b      	ldr	r3, [pc, #44]	@ (800ffa0 <siscanf+0x4c>)
 800ff72:	9003      	str	r0, [sp, #12]
 800ff74:	9007      	str	r0, [sp, #28]
 800ff76:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff78:	480a      	ldr	r0, [pc, #40]	@ (800ffa4 <siscanf+0x50>)
 800ff7a:	9401      	str	r4, [sp, #4]
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ff80:	9314      	str	r3, [sp, #80]	@ 0x50
 800ff82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ff86:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ff8a:	462a      	mov	r2, r5
 800ff8c:	4623      	mov	r3, r4
 800ff8e:	a902      	add	r1, sp, #8
 800ff90:	6800      	ldr	r0, [r0, #0]
 800ff92:	f002 f979 	bl	8012288 <__ssvfiscanf_r>
 800ff96:	b01c      	add	sp, #112	@ 0x70
 800ff98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff9c:	b003      	add	sp, #12
 800ff9e:	4770      	bx	lr
 800ffa0:	0800ffcb 	.word	0x0800ffcb
 800ffa4:	240001c4 	.word	0x240001c4

0800ffa8 <__sread>:
 800ffa8:	b510      	push	{r4, lr}
 800ffaa:	460c      	mov	r4, r1
 800ffac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffb0:	f000 f88c 	bl	80100cc <_read_r>
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	bfab      	itete	ge
 800ffb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ffba:	89a3      	ldrhlt	r3, [r4, #12]
 800ffbc:	181b      	addge	r3, r3, r0
 800ffbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ffc2:	bfac      	ite	ge
 800ffc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ffc6:	81a3      	strhlt	r3, [r4, #12]
 800ffc8:	bd10      	pop	{r4, pc}

0800ffca <__seofread>:
 800ffca:	2000      	movs	r0, #0
 800ffcc:	4770      	bx	lr

0800ffce <__swrite>:
 800ffce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd2:	461f      	mov	r7, r3
 800ffd4:	898b      	ldrh	r3, [r1, #12]
 800ffd6:	05db      	lsls	r3, r3, #23
 800ffd8:	4605      	mov	r5, r0
 800ffda:	460c      	mov	r4, r1
 800ffdc:	4616      	mov	r6, r2
 800ffde:	d505      	bpl.n	800ffec <__swrite+0x1e>
 800ffe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffe4:	2302      	movs	r3, #2
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	f000 f85e 	bl	80100a8 <_lseek_r>
 800ffec:	89a3      	ldrh	r3, [r4, #12]
 800ffee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fff2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fff6:	81a3      	strh	r3, [r4, #12]
 800fff8:	4632      	mov	r2, r6
 800fffa:	463b      	mov	r3, r7
 800fffc:	4628      	mov	r0, r5
 800fffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010002:	f000 b885 	b.w	8010110 <_write_r>

08010006 <__sseek>:
 8010006:	b510      	push	{r4, lr}
 8010008:	460c      	mov	r4, r1
 801000a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801000e:	f000 f84b 	bl	80100a8 <_lseek_r>
 8010012:	1c43      	adds	r3, r0, #1
 8010014:	89a3      	ldrh	r3, [r4, #12]
 8010016:	bf15      	itete	ne
 8010018:	6560      	strne	r0, [r4, #84]	@ 0x54
 801001a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801001e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010022:	81a3      	strheq	r3, [r4, #12]
 8010024:	bf18      	it	ne
 8010026:	81a3      	strhne	r3, [r4, #12]
 8010028:	bd10      	pop	{r4, pc}

0801002a <__sclose>:
 801002a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801002e:	f000 b82b 	b.w	8010088 <_close_r>

08010032 <memset>:
 8010032:	4402      	add	r2, r0
 8010034:	4603      	mov	r3, r0
 8010036:	4293      	cmp	r3, r2
 8010038:	d100      	bne.n	801003c <memset+0xa>
 801003a:	4770      	bx	lr
 801003c:	f803 1b01 	strb.w	r1, [r3], #1
 8010040:	e7f9      	b.n	8010036 <memset+0x4>

08010042 <strchr>:
 8010042:	b2c9      	uxtb	r1, r1
 8010044:	4603      	mov	r3, r0
 8010046:	4618      	mov	r0, r3
 8010048:	f813 2b01 	ldrb.w	r2, [r3], #1
 801004c:	b112      	cbz	r2, 8010054 <strchr+0x12>
 801004e:	428a      	cmp	r2, r1
 8010050:	d1f9      	bne.n	8010046 <strchr+0x4>
 8010052:	4770      	bx	lr
 8010054:	2900      	cmp	r1, #0
 8010056:	bf18      	it	ne
 8010058:	2000      	movne	r0, #0
 801005a:	4770      	bx	lr

0801005c <strncmp>:
 801005c:	b510      	push	{r4, lr}
 801005e:	b16a      	cbz	r2, 801007c <strncmp+0x20>
 8010060:	3901      	subs	r1, #1
 8010062:	1884      	adds	r4, r0, r2
 8010064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010068:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801006c:	429a      	cmp	r2, r3
 801006e:	d103      	bne.n	8010078 <strncmp+0x1c>
 8010070:	42a0      	cmp	r0, r4
 8010072:	d001      	beq.n	8010078 <strncmp+0x1c>
 8010074:	2a00      	cmp	r2, #0
 8010076:	d1f5      	bne.n	8010064 <strncmp+0x8>
 8010078:	1ad0      	subs	r0, r2, r3
 801007a:	bd10      	pop	{r4, pc}
 801007c:	4610      	mov	r0, r2
 801007e:	e7fc      	b.n	801007a <strncmp+0x1e>

08010080 <_localeconv_r>:
 8010080:	4800      	ldr	r0, [pc, #0]	@ (8010084 <_localeconv_r+0x4>)
 8010082:	4770      	bx	lr
 8010084:	24000148 	.word	0x24000148

08010088 <_close_r>:
 8010088:	b538      	push	{r3, r4, r5, lr}
 801008a:	4d06      	ldr	r5, [pc, #24]	@ (80100a4 <_close_r+0x1c>)
 801008c:	2300      	movs	r3, #0
 801008e:	4604      	mov	r4, r0
 8010090:	4608      	mov	r0, r1
 8010092:	602b      	str	r3, [r5, #0]
 8010094:	f7f1 fc82 	bl	800199c <_close>
 8010098:	1c43      	adds	r3, r0, #1
 801009a:	d102      	bne.n	80100a2 <_close_r+0x1a>
 801009c:	682b      	ldr	r3, [r5, #0]
 801009e:	b103      	cbz	r3, 80100a2 <_close_r+0x1a>
 80100a0:	6023      	str	r3, [r4, #0]
 80100a2:	bd38      	pop	{r3, r4, r5, pc}
 80100a4:	24000ec4 	.word	0x24000ec4

080100a8 <_lseek_r>:
 80100a8:	b538      	push	{r3, r4, r5, lr}
 80100aa:	4d07      	ldr	r5, [pc, #28]	@ (80100c8 <_lseek_r+0x20>)
 80100ac:	4604      	mov	r4, r0
 80100ae:	4608      	mov	r0, r1
 80100b0:	4611      	mov	r1, r2
 80100b2:	2200      	movs	r2, #0
 80100b4:	602a      	str	r2, [r5, #0]
 80100b6:	461a      	mov	r2, r3
 80100b8:	f7f1 fc97 	bl	80019ea <_lseek>
 80100bc:	1c43      	adds	r3, r0, #1
 80100be:	d102      	bne.n	80100c6 <_lseek_r+0x1e>
 80100c0:	682b      	ldr	r3, [r5, #0]
 80100c2:	b103      	cbz	r3, 80100c6 <_lseek_r+0x1e>
 80100c4:	6023      	str	r3, [r4, #0]
 80100c6:	bd38      	pop	{r3, r4, r5, pc}
 80100c8:	24000ec4 	.word	0x24000ec4

080100cc <_read_r>:
 80100cc:	b538      	push	{r3, r4, r5, lr}
 80100ce:	4d07      	ldr	r5, [pc, #28]	@ (80100ec <_read_r+0x20>)
 80100d0:	4604      	mov	r4, r0
 80100d2:	4608      	mov	r0, r1
 80100d4:	4611      	mov	r1, r2
 80100d6:	2200      	movs	r2, #0
 80100d8:	602a      	str	r2, [r5, #0]
 80100da:	461a      	mov	r2, r3
 80100dc:	f7f1 fc25 	bl	800192a <_read>
 80100e0:	1c43      	adds	r3, r0, #1
 80100e2:	d102      	bne.n	80100ea <_read_r+0x1e>
 80100e4:	682b      	ldr	r3, [r5, #0]
 80100e6:	b103      	cbz	r3, 80100ea <_read_r+0x1e>
 80100e8:	6023      	str	r3, [r4, #0]
 80100ea:	bd38      	pop	{r3, r4, r5, pc}
 80100ec:	24000ec4 	.word	0x24000ec4

080100f0 <_sbrk_r>:
 80100f0:	b538      	push	{r3, r4, r5, lr}
 80100f2:	4d06      	ldr	r5, [pc, #24]	@ (801010c <_sbrk_r+0x1c>)
 80100f4:	2300      	movs	r3, #0
 80100f6:	4604      	mov	r4, r0
 80100f8:	4608      	mov	r0, r1
 80100fa:	602b      	str	r3, [r5, #0]
 80100fc:	f7f1 fc82 	bl	8001a04 <_sbrk>
 8010100:	1c43      	adds	r3, r0, #1
 8010102:	d102      	bne.n	801010a <_sbrk_r+0x1a>
 8010104:	682b      	ldr	r3, [r5, #0]
 8010106:	b103      	cbz	r3, 801010a <_sbrk_r+0x1a>
 8010108:	6023      	str	r3, [r4, #0]
 801010a:	bd38      	pop	{r3, r4, r5, pc}
 801010c:	24000ec4 	.word	0x24000ec4

08010110 <_write_r>:
 8010110:	b538      	push	{r3, r4, r5, lr}
 8010112:	4d07      	ldr	r5, [pc, #28]	@ (8010130 <_write_r+0x20>)
 8010114:	4604      	mov	r4, r0
 8010116:	4608      	mov	r0, r1
 8010118:	4611      	mov	r1, r2
 801011a:	2200      	movs	r2, #0
 801011c:	602a      	str	r2, [r5, #0]
 801011e:	461a      	mov	r2, r3
 8010120:	f7f1 fc20 	bl	8001964 <_write>
 8010124:	1c43      	adds	r3, r0, #1
 8010126:	d102      	bne.n	801012e <_write_r+0x1e>
 8010128:	682b      	ldr	r3, [r5, #0]
 801012a:	b103      	cbz	r3, 801012e <_write_r+0x1e>
 801012c:	6023      	str	r3, [r4, #0]
 801012e:	bd38      	pop	{r3, r4, r5, pc}
 8010130:	24000ec4 	.word	0x24000ec4

08010134 <__errno>:
 8010134:	4b01      	ldr	r3, [pc, #4]	@ (801013c <__errno+0x8>)
 8010136:	6818      	ldr	r0, [r3, #0]
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop
 801013c:	240001c4 	.word	0x240001c4

08010140 <__libc_init_array>:
 8010140:	b570      	push	{r4, r5, r6, lr}
 8010142:	4d0d      	ldr	r5, [pc, #52]	@ (8010178 <__libc_init_array+0x38>)
 8010144:	4c0d      	ldr	r4, [pc, #52]	@ (801017c <__libc_init_array+0x3c>)
 8010146:	1b64      	subs	r4, r4, r5
 8010148:	10a4      	asrs	r4, r4, #2
 801014a:	2600      	movs	r6, #0
 801014c:	42a6      	cmp	r6, r4
 801014e:	d109      	bne.n	8010164 <__libc_init_array+0x24>
 8010150:	4d0b      	ldr	r5, [pc, #44]	@ (8010180 <__libc_init_array+0x40>)
 8010152:	4c0c      	ldr	r4, [pc, #48]	@ (8010184 <__libc_init_array+0x44>)
 8010154:	f003 f822 	bl	801319c <_init>
 8010158:	1b64      	subs	r4, r4, r5
 801015a:	10a4      	asrs	r4, r4, #2
 801015c:	2600      	movs	r6, #0
 801015e:	42a6      	cmp	r6, r4
 8010160:	d105      	bne.n	801016e <__libc_init_array+0x2e>
 8010162:	bd70      	pop	{r4, r5, r6, pc}
 8010164:	f855 3b04 	ldr.w	r3, [r5], #4
 8010168:	4798      	blx	r3
 801016a:	3601      	adds	r6, #1
 801016c:	e7ee      	b.n	801014c <__libc_init_array+0xc>
 801016e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010172:	4798      	blx	r3
 8010174:	3601      	adds	r6, #1
 8010176:	e7f2      	b.n	801015e <__libc_init_array+0x1e>
 8010178:	0801373c 	.word	0x0801373c
 801017c:	0801373c 	.word	0x0801373c
 8010180:	0801373c 	.word	0x0801373c
 8010184:	08013740 	.word	0x08013740

08010188 <__retarget_lock_init_recursive>:
 8010188:	4770      	bx	lr

0801018a <__retarget_lock_acquire_recursive>:
 801018a:	4770      	bx	lr

0801018c <__retarget_lock_release_recursive>:
 801018c:	4770      	bx	lr

0801018e <memcpy>:
 801018e:	440a      	add	r2, r1
 8010190:	4291      	cmp	r1, r2
 8010192:	f100 33ff 	add.w	r3, r0, #4294967295
 8010196:	d100      	bne.n	801019a <memcpy+0xc>
 8010198:	4770      	bx	lr
 801019a:	b510      	push	{r4, lr}
 801019c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101a4:	4291      	cmp	r1, r2
 80101a6:	d1f9      	bne.n	801019c <memcpy+0xe>
 80101a8:	bd10      	pop	{r4, pc}
 80101aa:	0000      	movs	r0, r0
 80101ac:	0000      	movs	r0, r0
	...

080101b0 <nan>:
 80101b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80101b8 <nan+0x8>
 80101b4:	4770      	bx	lr
 80101b6:	bf00      	nop
 80101b8:	00000000 	.word	0x00000000
 80101bc:	7ff80000 	.word	0x7ff80000

080101c0 <nanf>:
 80101c0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80101c8 <nanf+0x8>
 80101c4:	4770      	bx	lr
 80101c6:	bf00      	nop
 80101c8:	7fc00000 	.word	0x7fc00000

080101cc <quorem>:
 80101cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d0:	6903      	ldr	r3, [r0, #16]
 80101d2:	690c      	ldr	r4, [r1, #16]
 80101d4:	42a3      	cmp	r3, r4
 80101d6:	4607      	mov	r7, r0
 80101d8:	db7e      	blt.n	80102d8 <quorem+0x10c>
 80101da:	3c01      	subs	r4, #1
 80101dc:	f101 0814 	add.w	r8, r1, #20
 80101e0:	00a3      	lsls	r3, r4, #2
 80101e2:	f100 0514 	add.w	r5, r0, #20
 80101e6:	9300      	str	r3, [sp, #0]
 80101e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80101ec:	9301      	str	r3, [sp, #4]
 80101ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80101f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80101f6:	3301      	adds	r3, #1
 80101f8:	429a      	cmp	r2, r3
 80101fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80101fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8010202:	d32e      	bcc.n	8010262 <quorem+0x96>
 8010204:	f04f 0a00 	mov.w	sl, #0
 8010208:	46c4      	mov	ip, r8
 801020a:	46ae      	mov	lr, r5
 801020c:	46d3      	mov	fp, sl
 801020e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010212:	b298      	uxth	r0, r3
 8010214:	fb06 a000 	mla	r0, r6, r0, sl
 8010218:	0c02      	lsrs	r2, r0, #16
 801021a:	0c1b      	lsrs	r3, r3, #16
 801021c:	fb06 2303 	mla	r3, r6, r3, r2
 8010220:	f8de 2000 	ldr.w	r2, [lr]
 8010224:	b280      	uxth	r0, r0
 8010226:	b292      	uxth	r2, r2
 8010228:	1a12      	subs	r2, r2, r0
 801022a:	445a      	add	r2, fp
 801022c:	f8de 0000 	ldr.w	r0, [lr]
 8010230:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010234:	b29b      	uxth	r3, r3
 8010236:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801023a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801023e:	b292      	uxth	r2, r2
 8010240:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010244:	45e1      	cmp	r9, ip
 8010246:	f84e 2b04 	str.w	r2, [lr], #4
 801024a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801024e:	d2de      	bcs.n	801020e <quorem+0x42>
 8010250:	9b00      	ldr	r3, [sp, #0]
 8010252:	58eb      	ldr	r3, [r5, r3]
 8010254:	b92b      	cbnz	r3, 8010262 <quorem+0x96>
 8010256:	9b01      	ldr	r3, [sp, #4]
 8010258:	3b04      	subs	r3, #4
 801025a:	429d      	cmp	r5, r3
 801025c:	461a      	mov	r2, r3
 801025e:	d32f      	bcc.n	80102c0 <quorem+0xf4>
 8010260:	613c      	str	r4, [r7, #16]
 8010262:	4638      	mov	r0, r7
 8010264:	f001 fbec 	bl	8011a40 <__mcmp>
 8010268:	2800      	cmp	r0, #0
 801026a:	db25      	blt.n	80102b8 <quorem+0xec>
 801026c:	4629      	mov	r1, r5
 801026e:	2000      	movs	r0, #0
 8010270:	f858 2b04 	ldr.w	r2, [r8], #4
 8010274:	f8d1 c000 	ldr.w	ip, [r1]
 8010278:	fa1f fe82 	uxth.w	lr, r2
 801027c:	fa1f f38c 	uxth.w	r3, ip
 8010280:	eba3 030e 	sub.w	r3, r3, lr
 8010284:	4403      	add	r3, r0
 8010286:	0c12      	lsrs	r2, r2, #16
 8010288:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801028c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010290:	b29b      	uxth	r3, r3
 8010292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010296:	45c1      	cmp	r9, r8
 8010298:	f841 3b04 	str.w	r3, [r1], #4
 801029c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80102a0:	d2e6      	bcs.n	8010270 <quorem+0xa4>
 80102a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80102a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80102aa:	b922      	cbnz	r2, 80102b6 <quorem+0xea>
 80102ac:	3b04      	subs	r3, #4
 80102ae:	429d      	cmp	r5, r3
 80102b0:	461a      	mov	r2, r3
 80102b2:	d30b      	bcc.n	80102cc <quorem+0x100>
 80102b4:	613c      	str	r4, [r7, #16]
 80102b6:	3601      	adds	r6, #1
 80102b8:	4630      	mov	r0, r6
 80102ba:	b003      	add	sp, #12
 80102bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c0:	6812      	ldr	r2, [r2, #0]
 80102c2:	3b04      	subs	r3, #4
 80102c4:	2a00      	cmp	r2, #0
 80102c6:	d1cb      	bne.n	8010260 <quorem+0x94>
 80102c8:	3c01      	subs	r4, #1
 80102ca:	e7c6      	b.n	801025a <quorem+0x8e>
 80102cc:	6812      	ldr	r2, [r2, #0]
 80102ce:	3b04      	subs	r3, #4
 80102d0:	2a00      	cmp	r2, #0
 80102d2:	d1ef      	bne.n	80102b4 <quorem+0xe8>
 80102d4:	3c01      	subs	r4, #1
 80102d6:	e7ea      	b.n	80102ae <quorem+0xe2>
 80102d8:	2000      	movs	r0, #0
 80102da:	e7ee      	b.n	80102ba <quorem+0xee>
 80102dc:	0000      	movs	r0, r0
	...

080102e0 <_dtoa_r>:
 80102e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102e4:	ed2d 8b02 	vpush	{d8}
 80102e8:	69c7      	ldr	r7, [r0, #28]
 80102ea:	b091      	sub	sp, #68	@ 0x44
 80102ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80102f0:	ec55 4b10 	vmov	r4, r5, d0
 80102f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80102f6:	9107      	str	r1, [sp, #28]
 80102f8:	4681      	mov	r9, r0
 80102fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80102fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80102fe:	b97f      	cbnz	r7, 8010320 <_dtoa_r+0x40>
 8010300:	2010      	movs	r0, #16
 8010302:	f7fe f893 	bl	800e42c <malloc>
 8010306:	4602      	mov	r2, r0
 8010308:	f8c9 001c 	str.w	r0, [r9, #28]
 801030c:	b920      	cbnz	r0, 8010318 <_dtoa_r+0x38>
 801030e:	4ba0      	ldr	r3, [pc, #640]	@ (8010590 <_dtoa_r+0x2b0>)
 8010310:	21ef      	movs	r1, #239	@ 0xef
 8010312:	48a0      	ldr	r0, [pc, #640]	@ (8010594 <_dtoa_r+0x2b4>)
 8010314:	f002 fbb4 	bl	8012a80 <__assert_func>
 8010318:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801031c:	6007      	str	r7, [r0, #0]
 801031e:	60c7      	str	r7, [r0, #12]
 8010320:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010324:	6819      	ldr	r1, [r3, #0]
 8010326:	b159      	cbz	r1, 8010340 <_dtoa_r+0x60>
 8010328:	685a      	ldr	r2, [r3, #4]
 801032a:	604a      	str	r2, [r1, #4]
 801032c:	2301      	movs	r3, #1
 801032e:	4093      	lsls	r3, r2
 8010330:	608b      	str	r3, [r1, #8]
 8010332:	4648      	mov	r0, r9
 8010334:	f001 f900 	bl	8011538 <_Bfree>
 8010338:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801033c:	2200      	movs	r2, #0
 801033e:	601a      	str	r2, [r3, #0]
 8010340:	1e2b      	subs	r3, r5, #0
 8010342:	bfbb      	ittet	lt
 8010344:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010348:	9303      	strlt	r3, [sp, #12]
 801034a:	2300      	movge	r3, #0
 801034c:	2201      	movlt	r2, #1
 801034e:	bfac      	ite	ge
 8010350:	6033      	strge	r3, [r6, #0]
 8010352:	6032      	strlt	r2, [r6, #0]
 8010354:	4b90      	ldr	r3, [pc, #576]	@ (8010598 <_dtoa_r+0x2b8>)
 8010356:	9e03      	ldr	r6, [sp, #12]
 8010358:	43b3      	bics	r3, r6
 801035a:	d110      	bne.n	801037e <_dtoa_r+0x9e>
 801035c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801035e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010362:	6013      	str	r3, [r2, #0]
 8010364:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010368:	4323      	orrs	r3, r4
 801036a:	f000 84de 	beq.w	8010d2a <_dtoa_r+0xa4a>
 801036e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010370:	4f8a      	ldr	r7, [pc, #552]	@ (801059c <_dtoa_r+0x2bc>)
 8010372:	2b00      	cmp	r3, #0
 8010374:	f000 84e0 	beq.w	8010d38 <_dtoa_r+0xa58>
 8010378:	1cfb      	adds	r3, r7, #3
 801037a:	f000 bcdb 	b.w	8010d34 <_dtoa_r+0xa54>
 801037e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010382:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801038a:	d10a      	bne.n	80103a2 <_dtoa_r+0xc2>
 801038c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801038e:	2301      	movs	r3, #1
 8010390:	6013      	str	r3, [r2, #0]
 8010392:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010394:	b113      	cbz	r3, 801039c <_dtoa_r+0xbc>
 8010396:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010398:	4b81      	ldr	r3, [pc, #516]	@ (80105a0 <_dtoa_r+0x2c0>)
 801039a:	6013      	str	r3, [r2, #0]
 801039c:	4f81      	ldr	r7, [pc, #516]	@ (80105a4 <_dtoa_r+0x2c4>)
 801039e:	f000 bccb 	b.w	8010d38 <_dtoa_r+0xa58>
 80103a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80103a4:	a90f      	add	r1, sp, #60	@ 0x3c
 80103a6:	4648      	mov	r0, r9
 80103a8:	eeb0 0b48 	vmov.f64	d0, d8
 80103ac:	f001 fc68 	bl	8011c80 <__d2b>
 80103b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80103b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80103b6:	9001      	str	r0, [sp, #4]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d045      	beq.n	8010448 <_dtoa_r+0x168>
 80103bc:	eeb0 7b48 	vmov.f64	d7, d8
 80103c0:	ee18 1a90 	vmov	r1, s17
 80103c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80103c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80103cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80103d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80103d4:	2500      	movs	r5, #0
 80103d6:	ee07 1a90 	vmov	s15, r1
 80103da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80103de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010578 <_dtoa_r+0x298>
 80103e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80103e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010580 <_dtoa_r+0x2a0>
 80103ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80103ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010588 <_dtoa_r+0x2a8>
 80103f2:	ee07 3a90 	vmov	s15, r3
 80103f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80103fa:	eeb0 7b46 	vmov.f64	d7, d6
 80103fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010402:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010406:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801040a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801040e:	ee16 8a90 	vmov	r8, s13
 8010412:	d508      	bpl.n	8010426 <_dtoa_r+0x146>
 8010414:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010418:	eeb4 6b47 	vcmp.f64	d6, d7
 801041c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010420:	bf18      	it	ne
 8010422:	f108 38ff 	addne.w	r8, r8, #4294967295
 8010426:	f1b8 0f16 	cmp.w	r8, #22
 801042a:	d82b      	bhi.n	8010484 <_dtoa_r+0x1a4>
 801042c:	495e      	ldr	r1, [pc, #376]	@ (80105a8 <_dtoa_r+0x2c8>)
 801042e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8010432:	ed91 7b00 	vldr	d7, [r1]
 8010436:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801043a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801043e:	d501      	bpl.n	8010444 <_dtoa_r+0x164>
 8010440:	f108 38ff 	add.w	r8, r8, #4294967295
 8010444:	2100      	movs	r1, #0
 8010446:	e01e      	b.n	8010486 <_dtoa_r+0x1a6>
 8010448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801044a:	4413      	add	r3, r2
 801044c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010450:	2920      	cmp	r1, #32
 8010452:	bfc1      	itttt	gt
 8010454:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010458:	408e      	lslgt	r6, r1
 801045a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801045e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010462:	bfd6      	itet	le
 8010464:	f1c1 0120 	rsble	r1, r1, #32
 8010468:	4331      	orrgt	r1, r6
 801046a:	fa04 f101 	lslle.w	r1, r4, r1
 801046e:	ee07 1a90 	vmov	s15, r1
 8010472:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010476:	3b01      	subs	r3, #1
 8010478:	ee17 1a90 	vmov	r1, s15
 801047c:	2501      	movs	r5, #1
 801047e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8010482:	e7a8      	b.n	80103d6 <_dtoa_r+0xf6>
 8010484:	2101      	movs	r1, #1
 8010486:	1ad2      	subs	r2, r2, r3
 8010488:	1e53      	subs	r3, r2, #1
 801048a:	9306      	str	r3, [sp, #24]
 801048c:	bf45      	ittet	mi
 801048e:	f1c2 0301 	rsbmi	r3, r2, #1
 8010492:	9305      	strmi	r3, [sp, #20]
 8010494:	2300      	movpl	r3, #0
 8010496:	2300      	movmi	r3, #0
 8010498:	bf4c      	ite	mi
 801049a:	9306      	strmi	r3, [sp, #24]
 801049c:	9305      	strpl	r3, [sp, #20]
 801049e:	f1b8 0f00 	cmp.w	r8, #0
 80104a2:	910c      	str	r1, [sp, #48]	@ 0x30
 80104a4:	db18      	blt.n	80104d8 <_dtoa_r+0x1f8>
 80104a6:	9b06      	ldr	r3, [sp, #24]
 80104a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80104ac:	4443      	add	r3, r8
 80104ae:	9306      	str	r3, [sp, #24]
 80104b0:	2300      	movs	r3, #0
 80104b2:	9a07      	ldr	r2, [sp, #28]
 80104b4:	2a09      	cmp	r2, #9
 80104b6:	d849      	bhi.n	801054c <_dtoa_r+0x26c>
 80104b8:	2a05      	cmp	r2, #5
 80104ba:	bfc4      	itt	gt
 80104bc:	3a04      	subgt	r2, #4
 80104be:	9207      	strgt	r2, [sp, #28]
 80104c0:	9a07      	ldr	r2, [sp, #28]
 80104c2:	f1a2 0202 	sub.w	r2, r2, #2
 80104c6:	bfcc      	ite	gt
 80104c8:	2400      	movgt	r4, #0
 80104ca:	2401      	movle	r4, #1
 80104cc:	2a03      	cmp	r2, #3
 80104ce:	d848      	bhi.n	8010562 <_dtoa_r+0x282>
 80104d0:	e8df f002 	tbb	[pc, r2]
 80104d4:	3a2c2e0b 	.word	0x3a2c2e0b
 80104d8:	9b05      	ldr	r3, [sp, #20]
 80104da:	2200      	movs	r2, #0
 80104dc:	eba3 0308 	sub.w	r3, r3, r8
 80104e0:	9305      	str	r3, [sp, #20]
 80104e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80104e4:	f1c8 0300 	rsb	r3, r8, #0
 80104e8:	e7e3      	b.n	80104b2 <_dtoa_r+0x1d2>
 80104ea:	2200      	movs	r2, #0
 80104ec:	9208      	str	r2, [sp, #32]
 80104ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104f0:	2a00      	cmp	r2, #0
 80104f2:	dc39      	bgt.n	8010568 <_dtoa_r+0x288>
 80104f4:	f04f 0b01 	mov.w	fp, #1
 80104f8:	46da      	mov	sl, fp
 80104fa:	465a      	mov	r2, fp
 80104fc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8010500:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8010504:	2100      	movs	r1, #0
 8010506:	2004      	movs	r0, #4
 8010508:	f100 0614 	add.w	r6, r0, #20
 801050c:	4296      	cmp	r6, r2
 801050e:	d930      	bls.n	8010572 <_dtoa_r+0x292>
 8010510:	6079      	str	r1, [r7, #4]
 8010512:	4648      	mov	r0, r9
 8010514:	9304      	str	r3, [sp, #16]
 8010516:	f000 ffcf 	bl	80114b8 <_Balloc>
 801051a:	9b04      	ldr	r3, [sp, #16]
 801051c:	4607      	mov	r7, r0
 801051e:	2800      	cmp	r0, #0
 8010520:	d146      	bne.n	80105b0 <_dtoa_r+0x2d0>
 8010522:	4b22      	ldr	r3, [pc, #136]	@ (80105ac <_dtoa_r+0x2cc>)
 8010524:	4602      	mov	r2, r0
 8010526:	f240 11af 	movw	r1, #431	@ 0x1af
 801052a:	e6f2      	b.n	8010312 <_dtoa_r+0x32>
 801052c:	2201      	movs	r2, #1
 801052e:	e7dd      	b.n	80104ec <_dtoa_r+0x20c>
 8010530:	2200      	movs	r2, #0
 8010532:	9208      	str	r2, [sp, #32]
 8010534:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010536:	eb08 0b02 	add.w	fp, r8, r2
 801053a:	f10b 0a01 	add.w	sl, fp, #1
 801053e:	4652      	mov	r2, sl
 8010540:	2a01      	cmp	r2, #1
 8010542:	bfb8      	it	lt
 8010544:	2201      	movlt	r2, #1
 8010546:	e7db      	b.n	8010500 <_dtoa_r+0x220>
 8010548:	2201      	movs	r2, #1
 801054a:	e7f2      	b.n	8010532 <_dtoa_r+0x252>
 801054c:	2401      	movs	r4, #1
 801054e:	2200      	movs	r2, #0
 8010550:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010554:	f04f 3bff 	mov.w	fp, #4294967295
 8010558:	2100      	movs	r1, #0
 801055a:	46da      	mov	sl, fp
 801055c:	2212      	movs	r2, #18
 801055e:	9109      	str	r1, [sp, #36]	@ 0x24
 8010560:	e7ce      	b.n	8010500 <_dtoa_r+0x220>
 8010562:	2201      	movs	r2, #1
 8010564:	9208      	str	r2, [sp, #32]
 8010566:	e7f5      	b.n	8010554 <_dtoa_r+0x274>
 8010568:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801056c:	46da      	mov	sl, fp
 801056e:	465a      	mov	r2, fp
 8010570:	e7c6      	b.n	8010500 <_dtoa_r+0x220>
 8010572:	3101      	adds	r1, #1
 8010574:	0040      	lsls	r0, r0, #1
 8010576:	e7c7      	b.n	8010508 <_dtoa_r+0x228>
 8010578:	636f4361 	.word	0x636f4361
 801057c:	3fd287a7 	.word	0x3fd287a7
 8010580:	8b60c8b3 	.word	0x8b60c8b3
 8010584:	3fc68a28 	.word	0x3fc68a28
 8010588:	509f79fb 	.word	0x509f79fb
 801058c:	3fd34413 	.word	0x3fd34413
 8010590:	0801338c 	.word	0x0801338c
 8010594:	080133a3 	.word	0x080133a3
 8010598:	7ff00000 	.word	0x7ff00000
 801059c:	08013388 	.word	0x08013388
 80105a0:	080136f1 	.word	0x080136f1
 80105a4:	080136f0 	.word	0x080136f0
 80105a8:	08013500 	.word	0x08013500
 80105ac:	080133fb 	.word	0x080133fb
 80105b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80105b4:	f1ba 0f0e 	cmp.w	sl, #14
 80105b8:	6010      	str	r0, [r2, #0]
 80105ba:	d86f      	bhi.n	801069c <_dtoa_r+0x3bc>
 80105bc:	2c00      	cmp	r4, #0
 80105be:	d06d      	beq.n	801069c <_dtoa_r+0x3bc>
 80105c0:	f1b8 0f00 	cmp.w	r8, #0
 80105c4:	f340 80c2 	ble.w	801074c <_dtoa_r+0x46c>
 80105c8:	4aca      	ldr	r2, [pc, #808]	@ (80108f4 <_dtoa_r+0x614>)
 80105ca:	f008 010f 	and.w	r1, r8, #15
 80105ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80105d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80105d6:	ed92 7b00 	vldr	d7, [r2]
 80105da:	ea4f 1128 	mov.w	r1, r8, asr #4
 80105de:	f000 80a9 	beq.w	8010734 <_dtoa_r+0x454>
 80105e2:	4ac5      	ldr	r2, [pc, #788]	@ (80108f8 <_dtoa_r+0x618>)
 80105e4:	ed92 6b08 	vldr	d6, [r2, #32]
 80105e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80105ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80105f0:	f001 010f 	and.w	r1, r1, #15
 80105f4:	2203      	movs	r2, #3
 80105f6:	48c0      	ldr	r0, [pc, #768]	@ (80108f8 <_dtoa_r+0x618>)
 80105f8:	2900      	cmp	r1, #0
 80105fa:	f040 809d 	bne.w	8010738 <_dtoa_r+0x458>
 80105fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010602:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010606:	ed8d 7b02 	vstr	d7, [sp, #8]
 801060a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801060c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010610:	2900      	cmp	r1, #0
 8010612:	f000 80c1 	beq.w	8010798 <_dtoa_r+0x4b8>
 8010616:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801061a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801061e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010622:	f140 80b9 	bpl.w	8010798 <_dtoa_r+0x4b8>
 8010626:	f1ba 0f00 	cmp.w	sl, #0
 801062a:	f000 80b5 	beq.w	8010798 <_dtoa_r+0x4b8>
 801062e:	f1bb 0f00 	cmp.w	fp, #0
 8010632:	dd31      	ble.n	8010698 <_dtoa_r+0x3b8>
 8010634:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010638:	ee27 7b06 	vmul.f64	d7, d7, d6
 801063c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010640:	f108 31ff 	add.w	r1, r8, #4294967295
 8010644:	9104      	str	r1, [sp, #16]
 8010646:	3201      	adds	r2, #1
 8010648:	465c      	mov	r4, fp
 801064a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801064e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010652:	ee07 2a90 	vmov	s15, r2
 8010656:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801065a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801065e:	ee15 2a90 	vmov	r2, s11
 8010662:	ec51 0b15 	vmov	r0, r1, d5
 8010666:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801066a:	2c00      	cmp	r4, #0
 801066c:	f040 8098 	bne.w	80107a0 <_dtoa_r+0x4c0>
 8010670:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010674:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010678:	ec41 0b17 	vmov	d7, r0, r1
 801067c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010684:	f300 8261 	bgt.w	8010b4a <_dtoa_r+0x86a>
 8010688:	eeb1 7b47 	vneg.f64	d7, d7
 801068c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010694:	f100 80f5 	bmi.w	8010882 <_dtoa_r+0x5a2>
 8010698:	ed8d 8b02 	vstr	d8, [sp, #8]
 801069c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801069e:	2a00      	cmp	r2, #0
 80106a0:	f2c0 812c 	blt.w	80108fc <_dtoa_r+0x61c>
 80106a4:	f1b8 0f0e 	cmp.w	r8, #14
 80106a8:	f300 8128 	bgt.w	80108fc <_dtoa_r+0x61c>
 80106ac:	4b91      	ldr	r3, [pc, #580]	@ (80108f4 <_dtoa_r+0x614>)
 80106ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80106b2:	ed93 6b00 	vldr	d6, [r3]
 80106b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	da03      	bge.n	80106c4 <_dtoa_r+0x3e4>
 80106bc:	f1ba 0f00 	cmp.w	sl, #0
 80106c0:	f340 80d2 	ble.w	8010868 <_dtoa_r+0x588>
 80106c4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80106c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80106cc:	463e      	mov	r6, r7
 80106ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80106d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80106d6:	ee15 3a10 	vmov	r3, s10
 80106da:	3330      	adds	r3, #48	@ 0x30
 80106dc:	f806 3b01 	strb.w	r3, [r6], #1
 80106e0:	1bf3      	subs	r3, r6, r7
 80106e2:	459a      	cmp	sl, r3
 80106e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80106e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80106ec:	f040 80f8 	bne.w	80108e0 <_dtoa_r+0x600>
 80106f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80106f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80106f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106fc:	f300 80dd 	bgt.w	80108ba <_dtoa_r+0x5da>
 8010700:	eeb4 7b46 	vcmp.f64	d7, d6
 8010704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010708:	d104      	bne.n	8010714 <_dtoa_r+0x434>
 801070a:	ee15 3a10 	vmov	r3, s10
 801070e:	07db      	lsls	r3, r3, #31
 8010710:	f100 80d3 	bmi.w	80108ba <_dtoa_r+0x5da>
 8010714:	9901      	ldr	r1, [sp, #4]
 8010716:	4648      	mov	r0, r9
 8010718:	f000 ff0e 	bl	8011538 <_Bfree>
 801071c:	2300      	movs	r3, #0
 801071e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010720:	7033      	strb	r3, [r6, #0]
 8010722:	f108 0301 	add.w	r3, r8, #1
 8010726:	6013      	str	r3, [r2, #0]
 8010728:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801072a:	2b00      	cmp	r3, #0
 801072c:	f000 8304 	beq.w	8010d38 <_dtoa_r+0xa58>
 8010730:	601e      	str	r6, [r3, #0]
 8010732:	e301      	b.n	8010d38 <_dtoa_r+0xa58>
 8010734:	2202      	movs	r2, #2
 8010736:	e75e      	b.n	80105f6 <_dtoa_r+0x316>
 8010738:	07cc      	lsls	r4, r1, #31
 801073a:	d504      	bpl.n	8010746 <_dtoa_r+0x466>
 801073c:	ed90 6b00 	vldr	d6, [r0]
 8010740:	3201      	adds	r2, #1
 8010742:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010746:	1049      	asrs	r1, r1, #1
 8010748:	3008      	adds	r0, #8
 801074a:	e755      	b.n	80105f8 <_dtoa_r+0x318>
 801074c:	d022      	beq.n	8010794 <_dtoa_r+0x4b4>
 801074e:	f1c8 0100 	rsb	r1, r8, #0
 8010752:	4a68      	ldr	r2, [pc, #416]	@ (80108f4 <_dtoa_r+0x614>)
 8010754:	f001 000f 	and.w	r0, r1, #15
 8010758:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801075c:	ed92 7b00 	vldr	d7, [r2]
 8010760:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010764:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010768:	4863      	ldr	r0, [pc, #396]	@ (80108f8 <_dtoa_r+0x618>)
 801076a:	1109      	asrs	r1, r1, #4
 801076c:	2400      	movs	r4, #0
 801076e:	2202      	movs	r2, #2
 8010770:	b929      	cbnz	r1, 801077e <_dtoa_r+0x49e>
 8010772:	2c00      	cmp	r4, #0
 8010774:	f43f af49 	beq.w	801060a <_dtoa_r+0x32a>
 8010778:	ed8d 7b02 	vstr	d7, [sp, #8]
 801077c:	e745      	b.n	801060a <_dtoa_r+0x32a>
 801077e:	07ce      	lsls	r6, r1, #31
 8010780:	d505      	bpl.n	801078e <_dtoa_r+0x4ae>
 8010782:	ed90 6b00 	vldr	d6, [r0]
 8010786:	3201      	adds	r2, #1
 8010788:	2401      	movs	r4, #1
 801078a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801078e:	1049      	asrs	r1, r1, #1
 8010790:	3008      	adds	r0, #8
 8010792:	e7ed      	b.n	8010770 <_dtoa_r+0x490>
 8010794:	2202      	movs	r2, #2
 8010796:	e738      	b.n	801060a <_dtoa_r+0x32a>
 8010798:	f8cd 8010 	str.w	r8, [sp, #16]
 801079c:	4654      	mov	r4, sl
 801079e:	e754      	b.n	801064a <_dtoa_r+0x36a>
 80107a0:	4a54      	ldr	r2, [pc, #336]	@ (80108f4 <_dtoa_r+0x614>)
 80107a2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80107a6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80107aa:	9a08      	ldr	r2, [sp, #32]
 80107ac:	ec41 0b17 	vmov	d7, r0, r1
 80107b0:	443c      	add	r4, r7
 80107b2:	b34a      	cbz	r2, 8010808 <_dtoa_r+0x528>
 80107b4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80107b8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80107bc:	463e      	mov	r6, r7
 80107be:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80107c2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80107c6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80107ca:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80107ce:	ee14 2a90 	vmov	r2, s9
 80107d2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80107d6:	3230      	adds	r2, #48	@ 0x30
 80107d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80107dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80107e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e4:	f806 2b01 	strb.w	r2, [r6], #1
 80107e8:	d438      	bmi.n	801085c <_dtoa_r+0x57c>
 80107ea:	ee32 5b46 	vsub.f64	d5, d2, d6
 80107ee:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80107f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f6:	d462      	bmi.n	80108be <_dtoa_r+0x5de>
 80107f8:	42a6      	cmp	r6, r4
 80107fa:	f43f af4d 	beq.w	8010698 <_dtoa_r+0x3b8>
 80107fe:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010802:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010806:	e7e0      	b.n	80107ca <_dtoa_r+0x4ea>
 8010808:	4621      	mov	r1, r4
 801080a:	463e      	mov	r6, r7
 801080c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010810:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010814:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010818:	ee14 2a90 	vmov	r2, s9
 801081c:	3230      	adds	r2, #48	@ 0x30
 801081e:	f806 2b01 	strb.w	r2, [r6], #1
 8010822:	42a6      	cmp	r6, r4
 8010824:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010828:	ee36 6b45 	vsub.f64	d6, d6, d5
 801082c:	d119      	bne.n	8010862 <_dtoa_r+0x582>
 801082e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010832:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010836:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801083a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801083e:	dc3e      	bgt.n	80108be <_dtoa_r+0x5de>
 8010840:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010844:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801084c:	f57f af24 	bpl.w	8010698 <_dtoa_r+0x3b8>
 8010850:	460e      	mov	r6, r1
 8010852:	3901      	subs	r1, #1
 8010854:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010858:	2b30      	cmp	r3, #48	@ 0x30
 801085a:	d0f9      	beq.n	8010850 <_dtoa_r+0x570>
 801085c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010860:	e758      	b.n	8010714 <_dtoa_r+0x434>
 8010862:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010866:	e7d5      	b.n	8010814 <_dtoa_r+0x534>
 8010868:	d10b      	bne.n	8010882 <_dtoa_r+0x5a2>
 801086a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801086e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010872:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010876:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801087a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801087e:	f2c0 8161 	blt.w	8010b44 <_dtoa_r+0x864>
 8010882:	2400      	movs	r4, #0
 8010884:	4625      	mov	r5, r4
 8010886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010888:	43db      	mvns	r3, r3
 801088a:	9304      	str	r3, [sp, #16]
 801088c:	463e      	mov	r6, r7
 801088e:	f04f 0800 	mov.w	r8, #0
 8010892:	4621      	mov	r1, r4
 8010894:	4648      	mov	r0, r9
 8010896:	f000 fe4f 	bl	8011538 <_Bfree>
 801089a:	2d00      	cmp	r5, #0
 801089c:	d0de      	beq.n	801085c <_dtoa_r+0x57c>
 801089e:	f1b8 0f00 	cmp.w	r8, #0
 80108a2:	d005      	beq.n	80108b0 <_dtoa_r+0x5d0>
 80108a4:	45a8      	cmp	r8, r5
 80108a6:	d003      	beq.n	80108b0 <_dtoa_r+0x5d0>
 80108a8:	4641      	mov	r1, r8
 80108aa:	4648      	mov	r0, r9
 80108ac:	f000 fe44 	bl	8011538 <_Bfree>
 80108b0:	4629      	mov	r1, r5
 80108b2:	4648      	mov	r0, r9
 80108b4:	f000 fe40 	bl	8011538 <_Bfree>
 80108b8:	e7d0      	b.n	801085c <_dtoa_r+0x57c>
 80108ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80108be:	4633      	mov	r3, r6
 80108c0:	461e      	mov	r6, r3
 80108c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108c6:	2a39      	cmp	r2, #57	@ 0x39
 80108c8:	d106      	bne.n	80108d8 <_dtoa_r+0x5f8>
 80108ca:	429f      	cmp	r7, r3
 80108cc:	d1f8      	bne.n	80108c0 <_dtoa_r+0x5e0>
 80108ce:	9a04      	ldr	r2, [sp, #16]
 80108d0:	3201      	adds	r2, #1
 80108d2:	9204      	str	r2, [sp, #16]
 80108d4:	2230      	movs	r2, #48	@ 0x30
 80108d6:	703a      	strb	r2, [r7, #0]
 80108d8:	781a      	ldrb	r2, [r3, #0]
 80108da:	3201      	adds	r2, #1
 80108dc:	701a      	strb	r2, [r3, #0]
 80108de:	e7bd      	b.n	801085c <_dtoa_r+0x57c>
 80108e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80108e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80108e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ec:	f47f aeef 	bne.w	80106ce <_dtoa_r+0x3ee>
 80108f0:	e710      	b.n	8010714 <_dtoa_r+0x434>
 80108f2:	bf00      	nop
 80108f4:	08013500 	.word	0x08013500
 80108f8:	080134d8 	.word	0x080134d8
 80108fc:	9908      	ldr	r1, [sp, #32]
 80108fe:	2900      	cmp	r1, #0
 8010900:	f000 80e3 	beq.w	8010aca <_dtoa_r+0x7ea>
 8010904:	9907      	ldr	r1, [sp, #28]
 8010906:	2901      	cmp	r1, #1
 8010908:	f300 80c8 	bgt.w	8010a9c <_dtoa_r+0x7bc>
 801090c:	2d00      	cmp	r5, #0
 801090e:	f000 80c1 	beq.w	8010a94 <_dtoa_r+0x7b4>
 8010912:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010916:	9e05      	ldr	r6, [sp, #20]
 8010918:	461c      	mov	r4, r3
 801091a:	9304      	str	r3, [sp, #16]
 801091c:	9b05      	ldr	r3, [sp, #20]
 801091e:	4413      	add	r3, r2
 8010920:	9305      	str	r3, [sp, #20]
 8010922:	9b06      	ldr	r3, [sp, #24]
 8010924:	2101      	movs	r1, #1
 8010926:	4413      	add	r3, r2
 8010928:	4648      	mov	r0, r9
 801092a:	9306      	str	r3, [sp, #24]
 801092c:	f000 ff02 	bl	8011734 <__i2b>
 8010930:	9b04      	ldr	r3, [sp, #16]
 8010932:	4605      	mov	r5, r0
 8010934:	b166      	cbz	r6, 8010950 <_dtoa_r+0x670>
 8010936:	9a06      	ldr	r2, [sp, #24]
 8010938:	2a00      	cmp	r2, #0
 801093a:	dd09      	ble.n	8010950 <_dtoa_r+0x670>
 801093c:	42b2      	cmp	r2, r6
 801093e:	9905      	ldr	r1, [sp, #20]
 8010940:	bfa8      	it	ge
 8010942:	4632      	movge	r2, r6
 8010944:	1a89      	subs	r1, r1, r2
 8010946:	9105      	str	r1, [sp, #20]
 8010948:	9906      	ldr	r1, [sp, #24]
 801094a:	1ab6      	subs	r6, r6, r2
 801094c:	1a8a      	subs	r2, r1, r2
 801094e:	9206      	str	r2, [sp, #24]
 8010950:	b1fb      	cbz	r3, 8010992 <_dtoa_r+0x6b2>
 8010952:	9a08      	ldr	r2, [sp, #32]
 8010954:	2a00      	cmp	r2, #0
 8010956:	f000 80bc 	beq.w	8010ad2 <_dtoa_r+0x7f2>
 801095a:	b19c      	cbz	r4, 8010984 <_dtoa_r+0x6a4>
 801095c:	4629      	mov	r1, r5
 801095e:	4622      	mov	r2, r4
 8010960:	4648      	mov	r0, r9
 8010962:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010964:	f000 ffa6 	bl	80118b4 <__pow5mult>
 8010968:	9a01      	ldr	r2, [sp, #4]
 801096a:	4601      	mov	r1, r0
 801096c:	4605      	mov	r5, r0
 801096e:	4648      	mov	r0, r9
 8010970:	f000 fef6 	bl	8011760 <__multiply>
 8010974:	9901      	ldr	r1, [sp, #4]
 8010976:	9004      	str	r0, [sp, #16]
 8010978:	4648      	mov	r0, r9
 801097a:	f000 fddd 	bl	8011538 <_Bfree>
 801097e:	9a04      	ldr	r2, [sp, #16]
 8010980:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010982:	9201      	str	r2, [sp, #4]
 8010984:	1b1a      	subs	r2, r3, r4
 8010986:	d004      	beq.n	8010992 <_dtoa_r+0x6b2>
 8010988:	9901      	ldr	r1, [sp, #4]
 801098a:	4648      	mov	r0, r9
 801098c:	f000 ff92 	bl	80118b4 <__pow5mult>
 8010990:	9001      	str	r0, [sp, #4]
 8010992:	2101      	movs	r1, #1
 8010994:	4648      	mov	r0, r9
 8010996:	f000 fecd 	bl	8011734 <__i2b>
 801099a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801099c:	4604      	mov	r4, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	f000 81d0 	beq.w	8010d44 <_dtoa_r+0xa64>
 80109a4:	461a      	mov	r2, r3
 80109a6:	4601      	mov	r1, r0
 80109a8:	4648      	mov	r0, r9
 80109aa:	f000 ff83 	bl	80118b4 <__pow5mult>
 80109ae:	9b07      	ldr	r3, [sp, #28]
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	4604      	mov	r4, r0
 80109b4:	f300 8095 	bgt.w	8010ae2 <_dtoa_r+0x802>
 80109b8:	9b02      	ldr	r3, [sp, #8]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	f040 808b 	bne.w	8010ad6 <_dtoa_r+0x7f6>
 80109c0:	9b03      	ldr	r3, [sp, #12]
 80109c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80109c6:	2a00      	cmp	r2, #0
 80109c8:	f040 8087 	bne.w	8010ada <_dtoa_r+0x7fa>
 80109cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80109d0:	0d12      	lsrs	r2, r2, #20
 80109d2:	0512      	lsls	r2, r2, #20
 80109d4:	2a00      	cmp	r2, #0
 80109d6:	f000 8082 	beq.w	8010ade <_dtoa_r+0x7fe>
 80109da:	9b05      	ldr	r3, [sp, #20]
 80109dc:	3301      	adds	r3, #1
 80109de:	9305      	str	r3, [sp, #20]
 80109e0:	9b06      	ldr	r3, [sp, #24]
 80109e2:	3301      	adds	r3, #1
 80109e4:	9306      	str	r3, [sp, #24]
 80109e6:	2301      	movs	r3, #1
 80109e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80109ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	f000 81af 	beq.w	8010d50 <_dtoa_r+0xa70>
 80109f2:	6922      	ldr	r2, [r4, #16]
 80109f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80109f8:	6910      	ldr	r0, [r2, #16]
 80109fa:	f000 fe4f 	bl	801169c <__hi0bits>
 80109fe:	f1c0 0020 	rsb	r0, r0, #32
 8010a02:	9b06      	ldr	r3, [sp, #24]
 8010a04:	4418      	add	r0, r3
 8010a06:	f010 001f 	ands.w	r0, r0, #31
 8010a0a:	d076      	beq.n	8010afa <_dtoa_r+0x81a>
 8010a0c:	f1c0 0220 	rsb	r2, r0, #32
 8010a10:	2a04      	cmp	r2, #4
 8010a12:	dd69      	ble.n	8010ae8 <_dtoa_r+0x808>
 8010a14:	9b05      	ldr	r3, [sp, #20]
 8010a16:	f1c0 001c 	rsb	r0, r0, #28
 8010a1a:	4403      	add	r3, r0
 8010a1c:	9305      	str	r3, [sp, #20]
 8010a1e:	9b06      	ldr	r3, [sp, #24]
 8010a20:	4406      	add	r6, r0
 8010a22:	4403      	add	r3, r0
 8010a24:	9306      	str	r3, [sp, #24]
 8010a26:	9b05      	ldr	r3, [sp, #20]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	dd05      	ble.n	8010a38 <_dtoa_r+0x758>
 8010a2c:	9901      	ldr	r1, [sp, #4]
 8010a2e:	461a      	mov	r2, r3
 8010a30:	4648      	mov	r0, r9
 8010a32:	f000 ff99 	bl	8011968 <__lshift>
 8010a36:	9001      	str	r0, [sp, #4]
 8010a38:	9b06      	ldr	r3, [sp, #24]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	dd05      	ble.n	8010a4a <_dtoa_r+0x76a>
 8010a3e:	4621      	mov	r1, r4
 8010a40:	461a      	mov	r2, r3
 8010a42:	4648      	mov	r0, r9
 8010a44:	f000 ff90 	bl	8011968 <__lshift>
 8010a48:	4604      	mov	r4, r0
 8010a4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d056      	beq.n	8010afe <_dtoa_r+0x81e>
 8010a50:	9801      	ldr	r0, [sp, #4]
 8010a52:	4621      	mov	r1, r4
 8010a54:	f000 fff4 	bl	8011a40 <__mcmp>
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	da50      	bge.n	8010afe <_dtoa_r+0x81e>
 8010a5c:	f108 33ff 	add.w	r3, r8, #4294967295
 8010a60:	9304      	str	r3, [sp, #16]
 8010a62:	9901      	ldr	r1, [sp, #4]
 8010a64:	2300      	movs	r3, #0
 8010a66:	220a      	movs	r2, #10
 8010a68:	4648      	mov	r0, r9
 8010a6a:	f000 fd87 	bl	801157c <__multadd>
 8010a6e:	9b08      	ldr	r3, [sp, #32]
 8010a70:	9001      	str	r0, [sp, #4]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	f000 816e 	beq.w	8010d54 <_dtoa_r+0xa74>
 8010a78:	4629      	mov	r1, r5
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	220a      	movs	r2, #10
 8010a7e:	4648      	mov	r0, r9
 8010a80:	f000 fd7c 	bl	801157c <__multadd>
 8010a84:	f1bb 0f00 	cmp.w	fp, #0
 8010a88:	4605      	mov	r5, r0
 8010a8a:	dc64      	bgt.n	8010b56 <_dtoa_r+0x876>
 8010a8c:	9b07      	ldr	r3, [sp, #28]
 8010a8e:	2b02      	cmp	r3, #2
 8010a90:	dc3e      	bgt.n	8010b10 <_dtoa_r+0x830>
 8010a92:	e060      	b.n	8010b56 <_dtoa_r+0x876>
 8010a94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a96:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010a9a:	e73c      	b.n	8010916 <_dtoa_r+0x636>
 8010a9c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010aa0:	42a3      	cmp	r3, r4
 8010aa2:	bfbf      	itttt	lt
 8010aa4:	1ae2      	sublt	r2, r4, r3
 8010aa6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010aa8:	189b      	addlt	r3, r3, r2
 8010aaa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010aac:	bfae      	itee	ge
 8010aae:	1b1c      	subge	r4, r3, r4
 8010ab0:	4623      	movlt	r3, r4
 8010ab2:	2400      	movlt	r4, #0
 8010ab4:	f1ba 0f00 	cmp.w	sl, #0
 8010ab8:	bfb5      	itete	lt
 8010aba:	9a05      	ldrlt	r2, [sp, #20]
 8010abc:	9e05      	ldrge	r6, [sp, #20]
 8010abe:	eba2 060a 	sublt.w	r6, r2, sl
 8010ac2:	4652      	movge	r2, sl
 8010ac4:	bfb8      	it	lt
 8010ac6:	2200      	movlt	r2, #0
 8010ac8:	e727      	b.n	801091a <_dtoa_r+0x63a>
 8010aca:	9e05      	ldr	r6, [sp, #20]
 8010acc:	9d08      	ldr	r5, [sp, #32]
 8010ace:	461c      	mov	r4, r3
 8010ad0:	e730      	b.n	8010934 <_dtoa_r+0x654>
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	e758      	b.n	8010988 <_dtoa_r+0x6a8>
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	e786      	b.n	80109e8 <_dtoa_r+0x708>
 8010ada:	9b02      	ldr	r3, [sp, #8]
 8010adc:	e784      	b.n	80109e8 <_dtoa_r+0x708>
 8010ade:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010ae0:	e783      	b.n	80109ea <_dtoa_r+0x70a>
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ae6:	e784      	b.n	80109f2 <_dtoa_r+0x712>
 8010ae8:	d09d      	beq.n	8010a26 <_dtoa_r+0x746>
 8010aea:	9b05      	ldr	r3, [sp, #20]
 8010aec:	321c      	adds	r2, #28
 8010aee:	4413      	add	r3, r2
 8010af0:	9305      	str	r3, [sp, #20]
 8010af2:	9b06      	ldr	r3, [sp, #24]
 8010af4:	4416      	add	r6, r2
 8010af6:	4413      	add	r3, r2
 8010af8:	e794      	b.n	8010a24 <_dtoa_r+0x744>
 8010afa:	4602      	mov	r2, r0
 8010afc:	e7f5      	b.n	8010aea <_dtoa_r+0x80a>
 8010afe:	f1ba 0f00 	cmp.w	sl, #0
 8010b02:	f8cd 8010 	str.w	r8, [sp, #16]
 8010b06:	46d3      	mov	fp, sl
 8010b08:	dc21      	bgt.n	8010b4e <_dtoa_r+0x86e>
 8010b0a:	9b07      	ldr	r3, [sp, #28]
 8010b0c:	2b02      	cmp	r3, #2
 8010b0e:	dd1e      	ble.n	8010b4e <_dtoa_r+0x86e>
 8010b10:	f1bb 0f00 	cmp.w	fp, #0
 8010b14:	f47f aeb7 	bne.w	8010886 <_dtoa_r+0x5a6>
 8010b18:	4621      	mov	r1, r4
 8010b1a:	465b      	mov	r3, fp
 8010b1c:	2205      	movs	r2, #5
 8010b1e:	4648      	mov	r0, r9
 8010b20:	f000 fd2c 	bl	801157c <__multadd>
 8010b24:	4601      	mov	r1, r0
 8010b26:	4604      	mov	r4, r0
 8010b28:	9801      	ldr	r0, [sp, #4]
 8010b2a:	f000 ff89 	bl	8011a40 <__mcmp>
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	f77f aea9 	ble.w	8010886 <_dtoa_r+0x5a6>
 8010b34:	463e      	mov	r6, r7
 8010b36:	2331      	movs	r3, #49	@ 0x31
 8010b38:	f806 3b01 	strb.w	r3, [r6], #1
 8010b3c:	9b04      	ldr	r3, [sp, #16]
 8010b3e:	3301      	adds	r3, #1
 8010b40:	9304      	str	r3, [sp, #16]
 8010b42:	e6a4      	b.n	801088e <_dtoa_r+0x5ae>
 8010b44:	f8cd 8010 	str.w	r8, [sp, #16]
 8010b48:	4654      	mov	r4, sl
 8010b4a:	4625      	mov	r5, r4
 8010b4c:	e7f2      	b.n	8010b34 <_dtoa_r+0x854>
 8010b4e:	9b08      	ldr	r3, [sp, #32]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f000 8103 	beq.w	8010d5c <_dtoa_r+0xa7c>
 8010b56:	2e00      	cmp	r6, #0
 8010b58:	dd05      	ble.n	8010b66 <_dtoa_r+0x886>
 8010b5a:	4629      	mov	r1, r5
 8010b5c:	4632      	mov	r2, r6
 8010b5e:	4648      	mov	r0, r9
 8010b60:	f000 ff02 	bl	8011968 <__lshift>
 8010b64:	4605      	mov	r5, r0
 8010b66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d058      	beq.n	8010c1e <_dtoa_r+0x93e>
 8010b6c:	6869      	ldr	r1, [r5, #4]
 8010b6e:	4648      	mov	r0, r9
 8010b70:	f000 fca2 	bl	80114b8 <_Balloc>
 8010b74:	4606      	mov	r6, r0
 8010b76:	b928      	cbnz	r0, 8010b84 <_dtoa_r+0x8a4>
 8010b78:	4b82      	ldr	r3, [pc, #520]	@ (8010d84 <_dtoa_r+0xaa4>)
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010b80:	f7ff bbc7 	b.w	8010312 <_dtoa_r+0x32>
 8010b84:	692a      	ldr	r2, [r5, #16]
 8010b86:	3202      	adds	r2, #2
 8010b88:	0092      	lsls	r2, r2, #2
 8010b8a:	f105 010c 	add.w	r1, r5, #12
 8010b8e:	300c      	adds	r0, #12
 8010b90:	f7ff fafd 	bl	801018e <memcpy>
 8010b94:	2201      	movs	r2, #1
 8010b96:	4631      	mov	r1, r6
 8010b98:	4648      	mov	r0, r9
 8010b9a:	f000 fee5 	bl	8011968 <__lshift>
 8010b9e:	1c7b      	adds	r3, r7, #1
 8010ba0:	9305      	str	r3, [sp, #20]
 8010ba2:	eb07 030b 	add.w	r3, r7, fp
 8010ba6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ba8:	9b02      	ldr	r3, [sp, #8]
 8010baa:	f003 0301 	and.w	r3, r3, #1
 8010bae:	46a8      	mov	r8, r5
 8010bb0:	9308      	str	r3, [sp, #32]
 8010bb2:	4605      	mov	r5, r0
 8010bb4:	9b05      	ldr	r3, [sp, #20]
 8010bb6:	9801      	ldr	r0, [sp, #4]
 8010bb8:	4621      	mov	r1, r4
 8010bba:	f103 3bff 	add.w	fp, r3, #4294967295
 8010bbe:	f7ff fb05 	bl	80101cc <quorem>
 8010bc2:	4641      	mov	r1, r8
 8010bc4:	9002      	str	r0, [sp, #8]
 8010bc6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010bca:	9801      	ldr	r0, [sp, #4]
 8010bcc:	f000 ff38 	bl	8011a40 <__mcmp>
 8010bd0:	462a      	mov	r2, r5
 8010bd2:	9006      	str	r0, [sp, #24]
 8010bd4:	4621      	mov	r1, r4
 8010bd6:	4648      	mov	r0, r9
 8010bd8:	f000 ff4e 	bl	8011a78 <__mdiff>
 8010bdc:	68c2      	ldr	r2, [r0, #12]
 8010bde:	4606      	mov	r6, r0
 8010be0:	b9fa      	cbnz	r2, 8010c22 <_dtoa_r+0x942>
 8010be2:	4601      	mov	r1, r0
 8010be4:	9801      	ldr	r0, [sp, #4]
 8010be6:	f000 ff2b 	bl	8011a40 <__mcmp>
 8010bea:	4602      	mov	r2, r0
 8010bec:	4631      	mov	r1, r6
 8010bee:	4648      	mov	r0, r9
 8010bf0:	920a      	str	r2, [sp, #40]	@ 0x28
 8010bf2:	f000 fca1 	bl	8011538 <_Bfree>
 8010bf6:	9b07      	ldr	r3, [sp, #28]
 8010bf8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010bfa:	9e05      	ldr	r6, [sp, #20]
 8010bfc:	ea43 0102 	orr.w	r1, r3, r2
 8010c00:	9b08      	ldr	r3, [sp, #32]
 8010c02:	4319      	orrs	r1, r3
 8010c04:	d10f      	bne.n	8010c26 <_dtoa_r+0x946>
 8010c06:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010c0a:	d028      	beq.n	8010c5e <_dtoa_r+0x97e>
 8010c0c:	9b06      	ldr	r3, [sp, #24]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	dd02      	ble.n	8010c18 <_dtoa_r+0x938>
 8010c12:	9b02      	ldr	r3, [sp, #8]
 8010c14:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010c18:	f88b a000 	strb.w	sl, [fp]
 8010c1c:	e639      	b.n	8010892 <_dtoa_r+0x5b2>
 8010c1e:	4628      	mov	r0, r5
 8010c20:	e7bd      	b.n	8010b9e <_dtoa_r+0x8be>
 8010c22:	2201      	movs	r2, #1
 8010c24:	e7e2      	b.n	8010bec <_dtoa_r+0x90c>
 8010c26:	9b06      	ldr	r3, [sp, #24]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	db04      	blt.n	8010c36 <_dtoa_r+0x956>
 8010c2c:	9907      	ldr	r1, [sp, #28]
 8010c2e:	430b      	orrs	r3, r1
 8010c30:	9908      	ldr	r1, [sp, #32]
 8010c32:	430b      	orrs	r3, r1
 8010c34:	d120      	bne.n	8010c78 <_dtoa_r+0x998>
 8010c36:	2a00      	cmp	r2, #0
 8010c38:	ddee      	ble.n	8010c18 <_dtoa_r+0x938>
 8010c3a:	9901      	ldr	r1, [sp, #4]
 8010c3c:	2201      	movs	r2, #1
 8010c3e:	4648      	mov	r0, r9
 8010c40:	f000 fe92 	bl	8011968 <__lshift>
 8010c44:	4621      	mov	r1, r4
 8010c46:	9001      	str	r0, [sp, #4]
 8010c48:	f000 fefa 	bl	8011a40 <__mcmp>
 8010c4c:	2800      	cmp	r0, #0
 8010c4e:	dc03      	bgt.n	8010c58 <_dtoa_r+0x978>
 8010c50:	d1e2      	bne.n	8010c18 <_dtoa_r+0x938>
 8010c52:	f01a 0f01 	tst.w	sl, #1
 8010c56:	d0df      	beq.n	8010c18 <_dtoa_r+0x938>
 8010c58:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010c5c:	d1d9      	bne.n	8010c12 <_dtoa_r+0x932>
 8010c5e:	2339      	movs	r3, #57	@ 0x39
 8010c60:	f88b 3000 	strb.w	r3, [fp]
 8010c64:	4633      	mov	r3, r6
 8010c66:	461e      	mov	r6, r3
 8010c68:	3b01      	subs	r3, #1
 8010c6a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010c6e:	2a39      	cmp	r2, #57	@ 0x39
 8010c70:	d053      	beq.n	8010d1a <_dtoa_r+0xa3a>
 8010c72:	3201      	adds	r2, #1
 8010c74:	701a      	strb	r2, [r3, #0]
 8010c76:	e60c      	b.n	8010892 <_dtoa_r+0x5b2>
 8010c78:	2a00      	cmp	r2, #0
 8010c7a:	dd07      	ble.n	8010c8c <_dtoa_r+0x9ac>
 8010c7c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010c80:	d0ed      	beq.n	8010c5e <_dtoa_r+0x97e>
 8010c82:	f10a 0301 	add.w	r3, sl, #1
 8010c86:	f88b 3000 	strb.w	r3, [fp]
 8010c8a:	e602      	b.n	8010892 <_dtoa_r+0x5b2>
 8010c8c:	9b05      	ldr	r3, [sp, #20]
 8010c8e:	9a05      	ldr	r2, [sp, #20]
 8010c90:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d029      	beq.n	8010cee <_dtoa_r+0xa0e>
 8010c9a:	9901      	ldr	r1, [sp, #4]
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	220a      	movs	r2, #10
 8010ca0:	4648      	mov	r0, r9
 8010ca2:	f000 fc6b 	bl	801157c <__multadd>
 8010ca6:	45a8      	cmp	r8, r5
 8010ca8:	9001      	str	r0, [sp, #4]
 8010caa:	f04f 0300 	mov.w	r3, #0
 8010cae:	f04f 020a 	mov.w	r2, #10
 8010cb2:	4641      	mov	r1, r8
 8010cb4:	4648      	mov	r0, r9
 8010cb6:	d107      	bne.n	8010cc8 <_dtoa_r+0x9e8>
 8010cb8:	f000 fc60 	bl	801157c <__multadd>
 8010cbc:	4680      	mov	r8, r0
 8010cbe:	4605      	mov	r5, r0
 8010cc0:	9b05      	ldr	r3, [sp, #20]
 8010cc2:	3301      	adds	r3, #1
 8010cc4:	9305      	str	r3, [sp, #20]
 8010cc6:	e775      	b.n	8010bb4 <_dtoa_r+0x8d4>
 8010cc8:	f000 fc58 	bl	801157c <__multadd>
 8010ccc:	4629      	mov	r1, r5
 8010cce:	4680      	mov	r8, r0
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	220a      	movs	r2, #10
 8010cd4:	4648      	mov	r0, r9
 8010cd6:	f000 fc51 	bl	801157c <__multadd>
 8010cda:	4605      	mov	r5, r0
 8010cdc:	e7f0      	b.n	8010cc0 <_dtoa_r+0x9e0>
 8010cde:	f1bb 0f00 	cmp.w	fp, #0
 8010ce2:	bfcc      	ite	gt
 8010ce4:	465e      	movgt	r6, fp
 8010ce6:	2601      	movle	r6, #1
 8010ce8:	443e      	add	r6, r7
 8010cea:	f04f 0800 	mov.w	r8, #0
 8010cee:	9901      	ldr	r1, [sp, #4]
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	4648      	mov	r0, r9
 8010cf4:	f000 fe38 	bl	8011968 <__lshift>
 8010cf8:	4621      	mov	r1, r4
 8010cfa:	9001      	str	r0, [sp, #4]
 8010cfc:	f000 fea0 	bl	8011a40 <__mcmp>
 8010d00:	2800      	cmp	r0, #0
 8010d02:	dcaf      	bgt.n	8010c64 <_dtoa_r+0x984>
 8010d04:	d102      	bne.n	8010d0c <_dtoa_r+0xa2c>
 8010d06:	f01a 0f01 	tst.w	sl, #1
 8010d0a:	d1ab      	bne.n	8010c64 <_dtoa_r+0x984>
 8010d0c:	4633      	mov	r3, r6
 8010d0e:	461e      	mov	r6, r3
 8010d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d14:	2a30      	cmp	r2, #48	@ 0x30
 8010d16:	d0fa      	beq.n	8010d0e <_dtoa_r+0xa2e>
 8010d18:	e5bb      	b.n	8010892 <_dtoa_r+0x5b2>
 8010d1a:	429f      	cmp	r7, r3
 8010d1c:	d1a3      	bne.n	8010c66 <_dtoa_r+0x986>
 8010d1e:	9b04      	ldr	r3, [sp, #16]
 8010d20:	3301      	adds	r3, #1
 8010d22:	9304      	str	r3, [sp, #16]
 8010d24:	2331      	movs	r3, #49	@ 0x31
 8010d26:	703b      	strb	r3, [r7, #0]
 8010d28:	e5b3      	b.n	8010892 <_dtoa_r+0x5b2>
 8010d2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010d2c:	4f16      	ldr	r7, [pc, #88]	@ (8010d88 <_dtoa_r+0xaa8>)
 8010d2e:	b11b      	cbz	r3, 8010d38 <_dtoa_r+0xa58>
 8010d30:	f107 0308 	add.w	r3, r7, #8
 8010d34:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010d36:	6013      	str	r3, [r2, #0]
 8010d38:	4638      	mov	r0, r7
 8010d3a:	b011      	add	sp, #68	@ 0x44
 8010d3c:	ecbd 8b02 	vpop	{d8}
 8010d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d44:	9b07      	ldr	r3, [sp, #28]
 8010d46:	2b01      	cmp	r3, #1
 8010d48:	f77f ae36 	ble.w	80109b8 <_dtoa_r+0x6d8>
 8010d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d50:	2001      	movs	r0, #1
 8010d52:	e656      	b.n	8010a02 <_dtoa_r+0x722>
 8010d54:	f1bb 0f00 	cmp.w	fp, #0
 8010d58:	f77f aed7 	ble.w	8010b0a <_dtoa_r+0x82a>
 8010d5c:	463e      	mov	r6, r7
 8010d5e:	9801      	ldr	r0, [sp, #4]
 8010d60:	4621      	mov	r1, r4
 8010d62:	f7ff fa33 	bl	80101cc <quorem>
 8010d66:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010d6a:	f806 ab01 	strb.w	sl, [r6], #1
 8010d6e:	1bf2      	subs	r2, r6, r7
 8010d70:	4593      	cmp	fp, r2
 8010d72:	ddb4      	ble.n	8010cde <_dtoa_r+0x9fe>
 8010d74:	9901      	ldr	r1, [sp, #4]
 8010d76:	2300      	movs	r3, #0
 8010d78:	220a      	movs	r2, #10
 8010d7a:	4648      	mov	r0, r9
 8010d7c:	f000 fbfe 	bl	801157c <__multadd>
 8010d80:	9001      	str	r0, [sp, #4]
 8010d82:	e7ec      	b.n	8010d5e <_dtoa_r+0xa7e>
 8010d84:	080133fb 	.word	0x080133fb
 8010d88:	0801337f 	.word	0x0801337f

08010d8c <_free_r>:
 8010d8c:	b538      	push	{r3, r4, r5, lr}
 8010d8e:	4605      	mov	r5, r0
 8010d90:	2900      	cmp	r1, #0
 8010d92:	d041      	beq.n	8010e18 <_free_r+0x8c>
 8010d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d98:	1f0c      	subs	r4, r1, #4
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	bfb8      	it	lt
 8010d9e:	18e4      	addlt	r4, r4, r3
 8010da0:	f7fd fbee 	bl	800e580 <__malloc_lock>
 8010da4:	4a1d      	ldr	r2, [pc, #116]	@ (8010e1c <_free_r+0x90>)
 8010da6:	6813      	ldr	r3, [r2, #0]
 8010da8:	b933      	cbnz	r3, 8010db8 <_free_r+0x2c>
 8010daa:	6063      	str	r3, [r4, #4]
 8010dac:	6014      	str	r4, [r2, #0]
 8010dae:	4628      	mov	r0, r5
 8010db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010db4:	f7fd bbea 	b.w	800e58c <__malloc_unlock>
 8010db8:	42a3      	cmp	r3, r4
 8010dba:	d908      	bls.n	8010dce <_free_r+0x42>
 8010dbc:	6820      	ldr	r0, [r4, #0]
 8010dbe:	1821      	adds	r1, r4, r0
 8010dc0:	428b      	cmp	r3, r1
 8010dc2:	bf01      	itttt	eq
 8010dc4:	6819      	ldreq	r1, [r3, #0]
 8010dc6:	685b      	ldreq	r3, [r3, #4]
 8010dc8:	1809      	addeq	r1, r1, r0
 8010dca:	6021      	streq	r1, [r4, #0]
 8010dcc:	e7ed      	b.n	8010daa <_free_r+0x1e>
 8010dce:	461a      	mov	r2, r3
 8010dd0:	685b      	ldr	r3, [r3, #4]
 8010dd2:	b10b      	cbz	r3, 8010dd8 <_free_r+0x4c>
 8010dd4:	42a3      	cmp	r3, r4
 8010dd6:	d9fa      	bls.n	8010dce <_free_r+0x42>
 8010dd8:	6811      	ldr	r1, [r2, #0]
 8010dda:	1850      	adds	r0, r2, r1
 8010ddc:	42a0      	cmp	r0, r4
 8010dde:	d10b      	bne.n	8010df8 <_free_r+0x6c>
 8010de0:	6820      	ldr	r0, [r4, #0]
 8010de2:	4401      	add	r1, r0
 8010de4:	1850      	adds	r0, r2, r1
 8010de6:	4283      	cmp	r3, r0
 8010de8:	6011      	str	r1, [r2, #0]
 8010dea:	d1e0      	bne.n	8010dae <_free_r+0x22>
 8010dec:	6818      	ldr	r0, [r3, #0]
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	6053      	str	r3, [r2, #4]
 8010df2:	4408      	add	r0, r1
 8010df4:	6010      	str	r0, [r2, #0]
 8010df6:	e7da      	b.n	8010dae <_free_r+0x22>
 8010df8:	d902      	bls.n	8010e00 <_free_r+0x74>
 8010dfa:	230c      	movs	r3, #12
 8010dfc:	602b      	str	r3, [r5, #0]
 8010dfe:	e7d6      	b.n	8010dae <_free_r+0x22>
 8010e00:	6820      	ldr	r0, [r4, #0]
 8010e02:	1821      	adds	r1, r4, r0
 8010e04:	428b      	cmp	r3, r1
 8010e06:	bf04      	itt	eq
 8010e08:	6819      	ldreq	r1, [r3, #0]
 8010e0a:	685b      	ldreq	r3, [r3, #4]
 8010e0c:	6063      	str	r3, [r4, #4]
 8010e0e:	bf04      	itt	eq
 8010e10:	1809      	addeq	r1, r1, r0
 8010e12:	6021      	streq	r1, [r4, #0]
 8010e14:	6054      	str	r4, [r2, #4]
 8010e16:	e7ca      	b.n	8010dae <_free_r+0x22>
 8010e18:	bd38      	pop	{r3, r4, r5, pc}
 8010e1a:	bf00      	nop
 8010e1c:	24000d84 	.word	0x24000d84

08010e20 <rshift>:
 8010e20:	6903      	ldr	r3, [r0, #16]
 8010e22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010e26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010e2e:	f100 0414 	add.w	r4, r0, #20
 8010e32:	dd45      	ble.n	8010ec0 <rshift+0xa0>
 8010e34:	f011 011f 	ands.w	r1, r1, #31
 8010e38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010e3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010e40:	d10c      	bne.n	8010e5c <rshift+0x3c>
 8010e42:	f100 0710 	add.w	r7, r0, #16
 8010e46:	4629      	mov	r1, r5
 8010e48:	42b1      	cmp	r1, r6
 8010e4a:	d334      	bcc.n	8010eb6 <rshift+0x96>
 8010e4c:	1a9b      	subs	r3, r3, r2
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	1eea      	subs	r2, r5, #3
 8010e52:	4296      	cmp	r6, r2
 8010e54:	bf38      	it	cc
 8010e56:	2300      	movcc	r3, #0
 8010e58:	4423      	add	r3, r4
 8010e5a:	e015      	b.n	8010e88 <rshift+0x68>
 8010e5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010e60:	f1c1 0820 	rsb	r8, r1, #32
 8010e64:	40cf      	lsrs	r7, r1
 8010e66:	f105 0e04 	add.w	lr, r5, #4
 8010e6a:	46a1      	mov	r9, r4
 8010e6c:	4576      	cmp	r6, lr
 8010e6e:	46f4      	mov	ip, lr
 8010e70:	d815      	bhi.n	8010e9e <rshift+0x7e>
 8010e72:	1a9a      	subs	r2, r3, r2
 8010e74:	0092      	lsls	r2, r2, #2
 8010e76:	3a04      	subs	r2, #4
 8010e78:	3501      	adds	r5, #1
 8010e7a:	42ae      	cmp	r6, r5
 8010e7c:	bf38      	it	cc
 8010e7e:	2200      	movcc	r2, #0
 8010e80:	18a3      	adds	r3, r4, r2
 8010e82:	50a7      	str	r7, [r4, r2]
 8010e84:	b107      	cbz	r7, 8010e88 <rshift+0x68>
 8010e86:	3304      	adds	r3, #4
 8010e88:	1b1a      	subs	r2, r3, r4
 8010e8a:	42a3      	cmp	r3, r4
 8010e8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010e90:	bf08      	it	eq
 8010e92:	2300      	moveq	r3, #0
 8010e94:	6102      	str	r2, [r0, #16]
 8010e96:	bf08      	it	eq
 8010e98:	6143      	streq	r3, [r0, #20]
 8010e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e9e:	f8dc c000 	ldr.w	ip, [ip]
 8010ea2:	fa0c fc08 	lsl.w	ip, ip, r8
 8010ea6:	ea4c 0707 	orr.w	r7, ip, r7
 8010eaa:	f849 7b04 	str.w	r7, [r9], #4
 8010eae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010eb2:	40cf      	lsrs	r7, r1
 8010eb4:	e7da      	b.n	8010e6c <rshift+0x4c>
 8010eb6:	f851 cb04 	ldr.w	ip, [r1], #4
 8010eba:	f847 cf04 	str.w	ip, [r7, #4]!
 8010ebe:	e7c3      	b.n	8010e48 <rshift+0x28>
 8010ec0:	4623      	mov	r3, r4
 8010ec2:	e7e1      	b.n	8010e88 <rshift+0x68>

08010ec4 <__hexdig_fun>:
 8010ec4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010ec8:	2b09      	cmp	r3, #9
 8010eca:	d802      	bhi.n	8010ed2 <__hexdig_fun+0xe>
 8010ecc:	3820      	subs	r0, #32
 8010ece:	b2c0      	uxtb	r0, r0
 8010ed0:	4770      	bx	lr
 8010ed2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010ed6:	2b05      	cmp	r3, #5
 8010ed8:	d801      	bhi.n	8010ede <__hexdig_fun+0x1a>
 8010eda:	3847      	subs	r0, #71	@ 0x47
 8010edc:	e7f7      	b.n	8010ece <__hexdig_fun+0xa>
 8010ede:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010ee2:	2b05      	cmp	r3, #5
 8010ee4:	d801      	bhi.n	8010eea <__hexdig_fun+0x26>
 8010ee6:	3827      	subs	r0, #39	@ 0x27
 8010ee8:	e7f1      	b.n	8010ece <__hexdig_fun+0xa>
 8010eea:	2000      	movs	r0, #0
 8010eec:	4770      	bx	lr
	...

08010ef0 <__gethex>:
 8010ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef4:	b085      	sub	sp, #20
 8010ef6:	468a      	mov	sl, r1
 8010ef8:	9302      	str	r3, [sp, #8]
 8010efa:	680b      	ldr	r3, [r1, #0]
 8010efc:	9001      	str	r0, [sp, #4]
 8010efe:	4690      	mov	r8, r2
 8010f00:	1c9c      	adds	r4, r3, #2
 8010f02:	46a1      	mov	r9, r4
 8010f04:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010f08:	2830      	cmp	r0, #48	@ 0x30
 8010f0a:	d0fa      	beq.n	8010f02 <__gethex+0x12>
 8010f0c:	eba9 0303 	sub.w	r3, r9, r3
 8010f10:	f1a3 0b02 	sub.w	fp, r3, #2
 8010f14:	f7ff ffd6 	bl	8010ec4 <__hexdig_fun>
 8010f18:	4605      	mov	r5, r0
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	d168      	bne.n	8010ff0 <__gethex+0x100>
 8010f1e:	49a0      	ldr	r1, [pc, #640]	@ (80111a0 <__gethex+0x2b0>)
 8010f20:	2201      	movs	r2, #1
 8010f22:	4648      	mov	r0, r9
 8010f24:	f7ff f89a 	bl	801005c <strncmp>
 8010f28:	4607      	mov	r7, r0
 8010f2a:	2800      	cmp	r0, #0
 8010f2c:	d167      	bne.n	8010ffe <__gethex+0x10e>
 8010f2e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010f32:	4626      	mov	r6, r4
 8010f34:	f7ff ffc6 	bl	8010ec4 <__hexdig_fun>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	d062      	beq.n	8011002 <__gethex+0x112>
 8010f3c:	4623      	mov	r3, r4
 8010f3e:	7818      	ldrb	r0, [r3, #0]
 8010f40:	2830      	cmp	r0, #48	@ 0x30
 8010f42:	4699      	mov	r9, r3
 8010f44:	f103 0301 	add.w	r3, r3, #1
 8010f48:	d0f9      	beq.n	8010f3e <__gethex+0x4e>
 8010f4a:	f7ff ffbb 	bl	8010ec4 <__hexdig_fun>
 8010f4e:	fab0 f580 	clz	r5, r0
 8010f52:	096d      	lsrs	r5, r5, #5
 8010f54:	f04f 0b01 	mov.w	fp, #1
 8010f58:	464a      	mov	r2, r9
 8010f5a:	4616      	mov	r6, r2
 8010f5c:	3201      	adds	r2, #1
 8010f5e:	7830      	ldrb	r0, [r6, #0]
 8010f60:	f7ff ffb0 	bl	8010ec4 <__hexdig_fun>
 8010f64:	2800      	cmp	r0, #0
 8010f66:	d1f8      	bne.n	8010f5a <__gethex+0x6a>
 8010f68:	498d      	ldr	r1, [pc, #564]	@ (80111a0 <__gethex+0x2b0>)
 8010f6a:	2201      	movs	r2, #1
 8010f6c:	4630      	mov	r0, r6
 8010f6e:	f7ff f875 	bl	801005c <strncmp>
 8010f72:	2800      	cmp	r0, #0
 8010f74:	d13f      	bne.n	8010ff6 <__gethex+0x106>
 8010f76:	b944      	cbnz	r4, 8010f8a <__gethex+0x9a>
 8010f78:	1c74      	adds	r4, r6, #1
 8010f7a:	4622      	mov	r2, r4
 8010f7c:	4616      	mov	r6, r2
 8010f7e:	3201      	adds	r2, #1
 8010f80:	7830      	ldrb	r0, [r6, #0]
 8010f82:	f7ff ff9f 	bl	8010ec4 <__hexdig_fun>
 8010f86:	2800      	cmp	r0, #0
 8010f88:	d1f8      	bne.n	8010f7c <__gethex+0x8c>
 8010f8a:	1ba4      	subs	r4, r4, r6
 8010f8c:	00a7      	lsls	r7, r4, #2
 8010f8e:	7833      	ldrb	r3, [r6, #0]
 8010f90:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010f94:	2b50      	cmp	r3, #80	@ 0x50
 8010f96:	d13e      	bne.n	8011016 <__gethex+0x126>
 8010f98:	7873      	ldrb	r3, [r6, #1]
 8010f9a:	2b2b      	cmp	r3, #43	@ 0x2b
 8010f9c:	d033      	beq.n	8011006 <__gethex+0x116>
 8010f9e:	2b2d      	cmp	r3, #45	@ 0x2d
 8010fa0:	d034      	beq.n	801100c <__gethex+0x11c>
 8010fa2:	1c71      	adds	r1, r6, #1
 8010fa4:	2400      	movs	r4, #0
 8010fa6:	7808      	ldrb	r0, [r1, #0]
 8010fa8:	f7ff ff8c 	bl	8010ec4 <__hexdig_fun>
 8010fac:	1e43      	subs	r3, r0, #1
 8010fae:	b2db      	uxtb	r3, r3
 8010fb0:	2b18      	cmp	r3, #24
 8010fb2:	d830      	bhi.n	8011016 <__gethex+0x126>
 8010fb4:	f1a0 0210 	sub.w	r2, r0, #16
 8010fb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010fbc:	f7ff ff82 	bl	8010ec4 <__hexdig_fun>
 8010fc0:	f100 3cff 	add.w	ip, r0, #4294967295
 8010fc4:	fa5f fc8c 	uxtb.w	ip, ip
 8010fc8:	f1bc 0f18 	cmp.w	ip, #24
 8010fcc:	f04f 030a 	mov.w	r3, #10
 8010fd0:	d91e      	bls.n	8011010 <__gethex+0x120>
 8010fd2:	b104      	cbz	r4, 8010fd6 <__gethex+0xe6>
 8010fd4:	4252      	negs	r2, r2
 8010fd6:	4417      	add	r7, r2
 8010fd8:	f8ca 1000 	str.w	r1, [sl]
 8010fdc:	b1ed      	cbz	r5, 801101a <__gethex+0x12a>
 8010fde:	f1bb 0f00 	cmp.w	fp, #0
 8010fe2:	bf0c      	ite	eq
 8010fe4:	2506      	moveq	r5, #6
 8010fe6:	2500      	movne	r5, #0
 8010fe8:	4628      	mov	r0, r5
 8010fea:	b005      	add	sp, #20
 8010fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff0:	2500      	movs	r5, #0
 8010ff2:	462c      	mov	r4, r5
 8010ff4:	e7b0      	b.n	8010f58 <__gethex+0x68>
 8010ff6:	2c00      	cmp	r4, #0
 8010ff8:	d1c7      	bne.n	8010f8a <__gethex+0x9a>
 8010ffa:	4627      	mov	r7, r4
 8010ffc:	e7c7      	b.n	8010f8e <__gethex+0x9e>
 8010ffe:	464e      	mov	r6, r9
 8011000:	462f      	mov	r7, r5
 8011002:	2501      	movs	r5, #1
 8011004:	e7c3      	b.n	8010f8e <__gethex+0x9e>
 8011006:	2400      	movs	r4, #0
 8011008:	1cb1      	adds	r1, r6, #2
 801100a:	e7cc      	b.n	8010fa6 <__gethex+0xb6>
 801100c:	2401      	movs	r4, #1
 801100e:	e7fb      	b.n	8011008 <__gethex+0x118>
 8011010:	fb03 0002 	mla	r0, r3, r2, r0
 8011014:	e7ce      	b.n	8010fb4 <__gethex+0xc4>
 8011016:	4631      	mov	r1, r6
 8011018:	e7de      	b.n	8010fd8 <__gethex+0xe8>
 801101a:	eba6 0309 	sub.w	r3, r6, r9
 801101e:	3b01      	subs	r3, #1
 8011020:	4629      	mov	r1, r5
 8011022:	2b07      	cmp	r3, #7
 8011024:	dc0a      	bgt.n	801103c <__gethex+0x14c>
 8011026:	9801      	ldr	r0, [sp, #4]
 8011028:	f000 fa46 	bl	80114b8 <_Balloc>
 801102c:	4604      	mov	r4, r0
 801102e:	b940      	cbnz	r0, 8011042 <__gethex+0x152>
 8011030:	4b5c      	ldr	r3, [pc, #368]	@ (80111a4 <__gethex+0x2b4>)
 8011032:	4602      	mov	r2, r0
 8011034:	21e4      	movs	r1, #228	@ 0xe4
 8011036:	485c      	ldr	r0, [pc, #368]	@ (80111a8 <__gethex+0x2b8>)
 8011038:	f001 fd22 	bl	8012a80 <__assert_func>
 801103c:	3101      	adds	r1, #1
 801103e:	105b      	asrs	r3, r3, #1
 8011040:	e7ef      	b.n	8011022 <__gethex+0x132>
 8011042:	f100 0a14 	add.w	sl, r0, #20
 8011046:	2300      	movs	r3, #0
 8011048:	4655      	mov	r5, sl
 801104a:	469b      	mov	fp, r3
 801104c:	45b1      	cmp	r9, r6
 801104e:	d337      	bcc.n	80110c0 <__gethex+0x1d0>
 8011050:	f845 bb04 	str.w	fp, [r5], #4
 8011054:	eba5 050a 	sub.w	r5, r5, sl
 8011058:	10ad      	asrs	r5, r5, #2
 801105a:	6125      	str	r5, [r4, #16]
 801105c:	4658      	mov	r0, fp
 801105e:	f000 fb1d 	bl	801169c <__hi0bits>
 8011062:	016d      	lsls	r5, r5, #5
 8011064:	f8d8 6000 	ldr.w	r6, [r8]
 8011068:	1a2d      	subs	r5, r5, r0
 801106a:	42b5      	cmp	r5, r6
 801106c:	dd54      	ble.n	8011118 <__gethex+0x228>
 801106e:	1bad      	subs	r5, r5, r6
 8011070:	4629      	mov	r1, r5
 8011072:	4620      	mov	r0, r4
 8011074:	f000 feae 	bl	8011dd4 <__any_on>
 8011078:	4681      	mov	r9, r0
 801107a:	b178      	cbz	r0, 801109c <__gethex+0x1ac>
 801107c:	1e6b      	subs	r3, r5, #1
 801107e:	1159      	asrs	r1, r3, #5
 8011080:	f003 021f 	and.w	r2, r3, #31
 8011084:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011088:	f04f 0901 	mov.w	r9, #1
 801108c:	fa09 f202 	lsl.w	r2, r9, r2
 8011090:	420a      	tst	r2, r1
 8011092:	d003      	beq.n	801109c <__gethex+0x1ac>
 8011094:	454b      	cmp	r3, r9
 8011096:	dc36      	bgt.n	8011106 <__gethex+0x216>
 8011098:	f04f 0902 	mov.w	r9, #2
 801109c:	4629      	mov	r1, r5
 801109e:	4620      	mov	r0, r4
 80110a0:	f7ff febe 	bl	8010e20 <rshift>
 80110a4:	442f      	add	r7, r5
 80110a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80110aa:	42bb      	cmp	r3, r7
 80110ac:	da42      	bge.n	8011134 <__gethex+0x244>
 80110ae:	9801      	ldr	r0, [sp, #4]
 80110b0:	4621      	mov	r1, r4
 80110b2:	f000 fa41 	bl	8011538 <_Bfree>
 80110b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110b8:	2300      	movs	r3, #0
 80110ba:	6013      	str	r3, [r2, #0]
 80110bc:	25a3      	movs	r5, #163	@ 0xa3
 80110be:	e793      	b.n	8010fe8 <__gethex+0xf8>
 80110c0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80110c4:	2a2e      	cmp	r2, #46	@ 0x2e
 80110c6:	d012      	beq.n	80110ee <__gethex+0x1fe>
 80110c8:	2b20      	cmp	r3, #32
 80110ca:	d104      	bne.n	80110d6 <__gethex+0x1e6>
 80110cc:	f845 bb04 	str.w	fp, [r5], #4
 80110d0:	f04f 0b00 	mov.w	fp, #0
 80110d4:	465b      	mov	r3, fp
 80110d6:	7830      	ldrb	r0, [r6, #0]
 80110d8:	9303      	str	r3, [sp, #12]
 80110da:	f7ff fef3 	bl	8010ec4 <__hexdig_fun>
 80110de:	9b03      	ldr	r3, [sp, #12]
 80110e0:	f000 000f 	and.w	r0, r0, #15
 80110e4:	4098      	lsls	r0, r3
 80110e6:	ea4b 0b00 	orr.w	fp, fp, r0
 80110ea:	3304      	adds	r3, #4
 80110ec:	e7ae      	b.n	801104c <__gethex+0x15c>
 80110ee:	45b1      	cmp	r9, r6
 80110f0:	d8ea      	bhi.n	80110c8 <__gethex+0x1d8>
 80110f2:	492b      	ldr	r1, [pc, #172]	@ (80111a0 <__gethex+0x2b0>)
 80110f4:	9303      	str	r3, [sp, #12]
 80110f6:	2201      	movs	r2, #1
 80110f8:	4630      	mov	r0, r6
 80110fa:	f7fe ffaf 	bl	801005c <strncmp>
 80110fe:	9b03      	ldr	r3, [sp, #12]
 8011100:	2800      	cmp	r0, #0
 8011102:	d1e1      	bne.n	80110c8 <__gethex+0x1d8>
 8011104:	e7a2      	b.n	801104c <__gethex+0x15c>
 8011106:	1ea9      	subs	r1, r5, #2
 8011108:	4620      	mov	r0, r4
 801110a:	f000 fe63 	bl	8011dd4 <__any_on>
 801110e:	2800      	cmp	r0, #0
 8011110:	d0c2      	beq.n	8011098 <__gethex+0x1a8>
 8011112:	f04f 0903 	mov.w	r9, #3
 8011116:	e7c1      	b.n	801109c <__gethex+0x1ac>
 8011118:	da09      	bge.n	801112e <__gethex+0x23e>
 801111a:	1b75      	subs	r5, r6, r5
 801111c:	4621      	mov	r1, r4
 801111e:	9801      	ldr	r0, [sp, #4]
 8011120:	462a      	mov	r2, r5
 8011122:	f000 fc21 	bl	8011968 <__lshift>
 8011126:	1b7f      	subs	r7, r7, r5
 8011128:	4604      	mov	r4, r0
 801112a:	f100 0a14 	add.w	sl, r0, #20
 801112e:	f04f 0900 	mov.w	r9, #0
 8011132:	e7b8      	b.n	80110a6 <__gethex+0x1b6>
 8011134:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011138:	42bd      	cmp	r5, r7
 801113a:	dd6f      	ble.n	801121c <__gethex+0x32c>
 801113c:	1bed      	subs	r5, r5, r7
 801113e:	42ae      	cmp	r6, r5
 8011140:	dc34      	bgt.n	80111ac <__gethex+0x2bc>
 8011142:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011146:	2b02      	cmp	r3, #2
 8011148:	d022      	beq.n	8011190 <__gethex+0x2a0>
 801114a:	2b03      	cmp	r3, #3
 801114c:	d024      	beq.n	8011198 <__gethex+0x2a8>
 801114e:	2b01      	cmp	r3, #1
 8011150:	d115      	bne.n	801117e <__gethex+0x28e>
 8011152:	42ae      	cmp	r6, r5
 8011154:	d113      	bne.n	801117e <__gethex+0x28e>
 8011156:	2e01      	cmp	r6, #1
 8011158:	d10b      	bne.n	8011172 <__gethex+0x282>
 801115a:	9a02      	ldr	r2, [sp, #8]
 801115c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011160:	6013      	str	r3, [r2, #0]
 8011162:	2301      	movs	r3, #1
 8011164:	6123      	str	r3, [r4, #16]
 8011166:	f8ca 3000 	str.w	r3, [sl]
 801116a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801116c:	2562      	movs	r5, #98	@ 0x62
 801116e:	601c      	str	r4, [r3, #0]
 8011170:	e73a      	b.n	8010fe8 <__gethex+0xf8>
 8011172:	1e71      	subs	r1, r6, #1
 8011174:	4620      	mov	r0, r4
 8011176:	f000 fe2d 	bl	8011dd4 <__any_on>
 801117a:	2800      	cmp	r0, #0
 801117c:	d1ed      	bne.n	801115a <__gethex+0x26a>
 801117e:	9801      	ldr	r0, [sp, #4]
 8011180:	4621      	mov	r1, r4
 8011182:	f000 f9d9 	bl	8011538 <_Bfree>
 8011186:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011188:	2300      	movs	r3, #0
 801118a:	6013      	str	r3, [r2, #0]
 801118c:	2550      	movs	r5, #80	@ 0x50
 801118e:	e72b      	b.n	8010fe8 <__gethex+0xf8>
 8011190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011192:	2b00      	cmp	r3, #0
 8011194:	d1f3      	bne.n	801117e <__gethex+0x28e>
 8011196:	e7e0      	b.n	801115a <__gethex+0x26a>
 8011198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801119a:	2b00      	cmp	r3, #0
 801119c:	d1dd      	bne.n	801115a <__gethex+0x26a>
 801119e:	e7ee      	b.n	801117e <__gethex+0x28e>
 80111a0:	080132e8 	.word	0x080132e8
 80111a4:	080133fb 	.word	0x080133fb
 80111a8:	0801340c 	.word	0x0801340c
 80111ac:	1e6f      	subs	r7, r5, #1
 80111ae:	f1b9 0f00 	cmp.w	r9, #0
 80111b2:	d130      	bne.n	8011216 <__gethex+0x326>
 80111b4:	b127      	cbz	r7, 80111c0 <__gethex+0x2d0>
 80111b6:	4639      	mov	r1, r7
 80111b8:	4620      	mov	r0, r4
 80111ba:	f000 fe0b 	bl	8011dd4 <__any_on>
 80111be:	4681      	mov	r9, r0
 80111c0:	117a      	asrs	r2, r7, #5
 80111c2:	2301      	movs	r3, #1
 80111c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80111c8:	f007 071f 	and.w	r7, r7, #31
 80111cc:	40bb      	lsls	r3, r7
 80111ce:	4213      	tst	r3, r2
 80111d0:	4629      	mov	r1, r5
 80111d2:	4620      	mov	r0, r4
 80111d4:	bf18      	it	ne
 80111d6:	f049 0902 	orrne.w	r9, r9, #2
 80111da:	f7ff fe21 	bl	8010e20 <rshift>
 80111de:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80111e2:	1b76      	subs	r6, r6, r5
 80111e4:	2502      	movs	r5, #2
 80111e6:	f1b9 0f00 	cmp.w	r9, #0
 80111ea:	d047      	beq.n	801127c <__gethex+0x38c>
 80111ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80111f0:	2b02      	cmp	r3, #2
 80111f2:	d015      	beq.n	8011220 <__gethex+0x330>
 80111f4:	2b03      	cmp	r3, #3
 80111f6:	d017      	beq.n	8011228 <__gethex+0x338>
 80111f8:	2b01      	cmp	r3, #1
 80111fa:	d109      	bne.n	8011210 <__gethex+0x320>
 80111fc:	f019 0f02 	tst.w	r9, #2
 8011200:	d006      	beq.n	8011210 <__gethex+0x320>
 8011202:	f8da 3000 	ldr.w	r3, [sl]
 8011206:	ea49 0903 	orr.w	r9, r9, r3
 801120a:	f019 0f01 	tst.w	r9, #1
 801120e:	d10e      	bne.n	801122e <__gethex+0x33e>
 8011210:	f045 0510 	orr.w	r5, r5, #16
 8011214:	e032      	b.n	801127c <__gethex+0x38c>
 8011216:	f04f 0901 	mov.w	r9, #1
 801121a:	e7d1      	b.n	80111c0 <__gethex+0x2d0>
 801121c:	2501      	movs	r5, #1
 801121e:	e7e2      	b.n	80111e6 <__gethex+0x2f6>
 8011220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011222:	f1c3 0301 	rsb	r3, r3, #1
 8011226:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011228:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801122a:	2b00      	cmp	r3, #0
 801122c:	d0f0      	beq.n	8011210 <__gethex+0x320>
 801122e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011232:	f104 0314 	add.w	r3, r4, #20
 8011236:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801123a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801123e:	f04f 0c00 	mov.w	ip, #0
 8011242:	4618      	mov	r0, r3
 8011244:	f853 2b04 	ldr.w	r2, [r3], #4
 8011248:	f1b2 3fff 	cmp.w	r2, #4294967295
 801124c:	d01b      	beq.n	8011286 <__gethex+0x396>
 801124e:	3201      	adds	r2, #1
 8011250:	6002      	str	r2, [r0, #0]
 8011252:	2d02      	cmp	r5, #2
 8011254:	f104 0314 	add.w	r3, r4, #20
 8011258:	d13c      	bne.n	80112d4 <__gethex+0x3e4>
 801125a:	f8d8 2000 	ldr.w	r2, [r8]
 801125e:	3a01      	subs	r2, #1
 8011260:	42b2      	cmp	r2, r6
 8011262:	d109      	bne.n	8011278 <__gethex+0x388>
 8011264:	1171      	asrs	r1, r6, #5
 8011266:	2201      	movs	r2, #1
 8011268:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801126c:	f006 061f 	and.w	r6, r6, #31
 8011270:	fa02 f606 	lsl.w	r6, r2, r6
 8011274:	421e      	tst	r6, r3
 8011276:	d13a      	bne.n	80112ee <__gethex+0x3fe>
 8011278:	f045 0520 	orr.w	r5, r5, #32
 801127c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801127e:	601c      	str	r4, [r3, #0]
 8011280:	9b02      	ldr	r3, [sp, #8]
 8011282:	601f      	str	r7, [r3, #0]
 8011284:	e6b0      	b.n	8010fe8 <__gethex+0xf8>
 8011286:	4299      	cmp	r1, r3
 8011288:	f843 cc04 	str.w	ip, [r3, #-4]
 801128c:	d8d9      	bhi.n	8011242 <__gethex+0x352>
 801128e:	68a3      	ldr	r3, [r4, #8]
 8011290:	459b      	cmp	fp, r3
 8011292:	db17      	blt.n	80112c4 <__gethex+0x3d4>
 8011294:	6861      	ldr	r1, [r4, #4]
 8011296:	9801      	ldr	r0, [sp, #4]
 8011298:	3101      	adds	r1, #1
 801129a:	f000 f90d 	bl	80114b8 <_Balloc>
 801129e:	4681      	mov	r9, r0
 80112a0:	b918      	cbnz	r0, 80112aa <__gethex+0x3ba>
 80112a2:	4b1a      	ldr	r3, [pc, #104]	@ (801130c <__gethex+0x41c>)
 80112a4:	4602      	mov	r2, r0
 80112a6:	2184      	movs	r1, #132	@ 0x84
 80112a8:	e6c5      	b.n	8011036 <__gethex+0x146>
 80112aa:	6922      	ldr	r2, [r4, #16]
 80112ac:	3202      	adds	r2, #2
 80112ae:	f104 010c 	add.w	r1, r4, #12
 80112b2:	0092      	lsls	r2, r2, #2
 80112b4:	300c      	adds	r0, #12
 80112b6:	f7fe ff6a 	bl	801018e <memcpy>
 80112ba:	4621      	mov	r1, r4
 80112bc:	9801      	ldr	r0, [sp, #4]
 80112be:	f000 f93b 	bl	8011538 <_Bfree>
 80112c2:	464c      	mov	r4, r9
 80112c4:	6923      	ldr	r3, [r4, #16]
 80112c6:	1c5a      	adds	r2, r3, #1
 80112c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80112cc:	6122      	str	r2, [r4, #16]
 80112ce:	2201      	movs	r2, #1
 80112d0:	615a      	str	r2, [r3, #20]
 80112d2:	e7be      	b.n	8011252 <__gethex+0x362>
 80112d4:	6922      	ldr	r2, [r4, #16]
 80112d6:	455a      	cmp	r2, fp
 80112d8:	dd0b      	ble.n	80112f2 <__gethex+0x402>
 80112da:	2101      	movs	r1, #1
 80112dc:	4620      	mov	r0, r4
 80112de:	f7ff fd9f 	bl	8010e20 <rshift>
 80112e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80112e6:	3701      	adds	r7, #1
 80112e8:	42bb      	cmp	r3, r7
 80112ea:	f6ff aee0 	blt.w	80110ae <__gethex+0x1be>
 80112ee:	2501      	movs	r5, #1
 80112f0:	e7c2      	b.n	8011278 <__gethex+0x388>
 80112f2:	f016 061f 	ands.w	r6, r6, #31
 80112f6:	d0fa      	beq.n	80112ee <__gethex+0x3fe>
 80112f8:	4453      	add	r3, sl
 80112fa:	f1c6 0620 	rsb	r6, r6, #32
 80112fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011302:	f000 f9cb 	bl	801169c <__hi0bits>
 8011306:	42b0      	cmp	r0, r6
 8011308:	dbe7      	blt.n	80112da <__gethex+0x3ea>
 801130a:	e7f0      	b.n	80112ee <__gethex+0x3fe>
 801130c:	080133fb 	.word	0x080133fb

08011310 <L_shift>:
 8011310:	f1c2 0208 	rsb	r2, r2, #8
 8011314:	0092      	lsls	r2, r2, #2
 8011316:	b570      	push	{r4, r5, r6, lr}
 8011318:	f1c2 0620 	rsb	r6, r2, #32
 801131c:	6843      	ldr	r3, [r0, #4]
 801131e:	6804      	ldr	r4, [r0, #0]
 8011320:	fa03 f506 	lsl.w	r5, r3, r6
 8011324:	432c      	orrs	r4, r5
 8011326:	40d3      	lsrs	r3, r2
 8011328:	6004      	str	r4, [r0, #0]
 801132a:	f840 3f04 	str.w	r3, [r0, #4]!
 801132e:	4288      	cmp	r0, r1
 8011330:	d3f4      	bcc.n	801131c <L_shift+0xc>
 8011332:	bd70      	pop	{r4, r5, r6, pc}

08011334 <__match>:
 8011334:	b530      	push	{r4, r5, lr}
 8011336:	6803      	ldr	r3, [r0, #0]
 8011338:	3301      	adds	r3, #1
 801133a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801133e:	b914      	cbnz	r4, 8011346 <__match+0x12>
 8011340:	6003      	str	r3, [r0, #0]
 8011342:	2001      	movs	r0, #1
 8011344:	bd30      	pop	{r4, r5, pc}
 8011346:	f813 2b01 	ldrb.w	r2, [r3], #1
 801134a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801134e:	2d19      	cmp	r5, #25
 8011350:	bf98      	it	ls
 8011352:	3220      	addls	r2, #32
 8011354:	42a2      	cmp	r2, r4
 8011356:	d0f0      	beq.n	801133a <__match+0x6>
 8011358:	2000      	movs	r0, #0
 801135a:	e7f3      	b.n	8011344 <__match+0x10>

0801135c <__hexnan>:
 801135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011360:	680b      	ldr	r3, [r1, #0]
 8011362:	6801      	ldr	r1, [r0, #0]
 8011364:	115e      	asrs	r6, r3, #5
 8011366:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801136a:	f013 031f 	ands.w	r3, r3, #31
 801136e:	b087      	sub	sp, #28
 8011370:	bf18      	it	ne
 8011372:	3604      	addne	r6, #4
 8011374:	2500      	movs	r5, #0
 8011376:	1f37      	subs	r7, r6, #4
 8011378:	4682      	mov	sl, r0
 801137a:	4690      	mov	r8, r2
 801137c:	9301      	str	r3, [sp, #4]
 801137e:	f846 5c04 	str.w	r5, [r6, #-4]
 8011382:	46b9      	mov	r9, r7
 8011384:	463c      	mov	r4, r7
 8011386:	9502      	str	r5, [sp, #8]
 8011388:	46ab      	mov	fp, r5
 801138a:	784a      	ldrb	r2, [r1, #1]
 801138c:	1c4b      	adds	r3, r1, #1
 801138e:	9303      	str	r3, [sp, #12]
 8011390:	b342      	cbz	r2, 80113e4 <__hexnan+0x88>
 8011392:	4610      	mov	r0, r2
 8011394:	9105      	str	r1, [sp, #20]
 8011396:	9204      	str	r2, [sp, #16]
 8011398:	f7ff fd94 	bl	8010ec4 <__hexdig_fun>
 801139c:	2800      	cmp	r0, #0
 801139e:	d151      	bne.n	8011444 <__hexnan+0xe8>
 80113a0:	9a04      	ldr	r2, [sp, #16]
 80113a2:	9905      	ldr	r1, [sp, #20]
 80113a4:	2a20      	cmp	r2, #32
 80113a6:	d818      	bhi.n	80113da <__hexnan+0x7e>
 80113a8:	9b02      	ldr	r3, [sp, #8]
 80113aa:	459b      	cmp	fp, r3
 80113ac:	dd13      	ble.n	80113d6 <__hexnan+0x7a>
 80113ae:	454c      	cmp	r4, r9
 80113b0:	d206      	bcs.n	80113c0 <__hexnan+0x64>
 80113b2:	2d07      	cmp	r5, #7
 80113b4:	dc04      	bgt.n	80113c0 <__hexnan+0x64>
 80113b6:	462a      	mov	r2, r5
 80113b8:	4649      	mov	r1, r9
 80113ba:	4620      	mov	r0, r4
 80113bc:	f7ff ffa8 	bl	8011310 <L_shift>
 80113c0:	4544      	cmp	r4, r8
 80113c2:	d952      	bls.n	801146a <__hexnan+0x10e>
 80113c4:	2300      	movs	r3, #0
 80113c6:	f1a4 0904 	sub.w	r9, r4, #4
 80113ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80113ce:	f8cd b008 	str.w	fp, [sp, #8]
 80113d2:	464c      	mov	r4, r9
 80113d4:	461d      	mov	r5, r3
 80113d6:	9903      	ldr	r1, [sp, #12]
 80113d8:	e7d7      	b.n	801138a <__hexnan+0x2e>
 80113da:	2a29      	cmp	r2, #41	@ 0x29
 80113dc:	d157      	bne.n	801148e <__hexnan+0x132>
 80113de:	3102      	adds	r1, #2
 80113e0:	f8ca 1000 	str.w	r1, [sl]
 80113e4:	f1bb 0f00 	cmp.w	fp, #0
 80113e8:	d051      	beq.n	801148e <__hexnan+0x132>
 80113ea:	454c      	cmp	r4, r9
 80113ec:	d206      	bcs.n	80113fc <__hexnan+0xa0>
 80113ee:	2d07      	cmp	r5, #7
 80113f0:	dc04      	bgt.n	80113fc <__hexnan+0xa0>
 80113f2:	462a      	mov	r2, r5
 80113f4:	4649      	mov	r1, r9
 80113f6:	4620      	mov	r0, r4
 80113f8:	f7ff ff8a 	bl	8011310 <L_shift>
 80113fc:	4544      	cmp	r4, r8
 80113fe:	d936      	bls.n	801146e <__hexnan+0x112>
 8011400:	f1a8 0204 	sub.w	r2, r8, #4
 8011404:	4623      	mov	r3, r4
 8011406:	f853 1b04 	ldr.w	r1, [r3], #4
 801140a:	f842 1f04 	str.w	r1, [r2, #4]!
 801140e:	429f      	cmp	r7, r3
 8011410:	d2f9      	bcs.n	8011406 <__hexnan+0xaa>
 8011412:	1b3b      	subs	r3, r7, r4
 8011414:	f023 0303 	bic.w	r3, r3, #3
 8011418:	3304      	adds	r3, #4
 801141a:	3401      	adds	r4, #1
 801141c:	3e03      	subs	r6, #3
 801141e:	42b4      	cmp	r4, r6
 8011420:	bf88      	it	hi
 8011422:	2304      	movhi	r3, #4
 8011424:	4443      	add	r3, r8
 8011426:	2200      	movs	r2, #0
 8011428:	f843 2b04 	str.w	r2, [r3], #4
 801142c:	429f      	cmp	r7, r3
 801142e:	d2fb      	bcs.n	8011428 <__hexnan+0xcc>
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	b91b      	cbnz	r3, 801143c <__hexnan+0xe0>
 8011434:	4547      	cmp	r7, r8
 8011436:	d128      	bne.n	801148a <__hexnan+0x12e>
 8011438:	2301      	movs	r3, #1
 801143a:	603b      	str	r3, [r7, #0]
 801143c:	2005      	movs	r0, #5
 801143e:	b007      	add	sp, #28
 8011440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011444:	3501      	adds	r5, #1
 8011446:	2d08      	cmp	r5, #8
 8011448:	f10b 0b01 	add.w	fp, fp, #1
 801144c:	dd06      	ble.n	801145c <__hexnan+0x100>
 801144e:	4544      	cmp	r4, r8
 8011450:	d9c1      	bls.n	80113d6 <__hexnan+0x7a>
 8011452:	2300      	movs	r3, #0
 8011454:	f844 3c04 	str.w	r3, [r4, #-4]
 8011458:	2501      	movs	r5, #1
 801145a:	3c04      	subs	r4, #4
 801145c:	6822      	ldr	r2, [r4, #0]
 801145e:	f000 000f 	and.w	r0, r0, #15
 8011462:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011466:	6020      	str	r0, [r4, #0]
 8011468:	e7b5      	b.n	80113d6 <__hexnan+0x7a>
 801146a:	2508      	movs	r5, #8
 801146c:	e7b3      	b.n	80113d6 <__hexnan+0x7a>
 801146e:	9b01      	ldr	r3, [sp, #4]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d0dd      	beq.n	8011430 <__hexnan+0xd4>
 8011474:	f1c3 0320 	rsb	r3, r3, #32
 8011478:	f04f 32ff 	mov.w	r2, #4294967295
 801147c:	40da      	lsrs	r2, r3
 801147e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011482:	4013      	ands	r3, r2
 8011484:	f846 3c04 	str.w	r3, [r6, #-4]
 8011488:	e7d2      	b.n	8011430 <__hexnan+0xd4>
 801148a:	3f04      	subs	r7, #4
 801148c:	e7d0      	b.n	8011430 <__hexnan+0xd4>
 801148e:	2004      	movs	r0, #4
 8011490:	e7d5      	b.n	801143e <__hexnan+0xe2>

08011492 <__ascii_mbtowc>:
 8011492:	b082      	sub	sp, #8
 8011494:	b901      	cbnz	r1, 8011498 <__ascii_mbtowc+0x6>
 8011496:	a901      	add	r1, sp, #4
 8011498:	b142      	cbz	r2, 80114ac <__ascii_mbtowc+0x1a>
 801149a:	b14b      	cbz	r3, 80114b0 <__ascii_mbtowc+0x1e>
 801149c:	7813      	ldrb	r3, [r2, #0]
 801149e:	600b      	str	r3, [r1, #0]
 80114a0:	7812      	ldrb	r2, [r2, #0]
 80114a2:	1e10      	subs	r0, r2, #0
 80114a4:	bf18      	it	ne
 80114a6:	2001      	movne	r0, #1
 80114a8:	b002      	add	sp, #8
 80114aa:	4770      	bx	lr
 80114ac:	4610      	mov	r0, r2
 80114ae:	e7fb      	b.n	80114a8 <__ascii_mbtowc+0x16>
 80114b0:	f06f 0001 	mvn.w	r0, #1
 80114b4:	e7f8      	b.n	80114a8 <__ascii_mbtowc+0x16>
	...

080114b8 <_Balloc>:
 80114b8:	b570      	push	{r4, r5, r6, lr}
 80114ba:	69c6      	ldr	r6, [r0, #28]
 80114bc:	4604      	mov	r4, r0
 80114be:	460d      	mov	r5, r1
 80114c0:	b976      	cbnz	r6, 80114e0 <_Balloc+0x28>
 80114c2:	2010      	movs	r0, #16
 80114c4:	f7fc ffb2 	bl	800e42c <malloc>
 80114c8:	4602      	mov	r2, r0
 80114ca:	61e0      	str	r0, [r4, #28]
 80114cc:	b920      	cbnz	r0, 80114d8 <_Balloc+0x20>
 80114ce:	4b18      	ldr	r3, [pc, #96]	@ (8011530 <_Balloc+0x78>)
 80114d0:	4818      	ldr	r0, [pc, #96]	@ (8011534 <_Balloc+0x7c>)
 80114d2:	216b      	movs	r1, #107	@ 0x6b
 80114d4:	f001 fad4 	bl	8012a80 <__assert_func>
 80114d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114dc:	6006      	str	r6, [r0, #0]
 80114de:	60c6      	str	r6, [r0, #12]
 80114e0:	69e6      	ldr	r6, [r4, #28]
 80114e2:	68f3      	ldr	r3, [r6, #12]
 80114e4:	b183      	cbz	r3, 8011508 <_Balloc+0x50>
 80114e6:	69e3      	ldr	r3, [r4, #28]
 80114e8:	68db      	ldr	r3, [r3, #12]
 80114ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114ee:	b9b8      	cbnz	r0, 8011520 <_Balloc+0x68>
 80114f0:	2101      	movs	r1, #1
 80114f2:	fa01 f605 	lsl.w	r6, r1, r5
 80114f6:	1d72      	adds	r2, r6, #5
 80114f8:	0092      	lsls	r2, r2, #2
 80114fa:	4620      	mov	r0, r4
 80114fc:	f001 fade 	bl	8012abc <_calloc_r>
 8011500:	b160      	cbz	r0, 801151c <_Balloc+0x64>
 8011502:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011506:	e00e      	b.n	8011526 <_Balloc+0x6e>
 8011508:	2221      	movs	r2, #33	@ 0x21
 801150a:	2104      	movs	r1, #4
 801150c:	4620      	mov	r0, r4
 801150e:	f001 fad5 	bl	8012abc <_calloc_r>
 8011512:	69e3      	ldr	r3, [r4, #28]
 8011514:	60f0      	str	r0, [r6, #12]
 8011516:	68db      	ldr	r3, [r3, #12]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d1e4      	bne.n	80114e6 <_Balloc+0x2e>
 801151c:	2000      	movs	r0, #0
 801151e:	bd70      	pop	{r4, r5, r6, pc}
 8011520:	6802      	ldr	r2, [r0, #0]
 8011522:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011526:	2300      	movs	r3, #0
 8011528:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801152c:	e7f7      	b.n	801151e <_Balloc+0x66>
 801152e:	bf00      	nop
 8011530:	0801338c 	.word	0x0801338c
 8011534:	0801346c 	.word	0x0801346c

08011538 <_Bfree>:
 8011538:	b570      	push	{r4, r5, r6, lr}
 801153a:	69c6      	ldr	r6, [r0, #28]
 801153c:	4605      	mov	r5, r0
 801153e:	460c      	mov	r4, r1
 8011540:	b976      	cbnz	r6, 8011560 <_Bfree+0x28>
 8011542:	2010      	movs	r0, #16
 8011544:	f7fc ff72 	bl	800e42c <malloc>
 8011548:	4602      	mov	r2, r0
 801154a:	61e8      	str	r0, [r5, #28]
 801154c:	b920      	cbnz	r0, 8011558 <_Bfree+0x20>
 801154e:	4b09      	ldr	r3, [pc, #36]	@ (8011574 <_Bfree+0x3c>)
 8011550:	4809      	ldr	r0, [pc, #36]	@ (8011578 <_Bfree+0x40>)
 8011552:	218f      	movs	r1, #143	@ 0x8f
 8011554:	f001 fa94 	bl	8012a80 <__assert_func>
 8011558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801155c:	6006      	str	r6, [r0, #0]
 801155e:	60c6      	str	r6, [r0, #12]
 8011560:	b13c      	cbz	r4, 8011572 <_Bfree+0x3a>
 8011562:	69eb      	ldr	r3, [r5, #28]
 8011564:	6862      	ldr	r2, [r4, #4]
 8011566:	68db      	ldr	r3, [r3, #12]
 8011568:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801156c:	6021      	str	r1, [r4, #0]
 801156e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011572:	bd70      	pop	{r4, r5, r6, pc}
 8011574:	0801338c 	.word	0x0801338c
 8011578:	0801346c 	.word	0x0801346c

0801157c <__multadd>:
 801157c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011580:	690d      	ldr	r5, [r1, #16]
 8011582:	4607      	mov	r7, r0
 8011584:	460c      	mov	r4, r1
 8011586:	461e      	mov	r6, r3
 8011588:	f101 0c14 	add.w	ip, r1, #20
 801158c:	2000      	movs	r0, #0
 801158e:	f8dc 3000 	ldr.w	r3, [ip]
 8011592:	b299      	uxth	r1, r3
 8011594:	fb02 6101 	mla	r1, r2, r1, r6
 8011598:	0c1e      	lsrs	r6, r3, #16
 801159a:	0c0b      	lsrs	r3, r1, #16
 801159c:	fb02 3306 	mla	r3, r2, r6, r3
 80115a0:	b289      	uxth	r1, r1
 80115a2:	3001      	adds	r0, #1
 80115a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80115a8:	4285      	cmp	r5, r0
 80115aa:	f84c 1b04 	str.w	r1, [ip], #4
 80115ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80115b2:	dcec      	bgt.n	801158e <__multadd+0x12>
 80115b4:	b30e      	cbz	r6, 80115fa <__multadd+0x7e>
 80115b6:	68a3      	ldr	r3, [r4, #8]
 80115b8:	42ab      	cmp	r3, r5
 80115ba:	dc19      	bgt.n	80115f0 <__multadd+0x74>
 80115bc:	6861      	ldr	r1, [r4, #4]
 80115be:	4638      	mov	r0, r7
 80115c0:	3101      	adds	r1, #1
 80115c2:	f7ff ff79 	bl	80114b8 <_Balloc>
 80115c6:	4680      	mov	r8, r0
 80115c8:	b928      	cbnz	r0, 80115d6 <__multadd+0x5a>
 80115ca:	4602      	mov	r2, r0
 80115cc:	4b0c      	ldr	r3, [pc, #48]	@ (8011600 <__multadd+0x84>)
 80115ce:	480d      	ldr	r0, [pc, #52]	@ (8011604 <__multadd+0x88>)
 80115d0:	21ba      	movs	r1, #186	@ 0xba
 80115d2:	f001 fa55 	bl	8012a80 <__assert_func>
 80115d6:	6922      	ldr	r2, [r4, #16]
 80115d8:	3202      	adds	r2, #2
 80115da:	f104 010c 	add.w	r1, r4, #12
 80115de:	0092      	lsls	r2, r2, #2
 80115e0:	300c      	adds	r0, #12
 80115e2:	f7fe fdd4 	bl	801018e <memcpy>
 80115e6:	4621      	mov	r1, r4
 80115e8:	4638      	mov	r0, r7
 80115ea:	f7ff ffa5 	bl	8011538 <_Bfree>
 80115ee:	4644      	mov	r4, r8
 80115f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80115f4:	3501      	adds	r5, #1
 80115f6:	615e      	str	r6, [r3, #20]
 80115f8:	6125      	str	r5, [r4, #16]
 80115fa:	4620      	mov	r0, r4
 80115fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011600:	080133fb 	.word	0x080133fb
 8011604:	0801346c 	.word	0x0801346c

08011608 <__s2b>:
 8011608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801160c:	460c      	mov	r4, r1
 801160e:	4615      	mov	r5, r2
 8011610:	461f      	mov	r7, r3
 8011612:	2209      	movs	r2, #9
 8011614:	3308      	adds	r3, #8
 8011616:	4606      	mov	r6, r0
 8011618:	fb93 f3f2 	sdiv	r3, r3, r2
 801161c:	2100      	movs	r1, #0
 801161e:	2201      	movs	r2, #1
 8011620:	429a      	cmp	r2, r3
 8011622:	db09      	blt.n	8011638 <__s2b+0x30>
 8011624:	4630      	mov	r0, r6
 8011626:	f7ff ff47 	bl	80114b8 <_Balloc>
 801162a:	b940      	cbnz	r0, 801163e <__s2b+0x36>
 801162c:	4602      	mov	r2, r0
 801162e:	4b19      	ldr	r3, [pc, #100]	@ (8011694 <__s2b+0x8c>)
 8011630:	4819      	ldr	r0, [pc, #100]	@ (8011698 <__s2b+0x90>)
 8011632:	21d3      	movs	r1, #211	@ 0xd3
 8011634:	f001 fa24 	bl	8012a80 <__assert_func>
 8011638:	0052      	lsls	r2, r2, #1
 801163a:	3101      	adds	r1, #1
 801163c:	e7f0      	b.n	8011620 <__s2b+0x18>
 801163e:	9b08      	ldr	r3, [sp, #32]
 8011640:	6143      	str	r3, [r0, #20]
 8011642:	2d09      	cmp	r5, #9
 8011644:	f04f 0301 	mov.w	r3, #1
 8011648:	6103      	str	r3, [r0, #16]
 801164a:	dd16      	ble.n	801167a <__s2b+0x72>
 801164c:	f104 0909 	add.w	r9, r4, #9
 8011650:	46c8      	mov	r8, r9
 8011652:	442c      	add	r4, r5
 8011654:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011658:	4601      	mov	r1, r0
 801165a:	3b30      	subs	r3, #48	@ 0x30
 801165c:	220a      	movs	r2, #10
 801165e:	4630      	mov	r0, r6
 8011660:	f7ff ff8c 	bl	801157c <__multadd>
 8011664:	45a0      	cmp	r8, r4
 8011666:	d1f5      	bne.n	8011654 <__s2b+0x4c>
 8011668:	f1a5 0408 	sub.w	r4, r5, #8
 801166c:	444c      	add	r4, r9
 801166e:	1b2d      	subs	r5, r5, r4
 8011670:	1963      	adds	r3, r4, r5
 8011672:	42bb      	cmp	r3, r7
 8011674:	db04      	blt.n	8011680 <__s2b+0x78>
 8011676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801167a:	340a      	adds	r4, #10
 801167c:	2509      	movs	r5, #9
 801167e:	e7f6      	b.n	801166e <__s2b+0x66>
 8011680:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011684:	4601      	mov	r1, r0
 8011686:	3b30      	subs	r3, #48	@ 0x30
 8011688:	220a      	movs	r2, #10
 801168a:	4630      	mov	r0, r6
 801168c:	f7ff ff76 	bl	801157c <__multadd>
 8011690:	e7ee      	b.n	8011670 <__s2b+0x68>
 8011692:	bf00      	nop
 8011694:	080133fb 	.word	0x080133fb
 8011698:	0801346c 	.word	0x0801346c

0801169c <__hi0bits>:
 801169c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80116a0:	4603      	mov	r3, r0
 80116a2:	bf36      	itet	cc
 80116a4:	0403      	lslcc	r3, r0, #16
 80116a6:	2000      	movcs	r0, #0
 80116a8:	2010      	movcc	r0, #16
 80116aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80116ae:	bf3c      	itt	cc
 80116b0:	021b      	lslcc	r3, r3, #8
 80116b2:	3008      	addcc	r0, #8
 80116b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80116b8:	bf3c      	itt	cc
 80116ba:	011b      	lslcc	r3, r3, #4
 80116bc:	3004      	addcc	r0, #4
 80116be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80116c2:	bf3c      	itt	cc
 80116c4:	009b      	lslcc	r3, r3, #2
 80116c6:	3002      	addcc	r0, #2
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	db05      	blt.n	80116d8 <__hi0bits+0x3c>
 80116cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80116d0:	f100 0001 	add.w	r0, r0, #1
 80116d4:	bf08      	it	eq
 80116d6:	2020      	moveq	r0, #32
 80116d8:	4770      	bx	lr

080116da <__lo0bits>:
 80116da:	6803      	ldr	r3, [r0, #0]
 80116dc:	4602      	mov	r2, r0
 80116de:	f013 0007 	ands.w	r0, r3, #7
 80116e2:	d00b      	beq.n	80116fc <__lo0bits+0x22>
 80116e4:	07d9      	lsls	r1, r3, #31
 80116e6:	d421      	bmi.n	801172c <__lo0bits+0x52>
 80116e8:	0798      	lsls	r0, r3, #30
 80116ea:	bf49      	itett	mi
 80116ec:	085b      	lsrmi	r3, r3, #1
 80116ee:	089b      	lsrpl	r3, r3, #2
 80116f0:	2001      	movmi	r0, #1
 80116f2:	6013      	strmi	r3, [r2, #0]
 80116f4:	bf5c      	itt	pl
 80116f6:	6013      	strpl	r3, [r2, #0]
 80116f8:	2002      	movpl	r0, #2
 80116fa:	4770      	bx	lr
 80116fc:	b299      	uxth	r1, r3
 80116fe:	b909      	cbnz	r1, 8011704 <__lo0bits+0x2a>
 8011700:	0c1b      	lsrs	r3, r3, #16
 8011702:	2010      	movs	r0, #16
 8011704:	b2d9      	uxtb	r1, r3
 8011706:	b909      	cbnz	r1, 801170c <__lo0bits+0x32>
 8011708:	3008      	adds	r0, #8
 801170a:	0a1b      	lsrs	r3, r3, #8
 801170c:	0719      	lsls	r1, r3, #28
 801170e:	bf04      	itt	eq
 8011710:	091b      	lsreq	r3, r3, #4
 8011712:	3004      	addeq	r0, #4
 8011714:	0799      	lsls	r1, r3, #30
 8011716:	bf04      	itt	eq
 8011718:	089b      	lsreq	r3, r3, #2
 801171a:	3002      	addeq	r0, #2
 801171c:	07d9      	lsls	r1, r3, #31
 801171e:	d403      	bmi.n	8011728 <__lo0bits+0x4e>
 8011720:	085b      	lsrs	r3, r3, #1
 8011722:	f100 0001 	add.w	r0, r0, #1
 8011726:	d003      	beq.n	8011730 <__lo0bits+0x56>
 8011728:	6013      	str	r3, [r2, #0]
 801172a:	4770      	bx	lr
 801172c:	2000      	movs	r0, #0
 801172e:	4770      	bx	lr
 8011730:	2020      	movs	r0, #32
 8011732:	4770      	bx	lr

08011734 <__i2b>:
 8011734:	b510      	push	{r4, lr}
 8011736:	460c      	mov	r4, r1
 8011738:	2101      	movs	r1, #1
 801173a:	f7ff febd 	bl	80114b8 <_Balloc>
 801173e:	4602      	mov	r2, r0
 8011740:	b928      	cbnz	r0, 801174e <__i2b+0x1a>
 8011742:	4b05      	ldr	r3, [pc, #20]	@ (8011758 <__i2b+0x24>)
 8011744:	4805      	ldr	r0, [pc, #20]	@ (801175c <__i2b+0x28>)
 8011746:	f240 1145 	movw	r1, #325	@ 0x145
 801174a:	f001 f999 	bl	8012a80 <__assert_func>
 801174e:	2301      	movs	r3, #1
 8011750:	6144      	str	r4, [r0, #20]
 8011752:	6103      	str	r3, [r0, #16]
 8011754:	bd10      	pop	{r4, pc}
 8011756:	bf00      	nop
 8011758:	080133fb 	.word	0x080133fb
 801175c:	0801346c 	.word	0x0801346c

08011760 <__multiply>:
 8011760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011764:	4614      	mov	r4, r2
 8011766:	690a      	ldr	r2, [r1, #16]
 8011768:	6923      	ldr	r3, [r4, #16]
 801176a:	429a      	cmp	r2, r3
 801176c:	bfa8      	it	ge
 801176e:	4623      	movge	r3, r4
 8011770:	460f      	mov	r7, r1
 8011772:	bfa4      	itt	ge
 8011774:	460c      	movge	r4, r1
 8011776:	461f      	movge	r7, r3
 8011778:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801177c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011780:	68a3      	ldr	r3, [r4, #8]
 8011782:	6861      	ldr	r1, [r4, #4]
 8011784:	eb0a 0609 	add.w	r6, sl, r9
 8011788:	42b3      	cmp	r3, r6
 801178a:	b085      	sub	sp, #20
 801178c:	bfb8      	it	lt
 801178e:	3101      	addlt	r1, #1
 8011790:	f7ff fe92 	bl	80114b8 <_Balloc>
 8011794:	b930      	cbnz	r0, 80117a4 <__multiply+0x44>
 8011796:	4602      	mov	r2, r0
 8011798:	4b44      	ldr	r3, [pc, #272]	@ (80118ac <__multiply+0x14c>)
 801179a:	4845      	ldr	r0, [pc, #276]	@ (80118b0 <__multiply+0x150>)
 801179c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80117a0:	f001 f96e 	bl	8012a80 <__assert_func>
 80117a4:	f100 0514 	add.w	r5, r0, #20
 80117a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80117ac:	462b      	mov	r3, r5
 80117ae:	2200      	movs	r2, #0
 80117b0:	4543      	cmp	r3, r8
 80117b2:	d321      	bcc.n	80117f8 <__multiply+0x98>
 80117b4:	f107 0114 	add.w	r1, r7, #20
 80117b8:	f104 0214 	add.w	r2, r4, #20
 80117bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80117c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80117c4:	9302      	str	r3, [sp, #8]
 80117c6:	1b13      	subs	r3, r2, r4
 80117c8:	3b15      	subs	r3, #21
 80117ca:	f023 0303 	bic.w	r3, r3, #3
 80117ce:	3304      	adds	r3, #4
 80117d0:	f104 0715 	add.w	r7, r4, #21
 80117d4:	42ba      	cmp	r2, r7
 80117d6:	bf38      	it	cc
 80117d8:	2304      	movcc	r3, #4
 80117da:	9301      	str	r3, [sp, #4]
 80117dc:	9b02      	ldr	r3, [sp, #8]
 80117de:	9103      	str	r1, [sp, #12]
 80117e0:	428b      	cmp	r3, r1
 80117e2:	d80c      	bhi.n	80117fe <__multiply+0x9e>
 80117e4:	2e00      	cmp	r6, #0
 80117e6:	dd03      	ble.n	80117f0 <__multiply+0x90>
 80117e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d05b      	beq.n	80118a8 <__multiply+0x148>
 80117f0:	6106      	str	r6, [r0, #16]
 80117f2:	b005      	add	sp, #20
 80117f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117f8:	f843 2b04 	str.w	r2, [r3], #4
 80117fc:	e7d8      	b.n	80117b0 <__multiply+0x50>
 80117fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8011802:	f1ba 0f00 	cmp.w	sl, #0
 8011806:	d024      	beq.n	8011852 <__multiply+0xf2>
 8011808:	f104 0e14 	add.w	lr, r4, #20
 801180c:	46a9      	mov	r9, r5
 801180e:	f04f 0c00 	mov.w	ip, #0
 8011812:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011816:	f8d9 3000 	ldr.w	r3, [r9]
 801181a:	fa1f fb87 	uxth.w	fp, r7
 801181e:	b29b      	uxth	r3, r3
 8011820:	fb0a 330b 	mla	r3, sl, fp, r3
 8011824:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011828:	f8d9 7000 	ldr.w	r7, [r9]
 801182c:	4463      	add	r3, ip
 801182e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011832:	fb0a c70b 	mla	r7, sl, fp, ip
 8011836:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801183a:	b29b      	uxth	r3, r3
 801183c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011840:	4572      	cmp	r2, lr
 8011842:	f849 3b04 	str.w	r3, [r9], #4
 8011846:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801184a:	d8e2      	bhi.n	8011812 <__multiply+0xb2>
 801184c:	9b01      	ldr	r3, [sp, #4]
 801184e:	f845 c003 	str.w	ip, [r5, r3]
 8011852:	9b03      	ldr	r3, [sp, #12]
 8011854:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011858:	3104      	adds	r1, #4
 801185a:	f1b9 0f00 	cmp.w	r9, #0
 801185e:	d021      	beq.n	80118a4 <__multiply+0x144>
 8011860:	682b      	ldr	r3, [r5, #0]
 8011862:	f104 0c14 	add.w	ip, r4, #20
 8011866:	46ae      	mov	lr, r5
 8011868:	f04f 0a00 	mov.w	sl, #0
 801186c:	f8bc b000 	ldrh.w	fp, [ip]
 8011870:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011874:	fb09 770b 	mla	r7, r9, fp, r7
 8011878:	4457      	add	r7, sl
 801187a:	b29b      	uxth	r3, r3
 801187c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011880:	f84e 3b04 	str.w	r3, [lr], #4
 8011884:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011888:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801188c:	f8be 3000 	ldrh.w	r3, [lr]
 8011890:	fb09 330a 	mla	r3, r9, sl, r3
 8011894:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011898:	4562      	cmp	r2, ip
 801189a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801189e:	d8e5      	bhi.n	801186c <__multiply+0x10c>
 80118a0:	9f01      	ldr	r7, [sp, #4]
 80118a2:	51eb      	str	r3, [r5, r7]
 80118a4:	3504      	adds	r5, #4
 80118a6:	e799      	b.n	80117dc <__multiply+0x7c>
 80118a8:	3e01      	subs	r6, #1
 80118aa:	e79b      	b.n	80117e4 <__multiply+0x84>
 80118ac:	080133fb 	.word	0x080133fb
 80118b0:	0801346c 	.word	0x0801346c

080118b4 <__pow5mult>:
 80118b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118b8:	4615      	mov	r5, r2
 80118ba:	f012 0203 	ands.w	r2, r2, #3
 80118be:	4607      	mov	r7, r0
 80118c0:	460e      	mov	r6, r1
 80118c2:	d007      	beq.n	80118d4 <__pow5mult+0x20>
 80118c4:	4c25      	ldr	r4, [pc, #148]	@ (801195c <__pow5mult+0xa8>)
 80118c6:	3a01      	subs	r2, #1
 80118c8:	2300      	movs	r3, #0
 80118ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118ce:	f7ff fe55 	bl	801157c <__multadd>
 80118d2:	4606      	mov	r6, r0
 80118d4:	10ad      	asrs	r5, r5, #2
 80118d6:	d03d      	beq.n	8011954 <__pow5mult+0xa0>
 80118d8:	69fc      	ldr	r4, [r7, #28]
 80118da:	b97c      	cbnz	r4, 80118fc <__pow5mult+0x48>
 80118dc:	2010      	movs	r0, #16
 80118de:	f7fc fda5 	bl	800e42c <malloc>
 80118e2:	4602      	mov	r2, r0
 80118e4:	61f8      	str	r0, [r7, #28]
 80118e6:	b928      	cbnz	r0, 80118f4 <__pow5mult+0x40>
 80118e8:	4b1d      	ldr	r3, [pc, #116]	@ (8011960 <__pow5mult+0xac>)
 80118ea:	481e      	ldr	r0, [pc, #120]	@ (8011964 <__pow5mult+0xb0>)
 80118ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80118f0:	f001 f8c6 	bl	8012a80 <__assert_func>
 80118f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118f8:	6004      	str	r4, [r0, #0]
 80118fa:	60c4      	str	r4, [r0, #12]
 80118fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011900:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011904:	b94c      	cbnz	r4, 801191a <__pow5mult+0x66>
 8011906:	f240 2171 	movw	r1, #625	@ 0x271
 801190a:	4638      	mov	r0, r7
 801190c:	f7ff ff12 	bl	8011734 <__i2b>
 8011910:	2300      	movs	r3, #0
 8011912:	f8c8 0008 	str.w	r0, [r8, #8]
 8011916:	4604      	mov	r4, r0
 8011918:	6003      	str	r3, [r0, #0]
 801191a:	f04f 0900 	mov.w	r9, #0
 801191e:	07eb      	lsls	r3, r5, #31
 8011920:	d50a      	bpl.n	8011938 <__pow5mult+0x84>
 8011922:	4631      	mov	r1, r6
 8011924:	4622      	mov	r2, r4
 8011926:	4638      	mov	r0, r7
 8011928:	f7ff ff1a 	bl	8011760 <__multiply>
 801192c:	4631      	mov	r1, r6
 801192e:	4680      	mov	r8, r0
 8011930:	4638      	mov	r0, r7
 8011932:	f7ff fe01 	bl	8011538 <_Bfree>
 8011936:	4646      	mov	r6, r8
 8011938:	106d      	asrs	r5, r5, #1
 801193a:	d00b      	beq.n	8011954 <__pow5mult+0xa0>
 801193c:	6820      	ldr	r0, [r4, #0]
 801193e:	b938      	cbnz	r0, 8011950 <__pow5mult+0x9c>
 8011940:	4622      	mov	r2, r4
 8011942:	4621      	mov	r1, r4
 8011944:	4638      	mov	r0, r7
 8011946:	f7ff ff0b 	bl	8011760 <__multiply>
 801194a:	6020      	str	r0, [r4, #0]
 801194c:	f8c0 9000 	str.w	r9, [r0]
 8011950:	4604      	mov	r4, r0
 8011952:	e7e4      	b.n	801191e <__pow5mult+0x6a>
 8011954:	4630      	mov	r0, r6
 8011956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801195a:	bf00      	nop
 801195c:	080134c8 	.word	0x080134c8
 8011960:	0801338c 	.word	0x0801338c
 8011964:	0801346c 	.word	0x0801346c

08011968 <__lshift>:
 8011968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801196c:	460c      	mov	r4, r1
 801196e:	6849      	ldr	r1, [r1, #4]
 8011970:	6923      	ldr	r3, [r4, #16]
 8011972:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011976:	68a3      	ldr	r3, [r4, #8]
 8011978:	4607      	mov	r7, r0
 801197a:	4691      	mov	r9, r2
 801197c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011980:	f108 0601 	add.w	r6, r8, #1
 8011984:	42b3      	cmp	r3, r6
 8011986:	db0b      	blt.n	80119a0 <__lshift+0x38>
 8011988:	4638      	mov	r0, r7
 801198a:	f7ff fd95 	bl	80114b8 <_Balloc>
 801198e:	4605      	mov	r5, r0
 8011990:	b948      	cbnz	r0, 80119a6 <__lshift+0x3e>
 8011992:	4602      	mov	r2, r0
 8011994:	4b28      	ldr	r3, [pc, #160]	@ (8011a38 <__lshift+0xd0>)
 8011996:	4829      	ldr	r0, [pc, #164]	@ (8011a3c <__lshift+0xd4>)
 8011998:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801199c:	f001 f870 	bl	8012a80 <__assert_func>
 80119a0:	3101      	adds	r1, #1
 80119a2:	005b      	lsls	r3, r3, #1
 80119a4:	e7ee      	b.n	8011984 <__lshift+0x1c>
 80119a6:	2300      	movs	r3, #0
 80119a8:	f100 0114 	add.w	r1, r0, #20
 80119ac:	f100 0210 	add.w	r2, r0, #16
 80119b0:	4618      	mov	r0, r3
 80119b2:	4553      	cmp	r3, sl
 80119b4:	db33      	blt.n	8011a1e <__lshift+0xb6>
 80119b6:	6920      	ldr	r0, [r4, #16]
 80119b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119bc:	f104 0314 	add.w	r3, r4, #20
 80119c0:	f019 091f 	ands.w	r9, r9, #31
 80119c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80119cc:	d02b      	beq.n	8011a26 <__lshift+0xbe>
 80119ce:	f1c9 0e20 	rsb	lr, r9, #32
 80119d2:	468a      	mov	sl, r1
 80119d4:	2200      	movs	r2, #0
 80119d6:	6818      	ldr	r0, [r3, #0]
 80119d8:	fa00 f009 	lsl.w	r0, r0, r9
 80119dc:	4310      	orrs	r0, r2
 80119de:	f84a 0b04 	str.w	r0, [sl], #4
 80119e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80119e6:	459c      	cmp	ip, r3
 80119e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80119ec:	d8f3      	bhi.n	80119d6 <__lshift+0x6e>
 80119ee:	ebac 0304 	sub.w	r3, ip, r4
 80119f2:	3b15      	subs	r3, #21
 80119f4:	f023 0303 	bic.w	r3, r3, #3
 80119f8:	3304      	adds	r3, #4
 80119fa:	f104 0015 	add.w	r0, r4, #21
 80119fe:	4584      	cmp	ip, r0
 8011a00:	bf38      	it	cc
 8011a02:	2304      	movcc	r3, #4
 8011a04:	50ca      	str	r2, [r1, r3]
 8011a06:	b10a      	cbz	r2, 8011a0c <__lshift+0xa4>
 8011a08:	f108 0602 	add.w	r6, r8, #2
 8011a0c:	3e01      	subs	r6, #1
 8011a0e:	4638      	mov	r0, r7
 8011a10:	612e      	str	r6, [r5, #16]
 8011a12:	4621      	mov	r1, r4
 8011a14:	f7ff fd90 	bl	8011538 <_Bfree>
 8011a18:	4628      	mov	r0, r5
 8011a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a22:	3301      	adds	r3, #1
 8011a24:	e7c5      	b.n	80119b2 <__lshift+0x4a>
 8011a26:	3904      	subs	r1, #4
 8011a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a30:	459c      	cmp	ip, r3
 8011a32:	d8f9      	bhi.n	8011a28 <__lshift+0xc0>
 8011a34:	e7ea      	b.n	8011a0c <__lshift+0xa4>
 8011a36:	bf00      	nop
 8011a38:	080133fb 	.word	0x080133fb
 8011a3c:	0801346c 	.word	0x0801346c

08011a40 <__mcmp>:
 8011a40:	690a      	ldr	r2, [r1, #16]
 8011a42:	4603      	mov	r3, r0
 8011a44:	6900      	ldr	r0, [r0, #16]
 8011a46:	1a80      	subs	r0, r0, r2
 8011a48:	b530      	push	{r4, r5, lr}
 8011a4a:	d10e      	bne.n	8011a6a <__mcmp+0x2a>
 8011a4c:	3314      	adds	r3, #20
 8011a4e:	3114      	adds	r1, #20
 8011a50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011a54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011a58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011a5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011a60:	4295      	cmp	r5, r2
 8011a62:	d003      	beq.n	8011a6c <__mcmp+0x2c>
 8011a64:	d205      	bcs.n	8011a72 <__mcmp+0x32>
 8011a66:	f04f 30ff 	mov.w	r0, #4294967295
 8011a6a:	bd30      	pop	{r4, r5, pc}
 8011a6c:	42a3      	cmp	r3, r4
 8011a6e:	d3f3      	bcc.n	8011a58 <__mcmp+0x18>
 8011a70:	e7fb      	b.n	8011a6a <__mcmp+0x2a>
 8011a72:	2001      	movs	r0, #1
 8011a74:	e7f9      	b.n	8011a6a <__mcmp+0x2a>
	...

08011a78 <__mdiff>:
 8011a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a7c:	4689      	mov	r9, r1
 8011a7e:	4606      	mov	r6, r0
 8011a80:	4611      	mov	r1, r2
 8011a82:	4648      	mov	r0, r9
 8011a84:	4614      	mov	r4, r2
 8011a86:	f7ff ffdb 	bl	8011a40 <__mcmp>
 8011a8a:	1e05      	subs	r5, r0, #0
 8011a8c:	d112      	bne.n	8011ab4 <__mdiff+0x3c>
 8011a8e:	4629      	mov	r1, r5
 8011a90:	4630      	mov	r0, r6
 8011a92:	f7ff fd11 	bl	80114b8 <_Balloc>
 8011a96:	4602      	mov	r2, r0
 8011a98:	b928      	cbnz	r0, 8011aa6 <__mdiff+0x2e>
 8011a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8011b98 <__mdiff+0x120>)
 8011a9c:	f240 2137 	movw	r1, #567	@ 0x237
 8011aa0:	483e      	ldr	r0, [pc, #248]	@ (8011b9c <__mdiff+0x124>)
 8011aa2:	f000 ffed 	bl	8012a80 <__assert_func>
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011aac:	4610      	mov	r0, r2
 8011aae:	b003      	add	sp, #12
 8011ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ab4:	bfbc      	itt	lt
 8011ab6:	464b      	movlt	r3, r9
 8011ab8:	46a1      	movlt	r9, r4
 8011aba:	4630      	mov	r0, r6
 8011abc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011ac0:	bfba      	itte	lt
 8011ac2:	461c      	movlt	r4, r3
 8011ac4:	2501      	movlt	r5, #1
 8011ac6:	2500      	movge	r5, #0
 8011ac8:	f7ff fcf6 	bl	80114b8 <_Balloc>
 8011acc:	4602      	mov	r2, r0
 8011ace:	b918      	cbnz	r0, 8011ad8 <__mdiff+0x60>
 8011ad0:	4b31      	ldr	r3, [pc, #196]	@ (8011b98 <__mdiff+0x120>)
 8011ad2:	f240 2145 	movw	r1, #581	@ 0x245
 8011ad6:	e7e3      	b.n	8011aa0 <__mdiff+0x28>
 8011ad8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011adc:	6926      	ldr	r6, [r4, #16]
 8011ade:	60c5      	str	r5, [r0, #12]
 8011ae0:	f109 0310 	add.w	r3, r9, #16
 8011ae4:	f109 0514 	add.w	r5, r9, #20
 8011ae8:	f104 0e14 	add.w	lr, r4, #20
 8011aec:	f100 0b14 	add.w	fp, r0, #20
 8011af0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011af4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011af8:	9301      	str	r3, [sp, #4]
 8011afa:	46d9      	mov	r9, fp
 8011afc:	f04f 0c00 	mov.w	ip, #0
 8011b00:	9b01      	ldr	r3, [sp, #4]
 8011b02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011b06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011b0a:	9301      	str	r3, [sp, #4]
 8011b0c:	fa1f f38a 	uxth.w	r3, sl
 8011b10:	4619      	mov	r1, r3
 8011b12:	b283      	uxth	r3, r0
 8011b14:	1acb      	subs	r3, r1, r3
 8011b16:	0c00      	lsrs	r0, r0, #16
 8011b18:	4463      	add	r3, ip
 8011b1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011b1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011b28:	4576      	cmp	r6, lr
 8011b2a:	f849 3b04 	str.w	r3, [r9], #4
 8011b2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b32:	d8e5      	bhi.n	8011b00 <__mdiff+0x88>
 8011b34:	1b33      	subs	r3, r6, r4
 8011b36:	3b15      	subs	r3, #21
 8011b38:	f023 0303 	bic.w	r3, r3, #3
 8011b3c:	3415      	adds	r4, #21
 8011b3e:	3304      	adds	r3, #4
 8011b40:	42a6      	cmp	r6, r4
 8011b42:	bf38      	it	cc
 8011b44:	2304      	movcc	r3, #4
 8011b46:	441d      	add	r5, r3
 8011b48:	445b      	add	r3, fp
 8011b4a:	461e      	mov	r6, r3
 8011b4c:	462c      	mov	r4, r5
 8011b4e:	4544      	cmp	r4, r8
 8011b50:	d30e      	bcc.n	8011b70 <__mdiff+0xf8>
 8011b52:	f108 0103 	add.w	r1, r8, #3
 8011b56:	1b49      	subs	r1, r1, r5
 8011b58:	f021 0103 	bic.w	r1, r1, #3
 8011b5c:	3d03      	subs	r5, #3
 8011b5e:	45a8      	cmp	r8, r5
 8011b60:	bf38      	it	cc
 8011b62:	2100      	movcc	r1, #0
 8011b64:	440b      	add	r3, r1
 8011b66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b6a:	b191      	cbz	r1, 8011b92 <__mdiff+0x11a>
 8011b6c:	6117      	str	r7, [r2, #16]
 8011b6e:	e79d      	b.n	8011aac <__mdiff+0x34>
 8011b70:	f854 1b04 	ldr.w	r1, [r4], #4
 8011b74:	46e6      	mov	lr, ip
 8011b76:	0c08      	lsrs	r0, r1, #16
 8011b78:	fa1c fc81 	uxtah	ip, ip, r1
 8011b7c:	4471      	add	r1, lr
 8011b7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011b82:	b289      	uxth	r1, r1
 8011b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011b88:	f846 1b04 	str.w	r1, [r6], #4
 8011b8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b90:	e7dd      	b.n	8011b4e <__mdiff+0xd6>
 8011b92:	3f01      	subs	r7, #1
 8011b94:	e7e7      	b.n	8011b66 <__mdiff+0xee>
 8011b96:	bf00      	nop
 8011b98:	080133fb 	.word	0x080133fb
 8011b9c:	0801346c 	.word	0x0801346c

08011ba0 <__ulp>:
 8011ba0:	b082      	sub	sp, #8
 8011ba2:	ed8d 0b00 	vstr	d0, [sp]
 8011ba6:	9a01      	ldr	r2, [sp, #4]
 8011ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8011be8 <__ulp+0x48>)
 8011baa:	4013      	ands	r3, r2
 8011bac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	dc08      	bgt.n	8011bc6 <__ulp+0x26>
 8011bb4:	425b      	negs	r3, r3
 8011bb6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011bba:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011bbe:	da04      	bge.n	8011bca <__ulp+0x2a>
 8011bc0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011bc4:	4113      	asrs	r3, r2
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	e008      	b.n	8011bdc <__ulp+0x3c>
 8011bca:	f1a2 0314 	sub.w	r3, r2, #20
 8011bce:	2b1e      	cmp	r3, #30
 8011bd0:	bfda      	itte	le
 8011bd2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011bd6:	40da      	lsrle	r2, r3
 8011bd8:	2201      	movgt	r2, #1
 8011bda:	2300      	movs	r3, #0
 8011bdc:	4619      	mov	r1, r3
 8011bde:	4610      	mov	r0, r2
 8011be0:	ec41 0b10 	vmov	d0, r0, r1
 8011be4:	b002      	add	sp, #8
 8011be6:	4770      	bx	lr
 8011be8:	7ff00000 	.word	0x7ff00000

08011bec <__b2d>:
 8011bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bf0:	6906      	ldr	r6, [r0, #16]
 8011bf2:	f100 0814 	add.w	r8, r0, #20
 8011bf6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011bfa:	1f37      	subs	r7, r6, #4
 8011bfc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011c00:	4610      	mov	r0, r2
 8011c02:	f7ff fd4b 	bl	801169c <__hi0bits>
 8011c06:	f1c0 0320 	rsb	r3, r0, #32
 8011c0a:	280a      	cmp	r0, #10
 8011c0c:	600b      	str	r3, [r1, #0]
 8011c0e:	491b      	ldr	r1, [pc, #108]	@ (8011c7c <__b2d+0x90>)
 8011c10:	dc15      	bgt.n	8011c3e <__b2d+0x52>
 8011c12:	f1c0 0c0b 	rsb	ip, r0, #11
 8011c16:	fa22 f30c 	lsr.w	r3, r2, ip
 8011c1a:	45b8      	cmp	r8, r7
 8011c1c:	ea43 0501 	orr.w	r5, r3, r1
 8011c20:	bf34      	ite	cc
 8011c22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c26:	2300      	movcs	r3, #0
 8011c28:	3015      	adds	r0, #21
 8011c2a:	fa02 f000 	lsl.w	r0, r2, r0
 8011c2e:	fa23 f30c 	lsr.w	r3, r3, ip
 8011c32:	4303      	orrs	r3, r0
 8011c34:	461c      	mov	r4, r3
 8011c36:	ec45 4b10 	vmov	d0, r4, r5
 8011c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c3e:	45b8      	cmp	r8, r7
 8011c40:	bf3a      	itte	cc
 8011c42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c46:	f1a6 0708 	subcc.w	r7, r6, #8
 8011c4a:	2300      	movcs	r3, #0
 8011c4c:	380b      	subs	r0, #11
 8011c4e:	d012      	beq.n	8011c76 <__b2d+0x8a>
 8011c50:	f1c0 0120 	rsb	r1, r0, #32
 8011c54:	fa23 f401 	lsr.w	r4, r3, r1
 8011c58:	4082      	lsls	r2, r0
 8011c5a:	4322      	orrs	r2, r4
 8011c5c:	4547      	cmp	r7, r8
 8011c5e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011c62:	bf8c      	ite	hi
 8011c64:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011c68:	2200      	movls	r2, #0
 8011c6a:	4083      	lsls	r3, r0
 8011c6c:	40ca      	lsrs	r2, r1
 8011c6e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011c72:	4313      	orrs	r3, r2
 8011c74:	e7de      	b.n	8011c34 <__b2d+0x48>
 8011c76:	ea42 0501 	orr.w	r5, r2, r1
 8011c7a:	e7db      	b.n	8011c34 <__b2d+0x48>
 8011c7c:	3ff00000 	.word	0x3ff00000

08011c80 <__d2b>:
 8011c80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c84:	460f      	mov	r7, r1
 8011c86:	2101      	movs	r1, #1
 8011c88:	ec59 8b10 	vmov	r8, r9, d0
 8011c8c:	4616      	mov	r6, r2
 8011c8e:	f7ff fc13 	bl	80114b8 <_Balloc>
 8011c92:	4604      	mov	r4, r0
 8011c94:	b930      	cbnz	r0, 8011ca4 <__d2b+0x24>
 8011c96:	4602      	mov	r2, r0
 8011c98:	4b23      	ldr	r3, [pc, #140]	@ (8011d28 <__d2b+0xa8>)
 8011c9a:	4824      	ldr	r0, [pc, #144]	@ (8011d2c <__d2b+0xac>)
 8011c9c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011ca0:	f000 feee 	bl	8012a80 <__assert_func>
 8011ca4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011ca8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011cac:	b10d      	cbz	r5, 8011cb2 <__d2b+0x32>
 8011cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011cb2:	9301      	str	r3, [sp, #4]
 8011cb4:	f1b8 0300 	subs.w	r3, r8, #0
 8011cb8:	d023      	beq.n	8011d02 <__d2b+0x82>
 8011cba:	4668      	mov	r0, sp
 8011cbc:	9300      	str	r3, [sp, #0]
 8011cbe:	f7ff fd0c 	bl	80116da <__lo0bits>
 8011cc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011cc6:	b1d0      	cbz	r0, 8011cfe <__d2b+0x7e>
 8011cc8:	f1c0 0320 	rsb	r3, r0, #32
 8011ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8011cd0:	430b      	orrs	r3, r1
 8011cd2:	40c2      	lsrs	r2, r0
 8011cd4:	6163      	str	r3, [r4, #20]
 8011cd6:	9201      	str	r2, [sp, #4]
 8011cd8:	9b01      	ldr	r3, [sp, #4]
 8011cda:	61a3      	str	r3, [r4, #24]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	bf0c      	ite	eq
 8011ce0:	2201      	moveq	r2, #1
 8011ce2:	2202      	movne	r2, #2
 8011ce4:	6122      	str	r2, [r4, #16]
 8011ce6:	b1a5      	cbz	r5, 8011d12 <__d2b+0x92>
 8011ce8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011cec:	4405      	add	r5, r0
 8011cee:	603d      	str	r5, [r7, #0]
 8011cf0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011cf4:	6030      	str	r0, [r6, #0]
 8011cf6:	4620      	mov	r0, r4
 8011cf8:	b003      	add	sp, #12
 8011cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cfe:	6161      	str	r1, [r4, #20]
 8011d00:	e7ea      	b.n	8011cd8 <__d2b+0x58>
 8011d02:	a801      	add	r0, sp, #4
 8011d04:	f7ff fce9 	bl	80116da <__lo0bits>
 8011d08:	9b01      	ldr	r3, [sp, #4]
 8011d0a:	6163      	str	r3, [r4, #20]
 8011d0c:	3020      	adds	r0, #32
 8011d0e:	2201      	movs	r2, #1
 8011d10:	e7e8      	b.n	8011ce4 <__d2b+0x64>
 8011d12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011d1a:	6038      	str	r0, [r7, #0]
 8011d1c:	6918      	ldr	r0, [r3, #16]
 8011d1e:	f7ff fcbd 	bl	801169c <__hi0bits>
 8011d22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d26:	e7e5      	b.n	8011cf4 <__d2b+0x74>
 8011d28:	080133fb 	.word	0x080133fb
 8011d2c:	0801346c 	.word	0x0801346c

08011d30 <__ratio>:
 8011d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d34:	4688      	mov	r8, r1
 8011d36:	4669      	mov	r1, sp
 8011d38:	4681      	mov	r9, r0
 8011d3a:	f7ff ff57 	bl	8011bec <__b2d>
 8011d3e:	a901      	add	r1, sp, #4
 8011d40:	4640      	mov	r0, r8
 8011d42:	ec55 4b10 	vmov	r4, r5, d0
 8011d46:	f7ff ff51 	bl	8011bec <__b2d>
 8011d4a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011d4e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011d52:	1ad2      	subs	r2, r2, r3
 8011d54:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011d58:	1a5b      	subs	r3, r3, r1
 8011d5a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8011d5e:	ec57 6b10 	vmov	r6, r7, d0
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	bfd6      	itet	le
 8011d66:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d6a:	462a      	movgt	r2, r5
 8011d6c:	463a      	movle	r2, r7
 8011d6e:	46ab      	mov	fp, r5
 8011d70:	46a2      	mov	sl, r4
 8011d72:	bfce      	itee	gt
 8011d74:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8011d78:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8011d7c:	ee00 3a90 	vmovle	s1, r3
 8011d80:	ec4b ab17 	vmov	d7, sl, fp
 8011d84:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8011d88:	b003      	add	sp, #12
 8011d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d8e <__copybits>:
 8011d8e:	3901      	subs	r1, #1
 8011d90:	b570      	push	{r4, r5, r6, lr}
 8011d92:	1149      	asrs	r1, r1, #5
 8011d94:	6914      	ldr	r4, [r2, #16]
 8011d96:	3101      	adds	r1, #1
 8011d98:	f102 0314 	add.w	r3, r2, #20
 8011d9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011da0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011da4:	1f05      	subs	r5, r0, #4
 8011da6:	42a3      	cmp	r3, r4
 8011da8:	d30c      	bcc.n	8011dc4 <__copybits+0x36>
 8011daa:	1aa3      	subs	r3, r4, r2
 8011dac:	3b11      	subs	r3, #17
 8011dae:	f023 0303 	bic.w	r3, r3, #3
 8011db2:	3211      	adds	r2, #17
 8011db4:	42a2      	cmp	r2, r4
 8011db6:	bf88      	it	hi
 8011db8:	2300      	movhi	r3, #0
 8011dba:	4418      	add	r0, r3
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	4288      	cmp	r0, r1
 8011dc0:	d305      	bcc.n	8011dce <__copybits+0x40>
 8011dc2:	bd70      	pop	{r4, r5, r6, pc}
 8011dc4:	f853 6b04 	ldr.w	r6, [r3], #4
 8011dc8:	f845 6f04 	str.w	r6, [r5, #4]!
 8011dcc:	e7eb      	b.n	8011da6 <__copybits+0x18>
 8011dce:	f840 3b04 	str.w	r3, [r0], #4
 8011dd2:	e7f4      	b.n	8011dbe <__copybits+0x30>

08011dd4 <__any_on>:
 8011dd4:	f100 0214 	add.w	r2, r0, #20
 8011dd8:	6900      	ldr	r0, [r0, #16]
 8011dda:	114b      	asrs	r3, r1, #5
 8011ddc:	4298      	cmp	r0, r3
 8011dde:	b510      	push	{r4, lr}
 8011de0:	db11      	blt.n	8011e06 <__any_on+0x32>
 8011de2:	dd0a      	ble.n	8011dfa <__any_on+0x26>
 8011de4:	f011 011f 	ands.w	r1, r1, #31
 8011de8:	d007      	beq.n	8011dfa <__any_on+0x26>
 8011dea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011dee:	fa24 f001 	lsr.w	r0, r4, r1
 8011df2:	fa00 f101 	lsl.w	r1, r0, r1
 8011df6:	428c      	cmp	r4, r1
 8011df8:	d10b      	bne.n	8011e12 <__any_on+0x3e>
 8011dfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011dfe:	4293      	cmp	r3, r2
 8011e00:	d803      	bhi.n	8011e0a <__any_on+0x36>
 8011e02:	2000      	movs	r0, #0
 8011e04:	bd10      	pop	{r4, pc}
 8011e06:	4603      	mov	r3, r0
 8011e08:	e7f7      	b.n	8011dfa <__any_on+0x26>
 8011e0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011e0e:	2900      	cmp	r1, #0
 8011e10:	d0f5      	beq.n	8011dfe <__any_on+0x2a>
 8011e12:	2001      	movs	r0, #1
 8011e14:	e7f6      	b.n	8011e04 <__any_on+0x30>
	...

08011e18 <_strtol_l.constprop.0>:
 8011e18:	2b24      	cmp	r3, #36	@ 0x24
 8011e1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e1e:	4686      	mov	lr, r0
 8011e20:	4690      	mov	r8, r2
 8011e22:	d801      	bhi.n	8011e28 <_strtol_l.constprop.0+0x10>
 8011e24:	2b01      	cmp	r3, #1
 8011e26:	d106      	bne.n	8011e36 <_strtol_l.constprop.0+0x1e>
 8011e28:	f7fe f984 	bl	8010134 <__errno>
 8011e2c:	2316      	movs	r3, #22
 8011e2e:	6003      	str	r3, [r0, #0]
 8011e30:	2000      	movs	r0, #0
 8011e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e36:	4834      	ldr	r0, [pc, #208]	@ (8011f08 <_strtol_l.constprop.0+0xf0>)
 8011e38:	460d      	mov	r5, r1
 8011e3a:	462a      	mov	r2, r5
 8011e3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e40:	5d06      	ldrb	r6, [r0, r4]
 8011e42:	f016 0608 	ands.w	r6, r6, #8
 8011e46:	d1f8      	bne.n	8011e3a <_strtol_l.constprop.0+0x22>
 8011e48:	2c2d      	cmp	r4, #45	@ 0x2d
 8011e4a:	d12d      	bne.n	8011ea8 <_strtol_l.constprop.0+0x90>
 8011e4c:	782c      	ldrb	r4, [r5, #0]
 8011e4e:	2601      	movs	r6, #1
 8011e50:	1c95      	adds	r5, r2, #2
 8011e52:	f033 0210 	bics.w	r2, r3, #16
 8011e56:	d109      	bne.n	8011e6c <_strtol_l.constprop.0+0x54>
 8011e58:	2c30      	cmp	r4, #48	@ 0x30
 8011e5a:	d12a      	bne.n	8011eb2 <_strtol_l.constprop.0+0x9a>
 8011e5c:	782a      	ldrb	r2, [r5, #0]
 8011e5e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011e62:	2a58      	cmp	r2, #88	@ 0x58
 8011e64:	d125      	bne.n	8011eb2 <_strtol_l.constprop.0+0x9a>
 8011e66:	786c      	ldrb	r4, [r5, #1]
 8011e68:	2310      	movs	r3, #16
 8011e6a:	3502      	adds	r5, #2
 8011e6c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011e70:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011e74:	2200      	movs	r2, #0
 8011e76:	fbbc f9f3 	udiv	r9, ip, r3
 8011e7a:	4610      	mov	r0, r2
 8011e7c:	fb03 ca19 	mls	sl, r3, r9, ip
 8011e80:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011e84:	2f09      	cmp	r7, #9
 8011e86:	d81b      	bhi.n	8011ec0 <_strtol_l.constprop.0+0xa8>
 8011e88:	463c      	mov	r4, r7
 8011e8a:	42a3      	cmp	r3, r4
 8011e8c:	dd27      	ble.n	8011ede <_strtol_l.constprop.0+0xc6>
 8011e8e:	1c57      	adds	r7, r2, #1
 8011e90:	d007      	beq.n	8011ea2 <_strtol_l.constprop.0+0x8a>
 8011e92:	4581      	cmp	r9, r0
 8011e94:	d320      	bcc.n	8011ed8 <_strtol_l.constprop.0+0xc0>
 8011e96:	d101      	bne.n	8011e9c <_strtol_l.constprop.0+0x84>
 8011e98:	45a2      	cmp	sl, r4
 8011e9a:	db1d      	blt.n	8011ed8 <_strtol_l.constprop.0+0xc0>
 8011e9c:	fb00 4003 	mla	r0, r0, r3, r4
 8011ea0:	2201      	movs	r2, #1
 8011ea2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ea6:	e7eb      	b.n	8011e80 <_strtol_l.constprop.0+0x68>
 8011ea8:	2c2b      	cmp	r4, #43	@ 0x2b
 8011eaa:	bf04      	itt	eq
 8011eac:	782c      	ldrbeq	r4, [r5, #0]
 8011eae:	1c95      	addeq	r5, r2, #2
 8011eb0:	e7cf      	b.n	8011e52 <_strtol_l.constprop.0+0x3a>
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d1da      	bne.n	8011e6c <_strtol_l.constprop.0+0x54>
 8011eb6:	2c30      	cmp	r4, #48	@ 0x30
 8011eb8:	bf0c      	ite	eq
 8011eba:	2308      	moveq	r3, #8
 8011ebc:	230a      	movne	r3, #10
 8011ebe:	e7d5      	b.n	8011e6c <_strtol_l.constprop.0+0x54>
 8011ec0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011ec4:	2f19      	cmp	r7, #25
 8011ec6:	d801      	bhi.n	8011ecc <_strtol_l.constprop.0+0xb4>
 8011ec8:	3c37      	subs	r4, #55	@ 0x37
 8011eca:	e7de      	b.n	8011e8a <_strtol_l.constprop.0+0x72>
 8011ecc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011ed0:	2f19      	cmp	r7, #25
 8011ed2:	d804      	bhi.n	8011ede <_strtol_l.constprop.0+0xc6>
 8011ed4:	3c57      	subs	r4, #87	@ 0x57
 8011ed6:	e7d8      	b.n	8011e8a <_strtol_l.constprop.0+0x72>
 8011ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8011edc:	e7e1      	b.n	8011ea2 <_strtol_l.constprop.0+0x8a>
 8011ede:	1c53      	adds	r3, r2, #1
 8011ee0:	d108      	bne.n	8011ef4 <_strtol_l.constprop.0+0xdc>
 8011ee2:	2322      	movs	r3, #34	@ 0x22
 8011ee4:	f8ce 3000 	str.w	r3, [lr]
 8011ee8:	4660      	mov	r0, ip
 8011eea:	f1b8 0f00 	cmp.w	r8, #0
 8011eee:	d0a0      	beq.n	8011e32 <_strtol_l.constprop.0+0x1a>
 8011ef0:	1e69      	subs	r1, r5, #1
 8011ef2:	e006      	b.n	8011f02 <_strtol_l.constprop.0+0xea>
 8011ef4:	b106      	cbz	r6, 8011ef8 <_strtol_l.constprop.0+0xe0>
 8011ef6:	4240      	negs	r0, r0
 8011ef8:	f1b8 0f00 	cmp.w	r8, #0
 8011efc:	d099      	beq.n	8011e32 <_strtol_l.constprop.0+0x1a>
 8011efe:	2a00      	cmp	r2, #0
 8011f00:	d1f6      	bne.n	8011ef0 <_strtol_l.constprop.0+0xd8>
 8011f02:	f8c8 1000 	str.w	r1, [r8]
 8011f06:	e794      	b.n	8011e32 <_strtol_l.constprop.0+0x1a>
 8011f08:	080135c9 	.word	0x080135c9

08011f0c <_strtol_r>:
 8011f0c:	f7ff bf84 	b.w	8011e18 <_strtol_l.constprop.0>

08011f10 <__ascii_wctomb>:
 8011f10:	4603      	mov	r3, r0
 8011f12:	4608      	mov	r0, r1
 8011f14:	b141      	cbz	r1, 8011f28 <__ascii_wctomb+0x18>
 8011f16:	2aff      	cmp	r2, #255	@ 0xff
 8011f18:	d904      	bls.n	8011f24 <__ascii_wctomb+0x14>
 8011f1a:	228a      	movs	r2, #138	@ 0x8a
 8011f1c:	601a      	str	r2, [r3, #0]
 8011f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8011f22:	4770      	bx	lr
 8011f24:	700a      	strb	r2, [r1, #0]
 8011f26:	2001      	movs	r0, #1
 8011f28:	4770      	bx	lr

08011f2a <__ssputs_r>:
 8011f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f2e:	688e      	ldr	r6, [r1, #8]
 8011f30:	461f      	mov	r7, r3
 8011f32:	42be      	cmp	r6, r7
 8011f34:	680b      	ldr	r3, [r1, #0]
 8011f36:	4682      	mov	sl, r0
 8011f38:	460c      	mov	r4, r1
 8011f3a:	4690      	mov	r8, r2
 8011f3c:	d82d      	bhi.n	8011f9a <__ssputs_r+0x70>
 8011f3e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011f42:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011f46:	d026      	beq.n	8011f96 <__ssputs_r+0x6c>
 8011f48:	6965      	ldr	r5, [r4, #20]
 8011f4a:	6909      	ldr	r1, [r1, #16]
 8011f4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f50:	eba3 0901 	sub.w	r9, r3, r1
 8011f54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f58:	1c7b      	adds	r3, r7, #1
 8011f5a:	444b      	add	r3, r9
 8011f5c:	106d      	asrs	r5, r5, #1
 8011f5e:	429d      	cmp	r5, r3
 8011f60:	bf38      	it	cc
 8011f62:	461d      	movcc	r5, r3
 8011f64:	0553      	lsls	r3, r2, #21
 8011f66:	d527      	bpl.n	8011fb8 <__ssputs_r+0x8e>
 8011f68:	4629      	mov	r1, r5
 8011f6a:	f7fc fa89 	bl	800e480 <_malloc_r>
 8011f6e:	4606      	mov	r6, r0
 8011f70:	b360      	cbz	r0, 8011fcc <__ssputs_r+0xa2>
 8011f72:	6921      	ldr	r1, [r4, #16]
 8011f74:	464a      	mov	r2, r9
 8011f76:	f7fe f90a 	bl	801018e <memcpy>
 8011f7a:	89a3      	ldrh	r3, [r4, #12]
 8011f7c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f84:	81a3      	strh	r3, [r4, #12]
 8011f86:	6126      	str	r6, [r4, #16]
 8011f88:	6165      	str	r5, [r4, #20]
 8011f8a:	444e      	add	r6, r9
 8011f8c:	eba5 0509 	sub.w	r5, r5, r9
 8011f90:	6026      	str	r6, [r4, #0]
 8011f92:	60a5      	str	r5, [r4, #8]
 8011f94:	463e      	mov	r6, r7
 8011f96:	42be      	cmp	r6, r7
 8011f98:	d900      	bls.n	8011f9c <__ssputs_r+0x72>
 8011f9a:	463e      	mov	r6, r7
 8011f9c:	6820      	ldr	r0, [r4, #0]
 8011f9e:	4632      	mov	r2, r6
 8011fa0:	4641      	mov	r1, r8
 8011fa2:	f000 fd52 	bl	8012a4a <memmove>
 8011fa6:	68a3      	ldr	r3, [r4, #8]
 8011fa8:	1b9b      	subs	r3, r3, r6
 8011faa:	60a3      	str	r3, [r4, #8]
 8011fac:	6823      	ldr	r3, [r4, #0]
 8011fae:	4433      	add	r3, r6
 8011fb0:	6023      	str	r3, [r4, #0]
 8011fb2:	2000      	movs	r0, #0
 8011fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fb8:	462a      	mov	r2, r5
 8011fba:	f000 fd93 	bl	8012ae4 <_realloc_r>
 8011fbe:	4606      	mov	r6, r0
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	d1e0      	bne.n	8011f86 <__ssputs_r+0x5c>
 8011fc4:	6921      	ldr	r1, [r4, #16]
 8011fc6:	4650      	mov	r0, sl
 8011fc8:	f7fe fee0 	bl	8010d8c <_free_r>
 8011fcc:	230c      	movs	r3, #12
 8011fce:	f8ca 3000 	str.w	r3, [sl]
 8011fd2:	89a3      	ldrh	r3, [r4, #12]
 8011fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fd8:	81a3      	strh	r3, [r4, #12]
 8011fda:	f04f 30ff 	mov.w	r0, #4294967295
 8011fde:	e7e9      	b.n	8011fb4 <__ssputs_r+0x8a>

08011fe0 <_svfiprintf_r>:
 8011fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fe4:	4698      	mov	r8, r3
 8011fe6:	898b      	ldrh	r3, [r1, #12]
 8011fe8:	061b      	lsls	r3, r3, #24
 8011fea:	b09d      	sub	sp, #116	@ 0x74
 8011fec:	4607      	mov	r7, r0
 8011fee:	460d      	mov	r5, r1
 8011ff0:	4614      	mov	r4, r2
 8011ff2:	d510      	bpl.n	8012016 <_svfiprintf_r+0x36>
 8011ff4:	690b      	ldr	r3, [r1, #16]
 8011ff6:	b973      	cbnz	r3, 8012016 <_svfiprintf_r+0x36>
 8011ff8:	2140      	movs	r1, #64	@ 0x40
 8011ffa:	f7fc fa41 	bl	800e480 <_malloc_r>
 8011ffe:	6028      	str	r0, [r5, #0]
 8012000:	6128      	str	r0, [r5, #16]
 8012002:	b930      	cbnz	r0, 8012012 <_svfiprintf_r+0x32>
 8012004:	230c      	movs	r3, #12
 8012006:	603b      	str	r3, [r7, #0]
 8012008:	f04f 30ff 	mov.w	r0, #4294967295
 801200c:	b01d      	add	sp, #116	@ 0x74
 801200e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012012:	2340      	movs	r3, #64	@ 0x40
 8012014:	616b      	str	r3, [r5, #20]
 8012016:	2300      	movs	r3, #0
 8012018:	9309      	str	r3, [sp, #36]	@ 0x24
 801201a:	2320      	movs	r3, #32
 801201c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012020:	f8cd 800c 	str.w	r8, [sp, #12]
 8012024:	2330      	movs	r3, #48	@ 0x30
 8012026:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80121c4 <_svfiprintf_r+0x1e4>
 801202a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801202e:	f04f 0901 	mov.w	r9, #1
 8012032:	4623      	mov	r3, r4
 8012034:	469a      	mov	sl, r3
 8012036:	f813 2b01 	ldrb.w	r2, [r3], #1
 801203a:	b10a      	cbz	r2, 8012040 <_svfiprintf_r+0x60>
 801203c:	2a25      	cmp	r2, #37	@ 0x25
 801203e:	d1f9      	bne.n	8012034 <_svfiprintf_r+0x54>
 8012040:	ebba 0b04 	subs.w	fp, sl, r4
 8012044:	d00b      	beq.n	801205e <_svfiprintf_r+0x7e>
 8012046:	465b      	mov	r3, fp
 8012048:	4622      	mov	r2, r4
 801204a:	4629      	mov	r1, r5
 801204c:	4638      	mov	r0, r7
 801204e:	f7ff ff6c 	bl	8011f2a <__ssputs_r>
 8012052:	3001      	adds	r0, #1
 8012054:	f000 80a7 	beq.w	80121a6 <_svfiprintf_r+0x1c6>
 8012058:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801205a:	445a      	add	r2, fp
 801205c:	9209      	str	r2, [sp, #36]	@ 0x24
 801205e:	f89a 3000 	ldrb.w	r3, [sl]
 8012062:	2b00      	cmp	r3, #0
 8012064:	f000 809f 	beq.w	80121a6 <_svfiprintf_r+0x1c6>
 8012068:	2300      	movs	r3, #0
 801206a:	f04f 32ff 	mov.w	r2, #4294967295
 801206e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012072:	f10a 0a01 	add.w	sl, sl, #1
 8012076:	9304      	str	r3, [sp, #16]
 8012078:	9307      	str	r3, [sp, #28]
 801207a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801207e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012080:	4654      	mov	r4, sl
 8012082:	2205      	movs	r2, #5
 8012084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012088:	484e      	ldr	r0, [pc, #312]	@ (80121c4 <_svfiprintf_r+0x1e4>)
 801208a:	f7ee f941 	bl	8000310 <memchr>
 801208e:	9a04      	ldr	r2, [sp, #16]
 8012090:	b9d8      	cbnz	r0, 80120ca <_svfiprintf_r+0xea>
 8012092:	06d0      	lsls	r0, r2, #27
 8012094:	bf44      	itt	mi
 8012096:	2320      	movmi	r3, #32
 8012098:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801209c:	0711      	lsls	r1, r2, #28
 801209e:	bf44      	itt	mi
 80120a0:	232b      	movmi	r3, #43	@ 0x2b
 80120a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80120a6:	f89a 3000 	ldrb.w	r3, [sl]
 80120aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80120ac:	d015      	beq.n	80120da <_svfiprintf_r+0xfa>
 80120ae:	9a07      	ldr	r2, [sp, #28]
 80120b0:	4654      	mov	r4, sl
 80120b2:	2000      	movs	r0, #0
 80120b4:	f04f 0c0a 	mov.w	ip, #10
 80120b8:	4621      	mov	r1, r4
 80120ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120be:	3b30      	subs	r3, #48	@ 0x30
 80120c0:	2b09      	cmp	r3, #9
 80120c2:	d94b      	bls.n	801215c <_svfiprintf_r+0x17c>
 80120c4:	b1b0      	cbz	r0, 80120f4 <_svfiprintf_r+0x114>
 80120c6:	9207      	str	r2, [sp, #28]
 80120c8:	e014      	b.n	80120f4 <_svfiprintf_r+0x114>
 80120ca:	eba0 0308 	sub.w	r3, r0, r8
 80120ce:	fa09 f303 	lsl.w	r3, r9, r3
 80120d2:	4313      	orrs	r3, r2
 80120d4:	9304      	str	r3, [sp, #16]
 80120d6:	46a2      	mov	sl, r4
 80120d8:	e7d2      	b.n	8012080 <_svfiprintf_r+0xa0>
 80120da:	9b03      	ldr	r3, [sp, #12]
 80120dc:	1d19      	adds	r1, r3, #4
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	9103      	str	r1, [sp, #12]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	bfbb      	ittet	lt
 80120e6:	425b      	neglt	r3, r3
 80120e8:	f042 0202 	orrlt.w	r2, r2, #2
 80120ec:	9307      	strge	r3, [sp, #28]
 80120ee:	9307      	strlt	r3, [sp, #28]
 80120f0:	bfb8      	it	lt
 80120f2:	9204      	strlt	r2, [sp, #16]
 80120f4:	7823      	ldrb	r3, [r4, #0]
 80120f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80120f8:	d10a      	bne.n	8012110 <_svfiprintf_r+0x130>
 80120fa:	7863      	ldrb	r3, [r4, #1]
 80120fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80120fe:	d132      	bne.n	8012166 <_svfiprintf_r+0x186>
 8012100:	9b03      	ldr	r3, [sp, #12]
 8012102:	1d1a      	adds	r2, r3, #4
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	9203      	str	r2, [sp, #12]
 8012108:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801210c:	3402      	adds	r4, #2
 801210e:	9305      	str	r3, [sp, #20]
 8012110:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80121d4 <_svfiprintf_r+0x1f4>
 8012114:	7821      	ldrb	r1, [r4, #0]
 8012116:	2203      	movs	r2, #3
 8012118:	4650      	mov	r0, sl
 801211a:	f7ee f8f9 	bl	8000310 <memchr>
 801211e:	b138      	cbz	r0, 8012130 <_svfiprintf_r+0x150>
 8012120:	9b04      	ldr	r3, [sp, #16]
 8012122:	eba0 000a 	sub.w	r0, r0, sl
 8012126:	2240      	movs	r2, #64	@ 0x40
 8012128:	4082      	lsls	r2, r0
 801212a:	4313      	orrs	r3, r2
 801212c:	3401      	adds	r4, #1
 801212e:	9304      	str	r3, [sp, #16]
 8012130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012134:	4824      	ldr	r0, [pc, #144]	@ (80121c8 <_svfiprintf_r+0x1e8>)
 8012136:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801213a:	2206      	movs	r2, #6
 801213c:	f7ee f8e8 	bl	8000310 <memchr>
 8012140:	2800      	cmp	r0, #0
 8012142:	d036      	beq.n	80121b2 <_svfiprintf_r+0x1d2>
 8012144:	4b21      	ldr	r3, [pc, #132]	@ (80121cc <_svfiprintf_r+0x1ec>)
 8012146:	bb1b      	cbnz	r3, 8012190 <_svfiprintf_r+0x1b0>
 8012148:	9b03      	ldr	r3, [sp, #12]
 801214a:	3307      	adds	r3, #7
 801214c:	f023 0307 	bic.w	r3, r3, #7
 8012150:	3308      	adds	r3, #8
 8012152:	9303      	str	r3, [sp, #12]
 8012154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012156:	4433      	add	r3, r6
 8012158:	9309      	str	r3, [sp, #36]	@ 0x24
 801215a:	e76a      	b.n	8012032 <_svfiprintf_r+0x52>
 801215c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012160:	460c      	mov	r4, r1
 8012162:	2001      	movs	r0, #1
 8012164:	e7a8      	b.n	80120b8 <_svfiprintf_r+0xd8>
 8012166:	2300      	movs	r3, #0
 8012168:	3401      	adds	r4, #1
 801216a:	9305      	str	r3, [sp, #20]
 801216c:	4619      	mov	r1, r3
 801216e:	f04f 0c0a 	mov.w	ip, #10
 8012172:	4620      	mov	r0, r4
 8012174:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012178:	3a30      	subs	r2, #48	@ 0x30
 801217a:	2a09      	cmp	r2, #9
 801217c:	d903      	bls.n	8012186 <_svfiprintf_r+0x1a6>
 801217e:	2b00      	cmp	r3, #0
 8012180:	d0c6      	beq.n	8012110 <_svfiprintf_r+0x130>
 8012182:	9105      	str	r1, [sp, #20]
 8012184:	e7c4      	b.n	8012110 <_svfiprintf_r+0x130>
 8012186:	fb0c 2101 	mla	r1, ip, r1, r2
 801218a:	4604      	mov	r4, r0
 801218c:	2301      	movs	r3, #1
 801218e:	e7f0      	b.n	8012172 <_svfiprintf_r+0x192>
 8012190:	ab03      	add	r3, sp, #12
 8012192:	9300      	str	r3, [sp, #0]
 8012194:	462a      	mov	r2, r5
 8012196:	4b0e      	ldr	r3, [pc, #56]	@ (80121d0 <_svfiprintf_r+0x1f0>)
 8012198:	a904      	add	r1, sp, #16
 801219a:	4638      	mov	r0, r7
 801219c:	f7fd f844 	bl	800f228 <_printf_float>
 80121a0:	1c42      	adds	r2, r0, #1
 80121a2:	4606      	mov	r6, r0
 80121a4:	d1d6      	bne.n	8012154 <_svfiprintf_r+0x174>
 80121a6:	89ab      	ldrh	r3, [r5, #12]
 80121a8:	065b      	lsls	r3, r3, #25
 80121aa:	f53f af2d 	bmi.w	8012008 <_svfiprintf_r+0x28>
 80121ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80121b0:	e72c      	b.n	801200c <_svfiprintf_r+0x2c>
 80121b2:	ab03      	add	r3, sp, #12
 80121b4:	9300      	str	r3, [sp, #0]
 80121b6:	462a      	mov	r2, r5
 80121b8:	4b05      	ldr	r3, [pc, #20]	@ (80121d0 <_svfiprintf_r+0x1f0>)
 80121ba:	a904      	add	r1, sp, #16
 80121bc:	4638      	mov	r0, r7
 80121be:	f7fd fabb 	bl	800f738 <_printf_i>
 80121c2:	e7ed      	b.n	80121a0 <_svfiprintf_r+0x1c0>
 80121c4:	080136c9 	.word	0x080136c9
 80121c8:	080136d3 	.word	0x080136d3
 80121cc:	0800f229 	.word	0x0800f229
 80121d0:	08011f2b 	.word	0x08011f2b
 80121d4:	080136cf 	.word	0x080136cf

080121d8 <_sungetc_r>:
 80121d8:	b538      	push	{r3, r4, r5, lr}
 80121da:	1c4b      	adds	r3, r1, #1
 80121dc:	4614      	mov	r4, r2
 80121de:	d103      	bne.n	80121e8 <_sungetc_r+0x10>
 80121e0:	f04f 35ff 	mov.w	r5, #4294967295
 80121e4:	4628      	mov	r0, r5
 80121e6:	bd38      	pop	{r3, r4, r5, pc}
 80121e8:	8993      	ldrh	r3, [r2, #12]
 80121ea:	f023 0320 	bic.w	r3, r3, #32
 80121ee:	8193      	strh	r3, [r2, #12]
 80121f0:	6853      	ldr	r3, [r2, #4]
 80121f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80121f4:	b2cd      	uxtb	r5, r1
 80121f6:	b18a      	cbz	r2, 801221c <_sungetc_r+0x44>
 80121f8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80121fa:	429a      	cmp	r2, r3
 80121fc:	dd08      	ble.n	8012210 <_sungetc_r+0x38>
 80121fe:	6823      	ldr	r3, [r4, #0]
 8012200:	1e5a      	subs	r2, r3, #1
 8012202:	6022      	str	r2, [r4, #0]
 8012204:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012208:	6863      	ldr	r3, [r4, #4]
 801220a:	3301      	adds	r3, #1
 801220c:	6063      	str	r3, [r4, #4]
 801220e:	e7e9      	b.n	80121e4 <_sungetc_r+0xc>
 8012210:	4621      	mov	r1, r4
 8012212:	f000 fbe0 	bl	80129d6 <__submore>
 8012216:	2800      	cmp	r0, #0
 8012218:	d0f1      	beq.n	80121fe <_sungetc_r+0x26>
 801221a:	e7e1      	b.n	80121e0 <_sungetc_r+0x8>
 801221c:	6921      	ldr	r1, [r4, #16]
 801221e:	6822      	ldr	r2, [r4, #0]
 8012220:	b141      	cbz	r1, 8012234 <_sungetc_r+0x5c>
 8012222:	4291      	cmp	r1, r2
 8012224:	d206      	bcs.n	8012234 <_sungetc_r+0x5c>
 8012226:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801222a:	42a9      	cmp	r1, r5
 801222c:	d102      	bne.n	8012234 <_sungetc_r+0x5c>
 801222e:	3a01      	subs	r2, #1
 8012230:	6022      	str	r2, [r4, #0]
 8012232:	e7ea      	b.n	801220a <_sungetc_r+0x32>
 8012234:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8012238:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801223c:	6363      	str	r3, [r4, #52]	@ 0x34
 801223e:	2303      	movs	r3, #3
 8012240:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012242:	4623      	mov	r3, r4
 8012244:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012248:	6023      	str	r3, [r4, #0]
 801224a:	2301      	movs	r3, #1
 801224c:	e7de      	b.n	801220c <_sungetc_r+0x34>

0801224e <__ssrefill_r>:
 801224e:	b510      	push	{r4, lr}
 8012250:	460c      	mov	r4, r1
 8012252:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012254:	b169      	cbz	r1, 8012272 <__ssrefill_r+0x24>
 8012256:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801225a:	4299      	cmp	r1, r3
 801225c:	d001      	beq.n	8012262 <__ssrefill_r+0x14>
 801225e:	f7fe fd95 	bl	8010d8c <_free_r>
 8012262:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012264:	6063      	str	r3, [r4, #4]
 8012266:	2000      	movs	r0, #0
 8012268:	6360      	str	r0, [r4, #52]	@ 0x34
 801226a:	b113      	cbz	r3, 8012272 <__ssrefill_r+0x24>
 801226c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801226e:	6023      	str	r3, [r4, #0]
 8012270:	bd10      	pop	{r4, pc}
 8012272:	6923      	ldr	r3, [r4, #16]
 8012274:	6023      	str	r3, [r4, #0]
 8012276:	2300      	movs	r3, #0
 8012278:	6063      	str	r3, [r4, #4]
 801227a:	89a3      	ldrh	r3, [r4, #12]
 801227c:	f043 0320 	orr.w	r3, r3, #32
 8012280:	81a3      	strh	r3, [r4, #12]
 8012282:	f04f 30ff 	mov.w	r0, #4294967295
 8012286:	e7f3      	b.n	8012270 <__ssrefill_r+0x22>

08012288 <__ssvfiscanf_r>:
 8012288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801228c:	460c      	mov	r4, r1
 801228e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012292:	2100      	movs	r1, #0
 8012294:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012298:	49a5      	ldr	r1, [pc, #660]	@ (8012530 <__ssvfiscanf_r+0x2a8>)
 801229a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801229c:	f10d 0804 	add.w	r8, sp, #4
 80122a0:	49a4      	ldr	r1, [pc, #656]	@ (8012534 <__ssvfiscanf_r+0x2ac>)
 80122a2:	4fa5      	ldr	r7, [pc, #660]	@ (8012538 <__ssvfiscanf_r+0x2b0>)
 80122a4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80122a8:	4606      	mov	r6, r0
 80122aa:	91a1      	str	r1, [sp, #644]	@ 0x284
 80122ac:	9300      	str	r3, [sp, #0]
 80122ae:	7813      	ldrb	r3, [r2, #0]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	f000 8158 	beq.w	8012566 <__ssvfiscanf_r+0x2de>
 80122b6:	5cf9      	ldrb	r1, [r7, r3]
 80122b8:	f011 0108 	ands.w	r1, r1, #8
 80122bc:	f102 0501 	add.w	r5, r2, #1
 80122c0:	d019      	beq.n	80122f6 <__ssvfiscanf_r+0x6e>
 80122c2:	6863      	ldr	r3, [r4, #4]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	dd0f      	ble.n	80122e8 <__ssvfiscanf_r+0x60>
 80122c8:	6823      	ldr	r3, [r4, #0]
 80122ca:	781a      	ldrb	r2, [r3, #0]
 80122cc:	5cba      	ldrb	r2, [r7, r2]
 80122ce:	0712      	lsls	r2, r2, #28
 80122d0:	d401      	bmi.n	80122d6 <__ssvfiscanf_r+0x4e>
 80122d2:	462a      	mov	r2, r5
 80122d4:	e7eb      	b.n	80122ae <__ssvfiscanf_r+0x26>
 80122d6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80122d8:	3201      	adds	r2, #1
 80122da:	9245      	str	r2, [sp, #276]	@ 0x114
 80122dc:	6862      	ldr	r2, [r4, #4]
 80122de:	3301      	adds	r3, #1
 80122e0:	3a01      	subs	r2, #1
 80122e2:	6062      	str	r2, [r4, #4]
 80122e4:	6023      	str	r3, [r4, #0]
 80122e6:	e7ec      	b.n	80122c2 <__ssvfiscanf_r+0x3a>
 80122e8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80122ea:	4621      	mov	r1, r4
 80122ec:	4630      	mov	r0, r6
 80122ee:	4798      	blx	r3
 80122f0:	2800      	cmp	r0, #0
 80122f2:	d0e9      	beq.n	80122c8 <__ssvfiscanf_r+0x40>
 80122f4:	e7ed      	b.n	80122d2 <__ssvfiscanf_r+0x4a>
 80122f6:	2b25      	cmp	r3, #37	@ 0x25
 80122f8:	d012      	beq.n	8012320 <__ssvfiscanf_r+0x98>
 80122fa:	4699      	mov	r9, r3
 80122fc:	6863      	ldr	r3, [r4, #4]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	f340 8093 	ble.w	801242a <__ssvfiscanf_r+0x1a2>
 8012304:	6822      	ldr	r2, [r4, #0]
 8012306:	7813      	ldrb	r3, [r2, #0]
 8012308:	454b      	cmp	r3, r9
 801230a:	f040 812c 	bne.w	8012566 <__ssvfiscanf_r+0x2de>
 801230e:	6863      	ldr	r3, [r4, #4]
 8012310:	3b01      	subs	r3, #1
 8012312:	6063      	str	r3, [r4, #4]
 8012314:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8012316:	3201      	adds	r2, #1
 8012318:	3301      	adds	r3, #1
 801231a:	6022      	str	r2, [r4, #0]
 801231c:	9345      	str	r3, [sp, #276]	@ 0x114
 801231e:	e7d8      	b.n	80122d2 <__ssvfiscanf_r+0x4a>
 8012320:	9141      	str	r1, [sp, #260]	@ 0x104
 8012322:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012324:	7853      	ldrb	r3, [r2, #1]
 8012326:	2b2a      	cmp	r3, #42	@ 0x2a
 8012328:	bf02      	ittt	eq
 801232a:	2310      	moveq	r3, #16
 801232c:	1c95      	addeq	r5, r2, #2
 801232e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8012330:	220a      	movs	r2, #10
 8012332:	46a9      	mov	r9, r5
 8012334:	f819 1b01 	ldrb.w	r1, [r9], #1
 8012338:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801233c:	2b09      	cmp	r3, #9
 801233e:	d91e      	bls.n	801237e <__ssvfiscanf_r+0xf6>
 8012340:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 801253c <__ssvfiscanf_r+0x2b4>
 8012344:	2203      	movs	r2, #3
 8012346:	4650      	mov	r0, sl
 8012348:	f7ed ffe2 	bl	8000310 <memchr>
 801234c:	b138      	cbz	r0, 801235e <__ssvfiscanf_r+0xd6>
 801234e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012350:	eba0 000a 	sub.w	r0, r0, sl
 8012354:	2301      	movs	r3, #1
 8012356:	4083      	lsls	r3, r0
 8012358:	4313      	orrs	r3, r2
 801235a:	9341      	str	r3, [sp, #260]	@ 0x104
 801235c:	464d      	mov	r5, r9
 801235e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012362:	2b78      	cmp	r3, #120	@ 0x78
 8012364:	d806      	bhi.n	8012374 <__ssvfiscanf_r+0xec>
 8012366:	2b57      	cmp	r3, #87	@ 0x57
 8012368:	d810      	bhi.n	801238c <__ssvfiscanf_r+0x104>
 801236a:	2b25      	cmp	r3, #37	@ 0x25
 801236c:	d0c5      	beq.n	80122fa <__ssvfiscanf_r+0x72>
 801236e:	d857      	bhi.n	8012420 <__ssvfiscanf_r+0x198>
 8012370:	2b00      	cmp	r3, #0
 8012372:	d065      	beq.n	8012440 <__ssvfiscanf_r+0x1b8>
 8012374:	2303      	movs	r3, #3
 8012376:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012378:	230a      	movs	r3, #10
 801237a:	9342      	str	r3, [sp, #264]	@ 0x108
 801237c:	e078      	b.n	8012470 <__ssvfiscanf_r+0x1e8>
 801237e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012380:	fb02 1103 	mla	r1, r2, r3, r1
 8012384:	3930      	subs	r1, #48	@ 0x30
 8012386:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012388:	464d      	mov	r5, r9
 801238a:	e7d2      	b.n	8012332 <__ssvfiscanf_r+0xaa>
 801238c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012390:	2a20      	cmp	r2, #32
 8012392:	d8ef      	bhi.n	8012374 <__ssvfiscanf_r+0xec>
 8012394:	a101      	add	r1, pc, #4	@ (adr r1, 801239c <__ssvfiscanf_r+0x114>)
 8012396:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801239a:	bf00      	nop
 801239c:	0801244f 	.word	0x0801244f
 80123a0:	08012375 	.word	0x08012375
 80123a4:	08012375 	.word	0x08012375
 80123a8:	080124a9 	.word	0x080124a9
 80123ac:	08012375 	.word	0x08012375
 80123b0:	08012375 	.word	0x08012375
 80123b4:	08012375 	.word	0x08012375
 80123b8:	08012375 	.word	0x08012375
 80123bc:	08012375 	.word	0x08012375
 80123c0:	08012375 	.word	0x08012375
 80123c4:	08012375 	.word	0x08012375
 80123c8:	080124bf 	.word	0x080124bf
 80123cc:	080124a5 	.word	0x080124a5
 80123d0:	08012427 	.word	0x08012427
 80123d4:	08012427 	.word	0x08012427
 80123d8:	08012427 	.word	0x08012427
 80123dc:	08012375 	.word	0x08012375
 80123e0:	08012461 	.word	0x08012461
 80123e4:	08012375 	.word	0x08012375
 80123e8:	08012375 	.word	0x08012375
 80123ec:	08012375 	.word	0x08012375
 80123f0:	08012375 	.word	0x08012375
 80123f4:	080124cf 	.word	0x080124cf
 80123f8:	08012469 	.word	0x08012469
 80123fc:	08012447 	.word	0x08012447
 8012400:	08012375 	.word	0x08012375
 8012404:	08012375 	.word	0x08012375
 8012408:	080124cb 	.word	0x080124cb
 801240c:	08012375 	.word	0x08012375
 8012410:	080124a5 	.word	0x080124a5
 8012414:	08012375 	.word	0x08012375
 8012418:	08012375 	.word	0x08012375
 801241c:	0801244f 	.word	0x0801244f
 8012420:	3b45      	subs	r3, #69	@ 0x45
 8012422:	2b02      	cmp	r3, #2
 8012424:	d8a6      	bhi.n	8012374 <__ssvfiscanf_r+0xec>
 8012426:	2305      	movs	r3, #5
 8012428:	e021      	b.n	801246e <__ssvfiscanf_r+0x1e6>
 801242a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801242c:	4621      	mov	r1, r4
 801242e:	4630      	mov	r0, r6
 8012430:	4798      	blx	r3
 8012432:	2800      	cmp	r0, #0
 8012434:	f43f af66 	beq.w	8012304 <__ssvfiscanf_r+0x7c>
 8012438:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801243a:	2800      	cmp	r0, #0
 801243c:	f040 808b 	bne.w	8012556 <__ssvfiscanf_r+0x2ce>
 8012440:	f04f 30ff 	mov.w	r0, #4294967295
 8012444:	e08b      	b.n	801255e <__ssvfiscanf_r+0x2d6>
 8012446:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012448:	f042 0220 	orr.w	r2, r2, #32
 801244c:	9241      	str	r2, [sp, #260]	@ 0x104
 801244e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012454:	9241      	str	r2, [sp, #260]	@ 0x104
 8012456:	2210      	movs	r2, #16
 8012458:	2b6e      	cmp	r3, #110	@ 0x6e
 801245a:	9242      	str	r2, [sp, #264]	@ 0x108
 801245c:	d902      	bls.n	8012464 <__ssvfiscanf_r+0x1dc>
 801245e:	e005      	b.n	801246c <__ssvfiscanf_r+0x1e4>
 8012460:	2300      	movs	r3, #0
 8012462:	9342      	str	r3, [sp, #264]	@ 0x108
 8012464:	2303      	movs	r3, #3
 8012466:	e002      	b.n	801246e <__ssvfiscanf_r+0x1e6>
 8012468:	2308      	movs	r3, #8
 801246a:	9342      	str	r3, [sp, #264]	@ 0x108
 801246c:	2304      	movs	r3, #4
 801246e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012470:	6863      	ldr	r3, [r4, #4]
 8012472:	2b00      	cmp	r3, #0
 8012474:	dd39      	ble.n	80124ea <__ssvfiscanf_r+0x262>
 8012476:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012478:	0659      	lsls	r1, r3, #25
 801247a:	d404      	bmi.n	8012486 <__ssvfiscanf_r+0x1fe>
 801247c:	6823      	ldr	r3, [r4, #0]
 801247e:	781a      	ldrb	r2, [r3, #0]
 8012480:	5cba      	ldrb	r2, [r7, r2]
 8012482:	0712      	lsls	r2, r2, #28
 8012484:	d438      	bmi.n	80124f8 <__ssvfiscanf_r+0x270>
 8012486:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012488:	2b02      	cmp	r3, #2
 801248a:	dc47      	bgt.n	801251c <__ssvfiscanf_r+0x294>
 801248c:	466b      	mov	r3, sp
 801248e:	4622      	mov	r2, r4
 8012490:	a941      	add	r1, sp, #260	@ 0x104
 8012492:	4630      	mov	r0, r6
 8012494:	f000 f86c 	bl	8012570 <_scanf_chars>
 8012498:	2801      	cmp	r0, #1
 801249a:	d064      	beq.n	8012566 <__ssvfiscanf_r+0x2de>
 801249c:	2802      	cmp	r0, #2
 801249e:	f47f af18 	bne.w	80122d2 <__ssvfiscanf_r+0x4a>
 80124a2:	e7c9      	b.n	8012438 <__ssvfiscanf_r+0x1b0>
 80124a4:	220a      	movs	r2, #10
 80124a6:	e7d7      	b.n	8012458 <__ssvfiscanf_r+0x1d0>
 80124a8:	4629      	mov	r1, r5
 80124aa:	4640      	mov	r0, r8
 80124ac:	f000 fa5a 	bl	8012964 <__sccl>
 80124b0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80124b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124b6:	9341      	str	r3, [sp, #260]	@ 0x104
 80124b8:	4605      	mov	r5, r0
 80124ba:	2301      	movs	r3, #1
 80124bc:	e7d7      	b.n	801246e <__ssvfiscanf_r+0x1e6>
 80124be:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80124c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124c4:	9341      	str	r3, [sp, #260]	@ 0x104
 80124c6:	2300      	movs	r3, #0
 80124c8:	e7d1      	b.n	801246e <__ssvfiscanf_r+0x1e6>
 80124ca:	2302      	movs	r3, #2
 80124cc:	e7cf      	b.n	801246e <__ssvfiscanf_r+0x1e6>
 80124ce:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80124d0:	06c3      	lsls	r3, r0, #27
 80124d2:	f53f aefe 	bmi.w	80122d2 <__ssvfiscanf_r+0x4a>
 80124d6:	9b00      	ldr	r3, [sp, #0]
 80124d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80124da:	1d19      	adds	r1, r3, #4
 80124dc:	9100      	str	r1, [sp, #0]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	07c0      	lsls	r0, r0, #31
 80124e2:	bf4c      	ite	mi
 80124e4:	801a      	strhmi	r2, [r3, #0]
 80124e6:	601a      	strpl	r2, [r3, #0]
 80124e8:	e6f3      	b.n	80122d2 <__ssvfiscanf_r+0x4a>
 80124ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80124ec:	4621      	mov	r1, r4
 80124ee:	4630      	mov	r0, r6
 80124f0:	4798      	blx	r3
 80124f2:	2800      	cmp	r0, #0
 80124f4:	d0bf      	beq.n	8012476 <__ssvfiscanf_r+0x1ee>
 80124f6:	e79f      	b.n	8012438 <__ssvfiscanf_r+0x1b0>
 80124f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80124fa:	3201      	adds	r2, #1
 80124fc:	9245      	str	r2, [sp, #276]	@ 0x114
 80124fe:	6862      	ldr	r2, [r4, #4]
 8012500:	3a01      	subs	r2, #1
 8012502:	2a00      	cmp	r2, #0
 8012504:	6062      	str	r2, [r4, #4]
 8012506:	dd02      	ble.n	801250e <__ssvfiscanf_r+0x286>
 8012508:	3301      	adds	r3, #1
 801250a:	6023      	str	r3, [r4, #0]
 801250c:	e7b6      	b.n	801247c <__ssvfiscanf_r+0x1f4>
 801250e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012510:	4621      	mov	r1, r4
 8012512:	4630      	mov	r0, r6
 8012514:	4798      	blx	r3
 8012516:	2800      	cmp	r0, #0
 8012518:	d0b0      	beq.n	801247c <__ssvfiscanf_r+0x1f4>
 801251a:	e78d      	b.n	8012438 <__ssvfiscanf_r+0x1b0>
 801251c:	2b04      	cmp	r3, #4
 801251e:	dc0f      	bgt.n	8012540 <__ssvfiscanf_r+0x2b8>
 8012520:	466b      	mov	r3, sp
 8012522:	4622      	mov	r2, r4
 8012524:	a941      	add	r1, sp, #260	@ 0x104
 8012526:	4630      	mov	r0, r6
 8012528:	f000 f87c 	bl	8012624 <_scanf_i>
 801252c:	e7b4      	b.n	8012498 <__ssvfiscanf_r+0x210>
 801252e:	bf00      	nop
 8012530:	080121d9 	.word	0x080121d9
 8012534:	0801224f 	.word	0x0801224f
 8012538:	080135c9 	.word	0x080135c9
 801253c:	080136cf 	.word	0x080136cf
 8012540:	4b0a      	ldr	r3, [pc, #40]	@ (801256c <__ssvfiscanf_r+0x2e4>)
 8012542:	2b00      	cmp	r3, #0
 8012544:	f43f aec5 	beq.w	80122d2 <__ssvfiscanf_r+0x4a>
 8012548:	466b      	mov	r3, sp
 801254a:	4622      	mov	r2, r4
 801254c:	a941      	add	r1, sp, #260	@ 0x104
 801254e:	4630      	mov	r0, r6
 8012550:	f7fd fa12 	bl	800f978 <_scanf_float>
 8012554:	e7a0      	b.n	8012498 <__ssvfiscanf_r+0x210>
 8012556:	89a3      	ldrh	r3, [r4, #12]
 8012558:	065b      	lsls	r3, r3, #25
 801255a:	f53f af71 	bmi.w	8012440 <__ssvfiscanf_r+0x1b8>
 801255e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8012562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012566:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012568:	e7f9      	b.n	801255e <__ssvfiscanf_r+0x2d6>
 801256a:	bf00      	nop
 801256c:	0800f979 	.word	0x0800f979

08012570 <_scanf_chars>:
 8012570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012574:	4615      	mov	r5, r2
 8012576:	688a      	ldr	r2, [r1, #8]
 8012578:	4680      	mov	r8, r0
 801257a:	460c      	mov	r4, r1
 801257c:	b932      	cbnz	r2, 801258c <_scanf_chars+0x1c>
 801257e:	698a      	ldr	r2, [r1, #24]
 8012580:	2a00      	cmp	r2, #0
 8012582:	bf14      	ite	ne
 8012584:	f04f 32ff 	movne.w	r2, #4294967295
 8012588:	2201      	moveq	r2, #1
 801258a:	608a      	str	r2, [r1, #8]
 801258c:	6822      	ldr	r2, [r4, #0]
 801258e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012620 <_scanf_chars+0xb0>
 8012592:	06d1      	lsls	r1, r2, #27
 8012594:	bf5f      	itttt	pl
 8012596:	681a      	ldrpl	r2, [r3, #0]
 8012598:	1d11      	addpl	r1, r2, #4
 801259a:	6019      	strpl	r1, [r3, #0]
 801259c:	6816      	ldrpl	r6, [r2, #0]
 801259e:	2700      	movs	r7, #0
 80125a0:	69a0      	ldr	r0, [r4, #24]
 80125a2:	b188      	cbz	r0, 80125c8 <_scanf_chars+0x58>
 80125a4:	2801      	cmp	r0, #1
 80125a6:	d107      	bne.n	80125b8 <_scanf_chars+0x48>
 80125a8:	682b      	ldr	r3, [r5, #0]
 80125aa:	781a      	ldrb	r2, [r3, #0]
 80125ac:	6963      	ldr	r3, [r4, #20]
 80125ae:	5c9b      	ldrb	r3, [r3, r2]
 80125b0:	b953      	cbnz	r3, 80125c8 <_scanf_chars+0x58>
 80125b2:	2f00      	cmp	r7, #0
 80125b4:	d031      	beq.n	801261a <_scanf_chars+0xaa>
 80125b6:	e022      	b.n	80125fe <_scanf_chars+0x8e>
 80125b8:	2802      	cmp	r0, #2
 80125ba:	d120      	bne.n	80125fe <_scanf_chars+0x8e>
 80125bc:	682b      	ldr	r3, [r5, #0]
 80125be:	781b      	ldrb	r3, [r3, #0]
 80125c0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80125c4:	071b      	lsls	r3, r3, #28
 80125c6:	d41a      	bmi.n	80125fe <_scanf_chars+0x8e>
 80125c8:	6823      	ldr	r3, [r4, #0]
 80125ca:	06da      	lsls	r2, r3, #27
 80125cc:	bf5e      	ittt	pl
 80125ce:	682b      	ldrpl	r3, [r5, #0]
 80125d0:	781b      	ldrbpl	r3, [r3, #0]
 80125d2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80125d6:	682a      	ldr	r2, [r5, #0]
 80125d8:	686b      	ldr	r3, [r5, #4]
 80125da:	3201      	adds	r2, #1
 80125dc:	602a      	str	r2, [r5, #0]
 80125de:	68a2      	ldr	r2, [r4, #8]
 80125e0:	3b01      	subs	r3, #1
 80125e2:	3a01      	subs	r2, #1
 80125e4:	606b      	str	r3, [r5, #4]
 80125e6:	3701      	adds	r7, #1
 80125e8:	60a2      	str	r2, [r4, #8]
 80125ea:	b142      	cbz	r2, 80125fe <_scanf_chars+0x8e>
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	dcd7      	bgt.n	80125a0 <_scanf_chars+0x30>
 80125f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80125f4:	4629      	mov	r1, r5
 80125f6:	4640      	mov	r0, r8
 80125f8:	4798      	blx	r3
 80125fa:	2800      	cmp	r0, #0
 80125fc:	d0d0      	beq.n	80125a0 <_scanf_chars+0x30>
 80125fe:	6823      	ldr	r3, [r4, #0]
 8012600:	f013 0310 	ands.w	r3, r3, #16
 8012604:	d105      	bne.n	8012612 <_scanf_chars+0xa2>
 8012606:	68e2      	ldr	r2, [r4, #12]
 8012608:	3201      	adds	r2, #1
 801260a:	60e2      	str	r2, [r4, #12]
 801260c:	69a2      	ldr	r2, [r4, #24]
 801260e:	b102      	cbz	r2, 8012612 <_scanf_chars+0xa2>
 8012610:	7033      	strb	r3, [r6, #0]
 8012612:	6923      	ldr	r3, [r4, #16]
 8012614:	443b      	add	r3, r7
 8012616:	6123      	str	r3, [r4, #16]
 8012618:	2000      	movs	r0, #0
 801261a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801261e:	bf00      	nop
 8012620:	080135c9 	.word	0x080135c9

08012624 <_scanf_i>:
 8012624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012628:	4698      	mov	r8, r3
 801262a:	4b74      	ldr	r3, [pc, #464]	@ (80127fc <_scanf_i+0x1d8>)
 801262c:	460c      	mov	r4, r1
 801262e:	4682      	mov	sl, r0
 8012630:	4616      	mov	r6, r2
 8012632:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012636:	b087      	sub	sp, #28
 8012638:	ab03      	add	r3, sp, #12
 801263a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801263e:	4b70      	ldr	r3, [pc, #448]	@ (8012800 <_scanf_i+0x1dc>)
 8012640:	69a1      	ldr	r1, [r4, #24]
 8012642:	4a70      	ldr	r2, [pc, #448]	@ (8012804 <_scanf_i+0x1e0>)
 8012644:	2903      	cmp	r1, #3
 8012646:	bf08      	it	eq
 8012648:	461a      	moveq	r2, r3
 801264a:	68a3      	ldr	r3, [r4, #8]
 801264c:	9201      	str	r2, [sp, #4]
 801264e:	1e5a      	subs	r2, r3, #1
 8012650:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012654:	bf88      	it	hi
 8012656:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801265a:	4627      	mov	r7, r4
 801265c:	bf82      	ittt	hi
 801265e:	eb03 0905 	addhi.w	r9, r3, r5
 8012662:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012666:	60a3      	strhi	r3, [r4, #8]
 8012668:	f857 3b1c 	ldr.w	r3, [r7], #28
 801266c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012670:	bf98      	it	ls
 8012672:	f04f 0900 	movls.w	r9, #0
 8012676:	6023      	str	r3, [r4, #0]
 8012678:	463d      	mov	r5, r7
 801267a:	f04f 0b00 	mov.w	fp, #0
 801267e:	6831      	ldr	r1, [r6, #0]
 8012680:	ab03      	add	r3, sp, #12
 8012682:	7809      	ldrb	r1, [r1, #0]
 8012684:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012688:	2202      	movs	r2, #2
 801268a:	f7ed fe41 	bl	8000310 <memchr>
 801268e:	b328      	cbz	r0, 80126dc <_scanf_i+0xb8>
 8012690:	f1bb 0f01 	cmp.w	fp, #1
 8012694:	d159      	bne.n	801274a <_scanf_i+0x126>
 8012696:	6862      	ldr	r2, [r4, #4]
 8012698:	b92a      	cbnz	r2, 80126a6 <_scanf_i+0x82>
 801269a:	6822      	ldr	r2, [r4, #0]
 801269c:	2108      	movs	r1, #8
 801269e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80126a2:	6061      	str	r1, [r4, #4]
 80126a4:	6022      	str	r2, [r4, #0]
 80126a6:	6822      	ldr	r2, [r4, #0]
 80126a8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80126ac:	6022      	str	r2, [r4, #0]
 80126ae:	68a2      	ldr	r2, [r4, #8]
 80126b0:	1e51      	subs	r1, r2, #1
 80126b2:	60a1      	str	r1, [r4, #8]
 80126b4:	b192      	cbz	r2, 80126dc <_scanf_i+0xb8>
 80126b6:	6832      	ldr	r2, [r6, #0]
 80126b8:	1c51      	adds	r1, r2, #1
 80126ba:	6031      	str	r1, [r6, #0]
 80126bc:	7812      	ldrb	r2, [r2, #0]
 80126be:	f805 2b01 	strb.w	r2, [r5], #1
 80126c2:	6872      	ldr	r2, [r6, #4]
 80126c4:	3a01      	subs	r2, #1
 80126c6:	2a00      	cmp	r2, #0
 80126c8:	6072      	str	r2, [r6, #4]
 80126ca:	dc07      	bgt.n	80126dc <_scanf_i+0xb8>
 80126cc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80126d0:	4631      	mov	r1, r6
 80126d2:	4650      	mov	r0, sl
 80126d4:	4790      	blx	r2
 80126d6:	2800      	cmp	r0, #0
 80126d8:	f040 8085 	bne.w	80127e6 <_scanf_i+0x1c2>
 80126dc:	f10b 0b01 	add.w	fp, fp, #1
 80126e0:	f1bb 0f03 	cmp.w	fp, #3
 80126e4:	d1cb      	bne.n	801267e <_scanf_i+0x5a>
 80126e6:	6863      	ldr	r3, [r4, #4]
 80126e8:	b90b      	cbnz	r3, 80126ee <_scanf_i+0xca>
 80126ea:	230a      	movs	r3, #10
 80126ec:	6063      	str	r3, [r4, #4]
 80126ee:	6863      	ldr	r3, [r4, #4]
 80126f0:	4945      	ldr	r1, [pc, #276]	@ (8012808 <_scanf_i+0x1e4>)
 80126f2:	6960      	ldr	r0, [r4, #20]
 80126f4:	1ac9      	subs	r1, r1, r3
 80126f6:	f000 f935 	bl	8012964 <__sccl>
 80126fa:	f04f 0b00 	mov.w	fp, #0
 80126fe:	68a3      	ldr	r3, [r4, #8]
 8012700:	6822      	ldr	r2, [r4, #0]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d03d      	beq.n	8012782 <_scanf_i+0x15e>
 8012706:	6831      	ldr	r1, [r6, #0]
 8012708:	6960      	ldr	r0, [r4, #20]
 801270a:	f891 c000 	ldrb.w	ip, [r1]
 801270e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012712:	2800      	cmp	r0, #0
 8012714:	d035      	beq.n	8012782 <_scanf_i+0x15e>
 8012716:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801271a:	d124      	bne.n	8012766 <_scanf_i+0x142>
 801271c:	0510      	lsls	r0, r2, #20
 801271e:	d522      	bpl.n	8012766 <_scanf_i+0x142>
 8012720:	f10b 0b01 	add.w	fp, fp, #1
 8012724:	f1b9 0f00 	cmp.w	r9, #0
 8012728:	d003      	beq.n	8012732 <_scanf_i+0x10e>
 801272a:	3301      	adds	r3, #1
 801272c:	f109 39ff 	add.w	r9, r9, #4294967295
 8012730:	60a3      	str	r3, [r4, #8]
 8012732:	6873      	ldr	r3, [r6, #4]
 8012734:	3b01      	subs	r3, #1
 8012736:	2b00      	cmp	r3, #0
 8012738:	6073      	str	r3, [r6, #4]
 801273a:	dd1b      	ble.n	8012774 <_scanf_i+0x150>
 801273c:	6833      	ldr	r3, [r6, #0]
 801273e:	3301      	adds	r3, #1
 8012740:	6033      	str	r3, [r6, #0]
 8012742:	68a3      	ldr	r3, [r4, #8]
 8012744:	3b01      	subs	r3, #1
 8012746:	60a3      	str	r3, [r4, #8]
 8012748:	e7d9      	b.n	80126fe <_scanf_i+0xda>
 801274a:	f1bb 0f02 	cmp.w	fp, #2
 801274e:	d1ae      	bne.n	80126ae <_scanf_i+0x8a>
 8012750:	6822      	ldr	r2, [r4, #0]
 8012752:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012756:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801275a:	d1bf      	bne.n	80126dc <_scanf_i+0xb8>
 801275c:	2110      	movs	r1, #16
 801275e:	6061      	str	r1, [r4, #4]
 8012760:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012764:	e7a2      	b.n	80126ac <_scanf_i+0x88>
 8012766:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801276a:	6022      	str	r2, [r4, #0]
 801276c:	780b      	ldrb	r3, [r1, #0]
 801276e:	f805 3b01 	strb.w	r3, [r5], #1
 8012772:	e7de      	b.n	8012732 <_scanf_i+0x10e>
 8012774:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012778:	4631      	mov	r1, r6
 801277a:	4650      	mov	r0, sl
 801277c:	4798      	blx	r3
 801277e:	2800      	cmp	r0, #0
 8012780:	d0df      	beq.n	8012742 <_scanf_i+0x11e>
 8012782:	6823      	ldr	r3, [r4, #0]
 8012784:	05d9      	lsls	r1, r3, #23
 8012786:	d50d      	bpl.n	80127a4 <_scanf_i+0x180>
 8012788:	42bd      	cmp	r5, r7
 801278a:	d909      	bls.n	80127a0 <_scanf_i+0x17c>
 801278c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012790:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012794:	4632      	mov	r2, r6
 8012796:	4650      	mov	r0, sl
 8012798:	4798      	blx	r3
 801279a:	f105 39ff 	add.w	r9, r5, #4294967295
 801279e:	464d      	mov	r5, r9
 80127a0:	42bd      	cmp	r5, r7
 80127a2:	d028      	beq.n	80127f6 <_scanf_i+0x1d2>
 80127a4:	6822      	ldr	r2, [r4, #0]
 80127a6:	f012 0210 	ands.w	r2, r2, #16
 80127aa:	d113      	bne.n	80127d4 <_scanf_i+0x1b0>
 80127ac:	702a      	strb	r2, [r5, #0]
 80127ae:	6863      	ldr	r3, [r4, #4]
 80127b0:	9e01      	ldr	r6, [sp, #4]
 80127b2:	4639      	mov	r1, r7
 80127b4:	4650      	mov	r0, sl
 80127b6:	47b0      	blx	r6
 80127b8:	f8d8 3000 	ldr.w	r3, [r8]
 80127bc:	6821      	ldr	r1, [r4, #0]
 80127be:	1d1a      	adds	r2, r3, #4
 80127c0:	f8c8 2000 	str.w	r2, [r8]
 80127c4:	f011 0f20 	tst.w	r1, #32
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	d00f      	beq.n	80127ec <_scanf_i+0x1c8>
 80127cc:	6018      	str	r0, [r3, #0]
 80127ce:	68e3      	ldr	r3, [r4, #12]
 80127d0:	3301      	adds	r3, #1
 80127d2:	60e3      	str	r3, [r4, #12]
 80127d4:	6923      	ldr	r3, [r4, #16]
 80127d6:	1bed      	subs	r5, r5, r7
 80127d8:	445d      	add	r5, fp
 80127da:	442b      	add	r3, r5
 80127dc:	6123      	str	r3, [r4, #16]
 80127de:	2000      	movs	r0, #0
 80127e0:	b007      	add	sp, #28
 80127e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127e6:	f04f 0b00 	mov.w	fp, #0
 80127ea:	e7ca      	b.n	8012782 <_scanf_i+0x15e>
 80127ec:	07ca      	lsls	r2, r1, #31
 80127ee:	bf4c      	ite	mi
 80127f0:	8018      	strhmi	r0, [r3, #0]
 80127f2:	6018      	strpl	r0, [r3, #0]
 80127f4:	e7eb      	b.n	80127ce <_scanf_i+0x1aa>
 80127f6:	2001      	movs	r0, #1
 80127f8:	e7f2      	b.n	80127e0 <_scanf_i+0x1bc>
 80127fa:	bf00      	nop
 80127fc:	08013294 	.word	0x08013294
 8012800:	08011f0d 	.word	0x08011f0d
 8012804:	08012c1d 	.word	0x08012c1d
 8012808:	080136ea 	.word	0x080136ea

0801280c <__sflush_r>:
 801280c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012814:	0716      	lsls	r6, r2, #28
 8012816:	4605      	mov	r5, r0
 8012818:	460c      	mov	r4, r1
 801281a:	d454      	bmi.n	80128c6 <__sflush_r+0xba>
 801281c:	684b      	ldr	r3, [r1, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	dc02      	bgt.n	8012828 <__sflush_r+0x1c>
 8012822:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012824:	2b00      	cmp	r3, #0
 8012826:	dd48      	ble.n	80128ba <__sflush_r+0xae>
 8012828:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801282a:	2e00      	cmp	r6, #0
 801282c:	d045      	beq.n	80128ba <__sflush_r+0xae>
 801282e:	2300      	movs	r3, #0
 8012830:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012834:	682f      	ldr	r7, [r5, #0]
 8012836:	6a21      	ldr	r1, [r4, #32]
 8012838:	602b      	str	r3, [r5, #0]
 801283a:	d030      	beq.n	801289e <__sflush_r+0x92>
 801283c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801283e:	89a3      	ldrh	r3, [r4, #12]
 8012840:	0759      	lsls	r1, r3, #29
 8012842:	d505      	bpl.n	8012850 <__sflush_r+0x44>
 8012844:	6863      	ldr	r3, [r4, #4]
 8012846:	1ad2      	subs	r2, r2, r3
 8012848:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801284a:	b10b      	cbz	r3, 8012850 <__sflush_r+0x44>
 801284c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801284e:	1ad2      	subs	r2, r2, r3
 8012850:	2300      	movs	r3, #0
 8012852:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012854:	6a21      	ldr	r1, [r4, #32]
 8012856:	4628      	mov	r0, r5
 8012858:	47b0      	blx	r6
 801285a:	1c43      	adds	r3, r0, #1
 801285c:	89a3      	ldrh	r3, [r4, #12]
 801285e:	d106      	bne.n	801286e <__sflush_r+0x62>
 8012860:	6829      	ldr	r1, [r5, #0]
 8012862:	291d      	cmp	r1, #29
 8012864:	d82b      	bhi.n	80128be <__sflush_r+0xb2>
 8012866:	4a2a      	ldr	r2, [pc, #168]	@ (8012910 <__sflush_r+0x104>)
 8012868:	410a      	asrs	r2, r1
 801286a:	07d6      	lsls	r6, r2, #31
 801286c:	d427      	bmi.n	80128be <__sflush_r+0xb2>
 801286e:	2200      	movs	r2, #0
 8012870:	6062      	str	r2, [r4, #4]
 8012872:	04d9      	lsls	r1, r3, #19
 8012874:	6922      	ldr	r2, [r4, #16]
 8012876:	6022      	str	r2, [r4, #0]
 8012878:	d504      	bpl.n	8012884 <__sflush_r+0x78>
 801287a:	1c42      	adds	r2, r0, #1
 801287c:	d101      	bne.n	8012882 <__sflush_r+0x76>
 801287e:	682b      	ldr	r3, [r5, #0]
 8012880:	b903      	cbnz	r3, 8012884 <__sflush_r+0x78>
 8012882:	6560      	str	r0, [r4, #84]	@ 0x54
 8012884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012886:	602f      	str	r7, [r5, #0]
 8012888:	b1b9      	cbz	r1, 80128ba <__sflush_r+0xae>
 801288a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801288e:	4299      	cmp	r1, r3
 8012890:	d002      	beq.n	8012898 <__sflush_r+0x8c>
 8012892:	4628      	mov	r0, r5
 8012894:	f7fe fa7a 	bl	8010d8c <_free_r>
 8012898:	2300      	movs	r3, #0
 801289a:	6363      	str	r3, [r4, #52]	@ 0x34
 801289c:	e00d      	b.n	80128ba <__sflush_r+0xae>
 801289e:	2301      	movs	r3, #1
 80128a0:	4628      	mov	r0, r5
 80128a2:	47b0      	blx	r6
 80128a4:	4602      	mov	r2, r0
 80128a6:	1c50      	adds	r0, r2, #1
 80128a8:	d1c9      	bne.n	801283e <__sflush_r+0x32>
 80128aa:	682b      	ldr	r3, [r5, #0]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d0c6      	beq.n	801283e <__sflush_r+0x32>
 80128b0:	2b1d      	cmp	r3, #29
 80128b2:	d001      	beq.n	80128b8 <__sflush_r+0xac>
 80128b4:	2b16      	cmp	r3, #22
 80128b6:	d11e      	bne.n	80128f6 <__sflush_r+0xea>
 80128b8:	602f      	str	r7, [r5, #0]
 80128ba:	2000      	movs	r0, #0
 80128bc:	e022      	b.n	8012904 <__sflush_r+0xf8>
 80128be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128c2:	b21b      	sxth	r3, r3
 80128c4:	e01b      	b.n	80128fe <__sflush_r+0xf2>
 80128c6:	690f      	ldr	r7, [r1, #16]
 80128c8:	2f00      	cmp	r7, #0
 80128ca:	d0f6      	beq.n	80128ba <__sflush_r+0xae>
 80128cc:	0793      	lsls	r3, r2, #30
 80128ce:	680e      	ldr	r6, [r1, #0]
 80128d0:	bf08      	it	eq
 80128d2:	694b      	ldreq	r3, [r1, #20]
 80128d4:	600f      	str	r7, [r1, #0]
 80128d6:	bf18      	it	ne
 80128d8:	2300      	movne	r3, #0
 80128da:	eba6 0807 	sub.w	r8, r6, r7
 80128de:	608b      	str	r3, [r1, #8]
 80128e0:	f1b8 0f00 	cmp.w	r8, #0
 80128e4:	dde9      	ble.n	80128ba <__sflush_r+0xae>
 80128e6:	6a21      	ldr	r1, [r4, #32]
 80128e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80128ea:	4643      	mov	r3, r8
 80128ec:	463a      	mov	r2, r7
 80128ee:	4628      	mov	r0, r5
 80128f0:	47b0      	blx	r6
 80128f2:	2800      	cmp	r0, #0
 80128f4:	dc08      	bgt.n	8012908 <__sflush_r+0xfc>
 80128f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128fe:	81a3      	strh	r3, [r4, #12]
 8012900:	f04f 30ff 	mov.w	r0, #4294967295
 8012904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012908:	4407      	add	r7, r0
 801290a:	eba8 0800 	sub.w	r8, r8, r0
 801290e:	e7e7      	b.n	80128e0 <__sflush_r+0xd4>
 8012910:	dfbffffe 	.word	0xdfbffffe

08012914 <_fflush_r>:
 8012914:	b538      	push	{r3, r4, r5, lr}
 8012916:	690b      	ldr	r3, [r1, #16]
 8012918:	4605      	mov	r5, r0
 801291a:	460c      	mov	r4, r1
 801291c:	b913      	cbnz	r3, 8012924 <_fflush_r+0x10>
 801291e:	2500      	movs	r5, #0
 8012920:	4628      	mov	r0, r5
 8012922:	bd38      	pop	{r3, r4, r5, pc}
 8012924:	b118      	cbz	r0, 801292e <_fflush_r+0x1a>
 8012926:	6a03      	ldr	r3, [r0, #32]
 8012928:	b90b      	cbnz	r3, 801292e <_fflush_r+0x1a>
 801292a:	f7fd fabd 	bl	800fea8 <__sinit>
 801292e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d0f3      	beq.n	801291e <_fflush_r+0xa>
 8012936:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012938:	07d0      	lsls	r0, r2, #31
 801293a:	d404      	bmi.n	8012946 <_fflush_r+0x32>
 801293c:	0599      	lsls	r1, r3, #22
 801293e:	d402      	bmi.n	8012946 <_fflush_r+0x32>
 8012940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012942:	f7fd fc22 	bl	801018a <__retarget_lock_acquire_recursive>
 8012946:	4628      	mov	r0, r5
 8012948:	4621      	mov	r1, r4
 801294a:	f7ff ff5f 	bl	801280c <__sflush_r>
 801294e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012950:	07da      	lsls	r2, r3, #31
 8012952:	4605      	mov	r5, r0
 8012954:	d4e4      	bmi.n	8012920 <_fflush_r+0xc>
 8012956:	89a3      	ldrh	r3, [r4, #12]
 8012958:	059b      	lsls	r3, r3, #22
 801295a:	d4e1      	bmi.n	8012920 <_fflush_r+0xc>
 801295c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801295e:	f7fd fc15 	bl	801018c <__retarget_lock_release_recursive>
 8012962:	e7dd      	b.n	8012920 <_fflush_r+0xc>

08012964 <__sccl>:
 8012964:	b570      	push	{r4, r5, r6, lr}
 8012966:	780b      	ldrb	r3, [r1, #0]
 8012968:	4604      	mov	r4, r0
 801296a:	2b5e      	cmp	r3, #94	@ 0x5e
 801296c:	bf0b      	itete	eq
 801296e:	784b      	ldrbeq	r3, [r1, #1]
 8012970:	1c4a      	addne	r2, r1, #1
 8012972:	1c8a      	addeq	r2, r1, #2
 8012974:	2100      	movne	r1, #0
 8012976:	bf08      	it	eq
 8012978:	2101      	moveq	r1, #1
 801297a:	3801      	subs	r0, #1
 801297c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012980:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012984:	42a8      	cmp	r0, r5
 8012986:	d1fb      	bne.n	8012980 <__sccl+0x1c>
 8012988:	b90b      	cbnz	r3, 801298e <__sccl+0x2a>
 801298a:	1e50      	subs	r0, r2, #1
 801298c:	bd70      	pop	{r4, r5, r6, pc}
 801298e:	f081 0101 	eor.w	r1, r1, #1
 8012992:	54e1      	strb	r1, [r4, r3]
 8012994:	4610      	mov	r0, r2
 8012996:	4602      	mov	r2, r0
 8012998:	f812 5b01 	ldrb.w	r5, [r2], #1
 801299c:	2d2d      	cmp	r5, #45	@ 0x2d
 801299e:	d005      	beq.n	80129ac <__sccl+0x48>
 80129a0:	2d5d      	cmp	r5, #93	@ 0x5d
 80129a2:	d016      	beq.n	80129d2 <__sccl+0x6e>
 80129a4:	2d00      	cmp	r5, #0
 80129a6:	d0f1      	beq.n	801298c <__sccl+0x28>
 80129a8:	462b      	mov	r3, r5
 80129aa:	e7f2      	b.n	8012992 <__sccl+0x2e>
 80129ac:	7846      	ldrb	r6, [r0, #1]
 80129ae:	2e5d      	cmp	r6, #93	@ 0x5d
 80129b0:	d0fa      	beq.n	80129a8 <__sccl+0x44>
 80129b2:	42b3      	cmp	r3, r6
 80129b4:	dcf8      	bgt.n	80129a8 <__sccl+0x44>
 80129b6:	3002      	adds	r0, #2
 80129b8:	461a      	mov	r2, r3
 80129ba:	3201      	adds	r2, #1
 80129bc:	4296      	cmp	r6, r2
 80129be:	54a1      	strb	r1, [r4, r2]
 80129c0:	dcfb      	bgt.n	80129ba <__sccl+0x56>
 80129c2:	1af2      	subs	r2, r6, r3
 80129c4:	3a01      	subs	r2, #1
 80129c6:	1c5d      	adds	r5, r3, #1
 80129c8:	42b3      	cmp	r3, r6
 80129ca:	bfa8      	it	ge
 80129cc:	2200      	movge	r2, #0
 80129ce:	18ab      	adds	r3, r5, r2
 80129d0:	e7e1      	b.n	8012996 <__sccl+0x32>
 80129d2:	4610      	mov	r0, r2
 80129d4:	e7da      	b.n	801298c <__sccl+0x28>

080129d6 <__submore>:
 80129d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129da:	460c      	mov	r4, r1
 80129dc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80129de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80129e2:	4299      	cmp	r1, r3
 80129e4:	d11d      	bne.n	8012a22 <__submore+0x4c>
 80129e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80129ea:	f7fb fd49 	bl	800e480 <_malloc_r>
 80129ee:	b918      	cbnz	r0, 80129f8 <__submore+0x22>
 80129f0:	f04f 30ff 	mov.w	r0, #4294967295
 80129f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80129fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80129fe:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012a02:	6360      	str	r0, [r4, #52]	@ 0x34
 8012a04:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012a08:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012a0c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012a10:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012a14:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012a18:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012a1c:	6020      	str	r0, [r4, #0]
 8012a1e:	2000      	movs	r0, #0
 8012a20:	e7e8      	b.n	80129f4 <__submore+0x1e>
 8012a22:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012a24:	0077      	lsls	r7, r6, #1
 8012a26:	463a      	mov	r2, r7
 8012a28:	f000 f85c 	bl	8012ae4 <_realloc_r>
 8012a2c:	4605      	mov	r5, r0
 8012a2e:	2800      	cmp	r0, #0
 8012a30:	d0de      	beq.n	80129f0 <__submore+0x1a>
 8012a32:	eb00 0806 	add.w	r8, r0, r6
 8012a36:	4601      	mov	r1, r0
 8012a38:	4632      	mov	r2, r6
 8012a3a:	4640      	mov	r0, r8
 8012a3c:	f7fd fba7 	bl	801018e <memcpy>
 8012a40:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012a44:	f8c4 8000 	str.w	r8, [r4]
 8012a48:	e7e9      	b.n	8012a1e <__submore+0x48>

08012a4a <memmove>:
 8012a4a:	4288      	cmp	r0, r1
 8012a4c:	b510      	push	{r4, lr}
 8012a4e:	eb01 0402 	add.w	r4, r1, r2
 8012a52:	d902      	bls.n	8012a5a <memmove+0x10>
 8012a54:	4284      	cmp	r4, r0
 8012a56:	4623      	mov	r3, r4
 8012a58:	d807      	bhi.n	8012a6a <memmove+0x20>
 8012a5a:	1e43      	subs	r3, r0, #1
 8012a5c:	42a1      	cmp	r1, r4
 8012a5e:	d008      	beq.n	8012a72 <memmove+0x28>
 8012a60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a64:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a68:	e7f8      	b.n	8012a5c <memmove+0x12>
 8012a6a:	4402      	add	r2, r0
 8012a6c:	4601      	mov	r1, r0
 8012a6e:	428a      	cmp	r2, r1
 8012a70:	d100      	bne.n	8012a74 <memmove+0x2a>
 8012a72:	bd10      	pop	{r4, pc}
 8012a74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a78:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a7c:	e7f7      	b.n	8012a6e <memmove+0x24>
	...

08012a80 <__assert_func>:
 8012a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a82:	4614      	mov	r4, r2
 8012a84:	461a      	mov	r2, r3
 8012a86:	4b09      	ldr	r3, [pc, #36]	@ (8012aac <__assert_func+0x2c>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	4605      	mov	r5, r0
 8012a8c:	68d8      	ldr	r0, [r3, #12]
 8012a8e:	b954      	cbnz	r4, 8012aa6 <__assert_func+0x26>
 8012a90:	4b07      	ldr	r3, [pc, #28]	@ (8012ab0 <__assert_func+0x30>)
 8012a92:	461c      	mov	r4, r3
 8012a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012a98:	9100      	str	r1, [sp, #0]
 8012a9a:	462b      	mov	r3, r5
 8012a9c:	4905      	ldr	r1, [pc, #20]	@ (8012ab4 <__assert_func+0x34>)
 8012a9e:	f000 f8bf 	bl	8012c20 <fiprintf>
 8012aa2:	f000 f8cf 	bl	8012c44 <abort>
 8012aa6:	4b04      	ldr	r3, [pc, #16]	@ (8012ab8 <__assert_func+0x38>)
 8012aa8:	e7f4      	b.n	8012a94 <__assert_func+0x14>
 8012aaa:	bf00      	nop
 8012aac:	240001c4 	.word	0x240001c4
 8012ab0:	08013730 	.word	0x08013730
 8012ab4:	08013702 	.word	0x08013702
 8012ab8:	080136f5 	.word	0x080136f5

08012abc <_calloc_r>:
 8012abc:	b570      	push	{r4, r5, r6, lr}
 8012abe:	fba1 5402 	umull	r5, r4, r1, r2
 8012ac2:	b93c      	cbnz	r4, 8012ad4 <_calloc_r+0x18>
 8012ac4:	4629      	mov	r1, r5
 8012ac6:	f7fb fcdb 	bl	800e480 <_malloc_r>
 8012aca:	4606      	mov	r6, r0
 8012acc:	b928      	cbnz	r0, 8012ada <_calloc_r+0x1e>
 8012ace:	2600      	movs	r6, #0
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	bd70      	pop	{r4, r5, r6, pc}
 8012ad4:	220c      	movs	r2, #12
 8012ad6:	6002      	str	r2, [r0, #0]
 8012ad8:	e7f9      	b.n	8012ace <_calloc_r+0x12>
 8012ada:	462a      	mov	r2, r5
 8012adc:	4621      	mov	r1, r4
 8012ade:	f7fd faa8 	bl	8010032 <memset>
 8012ae2:	e7f5      	b.n	8012ad0 <_calloc_r+0x14>

08012ae4 <_realloc_r>:
 8012ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ae8:	4680      	mov	r8, r0
 8012aea:	4615      	mov	r5, r2
 8012aec:	460c      	mov	r4, r1
 8012aee:	b921      	cbnz	r1, 8012afa <_realloc_r+0x16>
 8012af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012af4:	4611      	mov	r1, r2
 8012af6:	f7fb bcc3 	b.w	800e480 <_malloc_r>
 8012afa:	b92a      	cbnz	r2, 8012b08 <_realloc_r+0x24>
 8012afc:	f7fe f946 	bl	8010d8c <_free_r>
 8012b00:	2400      	movs	r4, #0
 8012b02:	4620      	mov	r0, r4
 8012b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b08:	f000 f8a3 	bl	8012c52 <_malloc_usable_size_r>
 8012b0c:	4285      	cmp	r5, r0
 8012b0e:	4606      	mov	r6, r0
 8012b10:	d802      	bhi.n	8012b18 <_realloc_r+0x34>
 8012b12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012b16:	d8f4      	bhi.n	8012b02 <_realloc_r+0x1e>
 8012b18:	4629      	mov	r1, r5
 8012b1a:	4640      	mov	r0, r8
 8012b1c:	f7fb fcb0 	bl	800e480 <_malloc_r>
 8012b20:	4607      	mov	r7, r0
 8012b22:	2800      	cmp	r0, #0
 8012b24:	d0ec      	beq.n	8012b00 <_realloc_r+0x1c>
 8012b26:	42b5      	cmp	r5, r6
 8012b28:	462a      	mov	r2, r5
 8012b2a:	4621      	mov	r1, r4
 8012b2c:	bf28      	it	cs
 8012b2e:	4632      	movcs	r2, r6
 8012b30:	f7fd fb2d 	bl	801018e <memcpy>
 8012b34:	4621      	mov	r1, r4
 8012b36:	4640      	mov	r0, r8
 8012b38:	f7fe f928 	bl	8010d8c <_free_r>
 8012b3c:	463c      	mov	r4, r7
 8012b3e:	e7e0      	b.n	8012b02 <_realloc_r+0x1e>

08012b40 <_strtoul_l.constprop.0>:
 8012b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b44:	4e34      	ldr	r6, [pc, #208]	@ (8012c18 <_strtoul_l.constprop.0+0xd8>)
 8012b46:	4686      	mov	lr, r0
 8012b48:	460d      	mov	r5, r1
 8012b4a:	4628      	mov	r0, r5
 8012b4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b50:	5d37      	ldrb	r7, [r6, r4]
 8012b52:	f017 0708 	ands.w	r7, r7, #8
 8012b56:	d1f8      	bne.n	8012b4a <_strtoul_l.constprop.0+0xa>
 8012b58:	2c2d      	cmp	r4, #45	@ 0x2d
 8012b5a:	d12f      	bne.n	8012bbc <_strtoul_l.constprop.0+0x7c>
 8012b5c:	782c      	ldrb	r4, [r5, #0]
 8012b5e:	2701      	movs	r7, #1
 8012b60:	1c85      	adds	r5, r0, #2
 8012b62:	f033 0010 	bics.w	r0, r3, #16
 8012b66:	d109      	bne.n	8012b7c <_strtoul_l.constprop.0+0x3c>
 8012b68:	2c30      	cmp	r4, #48	@ 0x30
 8012b6a:	d12c      	bne.n	8012bc6 <_strtoul_l.constprop.0+0x86>
 8012b6c:	7828      	ldrb	r0, [r5, #0]
 8012b6e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012b72:	2858      	cmp	r0, #88	@ 0x58
 8012b74:	d127      	bne.n	8012bc6 <_strtoul_l.constprop.0+0x86>
 8012b76:	786c      	ldrb	r4, [r5, #1]
 8012b78:	2310      	movs	r3, #16
 8012b7a:	3502      	adds	r5, #2
 8012b7c:	f04f 38ff 	mov.w	r8, #4294967295
 8012b80:	2600      	movs	r6, #0
 8012b82:	fbb8 f8f3 	udiv	r8, r8, r3
 8012b86:	fb03 f908 	mul.w	r9, r3, r8
 8012b8a:	ea6f 0909 	mvn.w	r9, r9
 8012b8e:	4630      	mov	r0, r6
 8012b90:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012b94:	f1bc 0f09 	cmp.w	ip, #9
 8012b98:	d81c      	bhi.n	8012bd4 <_strtoul_l.constprop.0+0x94>
 8012b9a:	4664      	mov	r4, ip
 8012b9c:	42a3      	cmp	r3, r4
 8012b9e:	dd2a      	ble.n	8012bf6 <_strtoul_l.constprop.0+0xb6>
 8012ba0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012ba4:	d007      	beq.n	8012bb6 <_strtoul_l.constprop.0+0x76>
 8012ba6:	4580      	cmp	r8, r0
 8012ba8:	d322      	bcc.n	8012bf0 <_strtoul_l.constprop.0+0xb0>
 8012baa:	d101      	bne.n	8012bb0 <_strtoul_l.constprop.0+0x70>
 8012bac:	45a1      	cmp	r9, r4
 8012bae:	db1f      	blt.n	8012bf0 <_strtoul_l.constprop.0+0xb0>
 8012bb0:	fb00 4003 	mla	r0, r0, r3, r4
 8012bb4:	2601      	movs	r6, #1
 8012bb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012bba:	e7e9      	b.n	8012b90 <_strtoul_l.constprop.0+0x50>
 8012bbc:	2c2b      	cmp	r4, #43	@ 0x2b
 8012bbe:	bf04      	itt	eq
 8012bc0:	782c      	ldrbeq	r4, [r5, #0]
 8012bc2:	1c85      	addeq	r5, r0, #2
 8012bc4:	e7cd      	b.n	8012b62 <_strtoul_l.constprop.0+0x22>
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d1d8      	bne.n	8012b7c <_strtoul_l.constprop.0+0x3c>
 8012bca:	2c30      	cmp	r4, #48	@ 0x30
 8012bcc:	bf0c      	ite	eq
 8012bce:	2308      	moveq	r3, #8
 8012bd0:	230a      	movne	r3, #10
 8012bd2:	e7d3      	b.n	8012b7c <_strtoul_l.constprop.0+0x3c>
 8012bd4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012bd8:	f1bc 0f19 	cmp.w	ip, #25
 8012bdc:	d801      	bhi.n	8012be2 <_strtoul_l.constprop.0+0xa2>
 8012bde:	3c37      	subs	r4, #55	@ 0x37
 8012be0:	e7dc      	b.n	8012b9c <_strtoul_l.constprop.0+0x5c>
 8012be2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012be6:	f1bc 0f19 	cmp.w	ip, #25
 8012bea:	d804      	bhi.n	8012bf6 <_strtoul_l.constprop.0+0xb6>
 8012bec:	3c57      	subs	r4, #87	@ 0x57
 8012bee:	e7d5      	b.n	8012b9c <_strtoul_l.constprop.0+0x5c>
 8012bf0:	f04f 36ff 	mov.w	r6, #4294967295
 8012bf4:	e7df      	b.n	8012bb6 <_strtoul_l.constprop.0+0x76>
 8012bf6:	1c73      	adds	r3, r6, #1
 8012bf8:	d106      	bne.n	8012c08 <_strtoul_l.constprop.0+0xc8>
 8012bfa:	2322      	movs	r3, #34	@ 0x22
 8012bfc:	f8ce 3000 	str.w	r3, [lr]
 8012c00:	4630      	mov	r0, r6
 8012c02:	b932      	cbnz	r2, 8012c12 <_strtoul_l.constprop.0+0xd2>
 8012c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c08:	b107      	cbz	r7, 8012c0c <_strtoul_l.constprop.0+0xcc>
 8012c0a:	4240      	negs	r0, r0
 8012c0c:	2a00      	cmp	r2, #0
 8012c0e:	d0f9      	beq.n	8012c04 <_strtoul_l.constprop.0+0xc4>
 8012c10:	b106      	cbz	r6, 8012c14 <_strtoul_l.constprop.0+0xd4>
 8012c12:	1e69      	subs	r1, r5, #1
 8012c14:	6011      	str	r1, [r2, #0]
 8012c16:	e7f5      	b.n	8012c04 <_strtoul_l.constprop.0+0xc4>
 8012c18:	080135c9 	.word	0x080135c9

08012c1c <_strtoul_r>:
 8012c1c:	f7ff bf90 	b.w	8012b40 <_strtoul_l.constprop.0>

08012c20 <fiprintf>:
 8012c20:	b40e      	push	{r1, r2, r3}
 8012c22:	b503      	push	{r0, r1, lr}
 8012c24:	4601      	mov	r1, r0
 8012c26:	ab03      	add	r3, sp, #12
 8012c28:	4805      	ldr	r0, [pc, #20]	@ (8012c40 <fiprintf+0x20>)
 8012c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c2e:	6800      	ldr	r0, [r0, #0]
 8012c30:	9301      	str	r3, [sp, #4]
 8012c32:	f000 f83f 	bl	8012cb4 <_vfiprintf_r>
 8012c36:	b002      	add	sp, #8
 8012c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c3c:	b003      	add	sp, #12
 8012c3e:	4770      	bx	lr
 8012c40:	240001c4 	.word	0x240001c4

08012c44 <abort>:
 8012c44:	b508      	push	{r3, lr}
 8012c46:	2006      	movs	r0, #6
 8012c48:	f000 fa08 	bl	801305c <raise>
 8012c4c:	2001      	movs	r0, #1
 8012c4e:	f7ee fe61 	bl	8001914 <_exit>

08012c52 <_malloc_usable_size_r>:
 8012c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c56:	1f18      	subs	r0, r3, #4
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	bfbc      	itt	lt
 8012c5c:	580b      	ldrlt	r3, [r1, r0]
 8012c5e:	18c0      	addlt	r0, r0, r3
 8012c60:	4770      	bx	lr

08012c62 <__sfputc_r>:
 8012c62:	6893      	ldr	r3, [r2, #8]
 8012c64:	3b01      	subs	r3, #1
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	b410      	push	{r4}
 8012c6a:	6093      	str	r3, [r2, #8]
 8012c6c:	da08      	bge.n	8012c80 <__sfputc_r+0x1e>
 8012c6e:	6994      	ldr	r4, [r2, #24]
 8012c70:	42a3      	cmp	r3, r4
 8012c72:	db01      	blt.n	8012c78 <__sfputc_r+0x16>
 8012c74:	290a      	cmp	r1, #10
 8012c76:	d103      	bne.n	8012c80 <__sfputc_r+0x1e>
 8012c78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c7c:	f000 b932 	b.w	8012ee4 <__swbuf_r>
 8012c80:	6813      	ldr	r3, [r2, #0]
 8012c82:	1c58      	adds	r0, r3, #1
 8012c84:	6010      	str	r0, [r2, #0]
 8012c86:	7019      	strb	r1, [r3, #0]
 8012c88:	4608      	mov	r0, r1
 8012c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c8e:	4770      	bx	lr

08012c90 <__sfputs_r>:
 8012c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c92:	4606      	mov	r6, r0
 8012c94:	460f      	mov	r7, r1
 8012c96:	4614      	mov	r4, r2
 8012c98:	18d5      	adds	r5, r2, r3
 8012c9a:	42ac      	cmp	r4, r5
 8012c9c:	d101      	bne.n	8012ca2 <__sfputs_r+0x12>
 8012c9e:	2000      	movs	r0, #0
 8012ca0:	e007      	b.n	8012cb2 <__sfputs_r+0x22>
 8012ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ca6:	463a      	mov	r2, r7
 8012ca8:	4630      	mov	r0, r6
 8012caa:	f7ff ffda 	bl	8012c62 <__sfputc_r>
 8012cae:	1c43      	adds	r3, r0, #1
 8012cb0:	d1f3      	bne.n	8012c9a <__sfputs_r+0xa>
 8012cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012cb4 <_vfiprintf_r>:
 8012cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cb8:	460d      	mov	r5, r1
 8012cba:	b09d      	sub	sp, #116	@ 0x74
 8012cbc:	4614      	mov	r4, r2
 8012cbe:	4698      	mov	r8, r3
 8012cc0:	4606      	mov	r6, r0
 8012cc2:	b118      	cbz	r0, 8012ccc <_vfiprintf_r+0x18>
 8012cc4:	6a03      	ldr	r3, [r0, #32]
 8012cc6:	b90b      	cbnz	r3, 8012ccc <_vfiprintf_r+0x18>
 8012cc8:	f7fd f8ee 	bl	800fea8 <__sinit>
 8012ccc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012cce:	07d9      	lsls	r1, r3, #31
 8012cd0:	d405      	bmi.n	8012cde <_vfiprintf_r+0x2a>
 8012cd2:	89ab      	ldrh	r3, [r5, #12]
 8012cd4:	059a      	lsls	r2, r3, #22
 8012cd6:	d402      	bmi.n	8012cde <_vfiprintf_r+0x2a>
 8012cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012cda:	f7fd fa56 	bl	801018a <__retarget_lock_acquire_recursive>
 8012cde:	89ab      	ldrh	r3, [r5, #12]
 8012ce0:	071b      	lsls	r3, r3, #28
 8012ce2:	d501      	bpl.n	8012ce8 <_vfiprintf_r+0x34>
 8012ce4:	692b      	ldr	r3, [r5, #16]
 8012ce6:	b99b      	cbnz	r3, 8012d10 <_vfiprintf_r+0x5c>
 8012ce8:	4629      	mov	r1, r5
 8012cea:	4630      	mov	r0, r6
 8012cec:	f000 f938 	bl	8012f60 <__swsetup_r>
 8012cf0:	b170      	cbz	r0, 8012d10 <_vfiprintf_r+0x5c>
 8012cf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012cf4:	07dc      	lsls	r4, r3, #31
 8012cf6:	d504      	bpl.n	8012d02 <_vfiprintf_r+0x4e>
 8012cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8012cfc:	b01d      	add	sp, #116	@ 0x74
 8012cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d02:	89ab      	ldrh	r3, [r5, #12]
 8012d04:	0598      	lsls	r0, r3, #22
 8012d06:	d4f7      	bmi.n	8012cf8 <_vfiprintf_r+0x44>
 8012d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d0a:	f7fd fa3f 	bl	801018c <__retarget_lock_release_recursive>
 8012d0e:	e7f3      	b.n	8012cf8 <_vfiprintf_r+0x44>
 8012d10:	2300      	movs	r3, #0
 8012d12:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d14:	2320      	movs	r3, #32
 8012d16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012d1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d1e:	2330      	movs	r3, #48	@ 0x30
 8012d20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012ed0 <_vfiprintf_r+0x21c>
 8012d24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012d28:	f04f 0901 	mov.w	r9, #1
 8012d2c:	4623      	mov	r3, r4
 8012d2e:	469a      	mov	sl, r3
 8012d30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d34:	b10a      	cbz	r2, 8012d3a <_vfiprintf_r+0x86>
 8012d36:	2a25      	cmp	r2, #37	@ 0x25
 8012d38:	d1f9      	bne.n	8012d2e <_vfiprintf_r+0x7a>
 8012d3a:	ebba 0b04 	subs.w	fp, sl, r4
 8012d3e:	d00b      	beq.n	8012d58 <_vfiprintf_r+0xa4>
 8012d40:	465b      	mov	r3, fp
 8012d42:	4622      	mov	r2, r4
 8012d44:	4629      	mov	r1, r5
 8012d46:	4630      	mov	r0, r6
 8012d48:	f7ff ffa2 	bl	8012c90 <__sfputs_r>
 8012d4c:	3001      	adds	r0, #1
 8012d4e:	f000 80a7 	beq.w	8012ea0 <_vfiprintf_r+0x1ec>
 8012d52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d54:	445a      	add	r2, fp
 8012d56:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d58:	f89a 3000 	ldrb.w	r3, [sl]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	f000 809f 	beq.w	8012ea0 <_vfiprintf_r+0x1ec>
 8012d62:	2300      	movs	r3, #0
 8012d64:	f04f 32ff 	mov.w	r2, #4294967295
 8012d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d6c:	f10a 0a01 	add.w	sl, sl, #1
 8012d70:	9304      	str	r3, [sp, #16]
 8012d72:	9307      	str	r3, [sp, #28]
 8012d74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012d78:	931a      	str	r3, [sp, #104]	@ 0x68
 8012d7a:	4654      	mov	r4, sl
 8012d7c:	2205      	movs	r2, #5
 8012d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d82:	4853      	ldr	r0, [pc, #332]	@ (8012ed0 <_vfiprintf_r+0x21c>)
 8012d84:	f7ed fac4 	bl	8000310 <memchr>
 8012d88:	9a04      	ldr	r2, [sp, #16]
 8012d8a:	b9d8      	cbnz	r0, 8012dc4 <_vfiprintf_r+0x110>
 8012d8c:	06d1      	lsls	r1, r2, #27
 8012d8e:	bf44      	itt	mi
 8012d90:	2320      	movmi	r3, #32
 8012d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d96:	0713      	lsls	r3, r2, #28
 8012d98:	bf44      	itt	mi
 8012d9a:	232b      	movmi	r3, #43	@ 0x2b
 8012d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012da0:	f89a 3000 	ldrb.w	r3, [sl]
 8012da4:	2b2a      	cmp	r3, #42	@ 0x2a
 8012da6:	d015      	beq.n	8012dd4 <_vfiprintf_r+0x120>
 8012da8:	9a07      	ldr	r2, [sp, #28]
 8012daa:	4654      	mov	r4, sl
 8012dac:	2000      	movs	r0, #0
 8012dae:	f04f 0c0a 	mov.w	ip, #10
 8012db2:	4621      	mov	r1, r4
 8012db4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012db8:	3b30      	subs	r3, #48	@ 0x30
 8012dba:	2b09      	cmp	r3, #9
 8012dbc:	d94b      	bls.n	8012e56 <_vfiprintf_r+0x1a2>
 8012dbe:	b1b0      	cbz	r0, 8012dee <_vfiprintf_r+0x13a>
 8012dc0:	9207      	str	r2, [sp, #28]
 8012dc2:	e014      	b.n	8012dee <_vfiprintf_r+0x13a>
 8012dc4:	eba0 0308 	sub.w	r3, r0, r8
 8012dc8:	fa09 f303 	lsl.w	r3, r9, r3
 8012dcc:	4313      	orrs	r3, r2
 8012dce:	9304      	str	r3, [sp, #16]
 8012dd0:	46a2      	mov	sl, r4
 8012dd2:	e7d2      	b.n	8012d7a <_vfiprintf_r+0xc6>
 8012dd4:	9b03      	ldr	r3, [sp, #12]
 8012dd6:	1d19      	adds	r1, r3, #4
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	9103      	str	r1, [sp, #12]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	bfbb      	ittet	lt
 8012de0:	425b      	neglt	r3, r3
 8012de2:	f042 0202 	orrlt.w	r2, r2, #2
 8012de6:	9307      	strge	r3, [sp, #28]
 8012de8:	9307      	strlt	r3, [sp, #28]
 8012dea:	bfb8      	it	lt
 8012dec:	9204      	strlt	r2, [sp, #16]
 8012dee:	7823      	ldrb	r3, [r4, #0]
 8012df0:	2b2e      	cmp	r3, #46	@ 0x2e
 8012df2:	d10a      	bne.n	8012e0a <_vfiprintf_r+0x156>
 8012df4:	7863      	ldrb	r3, [r4, #1]
 8012df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8012df8:	d132      	bne.n	8012e60 <_vfiprintf_r+0x1ac>
 8012dfa:	9b03      	ldr	r3, [sp, #12]
 8012dfc:	1d1a      	adds	r2, r3, #4
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	9203      	str	r2, [sp, #12]
 8012e02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012e06:	3402      	adds	r4, #2
 8012e08:	9305      	str	r3, [sp, #20]
 8012e0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012ee0 <_vfiprintf_r+0x22c>
 8012e0e:	7821      	ldrb	r1, [r4, #0]
 8012e10:	2203      	movs	r2, #3
 8012e12:	4650      	mov	r0, sl
 8012e14:	f7ed fa7c 	bl	8000310 <memchr>
 8012e18:	b138      	cbz	r0, 8012e2a <_vfiprintf_r+0x176>
 8012e1a:	9b04      	ldr	r3, [sp, #16]
 8012e1c:	eba0 000a 	sub.w	r0, r0, sl
 8012e20:	2240      	movs	r2, #64	@ 0x40
 8012e22:	4082      	lsls	r2, r0
 8012e24:	4313      	orrs	r3, r2
 8012e26:	3401      	adds	r4, #1
 8012e28:	9304      	str	r3, [sp, #16]
 8012e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e2e:	4829      	ldr	r0, [pc, #164]	@ (8012ed4 <_vfiprintf_r+0x220>)
 8012e30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012e34:	2206      	movs	r2, #6
 8012e36:	f7ed fa6b 	bl	8000310 <memchr>
 8012e3a:	2800      	cmp	r0, #0
 8012e3c:	d03f      	beq.n	8012ebe <_vfiprintf_r+0x20a>
 8012e3e:	4b26      	ldr	r3, [pc, #152]	@ (8012ed8 <_vfiprintf_r+0x224>)
 8012e40:	bb1b      	cbnz	r3, 8012e8a <_vfiprintf_r+0x1d6>
 8012e42:	9b03      	ldr	r3, [sp, #12]
 8012e44:	3307      	adds	r3, #7
 8012e46:	f023 0307 	bic.w	r3, r3, #7
 8012e4a:	3308      	adds	r3, #8
 8012e4c:	9303      	str	r3, [sp, #12]
 8012e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e50:	443b      	add	r3, r7
 8012e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e54:	e76a      	b.n	8012d2c <_vfiprintf_r+0x78>
 8012e56:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e5a:	460c      	mov	r4, r1
 8012e5c:	2001      	movs	r0, #1
 8012e5e:	e7a8      	b.n	8012db2 <_vfiprintf_r+0xfe>
 8012e60:	2300      	movs	r3, #0
 8012e62:	3401      	adds	r4, #1
 8012e64:	9305      	str	r3, [sp, #20]
 8012e66:	4619      	mov	r1, r3
 8012e68:	f04f 0c0a 	mov.w	ip, #10
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e72:	3a30      	subs	r2, #48	@ 0x30
 8012e74:	2a09      	cmp	r2, #9
 8012e76:	d903      	bls.n	8012e80 <_vfiprintf_r+0x1cc>
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d0c6      	beq.n	8012e0a <_vfiprintf_r+0x156>
 8012e7c:	9105      	str	r1, [sp, #20]
 8012e7e:	e7c4      	b.n	8012e0a <_vfiprintf_r+0x156>
 8012e80:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e84:	4604      	mov	r4, r0
 8012e86:	2301      	movs	r3, #1
 8012e88:	e7f0      	b.n	8012e6c <_vfiprintf_r+0x1b8>
 8012e8a:	ab03      	add	r3, sp, #12
 8012e8c:	9300      	str	r3, [sp, #0]
 8012e8e:	462a      	mov	r2, r5
 8012e90:	4b12      	ldr	r3, [pc, #72]	@ (8012edc <_vfiprintf_r+0x228>)
 8012e92:	a904      	add	r1, sp, #16
 8012e94:	4630      	mov	r0, r6
 8012e96:	f7fc f9c7 	bl	800f228 <_printf_float>
 8012e9a:	4607      	mov	r7, r0
 8012e9c:	1c78      	adds	r0, r7, #1
 8012e9e:	d1d6      	bne.n	8012e4e <_vfiprintf_r+0x19a>
 8012ea0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012ea2:	07d9      	lsls	r1, r3, #31
 8012ea4:	d405      	bmi.n	8012eb2 <_vfiprintf_r+0x1fe>
 8012ea6:	89ab      	ldrh	r3, [r5, #12]
 8012ea8:	059a      	lsls	r2, r3, #22
 8012eaa:	d402      	bmi.n	8012eb2 <_vfiprintf_r+0x1fe>
 8012eac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012eae:	f7fd f96d 	bl	801018c <__retarget_lock_release_recursive>
 8012eb2:	89ab      	ldrh	r3, [r5, #12]
 8012eb4:	065b      	lsls	r3, r3, #25
 8012eb6:	f53f af1f 	bmi.w	8012cf8 <_vfiprintf_r+0x44>
 8012eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ebc:	e71e      	b.n	8012cfc <_vfiprintf_r+0x48>
 8012ebe:	ab03      	add	r3, sp, #12
 8012ec0:	9300      	str	r3, [sp, #0]
 8012ec2:	462a      	mov	r2, r5
 8012ec4:	4b05      	ldr	r3, [pc, #20]	@ (8012edc <_vfiprintf_r+0x228>)
 8012ec6:	a904      	add	r1, sp, #16
 8012ec8:	4630      	mov	r0, r6
 8012eca:	f7fc fc35 	bl	800f738 <_printf_i>
 8012ece:	e7e4      	b.n	8012e9a <_vfiprintf_r+0x1e6>
 8012ed0:	080136c9 	.word	0x080136c9
 8012ed4:	080136d3 	.word	0x080136d3
 8012ed8:	0800f229 	.word	0x0800f229
 8012edc:	08012c91 	.word	0x08012c91
 8012ee0:	080136cf 	.word	0x080136cf

08012ee4 <__swbuf_r>:
 8012ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ee6:	460e      	mov	r6, r1
 8012ee8:	4614      	mov	r4, r2
 8012eea:	4605      	mov	r5, r0
 8012eec:	b118      	cbz	r0, 8012ef6 <__swbuf_r+0x12>
 8012eee:	6a03      	ldr	r3, [r0, #32]
 8012ef0:	b90b      	cbnz	r3, 8012ef6 <__swbuf_r+0x12>
 8012ef2:	f7fc ffd9 	bl	800fea8 <__sinit>
 8012ef6:	69a3      	ldr	r3, [r4, #24]
 8012ef8:	60a3      	str	r3, [r4, #8]
 8012efa:	89a3      	ldrh	r3, [r4, #12]
 8012efc:	071a      	lsls	r2, r3, #28
 8012efe:	d501      	bpl.n	8012f04 <__swbuf_r+0x20>
 8012f00:	6923      	ldr	r3, [r4, #16]
 8012f02:	b943      	cbnz	r3, 8012f16 <__swbuf_r+0x32>
 8012f04:	4621      	mov	r1, r4
 8012f06:	4628      	mov	r0, r5
 8012f08:	f000 f82a 	bl	8012f60 <__swsetup_r>
 8012f0c:	b118      	cbz	r0, 8012f16 <__swbuf_r+0x32>
 8012f0e:	f04f 37ff 	mov.w	r7, #4294967295
 8012f12:	4638      	mov	r0, r7
 8012f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f16:	6823      	ldr	r3, [r4, #0]
 8012f18:	6922      	ldr	r2, [r4, #16]
 8012f1a:	1a98      	subs	r0, r3, r2
 8012f1c:	6963      	ldr	r3, [r4, #20]
 8012f1e:	b2f6      	uxtb	r6, r6
 8012f20:	4283      	cmp	r3, r0
 8012f22:	4637      	mov	r7, r6
 8012f24:	dc05      	bgt.n	8012f32 <__swbuf_r+0x4e>
 8012f26:	4621      	mov	r1, r4
 8012f28:	4628      	mov	r0, r5
 8012f2a:	f7ff fcf3 	bl	8012914 <_fflush_r>
 8012f2e:	2800      	cmp	r0, #0
 8012f30:	d1ed      	bne.n	8012f0e <__swbuf_r+0x2a>
 8012f32:	68a3      	ldr	r3, [r4, #8]
 8012f34:	3b01      	subs	r3, #1
 8012f36:	60a3      	str	r3, [r4, #8]
 8012f38:	6823      	ldr	r3, [r4, #0]
 8012f3a:	1c5a      	adds	r2, r3, #1
 8012f3c:	6022      	str	r2, [r4, #0]
 8012f3e:	701e      	strb	r6, [r3, #0]
 8012f40:	6962      	ldr	r2, [r4, #20]
 8012f42:	1c43      	adds	r3, r0, #1
 8012f44:	429a      	cmp	r2, r3
 8012f46:	d004      	beq.n	8012f52 <__swbuf_r+0x6e>
 8012f48:	89a3      	ldrh	r3, [r4, #12]
 8012f4a:	07db      	lsls	r3, r3, #31
 8012f4c:	d5e1      	bpl.n	8012f12 <__swbuf_r+0x2e>
 8012f4e:	2e0a      	cmp	r6, #10
 8012f50:	d1df      	bne.n	8012f12 <__swbuf_r+0x2e>
 8012f52:	4621      	mov	r1, r4
 8012f54:	4628      	mov	r0, r5
 8012f56:	f7ff fcdd 	bl	8012914 <_fflush_r>
 8012f5a:	2800      	cmp	r0, #0
 8012f5c:	d0d9      	beq.n	8012f12 <__swbuf_r+0x2e>
 8012f5e:	e7d6      	b.n	8012f0e <__swbuf_r+0x2a>

08012f60 <__swsetup_r>:
 8012f60:	b538      	push	{r3, r4, r5, lr}
 8012f62:	4b29      	ldr	r3, [pc, #164]	@ (8013008 <__swsetup_r+0xa8>)
 8012f64:	4605      	mov	r5, r0
 8012f66:	6818      	ldr	r0, [r3, #0]
 8012f68:	460c      	mov	r4, r1
 8012f6a:	b118      	cbz	r0, 8012f74 <__swsetup_r+0x14>
 8012f6c:	6a03      	ldr	r3, [r0, #32]
 8012f6e:	b90b      	cbnz	r3, 8012f74 <__swsetup_r+0x14>
 8012f70:	f7fc ff9a 	bl	800fea8 <__sinit>
 8012f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f78:	0719      	lsls	r1, r3, #28
 8012f7a:	d422      	bmi.n	8012fc2 <__swsetup_r+0x62>
 8012f7c:	06da      	lsls	r2, r3, #27
 8012f7e:	d407      	bmi.n	8012f90 <__swsetup_r+0x30>
 8012f80:	2209      	movs	r2, #9
 8012f82:	602a      	str	r2, [r5, #0]
 8012f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f88:	81a3      	strh	r3, [r4, #12]
 8012f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8012f8e:	e033      	b.n	8012ff8 <__swsetup_r+0x98>
 8012f90:	0758      	lsls	r0, r3, #29
 8012f92:	d512      	bpl.n	8012fba <__swsetup_r+0x5a>
 8012f94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f96:	b141      	cbz	r1, 8012faa <__swsetup_r+0x4a>
 8012f98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f9c:	4299      	cmp	r1, r3
 8012f9e:	d002      	beq.n	8012fa6 <__swsetup_r+0x46>
 8012fa0:	4628      	mov	r0, r5
 8012fa2:	f7fd fef3 	bl	8010d8c <_free_r>
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8012faa:	89a3      	ldrh	r3, [r4, #12]
 8012fac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012fb0:	81a3      	strh	r3, [r4, #12]
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	6063      	str	r3, [r4, #4]
 8012fb6:	6923      	ldr	r3, [r4, #16]
 8012fb8:	6023      	str	r3, [r4, #0]
 8012fba:	89a3      	ldrh	r3, [r4, #12]
 8012fbc:	f043 0308 	orr.w	r3, r3, #8
 8012fc0:	81a3      	strh	r3, [r4, #12]
 8012fc2:	6923      	ldr	r3, [r4, #16]
 8012fc4:	b94b      	cbnz	r3, 8012fda <__swsetup_r+0x7a>
 8012fc6:	89a3      	ldrh	r3, [r4, #12]
 8012fc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012fd0:	d003      	beq.n	8012fda <__swsetup_r+0x7a>
 8012fd2:	4621      	mov	r1, r4
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	f000 f883 	bl	80130e0 <__smakebuf_r>
 8012fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fde:	f013 0201 	ands.w	r2, r3, #1
 8012fe2:	d00a      	beq.n	8012ffa <__swsetup_r+0x9a>
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	60a2      	str	r2, [r4, #8]
 8012fe8:	6962      	ldr	r2, [r4, #20]
 8012fea:	4252      	negs	r2, r2
 8012fec:	61a2      	str	r2, [r4, #24]
 8012fee:	6922      	ldr	r2, [r4, #16]
 8012ff0:	b942      	cbnz	r2, 8013004 <__swsetup_r+0xa4>
 8012ff2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012ff6:	d1c5      	bne.n	8012f84 <__swsetup_r+0x24>
 8012ff8:	bd38      	pop	{r3, r4, r5, pc}
 8012ffa:	0799      	lsls	r1, r3, #30
 8012ffc:	bf58      	it	pl
 8012ffe:	6962      	ldrpl	r2, [r4, #20]
 8013000:	60a2      	str	r2, [r4, #8]
 8013002:	e7f4      	b.n	8012fee <__swsetup_r+0x8e>
 8013004:	2000      	movs	r0, #0
 8013006:	e7f7      	b.n	8012ff8 <__swsetup_r+0x98>
 8013008:	240001c4 	.word	0x240001c4

0801300c <_raise_r>:
 801300c:	291f      	cmp	r1, #31
 801300e:	b538      	push	{r3, r4, r5, lr}
 8013010:	4605      	mov	r5, r0
 8013012:	460c      	mov	r4, r1
 8013014:	d904      	bls.n	8013020 <_raise_r+0x14>
 8013016:	2316      	movs	r3, #22
 8013018:	6003      	str	r3, [r0, #0]
 801301a:	f04f 30ff 	mov.w	r0, #4294967295
 801301e:	bd38      	pop	{r3, r4, r5, pc}
 8013020:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013022:	b112      	cbz	r2, 801302a <_raise_r+0x1e>
 8013024:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013028:	b94b      	cbnz	r3, 801303e <_raise_r+0x32>
 801302a:	4628      	mov	r0, r5
 801302c:	f000 f830 	bl	8013090 <_getpid_r>
 8013030:	4622      	mov	r2, r4
 8013032:	4601      	mov	r1, r0
 8013034:	4628      	mov	r0, r5
 8013036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801303a:	f000 b817 	b.w	801306c <_kill_r>
 801303e:	2b01      	cmp	r3, #1
 8013040:	d00a      	beq.n	8013058 <_raise_r+0x4c>
 8013042:	1c59      	adds	r1, r3, #1
 8013044:	d103      	bne.n	801304e <_raise_r+0x42>
 8013046:	2316      	movs	r3, #22
 8013048:	6003      	str	r3, [r0, #0]
 801304a:	2001      	movs	r0, #1
 801304c:	e7e7      	b.n	801301e <_raise_r+0x12>
 801304e:	2100      	movs	r1, #0
 8013050:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013054:	4620      	mov	r0, r4
 8013056:	4798      	blx	r3
 8013058:	2000      	movs	r0, #0
 801305a:	e7e0      	b.n	801301e <_raise_r+0x12>

0801305c <raise>:
 801305c:	4b02      	ldr	r3, [pc, #8]	@ (8013068 <raise+0xc>)
 801305e:	4601      	mov	r1, r0
 8013060:	6818      	ldr	r0, [r3, #0]
 8013062:	f7ff bfd3 	b.w	801300c <_raise_r>
 8013066:	bf00      	nop
 8013068:	240001c4 	.word	0x240001c4

0801306c <_kill_r>:
 801306c:	b538      	push	{r3, r4, r5, lr}
 801306e:	4d07      	ldr	r5, [pc, #28]	@ (801308c <_kill_r+0x20>)
 8013070:	2300      	movs	r3, #0
 8013072:	4604      	mov	r4, r0
 8013074:	4608      	mov	r0, r1
 8013076:	4611      	mov	r1, r2
 8013078:	602b      	str	r3, [r5, #0]
 801307a:	f7ee fc3b 	bl	80018f4 <_kill>
 801307e:	1c43      	adds	r3, r0, #1
 8013080:	d102      	bne.n	8013088 <_kill_r+0x1c>
 8013082:	682b      	ldr	r3, [r5, #0]
 8013084:	b103      	cbz	r3, 8013088 <_kill_r+0x1c>
 8013086:	6023      	str	r3, [r4, #0]
 8013088:	bd38      	pop	{r3, r4, r5, pc}
 801308a:	bf00      	nop
 801308c:	24000ec4 	.word	0x24000ec4

08013090 <_getpid_r>:
 8013090:	f7ee bc28 	b.w	80018e4 <_getpid>

08013094 <__swhatbuf_r>:
 8013094:	b570      	push	{r4, r5, r6, lr}
 8013096:	460c      	mov	r4, r1
 8013098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801309c:	2900      	cmp	r1, #0
 801309e:	b096      	sub	sp, #88	@ 0x58
 80130a0:	4615      	mov	r5, r2
 80130a2:	461e      	mov	r6, r3
 80130a4:	da0d      	bge.n	80130c2 <__swhatbuf_r+0x2e>
 80130a6:	89a3      	ldrh	r3, [r4, #12]
 80130a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80130ac:	f04f 0100 	mov.w	r1, #0
 80130b0:	bf14      	ite	ne
 80130b2:	2340      	movne	r3, #64	@ 0x40
 80130b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80130b8:	2000      	movs	r0, #0
 80130ba:	6031      	str	r1, [r6, #0]
 80130bc:	602b      	str	r3, [r5, #0]
 80130be:	b016      	add	sp, #88	@ 0x58
 80130c0:	bd70      	pop	{r4, r5, r6, pc}
 80130c2:	466a      	mov	r2, sp
 80130c4:	f000 f848 	bl	8013158 <_fstat_r>
 80130c8:	2800      	cmp	r0, #0
 80130ca:	dbec      	blt.n	80130a6 <__swhatbuf_r+0x12>
 80130cc:	9901      	ldr	r1, [sp, #4]
 80130ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80130d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80130d6:	4259      	negs	r1, r3
 80130d8:	4159      	adcs	r1, r3
 80130da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80130de:	e7eb      	b.n	80130b8 <__swhatbuf_r+0x24>

080130e0 <__smakebuf_r>:
 80130e0:	898b      	ldrh	r3, [r1, #12]
 80130e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130e4:	079d      	lsls	r5, r3, #30
 80130e6:	4606      	mov	r6, r0
 80130e8:	460c      	mov	r4, r1
 80130ea:	d507      	bpl.n	80130fc <__smakebuf_r+0x1c>
 80130ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80130f0:	6023      	str	r3, [r4, #0]
 80130f2:	6123      	str	r3, [r4, #16]
 80130f4:	2301      	movs	r3, #1
 80130f6:	6163      	str	r3, [r4, #20]
 80130f8:	b003      	add	sp, #12
 80130fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130fc:	ab01      	add	r3, sp, #4
 80130fe:	466a      	mov	r2, sp
 8013100:	f7ff ffc8 	bl	8013094 <__swhatbuf_r>
 8013104:	9f00      	ldr	r7, [sp, #0]
 8013106:	4605      	mov	r5, r0
 8013108:	4639      	mov	r1, r7
 801310a:	4630      	mov	r0, r6
 801310c:	f7fb f9b8 	bl	800e480 <_malloc_r>
 8013110:	b948      	cbnz	r0, 8013126 <__smakebuf_r+0x46>
 8013112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013116:	059a      	lsls	r2, r3, #22
 8013118:	d4ee      	bmi.n	80130f8 <__smakebuf_r+0x18>
 801311a:	f023 0303 	bic.w	r3, r3, #3
 801311e:	f043 0302 	orr.w	r3, r3, #2
 8013122:	81a3      	strh	r3, [r4, #12]
 8013124:	e7e2      	b.n	80130ec <__smakebuf_r+0xc>
 8013126:	89a3      	ldrh	r3, [r4, #12]
 8013128:	6020      	str	r0, [r4, #0]
 801312a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801312e:	81a3      	strh	r3, [r4, #12]
 8013130:	9b01      	ldr	r3, [sp, #4]
 8013132:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013136:	b15b      	cbz	r3, 8013150 <__smakebuf_r+0x70>
 8013138:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801313c:	4630      	mov	r0, r6
 801313e:	f000 f81d 	bl	801317c <_isatty_r>
 8013142:	b128      	cbz	r0, 8013150 <__smakebuf_r+0x70>
 8013144:	89a3      	ldrh	r3, [r4, #12]
 8013146:	f023 0303 	bic.w	r3, r3, #3
 801314a:	f043 0301 	orr.w	r3, r3, #1
 801314e:	81a3      	strh	r3, [r4, #12]
 8013150:	89a3      	ldrh	r3, [r4, #12]
 8013152:	431d      	orrs	r5, r3
 8013154:	81a5      	strh	r5, [r4, #12]
 8013156:	e7cf      	b.n	80130f8 <__smakebuf_r+0x18>

08013158 <_fstat_r>:
 8013158:	b538      	push	{r3, r4, r5, lr}
 801315a:	4d07      	ldr	r5, [pc, #28]	@ (8013178 <_fstat_r+0x20>)
 801315c:	2300      	movs	r3, #0
 801315e:	4604      	mov	r4, r0
 8013160:	4608      	mov	r0, r1
 8013162:	4611      	mov	r1, r2
 8013164:	602b      	str	r3, [r5, #0]
 8013166:	f7ee fc25 	bl	80019b4 <_fstat>
 801316a:	1c43      	adds	r3, r0, #1
 801316c:	d102      	bne.n	8013174 <_fstat_r+0x1c>
 801316e:	682b      	ldr	r3, [r5, #0]
 8013170:	b103      	cbz	r3, 8013174 <_fstat_r+0x1c>
 8013172:	6023      	str	r3, [r4, #0]
 8013174:	bd38      	pop	{r3, r4, r5, pc}
 8013176:	bf00      	nop
 8013178:	24000ec4 	.word	0x24000ec4

0801317c <_isatty_r>:
 801317c:	b538      	push	{r3, r4, r5, lr}
 801317e:	4d06      	ldr	r5, [pc, #24]	@ (8013198 <_isatty_r+0x1c>)
 8013180:	2300      	movs	r3, #0
 8013182:	4604      	mov	r4, r0
 8013184:	4608      	mov	r0, r1
 8013186:	602b      	str	r3, [r5, #0]
 8013188:	f7ee fc24 	bl	80019d4 <_isatty>
 801318c:	1c43      	adds	r3, r0, #1
 801318e:	d102      	bne.n	8013196 <_isatty_r+0x1a>
 8013190:	682b      	ldr	r3, [r5, #0]
 8013192:	b103      	cbz	r3, 8013196 <_isatty_r+0x1a>
 8013194:	6023      	str	r3, [r4, #0]
 8013196:	bd38      	pop	{r3, r4, r5, pc}
 8013198:	24000ec4 	.word	0x24000ec4

0801319c <_init>:
 801319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801319e:	bf00      	nop
 80131a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131a2:	bc08      	pop	{r3}
 80131a4:	469e      	mov	lr, r3
 80131a6:	4770      	bx	lr

080131a8 <_fini>:
 80131a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131aa:	bf00      	nop
 80131ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131ae:	bc08      	pop	{r3}
 80131b0:	469e      	mov	lr, r3
 80131b2:	4770      	bx	lr
