
Gongxun_Taolin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012904  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08012bd8  08012bd8  00013bd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013154  08013154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801315c  0801315c  0001415c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013160  08013160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000234  24000000  08013164  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c3c  24000234  08013398  00015234  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000e70  08013398  00015e70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015234  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021bed  00000000  00000000  00015262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000464b  00000000  00000000  00036e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ad8  00000000  00000000  0003b4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014e5  00000000  00000000  0003cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037dc0  00000000  00000000  0003e45d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002935b  00000000  00000000  0007621d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159a29  00000000  00000000  0009f578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f8fa1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008570  00000000  00000000  001f8fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004f  00000000  00000000  00201554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000234 	.word	0x24000234
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012bbc 	.word	0x08012bbc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000238 	.word	0x24000238
 800030c:	08012bbc 	.word	0x08012bbc

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af02      	add	r7, sp, #8
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 8000a9e:	4b43      	ldr	r3, [pc, #268]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa0:	4a43      	ldr	r2, [pc, #268]	@ (8000bb0 <MX_FDCAN1_Init+0x118>)
 8000aa2:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000aa4:	4b41      	ldr	r3, [pc, #260]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000aaa:	4b40      	ldr	r3, [pc, #256]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000abc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 10;
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000ac8:	4b38      	ldr	r3, [pc, #224]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ace:	4b37      	ldr	r3, [pc, #220]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ad4:	4b35      	ldr	r3, [pc, #212]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8000ada:	4b34      	ldr	r3, [pc, #208]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 10;
 8000ae0:	4b32      	ldr	r3, [pc, #200]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 2;
 8000ae6:	4b31      	ldr	r3, [pc, #196]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 2;
 8000aec:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 1;
 8000afe:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8000b04:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b06:	2204      	movs	r2, #4
 8000b08:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b18:	2204      	movs	r2, #4
 8000b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b22:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b46:	4819      	ldr	r0, [pc, #100]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b48:	f003 f87a 	bl	8003c40 <HAL_FDCAN_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_FDCAN1_Init+0xbe>
	{
		Error_Handler();
 8000b52:	f000 fe61 	bl	8001818 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */
//配置RX滤波
	hfdcan1_RX_Filter.IdType = FDCAN_EXTENDED_ID;       //标准 IDFDCAN_STANDARD_ID
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5c:	601a      	str	r2, [r3, #0]
	hfdcan1_RX_Filter.FilterIndex = 0;                           //滤波器索�????????
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
	hfdcan1_RX_Filter.FilterType = FDCAN_FILTER_MASK;            //滤波器类�????????
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	609a      	str	r2, [r3, #8]
	hfdcan1_RX_Filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //过滤�????????0关联到FIFO0
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
	hfdcan1_RX_Filter.FilterID1 = 0x000;                               //32位ID
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
	hfdcan1_RX_Filter.FilterID2 = 0x000; //如果FDCAN配置为传统模式的话，这里�????????32位掩�????????
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan1_RX_Filter);               //滤波器初始化
 8000b7c:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b7e:	480b      	ldr	r0, [pc, #44]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b80:	f003 fa3c 	bl	8003ffc <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, ENABLE,
 8000b84:	2301      	movs	r3, #1
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b90:	f003 faaa 	bl	80040e8 <HAL_FDCAN_ConfigGlobalFilter>
			ENABLE);
	HAL_FDCAN_Start(&hfdcan1);                               //�???启FDCAN
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b96:	f003 fad4 	bl	8004142 <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ba0:	f003 fcc2 	bl	8004528 <HAL_FDCAN_ActivateNotification>
	/* USER CODE END FDCAN1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	240002c0 	.word	0x240002c0
 8000bb0:	4000a000 	.word	0x4000a000
 8000bb4:	24000250 	.word	0x24000250

08000bb8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef *fdcanHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0b8      	sub	sp, #224	@ 0xe0
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 8000bc0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	22b8      	movs	r2, #184	@ 0xb8
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f00e ff3a 	bl	800fa52 <memset>
	{ 0 };
	if (fdcanHandle->Instance == FDCAN1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c8c <HAL_FDCAN_MspInit+0xd4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d14c      	bne.n	8000c82 <HAL_FDCAN_MspInit+0xca>

		/* USER CODE END FDCAN1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000be8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f005 fb51 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_FDCAN_MspInit+0x54>
		{
			Error_Handler();
 8000c08:	f000 fe06 	bl	8001818 <Error_Handler>
		}

		/* FDCAN1 clock enable */
		__HAL_RCC_FDCAN_CLK_ENABLE();
 8000c0c:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c12:	4a1f      	ldr	r2, [pc, #124]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	4a17      	ldr	r2, [pc, #92]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
		/**FDCAN1 GPIO Configuration
		 PD0     ------> FDCAN1_RX
		 PD1     ------> FDCAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c60:	2309      	movs	r3, #9
 8000c62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <HAL_FDCAN_MspInit+0xdc>)
 8000c6e:	f004 f9d1 	bl	8005014 <HAL_GPIO_Init>

		/* FDCAN1 interrupt Init */
		HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 2, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2102      	movs	r1, #2
 8000c76:	2013      	movs	r0, #19
 8000c78:	f002 f9d1 	bl	800301e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c7c:	2013      	movs	r0, #19
 8000c7e:	f002 f9e8 	bl	8003052 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN FDCAN1_MspInit 1 */

		/* USER CODE END FDCAN1_MspInit 1 */
	}
}
 8000c82:	bf00      	nop
 8000c84:	37e0      	adds	r7, #224	@ 0xe0
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	4000a000 	.word	0x4000a000
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020c00 	.word	0x58020c00

08000c98 <FDCAN_Send_Msg>:
	}
}

/* USER CODE BEGIN 1 */
void FDCAN_Send_Msg(uint8_t *msg, uint32_t len)
{
 8000c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c9c:	b087      	sub	sp, #28
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
 8000ca4:	466b      	mov	r3, sp
 8000ca6:	461e      	mov	r6, r3
	uint8_t i = 0, j = 0, k = 0, l = 0, packNum = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	75fb      	strb	r3, [r7, #23]
 8000cac:	2300      	movs	r3, #0
 8000cae:	753b      	strb	r3, [r7, #20]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	74fb      	strb	r3, [r7, #19]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75bb      	strb	r3, [r7, #22]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	757b      	strb	r3, [r7, #21]
	uint8_t TxData[len];
 8000cbc:	6839      	ldr	r1, [r7, #0]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4688      	mov	r8, r1
 8000cc8:	4699      	mov	r9, r3
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cde:	2300      	movs	r3, #0
 8000ce0:	460c      	mov	r4, r1
 8000ce2:	461d      	mov	r5, r3
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	00eb      	lsls	r3, r5, #3
 8000cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cf2:	00e2      	lsls	r2, r4, #3
 8000cf4:	1dcb      	adds	r3, r1, #7
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	ebad 0d03 	sub.w	sp, sp, r3
 8000cfe:	466b      	mov	r3, sp
 8000d00:	3300      	adds	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
	j = len - 2;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	3b02      	subs	r3, #2
 8000d0a:	753b      	strb	r3, [r7, #20]
	// 除去ID地址和功能码后的数据长度
	TxData[0] = msg[1];
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	785a      	ldrb	r2, [r3, #1]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	701a      	strb	r2, [r3, #0]
	// 发�?�数�????????
	while (i < j)
 8000d14:	e062      	b.n	8000ddc <FDCAN_Send_Msg+0x144>
	{
		// 数据个数
		k = j - i;
 8000d16:	7d3a      	ldrb	r2, [r7, #20]
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	74fb      	strb	r3, [r7, #19]
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	021a      	lsls	r2, r3, #8
				| (uint32_t) packNum;  //32位ID   0x00
 8000d24:	7d7b      	ldrb	r3, [r7, #21]
 8000d26:	4313      	orrs	r3, r2
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d28:	4a31      	ldr	r2, [pc, #196]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2a:	6013      	str	r3, [r2, #0]
		fdcan_TxHeader.IdType = FDCAN_EXTENDED_ID;      //ID   FDCAN_STANDARD_ID
 8000d2c:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d32:	605a      	str	r2, [r3, #4]
		fdcan_TxHeader.TxFrameType = FDCAN_DATA_FRAME;             //数据�????????
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
		//    fdcan_TxHeader.DataLength=len;              //数据长度
		fdcan_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
		fdcan_TxHeader.BitRateSwitch = FDCAN_BRS_OFF;               //关闭速率切换
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
		fdcan_TxHeader.FDFormat = FDCAN_CLASSIC_CAN;                //传统的CAN模式
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
		fdcan_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;  //无发送事�????????
 8000d4c:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
		fdcan_TxHeader.MessageMarker = 0;
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
		//小于8字节命令
		if (k < 8)
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	2b07      	cmp	r3, #7
 8000d5c:	d81b      	bhi.n	8000d96 <FDCAN_Send_Msg+0xfe>
		{
			for (l = 0; l < k; l++, i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75bb      	strb	r3, [r7, #22]
 8000d62:	e00e      	b.n	8000d82 <FDCAN_Send_Msg+0xea>
			{
				TxData[l + 1] = msg[i + 2];
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	3302      	adds	r3, #2
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	441a      	add	r2, r3
 8000d6c:	7dbb      	ldrb	r3, [r7, #22]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	7811      	ldrb	r1, [r2, #0]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < k; l++, i++)
 8000d76:	7dbb      	ldrb	r3, [r7, #22]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	75bb      	strb	r3, [r7, #22]
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	75fb      	strb	r3, [r7, #23]
 8000d82:	7dba      	ldrb	r2, [r7, #22]
 8000d84:	7cfb      	ldrb	r3, [r7, #19]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3ec      	bcc.n	8000d64 <FDCAN_Send_Msg+0xcc>
			}
			fdcan_TxHeader.DataLength = k + 1;
 8000d8a:	7cfb      	ldrb	r3, [r7, #19]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	e017      	b.n	8000dc6 <FDCAN_Send_Msg+0x12e>
		}
		// 大于8字节命令，分包发送，每包数据�????????多发�????????8个字�????????
		else
		{
			for (l = 0; l < 7; l++, i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	75bb      	strb	r3, [r7, #22]
 8000d9a:	e00e      	b.n	8000dba <FDCAN_Send_Msg+0x122>
			{
				TxData[l + 1] = msg[i + 2];
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	3302      	adds	r3, #2
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	441a      	add	r2, r3
 8000da4:	7dbb      	ldrb	r3, [r7, #22]
 8000da6:	3301      	adds	r3, #1
 8000da8:	7811      	ldrb	r1, [r2, #0]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < 7; l++, i++)
 8000dae:	7dbb      	ldrb	r3, [r7, #22]
 8000db0:	3301      	adds	r3, #1
 8000db2:	75bb      	strb	r3, [r7, #22]
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	3301      	adds	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
 8000dba:	7dbb      	ldrb	r3, [r7, #22]
 8000dbc:	2b06      	cmp	r3, #6
 8000dbe:	d9ed      	bls.n	8000d9c <FDCAN_Send_Msg+0x104>
			}
			fdcan_TxHeader.DataLength = 8;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	60da      	str	r2, [r3, #12]
		}

		// 发�?�数�??????
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &fdcan_TxHeader, TxData);
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	4909      	ldr	r1, [pc, #36]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dca:	480a      	ldr	r0, [pc, #40]	@ (8000df4 <FDCAN_Send_Msg+0x15c>)
 8000dcc:	f003 f9e4 	bl	8004198 <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(5);  //发第二帧数据的关键，若无延时，不发第二帧数据
 8000dd0:	2005      	movs	r0, #5
 8000dd2:	f002 f825 	bl	8002e20 <HAL_Delay>
		// 记录发�?�的第几包的数据
		++packNum;
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	757b      	strb	r3, [r7, #21]
	while (i < j)
 8000ddc:	7dfa      	ldrb	r2, [r7, #23]
 8000dde:	7d3b      	ldrb	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d398      	bcc.n	8000d16 <FDCAN_Send_Msg+0x7e>
 8000de4:	46b5      	mov	sp, r6
	}
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df0:	24000270 	.word	0x24000270
 8000df4:	240002c0 	.word	0x240002c0

08000df8 <HAL_FDCAN_RxFifo0Callback>:
bool Top_Data = false;
// 允许查询状态标志位
extern bool Call_Flag;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
//	提取FIFO中的数据,
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &fdcan_RxHeader, rxdata);
 8000e02:	4b34      	ldr	r3, [pc, #208]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e04:	4a34      	ldr	r2, [pc, #208]	@ (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000e06:	2140      	movs	r1, #64	@ 0x40
 8000e08:	4834      	ldr	r0, [pc, #208]	@ (8000edc <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000e0a:	f003 fa21 	bl	8004250 <HAL_FDCAN_GetRxMessage>
	if (Call_Flag == true)
 8000e0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d054      	beq.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
	{
//	底盘步进电机帧头
		if (fdcan_RxHeader.Identifier / 256 == 2)
 8000e16:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8000e1e:	2bff      	cmp	r3, #255	@ 0xff
 8000e20:	d824      	bhi.n	8000e6c <HAL_FDCAN_RxFifo0Callback+0x74>
		{
			if (RxState == 0)
 8000e22:	4b30      	ldr	r3, [pc, #192]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d106      	bne.n	8000e38 <HAL_FDCAN_RxFifo0Callback+0x40>
			{
				if (rxdata[0] == 0xFD)
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e30:	d102      	bne.n	8000e38 <HAL_FDCAN_RxFifo0Callback+0x40>
				{
					RxState = 1;
 8000e32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 1)
 8000e38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d106      	bne.n	8000e4e <HAL_FDCAN_RxFifo0Callback+0x56>
			{
				if (rxdata[1] == 0x9F)
 8000e40:	4b24      	ldr	r3, [pc, #144]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e42:	785b      	ldrb	r3, [r3, #1]
 8000e44:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e46:	d102      	bne.n	8000e4e <HAL_FDCAN_RxFifo0Callback+0x56>
				{
					RxState = 2;
 8000e48:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 2)
 8000e4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d134      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
			{
				if (rxdata[2] == 0x6B)
 8000e56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e58:	789b      	ldrb	r3, [r3, #2]
 8000e5a:	2b6b      	cmp	r3, #107	@ 0x6b
 8000e5c:	d130      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
				{
//				到位数据接收完毕，底盘步进确认到位
					Base_Data = true;
 8000e5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ee8 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
					RxState = 0;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	e029      	b.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
				}
			}
		}
//	升降步进电机帧头
		else if (fdcan_RxHeader.Identifier / 256 == 5)
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8000e74:	2bff      	cmp	r3, #255	@ 0xff
 8000e76:	d823      	bhi.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
		{
			if (RxState == 0)
 8000e78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d106      	bne.n	8000e8e <HAL_FDCAN_RxFifo0Callback+0x96>
			{
				if (rxdata[0] == 0xFD)
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e86:	d102      	bne.n	8000e8e <HAL_FDCAN_RxFifo0Callback+0x96>
				{
					RxState = 1;
 8000e88:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 1)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d106      	bne.n	8000ea4 <HAL_FDCAN_RxFifo0Callback+0xac>
			{
				if (rxdata[1] == 0x9F)
 8000e96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000e98:	785b      	ldrb	r3, [r3, #1]
 8000e9a:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e9c:	d102      	bne.n	8000ea4 <HAL_FDCAN_RxFifo0Callback+0xac>
				{
					RxState = 2;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 2)
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d109      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
			{
				if (rxdata[2] == 0x6B)
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000eae:	789b      	ldrb	r3, [r3, #2]
 8000eb0:	2b6b      	cmp	r3, #107	@ 0x6b
 8000eb2:	d105      	bne.n	8000ec0 <HAL_FDCAN_RxFifo0Callback+0xc8>
				{
//				到位数据接收完毕，升降步进确认到位
					Top_Data = true;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
					RxState = 0;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	HAL_FDCAN_ActivateNotification(hfdcan,
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f003 fb2f 	bl	8004528 <HAL_FDCAN_ActivateNotification>
	FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	24000360 	.word	0x24000360
 8000ed8:	24000294 	.word	0x24000294
 8000edc:	240002c0 	.word	0x240002c0
 8000ee0:	24000c26 	.word	0x24000c26
 8000ee4:	24000368 	.word	0x24000368
 8000ee8:	24000369 	.word	0x24000369
 8000eec:	2400036a 	.word	0x2400036a

08000ef0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	4b30      	ldr	r3, [pc, #192]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	4a2e      	ldr	r2, [pc, #184]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f06:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f14:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	4a27      	ldr	r2, [pc, #156]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f24:	4b24      	ldr	r3, [pc, #144]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	4a18      	ldr	r2, [pc, #96]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	4a10      	ldr	r2, [pc, #64]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <MX_GPIO_Init+0xc8>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

}
 8000faa:	bf00      	nop
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	58024400 	.word	0x58024400

08000fbc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000fc2:	f000 fbfd 	bl	80017c0 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fc6:	f001 fe99 	bl	8002cfc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fca:	f000 f9df 	bl	800138c <SystemClock_Config>
	// USART10 用于Action串口转发,暂时使用无线串口将数据转发到主机
	// TODO:根据通信质量的稳定性决定是否要更换为有线USB转TTL
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fce:	f7ff ff8f 	bl	8000ef0 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 8000fd2:	f7ff fd61 	bl	8000a98 <MX_FDCAN1_Init>
	MX_UART4_Init();
 8000fd6:	f000 ffe5 	bl	8001fa4 <MX_UART4_Init>
	MX_UART5_Init();
 8000fda:	f001 f82f 	bl	800203c <MX_UART5_Init>
	MX_UART9_Init();
 8000fde:	f001 f911 	bl	8002204 <MX_UART9_Init>
	MX_USART6_UART_Init();
 8000fe2:	f001 fa2d 	bl	8002440 <MX_USART6_UART_Init>
	MX_USART10_UART_Init();
 8000fe6:	f001 fa77 	bl	80024d8 <MX_USART10_UART_Init>
	MX_TIM2_Init();
 8000fea:	f000 fe1b 	bl	8001c24 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 8000fee:	f001 f9db 	bl	80023a8 <MX_USART3_UART_Init>
	MX_UART7_Init();
 8000ff2:	f001 f86f 	bl	80020d4 <MX_UART7_Init>
	MX_UART8_Init();
 8000ff6:	f001 f8b9 	bl	800216c <MX_UART8_Init>
	MX_TIM3_Init();
 8000ffa:	f000 fe61 	bl	8001cc0 <MX_TIM3_Init>
	MX_TIM5_Init();
 8000ffe:	f000 feaf 	bl	8001d60 <MX_TIM5_Init>
	MX_USART2_UART_Init();
 8001002:	f001 f94b 	bl	800229c <MX_USART2_UART_Init>
	MX_TIM12_Init();
 8001006:	f000 fefb 	bl	8001e00 <MX_TIM12_Init>
	/* USER CODE BEGIN 2 */

//	清除定时器初始化过程中的更新中断标志
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800100a:	4bc1      	ldr	r3, [pc, #772]	@ (8001310 <main+0x354>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f06f 0201 	mvn.w	r2, #1
 8001012:	611a      	str	r2, [r3, #16]
//	使能定时器中断
	HAL_TIM_Base_Start_IT(&htim2);
 8001014:	48be      	ldr	r0, [pc, #760]	@ (8001310 <main+0x354>)
 8001016:	f006 ff5f 	bl	8007ed8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 800101a:	48be      	ldr	r0, [pc, #760]	@ (8001314 <main+0x358>)
 800101c:	f006 ff5c 	bl	8007ed8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001020:	48bd      	ldr	r0, [pc, #756]	@ (8001318 <main+0x35c>)
 8001022:	f006 ff59 	bl	8007ed8 <HAL_TIM_Base_Start_IT>
//	使能串口接收中断
	HAL_UART_Receive_IT(&huart4, &Screen_data, 1);
 8001026:	2201      	movs	r2, #1
 8001028:	49bc      	ldr	r1, [pc, #752]	@ (800131c <main+0x360>)
 800102a:	48bd      	ldr	r0, [pc, #756]	@ (8001320 <main+0x364>)
 800102c:	f007 fde0 	bl	8008bf0 <HAL_UART_Receive_IT>
//	HWT101预留中断接口
	HAL_UART_Receive_IT(&huart2, &HwtData, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	49bc      	ldr	r1, [pc, #752]	@ (8001324 <main+0x368>)
 8001034:	48bc      	ldr	r0, [pc, #752]	@ (8001328 <main+0x36c>)
 8001036:	f007 fddb 	bl	8008bf0 <HAL_UART_Receive_IT>
//	TX2通信接收中断
	HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 800103a:	2201      	movs	r2, #1
 800103c:	49bb      	ldr	r1, [pc, #748]	@ (800132c <main+0x370>)
 800103e:	48bc      	ldr	r0, [pc, #752]	@ (8001330 <main+0x374>)
 8001040:	f007 fdd6 	bl	8008bf0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart9, &data, 1);
 8001044:	2201      	movs	r2, #1
 8001046:	49bb      	ldr	r1, [pc, #748]	@ (8001334 <main+0x378>)
 8001048:	48bb      	ldr	r0, [pc, #748]	@ (8001338 <main+0x37c>)
 800104a:	f007 fdd1 	bl	8008bf0 <HAL_UART_Receive_IT>
//	HAL_UART_Receive_IT(&huart10, &Joy_data, 1);

	PID_Init();
 800104e:	f00a fe6b 	bl	800bd28 <PID_Init>
//  	TODO:调整该函数体位置, 使之可以全局响应
// 			解决方案: 在屏幕解析函数中, 如果发车标志位被使能, 则使能某一定时器中断函数, 然后在定时器中断函数中先失能自己, 
// 					 再调用下面的函数体,从而做到节省系统资源的同时进行函数的全局单次响应
// 		FIXME:将该函数修改为全局响应需要考虑到在响应时, 车身其他资源是否会被影响, 即在响应的过程中, 物料等会不会把爪子卡住, 导致舵机过流
// 			  舵机过流后需要过一段时间才能对舵机进行读写
		if (Ready_Flag == 1)
 8001052:	4bba      	ldr	r3, [pc, #744]	@ (800133c <main+0x380>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d10a      	bne.n	8001070 <main+0xb4>
		{
			Ready_Flag = 0;
 800105a:	4bb8      	ldr	r3, [pc, #736]	@ (800133c <main+0x380>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
			Check_Status();
 8001060:	f00c fe42 	bl	800dce8 <Check_Status>
			Move_TO_zancunqu(22000, 4335);
 8001064:	eddf 0ab6 	vldr	s1, [pc, #728]	@ 8001340 <main+0x384>
 8001068:	ed9f 0ab6 	vldr	s0, [pc, #728]	@ 8001344 <main+0x388>
 800106c:	f00b fb8b 	bl	800c786 <Move_TO_zancunqu>
		}
// 		检测发车标志位
		if (System_Flag == 1)
 8001070:	4bb5      	ldr	r3, [pc, #724]	@ (8001348 <main+0x38c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d1ec      	bne.n	8001052 <main+0x96>
		{
			System_Flag = 0;
 8001078:	4bb3      	ldr	r3, [pc, #716]	@ (8001348 <main+0x38c>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
//			向TX2发送字符串 "e1f"开始执行程序
			if (TX2_ENABLE == true)
 800107e:	4bb3      	ldr	r3, [pc, #716]	@ (800134c <main+0x390>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d006      	beq.n	8001094 <main+0xd8>
				HAL_UART_Transmit(&huart10, (uint8_t*) "e1f", sizeof("elf") - 1,
 8001086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800108a:	2203      	movs	r2, #3
 800108c:	49b0      	ldr	r1, [pc, #704]	@ (8001350 <main+0x394>)
 800108e:	48a8      	ldr	r0, [pc, #672]	@ (8001330 <main+0x374>)
 8001090:	f007 fc58 	bl	8008944 <HAL_UART_Transmit>
						0x1000);
			/************************************************/
			while (1)
			{
				switch (flag)
 8001094:	4baf      	ldr	r3, [pc, #700]	@ (8001354 <main+0x398>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	2b0d      	cmp	r3, #13
 800109a:	f200 8134 	bhi.w	8001306 <main+0x34a>
 800109e:	a201      	add	r2, pc, #4	@ (adr r2, 80010a4 <main+0xe8>)
 80010a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a4:	080010dd 	.word	0x080010dd
 80010a8:	08001117 	.word	0x08001117
 80010ac:	08001175 	.word	0x08001175
 80010b0:	080011c7 	.word	0x080011c7
 80010b4:	080011e3 	.word	0x080011e3
 80010b8:	08001203 	.word	0x08001203
 80010bc:	08001213 	.word	0x08001213
 80010c0:	0800123f 	.word	0x0800123f
 80010c4:	0800124b 	.word	0x0800124b
 80010c8:	08001275 	.word	0x08001275
 80010cc:	0800129b 	.word	0x0800129b
 80010d0:	080012bb 	.word	0x080012bb
 80010d4:	080012d7 	.word	0x080012d7
 80010d8:	080012f7 	.word	0x080012f7
				{
				case 0:  //发车, 先左移, 然后直行, 进入扫码区域
					// Move_TO_Saomaqu(2400, 8250);
					// BUG:遇到左移后,步进电机没有移动到目标点位,没有返回到位标志，但是卡住不动的情况, 记录在Bug.md中的 E项
					// 
					bool temp = Move_Left(RunSpeed, RunAcc, 2400);
 80010dc:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80010e0:	2178      	movs	r1, #120	@ 0x78
 80010e2:	2064      	movs	r0, #100	@ 0x64
 80010e4:	f00b f8d2 	bl	800c28c <Move_Left>
 80010e8:	4603      	mov	r3, r0
 80010ea:	71fb      	strb	r3, [r7, #7]
					while (temp != true)
 80010ec:	e007      	b.n	80010fe <main+0x142>
					{
						temp = Move_Left(RunSpeed, RunAcc, 2400);
 80010ee:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80010f2:	2178      	movs	r1, #120	@ 0x78
 80010f4:	2064      	movs	r0, #100	@ 0x64
 80010f6:	f00b f8c9 	bl	800c28c <Move_Left>
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
					while (temp != true)
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f083 0301 	eor.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f1      	bne.n	80010ee <main+0x132>
					}
					// 左移完成后,向前移动,同时将机械臂调整为扫码姿态
					Start();
 800110a:	f00a faad 	bl	800b668 <Start>
					flag = 1;
 800110e:	4b91      	ldr	r3, [pc, #580]	@ (8001354 <main+0x398>)
 8001110:	2201      	movs	r2, #1
 8001112:	801a      	strh	r2, [r3, #0]
					break;
 8001114:	e0fa      	b.n	800130c <main+0x350>
				case 1:  //离开扫码区,进入暂存区抓取物料
					// 向前移动,非阻塞
					temp = Move_Line(RunSpeed, RunAcc, 10500);
 8001116:	f642 1204 	movw	r2, #10500	@ 0x2904
 800111a:	2178      	movs	r1, #120	@ 0x78
 800111c:	2064      	movs	r0, #100	@ 0x64
 800111e:	f00b f857 	bl	800c1d0 <Move_Line>
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
					while (temp != true)
 8001126:	e007      	b.n	8001138 <main+0x17c>
					{
						temp = Move_Line(RunSpeed, RunAcc, 10500);
 8001128:	f642 1204 	movw	r2, #10500	@ 0x2904
 800112c:	2178      	movs	r1, #120	@ 0x78
 800112e:	2064      	movs	r0, #100	@ 0x64
 8001130:	f00b f84e 	bl	800c1d0 <Move_Line>
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
					while (temp != true)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f1      	bne.n	8001128 <main+0x16c>
					}
					// Choke_Flag = true说明当前底盘步进电机被阻塞
					// TODO:其实我感觉这个while没有用, 但是也不会影响什么, 单纯看着占位置, 检测完没有用后可以删掉这里
					while (Choke_Flag == true)
 8001144:	bf00      	nop
 8001146:	4b84      	ldr	r3, [pc, #528]	@ (8001358 <main+0x39c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1fb      	bne.n	8001146 <main+0x18a>
					{
						;
					}
					//	等待TX2返回物料坐标点信息
					if (TX2_ENABLE == true)
 800114e:	4b7f      	ldr	r3, [pc, #508]	@ (800134c <main+0x390>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <main+0x1a4>
					{
						while (Point_Flag != 1)
 8001156:	bf00      	nop
 8001158:	4b80      	ldr	r3, [pc, #512]	@ (800135c <main+0x3a0>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d1fb      	bne.n	8001158 <main+0x19c>
							;
						}
					}
					// TODO:调试,根据TX2返回坐标点信息进行车身调整,待物料稳定后抓取物料
					// 这里是否需要先根据Action进行一次坐标的调整? x:150 y:1450
					Move_Action_Nopid_Left_Ctrl(150, 1450);
 8001160:	eddf 0a7f 	vldr	s1, [pc, #508]	@ 8001360 <main+0x3a4>
 8001164:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8001364 <main+0x3a8>
 8001168:	f00b fc46 	bl	800c9f8 <Move_Action_Nopid_Left_Ctrl>
//					Frist_Grab_Wuliao();
					flag = 2;
 800116c:	4b79      	ldr	r3, [pc, #484]	@ (8001354 <main+0x398>)
 800116e:	2202      	movs	r2, #2
 8001170:	801a      	strh	r2, [r3, #0]
					break;
 8001172:	e0cb      	b.n	800130c <main+0x350>

				case 2:  // 离开原料区,进入十字区
					Move_TO_jianzhi1(4500, 4335);
 8001174:	eddf 0a72 	vldr	s1, [pc, #456]	@ 8001340 <main+0x384>
 8001178:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 8001368 <main+0x3ac>
 800117c:	f00b fab6 	bl	800c6ec <Move_TO_jianzhi1>
					// 车身状态回滚为爪子向内的状态
					Roll_Status();
 8001180:	f00c fdd5 	bl	800dd2e <Roll_Status>
					HAL_Delay(50);
 8001184:	2032      	movs	r0, #50	@ 0x32
 8001186:	f001 fe4b 	bl	8002e20 <HAL_Delay>
					// 根据Action返回的坐标点进行校准
					bool action_temp = Move_Action_Nopid_Forward_Ctrl(160, 1070);
 800118a:	eddf 0a78 	vldr	s1, [pc, #480]	@ 800136c <main+0x3b0>
 800118e:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 8001370 <main+0x3b4>
 8001192:	f00b fd49 	bl	800cc28 <Move_Action_Nopid_Forward_Ctrl>
 8001196:	4603      	mov	r3, r0
 8001198:	71bb      	strb	r3, [r7, #6]
					while(action_temp == false)
 800119a:	e00a      	b.n	80011b2 <main+0x1f6>
					{
						HAL_Delay(10);
 800119c:	200a      	movs	r0, #10
 800119e:	f001 fe3f 	bl	8002e20 <HAL_Delay>
						action_temp = Move_Action_Nopid_Forward_Ctrl(160, 1070);
 80011a2:	eddf 0a72 	vldr	s1, [pc, #456]	@ 800136c <main+0x3b0>
 80011a6:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 8001370 <main+0x3b4>
 80011aa:	f00b fd3d 	bl	800cc28 <Move_Action_Nopid_Forward_Ctrl>
 80011ae:	4603      	mov	r3, r0
 80011b0:	71bb      	strb	r3, [r7, #6]
					while(action_temp == false)
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1ee      	bne.n	800119c <main+0x1e0>
					}
					flag = 3;
 80011be:	4b65      	ldr	r3, [pc, #404]	@ (8001354 <main+0x398>)
 80011c0:	2203      	movs	r2, #3
 80011c2:	801a      	strh	r2, [r3, #0]
					break;
 80011c4:	e0a2      	b.n	800130c <main+0x350>
				case 3:    // 离开十字区域,进入暂存区
					Move_TO_zancunqu(22000, 4335);
 80011c6:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8001340 <main+0x384>
 80011ca:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8001344 <main+0x388>
 80011ce:	f00b fada 	bl	800c786 <Move_TO_zancunqu>
					// 将物料从车上放到目标区域
//					put_Material_to_circular_Staging_Area_frist(Frist_Run);
					// 将物料从目标区域抓取回车上
//					Grab_Material_to_Car_Staging_Area_frist(Frist_Run);
					// TODO: 延时需要修改
					HAL_Delay(500);
 80011d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011d6:	f001 fe23 	bl	8002e20 <HAL_Delay>
					flag = 4;
 80011da:	4b5e      	ldr	r3, [pc, #376]	@ (8001354 <main+0x398>)
 80011dc:	2204      	movs	r2, #4
 80011de:	801a      	strh	r2, [r3, #0]
					break;
 80011e0:	e094      	b.n	800130c <main+0x350>
				case 4:	//出暂存区
					Move_TO_jianzhi2(9000, 4335);
 80011e2:	eddf 0a57 	vldr	s1, [pc, #348]	@ 8001340 <main+0x384>
 80011e6:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 8001374 <main+0x3b8>
 80011ea:	f00b fb1e 	bl	800c82a <Move_TO_jianzhi2>
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 80011ee:	eddf 0a62 	vldr	s1, [pc, #392]	@ 8001378 <main+0x3bc>
 80011f2:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 800137c <main+0x3c0>
 80011f6:	f00b fd17 	bl	800cc28 <Move_Action_Nopid_Forward_Ctrl>
					flag = 5;
 80011fa:	4b56      	ldr	r3, [pc, #344]	@ (8001354 <main+0x398>)
 80011fc:	2205      	movs	r2, #5
 80011fe:	801a      	strh	r2, [r3, #0]
					break;
 8001200:	e084      	b.n	800130c <main+0x350>
				case 5:		//移动到粗加工区       
					Move_TO_cujiagongqu(10000);
 8001202:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8001380 <main+0x3c4>
 8001206:	f00b fb5a 	bl	800c8be <Move_TO_cujiagongqu>
					//调整车体，让爪子正交于车身，爪子位于底端张开
//					put_Status(); //爪子张开，张大一些，否则会导致在红色环识别到绿色环
					// 将物料放置到第一层
//					put_Material_to_Circular_Rough_Processing_Area_frist(Frist_Run, Put_circular);
					flag = 6;
 800120a:	4b52      	ldr	r3, [pc, #328]	@ (8001354 <main+0x398>)
 800120c:	2206      	movs	r2, #6
 800120e:	801a      	strh	r2, [r3, #0]
					break;
 8001210:	e07c      	b.n	800130c <main+0x350>
				case 6:  //离开粗加工区，移到十字区
					Move_TO_jianzhi3(9000, 4335);
 8001212:	eddf 0a4b 	vldr	s1, [pc, #300]	@ 8001340 <main+0x384>
 8001216:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8001374 <main+0x3b8>
 800121a:	f00b fb79 	bl	800c910 <Move_TO_jianzhi3>
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 800121e:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8001378 <main+0x3bc>
 8001222:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8001384 <main+0x3c8>
 8001226:	f00b fbe7 	bl	800c9f8 <Move_Action_Nopid_Left_Ctrl>
					//TODO:在返回原料区之前，爪子首先要转过来正交于车身并且步进降到8600的位置，爪子张开，进行抓取物料
					Drop_Location_jiang(50, 50, 8600);
 800122a:	f242 1298 	movw	r2, #8600	@ 0x2198
 800122e:	2132      	movs	r1, #50	@ 0x32
 8001230:	2032      	movs	r0, #50	@ 0x32
 8001232:	f00b fa01 	bl	800c638 <Drop_Location_jiang>
					flag = 7;
 8001236:	4b47      	ldr	r3, [pc, #284]	@ (8001354 <main+0x398>)
 8001238:	2207      	movs	r2, #7
 800123a:	801a      	strh	r2, [r3, #0]
					break;
 800123c:	e066      	b.n	800130c <main+0x350>
				case 7:      //返回到原料区，进行第二次的抓取
					Move_TO_fanyuanliaoqu(4000);
 800123e:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8001388 <main+0x3cc>
 8001242:	f00b fbaf 	bl	800c9a4 <Move_TO_fanyuanliaoqu>
					while (1)
 8001246:	bf00      	nop
 8001248:	e7fd      	b.n	8001246 <main+0x28a>
//					Move_Action_Nopid_Left_Ctrl(150, 1450);      //ACTION����
					//Second_Run_Frist_Grab_Wuliao();
					flag = 8;
					break;
				case 8:  //第二次跑 离开原料区,进入十字区
					Move_TO_jianzhi1(4500, 4335);
 800124a:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8001340 <main+0x384>
 800124e:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8001368 <main+0x3ac>
 8001252:	f00b fa4b 	bl	800c6ec <Move_TO_jianzhi1>
					// 车身状态回滚为爪子向内的状态
					Roll_Status();
 8001256:	f00c fd6a 	bl	800dd2e <Roll_Status>
					HAL_Delay(50);
 800125a:	2032      	movs	r0, #50	@ 0x32
 800125c:	f001 fde0 	bl	8002e20 <HAL_Delay>
					// 根据Action返回的坐标点进行校准
					Move_Action_Nopid_Forward_Ctrl(160, 1070);
 8001260:	eddf 0a42 	vldr	s1, [pc, #264]	@ 800136c <main+0x3b0>
 8001264:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8001370 <main+0x3b4>
 8001268:	f00b fcde 	bl	800cc28 <Move_Action_Nopid_Forward_Ctrl>
					flag = 9;
 800126c:	4b39      	ldr	r3, [pc, #228]	@ (8001354 <main+0x398>)
 800126e:	2209      	movs	r2, #9
 8001270:	801a      	strh	r2, [r3, #0]
					break;
 8001272:	e04b      	b.n	800130c <main+0x350>
				case 9:    //第二次跑，离开十字区，到达暂存区
					Move_TO_zancunqu(22000, 4335);
 8001274:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8001340 <main+0x384>
 8001278:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8001344 <main+0x388>
 800127c:	f00b fa83 	bl	800c786 <Move_TO_zancunqu>
					// 将物料从车上放到目标区域
					put_Material_to_circular_Staging_Area_frist(Second_Run);
 8001280:	2003      	movs	r0, #3
 8001282:	f00a fb89 	bl	800b998 <put_Material_to_circular_Staging_Area_frist>
					// 将物料从目标区域抓取回车上
					Grab_Material_to_Car_Staging_Area_frist(Second_Run);
 8001286:	2003      	movs	r0, #3
 8001288:	f00a fbe0 	bl	800ba4c <Grab_Material_to_Car_Staging_Area_frist>
					HAL_Delay(yanshi);
 800128c:	2032      	movs	r0, #50	@ 0x32
 800128e:	f001 fdc7 	bl	8002e20 <HAL_Delay>
					flag = 10;
 8001292:	4b30      	ldr	r3, [pc, #192]	@ (8001354 <main+0x398>)
 8001294:	220a      	movs	r2, #10
 8001296:	801a      	strh	r2, [r3, #0]
					break;
 8001298:	e038      	b.n	800130c <main+0x350>
				case 10:    //离开暂存区，到达十字区
					Move_TO_jianzhi2(9000, 4335);
 800129a:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8001340 <main+0x384>
 800129e:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8001374 <main+0x3b8>
 80012a2:	f00b fac2 	bl	800c82a <Move_TO_jianzhi2>
					// 根据Action返回的坐标点进行校准     
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 80012a6:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8001378 <main+0x3bc>
 80012aa:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 800137c <main+0x3c0>
 80012ae:	f00b fcbb 	bl	800cc28 <Move_Action_Nopid_Forward_Ctrl>
					flag = 11;
 80012b2:	4b28      	ldr	r3, [pc, #160]	@ (8001354 <main+0x398>)
 80012b4:	220b      	movs	r2, #11
 80012b6:	801a      	strh	r2, [r3, #0]
					break;
 80012b8:	e028      	b.n	800130c <main+0x350>
				case 11:       //离开十字区，到达粗加工区
					Move_TO_cujiagongqu(10000);
 80012ba:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8001380 <main+0x3c4>
 80012be:	f00b fafe 	bl	800c8be <Move_TO_cujiagongqu>
					put_Material_to_Circular_Rough_Processing_Area_frist(
 80012c2:	2101      	movs	r1, #1
 80012c4:	2003      	movs	r0, #3
 80012c6:	f00a fc19 	bl	800bafc <put_Material_to_Circular_Rough_Processing_Area_frist>
					Second_Run, Put_Material);
					//放完物料后，车身回归起始模样
					Check_Status();
 80012ca:	f00c fd0d 	bl	800dce8 <Check_Status>
					flag = 12;
 80012ce:	4b21      	ldr	r3, [pc, #132]	@ (8001354 <main+0x398>)
 80012d0:	220c      	movs	r2, #12
 80012d2:	801a      	strh	r2, [r3, #0]
					break;
 80012d4:	e01a      	b.n	800130c <main+0x350>
				case 12:       //离开粗加工区，到十字区
					Move_TO_jianzhi3(9000, 4335);
 80012d6:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8001340 <main+0x384>
 80012da:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8001374 <main+0x3b8>
 80012de:	f00b fb17 	bl	800c910 <Move_TO_jianzhi3>
					// 根据Action返回的坐标点进行校准 
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 80012e2:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8001378 <main+0x3bc>
 80012e6:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8001384 <main+0x3c8>
 80012ea:	f00b fb85 	bl	800c9f8 <Move_Action_Nopid_Left_Ctrl>
					flag = 13;
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <main+0x398>)
 80012f0:	220d      	movs	r2, #13
 80012f2:	801a      	strh	r2, [r3, #0]
					break;
 80012f4:	e00a      	b.n	800130c <main+0x350>
				case 13:      //直接回到启停区
					Move_TO_fanyuanliaoqu(22000);
 80012f6:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001344 <main+0x388>
 80012fa:	f00b fb53 	bl	800c9a4 <Move_TO_fanyuanliaoqu>
					flag = 14;
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <main+0x398>)
 8001300:	220e      	movs	r2, #14
 8001302:	801a      	strh	r2, [r3, #0]
					break;
 8001304:	e002      	b.n	800130c <main+0x350>
				default:
					Move_Stop();
 8001306:	f00b f9db 	bl	800c6c0 <Move_Stop>
					break;
 800130a:	bf00      	nop
				switch (flag)
 800130c:	e6c2      	b.n	8001094 <main+0xd8>
 800130e:	bf00      	nop
 8001310:	2400048c 	.word	0x2400048c
 8001314:	24000524 	.word	0x24000524
 8001318:	240004d8 	.word	0x240004d8
 800131c:	2400036c 	.word	0x2400036c
 8001320:	240005bc 	.word	0x240005bc
 8001324:	2400036d 	.word	0x2400036d
 8001328:	240008a0 	.word	0x240008a0
 800132c:	2400036e 	.word	0x2400036e
 8001330:	24000a5c 	.word	0x24000a5c
 8001334:	2400036b 	.word	0x2400036b
 8001338:	2400080c 	.word	0x2400080c
 800133c:	24000d1f 	.word	0x24000d1f
 8001340:	45877800 	.word	0x45877800
 8001344:	46abe000 	.word	0x46abe000
 8001348:	24000d1e 	.word	0x24000d1e
 800134c:	24000484 	.word	0x24000484
 8001350:	08012bd8 	.word	0x08012bd8
 8001354:	2400047e 	.word	0x2400047e
 8001358:	24000c24 	.word	0x24000c24
 800135c:	2400047c 	.word	0x2400047c
 8001360:	44b54000 	.word	0x44b54000
 8001364:	43160000 	.word	0x43160000
 8001368:	458ca000 	.word	0x458ca000
 800136c:	4485c000 	.word	0x4485c000
 8001370:	43200000 	.word	0x43200000
 8001374:	460ca000 	.word	0x460ca000
 8001378:	44e88000 	.word	0x44e88000
 800137c:	44e9c000 	.word	0x44e9c000
 8001380:	461c4000 	.word	0x461c4000
 8001384:	432a0000 	.word	0x432a0000
 8001388:	457a0000 	.word	0x457a0000

0800138c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b09c      	sub	sp, #112	@ 0x70
 8001390:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001396:	224c      	movs	r2, #76	@ 0x4c
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f00e fb59 	bl	800fa52 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2220      	movs	r2, #32
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00e fb53 	bl	800fa52 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013ac:	2002      	movs	r0, #2
 80013ae:	f003 ffd9 	bl	8005364 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001464 <SystemClock_Config+0xd8>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001464 <SystemClock_Config+0xd8>)
 80013bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013c0:	6193      	str	r3, [r2, #24]
 80013c2:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <SystemClock_Config+0xd8>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 80013ce:	bf00      	nop
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <SystemClock_Config+0xd8>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013dc:	d1f8      	bne.n	80013d0 <SystemClock_Config+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013de:	2301      	movs	r3, #1
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e8:	2302      	movs	r3, #2
 80013ea:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ec:	2302      	movs	r3, #2
 80013ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 44;
 80013f4:	232c      	movs	r3, #44	@ 0x2c
 80013f6:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001400:	2302      	movs	r3, #2
 8001402:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001404:	230c      	movs	r3, #12
 8001406:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001408:	2300      	movs	r3, #0
 800140a:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001414:	4618      	mov	r0, r3
 8001416:	f003 ffdf 	bl	80053d8 <HAL_RCC_OscConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001420:	f000 f9fa 	bl	8001818 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001424:	233f      	movs	r3, #63	@ 0x3f
 8001426:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001428:	2303      	movs	r3, #3
 800142a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001430:	2308      	movs	r3, #8
 8001432:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001434:	2340      	movs	r3, #64	@ 0x40
 8001436:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001438:	2340      	movs	r3, #64	@ 0x40
 800143a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800143c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001440:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001442:	2340      	movs	r3, #64	@ 0x40
 8001444:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2103      	movs	r1, #3
 800144a:	4618      	mov	r0, r3
 800144c:	f004 fb9e 	bl	8005b8c <HAL_RCC_ClockConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0xce>
	{
		Error_Handler();
 8001456:	f000 f9df 	bl	8001818 <Error_Handler>
	}
}
 800145a:	bf00      	nop
 800145c:	3770      	adds	r7, #112	@ 0x70
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	58024800 	.word	0x58024800

08001468 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*) &ch, 1, 0xFFFF);
 8001470:	1d39      	adds	r1, r7, #4
 8001472:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001476:	2201      	movs	r2, #1
 8001478:	4803      	ldr	r0, [pc, #12]	@ (8001488 <__io_putchar+0x20>)
 800147a:	f007 fa63 	bl	8008944 <HAL_UART_Transmit>
	return ch;
 800147e:	687b      	ldr	r3, [r7, #4]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	240005bc 	.word	0x240005bc

0800148c <HAL_UART_RxCpltCallback>:

/*  ------------ 串口中断回调函数 -----------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08c      	sub	sp, #48	@ 0x30
 8001490:	af04      	add	r7, sp, #16
 8001492:	6078      	str	r0, [r7, #4]
	// UART9 中断回调函数
	if (huart->Instance == UART9)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a6d      	ldr	r2, [pc, #436]	@ (8001650 <HAL_UART_RxCpltCallback+0x1c4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d10a      	bne.n	80014b4 <HAL_UART_RxCpltCallback+0x28>
	{
		// 将缓冲区中的Action数据输入到Data_Analyse()函数进行处理
		Data_Analyse(data);
 800149e:	4b6d      	ldr	r3, [pc, #436]	@ (8001654 <HAL_UART_RxCpltCallback+0x1c8>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f009 fff8 	bl	800b498 <Data_Analyse>
		// 更新UART9接收中断回调, 中断源UART9, 缓冲区data, 缓冲大小 1 
		HAL_UART_Receive_IT(&huart9, &data, 1);
 80014a8:	2201      	movs	r2, #1
 80014aa:	496a      	ldr	r1, [pc, #424]	@ (8001654 <HAL_UART_RxCpltCallback+0x1c8>)
 80014ac:	486a      	ldr	r0, [pc, #424]	@ (8001658 <HAL_UART_RxCpltCallback+0x1cc>)
 80014ae:	f007 fb9f 	bl	8008bf0 <HAL_UART_Receive_IT>
 80014b2:	e0c4      	b.n	800163e <HAL_UART_RxCpltCallback+0x1b2>

	}
	// UART4 中断回调函数
	else if (huart->Instance == UART4)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a68      	ldr	r2, [pc, #416]	@ (800165c <HAL_UART_RxCpltCallback+0x1d0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d10a      	bne.n	80014d4 <HAL_UART_RxCpltCallback+0x48>
	{
		// 将缓冲区中的屏幕数据输入到Data_Analyse()函数进行处理
		Check_Flag(Screen_data);
 80014be:	4b68      	ldr	r3, [pc, #416]	@ (8001660 <HAL_UART_RxCpltCallback+0x1d4>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f00c fb78 	bl	800dbb8 <Check_Flag>
		// 更新UART4接收中断回调, 中断源UART4, 缓冲区Screen_data, 缓冲大小 1                   	   
		HAL_UART_Receive_IT(&huart4, &Screen_data, 1);
 80014c8:	2201      	movs	r2, #1
 80014ca:	4965      	ldr	r1, [pc, #404]	@ (8001660 <HAL_UART_RxCpltCallback+0x1d4>)
 80014cc:	4865      	ldr	r0, [pc, #404]	@ (8001664 <HAL_UART_RxCpltCallback+0x1d8>)
 80014ce:	f007 fb8f 	bl	8008bf0 <HAL_UART_Receive_IT>
 80014d2:	e0b4      	b.n	800163e <HAL_UART_RxCpltCallback+0x1b2>
	}
	// FIXME:滴滴, 注释补一下
	else if (huart->Instance == USART10)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a63      	ldr	r2, [pc, #396]	@ (8001668 <HAL_UART_RxCpltCallback+0x1dc>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	f040 80af 	bne.w	800163e <HAL_UART_RxCpltCallback+0x1b2>
	{
		//static uint8_t RxState = 0;
		// 将缓冲区中的Action数据存入RxBuffer中
		RxBuffer[Uart10_Rx_Cnt++] = aRxBuffer;
 80014e0:	4b62      	ldr	r3, [pc, #392]	@ (800166c <HAL_UART_RxCpltCallback+0x1e0>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	b2d1      	uxtb	r1, r2
 80014e8:	4a60      	ldr	r2, [pc, #384]	@ (800166c <HAL_UART_RxCpltCallback+0x1e0>)
 80014ea:	7011      	strb	r1, [r2, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b60      	ldr	r3, [pc, #384]	@ (8001670 <HAL_UART_RxCpltCallback+0x1e4>)
 80014f0:	7819      	ldrb	r1, [r3, #0]
 80014f2:	4b60      	ldr	r3, [pc, #384]	@ (8001674 <HAL_UART_RxCpltCallback+0x1e8>)
 80014f4:	5499      	strb	r1, [r3, r2]
			memset(RxBuffer, 0, sizeof(RxBuffer));
			Uart10_Rx_Cnt = 0;
			return;
		}
		//如果接收到的收据是包头为a,包尾为b,判断是否能正常接收坐标返回
		if (aRxBuffer == 'd')
 80014f6:	4b5e      	ldr	r3, [pc, #376]	@ (8001670 <HAL_UART_RxCpltCallback+0x1e4>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b64      	cmp	r3, #100	@ 0x64
 80014fc:	d131      	bne.n	8001562 <HAL_UART_RxCpltCallback+0xd6>
		{ // �����β??'d'��˵�������Ϻ�Բ����λ��??
			char *start = strchr(RxBuffer, 'a');
 80014fe:	2161      	movs	r1, #97	@ 0x61
 8001500:	485c      	ldr	r0, [pc, #368]	@ (8001674 <HAL_UART_RxCpltCallback+0x1e8>)
 8001502:	f00e faae 	bl	800fa62 <strchr>
 8001506:	61f8      	str	r0, [r7, #28]
			char *end = strchr(RxBuffer, 'd');
 8001508:	2164      	movs	r1, #100	@ 0x64
 800150a:	485a      	ldr	r0, [pc, #360]	@ (8001674 <HAL_UART_RxCpltCallback+0x1e8>)
 800150c:	f00e faa9 	bl	800fa62 <strchr>
 8001510:	61b8      	str	r0, [r7, #24]

			if (start != NULL && end != NULL && end > start)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d024      	beq.n	8001562 <HAL_UART_RxCpltCallback+0xd6>
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d021      	beq.n	8001562 <HAL_UART_RxCpltCallback+0xd6>
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	429a      	cmp	r2, r3
 8001524:	d91d      	bls.n	8001562 <HAL_UART_RxCpltCallback+0xd6>
			{
				*end = '\0';
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
				if (sscanf(start + 1, "%f,%f,%d", &x, &y, &colour) == 3)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	1c58      	adds	r0, r3, #1
 8001530:	4b51      	ldr	r3, [pc, #324]	@ (8001678 <HAL_UART_RxCpltCallback+0x1ec>)
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	4b51      	ldr	r3, [pc, #324]	@ (800167c <HAL_UART_RxCpltCallback+0x1f0>)
 8001536:	4a52      	ldr	r2, [pc, #328]	@ (8001680 <HAL_UART_RxCpltCallback+0x1f4>)
 8001538:	4952      	ldr	r1, [pc, #328]	@ (8001684 <HAL_UART_RxCpltCallback+0x1f8>)
 800153a:	f00e fa1b 	bl	800f974 <siscanf>
 800153e:	4603      	mov	r3, r0
 8001540:	2b03      	cmp	r3, #3
 8001542:	d105      	bne.n	8001550 <HAL_UART_RxCpltCallback+0xc4>
				{
					// ���ݽ����ɹ�
					Point_Flag = 1;
 8001544:	4b50      	ldr	r3, [pc, #320]	@ (8001688 <HAL_UART_RxCpltCallback+0x1fc>)
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
					tx2_empty_recv_cnt = 0;	//接收到正常坐标返回时，a将tx2_empty_recv_cnt清零								12/11 ttxQWQ534
 800154a:	4b50      	ldr	r3, [pc, #320]	@ (800168c <HAL_UART_RxCpltCallback+0x200>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
				}

				// ��ջ���??
				memset(RxBuffer, 0, sizeof(RxBuffer));
 8001550:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001554:	2100      	movs	r1, #0
 8001556:	4847      	ldr	r0, [pc, #284]	@ (8001674 <HAL_UART_RxCpltCallback+0x1e8>)
 8001558:	f00e fa7b 	bl	800fa52 <memset>
				Uart10_Rx_Cnt = 0;
 800155c:	4b43      	ldr	r3, [pc, #268]	@ (800166c <HAL_UART_RxCpltCallback+0x1e0>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
			}
		}
		//如果接收到的收据是包头为c,包尾为b, 则进行二维码的数据存储
		if (aRxBuffer == 'b')
 8001562:	4b43      	ldr	r3, [pc, #268]	@ (8001670 <HAL_UART_RxCpltCallback+0x1e4>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b62      	cmp	r3, #98	@ 0x62
 8001568:	d169      	bne.n	800163e <HAL_UART_RxCpltCallback+0x1b2>
		{ // �����β??'b'��˵���Ƕ�ά����??
			char *start = strchr(RxBuffer, 'c');
 800156a:	2163      	movs	r1, #99	@ 0x63
 800156c:	4841      	ldr	r0, [pc, #260]	@ (8001674 <HAL_UART_RxCpltCallback+0x1e8>)
 800156e:	f00e fa78 	bl	800fa62 <strchr>
 8001572:	6178      	str	r0, [r7, #20]
			char *end = strchr(RxBuffer, 'b');
 8001574:	2162      	movs	r1, #98	@ 0x62
 8001576:	483f      	ldr	r0, [pc, #252]	@ (8001674 <HAL_UART_RxCpltCallback+0x1e8>)
 8001578:	f00e fa73 	bl	800fa62 <strchr>
 800157c:	6138      	str	r0, [r7, #16]

			if (start != NULL && end != NULL && end > start)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d027      	beq.n	80015d4 <HAL_UART_RxCpltCallback+0x148>
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d024      	beq.n	80015d4 <HAL_UART_RxCpltCallback+0x148>
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	429a      	cmp	r2, r3
 8001590:	d920      	bls.n	80015d4 <HAL_UART_RxCpltCallback+0x148>
			{
				*end = '\0';
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
//				for (int i = 0; i < 6; i++) {
//					if (sscanf(start +1+ i, "%d", &QR_data[i])) {
				if (sscanf(start + 1, "%d,%d,%d,%d,%d,%d", &QR_data[0],
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	1c58      	adds	r0, r3, #1
 800159c:	4b3c      	ldr	r3, [pc, #240]	@ (8001690 <HAL_UART_RxCpltCallback+0x204>)
 800159e:	9303      	str	r3, [sp, #12]
 80015a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001694 <HAL_UART_RxCpltCallback+0x208>)
 80015a2:	9302      	str	r3, [sp, #8]
 80015a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001698 <HAL_UART_RxCpltCallback+0x20c>)
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	4b3c      	ldr	r3, [pc, #240]	@ (800169c <HAL_UART_RxCpltCallback+0x210>)
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	4b3c      	ldr	r3, [pc, #240]	@ (80016a0 <HAL_UART_RxCpltCallback+0x214>)
 80015ae:	4a3d      	ldr	r2, [pc, #244]	@ (80016a4 <HAL_UART_RxCpltCallback+0x218>)
 80015b0:	493d      	ldr	r1, [pc, #244]	@ (80016a8 <HAL_UART_RxCpltCallback+0x21c>)
 80015b2:	f00e f9df 	bl	800f974 <siscanf>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <HAL_UART_RxCpltCallback+0x136>
						&QR_data[1], &QR_data[2], &QR_data[3], &QR_data[4],
						&QR_data[5]))
				{
					// ���ݽ����ɹ�
//						if(i==5) QR_Flag =  1;
					QR_Flag = 1;
 80015bc:	4b3b      	ldr	r3, [pc, #236]	@ (80016ac <HAL_UART_RxCpltCallback+0x220>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
				}

//				}
				// ��ջ���??
				memset(RxBuffer, 0, sizeof(RxBuffer));
 80015c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015c6:	2100      	movs	r1, #0
 80015c8:	482a      	ldr	r0, [pc, #168]	@ (8001674 <HAL_UART_RxCpltCallback+0x1e8>)
 80015ca:	f00e fa42 	bl	800fa52 <memset>
				Uart10_Rx_Cnt = 0;
 80015ce:	4b27      	ldr	r3, [pc, #156]	@ (800166c <HAL_UART_RxCpltCallback+0x1e0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
			}

			if (aRxBuffer == 'h')//接收到包尾是h，说明接收到了tx2发送的未检测到目标物体的标志，则此中断每进一次，tx2_empty_recv_cnt要自增         	   12/11 ttxQWQ534
 80015d4:	4b26      	ldr	r3, [pc, #152]	@ (8001670 <HAL_UART_RxCpltCallback+0x1e4>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b68      	cmp	r3, #104	@ 0x68
 80015da:	d130      	bne.n	800163e <HAL_UART_RxCpltCallback+0x1b2>
			{
				char *start = strchr(RxBuffer, 'g');
 80015dc:	2167      	movs	r1, #103	@ 0x67
 80015de:	4825      	ldr	r0, [pc, #148]	@ (8001674 <HAL_UART_RxCpltCallback+0x1e8>)
 80015e0:	f00e fa3f 	bl	800fa62 <strchr>
 80015e4:	60f8      	str	r0, [r7, #12]
				char *end = strchr(RxBuffer, 'h');
 80015e6:	2168      	movs	r1, #104	@ 0x68
 80015e8:	4822      	ldr	r0, [pc, #136]	@ (8001674 <HAL_UART_RxCpltCallback+0x1e8>)
 80015ea:	f00e fa3a 	bl	800fa62 <strchr>
 80015ee:	60b8      	str	r0, [r7, #8]

				if (start != NULL && end != NULL && end > start)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d023      	beq.n	800163e <HAL_UART_RxCpltCallback+0x1b2>
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_UART_RxCpltCallback+0x1b2>
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	429a      	cmp	r2, r3
 8001602:	d91c      	bls.n	800163e <HAL_UART_RxCpltCallback+0x1b2>
				{
					*end = '\0';
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
					if (sscanf(start + 1, "%c", tx2_empty_recv_cnt))
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	4a1f      	ldr	r2, [pc, #124]	@ (800168c <HAL_UART_RxCpltCallback+0x200>)
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	4927      	ldr	r1, [pc, #156]	@ (80016b0 <HAL_UART_RxCpltCallback+0x224>)
 8001614:	4618      	mov	r0, r3
 8001616:	f00e f9ad 	bl	800f974 <siscanf>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_UART_RxCpltCallback+0x1a0>
					{
						tx2_empty_recv_cnt++;
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <HAL_UART_RxCpltCallback+0x200>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	b2da      	uxtb	r2, r3
 8001628:	4b18      	ldr	r3, [pc, #96]	@ (800168c <HAL_UART_RxCpltCallback+0x200>)
 800162a:	701a      	strb	r2, [r3, #0]
					}
					memset(RxBuffer, 0, sizeof(RxBuffer));
 800162c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001630:	2100      	movs	r1, #0
 8001632:	4810      	ldr	r0, [pc, #64]	@ (8001674 <HAL_UART_RxCpltCallback+0x1e8>)
 8001634:	f00e fa0d 	bl	800fa52 <memset>
					Uart10_Rx_Cnt = 0;
 8001638:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <HAL_UART_RxCpltCallback+0x1e0>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
//			memset(RxBuffer, 0, sizeof(RxBuffer));
//
//		}
	}
	//	更新串口接收中断,中断触发源 UART10,接收数组 aRxBuffer,缓存大小 1
	HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 800163e:	2201      	movs	r2, #1
 8001640:	490b      	ldr	r1, [pc, #44]	@ (8001670 <HAL_UART_RxCpltCallback+0x1e4>)
 8001642:	481c      	ldr	r0, [pc, #112]	@ (80016b4 <HAL_UART_RxCpltCallback+0x228>)
 8001644:	f007 fad4 	bl	8008bf0 <HAL_UART_Receive_IT>
}
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40011800 	.word	0x40011800
 8001654:	2400036b 	.word	0x2400036b
 8001658:	2400080c 	.word	0x2400080c
 800165c:	40004c00 	.word	0x40004c00
 8001660:	2400036c 	.word	0x2400036c
 8001664:	240005bc 	.word	0x240005bc
 8001668:	40011c00 	.word	0x40011c00
 800166c:	24000470 	.word	0x24000470
 8001670:	2400036e 	.word	0x2400036e
 8001674:	24000370 	.word	0x24000370
 8001678:	24000480 	.word	0x24000480
 800167c:	24000478 	.word	0x24000478
 8001680:	24000474 	.word	0x24000474
 8001684:	08012bdc 	.word	0x08012bdc
 8001688:	2400047c 	.word	0x2400047c
 800168c:	2400047d 	.word	0x2400047d
 8001690:	24000014 	.word	0x24000014
 8001694:	24000010 	.word	0x24000010
 8001698:	2400000c 	.word	0x2400000c
 800169c:	24000008 	.word	0x24000008
 80016a0:	24000004 	.word	0x24000004
 80016a4:	24000000 	.word	0x24000000
 80016a8:	08012be8 	.word	0x08012be8
 80016ac:	24000020 	.word	0x24000020
 80016b0:	08012bfc 	.word	0x08012bfc
 80016b4:	24000a5c 	.word	0x24000a5c

080016b8 <HAL_TIM_PeriodElapsedCallback>:

/*  ------------ 定时器中断回调函数 -----------*/
extern uint16_t time_tx;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	// 如果中断源为TIM2
	if (htim == &htim2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a30      	ldr	r2, [pc, #192]	@ (8001784 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d106      	bne.n	80016d6 <HAL_TIM_PeriodElapsedCallback+0x1e>

//		X_out = X_Ctrl(&XPID, x_goal);
//		Y_out = Y_Ctrl(&YPID, y_goal);
//		A_out = A_Ctrl(&APID, a_goal);
		// Action数据展示
		Action_Show();
 80016c8:	f00c f92e 	bl	800d928 <Action_Show>
		// 二维码数据展示
		QR_Show();
 80016cc:	f00c f9a8 	bl	800da20 <QR_Show>
		// 色环,物料坐标数据展示
		Point_Show();
 80016d0:	f00c f9e2 	bl	800da98 <Point_Show>
 80016d4:	e052      	b.n	800177c <HAL_TIM_PeriodElapsedCallback+0xc4>

	}
	// 如果中断源为TIM3
	else if (htim == &htim3)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001788 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d126      	bne.n	800172c <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		// 根据TX2回传坐标进行PID调节
		TX_X_out = Tx_X_Ctrl(&TXPID, tx_target);
 80016de:	4b2b      	ldr	r3, [pc, #172]	@ (800178c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	eeb0 0a67 	vmov.f32	s0, s15
 80016e8:	4829      	ldr	r0, [pc, #164]	@ (8001790 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80016ea:	f00a fc11 	bl	800bf10 <Tx_X_Ctrl>
 80016ee:	4603      	mov	r3, r0
 80016f0:	ee07 3a90 	vmov	s15, r3
 80016f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f8:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80016fa:	edc3 7a00 	vstr	s15, [r3]
		TX_Y_out = Tx_Y_Ctrl(&TYPID, ty_target);
 80016fe:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	eeb0 0a67 	vmov.f32	s0, s15
 8001708:	4824      	ldr	r0, [pc, #144]	@ (800179c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800170a:	f00a fca7 	bl	800c05c <Tx_Y_Ctrl>
 800170e:	4603      	mov	r3, r0
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001718:	4b21      	ldr	r3, [pc, #132]	@ (80017a0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800171a:	edc3 7a00 	vstr	s15, [r3]
		time_tx++;
 800171e:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001728:	801a      	strh	r2, [r3, #0]
 800172a:	e027      	b.n	800177c <HAL_TIM_PeriodElapsedCallback+0xc4>
	}
	// 如果中断源为TIM5
	else if (htim == &htim5)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a1e      	ldr	r2, [pc, #120]	@ (80017a8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d109      	bne.n	8001748 <HAL_TIM_PeriodElapsedCallback+0x90>
	{
		// TODO: 需要注释理解
		if (time5_jiancha != 0)
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d01f      	beq.n	800177c <HAL_TIM_PeriodElapsedCallback+0xc4>
			time5_jiancha--;
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	3b01      	subs	r3, #1
 8001742:	4a1a      	ldr	r2, [pc, #104]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e019      	b.n	800177c <HAL_TIM_PeriodElapsedCallback+0xc4>
	}
//	中断源为TIM12
	else if (htim == &htim12)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a19      	ldr	r2, [pc, #100]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d115      	bne.n	800177c <HAL_TIM_PeriodElapsedCallback+0xc4>
	{
		// 如果允许阻塞查询标志位为true
		if (Apply_Chock == true)
 8001750:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d011      	beq.n	800177c <HAL_TIM_PeriodElapsedCallback+0xc4>
		{
			// 如果底层步进电机到位返回标志位为true
			if (Base_Data == true)
 8001758:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00c      	beq.n	800177a <HAL_TIM_PeriodElapsedCallback+0xc2>
			{
				// 取消阻塞状态,阻塞标志位记为false
				Choke_Flag = false;
 8001760:	4b16      	ldr	r3, [pc, #88]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
				// 申请阻塞查询标志位记为false
				Apply_Chock = false;
 8001766:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
				// 关闭定时器中断
				HAL_TIM_Base_Stop_IT(&htim12);
 800176c:	4810      	ldr	r0, [pc, #64]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800176e:	f006 fc39 	bl	8007fe4 <HAL_TIM_Base_Stop_IT>
				// 重置底层步进电机到位返回标志位为false
				Base_Data = false;
 8001772:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	e000      	b.n	800177c <HAL_TIM_PeriodElapsedCallback+0xc4>
			// 	// 重置底层步进电机到位返回标志位为false
			// 	Base_Data = false;
			// } 
			else
			{
				return;
 800177a:	bf00      	nop
			}
		}
	}
}
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2400048c 	.word	0x2400048c
 8001788:	240004d8 	.word	0x240004d8
 800178c:	24000018 	.word	0x24000018
 8001790:	24000bc4 	.word	0x24000bc4
 8001794:	24000c1c 	.word	0x24000c1c
 8001798:	2400001c 	.word	0x2400001c
 800179c:	24000bf0 	.word	0x24000bf0
 80017a0:	24000c20 	.word	0x24000c20
 80017a4:	24000c2c 	.word	0x24000c2c
 80017a8:	24000524 	.word	0x24000524
 80017ac:	24000c28 	.word	0x24000c28
 80017b0:	24000570 	.word	0x24000570
 80017b4:	24000c25 	.word	0x24000c25
 80017b8:	24000369 	.word	0x24000369
 80017bc:	24000c24 	.word	0x24000c24

080017c0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct =
 80017c6:	463b      	mov	r3, r7
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
	{ 0 };

	/* Disables the MPU */
	HAL_MPU_Disable();
 80017d2:	f001 fc59 	bl	8003088 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80017d6:	2301      	movs	r3, #1
 80017d8:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80017da:	2300      	movs	r3, #0
 80017dc:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80017e2:	231f      	movs	r3, #31
 80017e4:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 80017e6:	2387      	movs	r3, #135	@ 0x87
 80017e8:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80017ee:	2300      	movs	r3, #0
 80017f0:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80017f2:	2301      	movs	r3, #1
 80017f4:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80017f6:	2301      	movs	r3, #1
 80017f8:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001802:	463b      	mov	r3, r7
 8001804:	4618      	mov	r0, r3
 8001806:	f001 fc77 	bl	80030f8 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800180a:	2004      	movs	r0, #4
 800180c:	f001 fc54 	bl	80030b8 <HAL_MPU_Enable>

}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800181c:	b672      	cpsid	i
}
 800181e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <Error_Handler+0x8>

08001824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <HAL_MspInit+0x30>)
 800182c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001830:	4a08      	ldr	r2, [pc, #32]	@ (8001854 <HAL_MspInit+0x30>)
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HAL_MspInit+0x30>)
 800183c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	58024400 	.word	0x58024400

08001858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <NMI_Handler+0x4>

08001860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <HardFault_Handler+0x4>

08001868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <MemManage_Handler+0x4>

08001870 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <BusFault_Handler+0x4>

08001878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <UsageFault_Handler+0x4>

08001880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ae:	f001 fa97 	bl	8002de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <FDCAN1_IT0_IRQHandler+0x10>)
 80018be:	f002 fead 	bl	800461c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	240002c0 	.word	0x240002c0

080018cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <TIM2_IRQHandler+0x10>)
 80018d2:	f006 fbb6 	bl	8008042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2400048c 	.word	0x2400048c

080018e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <TIM3_IRQHandler+0x10>)
 80018e6:	f006 fbac 	bl	8008042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	240004d8 	.word	0x240004d8

080018f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018f8:	4802      	ldr	r0, [pc, #8]	@ (8001904 <USART2_IRQHandler+0x10>)
 80018fa:	f007 f9c5 	bl	8008c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	240008a0 	.word	0x240008a0

08001908 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <USART3_IRQHandler+0x10>)
 800190e:	f007 f9bb 	bl	8008c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	24000934 	.word	0x24000934

0800191c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001922:	f006 fb8e 	bl	8008042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	24000570 	.word	0x24000570

08001930 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <TIM5_IRQHandler+0x10>)
 8001936:	f006 fb84 	bl	8008042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	24000524 	.word	0x24000524

08001944 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <UART4_IRQHandler+0x10>)
 800194a:	f007 f99d 	bl	8008c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	240005bc 	.word	0x240005bc

08001958 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <UART7_IRQHandler+0x10>)
 800195e:	f007 f993 	bl	8008c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	240006e4 	.word	0x240006e4

0800196c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001970:	4802      	ldr	r0, [pc, #8]	@ (800197c <UART8_IRQHandler+0x10>)
 8001972:	f007 f989 	bl	8008c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	24000778 	.word	0x24000778

08001980 <UART9_IRQHandler>:

/**
  * @brief This function handles UART9 global interrupt.
  */
void UART9_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART9_IRQn 0 */

  /* USER CODE END UART9_IRQn 0 */
  HAL_UART_IRQHandler(&huart9);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <UART9_IRQHandler+0x10>)
 8001986:	f007 f97f 	bl	8008c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART9_IRQn 1 */

  /* USER CODE END UART9_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2400080c 	.word	0x2400080c

08001994 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <USART10_IRQHandler+0x10>)
 800199a:	f007 f975 	bl	8008c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	24000a5c 	.word	0x24000a5c

080019a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
	return 1;
 80019ac:	2301      	movs	r3, #1
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_kill>:

int _kill(int pid, int sig)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80019c2:	f00e f8c7 	bl	800fb54 <__errno>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2216      	movs	r2, #22
 80019ca:	601a      	str	r2, [r3, #0]
	return -1;
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_exit>:

void _exit(int status)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ffe7 	bl	80019b8 <_kill>
	while (1)
 80019ea:	bf00      	nop
 80019ec:	e7fd      	b.n	80019ea <_exit+0x12>

080019ee <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e00a      	b.n	8001a16 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a00:	f3af 8000 	nop.w
 8001a04:	4601      	mov	r1, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	60ba      	str	r2, [r7, #8]
 8001a0c:	b2ca      	uxtb	r2, r1
 8001a0e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3301      	adds	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	dbf0      	blt.n	8001a00 <_read+0x12>
	}

	return len;
 8001a1e:	687b      	ldr	r3, [r7, #4]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e009      	b.n	8001a4e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	60ba      	str	r2, [r7, #8]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fd10 	bl	8001468 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	dbf1      	blt.n	8001a3a <_write+0x12>
	}
	return len;
 8001a56:	687b      	ldr	r3, [r7, #4]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_close>:

int _close(int file)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a88:	605a      	str	r2, [r3, #4]
	return 0;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_isatty>:

int _isatty(int file)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001aa0:	2301      	movs	r3, #1
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b085      	sub	sp, #20
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001ad0:	4a14      	ldr	r2, [pc, #80]	@ (8001b24 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001ad2:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001adc:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <_sbrk+0x64>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	@ (8001b30 <_sbrk+0x68>)
 8001ae8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d207      	bcs.n	8001b08 <_sbrk+0x40>
		errno = ENOMEM;
 8001af8:	f00e f82c 	bl	800fb54 <__errno>
 8001afc:	4603      	mov	r3, r0
 8001afe:	220c      	movs	r2, #12
 8001b00:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	e009      	b.n	8001b1c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001b08:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001b0e:	4b07      	ldr	r3, [pc, #28]	@ (8001b2c <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	4a05      	ldr	r2, [pc, #20]	@ (8001b2c <_sbrk+0x64>)
 8001b18:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	24050000 	.word	0x24050000
 8001b28:	00000400 	.word	0x00000400
 8001b2c:	24000488 	.word	0x24000488
 8001b30:	24000e70 	.word	0x24000e70

08001b34 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001b38:	4b32      	ldr	r3, [pc, #200]	@ (8001c04 <SystemInit+0xd0>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b3e:	4a31      	ldr	r2, [pc, #196]	@ (8001c04 <SystemInit+0xd0>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b48:	4b2f      	ldr	r3, [pc, #188]	@ (8001c08 <SystemInit+0xd4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	2b06      	cmp	r3, #6
 8001b52:	d807      	bhi.n	8001b64 <SystemInit+0x30>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001b54:	4b2c      	ldr	r3, [pc, #176]	@ (8001c08 <SystemInit+0xd4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 030f 	bic.w	r3, r3, #15
 8001b5c:	4a2a      	ldr	r2, [pc, #168]	@ (8001c08 <SystemInit+0xd4>)
 8001b5e:	f043 0307 	orr.w	r3, r3, #7
 8001b62:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001b64:	4b29      	ldr	r3, [pc, #164]	@ (8001c0c <SystemInit+0xd8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a28      	ldr	r2, [pc, #160]	@ (8001c0c <SystemInit+0xd8>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001b70:	4b26      	ldr	r3, [pc, #152]	@ (8001c0c <SystemInit+0xd8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001b76:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <SystemInit+0xd8>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4924      	ldr	r1, [pc, #144]	@ (8001c0c <SystemInit+0xd8>)
 8001b7c:	4b24      	ldr	r3, [pc, #144]	@ (8001c10 <SystemInit+0xdc>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b82:	4b21      	ldr	r3, [pc, #132]	@ (8001c08 <SystemInit+0xd4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <SystemInit+0x6a>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c08 <SystemInit+0xd4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 030f 	bic.w	r3, r3, #15
 8001b96:	4a1c      	ldr	r2, [pc, #112]	@ (8001c08 <SystemInit+0xd4>)
 8001b98:	f043 0307 	orr.w	r3, r3, #7
 8001b9c:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <SystemInit+0xd8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <SystemInit+0xd8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001baa:	4b18      	ldr	r3, [pc, #96]	@ (8001c0c <SystemInit+0xd8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001bb0:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <SystemInit+0xd8>)
 8001bb2:	4a18      	ldr	r2, [pc, #96]	@ (8001c14 <SystemInit+0xe0>)
 8001bb4:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <SystemInit+0xd8>)
 8001bb8:	4a17      	ldr	r2, [pc, #92]	@ (8001c18 <SystemInit+0xe4>)
 8001bba:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001bbc:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <SystemInit+0xd8>)
 8001bbe:	4a17      	ldr	r2, [pc, #92]	@ (8001c1c <SystemInit+0xe8>)
 8001bc0:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8001bc2:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <SystemInit+0xd8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <SystemInit+0xd8>)
 8001bca:	4a14      	ldr	r2, [pc, #80]	@ (8001c1c <SystemInit+0xe8>)
 8001bcc:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8001bce:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <SystemInit+0xd8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c0c <SystemInit+0xd8>)
 8001bd6:	4a11      	ldr	r2, [pc, #68]	@ (8001c1c <SystemInit+0xe8>)
 8001bd8:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001bda:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <SystemInit+0xd8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <SystemInit+0xd8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a09      	ldr	r2, [pc, #36]	@ (8001c0c <SystemInit+0xd8>)
 8001be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bea:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001bec:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <SystemInit+0xd8>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	661a      	str	r2, [r3, #96]	@ 0x60
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <SystemInit+0xec>)
 8001bf4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001bf8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00
 8001c08:	52002000 	.word	0x52002000
 8001c0c:	58024400 	.word	0x58024400
 8001c10:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c14:	02020200 	.word	0x02020200
 8001c18:	01ff0000 	.word	0x01ff0000
 8001c1c:	01010280 	.word	0x01010280
 8001c20:	52004000 	.word	0x52004000

08001c24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2a:	f107 0310 	add.w	r3, r7, #16
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c42:	4b1e      	ldr	r3, [pc, #120]	@ (8001cbc <MX_TIM2_Init+0x98>)
 8001c44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 550-1;
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cbc <MX_TIM2_Init+0x98>)
 8001c4c:	f240 2225 	movw	r2, #549	@ 0x225
 8001c50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <MX_TIM2_Init+0x98>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001c58:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <MX_TIM2_Init+0x98>)
 8001c5a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001c5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c60:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <MX_TIM2_Init+0x98>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <MX_TIM2_Init+0x98>)
 8001c68:	2280      	movs	r2, #128	@ 0x80
 8001c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c6c:	4813      	ldr	r0, [pc, #76]	@ (8001cbc <MX_TIM2_Init+0x98>)
 8001c6e:	f006 f8db 	bl	8007e28 <HAL_TIM_Base_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001c78:	f7ff fdce 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c82:	f107 0310 	add.w	r3, r7, #16
 8001c86:	4619      	mov	r1, r3
 8001c88:	480c      	ldr	r0, [pc, #48]	@ (8001cbc <MX_TIM2_Init+0x98>)
 8001c8a:	f006 fae1 	bl	8008250 <HAL_TIM_ConfigClockSource>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001c94:	f7ff fdc0 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <MX_TIM2_Init+0x98>)
 8001ca6:	f006 fd43 	bl	8008730 <HAL_TIMEx_MasterConfigSynchronization>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001cb0:	f7ff fdb2 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	2400048c 	.word	0x2400048c

08001cc0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc6:	f107 0310 	add.w	r3, r7, #16
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <MX_TIM3_Init+0x98>)
 8001ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d5c <MX_TIM3_Init+0x9c>)
 8001ce2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 550-1;
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d58 <MX_TIM3_Init+0x98>)
 8001ce6:	f240 2225 	movw	r2, #549	@ 0x225
 8001cea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	4b1a      	ldr	r3, [pc, #104]	@ (8001d58 <MX_TIM3_Init+0x98>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001cf2:	4b19      	ldr	r3, [pc, #100]	@ (8001d58 <MX_TIM3_Init+0x98>)
 8001cf4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001cf8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfa:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <MX_TIM3_Init+0x98>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d00:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <MX_TIM3_Init+0x98>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d06:	4814      	ldr	r0, [pc, #80]	@ (8001d58 <MX_TIM3_Init+0x98>)
 8001d08:	f006 f88e 	bl	8007e28 <HAL_TIM_Base_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001d12:	f7ff fd81 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	4619      	mov	r1, r3
 8001d22:	480d      	ldr	r0, [pc, #52]	@ (8001d58 <MX_TIM3_Init+0x98>)
 8001d24:	f006 fa94 	bl	8008250 <HAL_TIM_ConfigClockSource>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001d2e:	f7ff fd73 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4806      	ldr	r0, [pc, #24]	@ (8001d58 <MX_TIM3_Init+0x98>)
 8001d40:	f006 fcf6 	bl	8008730 <HAL_TIMEx_MasterConfigSynchronization>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001d4a:	f7ff fd65 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	3720      	adds	r7, #32
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	240004d8 	.word	0x240004d8
 8001d5c:	40000400 	.word	0x40000400

08001d60 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d66:	f107 0310 	add.w	r3, r7, #16
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <MX_TIM5_Init+0x98>)
 8001d80:	4a1e      	ldr	r2, [pc, #120]	@ (8001dfc <MX_TIM5_Init+0x9c>)
 8001d82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 550-1;
 8001d84:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <MX_TIM5_Init+0x98>)
 8001d86:	f240 2225 	movw	r2, #549	@ 0x225
 8001d8a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <MX_TIM5_Init+0x98>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8001d92:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <MX_TIM5_Init+0x98>)
 8001d94:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001d98:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9a:	4b17      	ldr	r3, [pc, #92]	@ (8001df8 <MX_TIM5_Init+0x98>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da0:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <MX_TIM5_Init+0x98>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001da6:	4814      	ldr	r0, [pc, #80]	@ (8001df8 <MX_TIM5_Init+0x98>)
 8001da8:	f006 f83e 	bl	8007e28 <HAL_TIM_Base_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001db2:	f7ff fd31 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001dbc:	f107 0310 	add.w	r3, r7, #16
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	480d      	ldr	r0, [pc, #52]	@ (8001df8 <MX_TIM5_Init+0x98>)
 8001dc4:	f006 fa44 	bl	8008250 <HAL_TIM_ConfigClockSource>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001dce:	f7ff fd23 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	@ (8001df8 <MX_TIM5_Init+0x98>)
 8001de0:	f006 fca6 	bl	8008730 <HAL_TIMEx_MasterConfigSynchronization>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001dea:	f7ff fd15 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	3720      	adds	r7, #32
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	24000524 	.word	0x24000524
 8001dfc:	40000c00 	.word	0x40000c00

08001e00 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e06:	f107 0310 	add.w	r3, r7, #16
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <MX_TIM12_Init+0x94>)
 8001e20:	4a1d      	ldr	r2, [pc, #116]	@ (8001e98 <MX_TIM12_Init+0x98>)
 8001e22:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 65535;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	@ (8001e94 <MX_TIM12_Init+0x94>)
 8001e26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e2a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2c:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <MX_TIM12_Init+0x94>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19;
 8001e32:	4b18      	ldr	r3, [pc, #96]	@ (8001e94 <MX_TIM12_Init+0x94>)
 8001e34:	2213      	movs	r2, #19
 8001e36:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e38:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <MX_TIM12_Init+0x94>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <MX_TIM12_Init+0x94>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001e44:	4813      	ldr	r0, [pc, #76]	@ (8001e94 <MX_TIM12_Init+0x94>)
 8001e46:	f005 ffef 	bl	8007e28 <HAL_TIM_Base_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM12_Init+0x54>
  {
    Error_Handler();
 8001e50:	f7ff fce2 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480c      	ldr	r0, [pc, #48]	@ (8001e94 <MX_TIM12_Init+0x94>)
 8001e62:	f006 f9f5 	bl	8008250 <HAL_TIM_ConfigClockSource>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM12_Init+0x70>
  {
    Error_Handler();
 8001e6c:	f7ff fcd4 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	@ (8001e94 <MX_TIM12_Init+0x94>)
 8001e7e:	f006 fc57 	bl	8008730 <HAL_TIMEx_MasterConfigSynchronization>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8001e88:	f7ff fcc6 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	24000570 	.word	0x24000570
 8001e98:	40001800 	.word	0x40001800

08001e9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eac:	d117      	bne.n	8001ede <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eae:	4b39      	ldr	r3, [pc, #228]	@ (8001f94 <HAL_TIM_Base_MspInit+0xf8>)
 8001eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eb4:	4a37      	ldr	r2, [pc, #220]	@ (8001f94 <HAL_TIM_Base_MspInit+0xf8>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ebe:	4b35      	ldr	r3, [pc, #212]	@ (8001f94 <HAL_TIM_Base_MspInit+0xf8>)
 8001ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 11, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	210b      	movs	r1, #11
 8001ed0:	201c      	movs	r0, #28
 8001ed2:	f001 f8a4 	bl	800301e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ed6:	201c      	movs	r0, #28
 8001ed8:	f001 f8bb 	bl	8003052 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001edc:	e055      	b.n	8001f8a <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8001f98 <HAL_TIM_Base_MspInit+0xfc>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d117      	bne.n	8001f18 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f94 <HAL_TIM_Base_MspInit+0xf8>)
 8001eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eee:	4a29      	ldr	r2, [pc, #164]	@ (8001f94 <HAL_TIM_Base_MspInit+0xf8>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ef8:	4b26      	ldr	r3, [pc, #152]	@ (8001f94 <HAL_TIM_Base_MspInit+0xf8>)
 8001efa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2102      	movs	r1, #2
 8001f0a:	201d      	movs	r0, #29
 8001f0c:	f001 f887 	bl	800301e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f10:	201d      	movs	r0, #29
 8001f12:	f001 f89e 	bl	8003052 <HAL_NVIC_EnableIRQ>
}
 8001f16:	e038      	b.n	8001f8a <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM5)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f9c <HAL_TIM_Base_MspInit+0x100>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d117      	bne.n	8001f52 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f22:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <HAL_TIM_Base_MspInit+0xf8>)
 8001f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f28:	4a1a      	ldr	r2, [pc, #104]	@ (8001f94 <HAL_TIM_Base_MspInit+0xf8>)
 8001f2a:	f043 0308 	orr.w	r3, r3, #8
 8001f2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f32:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <HAL_TIM_Base_MspInit+0xf8>)
 8001f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 13, 0);
 8001f40:	2200      	movs	r2, #0
 8001f42:	210d      	movs	r1, #13
 8001f44:	2032      	movs	r0, #50	@ 0x32
 8001f46:	f001 f86a 	bl	800301e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001f4a:	2032      	movs	r0, #50	@ 0x32
 8001f4c:	f001 f881 	bl	8003052 <HAL_NVIC_EnableIRQ>
}
 8001f50:	e01b      	b.n	8001f8a <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM12)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a12      	ldr	r2, [pc, #72]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x104>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d116      	bne.n	8001f8a <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f94 <HAL_TIM_Base_MspInit+0xf8>)
 8001f5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f62:	4a0c      	ldr	r2, [pc, #48]	@ (8001f94 <HAL_TIM_Base_MspInit+0xf8>)
 8001f64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <HAL_TIM_Base_MspInit+0xf8>)
 8001f6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 12, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	210c      	movs	r1, #12
 8001f7e:	202b      	movs	r0, #43	@ 0x2b
 8001f80:	f001 f84d 	bl	800301e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001f84:	202b      	movs	r0, #43	@ 0x2b
 8001f86:	f001 f864 	bl	8003052 <HAL_NVIC_EnableIRQ>
}
 8001f8a:	bf00      	nop
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	58024400 	.word	0x58024400
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	40000c00 	.word	0x40000c00
 8001fa0:	40001800 	.word	0x40001800

08001fa4 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
UART_HandleTypeDef huart10;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001fa8:	4b22      	ldr	r3, [pc, #136]	@ (8002034 <MX_UART4_Init+0x90>)
 8001faa:	4a23      	ldr	r2, [pc, #140]	@ (8002038 <MX_UART4_Init+0x94>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001fae:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <MX_UART4_Init+0x90>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002034 <MX_UART4_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <MX_UART4_Init+0x90>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002034 <MX_UART4_Init+0x90>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <MX_UART4_Init+0x90>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <MX_UART4_Init+0x90>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <MX_UART4_Init+0x90>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fda:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <MX_UART4_Init+0x90>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <MX_UART4_Init+0x90>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <MX_UART4_Init+0x90>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001fec:	4811      	ldr	r0, [pc, #68]	@ (8002034 <MX_UART4_Init+0x90>)
 8001fee:	f006 fc59 	bl	80088a4 <HAL_UART_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001ff8:	f7ff fc0e 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	480d      	ldr	r0, [pc, #52]	@ (8002034 <MX_UART4_Init+0x90>)
 8002000:	f009 f97f 	bl	800b302 <HAL_UARTEx_SetTxFifoThreshold>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800200a:	f7ff fc05 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800200e:	2100      	movs	r1, #0
 8002010:	4808      	ldr	r0, [pc, #32]	@ (8002034 <MX_UART4_Init+0x90>)
 8002012:	f009 f9b4 	bl	800b37e <HAL_UARTEx_SetRxFifoThreshold>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800201c:	f7ff fbfc 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002020:	4804      	ldr	r0, [pc, #16]	@ (8002034 <MX_UART4_Init+0x90>)
 8002022:	f009 f935 	bl	800b290 <HAL_UARTEx_DisableFifoMode>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800202c:	f7ff fbf4 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	240005bc 	.word	0x240005bc
 8002038:	40004c00 	.word	0x40004c00

0800203c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002040:	4b22      	ldr	r3, [pc, #136]	@ (80020cc <MX_UART5_Init+0x90>)
 8002042:	4a23      	ldr	r2, [pc, #140]	@ (80020d0 <MX_UART5_Init+0x94>)
 8002044:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002046:	4b21      	ldr	r3, [pc, #132]	@ (80020cc <MX_UART5_Init+0x90>)
 8002048:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800204c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b1f      	ldr	r3, [pc, #124]	@ (80020cc <MX_UART5_Init+0x90>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b1d      	ldr	r3, [pc, #116]	@ (80020cc <MX_UART5_Init+0x90>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800205a:	4b1c      	ldr	r3, [pc, #112]	@ (80020cc <MX_UART5_Init+0x90>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b1a      	ldr	r3, [pc, #104]	@ (80020cc <MX_UART5_Init+0x90>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b19      	ldr	r3, [pc, #100]	@ (80020cc <MX_UART5_Init+0x90>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b17      	ldr	r3, [pc, #92]	@ (80020cc <MX_UART5_Init+0x90>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002072:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <MX_UART5_Init+0x90>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002078:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <MX_UART5_Init+0x90>)
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800207e:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <MX_UART5_Init+0x90>)
 8002080:	2200      	movs	r2, #0
 8002082:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002084:	4811      	ldr	r0, [pc, #68]	@ (80020cc <MX_UART5_Init+0x90>)
 8002086:	f006 fc0d 	bl	80088a4 <HAL_UART_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002090:	f7ff fbc2 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002094:	2100      	movs	r1, #0
 8002096:	480d      	ldr	r0, [pc, #52]	@ (80020cc <MX_UART5_Init+0x90>)
 8002098:	f009 f933 	bl	800b302 <HAL_UARTEx_SetTxFifoThreshold>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80020a2:	f7ff fbb9 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020a6:	2100      	movs	r1, #0
 80020a8:	4808      	ldr	r0, [pc, #32]	@ (80020cc <MX_UART5_Init+0x90>)
 80020aa:	f009 f968 	bl	800b37e <HAL_UARTEx_SetRxFifoThreshold>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80020b4:	f7ff fbb0 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80020b8:	4804      	ldr	r0, [pc, #16]	@ (80020cc <MX_UART5_Init+0x90>)
 80020ba:	f009 f8e9 	bl	800b290 <HAL_UARTEx_DisableFifoMode>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80020c4:	f7ff fba8 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	24000650 	.word	0x24000650
 80020d0:	40005000 	.word	0x40005000

080020d4 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80020d8:	4b22      	ldr	r3, [pc, #136]	@ (8002164 <MX_UART7_Init+0x90>)
 80020da:	4a23      	ldr	r2, [pc, #140]	@ (8002168 <MX_UART7_Init+0x94>)
 80020dc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80020de:	4b21      	ldr	r3, [pc, #132]	@ (8002164 <MX_UART7_Init+0x90>)
 80020e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020e4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80020e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002164 <MX_UART7_Init+0x90>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <MX_UART7_Init+0x90>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80020f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002164 <MX_UART7_Init+0x90>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <MX_UART7_Init+0x90>)
 80020fa:	220c      	movs	r2, #12
 80020fc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fe:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <MX_UART7_Init+0x90>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002104:	4b17      	ldr	r3, [pc, #92]	@ (8002164 <MX_UART7_Init+0x90>)
 8002106:	2200      	movs	r2, #0
 8002108:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800210a:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <MX_UART7_Init+0x90>)
 800210c:	2200      	movs	r2, #0
 800210e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002110:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <MX_UART7_Init+0x90>)
 8002112:	2200      	movs	r2, #0
 8002114:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002116:	4b13      	ldr	r3, [pc, #76]	@ (8002164 <MX_UART7_Init+0x90>)
 8002118:	2200      	movs	r2, #0
 800211a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800211c:	4811      	ldr	r0, [pc, #68]	@ (8002164 <MX_UART7_Init+0x90>)
 800211e:	f006 fbc1 	bl	80088a4 <HAL_UART_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8002128:	f7ff fb76 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800212c:	2100      	movs	r1, #0
 800212e:	480d      	ldr	r0, [pc, #52]	@ (8002164 <MX_UART7_Init+0x90>)
 8002130:	f009 f8e7 	bl	800b302 <HAL_UARTEx_SetTxFifoThreshold>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800213a:	f7ff fb6d 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800213e:	2100      	movs	r1, #0
 8002140:	4808      	ldr	r0, [pc, #32]	@ (8002164 <MX_UART7_Init+0x90>)
 8002142:	f009 f91c 	bl	800b37e <HAL_UARTEx_SetRxFifoThreshold>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 800214c:	f7ff fb64 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002150:	4804      	ldr	r0, [pc, #16]	@ (8002164 <MX_UART7_Init+0x90>)
 8002152:	f009 f89d 	bl	800b290 <HAL_UARTEx_DisableFifoMode>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 800215c:	f7ff fb5c 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	240006e4 	.word	0x240006e4
 8002168:	40007800 	.word	0x40007800

0800216c <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002170:	4b22      	ldr	r3, [pc, #136]	@ (80021fc <MX_UART8_Init+0x90>)
 8002172:	4a23      	ldr	r2, [pc, #140]	@ (8002200 <MX_UART8_Init+0x94>)
 8002174:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002176:	4b21      	ldr	r3, [pc, #132]	@ (80021fc <MX_UART8_Init+0x90>)
 8002178:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800217c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b1f      	ldr	r3, [pc, #124]	@ (80021fc <MX_UART8_Init+0x90>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002184:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <MX_UART8_Init+0x90>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800218a:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <MX_UART8_Init+0x90>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002190:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <MX_UART8_Init+0x90>)
 8002192:	220c      	movs	r2, #12
 8002194:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <MX_UART8_Init+0x90>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800219c:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <MX_UART8_Init+0x90>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021a2:	4b16      	ldr	r3, [pc, #88]	@ (80021fc <MX_UART8_Init+0x90>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021a8:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <MX_UART8_Init+0x90>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ae:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <MX_UART8_Init+0x90>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80021b4:	4811      	ldr	r0, [pc, #68]	@ (80021fc <MX_UART8_Init+0x90>)
 80021b6:	f006 fb75 	bl	80088a4 <HAL_UART_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80021c0:	f7ff fb2a 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021c4:	2100      	movs	r1, #0
 80021c6:	480d      	ldr	r0, [pc, #52]	@ (80021fc <MX_UART8_Init+0x90>)
 80021c8:	f009 f89b 	bl	800b302 <HAL_UARTEx_SetTxFifoThreshold>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80021d2:	f7ff fb21 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d6:	2100      	movs	r1, #0
 80021d8:	4808      	ldr	r0, [pc, #32]	@ (80021fc <MX_UART8_Init+0x90>)
 80021da:	f009 f8d0 	bl	800b37e <HAL_UARTEx_SetRxFifoThreshold>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80021e4:	f7ff fb18 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80021e8:	4804      	ldr	r0, [pc, #16]	@ (80021fc <MX_UART8_Init+0x90>)
 80021ea:	f009 f851 	bl	800b290 <HAL_UARTEx_DisableFifoMode>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80021f4:	f7ff fb10 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	24000778 	.word	0x24000778
 8002200:	40007c00 	.word	0x40007c00

08002204 <MX_UART9_Init>:
/* UART9 init function */
void MX_UART9_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 8002208:	4b22      	ldr	r3, [pc, #136]	@ (8002294 <MX_UART9_Init+0x90>)
 800220a:	4a23      	ldr	r2, [pc, #140]	@ (8002298 <MX_UART9_Init+0x94>)
 800220c:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 115200;
 800220e:	4b21      	ldr	r3, [pc, #132]	@ (8002294 <MX_UART9_Init+0x90>)
 8002210:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002214:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 8002216:	4b1f      	ldr	r3, [pc, #124]	@ (8002294 <MX_UART9_Init+0x90>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 800221c:	4b1d      	ldr	r3, [pc, #116]	@ (8002294 <MX_UART9_Init+0x90>)
 800221e:	2200      	movs	r2, #0
 8002220:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 8002222:	4b1c      	ldr	r3, [pc, #112]	@ (8002294 <MX_UART9_Init+0x90>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 8002228:	4b1a      	ldr	r3, [pc, #104]	@ (8002294 <MX_UART9_Init+0x90>)
 800222a:	220c      	movs	r2, #12
 800222c:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800222e:	4b19      	ldr	r3, [pc, #100]	@ (8002294 <MX_UART9_Init+0x90>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 8002234:	4b17      	ldr	r3, [pc, #92]	@ (8002294 <MX_UART9_Init+0x90>)
 8002236:	2200      	movs	r2, #0
 8002238:	61da      	str	r2, [r3, #28]
  huart9.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800223a:	4b16      	ldr	r3, [pc, #88]	@ (8002294 <MX_UART9_Init+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	621a      	str	r2, [r3, #32]
  huart9.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002240:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <MX_UART9_Init+0x90>)
 8002242:	2200      	movs	r2, #0
 8002244:	625a      	str	r2, [r3, #36]	@ 0x24
  huart9.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002246:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <MX_UART9_Init+0x90>)
 8002248:	2200      	movs	r2, #0
 800224a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart9) != HAL_OK)
 800224c:	4811      	ldr	r0, [pc, #68]	@ (8002294 <MX_UART9_Init+0x90>)
 800224e:	f006 fb29 	bl	80088a4 <HAL_UART_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_UART9_Init+0x58>
  {
    Error_Handler();
 8002258:	f7ff fade 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart9, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800225c:	2100      	movs	r1, #0
 800225e:	480d      	ldr	r0, [pc, #52]	@ (8002294 <MX_UART9_Init+0x90>)
 8002260:	f009 f84f 	bl	800b302 <HAL_UARTEx_SetTxFifoThreshold>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_UART9_Init+0x6a>
  {
    Error_Handler();
 800226a:	f7ff fad5 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart9, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800226e:	2100      	movs	r1, #0
 8002270:	4808      	ldr	r0, [pc, #32]	@ (8002294 <MX_UART9_Init+0x90>)
 8002272:	f009 f884 	bl	800b37e <HAL_UARTEx_SetRxFifoThreshold>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_UART9_Init+0x7c>
  {
    Error_Handler();
 800227c:	f7ff facc 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart9) != HAL_OK)
 8002280:	4804      	ldr	r0, [pc, #16]	@ (8002294 <MX_UART9_Init+0x90>)
 8002282:	f009 f805 	bl	800b290 <HAL_UARTEx_DisableFifoMode>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_UART9_Init+0x8c>
  {
    Error_Handler();
 800228c:	f7ff fac4 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	2400080c 	.word	0x2400080c
 8002298:	40011800 	.word	0x40011800

0800229c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022a0:	4b39      	ldr	r3, [pc, #228]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 80022a2:	4a3a      	ldr	r2, [pc, #232]	@ (800238c <MX_USART2_UART_Init+0xf0>)
 80022a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022a6:	4b38      	ldr	r3, [pc, #224]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 80022a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ae:	4b36      	ldr	r3, [pc, #216]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022b4:	4b34      	ldr	r3, [pc, #208]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ba:	4b33      	ldr	r3, [pc, #204]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022c0:	4b31      	ldr	r3, [pc, #196]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 80022c2:	220c      	movs	r2, #12
 80022c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022c6:	4b30      	ldr	r3, [pc, #192]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 80022da:	2200      	movs	r2, #0
 80022dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022de:	4b2a      	ldr	r3, [pc, #168]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022e4:	4828      	ldr	r0, [pc, #160]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 80022e6:	f006 fadd 	bl	80088a4 <HAL_UART_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80022f0:	f7ff fa92 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022f4:	2100      	movs	r1, #0
 80022f6:	4824      	ldr	r0, [pc, #144]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 80022f8:	f009 f803 	bl	800b302 <HAL_UARTEx_SetTxFifoThreshold>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002302:	f7ff fa89 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002306:	2100      	movs	r1, #0
 8002308:	481f      	ldr	r0, [pc, #124]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 800230a:	f009 f838 	bl	800b37e <HAL_UARTEx_SetRxFifoThreshold>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002314:	f7ff fa80 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002318:	481b      	ldr	r0, [pc, #108]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 800231a:	f008 ffb9 	bl	800b290 <HAL_UARTEx_DisableFifoMode>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002324:	f7ff fa78 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  HAL_UART_Transmit(&huart2,unlock_register, sizeof(unlock_register),1000);
 8002328:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800232c:	2205      	movs	r2, #5
 800232e:	4918      	ldr	r1, [pc, #96]	@ (8002390 <MX_USART2_UART_Init+0xf4>)
 8002330:	4815      	ldr	r0, [pc, #84]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 8002332:	f006 fb07 	bl	8008944 <HAL_UART_Transmit>
  HAL_Delay(5);
 8002336:	2005      	movs	r0, #5
 8002338:	f000 fd72 	bl	8002e20 <HAL_Delay>
  HAL_UART_Transmit(&huart2,reset_z_axis, sizeof(reset_z_axis),1000);
 800233c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002340:	2205      	movs	r2, #5
 8002342:	4914      	ldr	r1, [pc, #80]	@ (8002394 <MX_USART2_UART_Init+0xf8>)
 8002344:	4810      	ldr	r0, [pc, #64]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 8002346:	f006 fafd 	bl	8008944 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_output_200Hz, sizeof(set_output_200Hz),1000);
 800234a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800234e:	2205      	movs	r2, #5
 8002350:	4911      	ldr	r1, [pc, #68]	@ (8002398 <MX_USART2_UART_Init+0xfc>)
 8002352:	480d      	ldr	r0, [pc, #52]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 8002354:	f006 faf6 	bl	8008944 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_baudrate_115200, sizeof(set_baudrate_115200),1000);
 8002358:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800235c:	2205      	movs	r2, #5
 800235e:	490f      	ldr	r1, [pc, #60]	@ (800239c <MX_USART2_UART_Init+0x100>)
 8002360:	4809      	ldr	r0, [pc, #36]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 8002362:	f006 faef 	bl	8008944 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,save_settings, sizeof(save_settings),1000);
 8002366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800236a:	2205      	movs	r2, #5
 800236c:	490c      	ldr	r1, [pc, #48]	@ (80023a0 <MX_USART2_UART_Init+0x104>)
 800236e:	4806      	ldr	r0, [pc, #24]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 8002370:	f006 fae8 	bl	8008944 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,restart_device, sizeof(restart_device),1000);
 8002374:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002378:	2205      	movs	r2, #5
 800237a:	490a      	ldr	r1, [pc, #40]	@ (80023a4 <MX_USART2_UART_Init+0x108>)
 800237c:	4802      	ldr	r0, [pc, #8]	@ (8002388 <MX_USART2_UART_Init+0xec>)
 800237e:	f006 fae1 	bl	8008944 <HAL_UART_Transmit>


  /* USER CODE END USART2_Init 2 */

}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	240008a0 	.word	0x240008a0
 800238c:	40004400 	.word	0x40004400
 8002390:	2400002c 	.word	0x2400002c
 8002394:	24000034 	.word	0x24000034
 8002398:	2400003c 	.word	0x2400003c
 800239c:	24000044 	.word	0x24000044
 80023a0:	2400004c 	.word	0x2400004c
 80023a4:	24000054 	.word	0x24000054

080023a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023ac:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <MX_USART3_UART_Init+0x90>)
 80023ae:	4a23      	ldr	r2, [pc, #140]	@ (800243c <MX_USART3_UART_Init+0x94>)
 80023b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023b2:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <MX_USART3_UART_Init+0x90>)
 80023b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <MX_USART3_UART_Init+0x90>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002438 <MX_USART3_UART_Init+0x90>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <MX_USART3_UART_Init+0x90>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <MX_USART3_UART_Init+0x90>)
 80023ce:	220c      	movs	r2, #12
 80023d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023d2:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <MX_USART3_UART_Init+0x90>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d8:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <MX_USART3_UART_Init+0x90>)
 80023da:	2200      	movs	r2, #0
 80023dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023de:	4b16      	ldr	r3, [pc, #88]	@ (8002438 <MX_USART3_UART_Init+0x90>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023e4:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <MX_USART3_UART_Init+0x90>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ea:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <MX_USART3_UART_Init+0x90>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023f0:	4811      	ldr	r0, [pc, #68]	@ (8002438 <MX_USART3_UART_Init+0x90>)
 80023f2:	f006 fa57 	bl	80088a4 <HAL_UART_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80023fc:	f7ff fa0c 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002400:	2100      	movs	r1, #0
 8002402:	480d      	ldr	r0, [pc, #52]	@ (8002438 <MX_USART3_UART_Init+0x90>)
 8002404:	f008 ff7d 	bl	800b302 <HAL_UARTEx_SetTxFifoThreshold>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800240e:	f7ff fa03 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002412:	2100      	movs	r1, #0
 8002414:	4808      	ldr	r0, [pc, #32]	@ (8002438 <MX_USART3_UART_Init+0x90>)
 8002416:	f008 ffb2 	bl	800b37e <HAL_UARTEx_SetRxFifoThreshold>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002420:	f7ff f9fa 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002424:	4804      	ldr	r0, [pc, #16]	@ (8002438 <MX_USART3_UART_Init+0x90>)
 8002426:	f008 ff33 	bl	800b290 <HAL_UARTEx_DisableFifoMode>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002430:	f7ff f9f2 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	24000934 	.word	0x24000934
 800243c:	40004800 	.word	0x40004800

08002440 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002444:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <MX_USART6_UART_Init+0x90>)
 8002446:	4a23      	ldr	r2, [pc, #140]	@ (80024d4 <MX_USART6_UART_Init+0x94>)
 8002448:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800244a:	4b21      	ldr	r3, [pc, #132]	@ (80024d0 <MX_USART6_UART_Init+0x90>)
 800244c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002450:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002452:	4b1f      	ldr	r3, [pc, #124]	@ (80024d0 <MX_USART6_UART_Init+0x90>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002458:	4b1d      	ldr	r3, [pc, #116]	@ (80024d0 <MX_USART6_UART_Init+0x90>)
 800245a:	2200      	movs	r2, #0
 800245c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800245e:	4b1c      	ldr	r3, [pc, #112]	@ (80024d0 <MX_USART6_UART_Init+0x90>)
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002464:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <MX_USART6_UART_Init+0x90>)
 8002466:	220c      	movs	r2, #12
 8002468:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800246a:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <MX_USART6_UART_Init+0x90>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002470:	4b17      	ldr	r3, [pc, #92]	@ (80024d0 <MX_USART6_UART_Init+0x90>)
 8002472:	2200      	movs	r2, #0
 8002474:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002476:	4b16      	ldr	r3, [pc, #88]	@ (80024d0 <MX_USART6_UART_Init+0x90>)
 8002478:	2200      	movs	r2, #0
 800247a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800247c:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <MX_USART6_UART_Init+0x90>)
 800247e:	2200      	movs	r2, #0
 8002480:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002482:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <MX_USART6_UART_Init+0x90>)
 8002484:	2200      	movs	r2, #0
 8002486:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002488:	4811      	ldr	r0, [pc, #68]	@ (80024d0 <MX_USART6_UART_Init+0x90>)
 800248a:	f006 fa0b 	bl	80088a4 <HAL_UART_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002494:	f7ff f9c0 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002498:	2100      	movs	r1, #0
 800249a:	480d      	ldr	r0, [pc, #52]	@ (80024d0 <MX_USART6_UART_Init+0x90>)
 800249c:	f008 ff31 	bl	800b302 <HAL_UARTEx_SetTxFifoThreshold>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80024a6:	f7ff f9b7 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024aa:	2100      	movs	r1, #0
 80024ac:	4808      	ldr	r0, [pc, #32]	@ (80024d0 <MX_USART6_UART_Init+0x90>)
 80024ae:	f008 ff66 	bl	800b37e <HAL_UARTEx_SetRxFifoThreshold>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80024b8:	f7ff f9ae 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80024bc:	4804      	ldr	r0, [pc, #16]	@ (80024d0 <MX_USART6_UART_Init+0x90>)
 80024be:	f008 fee7 	bl	800b290 <HAL_UARTEx_DisableFifoMode>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80024c8:	f7ff f9a6 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	240009c8 	.word	0x240009c8
 80024d4:	40011400 	.word	0x40011400

080024d8 <MX_USART10_UART_Init>:
/* USART10 init function */

void MX_USART10_UART_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80024dc:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <MX_USART10_UART_Init+0x90>)
 80024de:	4a23      	ldr	r2, [pc, #140]	@ (800256c <MX_USART10_UART_Init+0x94>)
 80024e0:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 80024e2:	4b21      	ldr	r3, [pc, #132]	@ (8002568 <MX_USART10_UART_Init+0x90>)
 80024e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024e8:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80024ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002568 <MX_USART10_UART_Init+0x90>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002568 <MX_USART10_UART_Init+0x90>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80024f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002568 <MX_USART10_UART_Init+0x90>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80024fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002568 <MX_USART10_UART_Init+0x90>)
 80024fe:	220c      	movs	r2, #12
 8002500:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002502:	4b19      	ldr	r3, [pc, #100]	@ (8002568 <MX_USART10_UART_Init+0x90>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8002508:	4b17      	ldr	r3, [pc, #92]	@ (8002568 <MX_USART10_UART_Init+0x90>)
 800250a:	2200      	movs	r2, #0
 800250c:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <MX_USART10_UART_Init+0x90>)
 8002510:	2200      	movs	r2, #0
 8002512:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002514:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <MX_USART10_UART_Init+0x90>)
 8002516:	2200      	movs	r2, #0
 8002518:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800251a:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <MX_USART10_UART_Init+0x90>)
 800251c:	2200      	movs	r2, #0
 800251e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8002520:	4811      	ldr	r0, [pc, #68]	@ (8002568 <MX_USART10_UART_Init+0x90>)
 8002522:	f006 f9bf 	bl	80088a4 <HAL_UART_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 800252c:	f7ff f974 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002530:	2100      	movs	r1, #0
 8002532:	480d      	ldr	r0, [pc, #52]	@ (8002568 <MX_USART10_UART_Init+0x90>)
 8002534:	f008 fee5 	bl	800b302 <HAL_UARTEx_SetTxFifoThreshold>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 800253e:	f7ff f96b 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002542:	2100      	movs	r1, #0
 8002544:	4808      	ldr	r0, [pc, #32]	@ (8002568 <MX_USART10_UART_Init+0x90>)
 8002546:	f008 ff1a 	bl	800b37e <HAL_UARTEx_SetRxFifoThreshold>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8002550:	f7ff f962 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8002554:	4804      	ldr	r0, [pc, #16]	@ (8002568 <MX_USART10_UART_Init+0x90>)
 8002556:	f008 fe9b 	bl	800b290 <HAL_UARTEx_DisableFifoMode>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8002560:	f7ff f95a 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	24000a5c 	.word	0x24000a5c
 800256c:	40011c00 	.word	0x40011c00

08002570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b0c8      	sub	sp, #288	@ 0x120
 8002574:	af00      	add	r7, sp, #0
 8002576:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800257a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800257e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002590:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002594:	22b8      	movs	r2, #184	@ 0xb8
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f00d fa5a 	bl	800fa52 <memset>
  if(uartHandle->Instance==UART4)
 800259e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80025a2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4aaa      	ldr	r2, [pc, #680]	@ (8002854 <HAL_UART_MspInit+0x2e4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d14e      	bne.n	800264e <HAL_UART_MspInit+0xde>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80025b0:	f04f 0202 	mov.w	r2, #2
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025c2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 fe6c 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80025d2:	f7ff f921 	bl	8001818 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025d6:	4ba0      	ldr	r3, [pc, #640]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 80025d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025dc:	4a9e      	ldr	r2, [pc, #632]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 80025de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80025e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025e6:	4b9c      	ldr	r3, [pc, #624]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 80025e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f4:	4b98      	ldr	r3, [pc, #608]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 80025f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025fa:	4a97      	ldr	r2, [pc, #604]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002604:	4b94      	ldr	r3, [pc, #592]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 8002606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002610:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002612:	2303      	movs	r3, #3
 8002614:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800262a:	2308      	movs	r3, #8
 800262c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002630:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002634:	4619      	mov	r1, r3
 8002636:	4889      	ldr	r0, [pc, #548]	@ (800285c <HAL_UART_MspInit+0x2ec>)
 8002638:	f002 fcec 	bl	8005014 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	2108      	movs	r1, #8
 8002640:	2034      	movs	r0, #52	@ 0x34
 8002642:	f000 fcec 	bl	800301e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002646:	2034      	movs	r0, #52	@ 0x34
 8002648:	f000 fd03 	bl	8003052 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }
}
 800264c:	e320      	b.n	8002c90 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART5)
 800264e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002652:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a81      	ldr	r2, [pc, #516]	@ (8002860 <HAL_UART_MspInit+0x2f0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d147      	bne.n	80026f0 <HAL_UART_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002660:	f04f 0202 	mov.w	r2, #2
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800266c:	2300      	movs	r3, #0
 800266e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002672:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002676:	4618      	mov	r0, r3
 8002678:	f003 fe14 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_UART_MspInit+0x116>
      Error_Handler();
 8002682:	f7ff f8c9 	bl	8001818 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002686:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 8002688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800268c:	4a72      	ldr	r2, [pc, #456]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 800268e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002692:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002696:	4b70      	ldr	r3, [pc, #448]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 8002698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800269c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80026a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 80026a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026aa:	4a6b      	ldr	r2, [pc, #428]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026b4:	4b68      	ldr	r3, [pc, #416]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 80026b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	643b      	str	r3, [r7, #64]	@ 0x40
 80026c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 80026c2:	f242 0320 	movw	r3, #8224	@ 0x2020
 80026c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80026dc:	230e      	movs	r3, #14
 80026de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80026e6:	4619      	mov	r1, r3
 80026e8:	485e      	ldr	r0, [pc, #376]	@ (8002864 <HAL_UART_MspInit+0x2f4>)
 80026ea:	f002 fc93 	bl	8005014 <HAL_GPIO_Init>
}
 80026ee:	e2cf      	b.n	8002c90 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART7)
 80026f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026f4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a5a      	ldr	r2, [pc, #360]	@ (8002868 <HAL_UART_MspInit+0x2f8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d14f      	bne.n	80027a2 <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002702:	f04f 0202 	mov.w	r2, #2
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800270e:	2300      	movs	r3, #0
 8002710:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002714:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fdc3 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8002724:	f7ff f878 	bl	8001818 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002728:	4b4b      	ldr	r3, [pc, #300]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 800272a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800272e:	4a4a      	ldr	r2, [pc, #296]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 8002730:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002734:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002738:	4b47      	ldr	r3, [pc, #284]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 800273a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800273e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002742:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002746:	4b44      	ldr	r3, [pc, #272]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 8002748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800274c:	4a42      	ldr	r2, [pc, #264]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 800274e:	f043 0310 	orr.w	r3, r3, #16
 8002752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002756:	4b40      	ldr	r3, [pc, #256]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 8002758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002764:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002768:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800277e:	2307      	movs	r3, #7
 8002780:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002784:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002788:	4619      	mov	r1, r3
 800278a:	4838      	ldr	r0, [pc, #224]	@ (800286c <HAL_UART_MspInit+0x2fc>)
 800278c:	f002 fc42 	bl	8005014 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 6, 0);
 8002790:	2200      	movs	r2, #0
 8002792:	2106      	movs	r1, #6
 8002794:	2052      	movs	r0, #82	@ 0x52
 8002796:	f000 fc42 	bl	800301e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800279a:	2052      	movs	r0, #82	@ 0x52
 800279c:	f000 fc59 	bl	8003052 <HAL_NVIC_EnableIRQ>
}
 80027a0:	e276      	b.n	8002c90 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART8)
 80027a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a30      	ldr	r2, [pc, #192]	@ (8002870 <HAL_UART_MspInit+0x300>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d15f      	bne.n	8002874 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80027b4:	f04f 0202 	mov.w	r2, #2
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027c6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80027ca:	4618      	mov	r0, r3
 80027cc:	f003 fd6a 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_UART_MspInit+0x26a>
      Error_Handler();
 80027d6:	f7ff f81f 	bl	8001818 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80027da:	4b1f      	ldr	r3, [pc, #124]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 80027dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 80027e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 80027ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80027f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027f8:	4b17      	ldr	r3, [pc, #92]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 80027fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027fe:	4a16      	ldr	r2, [pc, #88]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 8002800:	f043 0310 	orr.w	r3, r3, #16
 8002804:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002808:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <HAL_UART_MspInit+0x2e8>)
 800280a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	633b      	str	r3, [r7, #48]	@ 0x30
 8002814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002816:	2303      	movs	r3, #3
 8002818:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002828:	2300      	movs	r3, #0
 800282a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800282e:	2308      	movs	r3, #8
 8002830:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002834:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002838:	4619      	mov	r1, r3
 800283a:	480c      	ldr	r0, [pc, #48]	@ (800286c <HAL_UART_MspInit+0x2fc>)
 800283c:	f002 fbea 	bl	8005014 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 15, 0);
 8002840:	2200      	movs	r2, #0
 8002842:	210f      	movs	r1, #15
 8002844:	2053      	movs	r0, #83	@ 0x53
 8002846:	f000 fbea 	bl	800301e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800284a:	2053      	movs	r0, #83	@ 0x53
 800284c:	f000 fc01 	bl	8003052 <HAL_NVIC_EnableIRQ>
}
 8002850:	e21e      	b.n	8002c90 <HAL_UART_MspInit+0x720>
 8002852:	bf00      	nop
 8002854:	40004c00 	.word	0x40004c00
 8002858:	58024400 	.word	0x58024400
 800285c:	58020000 	.word	0x58020000
 8002860:	40005000 	.word	0x40005000
 8002864:	58020400 	.word	0x58020400
 8002868:	40007800 	.word	0x40007800
 800286c:	58021000 	.word	0x58021000
 8002870:	40007c00 	.word	0x40007c00
  else if(uartHandle->Instance==UART9)
 8002874:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002878:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4abd      	ldr	r2, [pc, #756]	@ (8002b78 <HAL_UART_MspInit+0x608>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d14f      	bne.n	8002926 <HAL_UART_MspInit+0x3b6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART9;
 8002886:	f04f 0201 	mov.w	r2, #1
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002892:	2300      	movs	r3, #0
 8002894:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002898:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800289c:	4618      	mov	r0, r3
 800289e:	f003 fd01 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_UART_MspInit+0x33c>
      Error_Handler();
 80028a8:	f7fe ffb6 	bl	8001818 <Error_Handler>
    __HAL_RCC_UART9_CLK_ENABLE();
 80028ac:	4bb3      	ldr	r3, [pc, #716]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 80028ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b2:	4ab2      	ldr	r2, [pc, #712]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 80028b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028bc:	4baf      	ldr	r3, [pc, #700]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 80028be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ca:	4bac      	ldr	r3, [pc, #688]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 80028cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028d0:	4aaa      	ldr	r2, [pc, #680]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 80028d2:	f043 0308 	orr.w	r3, r3, #8
 80028d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028da:	4ba8      	ldr	r3, [pc, #672]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 80028dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80028e8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80028ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 8002902:	230b      	movs	r3, #11
 8002904:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002908:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800290c:	4619      	mov	r1, r3
 800290e:	489c      	ldr	r0, [pc, #624]	@ (8002b80 <HAL_UART_MspInit+0x610>)
 8002910:	f002 fb80 	bl	8005014 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART9_IRQn, 5, 0);
 8002914:	2200      	movs	r2, #0
 8002916:	2105      	movs	r1, #5
 8002918:	209b      	movs	r0, #155	@ 0x9b
 800291a:	f000 fb80 	bl	800301e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART9_IRQn);
 800291e:	209b      	movs	r0, #155	@ 0x9b
 8002920:	f000 fb97 	bl	8003052 <HAL_NVIC_EnableIRQ>
}
 8002924:	e1b4      	b.n	8002c90 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART2)
 8002926:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800292a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a94      	ldr	r2, [pc, #592]	@ (8002b84 <HAL_UART_MspInit+0x614>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d156      	bne.n	80029e6 <HAL_UART_MspInit+0x476>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002938:	f04f 0202 	mov.w	r2, #2
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800294a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800294e:	4618      	mov	r0, r3
 8002950:	f003 fca8 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_UART_MspInit+0x3ee>
      Error_Handler();
 800295a:	f7fe ff5d 	bl	8001818 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800295e:	4b87      	ldr	r3, [pc, #540]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002964:	4a85      	ldr	r2, [pc, #532]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800296a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800296e:	4b83      	ldr	r3, [pc, #524]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297c:	4b7f      	ldr	r3, [pc, #508]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 800297e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002982:	4a7e      	ldr	r2, [pc, #504]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800298c:	4b7b      	ldr	r3, [pc, #492]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 800298e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002992:	f003 0201 	and.w	r2, r3, #1
 8002996:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800299a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80029a8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029aa:	230c      	movs	r3, #12
 80029ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029bc:	2300      	movs	r3, #0
 80029be:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029c2:	2307      	movs	r3, #7
 80029c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80029cc:	4619      	mov	r1, r3
 80029ce:	486e      	ldr	r0, [pc, #440]	@ (8002b88 <HAL_UART_MspInit+0x618>)
 80029d0:	f002 fb20 	bl	8005014 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80029d4:	2200      	movs	r2, #0
 80029d6:	210f      	movs	r1, #15
 80029d8:	2026      	movs	r0, #38	@ 0x26
 80029da:	f000 fb20 	bl	800301e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029de:	2026      	movs	r0, #38	@ 0x26
 80029e0:	f000 fb37 	bl	8003052 <HAL_NVIC_EnableIRQ>
}
 80029e4:	e154      	b.n	8002c90 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART3)
 80029e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a66      	ldr	r2, [pc, #408]	@ (8002b8c <HAL_UART_MspInit+0x61c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d15f      	bne.n	8002ab8 <HAL_UART_MspInit+0x548>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029f8:	f04f 0202 	mov.w	r2, #2
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a0a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fc48 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_UART_MspInit+0x4ae>
      Error_Handler();
 8002a1a:	f7fe fefd 	bl	8001818 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a1e:	4b57      	ldr	r3, [pc, #348]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a24:	4a55      	ldr	r2, [pc, #340]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002a26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a2a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a2e:	4b53      	ldr	r3, [pc, #332]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a34:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002a38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a4a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a4c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a52:	4a4a      	ldr	r2, [pc, #296]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002a54:	f043 0308 	orr.w	r3, r3, #8
 8002a58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a5c:	4b47      	ldr	r3, [pc, #284]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a62:	f003 0208 	and.w	r2, r3, #8
 8002a66:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a78:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a7e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a94:	2307      	movs	r3, #7
 8002a96:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a9a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4837      	ldr	r0, [pc, #220]	@ (8002b80 <HAL_UART_MspInit+0x610>)
 8002aa2:	f002 fab7 	bl	8005014 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	210e      	movs	r1, #14
 8002aaa:	2027      	movs	r0, #39	@ 0x27
 8002aac:	f000 fab7 	bl	800301e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ab0:	2027      	movs	r0, #39	@ 0x27
 8002ab2:	f000 face 	bl	8003052 <HAL_NVIC_EnableIRQ>
}
 8002ab6:	e0eb      	b.n	8002c90 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART6)
 8002ab8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002abc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a32      	ldr	r2, [pc, #200]	@ (8002b90 <HAL_UART_MspInit+0x620>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d166      	bne.n	8002b98 <HAL_UART_MspInit+0x628>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002aca:	f04f 0201 	mov.w	r2, #1
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002adc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f003 fbdf 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_UART_MspInit+0x580>
      Error_Handler();
 8002aec:	f7fe fe94 	bl	8001818 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002af0:	4b22      	ldr	r3, [pc, #136]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002af6:	4a21      	ldr	r2, [pc, #132]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002af8:	f043 0320 	orr.w	r3, r3, #32
 8002afc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b00:	4b1e      	ldr	r3, [pc, #120]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b06:	f003 0220 	and.w	r2, r3, #32
 8002b0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b1c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1e:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b24:	4a15      	ldr	r2, [pc, #84]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002b26:	f043 0304 	orr.w	r3, r3, #4
 8002b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b2e:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <HAL_UART_MspInit+0x60c>)
 8002b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b34:	f003 0204 	and.w	r2, r3, #4
 8002b38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b3c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b46:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002b4a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b4c:	23c0      	movs	r3, #192	@ 0xc0
 8002b4e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002b64:	2307      	movs	r3, #7
 8002b66:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b6a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4808      	ldr	r0, [pc, #32]	@ (8002b94 <HAL_UART_MspInit+0x624>)
 8002b72:	f002 fa4f 	bl	8005014 <HAL_GPIO_Init>
}
 8002b76:	e08b      	b.n	8002c90 <HAL_UART_MspInit+0x720>
 8002b78:	40011800 	.word	0x40011800
 8002b7c:	58024400 	.word	0x58024400
 8002b80:	58020c00 	.word	0x58020c00
 8002b84:	40004400 	.word	0x40004400
 8002b88:	58020000 	.word	0x58020000
 8002b8c:	40004800 	.word	0x40004800
 8002b90:	40011400 	.word	0x40011400
 8002b94:	58020800 	.word	0x58020800
  else if(uartHandle->Instance==USART10)
 8002b98:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b9c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a3d      	ldr	r2, [pc, #244]	@ (8002c9c <HAL_UART_MspInit+0x72c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d172      	bne.n	8002c90 <HAL_UART_MspInit+0x720>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8002baa:	f04f 0201 	mov.w	r2, #1
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bbc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 fb6f 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_UART_MspInit+0x660>
      Error_Handler();
 8002bcc:	f7fe fe24 	bl	8001818 <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8002bd0:	4b33      	ldr	r3, [pc, #204]	@ (8002ca0 <HAL_UART_MspInit+0x730>)
 8002bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bd6:	4a32      	ldr	r2, [pc, #200]	@ (8002ca0 <HAL_UART_MspInit+0x730>)
 8002bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bdc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002be0:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca0 <HAL_UART_MspInit+0x730>)
 8002be2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002be6:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002bea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002bee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002bf8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002bfc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bfe:	4b28      	ldr	r3, [pc, #160]	@ (8002ca0 <HAL_UART_MspInit+0x730>)
 8002c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c04:	4a26      	ldr	r2, [pc, #152]	@ (8002ca0 <HAL_UART_MspInit+0x730>)
 8002c06:	f043 0310 	orr.w	r3, r3, #16
 8002c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ca0 <HAL_UART_MspInit+0x730>)
 8002c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c14:	f003 0210 	and.w	r2, r3, #16
 8002c18:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c1c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c26:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c2a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8002c44:	2304      	movs	r3, #4
 8002c46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c4a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4814      	ldr	r0, [pc, #80]	@ (8002ca4 <HAL_UART_MspInit+0x734>)
 8002c52:	f002 f9df 	bl	8005014 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c56:	2308      	movs	r3, #8
 8002c58:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8002c6e:	230b      	movs	r3, #11
 8002c70:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c74:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002c78:	4619      	mov	r1, r3
 8002c7a:	480a      	ldr	r0, [pc, #40]	@ (8002ca4 <HAL_UART_MspInit+0x734>)
 8002c7c:	f002 f9ca 	bl	8005014 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART10_IRQn, 1, 0);
 8002c80:	2200      	movs	r2, #0
 8002c82:	2101      	movs	r1, #1
 8002c84:	209c      	movs	r0, #156	@ 0x9c
 8002c86:	f000 f9ca 	bl	800301e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8002c8a:	209c      	movs	r0, #156	@ 0x9c
 8002c8c:	f000 f9e1 	bl	8003052 <HAL_NVIC_EnableIRQ>
}
 8002c90:	bf00      	nop
 8002c92:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40011c00 	.word	0x40011c00
 8002ca0:	58024400 	.word	0x58024400
 8002ca4:	58021000 	.word	0x58021000

08002ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
     ldr   sp, =_estack      /* set stack pointer */
 8002ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ce0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cac:	f7fe ff42 	bl	8001b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cb0:	480c      	ldr	r0, [pc, #48]	@ (8002ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cb2:	490d      	ldr	r1, [pc, #52]	@ (8002ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb8:	e002      	b.n	8002cc0 <LoopCopyDataInit>

08002cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cbe:	3304      	adds	r3, #4

08002cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc4:	d3f9      	bcc.n	8002cba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8002cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ccc:	e001      	b.n	8002cd2 <LoopFillZerobss>

08002cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd0:	3204      	adds	r2, #4

08002cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd4:	d3fb      	bcc.n	8002cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cd6:	f00c ff43 	bl	800fb60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cda:	f7fe f96f 	bl	8000fbc <main>
  bx  lr
 8002cde:	4770      	bx	lr
     ldr   sp, =_estack      /* set stack pointer */
 8002ce0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002ce4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ce8:	24000234 	.word	0x24000234
  ldr r2, =_sidata
 8002cec:	08013164 	.word	0x08013164
  ldr r2, =_sbss
 8002cf0:	24000234 	.word	0x24000234
  ldr r4, =_ebss
 8002cf4:	24000e70 	.word	0x24000e70

08002cf8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf8:	e7fe      	b.n	8002cf8 <ADC3_IRQHandler>
	...

08002cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d02:	2003      	movs	r0, #3
 8002d04:	f000 f980 	bl	8003008 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d08:	f003 f8f6 	bl	8005ef8 <HAL_RCC_GetSysClockFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b15      	ldr	r3, [pc, #84]	@ (8002d64 <HAL_Init+0x68>)
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	4913      	ldr	r1, [pc, #76]	@ (8002d68 <HAL_Init+0x6c>)
 8002d1a:	5ccb      	ldrb	r3, [r1, r3]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
 8002d24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d26:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <HAL_Init+0x68>)
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d68 <HAL_Init+0x6c>)
 8002d30:	5cd3      	ldrb	r3, [r2, r3]
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d6c <HAL_Init+0x70>)
 8002d3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d40:	4a0b      	ldr	r2, [pc, #44]	@ (8002d70 <HAL_Init+0x74>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d46:	200f      	movs	r0, #15
 8002d48:	f000 f814 	bl	8002d74 <HAL_InitTick>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e002      	b.n	8002d5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d56:	f7fe fd65 	bl	8001824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	58024400 	.word	0x58024400
 8002d68:	08012cc4 	.word	0x08012cc4
 8002d6c:	24000028 	.word	0x24000028
 8002d70:	24000024 	.word	0x24000024

08002d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d7c:	4b15      	ldr	r3, [pc, #84]	@ (8002dd4 <HAL_InitTick+0x60>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e021      	b.n	8002dcc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d88:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <HAL_InitTick+0x64>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b11      	ldr	r3, [pc, #68]	@ (8002dd4 <HAL_InitTick+0x60>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4619      	mov	r1, r3
 8002d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f965 	bl	800306e <HAL_SYSTICK_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e00e      	b.n	8002dcc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b0f      	cmp	r3, #15
 8002db2:	d80a      	bhi.n	8002dca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db4:	2200      	movs	r2, #0
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbc:	f000 f92f 	bl	800301e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dc0:	4a06      	ldr	r2, [pc, #24]	@ (8002ddc <HAL_InitTick+0x68>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e000      	b.n	8002dcc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	24000060 	.word	0x24000060
 8002dd8:	24000024 	.word	0x24000024
 8002ddc:	2400005c 	.word	0x2400005c

08002de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_IncTick+0x20>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <HAL_IncTick+0x24>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	4a04      	ldr	r2, [pc, #16]	@ (8002e04 <HAL_IncTick+0x24>)
 8002df2:	6013      	str	r3, [r2, #0]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	24000060 	.word	0x24000060
 8002e04:	24000af0 	.word	0x24000af0

08002e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e0c:	4b03      	ldr	r3, [pc, #12]	@ (8002e1c <HAL_GetTick+0x14>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	24000af0 	.word	0x24000af0

08002e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e28:	f7ff ffee 	bl	8002e08 <HAL_GetTick>
 8002e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d005      	beq.n	8002e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e64 <HAL_Delay+0x44>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e46:	bf00      	nop
 8002e48:	f7ff ffde 	bl	8002e08 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d8f7      	bhi.n	8002e48 <HAL_Delay+0x28>
  {
  }
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	24000060 	.word	0x24000060

08002e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e84:	4013      	ands	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e90:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <__NVIC_SetPriorityGrouping+0x44>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e96:	4a04      	ldr	r2, [pc, #16]	@ (8002ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	60d3      	str	r3, [r2, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000ed00 	.word	0xe000ed00
 8002eac:	05fa0000 	.word	0x05fa0000

08002eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb4:	4b04      	ldr	r3, [pc, #16]	@ (8002ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	f003 0307 	and.w	r3, r3, #7
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	db0b      	blt.n	8002ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	f003 021f 	and.w	r2, r3, #31
 8002ee4:	4907      	ldr	r1, [pc, #28]	@ (8002f04 <__NVIC_EnableIRQ+0x38>)
 8002ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	2001      	movs	r0, #1
 8002eee:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000e100 	.word	0xe000e100

08002f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	6039      	str	r1, [r7, #0]
 8002f12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	db0a      	blt.n	8002f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	490c      	ldr	r1, [pc, #48]	@ (8002f54 <__NVIC_SetPriority+0x4c>)
 8002f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f26:	0112      	lsls	r2, r2, #4
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f30:	e00a      	b.n	8002f48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	4908      	ldr	r1, [pc, #32]	@ (8002f58 <__NVIC_SetPriority+0x50>)
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	3b04      	subs	r3, #4
 8002f40:	0112      	lsls	r2, r2, #4
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	440b      	add	r3, r1
 8002f46:	761a      	strb	r2, [r3, #24]
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000e100 	.word	0xe000e100
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	@ 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f1c3 0307 	rsb	r3, r3, #7
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	bf28      	it	cs
 8002f7a:	2304      	movcs	r3, #4
 8002f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3304      	adds	r3, #4
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	d902      	bls.n	8002f8c <NVIC_EncodePriority+0x30>
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3b03      	subs	r3, #3
 8002f8a:	e000      	b.n	8002f8e <NVIC_EncodePriority+0x32>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f90:	f04f 32ff 	mov.w	r2, #4294967295
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	fa01 f303 	lsl.w	r3, r1, r3
 8002fae:	43d9      	mvns	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb4:	4313      	orrs	r3, r2
         );
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3724      	adds	r7, #36	@ 0x24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fd4:	d301      	bcc.n	8002fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e00f      	b.n	8002ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fda:	4a0a      	ldr	r2, [pc, #40]	@ (8003004 <SysTick_Config+0x40>)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fe2:	210f      	movs	r1, #15
 8002fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe8:	f7ff ff8e 	bl	8002f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fec:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <SysTick_Config+0x40>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ff2:	4b04      	ldr	r3, [pc, #16]	@ (8003004 <SysTick_Config+0x40>)
 8002ff4:	2207      	movs	r2, #7
 8002ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	e000e010 	.word	0xe000e010

08003008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ff29 	bl	8002e68 <__NVIC_SetPriorityGrouping>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	4603      	mov	r3, r0
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800302c:	f7ff ff40 	bl	8002eb0 <__NVIC_GetPriorityGrouping>
 8003030:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	6978      	ldr	r0, [r7, #20]
 8003038:	f7ff ff90 	bl	8002f5c <NVIC_EncodePriority>
 800303c:	4602      	mov	r2, r0
 800303e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff ff5f 	bl	8002f08 <__NVIC_SetPriority>
}
 800304a:	bf00      	nop
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	4603      	mov	r3, r0
 800305a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800305c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff ff33 	bl	8002ecc <__NVIC_EnableIRQ>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff ffa4 	bl	8002fc4 <SysTick_Config>
 800307c:	4603      	mov	r3, r0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800308c:	f3bf 8f5f 	dmb	sy
}
 8003090:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003092:	4b07      	ldr	r3, [pc, #28]	@ (80030b0 <HAL_MPU_Disable+0x28>)
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	4a06      	ldr	r2, [pc, #24]	@ (80030b0 <HAL_MPU_Disable+0x28>)
 8003098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800309c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800309e:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_MPU_Disable+0x2c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	605a      	str	r2, [r3, #4]
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000ed00 	.word	0xe000ed00
 80030b4:	e000ed90 	.word	0xe000ed90

080030b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80030c0:	4a0b      	ldr	r2, [pc, #44]	@ (80030f0 <HAL_MPU_Enable+0x38>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80030ca:	4b0a      	ldr	r3, [pc, #40]	@ (80030f4 <HAL_MPU_Enable+0x3c>)
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	4a09      	ldr	r2, [pc, #36]	@ (80030f4 <HAL_MPU_Enable+0x3c>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80030d6:	f3bf 8f4f 	dsb	sy
}
 80030da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030dc:	f3bf 8f6f 	isb	sy
}
 80030e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000ed90 	.word	0xe000ed90
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	785a      	ldrb	r2, [r3, #1]
 8003104:	4b1b      	ldr	r3, [pc, #108]	@ (8003174 <HAL_MPU_ConfigRegion+0x7c>)
 8003106:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003108:	4b1a      	ldr	r3, [pc, #104]	@ (8003174 <HAL_MPU_ConfigRegion+0x7c>)
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	4a19      	ldr	r2, [pc, #100]	@ (8003174 <HAL_MPU_ConfigRegion+0x7c>)
 800310e:	f023 0301 	bic.w	r3, r3, #1
 8003112:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003114:	4a17      	ldr	r2, [pc, #92]	@ (8003174 <HAL_MPU_ConfigRegion+0x7c>)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	7b1b      	ldrb	r3, [r3, #12]
 8003120:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	7adb      	ldrb	r3, [r3, #11]
 8003126:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003128:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7a9b      	ldrb	r3, [r3, #10]
 800312e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003130:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	7b5b      	ldrb	r3, [r3, #13]
 8003136:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003138:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	7b9b      	ldrb	r3, [r3, #14]
 800313e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003140:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	7bdb      	ldrb	r3, [r3, #15]
 8003146:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003148:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	7a5b      	ldrb	r3, [r3, #9]
 800314e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003150:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	7a1b      	ldrb	r3, [r3, #8]
 8003156:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003158:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	7812      	ldrb	r2, [r2, #0]
 800315e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003160:	4a04      	ldr	r2, [pc, #16]	@ (8003174 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003162:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003164:	6113      	str	r3, [r2, #16]
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000ed90 	.word	0xe000ed90

08003178 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003180:	f7ff fe42 	bl	8002e08 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e2dc      	b.n	800374a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d008      	beq.n	80031ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2280      	movs	r2, #128	@ 0x80
 80031a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e2cd      	b.n	800374a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a76      	ldr	r2, [pc, #472]	@ (800338c <HAL_DMA_Abort+0x214>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d04a      	beq.n	800324e <HAL_DMA_Abort+0xd6>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a74      	ldr	r2, [pc, #464]	@ (8003390 <HAL_DMA_Abort+0x218>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d045      	beq.n	800324e <HAL_DMA_Abort+0xd6>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a73      	ldr	r2, [pc, #460]	@ (8003394 <HAL_DMA_Abort+0x21c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d040      	beq.n	800324e <HAL_DMA_Abort+0xd6>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a71      	ldr	r2, [pc, #452]	@ (8003398 <HAL_DMA_Abort+0x220>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d03b      	beq.n	800324e <HAL_DMA_Abort+0xd6>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a70      	ldr	r2, [pc, #448]	@ (800339c <HAL_DMA_Abort+0x224>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d036      	beq.n	800324e <HAL_DMA_Abort+0xd6>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a6e      	ldr	r2, [pc, #440]	@ (80033a0 <HAL_DMA_Abort+0x228>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d031      	beq.n	800324e <HAL_DMA_Abort+0xd6>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a6d      	ldr	r2, [pc, #436]	@ (80033a4 <HAL_DMA_Abort+0x22c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d02c      	beq.n	800324e <HAL_DMA_Abort+0xd6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a6b      	ldr	r2, [pc, #428]	@ (80033a8 <HAL_DMA_Abort+0x230>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d027      	beq.n	800324e <HAL_DMA_Abort+0xd6>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a6a      	ldr	r2, [pc, #424]	@ (80033ac <HAL_DMA_Abort+0x234>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <HAL_DMA_Abort+0xd6>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a68      	ldr	r2, [pc, #416]	@ (80033b0 <HAL_DMA_Abort+0x238>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01d      	beq.n	800324e <HAL_DMA_Abort+0xd6>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a67      	ldr	r2, [pc, #412]	@ (80033b4 <HAL_DMA_Abort+0x23c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d018      	beq.n	800324e <HAL_DMA_Abort+0xd6>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a65      	ldr	r2, [pc, #404]	@ (80033b8 <HAL_DMA_Abort+0x240>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_DMA_Abort+0xd6>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a64      	ldr	r2, [pc, #400]	@ (80033bc <HAL_DMA_Abort+0x244>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00e      	beq.n	800324e <HAL_DMA_Abort+0xd6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a62      	ldr	r2, [pc, #392]	@ (80033c0 <HAL_DMA_Abort+0x248>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_DMA_Abort+0xd6>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a61      	ldr	r2, [pc, #388]	@ (80033c4 <HAL_DMA_Abort+0x24c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_DMA_Abort+0xd6>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a5f      	ldr	r2, [pc, #380]	@ (80033c8 <HAL_DMA_Abort+0x250>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_DMA_Abort+0xda>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_DMA_Abort+0xdc>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 021e 	bic.w	r2, r2, #30
 8003266:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003276:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	e00a      	b.n	8003296 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 020e 	bic.w	r2, r2, #14
 800328e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a3c      	ldr	r2, [pc, #240]	@ (800338c <HAL_DMA_Abort+0x214>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d072      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003390 <HAL_DMA_Abort+0x218>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d06d      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a39      	ldr	r2, [pc, #228]	@ (8003394 <HAL_DMA_Abort+0x21c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d068      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a37      	ldr	r2, [pc, #220]	@ (8003398 <HAL_DMA_Abort+0x220>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d063      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a36      	ldr	r2, [pc, #216]	@ (800339c <HAL_DMA_Abort+0x224>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d05e      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a34      	ldr	r2, [pc, #208]	@ (80033a0 <HAL_DMA_Abort+0x228>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d059      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a33      	ldr	r2, [pc, #204]	@ (80033a4 <HAL_DMA_Abort+0x22c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d054      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a31      	ldr	r2, [pc, #196]	@ (80033a8 <HAL_DMA_Abort+0x230>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d04f      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a30      	ldr	r2, [pc, #192]	@ (80033ac <HAL_DMA_Abort+0x234>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d04a      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a2e      	ldr	r2, [pc, #184]	@ (80033b0 <HAL_DMA_Abort+0x238>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d045      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a2d      	ldr	r2, [pc, #180]	@ (80033b4 <HAL_DMA_Abort+0x23c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d040      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a2b      	ldr	r2, [pc, #172]	@ (80033b8 <HAL_DMA_Abort+0x240>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d03b      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a2a      	ldr	r2, [pc, #168]	@ (80033bc <HAL_DMA_Abort+0x244>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d036      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a28      	ldr	r2, [pc, #160]	@ (80033c0 <HAL_DMA_Abort+0x248>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d031      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a27      	ldr	r2, [pc, #156]	@ (80033c4 <HAL_DMA_Abort+0x24c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d02c      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a25      	ldr	r2, [pc, #148]	@ (80033c8 <HAL_DMA_Abort+0x250>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d027      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a24      	ldr	r2, [pc, #144]	@ (80033cc <HAL_DMA_Abort+0x254>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d022      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a22      	ldr	r2, [pc, #136]	@ (80033d0 <HAL_DMA_Abort+0x258>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01d      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a21      	ldr	r2, [pc, #132]	@ (80033d4 <HAL_DMA_Abort+0x25c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d018      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1f      	ldr	r2, [pc, #124]	@ (80033d8 <HAL_DMA_Abort+0x260>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1e      	ldr	r2, [pc, #120]	@ (80033dc <HAL_DMA_Abort+0x264>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00e      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1c      	ldr	r2, [pc, #112]	@ (80033e0 <HAL_DMA_Abort+0x268>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1b      	ldr	r2, [pc, #108]	@ (80033e4 <HAL_DMA_Abort+0x26c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d004      	beq.n	8003386 <HAL_DMA_Abort+0x20e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a19      	ldr	r2, [pc, #100]	@ (80033e8 <HAL_DMA_Abort+0x270>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d132      	bne.n	80033ec <HAL_DMA_Abort+0x274>
 8003386:	2301      	movs	r3, #1
 8003388:	e031      	b.n	80033ee <HAL_DMA_Abort+0x276>
 800338a:	bf00      	nop
 800338c:	40020010 	.word	0x40020010
 8003390:	40020028 	.word	0x40020028
 8003394:	40020040 	.word	0x40020040
 8003398:	40020058 	.word	0x40020058
 800339c:	40020070 	.word	0x40020070
 80033a0:	40020088 	.word	0x40020088
 80033a4:	400200a0 	.word	0x400200a0
 80033a8:	400200b8 	.word	0x400200b8
 80033ac:	40020410 	.word	0x40020410
 80033b0:	40020428 	.word	0x40020428
 80033b4:	40020440 	.word	0x40020440
 80033b8:	40020458 	.word	0x40020458
 80033bc:	40020470 	.word	0x40020470
 80033c0:	40020488 	.word	0x40020488
 80033c4:	400204a0 	.word	0x400204a0
 80033c8:	400204b8 	.word	0x400204b8
 80033cc:	58025408 	.word	0x58025408
 80033d0:	5802541c 	.word	0x5802541c
 80033d4:	58025430 	.word	0x58025430
 80033d8:	58025444 	.word	0x58025444
 80033dc:	58025458 	.word	0x58025458
 80033e0:	5802546c 	.word	0x5802546c
 80033e4:	58025480 	.word	0x58025480
 80033e8:	58025494 	.word	0x58025494
 80033ec:	2300      	movs	r3, #0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d007      	beq.n	8003402 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003400:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a6d      	ldr	r2, [pc, #436]	@ (80035bc <HAL_DMA_Abort+0x444>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d04a      	beq.n	80034a2 <HAL_DMA_Abort+0x32a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a6b      	ldr	r2, [pc, #428]	@ (80035c0 <HAL_DMA_Abort+0x448>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d045      	beq.n	80034a2 <HAL_DMA_Abort+0x32a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a6a      	ldr	r2, [pc, #424]	@ (80035c4 <HAL_DMA_Abort+0x44c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d040      	beq.n	80034a2 <HAL_DMA_Abort+0x32a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a68      	ldr	r2, [pc, #416]	@ (80035c8 <HAL_DMA_Abort+0x450>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d03b      	beq.n	80034a2 <HAL_DMA_Abort+0x32a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a67      	ldr	r2, [pc, #412]	@ (80035cc <HAL_DMA_Abort+0x454>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d036      	beq.n	80034a2 <HAL_DMA_Abort+0x32a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a65      	ldr	r2, [pc, #404]	@ (80035d0 <HAL_DMA_Abort+0x458>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d031      	beq.n	80034a2 <HAL_DMA_Abort+0x32a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a64      	ldr	r2, [pc, #400]	@ (80035d4 <HAL_DMA_Abort+0x45c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d02c      	beq.n	80034a2 <HAL_DMA_Abort+0x32a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a62      	ldr	r2, [pc, #392]	@ (80035d8 <HAL_DMA_Abort+0x460>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d027      	beq.n	80034a2 <HAL_DMA_Abort+0x32a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a61      	ldr	r2, [pc, #388]	@ (80035dc <HAL_DMA_Abort+0x464>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d022      	beq.n	80034a2 <HAL_DMA_Abort+0x32a>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a5f      	ldr	r2, [pc, #380]	@ (80035e0 <HAL_DMA_Abort+0x468>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01d      	beq.n	80034a2 <HAL_DMA_Abort+0x32a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a5e      	ldr	r2, [pc, #376]	@ (80035e4 <HAL_DMA_Abort+0x46c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d018      	beq.n	80034a2 <HAL_DMA_Abort+0x32a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a5c      	ldr	r2, [pc, #368]	@ (80035e8 <HAL_DMA_Abort+0x470>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d013      	beq.n	80034a2 <HAL_DMA_Abort+0x32a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a5b      	ldr	r2, [pc, #364]	@ (80035ec <HAL_DMA_Abort+0x474>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00e      	beq.n	80034a2 <HAL_DMA_Abort+0x32a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a59      	ldr	r2, [pc, #356]	@ (80035f0 <HAL_DMA_Abort+0x478>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d009      	beq.n	80034a2 <HAL_DMA_Abort+0x32a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a58      	ldr	r2, [pc, #352]	@ (80035f4 <HAL_DMA_Abort+0x47c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d004      	beq.n	80034a2 <HAL_DMA_Abort+0x32a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a56      	ldr	r2, [pc, #344]	@ (80035f8 <HAL_DMA_Abort+0x480>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d108      	bne.n	80034b4 <HAL_DMA_Abort+0x33c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e007      	b.n	80034c4 <HAL_DMA_Abort+0x34c>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80034c4:	e013      	b.n	80034ee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c6:	f7ff fc9f 	bl	8002e08 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b05      	cmp	r3, #5
 80034d2:	d90c      	bls.n	80034ee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2203      	movs	r2, #3
 80034de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e12d      	b.n	800374a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e5      	bne.n	80034c6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2f      	ldr	r2, [pc, #188]	@ (80035bc <HAL_DMA_Abort+0x444>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d04a      	beq.n	800359a <HAL_DMA_Abort+0x422>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a2d      	ldr	r2, [pc, #180]	@ (80035c0 <HAL_DMA_Abort+0x448>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d045      	beq.n	800359a <HAL_DMA_Abort+0x422>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2c      	ldr	r2, [pc, #176]	@ (80035c4 <HAL_DMA_Abort+0x44c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d040      	beq.n	800359a <HAL_DMA_Abort+0x422>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2a      	ldr	r2, [pc, #168]	@ (80035c8 <HAL_DMA_Abort+0x450>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d03b      	beq.n	800359a <HAL_DMA_Abort+0x422>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a29      	ldr	r2, [pc, #164]	@ (80035cc <HAL_DMA_Abort+0x454>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d036      	beq.n	800359a <HAL_DMA_Abort+0x422>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a27      	ldr	r2, [pc, #156]	@ (80035d0 <HAL_DMA_Abort+0x458>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d031      	beq.n	800359a <HAL_DMA_Abort+0x422>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a26      	ldr	r2, [pc, #152]	@ (80035d4 <HAL_DMA_Abort+0x45c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d02c      	beq.n	800359a <HAL_DMA_Abort+0x422>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a24      	ldr	r2, [pc, #144]	@ (80035d8 <HAL_DMA_Abort+0x460>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d027      	beq.n	800359a <HAL_DMA_Abort+0x422>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a23      	ldr	r2, [pc, #140]	@ (80035dc <HAL_DMA_Abort+0x464>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d022      	beq.n	800359a <HAL_DMA_Abort+0x422>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a21      	ldr	r2, [pc, #132]	@ (80035e0 <HAL_DMA_Abort+0x468>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01d      	beq.n	800359a <HAL_DMA_Abort+0x422>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a20      	ldr	r2, [pc, #128]	@ (80035e4 <HAL_DMA_Abort+0x46c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d018      	beq.n	800359a <HAL_DMA_Abort+0x422>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1e      	ldr	r2, [pc, #120]	@ (80035e8 <HAL_DMA_Abort+0x470>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_DMA_Abort+0x422>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1d      	ldr	r2, [pc, #116]	@ (80035ec <HAL_DMA_Abort+0x474>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00e      	beq.n	800359a <HAL_DMA_Abort+0x422>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	@ (80035f0 <HAL_DMA_Abort+0x478>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_DMA_Abort+0x422>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1a      	ldr	r2, [pc, #104]	@ (80035f4 <HAL_DMA_Abort+0x47c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_DMA_Abort+0x422>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a18      	ldr	r2, [pc, #96]	@ (80035f8 <HAL_DMA_Abort+0x480>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d101      	bne.n	800359e <HAL_DMA_Abort+0x426>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_DMA_Abort+0x428>
 800359e:	2300      	movs	r3, #0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d02b      	beq.n	80035fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	223f      	movs	r2, #63	@ 0x3f
 80035b4:	409a      	lsls	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	e02a      	b.n	8003612 <HAL_DMA_Abort+0x49a>
 80035bc:	40020010 	.word	0x40020010
 80035c0:	40020028 	.word	0x40020028
 80035c4:	40020040 	.word	0x40020040
 80035c8:	40020058 	.word	0x40020058
 80035cc:	40020070 	.word	0x40020070
 80035d0:	40020088 	.word	0x40020088
 80035d4:	400200a0 	.word	0x400200a0
 80035d8:	400200b8 	.word	0x400200b8
 80035dc:	40020410 	.word	0x40020410
 80035e0:	40020428 	.word	0x40020428
 80035e4:	40020440 	.word	0x40020440
 80035e8:	40020458 	.word	0x40020458
 80035ec:	40020470 	.word	0x40020470
 80035f0:	40020488 	.word	0x40020488
 80035f4:	400204a0 	.word	0x400204a0
 80035f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003600:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2201      	movs	r2, #1
 800360c:	409a      	lsls	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a4f      	ldr	r2, [pc, #316]	@ (8003754 <HAL_DMA_Abort+0x5dc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d072      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a4d      	ldr	r2, [pc, #308]	@ (8003758 <HAL_DMA_Abort+0x5e0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d06d      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4c      	ldr	r2, [pc, #304]	@ (800375c <HAL_DMA_Abort+0x5e4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d068      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a4a      	ldr	r2, [pc, #296]	@ (8003760 <HAL_DMA_Abort+0x5e8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d063      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a49      	ldr	r2, [pc, #292]	@ (8003764 <HAL_DMA_Abort+0x5ec>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d05e      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a47      	ldr	r2, [pc, #284]	@ (8003768 <HAL_DMA_Abort+0x5f0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d059      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a46      	ldr	r2, [pc, #280]	@ (800376c <HAL_DMA_Abort+0x5f4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d054      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a44      	ldr	r2, [pc, #272]	@ (8003770 <HAL_DMA_Abort+0x5f8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d04f      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a43      	ldr	r2, [pc, #268]	@ (8003774 <HAL_DMA_Abort+0x5fc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d04a      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a41      	ldr	r2, [pc, #260]	@ (8003778 <HAL_DMA_Abort+0x600>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d045      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a40      	ldr	r2, [pc, #256]	@ (800377c <HAL_DMA_Abort+0x604>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d040      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a3e      	ldr	r2, [pc, #248]	@ (8003780 <HAL_DMA_Abort+0x608>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d03b      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a3d      	ldr	r2, [pc, #244]	@ (8003784 <HAL_DMA_Abort+0x60c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d036      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a3b      	ldr	r2, [pc, #236]	@ (8003788 <HAL_DMA_Abort+0x610>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d031      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a3a      	ldr	r2, [pc, #232]	@ (800378c <HAL_DMA_Abort+0x614>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d02c      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a38      	ldr	r2, [pc, #224]	@ (8003790 <HAL_DMA_Abort+0x618>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d027      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a37      	ldr	r2, [pc, #220]	@ (8003794 <HAL_DMA_Abort+0x61c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d022      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a35      	ldr	r2, [pc, #212]	@ (8003798 <HAL_DMA_Abort+0x620>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d01d      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a34      	ldr	r2, [pc, #208]	@ (800379c <HAL_DMA_Abort+0x624>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d018      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a32      	ldr	r2, [pc, #200]	@ (80037a0 <HAL_DMA_Abort+0x628>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a31      	ldr	r2, [pc, #196]	@ (80037a4 <HAL_DMA_Abort+0x62c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00e      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a2f      	ldr	r2, [pc, #188]	@ (80037a8 <HAL_DMA_Abort+0x630>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d009      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a2e      	ldr	r2, [pc, #184]	@ (80037ac <HAL_DMA_Abort+0x634>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d004      	beq.n	8003702 <HAL_DMA_Abort+0x58a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a2c      	ldr	r2, [pc, #176]	@ (80037b0 <HAL_DMA_Abort+0x638>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d101      	bne.n	8003706 <HAL_DMA_Abort+0x58e>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_DMA_Abort+0x590>
 8003706:	2300      	movs	r3, #0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d015      	beq.n	8003738 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003714:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00c      	beq.n	8003738 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003728:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800372c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003736:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40020010 	.word	0x40020010
 8003758:	40020028 	.word	0x40020028
 800375c:	40020040 	.word	0x40020040
 8003760:	40020058 	.word	0x40020058
 8003764:	40020070 	.word	0x40020070
 8003768:	40020088 	.word	0x40020088
 800376c:	400200a0 	.word	0x400200a0
 8003770:	400200b8 	.word	0x400200b8
 8003774:	40020410 	.word	0x40020410
 8003778:	40020428 	.word	0x40020428
 800377c:	40020440 	.word	0x40020440
 8003780:	40020458 	.word	0x40020458
 8003784:	40020470 	.word	0x40020470
 8003788:	40020488 	.word	0x40020488
 800378c:	400204a0 	.word	0x400204a0
 8003790:	400204b8 	.word	0x400204b8
 8003794:	58025408 	.word	0x58025408
 8003798:	5802541c 	.word	0x5802541c
 800379c:	58025430 	.word	0x58025430
 80037a0:	58025444 	.word	0x58025444
 80037a4:	58025458 	.word	0x58025458
 80037a8:	5802546c 	.word	0x5802546c
 80037ac:	58025480 	.word	0x58025480
 80037b0:	58025494 	.word	0x58025494

080037b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e237      	b.n	8003c36 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d004      	beq.n	80037dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2280      	movs	r2, #128	@ 0x80
 80037d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e22c      	b.n	8003c36 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a5c      	ldr	r2, [pc, #368]	@ (8003954 <HAL_DMA_Abort_IT+0x1a0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d04a      	beq.n	800387c <HAL_DMA_Abort_IT+0xc8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003958 <HAL_DMA_Abort_IT+0x1a4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d045      	beq.n	800387c <HAL_DMA_Abort_IT+0xc8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a59      	ldr	r2, [pc, #356]	@ (800395c <HAL_DMA_Abort_IT+0x1a8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d040      	beq.n	800387c <HAL_DMA_Abort_IT+0xc8>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a58      	ldr	r2, [pc, #352]	@ (8003960 <HAL_DMA_Abort_IT+0x1ac>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d03b      	beq.n	800387c <HAL_DMA_Abort_IT+0xc8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a56      	ldr	r2, [pc, #344]	@ (8003964 <HAL_DMA_Abort_IT+0x1b0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d036      	beq.n	800387c <HAL_DMA_Abort_IT+0xc8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a55      	ldr	r2, [pc, #340]	@ (8003968 <HAL_DMA_Abort_IT+0x1b4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d031      	beq.n	800387c <HAL_DMA_Abort_IT+0xc8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a53      	ldr	r2, [pc, #332]	@ (800396c <HAL_DMA_Abort_IT+0x1b8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d02c      	beq.n	800387c <HAL_DMA_Abort_IT+0xc8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a52      	ldr	r2, [pc, #328]	@ (8003970 <HAL_DMA_Abort_IT+0x1bc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d027      	beq.n	800387c <HAL_DMA_Abort_IT+0xc8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a50      	ldr	r2, [pc, #320]	@ (8003974 <HAL_DMA_Abort_IT+0x1c0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d022      	beq.n	800387c <HAL_DMA_Abort_IT+0xc8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a4f      	ldr	r2, [pc, #316]	@ (8003978 <HAL_DMA_Abort_IT+0x1c4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d01d      	beq.n	800387c <HAL_DMA_Abort_IT+0xc8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a4d      	ldr	r2, [pc, #308]	@ (800397c <HAL_DMA_Abort_IT+0x1c8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d018      	beq.n	800387c <HAL_DMA_Abort_IT+0xc8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a4c      	ldr	r2, [pc, #304]	@ (8003980 <HAL_DMA_Abort_IT+0x1cc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d013      	beq.n	800387c <HAL_DMA_Abort_IT+0xc8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a4a      	ldr	r2, [pc, #296]	@ (8003984 <HAL_DMA_Abort_IT+0x1d0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00e      	beq.n	800387c <HAL_DMA_Abort_IT+0xc8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a49      	ldr	r2, [pc, #292]	@ (8003988 <HAL_DMA_Abort_IT+0x1d4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d009      	beq.n	800387c <HAL_DMA_Abort_IT+0xc8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a47      	ldr	r2, [pc, #284]	@ (800398c <HAL_DMA_Abort_IT+0x1d8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d004      	beq.n	800387c <HAL_DMA_Abort_IT+0xc8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a46      	ldr	r2, [pc, #280]	@ (8003990 <HAL_DMA_Abort_IT+0x1dc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d101      	bne.n	8003880 <HAL_DMA_Abort_IT+0xcc>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_DMA_Abort_IT+0xce>
 8003880:	2300      	movs	r3, #0
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8086 	beq.w	8003994 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2204      	movs	r2, #4
 800388c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a2f      	ldr	r2, [pc, #188]	@ (8003954 <HAL_DMA_Abort_IT+0x1a0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d04a      	beq.n	8003930 <HAL_DMA_Abort_IT+0x17c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2e      	ldr	r2, [pc, #184]	@ (8003958 <HAL_DMA_Abort_IT+0x1a4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d045      	beq.n	8003930 <HAL_DMA_Abort_IT+0x17c>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2c      	ldr	r2, [pc, #176]	@ (800395c <HAL_DMA_Abort_IT+0x1a8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d040      	beq.n	8003930 <HAL_DMA_Abort_IT+0x17c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003960 <HAL_DMA_Abort_IT+0x1ac>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d03b      	beq.n	8003930 <HAL_DMA_Abort_IT+0x17c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a29      	ldr	r2, [pc, #164]	@ (8003964 <HAL_DMA_Abort_IT+0x1b0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d036      	beq.n	8003930 <HAL_DMA_Abort_IT+0x17c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a28      	ldr	r2, [pc, #160]	@ (8003968 <HAL_DMA_Abort_IT+0x1b4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d031      	beq.n	8003930 <HAL_DMA_Abort_IT+0x17c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a26      	ldr	r2, [pc, #152]	@ (800396c <HAL_DMA_Abort_IT+0x1b8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d02c      	beq.n	8003930 <HAL_DMA_Abort_IT+0x17c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a25      	ldr	r2, [pc, #148]	@ (8003970 <HAL_DMA_Abort_IT+0x1bc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d027      	beq.n	8003930 <HAL_DMA_Abort_IT+0x17c>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a23      	ldr	r2, [pc, #140]	@ (8003974 <HAL_DMA_Abort_IT+0x1c0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d022      	beq.n	8003930 <HAL_DMA_Abort_IT+0x17c>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a22      	ldr	r2, [pc, #136]	@ (8003978 <HAL_DMA_Abort_IT+0x1c4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d01d      	beq.n	8003930 <HAL_DMA_Abort_IT+0x17c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a20      	ldr	r2, [pc, #128]	@ (800397c <HAL_DMA_Abort_IT+0x1c8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d018      	beq.n	8003930 <HAL_DMA_Abort_IT+0x17c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1f      	ldr	r2, [pc, #124]	@ (8003980 <HAL_DMA_Abort_IT+0x1cc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d013      	beq.n	8003930 <HAL_DMA_Abort_IT+0x17c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1d      	ldr	r2, [pc, #116]	@ (8003984 <HAL_DMA_Abort_IT+0x1d0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00e      	beq.n	8003930 <HAL_DMA_Abort_IT+0x17c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1c      	ldr	r2, [pc, #112]	@ (8003988 <HAL_DMA_Abort_IT+0x1d4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d009      	beq.n	8003930 <HAL_DMA_Abort_IT+0x17c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1a      	ldr	r2, [pc, #104]	@ (800398c <HAL_DMA_Abort_IT+0x1d8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <HAL_DMA_Abort_IT+0x17c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a19      	ldr	r2, [pc, #100]	@ (8003990 <HAL_DMA_Abort_IT+0x1dc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d108      	bne.n	8003942 <HAL_DMA_Abort_IT+0x18e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	e178      	b.n	8003c34 <HAL_DMA_Abort_IT+0x480>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e16f      	b.n	8003c34 <HAL_DMA_Abort_IT+0x480>
 8003954:	40020010 	.word	0x40020010
 8003958:	40020028 	.word	0x40020028
 800395c:	40020040 	.word	0x40020040
 8003960:	40020058 	.word	0x40020058
 8003964:	40020070 	.word	0x40020070
 8003968:	40020088 	.word	0x40020088
 800396c:	400200a0 	.word	0x400200a0
 8003970:	400200b8 	.word	0x400200b8
 8003974:	40020410 	.word	0x40020410
 8003978:	40020428 	.word	0x40020428
 800397c:	40020440 	.word	0x40020440
 8003980:	40020458 	.word	0x40020458
 8003984:	40020470 	.word	0x40020470
 8003988:	40020488 	.word	0x40020488
 800398c:	400204a0 	.word	0x400204a0
 8003990:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 020e 	bic.w	r2, r2, #14
 80039a2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a6c      	ldr	r2, [pc, #432]	@ (8003b5c <HAL_DMA_Abort_IT+0x3a8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d04a      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x290>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a6b      	ldr	r2, [pc, #428]	@ (8003b60 <HAL_DMA_Abort_IT+0x3ac>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d045      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x290>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a69      	ldr	r2, [pc, #420]	@ (8003b64 <HAL_DMA_Abort_IT+0x3b0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d040      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x290>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a68      	ldr	r2, [pc, #416]	@ (8003b68 <HAL_DMA_Abort_IT+0x3b4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d03b      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x290>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a66      	ldr	r2, [pc, #408]	@ (8003b6c <HAL_DMA_Abort_IT+0x3b8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d036      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x290>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a65      	ldr	r2, [pc, #404]	@ (8003b70 <HAL_DMA_Abort_IT+0x3bc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d031      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x290>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a63      	ldr	r2, [pc, #396]	@ (8003b74 <HAL_DMA_Abort_IT+0x3c0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d02c      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x290>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a62      	ldr	r2, [pc, #392]	@ (8003b78 <HAL_DMA_Abort_IT+0x3c4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d027      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x290>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a60      	ldr	r2, [pc, #384]	@ (8003b7c <HAL_DMA_Abort_IT+0x3c8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d022      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x290>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a5f      	ldr	r2, [pc, #380]	@ (8003b80 <HAL_DMA_Abort_IT+0x3cc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d01d      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x290>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a5d      	ldr	r2, [pc, #372]	@ (8003b84 <HAL_DMA_Abort_IT+0x3d0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d018      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x290>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a5c      	ldr	r2, [pc, #368]	@ (8003b88 <HAL_DMA_Abort_IT+0x3d4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d013      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x290>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a5a      	ldr	r2, [pc, #360]	@ (8003b8c <HAL_DMA_Abort_IT+0x3d8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00e      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x290>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a59      	ldr	r2, [pc, #356]	@ (8003b90 <HAL_DMA_Abort_IT+0x3dc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x290>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a57      	ldr	r2, [pc, #348]	@ (8003b94 <HAL_DMA_Abort_IT+0x3e0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d004      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x290>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a56      	ldr	r2, [pc, #344]	@ (8003b98 <HAL_DMA_Abort_IT+0x3e4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d108      	bne.n	8003a56 <HAL_DMA_Abort_IT+0x2a2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0201 	bic.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	e007      	b.n	8003a66 <HAL_DMA_Abort_IT+0x2b2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0201 	bic.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a3c      	ldr	r2, [pc, #240]	@ (8003b5c <HAL_DMA_Abort_IT+0x3a8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d072      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a3a      	ldr	r2, [pc, #232]	@ (8003b60 <HAL_DMA_Abort_IT+0x3ac>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d06d      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a39      	ldr	r2, [pc, #228]	@ (8003b64 <HAL_DMA_Abort_IT+0x3b0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d068      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a37      	ldr	r2, [pc, #220]	@ (8003b68 <HAL_DMA_Abort_IT+0x3b4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d063      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a36      	ldr	r2, [pc, #216]	@ (8003b6c <HAL_DMA_Abort_IT+0x3b8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d05e      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a34      	ldr	r2, [pc, #208]	@ (8003b70 <HAL_DMA_Abort_IT+0x3bc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d059      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a33      	ldr	r2, [pc, #204]	@ (8003b74 <HAL_DMA_Abort_IT+0x3c0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d054      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a31      	ldr	r2, [pc, #196]	@ (8003b78 <HAL_DMA_Abort_IT+0x3c4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d04f      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a30      	ldr	r2, [pc, #192]	@ (8003b7c <HAL_DMA_Abort_IT+0x3c8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d04a      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2e      	ldr	r2, [pc, #184]	@ (8003b80 <HAL_DMA_Abort_IT+0x3cc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d045      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2d      	ldr	r2, [pc, #180]	@ (8003b84 <HAL_DMA_Abort_IT+0x3d0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d040      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2b      	ldr	r2, [pc, #172]	@ (8003b88 <HAL_DMA_Abort_IT+0x3d4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d03b      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8003b8c <HAL_DMA_Abort_IT+0x3d8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d036      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a28      	ldr	r2, [pc, #160]	@ (8003b90 <HAL_DMA_Abort_IT+0x3dc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d031      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a27      	ldr	r2, [pc, #156]	@ (8003b94 <HAL_DMA_Abort_IT+0x3e0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d02c      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a25      	ldr	r2, [pc, #148]	@ (8003b98 <HAL_DMA_Abort_IT+0x3e4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d027      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a24      	ldr	r2, [pc, #144]	@ (8003b9c <HAL_DMA_Abort_IT+0x3e8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d022      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a22      	ldr	r2, [pc, #136]	@ (8003ba0 <HAL_DMA_Abort_IT+0x3ec>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01d      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a21      	ldr	r2, [pc, #132]	@ (8003ba4 <HAL_DMA_Abort_IT+0x3f0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d018      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba8 <HAL_DMA_Abort_IT+0x3f4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1e      	ldr	r2, [pc, #120]	@ (8003bac <HAL_DMA_Abort_IT+0x3f8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00e      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb0 <HAL_DMA_Abort_IT+0x3fc>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d009      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb4 <HAL_DMA_Abort_IT+0x400>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x3a2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a19      	ldr	r2, [pc, #100]	@ (8003bb8 <HAL_DMA_Abort_IT+0x404>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d132      	bne.n	8003bbc <HAL_DMA_Abort_IT+0x408>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e031      	b.n	8003bbe <HAL_DMA_Abort_IT+0x40a>
 8003b5a:	bf00      	nop
 8003b5c:	40020010 	.word	0x40020010
 8003b60:	40020028 	.word	0x40020028
 8003b64:	40020040 	.word	0x40020040
 8003b68:	40020058 	.word	0x40020058
 8003b6c:	40020070 	.word	0x40020070
 8003b70:	40020088 	.word	0x40020088
 8003b74:	400200a0 	.word	0x400200a0
 8003b78:	400200b8 	.word	0x400200b8
 8003b7c:	40020410 	.word	0x40020410
 8003b80:	40020428 	.word	0x40020428
 8003b84:	40020440 	.word	0x40020440
 8003b88:	40020458 	.word	0x40020458
 8003b8c:	40020470 	.word	0x40020470
 8003b90:	40020488 	.word	0x40020488
 8003b94:	400204a0 	.word	0x400204a0
 8003b98:	400204b8 	.word	0x400204b8
 8003b9c:	58025408 	.word	0x58025408
 8003ba0:	5802541c 	.word	0x5802541c
 8003ba4:	58025430 	.word	0x58025430
 8003ba8:	58025444 	.word	0x58025444
 8003bac:	58025458 	.word	0x58025458
 8003bb0:	5802546c 	.word	0x5802546c
 8003bb4:	58025480 	.word	0x58025480
 8003bb8:	58025494 	.word	0x58025494
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d028      	beq.n	8003c14 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bd0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	2201      	movs	r2, #1
 8003be2:	409a      	lsls	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003bf0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00c      	beq.n	8003c14 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c08:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c12:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop

08003c40 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b098      	sub	sp, #96	@ 0x60
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003c48:	4a84      	ldr	r2, [pc, #528]	@ (8003e5c <HAL_FDCAN_Init+0x21c>)
 8003c4a:	f107 030c 	add.w	r3, r7, #12
 8003c4e:	4611      	mov	r1, r2
 8003c50:	224c      	movs	r2, #76	@ 0x4c
 8003c52:	4618      	mov	r0, r3
 8003c54:	f00b ffab 	bl	800fbae <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e1c6      	b.n	8003ff0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a7e      	ldr	r2, [pc, #504]	@ (8003e60 <HAL_FDCAN_Init+0x220>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d106      	bne.n	8003c7a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003c74:	461a      	mov	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fc ff92 	bl	8000bb8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0210 	bic.w	r2, r2, #16
 8003ca2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ca4:	f7ff f8b0 	bl	8002e08 <HAL_GetTick>
 8003ca8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003caa:	e014      	b.n	8003cd6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003cac:	f7ff f8ac 	bl	8002e08 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b0a      	cmp	r3, #10
 8003cb8:	d90d      	bls.n	8003cd6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2203      	movs	r2, #3
 8003cce:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e18c      	b.n	8003ff0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d0e3      	beq.n	8003cac <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cf4:	f7ff f888 	bl	8002e08 <HAL_GetTick>
 8003cf8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003cfa:	e014      	b.n	8003d26 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003cfc:	f7ff f884 	bl	8002e08 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b0a      	cmp	r3, #10
 8003d08:	d90d      	bls.n	8003d26 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d10:	f043 0201 	orr.w	r2, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2203      	movs	r2, #3
 8003d1e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e164      	b.n	8003ff0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0e3      	beq.n	8003cfc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0202 	orr.w	r2, r2, #2
 8003d42:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	7c1b      	ldrb	r3, [r3, #16]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d108      	bne.n	8003d5e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d5a:	619a      	str	r2, [r3, #24]
 8003d5c:	e007      	b.n	8003d6e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699a      	ldr	r2, [r3, #24]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d6c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	7c5b      	ldrb	r3, [r3, #17]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d108      	bne.n	8003d88 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699a      	ldr	r2, [r3, #24]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d84:	619a      	str	r2, [r3, #24]
 8003d86:	e007      	b.n	8003d98 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d96:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	7c9b      	ldrb	r3, [r3, #18]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d108      	bne.n	8003db2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003dae:	619a      	str	r2, [r3, #24]
 8003db0:	e007      	b.n	8003dc2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699a      	ldr	r2, [r3, #24]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003dc0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003de6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0210 	bic.w	r2, r2, #16
 8003df6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d108      	bne.n	8003e12 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699a      	ldr	r2, [r3, #24]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0204 	orr.w	r2, r2, #4
 8003e0e:	619a      	str	r2, [r3, #24]
 8003e10:	e030      	b.n	8003e74 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d02c      	beq.n	8003e74 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d020      	beq.n	8003e64 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699a      	ldr	r2, [r3, #24]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e30:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0210 	orr.w	r2, r2, #16
 8003e40:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d114      	bne.n	8003e74 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699a      	ldr	r2, [r3, #24]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0220 	orr.w	r2, r2, #32
 8003e58:	619a      	str	r2, [r3, #24]
 8003e5a:	e00b      	b.n	8003e74 <HAL_FDCAN_Init+0x234>
 8003e5c:	08012c00 	.word	0x08012c00
 8003e60:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0220 	orr.w	r2, r2, #32
 8003e72:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e84:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e8c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e9c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e9e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ea8:	d115      	bne.n	8003ed6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eae:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003eb8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003ec2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003ed2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ed4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003efc:	4413      	add	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d011      	beq.n	8003f26 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003f0a:	f023 0107 	bic.w	r1, r3, #7
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	3360      	adds	r3, #96	@ 0x60
 8003f16:	443b      	add	r3, r7
 8003f18:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d011      	beq.n	8003f52 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003f36:	f023 0107 	bic.w	r1, r3, #7
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	3360      	adds	r3, #96	@ 0x60
 8003f42:	443b      	add	r3, r7
 8003f44:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d012      	beq.n	8003f80 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003f62:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	3360      	adds	r3, #96	@ 0x60
 8003f6e:	443b      	add	r3, r7
 8003f70:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003f74:	011a      	lsls	r2, r3, #4
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d012      	beq.n	8003fae <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003f90:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	3360      	adds	r3, #96	@ 0x60
 8003f9c:	443b      	add	r3, r7
 8003f9e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003fa2:	021a      	lsls	r2, r3, #8
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a11      	ldr	r2, [pc, #68]	@ (8003ff8 <HAL_FDCAN_Init+0x3b8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d107      	bne.n	8003fc8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f022 0203 	bic.w	r2, r2, #3
 8003fc6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fe13 	bl	8004c0c <FDCAN_CalcultateRamBlockAddresses>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003fec:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3760      	adds	r7, #96	@ 0x60
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	4000a000 	.word	0x4000a000

08003ffc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800400c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d002      	beq.n	800401a <HAL_FDCAN_ConfigFilter+0x1e>
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d157      	bne.n	80040ca <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d12b      	bne.n	800407a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b07      	cmp	r3, #7
 8004028:	d10d      	bne.n	8004046 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004036:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800403c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800403e:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e00e      	b.n	8004064 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004052:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800405a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e025      	b.n	80040c6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	075a      	lsls	r2, r3, #29
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b07      	cmp	r3, #7
 800408e:	d103      	bne.n	8004098 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	e006      	b.n	80040a6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	079a      	lsls	r2, r3, #30
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	3304      	adds	r3, #4
 80040be:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e008      	b.n	80040dc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040d0:	f043 0202 	orr.w	r2, r3, #2
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
  }
}
 80040dc:	4618      	mov	r0, r3
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d110      	bne.n	8004124 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800410a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004110:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800411c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	e008      	b.n	8004136 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800412a:	f043 0204 	orr.w	r2, r3, #4
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	d111      	bne.n	800417a <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2202      	movs	r2, #2
 800415a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	e008      	b.n	800418c <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004180:	f043 0204 	orr.w	r2, r3, #4
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
  }
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d141      	bne.n	8004234 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80041b8:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041c6:	f043 0220 	orr.w	r2, r3, #32
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e038      	b.n	8004246 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80041dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d009      	beq.n	80041f8 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e026      	b.n	8004246 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fe82 	bl	8004f18 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2101      	movs	r1, #1
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	fa01 f202 	lsl.w	r2, r1, r2
 8004220:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004224:	2201      	movs	r2, #1
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	409a      	lsls	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	e008      	b.n	8004246 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800423a:	f043 0208 	orr.w	r2, r3, #8
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
  }
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004250:	b480      	push	{r7}
 8004252:	b08b      	sub	sp, #44	@ 0x2c
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004268:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800426a:	7efb      	ldrb	r3, [r7, #27]
 800426c:	2b02      	cmp	r3, #2
 800426e:	f040 8149 	bne.w	8004504 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b40      	cmp	r3, #64	@ 0x40
 8004276:	d14c      	bne.n	8004312 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004280:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800428e:	f043 0220 	orr.w	r2, r3, #32
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e13c      	b.n	8004516 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d109      	bne.n	80042c0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e12a      	b.n	8004516 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042c8:	0e1b      	lsrs	r3, r3, #24
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d10a      	bne.n	80042e8 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042da:	0fdb      	lsrs	r3, r3, #31
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80042e4:	2301      	movs	r3, #1
 80042e6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042f0:	0a1b      	lsrs	r3, r3, #8
 80042f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004304:	69f9      	ldr	r1, [r7, #28]
 8004306:	fb01 f303 	mul.w	r3, r1, r3
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004310:	e068      	b.n	80043e4 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b41      	cmp	r3, #65	@ 0x41
 8004316:	d14c      	bne.n	80043b2 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004320:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d109      	bne.n	800433c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800432e:	f043 0220 	orr.w	r2, r3, #32
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0ec      	b.n	8004516 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004352:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e0da      	b.n	8004516 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004368:	0e1b      	lsrs	r3, r3, #24
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b01      	cmp	r3, #1
 8004370:	d10a      	bne.n	8004388 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800437a:	0fdb      	lsrs	r3, r3, #31
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004384:	2301      	movs	r3, #1
 8004386:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004390:	0a1b      	lsrs	r3, r3, #8
 8004392:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	4413      	add	r3, r2
 800439a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a4:	69f9      	ldr	r1, [r7, #28]
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80043b0:	e018      	b.n	80043e4 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d309      	bcc.n	80043d0 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043c2:	f043 0220 	orr.w	r2, r3, #32
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e0a2      	b.n	8004516 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	fb01 f303 	mul.w	r3, r1, r3
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d107      	bne.n	8004408 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80043f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	0c9b      	lsrs	r3, r3, #18
 80043fe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e005      	b.n	8004414 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800442c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442e:	3304      	adds	r3, #4
 8004430:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	b29a      	uxth	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	f003 020f 	and.w	r2, r3, #15
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	0e1b      	lsrs	r3, r3, #24
 8004468:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	0fda      	lsrs	r2, r3, #31
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	3304      	adds	r3, #4
 800447e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004484:	2300      	movs	r3, #0
 8004486:	623b      	str	r3, [r7, #32]
 8004488:	e00a      	b.n	80044a0 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	441a      	add	r2, r3
 8004490:	6839      	ldr	r1, [r7, #0]
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	440b      	add	r3, r1
 8004496:	7812      	ldrb	r2, [r2, #0]
 8004498:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	3301      	adds	r3, #1
 800449e:	623b      	str	r3, [r7, #32]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004524 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80044a6:	5cd3      	ldrb	r3, [r2, r3]
 80044a8:	461a      	mov	r2, r3
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d3ec      	bcc.n	800448a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b40      	cmp	r3, #64	@ 0x40
 80044b4:	d105      	bne.n	80044c2 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80044c0:	e01e      	b.n	8004500 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b41      	cmp	r3, #65	@ 0x41
 80044c6:	d105      	bne.n	80044d4 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80044d2:	e015      	b.n	8004500 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b1f      	cmp	r3, #31
 80044d8:	d808      	bhi.n	80044ec <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2101      	movs	r1, #1
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	fa01 f202 	lsl.w	r2, r1, r2
 80044e6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80044ea:	e009      	b.n	8004500 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f003 021f 	and.w	r2, r3, #31
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2101      	movs	r1, #1
 80044f8:	fa01 f202 	lsl.w	r2, r1, r2
 80044fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	e008      	b.n	8004516 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800450a:	f043 0208 	orr.w	r2, r3, #8
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
  }
}
 8004516:	4618      	mov	r0, r3
 8004518:	372c      	adds	r7, #44	@ 0x2c
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	08012cd4 	.word	0x08012cd4

08004528 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800453a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d002      	beq.n	8004548 <HAL_FDCAN_ActivateNotification+0x20>
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d155      	bne.n	80045f4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d108      	bne.n	8004568 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0201 	orr.w	r2, r2, #1
 8004564:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004566:	e014      	b.n	8004592 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4013      	ands	r3, r2
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	429a      	cmp	r2, r3
 8004576:	d108      	bne.n	800458a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0202 	orr.w	r2, r2, #2
 8004586:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004588:	e003      	b.n	8004592 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2203      	movs	r2, #3
 8004590:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004598:	2b00      	cmp	r3, #0
 800459a:	d009      	beq.n	80045b0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004614 <HAL_FDCAN_ActivateNotification+0xec>)
 80045d8:	4013      	ands	r3, r2
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	430b      	orrs	r3, r1
 80045e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80045e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004618 <HAL_FDCAN_ActivateNotification+0xf0>)
 80045e4:	695a      	ldr	r2, [r3, #20]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	0f9b      	lsrs	r3, r3, #30
 80045ea:	490b      	ldr	r1, [pc, #44]	@ (8004618 <HAL_FDCAN_ActivateNotification+0xf0>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e008      	b.n	8004606 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045fa:	f043 0202 	orr.w	r2, r3, #2
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
  }
}
 8004606:	4618      	mov	r0, r3
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	3fcfffff 	.word	0x3fcfffff
 8004618:	4000a800 	.word	0x4000a800

0800461c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b096      	sub	sp, #88	@ 0x58
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004624:	4b95      	ldr	r3, [pc, #596]	@ (800487c <HAL_FDCAN_IRQHandler+0x260>)
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	079b      	lsls	r3, r3, #30
 800462a:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800462c:	4b93      	ldr	r3, [pc, #588]	@ (800487c <HAL_FDCAN_IRQHandler+0x260>)
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	079b      	lsls	r3, r3, #30
 8004632:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004634:	4013      	ands	r3, r2
 8004636:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004642:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800464c:	4013      	ands	r3, r2
 800464e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004662:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004664:	4013      	ands	r3, r2
 8004666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004672:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800467c:	4013      	ands	r3, r2
 800467e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004686:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800468a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004694:	4013      	ands	r3, r2
 8004696:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800469e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80046a2:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046ac:	4013      	ands	r3, r2
 80046ae:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80046c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00f      	beq.n	80046ea <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80046de:	4b67      	ldr	r3, [pc, #412]	@ (800487c <HAL_FDCAN_IRQHandler+0x260>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fa44 	bl	8004b72 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80046ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01c      	beq.n	800472e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80046f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d017      	beq.n	800472e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004706:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004710:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004712:	4013      	ands	r3, r2
 8004714:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800471e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004720:	4b56      	ldr	r3, [pc, #344]	@ (800487c <HAL_FDCAN_IRQHandler+0x260>)
 8004722:	2200      	movs	r2, #0
 8004724:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004726:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f9f9 	bl	8004b20 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800472e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00d      	beq.n	8004750 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800473a:	4b51      	ldr	r3, [pc, #324]	@ (8004880 <HAL_FDCAN_IRQHandler+0x264>)
 800473c:	400b      	ands	r3, r1
 800473e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004740:	4a4e      	ldr	r2, [pc, #312]	@ (800487c <HAL_FDCAN_IRQHandler+0x260>)
 8004742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004744:	0f9b      	lsrs	r3, r3, #30
 8004746:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004748:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f9b2 	bl	8004ab4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00d      	beq.n	8004772 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800475c:	4b48      	ldr	r3, [pc, #288]	@ (8004880 <HAL_FDCAN_IRQHandler+0x264>)
 800475e:	400b      	ands	r3, r1
 8004760:	6513      	str	r3, [r2, #80]	@ 0x50
 8004762:	4a46      	ldr	r2, [pc, #280]	@ (800487c <HAL_FDCAN_IRQHandler+0x260>)
 8004764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004766:	0f9b      	lsrs	r3, r3, #30
 8004768:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800476a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f9ac 	bl	8004aca <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00d      	beq.n	8004794 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800477e:	4b40      	ldr	r3, [pc, #256]	@ (8004880 <HAL_FDCAN_IRQHandler+0x264>)
 8004780:	400b      	ands	r3, r1
 8004782:	6513      	str	r3, [r2, #80]	@ 0x50
 8004784:	4a3d      	ldr	r2, [pc, #244]	@ (800487c <HAL_FDCAN_IRQHandler+0x260>)
 8004786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004788:	0f9b      	lsrs	r3, r3, #30
 800478a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800478c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fc fb32 	bl	8000df8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00d      	beq.n	80047b6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80047a0:	4b37      	ldr	r3, [pc, #220]	@ (8004880 <HAL_FDCAN_IRQHandler+0x264>)
 80047a2:	400b      	ands	r3, r1
 80047a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80047a6:	4a35      	ldr	r2, [pc, #212]	@ (800487c <HAL_FDCAN_IRQHandler+0x260>)
 80047a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047aa:	0f9b      	lsrs	r3, r3, #30
 80047ac:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80047ae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f995 	bl	8004ae0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80047b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00f      	beq.n	80047e0 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80047c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80047d4:	4b29      	ldr	r3, [pc, #164]	@ (800487c <HAL_FDCAN_IRQHandler+0x260>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f98b 	bl	8004af6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80047e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01c      	beq.n	8004824 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80047ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d017      	beq.n	8004824 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80047fc:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004808:	4013      	ands	r3, r2
 800480a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004814:	651a      	str	r2, [r3, #80]	@ 0x50
 8004816:	4b19      	ldr	r3, [pc, #100]	@ (800487c <HAL_FDCAN_IRQHandler+0x260>)
 8004818:	2200      	movs	r2, #0
 800481a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800481c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f973 	bl	8004b0a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004826:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00f      	beq.n	800484e <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800482e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004830:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004840:	651a      	str	r2, [r3, #80]	@ 0x50
 8004842:	4b0e      	ldr	r3, [pc, #56]	@ (800487c <HAL_FDCAN_IRQHandler+0x260>)
 8004844:	2200      	movs	r2, #0
 8004846:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f974 	bl	8004b36 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800484e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d015      	beq.n	8004884 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d010      	beq.n	8004884 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800486a:	651a      	str	r2, [r3, #80]	@ 0x50
 800486c:	4b03      	ldr	r3, [pc, #12]	@ (800487c <HAL_FDCAN_IRQHandler+0x260>)
 800486e:	2200      	movs	r2, #0
 8004870:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f969 	bl	8004b4a <HAL_FDCAN_TimestampWraparoundCallback>
 8004878:	e004      	b.n	8004884 <HAL_FDCAN_IRQHandler+0x268>
 800487a:	bf00      	nop
 800487c:	4000a800 	.word	0x4000a800
 8004880:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004886:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00f      	beq.n	80048ae <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800488e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004890:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80048a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80048a2:	4b81      	ldr	r3, [pc, #516]	@ (8004aa8 <HAL_FDCAN_IRQHandler+0x48c>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f958 	bl	8004b5e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80048ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d014      	beq.n	80048e2 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80048b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00f      	beq.n	80048e2 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80048ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80048cc:	4b76      	ldr	r3, [pc, #472]	@ (8004aa8 <HAL_FDCAN_IRQHandler+0x48c>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80048e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00d      	beq.n	8004904 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048ee:	4b6f      	ldr	r3, [pc, #444]	@ (8004aac <HAL_FDCAN_IRQHandler+0x490>)
 80048f0:	400b      	ands	r3, r1
 80048f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80048f4:	4a6c      	ldr	r2, [pc, #432]	@ (8004aa8 <HAL_FDCAN_IRQHandler+0x48c>)
 80048f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048f8:	0f9b      	lsrs	r3, r3, #30
 80048fa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80048fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f94b 	bl	8004b9a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004906:	2b00      	cmp	r3, #0
 8004908:	d011      	beq.n	800492e <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004910:	4b66      	ldr	r3, [pc, #408]	@ (8004aac <HAL_FDCAN_IRQHandler+0x490>)
 8004912:	400b      	ands	r3, r1
 8004914:	6513      	str	r3, [r2, #80]	@ 0x50
 8004916:	4a64      	ldr	r2, [pc, #400]	@ (8004aa8 <HAL_FDCAN_IRQHandler+0x48c>)
 8004918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800491a:	0f9b      	lsrs	r3, r3, #30
 800491c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5f      	ldr	r2, [pc, #380]	@ (8004ab0 <HAL_FDCAN_IRQHandler+0x494>)
 8004934:	4293      	cmp	r3, r2
 8004936:	f040 80aa 	bne.w	8004a8e <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80a2 	beq.w	8004a8e <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800495e:	4013      	ands	r3, r2
 8004960:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800496c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004976:	4013      	ands	r3, r2
 8004978:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004984:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800498e:	4013      	ands	r3, r2
 8004990:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800499c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	6a3a      	ldr	r2, [r7, #32]
 80049a6:	4013      	ands	r3, r2
 80049a8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80049b4:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	4013      	ands	r3, r2
 80049c0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80049d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049de:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80049e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f8e4 	bl	8004bb0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80049e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049f4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80049f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f8e4 	bl	8004bc6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d019      	beq.n	8004a3c <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d014      	beq.n	8004a3c <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a28:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2240      	movs	r2, #64	@ 0x40
 8004a30:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	6939      	ldr	r1, [r7, #16]
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f8d0 	bl	8004bdc <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a48:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004a4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f8d1 	bl	8004bf4 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00b      	beq.n	8004a70 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	6a3a      	ldr	r2, [r7, #32]
 8004a5e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00b      	beq.n	8004a8e <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	69fa      	ldr	r2, [r7, #28]
 8004a7c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f874 	bl	8004b86 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004a9e:	bf00      	nop
 8004aa0:	3758      	adds	r7, #88	@ 0x58
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	4000a800 	.word	0x4000a800
 8004aac:	3fcfffff 	.word	0x3fcfffff
 8004ab0:	4000a000 	.word	0x4000a000

08004ab4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
	...

08004c0c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c18:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004c22:	4ba7      	ldr	r3, [pc, #668]	@ (8004ec0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	0091      	lsls	r1, r2, #2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6812      	ldr	r2, [r2, #0]
 8004c2e:	430b      	orrs	r3, r1
 8004c30:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c3c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c44:	041a      	lsls	r2, r3, #16
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	4413      	add	r3, r2
 8004c58:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004c62:	4b97      	ldr	r3, [pc, #604]	@ (8004ec0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	0091      	lsls	r1, r2, #2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	430b      	orrs	r3, r1
 8004c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c84:	041a      	lsls	r2, r3, #16
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	4413      	add	r3, r2
 8004c9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004ca4:	4b86      	ldr	r3, [pc, #536]	@ (8004ec0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	0091      	lsls	r1, r2, #2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004cbe:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc6:	041a      	lsls	r2, r3, #16
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004cda:	fb02 f303 	mul.w	r3, r2, r3
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004cec:	4b74      	ldr	r3, [pc, #464]	@ (8004ec0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	0091      	lsls	r1, r2, #2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6812      	ldr	r2, [r2, #0]
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d06:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0e:	041a      	lsls	r2, r3, #16
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004d22:	fb02 f303 	mul.w	r3, r2, r3
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	4413      	add	r3, r2
 8004d2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004d34:	4b62      	ldr	r3, [pc, #392]	@ (8004ec0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	0091      	lsls	r1, r2, #2
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6812      	ldr	r2, [r2, #0]
 8004d40:	430b      	orrs	r3, r1
 8004d42:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	4413      	add	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004d60:	4b57      	ldr	r3, [pc, #348]	@ (8004ec0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	0091      	lsls	r1, r2, #2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d7a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d82:	041a      	lsls	r2, r3, #16
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	4413      	add	r3, r2
 8004d98:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004da2:	4b47      	ldr	r3, [pc, #284]	@ (8004ec0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	0091      	lsls	r1, r2, #2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	430b      	orrs	r3, r1
 8004db0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004dbc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc4:	041a      	lsls	r2, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004dd8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de0:	061a      	lsls	r2, r3, #24
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004df0:	4b34      	ldr	r3, [pc, #208]	@ (8004ec4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004df2:	4413      	add	r3, r2
 8004df4:	009a      	lsls	r2, r3, #2
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	441a      	add	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	441a      	add	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004e2c:	441a      	add	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8004e3e:	fb01 f303 	mul.w	r3, r1, r3
 8004e42:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004e44:	441a      	add	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8004e56:	fb01 f303 	mul.w	r3, r1, r3
 8004e5a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004e5c:	441a      	add	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	441a      	add	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004e86:	fb01 f303 	mul.w	r3, r1, r3
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	441a      	add	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004ea2:	fb01 f303 	mul.w	r3, r1, r3
 8004ea6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004ea8:	441a      	add	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	4a04      	ldr	r2, [pc, #16]	@ (8004ec8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d915      	bls.n	8004ee8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004ebc:	e006      	b.n	8004ecc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004ebe:	bf00      	nop
 8004ec0:	ffff0003 	.word	0xffff0003
 8004ec4:	10002b00 	.word	0x10002b00
 8004ec8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ed2:	f043 0220 	orr.w	r2, r3, #32
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2203      	movs	r2, #3
 8004ee0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e010      	b.n	8004f0a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	e005      	b.n	8004efc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d3f3      	bcc.n	8004ef0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop

08004f18 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b089      	sub	sp, #36	@ 0x24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10a      	bne.n	8004f44 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004f36:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61fb      	str	r3, [r7, #28]
 8004f42:	e00a      	b.n	8004f5a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004f4c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004f52:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004f54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f58:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004f64:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004f6a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004f70:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	fb01 f303 	mul.w	r3, r1, r3
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	e020      	b.n	8004ff2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3303      	adds	r3, #3
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	3302      	adds	r3, #2
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	440b      	add	r3, r1
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004fc8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	440b      	add	r3, r1
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004fd6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	440a      	add	r2, r1
 8004fde:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004fe0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	4a06      	ldr	r2, [pc, #24]	@ (8005010 <FDCAN_CopyMessageToRAM+0xf8>)
 8004ff8:	5cd3      	ldrb	r3, [r2, r3]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d3d6      	bcc.n	8004fb0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8005002:	bf00      	nop
 8005004:	bf00      	nop
 8005006:	3724      	adds	r7, #36	@ 0x24
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	08012cd4 	.word	0x08012cd4

08005014 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005014:	b480      	push	{r7}
 8005016:	b089      	sub	sp, #36	@ 0x24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005022:	4b86      	ldr	r3, [pc, #536]	@ (800523c <HAL_GPIO_Init+0x228>)
 8005024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005026:	e18c      	b.n	8005342 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	2101      	movs	r1, #1
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	fa01 f303 	lsl.w	r3, r1, r3
 8005034:	4013      	ands	r3, r2
 8005036:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 817e 	beq.w	800533c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	2b01      	cmp	r3, #1
 800504a:	d005      	beq.n	8005058 <HAL_GPIO_Init+0x44>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f003 0303 	and.w	r3, r3, #3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d130      	bne.n	80050ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	2203      	movs	r2, #3
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	43db      	mvns	r3, r3
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	4013      	ands	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	4313      	orrs	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800508e:	2201      	movs	r2, #1
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	43db      	mvns	r3, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	4013      	ands	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	091b      	lsrs	r3, r3, #4
 80050a4:	f003 0201 	and.w	r2, r3, #1
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d017      	beq.n	80050f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	2203      	movs	r2, #3
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43db      	mvns	r3, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4013      	ands	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d123      	bne.n	800514a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	08da      	lsrs	r2, r3, #3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3208      	adds	r2, #8
 800510a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800510e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	220f      	movs	r2, #15
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43db      	mvns	r3, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	4013      	ands	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	4313      	orrs	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	08da      	lsrs	r2, r3, #3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3208      	adds	r2, #8
 8005144:	69b9      	ldr	r1, [r7, #24]
 8005146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	2203      	movs	r2, #3
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4013      	ands	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 0203 	and.w	r2, r3, #3
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4313      	orrs	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 80d8 	beq.w	800533c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800518c:	4b2c      	ldr	r3, [pc, #176]	@ (8005240 <HAL_GPIO_Init+0x22c>)
 800518e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005192:	4a2b      	ldr	r2, [pc, #172]	@ (8005240 <HAL_GPIO_Init+0x22c>)
 8005194:	f043 0302 	orr.w	r3, r3, #2
 8005198:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800519c:	4b28      	ldr	r3, [pc, #160]	@ (8005240 <HAL_GPIO_Init+0x22c>)
 800519e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051aa:	4a26      	ldr	r2, [pc, #152]	@ (8005244 <HAL_GPIO_Init+0x230>)
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	089b      	lsrs	r3, r3, #2
 80051b0:	3302      	adds	r3, #2
 80051b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	220f      	movs	r2, #15
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	43db      	mvns	r3, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4013      	ands	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005248 <HAL_GPIO_Init+0x234>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d04a      	beq.n	800526c <HAL_GPIO_Init+0x258>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a1c      	ldr	r2, [pc, #112]	@ (800524c <HAL_GPIO_Init+0x238>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d02b      	beq.n	8005236 <HAL_GPIO_Init+0x222>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005250 <HAL_GPIO_Init+0x23c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d025      	beq.n	8005232 <HAL_GPIO_Init+0x21e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005254 <HAL_GPIO_Init+0x240>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01f      	beq.n	800522e <HAL_GPIO_Init+0x21a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a19      	ldr	r2, [pc, #100]	@ (8005258 <HAL_GPIO_Init+0x244>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d019      	beq.n	800522a <HAL_GPIO_Init+0x216>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a18      	ldr	r2, [pc, #96]	@ (800525c <HAL_GPIO_Init+0x248>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <HAL_GPIO_Init+0x212>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a17      	ldr	r2, [pc, #92]	@ (8005260 <HAL_GPIO_Init+0x24c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00d      	beq.n	8005222 <HAL_GPIO_Init+0x20e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a16      	ldr	r2, [pc, #88]	@ (8005264 <HAL_GPIO_Init+0x250>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d007      	beq.n	800521e <HAL_GPIO_Init+0x20a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a15      	ldr	r2, [pc, #84]	@ (8005268 <HAL_GPIO_Init+0x254>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d101      	bne.n	800521a <HAL_GPIO_Init+0x206>
 8005216:	2309      	movs	r3, #9
 8005218:	e029      	b.n	800526e <HAL_GPIO_Init+0x25a>
 800521a:	230a      	movs	r3, #10
 800521c:	e027      	b.n	800526e <HAL_GPIO_Init+0x25a>
 800521e:	2307      	movs	r3, #7
 8005220:	e025      	b.n	800526e <HAL_GPIO_Init+0x25a>
 8005222:	2306      	movs	r3, #6
 8005224:	e023      	b.n	800526e <HAL_GPIO_Init+0x25a>
 8005226:	2305      	movs	r3, #5
 8005228:	e021      	b.n	800526e <HAL_GPIO_Init+0x25a>
 800522a:	2304      	movs	r3, #4
 800522c:	e01f      	b.n	800526e <HAL_GPIO_Init+0x25a>
 800522e:	2303      	movs	r3, #3
 8005230:	e01d      	b.n	800526e <HAL_GPIO_Init+0x25a>
 8005232:	2302      	movs	r3, #2
 8005234:	e01b      	b.n	800526e <HAL_GPIO_Init+0x25a>
 8005236:	2301      	movs	r3, #1
 8005238:	e019      	b.n	800526e <HAL_GPIO_Init+0x25a>
 800523a:	bf00      	nop
 800523c:	58000080 	.word	0x58000080
 8005240:	58024400 	.word	0x58024400
 8005244:	58000400 	.word	0x58000400
 8005248:	58020000 	.word	0x58020000
 800524c:	58020400 	.word	0x58020400
 8005250:	58020800 	.word	0x58020800
 8005254:	58020c00 	.word	0x58020c00
 8005258:	58021000 	.word	0x58021000
 800525c:	58021400 	.word	0x58021400
 8005260:	58021800 	.word	0x58021800
 8005264:	58021c00 	.word	0x58021c00
 8005268:	58022400 	.word	0x58022400
 800526c:	2300      	movs	r3, #0
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	f002 0203 	and.w	r2, r2, #3
 8005274:	0092      	lsls	r2, r2, #2
 8005276:	4093      	lsls	r3, r2
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	4313      	orrs	r3, r2
 800527c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800527e:	4938      	ldr	r1, [pc, #224]	@ (8005360 <HAL_GPIO_Init+0x34c>)
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	089b      	lsrs	r3, r3, #2
 8005284:	3302      	adds	r3, #2
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800528c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	43db      	mvns	r3, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	4013      	ands	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80052b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80052ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	43db      	mvns	r3, r3
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	4013      	ands	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80052e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	43db      	mvns	r3, r3
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	4013      	ands	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	43db      	mvns	r3, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4013      	ands	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	3301      	adds	r3, #1
 8005340:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	fa22 f303 	lsr.w	r3, r2, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	f47f ae6b 	bne.w	8005028 <HAL_GPIO_Init+0x14>
  }
}
 8005352:	bf00      	nop
 8005354:	bf00      	nop
 8005356:	3724      	adds	r7, #36	@ 0x24
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	58000400 	.word	0x58000400

08005364 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800536c:	4b19      	ldr	r3, [pc, #100]	@ (80053d4 <HAL_PWREx_ConfigSupply+0x70>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b04      	cmp	r3, #4
 8005376:	d00a      	beq.n	800538e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005378:	4b16      	ldr	r3, [pc, #88]	@ (80053d4 <HAL_PWREx_ConfigSupply+0x70>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	429a      	cmp	r2, r3
 8005384:	d001      	beq.n	800538a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e01f      	b.n	80053ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	e01d      	b.n	80053ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800538e:	4b11      	ldr	r3, [pc, #68]	@ (80053d4 <HAL_PWREx_ConfigSupply+0x70>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f023 0207 	bic.w	r2, r3, #7
 8005396:	490f      	ldr	r1, [pc, #60]	@ (80053d4 <HAL_PWREx_ConfigSupply+0x70>)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4313      	orrs	r3, r2
 800539c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800539e:	f7fd fd33 	bl	8002e08 <HAL_GetTick>
 80053a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053a4:	e009      	b.n	80053ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80053a6:	f7fd fd2f 	bl	8002e08 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053b4:	d901      	bls.n	80053ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e007      	b.n	80053ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053ba:	4b06      	ldr	r3, [pc, #24]	@ (80053d4 <HAL_PWREx_ConfigSupply+0x70>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053c6:	d1ee      	bne.n	80053a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	58024800 	.word	0x58024800

080053d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08c      	sub	sp, #48	@ 0x30
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e3c8      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 8087 	beq.w	8005506 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053f8:	4b88      	ldr	r3, [pc, #544]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005400:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005402:	4b86      	ldr	r3, [pc, #536]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005406:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540a:	2b10      	cmp	r3, #16
 800540c:	d007      	beq.n	800541e <HAL_RCC_OscConfig+0x46>
 800540e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005410:	2b18      	cmp	r3, #24
 8005412:	d110      	bne.n	8005436 <HAL_RCC_OscConfig+0x5e>
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d10b      	bne.n	8005436 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800541e:	4b7f      	ldr	r3, [pc, #508]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d06c      	beq.n	8005504 <HAL_RCC_OscConfig+0x12c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d168      	bne.n	8005504 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e3a2      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800543e:	d106      	bne.n	800544e <HAL_RCC_OscConfig+0x76>
 8005440:	4b76      	ldr	r3, [pc, #472]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a75      	ldr	r2, [pc, #468]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	e02e      	b.n	80054ac <HAL_RCC_OscConfig+0xd4>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10c      	bne.n	8005470 <HAL_RCC_OscConfig+0x98>
 8005456:	4b71      	ldr	r3, [pc, #452]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a70      	ldr	r2, [pc, #448]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800545c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	4b6e      	ldr	r3, [pc, #440]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a6d      	ldr	r2, [pc, #436]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005468:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	e01d      	b.n	80054ac <HAL_RCC_OscConfig+0xd4>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005478:	d10c      	bne.n	8005494 <HAL_RCC_OscConfig+0xbc>
 800547a:	4b68      	ldr	r3, [pc, #416]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a67      	ldr	r2, [pc, #412]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	4b65      	ldr	r3, [pc, #404]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a64      	ldr	r2, [pc, #400]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800548c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	e00b      	b.n	80054ac <HAL_RCC_OscConfig+0xd4>
 8005494:	4b61      	ldr	r3, [pc, #388]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a60      	ldr	r2, [pc, #384]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800549a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	4b5e      	ldr	r3, [pc, #376]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a5d      	ldr	r2, [pc, #372]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80054a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d013      	beq.n	80054dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b4:	f7fd fca8 	bl	8002e08 <HAL_GetTick>
 80054b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054bc:	f7fd fca4 	bl	8002e08 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b64      	cmp	r3, #100	@ 0x64
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e356      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054ce:	4b53      	ldr	r3, [pc, #332]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCC_OscConfig+0xe4>
 80054da:	e014      	b.n	8005506 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fd fc94 	bl	8002e08 <HAL_GetTick>
 80054e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054e4:	f7fd fc90 	bl	8002e08 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	@ 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e342      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054f6:	4b49      	ldr	r3, [pc, #292]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f0      	bne.n	80054e4 <HAL_RCC_OscConfig+0x10c>
 8005502:	e000      	b.n	8005506 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 808c 	beq.w	800562c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005514:	4b41      	ldr	r3, [pc, #260]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800551c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800551e:	4b3f      	ldr	r3, [pc, #252]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005522:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <HAL_RCC_OscConfig+0x162>
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	2b18      	cmp	r3, #24
 800552e:	d137      	bne.n	80055a0 <HAL_RCC_OscConfig+0x1c8>
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d132      	bne.n	80055a0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800553a:	4b38      	ldr	r3, [pc, #224]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <HAL_RCC_OscConfig+0x17a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e314      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005552:	4b32      	ldr	r3, [pc, #200]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f023 0219 	bic.w	r2, r3, #25
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	492f      	ldr	r1, [pc, #188]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005560:	4313      	orrs	r3, r2
 8005562:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fd fc50 	bl	8002e08 <HAL_GetTick>
 8005568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800556c:	f7fd fc4c 	bl	8002e08 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e2fe      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800557e:	4b27      	ldr	r3, [pc, #156]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f0      	beq.n	800556c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558a:	4b24      	ldr	r3, [pc, #144]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	061b      	lsls	r3, r3, #24
 8005598:	4920      	ldr	r1, [pc, #128]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 800559a:	4313      	orrs	r3, r2
 800559c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800559e:	e045      	b.n	800562c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d026      	beq.n	80055f6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055a8:	4b1c      	ldr	r3, [pc, #112]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f023 0219 	bic.w	r2, r3, #25
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4919      	ldr	r1, [pc, #100]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ba:	f7fd fc25 	bl	8002e08 <HAL_GetTick>
 80055be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055c2:	f7fd fc21 	bl	8002e08 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e2d3      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055d4:	4b11      	ldr	r3, [pc, #68]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0f0      	beq.n	80055c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e0:	4b0e      	ldr	r3, [pc, #56]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	061b      	lsls	r3, r3, #24
 80055ee:	490b      	ldr	r1, [pc, #44]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	604b      	str	r3, [r1, #4]
 80055f4:	e01a      	b.n	800562c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055f6:	4b09      	ldr	r3, [pc, #36]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a08      	ldr	r2, [pc, #32]	@ (800561c <HAL_RCC_OscConfig+0x244>)
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005602:	f7fd fc01 	bl	8002e08 <HAL_GetTick>
 8005606:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005608:	e00a      	b.n	8005620 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800560a:	f7fd fbfd 	bl	8002e08 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d903      	bls.n	8005620 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e2af      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
 800561c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005620:	4b96      	ldr	r3, [pc, #600]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1ee      	bne.n	800560a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b00      	cmp	r3, #0
 8005636:	d06a      	beq.n	800570e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005638:	4b90      	ldr	r3, [pc, #576]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005640:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005642:	4b8e      	ldr	r3, [pc, #568]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005646:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	2b08      	cmp	r3, #8
 800564c:	d007      	beq.n	800565e <HAL_RCC_OscConfig+0x286>
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b18      	cmp	r3, #24
 8005652:	d11b      	bne.n	800568c <HAL_RCC_OscConfig+0x2b4>
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b01      	cmp	r3, #1
 800565c:	d116      	bne.n	800568c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800565e:	4b87      	ldr	r3, [pc, #540]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005666:	2b00      	cmp	r3, #0
 8005668:	d005      	beq.n	8005676 <HAL_RCC_OscConfig+0x29e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	2b80      	cmp	r3, #128	@ 0x80
 8005670:	d001      	beq.n	8005676 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e282      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005676:	4b81      	ldr	r3, [pc, #516]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	061b      	lsls	r3, r3, #24
 8005684:	497d      	ldr	r1, [pc, #500]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005686:	4313      	orrs	r3, r2
 8005688:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800568a:	e040      	b.n	800570e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d023      	beq.n	80056dc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005694:	4b79      	ldr	r3, [pc, #484]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a78      	ldr	r2, [pc, #480]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800569a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800569e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fd fbb2 	bl	8002e08 <HAL_GetTick>
 80056a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80056a8:	f7fd fbae 	bl	8002e08 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e260      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056ba:	4b70      	ldr	r3, [pc, #448]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056c6:	4b6d      	ldr	r3, [pc, #436]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	061b      	lsls	r3, r3, #24
 80056d4:	4969      	ldr	r1, [pc, #420]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60cb      	str	r3, [r1, #12]
 80056da:	e018      	b.n	800570e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80056dc:	4b67      	ldr	r3, [pc, #412]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a66      	ldr	r2, [pc, #408]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80056e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fd fb8e 	bl	8002e08 <HAL_GetTick>
 80056ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80056f0:	f7fd fb8a 	bl	8002e08 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e23c      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005702:	4b5e      	ldr	r3, [pc, #376]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d036      	beq.n	8005788 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d019      	beq.n	8005756 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005722:	4b56      	ldr	r3, [pc, #344]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005726:	4a55      	ldr	r2, [pc, #340]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572e:	f7fd fb6b 	bl	8002e08 <HAL_GetTick>
 8005732:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005736:	f7fd fb67 	bl	8002e08 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e219      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005748:	4b4c      	ldr	r3, [pc, #304]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800574a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f0      	beq.n	8005736 <HAL_RCC_OscConfig+0x35e>
 8005754:	e018      	b.n	8005788 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005756:	4b49      	ldr	r3, [pc, #292]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800575a:	4a48      	ldr	r2, [pc, #288]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005762:	f7fd fb51 	bl	8002e08 <HAL_GetTick>
 8005766:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800576a:	f7fd fb4d 	bl	8002e08 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e1ff      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800577c:	4b3f      	ldr	r3, [pc, #252]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800577e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f0      	bne.n	800576a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b00      	cmp	r3, #0
 8005792:	d036      	beq.n	8005802 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d019      	beq.n	80057d0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800579c:	4b37      	ldr	r3, [pc, #220]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a36      	ldr	r2, [pc, #216]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80057a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80057a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057a8:	f7fd fb2e 	bl	8002e08 <HAL_GetTick>
 80057ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057b0:	f7fd fb2a 	bl	8002e08 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e1dc      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057c2:	4b2e      	ldr	r3, [pc, #184]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0f0      	beq.n	80057b0 <HAL_RCC_OscConfig+0x3d8>
 80057ce:	e018      	b.n	8005802 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057d0:	4b2a      	ldr	r3, [pc, #168]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a29      	ldr	r2, [pc, #164]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80057d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057dc:	f7fd fb14 	bl	8002e08 <HAL_GetTick>
 80057e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057e4:	f7fd fb10 	bl	8002e08 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e1c2      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057f6:	4b21      	ldr	r3, [pc, #132]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 8086 	beq.w	800591c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005810:	4b1b      	ldr	r3, [pc, #108]	@ (8005880 <HAL_RCC_OscConfig+0x4a8>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1a      	ldr	r2, [pc, #104]	@ (8005880 <HAL_RCC_OscConfig+0x4a8>)
 8005816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800581a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800581c:	f7fd faf4 	bl	8002e08 <HAL_GetTick>
 8005820:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005824:	f7fd faf0 	bl	8002e08 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	@ 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e1a2      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005836:	4b12      	ldr	r3, [pc, #72]	@ (8005880 <HAL_RCC_OscConfig+0x4a8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d106      	bne.n	8005858 <HAL_RCC_OscConfig+0x480>
 800584a:	4b0c      	ldr	r3, [pc, #48]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800584c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800584e:	4a0b      	ldr	r2, [pc, #44]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	6713      	str	r3, [r2, #112]	@ 0x70
 8005856:	e032      	b.n	80058be <HAL_RCC_OscConfig+0x4e6>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d111      	bne.n	8005884 <HAL_RCC_OscConfig+0x4ac>
 8005860:	4b06      	ldr	r3, [pc, #24]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005864:	4a05      	ldr	r2, [pc, #20]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005866:	f023 0301 	bic.w	r3, r3, #1
 800586a:	6713      	str	r3, [r2, #112]	@ 0x70
 800586c:	4b03      	ldr	r3, [pc, #12]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 800586e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005870:	4a02      	ldr	r2, [pc, #8]	@ (800587c <HAL_RCC_OscConfig+0x4a4>)
 8005872:	f023 0304 	bic.w	r3, r3, #4
 8005876:	6713      	str	r3, [r2, #112]	@ 0x70
 8005878:	e021      	b.n	80058be <HAL_RCC_OscConfig+0x4e6>
 800587a:	bf00      	nop
 800587c:	58024400 	.word	0x58024400
 8005880:	58024800 	.word	0x58024800
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b05      	cmp	r3, #5
 800588a:	d10c      	bne.n	80058a6 <HAL_RCC_OscConfig+0x4ce>
 800588c:	4b83      	ldr	r3, [pc, #524]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 800588e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005890:	4a82      	ldr	r2, [pc, #520]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005892:	f043 0304 	orr.w	r3, r3, #4
 8005896:	6713      	str	r3, [r2, #112]	@ 0x70
 8005898:	4b80      	ldr	r3, [pc, #512]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 800589a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589c:	4a7f      	ldr	r2, [pc, #508]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80058a4:	e00b      	b.n	80058be <HAL_RCC_OscConfig+0x4e6>
 80058a6:	4b7d      	ldr	r3, [pc, #500]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058aa:	4a7c      	ldr	r2, [pc, #496]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80058b2:	4b7a      	ldr	r3, [pc, #488]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80058b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b6:	4a79      	ldr	r2, [pc, #484]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80058b8:	f023 0304 	bic.w	r3, r3, #4
 80058bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d015      	beq.n	80058f2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c6:	f7fd fa9f 	bl	8002e08 <HAL_GetTick>
 80058ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058cc:	e00a      	b.n	80058e4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ce:	f7fd fa9b 	bl	8002e08 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058dc:	4293      	cmp	r3, r2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e14b      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058e4:	4b6d      	ldr	r3, [pc, #436]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80058e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ee      	beq.n	80058ce <HAL_RCC_OscConfig+0x4f6>
 80058f0:	e014      	b.n	800591c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f2:	f7fd fa89 	bl	8002e08 <HAL_GetTick>
 80058f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058f8:	e00a      	b.n	8005910 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fa:	f7fd fa85 	bl	8002e08 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e135      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005910:	4b62      	ldr	r3, [pc, #392]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1ee      	bne.n	80058fa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 812a 	beq.w	8005b7a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005926:	4b5d      	ldr	r3, [pc, #372]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800592e:	2b18      	cmp	r3, #24
 8005930:	f000 80ba 	beq.w	8005aa8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005938:	2b02      	cmp	r3, #2
 800593a:	f040 8095 	bne.w	8005a68 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800593e:	4b57      	ldr	r3, [pc, #348]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a56      	ldr	r2, [pc, #344]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005944:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594a:	f7fd fa5d 	bl	8002e08 <HAL_GetTick>
 800594e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005950:	e008      	b.n	8005964 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005952:	f7fd fa59 	bl	8002e08 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e10b      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005964:	4b4d      	ldr	r3, [pc, #308]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f0      	bne.n	8005952 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005970:	4b4a      	ldr	r3, [pc, #296]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005972:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005974:	4b4a      	ldr	r3, [pc, #296]	@ (8005aa0 <HAL_RCC_OscConfig+0x6c8>)
 8005976:	4013      	ands	r3, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005980:	0112      	lsls	r2, r2, #4
 8005982:	430a      	orrs	r2, r1
 8005984:	4945      	ldr	r1, [pc, #276]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005986:	4313      	orrs	r3, r2
 8005988:	628b      	str	r3, [r1, #40]	@ 0x28
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598e:	3b01      	subs	r3, #1
 8005990:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005998:	3b01      	subs	r3, #1
 800599a:	025b      	lsls	r3, r3, #9
 800599c:	b29b      	uxth	r3, r3
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a4:	3b01      	subs	r3, #1
 80059a6:	041b      	lsls	r3, r3, #16
 80059a8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b2:	3b01      	subs	r3, #1
 80059b4:	061b      	lsls	r3, r3, #24
 80059b6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80059ba:	4938      	ldr	r1, [pc, #224]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80059c0:	4b36      	ldr	r3, [pc, #216]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c4:	4a35      	ldr	r2, [pc, #212]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80059cc:	4b33      	ldr	r3, [pc, #204]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059d0:	4b34      	ldr	r3, [pc, #208]	@ (8005aa4 <HAL_RCC_OscConfig+0x6cc>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80059d8:	00d2      	lsls	r2, r2, #3
 80059da:	4930      	ldr	r1, [pc, #192]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80059e0:	4b2e      	ldr	r3, [pc, #184]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e4:	f023 020c 	bic.w	r2, r3, #12
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ec:	492b      	ldr	r1, [pc, #172]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80059f2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f6:	f023 0202 	bic.w	r2, r3, #2
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fe:	4927      	ldr	r1, [pc, #156]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a04:	4b25      	ldr	r3, [pc, #148]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a08:	4a24      	ldr	r2, [pc, #144]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a10:	4b22      	ldr	r3, [pc, #136]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a14:	4a21      	ldr	r2, [pc, #132]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a20:	4a1e      	ldr	r2, [pc, #120]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005a28:	4b1c      	ldr	r3, [pc, #112]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a2e:	f043 0301 	orr.w	r3, r3, #1
 8005a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a34:	4b19      	ldr	r3, [pc, #100]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a18      	ldr	r2, [pc, #96]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fd f9e2 	bl	8002e08 <HAL_GetTick>
 8005a44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a48:	f7fd f9de 	bl	8002e08 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e090      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a5a:	4b10      	ldr	r3, [pc, #64]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0f0      	beq.n	8005a48 <HAL_RCC_OscConfig+0x670>
 8005a66:	e088      	b.n	8005b7a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a68:	4b0c      	ldr	r3, [pc, #48]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a0b      	ldr	r2, [pc, #44]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a74:	f7fd f9c8 	bl	8002e08 <HAL_GetTick>
 8005a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a7c:	f7fd f9c4 	bl	8002e08 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e076      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a8e:	4b03      	ldr	r3, [pc, #12]	@ (8005a9c <HAL_RCC_OscConfig+0x6c4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f0      	bne.n	8005a7c <HAL_RCC_OscConfig+0x6a4>
 8005a9a:	e06e      	b.n	8005b7a <HAL_RCC_OscConfig+0x7a2>
 8005a9c:	58024400 	.word	0x58024400
 8005aa0:	fffffc0c 	.word	0xfffffc0c
 8005aa4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005aa8:	4b36      	ldr	r3, [pc, #216]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005aae:	4b35      	ldr	r3, [pc, #212]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d031      	beq.n	8005b20 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f003 0203 	and.w	r2, r3, #3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d12a      	bne.n	8005b20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	091b      	lsrs	r3, r3, #4
 8005ace:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d122      	bne.n	8005b20 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d11a      	bne.n	8005b20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	0a5b      	lsrs	r3, r3, #9
 8005aee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d111      	bne.n	8005b20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	0c1b      	lsrs	r3, r3, #16
 8005b00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d108      	bne.n	8005b20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	0e1b      	lsrs	r3, r3, #24
 8005b12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d001      	beq.n	8005b24 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e02b      	b.n	8005b7c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005b24:	4b17      	ldr	r3, [pc, #92]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b28:	08db      	lsrs	r3, r3, #3
 8005b2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b2e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d01f      	beq.n	8005b7a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005b3a:	4b12      	ldr	r3, [pc, #72]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3e:	4a11      	ldr	r2, [pc, #68]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005b40:	f023 0301 	bic.w	r3, r3, #1
 8005b44:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b46:	f7fd f95f 	bl	8002e08 <HAL_GetTick>
 8005b4a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005b4c:	bf00      	nop
 8005b4e:	f7fd f95b 	bl	8002e08 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d0f9      	beq.n	8005b4e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b88 <HAL_RCC_OscConfig+0x7b0>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005b66:	00d2      	lsls	r2, r2, #3
 8005b68:	4906      	ldr	r1, [pc, #24]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005b6e:	4b05      	ldr	r3, [pc, #20]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b72:	4a04      	ldr	r2, [pc, #16]	@ (8005b84 <HAL_RCC_OscConfig+0x7ac>)
 8005b74:	f043 0301 	orr.w	r3, r3, #1
 8005b78:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3730      	adds	r7, #48	@ 0x30
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	58024400 	.word	0x58024400
 8005b88:	ffff0007 	.word	0xffff0007

08005b8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e19c      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ba0:	4b8a      	ldr	r3, [pc, #552]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d910      	bls.n	8005bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bae:	4b87      	ldr	r3, [pc, #540]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f023 020f 	bic.w	r2, r3, #15
 8005bb6:	4985      	ldr	r1, [pc, #532]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bbe:	4b83      	ldr	r3, [pc, #524]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d001      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e184      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d010      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691a      	ldr	r2, [r3, #16]
 8005be0:	4b7b      	ldr	r3, [pc, #492]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d908      	bls.n	8005bfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bec:	4b78      	ldr	r3, [pc, #480]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	4975      	ldr	r1, [pc, #468]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d010      	beq.n	8005c2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695a      	ldr	r2, [r3, #20]
 8005c0e:	4b70      	ldr	r3, [pc, #448]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d908      	bls.n	8005c2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c1a:	4b6d      	ldr	r3, [pc, #436]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	496a      	ldr	r1, [pc, #424]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d010      	beq.n	8005c5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699a      	ldr	r2, [r3, #24]
 8005c3c:	4b64      	ldr	r3, [pc, #400]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d908      	bls.n	8005c5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c48:	4b61      	ldr	r3, [pc, #388]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	495e      	ldr	r1, [pc, #376]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d010      	beq.n	8005c88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69da      	ldr	r2, [r3, #28]
 8005c6a:	4b59      	ldr	r3, [pc, #356]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d908      	bls.n	8005c88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c76:	4b56      	ldr	r3, [pc, #344]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	4953      	ldr	r1, [pc, #332]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d010      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	4b4d      	ldr	r3, [pc, #308]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	f003 030f 	and.w	r3, r3, #15
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d908      	bls.n	8005cb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca4:	4b4a      	ldr	r3, [pc, #296]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	f023 020f 	bic.w	r2, r3, #15
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	4947      	ldr	r1, [pc, #284]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d055      	beq.n	8005d6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005cc2:	4b43      	ldr	r3, [pc, #268]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	4940      	ldr	r1, [pc, #256]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d107      	bne.n	8005cec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cdc:	4b3c      	ldr	r3, [pc, #240]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d121      	bne.n	8005d2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0f6      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d107      	bne.n	8005d04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cf4:	4b36      	ldr	r3, [pc, #216]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d115      	bne.n	8005d2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0ea      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d107      	bne.n	8005d1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d0c:	4b30      	ldr	r3, [pc, #192]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d109      	bne.n	8005d2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0de      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e0d6      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d2c:	4b28      	ldr	r3, [pc, #160]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f023 0207 	bic.w	r2, r3, #7
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	4925      	ldr	r1, [pc, #148]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d3e:	f7fd f863 	bl	8002e08 <HAL_GetTick>
 8005d42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d44:	e00a      	b.n	8005d5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d46:	f7fd f85f 	bl	8002e08 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e0be      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d1eb      	bne.n	8005d46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d010      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	4b14      	ldr	r3, [pc, #80]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d208      	bcs.n	8005d9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d8a:	4b11      	ldr	r3, [pc, #68]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	f023 020f 	bic.w	r2, r3, #15
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	490e      	ldr	r1, [pc, #56]	@ (8005dd0 <HAL_RCC_ClockConfig+0x244>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d214      	bcs.n	8005dd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005daa:	4b08      	ldr	r3, [pc, #32]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f023 020f 	bic.w	r2, r3, #15
 8005db2:	4906      	ldr	r1, [pc, #24]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dba:	4b04      	ldr	r3, [pc, #16]	@ (8005dcc <HAL_RCC_ClockConfig+0x240>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d005      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e086      	b.n	8005eda <HAL_RCC_ClockConfig+0x34e>
 8005dcc:	52002000 	.word	0x52002000
 8005dd0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d010      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d208      	bcs.n	8005e02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005df0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	4939      	ldr	r1, [pc, #228]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d010      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695a      	ldr	r2, [r3, #20]
 8005e12:	4b34      	ldr	r3, [pc, #208]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d208      	bcs.n	8005e30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e1e:	4b31      	ldr	r3, [pc, #196]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	492e      	ldr	r1, [pc, #184]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d010      	beq.n	8005e5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	4b28      	ldr	r3, [pc, #160]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d208      	bcs.n	8005e5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	4922      	ldr	r1, [pc, #136]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d010      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69da      	ldr	r2, [r3, #28]
 8005e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d208      	bcs.n	8005e8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	4917      	ldr	r1, [pc, #92]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e8c:	f000 f834 	bl	8005ef8 <HAL_RCC_GetSysClockFreq>
 8005e90:	4602      	mov	r2, r0
 8005e92:	4b14      	ldr	r3, [pc, #80]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	0a1b      	lsrs	r3, r3, #8
 8005e98:	f003 030f 	and.w	r3, r3, #15
 8005e9c:	4912      	ldr	r1, [pc, #72]	@ (8005ee8 <HAL_RCC_ClockConfig+0x35c>)
 8005e9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee4 <HAL_RCC_ClockConfig+0x358>)
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8005ee8 <HAL_RCC_ClockConfig+0x35c>)
 8005eb4:	5cd3      	ldrb	r3, [r2, r3]
 8005eb6:	f003 031f 	and.w	r3, r3, #31
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8005eec <HAL_RCC_ClockConfig+0x360>)
 8005ec2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8005ef0 <HAL_RCC_ClockConfig+0x364>)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005eca:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef4 <HAL_RCC_ClockConfig+0x368>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fc ff50 	bl	8002d74 <HAL_InitTick>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	08012cc4 	.word	0x08012cc4
 8005eec:	24000028 	.word	0x24000028
 8005ef0:	24000024 	.word	0x24000024
 8005ef4:	2400005c 	.word	0x2400005c

08005ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b089      	sub	sp, #36	@ 0x24
 8005efc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005efe:	4bb3      	ldr	r3, [pc, #716]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f06:	2b18      	cmp	r3, #24
 8005f08:	f200 8155 	bhi.w	80061b6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f12:	bf00      	nop
 8005f14:	08005f79 	.word	0x08005f79
 8005f18:	080061b7 	.word	0x080061b7
 8005f1c:	080061b7 	.word	0x080061b7
 8005f20:	080061b7 	.word	0x080061b7
 8005f24:	080061b7 	.word	0x080061b7
 8005f28:	080061b7 	.word	0x080061b7
 8005f2c:	080061b7 	.word	0x080061b7
 8005f30:	080061b7 	.word	0x080061b7
 8005f34:	08005f9f 	.word	0x08005f9f
 8005f38:	080061b7 	.word	0x080061b7
 8005f3c:	080061b7 	.word	0x080061b7
 8005f40:	080061b7 	.word	0x080061b7
 8005f44:	080061b7 	.word	0x080061b7
 8005f48:	080061b7 	.word	0x080061b7
 8005f4c:	080061b7 	.word	0x080061b7
 8005f50:	080061b7 	.word	0x080061b7
 8005f54:	08005fa5 	.word	0x08005fa5
 8005f58:	080061b7 	.word	0x080061b7
 8005f5c:	080061b7 	.word	0x080061b7
 8005f60:	080061b7 	.word	0x080061b7
 8005f64:	080061b7 	.word	0x080061b7
 8005f68:	080061b7 	.word	0x080061b7
 8005f6c:	080061b7 	.word	0x080061b7
 8005f70:	080061b7 	.word	0x080061b7
 8005f74:	08005fab 	.word	0x08005fab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f78:	4b94      	ldr	r3, [pc, #592]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0320 	and.w	r3, r3, #32
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d009      	beq.n	8005f98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f84:	4b91      	ldr	r3, [pc, #580]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	08db      	lsrs	r3, r3, #3
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	4a90      	ldr	r2, [pc, #576]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f90:	fa22 f303 	lsr.w	r3, r2, r3
 8005f94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005f96:	e111      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f98:	4b8d      	ldr	r3, [pc, #564]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f9a:	61bb      	str	r3, [r7, #24]
      break;
 8005f9c:	e10e      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005f9e:	4b8d      	ldr	r3, [pc, #564]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fa0:	61bb      	str	r3, [r7, #24]
      break;
 8005fa2:	e10b      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005fa4:	4b8c      	ldr	r3, [pc, #560]	@ (80061d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005fa6:	61bb      	str	r3, [r7, #24]
      break;
 8005fa8:	e108      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005faa:	4b88      	ldr	r3, [pc, #544]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005fb4:	4b85      	ldr	r3, [pc, #532]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb8:	091b      	lsrs	r3, r3, #4
 8005fba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fc0:	4b82      	ldr	r3, [pc, #520]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005fca:	4b80      	ldr	r3, [pc, #512]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fce:	08db      	lsrs	r3, r3, #3
 8005fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 80e1 	beq.w	80061b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	f000 8083 	beq.w	80060fc <HAL_RCC_GetSysClockFreq+0x204>
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	f200 80a1 	bhi.w	8006140 <HAL_RCC_GetSysClockFreq+0x248>
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_RCC_GetSysClockFreq+0x114>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d056      	beq.n	80060b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800600a:	e099      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800600c:	4b6f      	ldr	r3, [pc, #444]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b00      	cmp	r3, #0
 8006016:	d02d      	beq.n	8006074 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006018:	4b6c      	ldr	r3, [pc, #432]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	08db      	lsrs	r3, r3, #3
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	4a6b      	ldr	r2, [pc, #428]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006024:	fa22 f303 	lsr.w	r3, r2, r3
 8006028:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	ee07 3a90 	vmov	s15, r3
 8006030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006042:	4b62      	ldr	r3, [pc, #392]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006052:	ed97 6a02 	vldr	s12, [r7, #8]
 8006056:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80061dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800605a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006072:	e087      	b.n	8006184 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80061e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006086:	4b51      	ldr	r3, [pc, #324]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006096:	ed97 6a02 	vldr	s12, [r7, #8]
 800609a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80061dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800609e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060b6:	e065      	b.n	8006184 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80061e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ca:	4b40      	ldr	r3, [pc, #256]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060da:	ed97 6a02 	vldr	s12, [r7, #8]
 80060de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80061dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80060e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060fa:	e043      	b.n	8006184 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	ee07 3a90 	vmov	s15, r3
 8006102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006106:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80061e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800610a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800610e:	4b2f      	ldr	r3, [pc, #188]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006116:	ee07 3a90 	vmov	s15, r3
 800611a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006122:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80061dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800612a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800612e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800613a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800613e:	e021      	b.n	8006184 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80061e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800614e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006152:	4b1e      	ldr	r3, [pc, #120]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615a:	ee07 3a90 	vmov	s15, r3
 800615e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006162:	ed97 6a02 	vldr	s12, [r7, #8]
 8006166:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80061dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800616a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800616e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800617a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800617e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006182:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006184:	4b11      	ldr	r3, [pc, #68]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006188:	0a5b      	lsrs	r3, r3, #9
 800618a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800618e:	3301      	adds	r3, #1
 8006190:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	ee07 3a90 	vmov	s15, r3
 8006198:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800619c:	edd7 6a07 	vldr	s13, [r7, #28]
 80061a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a8:	ee17 3a90 	vmov	r3, s15
 80061ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80061ae:	e005      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	61bb      	str	r3, [r7, #24]
      break;
 80061b4:	e002      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80061b6:	4b07      	ldr	r3, [pc, #28]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061b8:	61bb      	str	r3, [r7, #24]
      break;
 80061ba:	bf00      	nop
  }

  return sysclockfreq;
 80061bc:	69bb      	ldr	r3, [r7, #24]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3724      	adds	r7, #36	@ 0x24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	58024400 	.word	0x58024400
 80061d0:	03d09000 	.word	0x03d09000
 80061d4:	003d0900 	.word	0x003d0900
 80061d8:	017d7840 	.word	0x017d7840
 80061dc:	46000000 	.word	0x46000000
 80061e0:	4c742400 	.word	0x4c742400
 80061e4:	4a742400 	.word	0x4a742400
 80061e8:	4bbebc20 	.word	0x4bbebc20

080061ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80061f2:	f7ff fe81 	bl	8005ef8 <HAL_RCC_GetSysClockFreq>
 80061f6:	4602      	mov	r2, r0
 80061f8:	4b10      	ldr	r3, [pc, #64]	@ (800623c <HAL_RCC_GetHCLKFreq+0x50>)
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	0a1b      	lsrs	r3, r3, #8
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	490f      	ldr	r1, [pc, #60]	@ (8006240 <HAL_RCC_GetHCLKFreq+0x54>)
 8006204:	5ccb      	ldrb	r3, [r1, r3]
 8006206:	f003 031f 	and.w	r3, r3, #31
 800620a:	fa22 f303 	lsr.w	r3, r2, r3
 800620e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006210:	4b0a      	ldr	r3, [pc, #40]	@ (800623c <HAL_RCC_GetHCLKFreq+0x50>)
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	4a09      	ldr	r2, [pc, #36]	@ (8006240 <HAL_RCC_GetHCLKFreq+0x54>)
 800621a:	5cd3      	ldrb	r3, [r2, r3]
 800621c:	f003 031f 	and.w	r3, r3, #31
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	fa22 f303 	lsr.w	r3, r2, r3
 8006226:	4a07      	ldr	r2, [pc, #28]	@ (8006244 <HAL_RCC_GetHCLKFreq+0x58>)
 8006228:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800622a:	4a07      	ldr	r2, [pc, #28]	@ (8006248 <HAL_RCC_GetHCLKFreq+0x5c>)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006230:	4b04      	ldr	r3, [pc, #16]	@ (8006244 <HAL_RCC_GetHCLKFreq+0x58>)
 8006232:	681b      	ldr	r3, [r3, #0]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	58024400 	.word	0x58024400
 8006240:	08012cc4 	.word	0x08012cc4
 8006244:	24000028 	.word	0x24000028
 8006248:	24000024 	.word	0x24000024

0800624c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006250:	f7ff ffcc 	bl	80061ec <HAL_RCC_GetHCLKFreq>
 8006254:	4602      	mov	r2, r0
 8006256:	4b06      	ldr	r3, [pc, #24]	@ (8006270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	091b      	lsrs	r3, r3, #4
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	4904      	ldr	r1, [pc, #16]	@ (8006274 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006262:	5ccb      	ldrb	r3, [r1, r3]
 8006264:	f003 031f 	and.w	r3, r3, #31
 8006268:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800626c:	4618      	mov	r0, r3
 800626e:	bd80      	pop	{r7, pc}
 8006270:	58024400 	.word	0x58024400
 8006274:	08012cc4 	.word	0x08012cc4

08006278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800627c:	f7ff ffb6 	bl	80061ec <HAL_RCC_GetHCLKFreq>
 8006280:	4602      	mov	r2, r0
 8006282:	4b06      	ldr	r3, [pc, #24]	@ (800629c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	0a1b      	lsrs	r3, r3, #8
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	4904      	ldr	r1, [pc, #16]	@ (80062a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800628e:	5ccb      	ldrb	r3, [r1, r3]
 8006290:	f003 031f 	and.w	r3, r3, #31
 8006294:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006298:	4618      	mov	r0, r3
 800629a:	bd80      	pop	{r7, pc}
 800629c:	58024400 	.word	0x58024400
 80062a0:	08012cc4 	.word	0x08012cc4

080062a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062a8:	b0c6      	sub	sp, #280	@ 0x118
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062b0:	2300      	movs	r3, #0
 80062b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062b6:	2300      	movs	r3, #0
 80062b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80062c8:	2500      	movs	r5, #0
 80062ca:	ea54 0305 	orrs.w	r3, r4, r5
 80062ce:	d049      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062da:	d02f      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80062dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062e0:	d828      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80062e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062e6:	d01a      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062ec:	d822      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80062f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062f6:	d007      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062f8:	e01c      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062fa:	4bab      	ldr	r3, [pc, #684]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fe:	4aaa      	ldr	r2, [pc, #680]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006304:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006306:	e01a      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630c:	3308      	adds	r3, #8
 800630e:	2102      	movs	r1, #2
 8006310:	4618      	mov	r0, r3
 8006312:	f001 fc25 	bl	8007b60 <RCCEx_PLL2_Config>
 8006316:	4603      	mov	r3, r0
 8006318:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800631c:	e00f      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800631e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006322:	3328      	adds	r3, #40	@ 0x28
 8006324:	2102      	movs	r1, #2
 8006326:	4618      	mov	r0, r3
 8006328:	f001 fccc 	bl	8007cc4 <RCCEx_PLL3_Config>
 800632c:	4603      	mov	r3, r0
 800632e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006332:	e004      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800633a:	e000      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800633c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10a      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006346:	4b98      	ldr	r3, [pc, #608]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800634a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800634e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006352:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006354:	4a94      	ldr	r2, [pc, #592]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006356:	430b      	orrs	r3, r1
 8006358:	6513      	str	r3, [r2, #80]	@ 0x50
 800635a:	e003      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006360:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006370:	f04f 0900 	mov.w	r9, #0
 8006374:	ea58 0309 	orrs.w	r3, r8, r9
 8006378:	d047      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800637a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006380:	2b04      	cmp	r3, #4
 8006382:	d82a      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006384:	a201      	add	r2, pc, #4	@ (adr r2, 800638c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638a:	bf00      	nop
 800638c:	080063a1 	.word	0x080063a1
 8006390:	080063af 	.word	0x080063af
 8006394:	080063c5 	.word	0x080063c5
 8006398:	080063e3 	.word	0x080063e3
 800639c:	080063e3 	.word	0x080063e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a0:	4b81      	ldr	r3, [pc, #516]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a4:	4a80      	ldr	r2, [pc, #512]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063ac:	e01a      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b2:	3308      	adds	r3, #8
 80063b4:	2100      	movs	r1, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 fbd2 	bl	8007b60 <RCCEx_PLL2_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063c2:	e00f      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c8:	3328      	adds	r3, #40	@ 0x28
 80063ca:	2100      	movs	r1, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 fc79 	bl	8007cc4 <RCCEx_PLL3_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063d8:	e004      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063e0:	e000      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80063e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063ec:	4b6e      	ldr	r3, [pc, #440]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063f0:	f023 0107 	bic.w	r1, r3, #7
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063fa:	4a6b      	ldr	r2, [pc, #428]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063fc:	430b      	orrs	r3, r1
 80063fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8006400:	e003      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006402:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006406:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800640a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006416:	f04f 0b00 	mov.w	fp, #0
 800641a:	ea5a 030b 	orrs.w	r3, sl, fp
 800641e:	d05b      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006428:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800642c:	d03b      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800642e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006432:	d834      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006434:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006438:	d037      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800643a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800643e:	d82e      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006440:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006444:	d033      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006446:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800644a:	d828      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800644c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006450:	d01a      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006452:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006456:	d822      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800645c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006460:	d007      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006462:	e01c      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006464:	4b50      	ldr	r3, [pc, #320]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	4a4f      	ldr	r2, [pc, #316]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800646a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800646e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006470:	e01e      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006476:	3308      	adds	r3, #8
 8006478:	2100      	movs	r1, #0
 800647a:	4618      	mov	r0, r3
 800647c:	f001 fb70 	bl	8007b60 <RCCEx_PLL2_Config>
 8006480:	4603      	mov	r3, r0
 8006482:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006486:	e013      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648c:	3328      	adds	r3, #40	@ 0x28
 800648e:	2100      	movs	r1, #0
 8006490:	4618      	mov	r0, r3
 8006492:	f001 fc17 	bl	8007cc4 <RCCEx_PLL3_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800649c:	e008      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064a4:	e004      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80064a6:	bf00      	nop
 80064a8:	e002      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80064aa:	bf00      	nop
 80064ac:	e000      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80064ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10b      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80064b8:	4b3b      	ldr	r3, [pc, #236]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064bc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064c8:	4a37      	ldr	r2, [pc, #220]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064ca:	430b      	orrs	r3, r1
 80064cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80064ce:	e003      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80064e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80064e8:	2300      	movs	r3, #0
 80064ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80064ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80064f2:	460b      	mov	r3, r1
 80064f4:	4313      	orrs	r3, r2
 80064f6:	d05d      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006500:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006504:	d03b      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006506:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800650a:	d834      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800650c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006510:	d037      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006512:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006516:	d82e      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006518:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800651c:	d033      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800651e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006522:	d828      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006524:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006528:	d01a      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800652a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800652e:	d822      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006538:	d007      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800653a:	e01c      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800653c:	4b1a      	ldr	r3, [pc, #104]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800653e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006540:	4a19      	ldr	r2, [pc, #100]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006546:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006548:	e01e      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800654a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654e:	3308      	adds	r3, #8
 8006550:	2100      	movs	r1, #0
 8006552:	4618      	mov	r0, r3
 8006554:	f001 fb04 	bl	8007b60 <RCCEx_PLL2_Config>
 8006558:	4603      	mov	r3, r0
 800655a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800655e:	e013      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006564:	3328      	adds	r3, #40	@ 0x28
 8006566:	2100      	movs	r1, #0
 8006568:	4618      	mov	r0, r3
 800656a:	f001 fbab 	bl	8007cc4 <RCCEx_PLL3_Config>
 800656e:	4603      	mov	r3, r0
 8006570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006574:	e008      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800657c:	e004      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800657e:	bf00      	nop
 8006580:	e002      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006582:	bf00      	nop
 8006584:	e000      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10d      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006590:	4b05      	ldr	r3, [pc, #20]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006594:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80065a0:	4a01      	ldr	r2, [pc, #4]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065a2:	430b      	orrs	r3, r1
 80065a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80065a6:	e005      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80065a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80065b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80065c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80065c4:	2300      	movs	r3, #0
 80065c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80065ca:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4313      	orrs	r3, r2
 80065d2:	d03a      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80065d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065da:	2b30      	cmp	r3, #48	@ 0x30
 80065dc:	d01f      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80065de:	2b30      	cmp	r3, #48	@ 0x30
 80065e0:	d819      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d00c      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	d815      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d019      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80065ee:	2b10      	cmp	r3, #16
 80065f0:	d111      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f2:	4baa      	ldr	r3, [pc, #680]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f6:	4aa9      	ldr	r2, [pc, #676]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80065fe:	e011      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006604:	3308      	adds	r3, #8
 8006606:	2102      	movs	r1, #2
 8006608:	4618      	mov	r0, r3
 800660a:	f001 faa9 	bl	8007b60 <RCCEx_PLL2_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006614:	e006      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800661c:	e002      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800661e:	bf00      	nop
 8006620:	e000      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006624:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800662c:	4b9b      	ldr	r3, [pc, #620]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800662e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006630:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800663a:	4a98      	ldr	r2, [pc, #608]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800663c:	430b      	orrs	r3, r1
 800663e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006640:	e003      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006642:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006646:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800664a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006656:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800665a:	2300      	movs	r3, #0
 800665c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006660:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006664:	460b      	mov	r3, r1
 8006666:	4313      	orrs	r3, r2
 8006668:	d051      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800666a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006670:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006674:	d035      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006676:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800667a:	d82e      	bhi.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x436>
 800667c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006680:	d031      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006682:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006686:	d828      	bhi.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800668c:	d01a      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800668e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006692:	d822      	bhi.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006694:	2b00      	cmp	r3, #0
 8006696:	d003      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800669c:	d007      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800669e:	e01c      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a0:	4b7e      	ldr	r3, [pc, #504]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a4:	4a7d      	ldr	r2, [pc, #500]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80066ac:	e01c      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b2:	3308      	adds	r3, #8
 80066b4:	2100      	movs	r1, #0
 80066b6:	4618      	mov	r0, r3
 80066b8:	f001 fa52 	bl	8007b60 <RCCEx_PLL2_Config>
 80066bc:	4603      	mov	r3, r0
 80066be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80066c2:	e011      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c8:	3328      	adds	r3, #40	@ 0x28
 80066ca:	2100      	movs	r1, #0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f001 faf9 	bl	8007cc4 <RCCEx_PLL3_Config>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80066d8:	e006      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066e0:	e002      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80066e2:	bf00      	nop
 80066e4:	e000      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80066e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066f0:	4b6a      	ldr	r3, [pc, #424]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80066f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066fe:	4a67      	ldr	r2, [pc, #412]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006700:	430b      	orrs	r3, r1
 8006702:	6513      	str	r3, [r2, #80]	@ 0x50
 8006704:	e003      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006706:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800670a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800670e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800671a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800671e:	2300      	movs	r3, #0
 8006720:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006724:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006728:	460b      	mov	r3, r1
 800672a:	4313      	orrs	r3, r2
 800672c:	d053      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800672e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006738:	d033      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800673a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800673e:	d82c      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006740:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006744:	d02f      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006746:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800674a:	d826      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800674c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006750:	d02b      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006752:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006756:	d820      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006758:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800675c:	d012      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800675e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006762:	d81a      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006764:	2b00      	cmp	r3, #0
 8006766:	d022      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800676c:	d115      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800676e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006772:	3308      	adds	r3, #8
 8006774:	2101      	movs	r1, #1
 8006776:	4618      	mov	r0, r3
 8006778:	f001 f9f2 	bl	8007b60 <RCCEx_PLL2_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006782:	e015      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006788:	3328      	adds	r3, #40	@ 0x28
 800678a:	2101      	movs	r1, #1
 800678c:	4618      	mov	r0, r3
 800678e:	f001 fa99 	bl	8007cc4 <RCCEx_PLL3_Config>
 8006792:	4603      	mov	r3, r0
 8006794:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006798:	e00a      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067a0:	e006      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80067a2:	bf00      	nop
 80067a4:	e004      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80067a6:	bf00      	nop
 80067a8:	e002      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80067aa:	bf00      	nop
 80067ac:	e000      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80067ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80067b8:	4b38      	ldr	r3, [pc, #224]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80067c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067c6:	4a35      	ldr	r2, [pc, #212]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80067cc:	e003      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80067d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80067e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067e6:	2300      	movs	r3, #0
 80067e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80067ec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80067f0:	460b      	mov	r3, r1
 80067f2:	4313      	orrs	r3, r2
 80067f4:	d058      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80067f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80067fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006802:	d033      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006804:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006808:	d82c      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800680a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800680e:	d02f      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006814:	d826      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006816:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800681a:	d02b      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800681c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006820:	d820      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006822:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006826:	d012      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800682c:	d81a      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d022      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006836:	d115      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683c:	3308      	adds	r3, #8
 800683e:	2101      	movs	r1, #1
 8006840:	4618      	mov	r0, r3
 8006842:	f001 f98d 	bl	8007b60 <RCCEx_PLL2_Config>
 8006846:	4603      	mov	r3, r0
 8006848:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800684c:	e015      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006852:	3328      	adds	r3, #40	@ 0x28
 8006854:	2101      	movs	r1, #1
 8006856:	4618      	mov	r0, r3
 8006858:	f001 fa34 	bl	8007cc4 <RCCEx_PLL3_Config>
 800685c:	4603      	mov	r3, r0
 800685e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006862:	e00a      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800686a:	e006      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800686c:	bf00      	nop
 800686e:	e004      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006870:	bf00      	nop
 8006872:	e002      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006874:	bf00      	nop
 8006876:	e000      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800687a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10e      	bne.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006882:	4b06      	ldr	r3, [pc, #24]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006886:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800688a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006892:	4a02      	ldr	r2, [pc, #8]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006894:	430b      	orrs	r3, r1
 8006896:	6593      	str	r3, [r2, #88]	@ 0x58
 8006898:	e006      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800689a:	bf00      	nop
 800689c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80068b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068b8:	2300      	movs	r3, #0
 80068ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80068be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4313      	orrs	r3, r2
 80068c6:	d037      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068d2:	d00e      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80068d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068d8:	d816      	bhi.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d018      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80068de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068e2:	d111      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068e4:	4bc4      	ldr	r3, [pc, #784]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e8:	4ac3      	ldr	r2, [pc, #780]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80068f0:	e00f      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f6:	3308      	adds	r3, #8
 80068f8:	2101      	movs	r1, #1
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 f930 	bl	8007b60 <RCCEx_PLL2_Config>
 8006900:	4603      	mov	r3, r0
 8006902:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006906:	e004      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800690e:	e000      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006912:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10a      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800691a:	4bb7      	ldr	r3, [pc, #732]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800691c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800691e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006928:	4ab3      	ldr	r2, [pc, #716]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800692a:	430b      	orrs	r3, r1
 800692c:	6513      	str	r3, [r2, #80]	@ 0x50
 800692e:	e003      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006934:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006944:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006948:	2300      	movs	r3, #0
 800694a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800694e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006952:	460b      	mov	r3, r1
 8006954:	4313      	orrs	r3, r2
 8006956:	d039      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800695e:	2b03      	cmp	r3, #3
 8006960:	d81c      	bhi.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006962:	a201      	add	r2, pc, #4	@ (adr r2, 8006968 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006968:	080069a5 	.word	0x080069a5
 800696c:	08006979 	.word	0x08006979
 8006970:	08006987 	.word	0x08006987
 8006974:	080069a5 	.word	0x080069a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006978:	4b9f      	ldr	r3, [pc, #636]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697c:	4a9e      	ldr	r2, [pc, #632]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800697e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006984:	e00f      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698a:	3308      	adds	r3, #8
 800698c:	2102      	movs	r1, #2
 800698e:	4618      	mov	r0, r3
 8006990:	f001 f8e6 	bl	8007b60 <RCCEx_PLL2_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800699a:	e004      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069a2:	e000      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80069a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80069ae:	4b92      	ldr	r3, [pc, #584]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069b2:	f023 0103 	bic.w	r1, r3, #3
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069bc:	4a8e      	ldr	r2, [pc, #568]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069be:	430b      	orrs	r3, r1
 80069c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069c2:	e003      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80069d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069dc:	2300      	movs	r3, #0
 80069de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f000 8099 	beq.w	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069ee:	4b83      	ldr	r3, [pc, #524]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a82      	ldr	r2, [pc, #520]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80069f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069fa:	f7fc fa05 	bl	8002e08 <HAL_GetTick>
 80069fe:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a02:	e00b      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a04:	f7fc fa00 	bl	8002e08 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b64      	cmp	r3, #100	@ 0x64
 8006a12:	d903      	bls.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a1a:	e005      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a1c:	4b77      	ldr	r3, [pc, #476]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0ed      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006a28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d173      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006a30:	4b71      	ldr	r3, [pc, #452]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a3c:	4053      	eors	r3, r2
 8006a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d015      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a46:	4b6c      	ldr	r3, [pc, #432]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a4e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a52:	4b69      	ldr	r3, [pc, #420]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a56:	4a68      	ldr	r2, [pc, #416]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a5c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a5e:	4b66      	ldr	r3, [pc, #408]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a62:	4a65      	ldr	r2, [pc, #404]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a68:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006a6a:	4a63      	ldr	r2, [pc, #396]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a70:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a7e:	d118      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a80:	f7fc f9c2 	bl	8002e08 <HAL_GetTick>
 8006a84:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a88:	e00d      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a8a:	f7fc f9bd 	bl	8002e08 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006a94:	1ad2      	subs	r2, r2, r3
 8006a96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d903      	bls.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006aa4:	e005      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006aa6:	4b54      	ldr	r3, [pc, #336]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0eb      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006ab2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d129      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aca:	d10e      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006acc:	4b4a      	ldr	r3, [pc, #296]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006adc:	091a      	lsrs	r2, r3, #4
 8006ade:	4b48      	ldr	r3, [pc, #288]	@ (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	4a45      	ldr	r2, [pc, #276]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	6113      	str	r3, [r2, #16]
 8006ae8:	e005      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006aea:	4b43      	ldr	r3, [pc, #268]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	4a42      	ldr	r2, [pc, #264]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006af0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006af4:	6113      	str	r3, [r2, #16]
 8006af6:	4b40      	ldr	r3, [pc, #256]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006af8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006afe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b06:	4a3c      	ldr	r2, [pc, #240]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b0c:	e008      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006b16:	e003      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f002 0301 	and.w	r3, r2, #1
 8006b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b30:	2300      	movs	r3, #0
 8006b32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006b36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	f000 808f 	beq.w	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b48:	2b28      	cmp	r3, #40	@ 0x28
 8006b4a:	d871      	bhi.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b52:	bf00      	nop
 8006b54:	08006c39 	.word	0x08006c39
 8006b58:	08006c31 	.word	0x08006c31
 8006b5c:	08006c31 	.word	0x08006c31
 8006b60:	08006c31 	.word	0x08006c31
 8006b64:	08006c31 	.word	0x08006c31
 8006b68:	08006c31 	.word	0x08006c31
 8006b6c:	08006c31 	.word	0x08006c31
 8006b70:	08006c31 	.word	0x08006c31
 8006b74:	08006c05 	.word	0x08006c05
 8006b78:	08006c31 	.word	0x08006c31
 8006b7c:	08006c31 	.word	0x08006c31
 8006b80:	08006c31 	.word	0x08006c31
 8006b84:	08006c31 	.word	0x08006c31
 8006b88:	08006c31 	.word	0x08006c31
 8006b8c:	08006c31 	.word	0x08006c31
 8006b90:	08006c31 	.word	0x08006c31
 8006b94:	08006c1b 	.word	0x08006c1b
 8006b98:	08006c31 	.word	0x08006c31
 8006b9c:	08006c31 	.word	0x08006c31
 8006ba0:	08006c31 	.word	0x08006c31
 8006ba4:	08006c31 	.word	0x08006c31
 8006ba8:	08006c31 	.word	0x08006c31
 8006bac:	08006c31 	.word	0x08006c31
 8006bb0:	08006c31 	.word	0x08006c31
 8006bb4:	08006c39 	.word	0x08006c39
 8006bb8:	08006c31 	.word	0x08006c31
 8006bbc:	08006c31 	.word	0x08006c31
 8006bc0:	08006c31 	.word	0x08006c31
 8006bc4:	08006c31 	.word	0x08006c31
 8006bc8:	08006c31 	.word	0x08006c31
 8006bcc:	08006c31 	.word	0x08006c31
 8006bd0:	08006c31 	.word	0x08006c31
 8006bd4:	08006c39 	.word	0x08006c39
 8006bd8:	08006c31 	.word	0x08006c31
 8006bdc:	08006c31 	.word	0x08006c31
 8006be0:	08006c31 	.word	0x08006c31
 8006be4:	08006c31 	.word	0x08006c31
 8006be8:	08006c31 	.word	0x08006c31
 8006bec:	08006c31 	.word	0x08006c31
 8006bf0:	08006c31 	.word	0x08006c31
 8006bf4:	08006c39 	.word	0x08006c39
 8006bf8:	58024400 	.word	0x58024400
 8006bfc:	58024800 	.word	0x58024800
 8006c00:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c08:	3308      	adds	r3, #8
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 ffa7 	bl	8007b60 <RCCEx_PLL2_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006c18:	e00f      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1e:	3328      	adds	r3, #40	@ 0x28
 8006c20:	2101      	movs	r1, #1
 8006c22:	4618      	mov	r0, r3
 8006c24:	f001 f84e 	bl	8007cc4 <RCCEx_PLL3_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006c2e:	e004      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c36:	e000      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006c42:	4bbf      	ldr	r3, [pc, #764]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c46:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c50:	4abb      	ldr	r2, [pc, #748]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c52:	430b      	orrs	r3, r1
 8006c54:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c56:	e003      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f002 0302 	and.w	r3, r2, #2
 8006c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c70:	2300      	movs	r3, #0
 8006c72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c76:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	d041      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c86:	2b05      	cmp	r3, #5
 8006c88:	d824      	bhi.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006cdd 	.word	0x08006cdd
 8006c94:	08006ca9 	.word	0x08006ca9
 8006c98:	08006cbf 	.word	0x08006cbf
 8006c9c:	08006cdd 	.word	0x08006cdd
 8006ca0:	08006cdd 	.word	0x08006cdd
 8006ca4:	08006cdd 	.word	0x08006cdd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	3308      	adds	r3, #8
 8006cae:	2101      	movs	r1, #1
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 ff55 	bl	8007b60 <RCCEx_PLL2_Config>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006cbc:	e00f      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc2:	3328      	adds	r3, #40	@ 0x28
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 fffc 	bl	8007cc4 <RCCEx_PLL3_Config>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006cd2:	e004      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cda:	e000      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10a      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ce6:	4b96      	ldr	r3, [pc, #600]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cea:	f023 0107 	bic.w	r1, r3, #7
 8006cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cf4:	4a92      	ldr	r2, [pc, #584]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cf6:	430b      	orrs	r3, r1
 8006cf8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cfa:	e003      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f002 0304 	and.w	r3, r2, #4
 8006d10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d14:	2300      	movs	r3, #0
 8006d16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d1a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4313      	orrs	r3, r2
 8006d22:	d044      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d2c:	2b05      	cmp	r3, #5
 8006d2e:	d825      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006d30:	a201      	add	r2, pc, #4	@ (adr r2, 8006d38 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006d85 	.word	0x08006d85
 8006d3c:	08006d51 	.word	0x08006d51
 8006d40:	08006d67 	.word	0x08006d67
 8006d44:	08006d85 	.word	0x08006d85
 8006d48:	08006d85 	.word	0x08006d85
 8006d4c:	08006d85 	.word	0x08006d85
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d54:	3308      	adds	r3, #8
 8006d56:	2101      	movs	r1, #1
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 ff01 	bl	8007b60 <RCCEx_PLL2_Config>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006d64:	e00f      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6a:	3328      	adds	r3, #40	@ 0x28
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 ffa8 	bl	8007cc4 <RCCEx_PLL3_Config>
 8006d74:	4603      	mov	r3, r0
 8006d76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006d7a:	e004      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d82:	e000      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10b      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d92:	f023 0107 	bic.w	r1, r3, #7
 8006d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9e:	4a68      	ldr	r2, [pc, #416]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006da0:	430b      	orrs	r3, r1
 8006da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006da4:	e003      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006daa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	f002 0320 	and.w	r3, r2, #32
 8006dba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006dc4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	d055      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dda:	d033      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006de0:	d82c      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006de6:	d02f      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dec:	d826      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006dee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006df2:	d02b      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006df4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006df8:	d820      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dfe:	d012      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006e00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e04:	d81a      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d022      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006e0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e0e:	d115      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e14:	3308      	adds	r3, #8
 8006e16:	2100      	movs	r1, #0
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fea1 	bl	8007b60 <RCCEx_PLL2_Config>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006e24:	e015      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2a:	3328      	adds	r3, #40	@ 0x28
 8006e2c:	2102      	movs	r1, #2
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 ff48 	bl	8007cc4 <RCCEx_PLL3_Config>
 8006e34:	4603      	mov	r3, r0
 8006e36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006e3a:	e00a      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e42:	e006      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006e44:	bf00      	nop
 8006e46:	e004      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006e48:	bf00      	nop
 8006e4a:	e002      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006e4c:	bf00      	nop
 8006e4e:	e000      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10b      	bne.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e5a:	4b39      	ldr	r3, [pc, #228]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e5e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e6a:	4a35      	ldr	r2, [pc, #212]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e70:	e003      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006e86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e90:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006e94:	460b      	mov	r3, r1
 8006e96:	4313      	orrs	r3, r2
 8006e98:	d058      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ea2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006ea6:	d033      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006ea8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006eac:	d82c      	bhi.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb2:	d02f      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb8:	d826      	bhi.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006eba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ebe:	d02b      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006ec0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ec4:	d820      	bhi.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006ec6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006eca:	d012      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006ecc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ed0:	d81a      	bhi.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d022      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eda:	d115      	bne.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 fe3b 	bl	8007b60 <RCCEx_PLL2_Config>
 8006eea:	4603      	mov	r3, r0
 8006eec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ef0:	e015      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef6:	3328      	adds	r3, #40	@ 0x28
 8006ef8:	2102      	movs	r1, #2
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fee2 	bl	8007cc4 <RCCEx_PLL3_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f06:	e00a      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f0e:	e006      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006f10:	bf00      	nop
 8006f12:	e004      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006f14:	bf00      	nop
 8006f16:	e002      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006f18:	bf00      	nop
 8006f1a:	e000      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10e      	bne.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f26:	4b06      	ldr	r3, [pc, #24]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f2a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f36:	4a02      	ldr	r2, [pc, #8]	@ (8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f3c:	e006      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006f3e:	bf00      	nop
 8006f40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f54:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006f58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f62:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006f66:	460b      	mov	r3, r1
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	d055      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f74:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006f78:	d033      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006f7a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006f7e:	d82c      	bhi.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006f80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f84:	d02f      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006f86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f8a:	d826      	bhi.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006f8c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f90:	d02b      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006f92:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f96:	d820      	bhi.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006f98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f9c:	d012      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006f9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fa2:	d81a      	bhi.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d022      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006fa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fac:	d115      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fdd2 	bl	8007b60 <RCCEx_PLL2_Config>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006fc2:	e015      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc8:	3328      	adds	r3, #40	@ 0x28
 8006fca:	2102      	movs	r1, #2
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fe79 	bl	8007cc4 <RCCEx_PLL3_Config>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006fd8:	e00a      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006fe0:	e006      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006fe2:	bf00      	nop
 8006fe4:	e004      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006fe6:	bf00      	nop
 8006fe8:	e002      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006fea:	bf00      	nop
 8006fec:	e000      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10b      	bne.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ff8:	4ba0      	ldr	r3, [pc, #640]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007004:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007008:	4a9c      	ldr	r2, [pc, #624]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800700a:	430b      	orrs	r3, r1
 800700c:	6593      	str	r3, [r2, #88]	@ 0x58
 800700e:	e003      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007010:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007014:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007020:	f002 0308 	and.w	r3, r2, #8
 8007024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007028:	2300      	movs	r3, #0
 800702a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800702e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007032:	460b      	mov	r3, r1
 8007034:	4313      	orrs	r3, r2
 8007036:	d01e      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007044:	d10c      	bne.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704a:	3328      	adds	r3, #40	@ 0x28
 800704c:	2102      	movs	r1, #2
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fe38 	bl	8007cc4 <RCCEx_PLL3_Config>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007060:	4b86      	ldr	r3, [pc, #536]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007064:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007070:	4a82      	ldr	r2, [pc, #520]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007072:	430b      	orrs	r3, r1
 8007074:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f002 0310 	and.w	r3, r2, #16
 8007082:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007086:	2300      	movs	r3, #0
 8007088:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800708c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007090:	460b      	mov	r3, r1
 8007092:	4313      	orrs	r3, r2
 8007094:	d01e      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800709e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070a2:	d10c      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80070a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a8:	3328      	adds	r3, #40	@ 0x28
 80070aa:	2102      	movs	r1, #2
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fe09 	bl	8007cc4 <RCCEx_PLL3_Config>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070be:	4b6f      	ldr	r3, [pc, #444]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80070c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070ce:	4a6b      	ldr	r2, [pc, #428]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070d0:	430b      	orrs	r3, r1
 80070d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80070e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070e2:	2300      	movs	r3, #0
 80070e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070e6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80070ea:	460b      	mov	r3, r1
 80070ec:	4313      	orrs	r3, r2
 80070ee:	d03e      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80070f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80070f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070fc:	d022      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80070fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007102:	d81b      	bhi.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800710c:	d00b      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800710e:	e015      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007114:	3308      	adds	r3, #8
 8007116:	2100      	movs	r1, #0
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fd21 	bl	8007b60 <RCCEx_PLL2_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007124:	e00f      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712a:	3328      	adds	r3, #40	@ 0x28
 800712c:	2102      	movs	r1, #2
 800712e:	4618      	mov	r0, r3
 8007130:	f000 fdc8 	bl	8007cc4 <RCCEx_PLL3_Config>
 8007134:	4603      	mov	r3, r0
 8007136:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800713a:	e004      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007142:	e000      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007146:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10b      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800714e:	4b4b      	ldr	r3, [pc, #300]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007152:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800715e:	4a47      	ldr	r2, [pc, #284]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007160:	430b      	orrs	r3, r1
 8007162:	6593      	str	r3, [r2, #88]	@ 0x58
 8007164:	e003      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007166:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800716a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800716e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800717a:	673b      	str	r3, [r7, #112]	@ 0x70
 800717c:	2300      	movs	r3, #0
 800717e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007180:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007184:	460b      	mov	r3, r1
 8007186:	4313      	orrs	r3, r2
 8007188:	d03b      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800718a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007192:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007196:	d01f      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007198:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800719c:	d818      	bhi.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800719e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071a2:	d003      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80071a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071a8:	d007      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80071aa:	e011      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ac:	4b33      	ldr	r3, [pc, #204]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b0:	4a32      	ldr	r2, [pc, #200]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80071b8:	e00f      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071be:	3328      	adds	r3, #40	@ 0x28
 80071c0:	2101      	movs	r1, #1
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fd7e 	bl	8007cc4 <RCCEx_PLL3_Config>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80071ce:	e004      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071d6:	e000      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80071d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10b      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071e2:	4b26      	ldr	r3, [pc, #152]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80071ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071f2:	4a22      	ldr	r2, [pc, #136]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071f4:	430b      	orrs	r3, r1
 80071f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80071f8:	e003      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800720e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007210:	2300      	movs	r3, #0
 8007212:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007214:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007218:	460b      	mov	r3, r1
 800721a:	4313      	orrs	r3, r2
 800721c:	d034      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800721e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800722c:	d007      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800722e:	e011      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007230:	4b12      	ldr	r3, [pc, #72]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007234:	4a11      	ldr	r2, [pc, #68]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800723a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800723c:	e00e      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800723e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007242:	3308      	adds	r3, #8
 8007244:	2102      	movs	r1, #2
 8007246:	4618      	mov	r0, r3
 8007248:	f000 fc8a 	bl	8007b60 <RCCEx_PLL2_Config>
 800724c:	4603      	mov	r3, r0
 800724e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007252:	e003      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800725a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800725c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10d      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007264:	4b05      	ldr	r3, [pc, #20]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007268:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800726c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007272:	4a02      	ldr	r2, [pc, #8]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007274:	430b      	orrs	r3, r1
 8007276:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007278:	e006      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800727a:	bf00      	nop
 800727c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007284:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007294:	663b      	str	r3, [r7, #96]	@ 0x60
 8007296:	2300      	movs	r3, #0
 8007298:	667b      	str	r3, [r7, #100]	@ 0x64
 800729a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800729e:	460b      	mov	r3, r1
 80072a0:	4313      	orrs	r3, r2
 80072a2:	d00c      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80072a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a8:	3328      	adds	r3, #40	@ 0x28
 80072aa:	2102      	movs	r1, #2
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 fd09 	bl	8007cc4 <RCCEx_PLL3_Config>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80072be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80072ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072cc:	2300      	movs	r3, #0
 80072ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072d0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80072d4:	460b      	mov	r3, r1
 80072d6:	4313      	orrs	r3, r2
 80072d8:	d036      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80072da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072e4:	d018      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80072e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072ea:	d811      	bhi.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80072ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072f0:	d014      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80072f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072f6:	d80b      	bhi.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d011      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80072fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007300:	d106      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007302:	4bb7      	ldr	r3, [pc, #732]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007306:	4ab6      	ldr	r2, [pc, #728]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800730c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800730e:	e008      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007316:	e004      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007318:	bf00      	nop
 800731a:	e002      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800731c:	bf00      	nop
 800731e:	e000      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007322:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10a      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800732a:	4bad      	ldr	r3, [pc, #692]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800732c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800732e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007336:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007338:	4aa9      	ldr	r2, [pc, #676]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800733a:	430b      	orrs	r3, r1
 800733c:	6553      	str	r3, [r2, #84]	@ 0x54
 800733e:	e003      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007344:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007354:	653b      	str	r3, [r7, #80]	@ 0x50
 8007356:	2300      	movs	r3, #0
 8007358:	657b      	str	r3, [r7, #84]	@ 0x54
 800735a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800735e:	460b      	mov	r3, r1
 8007360:	4313      	orrs	r3, r2
 8007362:	d009      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007364:	4b9e      	ldr	r3, [pc, #632]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007368:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800736c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007372:	4a9b      	ldr	r2, [pc, #620]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007374:	430b      	orrs	r3, r1
 8007376:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007380:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007384:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007386:	2300      	movs	r3, #0
 8007388:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800738a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800738e:	460b      	mov	r3, r1
 8007390:	4313      	orrs	r3, r2
 8007392:	d009      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007394:	4b92      	ldr	r3, [pc, #584]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007398:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800739c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073a2:	4a8f      	ldr	r2, [pc, #572]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073a4:	430b      	orrs	r3, r1
 80073a6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80073a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80073b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80073b6:	2300      	movs	r3, #0
 80073b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80073be:	460b      	mov	r3, r1
 80073c0:	4313      	orrs	r3, r2
 80073c2:	d00e      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073c4:	4b86      	ldr	r3, [pc, #536]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	4a85      	ldr	r2, [pc, #532]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80073ce:	6113      	str	r3, [r2, #16]
 80073d0:	4b83      	ldr	r3, [pc, #524]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073d2:	6919      	ldr	r1, [r3, #16]
 80073d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80073dc:	4a80      	ldr	r2, [pc, #512]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073de:	430b      	orrs	r3, r1
 80073e0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80073e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ea:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80073ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073f0:	2300      	movs	r3, #0
 80073f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80073f8:	460b      	mov	r3, r1
 80073fa:	4313      	orrs	r3, r2
 80073fc:	d009      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80073fe:	4b78      	ldr	r3, [pc, #480]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007402:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800740c:	4a74      	ldr	r2, [pc, #464]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800740e:	430b      	orrs	r3, r1
 8007410:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800741e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007420:	2300      	movs	r3, #0
 8007422:	637b      	str	r3, [r7, #52]	@ 0x34
 8007424:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007428:	460b      	mov	r3, r1
 800742a:	4313      	orrs	r3, r2
 800742c:	d00a      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800742e:	4b6c      	ldr	r3, [pc, #432]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007432:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800743e:	4a68      	ldr	r2, [pc, #416]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007440:	430b      	orrs	r3, r1
 8007442:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744c:	2100      	movs	r1, #0
 800744e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007456:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800745a:	460b      	mov	r3, r1
 800745c:	4313      	orrs	r3, r2
 800745e:	d011      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007464:	3308      	adds	r3, #8
 8007466:	2100      	movs	r1, #0
 8007468:	4618      	mov	r0, r3
 800746a:	f000 fb79 	bl	8007b60 <RCCEx_PLL2_Config>
 800746e:	4603      	mov	r3, r0
 8007470:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007474:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007480:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	2100      	movs	r1, #0
 800748e:	6239      	str	r1, [r7, #32]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	627b      	str	r3, [r7, #36]	@ 0x24
 8007496:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800749a:	460b      	mov	r3, r1
 800749c:	4313      	orrs	r3, r2
 800749e:	d011      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a4:	3308      	adds	r3, #8
 80074a6:	2101      	movs	r1, #1
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 fb59 	bl	8007b60 <RCCEx_PLL2_Config>
 80074ae:	4603      	mov	r3, r0
 80074b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80074b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80074c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074cc:	2100      	movs	r1, #0
 80074ce:	61b9      	str	r1, [r7, #24]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	61fb      	str	r3, [r7, #28]
 80074d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80074da:	460b      	mov	r3, r1
 80074dc:	4313      	orrs	r3, r2
 80074de:	d011      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e4:	3308      	adds	r3, #8
 80074e6:	2102      	movs	r1, #2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fb39 	bl	8007b60 <RCCEx_PLL2_Config>
 80074ee:	4603      	mov	r3, r0
 80074f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80074f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007500:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	2100      	movs	r1, #0
 800750e:	6139      	str	r1, [r7, #16]
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	617b      	str	r3, [r7, #20]
 8007516:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800751a:	460b      	mov	r3, r1
 800751c:	4313      	orrs	r3, r2
 800751e:	d011      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007524:	3328      	adds	r3, #40	@ 0x28
 8007526:	2100      	movs	r1, #0
 8007528:	4618      	mov	r0, r3
 800752a:	f000 fbcb 	bl	8007cc4 <RCCEx_PLL3_Config>
 800752e:	4603      	mov	r3, r0
 8007530:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007534:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007540:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754c:	2100      	movs	r1, #0
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	f003 0310 	and.w	r3, r3, #16
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800755a:	460b      	mov	r3, r1
 800755c:	4313      	orrs	r3, r2
 800755e:	d011      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007564:	3328      	adds	r3, #40	@ 0x28
 8007566:	2101      	movs	r1, #1
 8007568:	4618      	mov	r0, r3
 800756a:	f000 fbab 	bl	8007cc4 <RCCEx_PLL3_Config>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007574:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800757c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007580:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758c:	2100      	movs	r1, #0
 800758e:	6039      	str	r1, [r7, #0]
 8007590:	f003 0320 	and.w	r3, r3, #32
 8007594:	607b      	str	r3, [r7, #4]
 8007596:	e9d7 1200 	ldrd	r1, r2, [r7]
 800759a:	460b      	mov	r3, r1
 800759c:	4313      	orrs	r3, r2
 800759e:	d011      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a4:	3328      	adds	r3, #40	@ 0x28
 80075a6:	2102      	movs	r1, #2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fb8b 	bl	8007cc4 <RCCEx_PLL3_Config>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80075b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80075c4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	e000      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80075d8:	46bd      	mov	sp, r7
 80075da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075de:	bf00      	nop
 80075e0:	58024400 	.word	0x58024400

080075e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80075e8:	f7fe fe00 	bl	80061ec <HAL_RCC_GetHCLKFreq>
 80075ec:	4602      	mov	r2, r0
 80075ee:	4b06      	ldr	r3, [pc, #24]	@ (8007608 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	091b      	lsrs	r3, r3, #4
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	4904      	ldr	r1, [pc, #16]	@ (800760c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80075fa:	5ccb      	ldrb	r3, [r1, r3]
 80075fc:	f003 031f 	and.w	r3, r3, #31
 8007600:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007604:	4618      	mov	r0, r3
 8007606:	bd80      	pop	{r7, pc}
 8007608:	58024400 	.word	0x58024400
 800760c:	08012cc4 	.word	0x08012cc4

08007610 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007610:	b480      	push	{r7}
 8007612:	b089      	sub	sp, #36	@ 0x24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007618:	4ba1      	ldr	r3, [pc, #644]	@ (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800761a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761c:	f003 0303 	and.w	r3, r3, #3
 8007620:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007622:	4b9f      	ldr	r3, [pc, #636]	@ (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007626:	0b1b      	lsrs	r3, r3, #12
 8007628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800762c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800762e:	4b9c      	ldr	r3, [pc, #624]	@ (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007632:	091b      	lsrs	r3, r3, #4
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800763a:	4b99      	ldr	r3, [pc, #612]	@ (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800763c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800763e:	08db      	lsrs	r3, r3, #3
 8007640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	fb02 f303 	mul.w	r3, r2, r3
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007652:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 8111 	beq.w	8007880 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2b02      	cmp	r3, #2
 8007662:	f000 8083 	beq.w	800776c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	2b02      	cmp	r3, #2
 800766a:	f200 80a1 	bhi.w	80077b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d056      	beq.n	8007728 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800767a:	e099      	b.n	80077b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800767c:	4b88      	ldr	r3, [pc, #544]	@ (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0320 	and.w	r3, r3, #32
 8007684:	2b00      	cmp	r3, #0
 8007686:	d02d      	beq.n	80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007688:	4b85      	ldr	r3, [pc, #532]	@ (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	08db      	lsrs	r3, r3, #3
 800768e:	f003 0303 	and.w	r3, r3, #3
 8007692:	4a84      	ldr	r2, [pc, #528]	@ (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007694:	fa22 f303 	lsr.w	r3, r2, r3
 8007698:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	ee07 3a90 	vmov	s15, r3
 80076a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b2:	4b7b      	ldr	r3, [pc, #492]	@ (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076e2:	e087      	b.n	80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80076f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f6:	4b6a      	ldr	r3, [pc, #424]	@ (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007706:	ed97 6a03 	vldr	s12, [r7, #12]
 800770a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800770e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800771a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800771e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007726:	e065      	b.n	80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007732:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80078b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773a:	4b59      	ldr	r3, [pc, #356]	@ (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800773c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774a:	ed97 6a03 	vldr	s12, [r7, #12]
 800774e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800775e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800776a:	e043      	b.n	80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	ee07 3a90 	vmov	s15, r3
 8007772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007776:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800777a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800777e:	4b48      	ldr	r3, [pc, #288]	@ (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007792:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ae:	e021      	b.n	80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80078b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80077be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c2:	4b37      	ldr	r3, [pc, #220]	@ (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ca:	ee07 3a90 	vmov	s15, r3
 80077ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80077f4:	4b2a      	ldr	r3, [pc, #168]	@ (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f8:	0a5b      	lsrs	r3, r3, #9
 80077fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007806:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800780a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800780e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800781a:	ee17 2a90 	vmov	r2, s15
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007822:	4b1f      	ldr	r3, [pc, #124]	@ (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007826:	0c1b      	lsrs	r3, r3, #16
 8007828:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800782c:	ee07 3a90 	vmov	s15, r3
 8007830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007834:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007838:	ee37 7a87 	vadd.f32	s14, s15, s14
 800783c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007848:	ee17 2a90 	vmov	r2, s15
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007850:	4b13      	ldr	r3, [pc, #76]	@ (80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007854:	0e1b      	lsrs	r3, r3, #24
 8007856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007862:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800786a:	edd7 6a07 	vldr	s13, [r7, #28]
 800786e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007876:	ee17 2a90 	vmov	r2, s15
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800787e:	e008      	b.n	8007892 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	609a      	str	r2, [r3, #8]
}
 8007892:	bf00      	nop
 8007894:	3724      	adds	r7, #36	@ 0x24
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	58024400 	.word	0x58024400
 80078a4:	03d09000 	.word	0x03d09000
 80078a8:	46000000 	.word	0x46000000
 80078ac:	4c742400 	.word	0x4c742400
 80078b0:	4a742400 	.word	0x4a742400
 80078b4:	4bbebc20 	.word	0x4bbebc20

080078b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b089      	sub	sp, #36	@ 0x24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078c0:	4ba1      	ldr	r3, [pc, #644]	@ (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c4:	f003 0303 	and.w	r3, r3, #3
 80078c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80078ca:	4b9f      	ldr	r3, [pc, #636]	@ (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ce:	0d1b      	lsrs	r3, r3, #20
 80078d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80078d6:	4b9c      	ldr	r3, [pc, #624]	@ (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078da:	0a1b      	lsrs	r3, r3, #8
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80078e2:	4b99      	ldr	r3, [pc, #612]	@ (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078e6:	08db      	lsrs	r3, r3, #3
 80078e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	fb02 f303 	mul.w	r3, r2, r3
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 8111 	beq.w	8007b28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	2b02      	cmp	r3, #2
 800790a:	f000 8083 	beq.w	8007a14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	2b02      	cmp	r3, #2
 8007912:	f200 80a1 	bhi.w	8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d056      	beq.n	80079d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007922:	e099      	b.n	8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007924:	4b88      	ldr	r3, [pc, #544]	@ (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0320 	and.w	r3, r3, #32
 800792c:	2b00      	cmp	r3, #0
 800792e:	d02d      	beq.n	800798c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007930:	4b85      	ldr	r3, [pc, #532]	@ (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	08db      	lsrs	r3, r3, #3
 8007936:	f003 0303 	and.w	r3, r3, #3
 800793a:	4a84      	ldr	r2, [pc, #528]	@ (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800793c:	fa22 f303 	lsr.w	r3, r2, r3
 8007940:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	ee07 3a90 	vmov	s15, r3
 8007948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795a:	4b7b      	ldr	r3, [pc, #492]	@ (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800795c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796a:	ed97 6a03 	vldr	s12, [r7, #12]
 800796e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800797e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007986:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800798a:	e087      	b.n	8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007996:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007b54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800799a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800799e:	4b6a      	ldr	r3, [pc, #424]	@ (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80079b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ce:	e065      	b.n	8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007b58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e2:	4b59      	ldr	r3, [pc, #356]	@ (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a12:	e043      	b.n	8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	ee07 3a90 	vmov	s15, r3
 8007a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a26:	4b48      	ldr	r3, [pc, #288]	@ (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a2e:	ee07 3a90 	vmov	s15, r3
 8007a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a56:	e021      	b.n	8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007b58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a6a:	4b37      	ldr	r3, [pc, #220]	@ (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a72:	ee07 3a90 	vmov	s15, r3
 8007a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa0:	0a5b      	lsrs	r3, r3, #9
 8007aa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aa6:	ee07 3a90 	vmov	s15, r3
 8007aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ac2:	ee17 2a90 	vmov	r2, s15
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007aca:	4b1f      	ldr	r3, [pc, #124]	@ (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ace:	0c1b      	lsrs	r3, r3, #16
 8007ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ad4:	ee07 3a90 	vmov	s15, r3
 8007ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007adc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ae0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ae4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007af0:	ee17 2a90 	vmov	r2, s15
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007af8:	4b13      	ldr	r3, [pc, #76]	@ (8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afc:	0e1b      	lsrs	r3, r3, #24
 8007afe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b1e:	ee17 2a90 	vmov	r2, s15
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007b26:	e008      	b.n	8007b3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	609a      	str	r2, [r3, #8]
}
 8007b3a:	bf00      	nop
 8007b3c:	3724      	adds	r7, #36	@ 0x24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	58024400 	.word	0x58024400
 8007b4c:	03d09000 	.word	0x03d09000
 8007b50:	46000000 	.word	0x46000000
 8007b54:	4c742400 	.word	0x4c742400
 8007b58:	4a742400 	.word	0x4a742400
 8007b5c:	4bbebc20 	.word	0x4bbebc20

08007b60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b6e:	4b53      	ldr	r3, [pc, #332]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d101      	bne.n	8007b7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e099      	b.n	8007cb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b7e:	4b4f      	ldr	r3, [pc, #316]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a4e      	ldr	r2, [pc, #312]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007b84:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b8a:	f7fb f93d 	bl	8002e08 <HAL_GetTick>
 8007b8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b90:	e008      	b.n	8007ba4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b92:	f7fb f939 	bl	8002e08 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e086      	b.n	8007cb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ba4:	4b45      	ldr	r3, [pc, #276]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1f0      	bne.n	8007b92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007bb0:	4b42      	ldr	r3, [pc, #264]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	031b      	lsls	r3, r3, #12
 8007bbe:	493f      	ldr	r1, [pc, #252]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	025b      	lsls	r3, r3, #9
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	041b      	lsls	r3, r3, #16
 8007be2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007be6:	431a      	orrs	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	061b      	lsls	r3, r3, #24
 8007bf0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007bf4:	4931      	ldr	r1, [pc, #196]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007bfa:	4b30      	ldr	r3, [pc, #192]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	492d      	ldr	r1, [pc, #180]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c10:	f023 0220 	bic.w	r2, r3, #32
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	4928      	ldr	r1, [pc, #160]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c1e:	4b27      	ldr	r3, [pc, #156]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c22:	4a26      	ldr	r2, [pc, #152]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c24:	f023 0310 	bic.w	r3, r3, #16
 8007c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c2a:	4b24      	ldr	r3, [pc, #144]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c2e:	4b24      	ldr	r3, [pc, #144]	@ (8007cc0 <RCCEx_PLL2_Config+0x160>)
 8007c30:	4013      	ands	r3, r2
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	69d2      	ldr	r2, [r2, #28]
 8007c36:	00d2      	lsls	r2, r2, #3
 8007c38:	4920      	ldr	r1, [pc, #128]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c42:	4a1e      	ldr	r2, [pc, #120]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c44:	f043 0310 	orr.w	r3, r3, #16
 8007c48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d106      	bne.n	8007c5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c50:	4b1a      	ldr	r3, [pc, #104]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c54:	4a19      	ldr	r2, [pc, #100]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c5c:	e00f      	b.n	8007c7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d106      	bne.n	8007c72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c64:	4b15      	ldr	r3, [pc, #84]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c68:	4a14      	ldr	r2, [pc, #80]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c70:	e005      	b.n	8007c7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c72:	4b12      	ldr	r3, [pc, #72]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c76:	4a11      	ldr	r2, [pc, #68]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a0e      	ldr	r2, [pc, #56]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007c84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c8a:	f7fb f8bd 	bl	8002e08 <HAL_GetTick>
 8007c8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c90:	e008      	b.n	8007ca4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c92:	f7fb f8b9 	bl	8002e08 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d901      	bls.n	8007ca4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e006      	b.n	8007cb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ca4:	4b05      	ldr	r3, [pc, #20]	@ (8007cbc <RCCEx_PLL2_Config+0x15c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d0f0      	beq.n	8007c92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	58024400 	.word	0x58024400
 8007cc0:	ffff0007 	.word	0xffff0007

08007cc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cd2:	4b53      	ldr	r3, [pc, #332]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd6:	f003 0303 	and.w	r3, r3, #3
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d101      	bne.n	8007ce2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e099      	b.n	8007e16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a4e      	ldr	r2, [pc, #312]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007ce8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cee:	f7fb f88b 	bl	8002e08 <HAL_GetTick>
 8007cf2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cf4:	e008      	b.n	8007d08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cf6:	f7fb f887 	bl	8002e08 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d901      	bls.n	8007d08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e086      	b.n	8007e16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d08:	4b45      	ldr	r3, [pc, #276]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1f0      	bne.n	8007cf6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d14:	4b42      	ldr	r3, [pc, #264]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d18:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	051b      	lsls	r3, r3, #20
 8007d22:	493f      	ldr	r1, [pc, #252]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	628b      	str	r3, [r1, #40]	@ 0x28
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	025b      	lsls	r3, r3, #9
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	041b      	lsls	r3, r3, #16
 8007d46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	061b      	lsls	r3, r3, #24
 8007d54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007d58:	4931      	ldr	r1, [pc, #196]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d5e:	4b30      	ldr	r3, [pc, #192]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	492d      	ldr	r1, [pc, #180]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d70:	4b2b      	ldr	r3, [pc, #172]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d74:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	4928      	ldr	r1, [pc, #160]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d82:	4b27      	ldr	r3, [pc, #156]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d86:	4a26      	ldr	r2, [pc, #152]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d8e:	4b24      	ldr	r3, [pc, #144]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007d90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d92:	4b24      	ldr	r3, [pc, #144]	@ (8007e24 <RCCEx_PLL3_Config+0x160>)
 8007d94:	4013      	ands	r3, r2
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	69d2      	ldr	r2, [r2, #28]
 8007d9a:	00d2      	lsls	r2, r2, #3
 8007d9c:	4920      	ldr	r1, [pc, #128]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007da2:	4b1f      	ldr	r3, [pc, #124]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da6:	4a1e      	ldr	r2, [pc, #120]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d106      	bne.n	8007dc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007db4:	4b1a      	ldr	r3, [pc, #104]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db8:	4a19      	ldr	r2, [pc, #100]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007dba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007dc0:	e00f      	b.n	8007de2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d106      	bne.n	8007dd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007dc8:	4b15      	ldr	r3, [pc, #84]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dcc:	4a14      	ldr	r2, [pc, #80]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007dce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007dd4:	e005      	b.n	8007de2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007dd6:	4b12      	ldr	r3, [pc, #72]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dda:	4a11      	ldr	r2, [pc, #68]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007ddc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007de0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007de2:	4b0f      	ldr	r3, [pc, #60]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a0e      	ldr	r2, [pc, #56]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dee:	f7fb f80b 	bl	8002e08 <HAL_GetTick>
 8007df2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007df4:	e008      	b.n	8007e08 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007df6:	f7fb f807 	bl	8002e08 <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d901      	bls.n	8007e08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e006      	b.n	8007e16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e08:	4b05      	ldr	r3, [pc, #20]	@ (8007e20 <RCCEx_PLL3_Config+0x15c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0f0      	beq.n	8007df6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	58024400 	.word	0x58024400
 8007e24:	ffff0007 	.word	0xffff0007

08007e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e049      	b.n	8007ece <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d106      	bne.n	8007e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7fa f824 	bl	8001e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	f000 fb12 	bl	8008490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d001      	beq.n	8007ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e05e      	b.n	8007fae <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 0201 	orr.w	r2, r2, #1
 8007f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8007fbc <HAL_TIM_Base_Start_IT+0xe4>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d02c      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x94>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f1a:	d027      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x94>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a27      	ldr	r2, [pc, #156]	@ (8007fc0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d022      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x94>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a26      	ldr	r2, [pc, #152]	@ (8007fc4 <HAL_TIM_Base_Start_IT+0xec>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d01d      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x94>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a24      	ldr	r2, [pc, #144]	@ (8007fc8 <HAL_TIM_Base_Start_IT+0xf0>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d018      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x94>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a23      	ldr	r2, [pc, #140]	@ (8007fcc <HAL_TIM_Base_Start_IT+0xf4>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d013      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x94>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a21      	ldr	r2, [pc, #132]	@ (8007fd0 <HAL_TIM_Base_Start_IT+0xf8>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d00e      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x94>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a20      	ldr	r2, [pc, #128]	@ (8007fd4 <HAL_TIM_Base_Start_IT+0xfc>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d009      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x94>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a1e      	ldr	r2, [pc, #120]	@ (8007fd8 <HAL_TIM_Base_Start_IT+0x100>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d004      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0x94>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a1d      	ldr	r2, [pc, #116]	@ (8007fdc <HAL_TIM_Base_Start_IT+0x104>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d115      	bne.n	8007f98 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	4b1b      	ldr	r3, [pc, #108]	@ (8007fe0 <HAL_TIM_Base_Start_IT+0x108>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b06      	cmp	r3, #6
 8007f7c:	d015      	beq.n	8007faa <HAL_TIM_Base_Start_IT+0xd2>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f84:	d011      	beq.n	8007faa <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f042 0201 	orr.w	r2, r2, #1
 8007f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f96:	e008      	b.n	8007faa <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	e000      	b.n	8007fac <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007faa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	40010000 	.word	0x40010000
 8007fc0:	40000400 	.word	0x40000400
 8007fc4:	40000800 	.word	0x40000800
 8007fc8:	40000c00 	.word	0x40000c00
 8007fcc:	40010400 	.word	0x40010400
 8007fd0:	40001800 	.word	0x40001800
 8007fd4:	40014000 	.word	0x40014000
 8007fd8:	4000e000 	.word	0x4000e000
 8007fdc:	4000e400 	.word	0x4000e400
 8007fe0:	00010007 	.word	0x00010007

08007fe4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 0201 	bic.w	r2, r2, #1
 8007ffa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6a1a      	ldr	r2, [r3, #32]
 8008002:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008006:	4013      	ands	r3, r2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10f      	bne.n	800802c <HAL_TIM_Base_Stop_IT+0x48>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6a1a      	ldr	r2, [r3, #32]
 8008012:	f240 4344 	movw	r3, #1092	@ 0x444
 8008016:	4013      	ands	r3, r2
 8008018:	2b00      	cmp	r3, #0
 800801a:	d107      	bne.n	800802c <HAL_TIM_Base_Stop_IT+0x48>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f022 0201 	bic.w	r2, r2, #1
 800802a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	2b00      	cmp	r3, #0
 8008062:	d020      	beq.n	80080a6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d01b      	beq.n	80080a6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f06f 0202 	mvn.w	r2, #2
 8008076:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	f003 0303 	and.w	r3, r3, #3
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f9e1 	bl	8008454 <HAL_TIM_IC_CaptureCallback>
 8008092:	e005      	b.n	80080a0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f9d3 	bl	8008440 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f9e4 	bl	8008468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d020      	beq.n	80080f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f003 0304 	and.w	r3, r3, #4
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d01b      	beq.n	80080f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f06f 0204 	mvn.w	r2, #4
 80080c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2202      	movs	r2, #2
 80080c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f9bb 	bl	8008454 <HAL_TIM_IC_CaptureCallback>
 80080de:	e005      	b.n	80080ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f9ad 	bl	8008440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f9be 	bl	8008468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d020      	beq.n	800813e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f003 0308 	and.w	r3, r3, #8
 8008102:	2b00      	cmp	r3, #0
 8008104:	d01b      	beq.n	800813e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f06f 0208 	mvn.w	r2, #8
 800810e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2204      	movs	r2, #4
 8008114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	f003 0303 	and.w	r3, r3, #3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f995 	bl	8008454 <HAL_TIM_IC_CaptureCallback>
 800812a:	e005      	b.n	8008138 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f987 	bl	8008440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f998 	bl	8008468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	f003 0310 	and.w	r3, r3, #16
 8008144:	2b00      	cmp	r3, #0
 8008146:	d020      	beq.n	800818a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f003 0310 	and.w	r3, r3, #16
 800814e:	2b00      	cmp	r3, #0
 8008150:	d01b      	beq.n	800818a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f06f 0210 	mvn.w	r2, #16
 800815a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2208      	movs	r2, #8
 8008160:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	69db      	ldr	r3, [r3, #28]
 8008168:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f96f 	bl	8008454 <HAL_TIM_IC_CaptureCallback>
 8008176:	e005      	b.n	8008184 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f961 	bl	8008440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f972 	bl	8008468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00c      	beq.n	80081ae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	d007      	beq.n	80081ae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f06f 0201 	mvn.w	r2, #1
 80081a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7f9 fa85 	bl	80016b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d104      	bne.n	80081c2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00c      	beq.n	80081dc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d007      	beq.n	80081dc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80081d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fb50 	bl	800887c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00c      	beq.n	8008200 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d007      	beq.n	8008200 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80081f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fb48 	bl	8008890 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00c      	beq.n	8008224 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	d007      	beq.n	8008224 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800821c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f92c 	bl	800847c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00c      	beq.n	8008248 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f003 0320 	and.w	r3, r3, #32
 8008234:	2b00      	cmp	r3, #0
 8008236:	d007      	beq.n	8008248 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f06f 0220 	mvn.w	r2, #32
 8008240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fb10 	bl	8008868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008248:	bf00      	nop
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008264:	2b01      	cmp	r3, #1
 8008266:	d101      	bne.n	800826c <HAL_TIM_ConfigClockSource+0x1c>
 8008268:	2302      	movs	r3, #2
 800826a:	e0dc      	b.n	8008426 <HAL_TIM_ConfigClockSource+0x1d6>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2202      	movs	r2, #2
 8008278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	4b6a      	ldr	r3, [pc, #424]	@ (8008430 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008288:	4013      	ands	r3, r2
 800828a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008292:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a64      	ldr	r2, [pc, #400]	@ (8008434 <HAL_TIM_ConfigClockSource+0x1e4>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	f000 80a9 	beq.w	80083fa <HAL_TIM_ConfigClockSource+0x1aa>
 80082a8:	4a62      	ldr	r2, [pc, #392]	@ (8008434 <HAL_TIM_ConfigClockSource+0x1e4>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	f200 80ae 	bhi.w	800840c <HAL_TIM_ConfigClockSource+0x1bc>
 80082b0:	4a61      	ldr	r2, [pc, #388]	@ (8008438 <HAL_TIM_ConfigClockSource+0x1e8>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	f000 80a1 	beq.w	80083fa <HAL_TIM_ConfigClockSource+0x1aa>
 80082b8:	4a5f      	ldr	r2, [pc, #380]	@ (8008438 <HAL_TIM_ConfigClockSource+0x1e8>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	f200 80a6 	bhi.w	800840c <HAL_TIM_ConfigClockSource+0x1bc>
 80082c0:	4a5e      	ldr	r2, [pc, #376]	@ (800843c <HAL_TIM_ConfigClockSource+0x1ec>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	f000 8099 	beq.w	80083fa <HAL_TIM_ConfigClockSource+0x1aa>
 80082c8:	4a5c      	ldr	r2, [pc, #368]	@ (800843c <HAL_TIM_ConfigClockSource+0x1ec>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	f200 809e 	bhi.w	800840c <HAL_TIM_ConfigClockSource+0x1bc>
 80082d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80082d4:	f000 8091 	beq.w	80083fa <HAL_TIM_ConfigClockSource+0x1aa>
 80082d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80082dc:	f200 8096 	bhi.w	800840c <HAL_TIM_ConfigClockSource+0x1bc>
 80082e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082e4:	f000 8089 	beq.w	80083fa <HAL_TIM_ConfigClockSource+0x1aa>
 80082e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082ec:	f200 808e 	bhi.w	800840c <HAL_TIM_ConfigClockSource+0x1bc>
 80082f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082f4:	d03e      	beq.n	8008374 <HAL_TIM_ConfigClockSource+0x124>
 80082f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082fa:	f200 8087 	bhi.w	800840c <HAL_TIM_ConfigClockSource+0x1bc>
 80082fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008302:	f000 8086 	beq.w	8008412 <HAL_TIM_ConfigClockSource+0x1c2>
 8008306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800830a:	d87f      	bhi.n	800840c <HAL_TIM_ConfigClockSource+0x1bc>
 800830c:	2b70      	cmp	r3, #112	@ 0x70
 800830e:	d01a      	beq.n	8008346 <HAL_TIM_ConfigClockSource+0xf6>
 8008310:	2b70      	cmp	r3, #112	@ 0x70
 8008312:	d87b      	bhi.n	800840c <HAL_TIM_ConfigClockSource+0x1bc>
 8008314:	2b60      	cmp	r3, #96	@ 0x60
 8008316:	d050      	beq.n	80083ba <HAL_TIM_ConfigClockSource+0x16a>
 8008318:	2b60      	cmp	r3, #96	@ 0x60
 800831a:	d877      	bhi.n	800840c <HAL_TIM_ConfigClockSource+0x1bc>
 800831c:	2b50      	cmp	r3, #80	@ 0x50
 800831e:	d03c      	beq.n	800839a <HAL_TIM_ConfigClockSource+0x14a>
 8008320:	2b50      	cmp	r3, #80	@ 0x50
 8008322:	d873      	bhi.n	800840c <HAL_TIM_ConfigClockSource+0x1bc>
 8008324:	2b40      	cmp	r3, #64	@ 0x40
 8008326:	d058      	beq.n	80083da <HAL_TIM_ConfigClockSource+0x18a>
 8008328:	2b40      	cmp	r3, #64	@ 0x40
 800832a:	d86f      	bhi.n	800840c <HAL_TIM_ConfigClockSource+0x1bc>
 800832c:	2b30      	cmp	r3, #48	@ 0x30
 800832e:	d064      	beq.n	80083fa <HAL_TIM_ConfigClockSource+0x1aa>
 8008330:	2b30      	cmp	r3, #48	@ 0x30
 8008332:	d86b      	bhi.n	800840c <HAL_TIM_ConfigClockSource+0x1bc>
 8008334:	2b20      	cmp	r3, #32
 8008336:	d060      	beq.n	80083fa <HAL_TIM_ConfigClockSource+0x1aa>
 8008338:	2b20      	cmp	r3, #32
 800833a:	d867      	bhi.n	800840c <HAL_TIM_ConfigClockSource+0x1bc>
 800833c:	2b00      	cmp	r3, #0
 800833e:	d05c      	beq.n	80083fa <HAL_TIM_ConfigClockSource+0x1aa>
 8008340:	2b10      	cmp	r3, #16
 8008342:	d05a      	beq.n	80083fa <HAL_TIM_ConfigClockSource+0x1aa>
 8008344:	e062      	b.n	800840c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008356:	f000 f9cb 	bl	80086f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	609a      	str	r2, [r3, #8]
      break;
 8008372:	e04f      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008384:	f000 f9b4 	bl	80086f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689a      	ldr	r2, [r3, #8]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008396:	609a      	str	r2, [r3, #8]
      break;
 8008398:	e03c      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083a6:	461a      	mov	r2, r3
 80083a8:	f000 f924 	bl	80085f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2150      	movs	r1, #80	@ 0x50
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 f97e 	bl	80086b4 <TIM_ITRx_SetConfig>
      break;
 80083b8:	e02c      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083c6:	461a      	mov	r2, r3
 80083c8:	f000 f943 	bl	8008652 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2160      	movs	r1, #96	@ 0x60
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 f96e 	bl	80086b4 <TIM_ITRx_SetConfig>
      break;
 80083d8:	e01c      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083e6:	461a      	mov	r2, r3
 80083e8:	f000 f904 	bl	80085f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2140      	movs	r1, #64	@ 0x40
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 f95e 	bl	80086b4 <TIM_ITRx_SetConfig>
      break;
 80083f8:	e00c      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4619      	mov	r1, r3
 8008404:	4610      	mov	r0, r2
 8008406:	f000 f955 	bl	80086b4 <TIM_ITRx_SetConfig>
      break;
 800840a:	e003      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	73fb      	strb	r3, [r7, #15]
      break;
 8008410:	e000      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008424:	7bfb      	ldrb	r3, [r7, #15]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	ffceff88 	.word	0xffceff88
 8008434:	00100040 	.word	0x00100040
 8008438:	00100030 	.word	0x00100030
 800843c:	00100020 	.word	0x00100020

08008440 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a4a      	ldr	r2, [pc, #296]	@ (80085cc <TIM_Base_SetConfig+0x13c>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d013      	beq.n	80084d0 <TIM_Base_SetConfig+0x40>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ae:	d00f      	beq.n	80084d0 <TIM_Base_SetConfig+0x40>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a47      	ldr	r2, [pc, #284]	@ (80085d0 <TIM_Base_SetConfig+0x140>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d00b      	beq.n	80084d0 <TIM_Base_SetConfig+0x40>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a46      	ldr	r2, [pc, #280]	@ (80085d4 <TIM_Base_SetConfig+0x144>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d007      	beq.n	80084d0 <TIM_Base_SetConfig+0x40>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a45      	ldr	r2, [pc, #276]	@ (80085d8 <TIM_Base_SetConfig+0x148>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d003      	beq.n	80084d0 <TIM_Base_SetConfig+0x40>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a44      	ldr	r2, [pc, #272]	@ (80085dc <TIM_Base_SetConfig+0x14c>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d108      	bne.n	80084e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	4313      	orrs	r3, r2
 80084e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a39      	ldr	r2, [pc, #228]	@ (80085cc <TIM_Base_SetConfig+0x13c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d027      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084f0:	d023      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a36      	ldr	r2, [pc, #216]	@ (80085d0 <TIM_Base_SetConfig+0x140>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d01f      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a35      	ldr	r2, [pc, #212]	@ (80085d4 <TIM_Base_SetConfig+0x144>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d01b      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a34      	ldr	r2, [pc, #208]	@ (80085d8 <TIM_Base_SetConfig+0x148>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d017      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a33      	ldr	r2, [pc, #204]	@ (80085dc <TIM_Base_SetConfig+0x14c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d013      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a32      	ldr	r2, [pc, #200]	@ (80085e0 <TIM_Base_SetConfig+0x150>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00f      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a31      	ldr	r2, [pc, #196]	@ (80085e4 <TIM_Base_SetConfig+0x154>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00b      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a30      	ldr	r2, [pc, #192]	@ (80085e8 <TIM_Base_SetConfig+0x158>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d007      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a2f      	ldr	r2, [pc, #188]	@ (80085ec <TIM_Base_SetConfig+0x15c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d003      	beq.n	800853a <TIM_Base_SetConfig+0xaa>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a2e      	ldr	r2, [pc, #184]	@ (80085f0 <TIM_Base_SetConfig+0x160>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d108      	bne.n	800854c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	4313      	orrs	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a16      	ldr	r2, [pc, #88]	@ (80085cc <TIM_Base_SetConfig+0x13c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d00f      	beq.n	8008598 <TIM_Base_SetConfig+0x108>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a18      	ldr	r2, [pc, #96]	@ (80085dc <TIM_Base_SetConfig+0x14c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d00b      	beq.n	8008598 <TIM_Base_SetConfig+0x108>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a17      	ldr	r2, [pc, #92]	@ (80085e0 <TIM_Base_SetConfig+0x150>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d007      	beq.n	8008598 <TIM_Base_SetConfig+0x108>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a16      	ldr	r2, [pc, #88]	@ (80085e4 <TIM_Base_SetConfig+0x154>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d003      	beq.n	8008598 <TIM_Base_SetConfig+0x108>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a15      	ldr	r2, [pc, #84]	@ (80085e8 <TIM_Base_SetConfig+0x158>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d103      	bne.n	80085a0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	691a      	ldr	r2, [r3, #16]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d105      	bne.n	80085be <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	f023 0201 	bic.w	r2, r3, #1
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	611a      	str	r2, [r3, #16]
  }
}
 80085be:	bf00      	nop
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	40010000 	.word	0x40010000
 80085d0:	40000400 	.word	0x40000400
 80085d4:	40000800 	.word	0x40000800
 80085d8:	40000c00 	.word	0x40000c00
 80085dc:	40010400 	.word	0x40010400
 80085e0:	40014000 	.word	0x40014000
 80085e4:	40014400 	.word	0x40014400
 80085e8:	40014800 	.word	0x40014800
 80085ec:	4000e000 	.word	0x4000e000
 80085f0:	4000e400 	.word	0x4000e400

080085f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6a1b      	ldr	r3, [r3, #32]
 8008604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	f023 0201 	bic.w	r2, r3, #1
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800861e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	011b      	lsls	r3, r3, #4
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	4313      	orrs	r3, r2
 8008628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f023 030a 	bic.w	r3, r3, #10
 8008630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	4313      	orrs	r3, r2
 8008638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	621a      	str	r2, [r3, #32]
}
 8008646:	bf00      	nop
 8008648:	371c      	adds	r7, #28
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008652:	b480      	push	{r7}
 8008654:	b087      	sub	sp, #28
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	f023 0210 	bic.w	r2, r3, #16
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800867c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	031b      	lsls	r3, r3, #12
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	4313      	orrs	r3, r2
 8008686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800868e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	4313      	orrs	r3, r2
 8008698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	621a      	str	r2, [r3, #32]
}
 80086a6:	bf00      	nop
 80086a8:	371c      	adds	r7, #28
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
	...

080086b4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4b09      	ldr	r3, [pc, #36]	@ (80086ec <TIM_ITRx_SetConfig+0x38>)
 80086c8:	4013      	ands	r3, r2
 80086ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	f043 0307 	orr.w	r3, r3, #7
 80086d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	609a      	str	r2, [r3, #8]
}
 80086de:	bf00      	nop
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	ffcfff8f 	.word	0xffcfff8f

080086f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b087      	sub	sp, #28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800870a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	021a      	lsls	r2, r3, #8
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	431a      	orrs	r2, r3
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	4313      	orrs	r3, r2
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	4313      	orrs	r3, r2
 800871c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	609a      	str	r2, [r3, #8]
}
 8008724:	bf00      	nop
 8008726:	371c      	adds	r7, #28
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008740:	2b01      	cmp	r3, #1
 8008742:	d101      	bne.n	8008748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008744:	2302      	movs	r3, #2
 8008746:	e077      	b.n	8008838 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a35      	ldr	r2, [pc, #212]	@ (8008844 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d004      	beq.n	800877c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a34      	ldr	r2, [pc, #208]	@ (8008848 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d108      	bne.n	800878e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008782:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4313      	orrs	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008794:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4313      	orrs	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a25      	ldr	r2, [pc, #148]	@ (8008844 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d02c      	beq.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087ba:	d027      	beq.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a22      	ldr	r2, [pc, #136]	@ (800884c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d022      	beq.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a21      	ldr	r2, [pc, #132]	@ (8008850 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d01d      	beq.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008854 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d018      	beq.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a1a      	ldr	r2, [pc, #104]	@ (8008848 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d013      	beq.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008858 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d00e      	beq.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a1a      	ldr	r2, [pc, #104]	@ (800885c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d009      	beq.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a18      	ldr	r2, [pc, #96]	@ (8008860 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d004      	beq.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a17      	ldr	r2, [pc, #92]	@ (8008864 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d10c      	bne.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008812:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	4313      	orrs	r3, r2
 800881c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2201      	movs	r2, #1
 800882a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	40010000 	.word	0x40010000
 8008848:	40010400 	.word	0x40010400
 800884c:	40000400 	.word	0x40000400
 8008850:	40000800 	.word	0x40000800
 8008854:	40000c00 	.word	0x40000c00
 8008858:	40001800 	.word	0x40001800
 800885c:	40014000 	.word	0x40014000
 8008860:	4000e000 	.word	0x4000e000
 8008864:	4000e400 	.word	0x4000e400

08008868 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e042      	b.n	800893c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d106      	bne.n	80088ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7f9 fe51 	bl	8002570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2224      	movs	r2, #36	@ 0x24
 80088d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 0201 	bic.w	r2, r2, #1
 80088e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 fc10 	bl	800a114 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fda1 	bl	800943c <UART_SetConfig>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d101      	bne.n	8008904 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e01b      	b.n	800893c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685a      	ldr	r2, [r3, #4]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689a      	ldr	r2, [r3, #8]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f042 0201 	orr.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f001 fc8f 	bl	800a258 <UART_CheckIdleState>
 800893a:	4603      	mov	r3, r0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08a      	sub	sp, #40	@ 0x28
 8008948:	af02      	add	r7, sp, #8
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	603b      	str	r3, [r7, #0]
 8008950:	4613      	mov	r3, r2
 8008952:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800895a:	2b20      	cmp	r3, #32
 800895c:	d17b      	bne.n	8008a56 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <HAL_UART_Transmit+0x26>
 8008964:	88fb      	ldrh	r3, [r7, #6]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e074      	b.n	8008a58 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2221      	movs	r2, #33	@ 0x21
 800897a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800897e:	f7fa fa43 	bl	8002e08 <HAL_GetTick>
 8008982:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	88fa      	ldrh	r2, [r7, #6]
 8008988:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	88fa      	ldrh	r2, [r7, #6]
 8008990:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800899c:	d108      	bne.n	80089b0 <HAL_UART_Transmit+0x6c>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d104      	bne.n	80089b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	61bb      	str	r3, [r7, #24]
 80089ae:	e003      	b.n	80089b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089b4:	2300      	movs	r3, #0
 80089b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80089b8:	e030      	b.n	8008a1c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2200      	movs	r2, #0
 80089c2:	2180      	movs	r1, #128	@ 0x80
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f001 fcf1 	bl	800a3ac <UART_WaitOnFlagUntilTimeout>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2220      	movs	r2, #32
 80089d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e03d      	b.n	8008a58 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10b      	bne.n	80089fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	3302      	adds	r3, #2
 80089f6:	61bb      	str	r3, [r7, #24]
 80089f8:	e007      	b.n	8008a0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	781a      	ldrb	r2, [r3, #0]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	3301      	adds	r3, #1
 8008a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	3b01      	subs	r3, #1
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1c8      	bne.n	80089ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	2140      	movs	r1, #64	@ 0x40
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f001 fcba 	bl	800a3ac <UART_WaitOnFlagUntilTimeout>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d005      	beq.n	8008a4a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e006      	b.n	8008a58 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	e000      	b.n	8008a58 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008a56:	2302      	movs	r3, #2
  }
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3720      	adds	r7, #32
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b08a      	sub	sp, #40	@ 0x28
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	603b      	str	r3, [r7, #0]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a76:	2b20      	cmp	r3, #32
 8008a78:	f040 80b5 	bne.w	8008be6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <HAL_UART_Receive+0x28>
 8008a82:	88fb      	ldrh	r3, [r7, #6]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e0ad      	b.n	8008be8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2222      	movs	r2, #34	@ 0x22
 8008a98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008aa2:	f7fa f9b1 	bl	8002e08 <HAL_GetTick>
 8008aa6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	88fa      	ldrh	r2, [r7, #6]
 8008aac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	88fa      	ldrh	r2, [r7, #6]
 8008ab4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ac0:	d10e      	bne.n	8008ae0 <HAL_UART_Receive+0x80>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d105      	bne.n	8008ad6 <HAL_UART_Receive+0x76>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008ad0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ad4:	e02d      	b.n	8008b32 <HAL_UART_Receive+0xd2>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	22ff      	movs	r2, #255	@ 0xff
 8008ada:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ade:	e028      	b.n	8008b32 <HAL_UART_Receive+0xd2>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10d      	bne.n	8008b04 <HAL_UART_Receive+0xa4>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d104      	bne.n	8008afa <HAL_UART_Receive+0x9a>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	22ff      	movs	r2, #255	@ 0xff
 8008af4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008af8:	e01b      	b.n	8008b32 <HAL_UART_Receive+0xd2>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	227f      	movs	r2, #127	@ 0x7f
 8008afe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b02:	e016      	b.n	8008b32 <HAL_UART_Receive+0xd2>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b0c:	d10d      	bne.n	8008b2a <HAL_UART_Receive+0xca>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d104      	bne.n	8008b20 <HAL_UART_Receive+0xc0>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	227f      	movs	r2, #127	@ 0x7f
 8008b1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b1e:	e008      	b.n	8008b32 <HAL_UART_Receive+0xd2>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	223f      	movs	r2, #63	@ 0x3f
 8008b24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b28:	e003      	b.n	8008b32 <HAL_UART_Receive+0xd2>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b38:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b42:	d108      	bne.n	8008b56 <HAL_UART_Receive+0xf6>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d104      	bne.n	8008b56 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	61bb      	str	r3, [r7, #24]
 8008b54:	e003      	b.n	8008b5e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008b5e:	e036      	b.n	8008bce <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2200      	movs	r2, #0
 8008b68:	2120      	movs	r1, #32
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f001 fc1e 	bl	800a3ac <UART_WaitOnFlagUntilTimeout>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d005      	beq.n	8008b82 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2220      	movs	r2, #32
 8008b7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	e032      	b.n	8008be8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10c      	bne.n	8008ba2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	8a7b      	ldrh	r3, [r7, #18]
 8008b92:	4013      	ands	r3, r2
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	3302      	adds	r3, #2
 8008b9e:	61bb      	str	r3, [r7, #24]
 8008ba0:	e00c      	b.n	8008bbc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	8a7b      	ldrh	r3, [r7, #18]
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	4013      	ands	r3, r2
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1c2      	bne.n	8008b60 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2220      	movs	r2, #32
 8008bde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	e000      	b.n	8008be8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008be6:	2302      	movs	r3, #2
  }
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3720      	adds	r7, #32
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08a      	sub	sp, #40	@ 0x28
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c04:	2b20      	cmp	r3, #32
 8008c06:	d137      	bne.n	8008c78 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d002      	beq.n	8008c14 <HAL_UART_Receive_IT+0x24>
 8008c0e:	88fb      	ldrh	r3, [r7, #6]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e030      	b.n	8008c7a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a18      	ldr	r2, [pc, #96]	@ (8008c84 <HAL_UART_Receive_IT+0x94>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d01f      	beq.n	8008c68 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d018      	beq.n	8008c68 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	e853 3f00 	ldrex	r3, [r3]
 8008c42:	613b      	str	r3, [r7, #16]
   return(result);
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	461a      	mov	r2, r3
 8008c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c54:	623b      	str	r3, [r7, #32]
 8008c56:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	69f9      	ldr	r1, [r7, #28]
 8008c5a:	6a3a      	ldr	r2, [r7, #32]
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e6      	bne.n	8008c36 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008c68:	88fb      	ldrh	r3, [r7, #6]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	68b9      	ldr	r1, [r7, #8]
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f001 fc0a 	bl	800a488 <UART_Start_Receive_IT>
 8008c74:	4603      	mov	r3, r0
 8008c76:	e000      	b.n	8008c7a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c78:	2302      	movs	r3, #2
  }
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3728      	adds	r7, #40	@ 0x28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	58000c00 	.word	0x58000c00

08008c88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b0ba      	sub	sp, #232	@ 0xe8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008cae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008cb2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008cbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d11b      	bne.n	8008cfc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cc8:	f003 0320 	and.w	r3, r3, #32
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d015      	beq.n	8008cfc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cd4:	f003 0320 	and.w	r3, r3, #32
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d105      	bne.n	8008ce8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d009      	beq.n	8008cfc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 8377 	beq.w	80093e0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	4798      	blx	r3
      }
      return;
 8008cfa:	e371      	b.n	80093e0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008cfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 8123 	beq.w	8008f4c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008d0a:	4b8d      	ldr	r3, [pc, #564]	@ (8008f40 <HAL_UART_IRQHandler+0x2b8>)
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d106      	bne.n	8008d20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008d16:	4b8b      	ldr	r3, [pc, #556]	@ (8008f44 <HAL_UART_IRQHandler+0x2bc>)
 8008d18:	4013      	ands	r3, r2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 8116 	beq.w	8008f4c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d011      	beq.n	8008d50 <HAL_UART_IRQHandler+0xc8>
 8008d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00b      	beq.n	8008d50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d46:	f043 0201 	orr.w	r2, r3, #1
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d54:	f003 0302 	and.w	r3, r3, #2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d011      	beq.n	8008d80 <HAL_UART_IRQHandler+0xf8>
 8008d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00b      	beq.n	8008d80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d76:	f043 0204 	orr.w	r2, r3, #4
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d011      	beq.n	8008db0 <HAL_UART_IRQHandler+0x128>
 8008d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00b      	beq.n	8008db0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2204      	movs	r2, #4
 8008d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008da6:	f043 0202 	orr.w	r2, r3, #2
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db4:	f003 0308 	and.w	r3, r3, #8
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d017      	beq.n	8008dec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dc0:	f003 0320 	and.w	r3, r3, #32
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d105      	bne.n	8008dd4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008dc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8008f40 <HAL_UART_IRQHandler+0x2b8>)
 8008dce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00b      	beq.n	8008dec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2208      	movs	r2, #8
 8008dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008de2:	f043 0208 	orr.w	r2, r3, #8
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008df0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d012      	beq.n	8008e1e <HAL_UART_IRQHandler+0x196>
 8008df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00c      	beq.n	8008e1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e14:	f043 0220 	orr.w	r2, r3, #32
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 82dd 	beq.w	80093e4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e2e:	f003 0320 	and.w	r3, r3, #32
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d013      	beq.n	8008e5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d105      	bne.n	8008e4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d007      	beq.n	8008e5e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e72:	2b40      	cmp	r3, #64	@ 0x40
 8008e74:	d005      	beq.n	8008e82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d054      	beq.n	8008f2c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 fc22 	bl	800a6cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e92:	2b40      	cmp	r3, #64	@ 0x40
 8008e94:	d146      	bne.n	8008f24 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ea4:	e853 3f00 	ldrex	r3, [r3]
 8008ea8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008eb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3308      	adds	r3, #8
 8008ebe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008ec2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008ece:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008ed2:	e841 2300 	strex	r3, r2, [r1]
 8008ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1d9      	bne.n	8008e96 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d017      	beq.n	8008f1c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ef2:	4a15      	ldr	r2, [pc, #84]	@ (8008f48 <HAL_UART_IRQHandler+0x2c0>)
 8008ef4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7fa fc59 	bl	80037b4 <HAL_DMA_Abort_IT>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d019      	beq.n	8008f3c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008f16:	4610      	mov	r0, r2
 8008f18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f1a:	e00f      	b.n	8008f3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fa77 	bl	8009410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f22:	e00b      	b.n	8008f3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fa73 	bl	8009410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f2a:	e007      	b.n	8008f3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fa6f 	bl	8009410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008f3a:	e253      	b.n	80093e4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f3c:	bf00      	nop
    return;
 8008f3e:	e251      	b.n	80093e4 <HAL_UART_IRQHandler+0x75c>
 8008f40:	10000001 	.word	0x10000001
 8008f44:	04000120 	.word	0x04000120
 8008f48:	0800a799 	.word	0x0800a799

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	f040 81e7 	bne.w	8009324 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f5a:	f003 0310 	and.w	r3, r3, #16
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 81e0 	beq.w	8009324 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f68:	f003 0310 	and.w	r3, r3, #16
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 81d9 	beq.w	8009324 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2210      	movs	r2, #16
 8008f78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f84:	2b40      	cmp	r3, #64	@ 0x40
 8008f86:	f040 8151 	bne.w	800922c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a96      	ldr	r2, [pc, #600]	@ (80091ec <HAL_UART_IRQHandler+0x564>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d068      	beq.n	800906a <HAL_UART_IRQHandler+0x3e2>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a93      	ldr	r2, [pc, #588]	@ (80091f0 <HAL_UART_IRQHandler+0x568>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d061      	beq.n	800906a <HAL_UART_IRQHandler+0x3e2>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a91      	ldr	r2, [pc, #580]	@ (80091f4 <HAL_UART_IRQHandler+0x56c>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d05a      	beq.n	800906a <HAL_UART_IRQHandler+0x3e2>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a8e      	ldr	r2, [pc, #568]	@ (80091f8 <HAL_UART_IRQHandler+0x570>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d053      	beq.n	800906a <HAL_UART_IRQHandler+0x3e2>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a8c      	ldr	r2, [pc, #560]	@ (80091fc <HAL_UART_IRQHandler+0x574>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d04c      	beq.n	800906a <HAL_UART_IRQHandler+0x3e2>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a89      	ldr	r2, [pc, #548]	@ (8009200 <HAL_UART_IRQHandler+0x578>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d045      	beq.n	800906a <HAL_UART_IRQHandler+0x3e2>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a87      	ldr	r2, [pc, #540]	@ (8009204 <HAL_UART_IRQHandler+0x57c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d03e      	beq.n	800906a <HAL_UART_IRQHandler+0x3e2>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a84      	ldr	r2, [pc, #528]	@ (8009208 <HAL_UART_IRQHandler+0x580>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d037      	beq.n	800906a <HAL_UART_IRQHandler+0x3e2>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a82      	ldr	r2, [pc, #520]	@ (800920c <HAL_UART_IRQHandler+0x584>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d030      	beq.n	800906a <HAL_UART_IRQHandler+0x3e2>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a7f      	ldr	r2, [pc, #508]	@ (8009210 <HAL_UART_IRQHandler+0x588>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d029      	beq.n	800906a <HAL_UART_IRQHandler+0x3e2>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a7d      	ldr	r2, [pc, #500]	@ (8009214 <HAL_UART_IRQHandler+0x58c>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d022      	beq.n	800906a <HAL_UART_IRQHandler+0x3e2>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a7a      	ldr	r2, [pc, #488]	@ (8009218 <HAL_UART_IRQHandler+0x590>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d01b      	beq.n	800906a <HAL_UART_IRQHandler+0x3e2>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a78      	ldr	r2, [pc, #480]	@ (800921c <HAL_UART_IRQHandler+0x594>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d014      	beq.n	800906a <HAL_UART_IRQHandler+0x3e2>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a75      	ldr	r2, [pc, #468]	@ (8009220 <HAL_UART_IRQHandler+0x598>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d00d      	beq.n	800906a <HAL_UART_IRQHandler+0x3e2>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a73      	ldr	r2, [pc, #460]	@ (8009224 <HAL_UART_IRQHandler+0x59c>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d006      	beq.n	800906a <HAL_UART_IRQHandler+0x3e2>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a70      	ldr	r2, [pc, #448]	@ (8009228 <HAL_UART_IRQHandler+0x5a0>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d106      	bne.n	8009078 <HAL_UART_IRQHandler+0x3f0>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	b29b      	uxth	r3, r3
 8009076:	e005      	b.n	8009084 <HAL_UART_IRQHandler+0x3fc>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	b29b      	uxth	r3, r3
 8009084:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009088:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 81ab 	beq.w	80093e8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009098:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800909c:	429a      	cmp	r2, r3
 800909e:	f080 81a3 	bcs.w	80093e8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090b8:	f000 8087 	beq.w	80091ca <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090c8:	e853 3f00 	ldrex	r3, [r3]
 80090cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80090d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80090e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80090f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80090fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1da      	bne.n	80090bc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	3308      	adds	r3, #8
 800910c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009110:	e853 3f00 	ldrex	r3, [r3]
 8009114:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009116:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009118:	f023 0301 	bic.w	r3, r3, #1
 800911c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3308      	adds	r3, #8
 8009126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800912a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800912e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009130:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009132:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009136:	e841 2300 	strex	r3, r2, [r1]
 800913a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800913c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1e1      	bne.n	8009106 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3308      	adds	r3, #8
 8009148:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009158:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3308      	adds	r3, #8
 8009162:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009166:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009168:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800916c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800916e:	e841 2300 	strex	r3, r2, [r1]
 8009172:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009174:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1e3      	bne.n	8009142 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2220      	movs	r2, #32
 800917e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009190:	e853 3f00 	ldrex	r3, [r3]
 8009194:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009198:	f023 0310 	bic.w	r3, r3, #16
 800919c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	461a      	mov	r2, r3
 80091a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091b2:	e841 2300 	strex	r3, r2, [r1]
 80091b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1e4      	bne.n	8009188 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7f9 ffd7 	bl	8003178 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2202      	movs	r2, #2
 80091ce:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091dc:	b29b      	uxth	r3, r3
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f91d 	bl	8009424 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091ea:	e0fd      	b.n	80093e8 <HAL_UART_IRQHandler+0x760>
 80091ec:	40020010 	.word	0x40020010
 80091f0:	40020028 	.word	0x40020028
 80091f4:	40020040 	.word	0x40020040
 80091f8:	40020058 	.word	0x40020058
 80091fc:	40020070 	.word	0x40020070
 8009200:	40020088 	.word	0x40020088
 8009204:	400200a0 	.word	0x400200a0
 8009208:	400200b8 	.word	0x400200b8
 800920c:	40020410 	.word	0x40020410
 8009210:	40020428 	.word	0x40020428
 8009214:	40020440 	.word	0x40020440
 8009218:	40020458 	.word	0x40020458
 800921c:	40020470 	.word	0x40020470
 8009220:	40020488 	.word	0x40020488
 8009224:	400204a0 	.word	0x400204a0
 8009228:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009238:	b29b      	uxth	r3, r3
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009246:	b29b      	uxth	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 80cf 	beq.w	80093ec <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800924e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 80ca 	beq.w	80093ec <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009260:	e853 3f00 	ldrex	r3, [r3]
 8009264:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800926c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	461a      	mov	r2, r3
 8009276:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800927a:	647b      	str	r3, [r7, #68]	@ 0x44
 800927c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009280:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009282:	e841 2300 	strex	r3, r2, [r1]
 8009286:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1e4      	bne.n	8009258 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3308      	adds	r3, #8
 8009294:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	623b      	str	r3, [r7, #32]
   return(result);
 800929e:	6a3a      	ldr	r2, [r7, #32]
 80092a0:	4b55      	ldr	r3, [pc, #340]	@ (80093f8 <HAL_UART_IRQHandler+0x770>)
 80092a2:	4013      	ands	r3, r2
 80092a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	3308      	adds	r3, #8
 80092ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80092b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80092b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e3      	bne.n	800928e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2220      	movs	r2, #32
 80092ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	e853 3f00 	ldrex	r3, [r3]
 80092e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f023 0310 	bic.w	r3, r3, #16
 80092ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80092fc:	61fb      	str	r3, [r7, #28]
 80092fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009300:	69b9      	ldr	r1, [r7, #24]
 8009302:	69fa      	ldr	r2, [r7, #28]
 8009304:	e841 2300 	strex	r3, r2, [r1]
 8009308:	617b      	str	r3, [r7, #20]
   return(result);
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1e4      	bne.n	80092da <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2202      	movs	r2, #2
 8009314:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009316:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f881 	bl	8009424 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009322:	e063      	b.n	80093ec <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009328:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00e      	beq.n	800934e <HAL_UART_IRQHandler+0x6c6>
 8009330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d008      	beq.n	800934e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009344:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f001 ff84 	bl	800b254 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800934c:	e051      	b.n	80093f2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800934e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009356:	2b00      	cmp	r3, #0
 8009358:	d014      	beq.n	8009384 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800935a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800935e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009362:	2b00      	cmp	r3, #0
 8009364:	d105      	bne.n	8009372 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800936a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d008      	beq.n	8009384 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009376:	2b00      	cmp	r3, #0
 8009378:	d03a      	beq.n	80093f0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	4798      	blx	r3
    }
    return;
 8009382:	e035      	b.n	80093f0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800938c:	2b00      	cmp	r3, #0
 800938e:	d009      	beq.n	80093a4 <HAL_UART_IRQHandler+0x71c>
 8009390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009398:	2b00      	cmp	r3, #0
 800939a:	d003      	beq.n	80093a4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f001 fa11 	bl	800a7c4 <UART_EndTransmit_IT>
    return;
 80093a2:	e026      	b.n	80093f2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80093a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d009      	beq.n	80093c4 <HAL_UART_IRQHandler+0x73c>
 80093b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d003      	beq.n	80093c4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f001 ff5d 	bl	800b27c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093c2:	e016      	b.n	80093f2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80093c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d010      	beq.n	80093f2 <HAL_UART_IRQHandler+0x76a>
 80093d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	da0c      	bge.n	80093f2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 ff45 	bl	800b268 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093de:	e008      	b.n	80093f2 <HAL_UART_IRQHandler+0x76a>
      return;
 80093e0:	bf00      	nop
 80093e2:	e006      	b.n	80093f2 <HAL_UART_IRQHandler+0x76a>
    return;
 80093e4:	bf00      	nop
 80093e6:	e004      	b.n	80093f2 <HAL_UART_IRQHandler+0x76a>
      return;
 80093e8:	bf00      	nop
 80093ea:	e002      	b.n	80093f2 <HAL_UART_IRQHandler+0x76a>
      return;
 80093ec:	bf00      	nop
 80093ee:	e000      	b.n	80093f2 <HAL_UART_IRQHandler+0x76a>
    return;
 80093f0:	bf00      	nop
  }
}
 80093f2:	37e8      	adds	r7, #232	@ 0xe8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	effffffe 	.word	0xeffffffe

080093fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	460b      	mov	r3, r1
 800942e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800943c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009440:	b092      	sub	sp, #72	@ 0x48
 8009442:	af00      	add	r7, sp, #0
 8009444:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	431a      	orrs	r2, r3
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	695b      	ldr	r3, [r3, #20]
 800945a:	431a      	orrs	r2, r3
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	69db      	ldr	r3, [r3, #28]
 8009460:	4313      	orrs	r3, r2
 8009462:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	4bbe      	ldr	r3, [pc, #760]	@ (8009764 <UART_SetConfig+0x328>)
 800946c:	4013      	ands	r3, r2
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	6812      	ldr	r2, [r2, #0]
 8009472:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009474:	430b      	orrs	r3, r1
 8009476:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	68da      	ldr	r2, [r3, #12]
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	430a      	orrs	r2, r1
 800948c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4ab3      	ldr	r2, [pc, #716]	@ (8009768 <UART_SetConfig+0x32c>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d004      	beq.n	80094a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094a4:	4313      	orrs	r3, r2
 80094a6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	4baf      	ldr	r3, [pc, #700]	@ (800976c <UART_SetConfig+0x330>)
 80094b0:	4013      	ands	r3, r2
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	6812      	ldr	r2, [r2, #0]
 80094b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80094b8:	430b      	orrs	r3, r1
 80094ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c2:	f023 010f 	bic.w	r1, r3, #15
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	430a      	orrs	r2, r1
 80094d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4aa6      	ldr	r2, [pc, #664]	@ (8009770 <UART_SetConfig+0x334>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d177      	bne.n	80095cc <UART_SetConfig+0x190>
 80094dc:	4ba5      	ldr	r3, [pc, #660]	@ (8009774 <UART_SetConfig+0x338>)
 80094de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094e4:	2b28      	cmp	r3, #40	@ 0x28
 80094e6:	d86d      	bhi.n	80095c4 <UART_SetConfig+0x188>
 80094e8:	a201      	add	r2, pc, #4	@ (adr r2, 80094f0 <UART_SetConfig+0xb4>)
 80094ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ee:	bf00      	nop
 80094f0:	08009595 	.word	0x08009595
 80094f4:	080095c5 	.word	0x080095c5
 80094f8:	080095c5 	.word	0x080095c5
 80094fc:	080095c5 	.word	0x080095c5
 8009500:	080095c5 	.word	0x080095c5
 8009504:	080095c5 	.word	0x080095c5
 8009508:	080095c5 	.word	0x080095c5
 800950c:	080095c5 	.word	0x080095c5
 8009510:	0800959d 	.word	0x0800959d
 8009514:	080095c5 	.word	0x080095c5
 8009518:	080095c5 	.word	0x080095c5
 800951c:	080095c5 	.word	0x080095c5
 8009520:	080095c5 	.word	0x080095c5
 8009524:	080095c5 	.word	0x080095c5
 8009528:	080095c5 	.word	0x080095c5
 800952c:	080095c5 	.word	0x080095c5
 8009530:	080095a5 	.word	0x080095a5
 8009534:	080095c5 	.word	0x080095c5
 8009538:	080095c5 	.word	0x080095c5
 800953c:	080095c5 	.word	0x080095c5
 8009540:	080095c5 	.word	0x080095c5
 8009544:	080095c5 	.word	0x080095c5
 8009548:	080095c5 	.word	0x080095c5
 800954c:	080095c5 	.word	0x080095c5
 8009550:	080095ad 	.word	0x080095ad
 8009554:	080095c5 	.word	0x080095c5
 8009558:	080095c5 	.word	0x080095c5
 800955c:	080095c5 	.word	0x080095c5
 8009560:	080095c5 	.word	0x080095c5
 8009564:	080095c5 	.word	0x080095c5
 8009568:	080095c5 	.word	0x080095c5
 800956c:	080095c5 	.word	0x080095c5
 8009570:	080095b5 	.word	0x080095b5
 8009574:	080095c5 	.word	0x080095c5
 8009578:	080095c5 	.word	0x080095c5
 800957c:	080095c5 	.word	0x080095c5
 8009580:	080095c5 	.word	0x080095c5
 8009584:	080095c5 	.word	0x080095c5
 8009588:	080095c5 	.word	0x080095c5
 800958c:	080095c5 	.word	0x080095c5
 8009590:	080095bd 	.word	0x080095bd
 8009594:	2301      	movs	r3, #1
 8009596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959a:	e326      	b.n	8009bea <UART_SetConfig+0x7ae>
 800959c:	2304      	movs	r3, #4
 800959e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a2:	e322      	b.n	8009bea <UART_SetConfig+0x7ae>
 80095a4:	2308      	movs	r3, #8
 80095a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095aa:	e31e      	b.n	8009bea <UART_SetConfig+0x7ae>
 80095ac:	2310      	movs	r3, #16
 80095ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b2:	e31a      	b.n	8009bea <UART_SetConfig+0x7ae>
 80095b4:	2320      	movs	r3, #32
 80095b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ba:	e316      	b.n	8009bea <UART_SetConfig+0x7ae>
 80095bc:	2340      	movs	r3, #64	@ 0x40
 80095be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c2:	e312      	b.n	8009bea <UART_SetConfig+0x7ae>
 80095c4:	2380      	movs	r3, #128	@ 0x80
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ca:	e30e      	b.n	8009bea <UART_SetConfig+0x7ae>
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a69      	ldr	r2, [pc, #420]	@ (8009778 <UART_SetConfig+0x33c>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d130      	bne.n	8009638 <UART_SetConfig+0x1fc>
 80095d6:	4b67      	ldr	r3, [pc, #412]	@ (8009774 <UART_SetConfig+0x338>)
 80095d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095da:	f003 0307 	and.w	r3, r3, #7
 80095de:	2b05      	cmp	r3, #5
 80095e0:	d826      	bhi.n	8009630 <UART_SetConfig+0x1f4>
 80095e2:	a201      	add	r2, pc, #4	@ (adr r2, 80095e8 <UART_SetConfig+0x1ac>)
 80095e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e8:	08009601 	.word	0x08009601
 80095ec:	08009609 	.word	0x08009609
 80095f0:	08009611 	.word	0x08009611
 80095f4:	08009619 	.word	0x08009619
 80095f8:	08009621 	.word	0x08009621
 80095fc:	08009629 	.word	0x08009629
 8009600:	2300      	movs	r3, #0
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009606:	e2f0      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009608:	2304      	movs	r3, #4
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960e:	e2ec      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009610:	2308      	movs	r3, #8
 8009612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009616:	e2e8      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009618:	2310      	movs	r3, #16
 800961a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961e:	e2e4      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009620:	2320      	movs	r3, #32
 8009622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009626:	e2e0      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009628:	2340      	movs	r3, #64	@ 0x40
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962e:	e2dc      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009630:	2380      	movs	r3, #128	@ 0x80
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009636:	e2d8      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a4f      	ldr	r2, [pc, #316]	@ (800977c <UART_SetConfig+0x340>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d130      	bne.n	80096a4 <UART_SetConfig+0x268>
 8009642:	4b4c      	ldr	r3, [pc, #304]	@ (8009774 <UART_SetConfig+0x338>)
 8009644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	2b05      	cmp	r3, #5
 800964c:	d826      	bhi.n	800969c <UART_SetConfig+0x260>
 800964e:	a201      	add	r2, pc, #4	@ (adr r2, 8009654 <UART_SetConfig+0x218>)
 8009650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009654:	0800966d 	.word	0x0800966d
 8009658:	08009675 	.word	0x08009675
 800965c:	0800967d 	.word	0x0800967d
 8009660:	08009685 	.word	0x08009685
 8009664:	0800968d 	.word	0x0800968d
 8009668:	08009695 	.word	0x08009695
 800966c:	2300      	movs	r3, #0
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009672:	e2ba      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009674:	2304      	movs	r3, #4
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967a:	e2b6      	b.n	8009bea <UART_SetConfig+0x7ae>
 800967c:	2308      	movs	r3, #8
 800967e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009682:	e2b2      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009684:	2310      	movs	r3, #16
 8009686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800968a:	e2ae      	b.n	8009bea <UART_SetConfig+0x7ae>
 800968c:	2320      	movs	r3, #32
 800968e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009692:	e2aa      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009694:	2340      	movs	r3, #64	@ 0x40
 8009696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969a:	e2a6      	b.n	8009bea <UART_SetConfig+0x7ae>
 800969c:	2380      	movs	r3, #128	@ 0x80
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a2:	e2a2      	b.n	8009bea <UART_SetConfig+0x7ae>
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a35      	ldr	r2, [pc, #212]	@ (8009780 <UART_SetConfig+0x344>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d130      	bne.n	8009710 <UART_SetConfig+0x2d4>
 80096ae:	4b31      	ldr	r3, [pc, #196]	@ (8009774 <UART_SetConfig+0x338>)
 80096b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096b2:	f003 0307 	and.w	r3, r3, #7
 80096b6:	2b05      	cmp	r3, #5
 80096b8:	d826      	bhi.n	8009708 <UART_SetConfig+0x2cc>
 80096ba:	a201      	add	r2, pc, #4	@ (adr r2, 80096c0 <UART_SetConfig+0x284>)
 80096bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c0:	080096d9 	.word	0x080096d9
 80096c4:	080096e1 	.word	0x080096e1
 80096c8:	080096e9 	.word	0x080096e9
 80096cc:	080096f1 	.word	0x080096f1
 80096d0:	080096f9 	.word	0x080096f9
 80096d4:	08009701 	.word	0x08009701
 80096d8:	2300      	movs	r3, #0
 80096da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096de:	e284      	b.n	8009bea <UART_SetConfig+0x7ae>
 80096e0:	2304      	movs	r3, #4
 80096e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e6:	e280      	b.n	8009bea <UART_SetConfig+0x7ae>
 80096e8:	2308      	movs	r3, #8
 80096ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ee:	e27c      	b.n	8009bea <UART_SetConfig+0x7ae>
 80096f0:	2310      	movs	r3, #16
 80096f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f6:	e278      	b.n	8009bea <UART_SetConfig+0x7ae>
 80096f8:	2320      	movs	r3, #32
 80096fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fe:	e274      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009700:	2340      	movs	r3, #64	@ 0x40
 8009702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009706:	e270      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009708:	2380      	movs	r3, #128	@ 0x80
 800970a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970e:	e26c      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a1b      	ldr	r2, [pc, #108]	@ (8009784 <UART_SetConfig+0x348>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d142      	bne.n	80097a0 <UART_SetConfig+0x364>
 800971a:	4b16      	ldr	r3, [pc, #88]	@ (8009774 <UART_SetConfig+0x338>)
 800971c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800971e:	f003 0307 	and.w	r3, r3, #7
 8009722:	2b05      	cmp	r3, #5
 8009724:	d838      	bhi.n	8009798 <UART_SetConfig+0x35c>
 8009726:	a201      	add	r2, pc, #4	@ (adr r2, 800972c <UART_SetConfig+0x2f0>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	08009745 	.word	0x08009745
 8009730:	0800974d 	.word	0x0800974d
 8009734:	08009755 	.word	0x08009755
 8009738:	0800975d 	.word	0x0800975d
 800973c:	08009789 	.word	0x08009789
 8009740:	08009791 	.word	0x08009791
 8009744:	2300      	movs	r3, #0
 8009746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800974a:	e24e      	b.n	8009bea <UART_SetConfig+0x7ae>
 800974c:	2304      	movs	r3, #4
 800974e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009752:	e24a      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009754:	2308      	movs	r3, #8
 8009756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975a:	e246      	b.n	8009bea <UART_SetConfig+0x7ae>
 800975c:	2310      	movs	r3, #16
 800975e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009762:	e242      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009764:	cfff69f3 	.word	0xcfff69f3
 8009768:	58000c00 	.word	0x58000c00
 800976c:	11fff4ff 	.word	0x11fff4ff
 8009770:	40011000 	.word	0x40011000
 8009774:	58024400 	.word	0x58024400
 8009778:	40004400 	.word	0x40004400
 800977c:	40004800 	.word	0x40004800
 8009780:	40004c00 	.word	0x40004c00
 8009784:	40005000 	.word	0x40005000
 8009788:	2320      	movs	r3, #32
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978e:	e22c      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009790:	2340      	movs	r3, #64	@ 0x40
 8009792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009796:	e228      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009798:	2380      	movs	r3, #128	@ 0x80
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979e:	e224      	b.n	8009bea <UART_SetConfig+0x7ae>
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4ab1      	ldr	r2, [pc, #708]	@ (8009a6c <UART_SetConfig+0x630>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d176      	bne.n	8009898 <UART_SetConfig+0x45c>
 80097aa:	4bb1      	ldr	r3, [pc, #708]	@ (8009a70 <UART_SetConfig+0x634>)
 80097ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097b2:	2b28      	cmp	r3, #40	@ 0x28
 80097b4:	d86c      	bhi.n	8009890 <UART_SetConfig+0x454>
 80097b6:	a201      	add	r2, pc, #4	@ (adr r2, 80097bc <UART_SetConfig+0x380>)
 80097b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097bc:	08009861 	.word	0x08009861
 80097c0:	08009891 	.word	0x08009891
 80097c4:	08009891 	.word	0x08009891
 80097c8:	08009891 	.word	0x08009891
 80097cc:	08009891 	.word	0x08009891
 80097d0:	08009891 	.word	0x08009891
 80097d4:	08009891 	.word	0x08009891
 80097d8:	08009891 	.word	0x08009891
 80097dc:	08009869 	.word	0x08009869
 80097e0:	08009891 	.word	0x08009891
 80097e4:	08009891 	.word	0x08009891
 80097e8:	08009891 	.word	0x08009891
 80097ec:	08009891 	.word	0x08009891
 80097f0:	08009891 	.word	0x08009891
 80097f4:	08009891 	.word	0x08009891
 80097f8:	08009891 	.word	0x08009891
 80097fc:	08009871 	.word	0x08009871
 8009800:	08009891 	.word	0x08009891
 8009804:	08009891 	.word	0x08009891
 8009808:	08009891 	.word	0x08009891
 800980c:	08009891 	.word	0x08009891
 8009810:	08009891 	.word	0x08009891
 8009814:	08009891 	.word	0x08009891
 8009818:	08009891 	.word	0x08009891
 800981c:	08009879 	.word	0x08009879
 8009820:	08009891 	.word	0x08009891
 8009824:	08009891 	.word	0x08009891
 8009828:	08009891 	.word	0x08009891
 800982c:	08009891 	.word	0x08009891
 8009830:	08009891 	.word	0x08009891
 8009834:	08009891 	.word	0x08009891
 8009838:	08009891 	.word	0x08009891
 800983c:	08009881 	.word	0x08009881
 8009840:	08009891 	.word	0x08009891
 8009844:	08009891 	.word	0x08009891
 8009848:	08009891 	.word	0x08009891
 800984c:	08009891 	.word	0x08009891
 8009850:	08009891 	.word	0x08009891
 8009854:	08009891 	.word	0x08009891
 8009858:	08009891 	.word	0x08009891
 800985c:	08009889 	.word	0x08009889
 8009860:	2301      	movs	r3, #1
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009866:	e1c0      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009868:	2304      	movs	r3, #4
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986e:	e1bc      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009870:	2308      	movs	r3, #8
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009876:	e1b8      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009878:	2310      	movs	r3, #16
 800987a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987e:	e1b4      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009880:	2320      	movs	r3, #32
 8009882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009886:	e1b0      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009888:	2340      	movs	r3, #64	@ 0x40
 800988a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988e:	e1ac      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009890:	2380      	movs	r3, #128	@ 0x80
 8009892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009896:	e1a8      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a75      	ldr	r2, [pc, #468]	@ (8009a74 <UART_SetConfig+0x638>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d130      	bne.n	8009904 <UART_SetConfig+0x4c8>
 80098a2:	4b73      	ldr	r3, [pc, #460]	@ (8009a70 <UART_SetConfig+0x634>)
 80098a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098a6:	f003 0307 	and.w	r3, r3, #7
 80098aa:	2b05      	cmp	r3, #5
 80098ac:	d826      	bhi.n	80098fc <UART_SetConfig+0x4c0>
 80098ae:	a201      	add	r2, pc, #4	@ (adr r2, 80098b4 <UART_SetConfig+0x478>)
 80098b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b4:	080098cd 	.word	0x080098cd
 80098b8:	080098d5 	.word	0x080098d5
 80098bc:	080098dd 	.word	0x080098dd
 80098c0:	080098e5 	.word	0x080098e5
 80098c4:	080098ed 	.word	0x080098ed
 80098c8:	080098f5 	.word	0x080098f5
 80098cc:	2300      	movs	r3, #0
 80098ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d2:	e18a      	b.n	8009bea <UART_SetConfig+0x7ae>
 80098d4:	2304      	movs	r3, #4
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098da:	e186      	b.n	8009bea <UART_SetConfig+0x7ae>
 80098dc:	2308      	movs	r3, #8
 80098de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e2:	e182      	b.n	8009bea <UART_SetConfig+0x7ae>
 80098e4:	2310      	movs	r3, #16
 80098e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ea:	e17e      	b.n	8009bea <UART_SetConfig+0x7ae>
 80098ec:	2320      	movs	r3, #32
 80098ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f2:	e17a      	b.n	8009bea <UART_SetConfig+0x7ae>
 80098f4:	2340      	movs	r3, #64	@ 0x40
 80098f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fa:	e176      	b.n	8009bea <UART_SetConfig+0x7ae>
 80098fc:	2380      	movs	r3, #128	@ 0x80
 80098fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009902:	e172      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a5b      	ldr	r2, [pc, #364]	@ (8009a78 <UART_SetConfig+0x63c>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d130      	bne.n	8009970 <UART_SetConfig+0x534>
 800990e:	4b58      	ldr	r3, [pc, #352]	@ (8009a70 <UART_SetConfig+0x634>)
 8009910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009912:	f003 0307 	and.w	r3, r3, #7
 8009916:	2b05      	cmp	r3, #5
 8009918:	d826      	bhi.n	8009968 <UART_SetConfig+0x52c>
 800991a:	a201      	add	r2, pc, #4	@ (adr r2, 8009920 <UART_SetConfig+0x4e4>)
 800991c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009920:	08009939 	.word	0x08009939
 8009924:	08009941 	.word	0x08009941
 8009928:	08009949 	.word	0x08009949
 800992c:	08009951 	.word	0x08009951
 8009930:	08009959 	.word	0x08009959
 8009934:	08009961 	.word	0x08009961
 8009938:	2300      	movs	r3, #0
 800993a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993e:	e154      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009940:	2304      	movs	r3, #4
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009946:	e150      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009948:	2308      	movs	r3, #8
 800994a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994e:	e14c      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009950:	2310      	movs	r3, #16
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009956:	e148      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009958:	2320      	movs	r3, #32
 800995a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995e:	e144      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009960:	2340      	movs	r3, #64	@ 0x40
 8009962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009966:	e140      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009968:	2380      	movs	r3, #128	@ 0x80
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996e:	e13c      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a41      	ldr	r2, [pc, #260]	@ (8009a7c <UART_SetConfig+0x640>)
 8009976:	4293      	cmp	r3, r2
 8009978:	f040 8082 	bne.w	8009a80 <UART_SetConfig+0x644>
 800997c:	4b3c      	ldr	r3, [pc, #240]	@ (8009a70 <UART_SetConfig+0x634>)
 800997e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009980:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009984:	2b28      	cmp	r3, #40	@ 0x28
 8009986:	d86d      	bhi.n	8009a64 <UART_SetConfig+0x628>
 8009988:	a201      	add	r2, pc, #4	@ (adr r2, 8009990 <UART_SetConfig+0x554>)
 800998a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998e:	bf00      	nop
 8009990:	08009a35 	.word	0x08009a35
 8009994:	08009a65 	.word	0x08009a65
 8009998:	08009a65 	.word	0x08009a65
 800999c:	08009a65 	.word	0x08009a65
 80099a0:	08009a65 	.word	0x08009a65
 80099a4:	08009a65 	.word	0x08009a65
 80099a8:	08009a65 	.word	0x08009a65
 80099ac:	08009a65 	.word	0x08009a65
 80099b0:	08009a3d 	.word	0x08009a3d
 80099b4:	08009a65 	.word	0x08009a65
 80099b8:	08009a65 	.word	0x08009a65
 80099bc:	08009a65 	.word	0x08009a65
 80099c0:	08009a65 	.word	0x08009a65
 80099c4:	08009a65 	.word	0x08009a65
 80099c8:	08009a65 	.word	0x08009a65
 80099cc:	08009a65 	.word	0x08009a65
 80099d0:	08009a45 	.word	0x08009a45
 80099d4:	08009a65 	.word	0x08009a65
 80099d8:	08009a65 	.word	0x08009a65
 80099dc:	08009a65 	.word	0x08009a65
 80099e0:	08009a65 	.word	0x08009a65
 80099e4:	08009a65 	.word	0x08009a65
 80099e8:	08009a65 	.word	0x08009a65
 80099ec:	08009a65 	.word	0x08009a65
 80099f0:	08009a4d 	.word	0x08009a4d
 80099f4:	08009a65 	.word	0x08009a65
 80099f8:	08009a65 	.word	0x08009a65
 80099fc:	08009a65 	.word	0x08009a65
 8009a00:	08009a65 	.word	0x08009a65
 8009a04:	08009a65 	.word	0x08009a65
 8009a08:	08009a65 	.word	0x08009a65
 8009a0c:	08009a65 	.word	0x08009a65
 8009a10:	08009a55 	.word	0x08009a55
 8009a14:	08009a65 	.word	0x08009a65
 8009a18:	08009a65 	.word	0x08009a65
 8009a1c:	08009a65 	.word	0x08009a65
 8009a20:	08009a65 	.word	0x08009a65
 8009a24:	08009a65 	.word	0x08009a65
 8009a28:	08009a65 	.word	0x08009a65
 8009a2c:	08009a65 	.word	0x08009a65
 8009a30:	08009a5d 	.word	0x08009a5d
 8009a34:	2301      	movs	r3, #1
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a3a:	e0d6      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009a3c:	2304      	movs	r3, #4
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a42:	e0d2      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009a44:	2308      	movs	r3, #8
 8009a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a4a:	e0ce      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009a4c:	2310      	movs	r3, #16
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a52:	e0ca      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009a54:	2320      	movs	r3, #32
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a5a:	e0c6      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009a5c:	2340      	movs	r3, #64	@ 0x40
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a62:	e0c2      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009a64:	2380      	movs	r3, #128	@ 0x80
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a6a:	e0be      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009a6c:	40011400 	.word	0x40011400
 8009a70:	58024400 	.word	0x58024400
 8009a74:	40007800 	.word	0x40007800
 8009a78:	40007c00 	.word	0x40007c00
 8009a7c:	40011800 	.word	0x40011800
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4aad      	ldr	r2, [pc, #692]	@ (8009d3c <UART_SetConfig+0x900>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d176      	bne.n	8009b78 <UART_SetConfig+0x73c>
 8009a8a:	4bad      	ldr	r3, [pc, #692]	@ (8009d40 <UART_SetConfig+0x904>)
 8009a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a92:	2b28      	cmp	r3, #40	@ 0x28
 8009a94:	d86c      	bhi.n	8009b70 <UART_SetConfig+0x734>
 8009a96:	a201      	add	r2, pc, #4	@ (adr r2, 8009a9c <UART_SetConfig+0x660>)
 8009a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9c:	08009b41 	.word	0x08009b41
 8009aa0:	08009b71 	.word	0x08009b71
 8009aa4:	08009b71 	.word	0x08009b71
 8009aa8:	08009b71 	.word	0x08009b71
 8009aac:	08009b71 	.word	0x08009b71
 8009ab0:	08009b71 	.word	0x08009b71
 8009ab4:	08009b71 	.word	0x08009b71
 8009ab8:	08009b71 	.word	0x08009b71
 8009abc:	08009b49 	.word	0x08009b49
 8009ac0:	08009b71 	.word	0x08009b71
 8009ac4:	08009b71 	.word	0x08009b71
 8009ac8:	08009b71 	.word	0x08009b71
 8009acc:	08009b71 	.word	0x08009b71
 8009ad0:	08009b71 	.word	0x08009b71
 8009ad4:	08009b71 	.word	0x08009b71
 8009ad8:	08009b71 	.word	0x08009b71
 8009adc:	08009b51 	.word	0x08009b51
 8009ae0:	08009b71 	.word	0x08009b71
 8009ae4:	08009b71 	.word	0x08009b71
 8009ae8:	08009b71 	.word	0x08009b71
 8009aec:	08009b71 	.word	0x08009b71
 8009af0:	08009b71 	.word	0x08009b71
 8009af4:	08009b71 	.word	0x08009b71
 8009af8:	08009b71 	.word	0x08009b71
 8009afc:	08009b59 	.word	0x08009b59
 8009b00:	08009b71 	.word	0x08009b71
 8009b04:	08009b71 	.word	0x08009b71
 8009b08:	08009b71 	.word	0x08009b71
 8009b0c:	08009b71 	.word	0x08009b71
 8009b10:	08009b71 	.word	0x08009b71
 8009b14:	08009b71 	.word	0x08009b71
 8009b18:	08009b71 	.word	0x08009b71
 8009b1c:	08009b61 	.word	0x08009b61
 8009b20:	08009b71 	.word	0x08009b71
 8009b24:	08009b71 	.word	0x08009b71
 8009b28:	08009b71 	.word	0x08009b71
 8009b2c:	08009b71 	.word	0x08009b71
 8009b30:	08009b71 	.word	0x08009b71
 8009b34:	08009b71 	.word	0x08009b71
 8009b38:	08009b71 	.word	0x08009b71
 8009b3c:	08009b69 	.word	0x08009b69
 8009b40:	2301      	movs	r3, #1
 8009b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b46:	e050      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009b48:	2304      	movs	r3, #4
 8009b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b4e:	e04c      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009b50:	2308      	movs	r3, #8
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b56:	e048      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009b58:	2310      	movs	r3, #16
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b5e:	e044      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009b60:	2320      	movs	r3, #32
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b66:	e040      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009b68:	2340      	movs	r3, #64	@ 0x40
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6e:	e03c      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009b70:	2380      	movs	r3, #128	@ 0x80
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b76:	e038      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a71      	ldr	r2, [pc, #452]	@ (8009d44 <UART_SetConfig+0x908>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d130      	bne.n	8009be4 <UART_SetConfig+0x7a8>
 8009b82:	4b6f      	ldr	r3, [pc, #444]	@ (8009d40 <UART_SetConfig+0x904>)
 8009b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b05      	cmp	r3, #5
 8009b8c:	d826      	bhi.n	8009bdc <UART_SetConfig+0x7a0>
 8009b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b94 <UART_SetConfig+0x758>)
 8009b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b94:	08009bad 	.word	0x08009bad
 8009b98:	08009bb5 	.word	0x08009bb5
 8009b9c:	08009bbd 	.word	0x08009bbd
 8009ba0:	08009bc5 	.word	0x08009bc5
 8009ba4:	08009bcd 	.word	0x08009bcd
 8009ba8:	08009bd5 	.word	0x08009bd5
 8009bac:	2302      	movs	r3, #2
 8009bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb2:	e01a      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009bb4:	2304      	movs	r3, #4
 8009bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bba:	e016      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009bbc:	2308      	movs	r3, #8
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc2:	e012      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009bc4:	2310      	movs	r3, #16
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bca:	e00e      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009bcc:	2320      	movs	r3, #32
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd2:	e00a      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009bd4:	2340      	movs	r3, #64	@ 0x40
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bda:	e006      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009bdc:	2380      	movs	r3, #128	@ 0x80
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be2:	e002      	b.n	8009bea <UART_SetConfig+0x7ae>
 8009be4:	2380      	movs	r3, #128	@ 0x80
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a55      	ldr	r2, [pc, #340]	@ (8009d44 <UART_SetConfig+0x908>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	f040 80f8 	bne.w	8009de6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009bf6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009bfa:	2b20      	cmp	r3, #32
 8009bfc:	dc46      	bgt.n	8009c8c <UART_SetConfig+0x850>
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	db75      	blt.n	8009cee <UART_SetConfig+0x8b2>
 8009c02:	3b02      	subs	r3, #2
 8009c04:	2b1e      	cmp	r3, #30
 8009c06:	d872      	bhi.n	8009cee <UART_SetConfig+0x8b2>
 8009c08:	a201      	add	r2, pc, #4	@ (adr r2, 8009c10 <UART_SetConfig+0x7d4>)
 8009c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0e:	bf00      	nop
 8009c10:	08009c93 	.word	0x08009c93
 8009c14:	08009cef 	.word	0x08009cef
 8009c18:	08009c9b 	.word	0x08009c9b
 8009c1c:	08009cef 	.word	0x08009cef
 8009c20:	08009cef 	.word	0x08009cef
 8009c24:	08009cef 	.word	0x08009cef
 8009c28:	08009cab 	.word	0x08009cab
 8009c2c:	08009cef 	.word	0x08009cef
 8009c30:	08009cef 	.word	0x08009cef
 8009c34:	08009cef 	.word	0x08009cef
 8009c38:	08009cef 	.word	0x08009cef
 8009c3c:	08009cef 	.word	0x08009cef
 8009c40:	08009cef 	.word	0x08009cef
 8009c44:	08009cef 	.word	0x08009cef
 8009c48:	08009cbb 	.word	0x08009cbb
 8009c4c:	08009cef 	.word	0x08009cef
 8009c50:	08009cef 	.word	0x08009cef
 8009c54:	08009cef 	.word	0x08009cef
 8009c58:	08009cef 	.word	0x08009cef
 8009c5c:	08009cef 	.word	0x08009cef
 8009c60:	08009cef 	.word	0x08009cef
 8009c64:	08009cef 	.word	0x08009cef
 8009c68:	08009cef 	.word	0x08009cef
 8009c6c:	08009cef 	.word	0x08009cef
 8009c70:	08009cef 	.word	0x08009cef
 8009c74:	08009cef 	.word	0x08009cef
 8009c78:	08009cef 	.word	0x08009cef
 8009c7c:	08009cef 	.word	0x08009cef
 8009c80:	08009cef 	.word	0x08009cef
 8009c84:	08009cef 	.word	0x08009cef
 8009c88:	08009ce1 	.word	0x08009ce1
 8009c8c:	2b40      	cmp	r3, #64	@ 0x40
 8009c8e:	d02a      	beq.n	8009ce6 <UART_SetConfig+0x8aa>
 8009c90:	e02d      	b.n	8009cee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009c92:	f7fd fca7 	bl	80075e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009c96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c98:	e02f      	b.n	8009cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fd fcb6 	bl	8007610 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ca8:	e027      	b.n	8009cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009caa:	f107 0318 	add.w	r3, r7, #24
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fd fe02 	bl	80078b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb8:	e01f      	b.n	8009cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cba:	4b21      	ldr	r3, [pc, #132]	@ (8009d40 <UART_SetConfig+0x904>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f003 0320 	and.w	r3, r3, #32
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d009      	beq.n	8009cda <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8009d40 <UART_SetConfig+0x904>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	08db      	lsrs	r3, r3, #3
 8009ccc:	f003 0303 	and.w	r3, r3, #3
 8009cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8009d48 <UART_SetConfig+0x90c>)
 8009cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cd8:	e00f      	b.n	8009cfa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009cda:	4b1b      	ldr	r3, [pc, #108]	@ (8009d48 <UART_SetConfig+0x90c>)
 8009cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cde:	e00c      	b.n	8009cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8009d4c <UART_SetConfig+0x910>)
 8009ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ce4:	e009      	b.n	8009cfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cec:	e005      	b.n	8009cfa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009cf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 81ee 	beq.w	800a0de <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d06:	4a12      	ldr	r2, [pc, #72]	@ (8009d50 <UART_SetConfig+0x914>)
 8009d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d14:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	685a      	ldr	r2, [r3, #4]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	005b      	lsls	r3, r3, #1
 8009d1e:	4413      	add	r3, r2
 8009d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d305      	bcc.n	8009d32 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d910      	bls.n	8009d54 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d38:	e1d1      	b.n	800a0de <UART_SetConfig+0xca2>
 8009d3a:	bf00      	nop
 8009d3c:	40011c00 	.word	0x40011c00
 8009d40:	58024400 	.word	0x58024400
 8009d44:	58000c00 	.word	0x58000c00
 8009d48:	03d09000 	.word	0x03d09000
 8009d4c:	003d0900 	.word	0x003d0900
 8009d50:	08012ce4 	.word	0x08012ce4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d56:	2200      	movs	r2, #0
 8009d58:	60bb      	str	r3, [r7, #8]
 8009d5a:	60fa      	str	r2, [r7, #12]
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d60:	4ac0      	ldr	r2, [pc, #768]	@ (800a064 <UART_SetConfig+0xc28>)
 8009d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	2200      	movs	r2, #0
 8009d6a:	603b      	str	r3, [r7, #0]
 8009d6c:	607a      	str	r2, [r7, #4]
 8009d6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d76:	f7f6 fcdf 	bl	8000738 <__aeabi_uldivmod>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4610      	mov	r0, r2
 8009d80:	4619      	mov	r1, r3
 8009d82:	f04f 0200 	mov.w	r2, #0
 8009d86:	f04f 0300 	mov.w	r3, #0
 8009d8a:	020b      	lsls	r3, r1, #8
 8009d8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d90:	0202      	lsls	r2, r0, #8
 8009d92:	6979      	ldr	r1, [r7, #20]
 8009d94:	6849      	ldr	r1, [r1, #4]
 8009d96:	0849      	lsrs	r1, r1, #1
 8009d98:	2000      	movs	r0, #0
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	4605      	mov	r5, r0
 8009d9e:	eb12 0804 	adds.w	r8, r2, r4
 8009da2:	eb43 0905 	adc.w	r9, r3, r5
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	469a      	mov	sl, r3
 8009dae:	4693      	mov	fp, r2
 8009db0:	4652      	mov	r2, sl
 8009db2:	465b      	mov	r3, fp
 8009db4:	4640      	mov	r0, r8
 8009db6:	4649      	mov	r1, r9
 8009db8:	f7f6 fcbe 	bl	8000738 <__aeabi_uldivmod>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009dca:	d308      	bcc.n	8009dde <UART_SetConfig+0x9a2>
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dd2:	d204      	bcs.n	8009dde <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009dda:	60da      	str	r2, [r3, #12]
 8009ddc:	e17f      	b.n	800a0de <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009de4:	e17b      	b.n	800a0de <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	69db      	ldr	r3, [r3, #28]
 8009dea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009dee:	f040 80bd 	bne.w	8009f6c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009df2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009df6:	2b20      	cmp	r3, #32
 8009df8:	dc48      	bgt.n	8009e8c <UART_SetConfig+0xa50>
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	db7b      	blt.n	8009ef6 <UART_SetConfig+0xaba>
 8009dfe:	2b20      	cmp	r3, #32
 8009e00:	d879      	bhi.n	8009ef6 <UART_SetConfig+0xaba>
 8009e02:	a201      	add	r2, pc, #4	@ (adr r2, 8009e08 <UART_SetConfig+0x9cc>)
 8009e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e08:	08009e93 	.word	0x08009e93
 8009e0c:	08009e9b 	.word	0x08009e9b
 8009e10:	08009ef7 	.word	0x08009ef7
 8009e14:	08009ef7 	.word	0x08009ef7
 8009e18:	08009ea3 	.word	0x08009ea3
 8009e1c:	08009ef7 	.word	0x08009ef7
 8009e20:	08009ef7 	.word	0x08009ef7
 8009e24:	08009ef7 	.word	0x08009ef7
 8009e28:	08009eb3 	.word	0x08009eb3
 8009e2c:	08009ef7 	.word	0x08009ef7
 8009e30:	08009ef7 	.word	0x08009ef7
 8009e34:	08009ef7 	.word	0x08009ef7
 8009e38:	08009ef7 	.word	0x08009ef7
 8009e3c:	08009ef7 	.word	0x08009ef7
 8009e40:	08009ef7 	.word	0x08009ef7
 8009e44:	08009ef7 	.word	0x08009ef7
 8009e48:	08009ec3 	.word	0x08009ec3
 8009e4c:	08009ef7 	.word	0x08009ef7
 8009e50:	08009ef7 	.word	0x08009ef7
 8009e54:	08009ef7 	.word	0x08009ef7
 8009e58:	08009ef7 	.word	0x08009ef7
 8009e5c:	08009ef7 	.word	0x08009ef7
 8009e60:	08009ef7 	.word	0x08009ef7
 8009e64:	08009ef7 	.word	0x08009ef7
 8009e68:	08009ef7 	.word	0x08009ef7
 8009e6c:	08009ef7 	.word	0x08009ef7
 8009e70:	08009ef7 	.word	0x08009ef7
 8009e74:	08009ef7 	.word	0x08009ef7
 8009e78:	08009ef7 	.word	0x08009ef7
 8009e7c:	08009ef7 	.word	0x08009ef7
 8009e80:	08009ef7 	.word	0x08009ef7
 8009e84:	08009ef7 	.word	0x08009ef7
 8009e88:	08009ee9 	.word	0x08009ee9
 8009e8c:	2b40      	cmp	r3, #64	@ 0x40
 8009e8e:	d02e      	beq.n	8009eee <UART_SetConfig+0xab2>
 8009e90:	e031      	b.n	8009ef6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e92:	f7fc f9db 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 8009e96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e98:	e033      	b.n	8009f02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e9a:	f7fc f9ed 	bl	8006278 <HAL_RCC_GetPCLK2Freq>
 8009e9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ea0:	e02f      	b.n	8009f02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fd fbb2 	bl	8007610 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eb0:	e027      	b.n	8009f02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009eb2:	f107 0318 	add.w	r3, r7, #24
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fd fcfe 	bl	80078b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ec0:	e01f      	b.n	8009f02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ec2:	4b69      	ldr	r3, [pc, #420]	@ (800a068 <UART_SetConfig+0xc2c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 0320 	and.w	r3, r3, #32
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d009      	beq.n	8009ee2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ece:	4b66      	ldr	r3, [pc, #408]	@ (800a068 <UART_SetConfig+0xc2c>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	08db      	lsrs	r3, r3, #3
 8009ed4:	f003 0303 	and.w	r3, r3, #3
 8009ed8:	4a64      	ldr	r2, [pc, #400]	@ (800a06c <UART_SetConfig+0xc30>)
 8009eda:	fa22 f303 	lsr.w	r3, r2, r3
 8009ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ee0:	e00f      	b.n	8009f02 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009ee2:	4b62      	ldr	r3, [pc, #392]	@ (800a06c <UART_SetConfig+0xc30>)
 8009ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ee6:	e00c      	b.n	8009f02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ee8:	4b61      	ldr	r3, [pc, #388]	@ (800a070 <UART_SetConfig+0xc34>)
 8009eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eec:	e009      	b.n	8009f02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ef4:	e005      	b.n	8009f02 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 80ea 	beq.w	800a0de <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f0e:	4a55      	ldr	r2, [pc, #340]	@ (800a064 <UART_SetConfig+0xc28>)
 8009f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f14:	461a      	mov	r2, r3
 8009f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f1c:	005a      	lsls	r2, r3, #1
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	085b      	lsrs	r3, r3, #1
 8009f24:	441a      	add	r2, r3
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f32:	2b0f      	cmp	r3, #15
 8009f34:	d916      	bls.n	8009f64 <UART_SetConfig+0xb28>
 8009f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f3c:	d212      	bcs.n	8009f64 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	f023 030f 	bic.w	r3, r3, #15
 8009f46:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f4a:	085b      	lsrs	r3, r3, #1
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	f003 0307 	and.w	r3, r3, #7
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009f56:	4313      	orrs	r3, r2
 8009f58:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009f60:	60da      	str	r2, [r3, #12]
 8009f62:	e0bc      	b.n	800a0de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009f6a:	e0b8      	b.n	800a0de <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f6c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009f70:	2b20      	cmp	r3, #32
 8009f72:	dc4b      	bgt.n	800a00c <UART_SetConfig+0xbd0>
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f2c0 8087 	blt.w	800a088 <UART_SetConfig+0xc4c>
 8009f7a:	2b20      	cmp	r3, #32
 8009f7c:	f200 8084 	bhi.w	800a088 <UART_SetConfig+0xc4c>
 8009f80:	a201      	add	r2, pc, #4	@ (adr r2, 8009f88 <UART_SetConfig+0xb4c>)
 8009f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f86:	bf00      	nop
 8009f88:	0800a013 	.word	0x0800a013
 8009f8c:	0800a01b 	.word	0x0800a01b
 8009f90:	0800a089 	.word	0x0800a089
 8009f94:	0800a089 	.word	0x0800a089
 8009f98:	0800a023 	.word	0x0800a023
 8009f9c:	0800a089 	.word	0x0800a089
 8009fa0:	0800a089 	.word	0x0800a089
 8009fa4:	0800a089 	.word	0x0800a089
 8009fa8:	0800a033 	.word	0x0800a033
 8009fac:	0800a089 	.word	0x0800a089
 8009fb0:	0800a089 	.word	0x0800a089
 8009fb4:	0800a089 	.word	0x0800a089
 8009fb8:	0800a089 	.word	0x0800a089
 8009fbc:	0800a089 	.word	0x0800a089
 8009fc0:	0800a089 	.word	0x0800a089
 8009fc4:	0800a089 	.word	0x0800a089
 8009fc8:	0800a043 	.word	0x0800a043
 8009fcc:	0800a089 	.word	0x0800a089
 8009fd0:	0800a089 	.word	0x0800a089
 8009fd4:	0800a089 	.word	0x0800a089
 8009fd8:	0800a089 	.word	0x0800a089
 8009fdc:	0800a089 	.word	0x0800a089
 8009fe0:	0800a089 	.word	0x0800a089
 8009fe4:	0800a089 	.word	0x0800a089
 8009fe8:	0800a089 	.word	0x0800a089
 8009fec:	0800a089 	.word	0x0800a089
 8009ff0:	0800a089 	.word	0x0800a089
 8009ff4:	0800a089 	.word	0x0800a089
 8009ff8:	0800a089 	.word	0x0800a089
 8009ffc:	0800a089 	.word	0x0800a089
 800a000:	0800a089 	.word	0x0800a089
 800a004:	0800a089 	.word	0x0800a089
 800a008:	0800a07b 	.word	0x0800a07b
 800a00c:	2b40      	cmp	r3, #64	@ 0x40
 800a00e:	d037      	beq.n	800a080 <UART_SetConfig+0xc44>
 800a010:	e03a      	b.n	800a088 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a012:	f7fc f91b 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 800a016:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a018:	e03c      	b.n	800a094 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a01a:	f7fc f92d 	bl	8006278 <HAL_RCC_GetPCLK2Freq>
 800a01e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a020:	e038      	b.n	800a094 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a026:	4618      	mov	r0, r3
 800a028:	f7fd faf2 	bl	8007610 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a030:	e030      	b.n	800a094 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a032:	f107 0318 	add.w	r3, r7, #24
 800a036:	4618      	mov	r0, r3
 800a038:	f7fd fc3e 	bl	80078b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a040:	e028      	b.n	800a094 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a042:	4b09      	ldr	r3, [pc, #36]	@ (800a068 <UART_SetConfig+0xc2c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0320 	and.w	r3, r3, #32
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d012      	beq.n	800a074 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a04e:	4b06      	ldr	r3, [pc, #24]	@ (800a068 <UART_SetConfig+0xc2c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	08db      	lsrs	r3, r3, #3
 800a054:	f003 0303 	and.w	r3, r3, #3
 800a058:	4a04      	ldr	r2, [pc, #16]	@ (800a06c <UART_SetConfig+0xc30>)
 800a05a:	fa22 f303 	lsr.w	r3, r2, r3
 800a05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a060:	e018      	b.n	800a094 <UART_SetConfig+0xc58>
 800a062:	bf00      	nop
 800a064:	08012ce4 	.word	0x08012ce4
 800a068:	58024400 	.word	0x58024400
 800a06c:	03d09000 	.word	0x03d09000
 800a070:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a074:	4b24      	ldr	r3, [pc, #144]	@ (800a108 <UART_SetConfig+0xccc>)
 800a076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a078:	e00c      	b.n	800a094 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a07a:	4b24      	ldr	r3, [pc, #144]	@ (800a10c <UART_SetConfig+0xcd0>)
 800a07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a07e:	e009      	b.n	800a094 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a080:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a086:	e005      	b.n	800a094 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a088:	2300      	movs	r3, #0
 800a08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a092:	bf00      	nop
    }

    if (pclk != 0U)
 800a094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a096:	2b00      	cmp	r3, #0
 800a098:	d021      	beq.n	800a0de <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a09e:	4a1c      	ldr	r2, [pc, #112]	@ (800a110 <UART_SetConfig+0xcd4>)
 800a0a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0a8:	fbb3 f2f2 	udiv	r2, r3, r2
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	085b      	lsrs	r3, r3, #1
 800a0b2:	441a      	add	r2, r3
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c0:	2b0f      	cmp	r3, #15
 800a0c2:	d909      	bls.n	800a0d8 <UART_SetConfig+0xc9c>
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0ca:	d205      	bcs.n	800a0d8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	60da      	str	r2, [r3, #12]
 800a0d6:	e002      	b.n	800a0de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a0fa:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3748      	adds	r7, #72	@ 0x48
 800a102:	46bd      	mov	sp, r7
 800a104:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a108:	03d09000 	.word	0x03d09000
 800a10c:	003d0900 	.word	0x003d0900
 800a110:	08012ce4 	.word	0x08012ce4

0800a114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a120:	f003 0308 	and.w	r3, r3, #8
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00a      	beq.n	800a13e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	430a      	orrs	r2, r1
 800a13c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a142:	f003 0301 	and.w	r3, r3, #1
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00a      	beq.n	800a160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	430a      	orrs	r2, r1
 800a15e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a164:	f003 0302 	and.w	r3, r3, #2
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00a      	beq.n	800a182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	430a      	orrs	r2, r1
 800a180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a186:	f003 0304 	and.w	r3, r3, #4
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00a      	beq.n	800a1a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	430a      	orrs	r2, r1
 800a1a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a8:	f003 0310 	and.w	r3, r3, #16
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00a      	beq.n	800a1c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	430a      	orrs	r2, r1
 800a1c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ca:	f003 0320 	and.w	r3, r3, #32
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00a      	beq.n	800a1e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	430a      	orrs	r2, r1
 800a1e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d01a      	beq.n	800a22a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	430a      	orrs	r2, r1
 800a208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a20e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a212:	d10a      	bne.n	800a22a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	430a      	orrs	r2, r1
 800a228:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a22e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00a      	beq.n	800a24c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	430a      	orrs	r2, r1
 800a24a:	605a      	str	r2, [r3, #4]
  }
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b098      	sub	sp, #96	@ 0x60
 800a25c:	af02      	add	r7, sp, #8
 800a25e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a268:	f7f8 fdce 	bl	8002e08 <HAL_GetTick>
 800a26c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f003 0308 	and.w	r3, r3, #8
 800a278:	2b08      	cmp	r3, #8
 800a27a:	d12f      	bne.n	800a2dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a27c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a284:	2200      	movs	r2, #0
 800a286:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f88e 	bl	800a3ac <UART_WaitOnFlagUntilTimeout>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d022      	beq.n	800a2dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a29e:	e853 3f00 	ldrex	r3, [r3]
 800a2a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a2ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2bc:	e841 2300 	strex	r3, r2, [r1]
 800a2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a2c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1e6      	bne.n	800a296 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2220      	movs	r2, #32
 800a2cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e063      	b.n	800a3a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 0304 	and.w	r3, r3, #4
 800a2e6:	2b04      	cmp	r3, #4
 800a2e8:	d149      	bne.n	800a37e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f857 	bl	800a3ac <UART_WaitOnFlagUntilTimeout>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d03c      	beq.n	800a37e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30c:	e853 3f00 	ldrex	r3, [r3]
 800a310:	623b      	str	r3, [r7, #32]
   return(result);
 800a312:	6a3b      	ldr	r3, [r7, #32]
 800a314:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a318:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a322:	633b      	str	r3, [r7, #48]	@ 0x30
 800a324:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a326:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a32a:	e841 2300 	strex	r3, r2, [r1]
 800a32e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1e6      	bne.n	800a304 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3308      	adds	r3, #8
 800a33c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	e853 3f00 	ldrex	r3, [r3]
 800a344:	60fb      	str	r3, [r7, #12]
   return(result);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f023 0301 	bic.w	r3, r3, #1
 800a34c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	3308      	adds	r3, #8
 800a354:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a356:	61fa      	str	r2, [r7, #28]
 800a358:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35a:	69b9      	ldr	r1, [r7, #24]
 800a35c:	69fa      	ldr	r2, [r7, #28]
 800a35e:	e841 2300 	strex	r3, r2, [r1]
 800a362:	617b      	str	r3, [r7, #20]
   return(result);
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1e5      	bne.n	800a336 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2220      	movs	r2, #32
 800a36e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e012      	b.n	800a3a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2220      	movs	r2, #32
 800a382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2220      	movs	r2, #32
 800a38a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3758      	adds	r7, #88	@ 0x58
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	603b      	str	r3, [r7, #0]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3bc:	e04f      	b.n	800a45e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c4:	d04b      	beq.n	800a45e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3c6:	f7f8 fd1f 	bl	8002e08 <HAL_GetTick>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	69ba      	ldr	r2, [r7, #24]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d302      	bcc.n	800a3dc <UART_WaitOnFlagUntilTimeout+0x30>
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d101      	bne.n	800a3e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	e04e      	b.n	800a47e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 0304 	and.w	r3, r3, #4
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d037      	beq.n	800a45e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	2b80      	cmp	r3, #128	@ 0x80
 800a3f2:	d034      	beq.n	800a45e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	2b40      	cmp	r3, #64	@ 0x40
 800a3f8:	d031      	beq.n	800a45e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	69db      	ldr	r3, [r3, #28]
 800a400:	f003 0308 	and.w	r3, r3, #8
 800a404:	2b08      	cmp	r3, #8
 800a406:	d110      	bne.n	800a42a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2208      	movs	r2, #8
 800a40e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f000 f95b 	bl	800a6cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2208      	movs	r2, #8
 800a41a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	e029      	b.n	800a47e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	69db      	ldr	r3, [r3, #28]
 800a430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a438:	d111      	bne.n	800a45e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a442:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f000 f941 	bl	800a6cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2220      	movs	r2, #32
 800a44e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2200      	movs	r2, #0
 800a456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
 800a45c:	e00f      	b.n	800a47e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	69da      	ldr	r2, [r3, #28]
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	4013      	ands	r3, r2
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	bf0c      	ite	eq
 800a46e:	2301      	moveq	r3, #1
 800a470:	2300      	movne	r3, #0
 800a472:	b2db      	uxtb	r3, r3
 800a474:	461a      	mov	r2, r3
 800a476:	79fb      	ldrb	r3, [r7, #7]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d0a0      	beq.n	800a3be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
	...

0800a488 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a488:	b480      	push	{r7}
 800a48a:	b0a3      	sub	sp, #140	@ 0x8c
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	4613      	mov	r3, r2
 800a494:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	88fa      	ldrh	r2, [r7, #6]
 800a4a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	88fa      	ldrh	r2, [r7, #6]
 800a4a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4ba:	d10e      	bne.n	800a4da <UART_Start_Receive_IT+0x52>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d105      	bne.n	800a4d0 <UART_Start_Receive_IT+0x48>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a4ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a4ce:	e02d      	b.n	800a52c <UART_Start_Receive_IT+0xa4>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	22ff      	movs	r2, #255	@ 0xff
 800a4d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a4d8:	e028      	b.n	800a52c <UART_Start_Receive_IT+0xa4>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10d      	bne.n	800a4fe <UART_Start_Receive_IT+0x76>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d104      	bne.n	800a4f4 <UART_Start_Receive_IT+0x6c>
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	22ff      	movs	r2, #255	@ 0xff
 800a4ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a4f2:	e01b      	b.n	800a52c <UART_Start_Receive_IT+0xa4>
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	227f      	movs	r2, #127	@ 0x7f
 800a4f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a4fc:	e016      	b.n	800a52c <UART_Start_Receive_IT+0xa4>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a506:	d10d      	bne.n	800a524 <UART_Start_Receive_IT+0x9c>
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d104      	bne.n	800a51a <UART_Start_Receive_IT+0x92>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	227f      	movs	r2, #127	@ 0x7f
 800a514:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a518:	e008      	b.n	800a52c <UART_Start_Receive_IT+0xa4>
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	223f      	movs	r2, #63	@ 0x3f
 800a51e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a522:	e003      	b.n	800a52c <UART_Start_Receive_IT+0xa4>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2222      	movs	r2, #34	@ 0x22
 800a538:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3308      	adds	r3, #8
 800a542:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a544:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a546:	e853 3f00 	ldrex	r3, [r3]
 800a54a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a54c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a54e:	f043 0301 	orr.w	r3, r3, #1
 800a552:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3308      	adds	r3, #8
 800a55c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a560:	673a      	str	r2, [r7, #112]	@ 0x70
 800a562:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a564:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a566:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a568:	e841 2300 	strex	r3, r2, [r1]
 800a56c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a56e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1e3      	bne.n	800a53c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a57c:	d14f      	bne.n	800a61e <UART_Start_Receive_IT+0x196>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a584:	88fa      	ldrh	r2, [r7, #6]
 800a586:	429a      	cmp	r2, r3
 800a588:	d349      	bcc.n	800a61e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a592:	d107      	bne.n	800a5a4 <UART_Start_Receive_IT+0x11c>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d103      	bne.n	800a5a4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	4a47      	ldr	r2, [pc, #284]	@ (800a6bc <UART_Start_Receive_IT+0x234>)
 800a5a0:	675a      	str	r2, [r3, #116]	@ 0x74
 800a5a2:	e002      	b.n	800a5aa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	4a46      	ldr	r2, [pc, #280]	@ (800a6c0 <UART_Start_Receive_IT+0x238>)
 800a5a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d01a      	beq.n	800a5e8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5ba:	e853 3f00 	ldrex	r3, [r3]
 800a5be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a5c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a5d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5d6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a5da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a5dc:	e841 2300 	strex	r3, r2, [r1]
 800a5e0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a5e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d1e4      	bne.n	800a5b2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	3308      	adds	r3, #8
 800a5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5f2:	e853 3f00 	ldrex	r3, [r3]
 800a5f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3308      	adds	r3, #8
 800a606:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a608:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a60a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a60e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a610:	e841 2300 	strex	r3, r2, [r1]
 800a614:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1e5      	bne.n	800a5e8 <UART_Start_Receive_IT+0x160>
 800a61c:	e046      	b.n	800a6ac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a626:	d107      	bne.n	800a638 <UART_Start_Receive_IT+0x1b0>
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d103      	bne.n	800a638 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	4a24      	ldr	r2, [pc, #144]	@ (800a6c4 <UART_Start_Receive_IT+0x23c>)
 800a634:	675a      	str	r2, [r3, #116]	@ 0x74
 800a636:	e002      	b.n	800a63e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	4a23      	ldr	r2, [pc, #140]	@ (800a6c8 <UART_Start_Receive_IT+0x240>)
 800a63c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d019      	beq.n	800a67a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64e:	e853 3f00 	ldrex	r3, [r3]
 800a652:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a656:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a65a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	461a      	mov	r2, r3
 800a662:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a664:	637b      	str	r3, [r7, #52]	@ 0x34
 800a666:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a668:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a66a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a66c:	e841 2300 	strex	r3, r2, [r1]
 800a670:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1e6      	bne.n	800a646 <UART_Start_Receive_IT+0x1be>
 800a678:	e018      	b.n	800a6ac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	e853 3f00 	ldrex	r3, [r3]
 800a686:	613b      	str	r3, [r7, #16]
   return(result);
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	f043 0320 	orr.w	r3, r3, #32
 800a68e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	461a      	mov	r2, r3
 800a696:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a698:	623b      	str	r3, [r7, #32]
 800a69a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69c:	69f9      	ldr	r1, [r7, #28]
 800a69e:	6a3a      	ldr	r2, [r7, #32]
 800a6a0:	e841 2300 	strex	r3, r2, [r1]
 800a6a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1e6      	bne.n	800a67a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	378c      	adds	r7, #140	@ 0x8c
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	0800aeed 	.word	0x0800aeed
 800a6c0:	0800ab8d 	.word	0x0800ab8d
 800a6c4:	0800a9d5 	.word	0x0800a9d5
 800a6c8:	0800a81d 	.word	0x0800a81d

0800a6cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b095      	sub	sp, #84	@ 0x54
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6dc:	e853 3f00 	ldrex	r3, [r3]
 800a6e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6fa:	e841 2300 	strex	r3, r2, [r1]
 800a6fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1e6      	bne.n	800a6d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3308      	adds	r3, #8
 800a70c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	e853 3f00 	ldrex	r3, [r3]
 800a714:	61fb      	str	r3, [r7, #28]
   return(result);
 800a716:	69fa      	ldr	r2, [r7, #28]
 800a718:	4b1e      	ldr	r3, [pc, #120]	@ (800a794 <UART_EndRxTransfer+0xc8>)
 800a71a:	4013      	ands	r3, r2
 800a71c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3308      	adds	r3, #8
 800a724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a728:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a72c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a72e:	e841 2300 	strex	r3, r2, [r1]
 800a732:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1e5      	bne.n	800a706 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d118      	bne.n	800a774 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	e853 3f00 	ldrex	r3, [r3]
 800a74e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	f023 0310 	bic.w	r3, r3, #16
 800a756:	647b      	str	r3, [r7, #68]	@ 0x44
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	461a      	mov	r2, r3
 800a75e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a760:	61bb      	str	r3, [r7, #24]
 800a762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a764:	6979      	ldr	r1, [r7, #20]
 800a766:	69ba      	ldr	r2, [r7, #24]
 800a768:	e841 2300 	strex	r3, r2, [r1]
 800a76c:	613b      	str	r3, [r7, #16]
   return(result);
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1e6      	bne.n	800a742 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2220      	movs	r2, #32
 800a778:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a788:	bf00      	nop
 800a78a:	3754      	adds	r7, #84	@ 0x54
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	effffffe 	.word	0xeffffffe

0800a798 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f7fe fe2a 	bl	8009410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7bc:	bf00      	nop
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b088      	sub	sp, #32
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	e853 3f00 	ldrex	r3, [r3]
 800a7d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7e0:	61fb      	str	r3, [r7, #28]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	61bb      	str	r3, [r7, #24]
 800a7ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ee:	6979      	ldr	r1, [r7, #20]
 800a7f0:	69ba      	ldr	r2, [r7, #24]
 800a7f2:	e841 2300 	strex	r3, r2, [r1]
 800a7f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1e6      	bne.n	800a7cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2220      	movs	r2, #32
 800a802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f7fe fdf5 	bl	80093fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a812:	bf00      	nop
 800a814:	3720      	adds	r7, #32
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
	...

0800a81c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b09c      	sub	sp, #112	@ 0x70
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a82a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a834:	2b22      	cmp	r3, #34	@ 0x22
 800a836:	f040 80be 	bne.w	800a9b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a840:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a844:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a848:	b2d9      	uxtb	r1, r3
 800a84a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a854:	400a      	ands	r2, r1
 800a856:	b2d2      	uxtb	r2, r2
 800a858:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a85e:	1c5a      	adds	r2, r3, #1
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	3b01      	subs	r3, #1
 800a86e:	b29a      	uxth	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f040 80a1 	bne.w	800a9c6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a88c:	e853 3f00 	ldrex	r3, [r3]
 800a890:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a8a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a8aa:	e841 2300 	strex	r3, r2, [r1]
 800a8ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a8b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1e6      	bne.n	800a884 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c0:	e853 3f00 	ldrex	r3, [r3]
 800a8c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a8c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8c8:	f023 0301 	bic.w	r3, r3, #1
 800a8cc:	667b      	str	r3, [r7, #100]	@ 0x64
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3308      	adds	r3, #8
 800a8d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a8d6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a8d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a8dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8de:	e841 2300 	strex	r3, r2, [r1]
 800a8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a8e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1e5      	bne.n	800a8b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2220      	movs	r2, #32
 800a8ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a33      	ldr	r2, [pc, #204]	@ (800a9d0 <UART_RxISR_8BIT+0x1b4>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d01f      	beq.n	800a948 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a912:	2b00      	cmp	r3, #0
 800a914:	d018      	beq.n	800a948 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91e:	e853 3f00 	ldrex	r3, [r3]
 800a922:	623b      	str	r3, [r7, #32]
   return(result);
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a92a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	461a      	mov	r2, r3
 800a932:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a934:	633b      	str	r3, [r7, #48]	@ 0x30
 800a936:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a938:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a93a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a93c:	e841 2300 	strex	r3, r2, [r1]
 800a940:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1e6      	bne.n	800a916 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d12e      	bne.n	800a9ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	e853 3f00 	ldrex	r3, [r3]
 800a962:	60fb      	str	r3, [r7, #12]
   return(result);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f023 0310 	bic.w	r3, r3, #16
 800a96a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	461a      	mov	r2, r3
 800a972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a974:	61fb      	str	r3, [r7, #28]
 800a976:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a978:	69b9      	ldr	r1, [r7, #24]
 800a97a:	69fa      	ldr	r2, [r7, #28]
 800a97c:	e841 2300 	strex	r3, r2, [r1]
 800a980:	617b      	str	r3, [r7, #20]
   return(result);
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1e6      	bne.n	800a956 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	69db      	ldr	r3, [r3, #28]
 800a98e:	f003 0310 	and.w	r3, r3, #16
 800a992:	2b10      	cmp	r3, #16
 800a994:	d103      	bne.n	800a99e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2210      	movs	r2, #16
 800a99c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7fe fd3c 	bl	8009424 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a9ac:	e00b      	b.n	800a9c6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7f6 fd6c 	bl	800148c <HAL_UART_RxCpltCallback>
}
 800a9b4:	e007      	b.n	800a9c6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	699a      	ldr	r2, [r3, #24]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f042 0208 	orr.w	r2, r2, #8
 800a9c4:	619a      	str	r2, [r3, #24]
}
 800a9c6:	bf00      	nop
 800a9c8:	3770      	adds	r7, #112	@ 0x70
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	58000c00 	.word	0x58000c00

0800a9d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b09c      	sub	sp, #112	@ 0x70
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a9e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9ec:	2b22      	cmp	r3, #34	@ 0x22
 800a9ee:	f040 80be 	bne.w	800ab6e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa00:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800aa02:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800aa06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800aa0a:	4013      	ands	r3, r2
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa16:	1c9a      	adds	r2, r3, #2
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	3b01      	subs	r3, #1
 800aa26:	b29a      	uxth	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f040 80a1 	bne.w	800ab7e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa44:	e853 3f00 	ldrex	r3, [r3]
 800aa48:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800aa4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa50:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	461a      	mov	r2, r3
 800aa58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa5a:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa5c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aa60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aa62:	e841 2300 	strex	r3, r2, [r1]
 800aa66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aa68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1e6      	bne.n	800aa3c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3308      	adds	r3, #8
 800aa74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa78:	e853 3f00 	ldrex	r3, [r3]
 800aa7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa80:	f023 0301 	bic.w	r3, r3, #1
 800aa84:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	3308      	adds	r3, #8
 800aa8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa8e:	643a      	str	r2, [r7, #64]	@ 0x40
 800aa90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa96:	e841 2300 	strex	r3, r2, [r1]
 800aa9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1e5      	bne.n	800aa6e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a33      	ldr	r2, [pc, #204]	@ (800ab88 <UART_RxISR_16BIT+0x1b4>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d01f      	beq.n	800ab00 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d018      	beq.n	800ab00 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad4:	6a3b      	ldr	r3, [r7, #32]
 800aad6:	e853 3f00 	ldrex	r3, [r3]
 800aada:	61fb      	str	r3, [r7, #28]
   return(result);
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aae2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	461a      	mov	r2, r3
 800aaea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aaec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aaee:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aaf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aaf4:	e841 2300 	strex	r3, r2, [r1]
 800aaf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d1e6      	bne.n	800aace <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d12e      	bne.n	800ab66 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	e853 3f00 	ldrex	r3, [r3]
 800ab1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	f023 0310 	bic.w	r3, r3, #16
 800ab22:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab2c:	61bb      	str	r3, [r7, #24]
 800ab2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab30:	6979      	ldr	r1, [r7, #20]
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	e841 2300 	strex	r3, r2, [r1]
 800ab38:	613b      	str	r3, [r7, #16]
   return(result);
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1e6      	bne.n	800ab0e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	69db      	ldr	r3, [r3, #28]
 800ab46:	f003 0310 	and.w	r3, r3, #16
 800ab4a:	2b10      	cmp	r3, #16
 800ab4c:	d103      	bne.n	800ab56 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2210      	movs	r2, #16
 800ab54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7fe fc60 	bl	8009424 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab64:	e00b      	b.n	800ab7e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7f6 fc90 	bl	800148c <HAL_UART_RxCpltCallback>
}
 800ab6c:	e007      	b.n	800ab7e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	699a      	ldr	r2, [r3, #24]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f042 0208 	orr.w	r2, r2, #8
 800ab7c:	619a      	str	r2, [r3, #24]
}
 800ab7e:	bf00      	nop
 800ab80:	3770      	adds	r7, #112	@ 0x70
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	58000c00 	.word	0x58000c00

0800ab8c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b0ac      	sub	sp, #176	@ 0xb0
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ab9a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	69db      	ldr	r3, [r3, #28]
 800aba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abc2:	2b22      	cmp	r3, #34	@ 0x22
 800abc4:	f040 8180 	bne.w	800aec8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800abce:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800abd2:	e123      	b.n	800ae1c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abda:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800abde:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800abe2:	b2d9      	uxtb	r1, r3
 800abe4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abee:	400a      	ands	r2, r1
 800abf0:	b2d2      	uxtb	r2, r2
 800abf2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abf8:	1c5a      	adds	r2, r3, #1
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	3b01      	subs	r3, #1
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ac1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac1e:	f003 0307 	and.w	r3, r3, #7
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d053      	beq.n	800acce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac2a:	f003 0301 	and.w	r3, r3, #1
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d011      	beq.n	800ac56 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ac32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ac36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00b      	beq.n	800ac56 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2201      	movs	r2, #1
 800ac44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac4c:	f043 0201 	orr.w	r2, r3, #1
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac5a:	f003 0302 	and.w	r3, r3, #2
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d011      	beq.n	800ac86 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ac62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00b      	beq.n	800ac86 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2202      	movs	r2, #2
 800ac74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac7c:	f043 0204 	orr.w	r2, r3, #4
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac8a:	f003 0304 	and.w	r3, r3, #4
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d011      	beq.n	800acb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ac92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac96:	f003 0301 	and.w	r3, r3, #1
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00b      	beq.n	800acb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2204      	movs	r2, #4
 800aca4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acac:	f043 0202 	orr.w	r2, r3, #2
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d006      	beq.n	800acce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7fe fba5 	bl	8009410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f040 80a0 	bne.w	800ae1c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ace4:	e853 3f00 	ldrex	r3, [r3]
 800ace8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800acea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	461a      	mov	r2, r3
 800acfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800acfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ad00:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad02:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ad04:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ad06:	e841 2300 	strex	r3, r2, [r1]
 800ad0a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ad0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1e4      	bne.n	800acdc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	3308      	adds	r3, #8
 800ad18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad1c:	e853 3f00 	ldrex	r3, [r3]
 800ad20:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ad22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad24:	4b6e      	ldr	r3, [pc, #440]	@ (800aee0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800ad26:	4013      	ands	r3, r2
 800ad28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	3308      	adds	r3, #8
 800ad32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ad36:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ad38:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ad3c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ad3e:	e841 2300 	strex	r3, r2, [r1]
 800ad42:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ad44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1e3      	bne.n	800ad12 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2220      	movs	r2, #32
 800ad4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a60      	ldr	r2, [pc, #384]	@ (800aee4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d021      	beq.n	800adac <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d01a      	beq.n	800adac <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad7e:	e853 3f00 	ldrex	r3, [r3]
 800ad82:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ad84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ad8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ad98:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad9a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ad9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ada0:	e841 2300 	strex	r3, r2, [r1]
 800ada4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ada6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1e4      	bne.n	800ad76 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d130      	bne.n	800ae16 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adc2:	e853 3f00 	ldrex	r3, [r3]
 800adc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800adc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adca:	f023 0310 	bic.w	r3, r3, #16
 800adce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	461a      	mov	r2, r3
 800add8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800addc:	643b      	str	r3, [r7, #64]	@ 0x40
 800adde:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ade2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ade4:	e841 2300 	strex	r3, r2, [r1]
 800ade8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800adea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1e4      	bne.n	800adba <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	69db      	ldr	r3, [r3, #28]
 800adf6:	f003 0310 	and.w	r3, r3, #16
 800adfa:	2b10      	cmp	r3, #16
 800adfc:	d103      	bne.n	800ae06 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2210      	movs	r2, #16
 800ae04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7fe fb08 	bl	8009424 <HAL_UARTEx_RxEventCallback>
 800ae14:	e002      	b.n	800ae1c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7f6 fb38 	bl	800148c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ae1c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d006      	beq.n	800ae32 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ae24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae28:	f003 0320 	and.w	r3, r3, #32
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f47f aed1 	bne.w	800abd4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae38:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ae3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d049      	beq.n	800aed8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ae4a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d242      	bcs.n	800aed8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3308      	adds	r3, #8
 800ae58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5a:	6a3b      	ldr	r3, [r7, #32]
 800ae5c:	e853 3f00 	ldrex	r3, [r3]
 800ae60:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3308      	adds	r3, #8
 800ae72:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ae76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae7e:	e841 2300 	strex	r3, r2, [r1]
 800ae82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1e3      	bne.n	800ae52 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a16      	ldr	r2, [pc, #88]	@ (800aee8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ae8e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	e853 3f00 	ldrex	r3, [r3]
 800ae9c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	f043 0320 	orr.w	r3, r3, #32
 800aea4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	461a      	mov	r2, r3
 800aeae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aeb2:	61bb      	str	r3, [r7, #24]
 800aeb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb6:	6979      	ldr	r1, [r7, #20]
 800aeb8:	69ba      	ldr	r2, [r7, #24]
 800aeba:	e841 2300 	strex	r3, r2, [r1]
 800aebe:	613b      	str	r3, [r7, #16]
   return(result);
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1e4      	bne.n	800ae90 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aec6:	e007      	b.n	800aed8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	699a      	ldr	r2, [r3, #24]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f042 0208 	orr.w	r2, r2, #8
 800aed6:	619a      	str	r2, [r3, #24]
}
 800aed8:	bf00      	nop
 800aeda:	37b0      	adds	r7, #176	@ 0xb0
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	effffffe 	.word	0xeffffffe
 800aee4:	58000c00 	.word	0x58000c00
 800aee8:	0800a81d 	.word	0x0800a81d

0800aeec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b0ae      	sub	sp, #184	@ 0xb8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aefa:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	69db      	ldr	r3, [r3, #28]
 800af04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af22:	2b22      	cmp	r3, #34	@ 0x22
 800af24:	f040 8184 	bne.w	800b230 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800af2e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af32:	e127      	b.n	800b184 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af3a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800af46:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800af4a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800af4e:	4013      	ands	r3, r2
 800af50:	b29a      	uxth	r2, r3
 800af52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800af56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af5c:	1c9a      	adds	r2, r3, #2
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af68:	b29b      	uxth	r3, r3
 800af6a:	3b01      	subs	r3, #1
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	69db      	ldr	r3, [r3, #28]
 800af7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800af7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af82:	f003 0307 	and.w	r3, r3, #7
 800af86:	2b00      	cmp	r3, #0
 800af88:	d053      	beq.n	800b032 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af8e:	f003 0301 	and.w	r3, r3, #1
 800af92:	2b00      	cmp	r3, #0
 800af94:	d011      	beq.n	800afba <UART_RxISR_16BIT_FIFOEN+0xce>
 800af96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00b      	beq.n	800afba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2201      	movs	r2, #1
 800afa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afb0:	f043 0201 	orr.w	r2, r3, #1
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800afbe:	f003 0302 	and.w	r3, r3, #2
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d011      	beq.n	800afea <UART_RxISR_16BIT_FIFOEN+0xfe>
 800afc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800afca:	f003 0301 	and.w	r3, r3, #1
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00b      	beq.n	800afea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2202      	movs	r2, #2
 800afd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afe0:	f043 0204 	orr.w	r2, r3, #4
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800afee:	f003 0304 	and.w	r3, r3, #4
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d011      	beq.n	800b01a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800aff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800affa:	f003 0301 	and.w	r3, r3, #1
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00b      	beq.n	800b01a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2204      	movs	r2, #4
 800b008:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b010:	f043 0202 	orr.w	r2, r3, #2
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b020:	2b00      	cmp	r3, #0
 800b022:	d006      	beq.n	800b032 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7fe f9f3 	bl	8009410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b038:	b29b      	uxth	r3, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f040 80a2 	bne.w	800b184 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b048:	e853 3f00 	ldrex	r3, [r3]
 800b04c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b04e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b054:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	461a      	mov	r2, r3
 800b05e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b062:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b066:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b068:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b06a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b06e:	e841 2300 	strex	r3, r2, [r1]
 800b072:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b074:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1e2      	bne.n	800b040 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3308      	adds	r3, #8
 800b080:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b082:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b084:	e853 3f00 	ldrex	r3, [r3]
 800b088:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b08a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b08c:	4b6e      	ldr	r3, [pc, #440]	@ (800b248 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b08e:	4013      	ands	r3, r2
 800b090:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	3308      	adds	r3, #8
 800b09a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b09e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b0a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b0a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b0a6:	e841 2300 	strex	r3, r2, [r1]
 800b0aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b0ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1e3      	bne.n	800b07a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2220      	movs	r2, #32
 800b0b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a60      	ldr	r2, [pc, #384]	@ (800b24c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d021      	beq.n	800b114 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d01a      	beq.n	800b114 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0e6:	e853 3f00 	ldrex	r3, [r3]
 800b0ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b0ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b100:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b102:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b104:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b106:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b108:	e841 2300 	strex	r3, r2, [r1]
 800b10c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b10e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1e4      	bne.n	800b0de <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d130      	bne.n	800b17e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b12a:	e853 3f00 	ldrex	r3, [r3]
 800b12e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b132:	f023 0310 	bic.w	r3, r3, #16
 800b136:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b144:	647b      	str	r3, [r7, #68]	@ 0x44
 800b146:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b148:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b14a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b14c:	e841 2300 	strex	r3, r2, [r1]
 800b150:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1e4      	bne.n	800b122 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	f003 0310 	and.w	r3, r3, #16
 800b162:	2b10      	cmp	r3, #16
 800b164:	d103      	bne.n	800b16e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2210      	movs	r2, #16
 800b16c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b174:	4619      	mov	r1, r3
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7fe f954 	bl	8009424 <HAL_UARTEx_RxEventCallback>
 800b17c:	e002      	b.n	800b184 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7f6 f984 	bl	800148c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b184:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d006      	beq.n	800b19a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b18c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b190:	f003 0320 	and.w	r3, r3, #32
 800b194:	2b00      	cmp	r3, #0
 800b196:	f47f aecd 	bne.w	800af34 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1a0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b1a4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d049      	beq.n	800b240 <UART_RxISR_16BIT_FIFOEN+0x354>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b1b2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d242      	bcs.n	800b240 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	3308      	adds	r3, #8
 800b1c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c4:	e853 3f00 	ldrex	r3, [r3]
 800b1c8:	623b      	str	r3, [r7, #32]
   return(result);
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	3308      	adds	r3, #8
 800b1da:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b1de:	633a      	str	r2, [r7, #48]	@ 0x30
 800b1e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1e6:	e841 2300 	strex	r3, r2, [r1]
 800b1ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1e3      	bne.n	800b1ba <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a16      	ldr	r2, [pc, #88]	@ (800b250 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b1f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	e853 3f00 	ldrex	r3, [r3]
 800b204:	60fb      	str	r3, [r7, #12]
   return(result);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f043 0320 	orr.w	r3, r3, #32
 800b20c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	461a      	mov	r2, r3
 800b216:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b21a:	61fb      	str	r3, [r7, #28]
 800b21c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21e:	69b9      	ldr	r1, [r7, #24]
 800b220:	69fa      	ldr	r2, [r7, #28]
 800b222:	e841 2300 	strex	r3, r2, [r1]
 800b226:	617b      	str	r3, [r7, #20]
   return(result);
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1e4      	bne.n	800b1f8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b22e:	e007      	b.n	800b240 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	699a      	ldr	r2, [r3, #24]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f042 0208 	orr.w	r2, r2, #8
 800b23e:	619a      	str	r2, [r3, #24]
}
 800b240:	bf00      	nop
 800b242:	37b8      	adds	r7, #184	@ 0xb8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	effffffe 	.word	0xeffffffe
 800b24c:	58000c00 	.word	0x58000c00
 800b250:	0800a9d5 	.word	0x0800a9d5

0800b254 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d101      	bne.n	800b2a6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b2a2:	2302      	movs	r3, #2
 800b2a4:	e027      	b.n	800b2f6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2224      	movs	r2, #36	@ 0x24
 800b2b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f022 0201 	bic.w	r2, r2, #1
 800b2cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b2d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2220      	movs	r2, #32
 800b2e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr

0800b302 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b084      	sub	sp, #16
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b312:	2b01      	cmp	r3, #1
 800b314:	d101      	bne.n	800b31a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b316:	2302      	movs	r3, #2
 800b318:	e02d      	b.n	800b376 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2201      	movs	r2, #1
 800b31e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2224      	movs	r2, #36	@ 0x24
 800b326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f022 0201 	bic.w	r2, r2, #1
 800b340:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	683a      	ldr	r2, [r7, #0]
 800b352:	430a      	orrs	r2, r1
 800b354:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f850 	bl	800b3fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2220      	movs	r2, #32
 800b368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b084      	sub	sp, #16
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
 800b386:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d101      	bne.n	800b396 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b392:	2302      	movs	r3, #2
 800b394:	e02d      	b.n	800b3f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2224      	movs	r2, #36	@ 0x24
 800b3a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f022 0201 	bic.w	r2, r2, #1
 800b3bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	683a      	ldr	r2, [r7, #0]
 800b3ce:	430a      	orrs	r2, r1
 800b3d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 f812 	bl	800b3fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2220      	movs	r2, #32
 800b3e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
	...

0800b3fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d108      	bne.n	800b41e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b41c:	e031      	b.n	800b482 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b41e:	2310      	movs	r3, #16
 800b420:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b422:	2310      	movs	r3, #16
 800b424:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	0e5b      	lsrs	r3, r3, #25
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	f003 0307 	and.w	r3, r3, #7
 800b434:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	0f5b      	lsrs	r3, r3, #29
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	f003 0307 	and.w	r3, r3, #7
 800b444:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b446:	7bbb      	ldrb	r3, [r7, #14]
 800b448:	7b3a      	ldrb	r2, [r7, #12]
 800b44a:	4911      	ldr	r1, [pc, #68]	@ (800b490 <UARTEx_SetNbDataToProcess+0x94>)
 800b44c:	5c8a      	ldrb	r2, [r1, r2]
 800b44e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b452:	7b3a      	ldrb	r2, [r7, #12]
 800b454:	490f      	ldr	r1, [pc, #60]	@ (800b494 <UARTEx_SetNbDataToProcess+0x98>)
 800b456:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b458:	fb93 f3f2 	sdiv	r3, r3, r2
 800b45c:	b29a      	uxth	r2, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b464:	7bfb      	ldrb	r3, [r7, #15]
 800b466:	7b7a      	ldrb	r2, [r7, #13]
 800b468:	4909      	ldr	r1, [pc, #36]	@ (800b490 <UARTEx_SetNbDataToProcess+0x94>)
 800b46a:	5c8a      	ldrb	r2, [r1, r2]
 800b46c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b470:	7b7a      	ldrb	r2, [r7, #13]
 800b472:	4908      	ldr	r1, [pc, #32]	@ (800b494 <UARTEx_SetNbDataToProcess+0x98>)
 800b474:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b476:	fb93 f3f2 	sdiv	r3, r3, r2
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b482:	bf00      	nop
 800b484:	3714      	adds	r7, #20
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	08012cfc 	.word	0x08012cfc
 800b494:	08012d04 	.word	0x08012d04

0800b498 <Data_Analyse>:
/**
 * @brief 数据解析函数  如更换MCU平台或更换软件库，只需将串口接收到的值传入该函数即可解析
 * @param  rec 串口接收到的字节数据
 */
void Data_Analyse(uint8_t rec)
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	4603      	mov	r3, r0
 800b4a0:	71fb      	strb	r3, [r7, #7]
		float ActVal[6];
	} posture;
	static uint8_t count = 0;
	static uint8_t i = 0;

	ch = rec;
 800b4a2:	4a48      	ldr	r2, [pc, #288]	@ (800b5c4 <Data_Analyse+0x12c>)
 800b4a4:	79fb      	ldrb	r3, [r7, #7]
 800b4a6:	7013      	strb	r3, [r2, #0]
//	HAL_UART_Transmit(&huart10, &ch, 1, 0xff);
//	HAL_UART_Transmit(&huart10, (uint8_t*) ch, 1, 0xff);
	switch (count)
 800b4a8:	4b47      	ldr	r3, [pc, #284]	@ (800b5c8 <Data_Analyse+0x130>)
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	2b04      	cmp	r3, #4
 800b4ae:	d87c      	bhi.n	800b5aa <Data_Analyse+0x112>
 800b4b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b4b8 <Data_Analyse+0x20>)
 800b4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b6:	bf00      	nop
 800b4b8:	0800b4cd 	.word	0x0800b4cd
 800b4bc:	0800b4eb 	.word	0x0800b4eb
 800b4c0:	0800b517 	.word	0x0800b517
 800b4c4:	0800b54d 	.word	0x0800b54d
 800b4c8:	0800b56b 	.word	0x0800b56b
	{
	case 0:
		if (ch == 0x0d)
 800b4cc:	4b3d      	ldr	r3, [pc, #244]	@ (800b5c4 <Data_Analyse+0x12c>)
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	2b0d      	cmp	r3, #13
 800b4d2:	d106      	bne.n	800b4e2 <Data_Analyse+0x4a>
			count++;
 800b4d4:	4b3c      	ldr	r3, [pc, #240]	@ (800b5c8 <Data_Analyse+0x130>)
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	b2da      	uxtb	r2, r3
 800b4dc:	4b3a      	ldr	r3, [pc, #232]	@ (800b5c8 <Data_Analyse+0x130>)
 800b4de:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b4e0:	e06a      	b.n	800b5b8 <Data_Analyse+0x120>
			count = 0;
 800b4e2:	4b39      	ldr	r3, [pc, #228]	@ (800b5c8 <Data_Analyse+0x130>)
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	701a      	strb	r2, [r3, #0]
		break;
 800b4e8:	e066      	b.n	800b5b8 <Data_Analyse+0x120>
	case 1:
		if (ch == 0x0a)
 800b4ea:	4b36      	ldr	r3, [pc, #216]	@ (800b5c4 <Data_Analyse+0x12c>)
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	2b0a      	cmp	r3, #10
 800b4f0:	d109      	bne.n	800b506 <Data_Analyse+0x6e>
		{
			i = 0;
 800b4f2:	4b36      	ldr	r3, [pc, #216]	@ (800b5cc <Data_Analyse+0x134>)
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	701a      	strb	r2, [r3, #0]
			count++;
 800b4f8:	4b33      	ldr	r3, [pc, #204]	@ (800b5c8 <Data_Analyse+0x130>)
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	4b31      	ldr	r3, [pc, #196]	@ (800b5c8 <Data_Analyse+0x130>)
 800b502:	701a      	strb	r2, [r3, #0]
		}
		else if (ch == 0x0d)
			;
		else
			count = 0;
		break;
 800b504:	e055      	b.n	800b5b2 <Data_Analyse+0x11a>
		else if (ch == 0x0d)
 800b506:	4b2f      	ldr	r3, [pc, #188]	@ (800b5c4 <Data_Analyse+0x12c>)
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	2b0d      	cmp	r3, #13
 800b50c:	d051      	beq.n	800b5b2 <Data_Analyse+0x11a>
			count = 0;
 800b50e:	4b2e      	ldr	r3, [pc, #184]	@ (800b5c8 <Data_Analyse+0x130>)
 800b510:	2200      	movs	r2, #0
 800b512:	701a      	strb	r2, [r3, #0]
		break;
 800b514:	e04d      	b.n	800b5b2 <Data_Analyse+0x11a>
	case 2:
		posture.date[i] = ch;
 800b516:	4b2d      	ldr	r3, [pc, #180]	@ (800b5cc <Data_Analyse+0x134>)
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	461a      	mov	r2, r3
 800b51c:	4b29      	ldr	r3, [pc, #164]	@ (800b5c4 <Data_Analyse+0x12c>)
 800b51e:	7819      	ldrb	r1, [r3, #0]
 800b520:	4b2b      	ldr	r3, [pc, #172]	@ (800b5d0 <Data_Analyse+0x138>)
 800b522:	5499      	strb	r1, [r3, r2]
		i++;
 800b524:	4b29      	ldr	r3, [pc, #164]	@ (800b5cc <Data_Analyse+0x134>)
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	3301      	adds	r3, #1
 800b52a:	b2da      	uxtb	r2, r3
 800b52c:	4b27      	ldr	r3, [pc, #156]	@ (800b5cc <Data_Analyse+0x134>)
 800b52e:	701a      	strb	r2, [r3, #0]
		if (i >= 24)
 800b530:	4b26      	ldr	r3, [pc, #152]	@ (800b5cc <Data_Analyse+0x134>)
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	2b17      	cmp	r3, #23
 800b536:	d93e      	bls.n	800b5b6 <Data_Analyse+0x11e>
		{
			i = 0;
 800b538:	4b24      	ldr	r3, [pc, #144]	@ (800b5cc <Data_Analyse+0x134>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	701a      	strb	r2, [r3, #0]
			count++;
 800b53e:	4b22      	ldr	r3, [pc, #136]	@ (800b5c8 <Data_Analyse+0x130>)
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	3301      	adds	r3, #1
 800b544:	b2da      	uxtb	r2, r3
 800b546:	4b20      	ldr	r3, [pc, #128]	@ (800b5c8 <Data_Analyse+0x130>)
 800b548:	701a      	strb	r2, [r3, #0]
		}
		break;
 800b54a:	e034      	b.n	800b5b6 <Data_Analyse+0x11e>
	case 3:
		if (ch == 0x0a)
 800b54c:	4b1d      	ldr	r3, [pc, #116]	@ (800b5c4 <Data_Analyse+0x12c>)
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	2b0a      	cmp	r3, #10
 800b552:	d106      	bne.n	800b562 <Data_Analyse+0xca>
			count++;
 800b554:	4b1c      	ldr	r3, [pc, #112]	@ (800b5c8 <Data_Analyse+0x130>)
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	3301      	adds	r3, #1
 800b55a:	b2da      	uxtb	r2, r3
 800b55c:	4b1a      	ldr	r3, [pc, #104]	@ (800b5c8 <Data_Analyse+0x130>)
 800b55e:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b560:	e02a      	b.n	800b5b8 <Data_Analyse+0x120>
			count = 0;
 800b562:	4b19      	ldr	r3, [pc, #100]	@ (800b5c8 <Data_Analyse+0x130>)
 800b564:	2200      	movs	r2, #0
 800b566:	701a      	strb	r2, [r3, #0]
		break;
 800b568:	e026      	b.n	800b5b8 <Data_Analyse+0x120>
	case 4:
		if (ch == 0x0d)
 800b56a:	4b16      	ldr	r3, [pc, #88]	@ (800b5c4 <Data_Analyse+0x12c>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	2b0d      	cmp	r3, #13
 800b570:	d117      	bne.n	800b5a2 <Data_Analyse+0x10a>
		{
			zangle = posture.ActVal[0];
 800b572:	4b17      	ldr	r3, [pc, #92]	@ (800b5d0 <Data_Analyse+0x138>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a17      	ldr	r2, [pc, #92]	@ (800b5d4 <Data_Analyse+0x13c>)
 800b578:	6013      	str	r3, [r2, #0]
			xangle = posture.ActVal[1];
 800b57a:	4b15      	ldr	r3, [pc, #84]	@ (800b5d0 <Data_Analyse+0x138>)
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	4a16      	ldr	r2, [pc, #88]	@ (800b5d8 <Data_Analyse+0x140>)
 800b580:	6013      	str	r3, [r2, #0]
			yangle = posture.ActVal[2];
 800b582:	4b13      	ldr	r3, [pc, #76]	@ (800b5d0 <Data_Analyse+0x138>)
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	4a15      	ldr	r2, [pc, #84]	@ (800b5dc <Data_Analyse+0x144>)
 800b588:	6013      	str	r3, [r2, #0]
			pos_x = posture.ActVal[3];
 800b58a:	4b11      	ldr	r3, [pc, #68]	@ (800b5d0 <Data_Analyse+0x138>)
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	4a14      	ldr	r2, [pc, #80]	@ (800b5e0 <Data_Analyse+0x148>)
 800b590:	6013      	str	r3, [r2, #0]
			pos_y = posture.ActVal[4];
 800b592:	4b0f      	ldr	r3, [pc, #60]	@ (800b5d0 <Data_Analyse+0x138>)
 800b594:	691b      	ldr	r3, [r3, #16]
 800b596:	4a13      	ldr	r2, [pc, #76]	@ (800b5e4 <Data_Analyse+0x14c>)
 800b598:	6013      	str	r3, [r2, #0]
			w_z = posture.ActVal[5];
 800b59a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d0 <Data_Analyse+0x138>)
 800b59c:	695b      	ldr	r3, [r3, #20]
 800b59e:	4a12      	ldr	r2, [pc, #72]	@ (800b5e8 <Data_Analyse+0x150>)
 800b5a0:	6013      	str	r3, [r2, #0]
		}
		count = 0;
 800b5a2:	4b09      	ldr	r3, [pc, #36]	@ (800b5c8 <Data_Analyse+0x130>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	701a      	strb	r2, [r3, #0]
		break;
 800b5a8:	e006      	b.n	800b5b8 <Data_Analyse+0x120>
	default:
		count = 0;
 800b5aa:	4b07      	ldr	r3, [pc, #28]	@ (800b5c8 <Data_Analyse+0x130>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	701a      	strb	r2, [r3, #0]
		break;
 800b5b0:	e002      	b.n	800b5b8 <Data_Analyse+0x120>
		break;
 800b5b2:	bf00      	nop
 800b5b4:	e000      	b.n	800b5b8 <Data_Analyse+0x120>
		break;
 800b5b6:	bf00      	nop
	}
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	24000b0c 	.word	0x24000b0c
 800b5c8:	24000b0d 	.word	0x24000b0d
 800b5cc:	24000b0e 	.word	0x24000b0e
 800b5d0:	24000b10 	.word	0x24000b10
 800b5d4:	24000afc 	.word	0x24000afc
 800b5d8:	24000b00 	.word	0x24000b00
 800b5dc:	24000b04 	.word	0x24000b04
 800b5e0:	24000af4 	.word	0x24000af4
 800b5e4:	24000af8 	.word	0x24000af8
 800b5e8:	24000b08 	.word	0x24000b08

0800b5ec <Move_Arm>:
extern float tx_target;
extern float ty_target;
extern bool TX2_ENABLE;
//控制单个舵机运动
//参数：sevoID:舵机ID，Position:转动角度（这里以270°为例）,Time:转动时间
void Move_Arm(uint8_t servoID, int16_t Position, uint16_t Time) {
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	71fb      	strb	r3, [r7, #7]
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	80bb      	strh	r3, [r7, #4]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	807b      	strh	r3, [r7, #2]
	uint8_t TxBuf[11];
	if (servoID > 31 || !(Time > 0) || Position > 32767) {
 800b5fe:	79fb      	ldrb	r3, [r7, #7]
 800b600:	2b1f      	cmp	r3, #31
 800b602:	d82b      	bhi.n	800b65c <Move_Arm+0x70>
 800b604:	887b      	ldrh	r3, [r7, #2]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d028      	beq.n	800b65c <Move_Arm+0x70>
		return;
	}
	TxBuf[0] = FRAME_HEADER;
 800b60a:	2355      	movs	r3, #85	@ 0x55
 800b60c:	733b      	strb	r3, [r7, #12]
	TxBuf[1] = FRAME_HEADER;
 800b60e:	2355      	movs	r3, #85	@ 0x55
 800b610:	737b      	strb	r3, [r7, #13]
	TxBuf[2] = 8;
 800b612:	2308      	movs	r3, #8
 800b614:	73bb      	strb	r3, [r7, #14]
	TxBuf[3] = CMD_SERVO_MOVE;
 800b616:	2303      	movs	r3, #3
 800b618:	73fb      	strb	r3, [r7, #15]
	TxBuf[4] = 1;
 800b61a:	2301      	movs	r3, #1
 800b61c:	743b      	strb	r3, [r7, #16]
	TxBuf[5] = (uint8_t) Time;
 800b61e:	887b      	ldrh	r3, [r7, #2]
 800b620:	b2db      	uxtb	r3, r3
 800b622:	747b      	strb	r3, [r7, #17]
	TxBuf[6] = (uint8_t) (Time >> 8);
 800b624:	887b      	ldrh	r3, [r7, #2]
 800b626:	0a1b      	lsrs	r3, r3, #8
 800b628:	b29b      	uxth	r3, r3
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	74bb      	strb	r3, [r7, #18]
	TxBuf[7] = servoID;
 800b62e:	79fb      	ldrb	r3, [r7, #7]
 800b630:	74fb      	strb	r3, [r7, #19]
	TxBuf[8] = (uint8_t) Position;
 800b632:	88bb      	ldrh	r3, [r7, #4]
 800b634:	b2db      	uxtb	r3, r3
 800b636:	753b      	strb	r3, [r7, #20]
	TxBuf[9] = (uint8_t) (Position >> 8);
 800b638:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b63c:	121b      	asrs	r3, r3, #8
 800b63e:	b21b      	sxth	r3, r3
 800b640:	b2db      	uxtb	r3, r3
 800b642:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&jixiebi_usart, TxBuf, 10, 0xffff);
 800b644:	f107 010c 	add.w	r1, r7, #12
 800b648:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b64c:	220a      	movs	r2, #10
 800b64e:	4805      	ldr	r0, [pc, #20]	@ (800b664 <Move_Arm+0x78>)
 800b650:	f7fd f978 	bl	8008944 <HAL_UART_Transmit>
	HAL_Delay(5);
 800b654:	2005      	movs	r0, #5
 800b656:	f7f7 fbe3 	bl	8002e20 <HAL_Delay>
 800b65a:	e000      	b.n	800b65e <Move_Arm+0x72>
		return;
 800b65c:	bf00      	nop

}
 800b65e:	3718      	adds	r7, #24
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	24000650 	.word	0x24000650

0800b668 <Start>:

}

extern int QR_Flag;
void Start(void) //下降14000
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
	bool temp = Move_Line(RunSpeed, RunAcc, 8250);
 800b66e:	f242 023a 	movw	r2, #8250	@ 0x203a
 800b672:	2178      	movs	r1, #120	@ 0x78
 800b674:	2064      	movs	r0, #100	@ 0x64
 800b676:	f000 fdab 	bl	800c1d0 <Move_Line>
 800b67a:	4603      	mov	r3, r0
 800b67c:	71fb      	strb	r3, [r7, #7]
	while(temp != true)
 800b67e:	e007      	b.n	800b690 <Start+0x28>
	{
		temp = Move_Line(RunSpeed, RunAcc, 8250);
 800b680:	f242 023a 	movw	r2, #8250	@ 0x203a
 800b684:	2178      	movs	r1, #120	@ 0x78
 800b686:	2064      	movs	r0, #100	@ 0x64
 800b688:	f000 fda2 	bl	800c1d0 <Move_Line>
 800b68c:	4603      	mov	r3, r0
 800b68e:	71fb      	strb	r3, [r7, #7]
	while(temp != true)
 800b690:	79fb      	ldrb	r3, [r7, #7]
 800b692:	f083 0301 	eor.w	r3, r3, #1
 800b696:	b2db      	uxtb	r3, r3
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1f1      	bne.n	800b680 <Start+0x18>
	}
	//	先将爪子升起来，避免打到TX2或者物料盘
	Drop_Location_jiang(320, 160, 4000);
 800b69c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800b6a0:	21a0      	movs	r1, #160	@ 0xa0
 800b6a2:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800b6a6:	f000 ffc7 	bl	800c638 <Drop_Location_jiang>
	//	将舵机向外转动
	FT_Servo_Orth();
 800b6aa:	f002 fb81 	bl	800ddb0 <FT_Servo_Orth>
	Move_Arm(1, 500, 300); //爪子张开
 800b6ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b6b2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b6b6:	2001      	movs	r0, #1
 800b6b8:	f7ff ff98 	bl	800b5ec <Move_Arm>
	Move_Arm(6, 500, 300);
 800b6bc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b6c0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b6c4:	2006      	movs	r0, #6
 800b6c6:	f7ff ff91 	bl	800b5ec <Move_Arm>
	Drop_Location_jiang(320, 160, 11000);
 800b6ca:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800b6ce:	21a0      	movs	r1, #160	@ 0xa0
 800b6d0:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800b6d4:	f000 ffb0 	bl	800c638 <Drop_Location_jiang>
	// 向前移动到扫码区域
	while (QR_Flag == false)
 800b6d8:	bf00      	nop
 800b6da:	4b0b      	ldr	r3, [pc, #44]	@ (800b708 <Start+0xa0>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d0fb      	beq.n	800b6da <Start+0x72>
	{
		;  //等待扫码完成
	}
	// 扫码完成后将爪子提起来
	Move_Arm(6, 900, 300);
 800b6e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b6e6:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800b6ea:	2006      	movs	r0, #6
 800b6ec:	f7ff ff7e 	bl	800b5ec <Move_Arm>
	Drop_Location_jiang(320, 160, 8600);
 800b6f0:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b6f4:	21a0      	movs	r1, #160	@ 0xa0
 800b6f6:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800b6fa:	f000 ff9d 	bl	800c638 <Drop_Location_jiang>
	
}
 800b6fe:	bf00      	nop
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	24000020 	.word	0x24000020

0800b70c <Move_To_Position_Staging_Area>:




//暂存区利用ACTION进行位置的改变，圆环图像反映为    红 1  ，绿  2  ，蓝 3                            //重新编写了抓取到车的动作       12/11 cha_a_chong 学姐太强啦
void Move_To_Position_Staging_Area(int position) {  
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
    //ACTION调整位置。此处不宜太前，会导致去往下一个位置时碰到刚放置的物料
	const int forwardPosition = 1850;
 800b714:	f240 733a 	movw	r3, #1850	@ 0x73a
 800b718:	60fb      	str	r3, [r7, #12]

    switch (position) {
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2b03      	cmp	r3, #3
 800b71e:	d021      	beq.n	800b764 <Move_To_Position_Staging_Area+0x58>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b03      	cmp	r3, #3
 800b724:	dc2a      	bgt.n	800b77c <Move_To_Position_Staging_Area+0x70>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d003      	beq.n	800b734 <Move_To_Position_Staging_Area+0x28>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b02      	cmp	r3, #2
 800b730:	d00c      	beq.n	800b74c <Move_To_Position_Staging_Area+0x40>
        case 3:
           Move_Action_Nopid_Right_Ctrl(forwardPosition, 885);
            break;
        default:
            // TODO:处理无效位置或记录错误
            break;
 800b732:	e023      	b.n	800b77c <Move_To_Position_Staging_Area+0x70>
            Move_Action_Nopid_Right_Ctrl(forwardPosition, 1200);   
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	ee07 3a90 	vmov	s15, r3
 800b73a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b73e:	eddf 0a12 	vldr	s1, [pc, #72]	@ 800b788 <Move_To_Position_Staging_Area+0x7c>
 800b742:	eeb0 0a67 	vmov.f32	s0, s15
 800b746:	f001 fba3 	bl	800ce90 <Move_Action_Nopid_Right_Ctrl>
            break;
 800b74a:	e018      	b.n	800b77e <Move_To_Position_Staging_Area+0x72>
            Move_Action_Nopid_Right_Ctrl(forwardPosition, 1050);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	ee07 3a90 	vmov	s15, r3
 800b752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b756:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 800b78c <Move_To_Position_Staging_Area+0x80>
 800b75a:	eeb0 0a67 	vmov.f32	s0, s15
 800b75e:	f001 fb97 	bl	800ce90 <Move_Action_Nopid_Right_Ctrl>
            break;
 800b762:	e00c      	b.n	800b77e <Move_To_Position_Staging_Area+0x72>
           Move_Action_Nopid_Right_Ctrl(forwardPosition, 885);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	ee07 3a90 	vmov	s15, r3
 800b76a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b76e:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800b790 <Move_To_Position_Staging_Area+0x84>
 800b772:	eeb0 0a67 	vmov.f32	s0, s15
 800b776:	f001 fb8b 	bl	800ce90 <Move_Action_Nopid_Right_Ctrl>
            break;
 800b77a:	e000      	b.n	800b77e <Move_To_Position_Staging_Area+0x72>
            break;
 800b77c:	bf00      	nop
    }
}
 800b77e:	bf00      	nop
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	44960000 	.word	0x44960000
 800b78c:	44834000 	.word	0x44834000
 800b790:	445d4000 	.word	0x445d4000

0800b794 <Move_To_Position_Rough_Processing_Area>:

//粗加工区利用ACTION进行位置的改变，圆环图像反映为  红 1 ，绿  2  ，蓝 3
void Move_To_Position_Rough_Processing_Area(int position) {  
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
	//ACTION调整位置。此处不宜太前，会导致去往下一个位置时碰到刚放置的物料
	const int forwardPosition = 1850;
 800b79c:	f240 733a 	movw	r3, #1850	@ 0x73a
 800b7a0:	60fb      	str	r3, [r7, #12]
    switch (position) {
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2b03      	cmp	r3, #3
 800b7a6:	d021      	beq.n	800b7ec <Move_To_Position_Rough_Processing_Area+0x58>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b03      	cmp	r3, #3
 800b7ac:	dc2a      	bgt.n	800b804 <Move_To_Position_Rough_Processing_Area+0x70>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d003      	beq.n	800b7bc <Move_To_Position_Rough_Processing_Area+0x28>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	d00c      	beq.n	800b7d4 <Move_To_Position_Rough_Processing_Area+0x40>
        case 3:
            Move_Action_Nopid_Forward_Ctrl(1208, forwardPosition);
            break;
        default:
            // TODO:处理无效位置或记录错误
            break;
 800b7ba:	e023      	b.n	800b804 <Move_To_Position_Rough_Processing_Area+0x70>
            Move_Action_Nopid_Forward_Ctrl(954, forwardPosition);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	ee07 3a90 	vmov	s15, r3
 800b7c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7c6:	eef0 0a67 	vmov.f32	s1, s15
 800b7ca:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 800b810 <Move_To_Position_Rough_Processing_Area+0x7c>
 800b7ce:	f001 fa2b 	bl	800cc28 <Move_Action_Nopid_Forward_Ctrl>
            break;
 800b7d2:	e018      	b.n	800b806 <Move_To_Position_Rough_Processing_Area+0x72>
            Move_Action_Nopid_Forward_Ctrl(1050, forwardPosition);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	ee07 3a90 	vmov	s15, r3
 800b7da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7de:	eef0 0a67 	vmov.f32	s1, s15
 800b7e2:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800b814 <Move_To_Position_Rough_Processing_Area+0x80>
 800b7e6:	f001 fa1f 	bl	800cc28 <Move_Action_Nopid_Forward_Ctrl>
            break;
 800b7ea:	e00c      	b.n	800b806 <Move_To_Position_Rough_Processing_Area+0x72>
            Move_Action_Nopid_Forward_Ctrl(1208, forwardPosition);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	ee07 3a90 	vmov	s15, r3
 800b7f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7f6:	eef0 0a67 	vmov.f32	s1, s15
 800b7fa:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800b818 <Move_To_Position_Rough_Processing_Area+0x84>
 800b7fe:	f001 fa13 	bl	800cc28 <Move_Action_Nopid_Forward_Ctrl>
            break;
 800b802:	e000      	b.n	800b806 <Move_To_Position_Rough_Processing_Area+0x72>
            break;
 800b804:	bf00      	nop
	}
}
 800b806:	bf00      	nop
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	446e8000 	.word	0x446e8000
 800b814:	44834000 	.word	0x44834000
 800b818:	44970000 	.word	0x44970000

0800b81c <Place_Material_On_Circular>:



//将物料从车上抓下放在圆环上,ismaterial 填0或者1 0代表放在圆环上，1代表放在物料上
void Place_Material_On_Circular(uint8_t putCount,int IsMaterial) {
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	4603      	mov	r3, r0
 800b824:	6039      	str	r1, [r7, #0]
 800b826:	71fb      	strb	r3, [r7, #7]
   
    
	// 物料盘先转动到目标位置
    FT_Servo_Put(0, putCount);
 800b828:	79fb      	ldrb	r3, [r7, #7]
 800b82a:	4619      	mov	r1, r3
 800b82c:	2000      	movs	r0, #0
 800b82e:	f002 facb 	bl	800ddc8 <FT_Servo_Put>

	// 白色爪子确保在最高处，否则可能在抓取时被物料卡住导致不能下降
    Move_Arm(6, 900, 300);
 800b832:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b836:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800b83a:	2006      	movs	r0, #6
 800b83c:	f7ff fed6 	bl	800b5ec <Move_Arm>

    // FIXME：先闭合部分爪子，防止下降途中打到物料
    Move_Arm(1, 160, 300);
 800b840:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b844:	21a0      	movs	r1, #160	@ 0xa0
 800b846:	2001      	movs	r0, #1
 800b848:	f7ff fed0 	bl	800b5ec <Move_Arm>

    // 上升到1000处，防止打到物料
    Drop_Location_jiang(200, 120, 1000);
 800b84c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b850:	2178      	movs	r1, #120	@ 0x78
 800b852:	20c8      	movs	r0, #200	@ 0xc8
 800b854:	f000 fef0 	bl	800c638 <Drop_Location_jiang>

    // 爪子舵机转动到放置物料到车上的角度
    FT_Servo_Put(1, putCount);
 800b858:	79fb      	ldrb	r3, [r7, #7]
 800b85a:	4619      	mov	r1, r3
 800b85c:	2001      	movs	r0, #1
 800b85e:	f002 fab3 	bl	800ddc8 <FT_Servo_Put>

    // FIXME：爪子下降，根据具体情况修改参数
    Drop_Location_jiang(200, 120, 7000);
 800b862:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800b866:	2178      	movs	r1, #120	@ 0x78
 800b868:	20c8      	movs	r0, #200	@ 0xc8
 800b86a:	f000 fee5 	bl	800c638 <Drop_Location_jiang>

    // 闭合爪子，抓取物料
    Move_Arm(1, 50, 300);
 800b86e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b872:	2132      	movs	r1, #50	@ 0x32
 800b874:	2001      	movs	r0, #1
 800b876:	f7ff feb9 	bl	800b5ec <Move_Arm>

    // 上升到1000处
    Drop_Location_jiang(200, 120, 1000);
 800b87a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b87e:	2178      	movs	r1, #120	@ 0x78
 800b880:	20c8      	movs	r0, #200	@ 0xc8
 800b882:	f000 fed9 	bl	800c638 <Drop_Location_jiang>

    // 向右转，与车身正交
    FT_Servo_Orth();
 800b886:	f002 fa93 	bl	800ddb0 <FT_Servo_Orth>

    // FIXME：加了部分延时，防止爪子边转边降
    HAL_Delay(500);
 800b88a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b88e:	f7f7 fac7 	bl	8002e20 <HAL_Delay>
	switch(IsMaterial)
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d003      	beq.n	800b8a0 <Place_Material_On_Circular+0x84>
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d015      	beq.n	800b8ca <Place_Material_On_Circular+0xae>
			// 爪子张开，放置物料
			Move_Arm(1, 500, 300);
			break;
	}
   
}       //此刻爪子处于低位并张开，便于再次识别
 800b89e:	e022      	b.n	800b8e6 <Place_Material_On_Circular+0xca>
			Drop_Location_jiang(200, 120, 12000);
 800b8a0:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800b8a4:	2178      	movs	r1, #120	@ 0x78
 800b8a6:	20c8      	movs	r0, #200	@ 0xc8
 800b8a8:	f000 fec6 	bl	800c638 <Drop_Location_jiang>
			Move_Arm(6, 390, 300);
 800b8ac:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b8b0:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 800b8b4:	2006      	movs	r0, #6
 800b8b6:	f7ff fe99 	bl	800b5ec <Move_Arm>
			Move_Arm(1, 500, 300);
 800b8ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b8be:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b8c2:	2001      	movs	r0, #1
 800b8c4:	f7ff fe92 	bl	800b5ec <Move_Arm>
			break;
 800b8c8:	e00d      	b.n	800b8e6 <Place_Material_On_Circular+0xca>
			Drop_Location_jiang(200, 120, 8600);
 800b8ca:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b8ce:	2178      	movs	r1, #120	@ 0x78
 800b8d0:	20c8      	movs	r0, #200	@ 0xc8
 800b8d2:	f000 feb1 	bl	800c638 <Drop_Location_jiang>
			Move_Arm(1, 500, 300);
 800b8d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b8da:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b8de:	2001      	movs	r0, #1
 800b8e0:	f7ff fe84 	bl	800b5ec <Move_Arm>
			break;
 800b8e4:	bf00      	nop
}       //此刻爪子处于低位并张开，便于再次识别
 800b8e6:	bf00      	nop
 800b8e8:	3708      	adds	r7, #8
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <Place_Material_On_Car>:
        //TODO：注意，第一次识别也要记得将物料至于低位并张开
		//TODO：那个粗加工区玩之后要不要爪子回到车身里面


//将物料从圆环上抓起放到车上
void Place_Material_On_Car(uint8_t grabCount) {                              
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b082      	sub	sp, #8
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	71fb      	strb	r3, [r7, #7]
	//物料盘先转动到目标位置
	FT_Servo_Put(0, grabCount);
 800b8f8:	79fb      	ldrb	r3, [r7, #7]
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	f002 fa63 	bl	800ddc8 <FT_Servo_Put>

	//爪子下降，准备抓取物料
	Move_Arm(6, 360, 300);
 800b902:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b906:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800b90a:	2006      	movs	r0, #6
 800b90c:	f7ff fe6e 	bl	800b5ec <Move_Arm>

	//爪子闭合，抓取物料
	Move_Arm(1, 50, 300);
 800b910:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b914:	2132      	movs	r1, #50	@ 0x32
 800b916:	2001      	movs	r0, #1
 800b918:	f7ff fe68 	bl	800b5ec <Move_Arm>

    //爪子上升到1000处
	Drop_Location_jiang(200, 120, 1000);
 800b91c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b920:	2178      	movs	r1, #120	@ 0x78
 800b922:	20c8      	movs	r0, #200	@ 0xc8
 800b924:	f000 fe88 	bl	800c638 <Drop_Location_jiang>

	//爪子上升，防止物料打到物料或物料盘
	Move_Arm(6, 900, 300);
 800b928:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b92c:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800b930:	2006      	movs	r0, #6
 800b932:	f7ff fe5b 	bl	800b5ec <Move_Arm>
			
	//爪子舵机转动到放置物料到车上的角度
	FT_Servo_Put(1, grabCount);
 800b936:	79fb      	ldrb	r3, [r7, #7]
 800b938:	4619      	mov	r1, r3
 800b93a:	2001      	movs	r0, #1
 800b93c:	f002 fa44 	bl	800ddc8 <FT_Servo_Put>

	//爪子下降
	Drop_Location_jiang(200, 120, 6000);
 800b940:	f241 7270 	movw	r2, #6000	@ 0x1770
 800b944:	2178      	movs	r1, #120	@ 0x78
 800b946:	20c8      	movs	r0, #200	@ 0xc8
 800b948:	f000 fe76 	bl	800c638 <Drop_Location_jiang>

	//松开爪子，这里张开爪子给的小了一些，防止打到别的物料
	Move_Arm(1, 190, 300);
 800b94c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b950:	21be      	movs	r1, #190	@ 0xbe
 800b952:	2001      	movs	r0, #1
 800b954:	f7ff fe4a 	bl	800b5ec <Move_Arm>

	//上升
	Drop_Location_jiang(200, 120, 1000);
 800b958:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b95c:	2178      	movs	r1, #120	@ 0x78
 800b95e:	20c8      	movs	r0, #200	@ 0xc8
 800b960:	f000 fe6a 	bl	800c638 <Drop_Location_jiang>
			
	//向右转，与车身正交
	if (grabCount <= 3) {
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	2b03      	cmp	r3, #3
 800b968:	d80f      	bhi.n	800b98a <Place_Material_On_Car+0x9c>
	//松开爪子，爪子张大，防止影响识别
	Move_Arm(1, 500, 300);
 800b96a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b96e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b972:	2001      	movs	r0, #1
 800b974:	f7ff fe3a 	bl	800b5ec <Move_Arm>
	FT_Servo_Orth();
 800b978:	f002 fa1a 	bl	800ddb0 <FT_Servo_Orth>
	Drop_Location_jiang(200, 120,12000);
 800b97c:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800b980:	2178      	movs	r1, #120	@ 0x78
 800b982:	20c8      	movs	r0, #200	@ 0xc8
 800b984:	f000 fe58 	bl	800c638 <Drop_Location_jiang>
	} else
	     // 车身状态回滚为爪子向内的状态
			Roll_Status();
			//若为第三次抓取后，则将爪子收进来
			//TODO:三次抓取此时爪子处于车身内，调用时看一下
}
 800b988:	e001      	b.n	800b98e <Place_Material_On_Car+0xa0>
			Roll_Status();
 800b98a:	f002 f9d0 	bl	800dd2e <Roll_Status>
}
 800b98e:	bf00      	nop
 800b990:	3708      	adds	r7, #8
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
	...

0800b998 <put_Material_to_circular_Staging_Area_frist>:
//TO Circular
//第一次跑在暂存区将物料放在圆环上
//若要第二次跑，主要是要改变一下数组的次序
//TODO：在此函数执行前，必须确保爪子在底部并张开，进行物料的识别
//第一次跑QR_Add为0，第二次传形参QR_Add为3
void put_Material_to_circular_Staging_Area_frist(int QR_Add) {
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
    static uint8_t put_count = 1;
    const int maxPutCount = 3;    
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	60fb      	str	r3, [r7, #12]

    // 一共放三次
    while (put_count <= maxPutCount) {
 800b9a4:	e03a      	b.n	800ba1c <put_Material_to_circular_Staging_Area_frist+0x84>
        int adjustedQRData = QR_data[put_count - 1 + QR_Add] ;
 800b9a6:	4b24      	ldr	r3, [pc, #144]	@ (800ba38 <put_Material_to_circular_Staging_Area_frist+0xa0>)
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	1e5a      	subs	r2, r3, #1
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	4a22      	ldr	r2, [pc, #136]	@ (800ba3c <put_Material_to_circular_Staging_Area_frist+0xa4>)
 800b9b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9b6:	60bb      	str	r3, [r7, #8]
        if (adjustedQRData >= 1 && adjustedQRData <= 3) {
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	dd05      	ble.n	800b9ca <put_Material_to_circular_Staging_Area_frist+0x32>
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2b03      	cmp	r3, #3
 800b9c2:	dc02      	bgt.n	800b9ca <put_Material_to_circular_Staging_Area_frist+0x32>
            Move_To_Position_Staging_Area(adjustedQRData);
 800b9c4:	68b8      	ldr	r0, [r7, #8]
 800b9c6:	f7ff fea1 	bl	800b70c <Move_To_Position_Staging_Area>
        }
		//进行颜色识别，然后抓取
        if (QR_data[put_count - 1+ QR_Add] +3 == colour) {
 800b9ca:	4b1b      	ldr	r3, [pc, #108]	@ (800ba38 <put_Material_to_circular_Staging_Area_frist+0xa0>)
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	1e5a      	subs	r2, r3, #1
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	4a19      	ldr	r2, [pc, #100]	@ (800ba3c <put_Material_to_circular_Staging_Area_frist+0xa4>)
 800b9d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9da:	1cda      	adds	r2, r3, #3
 800b9dc:	4b18      	ldr	r3, [pc, #96]	@ (800ba40 <put_Material_to_circular_Staging_Area_frist+0xa8>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d118      	bne.n	800ba16 <put_Material_to_circular_Staging_Area_frist+0x7e>
			 // 基于TX2坐标进行闭环，先把车体调整至最佳位置
            Move_Tx_Pid_Ctrl(tx_target, ty_target);
 800b9e4:	4b17      	ldr	r3, [pc, #92]	@ (800ba44 <put_Material_to_circular_Staging_Area_frist+0xac>)
 800b9e6:	edd3 7a00 	vldr	s15, [r3]
 800b9ea:	4b17      	ldr	r3, [pc, #92]	@ (800ba48 <put_Material_to_circular_Staging_Area_frist+0xb0>)
 800b9ec:	ed93 7a00 	vldr	s14, [r3]
 800b9f0:	eef0 0a47 	vmov.f32	s1, s14
 800b9f4:	eeb0 0a67 	vmov.f32	s0, s15
 800b9f8:	f001 fb8e 	bl	800d118 <Move_Tx_Pid_Ctrl>
			//从车上放在色环上
            Place_Material_On_Circular(put_count,0);
 800b9fc:	4b0e      	ldr	r3, [pc, #56]	@ (800ba38 <put_Material_to_circular_Staging_Area_frist+0xa0>)
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	2100      	movs	r1, #0
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7ff ff0a 	bl	800b81c <Place_Material_On_Circular>
            put_count++;
 800ba08:	4b0b      	ldr	r3, [pc, #44]	@ (800ba38 <put_Material_to_circular_Staging_Area_frist+0xa0>)
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	4b09      	ldr	r3, [pc, #36]	@ (800ba38 <put_Material_to_circular_Staging_Area_frist+0xa0>)
 800ba12:	701a      	strb	r2, [r3, #0]
 800ba14:	e002      	b.n	800ba1c <put_Material_to_circular_Staging_Area_frist+0x84>
        }
		//若因为TX识别错误，则重新回到原位置
		else{
			Move_To_Position_Staging_Area(adjustedQRData);
 800ba16:	68b8      	ldr	r0, [r7, #8]
 800ba18:	f7ff fe78 	bl	800b70c <Move_To_Position_Staging_Area>
    while (put_count <= maxPutCount) {
 800ba1c:	4b06      	ldr	r3, [pc, #24]	@ (800ba38 <put_Material_to_circular_Staging_Area_frist+0xa0>)
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	461a      	mov	r2, r3
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	4293      	cmp	r3, r2
 800ba26:	dabe      	bge.n	800b9a6 <put_Material_to_circular_Staging_Area_frist+0xe>
		}

    }
    put_count = 1; // 重置计数器
 800ba28:	4b03      	ldr	r3, [pc, #12]	@ (800ba38 <put_Material_to_circular_Staging_Area_frist+0xa0>)
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	701a      	strb	r2, [r3, #0]
}
 800ba2e:	bf00      	nop
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	24000061 	.word	0x24000061
 800ba3c:	24000000 	.word	0x24000000
 800ba40:	24000480 	.word	0x24000480
 800ba44:	24000018 	.word	0x24000018
 800ba48:	2400001c 	.word	0x2400001c

0800ba4c <Grab_Material_to_Car_Staging_Area_frist>:

//TO Car
//第一次跑在暂存区区将物料放在车上
//若要第二次跑，主要是要改变一下数组的次序
//TODO：在此函数执行前，必须确保爪子在底部并张开，进行物料的识别
void Grab_Material_to_Car_Staging_Area_frist(int QR_Add) {
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
    static uint8_t grab_count = 1;
    const int maxPutCount = 3;    
 800ba54:	2303      	movs	r3, #3
 800ba56:	60fb      	str	r3, [r7, #12]
    // 一共抓三次

    while (grab_count <= maxPutCount) {
 800ba58:	e038      	b.n	800bacc <Grab_Material_to_Car_Staging_Area_frist+0x80>
        int adjustedQRData = QR_data[grab_count - 1+ QR_Add];
 800ba5a:	4b23      	ldr	r3, [pc, #140]	@ (800bae8 <Grab_Material_to_Car_Staging_Area_frist+0x9c>)
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	1e5a      	subs	r2, r3, #1
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4413      	add	r3, r2
 800ba64:	4a21      	ldr	r2, [pc, #132]	@ (800baec <Grab_Material_to_Car_Staging_Area_frist+0xa0>)
 800ba66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba6a:	60bb      	str	r3, [r7, #8]
		//在这里根据二维码进行判断然后抓取
        if (adjustedQRData >= 1 && adjustedQRData <= 3) {
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	dd05      	ble.n	800ba7e <Grab_Material_to_Car_Staging_Area_frist+0x32>
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	2b03      	cmp	r3, #3
 800ba76:	dc02      	bgt.n	800ba7e <Grab_Material_to_Car_Staging_Area_frist+0x32>
            Move_To_Position_Staging_Area(adjustedQRData);
 800ba78:	68b8      	ldr	r0, [r7, #8]
 800ba7a:	f7ff fe47 	bl	800b70c <Move_To_Position_Staging_Area>
        }
		//进行颜色识别，然后抓取
        if (QR_data[grab_count - 1+ QR_Add] == colour) {
 800ba7e:	4b1a      	ldr	r3, [pc, #104]	@ (800bae8 <Grab_Material_to_Car_Staging_Area_frist+0x9c>)
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	1e5a      	subs	r2, r3, #1
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4413      	add	r3, r2
 800ba88:	4a18      	ldr	r2, [pc, #96]	@ (800baec <Grab_Material_to_Car_Staging_Area_frist+0xa0>)
 800ba8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ba8e:	4b18      	ldr	r3, [pc, #96]	@ (800baf0 <Grab_Material_to_Car_Staging_Area_frist+0xa4>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d117      	bne.n	800bac6 <Grab_Material_to_Car_Staging_Area_frist+0x7a>

		 // 基于TX2坐标进行闭环，先把车体调整至最佳位置
        Move_Tx_Pid_Ctrl(tx_target, ty_target);
 800ba96:	4b17      	ldr	r3, [pc, #92]	@ (800baf4 <Grab_Material_to_Car_Staging_Area_frist+0xa8>)
 800ba98:	edd3 7a00 	vldr	s15, [r3]
 800ba9c:	4b16      	ldr	r3, [pc, #88]	@ (800baf8 <Grab_Material_to_Car_Staging_Area_frist+0xac>)
 800ba9e:	ed93 7a00 	vldr	s14, [r3]
 800baa2:	eef0 0a47 	vmov.f32	s1, s14
 800baa6:	eeb0 0a67 	vmov.f32	s0, s15
 800baaa:	f001 fb35 	bl	800d118 <Move_Tx_Pid_Ctrl>
		//放到色环上
            Place_Material_On_Car(grab_count);
 800baae:	4b0e      	ldr	r3, [pc, #56]	@ (800bae8 <Grab_Material_to_Car_Staging_Area_frist+0x9c>)
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7ff ff1b 	bl	800b8ee <Place_Material_On_Car>
            grab_count++;
 800bab8:	4b0b      	ldr	r3, [pc, #44]	@ (800bae8 <Grab_Material_to_Car_Staging_Area_frist+0x9c>)
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	3301      	adds	r3, #1
 800babe:	b2da      	uxtb	r2, r3
 800bac0:	4b09      	ldr	r3, [pc, #36]	@ (800bae8 <Grab_Material_to_Car_Staging_Area_frist+0x9c>)
 800bac2:	701a      	strb	r2, [r3, #0]
 800bac4:	e002      	b.n	800bacc <Grab_Material_to_Car_Staging_Area_frist+0x80>
        }
		//若因为TX识别错误，则重新回到原位置
		else{
			Move_To_Position_Staging_Area(adjustedQRData);
 800bac6:	68b8      	ldr	r0, [r7, #8]
 800bac8:	f7ff fe20 	bl	800b70c <Move_To_Position_Staging_Area>
    while (grab_count <= maxPutCount) {
 800bacc:	4b06      	ldr	r3, [pc, #24]	@ (800bae8 <Grab_Material_to_Car_Staging_Area_frist+0x9c>)
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	461a      	mov	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	4293      	cmp	r3, r2
 800bad6:	dac0      	bge.n	800ba5a <Grab_Material_to_Car_Staging_Area_frist+0xe>
		}

    }
    grab_count = 1; // 重置计数器
 800bad8:	4b03      	ldr	r3, [pc, #12]	@ (800bae8 <Grab_Material_to_Car_Staging_Area_frist+0x9c>)
 800bada:	2201      	movs	r2, #1
 800badc:	701a      	strb	r2, [r3, #0]
}
 800bade:	bf00      	nop
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	24000062 	.word	0x24000062
 800baec:	24000000 	.word	0x24000000
 800baf0:	24000480 	.word	0x24000480
 800baf4:	24000018 	.word	0x24000018
 800baf8:	2400001c 	.word	0x2400001c

0800bafc <put_Material_to_Circular_Rough_Processing_Area_frist>:

//TO Circular
//第一次跑在粗加工区区将物料放在圆环上
//若要第二次跑，主要是要改变一下数组的次序
//TODO：在此函数执行前，必须确保爪子在底部并张开，进行物料的识别
void put_Material_to_Circular_Rough_Processing_Area_frist(int QR_Add,int iswuliao) {
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
    static uint8_t put_count = 1;
    const int maxPutCount = 3;    
 800bb06:	2303      	movs	r3, #3
 800bb08:	60fb      	str	r3, [r7, #12]

    // 一共放三次

    while (put_count <= maxPutCount) {
 800bb0a:	e03a      	b.n	800bb82 <put_Material_to_Circular_Rough_Processing_Area_frist+0x86>
        int adjustedQRData = QR_data[put_count - 1+ QR_Add];
 800bb0c:	4b23      	ldr	r3, [pc, #140]	@ (800bb9c <put_Material_to_Circular_Rough_Processing_Area_frist+0xa0>)
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	1e5a      	subs	r2, r3, #1
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4413      	add	r3, r2
 800bb16:	4a22      	ldr	r2, [pc, #136]	@ (800bba0 <put_Material_to_Circular_Rough_Processing_Area_frist+0xa4>)
 800bb18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb1c:	60bb      	str	r3, [r7, #8]
		//在这里根据二维码进行判断然后抓取
        if (adjustedQRData >= 1 && adjustedQRData <= 3) {
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	dd05      	ble.n	800bb30 <put_Material_to_Circular_Rough_Processing_Area_frist+0x34>
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	2b03      	cmp	r3, #3
 800bb28:	dc02      	bgt.n	800bb30 <put_Material_to_Circular_Rough_Processing_Area_frist+0x34>
            Move_To_Position_Rough_Processing_Area(adjustedQRData);
 800bb2a:	68b8      	ldr	r0, [r7, #8]
 800bb2c:	f7ff fe32 	bl	800b794 <Move_To_Position_Rough_Processing_Area>
        }
		//进行颜色识别，然后抓取
        if (QR_data[put_count - 1+ QR_Add]+3 == colour) {
 800bb30:	4b1a      	ldr	r3, [pc, #104]	@ (800bb9c <put_Material_to_Circular_Rough_Processing_Area_frist+0xa0>)
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	1e5a      	subs	r2, r3, #1
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4413      	add	r3, r2
 800bb3a:	4a19      	ldr	r2, [pc, #100]	@ (800bba0 <put_Material_to_Circular_Rough_Processing_Area_frist+0xa4>)
 800bb3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb40:	1cda      	adds	r2, r3, #3
 800bb42:	4b18      	ldr	r3, [pc, #96]	@ (800bba4 <put_Material_to_Circular_Rough_Processing_Area_frist+0xa8>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d118      	bne.n	800bb7c <put_Material_to_Circular_Rough_Processing_Area_frist+0x80>

		 // 基于TX2坐标进行闭环，先把车体调整至最佳位置
        Move_Tx_Pid_Ctrl(tx_target, ty_target);
 800bb4a:	4b17      	ldr	r3, [pc, #92]	@ (800bba8 <put_Material_to_Circular_Rough_Processing_Area_frist+0xac>)
 800bb4c:	edd3 7a00 	vldr	s15, [r3]
 800bb50:	4b16      	ldr	r3, [pc, #88]	@ (800bbac <put_Material_to_Circular_Rough_Processing_Area_frist+0xb0>)
 800bb52:	ed93 7a00 	vldr	s14, [r3]
 800bb56:	eef0 0a47 	vmov.f32	s1, s14
 800bb5a:	eeb0 0a67 	vmov.f32	s0, s15
 800bb5e:	f001 fadb 	bl	800d118 <Move_Tx_Pid_Ctrl>
		//放到色环上
        Place_Material_On_Circular(put_count,iswuliao);
 800bb62:	4b0e      	ldr	r3, [pc, #56]	@ (800bb9c <put_Material_to_Circular_Rough_Processing_Area_frist+0xa0>)
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	6839      	ldr	r1, [r7, #0]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7ff fe57 	bl	800b81c <Place_Material_On_Circular>
        put_count++;
 800bb6e:	4b0b      	ldr	r3, [pc, #44]	@ (800bb9c <put_Material_to_Circular_Rough_Processing_Area_frist+0xa0>)
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	3301      	adds	r3, #1
 800bb74:	b2da      	uxtb	r2, r3
 800bb76:	4b09      	ldr	r3, [pc, #36]	@ (800bb9c <put_Material_to_Circular_Rough_Processing_Area_frist+0xa0>)
 800bb78:	701a      	strb	r2, [r3, #0]
 800bb7a:	e002      	b.n	800bb82 <put_Material_to_Circular_Rough_Processing_Area_frist+0x86>
        }
		//若因为TX识别错误，则重新回到原位置
		else{
			Move_To_Position_Rough_Processing_Area(adjustedQRData);
 800bb7c:	68b8      	ldr	r0, [r7, #8]
 800bb7e:	f7ff fe09 	bl	800b794 <Move_To_Position_Rough_Processing_Area>
    while (put_count <= maxPutCount) {
 800bb82:	4b06      	ldr	r3, [pc, #24]	@ (800bb9c <put_Material_to_Circular_Rough_Processing_Area_frist+0xa0>)
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	461a      	mov	r2, r3
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	dabe      	bge.n	800bb0c <put_Material_to_Circular_Rough_Processing_Area_frist+0x10>
		}

    }
    put_count = 1; // 重置计数器
 800bb8e:	4b03      	ldr	r3, [pc, #12]	@ (800bb9c <put_Material_to_Circular_Rough_Processing_Area_frist+0xa0>)
 800bb90:	2201      	movs	r2, #1
 800bb92:	701a      	strb	r2, [r3, #0]
}
 800bb94:	bf00      	nop
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	24000063 	.word	0x24000063
 800bba0:	24000000 	.word	0x24000000
 800bba4:	24000480 	.word	0x24000480
 800bba8:	24000018 	.word	0x24000018
 800bbac:	2400001c 	.word	0x2400001c

0800bbb0 <Emm_V5_Pos_Control>:
 * @param    raF ：相位/绝对标志，false为相对运动，true为绝对值运动
 * @param    snF ：多机同步标志 ，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Pos_Control(uint8_t addr, uint8_t dir, uint16_t vel, uint8_t acc,
		uint32_t clk, bool raF, bool snF) {
 800bbb0:	b590      	push	{r4, r7, lr}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	4608      	mov	r0, r1
 800bbba:	4611      	mov	r1, r2
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	4623      	mov	r3, r4
 800bbc0:	71fb      	strb	r3, [r7, #7]
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	71bb      	strb	r3, [r7, #6]
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	80bb      	strh	r3, [r7, #4]
 800bbca:	4613      	mov	r3, r2
 800bbcc:	70fb      	strb	r3, [r7, #3]

	// 装载命令
	cmd[0] = addr;                      // 地址
 800bbce:	4a20      	ldr	r2, [pc, #128]	@ (800bc50 <Emm_V5_Pos_Control+0xa0>)
 800bbd0:	79fb      	ldrb	r3, [r7, #7]
 800bbd2:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFD;                      // 功能码
 800bbd4:	4b1e      	ldr	r3, [pc, #120]	@ (800bc50 <Emm_V5_Pos_Control+0xa0>)
 800bbd6:	22fd      	movs	r2, #253	@ 0xfd
 800bbd8:	705a      	strb	r2, [r3, #1]
	cmd[2] = dir;                       // 方向
 800bbda:	4a1d      	ldr	r2, [pc, #116]	@ (800bc50 <Emm_V5_Pos_Control+0xa0>)
 800bbdc:	79bb      	ldrb	r3, [r7, #6]
 800bbde:	7093      	strb	r3, [r2, #2]
	cmd[3] = (uint8_t) (vel >> 8);       // 速度(RPM)高8位字节
 800bbe0:	88bb      	ldrh	r3, [r7, #4]
 800bbe2:	0a1b      	lsrs	r3, r3, #8
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	4b19      	ldr	r3, [pc, #100]	@ (800bc50 <Emm_V5_Pos_Control+0xa0>)
 800bbea:	70da      	strb	r2, [r3, #3]
	cmd[4] = (uint8_t) (vel >> 0);       // 速度(RPM)低8位字节
 800bbec:	88bb      	ldrh	r3, [r7, #4]
 800bbee:	b2da      	uxtb	r2, r3
 800bbf0:	4b17      	ldr	r3, [pc, #92]	@ (800bc50 <Emm_V5_Pos_Control+0xa0>)
 800bbf2:	711a      	strb	r2, [r3, #4]
	cmd[5] = acc;                       // 加速度，注意：0是直接启动
 800bbf4:	4a16      	ldr	r2, [pc, #88]	@ (800bc50 <Emm_V5_Pos_Control+0xa0>)
 800bbf6:	78fb      	ldrb	r3, [r7, #3]
 800bbf8:	7153      	strb	r3, [r2, #5]
	cmd[6] = (uint8_t) (clk >> 24);      // 脉冲数(bit24 - bit31)
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	0e1b      	lsrs	r3, r3, #24
 800bbfe:	b2da      	uxtb	r2, r3
 800bc00:	4b13      	ldr	r3, [pc, #76]	@ (800bc50 <Emm_V5_Pos_Control+0xa0>)
 800bc02:	719a      	strb	r2, [r3, #6]
	cmd[7] = (uint8_t) (clk >> 16);      // 脉冲数(bit16 - bit23)
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	0c1b      	lsrs	r3, r3, #16
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	4b11      	ldr	r3, [pc, #68]	@ (800bc50 <Emm_V5_Pos_Control+0xa0>)
 800bc0c:	71da      	strb	r2, [r3, #7]
	cmd[8] = (uint8_t) (clk >> 8);       // 脉冲数(bit8  - bit15)
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	0a1b      	lsrs	r3, r3, #8
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	4b0e      	ldr	r3, [pc, #56]	@ (800bc50 <Emm_V5_Pos_Control+0xa0>)
 800bc16:	721a      	strb	r2, [r3, #8]
	cmd[9] = (uint8_t) (clk >> 0);       // 脉冲数(bit0  - bit7 )
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	b2da      	uxtb	r2, r3
 800bc1c:	4b0c      	ldr	r3, [pc, #48]	@ (800bc50 <Emm_V5_Pos_Control+0xa0>)
 800bc1e:	725a      	strb	r2, [r3, #9]
	cmd[10] = raF;                       // 相位/绝对标志，false为相对运动，true为绝对值运动
 800bc20:	7f3a      	ldrb	r2, [r7, #28]
 800bc22:	4b0b      	ldr	r3, [pc, #44]	@ (800bc50 <Emm_V5_Pos_Control+0xa0>)
 800bc24:	729a      	strb	r2, [r3, #10]
	cmd[11] = snF;                       // 多机同步运动标志，false为不启用，true为启用
 800bc26:	f897 2020 	ldrb.w	r2, [r7, #32]
 800bc2a:	4b09      	ldr	r3, [pc, #36]	@ (800bc50 <Emm_V5_Pos_Control+0xa0>)
 800bc2c:	72da      	strb	r2, [r3, #11]
	cmd[12] = 0x6B;                      // 校验字节
 800bc2e:	4b08      	ldr	r3, [pc, #32]	@ (800bc50 <Emm_V5_Pos_Control+0xa0>)
 800bc30:	226b      	movs	r2, #107	@ 0x6b
 800bc32:	731a      	strb	r2, [r3, #12]

	// 发送命令
	FDCAN_Send_Msg(cmd, 13);
 800bc34:	210d      	movs	r1, #13
 800bc36:	4806      	ldr	r0, [pc, #24]	@ (800bc50 <Emm_V5_Pos_Control+0xa0>)
 800bc38:	f7f5 f82e 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(10);
 800bc3c:	200a      	movs	r0, #10
 800bc3e:	f7f7 f8ef 	bl	8002e20 <HAL_Delay>
	Emm_mode = 1;
 800bc42:	4b04      	ldr	r3, [pc, #16]	@ (800bc54 <Emm_V5_Pos_Control+0xa4>)
 800bc44:	2201      	movs	r2, #1
 800bc46:	701a      	strb	r2, [r3, #0]
}
 800bc48:	bf00      	nop
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd90      	pop	{r4, r7, pc}
 800bc50:	24000b28 	.word	0x24000b28
 800bc54:	240002bc 	.word	0x240002bc

0800bc58 <Emm_V5_Stop_Now>:
 * @brief    立即停止（所有控制模式都通用）
 * @param    addr  ：电机地址
 * @param    snF   ：多机同步标志，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Stop_Now(uint8_t addr, bool snF) {
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	460a      	mov	r2, r1
 800bc62:	71fb      	strb	r3, [r7, #7]
 800bc64:	4613      	mov	r3, r2
 800bc66:	71bb      	strb	r3, [r7, #6]

	// 装载命令
	cmd[0] = addr;                       // 地址
 800bc68:	4a0b      	ldr	r2, [pc, #44]	@ (800bc98 <Emm_V5_Stop_Now+0x40>)
 800bc6a:	79fb      	ldrb	r3, [r7, #7]
 800bc6c:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFE;                       // 功能码
 800bc6e:	4b0a      	ldr	r3, [pc, #40]	@ (800bc98 <Emm_V5_Stop_Now+0x40>)
 800bc70:	22fe      	movs	r2, #254	@ 0xfe
 800bc72:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x98;                       // 辅助码
 800bc74:	4b08      	ldr	r3, [pc, #32]	@ (800bc98 <Emm_V5_Stop_Now+0x40>)
 800bc76:	2298      	movs	r2, #152	@ 0x98
 800bc78:	709a      	strb	r2, [r3, #2]
	cmd[3] = snF;                        // 多机同步运动标志
 800bc7a:	79ba      	ldrb	r2, [r7, #6]
 800bc7c:	4b06      	ldr	r3, [pc, #24]	@ (800bc98 <Emm_V5_Stop_Now+0x40>)
 800bc7e:	70da      	strb	r2, [r3, #3]
	cmd[4] = 0x6B;                       // 校验字节
 800bc80:	4b05      	ldr	r3, [pc, #20]	@ (800bc98 <Emm_V5_Stop_Now+0x40>)
 800bc82:	226b      	movs	r2, #107	@ 0x6b
 800bc84:	711a      	strb	r2, [r3, #4]

	// 发送命令
	FDCAN_Send_Msg(cmd, 5);
 800bc86:	2105      	movs	r1, #5
 800bc88:	4803      	ldr	r0, [pc, #12]	@ (800bc98 <Emm_V5_Stop_Now+0x40>)
 800bc8a:	f7f5 f805 	bl	8000c98 <FDCAN_Send_Msg>
}
 800bc8e:	bf00      	nop
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	24000b28 	.word	0x24000b28

0800bc9c <Emm_V5_Synchronous_motion>:
/**
 * @brief    多机同步运动
 * @param    addr  ：电机地址
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Synchronous_motion(void) {
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	af00      	add	r7, sp, #0

	// 装载命令
	cmd[0] = 0x00;                       // 地址
 800bca0:	4b0a      	ldr	r3, [pc, #40]	@ (800bccc <Emm_V5_Synchronous_motion+0x30>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0xFF;                       // 功能码
 800bca6:	4b09      	ldr	r3, [pc, #36]	@ (800bccc <Emm_V5_Synchronous_motion+0x30>)
 800bca8:	22ff      	movs	r2, #255	@ 0xff
 800bcaa:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x66;                       // 辅助码
 800bcac:	4b07      	ldr	r3, [pc, #28]	@ (800bccc <Emm_V5_Synchronous_motion+0x30>)
 800bcae:	2266      	movs	r2, #102	@ 0x66
 800bcb0:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6B;                       // 校验字节
 800bcb2:	4b06      	ldr	r3, [pc, #24]	@ (800bccc <Emm_V5_Synchronous_motion+0x30>)
 800bcb4:	226b      	movs	r2, #107	@ 0x6b
 800bcb6:	70da      	strb	r2, [r3, #3]

	// 发送命令
	FDCAN_Send_Msg(cmd, 4);
 800bcb8:	2104      	movs	r1, #4
 800bcba:	4804      	ldr	r0, [pc, #16]	@ (800bccc <Emm_V5_Synchronous_motion+0x30>)
 800bcbc:	f7f4 ffec 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(5);
 800bcc0:	2005      	movs	r0, #5
 800bcc2:	f7f7 f8ad 	bl	8002e20 <HAL_Delay>
}
 800bcc6:	bf00      	nop
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	24000b28 	.word	0x24000b28

0800bcd0 <limit>:
float A_out;
float TX_X_out;
float TX_Y_out;

// 输出限幅
float limit(float x, float min, float max) {
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	ed87 0a03 	vstr	s0, [r7, #12]
 800bcda:	edc7 0a02 	vstr	s1, [r7, #8]
 800bcde:	ed87 1a01 	vstr	s2, [r7, #4]
	x = (x > max) ? max : ((x < min) ? min : x);
 800bce2:	ed97 7a03 	vldr	s14, [r7, #12]
 800bce6:	edd7 7a01 	vldr	s15, [r7, #4]
 800bcea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcf2:	dd01      	ble.n	800bcf8 <limit+0x28>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	e00b      	b.n	800bd10 <limit+0x40>
 800bcf8:	ed97 7a03 	vldr	s14, [r7, #12]
 800bcfc:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd08:	d501      	bpl.n	800bd0e <limit+0x3e>
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	e000      	b.n	800bd10 <limit+0x40>
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	60fb      	str	r3, [r7, #12]
	return x;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	ee07 3a90 	vmov	s15, r3
}
 800bd18:	eeb0 0a67 	vmov.f32	s0, s15
 800bd1c:	3714      	adds	r7, #20
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
	...

0800bd28 <PID_Init>:
		return in;
	}
}

//	初始化PID结构体
void PID_Init(void) {
 800bd28:	b480      	push	{r7}
 800bd2a:	af00      	add	r7, sp, #0
	//======================X=====================//   20   60
	XPID.P = 20;    //0.57    0  0.1
 800bd2c:	4b69      	ldr	r3, [pc, #420]	@ (800bed4 <PID_Init+0x1ac>)
 800bd2e:	4a6a      	ldr	r2, [pc, #424]	@ (800bed8 <PID_Init+0x1b0>)
 800bd30:	601a      	str	r2, [r3, #0]
	XPID.I = 0;
 800bd32:	4b68      	ldr	r3, [pc, #416]	@ (800bed4 <PID_Init+0x1ac>)
 800bd34:	f04f 0200 	mov.w	r2, #0
 800bd38:	609a      	str	r2, [r3, #8]
	XPID.D = 60;
 800bd3a:	4b66      	ldr	r3, [pc, #408]	@ (800bed4 <PID_Init+0x1ac>)
 800bd3c:	4a67      	ldr	r2, [pc, #412]	@ (800bedc <PID_Init+0x1b4>)
 800bd3e:	615a      	str	r2, [r3, #20]

	XPID.I_LIMIT = 100.0;
 800bd40:	4b64      	ldr	r3, [pc, #400]	@ (800bed4 <PID_Init+0x1ac>)
 800bd42:	4a67      	ldr	r2, [pc, #412]	@ (800bee0 <PID_Init+0x1b8>)
 800bd44:	611a      	str	r2, [r3, #16]
	XPID.OUT_LIMIT = 100.0;
 800bd46:	4b63      	ldr	r3, [pc, #396]	@ (800bed4 <PID_Init+0x1ac>)
 800bd48:	4a65      	ldr	r2, [pc, #404]	@ (800bee0 <PID_Init+0x1b8>)
 800bd4a:	621a      	str	r2, [r3, #32]

	XPID.P_OUT = 0.0;
 800bd4c:	4b61      	ldr	r3, [pc, #388]	@ (800bed4 <PID_Init+0x1ac>)
 800bd4e:	f04f 0200 	mov.w	r2, #0
 800bd52:	605a      	str	r2, [r3, #4]
	XPID.I_OUT = 0.0;
 800bd54:	4b5f      	ldr	r3, [pc, #380]	@ (800bed4 <PID_Init+0x1ac>)
 800bd56:	f04f 0200 	mov.w	r2, #0
 800bd5a:	60da      	str	r2, [r3, #12]
	XPID.D_OUT = 0.0;
 800bd5c:	4b5d      	ldr	r3, [pc, #372]	@ (800bed4 <PID_Init+0x1ac>)
 800bd5e:	f04f 0200 	mov.w	r2, #0
 800bd62:	619a      	str	r2, [r3, #24]

	XPID.OUT = 0.0;
 800bd64:	4b5b      	ldr	r3, [pc, #364]	@ (800bed4 <PID_Init+0x1ac>)
 800bd66:	f04f 0200 	mov.w	r2, #0
 800bd6a:	61da      	str	r2, [r3, #28]

	XPID.err = 0.0;
 800bd6c:	4b59      	ldr	r3, [pc, #356]	@ (800bed4 <PID_Init+0x1ac>)
 800bd6e:	2200      	movs	r2, #0
 800bd70:	849a      	strh	r2, [r3, #36]	@ 0x24
	XPID.err_err = 0.0;
 800bd72:	4b58      	ldr	r3, [pc, #352]	@ (800bed4 <PID_Init+0x1ac>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	84da      	strh	r2, [r3, #38]	@ 0x26
	XPID.err_old = 0.0;
 800bd78:	4b56      	ldr	r3, [pc, #344]	@ (800bed4 <PID_Init+0x1ac>)
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	851a      	strh	r2, [r3, #40]	@ 0x28

	//========= =============Y=====================//
	YPID.P = 20;    //0.89                     //0.8 0 0.01
 800bd7e:	4b59      	ldr	r3, [pc, #356]	@ (800bee4 <PID_Init+0x1bc>)
 800bd80:	4a55      	ldr	r2, [pc, #340]	@ (800bed8 <PID_Init+0x1b0>)
 800bd82:	601a      	str	r2, [r3, #0]
	YPID.I = 0;
 800bd84:	4b57      	ldr	r3, [pc, #348]	@ (800bee4 <PID_Init+0x1bc>)
 800bd86:	f04f 0200 	mov.w	r2, #0
 800bd8a:	609a      	str	r2, [r3, #8]
	YPID.D = 60;    //60
 800bd8c:	4b55      	ldr	r3, [pc, #340]	@ (800bee4 <PID_Init+0x1bc>)
 800bd8e:	4a53      	ldr	r2, [pc, #332]	@ (800bedc <PID_Init+0x1b4>)
 800bd90:	615a      	str	r2, [r3, #20]
	YPID.I_LIMIT = 100.0;
 800bd92:	4b54      	ldr	r3, [pc, #336]	@ (800bee4 <PID_Init+0x1bc>)
 800bd94:	4a52      	ldr	r2, [pc, #328]	@ (800bee0 <PID_Init+0x1b8>)
 800bd96:	611a      	str	r2, [r3, #16]
	YPID.OUT_LIMIT = 100.0;
 800bd98:	4b52      	ldr	r3, [pc, #328]	@ (800bee4 <PID_Init+0x1bc>)
 800bd9a:	4a51      	ldr	r2, [pc, #324]	@ (800bee0 <PID_Init+0x1b8>)
 800bd9c:	621a      	str	r2, [r3, #32]

	YPID.P_OUT = 0.0;
 800bd9e:	4b51      	ldr	r3, [pc, #324]	@ (800bee4 <PID_Init+0x1bc>)
 800bda0:	f04f 0200 	mov.w	r2, #0
 800bda4:	605a      	str	r2, [r3, #4]
	YPID.I_OUT = 0.0;
 800bda6:	4b4f      	ldr	r3, [pc, #316]	@ (800bee4 <PID_Init+0x1bc>)
 800bda8:	f04f 0200 	mov.w	r2, #0
 800bdac:	60da      	str	r2, [r3, #12]
	YPID.D_OUT = 0.0;
 800bdae:	4b4d      	ldr	r3, [pc, #308]	@ (800bee4 <PID_Init+0x1bc>)
 800bdb0:	f04f 0200 	mov.w	r2, #0
 800bdb4:	619a      	str	r2, [r3, #24]

	YPID.OUT = 0.0;
 800bdb6:	4b4b      	ldr	r3, [pc, #300]	@ (800bee4 <PID_Init+0x1bc>)
 800bdb8:	f04f 0200 	mov.w	r2, #0
 800bdbc:	61da      	str	r2, [r3, #28]

	YPID.err = 0.0;
 800bdbe:	4b49      	ldr	r3, [pc, #292]	@ (800bee4 <PID_Init+0x1bc>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	849a      	strh	r2, [r3, #36]	@ 0x24
	YPID.err_err = 0.0;
 800bdc4:	4b47      	ldr	r3, [pc, #284]	@ (800bee4 <PID_Init+0x1bc>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	84da      	strh	r2, [r3, #38]	@ 0x26
	YPID.err_old = 0.0;
 800bdca:	4b46      	ldr	r3, [pc, #280]	@ (800bee4 <PID_Init+0x1bc>)
 800bdcc:	2200      	movs	r2, #0
 800bdce:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================A=====================//
	APID.P = 0.9;
 800bdd0:	4b45      	ldr	r3, [pc, #276]	@ (800bee8 <PID_Init+0x1c0>)
 800bdd2:	4a46      	ldr	r2, [pc, #280]	@ (800beec <PID_Init+0x1c4>)
 800bdd4:	601a      	str	r2, [r3, #0]
	APID.I = 0.0;
 800bdd6:	4b44      	ldr	r3, [pc, #272]	@ (800bee8 <PID_Init+0x1c0>)
 800bdd8:	f04f 0200 	mov.w	r2, #0
 800bddc:	609a      	str	r2, [r3, #8]
	APID.D = 0.0;
 800bdde:	4b42      	ldr	r3, [pc, #264]	@ (800bee8 <PID_Init+0x1c0>)
 800bde0:	f04f 0200 	mov.w	r2, #0
 800bde4:	615a      	str	r2, [r3, #20]

	APID.I_LIMIT = 1000.0;
 800bde6:	4b40      	ldr	r3, [pc, #256]	@ (800bee8 <PID_Init+0x1c0>)
 800bde8:	4a41      	ldr	r2, [pc, #260]	@ (800bef0 <PID_Init+0x1c8>)
 800bdea:	611a      	str	r2, [r3, #16]
	APID.OUT_LIMIT = 2350.0;
 800bdec:	4b3e      	ldr	r3, [pc, #248]	@ (800bee8 <PID_Init+0x1c0>)
 800bdee:	4a41      	ldr	r2, [pc, #260]	@ (800bef4 <PID_Init+0x1cc>)
 800bdf0:	621a      	str	r2, [r3, #32]

	APID.P_OUT = 0.0;
 800bdf2:	4b3d      	ldr	r3, [pc, #244]	@ (800bee8 <PID_Init+0x1c0>)
 800bdf4:	f04f 0200 	mov.w	r2, #0
 800bdf8:	605a      	str	r2, [r3, #4]
	APID.I_OUT = 0.0;
 800bdfa:	4b3b      	ldr	r3, [pc, #236]	@ (800bee8 <PID_Init+0x1c0>)
 800bdfc:	f04f 0200 	mov.w	r2, #0
 800be00:	60da      	str	r2, [r3, #12]
	APID.D_OUT = 0.0;
 800be02:	4b39      	ldr	r3, [pc, #228]	@ (800bee8 <PID_Init+0x1c0>)
 800be04:	f04f 0200 	mov.w	r2, #0
 800be08:	619a      	str	r2, [r3, #24]

	APID.OUT = 0.0;
 800be0a:	4b37      	ldr	r3, [pc, #220]	@ (800bee8 <PID_Init+0x1c0>)
 800be0c:	f04f 0200 	mov.w	r2, #0
 800be10:	61da      	str	r2, [r3, #28]

	APID.err = 0.0;
 800be12:	4b35      	ldr	r3, [pc, #212]	@ (800bee8 <PID_Init+0x1c0>)
 800be14:	2200      	movs	r2, #0
 800be16:	849a      	strh	r2, [r3, #36]	@ 0x24
	APID.err_err = 0.0;
 800be18:	4b33      	ldr	r3, [pc, #204]	@ (800bee8 <PID_Init+0x1c0>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	84da      	strh	r2, [r3, #38]	@ 0x26
	APID.err_old = 0.0;
 800be1e:	4b32      	ldr	r3, [pc, #200]	@ (800bee8 <PID_Init+0x1c0>)
 800be20:	2200      	movs	r2, #0
 800be22:	851a      	strh	r2, [r3, #40]	@ 0x28
	//======================TX=====================//
	TXPID.P = 1;
 800be24:	4b34      	ldr	r3, [pc, #208]	@ (800bef8 <PID_Init+0x1d0>)
 800be26:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800be2a:	601a      	str	r2, [r3, #0]
	TXPID.I = 0;
 800be2c:	4b32      	ldr	r3, [pc, #200]	@ (800bef8 <PID_Init+0x1d0>)
 800be2e:	f04f 0200 	mov.w	r2, #0
 800be32:	609a      	str	r2, [r3, #8]
	TXPID.D = 0.3;
 800be34:	4b30      	ldr	r3, [pc, #192]	@ (800bef8 <PID_Init+0x1d0>)
 800be36:	4a31      	ldr	r2, [pc, #196]	@ (800befc <PID_Init+0x1d4>)
 800be38:	615a      	str	r2, [r3, #20]

	TXPID.I_LIMIT = 100.0;
 800be3a:	4b2f      	ldr	r3, [pc, #188]	@ (800bef8 <PID_Init+0x1d0>)
 800be3c:	4a28      	ldr	r2, [pc, #160]	@ (800bee0 <PID_Init+0x1b8>)
 800be3e:	611a      	str	r2, [r3, #16]
	TXPID.OUT_LIMIT = 300.0;
 800be40:	4b2d      	ldr	r3, [pc, #180]	@ (800bef8 <PID_Init+0x1d0>)
 800be42:	4a2f      	ldr	r2, [pc, #188]	@ (800bf00 <PID_Init+0x1d8>)
 800be44:	621a      	str	r2, [r3, #32]

	TXPID.P_OUT = 0.0;
 800be46:	4b2c      	ldr	r3, [pc, #176]	@ (800bef8 <PID_Init+0x1d0>)
 800be48:	f04f 0200 	mov.w	r2, #0
 800be4c:	605a      	str	r2, [r3, #4]
	TXPID.I_OUT = 0.0;
 800be4e:	4b2a      	ldr	r3, [pc, #168]	@ (800bef8 <PID_Init+0x1d0>)
 800be50:	f04f 0200 	mov.w	r2, #0
 800be54:	60da      	str	r2, [r3, #12]
	TXPID.D_OUT = 0.0;
 800be56:	4b28      	ldr	r3, [pc, #160]	@ (800bef8 <PID_Init+0x1d0>)
 800be58:	f04f 0200 	mov.w	r2, #0
 800be5c:	619a      	str	r2, [r3, #24]

	TXPID.OUT = 0.0;
 800be5e:	4b26      	ldr	r3, [pc, #152]	@ (800bef8 <PID_Init+0x1d0>)
 800be60:	f04f 0200 	mov.w	r2, #0
 800be64:	61da      	str	r2, [r3, #28]

	TXPID.err = 0.0;
 800be66:	4b24      	ldr	r3, [pc, #144]	@ (800bef8 <PID_Init+0x1d0>)
 800be68:	2200      	movs	r2, #0
 800be6a:	849a      	strh	r2, [r3, #36]	@ 0x24
	TXPID.err_err = 0.0;
 800be6c:	4b22      	ldr	r3, [pc, #136]	@ (800bef8 <PID_Init+0x1d0>)
 800be6e:	2200      	movs	r2, #0
 800be70:	84da      	strh	r2, [r3, #38]	@ 0x26
	TXPID.err_old = 0.0;
 800be72:	4b21      	ldr	r3, [pc, #132]	@ (800bef8 <PID_Init+0x1d0>)
 800be74:	2200      	movs	r2, #0
 800be76:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================TY=====================//
	TYPID.P = -1;
 800be78:	4b22      	ldr	r3, [pc, #136]	@ (800bf04 <PID_Init+0x1dc>)
 800be7a:	4a23      	ldr	r2, [pc, #140]	@ (800bf08 <PID_Init+0x1e0>)
 800be7c:	601a      	str	r2, [r3, #0]
	TYPID.I = -0;      //0.9  0.01   0.3
 800be7e:	4b21      	ldr	r3, [pc, #132]	@ (800bf04 <PID_Init+0x1dc>)
 800be80:	f04f 0200 	mov.w	r2, #0
 800be84:	609a      	str	r2, [r3, #8]
	//0.9 0 0.2
	TYPID.D = -0.3;
 800be86:	4b1f      	ldr	r3, [pc, #124]	@ (800bf04 <PID_Init+0x1dc>)
 800be88:	4a20      	ldr	r2, [pc, #128]	@ (800bf0c <PID_Init+0x1e4>)
 800be8a:	615a      	str	r2, [r3, #20]

	TYPID.I_LIMIT = 100.0;
 800be8c:	4b1d      	ldr	r3, [pc, #116]	@ (800bf04 <PID_Init+0x1dc>)
 800be8e:	4a14      	ldr	r2, [pc, #80]	@ (800bee0 <PID_Init+0x1b8>)
 800be90:	611a      	str	r2, [r3, #16]
	TYPID.OUT_LIMIT = 300.0;
 800be92:	4b1c      	ldr	r3, [pc, #112]	@ (800bf04 <PID_Init+0x1dc>)
 800be94:	4a1a      	ldr	r2, [pc, #104]	@ (800bf00 <PID_Init+0x1d8>)
 800be96:	621a      	str	r2, [r3, #32]

	TYPID.P_OUT = 0.0;
 800be98:	4b1a      	ldr	r3, [pc, #104]	@ (800bf04 <PID_Init+0x1dc>)
 800be9a:	f04f 0200 	mov.w	r2, #0
 800be9e:	605a      	str	r2, [r3, #4]
	TYPID.I_OUT = 0.0;
 800bea0:	4b18      	ldr	r3, [pc, #96]	@ (800bf04 <PID_Init+0x1dc>)
 800bea2:	f04f 0200 	mov.w	r2, #0
 800bea6:	60da      	str	r2, [r3, #12]
	TYPID.D_OUT = 0.0;
 800bea8:	4b16      	ldr	r3, [pc, #88]	@ (800bf04 <PID_Init+0x1dc>)
 800beaa:	f04f 0200 	mov.w	r2, #0
 800beae:	619a      	str	r2, [r3, #24]

	TYPID.OUT = 0.0;
 800beb0:	4b14      	ldr	r3, [pc, #80]	@ (800bf04 <PID_Init+0x1dc>)
 800beb2:	f04f 0200 	mov.w	r2, #0
 800beb6:	61da      	str	r2, [r3, #28]

	TYPID.err = 0.0;
 800beb8:	4b12      	ldr	r3, [pc, #72]	@ (800bf04 <PID_Init+0x1dc>)
 800beba:	2200      	movs	r2, #0
 800bebc:	849a      	strh	r2, [r3, #36]	@ 0x24
	TYPID.err_err = 0.0;
 800bebe:	4b11      	ldr	r3, [pc, #68]	@ (800bf04 <PID_Init+0x1dc>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	84da      	strh	r2, [r3, #38]	@ 0x26
	TYPID.err_old = 0.0;
 800bec4:	4b0f      	ldr	r3, [pc, #60]	@ (800bf04 <PID_Init+0x1dc>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800beca:	bf00      	nop
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	24000b40 	.word	0x24000b40
 800bed8:	41a00000 	.word	0x41a00000
 800bedc:	42700000 	.word	0x42700000
 800bee0:	42c80000 	.word	0x42c80000
 800bee4:	24000b6c 	.word	0x24000b6c
 800bee8:	24000b98 	.word	0x24000b98
 800beec:	3f666666 	.word	0x3f666666
 800bef0:	447a0000 	.word	0x447a0000
 800bef4:	4512e000 	.word	0x4512e000
 800bef8:	24000bc4 	.word	0x24000bc4
 800befc:	3e99999a 	.word	0x3e99999a
 800bf00:	43960000 	.word	0x43960000
 800bf04:	24000bf0 	.word	0x24000bf0
 800bf08:	bf800000 	.word	0xbf800000
 800bf0c:	be99999a 	.word	0xbe99999a

0800bf10 <Tx_X_Ctrl>:
	PID->err_old = PID->err;

	return PID->OUT;
}
/* TX的X轴调整 */
short Tx_X_Ctrl(_PID *PID, float goal) {
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Tx_NOW - goal;
 800bf1c:	4b4e      	ldr	r3, [pc, #312]	@ (800c058 <Tx_X_Ctrl+0x148>)
 800bf1e:	ed93 7a00 	vldr	s14, [r3]
 800bf22:	edd7 7a00 	vldr	s15, [r7]
 800bf26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf2e:	ee17 3a90 	vmov	r3, s15
 800bf32:	b21a      	sxth	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800bf3e:	b29a      	uxth	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	b21a      	sxth	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	ed93 7a00 	vldr	s14, [r3]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	ed93 7a03 	vldr	s14, [r3, #12]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	edd3 6a02 	vldr	s13, [r3, #8]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800bf82:	ee07 3a90 	vmov	s15, r3
 800bf86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bf8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	ed93 7a05 	vldr	s14, [r3, #20]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800bfa4:	ee07 3a90 	vmov	s15, r3
 800bfa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	ed93 7a03 	vldr	s14, [r3, #12]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	edd3 7a04 	vldr	s15, [r3, #16]
 800bfc2:	eef1 7a67 	vneg.f32	s15, s15
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	edd3 6a04 	vldr	s13, [r3, #16]
 800bfcc:	eeb0 1a66 	vmov.f32	s2, s13
 800bfd0:	eef0 0a67 	vmov.f32	s1, s15
 800bfd4:	eeb0 0a47 	vmov.f32	s0, s14
 800bfd8:	f7ff fe7a 	bl	800bcd0 <limit>
 800bfdc:	eef0 7a40 	vmov.f32	s15, s0
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	ed93 7a01 	vldr	s14, [r3, #4]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	edd3 7a03 	vldr	s15, [r3, #12]
 800bff2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	edd3 7a06 	vldr	s15, [r3, #24]
 800bffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	ed93 7a07 	vldr	s14, [r3, #28]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c012:	eef1 7a67 	vneg.f32	s15, s15
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	edd3 6a08 	vldr	s13, [r3, #32]
 800c01c:	eeb0 1a66 	vmov.f32	s2, s13
 800c020:	eef0 0a67 	vmov.f32	s1, s15
 800c024:	eeb0 0a47 	vmov.f32	s0, s14
 800c028:	f7ff fe52 	bl	800bcd0 <limit>
 800c02c:	eef0 7a40 	vmov.f32	s15, s0
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	edd3 7a07 	vldr	s15, [r3, #28]
 800c046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c04a:	ee17 3a90 	vmov	r3, s15
 800c04e:	b21b      	sxth	r3, r3
}
 800c050:	4618      	mov	r0, r3
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	24000474 	.word	0x24000474

0800c05c <Tx_Y_Ctrl>:

/* TX的Y轴调整 */
short Tx_Y_Ctrl(_PID *PID, float goal) {
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Ty_NOW - goal;
 800c068:	4b4e      	ldr	r3, [pc, #312]	@ (800c1a4 <Tx_Y_Ctrl+0x148>)
 800c06a:	ed93 7a00 	vldr	s14, [r3]
 800c06e:	edd7 7a00 	vldr	s15, [r7]
 800c072:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c076:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c07a:	ee17 3a90 	vmov	r3, s15
 800c07e:	b21a      	sxth	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800c092:	b29b      	uxth	r3, r3
 800c094:	1ad3      	subs	r3, r2, r3
 800c096:	b29b      	uxth	r3, r3
 800c098:	b21a      	sxth	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	ed93 7a00 	vldr	s14, [r3]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c0aa:	ee07 3a90 	vmov	s15, r3
 800c0ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	ed93 7a03 	vldr	s14, [r3, #12]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	edd3 6a02 	vldr	s13, [r3, #8]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c0ce:	ee07 3a90 	vmov	s15, r3
 800c0d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	ed93 7a05 	vldr	s14, [r3, #20]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c0f0:	ee07 3a90 	vmov	s15, r3
 800c0f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	ed93 7a03 	vldr	s14, [r3, #12]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	edd3 7a04 	vldr	s15, [r3, #16]
 800c10e:	eef1 7a67 	vneg.f32	s15, s15
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	edd3 6a04 	vldr	s13, [r3, #16]
 800c118:	eeb0 1a66 	vmov.f32	s2, s13
 800c11c:	eef0 0a67 	vmov.f32	s1, s15
 800c120:	eeb0 0a47 	vmov.f32	s0, s14
 800c124:	f7ff fdd4 	bl	800bcd0 <limit>
 800c128:	eef0 7a40 	vmov.f32	s15, s0
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	ed93 7a01 	vldr	s14, [r3, #4]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	edd3 7a03 	vldr	s15, [r3, #12]
 800c13e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	edd3 7a06 	vldr	s15, [r3, #24]
 800c148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	ed93 7a07 	vldr	s14, [r3, #28]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	edd3 7a08 	vldr	s15, [r3, #32]
 800c15e:	eef1 7a67 	vneg.f32	s15, s15
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	edd3 6a08 	vldr	s13, [r3, #32]
 800c168:	eeb0 1a66 	vmov.f32	s2, s13
 800c16c:	eef0 0a67 	vmov.f32	s1, s15
 800c170:	eeb0 0a47 	vmov.f32	s0, s14
 800c174:	f7ff fdac 	bl	800bcd0 <limit>
 800c178:	eef0 7a40 	vmov.f32	s15, s0
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c196:	ee17 3a90 	vmov	r3, s15
 800c19a:	b21b      	sxth	r3, r3
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	24000478 	.word	0x24000478

0800c1a8 <GetRxFlag>:
bool Call_Flag = false;

int time5_jiancha = 0;

uint8_t GetRxFlag(void)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	af00      	add	r7, sp, #0
	if (RxFlag == 1)
 800c1ac:	4b07      	ldr	r3, [pc, #28]	@ (800c1cc <GetRxFlag+0x24>)
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d104      	bne.n	800c1be <GetRxFlag+0x16>
	{
		RxFlag = 0;
 800c1b4:	4b05      	ldr	r3, [pc, #20]	@ (800c1cc <GetRxFlag+0x24>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	701a      	strb	r2, [r3, #0]
		return 1;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	e000      	b.n	800c1c0 <GetRxFlag+0x18>
	}
	return 0;
 800c1be:	2300      	movs	r3, #0
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	240002bd 	.word	0x240002bd

0800c1d0 <Move_Line>:
//		;
////	RxFlag = 0;·
//	HAL_Delay(30);
//}
bool Move_Line(u16 speed, u8 acc, u32 length)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af04      	add	r7, sp, #16
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	603a      	str	r2, [r7, #0]
 800c1da:	80fb      	strh	r3, [r7, #6]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800c1e0:	4b26      	ldr	r3, [pc, #152]	@ (800c27c <Move_Line+0xac>)
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <Move_Line+0x1c>
		return false;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	e042      	b.n	800c272 <Move_Line+0xa2>
	else
		Choke_Flag = true;
 800c1ec:	4b23      	ldr	r3, [pc, #140]	@ (800c27c <Move_Line+0xac>)
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c1f2:	4b23      	ldr	r3, [pc, #140]	@ (800c280 <Move_Line+0xb0>)
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c1f8:	7979      	ldrb	r1, [r7, #5]
 800c1fa:	88fa      	ldrh	r2, [r7, #6]
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	9302      	str	r3, [sp, #8]
 800c200:	2300      	movs	r3, #0
 800c202:	9301      	str	r3, [sp, #4]
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	9300      	str	r3, [sp, #0]
 800c208:	460b      	mov	r3, r1
 800c20a:	2100      	movs	r1, #0
 800c20c:	2001      	movs	r0, #1
 800c20e:	f7ff fccf 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c212:	7979      	ldrb	r1, [r7, #5]
 800c214:	88fa      	ldrh	r2, [r7, #6]
 800c216:	2301      	movs	r3, #1
 800c218:	9302      	str	r3, [sp, #8]
 800c21a:	2300      	movs	r3, #0
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	9300      	str	r3, [sp, #0]
 800c222:	460b      	mov	r3, r1
 800c224:	2100      	movs	r1, #0
 800c226:	2002      	movs	r0, #2
 800c228:	f7ff fcc2 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c22c:	7979      	ldrb	r1, [r7, #5]
 800c22e:	88fa      	ldrh	r2, [r7, #6]
 800c230:	2301      	movs	r3, #1
 800c232:	9302      	str	r3, [sp, #8]
 800c234:	2300      	movs	r3, #0
 800c236:	9301      	str	r3, [sp, #4]
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	460b      	mov	r3, r1
 800c23e:	2100      	movs	r1, #0
 800c240:	2003      	movs	r0, #3
 800c242:	f7ff fcb5 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c246:	7979      	ldrb	r1, [r7, #5]
 800c248:	88fa      	ldrh	r2, [r7, #6]
 800c24a:	2301      	movs	r3, #1
 800c24c:	9302      	str	r3, [sp, #8]
 800c24e:	2300      	movs	r3, #0
 800c250:	9301      	str	r3, [sp, #4]
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	460b      	mov	r3, r1
 800c258:	2100      	movs	r1, #0
 800c25a:	2004      	movs	r0, #4
 800c25c:	f7ff fca8 	bl	800bbb0 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c260:	f7ff fd1c 	bl	800bc9c <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c264:	4807      	ldr	r0, [pc, #28]	@ (800c284 <Move_Line+0xb4>)
 800c266:	f7fb fe37 	bl	8007ed8 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c26a:	4b07      	ldr	r3, [pc, #28]	@ (800c288 <Move_Line+0xb8>)
 800c26c:	2201      	movs	r2, #1
 800c26e:	701a      	strb	r2, [r3, #0]
	return true;
 800c270:	2301      	movs	r3, #1
}
 800c272:	4618      	mov	r0, r3
 800c274:	3708      	adds	r7, #8
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	24000c24 	.word	0x24000c24
 800c280:	24000c25 	.word	0x24000c25
 800c284:	24000570 	.word	0x24000570
 800c288:	24000c26 	.word	0x24000c26

0800c28c <Move_Left>:
bool Move_Left(u16 speed, u8 acc, u32 length)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b086      	sub	sp, #24
 800c290:	af04      	add	r7, sp, #16
 800c292:	4603      	mov	r3, r0
 800c294:	603a      	str	r2, [r7, #0]
 800c296:	80fb      	strh	r3, [r7, #6]
 800c298:	460b      	mov	r3, r1
 800c29a:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800c29c:	4b26      	ldr	r3, [pc, #152]	@ (800c338 <Move_Left+0xac>)
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d001      	beq.n	800c2a8 <Move_Left+0x1c>
		return false;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	e042      	b.n	800c32e <Move_Left+0xa2>
	else
		Choke_Flag = true;
 800c2a8:	4b23      	ldr	r3, [pc, #140]	@ (800c338 <Move_Left+0xac>)
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c2ae:	4b23      	ldr	r3, [pc, #140]	@ (800c33c <Move_Left+0xb0>)
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c2b4:	7979      	ldrb	r1, [r7, #5]
 800c2b6:	88fa      	ldrh	r2, [r7, #6]
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	9302      	str	r3, [sp, #8]
 800c2bc:	2300      	movs	r3, #0
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	2101      	movs	r1, #1
 800c2c8:	2001      	movs	r0, #1
 800c2ca:	f7ff fc71 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c2ce:	7979      	ldrb	r1, [r7, #5]
 800c2d0:	88fa      	ldrh	r2, [r7, #6]
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	9302      	str	r3, [sp, #8]
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	460b      	mov	r3, r1
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	2002      	movs	r0, #2
 800c2e4:	f7ff fc64 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c2e8:	7979      	ldrb	r1, [r7, #5]
 800c2ea:	88fa      	ldrh	r2, [r7, #6]
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	9302      	str	r3, [sp, #8]
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	9301      	str	r3, [sp, #4]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	2101      	movs	r1, #1
 800c2fc:	2003      	movs	r0, #3
 800c2fe:	f7ff fc57 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c302:	7979      	ldrb	r1, [r7, #5]
 800c304:	88fa      	ldrh	r2, [r7, #6]
 800c306:	2301      	movs	r3, #1
 800c308:	9302      	str	r3, [sp, #8]
 800c30a:	2300      	movs	r3, #0
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	460b      	mov	r3, r1
 800c314:	2100      	movs	r1, #0
 800c316:	2004      	movs	r0, #4
 800c318:	f7ff fc4a 	bl	800bbb0 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c31c:	f7ff fcbe 	bl	800bc9c <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c320:	4807      	ldr	r0, [pc, #28]	@ (800c340 <Move_Left+0xb4>)
 800c322:	f7fb fdd9 	bl	8007ed8 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c326:	4b07      	ldr	r3, [pc, #28]	@ (800c344 <Move_Left+0xb8>)
 800c328:	2201      	movs	r2, #1
 800c32a:	701a      	strb	r2, [r3, #0]
	return true;
 800c32c:	2301      	movs	r3, #1
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	24000c24 	.word	0x24000c24
 800c33c:	24000c25 	.word	0x24000c25
 800c340:	24000570 	.word	0x24000570
 800c344:	24000c26 	.word	0x24000c26

0800c348 <Move_Back>:

bool Move_Back(u16 speed, u8 acc, u32 length)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b086      	sub	sp, #24
 800c34c:	af04      	add	r7, sp, #16
 800c34e:	4603      	mov	r3, r0
 800c350:	603a      	str	r2, [r7, #0]
 800c352:	80fb      	strh	r3, [r7, #6]
 800c354:	460b      	mov	r3, r1
 800c356:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800c358:	4b26      	ldr	r3, [pc, #152]	@ (800c3f4 <Move_Back+0xac>)
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d001      	beq.n	800c364 <Move_Back+0x1c>
		return false;
 800c360:	2300      	movs	r3, #0
 800c362:	e042      	b.n	800c3ea <Move_Back+0xa2>
	else
		Choke_Flag = true;
 800c364:	4b23      	ldr	r3, [pc, #140]	@ (800c3f4 <Move_Back+0xac>)
 800c366:	2201      	movs	r2, #1
 800c368:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c36a:	4b23      	ldr	r3, [pc, #140]	@ (800c3f8 <Move_Back+0xb0>)
 800c36c:	2201      	movs	r2, #1
 800c36e:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c370:	7979      	ldrb	r1, [r7, #5]
 800c372:	88fa      	ldrh	r2, [r7, #6]
 800c374:	2301      	movs	r3, #1
 800c376:	9302      	str	r3, [sp, #8]
 800c378:	2300      	movs	r3, #0
 800c37a:	9301      	str	r3, [sp, #4]
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	460b      	mov	r3, r1
 800c382:	2101      	movs	r1, #1
 800c384:	2001      	movs	r0, #1
 800c386:	f7ff fc13 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c38a:	7979      	ldrb	r1, [r7, #5]
 800c38c:	88fa      	ldrh	r2, [r7, #6]
 800c38e:	2301      	movs	r3, #1
 800c390:	9302      	str	r3, [sp, #8]
 800c392:	2300      	movs	r3, #0
 800c394:	9301      	str	r3, [sp, #4]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	460b      	mov	r3, r1
 800c39c:	2101      	movs	r1, #1
 800c39e:	2002      	movs	r0, #2
 800c3a0:	f7ff fc06 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c3a4:	7979      	ldrb	r1, [r7, #5]
 800c3a6:	88fa      	ldrh	r2, [r7, #6]
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	9302      	str	r3, [sp, #8]
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	9301      	str	r3, [sp, #4]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	2003      	movs	r0, #3
 800c3ba:	f7ff fbf9 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c3be:	7979      	ldrb	r1, [r7, #5]
 800c3c0:	88fa      	ldrh	r2, [r7, #6]
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	9302      	str	r3, [sp, #8]
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	9301      	str	r3, [sp, #4]
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	2101      	movs	r1, #1
 800c3d2:	2004      	movs	r0, #4
 800c3d4:	f7ff fbec 	bl	800bbb0 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c3d8:	f7ff fc60 	bl	800bc9c <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c3dc:	4807      	ldr	r0, [pc, #28]	@ (800c3fc <Move_Back+0xb4>)
 800c3de:	f7fb fd7b 	bl	8007ed8 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c3e2:	4b07      	ldr	r3, [pc, #28]	@ (800c400 <Move_Back+0xb8>)
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	701a      	strb	r2, [r3, #0]
	return true;
 800c3e8:	2301      	movs	r3, #1
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3708      	adds	r7, #8
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	24000c24 	.word	0x24000c24
 800c3f8:	24000c25 	.word	0x24000c25
 800c3fc:	24000570 	.word	0x24000570
 800c400:	24000c26 	.word	0x24000c26

0800c404 <Move_fanxuzhuan>:

bool Move_fanxuzhuan(u16 speed, u8 acc, u32 length)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af04      	add	r7, sp, #16
 800c40a:	4603      	mov	r3, r0
 800c40c:	603a      	str	r2, [r7, #0]
 800c40e:	80fb      	strh	r3, [r7, #6]
 800c410:	460b      	mov	r3, r1
 800c412:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800c414:	4b26      	ldr	r3, [pc, #152]	@ (800c4b0 <Move_fanxuzhuan+0xac>)
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d001      	beq.n	800c420 <Move_fanxuzhuan+0x1c>
		return false;
 800c41c:	2300      	movs	r3, #0
 800c41e:	e042      	b.n	800c4a6 <Move_fanxuzhuan+0xa2>
	else
		Choke_Flag = true;
 800c420:	4b23      	ldr	r3, [pc, #140]	@ (800c4b0 <Move_fanxuzhuan+0xac>)
 800c422:	2201      	movs	r2, #1
 800c424:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c426:	4b23      	ldr	r3, [pc, #140]	@ (800c4b4 <Move_fanxuzhuan+0xb0>)
 800c428:	2201      	movs	r2, #1
 800c42a:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c42c:	7979      	ldrb	r1, [r7, #5]
 800c42e:	88fa      	ldrh	r2, [r7, #6]
 800c430:	2301      	movs	r3, #1
 800c432:	9302      	str	r3, [sp, #8]
 800c434:	2300      	movs	r3, #0
 800c436:	9301      	str	r3, [sp, #4]
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	9300      	str	r3, [sp, #0]
 800c43c:	460b      	mov	r3, r1
 800c43e:	2101      	movs	r1, #1
 800c440:	2001      	movs	r0, #1
 800c442:	f7ff fbb5 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c446:	7979      	ldrb	r1, [r7, #5]
 800c448:	88fa      	ldrh	r2, [r7, #6]
 800c44a:	2301      	movs	r3, #1
 800c44c:	9302      	str	r3, [sp, #8]
 800c44e:	2300      	movs	r3, #0
 800c450:	9301      	str	r3, [sp, #4]
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	460b      	mov	r3, r1
 800c458:	2100      	movs	r1, #0
 800c45a:	2002      	movs	r0, #2
 800c45c:	f7ff fba8 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c460:	7979      	ldrb	r1, [r7, #5]
 800c462:	88fa      	ldrh	r2, [r7, #6]
 800c464:	2301      	movs	r3, #1
 800c466:	9302      	str	r3, [sp, #8]
 800c468:	2300      	movs	r3, #0
 800c46a:	9301      	str	r3, [sp, #4]
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	9300      	str	r3, [sp, #0]
 800c470:	460b      	mov	r3, r1
 800c472:	2100      	movs	r1, #0
 800c474:	2003      	movs	r0, #3
 800c476:	f7ff fb9b 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c47a:	7979      	ldrb	r1, [r7, #5]
 800c47c:	88fa      	ldrh	r2, [r7, #6]
 800c47e:	2301      	movs	r3, #1
 800c480:	9302      	str	r3, [sp, #8]
 800c482:	2300      	movs	r3, #0
 800c484:	9301      	str	r3, [sp, #4]
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	9300      	str	r3, [sp, #0]
 800c48a:	460b      	mov	r3, r1
 800c48c:	2101      	movs	r1, #1
 800c48e:	2004      	movs	r0, #4
 800c490:	f7ff fb8e 	bl	800bbb0 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c494:	f7ff fc02 	bl	800bc9c <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c498:	4807      	ldr	r0, [pc, #28]	@ (800c4b8 <Move_fanxuzhuan+0xb4>)
 800c49a:	f7fb fd1d 	bl	8007ed8 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c49e:	4b07      	ldr	r3, [pc, #28]	@ (800c4bc <Move_fanxuzhuan+0xb8>)
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	701a      	strb	r2, [r3, #0]
	return true;
 800c4a4:	2301      	movs	r3, #1
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3708      	adds	r7, #8
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	24000c24 	.word	0x24000c24
 800c4b4:	24000c25 	.word	0x24000c25
 800c4b8:	24000570 	.word	0x24000570
 800c4bc:	24000c26 	.word	0x24000c26

0800c4c0 <Move_Right>:
// //	RxFlag = 0;
// 	HAL_Delay(30);
// }

bool Move_Right(u16 speed, u8 acc, u32 length)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af04      	add	r7, sp, #16
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	603a      	str	r2, [r7, #0]
 800c4ca:	80fb      	strh	r3, [r7, #6]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800c4d0:	4b26      	ldr	r3, [pc, #152]	@ (800c56c <Move_Right+0xac>)
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d001      	beq.n	800c4dc <Move_Right+0x1c>
		return false;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	e042      	b.n	800c562 <Move_Right+0xa2>
	else
		Choke_Flag = true;
 800c4dc:	4b23      	ldr	r3, [pc, #140]	@ (800c56c <Move_Right+0xac>)
 800c4de:	2201      	movs	r2, #1
 800c4e0:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c4e2:	4b23      	ldr	r3, [pc, #140]	@ (800c570 <Move_Right+0xb0>)
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c4e8:	7979      	ldrb	r1, [r7, #5]
 800c4ea:	88fa      	ldrh	r2, [r7, #6]
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	9302      	str	r3, [sp, #8]
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	9301      	str	r3, [sp, #4]
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	2001      	movs	r0, #1
 800c4fe:	f7ff fb57 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c502:	7979      	ldrb	r1, [r7, #5]
 800c504:	88fa      	ldrh	r2, [r7, #6]
 800c506:	2301      	movs	r3, #1
 800c508:	9302      	str	r3, [sp, #8]
 800c50a:	2300      	movs	r3, #0
 800c50c:	9301      	str	r3, [sp, #4]
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	460b      	mov	r3, r1
 800c514:	2101      	movs	r1, #1
 800c516:	2002      	movs	r0, #2
 800c518:	f7ff fb4a 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c51c:	7979      	ldrb	r1, [r7, #5]
 800c51e:	88fa      	ldrh	r2, [r7, #6]
 800c520:	2301      	movs	r3, #1
 800c522:	9302      	str	r3, [sp, #8]
 800c524:	2300      	movs	r3, #0
 800c526:	9301      	str	r3, [sp, #4]
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	460b      	mov	r3, r1
 800c52e:	2100      	movs	r1, #0
 800c530:	2003      	movs	r0, #3
 800c532:	f7ff fb3d 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c536:	7979      	ldrb	r1, [r7, #5]
 800c538:	88fa      	ldrh	r2, [r7, #6]
 800c53a:	2301      	movs	r3, #1
 800c53c:	9302      	str	r3, [sp, #8]
 800c53e:	2300      	movs	r3, #0
 800c540:	9301      	str	r3, [sp, #4]
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	9300      	str	r3, [sp, #0]
 800c546:	460b      	mov	r3, r1
 800c548:	2101      	movs	r1, #1
 800c54a:	2004      	movs	r0, #4
 800c54c:	f7ff fb30 	bl	800bbb0 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c550:	f7ff fba4 	bl	800bc9c <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c554:	4807      	ldr	r0, [pc, #28]	@ (800c574 <Move_Right+0xb4>)
 800c556:	f7fb fcbf 	bl	8007ed8 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c55a:	4b07      	ldr	r3, [pc, #28]	@ (800c578 <Move_Right+0xb8>)
 800c55c:	2201      	movs	r2, #1
 800c55e:	701a      	strb	r2, [r3, #0]
	return true;
 800c560:	2301      	movs	r3, #1
}
 800c562:	4618      	mov	r0, r3
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	24000c24 	.word	0x24000c24
 800c570:	24000c25 	.word	0x24000c25
 800c574:	24000570 	.word	0x24000570
 800c578:	24000c26 	.word	0x24000c26

0800c57c <Move_zhengxuzhuan>:
////	RxFlag = 0;
//	HAL_Delay(30);
//}

bool Move_zhengxuzhuan(u16 speed, u8 acc, u32 length)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b086      	sub	sp, #24
 800c580:	af04      	add	r7, sp, #16
 800c582:	4603      	mov	r3, r0
 800c584:	603a      	str	r2, [r7, #0]
 800c586:	80fb      	strh	r3, [r7, #6]
 800c588:	460b      	mov	r3, r1
 800c58a:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800c58c:	4b26      	ldr	r3, [pc, #152]	@ (800c628 <Move_zhengxuzhuan+0xac>)
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d001      	beq.n	800c598 <Move_zhengxuzhuan+0x1c>
		return false;
 800c594:	2300      	movs	r3, #0
 800c596:	e042      	b.n	800c61e <Move_zhengxuzhuan+0xa2>
	else
		Choke_Flag = true;
 800c598:	4b23      	ldr	r3, [pc, #140]	@ (800c628 <Move_zhengxuzhuan+0xac>)
 800c59a:	2201      	movs	r2, #1
 800c59c:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c59e:	4b23      	ldr	r3, [pc, #140]	@ (800c62c <Move_zhengxuzhuan+0xb0>)
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c5a4:	7979      	ldrb	r1, [r7, #5]
 800c5a6:	88fa      	ldrh	r2, [r7, #6]
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	9302      	str	r3, [sp, #8]
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	9301      	str	r3, [sp, #4]
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	2001      	movs	r0, #1
 800c5ba:	f7ff faf9 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c5be:	7979      	ldrb	r1, [r7, #5]
 800c5c0:	88fa      	ldrh	r2, [r7, #6]
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	9302      	str	r3, [sp, #8]
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	9301      	str	r3, [sp, #4]
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	9300      	str	r3, [sp, #0]
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	2101      	movs	r1, #1
 800c5d2:	2002      	movs	r0, #2
 800c5d4:	f7ff faec 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c5d8:	7979      	ldrb	r1, [r7, #5]
 800c5da:	88fa      	ldrh	r2, [r7, #6]
 800c5dc:	2301      	movs	r3, #1
 800c5de:	9302      	str	r3, [sp, #8]
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	9301      	str	r3, [sp, #4]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	2101      	movs	r1, #1
 800c5ec:	2003      	movs	r0, #3
 800c5ee:	f7ff fadf 	bl	800bbb0 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c5f2:	7979      	ldrb	r1, [r7, #5]
 800c5f4:	88fa      	ldrh	r2, [r7, #6]
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	9302      	str	r3, [sp, #8]
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	460b      	mov	r3, r1
 800c604:	2100      	movs	r1, #0
 800c606:	2004      	movs	r0, #4
 800c608:	f7ff fad2 	bl	800bbb0 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c60c:	f7ff fb46 	bl	800bc9c <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c610:	4807      	ldr	r0, [pc, #28]	@ (800c630 <Move_zhengxuzhuan+0xb4>)
 800c612:	f7fb fc61 	bl	8007ed8 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c616:	4b07      	ldr	r3, [pc, #28]	@ (800c634 <Move_zhengxuzhuan+0xb8>)
 800c618:	2201      	movs	r2, #1
 800c61a:	701a      	strb	r2, [r3, #0]
	return true;
 800c61c:	2301      	movs	r3, #1
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3708      	adds	r7, #8
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	24000c24 	.word	0x24000c24
 800c62c:	24000c25 	.word	0x24000c25
 800c630:	24000570 	.word	0x24000570
 800c634:	24000c26 	.word	0x24000c26

0800c638 <Drop_Location_jiang>:
//	if(High_Length>=14000)
//		Emm_V5_Stop_Now(5,0);
//	HAL_Delay(30);
//}
void Drop_Location_jiang(u16 speed, u8 acc, u32 length)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b088      	sub	sp, #32
 800c63c:	af04      	add	r7, sp, #16
 800c63e:	4603      	mov	r3, r0
 800c640:	603a      	str	r2, [r7, #0]
 800c642:	80fb      	strh	r3, [r7, #6]
 800c644:	460b      	mov	r3, r1
 800c646:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c648:	88fb      	ldrh	r3, [r7, #6]
 800c64a:	683a      	ldr	r2, [r7, #0]
 800c64c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c650:	4613      	mov	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4413      	add	r3, r2
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(5, 1, speed, acc, length, 1, 0);
 800c65a:	7979      	ldrb	r1, [r7, #5]
 800c65c:	88fa      	ldrh	r2, [r7, #6]
 800c65e:	2300      	movs	r3, #0
 800c660:	9302      	str	r3, [sp, #8]
 800c662:	2301      	movs	r3, #1
 800c664:	9301      	str	r3, [sp, #4]
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	460b      	mov	r3, r1
 800c66c:	2101      	movs	r1, #1
 800c66e:	2005      	movs	r0, #5
 800c670:	f7ff fa9e 	bl	800bbb0 <Emm_V5_Pos_Control>
//	检查到位回读
	Emm_mode = 1;
 800c674:	4b0f      	ldr	r3, [pc, #60]	@ (800c6b4 <Drop_Location_jiang+0x7c>)
 800c676:	2201      	movs	r2, #1
 800c678:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c680:	4a0d      	ldr	r2, [pc, #52]	@ (800c6b8 <Drop_Location_jiang+0x80>)
 800c682:	fb82 1203 	smull	r1, r2, r2, r3
 800c686:	1092      	asrs	r2, r2, #2
 800c688:	17db      	asrs	r3, r3, #31
 800c68a:	1ad3      	subs	r3, r2, r3
 800c68c:	4a0b      	ldr	r2, [pc, #44]	@ (800c6bc <Drop_Location_jiang+0x84>)
 800c68e:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c690:	bf00      	nop
 800c692:	f7ff fd89 	bl	800c1a8 <GetRxFlag>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d103      	bne.n	800c6a4 <Drop_Location_jiang+0x6c>
 800c69c:	4b07      	ldr	r3, [pc, #28]	@ (800c6bc <Drop_Location_jiang+0x84>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d1f6      	bne.n	800c692 <Drop_Location_jiang+0x5a>
		;
	HAL_Delay(30);
 800c6a4:	201e      	movs	r0, #30
 800c6a6:	f7f6 fbbb 	bl	8002e20 <HAL_Delay>
}
 800c6aa:	bf00      	nop
 800c6ac:	3710      	adds	r7, #16
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	240002bc 	.word	0x240002bc
 800c6b8:	66666667 	.word	0x66666667
 800c6bc:	24000c28 	.word	0x24000c28

0800c6c0 <Move_Stop>:
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动

}

void Move_Stop(void)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	af00      	add	r7, sp, #0
	Emm_V5_Stop_Now(1, true);
 800c6c4:	2101      	movs	r1, #1
 800c6c6:	2001      	movs	r0, #1
 800c6c8:	f7ff fac6 	bl	800bc58 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(2, true);
 800c6cc:	2101      	movs	r1, #1
 800c6ce:	2002      	movs	r0, #2
 800c6d0:	f7ff fac2 	bl	800bc58 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(3, true);
 800c6d4:	2101      	movs	r1, #1
 800c6d6:	2003      	movs	r0, #3
 800c6d8:	f7ff fabe 	bl	800bc58 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(4, true);
 800c6dc:	2101      	movs	r1, #1
 800c6de:	2004      	movs	r0, #4
 800c6e0:	f7ff faba 	bl	800bc58 <Emm_V5_Stop_Now>
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动
 800c6e4:	f7ff fada 	bl	800bc9c <Emm_V5_Synchronous_motion>
}
 800c6e8:	bf00      	nop
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <Move_TO_jianzhi1>:
	Move_Line(RunSpeed, RunAcc, Lineclk);
	HAL_Delay(yanshi);
}

void Move_TO_jianzhi1(float Backclk, float fanzhuanclk) //粗加工区
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	ed87 0a01 	vstr	s0, [r7, #4]
 800c6f6:	edc7 0a00 	vstr	s1, [r7]
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c6fa:	edd7 7a01 	vldr	s15, [r7, #4]
 800c6fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c702:	ee17 2a90 	vmov	r2, s15
 800c706:	2178      	movs	r1, #120	@ 0x78
 800c708:	2064      	movs	r0, #100	@ 0x64
 800c70a:	f7ff fe1d 	bl	800c348 <Move_Back>
 800c70e:	4603      	mov	r3, r0
 800c710:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(5);
 800c712:	2005      	movs	r0, #5
 800c714:	f7f6 fb84 	bl	8002e20 <HAL_Delay>
	while (temp != true)
 800c718:	e00b      	b.n	800c732 <Move_TO_jianzhi1+0x46>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c71a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c71e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c722:	ee17 2a90 	vmov	r2, s15
 800c726:	2178      	movs	r1, #120	@ 0x78
 800c728:	2064      	movs	r0, #100	@ 0x64
 800c72a:	f7ff fe0d 	bl	800c348 <Move_Back>
 800c72e:	4603      	mov	r3, r0
 800c730:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c732:	7bfb      	ldrb	r3, [r7, #15]
 800c734:	f083 0301 	eor.w	r3, r3, #1
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1ed      	bne.n	800c71a <Move_TO_jianzhi1+0x2e>
	}
	temp = Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800c73e:	edd7 7a00 	vldr	s15, [r7]
 800c742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c746:	ee17 2a90 	vmov	r2, s15
 800c74a:	2178      	movs	r1, #120	@ 0x78
 800c74c:	2064      	movs	r0, #100	@ 0x64
 800c74e:	f7ff fe59 	bl	800c404 <Move_fanxuzhuan>
 800c752:	4603      	mov	r3, r0
 800c754:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c756:	e00b      	b.n	800c770 <Move_TO_jianzhi1+0x84>
	{
		temp = Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800c758:	edd7 7a00 	vldr	s15, [r7]
 800c75c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c760:	ee17 2a90 	vmov	r2, s15
 800c764:	2178      	movs	r1, #120	@ 0x78
 800c766:	2064      	movs	r0, #100	@ 0x64
 800c768:	f7ff fe4c 	bl	800c404 <Move_fanxuzhuan>
 800c76c:	4603      	mov	r3, r0
 800c76e:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c770:	7bfb      	ldrb	r3, [r7, #15]
 800c772:	f083 0301 	eor.w	r3, r3, #1
 800c776:	b2db      	uxtb	r3, r3
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d1ed      	bne.n	800c758 <Move_TO_jianzhi1+0x6c>
	}
}
 800c77c:	bf00      	nop
 800c77e:	bf00      	nop
 800c780:	3710      	adds	r7, #16
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <Move_TO_zancunqu>:

void Move_TO_zancunqu(float Lineclk, float fanzhuanclk) //暂存区
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b084      	sub	sp, #16
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	ed87 0a01 	vstr	s0, [r7, #4]
 800c790:	edc7 0a00 	vstr	s1, [r7]
	bool temp = Move_Line(RunSpeed, RunAcc, Lineclk);
 800c794:	edd7 7a01 	vldr	s15, [r7, #4]
 800c798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c79c:	ee17 2a90 	vmov	r2, s15
 800c7a0:	2178      	movs	r1, #120	@ 0x78
 800c7a2:	2064      	movs	r0, #100	@ 0x64
 800c7a4:	f7ff fd14 	bl	800c1d0 <Move_Line>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(8000);
 800c7ac:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 800c7b0:	f7f6 fb36 	bl	8002e20 <HAL_Delay>
	while (temp != true)
 800c7b4:	e00b      	b.n	800c7ce <Move_TO_zancunqu+0x48>
	{
		temp = Move_Line(RunSpeed, RunAcc, Lineclk);
 800c7b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7be:	ee17 2a90 	vmov	r2, s15
 800c7c2:	2178      	movs	r1, #120	@ 0x78
 800c7c4:	2064      	movs	r0, #100	@ 0x64
 800c7c6:	f7ff fd03 	bl	800c1d0 <Move_Line>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c7ce:	7bfb      	ldrb	r3, [r7, #15]
 800c7d0:	f083 0301 	eor.w	r3, r3, #1
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1ed      	bne.n	800c7b6 <Move_TO_zancunqu+0x30>
	}
//	旋转
	temp = Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800c7da:	edd7 7a00 	vldr	s15, [r7]
 800c7de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7e2:	ee17 2a90 	vmov	r2, s15
 800c7e6:	2178      	movs	r1, #120	@ 0x78
 800c7e8:	2064      	movs	r0, #100	@ 0x64
 800c7ea:	f7ff fe0b 	bl	800c404 <Move_fanxuzhuan>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(8000);
 800c7f2:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 800c7f6:	f7f6 fb13 	bl	8002e20 <HAL_Delay>
	while (temp != true)
 800c7fa:	e00b      	b.n	800c814 <Move_TO_zancunqu+0x8e>
	{
		temp = Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800c7fc:	edd7 7a00 	vldr	s15, [r7]
 800c800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c804:	ee17 2a90 	vmov	r2, s15
 800c808:	2178      	movs	r1, #120	@ 0x78
 800c80a:	2064      	movs	r0, #100	@ 0x64
 800c80c:	f7ff fdfa 	bl	800c404 <Move_fanxuzhuan>
 800c810:	4603      	mov	r3, r0
 800c812:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c814:	7bfb      	ldrb	r3, [r7, #15]
 800c816:	f083 0301 	eor.w	r3, r3, #1
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d1ed      	bne.n	800c7fc <Move_TO_zancunqu+0x76>
	}
}
 800c820:	bf00      	nop
 800c822:	bf00      	nop
 800c824:	3710      	adds	r7, #16
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <Move_TO_jianzhi2>:
void Move_TO_jianzhi2(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b084      	sub	sp, #16
 800c82e:	af00      	add	r7, sp, #0
 800c830:	ed87 0a01 	vstr	s0, [r7, #4]
 800c834:	edc7 0a00 	vstr	s1, [r7]
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c838:	edd7 7a01 	vldr	s15, [r7, #4]
 800c83c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c840:	ee17 2a90 	vmov	r2, s15
 800c844:	2178      	movs	r1, #120	@ 0x78
 800c846:	2064      	movs	r0, #100	@ 0x64
 800c848:	f7ff fd7e 	bl	800c348 <Move_Back>
 800c84c:	4603      	mov	r3, r0
 800c84e:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c850:	e00b      	b.n	800c86a <Move_TO_jianzhi2+0x40>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c852:	edd7 7a01 	vldr	s15, [r7, #4]
 800c856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c85a:	ee17 2a90 	vmov	r2, s15
 800c85e:	2178      	movs	r1, #120	@ 0x78
 800c860:	2064      	movs	r0, #100	@ 0x64
 800c862:	f7ff fd71 	bl	800c348 <Move_Back>
 800c866:	4603      	mov	r3, r0
 800c868:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c86a:	7bfb      	ldrb	r3, [r7, #15]
 800c86c:	f083 0301 	eor.w	r3, r3, #1
 800c870:	b2db      	uxtb	r3, r3
 800c872:	2b00      	cmp	r3, #0
 800c874:	d1ed      	bne.n	800c852 <Move_TO_jianzhi2+0x28>
	}
	temp = Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800c876:	edd7 7a00 	vldr	s15, [r7]
 800c87a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c87e:	ee17 2a90 	vmov	r2, s15
 800c882:	2178      	movs	r1, #120	@ 0x78
 800c884:	2064      	movs	r0, #100	@ 0x64
 800c886:	f7ff fe79 	bl	800c57c <Move_zhengxuzhuan>
 800c88a:	4603      	mov	r3, r0
 800c88c:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c88e:	e00b      	b.n	800c8a8 <Move_TO_jianzhi2+0x7e>
	{
		temp = Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800c890:	edd7 7a00 	vldr	s15, [r7]
 800c894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c898:	ee17 2a90 	vmov	r2, s15
 800c89c:	2178      	movs	r1, #120	@ 0x78
 800c89e:	2064      	movs	r0, #100	@ 0x64
 800c8a0:	f7ff fe6c 	bl	800c57c <Move_zhengxuzhuan>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c8a8:	7bfb      	ldrb	r3, [r7, #15]
 800c8aa:	f083 0301 	eor.w	r3, r3, #1
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d1ed      	bne.n	800c890 <Move_TO_jianzhi2+0x66>
	}
}
 800c8b4:	bf00      	nop
 800c8b6:	bf00      	nop
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <Move_TO_cujiagongqu>:
void Move_TO_cujiagongqu(float Backclk) //粗加工区
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b084      	sub	sp, #16
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	ed87 0a01 	vstr	s0, [r7, #4]
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c8c8:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8d0:	ee17 2a90 	vmov	r2, s15
 800c8d4:	2178      	movs	r1, #120	@ 0x78
 800c8d6:	2064      	movs	r0, #100	@ 0x64
 800c8d8:	f7ff fd36 	bl	800c348 <Move_Back>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c8e0:	e00b      	b.n	800c8fa <Move_TO_cujiagongqu+0x3c>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c8e2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8ea:	ee17 2a90 	vmov	r2, s15
 800c8ee:	2178      	movs	r1, #120	@ 0x78
 800c8f0:	2064      	movs	r0, #100	@ 0x64
 800c8f2:	f7ff fd29 	bl	800c348 <Move_Back>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c8fa:	7bfb      	ldrb	r3, [r7, #15]
 800c8fc:	f083 0301 	eor.w	r3, r3, #1
 800c900:	b2db      	uxtb	r3, r3
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1ed      	bne.n	800c8e2 <Move_TO_cujiagongqu+0x24>
	}
	// Move_Back(RunSpeed, RunAcc, Backclk);
	// HAL_Delay(yanshi);
}
 800c906:	bf00      	nop
 800c908:	bf00      	nop
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <Move_TO_jianzhi3>:
void Move_TO_jianzhi3(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	ed87 0a01 	vstr	s0, [r7, #4]
 800c91a:	edc7 0a00 	vstr	s1, [r7]
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c91e:	edd7 7a01 	vldr	s15, [r7, #4]
 800c922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c926:	ee17 2a90 	vmov	r2, s15
 800c92a:	2178      	movs	r1, #120	@ 0x78
 800c92c:	2064      	movs	r0, #100	@ 0x64
 800c92e:	f7ff fd0b 	bl	800c348 <Move_Back>
 800c932:	4603      	mov	r3, r0
 800c934:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c936:	e00b      	b.n	800c950 <Move_TO_jianzhi3+0x40>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c938:	edd7 7a01 	vldr	s15, [r7, #4]
 800c93c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c940:	ee17 2a90 	vmov	r2, s15
 800c944:	2178      	movs	r1, #120	@ 0x78
 800c946:	2064      	movs	r0, #100	@ 0x64
 800c948:	f7ff fcfe 	bl	800c348 <Move_Back>
 800c94c:	4603      	mov	r3, r0
 800c94e:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c950:	7bfb      	ldrb	r3, [r7, #15]
 800c952:	f083 0301 	eor.w	r3, r3, #1
 800c956:	b2db      	uxtb	r3, r3
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1ed      	bne.n	800c938 <Move_TO_jianzhi3+0x28>
	}
	// Move_Back(RunSpeed, RunAcc, Backclk);
	// HAL_Delay(yanshi);
	temp = Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800c95c:	edd7 7a00 	vldr	s15, [r7]
 800c960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c964:	ee17 2a90 	vmov	r2, s15
 800c968:	2178      	movs	r1, #120	@ 0x78
 800c96a:	2064      	movs	r0, #100	@ 0x64
 800c96c:	f7ff fe06 	bl	800c57c <Move_zhengxuzhuan>
 800c970:	4603      	mov	r3, r0
 800c972:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c974:	e00b      	b.n	800c98e <Move_TO_jianzhi3+0x7e>
	{
		temp = Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800c976:	edd7 7a00 	vldr	s15, [r7]
 800c97a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c97e:	ee17 2a90 	vmov	r2, s15
 800c982:	2178      	movs	r1, #120	@ 0x78
 800c984:	2064      	movs	r0, #100	@ 0x64
 800c986:	f7ff fdf9 	bl	800c57c <Move_zhengxuzhuan>
 800c98a:	4603      	mov	r3, r0
 800c98c:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c98e:	7bfb      	ldrb	r3, [r7, #15]
 800c990:	f083 0301 	eor.w	r3, r3, #1
 800c994:	b2db      	uxtb	r3, r3
 800c996:	2b00      	cmp	r3, #0
 800c998:	d1ed      	bne.n	800c976 <Move_TO_jianzhi3+0x66>
	}
//	 Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
//	 HAL_Delay(yanshi);
}
 800c99a:	bf00      	nop
 800c99c:	bf00      	nop
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <Move_TO_fanyuanliaoqu>:
void Move_TO_fanyuanliaoqu(float Backclk) //物料区
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	ed87 0a01 	vstr	s0, [r7, #4]
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c9ae:	edd7 7a01 	vldr	s15, [r7, #4]
 800c9b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9b6:	ee17 2a90 	vmov	r2, s15
 800c9ba:	2178      	movs	r1, #120	@ 0x78
 800c9bc:	2064      	movs	r0, #100	@ 0x64
 800c9be:	f7ff fcc3 	bl	800c348 <Move_Back>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c9c6:	e00b      	b.n	800c9e0 <Move_TO_fanyuanliaoqu+0x3c>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c9c8:	edd7 7a01 	vldr	s15, [r7, #4]
 800c9cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9d0:	ee17 2a90 	vmov	r2, s15
 800c9d4:	2178      	movs	r1, #120	@ 0x78
 800c9d6:	2064      	movs	r0, #100	@ 0x64
 800c9d8:	f7ff fcb6 	bl	800c348 <Move_Back>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c9e0:	7bfb      	ldrb	r3, [r7, #15]
 800c9e2:	f083 0301 	eor.w	r3, r3, #1
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1ed      	bne.n	800c9c8 <Move_TO_fanyuanliaoqu+0x24>
	}
	// Move_Back(RunSpeed, RunAcc, Lineclk);
	// HAL_Delay(20000);
}
 800c9ec:	bf00      	nop
 800c9ee:	bf00      	nop
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
	...

0800c9f8 <Move_Action_Nopid_Left_Ctrl>:
// 	}
// }

//这个函数是爪子朝向左边时，也就是在原料区进行ACTION调整的
void Move_Action_Nopid_Left_Ctrl(float x_goal, float y_goal)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	ed87 0a01 	vstr	s0, [r7, #4]
 800ca02:	edc7 0a00 	vstr	s1, [r7]
	while (1)
	{
//		取X,Y差值
		uint16_t X_Diff = (uint16_t)ABS(X_NOW - x_goal);
 800ca06:	4b86      	ldr	r3, [pc, #536]	@ (800cc20 <Move_Action_Nopid_Left_Ctrl+0x228>)
 800ca08:	ed93 7a00 	vldr	s14, [r3]
 800ca0c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ca18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca1c:	dd0c      	ble.n	800ca38 <Move_Action_Nopid_Left_Ctrl+0x40>
 800ca1e:	4b80      	ldr	r3, [pc, #512]	@ (800cc20 <Move_Action_Nopid_Left_Ctrl+0x228>)
 800ca20:	ed93 7a00 	vldr	s14, [r3]
 800ca24:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca28:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca30:	ee17 3a90 	vmov	r3, s15
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	e00d      	b.n	800ca54 <Move_Action_Nopid_Left_Ctrl+0x5c>
 800ca38:	4b79      	ldr	r3, [pc, #484]	@ (800cc20 <Move_Action_Nopid_Left_Ctrl+0x228>)
 800ca3a:	ed93 7a00 	vldr	s14, [r3]
 800ca3e:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca46:	eef1 7a67 	vneg.f32	s15, s15
 800ca4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca4e:	ee17 3a90 	vmov	r3, s15
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	817b      	strh	r3, [r7, #10]
		uint16_t Y_Diff = (uint16_t)ABS(Y_NOW - y_goal);
 800ca56:	4b73      	ldr	r3, [pc, #460]	@ (800cc24 <Move_Action_Nopid_Left_Ctrl+0x22c>)
 800ca58:	edd3 7a00 	vldr	s15, [r3]
 800ca5c:	eeb1 7a67 	vneg.f32	s14, s15
 800ca60:	edd7 7a00 	vldr	s15, [r7]
 800ca64:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ca6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca70:	dd0e      	ble.n	800ca90 <Move_Action_Nopid_Left_Ctrl+0x98>
 800ca72:	4b6c      	ldr	r3, [pc, #432]	@ (800cc24 <Move_Action_Nopid_Left_Ctrl+0x22c>)
 800ca74:	edd3 7a00 	vldr	s15, [r3]
 800ca78:	eeb1 7a67 	vneg.f32	s14, s15
 800ca7c:	edd7 7a00 	vldr	s15, [r7]
 800ca80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca88:	ee17 3a90 	vmov	r3, s15
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	e00f      	b.n	800cab0 <Move_Action_Nopid_Left_Ctrl+0xb8>
 800ca90:	4b64      	ldr	r3, [pc, #400]	@ (800cc24 <Move_Action_Nopid_Left_Ctrl+0x22c>)
 800ca92:	edd3 7a00 	vldr	s15, [r3]
 800ca96:	eeb1 7a67 	vneg.f32	s14, s15
 800ca9a:	edd7 7a00 	vldr	s15, [r7]
 800ca9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800caa2:	eef1 7a67 	vneg.f32	s15, s15
 800caa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caaa:	ee17 3a90 	vmov	r3, s15
 800caae:	b29b      	uxth	r3, r3
 800cab0:	813b      	strh	r3, [r7, #8]
//		差值满足要求, 结束调节
		if(( X_Diff <  10 ) && ( Y_Diff < 10 ))
 800cab2:	897b      	ldrh	r3, [r7, #10]
 800cab4:	2b09      	cmp	r3, #9
 800cab6:	d803      	bhi.n	800cac0 <Move_Action_Nopid_Left_Ctrl+0xc8>
 800cab8:	893b      	ldrh	r3, [r7, #8]
 800caba:	2b09      	cmp	r3, #9
 800cabc:	f240 80ab 	bls.w	800cc16 <Move_Action_Nopid_Left_Ctrl+0x21e>
			return;

		// 当前X坐标小于目标X
		if ((X_NOW - x_goal) < 0)
 800cac0:	4b57      	ldr	r3, [pc, #348]	@ (800cc20 <Move_Action_Nopid_Left_Ctrl+0x228>)
 800cac2:	ed93 7a00 	vldr	s14, [r3]
 800cac6:	edd7 7a01 	vldr	s15, [r7, #4]
 800caca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cace:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad6:	d51d      	bpl.n	800cb14 <Move_Action_Nopid_Left_Ctrl+0x11c>
		{
			bool temp = Move_Left(Action_Speed, Action_Acc, X_Diff * 5);
 800cad8:	897a      	ldrh	r2, [r7, #10]
 800cada:	4613      	mov	r3, r2
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	4413      	add	r3, r2
 800cae0:	461a      	mov	r2, r3
 800cae2:	2164      	movs	r1, #100	@ 0x64
 800cae4:	2064      	movs	r0, #100	@ 0x64
 800cae6:	f7ff fbd1 	bl	800c28c <Move_Left>
 800caea:	4603      	mov	r3, r0
 800caec:	73fb      	strb	r3, [r7, #15]
			while (temp != true)
 800caee:	e00a      	b.n	800cb06 <Move_Action_Nopid_Left_Ctrl+0x10e>
			{
				temp = Move_Left(Action_Speed, Action_Acc,X_Diff * 5);
 800caf0:	897a      	ldrh	r2, [r7, #10]
 800caf2:	4613      	mov	r3, r2
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	4413      	add	r3, r2
 800caf8:	461a      	mov	r2, r3
 800cafa:	2164      	movs	r1, #100	@ 0x64
 800cafc:	2064      	movs	r0, #100	@ 0x64
 800cafe:	f7ff fbc5 	bl	800c28c <Move_Left>
 800cb02:	4603      	mov	r3, r0
 800cb04:	73fb      	strb	r3, [r7, #15]
			while (temp != true)
 800cb06:	7bfb      	ldrb	r3, [r7, #15]
 800cb08:	f083 0301 	eor.w	r3, r3, #1
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d1ee      	bne.n	800caf0 <Move_Action_Nopid_Left_Ctrl+0xf8>
 800cb12:	e028      	b.n	800cb66 <Move_Action_Nopid_Left_Ctrl+0x16e>
			}
		}
		// 当前X坐标大于目标X
		else if ((X_NOW - x_goal) > 0)
 800cb14:	4b42      	ldr	r3, [pc, #264]	@ (800cc20 <Move_Action_Nopid_Left_Ctrl+0x228>)
 800cb16:	ed93 7a00 	vldr	s14, [r3]
 800cb1a:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb2a:	dd1c      	ble.n	800cb66 <Move_Action_Nopid_Left_Ctrl+0x16e>
		{
			bool temp = Move_Right(Action_Speed, Action_Acc, X_Diff * 5);
 800cb2c:	897a      	ldrh	r2, [r7, #10]
 800cb2e:	4613      	mov	r3, r2
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	4413      	add	r3, r2
 800cb34:	461a      	mov	r2, r3
 800cb36:	2164      	movs	r1, #100	@ 0x64
 800cb38:	2064      	movs	r0, #100	@ 0x64
 800cb3a:	f7ff fcc1 	bl	800c4c0 <Move_Right>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	73bb      	strb	r3, [r7, #14]
			while (temp != true)
 800cb42:	e00a      	b.n	800cb5a <Move_Action_Nopid_Left_Ctrl+0x162>
			{
				temp = Move_Right(Action_Speed, Action_Acc,X_Diff * 5);
 800cb44:	897a      	ldrh	r2, [r7, #10]
 800cb46:	4613      	mov	r3, r2
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	4413      	add	r3, r2
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	2164      	movs	r1, #100	@ 0x64
 800cb50:	2064      	movs	r0, #100	@ 0x64
 800cb52:	f7ff fcb5 	bl	800c4c0 <Move_Right>
 800cb56:	4603      	mov	r3, r0
 800cb58:	73bb      	strb	r3, [r7, #14]
			while (temp != true)
 800cb5a:	7bbb      	ldrb	r3, [r7, #14]
 800cb5c:	f083 0301 	eor.w	r3, r3, #1
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d1ee      	bne.n	800cb44 <Move_Action_Nopid_Left_Ctrl+0x14c>
			}
		}
		// 当前Y坐标小于目标Y
		if (Y_NOW - y_goal < 0)
 800cb66:	4b2f      	ldr	r3, [pc, #188]	@ (800cc24 <Move_Action_Nopid_Left_Ctrl+0x22c>)
 800cb68:	edd3 7a00 	vldr	s15, [r3]
 800cb6c:	eeb1 7a67 	vneg.f32	s14, s15
 800cb70:	edd7 7a00 	vldr	s15, [r7]
 800cb74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb80:	d51d      	bpl.n	800cbbe <Move_Action_Nopid_Left_Ctrl+0x1c6>
		{
			bool temp = Move_Line(Action_Speed, Action_Acc,Y_Diff * 5);
 800cb82:	893a      	ldrh	r2, [r7, #8]
 800cb84:	4613      	mov	r3, r2
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	4413      	add	r3, r2
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	2164      	movs	r1, #100	@ 0x64
 800cb8e:	2064      	movs	r0, #100	@ 0x64
 800cb90:	f7ff fb1e 	bl	800c1d0 <Move_Line>
 800cb94:	4603      	mov	r3, r0
 800cb96:	737b      	strb	r3, [r7, #13]
			while (temp != true)
 800cb98:	e00a      	b.n	800cbb0 <Move_Action_Nopid_Left_Ctrl+0x1b8>
			{
				temp = Move_Line(Action_Speed, Action_Acc,Y_Diff * 5);
 800cb9a:	893a      	ldrh	r2, [r7, #8]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	4413      	add	r3, r2
 800cba2:	461a      	mov	r2, r3
 800cba4:	2164      	movs	r1, #100	@ 0x64
 800cba6:	2064      	movs	r0, #100	@ 0x64
 800cba8:	f7ff fb12 	bl	800c1d0 <Move_Line>
 800cbac:	4603      	mov	r3, r0
 800cbae:	737b      	strb	r3, [r7, #13]
			while (temp != true)
 800cbb0:	7b7b      	ldrb	r3, [r7, #13]
 800cbb2:	f083 0301 	eor.w	r3, r3, #1
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1ee      	bne.n	800cb9a <Move_Action_Nopid_Left_Ctrl+0x1a2>
 800cbbc:	e723      	b.n	800ca06 <Move_Action_Nopid_Left_Ctrl+0xe>
			}
		}
		// 当前Y坐标大于目标Y
		else if (Y_NOW - y_goal > 0)
 800cbbe:	4b19      	ldr	r3, [pc, #100]	@ (800cc24 <Move_Action_Nopid_Left_Ctrl+0x22c>)
 800cbc0:	edd3 7a00 	vldr	s15, [r3]
 800cbc4:	eeb1 7a67 	vneg.f32	s14, s15
 800cbc8:	edd7 7a00 	vldr	s15, [r7]
 800cbcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd8:	dd1c      	ble.n	800cc14 <Move_Action_Nopid_Left_Ctrl+0x21c>
		{
			bool temp = Move_Back(Action_Speed, Action_Acc,Y_Diff * 5);
 800cbda:	893a      	ldrh	r2, [r7, #8]
 800cbdc:	4613      	mov	r3, r2
 800cbde:	009b      	lsls	r3, r3, #2
 800cbe0:	4413      	add	r3, r2
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	2164      	movs	r1, #100	@ 0x64
 800cbe6:	2064      	movs	r0, #100	@ 0x64
 800cbe8:	f7ff fbae 	bl	800c348 <Move_Back>
 800cbec:	4603      	mov	r3, r0
 800cbee:	733b      	strb	r3, [r7, #12]
			while (temp != true)
 800cbf0:	e00a      	b.n	800cc08 <Move_Action_Nopid_Left_Ctrl+0x210>
			{
				temp = Move_Back(Action_Speed, Action_Acc,Y_Diff* 5);
 800cbf2:	893a      	ldrh	r2, [r7, #8]
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	2164      	movs	r1, #100	@ 0x64
 800cbfe:	2064      	movs	r0, #100	@ 0x64
 800cc00:	f7ff fba2 	bl	800c348 <Move_Back>
 800cc04:	4603      	mov	r3, r0
 800cc06:	733b      	strb	r3, [r7, #12]
			while (temp != true)
 800cc08:	7b3b      	ldrb	r3, [r7, #12]
 800cc0a:	f083 0301 	eor.w	r3, r3, #1
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1ee      	bne.n	800cbf2 <Move_Action_Nopid_Left_Ctrl+0x1fa>
	{
 800cc14:	e6f7      	b.n	800ca06 <Move_Action_Nopid_Left_Ctrl+0xe>
			return;
 800cc16:	bf00      	nop
			}
		}

	}
}
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	24000af4 	.word	0x24000af4
 800cc24:	24000af8 	.word	0x24000af8

0800cc28 <Move_Action_Nopid_Forward_Ctrl>:
//这个函数是爪子朝向前方时，第一个十字和粗加工区进行ACTION调整
bool Move_Action_Nopid_Forward_Ctrl(float x_goal, float y_goal)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	ed87 0a01 	vstr	s0, [r7, #4]
 800cc32:	edc7 0a00 	vstr	s1, [r7]
	//ACTION调整
	//		取X,Y差值
	uint16_t X_Diff = (uint16_t)ABS(X_NOW - x_goal);
 800cc36:	4b93      	ldr	r3, [pc, #588]	@ (800ce84 <Move_Action_Nopid_Forward_Ctrl+0x25c>)
 800cc38:	ed93 7a00 	vldr	s14, [r3]
 800cc3c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc4c:	dd0c      	ble.n	800cc68 <Move_Action_Nopid_Forward_Ctrl+0x40>
 800cc4e:	4b8d      	ldr	r3, [pc, #564]	@ (800ce84 <Move_Action_Nopid_Forward_Ctrl+0x25c>)
 800cc50:	ed93 7a00 	vldr	s14, [r3]
 800cc54:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc60:	ee17 3a90 	vmov	r3, s15
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	e00d      	b.n	800cc84 <Move_Action_Nopid_Forward_Ctrl+0x5c>
 800cc68:	4b86      	ldr	r3, [pc, #536]	@ (800ce84 <Move_Action_Nopid_Forward_Ctrl+0x25c>)
 800cc6a:	ed93 7a00 	vldr	s14, [r3]
 800cc6e:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc72:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc76:	eef1 7a67 	vneg.f32	s15, s15
 800cc7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc7e:	ee17 3a90 	vmov	r3, s15
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	817b      	strh	r3, [r7, #10]
	uint16_t Y_Diff = (uint16_t)ABS(Y_NOW - y_goal);
 800cc86:	4b80      	ldr	r3, [pc, #512]	@ (800ce88 <Move_Action_Nopid_Forward_Ctrl+0x260>)
 800cc88:	edd3 7a00 	vldr	s15, [r3]
 800cc8c:	eeb1 7a67 	vneg.f32	s14, s15
 800cc90:	edd7 7a00 	vldr	s15, [r7]
 800cc94:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cc9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cca0:	dd0e      	ble.n	800ccc0 <Move_Action_Nopid_Forward_Ctrl+0x98>
 800cca2:	4b79      	ldr	r3, [pc, #484]	@ (800ce88 <Move_Action_Nopid_Forward_Ctrl+0x260>)
 800cca4:	edd3 7a00 	vldr	s15, [r3]
 800cca8:	eeb1 7a67 	vneg.f32	s14, s15
 800ccac:	edd7 7a00 	vldr	s15, [r7]
 800ccb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccb8:	ee17 3a90 	vmov	r3, s15
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	e00f      	b.n	800cce0 <Move_Action_Nopid_Forward_Ctrl+0xb8>
 800ccc0:	4b71      	ldr	r3, [pc, #452]	@ (800ce88 <Move_Action_Nopid_Forward_Ctrl+0x260>)
 800ccc2:	edd3 7a00 	vldr	s15, [r3]
 800ccc6:	eeb1 7a67 	vneg.f32	s14, s15
 800ccca:	edd7 7a00 	vldr	s15, [r7]
 800ccce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccd2:	eef1 7a67 	vneg.f32	s15, s15
 800ccd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccda:	ee17 3a90 	vmov	r3, s15
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	813b      	strh	r3, [r7, #8]
	if (( X_Diff < 5 ) && ( Y_Diff < 5))
 800cce2:	897b      	ldrh	r3, [r7, #10]
 800cce4:	2b04      	cmp	r3, #4
 800cce6:	d804      	bhi.n	800ccf2 <Move_Action_Nopid_Forward_Ctrl+0xca>
 800cce8:	893b      	ldrh	r3, [r7, #8]
 800ccea:	2b04      	cmp	r3, #4
 800ccec:	d801      	bhi.n	800ccf2 <Move_Action_Nopid_Forward_Ctrl+0xca>
	{
		return true; /* 到达目标 */
 800ccee:	2301      	movs	r3, #1
 800ccf0:	e0c3      	b.n	800ce7a <Move_Action_Nopid_Forward_Ctrl+0x252>
	}
//	X差值不满足要求
	if ( X_Diff >= 5 )
 800ccf2:	897b      	ldrh	r3, [r7, #10]
 800ccf4:	2b04      	cmp	r3, #4
 800ccf6:	d95c      	bls.n	800cdb2 <Move_Action_Nopid_Forward_Ctrl+0x18a>
	{
//		X与当前目标值差值小于0
		if ((X_NOW - x_goal) < 0)
 800ccf8:	4b62      	ldr	r3, [pc, #392]	@ (800ce84 <Move_Action_Nopid_Forward_Ctrl+0x25c>)
 800ccfa:	ed93 7a00 	vldr	s14, [r3]
 800ccfe:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd0e:	d521      	bpl.n	800cd54 <Move_Action_Nopid_Forward_Ctrl+0x12c>
		{
			bool temp = Move_Line(Action_Speed, Action_Acc, X_Diff* 3);
 800cd10:	897a      	ldrh	r2, [r7, #10]
 800cd12:	4613      	mov	r3, r2
 800cd14:	005b      	lsls	r3, r3, #1
 800cd16:	4413      	add	r3, r2
 800cd18:	461a      	mov	r2, r3
 800cd1a:	2164      	movs	r1, #100	@ 0x64
 800cd1c:	2064      	movs	r0, #100	@ 0x64
 800cd1e:	f7ff fa57 	bl	800c1d0 <Move_Line>
 800cd22:	4603      	mov	r3, r0
 800cd24:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(5);
 800cd26:	2005      	movs	r0, #5
 800cd28:	f7f6 f87a 	bl	8002e20 <HAL_Delay>
			while (temp != true)
 800cd2c:	e00a      	b.n	800cd44 <Move_Action_Nopid_Forward_Ctrl+0x11c>
			{
				temp = Move_Line(Action_Speed, Action_Acc, X_Diff * 3);
 800cd2e:	897a      	ldrh	r2, [r7, #10]
 800cd30:	4613      	mov	r3, r2
 800cd32:	005b      	lsls	r3, r3, #1
 800cd34:	4413      	add	r3, r2
 800cd36:	461a      	mov	r2, r3
 800cd38:	2164      	movs	r1, #100	@ 0x64
 800cd3a:	2064      	movs	r0, #100	@ 0x64
 800cd3c:	f7ff fa48 	bl	800c1d0 <Move_Line>
 800cd40:	4603      	mov	r3, r0
 800cd42:	73fb      	strb	r3, [r7, #15]
			while (temp != true)
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
 800cd46:	f083 0301 	eor.w	r3, r3, #1
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d1ee      	bne.n	800cd2e <Move_Action_Nopid_Forward_Ctrl+0x106>
			}
			return false;
 800cd50:	2300      	movs	r3, #0
 800cd52:	e092      	b.n	800ce7a <Move_Action_Nopid_Forward_Ctrl+0x252>
		}
		// 当前X坐标大于目标X
		else if ((X_NOW - x_goal) > 0)
 800cd54:	4b4b      	ldr	r3, [pc, #300]	@ (800ce84 <Move_Action_Nopid_Forward_Ctrl+0x25c>)
 800cd56:	ed93 7a00 	vldr	s14, [r3]
 800cd5a:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd6a:	f340 8085 	ble.w	800ce78 <Move_Action_Nopid_Forward_Ctrl+0x250>
		{
			bool temp = Move_Back(Action_Speed, Action_Acc, X_Diff * 3);
 800cd6e:	897a      	ldrh	r2, [r7, #10]
 800cd70:	4613      	mov	r3, r2
 800cd72:	005b      	lsls	r3, r3, #1
 800cd74:	4413      	add	r3, r2
 800cd76:	461a      	mov	r2, r3
 800cd78:	2164      	movs	r1, #100	@ 0x64
 800cd7a:	2064      	movs	r0, #100	@ 0x64
 800cd7c:	f7ff fae4 	bl	800c348 <Move_Back>
 800cd80:	4603      	mov	r3, r0
 800cd82:	73bb      	strb	r3, [r7, #14]
			HAL_Delay(5);
 800cd84:	2005      	movs	r0, #5
 800cd86:	f7f6 f84b 	bl	8002e20 <HAL_Delay>
			while (temp != true)
 800cd8a:	e00a      	b.n	800cda2 <Move_Action_Nopid_Forward_Ctrl+0x17a>
			{
				temp = Move_Back(Action_Speed, Action_Acc, X_Diff * 3);
 800cd8c:	897a      	ldrh	r2, [r7, #10]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	005b      	lsls	r3, r3, #1
 800cd92:	4413      	add	r3, r2
 800cd94:	461a      	mov	r2, r3
 800cd96:	2164      	movs	r1, #100	@ 0x64
 800cd98:	2064      	movs	r0, #100	@ 0x64
 800cd9a:	f7ff fad5 	bl	800c348 <Move_Back>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	73bb      	strb	r3, [r7, #14]
			while (temp != true)
 800cda2:	7bbb      	ldrb	r3, [r7, #14]
 800cda4:	f083 0301 	eor.w	r3, r3, #1
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d1ee      	bne.n	800cd8c <Move_Action_Nopid_Forward_Ctrl+0x164>
			}
			return false;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	e063      	b.n	800ce7a <Move_Action_Nopid_Forward_Ctrl+0x252>
		}
	}
	else if ( Y_Diff >= 5 )
 800cdb2:	893b      	ldrh	r3, [r7, #8]
 800cdb4:	2b04      	cmp	r3, #4
 800cdb6:	d95f      	bls.n	800ce78 <Move_Action_Nopid_Forward_Ctrl+0x250>
	{
		// 当前Y坐标小于目标Y
		if ((Y_NOW - y_goal) < 0)
 800cdb8:	4b33      	ldr	r3, [pc, #204]	@ (800ce88 <Move_Action_Nopid_Forward_Ctrl+0x260>)
 800cdba:	edd3 7a00 	vldr	s15, [r3]
 800cdbe:	eeb1 7a67 	vneg.f32	s14, s15
 800cdc2:	edd7 7a00 	vldr	s15, [r7]
 800cdc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cdce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd2:	d521      	bpl.n	800ce18 <Move_Action_Nopid_Forward_Ctrl+0x1f0>
		{
			bool temp = Move_Right(Action_Speed, Action_Acc,Y_Diff * 3);
 800cdd4:	893a      	ldrh	r2, [r7, #8]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	4413      	add	r3, r2
 800cddc:	461a      	mov	r2, r3
 800cdde:	2164      	movs	r1, #100	@ 0x64
 800cde0:	2064      	movs	r0, #100	@ 0x64
 800cde2:	f7ff fb6d 	bl	800c4c0 <Move_Right>
 800cde6:	4603      	mov	r3, r0
 800cde8:	737b      	strb	r3, [r7, #13]
			HAL_Delay(5);
 800cdea:	2005      	movs	r0, #5
 800cdec:	f7f6 f818 	bl	8002e20 <HAL_Delay>
			while (temp != true)
 800cdf0:	e00a      	b.n	800ce08 <Move_Action_Nopid_Forward_Ctrl+0x1e0>
			{
				temp = Move_Right(Action_Speed, Action_Acc, Y_Diff * 3);
 800cdf2:	893a      	ldrh	r2, [r7, #8]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	4413      	add	r3, r2
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	2164      	movs	r1, #100	@ 0x64
 800cdfe:	2064      	movs	r0, #100	@ 0x64
 800ce00:	f7ff fb5e 	bl	800c4c0 <Move_Right>
 800ce04:	4603      	mov	r3, r0
 800ce06:	737b      	strb	r3, [r7, #13]
			while (temp != true)
 800ce08:	7b7b      	ldrb	r3, [r7, #13]
 800ce0a:	f083 0301 	eor.w	r3, r3, #1
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1ee      	bne.n	800cdf2 <Move_Action_Nopid_Forward_Ctrl+0x1ca>
			}
			return false;
 800ce14:	2300      	movs	r3, #0
 800ce16:	e030      	b.n	800ce7a <Move_Action_Nopid_Forward_Ctrl+0x252>
		}
		// 当前Y坐标大于目标Y
		else if (Y_NOW - y_goal > 0)
 800ce18:	4b1b      	ldr	r3, [pc, #108]	@ (800ce88 <Move_Action_Nopid_Forward_Ctrl+0x260>)
 800ce1a:	edd3 7a00 	vldr	s15, [r3]
 800ce1e:	eeb1 7a67 	vneg.f32	s14, s15
 800ce22:	edd7 7a00 	vldr	s15, [r7]
 800ce26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce32:	dd21      	ble.n	800ce78 <Move_Action_Nopid_Forward_Ctrl+0x250>
		{
			bool temp = Move_Left(Action_Speed, Action_Acc, Y_Diff * 3);
 800ce34:	893a      	ldrh	r2, [r7, #8]
 800ce36:	4613      	mov	r3, r2
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	4413      	add	r3, r2
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	2164      	movs	r1, #100	@ 0x64
 800ce40:	2064      	movs	r0, #100	@ 0x64
 800ce42:	f7ff fa23 	bl	800c28c <Move_Left>
 800ce46:	4603      	mov	r3, r0
 800ce48:	733b      	strb	r3, [r7, #12]
			HAL_Delay(5);
 800ce4a:	2005      	movs	r0, #5
 800ce4c:	f7f5 ffe8 	bl	8002e20 <HAL_Delay>
			while (temp != true)
 800ce50:	e00a      	b.n	800ce68 <Move_Action_Nopid_Forward_Ctrl+0x240>
			{
				temp = Move_Left(Action_Speed, Action_Acc, Y_Diff * 3);
 800ce52:	893a      	ldrh	r2, [r7, #8]
 800ce54:	4613      	mov	r3, r2
 800ce56:	005b      	lsls	r3, r3, #1
 800ce58:	4413      	add	r3, r2
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	2164      	movs	r1, #100	@ 0x64
 800ce5e:	2064      	movs	r0, #100	@ 0x64
 800ce60:	f7ff fa14 	bl	800c28c <Move_Left>
 800ce64:	4603      	mov	r3, r0
 800ce66:	733b      	strb	r3, [r7, #12]
			while (temp != true)
 800ce68:	7b3b      	ldrb	r3, [r7, #12]
 800ce6a:	f083 0301 	eor.w	r3, r3, #1
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d1ee      	bne.n	800ce52 <Move_Action_Nopid_Forward_Ctrl+0x22a>
			}
			return false;
 800ce74:	2300      	movs	r3, #0
 800ce76:	e000      	b.n	800ce7a <Move_Action_Nopid_Forward_Ctrl+0x252>
		}
	}
	return false;
 800ce78:	2300      	movs	r3, #0
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	24000af4 	.word	0x24000af4
 800ce88:	24000af8 	.word	0x24000af8
 800ce8c:	00000000 	.word	0x00000000

0800ce90 <Move_Action_Nopid_Right_Ctrl>:


void Move_Action_Nopid_Right_Ctrl(float x_goal, float y_goal)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	ed87 0a01 	vstr	s0, [r7, #4]
 800ce9a:	edc7 0a00 	vstr	s1, [r7]
	//ACTION调整
	//		取X,Y差值
	uint16_t X_Diff = (uint16_t)ABS(X_NOW - x_goal);
 800ce9e:	4b9c      	ldr	r3, [pc, #624]	@ (800d110 <Move_Action_Nopid_Right_Ctrl+0x280>)
 800cea0:	ed93 7a00 	vldr	s14, [r3]
 800cea4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ceb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceb4:	dd0c      	ble.n	800ced0 <Move_Action_Nopid_Right_Ctrl+0x40>
 800ceb6:	4b96      	ldr	r3, [pc, #600]	@ (800d110 <Move_Action_Nopid_Right_Ctrl+0x280>)
 800ceb8:	ed93 7a00 	vldr	s14, [r3]
 800cebc:	edd7 7a01 	vldr	s15, [r7, #4]
 800cec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cec8:	ee17 3a90 	vmov	r3, s15
 800cecc:	b29b      	uxth	r3, r3
 800cece:	e00d      	b.n	800ceec <Move_Action_Nopid_Right_Ctrl+0x5c>
 800ced0:	4b8f      	ldr	r3, [pc, #572]	@ (800d110 <Move_Action_Nopid_Right_Ctrl+0x280>)
 800ced2:	ed93 7a00 	vldr	s14, [r3]
 800ced6:	edd7 7a01 	vldr	s15, [r7, #4]
 800ceda:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cede:	eef1 7a67 	vneg.f32	s15, s15
 800cee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cee6:	ee17 3a90 	vmov	r3, s15
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	817b      	strh	r3, [r7, #10]
	uint16_t Y_Diff = (uint16_t)ABS(Y_NOW - y_goal);
 800ceee:	4b89      	ldr	r3, [pc, #548]	@ (800d114 <Move_Action_Nopid_Right_Ctrl+0x284>)
 800cef0:	edd3 7a00 	vldr	s15, [r3]
 800cef4:	eeb1 7a67 	vneg.f32	s14, s15
 800cef8:	edd7 7a00 	vldr	s15, [r7]
 800cefc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf08:	dd0e      	ble.n	800cf28 <Move_Action_Nopid_Right_Ctrl+0x98>
 800cf0a:	4b82      	ldr	r3, [pc, #520]	@ (800d114 <Move_Action_Nopid_Right_Ctrl+0x284>)
 800cf0c:	edd3 7a00 	vldr	s15, [r3]
 800cf10:	eeb1 7a67 	vneg.f32	s14, s15
 800cf14:	edd7 7a00 	vldr	s15, [r7]
 800cf18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf20:	ee17 3a90 	vmov	r3, s15
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	e00f      	b.n	800cf48 <Move_Action_Nopid_Right_Ctrl+0xb8>
 800cf28:	4b7a      	ldr	r3, [pc, #488]	@ (800d114 <Move_Action_Nopid_Right_Ctrl+0x284>)
 800cf2a:	edd3 7a00 	vldr	s15, [r3]
 800cf2e:	eeb1 7a67 	vneg.f32	s14, s15
 800cf32:	edd7 7a00 	vldr	s15, [r7]
 800cf36:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf3a:	eef1 7a67 	vneg.f32	s15, s15
 800cf3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf42:	ee17 3a90 	vmov	r3, s15
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	813b      	strh	r3, [r7, #8]
	while (1)
	{
		if (( X_Diff < 5 ) && ( Y_Diff < 5))
 800cf4a:	897b      	ldrh	r3, [r7, #10]
 800cf4c:	2b04      	cmp	r3, #4
 800cf4e:	d803      	bhi.n	800cf58 <Move_Action_Nopid_Right_Ctrl+0xc8>
 800cf50:	893b      	ldrh	r3, [r7, #8]
 800cf52:	2b04      	cmp	r3, #4
 800cf54:	f240 80d1 	bls.w	800d0fa <Move_Action_Nopid_Right_Ctrl+0x26a>
		{
			break; /* 到达目标 */
		}
		// 当前X坐标小于目标X
		if ((X_NOW - x_goal) < 0)
 800cf58:	4b6d      	ldr	r3, [pc, #436]	@ (800d110 <Move_Action_Nopid_Right_Ctrl+0x280>)
 800cf5a:	ed93 7a00 	vldr	s14, [r3]
 800cf5e:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf6e:	d52d      	bpl.n	800cfcc <Move_Action_Nopid_Right_Ctrl+0x13c>
		{
			bool temp = Move_Right(Action_Speed, Action_Acc, X_Diff * 13.8);
 800cf70:	897b      	ldrh	r3, [r7, #10]
 800cf72:	ee07 3a90 	vmov	s15, r3
 800cf76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cf7a:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 800d108 <Move_Action_Nopid_Right_Ctrl+0x278>
 800cf7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cf86:	ee17 2a90 	vmov	r2, s15
 800cf8a:	2164      	movs	r1, #100	@ 0x64
 800cf8c:	2064      	movs	r0, #100	@ 0x64
 800cf8e:	f7ff fa97 	bl	800c4c0 <Move_Right>
 800cf92:	4603      	mov	r3, r0
 800cf94:	73fb      	strb	r3, [r7, #15]
			while (temp != true)
 800cf96:	e012      	b.n	800cfbe <Move_Action_Nopid_Right_Ctrl+0x12e>
			{
				temp = Move_Right(Action_Speed, Action_Acc, X_Diff * 13.8);
 800cf98:	897b      	ldrh	r3, [r7, #10]
 800cf9a:	ee07 3a90 	vmov	s15, r3
 800cf9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cfa2:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 800d108 <Move_Action_Nopid_Right_Ctrl+0x278>
 800cfa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cfaa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cfae:	ee17 2a90 	vmov	r2, s15
 800cfb2:	2164      	movs	r1, #100	@ 0x64
 800cfb4:	2064      	movs	r0, #100	@ 0x64
 800cfb6:	f7ff fa83 	bl	800c4c0 <Move_Right>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	73fb      	strb	r3, [r7, #15]
			while (temp != true)
 800cfbe:	7bfb      	ldrb	r3, [r7, #15]
 800cfc0:	f083 0301 	eor.w	r3, r3, #1
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1e6      	bne.n	800cf98 <Move_Action_Nopid_Right_Ctrl+0x108>
 800cfca:	e02c      	b.n	800d026 <Move_Action_Nopid_Right_Ctrl+0x196>
			}
		}
		// 当前X坐标大于目标X
		else
		{
			bool temp = Move_Left(Action_Speed, Action_Acc, X_Diff * 13.8);
 800cfcc:	897b      	ldrh	r3, [r7, #10]
 800cfce:	ee07 3a90 	vmov	s15, r3
 800cfd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cfd6:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 800d108 <Move_Action_Nopid_Right_Ctrl+0x278>
 800cfda:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cfde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cfe2:	ee17 2a90 	vmov	r2, s15
 800cfe6:	2164      	movs	r1, #100	@ 0x64
 800cfe8:	2064      	movs	r0, #100	@ 0x64
 800cfea:	f7ff f94f 	bl	800c28c <Move_Left>
 800cfee:	4603      	mov	r3, r0
 800cff0:	73bb      	strb	r3, [r7, #14]
			while (temp != true)
 800cff2:	e012      	b.n	800d01a <Move_Action_Nopid_Right_Ctrl+0x18a>
			{
				temp = Move_Left(Action_Speed, Action_Acc, X_Diff * 13.8);
 800cff4:	897b      	ldrh	r3, [r7, #10]
 800cff6:	ee07 3a90 	vmov	s15, r3
 800cffa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cffe:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 800d108 <Move_Action_Nopid_Right_Ctrl+0x278>
 800d002:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d006:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d00a:	ee17 2a90 	vmov	r2, s15
 800d00e:	2164      	movs	r1, #100	@ 0x64
 800d010:	2064      	movs	r0, #100	@ 0x64
 800d012:	f7ff f93b 	bl	800c28c <Move_Left>
 800d016:	4603      	mov	r3, r0
 800d018:	73bb      	strb	r3, [r7, #14]
			while (temp != true)
 800d01a:	7bbb      	ldrb	r3, [r7, #14]
 800d01c:	f083 0301 	eor.w	r3, r3, #1
 800d020:	b2db      	uxtb	r3, r3
 800d022:	2b00      	cmp	r3, #0
 800d024:	d1e6      	bne.n	800cff4 <Move_Action_Nopid_Right_Ctrl+0x164>
			}
		}
		// 当前Y坐标小于目标Y
		if ((Y_NOW - y_goal) < 0)
 800d026:	4b3b      	ldr	r3, [pc, #236]	@ (800d114 <Move_Action_Nopid_Right_Ctrl+0x284>)
 800d028:	edd3 7a00 	vldr	s15, [r3]
 800d02c:	eeb1 7a67 	vneg.f32	s14, s15
 800d030:	edd7 7a00 	vldr	s15, [r7]
 800d034:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d038:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d040:	d52d      	bpl.n	800d09e <Move_Action_Nopid_Right_Ctrl+0x20e>
		{
			bool temp = Move_Back(Action_Speed, Action_Acc,Y_Diff * 13.8);
 800d042:	893b      	ldrh	r3, [r7, #8]
 800d044:	ee07 3a90 	vmov	s15, r3
 800d048:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d04c:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 800d108 <Move_Action_Nopid_Right_Ctrl+0x278>
 800d050:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d054:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d058:	ee17 2a90 	vmov	r2, s15
 800d05c:	2164      	movs	r1, #100	@ 0x64
 800d05e:	2064      	movs	r0, #100	@ 0x64
 800d060:	f7ff f972 	bl	800c348 <Move_Back>
 800d064:	4603      	mov	r3, r0
 800d066:	737b      	strb	r3, [r7, #13]
			while (temp != true)
 800d068:	e012      	b.n	800d090 <Move_Action_Nopid_Right_Ctrl+0x200>
			{
				temp = Move_Back(Action_Speed, Action_Acc, Y_Diff * 13.8);
 800d06a:	893b      	ldrh	r3, [r7, #8]
 800d06c:	ee07 3a90 	vmov	s15, r3
 800d070:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d074:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 800d108 <Move_Action_Nopid_Right_Ctrl+0x278>
 800d078:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d07c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d080:	ee17 2a90 	vmov	r2, s15
 800d084:	2164      	movs	r1, #100	@ 0x64
 800d086:	2064      	movs	r0, #100	@ 0x64
 800d088:	f7ff f95e 	bl	800c348 <Move_Back>
 800d08c:	4603      	mov	r3, r0
 800d08e:	737b      	strb	r3, [r7, #13]
			while (temp != true)
 800d090:	7b7b      	ldrb	r3, [r7, #13]
 800d092:	f083 0301 	eor.w	r3, r3, #1
 800d096:	b2db      	uxtb	r3, r3
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d1e6      	bne.n	800d06a <Move_Action_Nopid_Right_Ctrl+0x1da>
 800d09c:	e755      	b.n	800cf4a <Move_Action_Nopid_Right_Ctrl+0xba>
			}
		}
		// 当前Y坐标大于目标Y
		else
		{
			bool temp = Move_Line(Action_Speed, Action_Acc, Y_Diff * 13.8);
 800d09e:	893b      	ldrh	r3, [r7, #8]
 800d0a0:	ee07 3a90 	vmov	s15, r3
 800d0a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d0a8:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 800d108 <Move_Action_Nopid_Right_Ctrl+0x278>
 800d0ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d0b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d0b4:	ee17 2a90 	vmov	r2, s15
 800d0b8:	2164      	movs	r1, #100	@ 0x64
 800d0ba:	2064      	movs	r0, #100	@ 0x64
 800d0bc:	f7ff f888 	bl	800c1d0 <Move_Line>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	733b      	strb	r3, [r7, #12]
			while (temp != true)
 800d0c4:	e012      	b.n	800d0ec <Move_Action_Nopid_Right_Ctrl+0x25c>
			{
				temp = Move_Line(Action_Speed, Action_Acc, Y_Diff * 13.8);
 800d0c6:	893b      	ldrh	r3, [r7, #8]
 800d0c8:	ee07 3a90 	vmov	s15, r3
 800d0cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d0d0:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 800d108 <Move_Action_Nopid_Right_Ctrl+0x278>
 800d0d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d0d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d0dc:	ee17 2a90 	vmov	r2, s15
 800d0e0:	2164      	movs	r1, #100	@ 0x64
 800d0e2:	2064      	movs	r0, #100	@ 0x64
 800d0e4:	f7ff f874 	bl	800c1d0 <Move_Line>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	733b      	strb	r3, [r7, #12]
			while (temp != true)
 800d0ec:	7b3b      	ldrb	r3, [r7, #12]
 800d0ee:	f083 0301 	eor.w	r3, r3, #1
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d1e6      	bne.n	800d0c6 <Move_Action_Nopid_Right_Ctrl+0x236>
		if (( X_Diff < 5 ) && ( Y_Diff < 5))
 800d0f8:	e727      	b.n	800cf4a <Move_Action_Nopid_Right_Ctrl+0xba>
			break; /* 到达目标 */
 800d0fa:	bf00      	nop
			}
		}
	}
}
 800d0fc:	bf00      	nop
 800d0fe:	3710      	adds	r7, #16
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	f3af 8000 	nop.w
 800d108:	9999999a 	.word	0x9999999a
 800d10c:	402b9999 	.word	0x402b9999
 800d110:	24000af4 	.word	0x24000af4
 800d114:	24000af8 	.word	0x24000af8

0800d118 <Move_Tx_Pid_Ctrl>:

/* Tx姿态调整 */
//
uint16_t time_tx = 0;
void Move_Tx_Pid_Ctrl(float TX_X_Goal, float TX_Y_Goal)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	ed87 0a01 	vstr	s0, [r7, #4]
 800d122:	edc7 0a00 	vstr	s1, [r7]

	while (1)
	{
		if (TX_Y_out >= 0)
 800d126:	4b9e      	ldr	r3, [pc, #632]	@ (800d3a0 <Move_Tx_Pid_Ctrl+0x288>)
 800d128:	edd3 7a00 	vldr	s15, [r3]
 800d12c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d134:	db29      	blt.n	800d18a <Move_Tx_Pid_Ctrl+0x72>
		{
			bool temp = Move_Right(100, 120, TX_Y_out * 5);
 800d136:	4b9a      	ldr	r3, [pc, #616]	@ (800d3a0 <Move_Tx_Pid_Ctrl+0x288>)
 800d138:	edd3 7a00 	vldr	s15, [r3]
 800d13c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d140:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d148:	ee17 2a90 	vmov	r2, s15
 800d14c:	2178      	movs	r1, #120	@ 0x78
 800d14e:	2064      	movs	r0, #100	@ 0x64
 800d150:	f7ff f9b6 	bl	800c4c0 <Move_Right>
 800d154:	4603      	mov	r3, r0
 800d156:	73fb      	strb	r3, [r7, #15]
			while (temp != true)
 800d158:	e010      	b.n	800d17c <Move_Tx_Pid_Ctrl+0x64>
			{
				temp = Move_Right(100, 120, TX_Y_out * 5);
 800d15a:	4b91      	ldr	r3, [pc, #580]	@ (800d3a0 <Move_Tx_Pid_Ctrl+0x288>)
 800d15c:	edd3 7a00 	vldr	s15, [r3]
 800d160:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d164:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d16c:	ee17 2a90 	vmov	r2, s15
 800d170:	2178      	movs	r1, #120	@ 0x78
 800d172:	2064      	movs	r0, #100	@ 0x64
 800d174:	f7ff f9a4 	bl	800c4c0 <Move_Right>
 800d178:	4603      	mov	r3, r0
 800d17a:	73fb      	strb	r3, [r7, #15]
			while (temp != true)
 800d17c:	7bfb      	ldrb	r3, [r7, #15]
 800d17e:	f083 0301 	eor.w	r3, r3, #1
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b00      	cmp	r3, #0
 800d186:	d1e8      	bne.n	800d15a <Move_Tx_Pid_Ctrl+0x42>
 800d188:	e02c      	b.n	800d1e4 <Move_Tx_Pid_Ctrl+0xcc>
			// Move_Right(80, 80, TX_Y_out * 5);
			// HAL_Delay(5);
		}
		else
		{
			bool temp = Move_Left(100, 120, -TX_Y_out * 5);
 800d18a:	4b85      	ldr	r3, [pc, #532]	@ (800d3a0 <Move_Tx_Pid_Ctrl+0x288>)
 800d18c:	edd3 7a00 	vldr	s15, [r3]
 800d190:	eef1 7a67 	vneg.f32	s15, s15
 800d194:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d19c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1a0:	ee17 2a90 	vmov	r2, s15
 800d1a4:	2178      	movs	r1, #120	@ 0x78
 800d1a6:	2064      	movs	r0, #100	@ 0x64
 800d1a8:	f7ff f870 	bl	800c28c <Move_Left>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	73bb      	strb	r3, [r7, #14]
			while (temp != true)
 800d1b0:	e012      	b.n	800d1d8 <Move_Tx_Pid_Ctrl+0xc0>
			{
				temp = Move_Left(100, 120, -TX_Y_out * 5);
 800d1b2:	4b7b      	ldr	r3, [pc, #492]	@ (800d3a0 <Move_Tx_Pid_Ctrl+0x288>)
 800d1b4:	edd3 7a00 	vldr	s15, [r3]
 800d1b8:	eef1 7a67 	vneg.f32	s15, s15
 800d1bc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d1c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d1c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1c8:	ee17 2a90 	vmov	r2, s15
 800d1cc:	2178      	movs	r1, #120	@ 0x78
 800d1ce:	2064      	movs	r0, #100	@ 0x64
 800d1d0:	f7ff f85c 	bl	800c28c <Move_Left>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	73bb      	strb	r3, [r7, #14]
			while (temp != true)
 800d1d8:	7bbb      	ldrb	r3, [r7, #14]
 800d1da:	f083 0301 	eor.w	r3, r3, #1
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d1e6      	bne.n	800d1b2 <Move_Tx_Pid_Ctrl+0x9a>
			}
			// Move_Left(80, 80, -TX_Y_out * 5);
			// HAL_Delay(5);
		}

		if (TX_X_out >= 0)
 800d1e4:	4b6f      	ldr	r3, [pc, #444]	@ (800d3a4 <Move_Tx_Pid_Ctrl+0x28c>)
 800d1e6:	edd3 7a00 	vldr	s15, [r3]
 800d1ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1f2:	db29      	blt.n	800d248 <Move_Tx_Pid_Ctrl+0x130>
		{
			bool temp = Move_Back(100, 120, TX_X_out * 5);
 800d1f4:	4b6b      	ldr	r3, [pc, #428]	@ (800d3a4 <Move_Tx_Pid_Ctrl+0x28c>)
 800d1f6:	edd3 7a00 	vldr	s15, [r3]
 800d1fa:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d1fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d206:	ee17 2a90 	vmov	r2, s15
 800d20a:	2178      	movs	r1, #120	@ 0x78
 800d20c:	2064      	movs	r0, #100	@ 0x64
 800d20e:	f7ff f89b 	bl	800c348 <Move_Back>
 800d212:	4603      	mov	r3, r0
 800d214:	737b      	strb	r3, [r7, #13]
			while (temp != true)
 800d216:	e010      	b.n	800d23a <Move_Tx_Pid_Ctrl+0x122>
			{
				temp = Move_Back(100, 120, TX_X_out * 5);
 800d218:	4b62      	ldr	r3, [pc, #392]	@ (800d3a4 <Move_Tx_Pid_Ctrl+0x28c>)
 800d21a:	edd3 7a00 	vldr	s15, [r3]
 800d21e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d222:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d22a:	ee17 2a90 	vmov	r2, s15
 800d22e:	2178      	movs	r1, #120	@ 0x78
 800d230:	2064      	movs	r0, #100	@ 0x64
 800d232:	f7ff f889 	bl	800c348 <Move_Back>
 800d236:	4603      	mov	r3, r0
 800d238:	737b      	strb	r3, [r7, #13]
			while (temp != true)
 800d23a:	7b7b      	ldrb	r3, [r7, #13]
 800d23c:	f083 0301 	eor.w	r3, r3, #1
 800d240:	b2db      	uxtb	r3, r3
 800d242:	2b00      	cmp	r3, #0
 800d244:	d1e8      	bne.n	800d218 <Move_Tx_Pid_Ctrl+0x100>
 800d246:	e02c      	b.n	800d2a2 <Move_Tx_Pid_Ctrl+0x18a>
			// Move_Back(80, 80, TX_X_out * 5);
			// HAL_Delay(5);
		}
		else
		{
			bool temp = Move_Line(100, 120, -TX_X_out * 5);
 800d248:	4b56      	ldr	r3, [pc, #344]	@ (800d3a4 <Move_Tx_Pid_Ctrl+0x28c>)
 800d24a:	edd3 7a00 	vldr	s15, [r3]
 800d24e:	eef1 7a67 	vneg.f32	s15, s15
 800d252:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d25a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d25e:	ee17 2a90 	vmov	r2, s15
 800d262:	2178      	movs	r1, #120	@ 0x78
 800d264:	2064      	movs	r0, #100	@ 0x64
 800d266:	f7fe ffb3 	bl	800c1d0 <Move_Line>
 800d26a:	4603      	mov	r3, r0
 800d26c:	733b      	strb	r3, [r7, #12]
			while (temp != true)
 800d26e:	e012      	b.n	800d296 <Move_Tx_Pid_Ctrl+0x17e>
			{
				temp = Move_Line(100, 120, -TX_X_out * 5);
 800d270:	4b4c      	ldr	r3, [pc, #304]	@ (800d3a4 <Move_Tx_Pid_Ctrl+0x28c>)
 800d272:	edd3 7a00 	vldr	s15, [r3]
 800d276:	eef1 7a67 	vneg.f32	s15, s15
 800d27a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d27e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d286:	ee17 2a90 	vmov	r2, s15
 800d28a:	2178      	movs	r1, #120	@ 0x78
 800d28c:	2064      	movs	r0, #100	@ 0x64
 800d28e:	f7fe ff9f 	bl	800c1d0 <Move_Line>
 800d292:	4603      	mov	r3, r0
 800d294:	733b      	strb	r3, [r7, #12]
			while (temp != true)
 800d296:	7b3b      	ldrb	r3, [r7, #12]
 800d298:	f083 0301 	eor.w	r3, r3, #1
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d1e6      	bne.n	800d270 <Move_Tx_Pid_Ctrl+0x158>
			}
			// Move_Line(80, 80, -TX_X_out * 5);
			// HAL_Delay(5);
		}

		if (ABS(Tx_NOW - 311.5) < 5 && ABS(Ty_NOW -125.5) < 5)
 800d2a2:	4b41      	ldr	r3, [pc, #260]	@ (800d3a8 <Move_Tx_Pid_Ctrl+0x290>)
 800d2a4:	edd3 7a00 	vldr	s15, [r3]
 800d2a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d2ac:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 800d390 <Move_Tx_Pid_Ctrl+0x278>
 800d2b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d2b4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2bc:	dd13      	ble.n	800d2e6 <Move_Tx_Pid_Ctrl+0x1ce>
 800d2be:	4b3a      	ldr	r3, [pc, #232]	@ (800d3a8 <Move_Tx_Pid_Ctrl+0x290>)
 800d2c0:	edd3 7a00 	vldr	s15, [r3]
 800d2c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d2c8:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 800d390 <Move_Tx_Pid_Ctrl+0x278>
 800d2cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d2d0:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 800d2d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2dc:	bf4c      	ite	mi
 800d2de:	2301      	movmi	r3, #1
 800d2e0:	2300      	movpl	r3, #0
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	e012      	b.n	800d30c <Move_Tx_Pid_Ctrl+0x1f4>
 800d2e6:	4b30      	ldr	r3, [pc, #192]	@ (800d3a8 <Move_Tx_Pid_Ctrl+0x290>)
 800d2e8:	edd3 7a00 	vldr	s15, [r3]
 800d2ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d2f0:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 800d390 <Move_Tx_Pid_Ctrl+0x278>
 800d2f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d2f8:	eeb9 6b04 	vmov.f64	d6, #148	@ 0xc0a00000 -5.0
 800d2fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d304:	bfcc      	ite	gt
 800d306:	2301      	movgt	r3, #1
 800d308:	2300      	movle	r3, #0
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f43f af0a 	beq.w	800d126 <Move_Tx_Pid_Ctrl+0xe>
 800d312:	4b26      	ldr	r3, [pc, #152]	@ (800d3ac <Move_Tx_Pid_Ctrl+0x294>)
 800d314:	edd3 7a00 	vldr	s15, [r3]
 800d318:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d31c:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 800d398 <Move_Tx_Pid_Ctrl+0x280>
 800d320:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d324:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d32c:	dd13      	ble.n	800d356 <Move_Tx_Pid_Ctrl+0x23e>
 800d32e:	4b1f      	ldr	r3, [pc, #124]	@ (800d3ac <Move_Tx_Pid_Ctrl+0x294>)
 800d330:	edd3 7a00 	vldr	s15, [r3]
 800d334:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d338:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 800d398 <Move_Tx_Pid_Ctrl+0x280>
 800d33c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d340:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 800d344:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d34c:	bf4c      	ite	mi
 800d34e:	2301      	movmi	r3, #1
 800d350:	2300      	movpl	r3, #0
 800d352:	b2db      	uxtb	r3, r3
 800d354:	e012      	b.n	800d37c <Move_Tx_Pid_Ctrl+0x264>
 800d356:	4b15      	ldr	r3, [pc, #84]	@ (800d3ac <Move_Tx_Pid_Ctrl+0x294>)
 800d358:	edd3 7a00 	vldr	s15, [r3]
 800d35c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d360:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 800d398 <Move_Tx_Pid_Ctrl+0x280>
 800d364:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d368:	eeb9 6b04 	vmov.f64	d6, #148	@ 0xc0a00000 -5.0
 800d36c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d374:	bfcc      	ite	gt
 800d376:	2301      	movgt	r3, #1
 800d378:	2300      	movle	r3, #0
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d100      	bne.n	800d382 <Move_Tx_Pid_Ctrl+0x26a>
		if (TX_Y_out >= 0)
 800d380:	e6d1      	b.n	800d126 <Move_Tx_Pid_Ctrl+0xe>
		{
			break;
 800d382:	bf00      	nop
		// {time_tx=0;
		// 	break;
		// }
	}

}
 800d384:	bf00      	nop
 800d386:	3710      	adds	r7, #16
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	f3af 8000 	nop.w
 800d390:	00000000 	.word	0x00000000
 800d394:	40737800 	.word	0x40737800
 800d398:	00000000 	.word	0x00000000
 800d39c:	405f6000 	.word	0x405f6000
 800d3a0:	24000c20 	.word	0x24000c20
 800d3a4:	24000c1c 	.word	0x24000c1c
 800d3a8:	24000474 	.word	0x24000474
 800d3ac:	24000478 	.word	0x24000478

0800d3b0 <Host2SCS>:
}

//1个16位数拆分为2个8位数
//DataL为低位，DataH为高位
void Host2SCS(uint8_t *DataL, uint8_t *DataH, int Data)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	60f8      	str	r0, [r7, #12]
 800d3b8:	60b9      	str	r1, [r7, #8]
 800d3ba:	607a      	str	r2, [r7, #4]
	if (End)
 800d3bc:	4b0e      	ldr	r3, [pc, #56]	@ (800d3f8 <Host2SCS+0x48>)
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d009      	beq.n	800d3d8 <Host2SCS+0x28>
	{
		*DataL = (Data >> 8);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	121b      	asrs	r3, r3, #8
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	701a      	strb	r2, [r3, #0]
		*DataH = (Data & 0xff);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	701a      	strb	r2, [r3, #0]
	else
	{
		*DataH = (Data >> 8);
		*DataL = (Data & 0xff);
	}
}
 800d3d6:	e008      	b.n	800d3ea <Host2SCS+0x3a>
		*DataH = (Data >> 8);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	121b      	asrs	r3, r3, #8
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	701a      	strb	r2, [r3, #0]
		*DataL = (Data & 0xff);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	b2da      	uxtb	r2, r3
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	701a      	strb	r2, [r3, #0]
}
 800d3ea:	bf00      	nop
 800d3ec:	3714      	adds	r7, #20
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr
 800d3f6:	bf00      	nop
 800d3f8:	24000c2e 	.word	0x24000c2e

0800d3fc <writeBuf>:
	return Data;
}

void writeBuf(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen,
		uint8_t Fun)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af00      	add	r7, sp, #0
 800d402:	603a      	str	r2, [r7, #0]
 800d404:	461a      	mov	r2, r3
 800d406:	4603      	mov	r3, r0
 800d408:	71fb      	strb	r3, [r7, #7]
 800d40a:	460b      	mov	r3, r1
 800d40c:	71bb      	strb	r3, [r7, #6]
 800d40e:	4613      	mov	r3, r2
 800d410:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t msgLen = 2;
 800d412:	2302      	movs	r3, #2
 800d414:	75bb      	strb	r3, [r7, #22]
	uint8_t bBuf[6];
	uint8_t CheckSum = 0;
 800d416:	2300      	movs	r3, #0
 800d418:	73fb      	strb	r3, [r7, #15]
	bBuf[0] = 0xff;
 800d41a:	23ff      	movs	r3, #255	@ 0xff
 800d41c:	743b      	strb	r3, [r7, #16]
	bBuf[1] = 0xff;
 800d41e:	23ff      	movs	r3, #255	@ 0xff
 800d420:	747b      	strb	r3, [r7, #17]
	bBuf[2] = ID;
 800d422:	79fb      	ldrb	r3, [r7, #7]
 800d424:	74bb      	strb	r3, [r7, #18]
	bBuf[4] = Fun;
 800d426:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d42a:	753b      	strb	r3, [r7, #20]
	if (nDat)
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d010      	beq.n	800d454 <writeBuf+0x58>
	{
		msgLen += nLen + 1;
 800d432:	797a      	ldrb	r2, [r7, #5]
 800d434:	7dbb      	ldrb	r3, [r7, #22]
 800d436:	4413      	add	r3, r2
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	3301      	adds	r3, #1
 800d43c:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = msgLen;
 800d43e:	7dbb      	ldrb	r3, [r7, #22]
 800d440:	74fb      	strb	r3, [r7, #19]
		bBuf[5] = MemAddr;
 800d442:	79bb      	ldrb	r3, [r7, #6]
 800d444:	757b      	strb	r3, [r7, #21]
		writeSCS(bBuf, 6);
 800d446:	f107 0310 	add.w	r3, r7, #16
 800d44a:	2106      	movs	r1, #6
 800d44c:	4618      	mov	r0, r3
 800d44e:	f000 f99b 	bl	800d788 <writeSCS>
 800d452:	e007      	b.n	800d464 <writeBuf+0x68>

	}
	else
	{
		bBuf[3] = msgLen;
 800d454:	7dbb      	ldrb	r3, [r7, #22]
 800d456:	74fb      	strb	r3, [r7, #19]
		writeSCS(bBuf, 5);
 800d458:	f107 0310 	add.w	r3, r7, #16
 800d45c:	2105      	movs	r1, #5
 800d45e:	4618      	mov	r0, r3
 800d460:	f000 f992 	bl	800d788 <writeSCS>
	}
	CheckSum = ID + msgLen + Fun + MemAddr;
 800d464:	79fa      	ldrb	r2, [r7, #7]
 800d466:	7dbb      	ldrb	r3, [r7, #22]
 800d468:	4413      	add	r3, r2
 800d46a:	b2da      	uxtb	r2, r3
 800d46c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d470:	4413      	add	r3, r2
 800d472:	b2da      	uxtb	r2, r3
 800d474:	79bb      	ldrb	r3, [r7, #6]
 800d476:	4413      	add	r3, r2
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	73fb      	strb	r3, [r7, #15]
	if (nDat)
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d016      	beq.n	800d4b0 <writeBuf+0xb4>
	{
		for (i = 0; i < nLen; i++)
 800d482:	2300      	movs	r3, #0
 800d484:	75fb      	strb	r3, [r7, #23]
 800d486:	e00a      	b.n	800d49e <writeBuf+0xa2>
		{
			CheckSum += nDat[i];
 800d488:	7dfb      	ldrb	r3, [r7, #23]
 800d48a:	683a      	ldr	r2, [r7, #0]
 800d48c:	4413      	add	r3, r2
 800d48e:	781a      	ldrb	r2, [r3, #0]
 800d490:	7bfb      	ldrb	r3, [r7, #15]
 800d492:	4413      	add	r3, r2
 800d494:	b2db      	uxtb	r3, r3
 800d496:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < nLen; i++)
 800d498:	7dfb      	ldrb	r3, [r7, #23]
 800d49a:	3301      	adds	r3, #1
 800d49c:	75fb      	strb	r3, [r7, #23]
 800d49e:	7dfa      	ldrb	r2, [r7, #23]
 800d4a0:	797b      	ldrb	r3, [r7, #5]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d3f0      	bcc.n	800d488 <writeBuf+0x8c>
		}
		writeSCS(nDat, nLen);
 800d4a6:	797b      	ldrb	r3, [r7, #5]
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	6838      	ldr	r0, [r7, #0]
 800d4ac:	f000 f96c 	bl	800d788 <writeSCS>
	}
	CheckSum = ~CheckSum;
 800d4b0:	7bfb      	ldrb	r3, [r7, #15]
 800d4b2:	43db      	mvns	r3, r3
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	73fb      	strb	r3, [r7, #15]
	writeSCS(&CheckSum, 1);
 800d4b8:	f107 030f 	add.w	r3, r7, #15
 800d4bc:	2101      	movs	r1, #1
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f000 f962 	bl	800d788 <writeSCS>
}
 800d4c4:	bf00      	nop
 800d4c6:	3718      	adds	r7, #24
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <genWrite>:

//普通写指令
//舵机ID，MemAddr内存表地址，写入数据，写入长度
int genWrite(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af02      	add	r7, sp, #8
 800d4d2:	603a      	str	r2, [r7, #0]
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	71fb      	strb	r3, [r7, #7]
 800d4da:	460b      	mov	r3, r1
 800d4dc:	71bb      	strb	r3, [r7, #6]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	717b      	strb	r3, [r7, #5]
	rFlushSCS();
 800d4e2:	f000 f990 	bl	800d806 <rFlushSCS>
	writeBuf(ID, MemAddr, nDat, nLen, INST_WRITE);
 800d4e6:	797b      	ldrb	r3, [r7, #5]
 800d4e8:	79b9      	ldrb	r1, [r7, #6]
 800d4ea:	79f8      	ldrb	r0, [r7, #7]
 800d4ec:	2203      	movs	r2, #3
 800d4ee:	9200      	str	r2, [sp, #0]
 800d4f0:	683a      	ldr	r2, [r7, #0]
 800d4f2:	f7ff ff83 	bl	800d3fc <writeBuf>
	wFlushSCS();
 800d4f6:	f000 f98d 	bl	800d814 <wFlushSCS>
	return Ack(ID);
 800d4fa:	79fb      	ldrb	r3, [r7, #7]
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f000 f8b9 	bl	800d674 <Ack>
 800d502:	4603      	mov	r3, r0
}
 800d504:	4618      	mov	r0, r3
 800d506:	3708      	adds	r7, #8
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <Read>:
}

//读指令
//舵机ID，MemAddr内存表地址，返回数据nData，数据长度nLen
int Read(uint8_t ID, uint8_t MemAddr, uint8_t *nData, uint8_t nLen)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b088      	sub	sp, #32
 800d510:	af02      	add	r7, sp, #8
 800d512:	603a      	str	r2, [r7, #0]
 800d514:	461a      	mov	r2, r3
 800d516:	4603      	mov	r3, r0
 800d518:	71fb      	strb	r3, [r7, #7]
 800d51a:	460b      	mov	r3, r1
 800d51c:	71bb      	strb	r3, [r7, #6]
 800d51e:	4613      	mov	r3, r2
 800d520:	717b      	strb	r3, [r7, #5]
	int Size;
	uint8_t bBuf[4];
	uint8_t calSum;
	uint8_t i;
	rFlushSCS();
 800d522:	f000 f970 	bl	800d806 <rFlushSCS>
	writeBuf(ID, MemAddr, &nLen, 1, INST_READ);
 800d526:	1d7a      	adds	r2, r7, #5
 800d528:	79b9      	ldrb	r1, [r7, #6]
 800d52a:	79f8      	ldrb	r0, [r7, #7]
 800d52c:	2302      	movs	r3, #2
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	2301      	movs	r3, #1
 800d532:	f7ff ff63 	bl	800d3fc <writeBuf>
	wFlushSCS();
 800d536:	f000 f96d 	bl	800d814 <wFlushSCS>
	if (!checkHead())
 800d53a:	f000 f872 	bl	800d622 <checkHead>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	d101      	bne.n	800d548 <Read+0x3c>
	{
		return 0;
 800d544:	2300      	movs	r3, #0
 800d546:	e04b      	b.n	800d5e0 <Read+0xd4>
	}
	Error = 0;
 800d548:	4b27      	ldr	r3, [pc, #156]	@ (800d5e8 <Read+0xdc>)
 800d54a:	2200      	movs	r2, #0
 800d54c:	701a      	strb	r2, [r3, #0]
	if (readSCS(bBuf, 3) != 3)
 800d54e:	f107 030c 	add.w	r3, r7, #12
 800d552:	2103      	movs	r1, #3
 800d554:	4618      	mov	r0, r3
 800d556:	f000 f903 	bl	800d760 <readSCS>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b03      	cmp	r3, #3
 800d55e:	d001      	beq.n	800d564 <Read+0x58>
	{
		return 0;
 800d560:	2300      	movs	r3, #0
 800d562:	e03d      	b.n	800d5e0 <Read+0xd4>
	}
	Size = readSCS(nData, nLen);
 800d564:	797b      	ldrb	r3, [r7, #5]
 800d566:	4619      	mov	r1, r3
 800d568:	6838      	ldr	r0, [r7, #0]
 800d56a:	f000 f8f9 	bl	800d760 <readSCS>
 800d56e:	6138      	str	r0, [r7, #16]
	if (Size != nLen)
 800d570:	797b      	ldrb	r3, [r7, #5]
 800d572:	461a      	mov	r2, r3
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	4293      	cmp	r3, r2
 800d578:	d001      	beq.n	800d57e <Read+0x72>
	{
		return 0;
 800d57a:	2300      	movs	r3, #0
 800d57c:	e030      	b.n	800d5e0 <Read+0xd4>
	}
	if (readSCS(bBuf + 3, 1) != 1)
 800d57e:	f107 030c 	add.w	r3, r7, #12
 800d582:	3303      	adds	r3, #3
 800d584:	2101      	movs	r1, #1
 800d586:	4618      	mov	r0, r3
 800d588:	f000 f8ea 	bl	800d760 <readSCS>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d001      	beq.n	800d596 <Read+0x8a>
	{
		return 0;
 800d592:	2300      	movs	r3, #0
 800d594:	e024      	b.n	800d5e0 <Read+0xd4>
	}
	calSum = bBuf[0] + bBuf[1] + bBuf[2];
 800d596:	7b3a      	ldrb	r2, [r7, #12]
 800d598:	7b7b      	ldrb	r3, [r7, #13]
 800d59a:	4413      	add	r3, r2
 800d59c:	b2da      	uxtb	r2, r3
 800d59e:	7bbb      	ldrb	r3, [r7, #14]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < Size; i++)
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	75bb      	strb	r3, [r7, #22]
 800d5a8:	e009      	b.n	800d5be <Read+0xb2>
	{
		calSum += nData[i];
 800d5aa:	7dbb      	ldrb	r3, [r7, #22]
 800d5ac:	683a      	ldr	r2, [r7, #0]
 800d5ae:	4413      	add	r3, r2
 800d5b0:	781a      	ldrb	r2, [r3, #0]
 800d5b2:	7dfb      	ldrb	r3, [r7, #23]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < Size; i++)
 800d5b8:	7dbb      	ldrb	r3, [r7, #22]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	75bb      	strb	r3, [r7, #22]
 800d5be:	7dbb      	ldrb	r3, [r7, #22]
 800d5c0:	693a      	ldr	r2, [r7, #16]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	dcf1      	bgt.n	800d5aa <Read+0x9e>
	}
	calSum = ~calSum;
 800d5c6:	7dfb      	ldrb	r3, [r7, #23]
 800d5c8:	43db      	mvns	r3, r3
 800d5ca:	75fb      	strb	r3, [r7, #23]
	if (calSum != bBuf[3])
 800d5cc:	7bfb      	ldrb	r3, [r7, #15]
 800d5ce:	7dfa      	ldrb	r2, [r7, #23]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d001      	beq.n	800d5d8 <Read+0xcc>
	{
		return 0;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	e003      	b.n	800d5e0 <Read+0xd4>
	}
	Error = bBuf[2];
 800d5d8:	7bba      	ldrb	r2, [r7, #14]
 800d5da:	4b03      	ldr	r3, [pc, #12]	@ (800d5e8 <Read+0xdc>)
 800d5dc:	701a      	strb	r2, [r3, #0]
	return Size;
 800d5de:	693b      	ldr	r3, [r7, #16]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3718      	adds	r7, #24
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	24000c2f 	.word	0x24000c2f

0800d5ec <readByte>:

//读1字节，超时返回-1
int readByte(uint8_t ID, uint8_t MemAddr)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	460a      	mov	r2, r1
 800d5f6:	71fb      	strb	r3, [r7, #7]
 800d5f8:	4613      	mov	r3, r2
 800d5fa:	71bb      	strb	r3, [r7, #6]
	uint8_t bDat;
	int Size = Read(ID, MemAddr, &bDat, 1);
 800d5fc:	f107 020b 	add.w	r2, r7, #11
 800d600:	79b9      	ldrb	r1, [r7, #6]
 800d602:	79f8      	ldrb	r0, [r7, #7]
 800d604:	2301      	movs	r3, #1
 800d606:	f7ff ff81 	bl	800d50c <Read>
 800d60a:	60f8      	str	r0, [r7, #12]
	if (Size != 1)
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d002      	beq.n	800d618 <readByte+0x2c>
	{
		return -1;
 800d612:	f04f 33ff 	mov.w	r3, #4294967295
 800d616:	e000      	b.n	800d61a <readByte+0x2e>
	}
	else
	{
		return bDat;
 800d618:	7afb      	ldrb	r3, [r7, #11]
	}
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3710      	adds	r7, #16
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}

0800d622 <checkHead>:
	Error = bBuf[2];
	return bBuf[0];
}

int checkHead(void)
{
 800d622:	b580      	push	{r7, lr}
 800d624:	b082      	sub	sp, #8
 800d626:	af00      	add	r7, sp, #0
	uint8_t bDat;
	uint8_t bBuf[2] =
 800d628:	2300      	movs	r3, #0
 800d62a:	80bb      	strh	r3, [r7, #4]
	{ 0, 0 };
	uint8_t Cnt = 0;
 800d62c:	2300      	movs	r3, #0
 800d62e:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		if (!readSCS(&bDat, 1))
 800d630:	1dbb      	adds	r3, r7, #6
 800d632:	2101      	movs	r1, #1
 800d634:	4618      	mov	r0, r3
 800d636:	f000 f893 	bl	800d760 <readSCS>
 800d63a:	4603      	mov	r3, r0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d101      	bne.n	800d644 <checkHead+0x22>
		{
			return 0;
 800d640:	2300      	movs	r3, #0
 800d642:	e013      	b.n	800d66c <checkHead+0x4a>
		}
		bBuf[1] = bBuf[0];
 800d644:	793b      	ldrb	r3, [r7, #4]
 800d646:	717b      	strb	r3, [r7, #5]
		bBuf[0] = bDat;
 800d648:	79bb      	ldrb	r3, [r7, #6]
 800d64a:	713b      	strb	r3, [r7, #4]
		if (bBuf[0] == 0xff && bBuf[1] == 0xff)
 800d64c:	793b      	ldrb	r3, [r7, #4]
 800d64e:	2bff      	cmp	r3, #255	@ 0xff
 800d650:	d102      	bne.n	800d658 <checkHead+0x36>
 800d652:	797b      	ldrb	r3, [r7, #5]
 800d654:	2bff      	cmp	r3, #255	@ 0xff
 800d656:	d007      	beq.n	800d668 <checkHead+0x46>
		{
			break;
		}
		Cnt++;
 800d658:	79fb      	ldrb	r3, [r7, #7]
 800d65a:	3301      	adds	r3, #1
 800d65c:	71fb      	strb	r3, [r7, #7]
		if (Cnt > 10)
 800d65e:	79fb      	ldrb	r3, [r7, #7]
 800d660:	2b0a      	cmp	r3, #10
 800d662:	d9e5      	bls.n	800d630 <checkHead+0xe>
		{
			return 0;
 800d664:	2300      	movs	r3, #0
 800d666:	e001      	b.n	800d66c <checkHead+0x4a>
			break;
 800d668:	bf00      	nop
		}
	}
	return 1;
 800d66a:	2301      	movs	r3, #1
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3708      	adds	r7, #8
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <Ack>:

//指令应答
int Ack(uint8_t ID)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	4603      	mov	r3, r0
 800d67c:	71fb      	strb	r3, [r7, #7]
	uint8_t bBuf[4];
	uint8_t calSum;
	Error = 0;
 800d67e:	4b1f      	ldr	r3, [pc, #124]	@ (800d6fc <Ack+0x88>)
 800d680:	2200      	movs	r2, #0
 800d682:	701a      	strb	r2, [r3, #0]
	if (ID != 0xfe && Level)
 800d684:	79fb      	ldrb	r3, [r7, #7]
 800d686:	2bfe      	cmp	r3, #254	@ 0xfe
 800d688:	d032      	beq.n	800d6f0 <Ack+0x7c>
 800d68a:	4b1d      	ldr	r3, [pc, #116]	@ (800d700 <Ack+0x8c>)
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d02e      	beq.n	800d6f0 <Ack+0x7c>
	{
		if (!checkHead())
 800d692:	f7ff ffc6 	bl	800d622 <checkHead>
 800d696:	4603      	mov	r3, r0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d101      	bne.n	800d6a0 <Ack+0x2c>
		{
			return 0;
 800d69c:	2300      	movs	r3, #0
 800d69e:	e028      	b.n	800d6f2 <Ack+0x7e>
		}
		if (readSCS(bBuf, 4) != 4)
 800d6a0:	f107 0308 	add.w	r3, r7, #8
 800d6a4:	2104      	movs	r1, #4
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f000 f85a 	bl	800d760 <readSCS>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b04      	cmp	r3, #4
 800d6b0:	d001      	beq.n	800d6b6 <Ack+0x42>
		{
			return 0;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	e01d      	b.n	800d6f2 <Ack+0x7e>
		}
		if (bBuf[0] != ID)
 800d6b6:	7a3b      	ldrb	r3, [r7, #8]
 800d6b8:	79fa      	ldrb	r2, [r7, #7]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d001      	beq.n	800d6c2 <Ack+0x4e>
		{
			return 0;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	e017      	b.n	800d6f2 <Ack+0x7e>
		}
		if (bBuf[1] != 2)
 800d6c2:	7a7b      	ldrb	r3, [r7, #9]
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d001      	beq.n	800d6cc <Ack+0x58>
		{
			return 0;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	e012      	b.n	800d6f2 <Ack+0x7e>
		}
		calSum = ~(bBuf[0] + bBuf[1] + bBuf[2]);
 800d6cc:	7a3a      	ldrb	r2, [r7, #8]
 800d6ce:	7a7b      	ldrb	r3, [r7, #9]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	b2da      	uxtb	r2, r3
 800d6d4:	7abb      	ldrb	r3, [r7, #10]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	43db      	mvns	r3, r3
 800d6dc:	73fb      	strb	r3, [r7, #15]
		if (calSum != bBuf[3])
 800d6de:	7afb      	ldrb	r3, [r7, #11]
 800d6e0:	7bfa      	ldrb	r2, [r7, #15]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d001      	beq.n	800d6ea <Ack+0x76>
		{
			return 0;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e003      	b.n	800d6f2 <Ack+0x7e>
		}
		Error = bBuf[2];
 800d6ea:	7aba      	ldrb	r2, [r7, #10]
 800d6ec:	4b03      	ldr	r3, [pc, #12]	@ (800d6fc <Ack+0x88>)
 800d6ee:	701a      	strb	r2, [r3, #0]
	}
	return 1;
 800d6f0:	2301      	movs	r3, #1
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	24000c2f 	.word	0x24000c2f
 800d700:	24000064 	.word	0x24000064

0800d704 <Uart_Send>:
#include "stm32h7xx_hal.h"
#include "SCS_Uart.h"
#include "usart.h"

void Uart_Send(uint8_t *buf, uint16_t len)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b082      	sub	sp, #8
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	460b      	mov	r3, r1
 800d70e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart6, buf, len, HAL_MAX_DELAY);
 800d710:	887a      	ldrh	r2, [r7, #2]
 800d712:	f04f 33ff 	mov.w	r3, #4294967295
 800d716:	6879      	ldr	r1, [r7, #4]
 800d718:	4803      	ldr	r0, [pc, #12]	@ (800d728 <Uart_Send+0x24>)
 800d71a:	f7fb f913 	bl	8008944 <HAL_UART_Transmit>
}
 800d71e:	bf00      	nop
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	240009c8 	.word	0x240009c8

0800d72c <Uart_Read>:

int16_t Uart_Read(uint8_t *buf, uint16_t len, uint32_t timeout)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	460b      	mov	r3, r1
 800d736:	607a      	str	r2, [r7, #4]
 800d738:	817b      	strh	r3, [r7, #10]
	if (HAL_UART_Receive(&huart6, buf, len, timeout) == HAL_OK)
 800d73a:	897a      	ldrh	r2, [r7, #10]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	68f9      	ldr	r1, [r7, #12]
 800d740:	4806      	ldr	r0, [pc, #24]	@ (800d75c <Uart_Read+0x30>)
 800d742:	f7fb f98d 	bl	8008a60 <HAL_UART_Receive>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d102      	bne.n	800d752 <Uart_Read+0x26>
	{
		return len;
 800d74c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d750:	e000      	b.n	800d754 <Uart_Read+0x28>
	}
	else
	{
		return 0;
 800d752:	2300      	movs	r3, #0
	}
}
 800d754:	4618      	mov	r0, r3
 800d756:	3710      	adds	r7, #16
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	240009c8 	.word	0x240009c8

0800d760 <readSCS>:
uint8_t wBuf[128];
uint8_t wLen = 0;

//UART 接收数据接口
int readSCS(unsigned char *nDat, int nLen)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
	return Uart_Read(nDat, nLen, IOTimeOut);
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	b29b      	uxth	r3, r3
 800d76e:	4a05      	ldr	r2, [pc, #20]	@ (800d784 <readSCS+0x24>)
 800d770:	6812      	ldr	r2, [r2, #0]
 800d772:	4619      	mov	r1, r3
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f7ff ffd9 	bl	800d72c <Uart_Read>
 800d77a:	4603      	mov	r3, r0
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3708      	adds	r7, #8
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	24000068 	.word	0x24000068

0800d788 <writeSCS>:

//UART 发送数据接口
int writeSCS(unsigned char *nDat, int nLen)
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
	while (nLen--)
 800d792:	e014      	b.n	800d7be <writeSCS+0x36>
	{
		if (wLen < sizeof(wBuf))
 800d794:	4b10      	ldr	r3, [pc, #64]	@ (800d7d8 <writeSCS+0x50>)
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	b25b      	sxtb	r3, r3
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	db0f      	blt.n	800d7be <writeSCS+0x36>
		{
			wBuf[wLen] = *nDat;
 800d79e:	4b0e      	ldr	r3, [pc, #56]	@ (800d7d8 <writeSCS+0x50>)
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	7819      	ldrb	r1, [r3, #0]
 800d7a8:	4b0c      	ldr	r3, [pc, #48]	@ (800d7dc <writeSCS+0x54>)
 800d7aa:	5499      	strb	r1, [r3, r2]
			wLen++;
 800d7ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d7d8 <writeSCS+0x50>)
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	b2da      	uxtb	r2, r3
 800d7b4:	4b08      	ldr	r3, [pc, #32]	@ (800d7d8 <writeSCS+0x50>)
 800d7b6:	701a      	strb	r2, [r3, #0]
			nDat++;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	607b      	str	r3, [r7, #4]
	while (nLen--)
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	1e5a      	subs	r2, r3, #1
 800d7c2:	603a      	str	r2, [r7, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d1e5      	bne.n	800d794 <writeSCS+0xc>
		}
	}
	return wLen;
 800d7c8:	4b03      	ldr	r3, [pc, #12]	@ (800d7d8 <writeSCS+0x50>)
 800d7ca:	781b      	ldrb	r3, [r3, #0]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	370c      	adds	r7, #12
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr
 800d7d8:	24000cb0 	.word	0x24000cb0
 800d7dc:	24000c30 	.word	0x24000c30

0800d7e0 <nopDelay>:
	return wLen;
}

//等待舵机总线切换(约8us)
void nopDelay(void)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
	uint16_t i = 500;
 800d7e6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800d7ea:	80fb      	strh	r3, [r7, #6]
	while (i--)
 800d7ec:	bf00      	nop
 800d7ee:	88fb      	ldrh	r3, [r7, #6]
 800d7f0:	1e5a      	subs	r2, r3, #1
 800d7f2:	80fa      	strh	r2, [r7, #6]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1fa      	bne.n	800d7ee <nopDelay+0xe>
		;
}
 800d7f8:	bf00      	nop
 800d7fa:	bf00      	nop
 800d7fc:	370c      	adds	r7, #12
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr

0800d806 <rFlushSCS>:

//接收缓冲区刷新
void rFlushSCS()
{
 800d806:	b580      	push	{r7, lr}
 800d808:	af00      	add	r7, sp, #0
	nopDelay();
 800d80a:	f7ff ffe9 	bl	800d7e0 <nopDelay>
}
 800d80e:	bf00      	nop
 800d810:	bd80      	pop	{r7, pc}
	...

0800d814 <wFlushSCS>:

//发送缓冲区刷新
void wFlushSCS()
{
 800d814:	b580      	push	{r7, lr}
 800d816:	af00      	add	r7, sp, #0
	if (wLen)
 800d818:	4b07      	ldr	r3, [pc, #28]	@ (800d838 <wFlushSCS+0x24>)
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d008      	beq.n	800d832 <wFlushSCS+0x1e>
	{
		Uart_Send(wBuf, wLen);
 800d820:	4b05      	ldr	r3, [pc, #20]	@ (800d838 <wFlushSCS+0x24>)
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	4619      	mov	r1, r3
 800d826:	4805      	ldr	r0, [pc, #20]	@ (800d83c <wFlushSCS+0x28>)
 800d828:	f7ff ff6c 	bl	800d704 <Uart_Send>
		wLen = 0;
 800d82c:	4b02      	ldr	r3, [pc, #8]	@ (800d838 <wFlushSCS+0x24>)
 800d82e:	2200      	movs	r2, #0
 800d830:	701a      	strb	r2, [r3, #0]
	}
}
 800d832:	bf00      	nop
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	24000cb0 	.word	0x24000cb0
 800d83c:	24000c30 	.word	0x24000c30

0800d840 <WritePosEx>:
{
	return Err;
}

int WritePosEx(uint8_t ID, int16_t Position, uint16_t Speed, uint8_t ACC)
{
 800d840:	b590      	push	{r4, r7, lr}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	4604      	mov	r4, r0
 800d848:	4608      	mov	r0, r1
 800d84a:	4611      	mov	r1, r2
 800d84c:	461a      	mov	r2, r3
 800d84e:	4623      	mov	r3, r4
 800d850:	71fb      	strb	r3, [r7, #7]
 800d852:	4603      	mov	r3, r0
 800d854:	80bb      	strh	r3, [r7, #4]
 800d856:	460b      	mov	r3, r1
 800d858:	807b      	strh	r3, [r7, #2]
 800d85a:	4613      	mov	r3, r2
 800d85c:	71bb      	strb	r3, [r7, #6]
	uint8_t bBuf[7];
	if (Position < 0)
 800d85e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	da09      	bge.n	800d87a <WritePosEx+0x3a>
	{
		Position = -Position;
 800d866:	88bb      	ldrh	r3, [r7, #4]
 800d868:	425b      	negs	r3, r3
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	80bb      	strh	r3, [r7, #4]
		Position |= (1 << 15);
 800d86e:	88bb      	ldrh	r3, [r7, #4]
 800d870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d878:	80bb      	strh	r3, [r7, #4]
	}

	bBuf[0] = ACC;
 800d87a:	79bb      	ldrb	r3, [r7, #6]
 800d87c:	723b      	strb	r3, [r7, #8]
	Host2SCS(bBuf + 1, bBuf + 2, Position);
 800d87e:	f107 0308 	add.w	r3, r7, #8
 800d882:	3301      	adds	r3, #1
 800d884:	f107 0108 	add.w	r1, r7, #8
 800d888:	3102      	adds	r1, #2
 800d88a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d88e:	4618      	mov	r0, r3
 800d890:	f7ff fd8e 	bl	800d3b0 <Host2SCS>
	Host2SCS(bBuf + 3, bBuf + 4, 0);
 800d894:	f107 0308 	add.w	r3, r7, #8
 800d898:	3303      	adds	r3, #3
 800d89a:	f107 0108 	add.w	r1, r7, #8
 800d89e:	3104      	adds	r1, #4
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7ff fd84 	bl	800d3b0 <Host2SCS>
	Host2SCS(bBuf + 5, bBuf + 6, Speed);
 800d8a8:	f107 0308 	add.w	r3, r7, #8
 800d8ac:	3305      	adds	r3, #5
 800d8ae:	f107 0108 	add.w	r1, r7, #8
 800d8b2:	3106      	adds	r1, #6
 800d8b4:	887a      	ldrh	r2, [r7, #2]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7ff fd7a 	bl	800d3b0 <Host2SCS>

	return genWrite(ID, SMS_STS_ACC, bBuf, 7);
 800d8bc:	f107 0208 	add.w	r2, r7, #8
 800d8c0:	79f8      	ldrb	r0, [r7, #7]
 800d8c2:	2307      	movs	r3, #7
 800d8c4:	2129      	movs	r1, #41	@ 0x29
 800d8c6:	f7ff fe01 	bl	800d4cc <genWrite>
 800d8ca:	4603      	mov	r3, r0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3714      	adds	r7, #20
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd90      	pop	{r4, r7, pc}

0800d8d4 <ReadMove>:
	}
	return Temper;
}

int ReadMove(int ID)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
	int Move = -1;
 800d8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d8e0:	60fb      	str	r3, [r7, #12]
	if (ID == -1)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e8:	d103      	bne.n	800d8f2 <ReadMove+0x1e>
	{
		Move = Mem[SMS_STS_MOVING - SMS_STS_PRESENT_POSITION_L];
 800d8ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d920 <ReadMove+0x4c>)
 800d8ec:	7a9b      	ldrb	r3, [r3, #10]
 800d8ee:	60fb      	str	r3, [r7, #12]
 800d8f0:	e010      	b.n	800d914 <ReadMove+0x40>
	}
	else
	{
		Err = 0;
 800d8f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d924 <ReadMove+0x50>)
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	601a      	str	r2, [r3, #0]
		Move = readByte(ID, SMS_STS_MOVING);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	2142      	movs	r1, #66	@ 0x42
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7ff fe74 	bl	800d5ec <readByte>
 800d904:	60f8      	str	r0, [r7, #12]
		if (Move == -1)
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90c:	d102      	bne.n	800d914 <ReadMove+0x40>
		{
			Err = 1;
 800d90e:	4b05      	ldr	r3, [pc, #20]	@ (800d924 <ReadMove+0x50>)
 800d910:	2201      	movs	r2, #1
 800d912:	601a      	str	r2, [r3, #0]
		}
	}
	return Move;
 800d914:	68fb      	ldr	r3, [r7, #12]
}
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	24000cb4 	.word	0x24000cb4
 800d924:	24000cc4 	.word	0x24000cc4

0800d928 <Action_Show>:
extern float x;
extern float y;
extern int colour;
extern char Point_Flag;

void Action_Show(void) {
 800d928:	b580      	push	{r7, lr}
 800d92a:	af00      	add	r7, sp, #0
	sprintf(Z_str, "%.2f", zangle);
 800d92c:	4b30      	ldr	r3, [pc, #192]	@ (800d9f0 <Action_Show+0xc8>)
 800d92e:	edd3 7a00 	vldr	s15, [r3]
 800d932:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d936:	ec53 2b17 	vmov	r2, r3, d7
 800d93a:	492e      	ldr	r1, [pc, #184]	@ (800d9f4 <Action_Show+0xcc>)
 800d93c:	482e      	ldr	r0, [pc, #184]	@ (800d9f8 <Action_Show+0xd0>)
 800d93e:	f001 fff9 	bl	800f934 <siprintf>
	sprintf(X_srt, "%.2f", pos_x);
 800d942:	4b2e      	ldr	r3, [pc, #184]	@ (800d9fc <Action_Show+0xd4>)
 800d944:	edd3 7a00 	vldr	s15, [r3]
 800d948:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d94c:	ec53 2b17 	vmov	r2, r3, d7
 800d950:	4928      	ldr	r1, [pc, #160]	@ (800d9f4 <Action_Show+0xcc>)
 800d952:	482b      	ldr	r0, [pc, #172]	@ (800da00 <Action_Show+0xd8>)
 800d954:	f001 ffee 	bl	800f934 <siprintf>
	sprintf(Y_srt, "%.2f", pos_y);
 800d958:	4b2a      	ldr	r3, [pc, #168]	@ (800da04 <Action_Show+0xdc>)
 800d95a:	edd3 7a00 	vldr	s15, [r3]
 800d95e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d962:	ec53 2b17 	vmov	r2, r3, d7
 800d966:	4923      	ldr	r1, [pc, #140]	@ (800d9f4 <Action_Show+0xcc>)
 800d968:	4827      	ldr	r0, [pc, #156]	@ (800da08 <Action_Show+0xe0>)
 800d96a:	f001 ffe3 	bl	800f934 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) "Z_Angle.txt=\"",
 800d96e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d972:	220d      	movs	r2, #13
 800d974:	4925      	ldr	r1, [pc, #148]	@ (800da0c <Action_Show+0xe4>)
 800d976:	4826      	ldr	r0, [pc, #152]	@ (800da10 <Action_Show+0xe8>)
 800d978:	f7fa ffe4 	bl	8008944 <HAL_UART_Transmit>
			sizeof("Z_Angle.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Z_str, sizeof(X_srt) - 1, 0xffff);
 800d97c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d980:	2213      	movs	r2, #19
 800d982:	491d      	ldr	r1, [pc, #116]	@ (800d9f8 <Action_Show+0xd0>)
 800d984:	4822      	ldr	r0, [pc, #136]	@ (800da10 <Action_Show+0xe8>)
 800d986:	f7fa ffdd 	bl	8008944 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800d98a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d98e:	2204      	movs	r2, #4
 800d990:	4920      	ldr	r1, [pc, #128]	@ (800da14 <Action_Show+0xec>)
 800d992:	481f      	ldr	r0, [pc, #124]	@ (800da10 <Action_Show+0xe8>)
 800d994:	f7fa ffd6 	bl	8008944 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "X_Point.txt=\"",
 800d998:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d99c:	220d      	movs	r2, #13
 800d99e:	491e      	ldr	r1, [pc, #120]	@ (800da18 <Action_Show+0xf0>)
 800d9a0:	481b      	ldr	r0, [pc, #108]	@ (800da10 <Action_Show+0xe8>)
 800d9a2:	f7fa ffcf 	bl	8008944 <HAL_UART_Transmit>
			sizeof("X_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) X_srt, sizeof(X_srt) - 1, 0xffff);
 800d9a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9aa:	2213      	movs	r2, #19
 800d9ac:	4914      	ldr	r1, [pc, #80]	@ (800da00 <Action_Show+0xd8>)
 800d9ae:	4818      	ldr	r0, [pc, #96]	@ (800da10 <Action_Show+0xe8>)
 800d9b0:	f7fa ffc8 	bl	8008944 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800d9b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9b8:	2204      	movs	r2, #4
 800d9ba:	4916      	ldr	r1, [pc, #88]	@ (800da14 <Action_Show+0xec>)
 800d9bc:	4814      	ldr	r0, [pc, #80]	@ (800da10 <Action_Show+0xe8>)
 800d9be:	f7fa ffc1 	bl	8008944 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "Y_Point.txt=\"",
 800d9c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9c6:	220d      	movs	r2, #13
 800d9c8:	4914      	ldr	r1, [pc, #80]	@ (800da1c <Action_Show+0xf4>)
 800d9ca:	4811      	ldr	r0, [pc, #68]	@ (800da10 <Action_Show+0xe8>)
 800d9cc:	f7fa ffba 	bl	8008944 <HAL_UART_Transmit>
			sizeof("Y_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_srt, sizeof(X_srt) - 1, 0xffff);
 800d9d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9d4:	2213      	movs	r2, #19
 800d9d6:	490c      	ldr	r1, [pc, #48]	@ (800da08 <Action_Show+0xe0>)
 800d9d8:	480d      	ldr	r0, [pc, #52]	@ (800da10 <Action_Show+0xe8>)
 800d9da:	f7fa ffb3 	bl	8008944 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800d9de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9e2:	2204      	movs	r2, #4
 800d9e4:	490b      	ldr	r1, [pc, #44]	@ (800da14 <Action_Show+0xec>)
 800d9e6:	480a      	ldr	r0, [pc, #40]	@ (800da10 <Action_Show+0xe8>)
 800d9e8:	f7fa ffac 	bl	8008944 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);
}
 800d9ec:	bf00      	nop
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	24000afc 	.word	0x24000afc
 800d9f4:	08012c4c 	.word	0x08012c4c
 800d9f8:	24000cc8 	.word	0x24000cc8
 800d9fc:	24000af4 	.word	0x24000af4
 800da00:	24000cd0 	.word	0x24000cd0
 800da04:	24000af8 	.word	0x24000af8
 800da08:	24000ce4 	.word	0x24000ce4
 800da0c:	08012c54 	.word	0x08012c54
 800da10:	240005bc 	.word	0x240005bc
 800da14:	08012c64 	.word	0x08012c64
 800da18:	08012c6c 	.word	0x08012c6c
 800da1c:	08012c7c 	.word	0x08012c7c

0800da20 <QR_Show>:
extern int QR_data[6];
void QR_Show(void) {
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++) {
 800da26:	2300      	movs	r3, #0
 800da28:	607b      	str	r3, [r7, #4]
 800da2a:	e00d      	b.n	800da48 <QR_Show+0x28>
		sprintf(&Y_pid[i], "%d", QR_data[i]);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4a14      	ldr	r2, [pc, #80]	@ (800da80 <QR_Show+0x60>)
 800da30:	1898      	adds	r0, r3, r2
 800da32:	4a14      	ldr	r2, [pc, #80]	@ (800da84 <QR_Show+0x64>)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da3a:	461a      	mov	r2, r3
 800da3c:	4912      	ldr	r1, [pc, #72]	@ (800da88 <QR_Show+0x68>)
 800da3e:	f001 ff79 	bl	800f934 <siprintf>
	for (int i = 0; i < 6; i++) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	3301      	adds	r3, #1
 800da46:	607b      	str	r3, [r7, #4]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b05      	cmp	r3, #5
 800da4c:	ddee      	ble.n	800da2c <QR_Show+0xc>
	}
	HAL_UART_Transmit(&huart4, (uint8_t*) "QR.txt=\"", sizeof("QR.txt=\"") - 1,
 800da4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da52:	2208      	movs	r2, #8
 800da54:	490d      	ldr	r1, [pc, #52]	@ (800da8c <QR_Show+0x6c>)
 800da56:	480e      	ldr	r0, [pc, #56]	@ (800da90 <QR_Show+0x70>)
 800da58:	f7fa ff74 	bl	8008944 <HAL_UART_Transmit>
			0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_pid, sizeof(Y_pid) - 1, 0xffff);
 800da5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da60:	2213      	movs	r2, #19
 800da62:	4907      	ldr	r1, [pc, #28]	@ (800da80 <QR_Show+0x60>)
 800da64:	480a      	ldr	r0, [pc, #40]	@ (800da90 <QR_Show+0x70>)
 800da66:	f7fa ff6d 	bl	8008944 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800da6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da6e:	2204      	movs	r2, #4
 800da70:	4908      	ldr	r1, [pc, #32]	@ (800da94 <QR_Show+0x74>)
 800da72:	4807      	ldr	r0, [pc, #28]	@ (800da90 <QR_Show+0x70>)
 800da74:	f7fa ff66 	bl	8008944 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart4, (uint8_t*) QR_data, sizeof(QR_data) - 1, 0xffff);
	 HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
	 sizeof("\"\xff\xff\xff") - 1, 0xffff);
	 */

}
 800da78:	bf00      	nop
 800da7a:	3708      	adds	r7, #8
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	24000cf8 	.word	0x24000cf8
 800da84:	24000000 	.word	0x24000000
 800da88:	08012c8c 	.word	0x08012c8c
 800da8c:	08012c90 	.word	0x08012c90
 800da90:	240005bc 	.word	0x240005bc
 800da94:	08012c64 	.word	0x08012c64

0800da98 <Point_Show>:
// 抓取过程标志位，值为目标颜色
extern char Match_Flag;
// 抓取计算稳定性标志位，0为识别有故障,1为正常计算
extern char Check_flag;
// TODO：屏幕缺失字符"+",暂时判断为编码格式问题，需要通过串口助手确定编码格式
void Point_Show(void) {
 800da98:	b580      	push	{r7, lr}
 800da9a:	af00      	add	r7, sp, #0
	if(Point_Flag == 0)
 800da9c:	4b36      	ldr	r3, [pc, #216]	@ (800db78 <Point_Show+0xe0>)
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d066      	beq.n	800db72 <Point_Show+0xda>
	{
//		TX2点位数据还未接收，结束该函数
		return ;
	}
	Point_Flag = 0;
 800daa4:	4b34      	ldr	r3, [pc, #208]	@ (800db78 <Point_Show+0xe0>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	701a      	strb	r2, [r3, #0]
//	在抓取过程中,进行颜色校验，如果颜色与抓取目标颜色不同，则放弃该帧数据，并传递放弃稳定性计算标志位
	if(Match_Flag != colour)
 800daaa:	4b34      	ldr	r3, [pc, #208]	@ (800db7c <Point_Show+0xe4>)
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	461a      	mov	r2, r3
 800dab0:	4b33      	ldr	r3, [pc, #204]	@ (800db80 <Point_Show+0xe8>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d003      	beq.n	800dac0 <Point_Show+0x28>
		Check_flag = 0;
 800dab8:	4b32      	ldr	r3, [pc, #200]	@ (800db84 <Point_Show+0xec>)
 800daba:	2200      	movs	r2, #0
 800dabc:	701a      	strb	r2, [r3, #0]
 800dabe:	e002      	b.n	800dac6 <Point_Show+0x2e>
	else
		Check_flag = 1;
 800dac0:	4b30      	ldr	r3, [pc, #192]	@ (800db84 <Point_Show+0xec>)
 800dac2:	2201      	movs	r2, #1
 800dac4:	701a      	strb	r2, [r3, #0]
	sprintf(TX2_X_Point, "%.2f", x);
 800dac6:	4b30      	ldr	r3, [pc, #192]	@ (800db88 <Point_Show+0xf0>)
 800dac8:	edd3 7a00 	vldr	s15, [r3]
 800dacc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dad0:	ec53 2b17 	vmov	r2, r3, d7
 800dad4:	492d      	ldr	r1, [pc, #180]	@ (800db8c <Point_Show+0xf4>)
 800dad6:	482e      	ldr	r0, [pc, #184]	@ (800db90 <Point_Show+0xf8>)
 800dad8:	f001 ff2c 	bl	800f934 <siprintf>
	sprintf(TX2_Y_Point, "%.2f", y);
 800dadc:	4b2d      	ldr	r3, [pc, #180]	@ (800db94 <Point_Show+0xfc>)
 800dade:	edd3 7a00 	vldr	s15, [r3]
 800dae2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dae6:	ec53 2b17 	vmov	r2, r3, d7
 800daea:	4928      	ldr	r1, [pc, #160]	@ (800db8c <Point_Show+0xf4>)
 800daec:	482a      	ldr	r0, [pc, #168]	@ (800db98 <Point_Show+0x100>)
 800daee:	f001 ff21 	bl	800f934 <siprintf>
	sprintf(TX2_Color, "%d", colour);
 800daf2:	4b23      	ldr	r3, [pc, #140]	@ (800db80 <Point_Show+0xe8>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	461a      	mov	r2, r3
 800daf8:	4928      	ldr	r1, [pc, #160]	@ (800db9c <Point_Show+0x104>)
 800dafa:	4829      	ldr	r0, [pc, #164]	@ (800dba0 <Point_Show+0x108>)
 800dafc:	f001 ff1a 	bl	800f934 <siprintf>
//	开始发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Point.txt=\"",sizeof("Point.txt=\"") - 1, 0xffff);
 800db00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db04:	220b      	movs	r2, #11
 800db06:	4927      	ldr	r1, [pc, #156]	@ (800dba4 <Point_Show+0x10c>)
 800db08:	4827      	ldr	r0, [pc, #156]	@ (800dba8 <Point_Show+0x110>)
 800db0a:	f7fa ff1b 	bl	8008944 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_X_Point, sizeof(TX2_X_Point) - 2, 0xffff);
 800db0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db12:	2206      	movs	r2, #6
 800db14:	491e      	ldr	r1, [pc, #120]	@ (800db90 <Point_Show+0xf8>)
 800db16:	4824      	ldr	r0, [pc, #144]	@ (800dba8 <Point_Show+0x110>)
 800db18:	f7fa ff14 	bl	8008944 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "+", sizeof("+")-2, 0xffff);
 800db1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db20:	2200      	movs	r2, #0
 800db22:	4922      	ldr	r1, [pc, #136]	@ (800dbac <Point_Show+0x114>)
 800db24:	4820      	ldr	r0, [pc, #128]	@ (800dba8 <Point_Show+0x110>)
 800db26:	f7fa ff0d 	bl	8008944 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Y_Point, sizeof(TX2_Y_Point) - 1, 0xffff);
 800db2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db2e:	2207      	movs	r2, #7
 800db30:	4919      	ldr	r1, [pc, #100]	@ (800db98 <Point_Show+0x100>)
 800db32:	481d      	ldr	r0, [pc, #116]	@ (800dba8 <Point_Show+0x110>)
 800db34:	f7fa ff06 	bl	8008944 <HAL_UART_Transmit>
//	结束发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800db38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db3c:	2204      	movs	r2, #4
 800db3e:	491c      	ldr	r1, [pc, #112]	@ (800dbb0 <Point_Show+0x118>)
 800db40:	4819      	ldr	r0, [pc, #100]	@ (800dba8 <Point_Show+0x110>)
 800db42:	f7fa feff 	bl	8008944 <HAL_UART_Transmit>

//	开始发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Color.txt=\"",sizeof("Color.txt=\"") - 1, 0xffff);
 800db46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db4a:	220b      	movs	r2, #11
 800db4c:	4919      	ldr	r1, [pc, #100]	@ (800dbb4 <Point_Show+0x11c>)
 800db4e:	4816      	ldr	r0, [pc, #88]	@ (800dba8 <Point_Show+0x110>)
 800db50:	f7fa fef8 	bl	8008944 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Color, sizeof(TX2_Color)-1 , 0xffff);
 800db54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db58:	2201      	movs	r2, #1
 800db5a:	4911      	ldr	r1, [pc, #68]	@ (800dba0 <Point_Show+0x108>)
 800db5c:	4812      	ldr	r0, [pc, #72]	@ (800dba8 <Point_Show+0x110>)
 800db5e:	f7fa fef1 	bl	8008944 <HAL_UART_Transmit>

//	结束发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800db62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db66:	2204      	movs	r2, #4
 800db68:	4911      	ldr	r1, [pc, #68]	@ (800dbb0 <Point_Show+0x118>)
 800db6a:	480f      	ldr	r0, [pc, #60]	@ (800dba8 <Point_Show+0x110>)
 800db6c:	f7fa feea 	bl	8008944 <HAL_UART_Transmit>
 800db70:	e000      	b.n	800db74 <Point_Show+0xdc>
		return ;
 800db72:	bf00      	nop
}
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	2400047c 	.word	0x2400047c
 800db7c:	24000485 	.word	0x24000485
 800db80:	24000480 	.word	0x24000480
 800db84:	24000486 	.word	0x24000486
 800db88:	24000474 	.word	0x24000474
 800db8c:	08012c4c 	.word	0x08012c4c
 800db90:	24000d0c 	.word	0x24000d0c
 800db94:	24000478 	.word	0x24000478
 800db98:	24000d14 	.word	0x24000d14
 800db9c:	08012c8c 	.word	0x08012c8c
 800dba0:	24000d1c 	.word	0x24000d1c
 800dba4:	08012c9c 	.word	0x08012c9c
 800dba8:	240005bc 	.word	0x240005bc
 800dbac:	08012ca8 	.word	0x08012ca8
 800dbb0:	08012c64 	.word	0x08012c64
 800dbb4:	08012cac 	.word	0x08012cac

0800dbb8 <Check_Flag>:

void Check_Flag(uint8_t rec) {
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	71fb      	strb	r3, [r7, #7]
	static uint8_t ch;
	static uint8_t count = 0;

	ch = rec;
 800dbc2:	4a45      	ldr	r2, [pc, #276]	@ (800dcd8 <Check_Flag+0x120>)
 800dbc4:	79fb      	ldrb	r3, [r7, #7]
 800dbc6:	7013      	strb	r3, [r2, #0]

	switch (count) {
 800dbc8:	4b44      	ldr	r3, [pc, #272]	@ (800dcdc <Check_Flag+0x124>)
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	2b05      	cmp	r3, #5
 800dbce:	d876      	bhi.n	800dcbe <Check_Flag+0x106>
 800dbd0:	a201      	add	r2, pc, #4	@ (adr r2, 800dbd8 <Check_Flag+0x20>)
 800dbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd6:	bf00      	nop
 800dbd8:	0800dbf1 	.word	0x0800dbf1
 800dbdc:	0800dc29 	.word	0x0800dc29
 800dbe0:	0800dc4f 	.word	0x0800dc4f
 800dbe4:	0800dc6d 	.word	0x0800dc6d
 800dbe8:	0800dc8b 	.word	0x0800dc8b
 800dbec:	0800dca9 	.word	0x0800dca9
	case 0:
		if (ch == 'G')
 800dbf0:	4b39      	ldr	r3, [pc, #228]	@ (800dcd8 <Check_Flag+0x120>)
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	2b47      	cmp	r3, #71	@ 0x47
 800dbf6:	d103      	bne.n	800dc00 <Check_Flag+0x48>
			count = 1;
 800dbf8:	4b38      	ldr	r3, [pc, #224]	@ (800dcdc <Check_Flag+0x124>)
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	701a      	strb	r2, [r3, #0]
			count = 2;
		else if (ch == 'M')
			count = 4;
		else
			count = 0;
		break;
 800dbfe:	e065      	b.n	800dccc <Check_Flag+0x114>
		else if (ch == 'R')
 800dc00:	4b35      	ldr	r3, [pc, #212]	@ (800dcd8 <Check_Flag+0x120>)
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	2b52      	cmp	r3, #82	@ 0x52
 800dc06:	d103      	bne.n	800dc10 <Check_Flag+0x58>
			count = 2;
 800dc08:	4b34      	ldr	r3, [pc, #208]	@ (800dcdc <Check_Flag+0x124>)
 800dc0a:	2202      	movs	r2, #2
 800dc0c:	701a      	strb	r2, [r3, #0]
		break;
 800dc0e:	e05d      	b.n	800dccc <Check_Flag+0x114>
		else if (ch == 'M')
 800dc10:	4b31      	ldr	r3, [pc, #196]	@ (800dcd8 <Check_Flag+0x120>)
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	2b4d      	cmp	r3, #77	@ 0x4d
 800dc16:	d103      	bne.n	800dc20 <Check_Flag+0x68>
			count = 4;
 800dc18:	4b30      	ldr	r3, [pc, #192]	@ (800dcdc <Check_Flag+0x124>)
 800dc1a:	2204      	movs	r2, #4
 800dc1c:	701a      	strb	r2, [r3, #0]
		break;
 800dc1e:	e055      	b.n	800dccc <Check_Flag+0x114>
			count = 0;
 800dc20:	4b2e      	ldr	r3, [pc, #184]	@ (800dcdc <Check_Flag+0x124>)
 800dc22:	2200      	movs	r2, #0
 800dc24:	701a      	strb	r2, [r3, #0]
		break;
 800dc26:	e051      	b.n	800dccc <Check_Flag+0x114>
	case 1:
		if (ch == 'o') {
 800dc28:	4b2b      	ldr	r3, [pc, #172]	@ (800dcd8 <Check_Flag+0x120>)
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	2b6f      	cmp	r3, #111	@ 0x6f
 800dc2e:	d106      	bne.n	800dc3e <Check_Flag+0x86>
			System_Flag = 1;
 800dc30:	4b2b      	ldr	r3, [pc, #172]	@ (800dce0 <Check_Flag+0x128>)
 800dc32:	2201      	movs	r2, #1
 800dc34:	701a      	strb	r2, [r3, #0]
			count = 0;
 800dc36:	4b29      	ldr	r3, [pc, #164]	@ (800dcdc <Check_Flag+0x124>)
 800dc38:	2200      	movs	r2, #0
 800dc3a:	701a      	strb	r2, [r3, #0]
		} else if (ch == 'G')
			;
		else
			count = 0;
		break;
 800dc3c:	e043      	b.n	800dcc6 <Check_Flag+0x10e>
		} else if (ch == 'G')
 800dc3e:	4b26      	ldr	r3, [pc, #152]	@ (800dcd8 <Check_Flag+0x120>)
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	2b47      	cmp	r3, #71	@ 0x47
 800dc44:	d03f      	beq.n	800dcc6 <Check_Flag+0x10e>
			count = 0;
 800dc46:	4b25      	ldr	r3, [pc, #148]	@ (800dcdc <Check_Flag+0x124>)
 800dc48:	2200      	movs	r2, #0
 800dc4a:	701a      	strb	r2, [r3, #0]
		break;
 800dc4c:	e03b      	b.n	800dcc6 <Check_Flag+0x10e>
	case 2:
//		此处用于判断是否进入准备模式，调整车身姿态
		if (ch == 'e')
 800dc4e:	4b22      	ldr	r3, [pc, #136]	@ (800dcd8 <Check_Flag+0x120>)
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	2b65      	cmp	r3, #101	@ 0x65
 800dc54:	d106      	bne.n	800dc64 <Check_Flag+0xac>
			count++;
 800dc56:	4b21      	ldr	r3, [pc, #132]	@ (800dcdc <Check_Flag+0x124>)
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	b2da      	uxtb	r2, r3
 800dc5e:	4b1f      	ldr	r3, [pc, #124]	@ (800dcdc <Check_Flag+0x124>)
 800dc60:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800dc62:	e033      	b.n	800dccc <Check_Flag+0x114>
			count = 0;
 800dc64:	4b1d      	ldr	r3, [pc, #116]	@ (800dcdc <Check_Flag+0x124>)
 800dc66:	2200      	movs	r2, #0
 800dc68:	701a      	strb	r2, [r3, #0]
		break;
 800dc6a:	e02f      	b.n	800dccc <Check_Flag+0x114>
	case 3:
		if (ch == 'a') {
 800dc6c:	4b1a      	ldr	r3, [pc, #104]	@ (800dcd8 <Check_Flag+0x120>)
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	2b61      	cmp	r3, #97	@ 0x61
 800dc72:	d106      	bne.n	800dc82 <Check_Flag+0xca>
			Ready_Flag = 1;
 800dc74:	4b1b      	ldr	r3, [pc, #108]	@ (800dce4 <Check_Flag+0x12c>)
 800dc76:	2201      	movs	r2, #1
 800dc78:	701a      	strb	r2, [r3, #0]
			count = 0;
 800dc7a:	4b18      	ldr	r3, [pc, #96]	@ (800dcdc <Check_Flag+0x124>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	701a      	strb	r2, [r3, #0]
		} else
			count = 0;
		break;
 800dc80:	e024      	b.n	800dccc <Check_Flag+0x114>
			count = 0;
 800dc82:	4b16      	ldr	r3, [pc, #88]	@ (800dcdc <Check_Flag+0x124>)
 800dc84:	2200      	movs	r2, #0
 800dc86:	701a      	strb	r2, [r3, #0]
		break;
 800dc88:	e020      	b.n	800dccc <Check_Flag+0x114>
	case 4:
		if (ch == 'a')
 800dc8a:	4b13      	ldr	r3, [pc, #76]	@ (800dcd8 <Check_Flag+0x120>)
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	2b61      	cmp	r3, #97	@ 0x61
 800dc90:	d106      	bne.n	800dca0 <Check_Flag+0xe8>
			count++;
 800dc92:	4b12      	ldr	r3, [pc, #72]	@ (800dcdc <Check_Flag+0x124>)
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	3301      	adds	r3, #1
 800dc98:	b2da      	uxtb	r2, r3
 800dc9a:	4b10      	ldr	r3, [pc, #64]	@ (800dcdc <Check_Flag+0x124>)
 800dc9c:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800dc9e:	e015      	b.n	800dccc <Check_Flag+0x114>
			count = 0;
 800dca0:	4b0e      	ldr	r3, [pc, #56]	@ (800dcdc <Check_Flag+0x124>)
 800dca2:	2200      	movs	r2, #0
 800dca4:	701a      	strb	r2, [r3, #0]
		break;
 800dca6:	e011      	b.n	800dccc <Check_Flag+0x114>
	case 5:
		if (ch == 't') {
 800dca8:	4b0b      	ldr	r3, [pc, #44]	@ (800dcd8 <Check_Flag+0x120>)
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	2b74      	cmp	r3, #116	@ 0x74
 800dcae:	d10c      	bne.n	800dcca <Check_Flag+0x112>
			System_Flag = 1;
 800dcb0:	4b0b      	ldr	r3, [pc, #44]	@ (800dce0 <Check_Flag+0x128>)
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	701a      	strb	r2, [r3, #0]
			count = 0;
 800dcb6:	4b09      	ldr	r3, [pc, #36]	@ (800dcdc <Check_Flag+0x124>)
 800dcb8:	2200      	movs	r2, #0
 800dcba:	701a      	strb	r2, [r3, #0]
		}
		break;
 800dcbc:	e005      	b.n	800dcca <Check_Flag+0x112>
	default:
		count = 0;
 800dcbe:	4b07      	ldr	r3, [pc, #28]	@ (800dcdc <Check_Flag+0x124>)
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	701a      	strb	r2, [r3, #0]
		break;
 800dcc4:	e002      	b.n	800dccc <Check_Flag+0x114>
		break;
 800dcc6:	bf00      	nop
 800dcc8:	e000      	b.n	800dccc <Check_Flag+0x114>
		break;
 800dcca:	bf00      	nop
	}

}
 800dccc:	bf00      	nop
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr
 800dcd8:	24000d20 	.word	0x24000d20
 800dcdc:	24000d21 	.word	0x24000d21
 800dce0:	24000d1e 	.word	0x24000d1e
 800dce4:	24000d1f 	.word	0x24000d1f

0800dce8 <Check_Status>:
	首先，在步进电机上电以后，需要进行调零，找到一个零位用来确定后面一切操作的参考点，因此5号步进电机设置为上电回零
	但是在比赛过程中，要求车身及其垂直投影部分在未发车前全部处于发车区域，这就要求爪子在发车前是在车体内侧的，同时爪子不能处于太高处，否则违规
	因此在Check_Status()函数用于在回零操作已完成后进行调整，以满足发车条件，
*/
uint8_t Check_Status(void)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	af00      	add	r7, sp, #0
//  首先控制步进电机,回到零点
	Drop_Location_jiang(200, 120, 0);
 800dcec:	2200      	movs	r2, #0
 800dcee:	2178      	movs	r1, #120	@ 0x78
 800dcf0:	20c8      	movs	r0, #200	@ 0xc8
 800dcf2:	f7fe fca1 	bl	800c638 <Drop_Location_jiang>
	Move_Arm(1, 50, 300);
 800dcf6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800dcfa:	2132      	movs	r1, #50	@ 0x32
 800dcfc:	2001      	movs	r0, #1
 800dcfe:	f7fd fc75 	bl	800b5ec <Move_Arm>
//  6号舵机900
	Move_Arm(6, 900, 300);
 800dd02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800dd06:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800dd0a:	2006      	movs	r0, #6
 800dd0c:	f7fd fc6e 	bl	800b5ec <Move_Arm>
//  旋转物料结构的支撑舵机
	FT_Servo_Zero(0);
 800dd10:	2000      	movs	r0, #0
 800dd12:	f000 f82f 	bl	800dd74 <FT_Servo_Zero>
//  旋转爪子结构的支撑舵机
	FT_Servo_Zero(1);
 800dd16:	2001      	movs	r0, #1
 800dd18:	f000 f82c 	bl	800dd74 <FT_Servo_Zero>
//  步进电机下降,将位置调整为最最低点
	Drop_Location_jiang(200, 120, 9000);
 800dd1c:	f242 3228 	movw	r2, #9000	@ 0x2328
 800dd20:	2178      	movs	r1, #120	@ 0x78
 800dd22:	20c8      	movs	r0, #200	@ 0xc8
 800dd24:	f7fe fc88 	bl	800c638 <Drop_Location_jiang>
	return 1;
 800dd28:	2301      	movs	r3, #1
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <Roll_Status>:

uint8_t Roll_Status(void)
{
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	af00      	add	r7, sp, #0
//  首先控制步进电机,回到零点
	Drop_Location_jiang(200, 120, 0);
 800dd32:	2200      	movs	r2, #0
 800dd34:	2178      	movs	r1, #120	@ 0x78
 800dd36:	20c8      	movs	r0, #200	@ 0xc8
 800dd38:	f7fe fc7e 	bl	800c638 <Drop_Location_jiang>
	Move_Arm(1, 50, 300);
 800dd3c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800dd40:	2132      	movs	r1, #50	@ 0x32
 800dd42:	2001      	movs	r0, #1
 800dd44:	f7fd fc52 	bl	800b5ec <Move_Arm>
//  6号舵机900
	Move_Arm(6, 900, 300);
 800dd48:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800dd4c:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800dd50:	2006      	movs	r0, #6
 800dd52:	f7fd fc4b 	bl	800b5ec <Move_Arm>
//  旋转物料结构的支撑舵机
	FT_Servo_Zero(0);
 800dd56:	2000      	movs	r0, #0
 800dd58:	f000 f80c 	bl	800dd74 <FT_Servo_Zero>
//  旋转爪子结构的支撑舵机
	FT_Servo_Zero(1);
 800dd5c:	2001      	movs	r0, #1
 800dd5e:	f000 f809 	bl	800dd74 <FT_Servo_Zero>
//  步进电机下降,将位置调整为最最低点
	Drop_Location_jiang(200, 120, 7000);
 800dd62:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800dd66:	2178      	movs	r1, #120	@ 0x78
 800dd68:	20c8      	movs	r0, #200	@ 0xc8
 800dd6a:	f7fe fc65 	bl	800c638 <Drop_Location_jiang>
//	Choke_Flag = false;
	return 1;
 800dd6e:	2301      	movs	r3, #1
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <FT_Servo_Zero>:
	Move_Arm(1, 500, 300); 
}

// 将目标舵机回零
uint8_t FT_Servo_Zero(uint8_t Number)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	71fb      	strb	r3, [r7, #7]
	if(Number == 0)
 800dd7e:	79fb      	ldrb	r3, [r7, #7]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d106      	bne.n	800dd92 <FT_Servo_Zero+0x1e>
		WritePosEx(0, 0, 0, 0);
 800dd84:	2300      	movs	r3, #0
 800dd86:	2200      	movs	r2, #0
 800dd88:	2100      	movs	r1, #0
 800dd8a:	2000      	movs	r0, #0
 800dd8c:	f7ff fd58 	bl	800d840 <WritePosEx>
 800dd90:	e009      	b.n	800dda6 <FT_Servo_Zero+0x32>
	else if (Number == 1)
 800dd92:	79fb      	ldrb	r3, [r7, #7]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d106      	bne.n	800dda6 <FT_Servo_Zero+0x32>
		WritePosEx(1, 1020, 0, 0);
 800dd98:	2300      	movs	r3, #0
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	f44f 717f 	mov.w	r1, #1020	@ 0x3fc
 800dda0:	2001      	movs	r0, #1
 800dda2:	f7ff fd4d 	bl	800d840 <WritePosEx>
	return 1;
 800dda6:	2301      	movs	r3, #1
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3708      	adds	r7, #8
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <FT_Servo_Orth>:

// 将爪子处飞特舵机调整为向外，正交于车身
uint8_t FT_Servo_Orth(void)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	af00      	add	r7, sp, #0
	WritePosEx(1, 3087, 0, 0);
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f640 410f 	movw	r1, #3087	@ 0xc0f
 800ddbc:	2001      	movs	r0, #1
 800ddbe:	f7ff fd3f 	bl	800d840 <WritePosEx>
	return 1;
 800ddc2:	2301      	movs	r3, #1
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <FT_Servo_Put>:

// 物料摆放
uint8_t FT_Servo_Put(uint8_t Servo_ID, uint8_t Pub_Number)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	460a      	mov	r2, r1
 800ddd2:	71fb      	strb	r3, [r7, #7]
 800ddd4:	4613      	mov	r3, r2
 800ddd6:	71bb      	strb	r3, [r7, #6]
	if(Servo_ID == 0)
 800ddd8:	79fb      	ldrb	r3, [r7, #7]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d121      	bne.n	800de22 <FT_Servo_Put+0x5a>
	{
		switch (Pub_Number)
 800ddde:	79bb      	ldrb	r3, [r7, #6]
 800dde0:	2b03      	cmp	r3, #3
 800dde2:	d016      	beq.n	800de12 <FT_Servo_Put+0x4a>
 800dde4:	2b03      	cmp	r3, #3
 800dde6:	dc26      	bgt.n	800de36 <FT_Servo_Put+0x6e>
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d002      	beq.n	800ddf2 <FT_Servo_Put+0x2a>
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	d008      	beq.n	800de02 <FT_Servo_Put+0x3a>
 800ddf0:	e021      	b.n	800de36 <FT_Servo_Put+0x6e>
		{
			case 1:WritePosEx(0, 1180, 0, 0);break;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	f240 419c 	movw	r1, #1180	@ 0x49c
 800ddfa:	2000      	movs	r0, #0
 800ddfc:	f7ff fd20 	bl	800d840 <WritePosEx>
 800de00:	e019      	b.n	800de36 <FT_Servo_Put+0x6e>
			case 2:WritePosEx(0, 2245, 0, 0);break;
 800de02:	2300      	movs	r3, #0
 800de04:	2200      	movs	r2, #0
 800de06:	f640 01c5 	movw	r1, #2245	@ 0x8c5
 800de0a:	2000      	movs	r0, #0
 800de0c:	f7ff fd18 	bl	800d840 <WritePosEx>
 800de10:	e011      	b.n	800de36 <FT_Servo_Put+0x6e>
			case 3:WritePosEx(0, 3292, 0, 0);break;
 800de12:	2300      	movs	r3, #0
 800de14:	2200      	movs	r2, #0
 800de16:	f640 41dc 	movw	r1, #3292	@ 0xcdc
 800de1a:	2000      	movs	r0, #0
 800de1c:	f7ff fd10 	bl	800d840 <WritePosEx>
 800de20:	e009      	b.n	800de36 <FT_Servo_Put+0x6e>
		}
	}
	else if (Servo_ID == 1)
 800de22:	79fb      	ldrb	r3, [r7, #7]
 800de24:	2b01      	cmp	r3, #1
 800de26:	d106      	bne.n	800de36 <FT_Servo_Put+0x6e>
	{
		WritePosEx(1, 1716, 0, 0);
 800de28:	2300      	movs	r3, #0
 800de2a:	2200      	movs	r2, #0
 800de2c:	f240 61b4 	movw	r1, #1716	@ 0x6b4
 800de30:	2001      	movs	r0, #1
 800de32:	f7ff fd05 	bl	800d840 <WritePosEx>
	}
	while(ReadMove(Servo_ID))
 800de36:	bf00      	nop
 800de38:	79fb      	ldrb	r3, [r7, #7]
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7ff fd4a 	bl	800d8d4 <ReadMove>
 800de40:	4603      	mov	r3, r0
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1f8      	bne.n	800de38 <FT_Servo_Put+0x70>
	{
		;
	}
	return 1;
 800de46:	2301      	movs	r3, #1
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <malloc>:
 800de50:	4b02      	ldr	r3, [pc, #8]	@ (800de5c <malloc+0xc>)
 800de52:	4601      	mov	r1, r0
 800de54:	6818      	ldr	r0, [r3, #0]
 800de56:	f000 b825 	b.w	800dea4 <_malloc_r>
 800de5a:	bf00      	nop
 800de5c:	240001e4 	.word	0x240001e4

0800de60 <sbrk_aligned>:
 800de60:	b570      	push	{r4, r5, r6, lr}
 800de62:	4e0f      	ldr	r6, [pc, #60]	@ (800dea0 <sbrk_aligned+0x40>)
 800de64:	460c      	mov	r4, r1
 800de66:	6831      	ldr	r1, [r6, #0]
 800de68:	4605      	mov	r5, r0
 800de6a:	b911      	cbnz	r1, 800de72 <sbrk_aligned+0x12>
 800de6c:	f001 fe50 	bl	800fb10 <_sbrk_r>
 800de70:	6030      	str	r0, [r6, #0]
 800de72:	4621      	mov	r1, r4
 800de74:	4628      	mov	r0, r5
 800de76:	f001 fe4b 	bl	800fb10 <_sbrk_r>
 800de7a:	1c43      	adds	r3, r0, #1
 800de7c:	d103      	bne.n	800de86 <sbrk_aligned+0x26>
 800de7e:	f04f 34ff 	mov.w	r4, #4294967295
 800de82:	4620      	mov	r0, r4
 800de84:	bd70      	pop	{r4, r5, r6, pc}
 800de86:	1cc4      	adds	r4, r0, #3
 800de88:	f024 0403 	bic.w	r4, r4, #3
 800de8c:	42a0      	cmp	r0, r4
 800de8e:	d0f8      	beq.n	800de82 <sbrk_aligned+0x22>
 800de90:	1a21      	subs	r1, r4, r0
 800de92:	4628      	mov	r0, r5
 800de94:	f001 fe3c 	bl	800fb10 <_sbrk_r>
 800de98:	3001      	adds	r0, #1
 800de9a:	d1f2      	bne.n	800de82 <sbrk_aligned+0x22>
 800de9c:	e7ef      	b.n	800de7e <sbrk_aligned+0x1e>
 800de9e:	bf00      	nop
 800dea0:	24000d24 	.word	0x24000d24

0800dea4 <_malloc_r>:
 800dea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dea8:	1ccd      	adds	r5, r1, #3
 800deaa:	f025 0503 	bic.w	r5, r5, #3
 800deae:	3508      	adds	r5, #8
 800deb0:	2d0c      	cmp	r5, #12
 800deb2:	bf38      	it	cc
 800deb4:	250c      	movcc	r5, #12
 800deb6:	2d00      	cmp	r5, #0
 800deb8:	4606      	mov	r6, r0
 800deba:	db01      	blt.n	800dec0 <_malloc_r+0x1c>
 800debc:	42a9      	cmp	r1, r5
 800debe:	d904      	bls.n	800deca <_malloc_r+0x26>
 800dec0:	230c      	movs	r3, #12
 800dec2:	6033      	str	r3, [r6, #0]
 800dec4:	2000      	movs	r0, #0
 800dec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dfa0 <_malloc_r+0xfc>
 800dece:	f000 f869 	bl	800dfa4 <__malloc_lock>
 800ded2:	f8d8 3000 	ldr.w	r3, [r8]
 800ded6:	461c      	mov	r4, r3
 800ded8:	bb44      	cbnz	r4, 800df2c <_malloc_r+0x88>
 800deda:	4629      	mov	r1, r5
 800dedc:	4630      	mov	r0, r6
 800dede:	f7ff ffbf 	bl	800de60 <sbrk_aligned>
 800dee2:	1c43      	adds	r3, r0, #1
 800dee4:	4604      	mov	r4, r0
 800dee6:	d158      	bne.n	800df9a <_malloc_r+0xf6>
 800dee8:	f8d8 4000 	ldr.w	r4, [r8]
 800deec:	4627      	mov	r7, r4
 800deee:	2f00      	cmp	r7, #0
 800def0:	d143      	bne.n	800df7a <_malloc_r+0xd6>
 800def2:	2c00      	cmp	r4, #0
 800def4:	d04b      	beq.n	800df8e <_malloc_r+0xea>
 800def6:	6823      	ldr	r3, [r4, #0]
 800def8:	4639      	mov	r1, r7
 800defa:	4630      	mov	r0, r6
 800defc:	eb04 0903 	add.w	r9, r4, r3
 800df00:	f001 fe06 	bl	800fb10 <_sbrk_r>
 800df04:	4581      	cmp	r9, r0
 800df06:	d142      	bne.n	800df8e <_malloc_r+0xea>
 800df08:	6821      	ldr	r1, [r4, #0]
 800df0a:	1a6d      	subs	r5, r5, r1
 800df0c:	4629      	mov	r1, r5
 800df0e:	4630      	mov	r0, r6
 800df10:	f7ff ffa6 	bl	800de60 <sbrk_aligned>
 800df14:	3001      	adds	r0, #1
 800df16:	d03a      	beq.n	800df8e <_malloc_r+0xea>
 800df18:	6823      	ldr	r3, [r4, #0]
 800df1a:	442b      	add	r3, r5
 800df1c:	6023      	str	r3, [r4, #0]
 800df1e:	f8d8 3000 	ldr.w	r3, [r8]
 800df22:	685a      	ldr	r2, [r3, #4]
 800df24:	bb62      	cbnz	r2, 800df80 <_malloc_r+0xdc>
 800df26:	f8c8 7000 	str.w	r7, [r8]
 800df2a:	e00f      	b.n	800df4c <_malloc_r+0xa8>
 800df2c:	6822      	ldr	r2, [r4, #0]
 800df2e:	1b52      	subs	r2, r2, r5
 800df30:	d420      	bmi.n	800df74 <_malloc_r+0xd0>
 800df32:	2a0b      	cmp	r2, #11
 800df34:	d917      	bls.n	800df66 <_malloc_r+0xc2>
 800df36:	1961      	adds	r1, r4, r5
 800df38:	42a3      	cmp	r3, r4
 800df3a:	6025      	str	r5, [r4, #0]
 800df3c:	bf18      	it	ne
 800df3e:	6059      	strne	r1, [r3, #4]
 800df40:	6863      	ldr	r3, [r4, #4]
 800df42:	bf08      	it	eq
 800df44:	f8c8 1000 	streq.w	r1, [r8]
 800df48:	5162      	str	r2, [r4, r5]
 800df4a:	604b      	str	r3, [r1, #4]
 800df4c:	4630      	mov	r0, r6
 800df4e:	f000 f82f 	bl	800dfb0 <__malloc_unlock>
 800df52:	f104 000b 	add.w	r0, r4, #11
 800df56:	1d23      	adds	r3, r4, #4
 800df58:	f020 0007 	bic.w	r0, r0, #7
 800df5c:	1ac2      	subs	r2, r0, r3
 800df5e:	bf1c      	itt	ne
 800df60:	1a1b      	subne	r3, r3, r0
 800df62:	50a3      	strne	r3, [r4, r2]
 800df64:	e7af      	b.n	800dec6 <_malloc_r+0x22>
 800df66:	6862      	ldr	r2, [r4, #4]
 800df68:	42a3      	cmp	r3, r4
 800df6a:	bf0c      	ite	eq
 800df6c:	f8c8 2000 	streq.w	r2, [r8]
 800df70:	605a      	strne	r2, [r3, #4]
 800df72:	e7eb      	b.n	800df4c <_malloc_r+0xa8>
 800df74:	4623      	mov	r3, r4
 800df76:	6864      	ldr	r4, [r4, #4]
 800df78:	e7ae      	b.n	800ded8 <_malloc_r+0x34>
 800df7a:	463c      	mov	r4, r7
 800df7c:	687f      	ldr	r7, [r7, #4]
 800df7e:	e7b6      	b.n	800deee <_malloc_r+0x4a>
 800df80:	461a      	mov	r2, r3
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	42a3      	cmp	r3, r4
 800df86:	d1fb      	bne.n	800df80 <_malloc_r+0xdc>
 800df88:	2300      	movs	r3, #0
 800df8a:	6053      	str	r3, [r2, #4]
 800df8c:	e7de      	b.n	800df4c <_malloc_r+0xa8>
 800df8e:	230c      	movs	r3, #12
 800df90:	6033      	str	r3, [r6, #0]
 800df92:	4630      	mov	r0, r6
 800df94:	f000 f80c 	bl	800dfb0 <__malloc_unlock>
 800df98:	e794      	b.n	800dec4 <_malloc_r+0x20>
 800df9a:	6005      	str	r5, [r0, #0]
 800df9c:	e7d6      	b.n	800df4c <_malloc_r+0xa8>
 800df9e:	bf00      	nop
 800dfa0:	24000d28 	.word	0x24000d28

0800dfa4 <__malloc_lock>:
 800dfa4:	4801      	ldr	r0, [pc, #4]	@ (800dfac <__malloc_lock+0x8>)
 800dfa6:	f001 be00 	b.w	800fbaa <__retarget_lock_acquire_recursive>
 800dfaa:	bf00      	nop
 800dfac:	24000e6c 	.word	0x24000e6c

0800dfb0 <__malloc_unlock>:
 800dfb0:	4801      	ldr	r0, [pc, #4]	@ (800dfb8 <__malloc_unlock+0x8>)
 800dfb2:	f001 bdfb 	b.w	800fbac <__retarget_lock_release_recursive>
 800dfb6:	bf00      	nop
 800dfb8:	24000e6c 	.word	0x24000e6c

0800dfbc <sulp>:
 800dfbc:	b570      	push	{r4, r5, r6, lr}
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	460d      	mov	r5, r1
 800dfc2:	4616      	mov	r6, r2
 800dfc4:	ec45 4b10 	vmov	d0, r4, r5
 800dfc8:	f003 fafa 	bl	80115c0 <__ulp>
 800dfcc:	b17e      	cbz	r6, 800dfee <sulp+0x32>
 800dfce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dfd2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	dd09      	ble.n	800dfee <sulp+0x32>
 800dfda:	051b      	lsls	r3, r3, #20
 800dfdc:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800dfe0:	2000      	movs	r0, #0
 800dfe2:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800dfe6:	ec41 0b17 	vmov	d7, r0, r1
 800dfea:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dfee:	bd70      	pop	{r4, r5, r6, pc}

0800dff0 <_strtod_l>:
 800dff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff4:	ed2d 8b0a 	vpush	{d8-d12}
 800dff8:	b097      	sub	sp, #92	@ 0x5c
 800dffa:	4688      	mov	r8, r1
 800dffc:	920e      	str	r2, [sp, #56]	@ 0x38
 800dffe:	2200      	movs	r2, #0
 800e000:	9212      	str	r2, [sp, #72]	@ 0x48
 800e002:	9005      	str	r0, [sp, #20]
 800e004:	f04f 0a00 	mov.w	sl, #0
 800e008:	f04f 0b00 	mov.w	fp, #0
 800e00c:	460a      	mov	r2, r1
 800e00e:	9211      	str	r2, [sp, #68]	@ 0x44
 800e010:	7811      	ldrb	r1, [r2, #0]
 800e012:	292b      	cmp	r1, #43	@ 0x2b
 800e014:	d04c      	beq.n	800e0b0 <_strtod_l+0xc0>
 800e016:	d839      	bhi.n	800e08c <_strtod_l+0x9c>
 800e018:	290d      	cmp	r1, #13
 800e01a:	d833      	bhi.n	800e084 <_strtod_l+0x94>
 800e01c:	2908      	cmp	r1, #8
 800e01e:	d833      	bhi.n	800e088 <_strtod_l+0x98>
 800e020:	2900      	cmp	r1, #0
 800e022:	d03c      	beq.n	800e09e <_strtod_l+0xae>
 800e024:	2200      	movs	r2, #0
 800e026:	9208      	str	r2, [sp, #32]
 800e028:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e02a:	782a      	ldrb	r2, [r5, #0]
 800e02c:	2a30      	cmp	r2, #48	@ 0x30
 800e02e:	f040 80b5 	bne.w	800e19c <_strtod_l+0x1ac>
 800e032:	786a      	ldrb	r2, [r5, #1]
 800e034:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e038:	2a58      	cmp	r2, #88	@ 0x58
 800e03a:	d170      	bne.n	800e11e <_strtod_l+0x12e>
 800e03c:	9302      	str	r3, [sp, #8]
 800e03e:	9b08      	ldr	r3, [sp, #32]
 800e040:	9301      	str	r3, [sp, #4]
 800e042:	ab12      	add	r3, sp, #72	@ 0x48
 800e044:	9300      	str	r3, [sp, #0]
 800e046:	4a8b      	ldr	r2, [pc, #556]	@ (800e274 <_strtod_l+0x284>)
 800e048:	9805      	ldr	r0, [sp, #20]
 800e04a:	ab13      	add	r3, sp, #76	@ 0x4c
 800e04c:	a911      	add	r1, sp, #68	@ 0x44
 800e04e:	f002 fc5f 	bl	8010910 <__gethex>
 800e052:	f010 060f 	ands.w	r6, r0, #15
 800e056:	4604      	mov	r4, r0
 800e058:	d005      	beq.n	800e066 <_strtod_l+0x76>
 800e05a:	2e06      	cmp	r6, #6
 800e05c:	d12a      	bne.n	800e0b4 <_strtod_l+0xc4>
 800e05e:	3501      	adds	r5, #1
 800e060:	2300      	movs	r3, #0
 800e062:	9511      	str	r5, [sp, #68]	@ 0x44
 800e064:	9308      	str	r3, [sp, #32]
 800e066:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f040 852f 	bne.w	800eacc <_strtod_l+0xadc>
 800e06e:	9b08      	ldr	r3, [sp, #32]
 800e070:	ec4b ab10 	vmov	d0, sl, fp
 800e074:	b1cb      	cbz	r3, 800e0aa <_strtod_l+0xba>
 800e076:	eeb1 0b40 	vneg.f64	d0, d0
 800e07a:	b017      	add	sp, #92	@ 0x5c
 800e07c:	ecbd 8b0a 	vpop	{d8-d12}
 800e080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e084:	2920      	cmp	r1, #32
 800e086:	d1cd      	bne.n	800e024 <_strtod_l+0x34>
 800e088:	3201      	adds	r2, #1
 800e08a:	e7c0      	b.n	800e00e <_strtod_l+0x1e>
 800e08c:	292d      	cmp	r1, #45	@ 0x2d
 800e08e:	d1c9      	bne.n	800e024 <_strtod_l+0x34>
 800e090:	2101      	movs	r1, #1
 800e092:	9108      	str	r1, [sp, #32]
 800e094:	1c51      	adds	r1, r2, #1
 800e096:	9111      	str	r1, [sp, #68]	@ 0x44
 800e098:	7852      	ldrb	r2, [r2, #1]
 800e09a:	2a00      	cmp	r2, #0
 800e09c:	d1c4      	bne.n	800e028 <_strtod_l+0x38>
 800e09e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0a0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f040 850f 	bne.w	800eac8 <_strtod_l+0xad8>
 800e0aa:	ec4b ab10 	vmov	d0, sl, fp
 800e0ae:	e7e4      	b.n	800e07a <_strtod_l+0x8a>
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	e7ee      	b.n	800e092 <_strtod_l+0xa2>
 800e0b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e0b6:	b13a      	cbz	r2, 800e0c8 <_strtod_l+0xd8>
 800e0b8:	2135      	movs	r1, #53	@ 0x35
 800e0ba:	a814      	add	r0, sp, #80	@ 0x50
 800e0bc:	f003 fb77 	bl	80117ae <__copybits>
 800e0c0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e0c2:	9805      	ldr	r0, [sp, #20]
 800e0c4:	f002 ff48 	bl	8010f58 <_Bfree>
 800e0c8:	1e73      	subs	r3, r6, #1
 800e0ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e0cc:	2b04      	cmp	r3, #4
 800e0ce:	d806      	bhi.n	800e0de <_strtod_l+0xee>
 800e0d0:	e8df f003 	tbb	[pc, r3]
 800e0d4:	201d0314 	.word	0x201d0314
 800e0d8:	14          	.byte	0x14
 800e0d9:	00          	.byte	0x00
 800e0da:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800e0de:	05e3      	lsls	r3, r4, #23
 800e0e0:	bf48      	it	mi
 800e0e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e0e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e0ea:	0d1b      	lsrs	r3, r3, #20
 800e0ec:	051b      	lsls	r3, r3, #20
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1b9      	bne.n	800e066 <_strtod_l+0x76>
 800e0f2:	f001 fd2f 	bl	800fb54 <__errno>
 800e0f6:	2322      	movs	r3, #34	@ 0x22
 800e0f8:	6003      	str	r3, [r0, #0]
 800e0fa:	e7b4      	b.n	800e066 <_strtod_l+0x76>
 800e0fc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800e100:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e104:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e108:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e10c:	e7e7      	b.n	800e0de <_strtod_l+0xee>
 800e10e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800e27c <_strtod_l+0x28c>
 800e112:	e7e4      	b.n	800e0de <_strtod_l+0xee>
 800e114:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e118:	f04f 3aff 	mov.w	sl, #4294967295
 800e11c:	e7df      	b.n	800e0de <_strtod_l+0xee>
 800e11e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e120:	1c5a      	adds	r2, r3, #1
 800e122:	9211      	str	r2, [sp, #68]	@ 0x44
 800e124:	785b      	ldrb	r3, [r3, #1]
 800e126:	2b30      	cmp	r3, #48	@ 0x30
 800e128:	d0f9      	beq.n	800e11e <_strtod_l+0x12e>
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d09b      	beq.n	800e066 <_strtod_l+0x76>
 800e12e:	2301      	movs	r3, #1
 800e130:	2600      	movs	r6, #0
 800e132:	9307      	str	r3, [sp, #28]
 800e134:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e136:	930a      	str	r3, [sp, #40]	@ 0x28
 800e138:	46b1      	mov	r9, r6
 800e13a:	4635      	mov	r5, r6
 800e13c:	220a      	movs	r2, #10
 800e13e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e140:	7804      	ldrb	r4, [r0, #0]
 800e142:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e146:	b2d9      	uxtb	r1, r3
 800e148:	2909      	cmp	r1, #9
 800e14a:	d929      	bls.n	800e1a0 <_strtod_l+0x1b0>
 800e14c:	494a      	ldr	r1, [pc, #296]	@ (800e278 <_strtod_l+0x288>)
 800e14e:	2201      	movs	r2, #1
 800e150:	f001 fc94 	bl	800fa7c <strncmp>
 800e154:	b378      	cbz	r0, 800e1b6 <_strtod_l+0x1c6>
 800e156:	2000      	movs	r0, #0
 800e158:	4622      	mov	r2, r4
 800e15a:	462b      	mov	r3, r5
 800e15c:	4607      	mov	r7, r0
 800e15e:	9006      	str	r0, [sp, #24]
 800e160:	2a65      	cmp	r2, #101	@ 0x65
 800e162:	d001      	beq.n	800e168 <_strtod_l+0x178>
 800e164:	2a45      	cmp	r2, #69	@ 0x45
 800e166:	d117      	bne.n	800e198 <_strtod_l+0x1a8>
 800e168:	b91b      	cbnz	r3, 800e172 <_strtod_l+0x182>
 800e16a:	9b07      	ldr	r3, [sp, #28]
 800e16c:	4303      	orrs	r3, r0
 800e16e:	d096      	beq.n	800e09e <_strtod_l+0xae>
 800e170:	2300      	movs	r3, #0
 800e172:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800e176:	f108 0201 	add.w	r2, r8, #1
 800e17a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e17c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e180:	2a2b      	cmp	r2, #43	@ 0x2b
 800e182:	d06b      	beq.n	800e25c <_strtod_l+0x26c>
 800e184:	2a2d      	cmp	r2, #45	@ 0x2d
 800e186:	d071      	beq.n	800e26c <_strtod_l+0x27c>
 800e188:	f04f 0e00 	mov.w	lr, #0
 800e18c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e190:	2c09      	cmp	r4, #9
 800e192:	d979      	bls.n	800e288 <_strtod_l+0x298>
 800e194:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e198:	2400      	movs	r4, #0
 800e19a:	e094      	b.n	800e2c6 <_strtod_l+0x2d6>
 800e19c:	2300      	movs	r3, #0
 800e19e:	e7c7      	b.n	800e130 <_strtod_l+0x140>
 800e1a0:	2d08      	cmp	r5, #8
 800e1a2:	f100 0001 	add.w	r0, r0, #1
 800e1a6:	bfd4      	ite	le
 800e1a8:	fb02 3909 	mlale	r9, r2, r9, r3
 800e1ac:	fb02 3606 	mlagt	r6, r2, r6, r3
 800e1b0:	3501      	adds	r5, #1
 800e1b2:	9011      	str	r0, [sp, #68]	@ 0x44
 800e1b4:	e7c3      	b.n	800e13e <_strtod_l+0x14e>
 800e1b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e1b8:	1c5a      	adds	r2, r3, #1
 800e1ba:	9211      	str	r2, [sp, #68]	@ 0x44
 800e1bc:	785a      	ldrb	r2, [r3, #1]
 800e1be:	b375      	cbz	r5, 800e21e <_strtod_l+0x22e>
 800e1c0:	4607      	mov	r7, r0
 800e1c2:	462b      	mov	r3, r5
 800e1c4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e1c8:	2909      	cmp	r1, #9
 800e1ca:	d913      	bls.n	800e1f4 <_strtod_l+0x204>
 800e1cc:	2101      	movs	r1, #1
 800e1ce:	9106      	str	r1, [sp, #24]
 800e1d0:	e7c6      	b.n	800e160 <_strtod_l+0x170>
 800e1d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e1d4:	1c5a      	adds	r2, r3, #1
 800e1d6:	9211      	str	r2, [sp, #68]	@ 0x44
 800e1d8:	785a      	ldrb	r2, [r3, #1]
 800e1da:	3001      	adds	r0, #1
 800e1dc:	2a30      	cmp	r2, #48	@ 0x30
 800e1de:	d0f8      	beq.n	800e1d2 <_strtod_l+0x1e2>
 800e1e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e1e4:	2b08      	cmp	r3, #8
 800e1e6:	f200 8476 	bhi.w	800ead6 <_strtod_l+0xae6>
 800e1ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e1ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1ee:	4607      	mov	r7, r0
 800e1f0:	2000      	movs	r0, #0
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	3a30      	subs	r2, #48	@ 0x30
 800e1f6:	f100 0101 	add.w	r1, r0, #1
 800e1fa:	d023      	beq.n	800e244 <_strtod_l+0x254>
 800e1fc:	440f      	add	r7, r1
 800e1fe:	eb00 0c03 	add.w	ip, r0, r3
 800e202:	4619      	mov	r1, r3
 800e204:	240a      	movs	r4, #10
 800e206:	4561      	cmp	r1, ip
 800e208:	d10b      	bne.n	800e222 <_strtod_l+0x232>
 800e20a:	1c5c      	adds	r4, r3, #1
 800e20c:	4403      	add	r3, r0
 800e20e:	2b08      	cmp	r3, #8
 800e210:	4404      	add	r4, r0
 800e212:	dc11      	bgt.n	800e238 <_strtod_l+0x248>
 800e214:	230a      	movs	r3, #10
 800e216:	fb03 2909 	mla	r9, r3, r9, r2
 800e21a:	2100      	movs	r1, #0
 800e21c:	e013      	b.n	800e246 <_strtod_l+0x256>
 800e21e:	4628      	mov	r0, r5
 800e220:	e7dc      	b.n	800e1dc <_strtod_l+0x1ec>
 800e222:	2908      	cmp	r1, #8
 800e224:	f101 0101 	add.w	r1, r1, #1
 800e228:	dc02      	bgt.n	800e230 <_strtod_l+0x240>
 800e22a:	fb04 f909 	mul.w	r9, r4, r9
 800e22e:	e7ea      	b.n	800e206 <_strtod_l+0x216>
 800e230:	2910      	cmp	r1, #16
 800e232:	bfd8      	it	le
 800e234:	4366      	mulle	r6, r4
 800e236:	e7e6      	b.n	800e206 <_strtod_l+0x216>
 800e238:	2b0f      	cmp	r3, #15
 800e23a:	dcee      	bgt.n	800e21a <_strtod_l+0x22a>
 800e23c:	230a      	movs	r3, #10
 800e23e:	fb03 2606 	mla	r6, r3, r6, r2
 800e242:	e7ea      	b.n	800e21a <_strtod_l+0x22a>
 800e244:	461c      	mov	r4, r3
 800e246:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e248:	1c5a      	adds	r2, r3, #1
 800e24a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e24c:	785a      	ldrb	r2, [r3, #1]
 800e24e:	4608      	mov	r0, r1
 800e250:	4623      	mov	r3, r4
 800e252:	e7b7      	b.n	800e1c4 <_strtod_l+0x1d4>
 800e254:	2301      	movs	r3, #1
 800e256:	2700      	movs	r7, #0
 800e258:	9306      	str	r3, [sp, #24]
 800e25a:	e786      	b.n	800e16a <_strtod_l+0x17a>
 800e25c:	f04f 0e00 	mov.w	lr, #0
 800e260:	f108 0202 	add.w	r2, r8, #2
 800e264:	9211      	str	r2, [sp, #68]	@ 0x44
 800e266:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e26a:	e78f      	b.n	800e18c <_strtod_l+0x19c>
 800e26c:	f04f 0e01 	mov.w	lr, #1
 800e270:	e7f6      	b.n	800e260 <_strtod_l+0x270>
 800e272:	bf00      	nop
 800e274:	08012d24 	.word	0x08012d24
 800e278:	08012d0c 	.word	0x08012d0c
 800e27c:	7ff00000 	.word	0x7ff00000
 800e280:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e282:	1c54      	adds	r4, r2, #1
 800e284:	9411      	str	r4, [sp, #68]	@ 0x44
 800e286:	7852      	ldrb	r2, [r2, #1]
 800e288:	2a30      	cmp	r2, #48	@ 0x30
 800e28a:	d0f9      	beq.n	800e280 <_strtod_l+0x290>
 800e28c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e290:	2c08      	cmp	r4, #8
 800e292:	d881      	bhi.n	800e198 <_strtod_l+0x1a8>
 800e294:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e298:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e29a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e29c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e29e:	1c51      	adds	r1, r2, #1
 800e2a0:	9111      	str	r1, [sp, #68]	@ 0x44
 800e2a2:	7852      	ldrb	r2, [r2, #1]
 800e2a4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e2a8:	2c09      	cmp	r4, #9
 800e2aa:	d938      	bls.n	800e31e <_strtod_l+0x32e>
 800e2ac:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e2ae:	1b0c      	subs	r4, r1, r4
 800e2b0:	2c08      	cmp	r4, #8
 800e2b2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800e2b6:	dc02      	bgt.n	800e2be <_strtod_l+0x2ce>
 800e2b8:	4564      	cmp	r4, ip
 800e2ba:	bfa8      	it	ge
 800e2bc:	4664      	movge	r4, ip
 800e2be:	f1be 0f00 	cmp.w	lr, #0
 800e2c2:	d000      	beq.n	800e2c6 <_strtod_l+0x2d6>
 800e2c4:	4264      	negs	r4, r4
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d14e      	bne.n	800e368 <_strtod_l+0x378>
 800e2ca:	9b07      	ldr	r3, [sp, #28]
 800e2cc:	4318      	orrs	r0, r3
 800e2ce:	f47f aeca 	bne.w	800e066 <_strtod_l+0x76>
 800e2d2:	9b06      	ldr	r3, [sp, #24]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f47f aee2 	bne.w	800e09e <_strtod_l+0xae>
 800e2da:	2a69      	cmp	r2, #105	@ 0x69
 800e2dc:	d027      	beq.n	800e32e <_strtod_l+0x33e>
 800e2de:	dc24      	bgt.n	800e32a <_strtod_l+0x33a>
 800e2e0:	2a49      	cmp	r2, #73	@ 0x49
 800e2e2:	d024      	beq.n	800e32e <_strtod_l+0x33e>
 800e2e4:	2a4e      	cmp	r2, #78	@ 0x4e
 800e2e6:	f47f aeda 	bne.w	800e09e <_strtod_l+0xae>
 800e2ea:	4997      	ldr	r1, [pc, #604]	@ (800e548 <_strtod_l+0x558>)
 800e2ec:	a811      	add	r0, sp, #68	@ 0x44
 800e2ee:	f002 fd31 	bl	8010d54 <__match>
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	f43f aed3 	beq.w	800e09e <_strtod_l+0xae>
 800e2f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	2b28      	cmp	r3, #40	@ 0x28
 800e2fe:	d12d      	bne.n	800e35c <_strtod_l+0x36c>
 800e300:	4992      	ldr	r1, [pc, #584]	@ (800e54c <_strtod_l+0x55c>)
 800e302:	aa14      	add	r2, sp, #80	@ 0x50
 800e304:	a811      	add	r0, sp, #68	@ 0x44
 800e306:	f002 fd39 	bl	8010d7c <__hexnan>
 800e30a:	2805      	cmp	r0, #5
 800e30c:	d126      	bne.n	800e35c <_strtod_l+0x36c>
 800e30e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e310:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e314:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e318:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e31c:	e6a3      	b.n	800e066 <_strtod_l+0x76>
 800e31e:	240a      	movs	r4, #10
 800e320:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e324:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e328:	e7b8      	b.n	800e29c <_strtod_l+0x2ac>
 800e32a:	2a6e      	cmp	r2, #110	@ 0x6e
 800e32c:	e7db      	b.n	800e2e6 <_strtod_l+0x2f6>
 800e32e:	4988      	ldr	r1, [pc, #544]	@ (800e550 <_strtod_l+0x560>)
 800e330:	a811      	add	r0, sp, #68	@ 0x44
 800e332:	f002 fd0f 	bl	8010d54 <__match>
 800e336:	2800      	cmp	r0, #0
 800e338:	f43f aeb1 	beq.w	800e09e <_strtod_l+0xae>
 800e33c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e33e:	4985      	ldr	r1, [pc, #532]	@ (800e554 <_strtod_l+0x564>)
 800e340:	3b01      	subs	r3, #1
 800e342:	a811      	add	r0, sp, #68	@ 0x44
 800e344:	9311      	str	r3, [sp, #68]	@ 0x44
 800e346:	f002 fd05 	bl	8010d54 <__match>
 800e34a:	b910      	cbnz	r0, 800e352 <_strtod_l+0x362>
 800e34c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e34e:	3301      	adds	r3, #1
 800e350:	9311      	str	r3, [sp, #68]	@ 0x44
 800e352:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800e568 <_strtod_l+0x578>
 800e356:	f04f 0a00 	mov.w	sl, #0
 800e35a:	e684      	b.n	800e066 <_strtod_l+0x76>
 800e35c:	487e      	ldr	r0, [pc, #504]	@ (800e558 <_strtod_l+0x568>)
 800e35e:	f001 fc37 	bl	800fbd0 <nan>
 800e362:	ec5b ab10 	vmov	sl, fp, d0
 800e366:	e67e      	b.n	800e066 <_strtod_l+0x76>
 800e368:	ee07 9a90 	vmov	s15, r9
 800e36c:	1be2      	subs	r2, r4, r7
 800e36e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e372:	2d00      	cmp	r5, #0
 800e374:	bf08      	it	eq
 800e376:	461d      	moveq	r5, r3
 800e378:	2b10      	cmp	r3, #16
 800e37a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e37c:	461a      	mov	r2, r3
 800e37e:	bfa8      	it	ge
 800e380:	2210      	movge	r2, #16
 800e382:	2b09      	cmp	r3, #9
 800e384:	ec5b ab17 	vmov	sl, fp, d7
 800e388:	dc15      	bgt.n	800e3b6 <_strtod_l+0x3c6>
 800e38a:	1be1      	subs	r1, r4, r7
 800e38c:	2900      	cmp	r1, #0
 800e38e:	f43f ae6a 	beq.w	800e066 <_strtod_l+0x76>
 800e392:	eba4 0107 	sub.w	r1, r4, r7
 800e396:	dd72      	ble.n	800e47e <_strtod_l+0x48e>
 800e398:	2916      	cmp	r1, #22
 800e39a:	dc59      	bgt.n	800e450 <_strtod_l+0x460>
 800e39c:	4b6f      	ldr	r3, [pc, #444]	@ (800e55c <_strtod_l+0x56c>)
 800e39e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3a4:	ed93 7b00 	vldr	d7, [r3]
 800e3a8:	ec4b ab16 	vmov	d6, sl, fp
 800e3ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e3b0:	ec5b ab17 	vmov	sl, fp, d7
 800e3b4:	e657      	b.n	800e066 <_strtod_l+0x76>
 800e3b6:	4969      	ldr	r1, [pc, #420]	@ (800e55c <_strtod_l+0x56c>)
 800e3b8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e3bc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e3c0:	ee06 6a90 	vmov	s13, r6
 800e3c4:	2b0f      	cmp	r3, #15
 800e3c6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e3ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e3ce:	ec5b ab16 	vmov	sl, fp, d6
 800e3d2:	ddda      	ble.n	800e38a <_strtod_l+0x39a>
 800e3d4:	1a9a      	subs	r2, r3, r2
 800e3d6:	1be1      	subs	r1, r4, r7
 800e3d8:	440a      	add	r2, r1
 800e3da:	2a00      	cmp	r2, #0
 800e3dc:	f340 8094 	ble.w	800e508 <_strtod_l+0x518>
 800e3e0:	f012 000f 	ands.w	r0, r2, #15
 800e3e4:	d00a      	beq.n	800e3fc <_strtod_l+0x40c>
 800e3e6:	495d      	ldr	r1, [pc, #372]	@ (800e55c <_strtod_l+0x56c>)
 800e3e8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e3ec:	ed91 7b00 	vldr	d7, [r1]
 800e3f0:	ec4b ab16 	vmov	d6, sl, fp
 800e3f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e3f8:	ec5b ab17 	vmov	sl, fp, d7
 800e3fc:	f032 020f 	bics.w	r2, r2, #15
 800e400:	d073      	beq.n	800e4ea <_strtod_l+0x4fa>
 800e402:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e406:	dd47      	ble.n	800e498 <_strtod_l+0x4a8>
 800e408:	2400      	movs	r4, #0
 800e40a:	4625      	mov	r5, r4
 800e40c:	9407      	str	r4, [sp, #28]
 800e40e:	4626      	mov	r6, r4
 800e410:	9a05      	ldr	r2, [sp, #20]
 800e412:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e568 <_strtod_l+0x578>
 800e416:	2322      	movs	r3, #34	@ 0x22
 800e418:	6013      	str	r3, [r2, #0]
 800e41a:	f04f 0a00 	mov.w	sl, #0
 800e41e:	9b07      	ldr	r3, [sp, #28]
 800e420:	2b00      	cmp	r3, #0
 800e422:	f43f ae20 	beq.w	800e066 <_strtod_l+0x76>
 800e426:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e428:	9805      	ldr	r0, [sp, #20]
 800e42a:	f002 fd95 	bl	8010f58 <_Bfree>
 800e42e:	9805      	ldr	r0, [sp, #20]
 800e430:	4631      	mov	r1, r6
 800e432:	f002 fd91 	bl	8010f58 <_Bfree>
 800e436:	9805      	ldr	r0, [sp, #20]
 800e438:	4629      	mov	r1, r5
 800e43a:	f002 fd8d 	bl	8010f58 <_Bfree>
 800e43e:	9907      	ldr	r1, [sp, #28]
 800e440:	9805      	ldr	r0, [sp, #20]
 800e442:	f002 fd89 	bl	8010f58 <_Bfree>
 800e446:	9805      	ldr	r0, [sp, #20]
 800e448:	4621      	mov	r1, r4
 800e44a:	f002 fd85 	bl	8010f58 <_Bfree>
 800e44e:	e60a      	b.n	800e066 <_strtod_l+0x76>
 800e450:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e454:	1be0      	subs	r0, r4, r7
 800e456:	4281      	cmp	r1, r0
 800e458:	dbbc      	blt.n	800e3d4 <_strtod_l+0x3e4>
 800e45a:	4a40      	ldr	r2, [pc, #256]	@ (800e55c <_strtod_l+0x56c>)
 800e45c:	f1c3 030f 	rsb	r3, r3, #15
 800e460:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e464:	ed91 7b00 	vldr	d7, [r1]
 800e468:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e46a:	ec4b ab16 	vmov	d6, sl, fp
 800e46e:	1acb      	subs	r3, r1, r3
 800e470:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e474:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e478:	ed92 6b00 	vldr	d6, [r2]
 800e47c:	e796      	b.n	800e3ac <_strtod_l+0x3bc>
 800e47e:	3116      	adds	r1, #22
 800e480:	dba8      	blt.n	800e3d4 <_strtod_l+0x3e4>
 800e482:	4b36      	ldr	r3, [pc, #216]	@ (800e55c <_strtod_l+0x56c>)
 800e484:	1b3c      	subs	r4, r7, r4
 800e486:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e48a:	ed94 7b00 	vldr	d7, [r4]
 800e48e:	ec4b ab16 	vmov	d6, sl, fp
 800e492:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e496:	e78b      	b.n	800e3b0 <_strtod_l+0x3c0>
 800e498:	2000      	movs	r0, #0
 800e49a:	ec4b ab17 	vmov	d7, sl, fp
 800e49e:	4e30      	ldr	r6, [pc, #192]	@ (800e560 <_strtod_l+0x570>)
 800e4a0:	1112      	asrs	r2, r2, #4
 800e4a2:	4601      	mov	r1, r0
 800e4a4:	2a01      	cmp	r2, #1
 800e4a6:	dc23      	bgt.n	800e4f0 <_strtod_l+0x500>
 800e4a8:	b108      	cbz	r0, 800e4ae <_strtod_l+0x4be>
 800e4aa:	ec5b ab17 	vmov	sl, fp, d7
 800e4ae:	4a2c      	ldr	r2, [pc, #176]	@ (800e560 <_strtod_l+0x570>)
 800e4b0:	482c      	ldr	r0, [pc, #176]	@ (800e564 <_strtod_l+0x574>)
 800e4b2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e4b6:	ed92 7b00 	vldr	d7, [r2]
 800e4ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e4be:	ec4b ab16 	vmov	d6, sl, fp
 800e4c2:	4a29      	ldr	r2, [pc, #164]	@ (800e568 <_strtod_l+0x578>)
 800e4c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e4c8:	ee17 1a90 	vmov	r1, s15
 800e4cc:	400a      	ands	r2, r1
 800e4ce:	4282      	cmp	r2, r0
 800e4d0:	ec5b ab17 	vmov	sl, fp, d7
 800e4d4:	d898      	bhi.n	800e408 <_strtod_l+0x418>
 800e4d6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800e4da:	4282      	cmp	r2, r0
 800e4dc:	bf86      	itte	hi
 800e4de:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800e56c <_strtod_l+0x57c>
 800e4e2:	f04f 3aff 	movhi.w	sl, #4294967295
 800e4e6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	9206      	str	r2, [sp, #24]
 800e4ee:	e076      	b.n	800e5de <_strtod_l+0x5ee>
 800e4f0:	f012 0f01 	tst.w	r2, #1
 800e4f4:	d004      	beq.n	800e500 <_strtod_l+0x510>
 800e4f6:	ed96 6b00 	vldr	d6, [r6]
 800e4fa:	2001      	movs	r0, #1
 800e4fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e500:	3101      	adds	r1, #1
 800e502:	1052      	asrs	r2, r2, #1
 800e504:	3608      	adds	r6, #8
 800e506:	e7cd      	b.n	800e4a4 <_strtod_l+0x4b4>
 800e508:	d0ef      	beq.n	800e4ea <_strtod_l+0x4fa>
 800e50a:	4252      	negs	r2, r2
 800e50c:	f012 000f 	ands.w	r0, r2, #15
 800e510:	d00a      	beq.n	800e528 <_strtod_l+0x538>
 800e512:	4912      	ldr	r1, [pc, #72]	@ (800e55c <_strtod_l+0x56c>)
 800e514:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e518:	ed91 7b00 	vldr	d7, [r1]
 800e51c:	ec4b ab16 	vmov	d6, sl, fp
 800e520:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e524:	ec5b ab17 	vmov	sl, fp, d7
 800e528:	1112      	asrs	r2, r2, #4
 800e52a:	d0de      	beq.n	800e4ea <_strtod_l+0x4fa>
 800e52c:	2a1f      	cmp	r2, #31
 800e52e:	dd1f      	ble.n	800e570 <_strtod_l+0x580>
 800e530:	2400      	movs	r4, #0
 800e532:	4625      	mov	r5, r4
 800e534:	9407      	str	r4, [sp, #28]
 800e536:	4626      	mov	r6, r4
 800e538:	9a05      	ldr	r2, [sp, #20]
 800e53a:	2322      	movs	r3, #34	@ 0x22
 800e53c:	f04f 0a00 	mov.w	sl, #0
 800e540:	f04f 0b00 	mov.w	fp, #0
 800e544:	6013      	str	r3, [r2, #0]
 800e546:	e76a      	b.n	800e41e <_strtod_l+0x42e>
 800e548:	08012d6d 	.word	0x08012d6d
 800e54c:	08012d10 	.word	0x08012d10
 800e550:	08012d65 	.word	0x08012d65
 800e554:	08012da2 	.word	0x08012da2
 800e558:	08013150 	.word	0x08013150
 800e55c:	08012f20 	.word	0x08012f20
 800e560:	08012ef8 	.word	0x08012ef8
 800e564:	7ca00000 	.word	0x7ca00000
 800e568:	7ff00000 	.word	0x7ff00000
 800e56c:	7fefffff 	.word	0x7fefffff
 800e570:	f012 0110 	ands.w	r1, r2, #16
 800e574:	bf18      	it	ne
 800e576:	216a      	movne	r1, #106	@ 0x6a
 800e578:	9106      	str	r1, [sp, #24]
 800e57a:	ec4b ab17 	vmov	d7, sl, fp
 800e57e:	49b0      	ldr	r1, [pc, #704]	@ (800e840 <_strtod_l+0x850>)
 800e580:	2000      	movs	r0, #0
 800e582:	07d6      	lsls	r6, r2, #31
 800e584:	d504      	bpl.n	800e590 <_strtod_l+0x5a0>
 800e586:	ed91 6b00 	vldr	d6, [r1]
 800e58a:	2001      	movs	r0, #1
 800e58c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e590:	1052      	asrs	r2, r2, #1
 800e592:	f101 0108 	add.w	r1, r1, #8
 800e596:	d1f4      	bne.n	800e582 <_strtod_l+0x592>
 800e598:	b108      	cbz	r0, 800e59e <_strtod_l+0x5ae>
 800e59a:	ec5b ab17 	vmov	sl, fp, d7
 800e59e:	9a06      	ldr	r2, [sp, #24]
 800e5a0:	b1b2      	cbz	r2, 800e5d0 <_strtod_l+0x5e0>
 800e5a2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800e5a6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800e5aa:	2a00      	cmp	r2, #0
 800e5ac:	4658      	mov	r0, fp
 800e5ae:	dd0f      	ble.n	800e5d0 <_strtod_l+0x5e0>
 800e5b0:	2a1f      	cmp	r2, #31
 800e5b2:	dd55      	ble.n	800e660 <_strtod_l+0x670>
 800e5b4:	2a34      	cmp	r2, #52	@ 0x34
 800e5b6:	bfde      	ittt	le
 800e5b8:	f04f 32ff 	movle.w	r2, #4294967295
 800e5bc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800e5c0:	408a      	lslle	r2, r1
 800e5c2:	f04f 0a00 	mov.w	sl, #0
 800e5c6:	bfcc      	ite	gt
 800e5c8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e5cc:	ea02 0b00 	andle.w	fp, r2, r0
 800e5d0:	ec4b ab17 	vmov	d7, sl, fp
 800e5d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5dc:	d0a8      	beq.n	800e530 <_strtod_l+0x540>
 800e5de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e5e0:	9805      	ldr	r0, [sp, #20]
 800e5e2:	f8cd 9000 	str.w	r9, [sp]
 800e5e6:	462a      	mov	r2, r5
 800e5e8:	f002 fd1e 	bl	8011028 <__s2b>
 800e5ec:	9007      	str	r0, [sp, #28]
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	f43f af0a 	beq.w	800e408 <_strtod_l+0x418>
 800e5f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5f6:	1b3f      	subs	r7, r7, r4
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	bfb4      	ite	lt
 800e5fc:	463b      	movlt	r3, r7
 800e5fe:	2300      	movge	r3, #0
 800e600:	930a      	str	r3, [sp, #40]	@ 0x28
 800e602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e604:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800e830 <_strtod_l+0x840>
 800e608:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e60c:	2400      	movs	r4, #0
 800e60e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e610:	4625      	mov	r5, r4
 800e612:	9b07      	ldr	r3, [sp, #28]
 800e614:	9805      	ldr	r0, [sp, #20]
 800e616:	6859      	ldr	r1, [r3, #4]
 800e618:	f002 fc5e 	bl	8010ed8 <_Balloc>
 800e61c:	4606      	mov	r6, r0
 800e61e:	2800      	cmp	r0, #0
 800e620:	f43f aef6 	beq.w	800e410 <_strtod_l+0x420>
 800e624:	9b07      	ldr	r3, [sp, #28]
 800e626:	691a      	ldr	r2, [r3, #16]
 800e628:	ec4b ab19 	vmov	d9, sl, fp
 800e62c:	3202      	adds	r2, #2
 800e62e:	f103 010c 	add.w	r1, r3, #12
 800e632:	0092      	lsls	r2, r2, #2
 800e634:	300c      	adds	r0, #12
 800e636:	f001 faba 	bl	800fbae <memcpy>
 800e63a:	eeb0 0b49 	vmov.f64	d0, d9
 800e63e:	9805      	ldr	r0, [sp, #20]
 800e640:	aa14      	add	r2, sp, #80	@ 0x50
 800e642:	a913      	add	r1, sp, #76	@ 0x4c
 800e644:	f003 f82c 	bl	80116a0 <__d2b>
 800e648:	9012      	str	r0, [sp, #72]	@ 0x48
 800e64a:	2800      	cmp	r0, #0
 800e64c:	f43f aee0 	beq.w	800e410 <_strtod_l+0x420>
 800e650:	9805      	ldr	r0, [sp, #20]
 800e652:	2101      	movs	r1, #1
 800e654:	f002 fd7e 	bl	8011154 <__i2b>
 800e658:	4605      	mov	r5, r0
 800e65a:	b940      	cbnz	r0, 800e66e <_strtod_l+0x67e>
 800e65c:	2500      	movs	r5, #0
 800e65e:	e6d7      	b.n	800e410 <_strtod_l+0x420>
 800e660:	f04f 31ff 	mov.w	r1, #4294967295
 800e664:	fa01 f202 	lsl.w	r2, r1, r2
 800e668:	ea02 0a0a 	and.w	sl, r2, sl
 800e66c:	e7b0      	b.n	800e5d0 <_strtod_l+0x5e0>
 800e66e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800e670:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e672:	2f00      	cmp	r7, #0
 800e674:	bfab      	itete	ge
 800e676:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800e678:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800e67a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800e67e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800e682:	bfac      	ite	ge
 800e684:	eb07 0903 	addge.w	r9, r7, r3
 800e688:	eba3 0807 	sublt.w	r8, r3, r7
 800e68c:	9b06      	ldr	r3, [sp, #24]
 800e68e:	1aff      	subs	r7, r7, r3
 800e690:	4417      	add	r7, r2
 800e692:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800e696:	4a6b      	ldr	r2, [pc, #428]	@ (800e844 <_strtod_l+0x854>)
 800e698:	3f01      	subs	r7, #1
 800e69a:	4297      	cmp	r7, r2
 800e69c:	da51      	bge.n	800e742 <_strtod_l+0x752>
 800e69e:	1bd1      	subs	r1, r2, r7
 800e6a0:	291f      	cmp	r1, #31
 800e6a2:	eba3 0301 	sub.w	r3, r3, r1
 800e6a6:	f04f 0201 	mov.w	r2, #1
 800e6aa:	dc3e      	bgt.n	800e72a <_strtod_l+0x73a>
 800e6ac:	408a      	lsls	r2, r1
 800e6ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e6b4:	eb09 0703 	add.w	r7, r9, r3
 800e6b8:	4498      	add	r8, r3
 800e6ba:	9b06      	ldr	r3, [sp, #24]
 800e6bc:	45b9      	cmp	r9, r7
 800e6be:	4498      	add	r8, r3
 800e6c0:	464b      	mov	r3, r9
 800e6c2:	bfa8      	it	ge
 800e6c4:	463b      	movge	r3, r7
 800e6c6:	4543      	cmp	r3, r8
 800e6c8:	bfa8      	it	ge
 800e6ca:	4643      	movge	r3, r8
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	bfc2      	ittt	gt
 800e6d0:	1aff      	subgt	r7, r7, r3
 800e6d2:	eba8 0803 	subgt.w	r8, r8, r3
 800e6d6:	eba9 0903 	subgt.w	r9, r9, r3
 800e6da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	dd16      	ble.n	800e70e <_strtod_l+0x71e>
 800e6e0:	4629      	mov	r1, r5
 800e6e2:	9805      	ldr	r0, [sp, #20]
 800e6e4:	461a      	mov	r2, r3
 800e6e6:	f002 fdf5 	bl	80112d4 <__pow5mult>
 800e6ea:	4605      	mov	r5, r0
 800e6ec:	2800      	cmp	r0, #0
 800e6ee:	d0b5      	beq.n	800e65c <_strtod_l+0x66c>
 800e6f0:	4601      	mov	r1, r0
 800e6f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e6f4:	9805      	ldr	r0, [sp, #20]
 800e6f6:	f002 fd43 	bl	8011180 <__multiply>
 800e6fa:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e6fc:	2800      	cmp	r0, #0
 800e6fe:	f43f ae87 	beq.w	800e410 <_strtod_l+0x420>
 800e702:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e704:	9805      	ldr	r0, [sp, #20]
 800e706:	f002 fc27 	bl	8010f58 <_Bfree>
 800e70a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e70c:	9312      	str	r3, [sp, #72]	@ 0x48
 800e70e:	2f00      	cmp	r7, #0
 800e710:	dc1b      	bgt.n	800e74a <_strtod_l+0x75a>
 800e712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e714:	2b00      	cmp	r3, #0
 800e716:	dd21      	ble.n	800e75c <_strtod_l+0x76c>
 800e718:	4631      	mov	r1, r6
 800e71a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e71c:	9805      	ldr	r0, [sp, #20]
 800e71e:	f002 fdd9 	bl	80112d4 <__pow5mult>
 800e722:	4606      	mov	r6, r0
 800e724:	b9d0      	cbnz	r0, 800e75c <_strtod_l+0x76c>
 800e726:	2600      	movs	r6, #0
 800e728:	e672      	b.n	800e410 <_strtod_l+0x420>
 800e72a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800e72e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800e732:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800e736:	37e2      	adds	r7, #226	@ 0xe2
 800e738:	fa02 f107 	lsl.w	r1, r2, r7
 800e73c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e73e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e740:	e7b8      	b.n	800e6b4 <_strtod_l+0x6c4>
 800e742:	2200      	movs	r2, #0
 800e744:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e746:	2201      	movs	r2, #1
 800e748:	e7f9      	b.n	800e73e <_strtod_l+0x74e>
 800e74a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e74c:	9805      	ldr	r0, [sp, #20]
 800e74e:	463a      	mov	r2, r7
 800e750:	f002 fe1a 	bl	8011388 <__lshift>
 800e754:	9012      	str	r0, [sp, #72]	@ 0x48
 800e756:	2800      	cmp	r0, #0
 800e758:	d1db      	bne.n	800e712 <_strtod_l+0x722>
 800e75a:	e659      	b.n	800e410 <_strtod_l+0x420>
 800e75c:	f1b8 0f00 	cmp.w	r8, #0
 800e760:	dd07      	ble.n	800e772 <_strtod_l+0x782>
 800e762:	4631      	mov	r1, r6
 800e764:	9805      	ldr	r0, [sp, #20]
 800e766:	4642      	mov	r2, r8
 800e768:	f002 fe0e 	bl	8011388 <__lshift>
 800e76c:	4606      	mov	r6, r0
 800e76e:	2800      	cmp	r0, #0
 800e770:	d0d9      	beq.n	800e726 <_strtod_l+0x736>
 800e772:	f1b9 0f00 	cmp.w	r9, #0
 800e776:	dd08      	ble.n	800e78a <_strtod_l+0x79a>
 800e778:	4629      	mov	r1, r5
 800e77a:	9805      	ldr	r0, [sp, #20]
 800e77c:	464a      	mov	r2, r9
 800e77e:	f002 fe03 	bl	8011388 <__lshift>
 800e782:	4605      	mov	r5, r0
 800e784:	2800      	cmp	r0, #0
 800e786:	f43f ae43 	beq.w	800e410 <_strtod_l+0x420>
 800e78a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e78c:	9805      	ldr	r0, [sp, #20]
 800e78e:	4632      	mov	r2, r6
 800e790:	f002 fe82 	bl	8011498 <__mdiff>
 800e794:	4604      	mov	r4, r0
 800e796:	2800      	cmp	r0, #0
 800e798:	f43f ae3a 	beq.w	800e410 <_strtod_l+0x420>
 800e79c:	2300      	movs	r3, #0
 800e79e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800e7a2:	60c3      	str	r3, [r0, #12]
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	f002 fe5b 	bl	8011460 <__mcmp>
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	da4e      	bge.n	800e84c <_strtod_l+0x85c>
 800e7ae:	ea58 080a 	orrs.w	r8, r8, sl
 800e7b2:	d174      	bne.n	800e89e <_strtod_l+0x8ae>
 800e7b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d170      	bne.n	800e89e <_strtod_l+0x8ae>
 800e7bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e7c0:	0d1b      	lsrs	r3, r3, #20
 800e7c2:	051b      	lsls	r3, r3, #20
 800e7c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e7c8:	d969      	bls.n	800e89e <_strtod_l+0x8ae>
 800e7ca:	6963      	ldr	r3, [r4, #20]
 800e7cc:	b913      	cbnz	r3, 800e7d4 <_strtod_l+0x7e4>
 800e7ce:	6923      	ldr	r3, [r4, #16]
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	dd64      	ble.n	800e89e <_strtod_l+0x8ae>
 800e7d4:	4621      	mov	r1, r4
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	9805      	ldr	r0, [sp, #20]
 800e7da:	f002 fdd5 	bl	8011388 <__lshift>
 800e7de:	4629      	mov	r1, r5
 800e7e0:	4604      	mov	r4, r0
 800e7e2:	f002 fe3d 	bl	8011460 <__mcmp>
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	dd59      	ble.n	800e89e <_strtod_l+0x8ae>
 800e7ea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e7ee:	9a06      	ldr	r2, [sp, #24]
 800e7f0:	0d1b      	lsrs	r3, r3, #20
 800e7f2:	051b      	lsls	r3, r3, #20
 800e7f4:	2a00      	cmp	r2, #0
 800e7f6:	d070      	beq.n	800e8da <_strtod_l+0x8ea>
 800e7f8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e7fc:	d86d      	bhi.n	800e8da <_strtod_l+0x8ea>
 800e7fe:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e802:	f67f ae99 	bls.w	800e538 <_strtod_l+0x548>
 800e806:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800e838 <_strtod_l+0x848>
 800e80a:	ec4b ab16 	vmov	d6, sl, fp
 800e80e:	4b0e      	ldr	r3, [pc, #56]	@ (800e848 <_strtod_l+0x858>)
 800e810:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e814:	ee17 2a90 	vmov	r2, s15
 800e818:	4013      	ands	r3, r2
 800e81a:	ec5b ab17 	vmov	sl, fp, d7
 800e81e:	2b00      	cmp	r3, #0
 800e820:	f47f ae01 	bne.w	800e426 <_strtod_l+0x436>
 800e824:	9a05      	ldr	r2, [sp, #20]
 800e826:	2322      	movs	r3, #34	@ 0x22
 800e828:	6013      	str	r3, [r2, #0]
 800e82a:	e5fc      	b.n	800e426 <_strtod_l+0x436>
 800e82c:	f3af 8000 	nop.w
 800e830:	ffc00000 	.word	0xffc00000
 800e834:	41dfffff 	.word	0x41dfffff
 800e838:	00000000 	.word	0x00000000
 800e83c:	39500000 	.word	0x39500000
 800e840:	08012d38 	.word	0x08012d38
 800e844:	fffffc02 	.word	0xfffffc02
 800e848:	7ff00000 	.word	0x7ff00000
 800e84c:	46d9      	mov	r9, fp
 800e84e:	d15d      	bne.n	800e90c <_strtod_l+0x91c>
 800e850:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e854:	f1b8 0f00 	cmp.w	r8, #0
 800e858:	d02a      	beq.n	800e8b0 <_strtod_l+0x8c0>
 800e85a:	4aab      	ldr	r2, [pc, #684]	@ (800eb08 <_strtod_l+0xb18>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d12a      	bne.n	800e8b6 <_strtod_l+0x8c6>
 800e860:	9b06      	ldr	r3, [sp, #24]
 800e862:	4652      	mov	r2, sl
 800e864:	b1fb      	cbz	r3, 800e8a6 <_strtod_l+0x8b6>
 800e866:	4ba9      	ldr	r3, [pc, #676]	@ (800eb0c <_strtod_l+0xb1c>)
 800e868:	ea0b 0303 	and.w	r3, fp, r3
 800e86c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e870:	f04f 31ff 	mov.w	r1, #4294967295
 800e874:	d81a      	bhi.n	800e8ac <_strtod_l+0x8bc>
 800e876:	0d1b      	lsrs	r3, r3, #20
 800e878:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e87c:	fa01 f303 	lsl.w	r3, r1, r3
 800e880:	429a      	cmp	r2, r3
 800e882:	d118      	bne.n	800e8b6 <_strtod_l+0x8c6>
 800e884:	4ba2      	ldr	r3, [pc, #648]	@ (800eb10 <_strtod_l+0xb20>)
 800e886:	4599      	cmp	r9, r3
 800e888:	d102      	bne.n	800e890 <_strtod_l+0x8a0>
 800e88a:	3201      	adds	r2, #1
 800e88c:	f43f adc0 	beq.w	800e410 <_strtod_l+0x420>
 800e890:	4b9e      	ldr	r3, [pc, #632]	@ (800eb0c <_strtod_l+0xb1c>)
 800e892:	ea09 0303 	and.w	r3, r9, r3
 800e896:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800e89a:	f04f 0a00 	mov.w	sl, #0
 800e89e:	9b06      	ldr	r3, [sp, #24]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d1b0      	bne.n	800e806 <_strtod_l+0x816>
 800e8a4:	e5bf      	b.n	800e426 <_strtod_l+0x436>
 800e8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e8aa:	e7e9      	b.n	800e880 <_strtod_l+0x890>
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	e7e7      	b.n	800e880 <_strtod_l+0x890>
 800e8b0:	ea53 030a 	orrs.w	r3, r3, sl
 800e8b4:	d099      	beq.n	800e7ea <_strtod_l+0x7fa>
 800e8b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8b8:	b1c3      	cbz	r3, 800e8ec <_strtod_l+0x8fc>
 800e8ba:	ea13 0f09 	tst.w	r3, r9
 800e8be:	d0ee      	beq.n	800e89e <_strtod_l+0x8ae>
 800e8c0:	9a06      	ldr	r2, [sp, #24]
 800e8c2:	4650      	mov	r0, sl
 800e8c4:	4659      	mov	r1, fp
 800e8c6:	f1b8 0f00 	cmp.w	r8, #0
 800e8ca:	d013      	beq.n	800e8f4 <_strtod_l+0x904>
 800e8cc:	f7ff fb76 	bl	800dfbc <sulp>
 800e8d0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800e8d4:	ec5b ab17 	vmov	sl, fp, d7
 800e8d8:	e7e1      	b.n	800e89e <_strtod_l+0x8ae>
 800e8da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e8de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e8e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e8e6:	f04f 3aff 	mov.w	sl, #4294967295
 800e8ea:	e7d8      	b.n	800e89e <_strtod_l+0x8ae>
 800e8ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e8ee:	ea13 0f0a 	tst.w	r3, sl
 800e8f2:	e7e4      	b.n	800e8be <_strtod_l+0x8ce>
 800e8f4:	f7ff fb62 	bl	800dfbc <sulp>
 800e8f8:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e8fc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e904:	ec5b ab10 	vmov	sl, fp, d0
 800e908:	d1c9      	bne.n	800e89e <_strtod_l+0x8ae>
 800e90a:	e615      	b.n	800e538 <_strtod_l+0x548>
 800e90c:	4629      	mov	r1, r5
 800e90e:	4620      	mov	r0, r4
 800e910:	f002 ff1e 	bl	8011750 <__ratio>
 800e914:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800e918:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e920:	d85d      	bhi.n	800e9de <_strtod_l+0x9ee>
 800e922:	f1b8 0f00 	cmp.w	r8, #0
 800e926:	d164      	bne.n	800e9f2 <_strtod_l+0xa02>
 800e928:	f1ba 0f00 	cmp.w	sl, #0
 800e92c:	d14b      	bne.n	800e9c6 <_strtod_l+0x9d6>
 800e92e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e932:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d160      	bne.n	800e9fc <_strtod_l+0xa0c>
 800e93a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800e93e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e946:	d401      	bmi.n	800e94c <_strtod_l+0x95c>
 800e948:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e94c:	eeb1 ab48 	vneg.f64	d10, d8
 800e950:	486e      	ldr	r0, [pc, #440]	@ (800eb0c <_strtod_l+0xb1c>)
 800e952:	4970      	ldr	r1, [pc, #448]	@ (800eb14 <_strtod_l+0xb24>)
 800e954:	ea09 0700 	and.w	r7, r9, r0
 800e958:	428f      	cmp	r7, r1
 800e95a:	ec53 2b1a 	vmov	r2, r3, d10
 800e95e:	d17d      	bne.n	800ea5c <_strtod_l+0xa6c>
 800e960:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800e964:	ec4b ab1c 	vmov	d12, sl, fp
 800e968:	eeb0 0b4c 	vmov.f64	d0, d12
 800e96c:	f002 fe28 	bl	80115c0 <__ulp>
 800e970:	4866      	ldr	r0, [pc, #408]	@ (800eb0c <_strtod_l+0xb1c>)
 800e972:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800e976:	ee1c 3a90 	vmov	r3, s25
 800e97a:	4a67      	ldr	r2, [pc, #412]	@ (800eb18 <_strtod_l+0xb28>)
 800e97c:	ea03 0100 	and.w	r1, r3, r0
 800e980:	4291      	cmp	r1, r2
 800e982:	ec5b ab1c 	vmov	sl, fp, d12
 800e986:	d93c      	bls.n	800ea02 <_strtod_l+0xa12>
 800e988:	ee19 2a90 	vmov	r2, s19
 800e98c:	4b60      	ldr	r3, [pc, #384]	@ (800eb10 <_strtod_l+0xb20>)
 800e98e:	429a      	cmp	r2, r3
 800e990:	d104      	bne.n	800e99c <_strtod_l+0x9ac>
 800e992:	ee19 3a10 	vmov	r3, s18
 800e996:	3301      	adds	r3, #1
 800e998:	f43f ad3a 	beq.w	800e410 <_strtod_l+0x420>
 800e99c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800eb10 <_strtod_l+0xb20>
 800e9a0:	f04f 3aff 	mov.w	sl, #4294967295
 800e9a4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e9a6:	9805      	ldr	r0, [sp, #20]
 800e9a8:	f002 fad6 	bl	8010f58 <_Bfree>
 800e9ac:	9805      	ldr	r0, [sp, #20]
 800e9ae:	4631      	mov	r1, r6
 800e9b0:	f002 fad2 	bl	8010f58 <_Bfree>
 800e9b4:	9805      	ldr	r0, [sp, #20]
 800e9b6:	4629      	mov	r1, r5
 800e9b8:	f002 face 	bl	8010f58 <_Bfree>
 800e9bc:	9805      	ldr	r0, [sp, #20]
 800e9be:	4621      	mov	r1, r4
 800e9c0:	f002 faca 	bl	8010f58 <_Bfree>
 800e9c4:	e625      	b.n	800e612 <_strtod_l+0x622>
 800e9c6:	f1ba 0f01 	cmp.w	sl, #1
 800e9ca:	d103      	bne.n	800e9d4 <_strtod_l+0x9e4>
 800e9cc:	f1bb 0f00 	cmp.w	fp, #0
 800e9d0:	f43f adb2 	beq.w	800e538 <_strtod_l+0x548>
 800e9d4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e9d8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e9dc:	e7b8      	b.n	800e950 <_strtod_l+0x960>
 800e9de:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e9e2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e9e6:	f1b8 0f00 	cmp.w	r8, #0
 800e9ea:	d0af      	beq.n	800e94c <_strtod_l+0x95c>
 800e9ec:	eeb0 ab48 	vmov.f64	d10, d8
 800e9f0:	e7ae      	b.n	800e950 <_strtod_l+0x960>
 800e9f2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800e9f6:	eeb0 8b4a 	vmov.f64	d8, d10
 800e9fa:	e7a9      	b.n	800e950 <_strtod_l+0x960>
 800e9fc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ea00:	e7a6      	b.n	800e950 <_strtod_l+0x960>
 800ea02:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ea06:	9b06      	ldr	r3, [sp, #24]
 800ea08:	46d9      	mov	r9, fp
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1ca      	bne.n	800e9a4 <_strtod_l+0x9b4>
 800ea0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ea12:	0d1b      	lsrs	r3, r3, #20
 800ea14:	051b      	lsls	r3, r3, #20
 800ea16:	429f      	cmp	r7, r3
 800ea18:	d1c4      	bne.n	800e9a4 <_strtod_l+0x9b4>
 800ea1a:	ec51 0b18 	vmov	r0, r1, d8
 800ea1e:	f7f1 fea3 	bl	8000768 <__aeabi_d2lz>
 800ea22:	f7f1 fe5b 	bl	80006dc <__aeabi_l2d>
 800ea26:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ea2a:	ec41 0b17 	vmov	d7, r0, r1
 800ea2e:	ea49 090a 	orr.w	r9, r9, sl
 800ea32:	ea59 0908 	orrs.w	r9, r9, r8
 800ea36:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ea3a:	d03c      	beq.n	800eab6 <_strtod_l+0xac6>
 800ea3c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800eaf0 <_strtod_l+0xb00>
 800ea40:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ea44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea48:	f53f aced 	bmi.w	800e426 <_strtod_l+0x436>
 800ea4c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800eaf8 <_strtod_l+0xb08>
 800ea50:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ea54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea58:	dda4      	ble.n	800e9a4 <_strtod_l+0x9b4>
 800ea5a:	e4e4      	b.n	800e426 <_strtod_l+0x436>
 800ea5c:	9906      	ldr	r1, [sp, #24]
 800ea5e:	b1e1      	cbz	r1, 800ea9a <_strtod_l+0xaaa>
 800ea60:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800ea64:	d819      	bhi.n	800ea9a <_strtod_l+0xaaa>
 800ea66:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800ea6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea6e:	d811      	bhi.n	800ea94 <_strtod_l+0xaa4>
 800ea70:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800ea74:	ee18 3a10 	vmov	r3, s16
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	bf38      	it	cc
 800ea7c:	2301      	movcc	r3, #1
 800ea7e:	ee08 3a10 	vmov	s16, r3
 800ea82:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800ea86:	f1b8 0f00 	cmp.w	r8, #0
 800ea8a:	d111      	bne.n	800eab0 <_strtod_l+0xac0>
 800ea8c:	eeb1 7b48 	vneg.f64	d7, d8
 800ea90:	ec53 2b17 	vmov	r2, r3, d7
 800ea94:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800ea98:	1bcb      	subs	r3, r1, r7
 800ea9a:	eeb0 0b49 	vmov.f64	d0, d9
 800ea9e:	ec43 2b1a 	vmov	d10, r2, r3
 800eaa2:	f002 fd8d 	bl	80115c0 <__ulp>
 800eaa6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800eaaa:	ec5b ab19 	vmov	sl, fp, d9
 800eaae:	e7aa      	b.n	800ea06 <_strtod_l+0xa16>
 800eab0:	eeb0 7b48 	vmov.f64	d7, d8
 800eab4:	e7ec      	b.n	800ea90 <_strtod_l+0xaa0>
 800eab6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800eb00 <_strtod_l+0xb10>
 800eaba:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eac2:	f57f af6f 	bpl.w	800e9a4 <_strtod_l+0x9b4>
 800eac6:	e4ae      	b.n	800e426 <_strtod_l+0x436>
 800eac8:	2300      	movs	r3, #0
 800eaca:	9308      	str	r3, [sp, #32]
 800eacc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eace:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ead0:	6013      	str	r3, [r2, #0]
 800ead2:	f7ff bacc 	b.w	800e06e <_strtod_l+0x7e>
 800ead6:	2a65      	cmp	r2, #101	@ 0x65
 800ead8:	f43f abbc 	beq.w	800e254 <_strtod_l+0x264>
 800eadc:	2a45      	cmp	r2, #69	@ 0x45
 800eade:	f43f abb9 	beq.w	800e254 <_strtod_l+0x264>
 800eae2:	2301      	movs	r3, #1
 800eae4:	9306      	str	r3, [sp, #24]
 800eae6:	f7ff bbf0 	b.w	800e2ca <_strtod_l+0x2da>
 800eaea:	bf00      	nop
 800eaec:	f3af 8000 	nop.w
 800eaf0:	94a03595 	.word	0x94a03595
 800eaf4:	3fdfffff 	.word	0x3fdfffff
 800eaf8:	35afe535 	.word	0x35afe535
 800eafc:	3fe00000 	.word	0x3fe00000
 800eb00:	94a03595 	.word	0x94a03595
 800eb04:	3fcfffff 	.word	0x3fcfffff
 800eb08:	000fffff 	.word	0x000fffff
 800eb0c:	7ff00000 	.word	0x7ff00000
 800eb10:	7fefffff 	.word	0x7fefffff
 800eb14:	7fe00000 	.word	0x7fe00000
 800eb18:	7c9fffff 	.word	0x7c9fffff

0800eb1c <_strtod_r>:
 800eb1c:	4b01      	ldr	r3, [pc, #4]	@ (800eb24 <_strtod_r+0x8>)
 800eb1e:	f7ff ba67 	b.w	800dff0 <_strtod_l>
 800eb22:	bf00      	nop
 800eb24:	24000078 	.word	0x24000078

0800eb28 <__cvt>:
 800eb28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb2a:	ed2d 8b02 	vpush	{d8}
 800eb2e:	eeb0 8b40 	vmov.f64	d8, d0
 800eb32:	b085      	sub	sp, #20
 800eb34:	4617      	mov	r7, r2
 800eb36:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800eb38:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eb3a:	ee18 2a90 	vmov	r2, s17
 800eb3e:	f025 0520 	bic.w	r5, r5, #32
 800eb42:	2a00      	cmp	r2, #0
 800eb44:	bfb6      	itet	lt
 800eb46:	222d      	movlt	r2, #45	@ 0x2d
 800eb48:	2200      	movge	r2, #0
 800eb4a:	eeb1 8b40 	vneglt.f64	d8, d0
 800eb4e:	2d46      	cmp	r5, #70	@ 0x46
 800eb50:	460c      	mov	r4, r1
 800eb52:	701a      	strb	r2, [r3, #0]
 800eb54:	d004      	beq.n	800eb60 <__cvt+0x38>
 800eb56:	2d45      	cmp	r5, #69	@ 0x45
 800eb58:	d100      	bne.n	800eb5c <__cvt+0x34>
 800eb5a:	3401      	adds	r4, #1
 800eb5c:	2102      	movs	r1, #2
 800eb5e:	e000      	b.n	800eb62 <__cvt+0x3a>
 800eb60:	2103      	movs	r1, #3
 800eb62:	ab03      	add	r3, sp, #12
 800eb64:	9301      	str	r3, [sp, #4]
 800eb66:	ab02      	add	r3, sp, #8
 800eb68:	9300      	str	r3, [sp, #0]
 800eb6a:	4622      	mov	r2, r4
 800eb6c:	4633      	mov	r3, r6
 800eb6e:	eeb0 0b48 	vmov.f64	d0, d8
 800eb72:	f001 f8c5 	bl	800fd00 <_dtoa_r>
 800eb76:	2d47      	cmp	r5, #71	@ 0x47
 800eb78:	d114      	bne.n	800eba4 <__cvt+0x7c>
 800eb7a:	07fb      	lsls	r3, r7, #31
 800eb7c:	d50a      	bpl.n	800eb94 <__cvt+0x6c>
 800eb7e:	1902      	adds	r2, r0, r4
 800eb80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eb84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb88:	bf08      	it	eq
 800eb8a:	9203      	streq	r2, [sp, #12]
 800eb8c:	2130      	movs	r1, #48	@ 0x30
 800eb8e:	9b03      	ldr	r3, [sp, #12]
 800eb90:	4293      	cmp	r3, r2
 800eb92:	d319      	bcc.n	800ebc8 <__cvt+0xa0>
 800eb94:	9b03      	ldr	r3, [sp, #12]
 800eb96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb98:	1a1b      	subs	r3, r3, r0
 800eb9a:	6013      	str	r3, [r2, #0]
 800eb9c:	b005      	add	sp, #20
 800eb9e:	ecbd 8b02 	vpop	{d8}
 800eba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eba4:	2d46      	cmp	r5, #70	@ 0x46
 800eba6:	eb00 0204 	add.w	r2, r0, r4
 800ebaa:	d1e9      	bne.n	800eb80 <__cvt+0x58>
 800ebac:	7803      	ldrb	r3, [r0, #0]
 800ebae:	2b30      	cmp	r3, #48	@ 0x30
 800ebb0:	d107      	bne.n	800ebc2 <__cvt+0x9a>
 800ebb2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ebb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebba:	bf1c      	itt	ne
 800ebbc:	f1c4 0401 	rsbne	r4, r4, #1
 800ebc0:	6034      	strne	r4, [r6, #0]
 800ebc2:	6833      	ldr	r3, [r6, #0]
 800ebc4:	441a      	add	r2, r3
 800ebc6:	e7db      	b.n	800eb80 <__cvt+0x58>
 800ebc8:	1c5c      	adds	r4, r3, #1
 800ebca:	9403      	str	r4, [sp, #12]
 800ebcc:	7019      	strb	r1, [r3, #0]
 800ebce:	e7de      	b.n	800eb8e <__cvt+0x66>

0800ebd0 <__exponent>:
 800ebd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebd2:	2900      	cmp	r1, #0
 800ebd4:	bfba      	itte	lt
 800ebd6:	4249      	neglt	r1, r1
 800ebd8:	232d      	movlt	r3, #45	@ 0x2d
 800ebda:	232b      	movge	r3, #43	@ 0x2b
 800ebdc:	2909      	cmp	r1, #9
 800ebde:	7002      	strb	r2, [r0, #0]
 800ebe0:	7043      	strb	r3, [r0, #1]
 800ebe2:	dd29      	ble.n	800ec38 <__exponent+0x68>
 800ebe4:	f10d 0307 	add.w	r3, sp, #7
 800ebe8:	461d      	mov	r5, r3
 800ebea:	270a      	movs	r7, #10
 800ebec:	461a      	mov	r2, r3
 800ebee:	fbb1 f6f7 	udiv	r6, r1, r7
 800ebf2:	fb07 1416 	mls	r4, r7, r6, r1
 800ebf6:	3430      	adds	r4, #48	@ 0x30
 800ebf8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ebfc:	460c      	mov	r4, r1
 800ebfe:	2c63      	cmp	r4, #99	@ 0x63
 800ec00:	f103 33ff 	add.w	r3, r3, #4294967295
 800ec04:	4631      	mov	r1, r6
 800ec06:	dcf1      	bgt.n	800ebec <__exponent+0x1c>
 800ec08:	3130      	adds	r1, #48	@ 0x30
 800ec0a:	1e94      	subs	r4, r2, #2
 800ec0c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ec10:	1c41      	adds	r1, r0, #1
 800ec12:	4623      	mov	r3, r4
 800ec14:	42ab      	cmp	r3, r5
 800ec16:	d30a      	bcc.n	800ec2e <__exponent+0x5e>
 800ec18:	f10d 0309 	add.w	r3, sp, #9
 800ec1c:	1a9b      	subs	r3, r3, r2
 800ec1e:	42ac      	cmp	r4, r5
 800ec20:	bf88      	it	hi
 800ec22:	2300      	movhi	r3, #0
 800ec24:	3302      	adds	r3, #2
 800ec26:	4403      	add	r3, r0
 800ec28:	1a18      	subs	r0, r3, r0
 800ec2a:	b003      	add	sp, #12
 800ec2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec2e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ec32:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ec36:	e7ed      	b.n	800ec14 <__exponent+0x44>
 800ec38:	2330      	movs	r3, #48	@ 0x30
 800ec3a:	3130      	adds	r1, #48	@ 0x30
 800ec3c:	7083      	strb	r3, [r0, #2]
 800ec3e:	70c1      	strb	r1, [r0, #3]
 800ec40:	1d03      	adds	r3, r0, #4
 800ec42:	e7f1      	b.n	800ec28 <__exponent+0x58>
 800ec44:	0000      	movs	r0, r0
	...

0800ec48 <_printf_float>:
 800ec48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec4c:	b08d      	sub	sp, #52	@ 0x34
 800ec4e:	460c      	mov	r4, r1
 800ec50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ec54:	4616      	mov	r6, r2
 800ec56:	461f      	mov	r7, r3
 800ec58:	4605      	mov	r5, r0
 800ec5a:	f000 ff21 	bl	800faa0 <_localeconv_r>
 800ec5e:	f8d0 b000 	ldr.w	fp, [r0]
 800ec62:	4658      	mov	r0, fp
 800ec64:	f7f1 fba4 	bl	80003b0 <strlen>
 800ec68:	2300      	movs	r3, #0
 800ec6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec6c:	f8d8 3000 	ldr.w	r3, [r8]
 800ec70:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ec74:	6822      	ldr	r2, [r4, #0]
 800ec76:	9005      	str	r0, [sp, #20]
 800ec78:	3307      	adds	r3, #7
 800ec7a:	f023 0307 	bic.w	r3, r3, #7
 800ec7e:	f103 0108 	add.w	r1, r3, #8
 800ec82:	f8c8 1000 	str.w	r1, [r8]
 800ec86:	ed93 0b00 	vldr	d0, [r3]
 800ec8a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800eee8 <_printf_float+0x2a0>
 800ec8e:	eeb0 7bc0 	vabs.f64	d7, d0
 800ec92:	eeb4 7b46 	vcmp.f64	d7, d6
 800ec96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec9a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ec9e:	dd24      	ble.n	800ecea <_printf_float+0xa2>
 800eca0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800eca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca8:	d502      	bpl.n	800ecb0 <_printf_float+0x68>
 800ecaa:	232d      	movs	r3, #45	@ 0x2d
 800ecac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ecb0:	498f      	ldr	r1, [pc, #572]	@ (800eef0 <_printf_float+0x2a8>)
 800ecb2:	4b90      	ldr	r3, [pc, #576]	@ (800eef4 <_printf_float+0x2ac>)
 800ecb4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ecb8:	bf94      	ite	ls
 800ecba:	4688      	movls	r8, r1
 800ecbc:	4698      	movhi	r8, r3
 800ecbe:	f022 0204 	bic.w	r2, r2, #4
 800ecc2:	2303      	movs	r3, #3
 800ecc4:	6123      	str	r3, [r4, #16]
 800ecc6:	6022      	str	r2, [r4, #0]
 800ecc8:	f04f 0a00 	mov.w	sl, #0
 800eccc:	9700      	str	r7, [sp, #0]
 800ecce:	4633      	mov	r3, r6
 800ecd0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ecd2:	4621      	mov	r1, r4
 800ecd4:	4628      	mov	r0, r5
 800ecd6:	f000 f9d1 	bl	800f07c <_printf_common>
 800ecda:	3001      	adds	r0, #1
 800ecdc:	f040 8089 	bne.w	800edf2 <_printf_float+0x1aa>
 800ece0:	f04f 30ff 	mov.w	r0, #4294967295
 800ece4:	b00d      	add	sp, #52	@ 0x34
 800ece6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecea:	eeb4 0b40 	vcmp.f64	d0, d0
 800ecee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecf2:	d709      	bvc.n	800ed08 <_printf_float+0xc0>
 800ecf4:	ee10 3a90 	vmov	r3, s1
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	bfbc      	itt	lt
 800ecfc:	232d      	movlt	r3, #45	@ 0x2d
 800ecfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ed02:	497d      	ldr	r1, [pc, #500]	@ (800eef8 <_printf_float+0x2b0>)
 800ed04:	4b7d      	ldr	r3, [pc, #500]	@ (800eefc <_printf_float+0x2b4>)
 800ed06:	e7d5      	b.n	800ecb4 <_printf_float+0x6c>
 800ed08:	6863      	ldr	r3, [r4, #4]
 800ed0a:	1c59      	adds	r1, r3, #1
 800ed0c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800ed10:	d139      	bne.n	800ed86 <_printf_float+0x13e>
 800ed12:	2306      	movs	r3, #6
 800ed14:	6063      	str	r3, [r4, #4]
 800ed16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	6022      	str	r2, [r4, #0]
 800ed1e:	9303      	str	r3, [sp, #12]
 800ed20:	ab0a      	add	r3, sp, #40	@ 0x28
 800ed22:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ed26:	ab09      	add	r3, sp, #36	@ 0x24
 800ed28:	9300      	str	r3, [sp, #0]
 800ed2a:	6861      	ldr	r1, [r4, #4]
 800ed2c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ed30:	4628      	mov	r0, r5
 800ed32:	f7ff fef9 	bl	800eb28 <__cvt>
 800ed36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ed3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ed3c:	4680      	mov	r8, r0
 800ed3e:	d129      	bne.n	800ed94 <_printf_float+0x14c>
 800ed40:	1cc8      	adds	r0, r1, #3
 800ed42:	db02      	blt.n	800ed4a <_printf_float+0x102>
 800ed44:	6863      	ldr	r3, [r4, #4]
 800ed46:	4299      	cmp	r1, r3
 800ed48:	dd41      	ble.n	800edce <_printf_float+0x186>
 800ed4a:	f1a9 0902 	sub.w	r9, r9, #2
 800ed4e:	fa5f f989 	uxtb.w	r9, r9
 800ed52:	3901      	subs	r1, #1
 800ed54:	464a      	mov	r2, r9
 800ed56:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ed5a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ed5c:	f7ff ff38 	bl	800ebd0 <__exponent>
 800ed60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed62:	1813      	adds	r3, r2, r0
 800ed64:	2a01      	cmp	r2, #1
 800ed66:	4682      	mov	sl, r0
 800ed68:	6123      	str	r3, [r4, #16]
 800ed6a:	dc02      	bgt.n	800ed72 <_printf_float+0x12a>
 800ed6c:	6822      	ldr	r2, [r4, #0]
 800ed6e:	07d2      	lsls	r2, r2, #31
 800ed70:	d501      	bpl.n	800ed76 <_printf_float+0x12e>
 800ed72:	3301      	adds	r3, #1
 800ed74:	6123      	str	r3, [r4, #16]
 800ed76:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d0a6      	beq.n	800eccc <_printf_float+0x84>
 800ed7e:	232d      	movs	r3, #45	@ 0x2d
 800ed80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed84:	e7a2      	b.n	800eccc <_printf_float+0x84>
 800ed86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ed8a:	d1c4      	bne.n	800ed16 <_printf_float+0xce>
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d1c2      	bne.n	800ed16 <_printf_float+0xce>
 800ed90:	2301      	movs	r3, #1
 800ed92:	e7bf      	b.n	800ed14 <_printf_float+0xcc>
 800ed94:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ed98:	d9db      	bls.n	800ed52 <_printf_float+0x10a>
 800ed9a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800ed9e:	d118      	bne.n	800edd2 <_printf_float+0x18a>
 800eda0:	2900      	cmp	r1, #0
 800eda2:	6863      	ldr	r3, [r4, #4]
 800eda4:	dd0b      	ble.n	800edbe <_printf_float+0x176>
 800eda6:	6121      	str	r1, [r4, #16]
 800eda8:	b913      	cbnz	r3, 800edb0 <_printf_float+0x168>
 800edaa:	6822      	ldr	r2, [r4, #0]
 800edac:	07d0      	lsls	r0, r2, #31
 800edae:	d502      	bpl.n	800edb6 <_printf_float+0x16e>
 800edb0:	3301      	adds	r3, #1
 800edb2:	440b      	add	r3, r1
 800edb4:	6123      	str	r3, [r4, #16]
 800edb6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800edb8:	f04f 0a00 	mov.w	sl, #0
 800edbc:	e7db      	b.n	800ed76 <_printf_float+0x12e>
 800edbe:	b913      	cbnz	r3, 800edc6 <_printf_float+0x17e>
 800edc0:	6822      	ldr	r2, [r4, #0]
 800edc2:	07d2      	lsls	r2, r2, #31
 800edc4:	d501      	bpl.n	800edca <_printf_float+0x182>
 800edc6:	3302      	adds	r3, #2
 800edc8:	e7f4      	b.n	800edb4 <_printf_float+0x16c>
 800edca:	2301      	movs	r3, #1
 800edcc:	e7f2      	b.n	800edb4 <_printf_float+0x16c>
 800edce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800edd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edd4:	4299      	cmp	r1, r3
 800edd6:	db05      	blt.n	800ede4 <_printf_float+0x19c>
 800edd8:	6823      	ldr	r3, [r4, #0]
 800edda:	6121      	str	r1, [r4, #16]
 800eddc:	07d8      	lsls	r0, r3, #31
 800edde:	d5ea      	bpl.n	800edb6 <_printf_float+0x16e>
 800ede0:	1c4b      	adds	r3, r1, #1
 800ede2:	e7e7      	b.n	800edb4 <_printf_float+0x16c>
 800ede4:	2900      	cmp	r1, #0
 800ede6:	bfd4      	ite	le
 800ede8:	f1c1 0202 	rsble	r2, r1, #2
 800edec:	2201      	movgt	r2, #1
 800edee:	4413      	add	r3, r2
 800edf0:	e7e0      	b.n	800edb4 <_printf_float+0x16c>
 800edf2:	6823      	ldr	r3, [r4, #0]
 800edf4:	055a      	lsls	r2, r3, #21
 800edf6:	d407      	bmi.n	800ee08 <_printf_float+0x1c0>
 800edf8:	6923      	ldr	r3, [r4, #16]
 800edfa:	4642      	mov	r2, r8
 800edfc:	4631      	mov	r1, r6
 800edfe:	4628      	mov	r0, r5
 800ee00:	47b8      	blx	r7
 800ee02:	3001      	adds	r0, #1
 800ee04:	d12a      	bne.n	800ee5c <_printf_float+0x214>
 800ee06:	e76b      	b.n	800ece0 <_printf_float+0x98>
 800ee08:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ee0c:	f240 80e0 	bls.w	800efd0 <_printf_float+0x388>
 800ee10:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ee14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ee18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee1c:	d133      	bne.n	800ee86 <_printf_float+0x23e>
 800ee1e:	4a38      	ldr	r2, [pc, #224]	@ (800ef00 <_printf_float+0x2b8>)
 800ee20:	2301      	movs	r3, #1
 800ee22:	4631      	mov	r1, r6
 800ee24:	4628      	mov	r0, r5
 800ee26:	47b8      	blx	r7
 800ee28:	3001      	adds	r0, #1
 800ee2a:	f43f af59 	beq.w	800ece0 <_printf_float+0x98>
 800ee2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ee32:	4543      	cmp	r3, r8
 800ee34:	db02      	blt.n	800ee3c <_printf_float+0x1f4>
 800ee36:	6823      	ldr	r3, [r4, #0]
 800ee38:	07d8      	lsls	r0, r3, #31
 800ee3a:	d50f      	bpl.n	800ee5c <_printf_float+0x214>
 800ee3c:	9b05      	ldr	r3, [sp, #20]
 800ee3e:	465a      	mov	r2, fp
 800ee40:	4631      	mov	r1, r6
 800ee42:	4628      	mov	r0, r5
 800ee44:	47b8      	blx	r7
 800ee46:	3001      	adds	r0, #1
 800ee48:	f43f af4a 	beq.w	800ece0 <_printf_float+0x98>
 800ee4c:	f04f 0900 	mov.w	r9, #0
 800ee50:	f108 38ff 	add.w	r8, r8, #4294967295
 800ee54:	f104 0a1a 	add.w	sl, r4, #26
 800ee58:	45c8      	cmp	r8, r9
 800ee5a:	dc09      	bgt.n	800ee70 <_printf_float+0x228>
 800ee5c:	6823      	ldr	r3, [r4, #0]
 800ee5e:	079b      	lsls	r3, r3, #30
 800ee60:	f100 8107 	bmi.w	800f072 <_printf_float+0x42a>
 800ee64:	68e0      	ldr	r0, [r4, #12]
 800ee66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee68:	4298      	cmp	r0, r3
 800ee6a:	bfb8      	it	lt
 800ee6c:	4618      	movlt	r0, r3
 800ee6e:	e739      	b.n	800ece4 <_printf_float+0x9c>
 800ee70:	2301      	movs	r3, #1
 800ee72:	4652      	mov	r2, sl
 800ee74:	4631      	mov	r1, r6
 800ee76:	4628      	mov	r0, r5
 800ee78:	47b8      	blx	r7
 800ee7a:	3001      	adds	r0, #1
 800ee7c:	f43f af30 	beq.w	800ece0 <_printf_float+0x98>
 800ee80:	f109 0901 	add.w	r9, r9, #1
 800ee84:	e7e8      	b.n	800ee58 <_printf_float+0x210>
 800ee86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	dc3b      	bgt.n	800ef04 <_printf_float+0x2bc>
 800ee8c:	4a1c      	ldr	r2, [pc, #112]	@ (800ef00 <_printf_float+0x2b8>)
 800ee8e:	2301      	movs	r3, #1
 800ee90:	4631      	mov	r1, r6
 800ee92:	4628      	mov	r0, r5
 800ee94:	47b8      	blx	r7
 800ee96:	3001      	adds	r0, #1
 800ee98:	f43f af22 	beq.w	800ece0 <_printf_float+0x98>
 800ee9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eea0:	ea59 0303 	orrs.w	r3, r9, r3
 800eea4:	d102      	bne.n	800eeac <_printf_float+0x264>
 800eea6:	6823      	ldr	r3, [r4, #0]
 800eea8:	07d9      	lsls	r1, r3, #31
 800eeaa:	d5d7      	bpl.n	800ee5c <_printf_float+0x214>
 800eeac:	9b05      	ldr	r3, [sp, #20]
 800eeae:	465a      	mov	r2, fp
 800eeb0:	4631      	mov	r1, r6
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	47b8      	blx	r7
 800eeb6:	3001      	adds	r0, #1
 800eeb8:	f43f af12 	beq.w	800ece0 <_printf_float+0x98>
 800eebc:	f04f 0a00 	mov.w	sl, #0
 800eec0:	f104 0b1a 	add.w	fp, r4, #26
 800eec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eec6:	425b      	negs	r3, r3
 800eec8:	4553      	cmp	r3, sl
 800eeca:	dc01      	bgt.n	800eed0 <_printf_float+0x288>
 800eecc:	464b      	mov	r3, r9
 800eece:	e794      	b.n	800edfa <_printf_float+0x1b2>
 800eed0:	2301      	movs	r3, #1
 800eed2:	465a      	mov	r2, fp
 800eed4:	4631      	mov	r1, r6
 800eed6:	4628      	mov	r0, r5
 800eed8:	47b8      	blx	r7
 800eeda:	3001      	adds	r0, #1
 800eedc:	f43f af00 	beq.w	800ece0 <_printf_float+0x98>
 800eee0:	f10a 0a01 	add.w	sl, sl, #1
 800eee4:	e7ee      	b.n	800eec4 <_printf_float+0x27c>
 800eee6:	bf00      	nop
 800eee8:	ffffffff 	.word	0xffffffff
 800eeec:	7fefffff 	.word	0x7fefffff
 800eef0:	08012d60 	.word	0x08012d60
 800eef4:	08012d64 	.word	0x08012d64
 800eef8:	08012d68 	.word	0x08012d68
 800eefc:	08012d6c 	.word	0x08012d6c
 800ef00:	08013110 	.word	0x08013110
 800ef04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ef06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ef0a:	4553      	cmp	r3, sl
 800ef0c:	bfa8      	it	ge
 800ef0e:	4653      	movge	r3, sl
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	4699      	mov	r9, r3
 800ef14:	dc37      	bgt.n	800ef86 <_printf_float+0x33e>
 800ef16:	2300      	movs	r3, #0
 800ef18:	9307      	str	r3, [sp, #28]
 800ef1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef1e:	f104 021a 	add.w	r2, r4, #26
 800ef22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ef24:	9907      	ldr	r1, [sp, #28]
 800ef26:	9306      	str	r3, [sp, #24]
 800ef28:	eba3 0309 	sub.w	r3, r3, r9
 800ef2c:	428b      	cmp	r3, r1
 800ef2e:	dc31      	bgt.n	800ef94 <_printf_float+0x34c>
 800ef30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef32:	459a      	cmp	sl, r3
 800ef34:	dc3b      	bgt.n	800efae <_printf_float+0x366>
 800ef36:	6823      	ldr	r3, [r4, #0]
 800ef38:	07da      	lsls	r2, r3, #31
 800ef3a:	d438      	bmi.n	800efae <_printf_float+0x366>
 800ef3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef3e:	ebaa 0903 	sub.w	r9, sl, r3
 800ef42:	9b06      	ldr	r3, [sp, #24]
 800ef44:	ebaa 0303 	sub.w	r3, sl, r3
 800ef48:	4599      	cmp	r9, r3
 800ef4a:	bfa8      	it	ge
 800ef4c:	4699      	movge	r9, r3
 800ef4e:	f1b9 0f00 	cmp.w	r9, #0
 800ef52:	dc34      	bgt.n	800efbe <_printf_float+0x376>
 800ef54:	f04f 0800 	mov.w	r8, #0
 800ef58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef5c:	f104 0b1a 	add.w	fp, r4, #26
 800ef60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef62:	ebaa 0303 	sub.w	r3, sl, r3
 800ef66:	eba3 0309 	sub.w	r3, r3, r9
 800ef6a:	4543      	cmp	r3, r8
 800ef6c:	f77f af76 	ble.w	800ee5c <_printf_float+0x214>
 800ef70:	2301      	movs	r3, #1
 800ef72:	465a      	mov	r2, fp
 800ef74:	4631      	mov	r1, r6
 800ef76:	4628      	mov	r0, r5
 800ef78:	47b8      	blx	r7
 800ef7a:	3001      	adds	r0, #1
 800ef7c:	f43f aeb0 	beq.w	800ece0 <_printf_float+0x98>
 800ef80:	f108 0801 	add.w	r8, r8, #1
 800ef84:	e7ec      	b.n	800ef60 <_printf_float+0x318>
 800ef86:	4642      	mov	r2, r8
 800ef88:	4631      	mov	r1, r6
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	47b8      	blx	r7
 800ef8e:	3001      	adds	r0, #1
 800ef90:	d1c1      	bne.n	800ef16 <_printf_float+0x2ce>
 800ef92:	e6a5      	b.n	800ece0 <_printf_float+0x98>
 800ef94:	2301      	movs	r3, #1
 800ef96:	4631      	mov	r1, r6
 800ef98:	4628      	mov	r0, r5
 800ef9a:	9206      	str	r2, [sp, #24]
 800ef9c:	47b8      	blx	r7
 800ef9e:	3001      	adds	r0, #1
 800efa0:	f43f ae9e 	beq.w	800ece0 <_printf_float+0x98>
 800efa4:	9b07      	ldr	r3, [sp, #28]
 800efa6:	9a06      	ldr	r2, [sp, #24]
 800efa8:	3301      	adds	r3, #1
 800efaa:	9307      	str	r3, [sp, #28]
 800efac:	e7b9      	b.n	800ef22 <_printf_float+0x2da>
 800efae:	9b05      	ldr	r3, [sp, #20]
 800efb0:	465a      	mov	r2, fp
 800efb2:	4631      	mov	r1, r6
 800efb4:	4628      	mov	r0, r5
 800efb6:	47b8      	blx	r7
 800efb8:	3001      	adds	r0, #1
 800efba:	d1bf      	bne.n	800ef3c <_printf_float+0x2f4>
 800efbc:	e690      	b.n	800ece0 <_printf_float+0x98>
 800efbe:	9a06      	ldr	r2, [sp, #24]
 800efc0:	464b      	mov	r3, r9
 800efc2:	4442      	add	r2, r8
 800efc4:	4631      	mov	r1, r6
 800efc6:	4628      	mov	r0, r5
 800efc8:	47b8      	blx	r7
 800efca:	3001      	adds	r0, #1
 800efcc:	d1c2      	bne.n	800ef54 <_printf_float+0x30c>
 800efce:	e687      	b.n	800ece0 <_printf_float+0x98>
 800efd0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800efd4:	f1b9 0f01 	cmp.w	r9, #1
 800efd8:	dc01      	bgt.n	800efde <_printf_float+0x396>
 800efda:	07db      	lsls	r3, r3, #31
 800efdc:	d536      	bpl.n	800f04c <_printf_float+0x404>
 800efde:	2301      	movs	r3, #1
 800efe0:	4642      	mov	r2, r8
 800efe2:	4631      	mov	r1, r6
 800efe4:	4628      	mov	r0, r5
 800efe6:	47b8      	blx	r7
 800efe8:	3001      	adds	r0, #1
 800efea:	f43f ae79 	beq.w	800ece0 <_printf_float+0x98>
 800efee:	9b05      	ldr	r3, [sp, #20]
 800eff0:	465a      	mov	r2, fp
 800eff2:	4631      	mov	r1, r6
 800eff4:	4628      	mov	r0, r5
 800eff6:	47b8      	blx	r7
 800eff8:	3001      	adds	r0, #1
 800effa:	f43f ae71 	beq.w	800ece0 <_printf_float+0x98>
 800effe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f002:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f00a:	f109 39ff 	add.w	r9, r9, #4294967295
 800f00e:	d018      	beq.n	800f042 <_printf_float+0x3fa>
 800f010:	464b      	mov	r3, r9
 800f012:	f108 0201 	add.w	r2, r8, #1
 800f016:	4631      	mov	r1, r6
 800f018:	4628      	mov	r0, r5
 800f01a:	47b8      	blx	r7
 800f01c:	3001      	adds	r0, #1
 800f01e:	d10c      	bne.n	800f03a <_printf_float+0x3f2>
 800f020:	e65e      	b.n	800ece0 <_printf_float+0x98>
 800f022:	2301      	movs	r3, #1
 800f024:	465a      	mov	r2, fp
 800f026:	4631      	mov	r1, r6
 800f028:	4628      	mov	r0, r5
 800f02a:	47b8      	blx	r7
 800f02c:	3001      	adds	r0, #1
 800f02e:	f43f ae57 	beq.w	800ece0 <_printf_float+0x98>
 800f032:	f108 0801 	add.w	r8, r8, #1
 800f036:	45c8      	cmp	r8, r9
 800f038:	dbf3      	blt.n	800f022 <_printf_float+0x3da>
 800f03a:	4653      	mov	r3, sl
 800f03c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f040:	e6dc      	b.n	800edfc <_printf_float+0x1b4>
 800f042:	f04f 0800 	mov.w	r8, #0
 800f046:	f104 0b1a 	add.w	fp, r4, #26
 800f04a:	e7f4      	b.n	800f036 <_printf_float+0x3ee>
 800f04c:	2301      	movs	r3, #1
 800f04e:	4642      	mov	r2, r8
 800f050:	e7e1      	b.n	800f016 <_printf_float+0x3ce>
 800f052:	2301      	movs	r3, #1
 800f054:	464a      	mov	r2, r9
 800f056:	4631      	mov	r1, r6
 800f058:	4628      	mov	r0, r5
 800f05a:	47b8      	blx	r7
 800f05c:	3001      	adds	r0, #1
 800f05e:	f43f ae3f 	beq.w	800ece0 <_printf_float+0x98>
 800f062:	f108 0801 	add.w	r8, r8, #1
 800f066:	68e3      	ldr	r3, [r4, #12]
 800f068:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f06a:	1a5b      	subs	r3, r3, r1
 800f06c:	4543      	cmp	r3, r8
 800f06e:	dcf0      	bgt.n	800f052 <_printf_float+0x40a>
 800f070:	e6f8      	b.n	800ee64 <_printf_float+0x21c>
 800f072:	f04f 0800 	mov.w	r8, #0
 800f076:	f104 0919 	add.w	r9, r4, #25
 800f07a:	e7f4      	b.n	800f066 <_printf_float+0x41e>

0800f07c <_printf_common>:
 800f07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f080:	4616      	mov	r6, r2
 800f082:	4698      	mov	r8, r3
 800f084:	688a      	ldr	r2, [r1, #8]
 800f086:	690b      	ldr	r3, [r1, #16]
 800f088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f08c:	4293      	cmp	r3, r2
 800f08e:	bfb8      	it	lt
 800f090:	4613      	movlt	r3, r2
 800f092:	6033      	str	r3, [r6, #0]
 800f094:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f098:	4607      	mov	r7, r0
 800f09a:	460c      	mov	r4, r1
 800f09c:	b10a      	cbz	r2, 800f0a2 <_printf_common+0x26>
 800f09e:	3301      	adds	r3, #1
 800f0a0:	6033      	str	r3, [r6, #0]
 800f0a2:	6823      	ldr	r3, [r4, #0]
 800f0a4:	0699      	lsls	r1, r3, #26
 800f0a6:	bf42      	ittt	mi
 800f0a8:	6833      	ldrmi	r3, [r6, #0]
 800f0aa:	3302      	addmi	r3, #2
 800f0ac:	6033      	strmi	r3, [r6, #0]
 800f0ae:	6825      	ldr	r5, [r4, #0]
 800f0b0:	f015 0506 	ands.w	r5, r5, #6
 800f0b4:	d106      	bne.n	800f0c4 <_printf_common+0x48>
 800f0b6:	f104 0a19 	add.w	sl, r4, #25
 800f0ba:	68e3      	ldr	r3, [r4, #12]
 800f0bc:	6832      	ldr	r2, [r6, #0]
 800f0be:	1a9b      	subs	r3, r3, r2
 800f0c0:	42ab      	cmp	r3, r5
 800f0c2:	dc26      	bgt.n	800f112 <_printf_common+0x96>
 800f0c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f0c8:	6822      	ldr	r2, [r4, #0]
 800f0ca:	3b00      	subs	r3, #0
 800f0cc:	bf18      	it	ne
 800f0ce:	2301      	movne	r3, #1
 800f0d0:	0692      	lsls	r2, r2, #26
 800f0d2:	d42b      	bmi.n	800f12c <_printf_common+0xb0>
 800f0d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f0d8:	4641      	mov	r1, r8
 800f0da:	4638      	mov	r0, r7
 800f0dc:	47c8      	blx	r9
 800f0de:	3001      	adds	r0, #1
 800f0e0:	d01e      	beq.n	800f120 <_printf_common+0xa4>
 800f0e2:	6823      	ldr	r3, [r4, #0]
 800f0e4:	6922      	ldr	r2, [r4, #16]
 800f0e6:	f003 0306 	and.w	r3, r3, #6
 800f0ea:	2b04      	cmp	r3, #4
 800f0ec:	bf02      	ittt	eq
 800f0ee:	68e5      	ldreq	r5, [r4, #12]
 800f0f0:	6833      	ldreq	r3, [r6, #0]
 800f0f2:	1aed      	subeq	r5, r5, r3
 800f0f4:	68a3      	ldr	r3, [r4, #8]
 800f0f6:	bf0c      	ite	eq
 800f0f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f0fc:	2500      	movne	r5, #0
 800f0fe:	4293      	cmp	r3, r2
 800f100:	bfc4      	itt	gt
 800f102:	1a9b      	subgt	r3, r3, r2
 800f104:	18ed      	addgt	r5, r5, r3
 800f106:	2600      	movs	r6, #0
 800f108:	341a      	adds	r4, #26
 800f10a:	42b5      	cmp	r5, r6
 800f10c:	d11a      	bne.n	800f144 <_printf_common+0xc8>
 800f10e:	2000      	movs	r0, #0
 800f110:	e008      	b.n	800f124 <_printf_common+0xa8>
 800f112:	2301      	movs	r3, #1
 800f114:	4652      	mov	r2, sl
 800f116:	4641      	mov	r1, r8
 800f118:	4638      	mov	r0, r7
 800f11a:	47c8      	blx	r9
 800f11c:	3001      	adds	r0, #1
 800f11e:	d103      	bne.n	800f128 <_printf_common+0xac>
 800f120:	f04f 30ff 	mov.w	r0, #4294967295
 800f124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f128:	3501      	adds	r5, #1
 800f12a:	e7c6      	b.n	800f0ba <_printf_common+0x3e>
 800f12c:	18e1      	adds	r1, r4, r3
 800f12e:	1c5a      	adds	r2, r3, #1
 800f130:	2030      	movs	r0, #48	@ 0x30
 800f132:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f136:	4422      	add	r2, r4
 800f138:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f13c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f140:	3302      	adds	r3, #2
 800f142:	e7c7      	b.n	800f0d4 <_printf_common+0x58>
 800f144:	2301      	movs	r3, #1
 800f146:	4622      	mov	r2, r4
 800f148:	4641      	mov	r1, r8
 800f14a:	4638      	mov	r0, r7
 800f14c:	47c8      	blx	r9
 800f14e:	3001      	adds	r0, #1
 800f150:	d0e6      	beq.n	800f120 <_printf_common+0xa4>
 800f152:	3601      	adds	r6, #1
 800f154:	e7d9      	b.n	800f10a <_printf_common+0x8e>
	...

0800f158 <_printf_i>:
 800f158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f15c:	7e0f      	ldrb	r7, [r1, #24]
 800f15e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f160:	2f78      	cmp	r7, #120	@ 0x78
 800f162:	4691      	mov	r9, r2
 800f164:	4680      	mov	r8, r0
 800f166:	460c      	mov	r4, r1
 800f168:	469a      	mov	sl, r3
 800f16a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f16e:	d807      	bhi.n	800f180 <_printf_i+0x28>
 800f170:	2f62      	cmp	r7, #98	@ 0x62
 800f172:	d80a      	bhi.n	800f18a <_printf_i+0x32>
 800f174:	2f00      	cmp	r7, #0
 800f176:	f000 80d2 	beq.w	800f31e <_printf_i+0x1c6>
 800f17a:	2f58      	cmp	r7, #88	@ 0x58
 800f17c:	f000 80b9 	beq.w	800f2f2 <_printf_i+0x19a>
 800f180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f184:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f188:	e03a      	b.n	800f200 <_printf_i+0xa8>
 800f18a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f18e:	2b15      	cmp	r3, #21
 800f190:	d8f6      	bhi.n	800f180 <_printf_i+0x28>
 800f192:	a101      	add	r1, pc, #4	@ (adr r1, 800f198 <_printf_i+0x40>)
 800f194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f198:	0800f1f1 	.word	0x0800f1f1
 800f19c:	0800f205 	.word	0x0800f205
 800f1a0:	0800f181 	.word	0x0800f181
 800f1a4:	0800f181 	.word	0x0800f181
 800f1a8:	0800f181 	.word	0x0800f181
 800f1ac:	0800f181 	.word	0x0800f181
 800f1b0:	0800f205 	.word	0x0800f205
 800f1b4:	0800f181 	.word	0x0800f181
 800f1b8:	0800f181 	.word	0x0800f181
 800f1bc:	0800f181 	.word	0x0800f181
 800f1c0:	0800f181 	.word	0x0800f181
 800f1c4:	0800f305 	.word	0x0800f305
 800f1c8:	0800f22f 	.word	0x0800f22f
 800f1cc:	0800f2bf 	.word	0x0800f2bf
 800f1d0:	0800f181 	.word	0x0800f181
 800f1d4:	0800f181 	.word	0x0800f181
 800f1d8:	0800f327 	.word	0x0800f327
 800f1dc:	0800f181 	.word	0x0800f181
 800f1e0:	0800f22f 	.word	0x0800f22f
 800f1e4:	0800f181 	.word	0x0800f181
 800f1e8:	0800f181 	.word	0x0800f181
 800f1ec:	0800f2c7 	.word	0x0800f2c7
 800f1f0:	6833      	ldr	r3, [r6, #0]
 800f1f2:	1d1a      	adds	r2, r3, #4
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	6032      	str	r2, [r6, #0]
 800f1f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f1fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f200:	2301      	movs	r3, #1
 800f202:	e09d      	b.n	800f340 <_printf_i+0x1e8>
 800f204:	6833      	ldr	r3, [r6, #0]
 800f206:	6820      	ldr	r0, [r4, #0]
 800f208:	1d19      	adds	r1, r3, #4
 800f20a:	6031      	str	r1, [r6, #0]
 800f20c:	0606      	lsls	r6, r0, #24
 800f20e:	d501      	bpl.n	800f214 <_printf_i+0xbc>
 800f210:	681d      	ldr	r5, [r3, #0]
 800f212:	e003      	b.n	800f21c <_printf_i+0xc4>
 800f214:	0645      	lsls	r5, r0, #25
 800f216:	d5fb      	bpl.n	800f210 <_printf_i+0xb8>
 800f218:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f21c:	2d00      	cmp	r5, #0
 800f21e:	da03      	bge.n	800f228 <_printf_i+0xd0>
 800f220:	232d      	movs	r3, #45	@ 0x2d
 800f222:	426d      	negs	r5, r5
 800f224:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f228:	4859      	ldr	r0, [pc, #356]	@ (800f390 <_printf_i+0x238>)
 800f22a:	230a      	movs	r3, #10
 800f22c:	e011      	b.n	800f252 <_printf_i+0xfa>
 800f22e:	6821      	ldr	r1, [r4, #0]
 800f230:	6833      	ldr	r3, [r6, #0]
 800f232:	0608      	lsls	r0, r1, #24
 800f234:	f853 5b04 	ldr.w	r5, [r3], #4
 800f238:	d402      	bmi.n	800f240 <_printf_i+0xe8>
 800f23a:	0649      	lsls	r1, r1, #25
 800f23c:	bf48      	it	mi
 800f23e:	b2ad      	uxthmi	r5, r5
 800f240:	2f6f      	cmp	r7, #111	@ 0x6f
 800f242:	4853      	ldr	r0, [pc, #332]	@ (800f390 <_printf_i+0x238>)
 800f244:	6033      	str	r3, [r6, #0]
 800f246:	bf14      	ite	ne
 800f248:	230a      	movne	r3, #10
 800f24a:	2308      	moveq	r3, #8
 800f24c:	2100      	movs	r1, #0
 800f24e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f252:	6866      	ldr	r6, [r4, #4]
 800f254:	60a6      	str	r6, [r4, #8]
 800f256:	2e00      	cmp	r6, #0
 800f258:	bfa2      	ittt	ge
 800f25a:	6821      	ldrge	r1, [r4, #0]
 800f25c:	f021 0104 	bicge.w	r1, r1, #4
 800f260:	6021      	strge	r1, [r4, #0]
 800f262:	b90d      	cbnz	r5, 800f268 <_printf_i+0x110>
 800f264:	2e00      	cmp	r6, #0
 800f266:	d04b      	beq.n	800f300 <_printf_i+0x1a8>
 800f268:	4616      	mov	r6, r2
 800f26a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f26e:	fb03 5711 	mls	r7, r3, r1, r5
 800f272:	5dc7      	ldrb	r7, [r0, r7]
 800f274:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f278:	462f      	mov	r7, r5
 800f27a:	42bb      	cmp	r3, r7
 800f27c:	460d      	mov	r5, r1
 800f27e:	d9f4      	bls.n	800f26a <_printf_i+0x112>
 800f280:	2b08      	cmp	r3, #8
 800f282:	d10b      	bne.n	800f29c <_printf_i+0x144>
 800f284:	6823      	ldr	r3, [r4, #0]
 800f286:	07df      	lsls	r7, r3, #31
 800f288:	d508      	bpl.n	800f29c <_printf_i+0x144>
 800f28a:	6923      	ldr	r3, [r4, #16]
 800f28c:	6861      	ldr	r1, [r4, #4]
 800f28e:	4299      	cmp	r1, r3
 800f290:	bfde      	ittt	le
 800f292:	2330      	movle	r3, #48	@ 0x30
 800f294:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f298:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f29c:	1b92      	subs	r2, r2, r6
 800f29e:	6122      	str	r2, [r4, #16]
 800f2a0:	f8cd a000 	str.w	sl, [sp]
 800f2a4:	464b      	mov	r3, r9
 800f2a6:	aa03      	add	r2, sp, #12
 800f2a8:	4621      	mov	r1, r4
 800f2aa:	4640      	mov	r0, r8
 800f2ac:	f7ff fee6 	bl	800f07c <_printf_common>
 800f2b0:	3001      	adds	r0, #1
 800f2b2:	d14a      	bne.n	800f34a <_printf_i+0x1f2>
 800f2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b8:	b004      	add	sp, #16
 800f2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2be:	6823      	ldr	r3, [r4, #0]
 800f2c0:	f043 0320 	orr.w	r3, r3, #32
 800f2c4:	6023      	str	r3, [r4, #0]
 800f2c6:	4833      	ldr	r0, [pc, #204]	@ (800f394 <_printf_i+0x23c>)
 800f2c8:	2778      	movs	r7, #120	@ 0x78
 800f2ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f2ce:	6823      	ldr	r3, [r4, #0]
 800f2d0:	6831      	ldr	r1, [r6, #0]
 800f2d2:	061f      	lsls	r7, r3, #24
 800f2d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800f2d8:	d402      	bmi.n	800f2e0 <_printf_i+0x188>
 800f2da:	065f      	lsls	r7, r3, #25
 800f2dc:	bf48      	it	mi
 800f2de:	b2ad      	uxthmi	r5, r5
 800f2e0:	6031      	str	r1, [r6, #0]
 800f2e2:	07d9      	lsls	r1, r3, #31
 800f2e4:	bf44      	itt	mi
 800f2e6:	f043 0320 	orrmi.w	r3, r3, #32
 800f2ea:	6023      	strmi	r3, [r4, #0]
 800f2ec:	b11d      	cbz	r5, 800f2f6 <_printf_i+0x19e>
 800f2ee:	2310      	movs	r3, #16
 800f2f0:	e7ac      	b.n	800f24c <_printf_i+0xf4>
 800f2f2:	4827      	ldr	r0, [pc, #156]	@ (800f390 <_printf_i+0x238>)
 800f2f4:	e7e9      	b.n	800f2ca <_printf_i+0x172>
 800f2f6:	6823      	ldr	r3, [r4, #0]
 800f2f8:	f023 0320 	bic.w	r3, r3, #32
 800f2fc:	6023      	str	r3, [r4, #0]
 800f2fe:	e7f6      	b.n	800f2ee <_printf_i+0x196>
 800f300:	4616      	mov	r6, r2
 800f302:	e7bd      	b.n	800f280 <_printf_i+0x128>
 800f304:	6833      	ldr	r3, [r6, #0]
 800f306:	6825      	ldr	r5, [r4, #0]
 800f308:	6961      	ldr	r1, [r4, #20]
 800f30a:	1d18      	adds	r0, r3, #4
 800f30c:	6030      	str	r0, [r6, #0]
 800f30e:	062e      	lsls	r6, r5, #24
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	d501      	bpl.n	800f318 <_printf_i+0x1c0>
 800f314:	6019      	str	r1, [r3, #0]
 800f316:	e002      	b.n	800f31e <_printf_i+0x1c6>
 800f318:	0668      	lsls	r0, r5, #25
 800f31a:	d5fb      	bpl.n	800f314 <_printf_i+0x1bc>
 800f31c:	8019      	strh	r1, [r3, #0]
 800f31e:	2300      	movs	r3, #0
 800f320:	6123      	str	r3, [r4, #16]
 800f322:	4616      	mov	r6, r2
 800f324:	e7bc      	b.n	800f2a0 <_printf_i+0x148>
 800f326:	6833      	ldr	r3, [r6, #0]
 800f328:	1d1a      	adds	r2, r3, #4
 800f32a:	6032      	str	r2, [r6, #0]
 800f32c:	681e      	ldr	r6, [r3, #0]
 800f32e:	6862      	ldr	r2, [r4, #4]
 800f330:	2100      	movs	r1, #0
 800f332:	4630      	mov	r0, r6
 800f334:	f7f0 ffec 	bl	8000310 <memchr>
 800f338:	b108      	cbz	r0, 800f33e <_printf_i+0x1e6>
 800f33a:	1b80      	subs	r0, r0, r6
 800f33c:	6060      	str	r0, [r4, #4]
 800f33e:	6863      	ldr	r3, [r4, #4]
 800f340:	6123      	str	r3, [r4, #16]
 800f342:	2300      	movs	r3, #0
 800f344:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f348:	e7aa      	b.n	800f2a0 <_printf_i+0x148>
 800f34a:	6923      	ldr	r3, [r4, #16]
 800f34c:	4632      	mov	r2, r6
 800f34e:	4649      	mov	r1, r9
 800f350:	4640      	mov	r0, r8
 800f352:	47d0      	blx	sl
 800f354:	3001      	adds	r0, #1
 800f356:	d0ad      	beq.n	800f2b4 <_printf_i+0x15c>
 800f358:	6823      	ldr	r3, [r4, #0]
 800f35a:	079b      	lsls	r3, r3, #30
 800f35c:	d413      	bmi.n	800f386 <_printf_i+0x22e>
 800f35e:	68e0      	ldr	r0, [r4, #12]
 800f360:	9b03      	ldr	r3, [sp, #12]
 800f362:	4298      	cmp	r0, r3
 800f364:	bfb8      	it	lt
 800f366:	4618      	movlt	r0, r3
 800f368:	e7a6      	b.n	800f2b8 <_printf_i+0x160>
 800f36a:	2301      	movs	r3, #1
 800f36c:	4632      	mov	r2, r6
 800f36e:	4649      	mov	r1, r9
 800f370:	4640      	mov	r0, r8
 800f372:	47d0      	blx	sl
 800f374:	3001      	adds	r0, #1
 800f376:	d09d      	beq.n	800f2b4 <_printf_i+0x15c>
 800f378:	3501      	adds	r5, #1
 800f37a:	68e3      	ldr	r3, [r4, #12]
 800f37c:	9903      	ldr	r1, [sp, #12]
 800f37e:	1a5b      	subs	r3, r3, r1
 800f380:	42ab      	cmp	r3, r5
 800f382:	dcf2      	bgt.n	800f36a <_printf_i+0x212>
 800f384:	e7eb      	b.n	800f35e <_printf_i+0x206>
 800f386:	2500      	movs	r5, #0
 800f388:	f104 0619 	add.w	r6, r4, #25
 800f38c:	e7f5      	b.n	800f37a <_printf_i+0x222>
 800f38e:	bf00      	nop
 800f390:	08012d70 	.word	0x08012d70
 800f394:	08012d81 	.word	0x08012d81

0800f398 <_scanf_float>:
 800f398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39c:	b087      	sub	sp, #28
 800f39e:	4617      	mov	r7, r2
 800f3a0:	9303      	str	r3, [sp, #12]
 800f3a2:	688b      	ldr	r3, [r1, #8]
 800f3a4:	1e5a      	subs	r2, r3, #1
 800f3a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f3aa:	bf81      	itttt	hi
 800f3ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f3b0:	eb03 0b05 	addhi.w	fp, r3, r5
 800f3b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f3b8:	608b      	strhi	r3, [r1, #8]
 800f3ba:	680b      	ldr	r3, [r1, #0]
 800f3bc:	460a      	mov	r2, r1
 800f3be:	f04f 0500 	mov.w	r5, #0
 800f3c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f3c6:	f842 3b1c 	str.w	r3, [r2], #28
 800f3ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f3ce:	4680      	mov	r8, r0
 800f3d0:	460c      	mov	r4, r1
 800f3d2:	bf98      	it	ls
 800f3d4:	f04f 0b00 	movls.w	fp, #0
 800f3d8:	9201      	str	r2, [sp, #4]
 800f3da:	4616      	mov	r6, r2
 800f3dc:	46aa      	mov	sl, r5
 800f3de:	46a9      	mov	r9, r5
 800f3e0:	9502      	str	r5, [sp, #8]
 800f3e2:	68a2      	ldr	r2, [r4, #8]
 800f3e4:	b152      	cbz	r2, 800f3fc <_scanf_float+0x64>
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	2b4e      	cmp	r3, #78	@ 0x4e
 800f3ec:	d864      	bhi.n	800f4b8 <_scanf_float+0x120>
 800f3ee:	2b40      	cmp	r3, #64	@ 0x40
 800f3f0:	d83c      	bhi.n	800f46c <_scanf_float+0xd4>
 800f3f2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f3f6:	b2c8      	uxtb	r0, r1
 800f3f8:	280e      	cmp	r0, #14
 800f3fa:	d93a      	bls.n	800f472 <_scanf_float+0xda>
 800f3fc:	f1b9 0f00 	cmp.w	r9, #0
 800f400:	d003      	beq.n	800f40a <_scanf_float+0x72>
 800f402:	6823      	ldr	r3, [r4, #0]
 800f404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f408:	6023      	str	r3, [r4, #0]
 800f40a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f40e:	f1ba 0f01 	cmp.w	sl, #1
 800f412:	f200 8117 	bhi.w	800f644 <_scanf_float+0x2ac>
 800f416:	9b01      	ldr	r3, [sp, #4]
 800f418:	429e      	cmp	r6, r3
 800f41a:	f200 8108 	bhi.w	800f62e <_scanf_float+0x296>
 800f41e:	2001      	movs	r0, #1
 800f420:	b007      	add	sp, #28
 800f422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f426:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f42a:	2a0d      	cmp	r2, #13
 800f42c:	d8e6      	bhi.n	800f3fc <_scanf_float+0x64>
 800f42e:	a101      	add	r1, pc, #4	@ (adr r1, 800f434 <_scanf_float+0x9c>)
 800f430:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f434:	0800f57b 	.word	0x0800f57b
 800f438:	0800f3fd 	.word	0x0800f3fd
 800f43c:	0800f3fd 	.word	0x0800f3fd
 800f440:	0800f3fd 	.word	0x0800f3fd
 800f444:	0800f5db 	.word	0x0800f5db
 800f448:	0800f5b3 	.word	0x0800f5b3
 800f44c:	0800f3fd 	.word	0x0800f3fd
 800f450:	0800f3fd 	.word	0x0800f3fd
 800f454:	0800f589 	.word	0x0800f589
 800f458:	0800f3fd 	.word	0x0800f3fd
 800f45c:	0800f3fd 	.word	0x0800f3fd
 800f460:	0800f3fd 	.word	0x0800f3fd
 800f464:	0800f3fd 	.word	0x0800f3fd
 800f468:	0800f541 	.word	0x0800f541
 800f46c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f470:	e7db      	b.n	800f42a <_scanf_float+0x92>
 800f472:	290e      	cmp	r1, #14
 800f474:	d8c2      	bhi.n	800f3fc <_scanf_float+0x64>
 800f476:	a001      	add	r0, pc, #4	@ (adr r0, 800f47c <_scanf_float+0xe4>)
 800f478:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f47c:	0800f531 	.word	0x0800f531
 800f480:	0800f3fd 	.word	0x0800f3fd
 800f484:	0800f531 	.word	0x0800f531
 800f488:	0800f5c7 	.word	0x0800f5c7
 800f48c:	0800f3fd 	.word	0x0800f3fd
 800f490:	0800f4d9 	.word	0x0800f4d9
 800f494:	0800f517 	.word	0x0800f517
 800f498:	0800f517 	.word	0x0800f517
 800f49c:	0800f517 	.word	0x0800f517
 800f4a0:	0800f517 	.word	0x0800f517
 800f4a4:	0800f517 	.word	0x0800f517
 800f4a8:	0800f517 	.word	0x0800f517
 800f4ac:	0800f517 	.word	0x0800f517
 800f4b0:	0800f517 	.word	0x0800f517
 800f4b4:	0800f517 	.word	0x0800f517
 800f4b8:	2b6e      	cmp	r3, #110	@ 0x6e
 800f4ba:	d809      	bhi.n	800f4d0 <_scanf_float+0x138>
 800f4bc:	2b60      	cmp	r3, #96	@ 0x60
 800f4be:	d8b2      	bhi.n	800f426 <_scanf_float+0x8e>
 800f4c0:	2b54      	cmp	r3, #84	@ 0x54
 800f4c2:	d07b      	beq.n	800f5bc <_scanf_float+0x224>
 800f4c4:	2b59      	cmp	r3, #89	@ 0x59
 800f4c6:	d199      	bne.n	800f3fc <_scanf_float+0x64>
 800f4c8:	2d07      	cmp	r5, #7
 800f4ca:	d197      	bne.n	800f3fc <_scanf_float+0x64>
 800f4cc:	2508      	movs	r5, #8
 800f4ce:	e02c      	b.n	800f52a <_scanf_float+0x192>
 800f4d0:	2b74      	cmp	r3, #116	@ 0x74
 800f4d2:	d073      	beq.n	800f5bc <_scanf_float+0x224>
 800f4d4:	2b79      	cmp	r3, #121	@ 0x79
 800f4d6:	e7f6      	b.n	800f4c6 <_scanf_float+0x12e>
 800f4d8:	6821      	ldr	r1, [r4, #0]
 800f4da:	05c8      	lsls	r0, r1, #23
 800f4dc:	d51b      	bpl.n	800f516 <_scanf_float+0x17e>
 800f4de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f4e2:	6021      	str	r1, [r4, #0]
 800f4e4:	f109 0901 	add.w	r9, r9, #1
 800f4e8:	f1bb 0f00 	cmp.w	fp, #0
 800f4ec:	d003      	beq.n	800f4f6 <_scanf_float+0x15e>
 800f4ee:	3201      	adds	r2, #1
 800f4f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f4f4:	60a2      	str	r2, [r4, #8]
 800f4f6:	68a3      	ldr	r3, [r4, #8]
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	60a3      	str	r3, [r4, #8]
 800f4fc:	6923      	ldr	r3, [r4, #16]
 800f4fe:	3301      	adds	r3, #1
 800f500:	6123      	str	r3, [r4, #16]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	3b01      	subs	r3, #1
 800f506:	2b00      	cmp	r3, #0
 800f508:	607b      	str	r3, [r7, #4]
 800f50a:	f340 8087 	ble.w	800f61c <_scanf_float+0x284>
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	3301      	adds	r3, #1
 800f512:	603b      	str	r3, [r7, #0]
 800f514:	e765      	b.n	800f3e2 <_scanf_float+0x4a>
 800f516:	eb1a 0105 	adds.w	r1, sl, r5
 800f51a:	f47f af6f 	bne.w	800f3fc <_scanf_float+0x64>
 800f51e:	6822      	ldr	r2, [r4, #0]
 800f520:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f524:	6022      	str	r2, [r4, #0]
 800f526:	460d      	mov	r5, r1
 800f528:	468a      	mov	sl, r1
 800f52a:	f806 3b01 	strb.w	r3, [r6], #1
 800f52e:	e7e2      	b.n	800f4f6 <_scanf_float+0x15e>
 800f530:	6822      	ldr	r2, [r4, #0]
 800f532:	0610      	lsls	r0, r2, #24
 800f534:	f57f af62 	bpl.w	800f3fc <_scanf_float+0x64>
 800f538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f53c:	6022      	str	r2, [r4, #0]
 800f53e:	e7f4      	b.n	800f52a <_scanf_float+0x192>
 800f540:	f1ba 0f00 	cmp.w	sl, #0
 800f544:	d10e      	bne.n	800f564 <_scanf_float+0x1cc>
 800f546:	f1b9 0f00 	cmp.w	r9, #0
 800f54a:	d10e      	bne.n	800f56a <_scanf_float+0x1d2>
 800f54c:	6822      	ldr	r2, [r4, #0]
 800f54e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f552:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f556:	d108      	bne.n	800f56a <_scanf_float+0x1d2>
 800f558:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f55c:	6022      	str	r2, [r4, #0]
 800f55e:	f04f 0a01 	mov.w	sl, #1
 800f562:	e7e2      	b.n	800f52a <_scanf_float+0x192>
 800f564:	f1ba 0f02 	cmp.w	sl, #2
 800f568:	d055      	beq.n	800f616 <_scanf_float+0x27e>
 800f56a:	2d01      	cmp	r5, #1
 800f56c:	d002      	beq.n	800f574 <_scanf_float+0x1dc>
 800f56e:	2d04      	cmp	r5, #4
 800f570:	f47f af44 	bne.w	800f3fc <_scanf_float+0x64>
 800f574:	3501      	adds	r5, #1
 800f576:	b2ed      	uxtb	r5, r5
 800f578:	e7d7      	b.n	800f52a <_scanf_float+0x192>
 800f57a:	f1ba 0f01 	cmp.w	sl, #1
 800f57e:	f47f af3d 	bne.w	800f3fc <_scanf_float+0x64>
 800f582:	f04f 0a02 	mov.w	sl, #2
 800f586:	e7d0      	b.n	800f52a <_scanf_float+0x192>
 800f588:	b97d      	cbnz	r5, 800f5aa <_scanf_float+0x212>
 800f58a:	f1b9 0f00 	cmp.w	r9, #0
 800f58e:	f47f af38 	bne.w	800f402 <_scanf_float+0x6a>
 800f592:	6822      	ldr	r2, [r4, #0]
 800f594:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f598:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f59c:	f040 8101 	bne.w	800f7a2 <_scanf_float+0x40a>
 800f5a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f5a4:	6022      	str	r2, [r4, #0]
 800f5a6:	2501      	movs	r5, #1
 800f5a8:	e7bf      	b.n	800f52a <_scanf_float+0x192>
 800f5aa:	2d03      	cmp	r5, #3
 800f5ac:	d0e2      	beq.n	800f574 <_scanf_float+0x1dc>
 800f5ae:	2d05      	cmp	r5, #5
 800f5b0:	e7de      	b.n	800f570 <_scanf_float+0x1d8>
 800f5b2:	2d02      	cmp	r5, #2
 800f5b4:	f47f af22 	bne.w	800f3fc <_scanf_float+0x64>
 800f5b8:	2503      	movs	r5, #3
 800f5ba:	e7b6      	b.n	800f52a <_scanf_float+0x192>
 800f5bc:	2d06      	cmp	r5, #6
 800f5be:	f47f af1d 	bne.w	800f3fc <_scanf_float+0x64>
 800f5c2:	2507      	movs	r5, #7
 800f5c4:	e7b1      	b.n	800f52a <_scanf_float+0x192>
 800f5c6:	6822      	ldr	r2, [r4, #0]
 800f5c8:	0591      	lsls	r1, r2, #22
 800f5ca:	f57f af17 	bpl.w	800f3fc <_scanf_float+0x64>
 800f5ce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f5d2:	6022      	str	r2, [r4, #0]
 800f5d4:	f8cd 9008 	str.w	r9, [sp, #8]
 800f5d8:	e7a7      	b.n	800f52a <_scanf_float+0x192>
 800f5da:	6822      	ldr	r2, [r4, #0]
 800f5dc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f5e0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f5e4:	d006      	beq.n	800f5f4 <_scanf_float+0x25c>
 800f5e6:	0550      	lsls	r0, r2, #21
 800f5e8:	f57f af08 	bpl.w	800f3fc <_scanf_float+0x64>
 800f5ec:	f1b9 0f00 	cmp.w	r9, #0
 800f5f0:	f000 80d7 	beq.w	800f7a2 <_scanf_float+0x40a>
 800f5f4:	0591      	lsls	r1, r2, #22
 800f5f6:	bf58      	it	pl
 800f5f8:	9902      	ldrpl	r1, [sp, #8]
 800f5fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f5fe:	bf58      	it	pl
 800f600:	eba9 0101 	subpl.w	r1, r9, r1
 800f604:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f608:	bf58      	it	pl
 800f60a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f60e:	6022      	str	r2, [r4, #0]
 800f610:	f04f 0900 	mov.w	r9, #0
 800f614:	e789      	b.n	800f52a <_scanf_float+0x192>
 800f616:	f04f 0a03 	mov.w	sl, #3
 800f61a:	e786      	b.n	800f52a <_scanf_float+0x192>
 800f61c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f620:	4639      	mov	r1, r7
 800f622:	4640      	mov	r0, r8
 800f624:	4798      	blx	r3
 800f626:	2800      	cmp	r0, #0
 800f628:	f43f aedb 	beq.w	800f3e2 <_scanf_float+0x4a>
 800f62c:	e6e6      	b.n	800f3fc <_scanf_float+0x64>
 800f62e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f632:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f636:	463a      	mov	r2, r7
 800f638:	4640      	mov	r0, r8
 800f63a:	4798      	blx	r3
 800f63c:	6923      	ldr	r3, [r4, #16]
 800f63e:	3b01      	subs	r3, #1
 800f640:	6123      	str	r3, [r4, #16]
 800f642:	e6e8      	b.n	800f416 <_scanf_float+0x7e>
 800f644:	1e6b      	subs	r3, r5, #1
 800f646:	2b06      	cmp	r3, #6
 800f648:	d824      	bhi.n	800f694 <_scanf_float+0x2fc>
 800f64a:	2d02      	cmp	r5, #2
 800f64c:	d836      	bhi.n	800f6bc <_scanf_float+0x324>
 800f64e:	9b01      	ldr	r3, [sp, #4]
 800f650:	429e      	cmp	r6, r3
 800f652:	f67f aee4 	bls.w	800f41e <_scanf_float+0x86>
 800f656:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f65a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f65e:	463a      	mov	r2, r7
 800f660:	4640      	mov	r0, r8
 800f662:	4798      	blx	r3
 800f664:	6923      	ldr	r3, [r4, #16]
 800f666:	3b01      	subs	r3, #1
 800f668:	6123      	str	r3, [r4, #16]
 800f66a:	e7f0      	b.n	800f64e <_scanf_float+0x2b6>
 800f66c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f670:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f674:	463a      	mov	r2, r7
 800f676:	4640      	mov	r0, r8
 800f678:	4798      	blx	r3
 800f67a:	6923      	ldr	r3, [r4, #16]
 800f67c:	3b01      	subs	r3, #1
 800f67e:	6123      	str	r3, [r4, #16]
 800f680:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f684:	fa5f fa8a 	uxtb.w	sl, sl
 800f688:	f1ba 0f02 	cmp.w	sl, #2
 800f68c:	d1ee      	bne.n	800f66c <_scanf_float+0x2d4>
 800f68e:	3d03      	subs	r5, #3
 800f690:	b2ed      	uxtb	r5, r5
 800f692:	1b76      	subs	r6, r6, r5
 800f694:	6823      	ldr	r3, [r4, #0]
 800f696:	05da      	lsls	r2, r3, #23
 800f698:	d530      	bpl.n	800f6fc <_scanf_float+0x364>
 800f69a:	055b      	lsls	r3, r3, #21
 800f69c:	d511      	bpl.n	800f6c2 <_scanf_float+0x32a>
 800f69e:	9b01      	ldr	r3, [sp, #4]
 800f6a0:	429e      	cmp	r6, r3
 800f6a2:	f67f aebc 	bls.w	800f41e <_scanf_float+0x86>
 800f6a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f6aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f6ae:	463a      	mov	r2, r7
 800f6b0:	4640      	mov	r0, r8
 800f6b2:	4798      	blx	r3
 800f6b4:	6923      	ldr	r3, [r4, #16]
 800f6b6:	3b01      	subs	r3, #1
 800f6b8:	6123      	str	r3, [r4, #16]
 800f6ba:	e7f0      	b.n	800f69e <_scanf_float+0x306>
 800f6bc:	46aa      	mov	sl, r5
 800f6be:	46b3      	mov	fp, r6
 800f6c0:	e7de      	b.n	800f680 <_scanf_float+0x2e8>
 800f6c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f6c6:	6923      	ldr	r3, [r4, #16]
 800f6c8:	2965      	cmp	r1, #101	@ 0x65
 800f6ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800f6ce:	f106 35ff 	add.w	r5, r6, #4294967295
 800f6d2:	6123      	str	r3, [r4, #16]
 800f6d4:	d00c      	beq.n	800f6f0 <_scanf_float+0x358>
 800f6d6:	2945      	cmp	r1, #69	@ 0x45
 800f6d8:	d00a      	beq.n	800f6f0 <_scanf_float+0x358>
 800f6da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f6de:	463a      	mov	r2, r7
 800f6e0:	4640      	mov	r0, r8
 800f6e2:	4798      	blx	r3
 800f6e4:	6923      	ldr	r3, [r4, #16]
 800f6e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f6ea:	3b01      	subs	r3, #1
 800f6ec:	1eb5      	subs	r5, r6, #2
 800f6ee:	6123      	str	r3, [r4, #16]
 800f6f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f6f4:	463a      	mov	r2, r7
 800f6f6:	4640      	mov	r0, r8
 800f6f8:	4798      	blx	r3
 800f6fa:	462e      	mov	r6, r5
 800f6fc:	6822      	ldr	r2, [r4, #0]
 800f6fe:	f012 0210 	ands.w	r2, r2, #16
 800f702:	d001      	beq.n	800f708 <_scanf_float+0x370>
 800f704:	2000      	movs	r0, #0
 800f706:	e68b      	b.n	800f420 <_scanf_float+0x88>
 800f708:	7032      	strb	r2, [r6, #0]
 800f70a:	6823      	ldr	r3, [r4, #0]
 800f70c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f710:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f714:	d11a      	bne.n	800f74c <_scanf_float+0x3b4>
 800f716:	9b02      	ldr	r3, [sp, #8]
 800f718:	454b      	cmp	r3, r9
 800f71a:	eba3 0209 	sub.w	r2, r3, r9
 800f71e:	d121      	bne.n	800f764 <_scanf_float+0x3cc>
 800f720:	9901      	ldr	r1, [sp, #4]
 800f722:	2200      	movs	r2, #0
 800f724:	4640      	mov	r0, r8
 800f726:	f7ff f9f9 	bl	800eb1c <_strtod_r>
 800f72a:	9b03      	ldr	r3, [sp, #12]
 800f72c:	6821      	ldr	r1, [r4, #0]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f011 0f02 	tst.w	r1, #2
 800f734:	f103 0204 	add.w	r2, r3, #4
 800f738:	d01f      	beq.n	800f77a <_scanf_float+0x3e2>
 800f73a:	9903      	ldr	r1, [sp, #12]
 800f73c:	600a      	str	r2, [r1, #0]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	ed83 0b00 	vstr	d0, [r3]
 800f744:	68e3      	ldr	r3, [r4, #12]
 800f746:	3301      	adds	r3, #1
 800f748:	60e3      	str	r3, [r4, #12]
 800f74a:	e7db      	b.n	800f704 <_scanf_float+0x36c>
 800f74c:	9b04      	ldr	r3, [sp, #16]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d0e6      	beq.n	800f720 <_scanf_float+0x388>
 800f752:	9905      	ldr	r1, [sp, #20]
 800f754:	230a      	movs	r3, #10
 800f756:	3101      	adds	r1, #1
 800f758:	4640      	mov	r0, r8
 800f75a:	f002 f8e7 	bl	801192c <_strtol_r>
 800f75e:	9b04      	ldr	r3, [sp, #16]
 800f760:	9e05      	ldr	r6, [sp, #20]
 800f762:	1ac2      	subs	r2, r0, r3
 800f764:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f768:	429e      	cmp	r6, r3
 800f76a:	bf28      	it	cs
 800f76c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f770:	490d      	ldr	r1, [pc, #52]	@ (800f7a8 <_scanf_float+0x410>)
 800f772:	4630      	mov	r0, r6
 800f774:	f000 f8de 	bl	800f934 <siprintf>
 800f778:	e7d2      	b.n	800f720 <_scanf_float+0x388>
 800f77a:	f011 0f04 	tst.w	r1, #4
 800f77e:	9903      	ldr	r1, [sp, #12]
 800f780:	600a      	str	r2, [r1, #0]
 800f782:	d1dc      	bne.n	800f73e <_scanf_float+0x3a6>
 800f784:	eeb4 0b40 	vcmp.f64	d0, d0
 800f788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f78c:	681d      	ldr	r5, [r3, #0]
 800f78e:	d705      	bvc.n	800f79c <_scanf_float+0x404>
 800f790:	4806      	ldr	r0, [pc, #24]	@ (800f7ac <_scanf_float+0x414>)
 800f792:	f000 fa25 	bl	800fbe0 <nanf>
 800f796:	ed85 0a00 	vstr	s0, [r5]
 800f79a:	e7d3      	b.n	800f744 <_scanf_float+0x3ac>
 800f79c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f7a0:	e7f9      	b.n	800f796 <_scanf_float+0x3fe>
 800f7a2:	f04f 0900 	mov.w	r9, #0
 800f7a6:	e630      	b.n	800f40a <_scanf_float+0x72>
 800f7a8:	08012d92 	.word	0x08012d92
 800f7ac:	08013150 	.word	0x08013150

0800f7b0 <std>:
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	b510      	push	{r4, lr}
 800f7b4:	4604      	mov	r4, r0
 800f7b6:	e9c0 3300 	strd	r3, r3, [r0]
 800f7ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f7be:	6083      	str	r3, [r0, #8]
 800f7c0:	8181      	strh	r1, [r0, #12]
 800f7c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800f7c4:	81c2      	strh	r2, [r0, #14]
 800f7c6:	6183      	str	r3, [r0, #24]
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	2208      	movs	r2, #8
 800f7cc:	305c      	adds	r0, #92	@ 0x5c
 800f7ce:	f000 f940 	bl	800fa52 <memset>
 800f7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f808 <std+0x58>)
 800f7d4:	6263      	str	r3, [r4, #36]	@ 0x24
 800f7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800f80c <std+0x5c>)
 800f7d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f7da:	4b0d      	ldr	r3, [pc, #52]	@ (800f810 <std+0x60>)
 800f7dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f7de:	4b0d      	ldr	r3, [pc, #52]	@ (800f814 <std+0x64>)
 800f7e0:	6323      	str	r3, [r4, #48]	@ 0x30
 800f7e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f818 <std+0x68>)
 800f7e4:	6224      	str	r4, [r4, #32]
 800f7e6:	429c      	cmp	r4, r3
 800f7e8:	d006      	beq.n	800f7f8 <std+0x48>
 800f7ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f7ee:	4294      	cmp	r4, r2
 800f7f0:	d002      	beq.n	800f7f8 <std+0x48>
 800f7f2:	33d0      	adds	r3, #208	@ 0xd0
 800f7f4:	429c      	cmp	r4, r3
 800f7f6:	d105      	bne.n	800f804 <std+0x54>
 800f7f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f800:	f000 b9d2 	b.w	800fba8 <__retarget_lock_init_recursive>
 800f804:	bd10      	pop	{r4, pc}
 800f806:	bf00      	nop
 800f808:	0800f9c9 	.word	0x0800f9c9
 800f80c:	0800f9ef 	.word	0x0800f9ef
 800f810:	0800fa27 	.word	0x0800fa27
 800f814:	0800fa4b 	.word	0x0800fa4b
 800f818:	24000d2c 	.word	0x24000d2c

0800f81c <stdio_exit_handler>:
 800f81c:	4a02      	ldr	r2, [pc, #8]	@ (800f828 <stdio_exit_handler+0xc>)
 800f81e:	4903      	ldr	r1, [pc, #12]	@ (800f82c <stdio_exit_handler+0x10>)
 800f820:	4803      	ldr	r0, [pc, #12]	@ (800f830 <stdio_exit_handler+0x14>)
 800f822:	f000 b869 	b.w	800f8f8 <_fwalk_sglue>
 800f826:	bf00      	nop
 800f828:	2400006c 	.word	0x2400006c
 800f82c:	08012335 	.word	0x08012335
 800f830:	240001e8 	.word	0x240001e8

0800f834 <cleanup_stdio>:
 800f834:	6841      	ldr	r1, [r0, #4]
 800f836:	4b0c      	ldr	r3, [pc, #48]	@ (800f868 <cleanup_stdio+0x34>)
 800f838:	4299      	cmp	r1, r3
 800f83a:	b510      	push	{r4, lr}
 800f83c:	4604      	mov	r4, r0
 800f83e:	d001      	beq.n	800f844 <cleanup_stdio+0x10>
 800f840:	f002 fd78 	bl	8012334 <_fflush_r>
 800f844:	68a1      	ldr	r1, [r4, #8]
 800f846:	4b09      	ldr	r3, [pc, #36]	@ (800f86c <cleanup_stdio+0x38>)
 800f848:	4299      	cmp	r1, r3
 800f84a:	d002      	beq.n	800f852 <cleanup_stdio+0x1e>
 800f84c:	4620      	mov	r0, r4
 800f84e:	f002 fd71 	bl	8012334 <_fflush_r>
 800f852:	68e1      	ldr	r1, [r4, #12]
 800f854:	4b06      	ldr	r3, [pc, #24]	@ (800f870 <cleanup_stdio+0x3c>)
 800f856:	4299      	cmp	r1, r3
 800f858:	d004      	beq.n	800f864 <cleanup_stdio+0x30>
 800f85a:	4620      	mov	r0, r4
 800f85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f860:	f002 bd68 	b.w	8012334 <_fflush_r>
 800f864:	bd10      	pop	{r4, pc}
 800f866:	bf00      	nop
 800f868:	24000d2c 	.word	0x24000d2c
 800f86c:	24000d94 	.word	0x24000d94
 800f870:	24000dfc 	.word	0x24000dfc

0800f874 <global_stdio_init.part.0>:
 800f874:	b510      	push	{r4, lr}
 800f876:	4b0b      	ldr	r3, [pc, #44]	@ (800f8a4 <global_stdio_init.part.0+0x30>)
 800f878:	4c0b      	ldr	r4, [pc, #44]	@ (800f8a8 <global_stdio_init.part.0+0x34>)
 800f87a:	4a0c      	ldr	r2, [pc, #48]	@ (800f8ac <global_stdio_init.part.0+0x38>)
 800f87c:	601a      	str	r2, [r3, #0]
 800f87e:	4620      	mov	r0, r4
 800f880:	2200      	movs	r2, #0
 800f882:	2104      	movs	r1, #4
 800f884:	f7ff ff94 	bl	800f7b0 <std>
 800f888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f88c:	2201      	movs	r2, #1
 800f88e:	2109      	movs	r1, #9
 800f890:	f7ff ff8e 	bl	800f7b0 <std>
 800f894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f898:	2202      	movs	r2, #2
 800f89a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f89e:	2112      	movs	r1, #18
 800f8a0:	f7ff bf86 	b.w	800f7b0 <std>
 800f8a4:	24000e64 	.word	0x24000e64
 800f8a8:	24000d2c 	.word	0x24000d2c
 800f8ac:	0800f81d 	.word	0x0800f81d

0800f8b0 <__sfp_lock_acquire>:
 800f8b0:	4801      	ldr	r0, [pc, #4]	@ (800f8b8 <__sfp_lock_acquire+0x8>)
 800f8b2:	f000 b97a 	b.w	800fbaa <__retarget_lock_acquire_recursive>
 800f8b6:	bf00      	nop
 800f8b8:	24000e6d 	.word	0x24000e6d

0800f8bc <__sfp_lock_release>:
 800f8bc:	4801      	ldr	r0, [pc, #4]	@ (800f8c4 <__sfp_lock_release+0x8>)
 800f8be:	f000 b975 	b.w	800fbac <__retarget_lock_release_recursive>
 800f8c2:	bf00      	nop
 800f8c4:	24000e6d 	.word	0x24000e6d

0800f8c8 <__sinit>:
 800f8c8:	b510      	push	{r4, lr}
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	f7ff fff0 	bl	800f8b0 <__sfp_lock_acquire>
 800f8d0:	6a23      	ldr	r3, [r4, #32]
 800f8d2:	b11b      	cbz	r3, 800f8dc <__sinit+0x14>
 800f8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8d8:	f7ff bff0 	b.w	800f8bc <__sfp_lock_release>
 800f8dc:	4b04      	ldr	r3, [pc, #16]	@ (800f8f0 <__sinit+0x28>)
 800f8de:	6223      	str	r3, [r4, #32]
 800f8e0:	4b04      	ldr	r3, [pc, #16]	@ (800f8f4 <__sinit+0x2c>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d1f5      	bne.n	800f8d4 <__sinit+0xc>
 800f8e8:	f7ff ffc4 	bl	800f874 <global_stdio_init.part.0>
 800f8ec:	e7f2      	b.n	800f8d4 <__sinit+0xc>
 800f8ee:	bf00      	nop
 800f8f0:	0800f835 	.word	0x0800f835
 800f8f4:	24000e64 	.word	0x24000e64

0800f8f8 <_fwalk_sglue>:
 800f8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8fc:	4607      	mov	r7, r0
 800f8fe:	4688      	mov	r8, r1
 800f900:	4614      	mov	r4, r2
 800f902:	2600      	movs	r6, #0
 800f904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f908:	f1b9 0901 	subs.w	r9, r9, #1
 800f90c:	d505      	bpl.n	800f91a <_fwalk_sglue+0x22>
 800f90e:	6824      	ldr	r4, [r4, #0]
 800f910:	2c00      	cmp	r4, #0
 800f912:	d1f7      	bne.n	800f904 <_fwalk_sglue+0xc>
 800f914:	4630      	mov	r0, r6
 800f916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f91a:	89ab      	ldrh	r3, [r5, #12]
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d907      	bls.n	800f930 <_fwalk_sglue+0x38>
 800f920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f924:	3301      	adds	r3, #1
 800f926:	d003      	beq.n	800f930 <_fwalk_sglue+0x38>
 800f928:	4629      	mov	r1, r5
 800f92a:	4638      	mov	r0, r7
 800f92c:	47c0      	blx	r8
 800f92e:	4306      	orrs	r6, r0
 800f930:	3568      	adds	r5, #104	@ 0x68
 800f932:	e7e9      	b.n	800f908 <_fwalk_sglue+0x10>

0800f934 <siprintf>:
 800f934:	b40e      	push	{r1, r2, r3}
 800f936:	b500      	push	{lr}
 800f938:	b09c      	sub	sp, #112	@ 0x70
 800f93a:	ab1d      	add	r3, sp, #116	@ 0x74
 800f93c:	9002      	str	r0, [sp, #8]
 800f93e:	9006      	str	r0, [sp, #24]
 800f940:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f944:	4809      	ldr	r0, [pc, #36]	@ (800f96c <siprintf+0x38>)
 800f946:	9107      	str	r1, [sp, #28]
 800f948:	9104      	str	r1, [sp, #16]
 800f94a:	4909      	ldr	r1, [pc, #36]	@ (800f970 <siprintf+0x3c>)
 800f94c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f950:	9105      	str	r1, [sp, #20]
 800f952:	6800      	ldr	r0, [r0, #0]
 800f954:	9301      	str	r3, [sp, #4]
 800f956:	a902      	add	r1, sp, #8
 800f958:	f002 f852 	bl	8011a00 <_svfiprintf_r>
 800f95c:	9b02      	ldr	r3, [sp, #8]
 800f95e:	2200      	movs	r2, #0
 800f960:	701a      	strb	r2, [r3, #0]
 800f962:	b01c      	add	sp, #112	@ 0x70
 800f964:	f85d eb04 	ldr.w	lr, [sp], #4
 800f968:	b003      	add	sp, #12
 800f96a:	4770      	bx	lr
 800f96c:	240001e4 	.word	0x240001e4
 800f970:	ffff0208 	.word	0xffff0208

0800f974 <siscanf>:
 800f974:	b40e      	push	{r1, r2, r3}
 800f976:	b530      	push	{r4, r5, lr}
 800f978:	b09c      	sub	sp, #112	@ 0x70
 800f97a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f97c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f980:	f854 5b04 	ldr.w	r5, [r4], #4
 800f984:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f988:	9002      	str	r0, [sp, #8]
 800f98a:	9006      	str	r0, [sp, #24]
 800f98c:	f7f0 fd10 	bl	80003b0 <strlen>
 800f990:	4b0b      	ldr	r3, [pc, #44]	@ (800f9c0 <siscanf+0x4c>)
 800f992:	9003      	str	r0, [sp, #12]
 800f994:	9007      	str	r0, [sp, #28]
 800f996:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f998:	480a      	ldr	r0, [pc, #40]	@ (800f9c4 <siscanf+0x50>)
 800f99a:	9401      	str	r4, [sp, #4]
 800f99c:	2300      	movs	r3, #0
 800f99e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f9a0:	9314      	str	r3, [sp, #80]	@ 0x50
 800f9a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f9a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f9aa:	462a      	mov	r2, r5
 800f9ac:	4623      	mov	r3, r4
 800f9ae:	a902      	add	r1, sp, #8
 800f9b0:	6800      	ldr	r0, [r0, #0]
 800f9b2:	f002 f979 	bl	8011ca8 <__ssvfiscanf_r>
 800f9b6:	b01c      	add	sp, #112	@ 0x70
 800f9b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9bc:	b003      	add	sp, #12
 800f9be:	4770      	bx	lr
 800f9c0:	0800f9eb 	.word	0x0800f9eb
 800f9c4:	240001e4 	.word	0x240001e4

0800f9c8 <__sread>:
 800f9c8:	b510      	push	{r4, lr}
 800f9ca:	460c      	mov	r4, r1
 800f9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9d0:	f000 f88c 	bl	800faec <_read_r>
 800f9d4:	2800      	cmp	r0, #0
 800f9d6:	bfab      	itete	ge
 800f9d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f9da:	89a3      	ldrhlt	r3, [r4, #12]
 800f9dc:	181b      	addge	r3, r3, r0
 800f9de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f9e2:	bfac      	ite	ge
 800f9e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f9e6:	81a3      	strhlt	r3, [r4, #12]
 800f9e8:	bd10      	pop	{r4, pc}

0800f9ea <__seofread>:
 800f9ea:	2000      	movs	r0, #0
 800f9ec:	4770      	bx	lr

0800f9ee <__swrite>:
 800f9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9f2:	461f      	mov	r7, r3
 800f9f4:	898b      	ldrh	r3, [r1, #12]
 800f9f6:	05db      	lsls	r3, r3, #23
 800f9f8:	4605      	mov	r5, r0
 800f9fa:	460c      	mov	r4, r1
 800f9fc:	4616      	mov	r6, r2
 800f9fe:	d505      	bpl.n	800fa0c <__swrite+0x1e>
 800fa00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa04:	2302      	movs	r3, #2
 800fa06:	2200      	movs	r2, #0
 800fa08:	f000 f85e 	bl	800fac8 <_lseek_r>
 800fa0c:	89a3      	ldrh	r3, [r4, #12]
 800fa0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa16:	81a3      	strh	r3, [r4, #12]
 800fa18:	4632      	mov	r2, r6
 800fa1a:	463b      	mov	r3, r7
 800fa1c:	4628      	mov	r0, r5
 800fa1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa22:	f000 b885 	b.w	800fb30 <_write_r>

0800fa26 <__sseek>:
 800fa26:	b510      	push	{r4, lr}
 800fa28:	460c      	mov	r4, r1
 800fa2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa2e:	f000 f84b 	bl	800fac8 <_lseek_r>
 800fa32:	1c43      	adds	r3, r0, #1
 800fa34:	89a3      	ldrh	r3, [r4, #12]
 800fa36:	bf15      	itete	ne
 800fa38:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fa3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fa3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fa42:	81a3      	strheq	r3, [r4, #12]
 800fa44:	bf18      	it	ne
 800fa46:	81a3      	strhne	r3, [r4, #12]
 800fa48:	bd10      	pop	{r4, pc}

0800fa4a <__sclose>:
 800fa4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa4e:	f000 b82b 	b.w	800faa8 <_close_r>

0800fa52 <memset>:
 800fa52:	4402      	add	r2, r0
 800fa54:	4603      	mov	r3, r0
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d100      	bne.n	800fa5c <memset+0xa>
 800fa5a:	4770      	bx	lr
 800fa5c:	f803 1b01 	strb.w	r1, [r3], #1
 800fa60:	e7f9      	b.n	800fa56 <memset+0x4>

0800fa62 <strchr>:
 800fa62:	b2c9      	uxtb	r1, r1
 800fa64:	4603      	mov	r3, r0
 800fa66:	4618      	mov	r0, r3
 800fa68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa6c:	b112      	cbz	r2, 800fa74 <strchr+0x12>
 800fa6e:	428a      	cmp	r2, r1
 800fa70:	d1f9      	bne.n	800fa66 <strchr+0x4>
 800fa72:	4770      	bx	lr
 800fa74:	2900      	cmp	r1, #0
 800fa76:	bf18      	it	ne
 800fa78:	2000      	movne	r0, #0
 800fa7a:	4770      	bx	lr

0800fa7c <strncmp>:
 800fa7c:	b510      	push	{r4, lr}
 800fa7e:	b16a      	cbz	r2, 800fa9c <strncmp+0x20>
 800fa80:	3901      	subs	r1, #1
 800fa82:	1884      	adds	r4, r0, r2
 800fa84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa88:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	d103      	bne.n	800fa98 <strncmp+0x1c>
 800fa90:	42a0      	cmp	r0, r4
 800fa92:	d001      	beq.n	800fa98 <strncmp+0x1c>
 800fa94:	2a00      	cmp	r2, #0
 800fa96:	d1f5      	bne.n	800fa84 <strncmp+0x8>
 800fa98:	1ad0      	subs	r0, r2, r3
 800fa9a:	bd10      	pop	{r4, pc}
 800fa9c:	4610      	mov	r0, r2
 800fa9e:	e7fc      	b.n	800fa9a <strncmp+0x1e>

0800faa0 <_localeconv_r>:
 800faa0:	4800      	ldr	r0, [pc, #0]	@ (800faa4 <_localeconv_r+0x4>)
 800faa2:	4770      	bx	lr
 800faa4:	24000168 	.word	0x24000168

0800faa8 <_close_r>:
 800faa8:	b538      	push	{r3, r4, r5, lr}
 800faaa:	4d06      	ldr	r5, [pc, #24]	@ (800fac4 <_close_r+0x1c>)
 800faac:	2300      	movs	r3, #0
 800faae:	4604      	mov	r4, r0
 800fab0:	4608      	mov	r0, r1
 800fab2:	602b      	str	r3, [r5, #0]
 800fab4:	f7f1 ffd4 	bl	8001a60 <_close>
 800fab8:	1c43      	adds	r3, r0, #1
 800faba:	d102      	bne.n	800fac2 <_close_r+0x1a>
 800fabc:	682b      	ldr	r3, [r5, #0]
 800fabe:	b103      	cbz	r3, 800fac2 <_close_r+0x1a>
 800fac0:	6023      	str	r3, [r4, #0]
 800fac2:	bd38      	pop	{r3, r4, r5, pc}
 800fac4:	24000e68 	.word	0x24000e68

0800fac8 <_lseek_r>:
 800fac8:	b538      	push	{r3, r4, r5, lr}
 800faca:	4d07      	ldr	r5, [pc, #28]	@ (800fae8 <_lseek_r+0x20>)
 800facc:	4604      	mov	r4, r0
 800face:	4608      	mov	r0, r1
 800fad0:	4611      	mov	r1, r2
 800fad2:	2200      	movs	r2, #0
 800fad4:	602a      	str	r2, [r5, #0]
 800fad6:	461a      	mov	r2, r3
 800fad8:	f7f1 ffe9 	bl	8001aae <_lseek>
 800fadc:	1c43      	adds	r3, r0, #1
 800fade:	d102      	bne.n	800fae6 <_lseek_r+0x1e>
 800fae0:	682b      	ldr	r3, [r5, #0]
 800fae2:	b103      	cbz	r3, 800fae6 <_lseek_r+0x1e>
 800fae4:	6023      	str	r3, [r4, #0]
 800fae6:	bd38      	pop	{r3, r4, r5, pc}
 800fae8:	24000e68 	.word	0x24000e68

0800faec <_read_r>:
 800faec:	b538      	push	{r3, r4, r5, lr}
 800faee:	4d07      	ldr	r5, [pc, #28]	@ (800fb0c <_read_r+0x20>)
 800faf0:	4604      	mov	r4, r0
 800faf2:	4608      	mov	r0, r1
 800faf4:	4611      	mov	r1, r2
 800faf6:	2200      	movs	r2, #0
 800faf8:	602a      	str	r2, [r5, #0]
 800fafa:	461a      	mov	r2, r3
 800fafc:	f7f1 ff77 	bl	80019ee <_read>
 800fb00:	1c43      	adds	r3, r0, #1
 800fb02:	d102      	bne.n	800fb0a <_read_r+0x1e>
 800fb04:	682b      	ldr	r3, [r5, #0]
 800fb06:	b103      	cbz	r3, 800fb0a <_read_r+0x1e>
 800fb08:	6023      	str	r3, [r4, #0]
 800fb0a:	bd38      	pop	{r3, r4, r5, pc}
 800fb0c:	24000e68 	.word	0x24000e68

0800fb10 <_sbrk_r>:
 800fb10:	b538      	push	{r3, r4, r5, lr}
 800fb12:	4d06      	ldr	r5, [pc, #24]	@ (800fb2c <_sbrk_r+0x1c>)
 800fb14:	2300      	movs	r3, #0
 800fb16:	4604      	mov	r4, r0
 800fb18:	4608      	mov	r0, r1
 800fb1a:	602b      	str	r3, [r5, #0]
 800fb1c:	f7f1 ffd4 	bl	8001ac8 <_sbrk>
 800fb20:	1c43      	adds	r3, r0, #1
 800fb22:	d102      	bne.n	800fb2a <_sbrk_r+0x1a>
 800fb24:	682b      	ldr	r3, [r5, #0]
 800fb26:	b103      	cbz	r3, 800fb2a <_sbrk_r+0x1a>
 800fb28:	6023      	str	r3, [r4, #0]
 800fb2a:	bd38      	pop	{r3, r4, r5, pc}
 800fb2c:	24000e68 	.word	0x24000e68

0800fb30 <_write_r>:
 800fb30:	b538      	push	{r3, r4, r5, lr}
 800fb32:	4d07      	ldr	r5, [pc, #28]	@ (800fb50 <_write_r+0x20>)
 800fb34:	4604      	mov	r4, r0
 800fb36:	4608      	mov	r0, r1
 800fb38:	4611      	mov	r1, r2
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	602a      	str	r2, [r5, #0]
 800fb3e:	461a      	mov	r2, r3
 800fb40:	f7f1 ff72 	bl	8001a28 <_write>
 800fb44:	1c43      	adds	r3, r0, #1
 800fb46:	d102      	bne.n	800fb4e <_write_r+0x1e>
 800fb48:	682b      	ldr	r3, [r5, #0]
 800fb4a:	b103      	cbz	r3, 800fb4e <_write_r+0x1e>
 800fb4c:	6023      	str	r3, [r4, #0]
 800fb4e:	bd38      	pop	{r3, r4, r5, pc}
 800fb50:	24000e68 	.word	0x24000e68

0800fb54 <__errno>:
 800fb54:	4b01      	ldr	r3, [pc, #4]	@ (800fb5c <__errno+0x8>)
 800fb56:	6818      	ldr	r0, [r3, #0]
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	240001e4 	.word	0x240001e4

0800fb60 <__libc_init_array>:
 800fb60:	b570      	push	{r4, r5, r6, lr}
 800fb62:	4d0d      	ldr	r5, [pc, #52]	@ (800fb98 <__libc_init_array+0x38>)
 800fb64:	4c0d      	ldr	r4, [pc, #52]	@ (800fb9c <__libc_init_array+0x3c>)
 800fb66:	1b64      	subs	r4, r4, r5
 800fb68:	10a4      	asrs	r4, r4, #2
 800fb6a:	2600      	movs	r6, #0
 800fb6c:	42a6      	cmp	r6, r4
 800fb6e:	d109      	bne.n	800fb84 <__libc_init_array+0x24>
 800fb70:	4d0b      	ldr	r5, [pc, #44]	@ (800fba0 <__libc_init_array+0x40>)
 800fb72:	4c0c      	ldr	r4, [pc, #48]	@ (800fba4 <__libc_init_array+0x44>)
 800fb74:	f003 f822 	bl	8012bbc <_init>
 800fb78:	1b64      	subs	r4, r4, r5
 800fb7a:	10a4      	asrs	r4, r4, #2
 800fb7c:	2600      	movs	r6, #0
 800fb7e:	42a6      	cmp	r6, r4
 800fb80:	d105      	bne.n	800fb8e <__libc_init_array+0x2e>
 800fb82:	bd70      	pop	{r4, r5, r6, pc}
 800fb84:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb88:	4798      	blx	r3
 800fb8a:	3601      	adds	r6, #1
 800fb8c:	e7ee      	b.n	800fb6c <__libc_init_array+0xc>
 800fb8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb92:	4798      	blx	r3
 800fb94:	3601      	adds	r6, #1
 800fb96:	e7f2      	b.n	800fb7e <__libc_init_array+0x1e>
 800fb98:	0801315c 	.word	0x0801315c
 800fb9c:	0801315c 	.word	0x0801315c
 800fba0:	0801315c 	.word	0x0801315c
 800fba4:	08013160 	.word	0x08013160

0800fba8 <__retarget_lock_init_recursive>:
 800fba8:	4770      	bx	lr

0800fbaa <__retarget_lock_acquire_recursive>:
 800fbaa:	4770      	bx	lr

0800fbac <__retarget_lock_release_recursive>:
 800fbac:	4770      	bx	lr

0800fbae <memcpy>:
 800fbae:	440a      	add	r2, r1
 800fbb0:	4291      	cmp	r1, r2
 800fbb2:	f100 33ff 	add.w	r3, r0, #4294967295
 800fbb6:	d100      	bne.n	800fbba <memcpy+0xc>
 800fbb8:	4770      	bx	lr
 800fbba:	b510      	push	{r4, lr}
 800fbbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbc4:	4291      	cmp	r1, r2
 800fbc6:	d1f9      	bne.n	800fbbc <memcpy+0xe>
 800fbc8:	bd10      	pop	{r4, pc}
 800fbca:	0000      	movs	r0, r0
 800fbcc:	0000      	movs	r0, r0
	...

0800fbd0 <nan>:
 800fbd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fbd8 <nan+0x8>
 800fbd4:	4770      	bx	lr
 800fbd6:	bf00      	nop
 800fbd8:	00000000 	.word	0x00000000
 800fbdc:	7ff80000 	.word	0x7ff80000

0800fbe0 <nanf>:
 800fbe0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fbe8 <nanf+0x8>
 800fbe4:	4770      	bx	lr
 800fbe6:	bf00      	nop
 800fbe8:	7fc00000 	.word	0x7fc00000

0800fbec <quorem>:
 800fbec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf0:	6903      	ldr	r3, [r0, #16]
 800fbf2:	690c      	ldr	r4, [r1, #16]
 800fbf4:	42a3      	cmp	r3, r4
 800fbf6:	4607      	mov	r7, r0
 800fbf8:	db7e      	blt.n	800fcf8 <quorem+0x10c>
 800fbfa:	3c01      	subs	r4, #1
 800fbfc:	f101 0814 	add.w	r8, r1, #20
 800fc00:	00a3      	lsls	r3, r4, #2
 800fc02:	f100 0514 	add.w	r5, r0, #20
 800fc06:	9300      	str	r3, [sp, #0]
 800fc08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc0c:	9301      	str	r3, [sp, #4]
 800fc0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fc12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc16:	3301      	adds	r3, #1
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fc1e:	fbb2 f6f3 	udiv	r6, r2, r3
 800fc22:	d32e      	bcc.n	800fc82 <quorem+0x96>
 800fc24:	f04f 0a00 	mov.w	sl, #0
 800fc28:	46c4      	mov	ip, r8
 800fc2a:	46ae      	mov	lr, r5
 800fc2c:	46d3      	mov	fp, sl
 800fc2e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fc32:	b298      	uxth	r0, r3
 800fc34:	fb06 a000 	mla	r0, r6, r0, sl
 800fc38:	0c02      	lsrs	r2, r0, #16
 800fc3a:	0c1b      	lsrs	r3, r3, #16
 800fc3c:	fb06 2303 	mla	r3, r6, r3, r2
 800fc40:	f8de 2000 	ldr.w	r2, [lr]
 800fc44:	b280      	uxth	r0, r0
 800fc46:	b292      	uxth	r2, r2
 800fc48:	1a12      	subs	r2, r2, r0
 800fc4a:	445a      	add	r2, fp
 800fc4c:	f8de 0000 	ldr.w	r0, [lr]
 800fc50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fc5a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fc5e:	b292      	uxth	r2, r2
 800fc60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fc64:	45e1      	cmp	r9, ip
 800fc66:	f84e 2b04 	str.w	r2, [lr], #4
 800fc6a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fc6e:	d2de      	bcs.n	800fc2e <quorem+0x42>
 800fc70:	9b00      	ldr	r3, [sp, #0]
 800fc72:	58eb      	ldr	r3, [r5, r3]
 800fc74:	b92b      	cbnz	r3, 800fc82 <quorem+0x96>
 800fc76:	9b01      	ldr	r3, [sp, #4]
 800fc78:	3b04      	subs	r3, #4
 800fc7a:	429d      	cmp	r5, r3
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	d32f      	bcc.n	800fce0 <quorem+0xf4>
 800fc80:	613c      	str	r4, [r7, #16]
 800fc82:	4638      	mov	r0, r7
 800fc84:	f001 fbec 	bl	8011460 <__mcmp>
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	db25      	blt.n	800fcd8 <quorem+0xec>
 800fc8c:	4629      	mov	r1, r5
 800fc8e:	2000      	movs	r0, #0
 800fc90:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc94:	f8d1 c000 	ldr.w	ip, [r1]
 800fc98:	fa1f fe82 	uxth.w	lr, r2
 800fc9c:	fa1f f38c 	uxth.w	r3, ip
 800fca0:	eba3 030e 	sub.w	r3, r3, lr
 800fca4:	4403      	add	r3, r0
 800fca6:	0c12      	lsrs	r2, r2, #16
 800fca8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fcac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fcb6:	45c1      	cmp	r9, r8
 800fcb8:	f841 3b04 	str.w	r3, [r1], #4
 800fcbc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fcc0:	d2e6      	bcs.n	800fc90 <quorem+0xa4>
 800fcc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fcc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fcca:	b922      	cbnz	r2, 800fcd6 <quorem+0xea>
 800fccc:	3b04      	subs	r3, #4
 800fcce:	429d      	cmp	r5, r3
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	d30b      	bcc.n	800fcec <quorem+0x100>
 800fcd4:	613c      	str	r4, [r7, #16]
 800fcd6:	3601      	adds	r6, #1
 800fcd8:	4630      	mov	r0, r6
 800fcda:	b003      	add	sp, #12
 800fcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fce0:	6812      	ldr	r2, [r2, #0]
 800fce2:	3b04      	subs	r3, #4
 800fce4:	2a00      	cmp	r2, #0
 800fce6:	d1cb      	bne.n	800fc80 <quorem+0x94>
 800fce8:	3c01      	subs	r4, #1
 800fcea:	e7c6      	b.n	800fc7a <quorem+0x8e>
 800fcec:	6812      	ldr	r2, [r2, #0]
 800fcee:	3b04      	subs	r3, #4
 800fcf0:	2a00      	cmp	r2, #0
 800fcf2:	d1ef      	bne.n	800fcd4 <quorem+0xe8>
 800fcf4:	3c01      	subs	r4, #1
 800fcf6:	e7ea      	b.n	800fcce <quorem+0xe2>
 800fcf8:	2000      	movs	r0, #0
 800fcfa:	e7ee      	b.n	800fcda <quorem+0xee>
 800fcfc:	0000      	movs	r0, r0
	...

0800fd00 <_dtoa_r>:
 800fd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd04:	ed2d 8b02 	vpush	{d8}
 800fd08:	69c7      	ldr	r7, [r0, #28]
 800fd0a:	b091      	sub	sp, #68	@ 0x44
 800fd0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fd10:	ec55 4b10 	vmov	r4, r5, d0
 800fd14:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fd16:	9107      	str	r1, [sp, #28]
 800fd18:	4681      	mov	r9, r0
 800fd1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd1c:	930d      	str	r3, [sp, #52]	@ 0x34
 800fd1e:	b97f      	cbnz	r7, 800fd40 <_dtoa_r+0x40>
 800fd20:	2010      	movs	r0, #16
 800fd22:	f7fe f895 	bl	800de50 <malloc>
 800fd26:	4602      	mov	r2, r0
 800fd28:	f8c9 001c 	str.w	r0, [r9, #28]
 800fd2c:	b920      	cbnz	r0, 800fd38 <_dtoa_r+0x38>
 800fd2e:	4ba0      	ldr	r3, [pc, #640]	@ (800ffb0 <_dtoa_r+0x2b0>)
 800fd30:	21ef      	movs	r1, #239	@ 0xef
 800fd32:	48a0      	ldr	r0, [pc, #640]	@ (800ffb4 <_dtoa_r+0x2b4>)
 800fd34:	f002 fbb4 	bl	80124a0 <__assert_func>
 800fd38:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fd3c:	6007      	str	r7, [r0, #0]
 800fd3e:	60c7      	str	r7, [r0, #12]
 800fd40:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fd44:	6819      	ldr	r1, [r3, #0]
 800fd46:	b159      	cbz	r1, 800fd60 <_dtoa_r+0x60>
 800fd48:	685a      	ldr	r2, [r3, #4]
 800fd4a:	604a      	str	r2, [r1, #4]
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	4093      	lsls	r3, r2
 800fd50:	608b      	str	r3, [r1, #8]
 800fd52:	4648      	mov	r0, r9
 800fd54:	f001 f900 	bl	8010f58 <_Bfree>
 800fd58:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	601a      	str	r2, [r3, #0]
 800fd60:	1e2b      	subs	r3, r5, #0
 800fd62:	bfbb      	ittet	lt
 800fd64:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fd68:	9303      	strlt	r3, [sp, #12]
 800fd6a:	2300      	movge	r3, #0
 800fd6c:	2201      	movlt	r2, #1
 800fd6e:	bfac      	ite	ge
 800fd70:	6033      	strge	r3, [r6, #0]
 800fd72:	6032      	strlt	r2, [r6, #0]
 800fd74:	4b90      	ldr	r3, [pc, #576]	@ (800ffb8 <_dtoa_r+0x2b8>)
 800fd76:	9e03      	ldr	r6, [sp, #12]
 800fd78:	43b3      	bics	r3, r6
 800fd7a:	d110      	bne.n	800fd9e <_dtoa_r+0x9e>
 800fd7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd7e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fd82:	6013      	str	r3, [r2, #0]
 800fd84:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800fd88:	4323      	orrs	r3, r4
 800fd8a:	f000 84de 	beq.w	801074a <_dtoa_r+0xa4a>
 800fd8e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fd90:	4f8a      	ldr	r7, [pc, #552]	@ (800ffbc <_dtoa_r+0x2bc>)
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	f000 84e0 	beq.w	8010758 <_dtoa_r+0xa58>
 800fd98:	1cfb      	adds	r3, r7, #3
 800fd9a:	f000 bcdb 	b.w	8010754 <_dtoa_r+0xa54>
 800fd9e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fda2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdaa:	d10a      	bne.n	800fdc2 <_dtoa_r+0xc2>
 800fdac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fdae:	2301      	movs	r3, #1
 800fdb0:	6013      	str	r3, [r2, #0]
 800fdb2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fdb4:	b113      	cbz	r3, 800fdbc <_dtoa_r+0xbc>
 800fdb6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fdb8:	4b81      	ldr	r3, [pc, #516]	@ (800ffc0 <_dtoa_r+0x2c0>)
 800fdba:	6013      	str	r3, [r2, #0]
 800fdbc:	4f81      	ldr	r7, [pc, #516]	@ (800ffc4 <_dtoa_r+0x2c4>)
 800fdbe:	f000 bccb 	b.w	8010758 <_dtoa_r+0xa58>
 800fdc2:	aa0e      	add	r2, sp, #56	@ 0x38
 800fdc4:	a90f      	add	r1, sp, #60	@ 0x3c
 800fdc6:	4648      	mov	r0, r9
 800fdc8:	eeb0 0b48 	vmov.f64	d0, d8
 800fdcc:	f001 fc68 	bl	80116a0 <__d2b>
 800fdd0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800fdd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fdd6:	9001      	str	r0, [sp, #4]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d045      	beq.n	800fe68 <_dtoa_r+0x168>
 800fddc:	eeb0 7b48 	vmov.f64	d7, d8
 800fde0:	ee18 1a90 	vmov	r1, s17
 800fde4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fde8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800fdec:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fdf0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fdf4:	2500      	movs	r5, #0
 800fdf6:	ee07 1a90 	vmov	s15, r1
 800fdfa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800fdfe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ff98 <_dtoa_r+0x298>
 800fe02:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fe06:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ffa0 <_dtoa_r+0x2a0>
 800fe0a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fe0e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ffa8 <_dtoa_r+0x2a8>
 800fe12:	ee07 3a90 	vmov	s15, r3
 800fe16:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fe1a:	eeb0 7b46 	vmov.f64	d7, d6
 800fe1e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fe22:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fe26:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fe2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe2e:	ee16 8a90 	vmov	r8, s13
 800fe32:	d508      	bpl.n	800fe46 <_dtoa_r+0x146>
 800fe34:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fe38:	eeb4 6b47 	vcmp.f64	d6, d7
 800fe3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe40:	bf18      	it	ne
 800fe42:	f108 38ff 	addne.w	r8, r8, #4294967295
 800fe46:	f1b8 0f16 	cmp.w	r8, #22
 800fe4a:	d82b      	bhi.n	800fea4 <_dtoa_r+0x1a4>
 800fe4c:	495e      	ldr	r1, [pc, #376]	@ (800ffc8 <_dtoa_r+0x2c8>)
 800fe4e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800fe52:	ed91 7b00 	vldr	d7, [r1]
 800fe56:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fe5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe5e:	d501      	bpl.n	800fe64 <_dtoa_r+0x164>
 800fe60:	f108 38ff 	add.w	r8, r8, #4294967295
 800fe64:	2100      	movs	r1, #0
 800fe66:	e01e      	b.n	800fea6 <_dtoa_r+0x1a6>
 800fe68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe6a:	4413      	add	r3, r2
 800fe6c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800fe70:	2920      	cmp	r1, #32
 800fe72:	bfc1      	itttt	gt
 800fe74:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800fe78:	408e      	lslgt	r6, r1
 800fe7a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800fe7e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800fe82:	bfd6      	itet	le
 800fe84:	f1c1 0120 	rsble	r1, r1, #32
 800fe88:	4331      	orrgt	r1, r6
 800fe8a:	fa04 f101 	lslle.w	r1, r4, r1
 800fe8e:	ee07 1a90 	vmov	s15, r1
 800fe92:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fe96:	3b01      	subs	r3, #1
 800fe98:	ee17 1a90 	vmov	r1, s15
 800fe9c:	2501      	movs	r5, #1
 800fe9e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800fea2:	e7a8      	b.n	800fdf6 <_dtoa_r+0xf6>
 800fea4:	2101      	movs	r1, #1
 800fea6:	1ad2      	subs	r2, r2, r3
 800fea8:	1e53      	subs	r3, r2, #1
 800feaa:	9306      	str	r3, [sp, #24]
 800feac:	bf45      	ittet	mi
 800feae:	f1c2 0301 	rsbmi	r3, r2, #1
 800feb2:	9305      	strmi	r3, [sp, #20]
 800feb4:	2300      	movpl	r3, #0
 800feb6:	2300      	movmi	r3, #0
 800feb8:	bf4c      	ite	mi
 800feba:	9306      	strmi	r3, [sp, #24]
 800febc:	9305      	strpl	r3, [sp, #20]
 800febe:	f1b8 0f00 	cmp.w	r8, #0
 800fec2:	910c      	str	r1, [sp, #48]	@ 0x30
 800fec4:	db18      	blt.n	800fef8 <_dtoa_r+0x1f8>
 800fec6:	9b06      	ldr	r3, [sp, #24]
 800fec8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800fecc:	4443      	add	r3, r8
 800fece:	9306      	str	r3, [sp, #24]
 800fed0:	2300      	movs	r3, #0
 800fed2:	9a07      	ldr	r2, [sp, #28]
 800fed4:	2a09      	cmp	r2, #9
 800fed6:	d849      	bhi.n	800ff6c <_dtoa_r+0x26c>
 800fed8:	2a05      	cmp	r2, #5
 800feda:	bfc4      	itt	gt
 800fedc:	3a04      	subgt	r2, #4
 800fede:	9207      	strgt	r2, [sp, #28]
 800fee0:	9a07      	ldr	r2, [sp, #28]
 800fee2:	f1a2 0202 	sub.w	r2, r2, #2
 800fee6:	bfcc      	ite	gt
 800fee8:	2400      	movgt	r4, #0
 800feea:	2401      	movle	r4, #1
 800feec:	2a03      	cmp	r2, #3
 800feee:	d848      	bhi.n	800ff82 <_dtoa_r+0x282>
 800fef0:	e8df f002 	tbb	[pc, r2]
 800fef4:	3a2c2e0b 	.word	0x3a2c2e0b
 800fef8:	9b05      	ldr	r3, [sp, #20]
 800fefa:	2200      	movs	r2, #0
 800fefc:	eba3 0308 	sub.w	r3, r3, r8
 800ff00:	9305      	str	r3, [sp, #20]
 800ff02:	920a      	str	r2, [sp, #40]	@ 0x28
 800ff04:	f1c8 0300 	rsb	r3, r8, #0
 800ff08:	e7e3      	b.n	800fed2 <_dtoa_r+0x1d2>
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	9208      	str	r2, [sp, #32]
 800ff0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff10:	2a00      	cmp	r2, #0
 800ff12:	dc39      	bgt.n	800ff88 <_dtoa_r+0x288>
 800ff14:	f04f 0b01 	mov.w	fp, #1
 800ff18:	46da      	mov	sl, fp
 800ff1a:	465a      	mov	r2, fp
 800ff1c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ff20:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ff24:	2100      	movs	r1, #0
 800ff26:	2004      	movs	r0, #4
 800ff28:	f100 0614 	add.w	r6, r0, #20
 800ff2c:	4296      	cmp	r6, r2
 800ff2e:	d930      	bls.n	800ff92 <_dtoa_r+0x292>
 800ff30:	6079      	str	r1, [r7, #4]
 800ff32:	4648      	mov	r0, r9
 800ff34:	9304      	str	r3, [sp, #16]
 800ff36:	f000 ffcf 	bl	8010ed8 <_Balloc>
 800ff3a:	9b04      	ldr	r3, [sp, #16]
 800ff3c:	4607      	mov	r7, r0
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	d146      	bne.n	800ffd0 <_dtoa_r+0x2d0>
 800ff42:	4b22      	ldr	r3, [pc, #136]	@ (800ffcc <_dtoa_r+0x2cc>)
 800ff44:	4602      	mov	r2, r0
 800ff46:	f240 11af 	movw	r1, #431	@ 0x1af
 800ff4a:	e6f2      	b.n	800fd32 <_dtoa_r+0x32>
 800ff4c:	2201      	movs	r2, #1
 800ff4e:	e7dd      	b.n	800ff0c <_dtoa_r+0x20c>
 800ff50:	2200      	movs	r2, #0
 800ff52:	9208      	str	r2, [sp, #32]
 800ff54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff56:	eb08 0b02 	add.w	fp, r8, r2
 800ff5a:	f10b 0a01 	add.w	sl, fp, #1
 800ff5e:	4652      	mov	r2, sl
 800ff60:	2a01      	cmp	r2, #1
 800ff62:	bfb8      	it	lt
 800ff64:	2201      	movlt	r2, #1
 800ff66:	e7db      	b.n	800ff20 <_dtoa_r+0x220>
 800ff68:	2201      	movs	r2, #1
 800ff6a:	e7f2      	b.n	800ff52 <_dtoa_r+0x252>
 800ff6c:	2401      	movs	r4, #1
 800ff6e:	2200      	movs	r2, #0
 800ff70:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ff74:	f04f 3bff 	mov.w	fp, #4294967295
 800ff78:	2100      	movs	r1, #0
 800ff7a:	46da      	mov	sl, fp
 800ff7c:	2212      	movs	r2, #18
 800ff7e:	9109      	str	r1, [sp, #36]	@ 0x24
 800ff80:	e7ce      	b.n	800ff20 <_dtoa_r+0x220>
 800ff82:	2201      	movs	r2, #1
 800ff84:	9208      	str	r2, [sp, #32]
 800ff86:	e7f5      	b.n	800ff74 <_dtoa_r+0x274>
 800ff88:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ff8c:	46da      	mov	sl, fp
 800ff8e:	465a      	mov	r2, fp
 800ff90:	e7c6      	b.n	800ff20 <_dtoa_r+0x220>
 800ff92:	3101      	adds	r1, #1
 800ff94:	0040      	lsls	r0, r0, #1
 800ff96:	e7c7      	b.n	800ff28 <_dtoa_r+0x228>
 800ff98:	636f4361 	.word	0x636f4361
 800ff9c:	3fd287a7 	.word	0x3fd287a7
 800ffa0:	8b60c8b3 	.word	0x8b60c8b3
 800ffa4:	3fc68a28 	.word	0x3fc68a28
 800ffa8:	509f79fb 	.word	0x509f79fb
 800ffac:	3fd34413 	.word	0x3fd34413
 800ffb0:	08012dac 	.word	0x08012dac
 800ffb4:	08012dc3 	.word	0x08012dc3
 800ffb8:	7ff00000 	.word	0x7ff00000
 800ffbc:	08012da8 	.word	0x08012da8
 800ffc0:	08013111 	.word	0x08013111
 800ffc4:	08013110 	.word	0x08013110
 800ffc8:	08012f20 	.word	0x08012f20
 800ffcc:	08012e1b 	.word	0x08012e1b
 800ffd0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ffd4:	f1ba 0f0e 	cmp.w	sl, #14
 800ffd8:	6010      	str	r0, [r2, #0]
 800ffda:	d86f      	bhi.n	80100bc <_dtoa_r+0x3bc>
 800ffdc:	2c00      	cmp	r4, #0
 800ffde:	d06d      	beq.n	80100bc <_dtoa_r+0x3bc>
 800ffe0:	f1b8 0f00 	cmp.w	r8, #0
 800ffe4:	f340 80c2 	ble.w	801016c <_dtoa_r+0x46c>
 800ffe8:	4aca      	ldr	r2, [pc, #808]	@ (8010314 <_dtoa_r+0x614>)
 800ffea:	f008 010f 	and.w	r1, r8, #15
 800ffee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800fff2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800fff6:	ed92 7b00 	vldr	d7, [r2]
 800fffa:	ea4f 1128 	mov.w	r1, r8, asr #4
 800fffe:	f000 80a9 	beq.w	8010154 <_dtoa_r+0x454>
 8010002:	4ac5      	ldr	r2, [pc, #788]	@ (8010318 <_dtoa_r+0x618>)
 8010004:	ed92 6b08 	vldr	d6, [r2, #32]
 8010008:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801000c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010010:	f001 010f 	and.w	r1, r1, #15
 8010014:	2203      	movs	r2, #3
 8010016:	48c0      	ldr	r0, [pc, #768]	@ (8010318 <_dtoa_r+0x618>)
 8010018:	2900      	cmp	r1, #0
 801001a:	f040 809d 	bne.w	8010158 <_dtoa_r+0x458>
 801001e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010022:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010026:	ed8d 7b02 	vstr	d7, [sp, #8]
 801002a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801002c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010030:	2900      	cmp	r1, #0
 8010032:	f000 80c1 	beq.w	80101b8 <_dtoa_r+0x4b8>
 8010036:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801003a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801003e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010042:	f140 80b9 	bpl.w	80101b8 <_dtoa_r+0x4b8>
 8010046:	f1ba 0f00 	cmp.w	sl, #0
 801004a:	f000 80b5 	beq.w	80101b8 <_dtoa_r+0x4b8>
 801004e:	f1bb 0f00 	cmp.w	fp, #0
 8010052:	dd31      	ble.n	80100b8 <_dtoa_r+0x3b8>
 8010054:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010058:	ee27 7b06 	vmul.f64	d7, d7, d6
 801005c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010060:	f108 31ff 	add.w	r1, r8, #4294967295
 8010064:	9104      	str	r1, [sp, #16]
 8010066:	3201      	adds	r2, #1
 8010068:	465c      	mov	r4, fp
 801006a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801006e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010072:	ee07 2a90 	vmov	s15, r2
 8010076:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801007a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801007e:	ee15 2a90 	vmov	r2, s11
 8010082:	ec51 0b15 	vmov	r0, r1, d5
 8010086:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801008a:	2c00      	cmp	r4, #0
 801008c:	f040 8098 	bne.w	80101c0 <_dtoa_r+0x4c0>
 8010090:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010094:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010098:	ec41 0b17 	vmov	d7, r0, r1
 801009c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80100a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a4:	f300 8261 	bgt.w	801056a <_dtoa_r+0x86a>
 80100a8:	eeb1 7b47 	vneg.f64	d7, d7
 80100ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80100b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b4:	f100 80f5 	bmi.w	80102a2 <_dtoa_r+0x5a2>
 80100b8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80100bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80100be:	2a00      	cmp	r2, #0
 80100c0:	f2c0 812c 	blt.w	801031c <_dtoa_r+0x61c>
 80100c4:	f1b8 0f0e 	cmp.w	r8, #14
 80100c8:	f300 8128 	bgt.w	801031c <_dtoa_r+0x61c>
 80100cc:	4b91      	ldr	r3, [pc, #580]	@ (8010314 <_dtoa_r+0x614>)
 80100ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80100d2:	ed93 6b00 	vldr	d6, [r3]
 80100d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100d8:	2b00      	cmp	r3, #0
 80100da:	da03      	bge.n	80100e4 <_dtoa_r+0x3e4>
 80100dc:	f1ba 0f00 	cmp.w	sl, #0
 80100e0:	f340 80d2 	ble.w	8010288 <_dtoa_r+0x588>
 80100e4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80100e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80100ec:	463e      	mov	r6, r7
 80100ee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80100f2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80100f6:	ee15 3a10 	vmov	r3, s10
 80100fa:	3330      	adds	r3, #48	@ 0x30
 80100fc:	f806 3b01 	strb.w	r3, [r6], #1
 8010100:	1bf3      	subs	r3, r6, r7
 8010102:	459a      	cmp	sl, r3
 8010104:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010108:	eea3 7b46 	vfms.f64	d7, d3, d6
 801010c:	f040 80f8 	bne.w	8010300 <_dtoa_r+0x600>
 8010110:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010114:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801011c:	f300 80dd 	bgt.w	80102da <_dtoa_r+0x5da>
 8010120:	eeb4 7b46 	vcmp.f64	d7, d6
 8010124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010128:	d104      	bne.n	8010134 <_dtoa_r+0x434>
 801012a:	ee15 3a10 	vmov	r3, s10
 801012e:	07db      	lsls	r3, r3, #31
 8010130:	f100 80d3 	bmi.w	80102da <_dtoa_r+0x5da>
 8010134:	9901      	ldr	r1, [sp, #4]
 8010136:	4648      	mov	r0, r9
 8010138:	f000 ff0e 	bl	8010f58 <_Bfree>
 801013c:	2300      	movs	r3, #0
 801013e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010140:	7033      	strb	r3, [r6, #0]
 8010142:	f108 0301 	add.w	r3, r8, #1
 8010146:	6013      	str	r3, [r2, #0]
 8010148:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801014a:	2b00      	cmp	r3, #0
 801014c:	f000 8304 	beq.w	8010758 <_dtoa_r+0xa58>
 8010150:	601e      	str	r6, [r3, #0]
 8010152:	e301      	b.n	8010758 <_dtoa_r+0xa58>
 8010154:	2202      	movs	r2, #2
 8010156:	e75e      	b.n	8010016 <_dtoa_r+0x316>
 8010158:	07cc      	lsls	r4, r1, #31
 801015a:	d504      	bpl.n	8010166 <_dtoa_r+0x466>
 801015c:	ed90 6b00 	vldr	d6, [r0]
 8010160:	3201      	adds	r2, #1
 8010162:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010166:	1049      	asrs	r1, r1, #1
 8010168:	3008      	adds	r0, #8
 801016a:	e755      	b.n	8010018 <_dtoa_r+0x318>
 801016c:	d022      	beq.n	80101b4 <_dtoa_r+0x4b4>
 801016e:	f1c8 0100 	rsb	r1, r8, #0
 8010172:	4a68      	ldr	r2, [pc, #416]	@ (8010314 <_dtoa_r+0x614>)
 8010174:	f001 000f 	and.w	r0, r1, #15
 8010178:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801017c:	ed92 7b00 	vldr	d7, [r2]
 8010180:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010184:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010188:	4863      	ldr	r0, [pc, #396]	@ (8010318 <_dtoa_r+0x618>)
 801018a:	1109      	asrs	r1, r1, #4
 801018c:	2400      	movs	r4, #0
 801018e:	2202      	movs	r2, #2
 8010190:	b929      	cbnz	r1, 801019e <_dtoa_r+0x49e>
 8010192:	2c00      	cmp	r4, #0
 8010194:	f43f af49 	beq.w	801002a <_dtoa_r+0x32a>
 8010198:	ed8d 7b02 	vstr	d7, [sp, #8]
 801019c:	e745      	b.n	801002a <_dtoa_r+0x32a>
 801019e:	07ce      	lsls	r6, r1, #31
 80101a0:	d505      	bpl.n	80101ae <_dtoa_r+0x4ae>
 80101a2:	ed90 6b00 	vldr	d6, [r0]
 80101a6:	3201      	adds	r2, #1
 80101a8:	2401      	movs	r4, #1
 80101aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80101ae:	1049      	asrs	r1, r1, #1
 80101b0:	3008      	adds	r0, #8
 80101b2:	e7ed      	b.n	8010190 <_dtoa_r+0x490>
 80101b4:	2202      	movs	r2, #2
 80101b6:	e738      	b.n	801002a <_dtoa_r+0x32a>
 80101b8:	f8cd 8010 	str.w	r8, [sp, #16]
 80101bc:	4654      	mov	r4, sl
 80101be:	e754      	b.n	801006a <_dtoa_r+0x36a>
 80101c0:	4a54      	ldr	r2, [pc, #336]	@ (8010314 <_dtoa_r+0x614>)
 80101c2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80101c6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80101ca:	9a08      	ldr	r2, [sp, #32]
 80101cc:	ec41 0b17 	vmov	d7, r0, r1
 80101d0:	443c      	add	r4, r7
 80101d2:	b34a      	cbz	r2, 8010228 <_dtoa_r+0x528>
 80101d4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80101d8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80101dc:	463e      	mov	r6, r7
 80101de:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80101e2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80101e6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80101ea:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80101ee:	ee14 2a90 	vmov	r2, s9
 80101f2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80101f6:	3230      	adds	r2, #48	@ 0x30
 80101f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80101fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010204:	f806 2b01 	strb.w	r2, [r6], #1
 8010208:	d438      	bmi.n	801027c <_dtoa_r+0x57c>
 801020a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801020e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010216:	d462      	bmi.n	80102de <_dtoa_r+0x5de>
 8010218:	42a6      	cmp	r6, r4
 801021a:	f43f af4d 	beq.w	80100b8 <_dtoa_r+0x3b8>
 801021e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010222:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010226:	e7e0      	b.n	80101ea <_dtoa_r+0x4ea>
 8010228:	4621      	mov	r1, r4
 801022a:	463e      	mov	r6, r7
 801022c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010230:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010234:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010238:	ee14 2a90 	vmov	r2, s9
 801023c:	3230      	adds	r2, #48	@ 0x30
 801023e:	f806 2b01 	strb.w	r2, [r6], #1
 8010242:	42a6      	cmp	r6, r4
 8010244:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010248:	ee36 6b45 	vsub.f64	d6, d6, d5
 801024c:	d119      	bne.n	8010282 <_dtoa_r+0x582>
 801024e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010252:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010256:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801025a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801025e:	dc3e      	bgt.n	80102de <_dtoa_r+0x5de>
 8010260:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010264:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801026c:	f57f af24 	bpl.w	80100b8 <_dtoa_r+0x3b8>
 8010270:	460e      	mov	r6, r1
 8010272:	3901      	subs	r1, #1
 8010274:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010278:	2b30      	cmp	r3, #48	@ 0x30
 801027a:	d0f9      	beq.n	8010270 <_dtoa_r+0x570>
 801027c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010280:	e758      	b.n	8010134 <_dtoa_r+0x434>
 8010282:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010286:	e7d5      	b.n	8010234 <_dtoa_r+0x534>
 8010288:	d10b      	bne.n	80102a2 <_dtoa_r+0x5a2>
 801028a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801028e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010292:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010296:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801029a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801029e:	f2c0 8161 	blt.w	8010564 <_dtoa_r+0x864>
 80102a2:	2400      	movs	r4, #0
 80102a4:	4625      	mov	r5, r4
 80102a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102a8:	43db      	mvns	r3, r3
 80102aa:	9304      	str	r3, [sp, #16]
 80102ac:	463e      	mov	r6, r7
 80102ae:	f04f 0800 	mov.w	r8, #0
 80102b2:	4621      	mov	r1, r4
 80102b4:	4648      	mov	r0, r9
 80102b6:	f000 fe4f 	bl	8010f58 <_Bfree>
 80102ba:	2d00      	cmp	r5, #0
 80102bc:	d0de      	beq.n	801027c <_dtoa_r+0x57c>
 80102be:	f1b8 0f00 	cmp.w	r8, #0
 80102c2:	d005      	beq.n	80102d0 <_dtoa_r+0x5d0>
 80102c4:	45a8      	cmp	r8, r5
 80102c6:	d003      	beq.n	80102d0 <_dtoa_r+0x5d0>
 80102c8:	4641      	mov	r1, r8
 80102ca:	4648      	mov	r0, r9
 80102cc:	f000 fe44 	bl	8010f58 <_Bfree>
 80102d0:	4629      	mov	r1, r5
 80102d2:	4648      	mov	r0, r9
 80102d4:	f000 fe40 	bl	8010f58 <_Bfree>
 80102d8:	e7d0      	b.n	801027c <_dtoa_r+0x57c>
 80102da:	f8cd 8010 	str.w	r8, [sp, #16]
 80102de:	4633      	mov	r3, r6
 80102e0:	461e      	mov	r6, r3
 80102e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102e6:	2a39      	cmp	r2, #57	@ 0x39
 80102e8:	d106      	bne.n	80102f8 <_dtoa_r+0x5f8>
 80102ea:	429f      	cmp	r7, r3
 80102ec:	d1f8      	bne.n	80102e0 <_dtoa_r+0x5e0>
 80102ee:	9a04      	ldr	r2, [sp, #16]
 80102f0:	3201      	adds	r2, #1
 80102f2:	9204      	str	r2, [sp, #16]
 80102f4:	2230      	movs	r2, #48	@ 0x30
 80102f6:	703a      	strb	r2, [r7, #0]
 80102f8:	781a      	ldrb	r2, [r3, #0]
 80102fa:	3201      	adds	r2, #1
 80102fc:	701a      	strb	r2, [r3, #0]
 80102fe:	e7bd      	b.n	801027c <_dtoa_r+0x57c>
 8010300:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010304:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801030c:	f47f aeef 	bne.w	80100ee <_dtoa_r+0x3ee>
 8010310:	e710      	b.n	8010134 <_dtoa_r+0x434>
 8010312:	bf00      	nop
 8010314:	08012f20 	.word	0x08012f20
 8010318:	08012ef8 	.word	0x08012ef8
 801031c:	9908      	ldr	r1, [sp, #32]
 801031e:	2900      	cmp	r1, #0
 8010320:	f000 80e3 	beq.w	80104ea <_dtoa_r+0x7ea>
 8010324:	9907      	ldr	r1, [sp, #28]
 8010326:	2901      	cmp	r1, #1
 8010328:	f300 80c8 	bgt.w	80104bc <_dtoa_r+0x7bc>
 801032c:	2d00      	cmp	r5, #0
 801032e:	f000 80c1 	beq.w	80104b4 <_dtoa_r+0x7b4>
 8010332:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010336:	9e05      	ldr	r6, [sp, #20]
 8010338:	461c      	mov	r4, r3
 801033a:	9304      	str	r3, [sp, #16]
 801033c:	9b05      	ldr	r3, [sp, #20]
 801033e:	4413      	add	r3, r2
 8010340:	9305      	str	r3, [sp, #20]
 8010342:	9b06      	ldr	r3, [sp, #24]
 8010344:	2101      	movs	r1, #1
 8010346:	4413      	add	r3, r2
 8010348:	4648      	mov	r0, r9
 801034a:	9306      	str	r3, [sp, #24]
 801034c:	f000 ff02 	bl	8011154 <__i2b>
 8010350:	9b04      	ldr	r3, [sp, #16]
 8010352:	4605      	mov	r5, r0
 8010354:	b166      	cbz	r6, 8010370 <_dtoa_r+0x670>
 8010356:	9a06      	ldr	r2, [sp, #24]
 8010358:	2a00      	cmp	r2, #0
 801035a:	dd09      	ble.n	8010370 <_dtoa_r+0x670>
 801035c:	42b2      	cmp	r2, r6
 801035e:	9905      	ldr	r1, [sp, #20]
 8010360:	bfa8      	it	ge
 8010362:	4632      	movge	r2, r6
 8010364:	1a89      	subs	r1, r1, r2
 8010366:	9105      	str	r1, [sp, #20]
 8010368:	9906      	ldr	r1, [sp, #24]
 801036a:	1ab6      	subs	r6, r6, r2
 801036c:	1a8a      	subs	r2, r1, r2
 801036e:	9206      	str	r2, [sp, #24]
 8010370:	b1fb      	cbz	r3, 80103b2 <_dtoa_r+0x6b2>
 8010372:	9a08      	ldr	r2, [sp, #32]
 8010374:	2a00      	cmp	r2, #0
 8010376:	f000 80bc 	beq.w	80104f2 <_dtoa_r+0x7f2>
 801037a:	b19c      	cbz	r4, 80103a4 <_dtoa_r+0x6a4>
 801037c:	4629      	mov	r1, r5
 801037e:	4622      	mov	r2, r4
 8010380:	4648      	mov	r0, r9
 8010382:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010384:	f000 ffa6 	bl	80112d4 <__pow5mult>
 8010388:	9a01      	ldr	r2, [sp, #4]
 801038a:	4601      	mov	r1, r0
 801038c:	4605      	mov	r5, r0
 801038e:	4648      	mov	r0, r9
 8010390:	f000 fef6 	bl	8011180 <__multiply>
 8010394:	9901      	ldr	r1, [sp, #4]
 8010396:	9004      	str	r0, [sp, #16]
 8010398:	4648      	mov	r0, r9
 801039a:	f000 fddd 	bl	8010f58 <_Bfree>
 801039e:	9a04      	ldr	r2, [sp, #16]
 80103a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103a2:	9201      	str	r2, [sp, #4]
 80103a4:	1b1a      	subs	r2, r3, r4
 80103a6:	d004      	beq.n	80103b2 <_dtoa_r+0x6b2>
 80103a8:	9901      	ldr	r1, [sp, #4]
 80103aa:	4648      	mov	r0, r9
 80103ac:	f000 ff92 	bl	80112d4 <__pow5mult>
 80103b0:	9001      	str	r0, [sp, #4]
 80103b2:	2101      	movs	r1, #1
 80103b4:	4648      	mov	r0, r9
 80103b6:	f000 fecd 	bl	8011154 <__i2b>
 80103ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103bc:	4604      	mov	r4, r0
 80103be:	2b00      	cmp	r3, #0
 80103c0:	f000 81d0 	beq.w	8010764 <_dtoa_r+0xa64>
 80103c4:	461a      	mov	r2, r3
 80103c6:	4601      	mov	r1, r0
 80103c8:	4648      	mov	r0, r9
 80103ca:	f000 ff83 	bl	80112d4 <__pow5mult>
 80103ce:	9b07      	ldr	r3, [sp, #28]
 80103d0:	2b01      	cmp	r3, #1
 80103d2:	4604      	mov	r4, r0
 80103d4:	f300 8095 	bgt.w	8010502 <_dtoa_r+0x802>
 80103d8:	9b02      	ldr	r3, [sp, #8]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	f040 808b 	bne.w	80104f6 <_dtoa_r+0x7f6>
 80103e0:	9b03      	ldr	r3, [sp, #12]
 80103e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80103e6:	2a00      	cmp	r2, #0
 80103e8:	f040 8087 	bne.w	80104fa <_dtoa_r+0x7fa>
 80103ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80103f0:	0d12      	lsrs	r2, r2, #20
 80103f2:	0512      	lsls	r2, r2, #20
 80103f4:	2a00      	cmp	r2, #0
 80103f6:	f000 8082 	beq.w	80104fe <_dtoa_r+0x7fe>
 80103fa:	9b05      	ldr	r3, [sp, #20]
 80103fc:	3301      	adds	r3, #1
 80103fe:	9305      	str	r3, [sp, #20]
 8010400:	9b06      	ldr	r3, [sp, #24]
 8010402:	3301      	adds	r3, #1
 8010404:	9306      	str	r3, [sp, #24]
 8010406:	2301      	movs	r3, #1
 8010408:	930b      	str	r3, [sp, #44]	@ 0x2c
 801040a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801040c:	2b00      	cmp	r3, #0
 801040e:	f000 81af 	beq.w	8010770 <_dtoa_r+0xa70>
 8010412:	6922      	ldr	r2, [r4, #16]
 8010414:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010418:	6910      	ldr	r0, [r2, #16]
 801041a:	f000 fe4f 	bl	80110bc <__hi0bits>
 801041e:	f1c0 0020 	rsb	r0, r0, #32
 8010422:	9b06      	ldr	r3, [sp, #24]
 8010424:	4418      	add	r0, r3
 8010426:	f010 001f 	ands.w	r0, r0, #31
 801042a:	d076      	beq.n	801051a <_dtoa_r+0x81a>
 801042c:	f1c0 0220 	rsb	r2, r0, #32
 8010430:	2a04      	cmp	r2, #4
 8010432:	dd69      	ble.n	8010508 <_dtoa_r+0x808>
 8010434:	9b05      	ldr	r3, [sp, #20]
 8010436:	f1c0 001c 	rsb	r0, r0, #28
 801043a:	4403      	add	r3, r0
 801043c:	9305      	str	r3, [sp, #20]
 801043e:	9b06      	ldr	r3, [sp, #24]
 8010440:	4406      	add	r6, r0
 8010442:	4403      	add	r3, r0
 8010444:	9306      	str	r3, [sp, #24]
 8010446:	9b05      	ldr	r3, [sp, #20]
 8010448:	2b00      	cmp	r3, #0
 801044a:	dd05      	ble.n	8010458 <_dtoa_r+0x758>
 801044c:	9901      	ldr	r1, [sp, #4]
 801044e:	461a      	mov	r2, r3
 8010450:	4648      	mov	r0, r9
 8010452:	f000 ff99 	bl	8011388 <__lshift>
 8010456:	9001      	str	r0, [sp, #4]
 8010458:	9b06      	ldr	r3, [sp, #24]
 801045a:	2b00      	cmp	r3, #0
 801045c:	dd05      	ble.n	801046a <_dtoa_r+0x76a>
 801045e:	4621      	mov	r1, r4
 8010460:	461a      	mov	r2, r3
 8010462:	4648      	mov	r0, r9
 8010464:	f000 ff90 	bl	8011388 <__lshift>
 8010468:	4604      	mov	r4, r0
 801046a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801046c:	2b00      	cmp	r3, #0
 801046e:	d056      	beq.n	801051e <_dtoa_r+0x81e>
 8010470:	9801      	ldr	r0, [sp, #4]
 8010472:	4621      	mov	r1, r4
 8010474:	f000 fff4 	bl	8011460 <__mcmp>
 8010478:	2800      	cmp	r0, #0
 801047a:	da50      	bge.n	801051e <_dtoa_r+0x81e>
 801047c:	f108 33ff 	add.w	r3, r8, #4294967295
 8010480:	9304      	str	r3, [sp, #16]
 8010482:	9901      	ldr	r1, [sp, #4]
 8010484:	2300      	movs	r3, #0
 8010486:	220a      	movs	r2, #10
 8010488:	4648      	mov	r0, r9
 801048a:	f000 fd87 	bl	8010f9c <__multadd>
 801048e:	9b08      	ldr	r3, [sp, #32]
 8010490:	9001      	str	r0, [sp, #4]
 8010492:	2b00      	cmp	r3, #0
 8010494:	f000 816e 	beq.w	8010774 <_dtoa_r+0xa74>
 8010498:	4629      	mov	r1, r5
 801049a:	2300      	movs	r3, #0
 801049c:	220a      	movs	r2, #10
 801049e:	4648      	mov	r0, r9
 80104a0:	f000 fd7c 	bl	8010f9c <__multadd>
 80104a4:	f1bb 0f00 	cmp.w	fp, #0
 80104a8:	4605      	mov	r5, r0
 80104aa:	dc64      	bgt.n	8010576 <_dtoa_r+0x876>
 80104ac:	9b07      	ldr	r3, [sp, #28]
 80104ae:	2b02      	cmp	r3, #2
 80104b0:	dc3e      	bgt.n	8010530 <_dtoa_r+0x830>
 80104b2:	e060      	b.n	8010576 <_dtoa_r+0x876>
 80104b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80104b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80104ba:	e73c      	b.n	8010336 <_dtoa_r+0x636>
 80104bc:	f10a 34ff 	add.w	r4, sl, #4294967295
 80104c0:	42a3      	cmp	r3, r4
 80104c2:	bfbf      	itttt	lt
 80104c4:	1ae2      	sublt	r2, r4, r3
 80104c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80104c8:	189b      	addlt	r3, r3, r2
 80104ca:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80104cc:	bfae      	itee	ge
 80104ce:	1b1c      	subge	r4, r3, r4
 80104d0:	4623      	movlt	r3, r4
 80104d2:	2400      	movlt	r4, #0
 80104d4:	f1ba 0f00 	cmp.w	sl, #0
 80104d8:	bfb5      	itete	lt
 80104da:	9a05      	ldrlt	r2, [sp, #20]
 80104dc:	9e05      	ldrge	r6, [sp, #20]
 80104de:	eba2 060a 	sublt.w	r6, r2, sl
 80104e2:	4652      	movge	r2, sl
 80104e4:	bfb8      	it	lt
 80104e6:	2200      	movlt	r2, #0
 80104e8:	e727      	b.n	801033a <_dtoa_r+0x63a>
 80104ea:	9e05      	ldr	r6, [sp, #20]
 80104ec:	9d08      	ldr	r5, [sp, #32]
 80104ee:	461c      	mov	r4, r3
 80104f0:	e730      	b.n	8010354 <_dtoa_r+0x654>
 80104f2:	461a      	mov	r2, r3
 80104f4:	e758      	b.n	80103a8 <_dtoa_r+0x6a8>
 80104f6:	2300      	movs	r3, #0
 80104f8:	e786      	b.n	8010408 <_dtoa_r+0x708>
 80104fa:	9b02      	ldr	r3, [sp, #8]
 80104fc:	e784      	b.n	8010408 <_dtoa_r+0x708>
 80104fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010500:	e783      	b.n	801040a <_dtoa_r+0x70a>
 8010502:	2300      	movs	r3, #0
 8010504:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010506:	e784      	b.n	8010412 <_dtoa_r+0x712>
 8010508:	d09d      	beq.n	8010446 <_dtoa_r+0x746>
 801050a:	9b05      	ldr	r3, [sp, #20]
 801050c:	321c      	adds	r2, #28
 801050e:	4413      	add	r3, r2
 8010510:	9305      	str	r3, [sp, #20]
 8010512:	9b06      	ldr	r3, [sp, #24]
 8010514:	4416      	add	r6, r2
 8010516:	4413      	add	r3, r2
 8010518:	e794      	b.n	8010444 <_dtoa_r+0x744>
 801051a:	4602      	mov	r2, r0
 801051c:	e7f5      	b.n	801050a <_dtoa_r+0x80a>
 801051e:	f1ba 0f00 	cmp.w	sl, #0
 8010522:	f8cd 8010 	str.w	r8, [sp, #16]
 8010526:	46d3      	mov	fp, sl
 8010528:	dc21      	bgt.n	801056e <_dtoa_r+0x86e>
 801052a:	9b07      	ldr	r3, [sp, #28]
 801052c:	2b02      	cmp	r3, #2
 801052e:	dd1e      	ble.n	801056e <_dtoa_r+0x86e>
 8010530:	f1bb 0f00 	cmp.w	fp, #0
 8010534:	f47f aeb7 	bne.w	80102a6 <_dtoa_r+0x5a6>
 8010538:	4621      	mov	r1, r4
 801053a:	465b      	mov	r3, fp
 801053c:	2205      	movs	r2, #5
 801053e:	4648      	mov	r0, r9
 8010540:	f000 fd2c 	bl	8010f9c <__multadd>
 8010544:	4601      	mov	r1, r0
 8010546:	4604      	mov	r4, r0
 8010548:	9801      	ldr	r0, [sp, #4]
 801054a:	f000 ff89 	bl	8011460 <__mcmp>
 801054e:	2800      	cmp	r0, #0
 8010550:	f77f aea9 	ble.w	80102a6 <_dtoa_r+0x5a6>
 8010554:	463e      	mov	r6, r7
 8010556:	2331      	movs	r3, #49	@ 0x31
 8010558:	f806 3b01 	strb.w	r3, [r6], #1
 801055c:	9b04      	ldr	r3, [sp, #16]
 801055e:	3301      	adds	r3, #1
 8010560:	9304      	str	r3, [sp, #16]
 8010562:	e6a4      	b.n	80102ae <_dtoa_r+0x5ae>
 8010564:	f8cd 8010 	str.w	r8, [sp, #16]
 8010568:	4654      	mov	r4, sl
 801056a:	4625      	mov	r5, r4
 801056c:	e7f2      	b.n	8010554 <_dtoa_r+0x854>
 801056e:	9b08      	ldr	r3, [sp, #32]
 8010570:	2b00      	cmp	r3, #0
 8010572:	f000 8103 	beq.w	801077c <_dtoa_r+0xa7c>
 8010576:	2e00      	cmp	r6, #0
 8010578:	dd05      	ble.n	8010586 <_dtoa_r+0x886>
 801057a:	4629      	mov	r1, r5
 801057c:	4632      	mov	r2, r6
 801057e:	4648      	mov	r0, r9
 8010580:	f000 ff02 	bl	8011388 <__lshift>
 8010584:	4605      	mov	r5, r0
 8010586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010588:	2b00      	cmp	r3, #0
 801058a:	d058      	beq.n	801063e <_dtoa_r+0x93e>
 801058c:	6869      	ldr	r1, [r5, #4]
 801058e:	4648      	mov	r0, r9
 8010590:	f000 fca2 	bl	8010ed8 <_Balloc>
 8010594:	4606      	mov	r6, r0
 8010596:	b928      	cbnz	r0, 80105a4 <_dtoa_r+0x8a4>
 8010598:	4b82      	ldr	r3, [pc, #520]	@ (80107a4 <_dtoa_r+0xaa4>)
 801059a:	4602      	mov	r2, r0
 801059c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80105a0:	f7ff bbc7 	b.w	800fd32 <_dtoa_r+0x32>
 80105a4:	692a      	ldr	r2, [r5, #16]
 80105a6:	3202      	adds	r2, #2
 80105a8:	0092      	lsls	r2, r2, #2
 80105aa:	f105 010c 	add.w	r1, r5, #12
 80105ae:	300c      	adds	r0, #12
 80105b0:	f7ff fafd 	bl	800fbae <memcpy>
 80105b4:	2201      	movs	r2, #1
 80105b6:	4631      	mov	r1, r6
 80105b8:	4648      	mov	r0, r9
 80105ba:	f000 fee5 	bl	8011388 <__lshift>
 80105be:	1c7b      	adds	r3, r7, #1
 80105c0:	9305      	str	r3, [sp, #20]
 80105c2:	eb07 030b 	add.w	r3, r7, fp
 80105c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80105c8:	9b02      	ldr	r3, [sp, #8]
 80105ca:	f003 0301 	and.w	r3, r3, #1
 80105ce:	46a8      	mov	r8, r5
 80105d0:	9308      	str	r3, [sp, #32]
 80105d2:	4605      	mov	r5, r0
 80105d4:	9b05      	ldr	r3, [sp, #20]
 80105d6:	9801      	ldr	r0, [sp, #4]
 80105d8:	4621      	mov	r1, r4
 80105da:	f103 3bff 	add.w	fp, r3, #4294967295
 80105de:	f7ff fb05 	bl	800fbec <quorem>
 80105e2:	4641      	mov	r1, r8
 80105e4:	9002      	str	r0, [sp, #8]
 80105e6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80105ea:	9801      	ldr	r0, [sp, #4]
 80105ec:	f000 ff38 	bl	8011460 <__mcmp>
 80105f0:	462a      	mov	r2, r5
 80105f2:	9006      	str	r0, [sp, #24]
 80105f4:	4621      	mov	r1, r4
 80105f6:	4648      	mov	r0, r9
 80105f8:	f000 ff4e 	bl	8011498 <__mdiff>
 80105fc:	68c2      	ldr	r2, [r0, #12]
 80105fe:	4606      	mov	r6, r0
 8010600:	b9fa      	cbnz	r2, 8010642 <_dtoa_r+0x942>
 8010602:	4601      	mov	r1, r0
 8010604:	9801      	ldr	r0, [sp, #4]
 8010606:	f000 ff2b 	bl	8011460 <__mcmp>
 801060a:	4602      	mov	r2, r0
 801060c:	4631      	mov	r1, r6
 801060e:	4648      	mov	r0, r9
 8010610:	920a      	str	r2, [sp, #40]	@ 0x28
 8010612:	f000 fca1 	bl	8010f58 <_Bfree>
 8010616:	9b07      	ldr	r3, [sp, #28]
 8010618:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801061a:	9e05      	ldr	r6, [sp, #20]
 801061c:	ea43 0102 	orr.w	r1, r3, r2
 8010620:	9b08      	ldr	r3, [sp, #32]
 8010622:	4319      	orrs	r1, r3
 8010624:	d10f      	bne.n	8010646 <_dtoa_r+0x946>
 8010626:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801062a:	d028      	beq.n	801067e <_dtoa_r+0x97e>
 801062c:	9b06      	ldr	r3, [sp, #24]
 801062e:	2b00      	cmp	r3, #0
 8010630:	dd02      	ble.n	8010638 <_dtoa_r+0x938>
 8010632:	9b02      	ldr	r3, [sp, #8]
 8010634:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010638:	f88b a000 	strb.w	sl, [fp]
 801063c:	e639      	b.n	80102b2 <_dtoa_r+0x5b2>
 801063e:	4628      	mov	r0, r5
 8010640:	e7bd      	b.n	80105be <_dtoa_r+0x8be>
 8010642:	2201      	movs	r2, #1
 8010644:	e7e2      	b.n	801060c <_dtoa_r+0x90c>
 8010646:	9b06      	ldr	r3, [sp, #24]
 8010648:	2b00      	cmp	r3, #0
 801064a:	db04      	blt.n	8010656 <_dtoa_r+0x956>
 801064c:	9907      	ldr	r1, [sp, #28]
 801064e:	430b      	orrs	r3, r1
 8010650:	9908      	ldr	r1, [sp, #32]
 8010652:	430b      	orrs	r3, r1
 8010654:	d120      	bne.n	8010698 <_dtoa_r+0x998>
 8010656:	2a00      	cmp	r2, #0
 8010658:	ddee      	ble.n	8010638 <_dtoa_r+0x938>
 801065a:	9901      	ldr	r1, [sp, #4]
 801065c:	2201      	movs	r2, #1
 801065e:	4648      	mov	r0, r9
 8010660:	f000 fe92 	bl	8011388 <__lshift>
 8010664:	4621      	mov	r1, r4
 8010666:	9001      	str	r0, [sp, #4]
 8010668:	f000 fefa 	bl	8011460 <__mcmp>
 801066c:	2800      	cmp	r0, #0
 801066e:	dc03      	bgt.n	8010678 <_dtoa_r+0x978>
 8010670:	d1e2      	bne.n	8010638 <_dtoa_r+0x938>
 8010672:	f01a 0f01 	tst.w	sl, #1
 8010676:	d0df      	beq.n	8010638 <_dtoa_r+0x938>
 8010678:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801067c:	d1d9      	bne.n	8010632 <_dtoa_r+0x932>
 801067e:	2339      	movs	r3, #57	@ 0x39
 8010680:	f88b 3000 	strb.w	r3, [fp]
 8010684:	4633      	mov	r3, r6
 8010686:	461e      	mov	r6, r3
 8010688:	3b01      	subs	r3, #1
 801068a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801068e:	2a39      	cmp	r2, #57	@ 0x39
 8010690:	d053      	beq.n	801073a <_dtoa_r+0xa3a>
 8010692:	3201      	adds	r2, #1
 8010694:	701a      	strb	r2, [r3, #0]
 8010696:	e60c      	b.n	80102b2 <_dtoa_r+0x5b2>
 8010698:	2a00      	cmp	r2, #0
 801069a:	dd07      	ble.n	80106ac <_dtoa_r+0x9ac>
 801069c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80106a0:	d0ed      	beq.n	801067e <_dtoa_r+0x97e>
 80106a2:	f10a 0301 	add.w	r3, sl, #1
 80106a6:	f88b 3000 	strb.w	r3, [fp]
 80106aa:	e602      	b.n	80102b2 <_dtoa_r+0x5b2>
 80106ac:	9b05      	ldr	r3, [sp, #20]
 80106ae:	9a05      	ldr	r2, [sp, #20]
 80106b0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80106b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106b6:	4293      	cmp	r3, r2
 80106b8:	d029      	beq.n	801070e <_dtoa_r+0xa0e>
 80106ba:	9901      	ldr	r1, [sp, #4]
 80106bc:	2300      	movs	r3, #0
 80106be:	220a      	movs	r2, #10
 80106c0:	4648      	mov	r0, r9
 80106c2:	f000 fc6b 	bl	8010f9c <__multadd>
 80106c6:	45a8      	cmp	r8, r5
 80106c8:	9001      	str	r0, [sp, #4]
 80106ca:	f04f 0300 	mov.w	r3, #0
 80106ce:	f04f 020a 	mov.w	r2, #10
 80106d2:	4641      	mov	r1, r8
 80106d4:	4648      	mov	r0, r9
 80106d6:	d107      	bne.n	80106e8 <_dtoa_r+0x9e8>
 80106d8:	f000 fc60 	bl	8010f9c <__multadd>
 80106dc:	4680      	mov	r8, r0
 80106de:	4605      	mov	r5, r0
 80106e0:	9b05      	ldr	r3, [sp, #20]
 80106e2:	3301      	adds	r3, #1
 80106e4:	9305      	str	r3, [sp, #20]
 80106e6:	e775      	b.n	80105d4 <_dtoa_r+0x8d4>
 80106e8:	f000 fc58 	bl	8010f9c <__multadd>
 80106ec:	4629      	mov	r1, r5
 80106ee:	4680      	mov	r8, r0
 80106f0:	2300      	movs	r3, #0
 80106f2:	220a      	movs	r2, #10
 80106f4:	4648      	mov	r0, r9
 80106f6:	f000 fc51 	bl	8010f9c <__multadd>
 80106fa:	4605      	mov	r5, r0
 80106fc:	e7f0      	b.n	80106e0 <_dtoa_r+0x9e0>
 80106fe:	f1bb 0f00 	cmp.w	fp, #0
 8010702:	bfcc      	ite	gt
 8010704:	465e      	movgt	r6, fp
 8010706:	2601      	movle	r6, #1
 8010708:	443e      	add	r6, r7
 801070a:	f04f 0800 	mov.w	r8, #0
 801070e:	9901      	ldr	r1, [sp, #4]
 8010710:	2201      	movs	r2, #1
 8010712:	4648      	mov	r0, r9
 8010714:	f000 fe38 	bl	8011388 <__lshift>
 8010718:	4621      	mov	r1, r4
 801071a:	9001      	str	r0, [sp, #4]
 801071c:	f000 fea0 	bl	8011460 <__mcmp>
 8010720:	2800      	cmp	r0, #0
 8010722:	dcaf      	bgt.n	8010684 <_dtoa_r+0x984>
 8010724:	d102      	bne.n	801072c <_dtoa_r+0xa2c>
 8010726:	f01a 0f01 	tst.w	sl, #1
 801072a:	d1ab      	bne.n	8010684 <_dtoa_r+0x984>
 801072c:	4633      	mov	r3, r6
 801072e:	461e      	mov	r6, r3
 8010730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010734:	2a30      	cmp	r2, #48	@ 0x30
 8010736:	d0fa      	beq.n	801072e <_dtoa_r+0xa2e>
 8010738:	e5bb      	b.n	80102b2 <_dtoa_r+0x5b2>
 801073a:	429f      	cmp	r7, r3
 801073c:	d1a3      	bne.n	8010686 <_dtoa_r+0x986>
 801073e:	9b04      	ldr	r3, [sp, #16]
 8010740:	3301      	adds	r3, #1
 8010742:	9304      	str	r3, [sp, #16]
 8010744:	2331      	movs	r3, #49	@ 0x31
 8010746:	703b      	strb	r3, [r7, #0]
 8010748:	e5b3      	b.n	80102b2 <_dtoa_r+0x5b2>
 801074a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801074c:	4f16      	ldr	r7, [pc, #88]	@ (80107a8 <_dtoa_r+0xaa8>)
 801074e:	b11b      	cbz	r3, 8010758 <_dtoa_r+0xa58>
 8010750:	f107 0308 	add.w	r3, r7, #8
 8010754:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010756:	6013      	str	r3, [r2, #0]
 8010758:	4638      	mov	r0, r7
 801075a:	b011      	add	sp, #68	@ 0x44
 801075c:	ecbd 8b02 	vpop	{d8}
 8010760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010764:	9b07      	ldr	r3, [sp, #28]
 8010766:	2b01      	cmp	r3, #1
 8010768:	f77f ae36 	ble.w	80103d8 <_dtoa_r+0x6d8>
 801076c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801076e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010770:	2001      	movs	r0, #1
 8010772:	e656      	b.n	8010422 <_dtoa_r+0x722>
 8010774:	f1bb 0f00 	cmp.w	fp, #0
 8010778:	f77f aed7 	ble.w	801052a <_dtoa_r+0x82a>
 801077c:	463e      	mov	r6, r7
 801077e:	9801      	ldr	r0, [sp, #4]
 8010780:	4621      	mov	r1, r4
 8010782:	f7ff fa33 	bl	800fbec <quorem>
 8010786:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801078a:	f806 ab01 	strb.w	sl, [r6], #1
 801078e:	1bf2      	subs	r2, r6, r7
 8010790:	4593      	cmp	fp, r2
 8010792:	ddb4      	ble.n	80106fe <_dtoa_r+0x9fe>
 8010794:	9901      	ldr	r1, [sp, #4]
 8010796:	2300      	movs	r3, #0
 8010798:	220a      	movs	r2, #10
 801079a:	4648      	mov	r0, r9
 801079c:	f000 fbfe 	bl	8010f9c <__multadd>
 80107a0:	9001      	str	r0, [sp, #4]
 80107a2:	e7ec      	b.n	801077e <_dtoa_r+0xa7e>
 80107a4:	08012e1b 	.word	0x08012e1b
 80107a8:	08012d9f 	.word	0x08012d9f

080107ac <_free_r>:
 80107ac:	b538      	push	{r3, r4, r5, lr}
 80107ae:	4605      	mov	r5, r0
 80107b0:	2900      	cmp	r1, #0
 80107b2:	d041      	beq.n	8010838 <_free_r+0x8c>
 80107b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107b8:	1f0c      	subs	r4, r1, #4
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	bfb8      	it	lt
 80107be:	18e4      	addlt	r4, r4, r3
 80107c0:	f7fd fbf0 	bl	800dfa4 <__malloc_lock>
 80107c4:	4a1d      	ldr	r2, [pc, #116]	@ (801083c <_free_r+0x90>)
 80107c6:	6813      	ldr	r3, [r2, #0]
 80107c8:	b933      	cbnz	r3, 80107d8 <_free_r+0x2c>
 80107ca:	6063      	str	r3, [r4, #4]
 80107cc:	6014      	str	r4, [r2, #0]
 80107ce:	4628      	mov	r0, r5
 80107d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107d4:	f7fd bbec 	b.w	800dfb0 <__malloc_unlock>
 80107d8:	42a3      	cmp	r3, r4
 80107da:	d908      	bls.n	80107ee <_free_r+0x42>
 80107dc:	6820      	ldr	r0, [r4, #0]
 80107de:	1821      	adds	r1, r4, r0
 80107e0:	428b      	cmp	r3, r1
 80107e2:	bf01      	itttt	eq
 80107e4:	6819      	ldreq	r1, [r3, #0]
 80107e6:	685b      	ldreq	r3, [r3, #4]
 80107e8:	1809      	addeq	r1, r1, r0
 80107ea:	6021      	streq	r1, [r4, #0]
 80107ec:	e7ed      	b.n	80107ca <_free_r+0x1e>
 80107ee:	461a      	mov	r2, r3
 80107f0:	685b      	ldr	r3, [r3, #4]
 80107f2:	b10b      	cbz	r3, 80107f8 <_free_r+0x4c>
 80107f4:	42a3      	cmp	r3, r4
 80107f6:	d9fa      	bls.n	80107ee <_free_r+0x42>
 80107f8:	6811      	ldr	r1, [r2, #0]
 80107fa:	1850      	adds	r0, r2, r1
 80107fc:	42a0      	cmp	r0, r4
 80107fe:	d10b      	bne.n	8010818 <_free_r+0x6c>
 8010800:	6820      	ldr	r0, [r4, #0]
 8010802:	4401      	add	r1, r0
 8010804:	1850      	adds	r0, r2, r1
 8010806:	4283      	cmp	r3, r0
 8010808:	6011      	str	r1, [r2, #0]
 801080a:	d1e0      	bne.n	80107ce <_free_r+0x22>
 801080c:	6818      	ldr	r0, [r3, #0]
 801080e:	685b      	ldr	r3, [r3, #4]
 8010810:	6053      	str	r3, [r2, #4]
 8010812:	4408      	add	r0, r1
 8010814:	6010      	str	r0, [r2, #0]
 8010816:	e7da      	b.n	80107ce <_free_r+0x22>
 8010818:	d902      	bls.n	8010820 <_free_r+0x74>
 801081a:	230c      	movs	r3, #12
 801081c:	602b      	str	r3, [r5, #0]
 801081e:	e7d6      	b.n	80107ce <_free_r+0x22>
 8010820:	6820      	ldr	r0, [r4, #0]
 8010822:	1821      	adds	r1, r4, r0
 8010824:	428b      	cmp	r3, r1
 8010826:	bf04      	itt	eq
 8010828:	6819      	ldreq	r1, [r3, #0]
 801082a:	685b      	ldreq	r3, [r3, #4]
 801082c:	6063      	str	r3, [r4, #4]
 801082e:	bf04      	itt	eq
 8010830:	1809      	addeq	r1, r1, r0
 8010832:	6021      	streq	r1, [r4, #0]
 8010834:	6054      	str	r4, [r2, #4]
 8010836:	e7ca      	b.n	80107ce <_free_r+0x22>
 8010838:	bd38      	pop	{r3, r4, r5, pc}
 801083a:	bf00      	nop
 801083c:	24000d28 	.word	0x24000d28

08010840 <rshift>:
 8010840:	6903      	ldr	r3, [r0, #16]
 8010842:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010846:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801084a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801084e:	f100 0414 	add.w	r4, r0, #20
 8010852:	dd45      	ble.n	80108e0 <rshift+0xa0>
 8010854:	f011 011f 	ands.w	r1, r1, #31
 8010858:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801085c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010860:	d10c      	bne.n	801087c <rshift+0x3c>
 8010862:	f100 0710 	add.w	r7, r0, #16
 8010866:	4629      	mov	r1, r5
 8010868:	42b1      	cmp	r1, r6
 801086a:	d334      	bcc.n	80108d6 <rshift+0x96>
 801086c:	1a9b      	subs	r3, r3, r2
 801086e:	009b      	lsls	r3, r3, #2
 8010870:	1eea      	subs	r2, r5, #3
 8010872:	4296      	cmp	r6, r2
 8010874:	bf38      	it	cc
 8010876:	2300      	movcc	r3, #0
 8010878:	4423      	add	r3, r4
 801087a:	e015      	b.n	80108a8 <rshift+0x68>
 801087c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010880:	f1c1 0820 	rsb	r8, r1, #32
 8010884:	40cf      	lsrs	r7, r1
 8010886:	f105 0e04 	add.w	lr, r5, #4
 801088a:	46a1      	mov	r9, r4
 801088c:	4576      	cmp	r6, lr
 801088e:	46f4      	mov	ip, lr
 8010890:	d815      	bhi.n	80108be <rshift+0x7e>
 8010892:	1a9a      	subs	r2, r3, r2
 8010894:	0092      	lsls	r2, r2, #2
 8010896:	3a04      	subs	r2, #4
 8010898:	3501      	adds	r5, #1
 801089a:	42ae      	cmp	r6, r5
 801089c:	bf38      	it	cc
 801089e:	2200      	movcc	r2, #0
 80108a0:	18a3      	adds	r3, r4, r2
 80108a2:	50a7      	str	r7, [r4, r2]
 80108a4:	b107      	cbz	r7, 80108a8 <rshift+0x68>
 80108a6:	3304      	adds	r3, #4
 80108a8:	1b1a      	subs	r2, r3, r4
 80108aa:	42a3      	cmp	r3, r4
 80108ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80108b0:	bf08      	it	eq
 80108b2:	2300      	moveq	r3, #0
 80108b4:	6102      	str	r2, [r0, #16]
 80108b6:	bf08      	it	eq
 80108b8:	6143      	streq	r3, [r0, #20]
 80108ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108be:	f8dc c000 	ldr.w	ip, [ip]
 80108c2:	fa0c fc08 	lsl.w	ip, ip, r8
 80108c6:	ea4c 0707 	orr.w	r7, ip, r7
 80108ca:	f849 7b04 	str.w	r7, [r9], #4
 80108ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80108d2:	40cf      	lsrs	r7, r1
 80108d4:	e7da      	b.n	801088c <rshift+0x4c>
 80108d6:	f851 cb04 	ldr.w	ip, [r1], #4
 80108da:	f847 cf04 	str.w	ip, [r7, #4]!
 80108de:	e7c3      	b.n	8010868 <rshift+0x28>
 80108e0:	4623      	mov	r3, r4
 80108e2:	e7e1      	b.n	80108a8 <rshift+0x68>

080108e4 <__hexdig_fun>:
 80108e4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80108e8:	2b09      	cmp	r3, #9
 80108ea:	d802      	bhi.n	80108f2 <__hexdig_fun+0xe>
 80108ec:	3820      	subs	r0, #32
 80108ee:	b2c0      	uxtb	r0, r0
 80108f0:	4770      	bx	lr
 80108f2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80108f6:	2b05      	cmp	r3, #5
 80108f8:	d801      	bhi.n	80108fe <__hexdig_fun+0x1a>
 80108fa:	3847      	subs	r0, #71	@ 0x47
 80108fc:	e7f7      	b.n	80108ee <__hexdig_fun+0xa>
 80108fe:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010902:	2b05      	cmp	r3, #5
 8010904:	d801      	bhi.n	801090a <__hexdig_fun+0x26>
 8010906:	3827      	subs	r0, #39	@ 0x27
 8010908:	e7f1      	b.n	80108ee <__hexdig_fun+0xa>
 801090a:	2000      	movs	r0, #0
 801090c:	4770      	bx	lr
	...

08010910 <__gethex>:
 8010910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010914:	b085      	sub	sp, #20
 8010916:	468a      	mov	sl, r1
 8010918:	9302      	str	r3, [sp, #8]
 801091a:	680b      	ldr	r3, [r1, #0]
 801091c:	9001      	str	r0, [sp, #4]
 801091e:	4690      	mov	r8, r2
 8010920:	1c9c      	adds	r4, r3, #2
 8010922:	46a1      	mov	r9, r4
 8010924:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010928:	2830      	cmp	r0, #48	@ 0x30
 801092a:	d0fa      	beq.n	8010922 <__gethex+0x12>
 801092c:	eba9 0303 	sub.w	r3, r9, r3
 8010930:	f1a3 0b02 	sub.w	fp, r3, #2
 8010934:	f7ff ffd6 	bl	80108e4 <__hexdig_fun>
 8010938:	4605      	mov	r5, r0
 801093a:	2800      	cmp	r0, #0
 801093c:	d168      	bne.n	8010a10 <__gethex+0x100>
 801093e:	49a0      	ldr	r1, [pc, #640]	@ (8010bc0 <__gethex+0x2b0>)
 8010940:	2201      	movs	r2, #1
 8010942:	4648      	mov	r0, r9
 8010944:	f7ff f89a 	bl	800fa7c <strncmp>
 8010948:	4607      	mov	r7, r0
 801094a:	2800      	cmp	r0, #0
 801094c:	d167      	bne.n	8010a1e <__gethex+0x10e>
 801094e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010952:	4626      	mov	r6, r4
 8010954:	f7ff ffc6 	bl	80108e4 <__hexdig_fun>
 8010958:	2800      	cmp	r0, #0
 801095a:	d062      	beq.n	8010a22 <__gethex+0x112>
 801095c:	4623      	mov	r3, r4
 801095e:	7818      	ldrb	r0, [r3, #0]
 8010960:	2830      	cmp	r0, #48	@ 0x30
 8010962:	4699      	mov	r9, r3
 8010964:	f103 0301 	add.w	r3, r3, #1
 8010968:	d0f9      	beq.n	801095e <__gethex+0x4e>
 801096a:	f7ff ffbb 	bl	80108e4 <__hexdig_fun>
 801096e:	fab0 f580 	clz	r5, r0
 8010972:	096d      	lsrs	r5, r5, #5
 8010974:	f04f 0b01 	mov.w	fp, #1
 8010978:	464a      	mov	r2, r9
 801097a:	4616      	mov	r6, r2
 801097c:	3201      	adds	r2, #1
 801097e:	7830      	ldrb	r0, [r6, #0]
 8010980:	f7ff ffb0 	bl	80108e4 <__hexdig_fun>
 8010984:	2800      	cmp	r0, #0
 8010986:	d1f8      	bne.n	801097a <__gethex+0x6a>
 8010988:	498d      	ldr	r1, [pc, #564]	@ (8010bc0 <__gethex+0x2b0>)
 801098a:	2201      	movs	r2, #1
 801098c:	4630      	mov	r0, r6
 801098e:	f7ff f875 	bl	800fa7c <strncmp>
 8010992:	2800      	cmp	r0, #0
 8010994:	d13f      	bne.n	8010a16 <__gethex+0x106>
 8010996:	b944      	cbnz	r4, 80109aa <__gethex+0x9a>
 8010998:	1c74      	adds	r4, r6, #1
 801099a:	4622      	mov	r2, r4
 801099c:	4616      	mov	r6, r2
 801099e:	3201      	adds	r2, #1
 80109a0:	7830      	ldrb	r0, [r6, #0]
 80109a2:	f7ff ff9f 	bl	80108e4 <__hexdig_fun>
 80109a6:	2800      	cmp	r0, #0
 80109a8:	d1f8      	bne.n	801099c <__gethex+0x8c>
 80109aa:	1ba4      	subs	r4, r4, r6
 80109ac:	00a7      	lsls	r7, r4, #2
 80109ae:	7833      	ldrb	r3, [r6, #0]
 80109b0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80109b4:	2b50      	cmp	r3, #80	@ 0x50
 80109b6:	d13e      	bne.n	8010a36 <__gethex+0x126>
 80109b8:	7873      	ldrb	r3, [r6, #1]
 80109ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80109bc:	d033      	beq.n	8010a26 <__gethex+0x116>
 80109be:	2b2d      	cmp	r3, #45	@ 0x2d
 80109c0:	d034      	beq.n	8010a2c <__gethex+0x11c>
 80109c2:	1c71      	adds	r1, r6, #1
 80109c4:	2400      	movs	r4, #0
 80109c6:	7808      	ldrb	r0, [r1, #0]
 80109c8:	f7ff ff8c 	bl	80108e4 <__hexdig_fun>
 80109cc:	1e43      	subs	r3, r0, #1
 80109ce:	b2db      	uxtb	r3, r3
 80109d0:	2b18      	cmp	r3, #24
 80109d2:	d830      	bhi.n	8010a36 <__gethex+0x126>
 80109d4:	f1a0 0210 	sub.w	r2, r0, #16
 80109d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80109dc:	f7ff ff82 	bl	80108e4 <__hexdig_fun>
 80109e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80109e4:	fa5f fc8c 	uxtb.w	ip, ip
 80109e8:	f1bc 0f18 	cmp.w	ip, #24
 80109ec:	f04f 030a 	mov.w	r3, #10
 80109f0:	d91e      	bls.n	8010a30 <__gethex+0x120>
 80109f2:	b104      	cbz	r4, 80109f6 <__gethex+0xe6>
 80109f4:	4252      	negs	r2, r2
 80109f6:	4417      	add	r7, r2
 80109f8:	f8ca 1000 	str.w	r1, [sl]
 80109fc:	b1ed      	cbz	r5, 8010a3a <__gethex+0x12a>
 80109fe:	f1bb 0f00 	cmp.w	fp, #0
 8010a02:	bf0c      	ite	eq
 8010a04:	2506      	moveq	r5, #6
 8010a06:	2500      	movne	r5, #0
 8010a08:	4628      	mov	r0, r5
 8010a0a:	b005      	add	sp, #20
 8010a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a10:	2500      	movs	r5, #0
 8010a12:	462c      	mov	r4, r5
 8010a14:	e7b0      	b.n	8010978 <__gethex+0x68>
 8010a16:	2c00      	cmp	r4, #0
 8010a18:	d1c7      	bne.n	80109aa <__gethex+0x9a>
 8010a1a:	4627      	mov	r7, r4
 8010a1c:	e7c7      	b.n	80109ae <__gethex+0x9e>
 8010a1e:	464e      	mov	r6, r9
 8010a20:	462f      	mov	r7, r5
 8010a22:	2501      	movs	r5, #1
 8010a24:	e7c3      	b.n	80109ae <__gethex+0x9e>
 8010a26:	2400      	movs	r4, #0
 8010a28:	1cb1      	adds	r1, r6, #2
 8010a2a:	e7cc      	b.n	80109c6 <__gethex+0xb6>
 8010a2c:	2401      	movs	r4, #1
 8010a2e:	e7fb      	b.n	8010a28 <__gethex+0x118>
 8010a30:	fb03 0002 	mla	r0, r3, r2, r0
 8010a34:	e7ce      	b.n	80109d4 <__gethex+0xc4>
 8010a36:	4631      	mov	r1, r6
 8010a38:	e7de      	b.n	80109f8 <__gethex+0xe8>
 8010a3a:	eba6 0309 	sub.w	r3, r6, r9
 8010a3e:	3b01      	subs	r3, #1
 8010a40:	4629      	mov	r1, r5
 8010a42:	2b07      	cmp	r3, #7
 8010a44:	dc0a      	bgt.n	8010a5c <__gethex+0x14c>
 8010a46:	9801      	ldr	r0, [sp, #4]
 8010a48:	f000 fa46 	bl	8010ed8 <_Balloc>
 8010a4c:	4604      	mov	r4, r0
 8010a4e:	b940      	cbnz	r0, 8010a62 <__gethex+0x152>
 8010a50:	4b5c      	ldr	r3, [pc, #368]	@ (8010bc4 <__gethex+0x2b4>)
 8010a52:	4602      	mov	r2, r0
 8010a54:	21e4      	movs	r1, #228	@ 0xe4
 8010a56:	485c      	ldr	r0, [pc, #368]	@ (8010bc8 <__gethex+0x2b8>)
 8010a58:	f001 fd22 	bl	80124a0 <__assert_func>
 8010a5c:	3101      	adds	r1, #1
 8010a5e:	105b      	asrs	r3, r3, #1
 8010a60:	e7ef      	b.n	8010a42 <__gethex+0x132>
 8010a62:	f100 0a14 	add.w	sl, r0, #20
 8010a66:	2300      	movs	r3, #0
 8010a68:	4655      	mov	r5, sl
 8010a6a:	469b      	mov	fp, r3
 8010a6c:	45b1      	cmp	r9, r6
 8010a6e:	d337      	bcc.n	8010ae0 <__gethex+0x1d0>
 8010a70:	f845 bb04 	str.w	fp, [r5], #4
 8010a74:	eba5 050a 	sub.w	r5, r5, sl
 8010a78:	10ad      	asrs	r5, r5, #2
 8010a7a:	6125      	str	r5, [r4, #16]
 8010a7c:	4658      	mov	r0, fp
 8010a7e:	f000 fb1d 	bl	80110bc <__hi0bits>
 8010a82:	016d      	lsls	r5, r5, #5
 8010a84:	f8d8 6000 	ldr.w	r6, [r8]
 8010a88:	1a2d      	subs	r5, r5, r0
 8010a8a:	42b5      	cmp	r5, r6
 8010a8c:	dd54      	ble.n	8010b38 <__gethex+0x228>
 8010a8e:	1bad      	subs	r5, r5, r6
 8010a90:	4629      	mov	r1, r5
 8010a92:	4620      	mov	r0, r4
 8010a94:	f000 feae 	bl	80117f4 <__any_on>
 8010a98:	4681      	mov	r9, r0
 8010a9a:	b178      	cbz	r0, 8010abc <__gethex+0x1ac>
 8010a9c:	1e6b      	subs	r3, r5, #1
 8010a9e:	1159      	asrs	r1, r3, #5
 8010aa0:	f003 021f 	and.w	r2, r3, #31
 8010aa4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010aa8:	f04f 0901 	mov.w	r9, #1
 8010aac:	fa09 f202 	lsl.w	r2, r9, r2
 8010ab0:	420a      	tst	r2, r1
 8010ab2:	d003      	beq.n	8010abc <__gethex+0x1ac>
 8010ab4:	454b      	cmp	r3, r9
 8010ab6:	dc36      	bgt.n	8010b26 <__gethex+0x216>
 8010ab8:	f04f 0902 	mov.w	r9, #2
 8010abc:	4629      	mov	r1, r5
 8010abe:	4620      	mov	r0, r4
 8010ac0:	f7ff febe 	bl	8010840 <rshift>
 8010ac4:	442f      	add	r7, r5
 8010ac6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010aca:	42bb      	cmp	r3, r7
 8010acc:	da42      	bge.n	8010b54 <__gethex+0x244>
 8010ace:	9801      	ldr	r0, [sp, #4]
 8010ad0:	4621      	mov	r1, r4
 8010ad2:	f000 fa41 	bl	8010f58 <_Bfree>
 8010ad6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ad8:	2300      	movs	r3, #0
 8010ada:	6013      	str	r3, [r2, #0]
 8010adc:	25a3      	movs	r5, #163	@ 0xa3
 8010ade:	e793      	b.n	8010a08 <__gethex+0xf8>
 8010ae0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010ae4:	2a2e      	cmp	r2, #46	@ 0x2e
 8010ae6:	d012      	beq.n	8010b0e <__gethex+0x1fe>
 8010ae8:	2b20      	cmp	r3, #32
 8010aea:	d104      	bne.n	8010af6 <__gethex+0x1e6>
 8010aec:	f845 bb04 	str.w	fp, [r5], #4
 8010af0:	f04f 0b00 	mov.w	fp, #0
 8010af4:	465b      	mov	r3, fp
 8010af6:	7830      	ldrb	r0, [r6, #0]
 8010af8:	9303      	str	r3, [sp, #12]
 8010afa:	f7ff fef3 	bl	80108e4 <__hexdig_fun>
 8010afe:	9b03      	ldr	r3, [sp, #12]
 8010b00:	f000 000f 	and.w	r0, r0, #15
 8010b04:	4098      	lsls	r0, r3
 8010b06:	ea4b 0b00 	orr.w	fp, fp, r0
 8010b0a:	3304      	adds	r3, #4
 8010b0c:	e7ae      	b.n	8010a6c <__gethex+0x15c>
 8010b0e:	45b1      	cmp	r9, r6
 8010b10:	d8ea      	bhi.n	8010ae8 <__gethex+0x1d8>
 8010b12:	492b      	ldr	r1, [pc, #172]	@ (8010bc0 <__gethex+0x2b0>)
 8010b14:	9303      	str	r3, [sp, #12]
 8010b16:	2201      	movs	r2, #1
 8010b18:	4630      	mov	r0, r6
 8010b1a:	f7fe ffaf 	bl	800fa7c <strncmp>
 8010b1e:	9b03      	ldr	r3, [sp, #12]
 8010b20:	2800      	cmp	r0, #0
 8010b22:	d1e1      	bne.n	8010ae8 <__gethex+0x1d8>
 8010b24:	e7a2      	b.n	8010a6c <__gethex+0x15c>
 8010b26:	1ea9      	subs	r1, r5, #2
 8010b28:	4620      	mov	r0, r4
 8010b2a:	f000 fe63 	bl	80117f4 <__any_on>
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	d0c2      	beq.n	8010ab8 <__gethex+0x1a8>
 8010b32:	f04f 0903 	mov.w	r9, #3
 8010b36:	e7c1      	b.n	8010abc <__gethex+0x1ac>
 8010b38:	da09      	bge.n	8010b4e <__gethex+0x23e>
 8010b3a:	1b75      	subs	r5, r6, r5
 8010b3c:	4621      	mov	r1, r4
 8010b3e:	9801      	ldr	r0, [sp, #4]
 8010b40:	462a      	mov	r2, r5
 8010b42:	f000 fc21 	bl	8011388 <__lshift>
 8010b46:	1b7f      	subs	r7, r7, r5
 8010b48:	4604      	mov	r4, r0
 8010b4a:	f100 0a14 	add.w	sl, r0, #20
 8010b4e:	f04f 0900 	mov.w	r9, #0
 8010b52:	e7b8      	b.n	8010ac6 <__gethex+0x1b6>
 8010b54:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010b58:	42bd      	cmp	r5, r7
 8010b5a:	dd6f      	ble.n	8010c3c <__gethex+0x32c>
 8010b5c:	1bed      	subs	r5, r5, r7
 8010b5e:	42ae      	cmp	r6, r5
 8010b60:	dc34      	bgt.n	8010bcc <__gethex+0x2bc>
 8010b62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b66:	2b02      	cmp	r3, #2
 8010b68:	d022      	beq.n	8010bb0 <__gethex+0x2a0>
 8010b6a:	2b03      	cmp	r3, #3
 8010b6c:	d024      	beq.n	8010bb8 <__gethex+0x2a8>
 8010b6e:	2b01      	cmp	r3, #1
 8010b70:	d115      	bne.n	8010b9e <__gethex+0x28e>
 8010b72:	42ae      	cmp	r6, r5
 8010b74:	d113      	bne.n	8010b9e <__gethex+0x28e>
 8010b76:	2e01      	cmp	r6, #1
 8010b78:	d10b      	bne.n	8010b92 <__gethex+0x282>
 8010b7a:	9a02      	ldr	r2, [sp, #8]
 8010b7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010b80:	6013      	str	r3, [r2, #0]
 8010b82:	2301      	movs	r3, #1
 8010b84:	6123      	str	r3, [r4, #16]
 8010b86:	f8ca 3000 	str.w	r3, [sl]
 8010b8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b8c:	2562      	movs	r5, #98	@ 0x62
 8010b8e:	601c      	str	r4, [r3, #0]
 8010b90:	e73a      	b.n	8010a08 <__gethex+0xf8>
 8010b92:	1e71      	subs	r1, r6, #1
 8010b94:	4620      	mov	r0, r4
 8010b96:	f000 fe2d 	bl	80117f4 <__any_on>
 8010b9a:	2800      	cmp	r0, #0
 8010b9c:	d1ed      	bne.n	8010b7a <__gethex+0x26a>
 8010b9e:	9801      	ldr	r0, [sp, #4]
 8010ba0:	4621      	mov	r1, r4
 8010ba2:	f000 f9d9 	bl	8010f58 <_Bfree>
 8010ba6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ba8:	2300      	movs	r3, #0
 8010baa:	6013      	str	r3, [r2, #0]
 8010bac:	2550      	movs	r5, #80	@ 0x50
 8010bae:	e72b      	b.n	8010a08 <__gethex+0xf8>
 8010bb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d1f3      	bne.n	8010b9e <__gethex+0x28e>
 8010bb6:	e7e0      	b.n	8010b7a <__gethex+0x26a>
 8010bb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d1dd      	bne.n	8010b7a <__gethex+0x26a>
 8010bbe:	e7ee      	b.n	8010b9e <__gethex+0x28e>
 8010bc0:	08012d0c 	.word	0x08012d0c
 8010bc4:	08012e1b 	.word	0x08012e1b
 8010bc8:	08012e2c 	.word	0x08012e2c
 8010bcc:	1e6f      	subs	r7, r5, #1
 8010bce:	f1b9 0f00 	cmp.w	r9, #0
 8010bd2:	d130      	bne.n	8010c36 <__gethex+0x326>
 8010bd4:	b127      	cbz	r7, 8010be0 <__gethex+0x2d0>
 8010bd6:	4639      	mov	r1, r7
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f000 fe0b 	bl	80117f4 <__any_on>
 8010bde:	4681      	mov	r9, r0
 8010be0:	117a      	asrs	r2, r7, #5
 8010be2:	2301      	movs	r3, #1
 8010be4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010be8:	f007 071f 	and.w	r7, r7, #31
 8010bec:	40bb      	lsls	r3, r7
 8010bee:	4213      	tst	r3, r2
 8010bf0:	4629      	mov	r1, r5
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	bf18      	it	ne
 8010bf6:	f049 0902 	orrne.w	r9, r9, #2
 8010bfa:	f7ff fe21 	bl	8010840 <rshift>
 8010bfe:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010c02:	1b76      	subs	r6, r6, r5
 8010c04:	2502      	movs	r5, #2
 8010c06:	f1b9 0f00 	cmp.w	r9, #0
 8010c0a:	d047      	beq.n	8010c9c <__gethex+0x38c>
 8010c0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010c10:	2b02      	cmp	r3, #2
 8010c12:	d015      	beq.n	8010c40 <__gethex+0x330>
 8010c14:	2b03      	cmp	r3, #3
 8010c16:	d017      	beq.n	8010c48 <__gethex+0x338>
 8010c18:	2b01      	cmp	r3, #1
 8010c1a:	d109      	bne.n	8010c30 <__gethex+0x320>
 8010c1c:	f019 0f02 	tst.w	r9, #2
 8010c20:	d006      	beq.n	8010c30 <__gethex+0x320>
 8010c22:	f8da 3000 	ldr.w	r3, [sl]
 8010c26:	ea49 0903 	orr.w	r9, r9, r3
 8010c2a:	f019 0f01 	tst.w	r9, #1
 8010c2e:	d10e      	bne.n	8010c4e <__gethex+0x33e>
 8010c30:	f045 0510 	orr.w	r5, r5, #16
 8010c34:	e032      	b.n	8010c9c <__gethex+0x38c>
 8010c36:	f04f 0901 	mov.w	r9, #1
 8010c3a:	e7d1      	b.n	8010be0 <__gethex+0x2d0>
 8010c3c:	2501      	movs	r5, #1
 8010c3e:	e7e2      	b.n	8010c06 <__gethex+0x2f6>
 8010c40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c42:	f1c3 0301 	rsb	r3, r3, #1
 8010c46:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d0f0      	beq.n	8010c30 <__gethex+0x320>
 8010c4e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010c52:	f104 0314 	add.w	r3, r4, #20
 8010c56:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010c5a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010c5e:	f04f 0c00 	mov.w	ip, #0
 8010c62:	4618      	mov	r0, r3
 8010c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c68:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010c6c:	d01b      	beq.n	8010ca6 <__gethex+0x396>
 8010c6e:	3201      	adds	r2, #1
 8010c70:	6002      	str	r2, [r0, #0]
 8010c72:	2d02      	cmp	r5, #2
 8010c74:	f104 0314 	add.w	r3, r4, #20
 8010c78:	d13c      	bne.n	8010cf4 <__gethex+0x3e4>
 8010c7a:	f8d8 2000 	ldr.w	r2, [r8]
 8010c7e:	3a01      	subs	r2, #1
 8010c80:	42b2      	cmp	r2, r6
 8010c82:	d109      	bne.n	8010c98 <__gethex+0x388>
 8010c84:	1171      	asrs	r1, r6, #5
 8010c86:	2201      	movs	r2, #1
 8010c88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010c8c:	f006 061f 	and.w	r6, r6, #31
 8010c90:	fa02 f606 	lsl.w	r6, r2, r6
 8010c94:	421e      	tst	r6, r3
 8010c96:	d13a      	bne.n	8010d0e <__gethex+0x3fe>
 8010c98:	f045 0520 	orr.w	r5, r5, #32
 8010c9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c9e:	601c      	str	r4, [r3, #0]
 8010ca0:	9b02      	ldr	r3, [sp, #8]
 8010ca2:	601f      	str	r7, [r3, #0]
 8010ca4:	e6b0      	b.n	8010a08 <__gethex+0xf8>
 8010ca6:	4299      	cmp	r1, r3
 8010ca8:	f843 cc04 	str.w	ip, [r3, #-4]
 8010cac:	d8d9      	bhi.n	8010c62 <__gethex+0x352>
 8010cae:	68a3      	ldr	r3, [r4, #8]
 8010cb0:	459b      	cmp	fp, r3
 8010cb2:	db17      	blt.n	8010ce4 <__gethex+0x3d4>
 8010cb4:	6861      	ldr	r1, [r4, #4]
 8010cb6:	9801      	ldr	r0, [sp, #4]
 8010cb8:	3101      	adds	r1, #1
 8010cba:	f000 f90d 	bl	8010ed8 <_Balloc>
 8010cbe:	4681      	mov	r9, r0
 8010cc0:	b918      	cbnz	r0, 8010cca <__gethex+0x3ba>
 8010cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8010d2c <__gethex+0x41c>)
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	2184      	movs	r1, #132	@ 0x84
 8010cc8:	e6c5      	b.n	8010a56 <__gethex+0x146>
 8010cca:	6922      	ldr	r2, [r4, #16]
 8010ccc:	3202      	adds	r2, #2
 8010cce:	f104 010c 	add.w	r1, r4, #12
 8010cd2:	0092      	lsls	r2, r2, #2
 8010cd4:	300c      	adds	r0, #12
 8010cd6:	f7fe ff6a 	bl	800fbae <memcpy>
 8010cda:	4621      	mov	r1, r4
 8010cdc:	9801      	ldr	r0, [sp, #4]
 8010cde:	f000 f93b 	bl	8010f58 <_Bfree>
 8010ce2:	464c      	mov	r4, r9
 8010ce4:	6923      	ldr	r3, [r4, #16]
 8010ce6:	1c5a      	adds	r2, r3, #1
 8010ce8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010cec:	6122      	str	r2, [r4, #16]
 8010cee:	2201      	movs	r2, #1
 8010cf0:	615a      	str	r2, [r3, #20]
 8010cf2:	e7be      	b.n	8010c72 <__gethex+0x362>
 8010cf4:	6922      	ldr	r2, [r4, #16]
 8010cf6:	455a      	cmp	r2, fp
 8010cf8:	dd0b      	ble.n	8010d12 <__gethex+0x402>
 8010cfa:	2101      	movs	r1, #1
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	f7ff fd9f 	bl	8010840 <rshift>
 8010d02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d06:	3701      	adds	r7, #1
 8010d08:	42bb      	cmp	r3, r7
 8010d0a:	f6ff aee0 	blt.w	8010ace <__gethex+0x1be>
 8010d0e:	2501      	movs	r5, #1
 8010d10:	e7c2      	b.n	8010c98 <__gethex+0x388>
 8010d12:	f016 061f 	ands.w	r6, r6, #31
 8010d16:	d0fa      	beq.n	8010d0e <__gethex+0x3fe>
 8010d18:	4453      	add	r3, sl
 8010d1a:	f1c6 0620 	rsb	r6, r6, #32
 8010d1e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010d22:	f000 f9cb 	bl	80110bc <__hi0bits>
 8010d26:	42b0      	cmp	r0, r6
 8010d28:	dbe7      	blt.n	8010cfa <__gethex+0x3ea>
 8010d2a:	e7f0      	b.n	8010d0e <__gethex+0x3fe>
 8010d2c:	08012e1b 	.word	0x08012e1b

08010d30 <L_shift>:
 8010d30:	f1c2 0208 	rsb	r2, r2, #8
 8010d34:	0092      	lsls	r2, r2, #2
 8010d36:	b570      	push	{r4, r5, r6, lr}
 8010d38:	f1c2 0620 	rsb	r6, r2, #32
 8010d3c:	6843      	ldr	r3, [r0, #4]
 8010d3e:	6804      	ldr	r4, [r0, #0]
 8010d40:	fa03 f506 	lsl.w	r5, r3, r6
 8010d44:	432c      	orrs	r4, r5
 8010d46:	40d3      	lsrs	r3, r2
 8010d48:	6004      	str	r4, [r0, #0]
 8010d4a:	f840 3f04 	str.w	r3, [r0, #4]!
 8010d4e:	4288      	cmp	r0, r1
 8010d50:	d3f4      	bcc.n	8010d3c <L_shift+0xc>
 8010d52:	bd70      	pop	{r4, r5, r6, pc}

08010d54 <__match>:
 8010d54:	b530      	push	{r4, r5, lr}
 8010d56:	6803      	ldr	r3, [r0, #0]
 8010d58:	3301      	adds	r3, #1
 8010d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d5e:	b914      	cbnz	r4, 8010d66 <__match+0x12>
 8010d60:	6003      	str	r3, [r0, #0]
 8010d62:	2001      	movs	r0, #1
 8010d64:	bd30      	pop	{r4, r5, pc}
 8010d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d6a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010d6e:	2d19      	cmp	r5, #25
 8010d70:	bf98      	it	ls
 8010d72:	3220      	addls	r2, #32
 8010d74:	42a2      	cmp	r2, r4
 8010d76:	d0f0      	beq.n	8010d5a <__match+0x6>
 8010d78:	2000      	movs	r0, #0
 8010d7a:	e7f3      	b.n	8010d64 <__match+0x10>

08010d7c <__hexnan>:
 8010d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d80:	680b      	ldr	r3, [r1, #0]
 8010d82:	6801      	ldr	r1, [r0, #0]
 8010d84:	115e      	asrs	r6, r3, #5
 8010d86:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010d8a:	f013 031f 	ands.w	r3, r3, #31
 8010d8e:	b087      	sub	sp, #28
 8010d90:	bf18      	it	ne
 8010d92:	3604      	addne	r6, #4
 8010d94:	2500      	movs	r5, #0
 8010d96:	1f37      	subs	r7, r6, #4
 8010d98:	4682      	mov	sl, r0
 8010d9a:	4690      	mov	r8, r2
 8010d9c:	9301      	str	r3, [sp, #4]
 8010d9e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010da2:	46b9      	mov	r9, r7
 8010da4:	463c      	mov	r4, r7
 8010da6:	9502      	str	r5, [sp, #8]
 8010da8:	46ab      	mov	fp, r5
 8010daa:	784a      	ldrb	r2, [r1, #1]
 8010dac:	1c4b      	adds	r3, r1, #1
 8010dae:	9303      	str	r3, [sp, #12]
 8010db0:	b342      	cbz	r2, 8010e04 <__hexnan+0x88>
 8010db2:	4610      	mov	r0, r2
 8010db4:	9105      	str	r1, [sp, #20]
 8010db6:	9204      	str	r2, [sp, #16]
 8010db8:	f7ff fd94 	bl	80108e4 <__hexdig_fun>
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	d151      	bne.n	8010e64 <__hexnan+0xe8>
 8010dc0:	9a04      	ldr	r2, [sp, #16]
 8010dc2:	9905      	ldr	r1, [sp, #20]
 8010dc4:	2a20      	cmp	r2, #32
 8010dc6:	d818      	bhi.n	8010dfa <__hexnan+0x7e>
 8010dc8:	9b02      	ldr	r3, [sp, #8]
 8010dca:	459b      	cmp	fp, r3
 8010dcc:	dd13      	ble.n	8010df6 <__hexnan+0x7a>
 8010dce:	454c      	cmp	r4, r9
 8010dd0:	d206      	bcs.n	8010de0 <__hexnan+0x64>
 8010dd2:	2d07      	cmp	r5, #7
 8010dd4:	dc04      	bgt.n	8010de0 <__hexnan+0x64>
 8010dd6:	462a      	mov	r2, r5
 8010dd8:	4649      	mov	r1, r9
 8010dda:	4620      	mov	r0, r4
 8010ddc:	f7ff ffa8 	bl	8010d30 <L_shift>
 8010de0:	4544      	cmp	r4, r8
 8010de2:	d952      	bls.n	8010e8a <__hexnan+0x10e>
 8010de4:	2300      	movs	r3, #0
 8010de6:	f1a4 0904 	sub.w	r9, r4, #4
 8010dea:	f844 3c04 	str.w	r3, [r4, #-4]
 8010dee:	f8cd b008 	str.w	fp, [sp, #8]
 8010df2:	464c      	mov	r4, r9
 8010df4:	461d      	mov	r5, r3
 8010df6:	9903      	ldr	r1, [sp, #12]
 8010df8:	e7d7      	b.n	8010daa <__hexnan+0x2e>
 8010dfa:	2a29      	cmp	r2, #41	@ 0x29
 8010dfc:	d157      	bne.n	8010eae <__hexnan+0x132>
 8010dfe:	3102      	adds	r1, #2
 8010e00:	f8ca 1000 	str.w	r1, [sl]
 8010e04:	f1bb 0f00 	cmp.w	fp, #0
 8010e08:	d051      	beq.n	8010eae <__hexnan+0x132>
 8010e0a:	454c      	cmp	r4, r9
 8010e0c:	d206      	bcs.n	8010e1c <__hexnan+0xa0>
 8010e0e:	2d07      	cmp	r5, #7
 8010e10:	dc04      	bgt.n	8010e1c <__hexnan+0xa0>
 8010e12:	462a      	mov	r2, r5
 8010e14:	4649      	mov	r1, r9
 8010e16:	4620      	mov	r0, r4
 8010e18:	f7ff ff8a 	bl	8010d30 <L_shift>
 8010e1c:	4544      	cmp	r4, r8
 8010e1e:	d936      	bls.n	8010e8e <__hexnan+0x112>
 8010e20:	f1a8 0204 	sub.w	r2, r8, #4
 8010e24:	4623      	mov	r3, r4
 8010e26:	f853 1b04 	ldr.w	r1, [r3], #4
 8010e2a:	f842 1f04 	str.w	r1, [r2, #4]!
 8010e2e:	429f      	cmp	r7, r3
 8010e30:	d2f9      	bcs.n	8010e26 <__hexnan+0xaa>
 8010e32:	1b3b      	subs	r3, r7, r4
 8010e34:	f023 0303 	bic.w	r3, r3, #3
 8010e38:	3304      	adds	r3, #4
 8010e3a:	3401      	adds	r4, #1
 8010e3c:	3e03      	subs	r6, #3
 8010e3e:	42b4      	cmp	r4, r6
 8010e40:	bf88      	it	hi
 8010e42:	2304      	movhi	r3, #4
 8010e44:	4443      	add	r3, r8
 8010e46:	2200      	movs	r2, #0
 8010e48:	f843 2b04 	str.w	r2, [r3], #4
 8010e4c:	429f      	cmp	r7, r3
 8010e4e:	d2fb      	bcs.n	8010e48 <__hexnan+0xcc>
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	b91b      	cbnz	r3, 8010e5c <__hexnan+0xe0>
 8010e54:	4547      	cmp	r7, r8
 8010e56:	d128      	bne.n	8010eaa <__hexnan+0x12e>
 8010e58:	2301      	movs	r3, #1
 8010e5a:	603b      	str	r3, [r7, #0]
 8010e5c:	2005      	movs	r0, #5
 8010e5e:	b007      	add	sp, #28
 8010e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e64:	3501      	adds	r5, #1
 8010e66:	2d08      	cmp	r5, #8
 8010e68:	f10b 0b01 	add.w	fp, fp, #1
 8010e6c:	dd06      	ble.n	8010e7c <__hexnan+0x100>
 8010e6e:	4544      	cmp	r4, r8
 8010e70:	d9c1      	bls.n	8010df6 <__hexnan+0x7a>
 8010e72:	2300      	movs	r3, #0
 8010e74:	f844 3c04 	str.w	r3, [r4, #-4]
 8010e78:	2501      	movs	r5, #1
 8010e7a:	3c04      	subs	r4, #4
 8010e7c:	6822      	ldr	r2, [r4, #0]
 8010e7e:	f000 000f 	and.w	r0, r0, #15
 8010e82:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010e86:	6020      	str	r0, [r4, #0]
 8010e88:	e7b5      	b.n	8010df6 <__hexnan+0x7a>
 8010e8a:	2508      	movs	r5, #8
 8010e8c:	e7b3      	b.n	8010df6 <__hexnan+0x7a>
 8010e8e:	9b01      	ldr	r3, [sp, #4]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d0dd      	beq.n	8010e50 <__hexnan+0xd4>
 8010e94:	f1c3 0320 	rsb	r3, r3, #32
 8010e98:	f04f 32ff 	mov.w	r2, #4294967295
 8010e9c:	40da      	lsrs	r2, r3
 8010e9e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010ea2:	4013      	ands	r3, r2
 8010ea4:	f846 3c04 	str.w	r3, [r6, #-4]
 8010ea8:	e7d2      	b.n	8010e50 <__hexnan+0xd4>
 8010eaa:	3f04      	subs	r7, #4
 8010eac:	e7d0      	b.n	8010e50 <__hexnan+0xd4>
 8010eae:	2004      	movs	r0, #4
 8010eb0:	e7d5      	b.n	8010e5e <__hexnan+0xe2>

08010eb2 <__ascii_mbtowc>:
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	b901      	cbnz	r1, 8010eb8 <__ascii_mbtowc+0x6>
 8010eb6:	a901      	add	r1, sp, #4
 8010eb8:	b142      	cbz	r2, 8010ecc <__ascii_mbtowc+0x1a>
 8010eba:	b14b      	cbz	r3, 8010ed0 <__ascii_mbtowc+0x1e>
 8010ebc:	7813      	ldrb	r3, [r2, #0]
 8010ebe:	600b      	str	r3, [r1, #0]
 8010ec0:	7812      	ldrb	r2, [r2, #0]
 8010ec2:	1e10      	subs	r0, r2, #0
 8010ec4:	bf18      	it	ne
 8010ec6:	2001      	movne	r0, #1
 8010ec8:	b002      	add	sp, #8
 8010eca:	4770      	bx	lr
 8010ecc:	4610      	mov	r0, r2
 8010ece:	e7fb      	b.n	8010ec8 <__ascii_mbtowc+0x16>
 8010ed0:	f06f 0001 	mvn.w	r0, #1
 8010ed4:	e7f8      	b.n	8010ec8 <__ascii_mbtowc+0x16>
	...

08010ed8 <_Balloc>:
 8010ed8:	b570      	push	{r4, r5, r6, lr}
 8010eda:	69c6      	ldr	r6, [r0, #28]
 8010edc:	4604      	mov	r4, r0
 8010ede:	460d      	mov	r5, r1
 8010ee0:	b976      	cbnz	r6, 8010f00 <_Balloc+0x28>
 8010ee2:	2010      	movs	r0, #16
 8010ee4:	f7fc ffb4 	bl	800de50 <malloc>
 8010ee8:	4602      	mov	r2, r0
 8010eea:	61e0      	str	r0, [r4, #28]
 8010eec:	b920      	cbnz	r0, 8010ef8 <_Balloc+0x20>
 8010eee:	4b18      	ldr	r3, [pc, #96]	@ (8010f50 <_Balloc+0x78>)
 8010ef0:	4818      	ldr	r0, [pc, #96]	@ (8010f54 <_Balloc+0x7c>)
 8010ef2:	216b      	movs	r1, #107	@ 0x6b
 8010ef4:	f001 fad4 	bl	80124a0 <__assert_func>
 8010ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010efc:	6006      	str	r6, [r0, #0]
 8010efe:	60c6      	str	r6, [r0, #12]
 8010f00:	69e6      	ldr	r6, [r4, #28]
 8010f02:	68f3      	ldr	r3, [r6, #12]
 8010f04:	b183      	cbz	r3, 8010f28 <_Balloc+0x50>
 8010f06:	69e3      	ldr	r3, [r4, #28]
 8010f08:	68db      	ldr	r3, [r3, #12]
 8010f0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010f0e:	b9b8      	cbnz	r0, 8010f40 <_Balloc+0x68>
 8010f10:	2101      	movs	r1, #1
 8010f12:	fa01 f605 	lsl.w	r6, r1, r5
 8010f16:	1d72      	adds	r2, r6, #5
 8010f18:	0092      	lsls	r2, r2, #2
 8010f1a:	4620      	mov	r0, r4
 8010f1c:	f001 fade 	bl	80124dc <_calloc_r>
 8010f20:	b160      	cbz	r0, 8010f3c <_Balloc+0x64>
 8010f22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010f26:	e00e      	b.n	8010f46 <_Balloc+0x6e>
 8010f28:	2221      	movs	r2, #33	@ 0x21
 8010f2a:	2104      	movs	r1, #4
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	f001 fad5 	bl	80124dc <_calloc_r>
 8010f32:	69e3      	ldr	r3, [r4, #28]
 8010f34:	60f0      	str	r0, [r6, #12]
 8010f36:	68db      	ldr	r3, [r3, #12]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d1e4      	bne.n	8010f06 <_Balloc+0x2e>
 8010f3c:	2000      	movs	r0, #0
 8010f3e:	bd70      	pop	{r4, r5, r6, pc}
 8010f40:	6802      	ldr	r2, [r0, #0]
 8010f42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010f46:	2300      	movs	r3, #0
 8010f48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010f4c:	e7f7      	b.n	8010f3e <_Balloc+0x66>
 8010f4e:	bf00      	nop
 8010f50:	08012dac 	.word	0x08012dac
 8010f54:	08012e8c 	.word	0x08012e8c

08010f58 <_Bfree>:
 8010f58:	b570      	push	{r4, r5, r6, lr}
 8010f5a:	69c6      	ldr	r6, [r0, #28]
 8010f5c:	4605      	mov	r5, r0
 8010f5e:	460c      	mov	r4, r1
 8010f60:	b976      	cbnz	r6, 8010f80 <_Bfree+0x28>
 8010f62:	2010      	movs	r0, #16
 8010f64:	f7fc ff74 	bl	800de50 <malloc>
 8010f68:	4602      	mov	r2, r0
 8010f6a:	61e8      	str	r0, [r5, #28]
 8010f6c:	b920      	cbnz	r0, 8010f78 <_Bfree+0x20>
 8010f6e:	4b09      	ldr	r3, [pc, #36]	@ (8010f94 <_Bfree+0x3c>)
 8010f70:	4809      	ldr	r0, [pc, #36]	@ (8010f98 <_Bfree+0x40>)
 8010f72:	218f      	movs	r1, #143	@ 0x8f
 8010f74:	f001 fa94 	bl	80124a0 <__assert_func>
 8010f78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f7c:	6006      	str	r6, [r0, #0]
 8010f7e:	60c6      	str	r6, [r0, #12]
 8010f80:	b13c      	cbz	r4, 8010f92 <_Bfree+0x3a>
 8010f82:	69eb      	ldr	r3, [r5, #28]
 8010f84:	6862      	ldr	r2, [r4, #4]
 8010f86:	68db      	ldr	r3, [r3, #12]
 8010f88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010f8c:	6021      	str	r1, [r4, #0]
 8010f8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010f92:	bd70      	pop	{r4, r5, r6, pc}
 8010f94:	08012dac 	.word	0x08012dac
 8010f98:	08012e8c 	.word	0x08012e8c

08010f9c <__multadd>:
 8010f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fa0:	690d      	ldr	r5, [r1, #16]
 8010fa2:	4607      	mov	r7, r0
 8010fa4:	460c      	mov	r4, r1
 8010fa6:	461e      	mov	r6, r3
 8010fa8:	f101 0c14 	add.w	ip, r1, #20
 8010fac:	2000      	movs	r0, #0
 8010fae:	f8dc 3000 	ldr.w	r3, [ip]
 8010fb2:	b299      	uxth	r1, r3
 8010fb4:	fb02 6101 	mla	r1, r2, r1, r6
 8010fb8:	0c1e      	lsrs	r6, r3, #16
 8010fba:	0c0b      	lsrs	r3, r1, #16
 8010fbc:	fb02 3306 	mla	r3, r2, r6, r3
 8010fc0:	b289      	uxth	r1, r1
 8010fc2:	3001      	adds	r0, #1
 8010fc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010fc8:	4285      	cmp	r5, r0
 8010fca:	f84c 1b04 	str.w	r1, [ip], #4
 8010fce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010fd2:	dcec      	bgt.n	8010fae <__multadd+0x12>
 8010fd4:	b30e      	cbz	r6, 801101a <__multadd+0x7e>
 8010fd6:	68a3      	ldr	r3, [r4, #8]
 8010fd8:	42ab      	cmp	r3, r5
 8010fda:	dc19      	bgt.n	8011010 <__multadd+0x74>
 8010fdc:	6861      	ldr	r1, [r4, #4]
 8010fde:	4638      	mov	r0, r7
 8010fe0:	3101      	adds	r1, #1
 8010fe2:	f7ff ff79 	bl	8010ed8 <_Balloc>
 8010fe6:	4680      	mov	r8, r0
 8010fe8:	b928      	cbnz	r0, 8010ff6 <__multadd+0x5a>
 8010fea:	4602      	mov	r2, r0
 8010fec:	4b0c      	ldr	r3, [pc, #48]	@ (8011020 <__multadd+0x84>)
 8010fee:	480d      	ldr	r0, [pc, #52]	@ (8011024 <__multadd+0x88>)
 8010ff0:	21ba      	movs	r1, #186	@ 0xba
 8010ff2:	f001 fa55 	bl	80124a0 <__assert_func>
 8010ff6:	6922      	ldr	r2, [r4, #16]
 8010ff8:	3202      	adds	r2, #2
 8010ffa:	f104 010c 	add.w	r1, r4, #12
 8010ffe:	0092      	lsls	r2, r2, #2
 8011000:	300c      	adds	r0, #12
 8011002:	f7fe fdd4 	bl	800fbae <memcpy>
 8011006:	4621      	mov	r1, r4
 8011008:	4638      	mov	r0, r7
 801100a:	f7ff ffa5 	bl	8010f58 <_Bfree>
 801100e:	4644      	mov	r4, r8
 8011010:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011014:	3501      	adds	r5, #1
 8011016:	615e      	str	r6, [r3, #20]
 8011018:	6125      	str	r5, [r4, #16]
 801101a:	4620      	mov	r0, r4
 801101c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011020:	08012e1b 	.word	0x08012e1b
 8011024:	08012e8c 	.word	0x08012e8c

08011028 <__s2b>:
 8011028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801102c:	460c      	mov	r4, r1
 801102e:	4615      	mov	r5, r2
 8011030:	461f      	mov	r7, r3
 8011032:	2209      	movs	r2, #9
 8011034:	3308      	adds	r3, #8
 8011036:	4606      	mov	r6, r0
 8011038:	fb93 f3f2 	sdiv	r3, r3, r2
 801103c:	2100      	movs	r1, #0
 801103e:	2201      	movs	r2, #1
 8011040:	429a      	cmp	r2, r3
 8011042:	db09      	blt.n	8011058 <__s2b+0x30>
 8011044:	4630      	mov	r0, r6
 8011046:	f7ff ff47 	bl	8010ed8 <_Balloc>
 801104a:	b940      	cbnz	r0, 801105e <__s2b+0x36>
 801104c:	4602      	mov	r2, r0
 801104e:	4b19      	ldr	r3, [pc, #100]	@ (80110b4 <__s2b+0x8c>)
 8011050:	4819      	ldr	r0, [pc, #100]	@ (80110b8 <__s2b+0x90>)
 8011052:	21d3      	movs	r1, #211	@ 0xd3
 8011054:	f001 fa24 	bl	80124a0 <__assert_func>
 8011058:	0052      	lsls	r2, r2, #1
 801105a:	3101      	adds	r1, #1
 801105c:	e7f0      	b.n	8011040 <__s2b+0x18>
 801105e:	9b08      	ldr	r3, [sp, #32]
 8011060:	6143      	str	r3, [r0, #20]
 8011062:	2d09      	cmp	r5, #9
 8011064:	f04f 0301 	mov.w	r3, #1
 8011068:	6103      	str	r3, [r0, #16]
 801106a:	dd16      	ble.n	801109a <__s2b+0x72>
 801106c:	f104 0909 	add.w	r9, r4, #9
 8011070:	46c8      	mov	r8, r9
 8011072:	442c      	add	r4, r5
 8011074:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011078:	4601      	mov	r1, r0
 801107a:	3b30      	subs	r3, #48	@ 0x30
 801107c:	220a      	movs	r2, #10
 801107e:	4630      	mov	r0, r6
 8011080:	f7ff ff8c 	bl	8010f9c <__multadd>
 8011084:	45a0      	cmp	r8, r4
 8011086:	d1f5      	bne.n	8011074 <__s2b+0x4c>
 8011088:	f1a5 0408 	sub.w	r4, r5, #8
 801108c:	444c      	add	r4, r9
 801108e:	1b2d      	subs	r5, r5, r4
 8011090:	1963      	adds	r3, r4, r5
 8011092:	42bb      	cmp	r3, r7
 8011094:	db04      	blt.n	80110a0 <__s2b+0x78>
 8011096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801109a:	340a      	adds	r4, #10
 801109c:	2509      	movs	r5, #9
 801109e:	e7f6      	b.n	801108e <__s2b+0x66>
 80110a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80110a4:	4601      	mov	r1, r0
 80110a6:	3b30      	subs	r3, #48	@ 0x30
 80110a8:	220a      	movs	r2, #10
 80110aa:	4630      	mov	r0, r6
 80110ac:	f7ff ff76 	bl	8010f9c <__multadd>
 80110b0:	e7ee      	b.n	8011090 <__s2b+0x68>
 80110b2:	bf00      	nop
 80110b4:	08012e1b 	.word	0x08012e1b
 80110b8:	08012e8c 	.word	0x08012e8c

080110bc <__hi0bits>:
 80110bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80110c0:	4603      	mov	r3, r0
 80110c2:	bf36      	itet	cc
 80110c4:	0403      	lslcc	r3, r0, #16
 80110c6:	2000      	movcs	r0, #0
 80110c8:	2010      	movcc	r0, #16
 80110ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80110ce:	bf3c      	itt	cc
 80110d0:	021b      	lslcc	r3, r3, #8
 80110d2:	3008      	addcc	r0, #8
 80110d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80110d8:	bf3c      	itt	cc
 80110da:	011b      	lslcc	r3, r3, #4
 80110dc:	3004      	addcc	r0, #4
 80110de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80110e2:	bf3c      	itt	cc
 80110e4:	009b      	lslcc	r3, r3, #2
 80110e6:	3002      	addcc	r0, #2
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	db05      	blt.n	80110f8 <__hi0bits+0x3c>
 80110ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80110f0:	f100 0001 	add.w	r0, r0, #1
 80110f4:	bf08      	it	eq
 80110f6:	2020      	moveq	r0, #32
 80110f8:	4770      	bx	lr

080110fa <__lo0bits>:
 80110fa:	6803      	ldr	r3, [r0, #0]
 80110fc:	4602      	mov	r2, r0
 80110fe:	f013 0007 	ands.w	r0, r3, #7
 8011102:	d00b      	beq.n	801111c <__lo0bits+0x22>
 8011104:	07d9      	lsls	r1, r3, #31
 8011106:	d421      	bmi.n	801114c <__lo0bits+0x52>
 8011108:	0798      	lsls	r0, r3, #30
 801110a:	bf49      	itett	mi
 801110c:	085b      	lsrmi	r3, r3, #1
 801110e:	089b      	lsrpl	r3, r3, #2
 8011110:	2001      	movmi	r0, #1
 8011112:	6013      	strmi	r3, [r2, #0]
 8011114:	bf5c      	itt	pl
 8011116:	6013      	strpl	r3, [r2, #0]
 8011118:	2002      	movpl	r0, #2
 801111a:	4770      	bx	lr
 801111c:	b299      	uxth	r1, r3
 801111e:	b909      	cbnz	r1, 8011124 <__lo0bits+0x2a>
 8011120:	0c1b      	lsrs	r3, r3, #16
 8011122:	2010      	movs	r0, #16
 8011124:	b2d9      	uxtb	r1, r3
 8011126:	b909      	cbnz	r1, 801112c <__lo0bits+0x32>
 8011128:	3008      	adds	r0, #8
 801112a:	0a1b      	lsrs	r3, r3, #8
 801112c:	0719      	lsls	r1, r3, #28
 801112e:	bf04      	itt	eq
 8011130:	091b      	lsreq	r3, r3, #4
 8011132:	3004      	addeq	r0, #4
 8011134:	0799      	lsls	r1, r3, #30
 8011136:	bf04      	itt	eq
 8011138:	089b      	lsreq	r3, r3, #2
 801113a:	3002      	addeq	r0, #2
 801113c:	07d9      	lsls	r1, r3, #31
 801113e:	d403      	bmi.n	8011148 <__lo0bits+0x4e>
 8011140:	085b      	lsrs	r3, r3, #1
 8011142:	f100 0001 	add.w	r0, r0, #1
 8011146:	d003      	beq.n	8011150 <__lo0bits+0x56>
 8011148:	6013      	str	r3, [r2, #0]
 801114a:	4770      	bx	lr
 801114c:	2000      	movs	r0, #0
 801114e:	4770      	bx	lr
 8011150:	2020      	movs	r0, #32
 8011152:	4770      	bx	lr

08011154 <__i2b>:
 8011154:	b510      	push	{r4, lr}
 8011156:	460c      	mov	r4, r1
 8011158:	2101      	movs	r1, #1
 801115a:	f7ff febd 	bl	8010ed8 <_Balloc>
 801115e:	4602      	mov	r2, r0
 8011160:	b928      	cbnz	r0, 801116e <__i2b+0x1a>
 8011162:	4b05      	ldr	r3, [pc, #20]	@ (8011178 <__i2b+0x24>)
 8011164:	4805      	ldr	r0, [pc, #20]	@ (801117c <__i2b+0x28>)
 8011166:	f240 1145 	movw	r1, #325	@ 0x145
 801116a:	f001 f999 	bl	80124a0 <__assert_func>
 801116e:	2301      	movs	r3, #1
 8011170:	6144      	str	r4, [r0, #20]
 8011172:	6103      	str	r3, [r0, #16]
 8011174:	bd10      	pop	{r4, pc}
 8011176:	bf00      	nop
 8011178:	08012e1b 	.word	0x08012e1b
 801117c:	08012e8c 	.word	0x08012e8c

08011180 <__multiply>:
 8011180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011184:	4614      	mov	r4, r2
 8011186:	690a      	ldr	r2, [r1, #16]
 8011188:	6923      	ldr	r3, [r4, #16]
 801118a:	429a      	cmp	r2, r3
 801118c:	bfa8      	it	ge
 801118e:	4623      	movge	r3, r4
 8011190:	460f      	mov	r7, r1
 8011192:	bfa4      	itt	ge
 8011194:	460c      	movge	r4, r1
 8011196:	461f      	movge	r7, r3
 8011198:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801119c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80111a0:	68a3      	ldr	r3, [r4, #8]
 80111a2:	6861      	ldr	r1, [r4, #4]
 80111a4:	eb0a 0609 	add.w	r6, sl, r9
 80111a8:	42b3      	cmp	r3, r6
 80111aa:	b085      	sub	sp, #20
 80111ac:	bfb8      	it	lt
 80111ae:	3101      	addlt	r1, #1
 80111b0:	f7ff fe92 	bl	8010ed8 <_Balloc>
 80111b4:	b930      	cbnz	r0, 80111c4 <__multiply+0x44>
 80111b6:	4602      	mov	r2, r0
 80111b8:	4b44      	ldr	r3, [pc, #272]	@ (80112cc <__multiply+0x14c>)
 80111ba:	4845      	ldr	r0, [pc, #276]	@ (80112d0 <__multiply+0x150>)
 80111bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80111c0:	f001 f96e 	bl	80124a0 <__assert_func>
 80111c4:	f100 0514 	add.w	r5, r0, #20
 80111c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80111cc:	462b      	mov	r3, r5
 80111ce:	2200      	movs	r2, #0
 80111d0:	4543      	cmp	r3, r8
 80111d2:	d321      	bcc.n	8011218 <__multiply+0x98>
 80111d4:	f107 0114 	add.w	r1, r7, #20
 80111d8:	f104 0214 	add.w	r2, r4, #20
 80111dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80111e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80111e4:	9302      	str	r3, [sp, #8]
 80111e6:	1b13      	subs	r3, r2, r4
 80111e8:	3b15      	subs	r3, #21
 80111ea:	f023 0303 	bic.w	r3, r3, #3
 80111ee:	3304      	adds	r3, #4
 80111f0:	f104 0715 	add.w	r7, r4, #21
 80111f4:	42ba      	cmp	r2, r7
 80111f6:	bf38      	it	cc
 80111f8:	2304      	movcc	r3, #4
 80111fa:	9301      	str	r3, [sp, #4]
 80111fc:	9b02      	ldr	r3, [sp, #8]
 80111fe:	9103      	str	r1, [sp, #12]
 8011200:	428b      	cmp	r3, r1
 8011202:	d80c      	bhi.n	801121e <__multiply+0x9e>
 8011204:	2e00      	cmp	r6, #0
 8011206:	dd03      	ble.n	8011210 <__multiply+0x90>
 8011208:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801120c:	2b00      	cmp	r3, #0
 801120e:	d05b      	beq.n	80112c8 <__multiply+0x148>
 8011210:	6106      	str	r6, [r0, #16]
 8011212:	b005      	add	sp, #20
 8011214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011218:	f843 2b04 	str.w	r2, [r3], #4
 801121c:	e7d8      	b.n	80111d0 <__multiply+0x50>
 801121e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011222:	f1ba 0f00 	cmp.w	sl, #0
 8011226:	d024      	beq.n	8011272 <__multiply+0xf2>
 8011228:	f104 0e14 	add.w	lr, r4, #20
 801122c:	46a9      	mov	r9, r5
 801122e:	f04f 0c00 	mov.w	ip, #0
 8011232:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011236:	f8d9 3000 	ldr.w	r3, [r9]
 801123a:	fa1f fb87 	uxth.w	fp, r7
 801123e:	b29b      	uxth	r3, r3
 8011240:	fb0a 330b 	mla	r3, sl, fp, r3
 8011244:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011248:	f8d9 7000 	ldr.w	r7, [r9]
 801124c:	4463      	add	r3, ip
 801124e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011252:	fb0a c70b 	mla	r7, sl, fp, ip
 8011256:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801125a:	b29b      	uxth	r3, r3
 801125c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011260:	4572      	cmp	r2, lr
 8011262:	f849 3b04 	str.w	r3, [r9], #4
 8011266:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801126a:	d8e2      	bhi.n	8011232 <__multiply+0xb2>
 801126c:	9b01      	ldr	r3, [sp, #4]
 801126e:	f845 c003 	str.w	ip, [r5, r3]
 8011272:	9b03      	ldr	r3, [sp, #12]
 8011274:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011278:	3104      	adds	r1, #4
 801127a:	f1b9 0f00 	cmp.w	r9, #0
 801127e:	d021      	beq.n	80112c4 <__multiply+0x144>
 8011280:	682b      	ldr	r3, [r5, #0]
 8011282:	f104 0c14 	add.w	ip, r4, #20
 8011286:	46ae      	mov	lr, r5
 8011288:	f04f 0a00 	mov.w	sl, #0
 801128c:	f8bc b000 	ldrh.w	fp, [ip]
 8011290:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011294:	fb09 770b 	mla	r7, r9, fp, r7
 8011298:	4457      	add	r7, sl
 801129a:	b29b      	uxth	r3, r3
 801129c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80112a0:	f84e 3b04 	str.w	r3, [lr], #4
 80112a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80112a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80112ac:	f8be 3000 	ldrh.w	r3, [lr]
 80112b0:	fb09 330a 	mla	r3, r9, sl, r3
 80112b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80112b8:	4562      	cmp	r2, ip
 80112ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80112be:	d8e5      	bhi.n	801128c <__multiply+0x10c>
 80112c0:	9f01      	ldr	r7, [sp, #4]
 80112c2:	51eb      	str	r3, [r5, r7]
 80112c4:	3504      	adds	r5, #4
 80112c6:	e799      	b.n	80111fc <__multiply+0x7c>
 80112c8:	3e01      	subs	r6, #1
 80112ca:	e79b      	b.n	8011204 <__multiply+0x84>
 80112cc:	08012e1b 	.word	0x08012e1b
 80112d0:	08012e8c 	.word	0x08012e8c

080112d4 <__pow5mult>:
 80112d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112d8:	4615      	mov	r5, r2
 80112da:	f012 0203 	ands.w	r2, r2, #3
 80112de:	4607      	mov	r7, r0
 80112e0:	460e      	mov	r6, r1
 80112e2:	d007      	beq.n	80112f4 <__pow5mult+0x20>
 80112e4:	4c25      	ldr	r4, [pc, #148]	@ (801137c <__pow5mult+0xa8>)
 80112e6:	3a01      	subs	r2, #1
 80112e8:	2300      	movs	r3, #0
 80112ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80112ee:	f7ff fe55 	bl	8010f9c <__multadd>
 80112f2:	4606      	mov	r6, r0
 80112f4:	10ad      	asrs	r5, r5, #2
 80112f6:	d03d      	beq.n	8011374 <__pow5mult+0xa0>
 80112f8:	69fc      	ldr	r4, [r7, #28]
 80112fa:	b97c      	cbnz	r4, 801131c <__pow5mult+0x48>
 80112fc:	2010      	movs	r0, #16
 80112fe:	f7fc fda7 	bl	800de50 <malloc>
 8011302:	4602      	mov	r2, r0
 8011304:	61f8      	str	r0, [r7, #28]
 8011306:	b928      	cbnz	r0, 8011314 <__pow5mult+0x40>
 8011308:	4b1d      	ldr	r3, [pc, #116]	@ (8011380 <__pow5mult+0xac>)
 801130a:	481e      	ldr	r0, [pc, #120]	@ (8011384 <__pow5mult+0xb0>)
 801130c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011310:	f001 f8c6 	bl	80124a0 <__assert_func>
 8011314:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011318:	6004      	str	r4, [r0, #0]
 801131a:	60c4      	str	r4, [r0, #12]
 801131c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011320:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011324:	b94c      	cbnz	r4, 801133a <__pow5mult+0x66>
 8011326:	f240 2171 	movw	r1, #625	@ 0x271
 801132a:	4638      	mov	r0, r7
 801132c:	f7ff ff12 	bl	8011154 <__i2b>
 8011330:	2300      	movs	r3, #0
 8011332:	f8c8 0008 	str.w	r0, [r8, #8]
 8011336:	4604      	mov	r4, r0
 8011338:	6003      	str	r3, [r0, #0]
 801133a:	f04f 0900 	mov.w	r9, #0
 801133e:	07eb      	lsls	r3, r5, #31
 8011340:	d50a      	bpl.n	8011358 <__pow5mult+0x84>
 8011342:	4631      	mov	r1, r6
 8011344:	4622      	mov	r2, r4
 8011346:	4638      	mov	r0, r7
 8011348:	f7ff ff1a 	bl	8011180 <__multiply>
 801134c:	4631      	mov	r1, r6
 801134e:	4680      	mov	r8, r0
 8011350:	4638      	mov	r0, r7
 8011352:	f7ff fe01 	bl	8010f58 <_Bfree>
 8011356:	4646      	mov	r6, r8
 8011358:	106d      	asrs	r5, r5, #1
 801135a:	d00b      	beq.n	8011374 <__pow5mult+0xa0>
 801135c:	6820      	ldr	r0, [r4, #0]
 801135e:	b938      	cbnz	r0, 8011370 <__pow5mult+0x9c>
 8011360:	4622      	mov	r2, r4
 8011362:	4621      	mov	r1, r4
 8011364:	4638      	mov	r0, r7
 8011366:	f7ff ff0b 	bl	8011180 <__multiply>
 801136a:	6020      	str	r0, [r4, #0]
 801136c:	f8c0 9000 	str.w	r9, [r0]
 8011370:	4604      	mov	r4, r0
 8011372:	e7e4      	b.n	801133e <__pow5mult+0x6a>
 8011374:	4630      	mov	r0, r6
 8011376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801137a:	bf00      	nop
 801137c:	08012ee8 	.word	0x08012ee8
 8011380:	08012dac 	.word	0x08012dac
 8011384:	08012e8c 	.word	0x08012e8c

08011388 <__lshift>:
 8011388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801138c:	460c      	mov	r4, r1
 801138e:	6849      	ldr	r1, [r1, #4]
 8011390:	6923      	ldr	r3, [r4, #16]
 8011392:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011396:	68a3      	ldr	r3, [r4, #8]
 8011398:	4607      	mov	r7, r0
 801139a:	4691      	mov	r9, r2
 801139c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80113a0:	f108 0601 	add.w	r6, r8, #1
 80113a4:	42b3      	cmp	r3, r6
 80113a6:	db0b      	blt.n	80113c0 <__lshift+0x38>
 80113a8:	4638      	mov	r0, r7
 80113aa:	f7ff fd95 	bl	8010ed8 <_Balloc>
 80113ae:	4605      	mov	r5, r0
 80113b0:	b948      	cbnz	r0, 80113c6 <__lshift+0x3e>
 80113b2:	4602      	mov	r2, r0
 80113b4:	4b28      	ldr	r3, [pc, #160]	@ (8011458 <__lshift+0xd0>)
 80113b6:	4829      	ldr	r0, [pc, #164]	@ (801145c <__lshift+0xd4>)
 80113b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80113bc:	f001 f870 	bl	80124a0 <__assert_func>
 80113c0:	3101      	adds	r1, #1
 80113c2:	005b      	lsls	r3, r3, #1
 80113c4:	e7ee      	b.n	80113a4 <__lshift+0x1c>
 80113c6:	2300      	movs	r3, #0
 80113c8:	f100 0114 	add.w	r1, r0, #20
 80113cc:	f100 0210 	add.w	r2, r0, #16
 80113d0:	4618      	mov	r0, r3
 80113d2:	4553      	cmp	r3, sl
 80113d4:	db33      	blt.n	801143e <__lshift+0xb6>
 80113d6:	6920      	ldr	r0, [r4, #16]
 80113d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80113dc:	f104 0314 	add.w	r3, r4, #20
 80113e0:	f019 091f 	ands.w	r9, r9, #31
 80113e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80113e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80113ec:	d02b      	beq.n	8011446 <__lshift+0xbe>
 80113ee:	f1c9 0e20 	rsb	lr, r9, #32
 80113f2:	468a      	mov	sl, r1
 80113f4:	2200      	movs	r2, #0
 80113f6:	6818      	ldr	r0, [r3, #0]
 80113f8:	fa00 f009 	lsl.w	r0, r0, r9
 80113fc:	4310      	orrs	r0, r2
 80113fe:	f84a 0b04 	str.w	r0, [sl], #4
 8011402:	f853 2b04 	ldr.w	r2, [r3], #4
 8011406:	459c      	cmp	ip, r3
 8011408:	fa22 f20e 	lsr.w	r2, r2, lr
 801140c:	d8f3      	bhi.n	80113f6 <__lshift+0x6e>
 801140e:	ebac 0304 	sub.w	r3, ip, r4
 8011412:	3b15      	subs	r3, #21
 8011414:	f023 0303 	bic.w	r3, r3, #3
 8011418:	3304      	adds	r3, #4
 801141a:	f104 0015 	add.w	r0, r4, #21
 801141e:	4584      	cmp	ip, r0
 8011420:	bf38      	it	cc
 8011422:	2304      	movcc	r3, #4
 8011424:	50ca      	str	r2, [r1, r3]
 8011426:	b10a      	cbz	r2, 801142c <__lshift+0xa4>
 8011428:	f108 0602 	add.w	r6, r8, #2
 801142c:	3e01      	subs	r6, #1
 801142e:	4638      	mov	r0, r7
 8011430:	612e      	str	r6, [r5, #16]
 8011432:	4621      	mov	r1, r4
 8011434:	f7ff fd90 	bl	8010f58 <_Bfree>
 8011438:	4628      	mov	r0, r5
 801143a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801143e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011442:	3301      	adds	r3, #1
 8011444:	e7c5      	b.n	80113d2 <__lshift+0x4a>
 8011446:	3904      	subs	r1, #4
 8011448:	f853 2b04 	ldr.w	r2, [r3], #4
 801144c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011450:	459c      	cmp	ip, r3
 8011452:	d8f9      	bhi.n	8011448 <__lshift+0xc0>
 8011454:	e7ea      	b.n	801142c <__lshift+0xa4>
 8011456:	bf00      	nop
 8011458:	08012e1b 	.word	0x08012e1b
 801145c:	08012e8c 	.word	0x08012e8c

08011460 <__mcmp>:
 8011460:	690a      	ldr	r2, [r1, #16]
 8011462:	4603      	mov	r3, r0
 8011464:	6900      	ldr	r0, [r0, #16]
 8011466:	1a80      	subs	r0, r0, r2
 8011468:	b530      	push	{r4, r5, lr}
 801146a:	d10e      	bne.n	801148a <__mcmp+0x2a>
 801146c:	3314      	adds	r3, #20
 801146e:	3114      	adds	r1, #20
 8011470:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011474:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011478:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801147c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011480:	4295      	cmp	r5, r2
 8011482:	d003      	beq.n	801148c <__mcmp+0x2c>
 8011484:	d205      	bcs.n	8011492 <__mcmp+0x32>
 8011486:	f04f 30ff 	mov.w	r0, #4294967295
 801148a:	bd30      	pop	{r4, r5, pc}
 801148c:	42a3      	cmp	r3, r4
 801148e:	d3f3      	bcc.n	8011478 <__mcmp+0x18>
 8011490:	e7fb      	b.n	801148a <__mcmp+0x2a>
 8011492:	2001      	movs	r0, #1
 8011494:	e7f9      	b.n	801148a <__mcmp+0x2a>
	...

08011498 <__mdiff>:
 8011498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801149c:	4689      	mov	r9, r1
 801149e:	4606      	mov	r6, r0
 80114a0:	4611      	mov	r1, r2
 80114a2:	4648      	mov	r0, r9
 80114a4:	4614      	mov	r4, r2
 80114a6:	f7ff ffdb 	bl	8011460 <__mcmp>
 80114aa:	1e05      	subs	r5, r0, #0
 80114ac:	d112      	bne.n	80114d4 <__mdiff+0x3c>
 80114ae:	4629      	mov	r1, r5
 80114b0:	4630      	mov	r0, r6
 80114b2:	f7ff fd11 	bl	8010ed8 <_Balloc>
 80114b6:	4602      	mov	r2, r0
 80114b8:	b928      	cbnz	r0, 80114c6 <__mdiff+0x2e>
 80114ba:	4b3f      	ldr	r3, [pc, #252]	@ (80115b8 <__mdiff+0x120>)
 80114bc:	f240 2137 	movw	r1, #567	@ 0x237
 80114c0:	483e      	ldr	r0, [pc, #248]	@ (80115bc <__mdiff+0x124>)
 80114c2:	f000 ffed 	bl	80124a0 <__assert_func>
 80114c6:	2301      	movs	r3, #1
 80114c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80114cc:	4610      	mov	r0, r2
 80114ce:	b003      	add	sp, #12
 80114d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114d4:	bfbc      	itt	lt
 80114d6:	464b      	movlt	r3, r9
 80114d8:	46a1      	movlt	r9, r4
 80114da:	4630      	mov	r0, r6
 80114dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80114e0:	bfba      	itte	lt
 80114e2:	461c      	movlt	r4, r3
 80114e4:	2501      	movlt	r5, #1
 80114e6:	2500      	movge	r5, #0
 80114e8:	f7ff fcf6 	bl	8010ed8 <_Balloc>
 80114ec:	4602      	mov	r2, r0
 80114ee:	b918      	cbnz	r0, 80114f8 <__mdiff+0x60>
 80114f0:	4b31      	ldr	r3, [pc, #196]	@ (80115b8 <__mdiff+0x120>)
 80114f2:	f240 2145 	movw	r1, #581	@ 0x245
 80114f6:	e7e3      	b.n	80114c0 <__mdiff+0x28>
 80114f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80114fc:	6926      	ldr	r6, [r4, #16]
 80114fe:	60c5      	str	r5, [r0, #12]
 8011500:	f109 0310 	add.w	r3, r9, #16
 8011504:	f109 0514 	add.w	r5, r9, #20
 8011508:	f104 0e14 	add.w	lr, r4, #20
 801150c:	f100 0b14 	add.w	fp, r0, #20
 8011510:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011514:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011518:	9301      	str	r3, [sp, #4]
 801151a:	46d9      	mov	r9, fp
 801151c:	f04f 0c00 	mov.w	ip, #0
 8011520:	9b01      	ldr	r3, [sp, #4]
 8011522:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011526:	f853 af04 	ldr.w	sl, [r3, #4]!
 801152a:	9301      	str	r3, [sp, #4]
 801152c:	fa1f f38a 	uxth.w	r3, sl
 8011530:	4619      	mov	r1, r3
 8011532:	b283      	uxth	r3, r0
 8011534:	1acb      	subs	r3, r1, r3
 8011536:	0c00      	lsrs	r0, r0, #16
 8011538:	4463      	add	r3, ip
 801153a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801153e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011542:	b29b      	uxth	r3, r3
 8011544:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011548:	4576      	cmp	r6, lr
 801154a:	f849 3b04 	str.w	r3, [r9], #4
 801154e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011552:	d8e5      	bhi.n	8011520 <__mdiff+0x88>
 8011554:	1b33      	subs	r3, r6, r4
 8011556:	3b15      	subs	r3, #21
 8011558:	f023 0303 	bic.w	r3, r3, #3
 801155c:	3415      	adds	r4, #21
 801155e:	3304      	adds	r3, #4
 8011560:	42a6      	cmp	r6, r4
 8011562:	bf38      	it	cc
 8011564:	2304      	movcc	r3, #4
 8011566:	441d      	add	r5, r3
 8011568:	445b      	add	r3, fp
 801156a:	461e      	mov	r6, r3
 801156c:	462c      	mov	r4, r5
 801156e:	4544      	cmp	r4, r8
 8011570:	d30e      	bcc.n	8011590 <__mdiff+0xf8>
 8011572:	f108 0103 	add.w	r1, r8, #3
 8011576:	1b49      	subs	r1, r1, r5
 8011578:	f021 0103 	bic.w	r1, r1, #3
 801157c:	3d03      	subs	r5, #3
 801157e:	45a8      	cmp	r8, r5
 8011580:	bf38      	it	cc
 8011582:	2100      	movcc	r1, #0
 8011584:	440b      	add	r3, r1
 8011586:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801158a:	b191      	cbz	r1, 80115b2 <__mdiff+0x11a>
 801158c:	6117      	str	r7, [r2, #16]
 801158e:	e79d      	b.n	80114cc <__mdiff+0x34>
 8011590:	f854 1b04 	ldr.w	r1, [r4], #4
 8011594:	46e6      	mov	lr, ip
 8011596:	0c08      	lsrs	r0, r1, #16
 8011598:	fa1c fc81 	uxtah	ip, ip, r1
 801159c:	4471      	add	r1, lr
 801159e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80115a2:	b289      	uxth	r1, r1
 80115a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80115a8:	f846 1b04 	str.w	r1, [r6], #4
 80115ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80115b0:	e7dd      	b.n	801156e <__mdiff+0xd6>
 80115b2:	3f01      	subs	r7, #1
 80115b4:	e7e7      	b.n	8011586 <__mdiff+0xee>
 80115b6:	bf00      	nop
 80115b8:	08012e1b 	.word	0x08012e1b
 80115bc:	08012e8c 	.word	0x08012e8c

080115c0 <__ulp>:
 80115c0:	b082      	sub	sp, #8
 80115c2:	ed8d 0b00 	vstr	d0, [sp]
 80115c6:	9a01      	ldr	r2, [sp, #4]
 80115c8:	4b0f      	ldr	r3, [pc, #60]	@ (8011608 <__ulp+0x48>)
 80115ca:	4013      	ands	r3, r2
 80115cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	dc08      	bgt.n	80115e6 <__ulp+0x26>
 80115d4:	425b      	negs	r3, r3
 80115d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80115da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80115de:	da04      	bge.n	80115ea <__ulp+0x2a>
 80115e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80115e4:	4113      	asrs	r3, r2
 80115e6:	2200      	movs	r2, #0
 80115e8:	e008      	b.n	80115fc <__ulp+0x3c>
 80115ea:	f1a2 0314 	sub.w	r3, r2, #20
 80115ee:	2b1e      	cmp	r3, #30
 80115f0:	bfda      	itte	le
 80115f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80115f6:	40da      	lsrle	r2, r3
 80115f8:	2201      	movgt	r2, #1
 80115fa:	2300      	movs	r3, #0
 80115fc:	4619      	mov	r1, r3
 80115fe:	4610      	mov	r0, r2
 8011600:	ec41 0b10 	vmov	d0, r0, r1
 8011604:	b002      	add	sp, #8
 8011606:	4770      	bx	lr
 8011608:	7ff00000 	.word	0x7ff00000

0801160c <__b2d>:
 801160c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011610:	6906      	ldr	r6, [r0, #16]
 8011612:	f100 0814 	add.w	r8, r0, #20
 8011616:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801161a:	1f37      	subs	r7, r6, #4
 801161c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011620:	4610      	mov	r0, r2
 8011622:	f7ff fd4b 	bl	80110bc <__hi0bits>
 8011626:	f1c0 0320 	rsb	r3, r0, #32
 801162a:	280a      	cmp	r0, #10
 801162c:	600b      	str	r3, [r1, #0]
 801162e:	491b      	ldr	r1, [pc, #108]	@ (801169c <__b2d+0x90>)
 8011630:	dc15      	bgt.n	801165e <__b2d+0x52>
 8011632:	f1c0 0c0b 	rsb	ip, r0, #11
 8011636:	fa22 f30c 	lsr.w	r3, r2, ip
 801163a:	45b8      	cmp	r8, r7
 801163c:	ea43 0501 	orr.w	r5, r3, r1
 8011640:	bf34      	ite	cc
 8011642:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011646:	2300      	movcs	r3, #0
 8011648:	3015      	adds	r0, #21
 801164a:	fa02 f000 	lsl.w	r0, r2, r0
 801164e:	fa23 f30c 	lsr.w	r3, r3, ip
 8011652:	4303      	orrs	r3, r0
 8011654:	461c      	mov	r4, r3
 8011656:	ec45 4b10 	vmov	d0, r4, r5
 801165a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801165e:	45b8      	cmp	r8, r7
 8011660:	bf3a      	itte	cc
 8011662:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011666:	f1a6 0708 	subcc.w	r7, r6, #8
 801166a:	2300      	movcs	r3, #0
 801166c:	380b      	subs	r0, #11
 801166e:	d012      	beq.n	8011696 <__b2d+0x8a>
 8011670:	f1c0 0120 	rsb	r1, r0, #32
 8011674:	fa23 f401 	lsr.w	r4, r3, r1
 8011678:	4082      	lsls	r2, r0
 801167a:	4322      	orrs	r2, r4
 801167c:	4547      	cmp	r7, r8
 801167e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011682:	bf8c      	ite	hi
 8011684:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011688:	2200      	movls	r2, #0
 801168a:	4083      	lsls	r3, r0
 801168c:	40ca      	lsrs	r2, r1
 801168e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011692:	4313      	orrs	r3, r2
 8011694:	e7de      	b.n	8011654 <__b2d+0x48>
 8011696:	ea42 0501 	orr.w	r5, r2, r1
 801169a:	e7db      	b.n	8011654 <__b2d+0x48>
 801169c:	3ff00000 	.word	0x3ff00000

080116a0 <__d2b>:
 80116a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80116a4:	460f      	mov	r7, r1
 80116a6:	2101      	movs	r1, #1
 80116a8:	ec59 8b10 	vmov	r8, r9, d0
 80116ac:	4616      	mov	r6, r2
 80116ae:	f7ff fc13 	bl	8010ed8 <_Balloc>
 80116b2:	4604      	mov	r4, r0
 80116b4:	b930      	cbnz	r0, 80116c4 <__d2b+0x24>
 80116b6:	4602      	mov	r2, r0
 80116b8:	4b23      	ldr	r3, [pc, #140]	@ (8011748 <__d2b+0xa8>)
 80116ba:	4824      	ldr	r0, [pc, #144]	@ (801174c <__d2b+0xac>)
 80116bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80116c0:	f000 feee 	bl	80124a0 <__assert_func>
 80116c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80116c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80116cc:	b10d      	cbz	r5, 80116d2 <__d2b+0x32>
 80116ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80116d2:	9301      	str	r3, [sp, #4]
 80116d4:	f1b8 0300 	subs.w	r3, r8, #0
 80116d8:	d023      	beq.n	8011722 <__d2b+0x82>
 80116da:	4668      	mov	r0, sp
 80116dc:	9300      	str	r3, [sp, #0]
 80116de:	f7ff fd0c 	bl	80110fa <__lo0bits>
 80116e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80116e6:	b1d0      	cbz	r0, 801171e <__d2b+0x7e>
 80116e8:	f1c0 0320 	rsb	r3, r0, #32
 80116ec:	fa02 f303 	lsl.w	r3, r2, r3
 80116f0:	430b      	orrs	r3, r1
 80116f2:	40c2      	lsrs	r2, r0
 80116f4:	6163      	str	r3, [r4, #20]
 80116f6:	9201      	str	r2, [sp, #4]
 80116f8:	9b01      	ldr	r3, [sp, #4]
 80116fa:	61a3      	str	r3, [r4, #24]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	bf0c      	ite	eq
 8011700:	2201      	moveq	r2, #1
 8011702:	2202      	movne	r2, #2
 8011704:	6122      	str	r2, [r4, #16]
 8011706:	b1a5      	cbz	r5, 8011732 <__d2b+0x92>
 8011708:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801170c:	4405      	add	r5, r0
 801170e:	603d      	str	r5, [r7, #0]
 8011710:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011714:	6030      	str	r0, [r6, #0]
 8011716:	4620      	mov	r0, r4
 8011718:	b003      	add	sp, #12
 801171a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801171e:	6161      	str	r1, [r4, #20]
 8011720:	e7ea      	b.n	80116f8 <__d2b+0x58>
 8011722:	a801      	add	r0, sp, #4
 8011724:	f7ff fce9 	bl	80110fa <__lo0bits>
 8011728:	9b01      	ldr	r3, [sp, #4]
 801172a:	6163      	str	r3, [r4, #20]
 801172c:	3020      	adds	r0, #32
 801172e:	2201      	movs	r2, #1
 8011730:	e7e8      	b.n	8011704 <__d2b+0x64>
 8011732:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011736:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801173a:	6038      	str	r0, [r7, #0]
 801173c:	6918      	ldr	r0, [r3, #16]
 801173e:	f7ff fcbd 	bl	80110bc <__hi0bits>
 8011742:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011746:	e7e5      	b.n	8011714 <__d2b+0x74>
 8011748:	08012e1b 	.word	0x08012e1b
 801174c:	08012e8c 	.word	0x08012e8c

08011750 <__ratio>:
 8011750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011754:	4688      	mov	r8, r1
 8011756:	4669      	mov	r1, sp
 8011758:	4681      	mov	r9, r0
 801175a:	f7ff ff57 	bl	801160c <__b2d>
 801175e:	a901      	add	r1, sp, #4
 8011760:	4640      	mov	r0, r8
 8011762:	ec55 4b10 	vmov	r4, r5, d0
 8011766:	f7ff ff51 	bl	801160c <__b2d>
 801176a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801176e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011772:	1ad2      	subs	r2, r2, r3
 8011774:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011778:	1a5b      	subs	r3, r3, r1
 801177a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801177e:	ec57 6b10 	vmov	r6, r7, d0
 8011782:	2b00      	cmp	r3, #0
 8011784:	bfd6      	itet	le
 8011786:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801178a:	462a      	movgt	r2, r5
 801178c:	463a      	movle	r2, r7
 801178e:	46ab      	mov	fp, r5
 8011790:	46a2      	mov	sl, r4
 8011792:	bfce      	itee	gt
 8011794:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8011798:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801179c:	ee00 3a90 	vmovle	s1, r3
 80117a0:	ec4b ab17 	vmov	d7, sl, fp
 80117a4:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80117a8:	b003      	add	sp, #12
 80117aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080117ae <__copybits>:
 80117ae:	3901      	subs	r1, #1
 80117b0:	b570      	push	{r4, r5, r6, lr}
 80117b2:	1149      	asrs	r1, r1, #5
 80117b4:	6914      	ldr	r4, [r2, #16]
 80117b6:	3101      	adds	r1, #1
 80117b8:	f102 0314 	add.w	r3, r2, #20
 80117bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80117c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80117c4:	1f05      	subs	r5, r0, #4
 80117c6:	42a3      	cmp	r3, r4
 80117c8:	d30c      	bcc.n	80117e4 <__copybits+0x36>
 80117ca:	1aa3      	subs	r3, r4, r2
 80117cc:	3b11      	subs	r3, #17
 80117ce:	f023 0303 	bic.w	r3, r3, #3
 80117d2:	3211      	adds	r2, #17
 80117d4:	42a2      	cmp	r2, r4
 80117d6:	bf88      	it	hi
 80117d8:	2300      	movhi	r3, #0
 80117da:	4418      	add	r0, r3
 80117dc:	2300      	movs	r3, #0
 80117de:	4288      	cmp	r0, r1
 80117e0:	d305      	bcc.n	80117ee <__copybits+0x40>
 80117e2:	bd70      	pop	{r4, r5, r6, pc}
 80117e4:	f853 6b04 	ldr.w	r6, [r3], #4
 80117e8:	f845 6f04 	str.w	r6, [r5, #4]!
 80117ec:	e7eb      	b.n	80117c6 <__copybits+0x18>
 80117ee:	f840 3b04 	str.w	r3, [r0], #4
 80117f2:	e7f4      	b.n	80117de <__copybits+0x30>

080117f4 <__any_on>:
 80117f4:	f100 0214 	add.w	r2, r0, #20
 80117f8:	6900      	ldr	r0, [r0, #16]
 80117fa:	114b      	asrs	r3, r1, #5
 80117fc:	4298      	cmp	r0, r3
 80117fe:	b510      	push	{r4, lr}
 8011800:	db11      	blt.n	8011826 <__any_on+0x32>
 8011802:	dd0a      	ble.n	801181a <__any_on+0x26>
 8011804:	f011 011f 	ands.w	r1, r1, #31
 8011808:	d007      	beq.n	801181a <__any_on+0x26>
 801180a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801180e:	fa24 f001 	lsr.w	r0, r4, r1
 8011812:	fa00 f101 	lsl.w	r1, r0, r1
 8011816:	428c      	cmp	r4, r1
 8011818:	d10b      	bne.n	8011832 <__any_on+0x3e>
 801181a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801181e:	4293      	cmp	r3, r2
 8011820:	d803      	bhi.n	801182a <__any_on+0x36>
 8011822:	2000      	movs	r0, #0
 8011824:	bd10      	pop	{r4, pc}
 8011826:	4603      	mov	r3, r0
 8011828:	e7f7      	b.n	801181a <__any_on+0x26>
 801182a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801182e:	2900      	cmp	r1, #0
 8011830:	d0f5      	beq.n	801181e <__any_on+0x2a>
 8011832:	2001      	movs	r0, #1
 8011834:	e7f6      	b.n	8011824 <__any_on+0x30>
	...

08011838 <_strtol_l.constprop.0>:
 8011838:	2b24      	cmp	r3, #36	@ 0x24
 801183a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801183e:	4686      	mov	lr, r0
 8011840:	4690      	mov	r8, r2
 8011842:	d801      	bhi.n	8011848 <_strtol_l.constprop.0+0x10>
 8011844:	2b01      	cmp	r3, #1
 8011846:	d106      	bne.n	8011856 <_strtol_l.constprop.0+0x1e>
 8011848:	f7fe f984 	bl	800fb54 <__errno>
 801184c:	2316      	movs	r3, #22
 801184e:	6003      	str	r3, [r0, #0]
 8011850:	2000      	movs	r0, #0
 8011852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011856:	4834      	ldr	r0, [pc, #208]	@ (8011928 <_strtol_l.constprop.0+0xf0>)
 8011858:	460d      	mov	r5, r1
 801185a:	462a      	mov	r2, r5
 801185c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011860:	5d06      	ldrb	r6, [r0, r4]
 8011862:	f016 0608 	ands.w	r6, r6, #8
 8011866:	d1f8      	bne.n	801185a <_strtol_l.constprop.0+0x22>
 8011868:	2c2d      	cmp	r4, #45	@ 0x2d
 801186a:	d12d      	bne.n	80118c8 <_strtol_l.constprop.0+0x90>
 801186c:	782c      	ldrb	r4, [r5, #0]
 801186e:	2601      	movs	r6, #1
 8011870:	1c95      	adds	r5, r2, #2
 8011872:	f033 0210 	bics.w	r2, r3, #16
 8011876:	d109      	bne.n	801188c <_strtol_l.constprop.0+0x54>
 8011878:	2c30      	cmp	r4, #48	@ 0x30
 801187a:	d12a      	bne.n	80118d2 <_strtol_l.constprop.0+0x9a>
 801187c:	782a      	ldrb	r2, [r5, #0]
 801187e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011882:	2a58      	cmp	r2, #88	@ 0x58
 8011884:	d125      	bne.n	80118d2 <_strtol_l.constprop.0+0x9a>
 8011886:	786c      	ldrb	r4, [r5, #1]
 8011888:	2310      	movs	r3, #16
 801188a:	3502      	adds	r5, #2
 801188c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011890:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011894:	2200      	movs	r2, #0
 8011896:	fbbc f9f3 	udiv	r9, ip, r3
 801189a:	4610      	mov	r0, r2
 801189c:	fb03 ca19 	mls	sl, r3, r9, ip
 80118a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80118a4:	2f09      	cmp	r7, #9
 80118a6:	d81b      	bhi.n	80118e0 <_strtol_l.constprop.0+0xa8>
 80118a8:	463c      	mov	r4, r7
 80118aa:	42a3      	cmp	r3, r4
 80118ac:	dd27      	ble.n	80118fe <_strtol_l.constprop.0+0xc6>
 80118ae:	1c57      	adds	r7, r2, #1
 80118b0:	d007      	beq.n	80118c2 <_strtol_l.constprop.0+0x8a>
 80118b2:	4581      	cmp	r9, r0
 80118b4:	d320      	bcc.n	80118f8 <_strtol_l.constprop.0+0xc0>
 80118b6:	d101      	bne.n	80118bc <_strtol_l.constprop.0+0x84>
 80118b8:	45a2      	cmp	sl, r4
 80118ba:	db1d      	blt.n	80118f8 <_strtol_l.constprop.0+0xc0>
 80118bc:	fb00 4003 	mla	r0, r0, r3, r4
 80118c0:	2201      	movs	r2, #1
 80118c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118c6:	e7eb      	b.n	80118a0 <_strtol_l.constprop.0+0x68>
 80118c8:	2c2b      	cmp	r4, #43	@ 0x2b
 80118ca:	bf04      	itt	eq
 80118cc:	782c      	ldrbeq	r4, [r5, #0]
 80118ce:	1c95      	addeq	r5, r2, #2
 80118d0:	e7cf      	b.n	8011872 <_strtol_l.constprop.0+0x3a>
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d1da      	bne.n	801188c <_strtol_l.constprop.0+0x54>
 80118d6:	2c30      	cmp	r4, #48	@ 0x30
 80118d8:	bf0c      	ite	eq
 80118da:	2308      	moveq	r3, #8
 80118dc:	230a      	movne	r3, #10
 80118de:	e7d5      	b.n	801188c <_strtol_l.constprop.0+0x54>
 80118e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80118e4:	2f19      	cmp	r7, #25
 80118e6:	d801      	bhi.n	80118ec <_strtol_l.constprop.0+0xb4>
 80118e8:	3c37      	subs	r4, #55	@ 0x37
 80118ea:	e7de      	b.n	80118aa <_strtol_l.constprop.0+0x72>
 80118ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80118f0:	2f19      	cmp	r7, #25
 80118f2:	d804      	bhi.n	80118fe <_strtol_l.constprop.0+0xc6>
 80118f4:	3c57      	subs	r4, #87	@ 0x57
 80118f6:	e7d8      	b.n	80118aa <_strtol_l.constprop.0+0x72>
 80118f8:	f04f 32ff 	mov.w	r2, #4294967295
 80118fc:	e7e1      	b.n	80118c2 <_strtol_l.constprop.0+0x8a>
 80118fe:	1c53      	adds	r3, r2, #1
 8011900:	d108      	bne.n	8011914 <_strtol_l.constprop.0+0xdc>
 8011902:	2322      	movs	r3, #34	@ 0x22
 8011904:	f8ce 3000 	str.w	r3, [lr]
 8011908:	4660      	mov	r0, ip
 801190a:	f1b8 0f00 	cmp.w	r8, #0
 801190e:	d0a0      	beq.n	8011852 <_strtol_l.constprop.0+0x1a>
 8011910:	1e69      	subs	r1, r5, #1
 8011912:	e006      	b.n	8011922 <_strtol_l.constprop.0+0xea>
 8011914:	b106      	cbz	r6, 8011918 <_strtol_l.constprop.0+0xe0>
 8011916:	4240      	negs	r0, r0
 8011918:	f1b8 0f00 	cmp.w	r8, #0
 801191c:	d099      	beq.n	8011852 <_strtol_l.constprop.0+0x1a>
 801191e:	2a00      	cmp	r2, #0
 8011920:	d1f6      	bne.n	8011910 <_strtol_l.constprop.0+0xd8>
 8011922:	f8c8 1000 	str.w	r1, [r8]
 8011926:	e794      	b.n	8011852 <_strtol_l.constprop.0+0x1a>
 8011928:	08012fe9 	.word	0x08012fe9

0801192c <_strtol_r>:
 801192c:	f7ff bf84 	b.w	8011838 <_strtol_l.constprop.0>

08011930 <__ascii_wctomb>:
 8011930:	4603      	mov	r3, r0
 8011932:	4608      	mov	r0, r1
 8011934:	b141      	cbz	r1, 8011948 <__ascii_wctomb+0x18>
 8011936:	2aff      	cmp	r2, #255	@ 0xff
 8011938:	d904      	bls.n	8011944 <__ascii_wctomb+0x14>
 801193a:	228a      	movs	r2, #138	@ 0x8a
 801193c:	601a      	str	r2, [r3, #0]
 801193e:	f04f 30ff 	mov.w	r0, #4294967295
 8011942:	4770      	bx	lr
 8011944:	700a      	strb	r2, [r1, #0]
 8011946:	2001      	movs	r0, #1
 8011948:	4770      	bx	lr

0801194a <__ssputs_r>:
 801194a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801194e:	688e      	ldr	r6, [r1, #8]
 8011950:	461f      	mov	r7, r3
 8011952:	42be      	cmp	r6, r7
 8011954:	680b      	ldr	r3, [r1, #0]
 8011956:	4682      	mov	sl, r0
 8011958:	460c      	mov	r4, r1
 801195a:	4690      	mov	r8, r2
 801195c:	d82d      	bhi.n	80119ba <__ssputs_r+0x70>
 801195e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011962:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011966:	d026      	beq.n	80119b6 <__ssputs_r+0x6c>
 8011968:	6965      	ldr	r5, [r4, #20]
 801196a:	6909      	ldr	r1, [r1, #16]
 801196c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011970:	eba3 0901 	sub.w	r9, r3, r1
 8011974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011978:	1c7b      	adds	r3, r7, #1
 801197a:	444b      	add	r3, r9
 801197c:	106d      	asrs	r5, r5, #1
 801197e:	429d      	cmp	r5, r3
 8011980:	bf38      	it	cc
 8011982:	461d      	movcc	r5, r3
 8011984:	0553      	lsls	r3, r2, #21
 8011986:	d527      	bpl.n	80119d8 <__ssputs_r+0x8e>
 8011988:	4629      	mov	r1, r5
 801198a:	f7fc fa8b 	bl	800dea4 <_malloc_r>
 801198e:	4606      	mov	r6, r0
 8011990:	b360      	cbz	r0, 80119ec <__ssputs_r+0xa2>
 8011992:	6921      	ldr	r1, [r4, #16]
 8011994:	464a      	mov	r2, r9
 8011996:	f7fe f90a 	bl	800fbae <memcpy>
 801199a:	89a3      	ldrh	r3, [r4, #12]
 801199c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80119a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80119a4:	81a3      	strh	r3, [r4, #12]
 80119a6:	6126      	str	r6, [r4, #16]
 80119a8:	6165      	str	r5, [r4, #20]
 80119aa:	444e      	add	r6, r9
 80119ac:	eba5 0509 	sub.w	r5, r5, r9
 80119b0:	6026      	str	r6, [r4, #0]
 80119b2:	60a5      	str	r5, [r4, #8]
 80119b4:	463e      	mov	r6, r7
 80119b6:	42be      	cmp	r6, r7
 80119b8:	d900      	bls.n	80119bc <__ssputs_r+0x72>
 80119ba:	463e      	mov	r6, r7
 80119bc:	6820      	ldr	r0, [r4, #0]
 80119be:	4632      	mov	r2, r6
 80119c0:	4641      	mov	r1, r8
 80119c2:	f000 fd52 	bl	801246a <memmove>
 80119c6:	68a3      	ldr	r3, [r4, #8]
 80119c8:	1b9b      	subs	r3, r3, r6
 80119ca:	60a3      	str	r3, [r4, #8]
 80119cc:	6823      	ldr	r3, [r4, #0]
 80119ce:	4433      	add	r3, r6
 80119d0:	6023      	str	r3, [r4, #0]
 80119d2:	2000      	movs	r0, #0
 80119d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119d8:	462a      	mov	r2, r5
 80119da:	f000 fd93 	bl	8012504 <_realloc_r>
 80119de:	4606      	mov	r6, r0
 80119e0:	2800      	cmp	r0, #0
 80119e2:	d1e0      	bne.n	80119a6 <__ssputs_r+0x5c>
 80119e4:	6921      	ldr	r1, [r4, #16]
 80119e6:	4650      	mov	r0, sl
 80119e8:	f7fe fee0 	bl	80107ac <_free_r>
 80119ec:	230c      	movs	r3, #12
 80119ee:	f8ca 3000 	str.w	r3, [sl]
 80119f2:	89a3      	ldrh	r3, [r4, #12]
 80119f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119f8:	81a3      	strh	r3, [r4, #12]
 80119fa:	f04f 30ff 	mov.w	r0, #4294967295
 80119fe:	e7e9      	b.n	80119d4 <__ssputs_r+0x8a>

08011a00 <_svfiprintf_r>:
 8011a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a04:	4698      	mov	r8, r3
 8011a06:	898b      	ldrh	r3, [r1, #12]
 8011a08:	061b      	lsls	r3, r3, #24
 8011a0a:	b09d      	sub	sp, #116	@ 0x74
 8011a0c:	4607      	mov	r7, r0
 8011a0e:	460d      	mov	r5, r1
 8011a10:	4614      	mov	r4, r2
 8011a12:	d510      	bpl.n	8011a36 <_svfiprintf_r+0x36>
 8011a14:	690b      	ldr	r3, [r1, #16]
 8011a16:	b973      	cbnz	r3, 8011a36 <_svfiprintf_r+0x36>
 8011a18:	2140      	movs	r1, #64	@ 0x40
 8011a1a:	f7fc fa43 	bl	800dea4 <_malloc_r>
 8011a1e:	6028      	str	r0, [r5, #0]
 8011a20:	6128      	str	r0, [r5, #16]
 8011a22:	b930      	cbnz	r0, 8011a32 <_svfiprintf_r+0x32>
 8011a24:	230c      	movs	r3, #12
 8011a26:	603b      	str	r3, [r7, #0]
 8011a28:	f04f 30ff 	mov.w	r0, #4294967295
 8011a2c:	b01d      	add	sp, #116	@ 0x74
 8011a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a32:	2340      	movs	r3, #64	@ 0x40
 8011a34:	616b      	str	r3, [r5, #20]
 8011a36:	2300      	movs	r3, #0
 8011a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a3a:	2320      	movs	r3, #32
 8011a3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a44:	2330      	movs	r3, #48	@ 0x30
 8011a46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011be4 <_svfiprintf_r+0x1e4>
 8011a4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a4e:	f04f 0901 	mov.w	r9, #1
 8011a52:	4623      	mov	r3, r4
 8011a54:	469a      	mov	sl, r3
 8011a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a5a:	b10a      	cbz	r2, 8011a60 <_svfiprintf_r+0x60>
 8011a5c:	2a25      	cmp	r2, #37	@ 0x25
 8011a5e:	d1f9      	bne.n	8011a54 <_svfiprintf_r+0x54>
 8011a60:	ebba 0b04 	subs.w	fp, sl, r4
 8011a64:	d00b      	beq.n	8011a7e <_svfiprintf_r+0x7e>
 8011a66:	465b      	mov	r3, fp
 8011a68:	4622      	mov	r2, r4
 8011a6a:	4629      	mov	r1, r5
 8011a6c:	4638      	mov	r0, r7
 8011a6e:	f7ff ff6c 	bl	801194a <__ssputs_r>
 8011a72:	3001      	adds	r0, #1
 8011a74:	f000 80a7 	beq.w	8011bc6 <_svfiprintf_r+0x1c6>
 8011a78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a7a:	445a      	add	r2, fp
 8011a7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	f000 809f 	beq.w	8011bc6 <_svfiprintf_r+0x1c6>
 8011a88:	2300      	movs	r3, #0
 8011a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a92:	f10a 0a01 	add.w	sl, sl, #1
 8011a96:	9304      	str	r3, [sp, #16]
 8011a98:	9307      	str	r3, [sp, #28]
 8011a9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011aa0:	4654      	mov	r4, sl
 8011aa2:	2205      	movs	r2, #5
 8011aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aa8:	484e      	ldr	r0, [pc, #312]	@ (8011be4 <_svfiprintf_r+0x1e4>)
 8011aaa:	f7ee fc31 	bl	8000310 <memchr>
 8011aae:	9a04      	ldr	r2, [sp, #16]
 8011ab0:	b9d8      	cbnz	r0, 8011aea <_svfiprintf_r+0xea>
 8011ab2:	06d0      	lsls	r0, r2, #27
 8011ab4:	bf44      	itt	mi
 8011ab6:	2320      	movmi	r3, #32
 8011ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011abc:	0711      	lsls	r1, r2, #28
 8011abe:	bf44      	itt	mi
 8011ac0:	232b      	movmi	r3, #43	@ 0x2b
 8011ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8011aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8011acc:	d015      	beq.n	8011afa <_svfiprintf_r+0xfa>
 8011ace:	9a07      	ldr	r2, [sp, #28]
 8011ad0:	4654      	mov	r4, sl
 8011ad2:	2000      	movs	r0, #0
 8011ad4:	f04f 0c0a 	mov.w	ip, #10
 8011ad8:	4621      	mov	r1, r4
 8011ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ade:	3b30      	subs	r3, #48	@ 0x30
 8011ae0:	2b09      	cmp	r3, #9
 8011ae2:	d94b      	bls.n	8011b7c <_svfiprintf_r+0x17c>
 8011ae4:	b1b0      	cbz	r0, 8011b14 <_svfiprintf_r+0x114>
 8011ae6:	9207      	str	r2, [sp, #28]
 8011ae8:	e014      	b.n	8011b14 <_svfiprintf_r+0x114>
 8011aea:	eba0 0308 	sub.w	r3, r0, r8
 8011aee:	fa09 f303 	lsl.w	r3, r9, r3
 8011af2:	4313      	orrs	r3, r2
 8011af4:	9304      	str	r3, [sp, #16]
 8011af6:	46a2      	mov	sl, r4
 8011af8:	e7d2      	b.n	8011aa0 <_svfiprintf_r+0xa0>
 8011afa:	9b03      	ldr	r3, [sp, #12]
 8011afc:	1d19      	adds	r1, r3, #4
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	9103      	str	r1, [sp, #12]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	bfbb      	ittet	lt
 8011b06:	425b      	neglt	r3, r3
 8011b08:	f042 0202 	orrlt.w	r2, r2, #2
 8011b0c:	9307      	strge	r3, [sp, #28]
 8011b0e:	9307      	strlt	r3, [sp, #28]
 8011b10:	bfb8      	it	lt
 8011b12:	9204      	strlt	r2, [sp, #16]
 8011b14:	7823      	ldrb	r3, [r4, #0]
 8011b16:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b18:	d10a      	bne.n	8011b30 <_svfiprintf_r+0x130>
 8011b1a:	7863      	ldrb	r3, [r4, #1]
 8011b1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b1e:	d132      	bne.n	8011b86 <_svfiprintf_r+0x186>
 8011b20:	9b03      	ldr	r3, [sp, #12]
 8011b22:	1d1a      	adds	r2, r3, #4
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	9203      	str	r2, [sp, #12]
 8011b28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b2c:	3402      	adds	r4, #2
 8011b2e:	9305      	str	r3, [sp, #20]
 8011b30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011bf4 <_svfiprintf_r+0x1f4>
 8011b34:	7821      	ldrb	r1, [r4, #0]
 8011b36:	2203      	movs	r2, #3
 8011b38:	4650      	mov	r0, sl
 8011b3a:	f7ee fbe9 	bl	8000310 <memchr>
 8011b3e:	b138      	cbz	r0, 8011b50 <_svfiprintf_r+0x150>
 8011b40:	9b04      	ldr	r3, [sp, #16]
 8011b42:	eba0 000a 	sub.w	r0, r0, sl
 8011b46:	2240      	movs	r2, #64	@ 0x40
 8011b48:	4082      	lsls	r2, r0
 8011b4a:	4313      	orrs	r3, r2
 8011b4c:	3401      	adds	r4, #1
 8011b4e:	9304      	str	r3, [sp, #16]
 8011b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b54:	4824      	ldr	r0, [pc, #144]	@ (8011be8 <_svfiprintf_r+0x1e8>)
 8011b56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b5a:	2206      	movs	r2, #6
 8011b5c:	f7ee fbd8 	bl	8000310 <memchr>
 8011b60:	2800      	cmp	r0, #0
 8011b62:	d036      	beq.n	8011bd2 <_svfiprintf_r+0x1d2>
 8011b64:	4b21      	ldr	r3, [pc, #132]	@ (8011bec <_svfiprintf_r+0x1ec>)
 8011b66:	bb1b      	cbnz	r3, 8011bb0 <_svfiprintf_r+0x1b0>
 8011b68:	9b03      	ldr	r3, [sp, #12]
 8011b6a:	3307      	adds	r3, #7
 8011b6c:	f023 0307 	bic.w	r3, r3, #7
 8011b70:	3308      	adds	r3, #8
 8011b72:	9303      	str	r3, [sp, #12]
 8011b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b76:	4433      	add	r3, r6
 8011b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b7a:	e76a      	b.n	8011a52 <_svfiprintf_r+0x52>
 8011b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b80:	460c      	mov	r4, r1
 8011b82:	2001      	movs	r0, #1
 8011b84:	e7a8      	b.n	8011ad8 <_svfiprintf_r+0xd8>
 8011b86:	2300      	movs	r3, #0
 8011b88:	3401      	adds	r4, #1
 8011b8a:	9305      	str	r3, [sp, #20]
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	f04f 0c0a 	mov.w	ip, #10
 8011b92:	4620      	mov	r0, r4
 8011b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b98:	3a30      	subs	r2, #48	@ 0x30
 8011b9a:	2a09      	cmp	r2, #9
 8011b9c:	d903      	bls.n	8011ba6 <_svfiprintf_r+0x1a6>
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d0c6      	beq.n	8011b30 <_svfiprintf_r+0x130>
 8011ba2:	9105      	str	r1, [sp, #20]
 8011ba4:	e7c4      	b.n	8011b30 <_svfiprintf_r+0x130>
 8011ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011baa:	4604      	mov	r4, r0
 8011bac:	2301      	movs	r3, #1
 8011bae:	e7f0      	b.n	8011b92 <_svfiprintf_r+0x192>
 8011bb0:	ab03      	add	r3, sp, #12
 8011bb2:	9300      	str	r3, [sp, #0]
 8011bb4:	462a      	mov	r2, r5
 8011bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8011bf0 <_svfiprintf_r+0x1f0>)
 8011bb8:	a904      	add	r1, sp, #16
 8011bba:	4638      	mov	r0, r7
 8011bbc:	f7fd f844 	bl	800ec48 <_printf_float>
 8011bc0:	1c42      	adds	r2, r0, #1
 8011bc2:	4606      	mov	r6, r0
 8011bc4:	d1d6      	bne.n	8011b74 <_svfiprintf_r+0x174>
 8011bc6:	89ab      	ldrh	r3, [r5, #12]
 8011bc8:	065b      	lsls	r3, r3, #25
 8011bca:	f53f af2d 	bmi.w	8011a28 <_svfiprintf_r+0x28>
 8011bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011bd0:	e72c      	b.n	8011a2c <_svfiprintf_r+0x2c>
 8011bd2:	ab03      	add	r3, sp, #12
 8011bd4:	9300      	str	r3, [sp, #0]
 8011bd6:	462a      	mov	r2, r5
 8011bd8:	4b05      	ldr	r3, [pc, #20]	@ (8011bf0 <_svfiprintf_r+0x1f0>)
 8011bda:	a904      	add	r1, sp, #16
 8011bdc:	4638      	mov	r0, r7
 8011bde:	f7fd fabb 	bl	800f158 <_printf_i>
 8011be2:	e7ed      	b.n	8011bc0 <_svfiprintf_r+0x1c0>
 8011be4:	080130e9 	.word	0x080130e9
 8011be8:	080130f3 	.word	0x080130f3
 8011bec:	0800ec49 	.word	0x0800ec49
 8011bf0:	0801194b 	.word	0x0801194b
 8011bf4:	080130ef 	.word	0x080130ef

08011bf8 <_sungetc_r>:
 8011bf8:	b538      	push	{r3, r4, r5, lr}
 8011bfa:	1c4b      	adds	r3, r1, #1
 8011bfc:	4614      	mov	r4, r2
 8011bfe:	d103      	bne.n	8011c08 <_sungetc_r+0x10>
 8011c00:	f04f 35ff 	mov.w	r5, #4294967295
 8011c04:	4628      	mov	r0, r5
 8011c06:	bd38      	pop	{r3, r4, r5, pc}
 8011c08:	8993      	ldrh	r3, [r2, #12]
 8011c0a:	f023 0320 	bic.w	r3, r3, #32
 8011c0e:	8193      	strh	r3, [r2, #12]
 8011c10:	6853      	ldr	r3, [r2, #4]
 8011c12:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8011c14:	b2cd      	uxtb	r5, r1
 8011c16:	b18a      	cbz	r2, 8011c3c <_sungetc_r+0x44>
 8011c18:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	dd08      	ble.n	8011c30 <_sungetc_r+0x38>
 8011c1e:	6823      	ldr	r3, [r4, #0]
 8011c20:	1e5a      	subs	r2, r3, #1
 8011c22:	6022      	str	r2, [r4, #0]
 8011c24:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011c28:	6863      	ldr	r3, [r4, #4]
 8011c2a:	3301      	adds	r3, #1
 8011c2c:	6063      	str	r3, [r4, #4]
 8011c2e:	e7e9      	b.n	8011c04 <_sungetc_r+0xc>
 8011c30:	4621      	mov	r1, r4
 8011c32:	f000 fbe0 	bl	80123f6 <__submore>
 8011c36:	2800      	cmp	r0, #0
 8011c38:	d0f1      	beq.n	8011c1e <_sungetc_r+0x26>
 8011c3a:	e7e1      	b.n	8011c00 <_sungetc_r+0x8>
 8011c3c:	6921      	ldr	r1, [r4, #16]
 8011c3e:	6822      	ldr	r2, [r4, #0]
 8011c40:	b141      	cbz	r1, 8011c54 <_sungetc_r+0x5c>
 8011c42:	4291      	cmp	r1, r2
 8011c44:	d206      	bcs.n	8011c54 <_sungetc_r+0x5c>
 8011c46:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011c4a:	42a9      	cmp	r1, r5
 8011c4c:	d102      	bne.n	8011c54 <_sungetc_r+0x5c>
 8011c4e:	3a01      	subs	r2, #1
 8011c50:	6022      	str	r2, [r4, #0]
 8011c52:	e7ea      	b.n	8011c2a <_sungetc_r+0x32>
 8011c54:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8011c58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c5e:	2303      	movs	r3, #3
 8011c60:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011c62:	4623      	mov	r3, r4
 8011c64:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011c68:	6023      	str	r3, [r4, #0]
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	e7de      	b.n	8011c2c <_sungetc_r+0x34>

08011c6e <__ssrefill_r>:
 8011c6e:	b510      	push	{r4, lr}
 8011c70:	460c      	mov	r4, r1
 8011c72:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011c74:	b169      	cbz	r1, 8011c92 <__ssrefill_r+0x24>
 8011c76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c7a:	4299      	cmp	r1, r3
 8011c7c:	d001      	beq.n	8011c82 <__ssrefill_r+0x14>
 8011c7e:	f7fe fd95 	bl	80107ac <_free_r>
 8011c82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011c84:	6063      	str	r3, [r4, #4]
 8011c86:	2000      	movs	r0, #0
 8011c88:	6360      	str	r0, [r4, #52]	@ 0x34
 8011c8a:	b113      	cbz	r3, 8011c92 <__ssrefill_r+0x24>
 8011c8c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011c8e:	6023      	str	r3, [r4, #0]
 8011c90:	bd10      	pop	{r4, pc}
 8011c92:	6923      	ldr	r3, [r4, #16]
 8011c94:	6023      	str	r3, [r4, #0]
 8011c96:	2300      	movs	r3, #0
 8011c98:	6063      	str	r3, [r4, #4]
 8011c9a:	89a3      	ldrh	r3, [r4, #12]
 8011c9c:	f043 0320 	orr.w	r3, r3, #32
 8011ca0:	81a3      	strh	r3, [r4, #12]
 8011ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ca6:	e7f3      	b.n	8011c90 <__ssrefill_r+0x22>

08011ca8 <__ssvfiscanf_r>:
 8011ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cac:	460c      	mov	r4, r1
 8011cae:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8011cb2:	2100      	movs	r1, #0
 8011cb4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011cb8:	49a5      	ldr	r1, [pc, #660]	@ (8011f50 <__ssvfiscanf_r+0x2a8>)
 8011cba:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011cbc:	f10d 0804 	add.w	r8, sp, #4
 8011cc0:	49a4      	ldr	r1, [pc, #656]	@ (8011f54 <__ssvfiscanf_r+0x2ac>)
 8011cc2:	4fa5      	ldr	r7, [pc, #660]	@ (8011f58 <__ssvfiscanf_r+0x2b0>)
 8011cc4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011cc8:	4606      	mov	r6, r0
 8011cca:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011ccc:	9300      	str	r3, [sp, #0]
 8011cce:	7813      	ldrb	r3, [r2, #0]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	f000 8158 	beq.w	8011f86 <__ssvfiscanf_r+0x2de>
 8011cd6:	5cf9      	ldrb	r1, [r7, r3]
 8011cd8:	f011 0108 	ands.w	r1, r1, #8
 8011cdc:	f102 0501 	add.w	r5, r2, #1
 8011ce0:	d019      	beq.n	8011d16 <__ssvfiscanf_r+0x6e>
 8011ce2:	6863      	ldr	r3, [r4, #4]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	dd0f      	ble.n	8011d08 <__ssvfiscanf_r+0x60>
 8011ce8:	6823      	ldr	r3, [r4, #0]
 8011cea:	781a      	ldrb	r2, [r3, #0]
 8011cec:	5cba      	ldrb	r2, [r7, r2]
 8011cee:	0712      	lsls	r2, r2, #28
 8011cf0:	d401      	bmi.n	8011cf6 <__ssvfiscanf_r+0x4e>
 8011cf2:	462a      	mov	r2, r5
 8011cf4:	e7eb      	b.n	8011cce <__ssvfiscanf_r+0x26>
 8011cf6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011cf8:	3201      	adds	r2, #1
 8011cfa:	9245      	str	r2, [sp, #276]	@ 0x114
 8011cfc:	6862      	ldr	r2, [r4, #4]
 8011cfe:	3301      	adds	r3, #1
 8011d00:	3a01      	subs	r2, #1
 8011d02:	6062      	str	r2, [r4, #4]
 8011d04:	6023      	str	r3, [r4, #0]
 8011d06:	e7ec      	b.n	8011ce2 <__ssvfiscanf_r+0x3a>
 8011d08:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011d0a:	4621      	mov	r1, r4
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	4798      	blx	r3
 8011d10:	2800      	cmp	r0, #0
 8011d12:	d0e9      	beq.n	8011ce8 <__ssvfiscanf_r+0x40>
 8011d14:	e7ed      	b.n	8011cf2 <__ssvfiscanf_r+0x4a>
 8011d16:	2b25      	cmp	r3, #37	@ 0x25
 8011d18:	d012      	beq.n	8011d40 <__ssvfiscanf_r+0x98>
 8011d1a:	4699      	mov	r9, r3
 8011d1c:	6863      	ldr	r3, [r4, #4]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	f340 8093 	ble.w	8011e4a <__ssvfiscanf_r+0x1a2>
 8011d24:	6822      	ldr	r2, [r4, #0]
 8011d26:	7813      	ldrb	r3, [r2, #0]
 8011d28:	454b      	cmp	r3, r9
 8011d2a:	f040 812c 	bne.w	8011f86 <__ssvfiscanf_r+0x2de>
 8011d2e:	6863      	ldr	r3, [r4, #4]
 8011d30:	3b01      	subs	r3, #1
 8011d32:	6063      	str	r3, [r4, #4]
 8011d34:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011d36:	3201      	adds	r2, #1
 8011d38:	3301      	adds	r3, #1
 8011d3a:	6022      	str	r2, [r4, #0]
 8011d3c:	9345      	str	r3, [sp, #276]	@ 0x114
 8011d3e:	e7d8      	b.n	8011cf2 <__ssvfiscanf_r+0x4a>
 8011d40:	9141      	str	r1, [sp, #260]	@ 0x104
 8011d42:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011d44:	7853      	ldrb	r3, [r2, #1]
 8011d46:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d48:	bf02      	ittt	eq
 8011d4a:	2310      	moveq	r3, #16
 8011d4c:	1c95      	addeq	r5, r2, #2
 8011d4e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011d50:	220a      	movs	r2, #10
 8011d52:	46a9      	mov	r9, r5
 8011d54:	f819 1b01 	ldrb.w	r1, [r9], #1
 8011d58:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011d5c:	2b09      	cmp	r3, #9
 8011d5e:	d91e      	bls.n	8011d9e <__ssvfiscanf_r+0xf6>
 8011d60:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8011f5c <__ssvfiscanf_r+0x2b4>
 8011d64:	2203      	movs	r2, #3
 8011d66:	4650      	mov	r0, sl
 8011d68:	f7ee fad2 	bl	8000310 <memchr>
 8011d6c:	b138      	cbz	r0, 8011d7e <__ssvfiscanf_r+0xd6>
 8011d6e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011d70:	eba0 000a 	sub.w	r0, r0, sl
 8011d74:	2301      	movs	r3, #1
 8011d76:	4083      	lsls	r3, r0
 8011d78:	4313      	orrs	r3, r2
 8011d7a:	9341      	str	r3, [sp, #260]	@ 0x104
 8011d7c:	464d      	mov	r5, r9
 8011d7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011d82:	2b78      	cmp	r3, #120	@ 0x78
 8011d84:	d806      	bhi.n	8011d94 <__ssvfiscanf_r+0xec>
 8011d86:	2b57      	cmp	r3, #87	@ 0x57
 8011d88:	d810      	bhi.n	8011dac <__ssvfiscanf_r+0x104>
 8011d8a:	2b25      	cmp	r3, #37	@ 0x25
 8011d8c:	d0c5      	beq.n	8011d1a <__ssvfiscanf_r+0x72>
 8011d8e:	d857      	bhi.n	8011e40 <__ssvfiscanf_r+0x198>
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d065      	beq.n	8011e60 <__ssvfiscanf_r+0x1b8>
 8011d94:	2303      	movs	r3, #3
 8011d96:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011d98:	230a      	movs	r3, #10
 8011d9a:	9342      	str	r3, [sp, #264]	@ 0x108
 8011d9c:	e078      	b.n	8011e90 <__ssvfiscanf_r+0x1e8>
 8011d9e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011da0:	fb02 1103 	mla	r1, r2, r3, r1
 8011da4:	3930      	subs	r1, #48	@ 0x30
 8011da6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011da8:	464d      	mov	r5, r9
 8011daa:	e7d2      	b.n	8011d52 <__ssvfiscanf_r+0xaa>
 8011dac:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011db0:	2a20      	cmp	r2, #32
 8011db2:	d8ef      	bhi.n	8011d94 <__ssvfiscanf_r+0xec>
 8011db4:	a101      	add	r1, pc, #4	@ (adr r1, 8011dbc <__ssvfiscanf_r+0x114>)
 8011db6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011dba:	bf00      	nop
 8011dbc:	08011e6f 	.word	0x08011e6f
 8011dc0:	08011d95 	.word	0x08011d95
 8011dc4:	08011d95 	.word	0x08011d95
 8011dc8:	08011ec9 	.word	0x08011ec9
 8011dcc:	08011d95 	.word	0x08011d95
 8011dd0:	08011d95 	.word	0x08011d95
 8011dd4:	08011d95 	.word	0x08011d95
 8011dd8:	08011d95 	.word	0x08011d95
 8011ddc:	08011d95 	.word	0x08011d95
 8011de0:	08011d95 	.word	0x08011d95
 8011de4:	08011d95 	.word	0x08011d95
 8011de8:	08011edf 	.word	0x08011edf
 8011dec:	08011ec5 	.word	0x08011ec5
 8011df0:	08011e47 	.word	0x08011e47
 8011df4:	08011e47 	.word	0x08011e47
 8011df8:	08011e47 	.word	0x08011e47
 8011dfc:	08011d95 	.word	0x08011d95
 8011e00:	08011e81 	.word	0x08011e81
 8011e04:	08011d95 	.word	0x08011d95
 8011e08:	08011d95 	.word	0x08011d95
 8011e0c:	08011d95 	.word	0x08011d95
 8011e10:	08011d95 	.word	0x08011d95
 8011e14:	08011eef 	.word	0x08011eef
 8011e18:	08011e89 	.word	0x08011e89
 8011e1c:	08011e67 	.word	0x08011e67
 8011e20:	08011d95 	.word	0x08011d95
 8011e24:	08011d95 	.word	0x08011d95
 8011e28:	08011eeb 	.word	0x08011eeb
 8011e2c:	08011d95 	.word	0x08011d95
 8011e30:	08011ec5 	.word	0x08011ec5
 8011e34:	08011d95 	.word	0x08011d95
 8011e38:	08011d95 	.word	0x08011d95
 8011e3c:	08011e6f 	.word	0x08011e6f
 8011e40:	3b45      	subs	r3, #69	@ 0x45
 8011e42:	2b02      	cmp	r3, #2
 8011e44:	d8a6      	bhi.n	8011d94 <__ssvfiscanf_r+0xec>
 8011e46:	2305      	movs	r3, #5
 8011e48:	e021      	b.n	8011e8e <__ssvfiscanf_r+0x1e6>
 8011e4a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011e4c:	4621      	mov	r1, r4
 8011e4e:	4630      	mov	r0, r6
 8011e50:	4798      	blx	r3
 8011e52:	2800      	cmp	r0, #0
 8011e54:	f43f af66 	beq.w	8011d24 <__ssvfiscanf_r+0x7c>
 8011e58:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011e5a:	2800      	cmp	r0, #0
 8011e5c:	f040 808b 	bne.w	8011f76 <__ssvfiscanf_r+0x2ce>
 8011e60:	f04f 30ff 	mov.w	r0, #4294967295
 8011e64:	e08b      	b.n	8011f7e <__ssvfiscanf_r+0x2d6>
 8011e66:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011e68:	f042 0220 	orr.w	r2, r2, #32
 8011e6c:	9241      	str	r2, [sp, #260]	@ 0x104
 8011e6e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011e70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011e74:	9241      	str	r2, [sp, #260]	@ 0x104
 8011e76:	2210      	movs	r2, #16
 8011e78:	2b6e      	cmp	r3, #110	@ 0x6e
 8011e7a:	9242      	str	r2, [sp, #264]	@ 0x108
 8011e7c:	d902      	bls.n	8011e84 <__ssvfiscanf_r+0x1dc>
 8011e7e:	e005      	b.n	8011e8c <__ssvfiscanf_r+0x1e4>
 8011e80:	2300      	movs	r3, #0
 8011e82:	9342      	str	r3, [sp, #264]	@ 0x108
 8011e84:	2303      	movs	r3, #3
 8011e86:	e002      	b.n	8011e8e <__ssvfiscanf_r+0x1e6>
 8011e88:	2308      	movs	r3, #8
 8011e8a:	9342      	str	r3, [sp, #264]	@ 0x108
 8011e8c:	2304      	movs	r3, #4
 8011e8e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011e90:	6863      	ldr	r3, [r4, #4]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	dd39      	ble.n	8011f0a <__ssvfiscanf_r+0x262>
 8011e96:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011e98:	0659      	lsls	r1, r3, #25
 8011e9a:	d404      	bmi.n	8011ea6 <__ssvfiscanf_r+0x1fe>
 8011e9c:	6823      	ldr	r3, [r4, #0]
 8011e9e:	781a      	ldrb	r2, [r3, #0]
 8011ea0:	5cba      	ldrb	r2, [r7, r2]
 8011ea2:	0712      	lsls	r2, r2, #28
 8011ea4:	d438      	bmi.n	8011f18 <__ssvfiscanf_r+0x270>
 8011ea6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011ea8:	2b02      	cmp	r3, #2
 8011eaa:	dc47      	bgt.n	8011f3c <__ssvfiscanf_r+0x294>
 8011eac:	466b      	mov	r3, sp
 8011eae:	4622      	mov	r2, r4
 8011eb0:	a941      	add	r1, sp, #260	@ 0x104
 8011eb2:	4630      	mov	r0, r6
 8011eb4:	f000 f86c 	bl	8011f90 <_scanf_chars>
 8011eb8:	2801      	cmp	r0, #1
 8011eba:	d064      	beq.n	8011f86 <__ssvfiscanf_r+0x2de>
 8011ebc:	2802      	cmp	r0, #2
 8011ebe:	f47f af18 	bne.w	8011cf2 <__ssvfiscanf_r+0x4a>
 8011ec2:	e7c9      	b.n	8011e58 <__ssvfiscanf_r+0x1b0>
 8011ec4:	220a      	movs	r2, #10
 8011ec6:	e7d7      	b.n	8011e78 <__ssvfiscanf_r+0x1d0>
 8011ec8:	4629      	mov	r1, r5
 8011eca:	4640      	mov	r0, r8
 8011ecc:	f000 fa5a 	bl	8012384 <__sccl>
 8011ed0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011ed2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ed6:	9341      	str	r3, [sp, #260]	@ 0x104
 8011ed8:	4605      	mov	r5, r0
 8011eda:	2301      	movs	r3, #1
 8011edc:	e7d7      	b.n	8011e8e <__ssvfiscanf_r+0x1e6>
 8011ede:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ee4:	9341      	str	r3, [sp, #260]	@ 0x104
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	e7d1      	b.n	8011e8e <__ssvfiscanf_r+0x1e6>
 8011eea:	2302      	movs	r3, #2
 8011eec:	e7cf      	b.n	8011e8e <__ssvfiscanf_r+0x1e6>
 8011eee:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011ef0:	06c3      	lsls	r3, r0, #27
 8011ef2:	f53f aefe 	bmi.w	8011cf2 <__ssvfiscanf_r+0x4a>
 8011ef6:	9b00      	ldr	r3, [sp, #0]
 8011ef8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011efa:	1d19      	adds	r1, r3, #4
 8011efc:	9100      	str	r1, [sp, #0]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	07c0      	lsls	r0, r0, #31
 8011f02:	bf4c      	ite	mi
 8011f04:	801a      	strhmi	r2, [r3, #0]
 8011f06:	601a      	strpl	r2, [r3, #0]
 8011f08:	e6f3      	b.n	8011cf2 <__ssvfiscanf_r+0x4a>
 8011f0a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011f0c:	4621      	mov	r1, r4
 8011f0e:	4630      	mov	r0, r6
 8011f10:	4798      	blx	r3
 8011f12:	2800      	cmp	r0, #0
 8011f14:	d0bf      	beq.n	8011e96 <__ssvfiscanf_r+0x1ee>
 8011f16:	e79f      	b.n	8011e58 <__ssvfiscanf_r+0x1b0>
 8011f18:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011f1a:	3201      	adds	r2, #1
 8011f1c:	9245      	str	r2, [sp, #276]	@ 0x114
 8011f1e:	6862      	ldr	r2, [r4, #4]
 8011f20:	3a01      	subs	r2, #1
 8011f22:	2a00      	cmp	r2, #0
 8011f24:	6062      	str	r2, [r4, #4]
 8011f26:	dd02      	ble.n	8011f2e <__ssvfiscanf_r+0x286>
 8011f28:	3301      	adds	r3, #1
 8011f2a:	6023      	str	r3, [r4, #0]
 8011f2c:	e7b6      	b.n	8011e9c <__ssvfiscanf_r+0x1f4>
 8011f2e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011f30:	4621      	mov	r1, r4
 8011f32:	4630      	mov	r0, r6
 8011f34:	4798      	blx	r3
 8011f36:	2800      	cmp	r0, #0
 8011f38:	d0b0      	beq.n	8011e9c <__ssvfiscanf_r+0x1f4>
 8011f3a:	e78d      	b.n	8011e58 <__ssvfiscanf_r+0x1b0>
 8011f3c:	2b04      	cmp	r3, #4
 8011f3e:	dc0f      	bgt.n	8011f60 <__ssvfiscanf_r+0x2b8>
 8011f40:	466b      	mov	r3, sp
 8011f42:	4622      	mov	r2, r4
 8011f44:	a941      	add	r1, sp, #260	@ 0x104
 8011f46:	4630      	mov	r0, r6
 8011f48:	f000 f87c 	bl	8012044 <_scanf_i>
 8011f4c:	e7b4      	b.n	8011eb8 <__ssvfiscanf_r+0x210>
 8011f4e:	bf00      	nop
 8011f50:	08011bf9 	.word	0x08011bf9
 8011f54:	08011c6f 	.word	0x08011c6f
 8011f58:	08012fe9 	.word	0x08012fe9
 8011f5c:	080130ef 	.word	0x080130ef
 8011f60:	4b0a      	ldr	r3, [pc, #40]	@ (8011f8c <__ssvfiscanf_r+0x2e4>)
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	f43f aec5 	beq.w	8011cf2 <__ssvfiscanf_r+0x4a>
 8011f68:	466b      	mov	r3, sp
 8011f6a:	4622      	mov	r2, r4
 8011f6c:	a941      	add	r1, sp, #260	@ 0x104
 8011f6e:	4630      	mov	r0, r6
 8011f70:	f7fd fa12 	bl	800f398 <_scanf_float>
 8011f74:	e7a0      	b.n	8011eb8 <__ssvfiscanf_r+0x210>
 8011f76:	89a3      	ldrh	r3, [r4, #12]
 8011f78:	065b      	lsls	r3, r3, #25
 8011f7a:	f53f af71 	bmi.w	8011e60 <__ssvfiscanf_r+0x1b8>
 8011f7e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f86:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011f88:	e7f9      	b.n	8011f7e <__ssvfiscanf_r+0x2d6>
 8011f8a:	bf00      	nop
 8011f8c:	0800f399 	.word	0x0800f399

08011f90 <_scanf_chars>:
 8011f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f94:	4615      	mov	r5, r2
 8011f96:	688a      	ldr	r2, [r1, #8]
 8011f98:	4680      	mov	r8, r0
 8011f9a:	460c      	mov	r4, r1
 8011f9c:	b932      	cbnz	r2, 8011fac <_scanf_chars+0x1c>
 8011f9e:	698a      	ldr	r2, [r1, #24]
 8011fa0:	2a00      	cmp	r2, #0
 8011fa2:	bf14      	ite	ne
 8011fa4:	f04f 32ff 	movne.w	r2, #4294967295
 8011fa8:	2201      	moveq	r2, #1
 8011faa:	608a      	str	r2, [r1, #8]
 8011fac:	6822      	ldr	r2, [r4, #0]
 8011fae:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012040 <_scanf_chars+0xb0>
 8011fb2:	06d1      	lsls	r1, r2, #27
 8011fb4:	bf5f      	itttt	pl
 8011fb6:	681a      	ldrpl	r2, [r3, #0]
 8011fb8:	1d11      	addpl	r1, r2, #4
 8011fba:	6019      	strpl	r1, [r3, #0]
 8011fbc:	6816      	ldrpl	r6, [r2, #0]
 8011fbe:	2700      	movs	r7, #0
 8011fc0:	69a0      	ldr	r0, [r4, #24]
 8011fc2:	b188      	cbz	r0, 8011fe8 <_scanf_chars+0x58>
 8011fc4:	2801      	cmp	r0, #1
 8011fc6:	d107      	bne.n	8011fd8 <_scanf_chars+0x48>
 8011fc8:	682b      	ldr	r3, [r5, #0]
 8011fca:	781a      	ldrb	r2, [r3, #0]
 8011fcc:	6963      	ldr	r3, [r4, #20]
 8011fce:	5c9b      	ldrb	r3, [r3, r2]
 8011fd0:	b953      	cbnz	r3, 8011fe8 <_scanf_chars+0x58>
 8011fd2:	2f00      	cmp	r7, #0
 8011fd4:	d031      	beq.n	801203a <_scanf_chars+0xaa>
 8011fd6:	e022      	b.n	801201e <_scanf_chars+0x8e>
 8011fd8:	2802      	cmp	r0, #2
 8011fda:	d120      	bne.n	801201e <_scanf_chars+0x8e>
 8011fdc:	682b      	ldr	r3, [r5, #0]
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011fe4:	071b      	lsls	r3, r3, #28
 8011fe6:	d41a      	bmi.n	801201e <_scanf_chars+0x8e>
 8011fe8:	6823      	ldr	r3, [r4, #0]
 8011fea:	06da      	lsls	r2, r3, #27
 8011fec:	bf5e      	ittt	pl
 8011fee:	682b      	ldrpl	r3, [r5, #0]
 8011ff0:	781b      	ldrbpl	r3, [r3, #0]
 8011ff2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011ff6:	682a      	ldr	r2, [r5, #0]
 8011ff8:	686b      	ldr	r3, [r5, #4]
 8011ffa:	3201      	adds	r2, #1
 8011ffc:	602a      	str	r2, [r5, #0]
 8011ffe:	68a2      	ldr	r2, [r4, #8]
 8012000:	3b01      	subs	r3, #1
 8012002:	3a01      	subs	r2, #1
 8012004:	606b      	str	r3, [r5, #4]
 8012006:	3701      	adds	r7, #1
 8012008:	60a2      	str	r2, [r4, #8]
 801200a:	b142      	cbz	r2, 801201e <_scanf_chars+0x8e>
 801200c:	2b00      	cmp	r3, #0
 801200e:	dcd7      	bgt.n	8011fc0 <_scanf_chars+0x30>
 8012010:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012014:	4629      	mov	r1, r5
 8012016:	4640      	mov	r0, r8
 8012018:	4798      	blx	r3
 801201a:	2800      	cmp	r0, #0
 801201c:	d0d0      	beq.n	8011fc0 <_scanf_chars+0x30>
 801201e:	6823      	ldr	r3, [r4, #0]
 8012020:	f013 0310 	ands.w	r3, r3, #16
 8012024:	d105      	bne.n	8012032 <_scanf_chars+0xa2>
 8012026:	68e2      	ldr	r2, [r4, #12]
 8012028:	3201      	adds	r2, #1
 801202a:	60e2      	str	r2, [r4, #12]
 801202c:	69a2      	ldr	r2, [r4, #24]
 801202e:	b102      	cbz	r2, 8012032 <_scanf_chars+0xa2>
 8012030:	7033      	strb	r3, [r6, #0]
 8012032:	6923      	ldr	r3, [r4, #16]
 8012034:	443b      	add	r3, r7
 8012036:	6123      	str	r3, [r4, #16]
 8012038:	2000      	movs	r0, #0
 801203a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801203e:	bf00      	nop
 8012040:	08012fe9 	.word	0x08012fe9

08012044 <_scanf_i>:
 8012044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012048:	4698      	mov	r8, r3
 801204a:	4b74      	ldr	r3, [pc, #464]	@ (801221c <_scanf_i+0x1d8>)
 801204c:	460c      	mov	r4, r1
 801204e:	4682      	mov	sl, r0
 8012050:	4616      	mov	r6, r2
 8012052:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012056:	b087      	sub	sp, #28
 8012058:	ab03      	add	r3, sp, #12
 801205a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801205e:	4b70      	ldr	r3, [pc, #448]	@ (8012220 <_scanf_i+0x1dc>)
 8012060:	69a1      	ldr	r1, [r4, #24]
 8012062:	4a70      	ldr	r2, [pc, #448]	@ (8012224 <_scanf_i+0x1e0>)
 8012064:	2903      	cmp	r1, #3
 8012066:	bf08      	it	eq
 8012068:	461a      	moveq	r2, r3
 801206a:	68a3      	ldr	r3, [r4, #8]
 801206c:	9201      	str	r2, [sp, #4]
 801206e:	1e5a      	subs	r2, r3, #1
 8012070:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012074:	bf88      	it	hi
 8012076:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801207a:	4627      	mov	r7, r4
 801207c:	bf82      	ittt	hi
 801207e:	eb03 0905 	addhi.w	r9, r3, r5
 8012082:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012086:	60a3      	strhi	r3, [r4, #8]
 8012088:	f857 3b1c 	ldr.w	r3, [r7], #28
 801208c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012090:	bf98      	it	ls
 8012092:	f04f 0900 	movls.w	r9, #0
 8012096:	6023      	str	r3, [r4, #0]
 8012098:	463d      	mov	r5, r7
 801209a:	f04f 0b00 	mov.w	fp, #0
 801209e:	6831      	ldr	r1, [r6, #0]
 80120a0:	ab03      	add	r3, sp, #12
 80120a2:	7809      	ldrb	r1, [r1, #0]
 80120a4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80120a8:	2202      	movs	r2, #2
 80120aa:	f7ee f931 	bl	8000310 <memchr>
 80120ae:	b328      	cbz	r0, 80120fc <_scanf_i+0xb8>
 80120b0:	f1bb 0f01 	cmp.w	fp, #1
 80120b4:	d159      	bne.n	801216a <_scanf_i+0x126>
 80120b6:	6862      	ldr	r2, [r4, #4]
 80120b8:	b92a      	cbnz	r2, 80120c6 <_scanf_i+0x82>
 80120ba:	6822      	ldr	r2, [r4, #0]
 80120bc:	2108      	movs	r1, #8
 80120be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80120c2:	6061      	str	r1, [r4, #4]
 80120c4:	6022      	str	r2, [r4, #0]
 80120c6:	6822      	ldr	r2, [r4, #0]
 80120c8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80120cc:	6022      	str	r2, [r4, #0]
 80120ce:	68a2      	ldr	r2, [r4, #8]
 80120d0:	1e51      	subs	r1, r2, #1
 80120d2:	60a1      	str	r1, [r4, #8]
 80120d4:	b192      	cbz	r2, 80120fc <_scanf_i+0xb8>
 80120d6:	6832      	ldr	r2, [r6, #0]
 80120d8:	1c51      	adds	r1, r2, #1
 80120da:	6031      	str	r1, [r6, #0]
 80120dc:	7812      	ldrb	r2, [r2, #0]
 80120de:	f805 2b01 	strb.w	r2, [r5], #1
 80120e2:	6872      	ldr	r2, [r6, #4]
 80120e4:	3a01      	subs	r2, #1
 80120e6:	2a00      	cmp	r2, #0
 80120e8:	6072      	str	r2, [r6, #4]
 80120ea:	dc07      	bgt.n	80120fc <_scanf_i+0xb8>
 80120ec:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80120f0:	4631      	mov	r1, r6
 80120f2:	4650      	mov	r0, sl
 80120f4:	4790      	blx	r2
 80120f6:	2800      	cmp	r0, #0
 80120f8:	f040 8085 	bne.w	8012206 <_scanf_i+0x1c2>
 80120fc:	f10b 0b01 	add.w	fp, fp, #1
 8012100:	f1bb 0f03 	cmp.w	fp, #3
 8012104:	d1cb      	bne.n	801209e <_scanf_i+0x5a>
 8012106:	6863      	ldr	r3, [r4, #4]
 8012108:	b90b      	cbnz	r3, 801210e <_scanf_i+0xca>
 801210a:	230a      	movs	r3, #10
 801210c:	6063      	str	r3, [r4, #4]
 801210e:	6863      	ldr	r3, [r4, #4]
 8012110:	4945      	ldr	r1, [pc, #276]	@ (8012228 <_scanf_i+0x1e4>)
 8012112:	6960      	ldr	r0, [r4, #20]
 8012114:	1ac9      	subs	r1, r1, r3
 8012116:	f000 f935 	bl	8012384 <__sccl>
 801211a:	f04f 0b00 	mov.w	fp, #0
 801211e:	68a3      	ldr	r3, [r4, #8]
 8012120:	6822      	ldr	r2, [r4, #0]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d03d      	beq.n	80121a2 <_scanf_i+0x15e>
 8012126:	6831      	ldr	r1, [r6, #0]
 8012128:	6960      	ldr	r0, [r4, #20]
 801212a:	f891 c000 	ldrb.w	ip, [r1]
 801212e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012132:	2800      	cmp	r0, #0
 8012134:	d035      	beq.n	80121a2 <_scanf_i+0x15e>
 8012136:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801213a:	d124      	bne.n	8012186 <_scanf_i+0x142>
 801213c:	0510      	lsls	r0, r2, #20
 801213e:	d522      	bpl.n	8012186 <_scanf_i+0x142>
 8012140:	f10b 0b01 	add.w	fp, fp, #1
 8012144:	f1b9 0f00 	cmp.w	r9, #0
 8012148:	d003      	beq.n	8012152 <_scanf_i+0x10e>
 801214a:	3301      	adds	r3, #1
 801214c:	f109 39ff 	add.w	r9, r9, #4294967295
 8012150:	60a3      	str	r3, [r4, #8]
 8012152:	6873      	ldr	r3, [r6, #4]
 8012154:	3b01      	subs	r3, #1
 8012156:	2b00      	cmp	r3, #0
 8012158:	6073      	str	r3, [r6, #4]
 801215a:	dd1b      	ble.n	8012194 <_scanf_i+0x150>
 801215c:	6833      	ldr	r3, [r6, #0]
 801215e:	3301      	adds	r3, #1
 8012160:	6033      	str	r3, [r6, #0]
 8012162:	68a3      	ldr	r3, [r4, #8]
 8012164:	3b01      	subs	r3, #1
 8012166:	60a3      	str	r3, [r4, #8]
 8012168:	e7d9      	b.n	801211e <_scanf_i+0xda>
 801216a:	f1bb 0f02 	cmp.w	fp, #2
 801216e:	d1ae      	bne.n	80120ce <_scanf_i+0x8a>
 8012170:	6822      	ldr	r2, [r4, #0]
 8012172:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012176:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801217a:	d1bf      	bne.n	80120fc <_scanf_i+0xb8>
 801217c:	2110      	movs	r1, #16
 801217e:	6061      	str	r1, [r4, #4]
 8012180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012184:	e7a2      	b.n	80120cc <_scanf_i+0x88>
 8012186:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801218a:	6022      	str	r2, [r4, #0]
 801218c:	780b      	ldrb	r3, [r1, #0]
 801218e:	f805 3b01 	strb.w	r3, [r5], #1
 8012192:	e7de      	b.n	8012152 <_scanf_i+0x10e>
 8012194:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012198:	4631      	mov	r1, r6
 801219a:	4650      	mov	r0, sl
 801219c:	4798      	blx	r3
 801219e:	2800      	cmp	r0, #0
 80121a0:	d0df      	beq.n	8012162 <_scanf_i+0x11e>
 80121a2:	6823      	ldr	r3, [r4, #0]
 80121a4:	05d9      	lsls	r1, r3, #23
 80121a6:	d50d      	bpl.n	80121c4 <_scanf_i+0x180>
 80121a8:	42bd      	cmp	r5, r7
 80121aa:	d909      	bls.n	80121c0 <_scanf_i+0x17c>
 80121ac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80121b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80121b4:	4632      	mov	r2, r6
 80121b6:	4650      	mov	r0, sl
 80121b8:	4798      	blx	r3
 80121ba:	f105 39ff 	add.w	r9, r5, #4294967295
 80121be:	464d      	mov	r5, r9
 80121c0:	42bd      	cmp	r5, r7
 80121c2:	d028      	beq.n	8012216 <_scanf_i+0x1d2>
 80121c4:	6822      	ldr	r2, [r4, #0]
 80121c6:	f012 0210 	ands.w	r2, r2, #16
 80121ca:	d113      	bne.n	80121f4 <_scanf_i+0x1b0>
 80121cc:	702a      	strb	r2, [r5, #0]
 80121ce:	6863      	ldr	r3, [r4, #4]
 80121d0:	9e01      	ldr	r6, [sp, #4]
 80121d2:	4639      	mov	r1, r7
 80121d4:	4650      	mov	r0, sl
 80121d6:	47b0      	blx	r6
 80121d8:	f8d8 3000 	ldr.w	r3, [r8]
 80121dc:	6821      	ldr	r1, [r4, #0]
 80121de:	1d1a      	adds	r2, r3, #4
 80121e0:	f8c8 2000 	str.w	r2, [r8]
 80121e4:	f011 0f20 	tst.w	r1, #32
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	d00f      	beq.n	801220c <_scanf_i+0x1c8>
 80121ec:	6018      	str	r0, [r3, #0]
 80121ee:	68e3      	ldr	r3, [r4, #12]
 80121f0:	3301      	adds	r3, #1
 80121f2:	60e3      	str	r3, [r4, #12]
 80121f4:	6923      	ldr	r3, [r4, #16]
 80121f6:	1bed      	subs	r5, r5, r7
 80121f8:	445d      	add	r5, fp
 80121fa:	442b      	add	r3, r5
 80121fc:	6123      	str	r3, [r4, #16]
 80121fe:	2000      	movs	r0, #0
 8012200:	b007      	add	sp, #28
 8012202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012206:	f04f 0b00 	mov.w	fp, #0
 801220a:	e7ca      	b.n	80121a2 <_scanf_i+0x15e>
 801220c:	07ca      	lsls	r2, r1, #31
 801220e:	bf4c      	ite	mi
 8012210:	8018      	strhmi	r0, [r3, #0]
 8012212:	6018      	strpl	r0, [r3, #0]
 8012214:	e7eb      	b.n	80121ee <_scanf_i+0x1aa>
 8012216:	2001      	movs	r0, #1
 8012218:	e7f2      	b.n	8012200 <_scanf_i+0x1bc>
 801221a:	bf00      	nop
 801221c:	08012cb8 	.word	0x08012cb8
 8012220:	0801192d 	.word	0x0801192d
 8012224:	0801263d 	.word	0x0801263d
 8012228:	0801310a 	.word	0x0801310a

0801222c <__sflush_r>:
 801222c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012234:	0716      	lsls	r6, r2, #28
 8012236:	4605      	mov	r5, r0
 8012238:	460c      	mov	r4, r1
 801223a:	d454      	bmi.n	80122e6 <__sflush_r+0xba>
 801223c:	684b      	ldr	r3, [r1, #4]
 801223e:	2b00      	cmp	r3, #0
 8012240:	dc02      	bgt.n	8012248 <__sflush_r+0x1c>
 8012242:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012244:	2b00      	cmp	r3, #0
 8012246:	dd48      	ble.n	80122da <__sflush_r+0xae>
 8012248:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801224a:	2e00      	cmp	r6, #0
 801224c:	d045      	beq.n	80122da <__sflush_r+0xae>
 801224e:	2300      	movs	r3, #0
 8012250:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012254:	682f      	ldr	r7, [r5, #0]
 8012256:	6a21      	ldr	r1, [r4, #32]
 8012258:	602b      	str	r3, [r5, #0]
 801225a:	d030      	beq.n	80122be <__sflush_r+0x92>
 801225c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801225e:	89a3      	ldrh	r3, [r4, #12]
 8012260:	0759      	lsls	r1, r3, #29
 8012262:	d505      	bpl.n	8012270 <__sflush_r+0x44>
 8012264:	6863      	ldr	r3, [r4, #4]
 8012266:	1ad2      	subs	r2, r2, r3
 8012268:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801226a:	b10b      	cbz	r3, 8012270 <__sflush_r+0x44>
 801226c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801226e:	1ad2      	subs	r2, r2, r3
 8012270:	2300      	movs	r3, #0
 8012272:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012274:	6a21      	ldr	r1, [r4, #32]
 8012276:	4628      	mov	r0, r5
 8012278:	47b0      	blx	r6
 801227a:	1c43      	adds	r3, r0, #1
 801227c:	89a3      	ldrh	r3, [r4, #12]
 801227e:	d106      	bne.n	801228e <__sflush_r+0x62>
 8012280:	6829      	ldr	r1, [r5, #0]
 8012282:	291d      	cmp	r1, #29
 8012284:	d82b      	bhi.n	80122de <__sflush_r+0xb2>
 8012286:	4a2a      	ldr	r2, [pc, #168]	@ (8012330 <__sflush_r+0x104>)
 8012288:	410a      	asrs	r2, r1
 801228a:	07d6      	lsls	r6, r2, #31
 801228c:	d427      	bmi.n	80122de <__sflush_r+0xb2>
 801228e:	2200      	movs	r2, #0
 8012290:	6062      	str	r2, [r4, #4]
 8012292:	04d9      	lsls	r1, r3, #19
 8012294:	6922      	ldr	r2, [r4, #16]
 8012296:	6022      	str	r2, [r4, #0]
 8012298:	d504      	bpl.n	80122a4 <__sflush_r+0x78>
 801229a:	1c42      	adds	r2, r0, #1
 801229c:	d101      	bne.n	80122a2 <__sflush_r+0x76>
 801229e:	682b      	ldr	r3, [r5, #0]
 80122a0:	b903      	cbnz	r3, 80122a4 <__sflush_r+0x78>
 80122a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80122a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80122a6:	602f      	str	r7, [r5, #0]
 80122a8:	b1b9      	cbz	r1, 80122da <__sflush_r+0xae>
 80122aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80122ae:	4299      	cmp	r1, r3
 80122b0:	d002      	beq.n	80122b8 <__sflush_r+0x8c>
 80122b2:	4628      	mov	r0, r5
 80122b4:	f7fe fa7a 	bl	80107ac <_free_r>
 80122b8:	2300      	movs	r3, #0
 80122ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80122bc:	e00d      	b.n	80122da <__sflush_r+0xae>
 80122be:	2301      	movs	r3, #1
 80122c0:	4628      	mov	r0, r5
 80122c2:	47b0      	blx	r6
 80122c4:	4602      	mov	r2, r0
 80122c6:	1c50      	adds	r0, r2, #1
 80122c8:	d1c9      	bne.n	801225e <__sflush_r+0x32>
 80122ca:	682b      	ldr	r3, [r5, #0]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d0c6      	beq.n	801225e <__sflush_r+0x32>
 80122d0:	2b1d      	cmp	r3, #29
 80122d2:	d001      	beq.n	80122d8 <__sflush_r+0xac>
 80122d4:	2b16      	cmp	r3, #22
 80122d6:	d11e      	bne.n	8012316 <__sflush_r+0xea>
 80122d8:	602f      	str	r7, [r5, #0]
 80122da:	2000      	movs	r0, #0
 80122dc:	e022      	b.n	8012324 <__sflush_r+0xf8>
 80122de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122e2:	b21b      	sxth	r3, r3
 80122e4:	e01b      	b.n	801231e <__sflush_r+0xf2>
 80122e6:	690f      	ldr	r7, [r1, #16]
 80122e8:	2f00      	cmp	r7, #0
 80122ea:	d0f6      	beq.n	80122da <__sflush_r+0xae>
 80122ec:	0793      	lsls	r3, r2, #30
 80122ee:	680e      	ldr	r6, [r1, #0]
 80122f0:	bf08      	it	eq
 80122f2:	694b      	ldreq	r3, [r1, #20]
 80122f4:	600f      	str	r7, [r1, #0]
 80122f6:	bf18      	it	ne
 80122f8:	2300      	movne	r3, #0
 80122fa:	eba6 0807 	sub.w	r8, r6, r7
 80122fe:	608b      	str	r3, [r1, #8]
 8012300:	f1b8 0f00 	cmp.w	r8, #0
 8012304:	dde9      	ble.n	80122da <__sflush_r+0xae>
 8012306:	6a21      	ldr	r1, [r4, #32]
 8012308:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801230a:	4643      	mov	r3, r8
 801230c:	463a      	mov	r2, r7
 801230e:	4628      	mov	r0, r5
 8012310:	47b0      	blx	r6
 8012312:	2800      	cmp	r0, #0
 8012314:	dc08      	bgt.n	8012328 <__sflush_r+0xfc>
 8012316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801231a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801231e:	81a3      	strh	r3, [r4, #12]
 8012320:	f04f 30ff 	mov.w	r0, #4294967295
 8012324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012328:	4407      	add	r7, r0
 801232a:	eba8 0800 	sub.w	r8, r8, r0
 801232e:	e7e7      	b.n	8012300 <__sflush_r+0xd4>
 8012330:	dfbffffe 	.word	0xdfbffffe

08012334 <_fflush_r>:
 8012334:	b538      	push	{r3, r4, r5, lr}
 8012336:	690b      	ldr	r3, [r1, #16]
 8012338:	4605      	mov	r5, r0
 801233a:	460c      	mov	r4, r1
 801233c:	b913      	cbnz	r3, 8012344 <_fflush_r+0x10>
 801233e:	2500      	movs	r5, #0
 8012340:	4628      	mov	r0, r5
 8012342:	bd38      	pop	{r3, r4, r5, pc}
 8012344:	b118      	cbz	r0, 801234e <_fflush_r+0x1a>
 8012346:	6a03      	ldr	r3, [r0, #32]
 8012348:	b90b      	cbnz	r3, 801234e <_fflush_r+0x1a>
 801234a:	f7fd fabd 	bl	800f8c8 <__sinit>
 801234e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d0f3      	beq.n	801233e <_fflush_r+0xa>
 8012356:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012358:	07d0      	lsls	r0, r2, #31
 801235a:	d404      	bmi.n	8012366 <_fflush_r+0x32>
 801235c:	0599      	lsls	r1, r3, #22
 801235e:	d402      	bmi.n	8012366 <_fflush_r+0x32>
 8012360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012362:	f7fd fc22 	bl	800fbaa <__retarget_lock_acquire_recursive>
 8012366:	4628      	mov	r0, r5
 8012368:	4621      	mov	r1, r4
 801236a:	f7ff ff5f 	bl	801222c <__sflush_r>
 801236e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012370:	07da      	lsls	r2, r3, #31
 8012372:	4605      	mov	r5, r0
 8012374:	d4e4      	bmi.n	8012340 <_fflush_r+0xc>
 8012376:	89a3      	ldrh	r3, [r4, #12]
 8012378:	059b      	lsls	r3, r3, #22
 801237a:	d4e1      	bmi.n	8012340 <_fflush_r+0xc>
 801237c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801237e:	f7fd fc15 	bl	800fbac <__retarget_lock_release_recursive>
 8012382:	e7dd      	b.n	8012340 <_fflush_r+0xc>

08012384 <__sccl>:
 8012384:	b570      	push	{r4, r5, r6, lr}
 8012386:	780b      	ldrb	r3, [r1, #0]
 8012388:	4604      	mov	r4, r0
 801238a:	2b5e      	cmp	r3, #94	@ 0x5e
 801238c:	bf0b      	itete	eq
 801238e:	784b      	ldrbeq	r3, [r1, #1]
 8012390:	1c4a      	addne	r2, r1, #1
 8012392:	1c8a      	addeq	r2, r1, #2
 8012394:	2100      	movne	r1, #0
 8012396:	bf08      	it	eq
 8012398:	2101      	moveq	r1, #1
 801239a:	3801      	subs	r0, #1
 801239c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80123a0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80123a4:	42a8      	cmp	r0, r5
 80123a6:	d1fb      	bne.n	80123a0 <__sccl+0x1c>
 80123a8:	b90b      	cbnz	r3, 80123ae <__sccl+0x2a>
 80123aa:	1e50      	subs	r0, r2, #1
 80123ac:	bd70      	pop	{r4, r5, r6, pc}
 80123ae:	f081 0101 	eor.w	r1, r1, #1
 80123b2:	54e1      	strb	r1, [r4, r3]
 80123b4:	4610      	mov	r0, r2
 80123b6:	4602      	mov	r2, r0
 80123b8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80123bc:	2d2d      	cmp	r5, #45	@ 0x2d
 80123be:	d005      	beq.n	80123cc <__sccl+0x48>
 80123c0:	2d5d      	cmp	r5, #93	@ 0x5d
 80123c2:	d016      	beq.n	80123f2 <__sccl+0x6e>
 80123c4:	2d00      	cmp	r5, #0
 80123c6:	d0f1      	beq.n	80123ac <__sccl+0x28>
 80123c8:	462b      	mov	r3, r5
 80123ca:	e7f2      	b.n	80123b2 <__sccl+0x2e>
 80123cc:	7846      	ldrb	r6, [r0, #1]
 80123ce:	2e5d      	cmp	r6, #93	@ 0x5d
 80123d0:	d0fa      	beq.n	80123c8 <__sccl+0x44>
 80123d2:	42b3      	cmp	r3, r6
 80123d4:	dcf8      	bgt.n	80123c8 <__sccl+0x44>
 80123d6:	3002      	adds	r0, #2
 80123d8:	461a      	mov	r2, r3
 80123da:	3201      	adds	r2, #1
 80123dc:	4296      	cmp	r6, r2
 80123de:	54a1      	strb	r1, [r4, r2]
 80123e0:	dcfb      	bgt.n	80123da <__sccl+0x56>
 80123e2:	1af2      	subs	r2, r6, r3
 80123e4:	3a01      	subs	r2, #1
 80123e6:	1c5d      	adds	r5, r3, #1
 80123e8:	42b3      	cmp	r3, r6
 80123ea:	bfa8      	it	ge
 80123ec:	2200      	movge	r2, #0
 80123ee:	18ab      	adds	r3, r5, r2
 80123f0:	e7e1      	b.n	80123b6 <__sccl+0x32>
 80123f2:	4610      	mov	r0, r2
 80123f4:	e7da      	b.n	80123ac <__sccl+0x28>

080123f6 <__submore>:
 80123f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123fa:	460c      	mov	r4, r1
 80123fc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80123fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012402:	4299      	cmp	r1, r3
 8012404:	d11d      	bne.n	8012442 <__submore+0x4c>
 8012406:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801240a:	f7fb fd4b 	bl	800dea4 <_malloc_r>
 801240e:	b918      	cbnz	r0, 8012418 <__submore+0x22>
 8012410:	f04f 30ff 	mov.w	r0, #4294967295
 8012414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012418:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801241c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801241e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012422:	6360      	str	r0, [r4, #52]	@ 0x34
 8012424:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012428:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801242c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012430:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012434:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012438:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801243c:	6020      	str	r0, [r4, #0]
 801243e:	2000      	movs	r0, #0
 8012440:	e7e8      	b.n	8012414 <__submore+0x1e>
 8012442:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012444:	0077      	lsls	r7, r6, #1
 8012446:	463a      	mov	r2, r7
 8012448:	f000 f85c 	bl	8012504 <_realloc_r>
 801244c:	4605      	mov	r5, r0
 801244e:	2800      	cmp	r0, #0
 8012450:	d0de      	beq.n	8012410 <__submore+0x1a>
 8012452:	eb00 0806 	add.w	r8, r0, r6
 8012456:	4601      	mov	r1, r0
 8012458:	4632      	mov	r2, r6
 801245a:	4640      	mov	r0, r8
 801245c:	f7fd fba7 	bl	800fbae <memcpy>
 8012460:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012464:	f8c4 8000 	str.w	r8, [r4]
 8012468:	e7e9      	b.n	801243e <__submore+0x48>

0801246a <memmove>:
 801246a:	4288      	cmp	r0, r1
 801246c:	b510      	push	{r4, lr}
 801246e:	eb01 0402 	add.w	r4, r1, r2
 8012472:	d902      	bls.n	801247a <memmove+0x10>
 8012474:	4284      	cmp	r4, r0
 8012476:	4623      	mov	r3, r4
 8012478:	d807      	bhi.n	801248a <memmove+0x20>
 801247a:	1e43      	subs	r3, r0, #1
 801247c:	42a1      	cmp	r1, r4
 801247e:	d008      	beq.n	8012492 <memmove+0x28>
 8012480:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012484:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012488:	e7f8      	b.n	801247c <memmove+0x12>
 801248a:	4402      	add	r2, r0
 801248c:	4601      	mov	r1, r0
 801248e:	428a      	cmp	r2, r1
 8012490:	d100      	bne.n	8012494 <memmove+0x2a>
 8012492:	bd10      	pop	{r4, pc}
 8012494:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012498:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801249c:	e7f7      	b.n	801248e <memmove+0x24>
	...

080124a0 <__assert_func>:
 80124a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80124a2:	4614      	mov	r4, r2
 80124a4:	461a      	mov	r2, r3
 80124a6:	4b09      	ldr	r3, [pc, #36]	@ (80124cc <__assert_func+0x2c>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4605      	mov	r5, r0
 80124ac:	68d8      	ldr	r0, [r3, #12]
 80124ae:	b954      	cbnz	r4, 80124c6 <__assert_func+0x26>
 80124b0:	4b07      	ldr	r3, [pc, #28]	@ (80124d0 <__assert_func+0x30>)
 80124b2:	461c      	mov	r4, r3
 80124b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80124b8:	9100      	str	r1, [sp, #0]
 80124ba:	462b      	mov	r3, r5
 80124bc:	4905      	ldr	r1, [pc, #20]	@ (80124d4 <__assert_func+0x34>)
 80124be:	f000 f8bf 	bl	8012640 <fiprintf>
 80124c2:	f000 f8cf 	bl	8012664 <abort>
 80124c6:	4b04      	ldr	r3, [pc, #16]	@ (80124d8 <__assert_func+0x38>)
 80124c8:	e7f4      	b.n	80124b4 <__assert_func+0x14>
 80124ca:	bf00      	nop
 80124cc:	240001e4 	.word	0x240001e4
 80124d0:	08013150 	.word	0x08013150
 80124d4:	08013122 	.word	0x08013122
 80124d8:	08013115 	.word	0x08013115

080124dc <_calloc_r>:
 80124dc:	b570      	push	{r4, r5, r6, lr}
 80124de:	fba1 5402 	umull	r5, r4, r1, r2
 80124e2:	b93c      	cbnz	r4, 80124f4 <_calloc_r+0x18>
 80124e4:	4629      	mov	r1, r5
 80124e6:	f7fb fcdd 	bl	800dea4 <_malloc_r>
 80124ea:	4606      	mov	r6, r0
 80124ec:	b928      	cbnz	r0, 80124fa <_calloc_r+0x1e>
 80124ee:	2600      	movs	r6, #0
 80124f0:	4630      	mov	r0, r6
 80124f2:	bd70      	pop	{r4, r5, r6, pc}
 80124f4:	220c      	movs	r2, #12
 80124f6:	6002      	str	r2, [r0, #0]
 80124f8:	e7f9      	b.n	80124ee <_calloc_r+0x12>
 80124fa:	462a      	mov	r2, r5
 80124fc:	4621      	mov	r1, r4
 80124fe:	f7fd faa8 	bl	800fa52 <memset>
 8012502:	e7f5      	b.n	80124f0 <_calloc_r+0x14>

08012504 <_realloc_r>:
 8012504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012508:	4680      	mov	r8, r0
 801250a:	4615      	mov	r5, r2
 801250c:	460c      	mov	r4, r1
 801250e:	b921      	cbnz	r1, 801251a <_realloc_r+0x16>
 8012510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012514:	4611      	mov	r1, r2
 8012516:	f7fb bcc5 	b.w	800dea4 <_malloc_r>
 801251a:	b92a      	cbnz	r2, 8012528 <_realloc_r+0x24>
 801251c:	f7fe f946 	bl	80107ac <_free_r>
 8012520:	2400      	movs	r4, #0
 8012522:	4620      	mov	r0, r4
 8012524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012528:	f000 f8a3 	bl	8012672 <_malloc_usable_size_r>
 801252c:	4285      	cmp	r5, r0
 801252e:	4606      	mov	r6, r0
 8012530:	d802      	bhi.n	8012538 <_realloc_r+0x34>
 8012532:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012536:	d8f4      	bhi.n	8012522 <_realloc_r+0x1e>
 8012538:	4629      	mov	r1, r5
 801253a:	4640      	mov	r0, r8
 801253c:	f7fb fcb2 	bl	800dea4 <_malloc_r>
 8012540:	4607      	mov	r7, r0
 8012542:	2800      	cmp	r0, #0
 8012544:	d0ec      	beq.n	8012520 <_realloc_r+0x1c>
 8012546:	42b5      	cmp	r5, r6
 8012548:	462a      	mov	r2, r5
 801254a:	4621      	mov	r1, r4
 801254c:	bf28      	it	cs
 801254e:	4632      	movcs	r2, r6
 8012550:	f7fd fb2d 	bl	800fbae <memcpy>
 8012554:	4621      	mov	r1, r4
 8012556:	4640      	mov	r0, r8
 8012558:	f7fe f928 	bl	80107ac <_free_r>
 801255c:	463c      	mov	r4, r7
 801255e:	e7e0      	b.n	8012522 <_realloc_r+0x1e>

08012560 <_strtoul_l.constprop.0>:
 8012560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012564:	4e34      	ldr	r6, [pc, #208]	@ (8012638 <_strtoul_l.constprop.0+0xd8>)
 8012566:	4686      	mov	lr, r0
 8012568:	460d      	mov	r5, r1
 801256a:	4628      	mov	r0, r5
 801256c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012570:	5d37      	ldrb	r7, [r6, r4]
 8012572:	f017 0708 	ands.w	r7, r7, #8
 8012576:	d1f8      	bne.n	801256a <_strtoul_l.constprop.0+0xa>
 8012578:	2c2d      	cmp	r4, #45	@ 0x2d
 801257a:	d12f      	bne.n	80125dc <_strtoul_l.constprop.0+0x7c>
 801257c:	782c      	ldrb	r4, [r5, #0]
 801257e:	2701      	movs	r7, #1
 8012580:	1c85      	adds	r5, r0, #2
 8012582:	f033 0010 	bics.w	r0, r3, #16
 8012586:	d109      	bne.n	801259c <_strtoul_l.constprop.0+0x3c>
 8012588:	2c30      	cmp	r4, #48	@ 0x30
 801258a:	d12c      	bne.n	80125e6 <_strtoul_l.constprop.0+0x86>
 801258c:	7828      	ldrb	r0, [r5, #0]
 801258e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012592:	2858      	cmp	r0, #88	@ 0x58
 8012594:	d127      	bne.n	80125e6 <_strtoul_l.constprop.0+0x86>
 8012596:	786c      	ldrb	r4, [r5, #1]
 8012598:	2310      	movs	r3, #16
 801259a:	3502      	adds	r5, #2
 801259c:	f04f 38ff 	mov.w	r8, #4294967295
 80125a0:	2600      	movs	r6, #0
 80125a2:	fbb8 f8f3 	udiv	r8, r8, r3
 80125a6:	fb03 f908 	mul.w	r9, r3, r8
 80125aa:	ea6f 0909 	mvn.w	r9, r9
 80125ae:	4630      	mov	r0, r6
 80125b0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80125b4:	f1bc 0f09 	cmp.w	ip, #9
 80125b8:	d81c      	bhi.n	80125f4 <_strtoul_l.constprop.0+0x94>
 80125ba:	4664      	mov	r4, ip
 80125bc:	42a3      	cmp	r3, r4
 80125be:	dd2a      	ble.n	8012616 <_strtoul_l.constprop.0+0xb6>
 80125c0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80125c4:	d007      	beq.n	80125d6 <_strtoul_l.constprop.0+0x76>
 80125c6:	4580      	cmp	r8, r0
 80125c8:	d322      	bcc.n	8012610 <_strtoul_l.constprop.0+0xb0>
 80125ca:	d101      	bne.n	80125d0 <_strtoul_l.constprop.0+0x70>
 80125cc:	45a1      	cmp	r9, r4
 80125ce:	db1f      	blt.n	8012610 <_strtoul_l.constprop.0+0xb0>
 80125d0:	fb00 4003 	mla	r0, r0, r3, r4
 80125d4:	2601      	movs	r6, #1
 80125d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80125da:	e7e9      	b.n	80125b0 <_strtoul_l.constprop.0+0x50>
 80125dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80125de:	bf04      	itt	eq
 80125e0:	782c      	ldrbeq	r4, [r5, #0]
 80125e2:	1c85      	addeq	r5, r0, #2
 80125e4:	e7cd      	b.n	8012582 <_strtoul_l.constprop.0+0x22>
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d1d8      	bne.n	801259c <_strtoul_l.constprop.0+0x3c>
 80125ea:	2c30      	cmp	r4, #48	@ 0x30
 80125ec:	bf0c      	ite	eq
 80125ee:	2308      	moveq	r3, #8
 80125f0:	230a      	movne	r3, #10
 80125f2:	e7d3      	b.n	801259c <_strtoul_l.constprop.0+0x3c>
 80125f4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80125f8:	f1bc 0f19 	cmp.w	ip, #25
 80125fc:	d801      	bhi.n	8012602 <_strtoul_l.constprop.0+0xa2>
 80125fe:	3c37      	subs	r4, #55	@ 0x37
 8012600:	e7dc      	b.n	80125bc <_strtoul_l.constprop.0+0x5c>
 8012602:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012606:	f1bc 0f19 	cmp.w	ip, #25
 801260a:	d804      	bhi.n	8012616 <_strtoul_l.constprop.0+0xb6>
 801260c:	3c57      	subs	r4, #87	@ 0x57
 801260e:	e7d5      	b.n	80125bc <_strtoul_l.constprop.0+0x5c>
 8012610:	f04f 36ff 	mov.w	r6, #4294967295
 8012614:	e7df      	b.n	80125d6 <_strtoul_l.constprop.0+0x76>
 8012616:	1c73      	adds	r3, r6, #1
 8012618:	d106      	bne.n	8012628 <_strtoul_l.constprop.0+0xc8>
 801261a:	2322      	movs	r3, #34	@ 0x22
 801261c:	f8ce 3000 	str.w	r3, [lr]
 8012620:	4630      	mov	r0, r6
 8012622:	b932      	cbnz	r2, 8012632 <_strtoul_l.constprop.0+0xd2>
 8012624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012628:	b107      	cbz	r7, 801262c <_strtoul_l.constprop.0+0xcc>
 801262a:	4240      	negs	r0, r0
 801262c:	2a00      	cmp	r2, #0
 801262e:	d0f9      	beq.n	8012624 <_strtoul_l.constprop.0+0xc4>
 8012630:	b106      	cbz	r6, 8012634 <_strtoul_l.constprop.0+0xd4>
 8012632:	1e69      	subs	r1, r5, #1
 8012634:	6011      	str	r1, [r2, #0]
 8012636:	e7f5      	b.n	8012624 <_strtoul_l.constprop.0+0xc4>
 8012638:	08012fe9 	.word	0x08012fe9

0801263c <_strtoul_r>:
 801263c:	f7ff bf90 	b.w	8012560 <_strtoul_l.constprop.0>

08012640 <fiprintf>:
 8012640:	b40e      	push	{r1, r2, r3}
 8012642:	b503      	push	{r0, r1, lr}
 8012644:	4601      	mov	r1, r0
 8012646:	ab03      	add	r3, sp, #12
 8012648:	4805      	ldr	r0, [pc, #20]	@ (8012660 <fiprintf+0x20>)
 801264a:	f853 2b04 	ldr.w	r2, [r3], #4
 801264e:	6800      	ldr	r0, [r0, #0]
 8012650:	9301      	str	r3, [sp, #4]
 8012652:	f000 f83f 	bl	80126d4 <_vfiprintf_r>
 8012656:	b002      	add	sp, #8
 8012658:	f85d eb04 	ldr.w	lr, [sp], #4
 801265c:	b003      	add	sp, #12
 801265e:	4770      	bx	lr
 8012660:	240001e4 	.word	0x240001e4

08012664 <abort>:
 8012664:	b508      	push	{r3, lr}
 8012666:	2006      	movs	r0, #6
 8012668:	f000 fa08 	bl	8012a7c <raise>
 801266c:	2001      	movs	r0, #1
 801266e:	f7ef f9b3 	bl	80019d8 <_exit>

08012672 <_malloc_usable_size_r>:
 8012672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012676:	1f18      	subs	r0, r3, #4
 8012678:	2b00      	cmp	r3, #0
 801267a:	bfbc      	itt	lt
 801267c:	580b      	ldrlt	r3, [r1, r0]
 801267e:	18c0      	addlt	r0, r0, r3
 8012680:	4770      	bx	lr

08012682 <__sfputc_r>:
 8012682:	6893      	ldr	r3, [r2, #8]
 8012684:	3b01      	subs	r3, #1
 8012686:	2b00      	cmp	r3, #0
 8012688:	b410      	push	{r4}
 801268a:	6093      	str	r3, [r2, #8]
 801268c:	da08      	bge.n	80126a0 <__sfputc_r+0x1e>
 801268e:	6994      	ldr	r4, [r2, #24]
 8012690:	42a3      	cmp	r3, r4
 8012692:	db01      	blt.n	8012698 <__sfputc_r+0x16>
 8012694:	290a      	cmp	r1, #10
 8012696:	d103      	bne.n	80126a0 <__sfputc_r+0x1e>
 8012698:	f85d 4b04 	ldr.w	r4, [sp], #4
 801269c:	f000 b932 	b.w	8012904 <__swbuf_r>
 80126a0:	6813      	ldr	r3, [r2, #0]
 80126a2:	1c58      	adds	r0, r3, #1
 80126a4:	6010      	str	r0, [r2, #0]
 80126a6:	7019      	strb	r1, [r3, #0]
 80126a8:	4608      	mov	r0, r1
 80126aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126ae:	4770      	bx	lr

080126b0 <__sfputs_r>:
 80126b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126b2:	4606      	mov	r6, r0
 80126b4:	460f      	mov	r7, r1
 80126b6:	4614      	mov	r4, r2
 80126b8:	18d5      	adds	r5, r2, r3
 80126ba:	42ac      	cmp	r4, r5
 80126bc:	d101      	bne.n	80126c2 <__sfputs_r+0x12>
 80126be:	2000      	movs	r0, #0
 80126c0:	e007      	b.n	80126d2 <__sfputs_r+0x22>
 80126c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126c6:	463a      	mov	r2, r7
 80126c8:	4630      	mov	r0, r6
 80126ca:	f7ff ffda 	bl	8012682 <__sfputc_r>
 80126ce:	1c43      	adds	r3, r0, #1
 80126d0:	d1f3      	bne.n	80126ba <__sfputs_r+0xa>
 80126d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080126d4 <_vfiprintf_r>:
 80126d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d8:	460d      	mov	r5, r1
 80126da:	b09d      	sub	sp, #116	@ 0x74
 80126dc:	4614      	mov	r4, r2
 80126de:	4698      	mov	r8, r3
 80126e0:	4606      	mov	r6, r0
 80126e2:	b118      	cbz	r0, 80126ec <_vfiprintf_r+0x18>
 80126e4:	6a03      	ldr	r3, [r0, #32]
 80126e6:	b90b      	cbnz	r3, 80126ec <_vfiprintf_r+0x18>
 80126e8:	f7fd f8ee 	bl	800f8c8 <__sinit>
 80126ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80126ee:	07d9      	lsls	r1, r3, #31
 80126f0:	d405      	bmi.n	80126fe <_vfiprintf_r+0x2a>
 80126f2:	89ab      	ldrh	r3, [r5, #12]
 80126f4:	059a      	lsls	r2, r3, #22
 80126f6:	d402      	bmi.n	80126fe <_vfiprintf_r+0x2a>
 80126f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80126fa:	f7fd fa56 	bl	800fbaa <__retarget_lock_acquire_recursive>
 80126fe:	89ab      	ldrh	r3, [r5, #12]
 8012700:	071b      	lsls	r3, r3, #28
 8012702:	d501      	bpl.n	8012708 <_vfiprintf_r+0x34>
 8012704:	692b      	ldr	r3, [r5, #16]
 8012706:	b99b      	cbnz	r3, 8012730 <_vfiprintf_r+0x5c>
 8012708:	4629      	mov	r1, r5
 801270a:	4630      	mov	r0, r6
 801270c:	f000 f938 	bl	8012980 <__swsetup_r>
 8012710:	b170      	cbz	r0, 8012730 <_vfiprintf_r+0x5c>
 8012712:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012714:	07dc      	lsls	r4, r3, #31
 8012716:	d504      	bpl.n	8012722 <_vfiprintf_r+0x4e>
 8012718:	f04f 30ff 	mov.w	r0, #4294967295
 801271c:	b01d      	add	sp, #116	@ 0x74
 801271e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012722:	89ab      	ldrh	r3, [r5, #12]
 8012724:	0598      	lsls	r0, r3, #22
 8012726:	d4f7      	bmi.n	8012718 <_vfiprintf_r+0x44>
 8012728:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801272a:	f7fd fa3f 	bl	800fbac <__retarget_lock_release_recursive>
 801272e:	e7f3      	b.n	8012718 <_vfiprintf_r+0x44>
 8012730:	2300      	movs	r3, #0
 8012732:	9309      	str	r3, [sp, #36]	@ 0x24
 8012734:	2320      	movs	r3, #32
 8012736:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801273a:	f8cd 800c 	str.w	r8, [sp, #12]
 801273e:	2330      	movs	r3, #48	@ 0x30
 8012740:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80128f0 <_vfiprintf_r+0x21c>
 8012744:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012748:	f04f 0901 	mov.w	r9, #1
 801274c:	4623      	mov	r3, r4
 801274e:	469a      	mov	sl, r3
 8012750:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012754:	b10a      	cbz	r2, 801275a <_vfiprintf_r+0x86>
 8012756:	2a25      	cmp	r2, #37	@ 0x25
 8012758:	d1f9      	bne.n	801274e <_vfiprintf_r+0x7a>
 801275a:	ebba 0b04 	subs.w	fp, sl, r4
 801275e:	d00b      	beq.n	8012778 <_vfiprintf_r+0xa4>
 8012760:	465b      	mov	r3, fp
 8012762:	4622      	mov	r2, r4
 8012764:	4629      	mov	r1, r5
 8012766:	4630      	mov	r0, r6
 8012768:	f7ff ffa2 	bl	80126b0 <__sfputs_r>
 801276c:	3001      	adds	r0, #1
 801276e:	f000 80a7 	beq.w	80128c0 <_vfiprintf_r+0x1ec>
 8012772:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012774:	445a      	add	r2, fp
 8012776:	9209      	str	r2, [sp, #36]	@ 0x24
 8012778:	f89a 3000 	ldrb.w	r3, [sl]
 801277c:	2b00      	cmp	r3, #0
 801277e:	f000 809f 	beq.w	80128c0 <_vfiprintf_r+0x1ec>
 8012782:	2300      	movs	r3, #0
 8012784:	f04f 32ff 	mov.w	r2, #4294967295
 8012788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801278c:	f10a 0a01 	add.w	sl, sl, #1
 8012790:	9304      	str	r3, [sp, #16]
 8012792:	9307      	str	r3, [sp, #28]
 8012794:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012798:	931a      	str	r3, [sp, #104]	@ 0x68
 801279a:	4654      	mov	r4, sl
 801279c:	2205      	movs	r2, #5
 801279e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127a2:	4853      	ldr	r0, [pc, #332]	@ (80128f0 <_vfiprintf_r+0x21c>)
 80127a4:	f7ed fdb4 	bl	8000310 <memchr>
 80127a8:	9a04      	ldr	r2, [sp, #16]
 80127aa:	b9d8      	cbnz	r0, 80127e4 <_vfiprintf_r+0x110>
 80127ac:	06d1      	lsls	r1, r2, #27
 80127ae:	bf44      	itt	mi
 80127b0:	2320      	movmi	r3, #32
 80127b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80127b6:	0713      	lsls	r3, r2, #28
 80127b8:	bf44      	itt	mi
 80127ba:	232b      	movmi	r3, #43	@ 0x2b
 80127bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80127c0:	f89a 3000 	ldrb.w	r3, [sl]
 80127c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80127c6:	d015      	beq.n	80127f4 <_vfiprintf_r+0x120>
 80127c8:	9a07      	ldr	r2, [sp, #28]
 80127ca:	4654      	mov	r4, sl
 80127cc:	2000      	movs	r0, #0
 80127ce:	f04f 0c0a 	mov.w	ip, #10
 80127d2:	4621      	mov	r1, r4
 80127d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127d8:	3b30      	subs	r3, #48	@ 0x30
 80127da:	2b09      	cmp	r3, #9
 80127dc:	d94b      	bls.n	8012876 <_vfiprintf_r+0x1a2>
 80127de:	b1b0      	cbz	r0, 801280e <_vfiprintf_r+0x13a>
 80127e0:	9207      	str	r2, [sp, #28]
 80127e2:	e014      	b.n	801280e <_vfiprintf_r+0x13a>
 80127e4:	eba0 0308 	sub.w	r3, r0, r8
 80127e8:	fa09 f303 	lsl.w	r3, r9, r3
 80127ec:	4313      	orrs	r3, r2
 80127ee:	9304      	str	r3, [sp, #16]
 80127f0:	46a2      	mov	sl, r4
 80127f2:	e7d2      	b.n	801279a <_vfiprintf_r+0xc6>
 80127f4:	9b03      	ldr	r3, [sp, #12]
 80127f6:	1d19      	adds	r1, r3, #4
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	9103      	str	r1, [sp, #12]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	bfbb      	ittet	lt
 8012800:	425b      	neglt	r3, r3
 8012802:	f042 0202 	orrlt.w	r2, r2, #2
 8012806:	9307      	strge	r3, [sp, #28]
 8012808:	9307      	strlt	r3, [sp, #28]
 801280a:	bfb8      	it	lt
 801280c:	9204      	strlt	r2, [sp, #16]
 801280e:	7823      	ldrb	r3, [r4, #0]
 8012810:	2b2e      	cmp	r3, #46	@ 0x2e
 8012812:	d10a      	bne.n	801282a <_vfiprintf_r+0x156>
 8012814:	7863      	ldrb	r3, [r4, #1]
 8012816:	2b2a      	cmp	r3, #42	@ 0x2a
 8012818:	d132      	bne.n	8012880 <_vfiprintf_r+0x1ac>
 801281a:	9b03      	ldr	r3, [sp, #12]
 801281c:	1d1a      	adds	r2, r3, #4
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	9203      	str	r2, [sp, #12]
 8012822:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012826:	3402      	adds	r4, #2
 8012828:	9305      	str	r3, [sp, #20]
 801282a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012900 <_vfiprintf_r+0x22c>
 801282e:	7821      	ldrb	r1, [r4, #0]
 8012830:	2203      	movs	r2, #3
 8012832:	4650      	mov	r0, sl
 8012834:	f7ed fd6c 	bl	8000310 <memchr>
 8012838:	b138      	cbz	r0, 801284a <_vfiprintf_r+0x176>
 801283a:	9b04      	ldr	r3, [sp, #16]
 801283c:	eba0 000a 	sub.w	r0, r0, sl
 8012840:	2240      	movs	r2, #64	@ 0x40
 8012842:	4082      	lsls	r2, r0
 8012844:	4313      	orrs	r3, r2
 8012846:	3401      	adds	r4, #1
 8012848:	9304      	str	r3, [sp, #16]
 801284a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801284e:	4829      	ldr	r0, [pc, #164]	@ (80128f4 <_vfiprintf_r+0x220>)
 8012850:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012854:	2206      	movs	r2, #6
 8012856:	f7ed fd5b 	bl	8000310 <memchr>
 801285a:	2800      	cmp	r0, #0
 801285c:	d03f      	beq.n	80128de <_vfiprintf_r+0x20a>
 801285e:	4b26      	ldr	r3, [pc, #152]	@ (80128f8 <_vfiprintf_r+0x224>)
 8012860:	bb1b      	cbnz	r3, 80128aa <_vfiprintf_r+0x1d6>
 8012862:	9b03      	ldr	r3, [sp, #12]
 8012864:	3307      	adds	r3, #7
 8012866:	f023 0307 	bic.w	r3, r3, #7
 801286a:	3308      	adds	r3, #8
 801286c:	9303      	str	r3, [sp, #12]
 801286e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012870:	443b      	add	r3, r7
 8012872:	9309      	str	r3, [sp, #36]	@ 0x24
 8012874:	e76a      	b.n	801274c <_vfiprintf_r+0x78>
 8012876:	fb0c 3202 	mla	r2, ip, r2, r3
 801287a:	460c      	mov	r4, r1
 801287c:	2001      	movs	r0, #1
 801287e:	e7a8      	b.n	80127d2 <_vfiprintf_r+0xfe>
 8012880:	2300      	movs	r3, #0
 8012882:	3401      	adds	r4, #1
 8012884:	9305      	str	r3, [sp, #20]
 8012886:	4619      	mov	r1, r3
 8012888:	f04f 0c0a 	mov.w	ip, #10
 801288c:	4620      	mov	r0, r4
 801288e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012892:	3a30      	subs	r2, #48	@ 0x30
 8012894:	2a09      	cmp	r2, #9
 8012896:	d903      	bls.n	80128a0 <_vfiprintf_r+0x1cc>
 8012898:	2b00      	cmp	r3, #0
 801289a:	d0c6      	beq.n	801282a <_vfiprintf_r+0x156>
 801289c:	9105      	str	r1, [sp, #20]
 801289e:	e7c4      	b.n	801282a <_vfiprintf_r+0x156>
 80128a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80128a4:	4604      	mov	r4, r0
 80128a6:	2301      	movs	r3, #1
 80128a8:	e7f0      	b.n	801288c <_vfiprintf_r+0x1b8>
 80128aa:	ab03      	add	r3, sp, #12
 80128ac:	9300      	str	r3, [sp, #0]
 80128ae:	462a      	mov	r2, r5
 80128b0:	4b12      	ldr	r3, [pc, #72]	@ (80128fc <_vfiprintf_r+0x228>)
 80128b2:	a904      	add	r1, sp, #16
 80128b4:	4630      	mov	r0, r6
 80128b6:	f7fc f9c7 	bl	800ec48 <_printf_float>
 80128ba:	4607      	mov	r7, r0
 80128bc:	1c78      	adds	r0, r7, #1
 80128be:	d1d6      	bne.n	801286e <_vfiprintf_r+0x19a>
 80128c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80128c2:	07d9      	lsls	r1, r3, #31
 80128c4:	d405      	bmi.n	80128d2 <_vfiprintf_r+0x1fe>
 80128c6:	89ab      	ldrh	r3, [r5, #12]
 80128c8:	059a      	lsls	r2, r3, #22
 80128ca:	d402      	bmi.n	80128d2 <_vfiprintf_r+0x1fe>
 80128cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80128ce:	f7fd f96d 	bl	800fbac <__retarget_lock_release_recursive>
 80128d2:	89ab      	ldrh	r3, [r5, #12]
 80128d4:	065b      	lsls	r3, r3, #25
 80128d6:	f53f af1f 	bmi.w	8012718 <_vfiprintf_r+0x44>
 80128da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128dc:	e71e      	b.n	801271c <_vfiprintf_r+0x48>
 80128de:	ab03      	add	r3, sp, #12
 80128e0:	9300      	str	r3, [sp, #0]
 80128e2:	462a      	mov	r2, r5
 80128e4:	4b05      	ldr	r3, [pc, #20]	@ (80128fc <_vfiprintf_r+0x228>)
 80128e6:	a904      	add	r1, sp, #16
 80128e8:	4630      	mov	r0, r6
 80128ea:	f7fc fc35 	bl	800f158 <_printf_i>
 80128ee:	e7e4      	b.n	80128ba <_vfiprintf_r+0x1e6>
 80128f0:	080130e9 	.word	0x080130e9
 80128f4:	080130f3 	.word	0x080130f3
 80128f8:	0800ec49 	.word	0x0800ec49
 80128fc:	080126b1 	.word	0x080126b1
 8012900:	080130ef 	.word	0x080130ef

08012904 <__swbuf_r>:
 8012904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012906:	460e      	mov	r6, r1
 8012908:	4614      	mov	r4, r2
 801290a:	4605      	mov	r5, r0
 801290c:	b118      	cbz	r0, 8012916 <__swbuf_r+0x12>
 801290e:	6a03      	ldr	r3, [r0, #32]
 8012910:	b90b      	cbnz	r3, 8012916 <__swbuf_r+0x12>
 8012912:	f7fc ffd9 	bl	800f8c8 <__sinit>
 8012916:	69a3      	ldr	r3, [r4, #24]
 8012918:	60a3      	str	r3, [r4, #8]
 801291a:	89a3      	ldrh	r3, [r4, #12]
 801291c:	071a      	lsls	r2, r3, #28
 801291e:	d501      	bpl.n	8012924 <__swbuf_r+0x20>
 8012920:	6923      	ldr	r3, [r4, #16]
 8012922:	b943      	cbnz	r3, 8012936 <__swbuf_r+0x32>
 8012924:	4621      	mov	r1, r4
 8012926:	4628      	mov	r0, r5
 8012928:	f000 f82a 	bl	8012980 <__swsetup_r>
 801292c:	b118      	cbz	r0, 8012936 <__swbuf_r+0x32>
 801292e:	f04f 37ff 	mov.w	r7, #4294967295
 8012932:	4638      	mov	r0, r7
 8012934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012936:	6823      	ldr	r3, [r4, #0]
 8012938:	6922      	ldr	r2, [r4, #16]
 801293a:	1a98      	subs	r0, r3, r2
 801293c:	6963      	ldr	r3, [r4, #20]
 801293e:	b2f6      	uxtb	r6, r6
 8012940:	4283      	cmp	r3, r0
 8012942:	4637      	mov	r7, r6
 8012944:	dc05      	bgt.n	8012952 <__swbuf_r+0x4e>
 8012946:	4621      	mov	r1, r4
 8012948:	4628      	mov	r0, r5
 801294a:	f7ff fcf3 	bl	8012334 <_fflush_r>
 801294e:	2800      	cmp	r0, #0
 8012950:	d1ed      	bne.n	801292e <__swbuf_r+0x2a>
 8012952:	68a3      	ldr	r3, [r4, #8]
 8012954:	3b01      	subs	r3, #1
 8012956:	60a3      	str	r3, [r4, #8]
 8012958:	6823      	ldr	r3, [r4, #0]
 801295a:	1c5a      	adds	r2, r3, #1
 801295c:	6022      	str	r2, [r4, #0]
 801295e:	701e      	strb	r6, [r3, #0]
 8012960:	6962      	ldr	r2, [r4, #20]
 8012962:	1c43      	adds	r3, r0, #1
 8012964:	429a      	cmp	r2, r3
 8012966:	d004      	beq.n	8012972 <__swbuf_r+0x6e>
 8012968:	89a3      	ldrh	r3, [r4, #12]
 801296a:	07db      	lsls	r3, r3, #31
 801296c:	d5e1      	bpl.n	8012932 <__swbuf_r+0x2e>
 801296e:	2e0a      	cmp	r6, #10
 8012970:	d1df      	bne.n	8012932 <__swbuf_r+0x2e>
 8012972:	4621      	mov	r1, r4
 8012974:	4628      	mov	r0, r5
 8012976:	f7ff fcdd 	bl	8012334 <_fflush_r>
 801297a:	2800      	cmp	r0, #0
 801297c:	d0d9      	beq.n	8012932 <__swbuf_r+0x2e>
 801297e:	e7d6      	b.n	801292e <__swbuf_r+0x2a>

08012980 <__swsetup_r>:
 8012980:	b538      	push	{r3, r4, r5, lr}
 8012982:	4b29      	ldr	r3, [pc, #164]	@ (8012a28 <__swsetup_r+0xa8>)
 8012984:	4605      	mov	r5, r0
 8012986:	6818      	ldr	r0, [r3, #0]
 8012988:	460c      	mov	r4, r1
 801298a:	b118      	cbz	r0, 8012994 <__swsetup_r+0x14>
 801298c:	6a03      	ldr	r3, [r0, #32]
 801298e:	b90b      	cbnz	r3, 8012994 <__swsetup_r+0x14>
 8012990:	f7fc ff9a 	bl	800f8c8 <__sinit>
 8012994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012998:	0719      	lsls	r1, r3, #28
 801299a:	d422      	bmi.n	80129e2 <__swsetup_r+0x62>
 801299c:	06da      	lsls	r2, r3, #27
 801299e:	d407      	bmi.n	80129b0 <__swsetup_r+0x30>
 80129a0:	2209      	movs	r2, #9
 80129a2:	602a      	str	r2, [r5, #0]
 80129a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129a8:	81a3      	strh	r3, [r4, #12]
 80129aa:	f04f 30ff 	mov.w	r0, #4294967295
 80129ae:	e033      	b.n	8012a18 <__swsetup_r+0x98>
 80129b0:	0758      	lsls	r0, r3, #29
 80129b2:	d512      	bpl.n	80129da <__swsetup_r+0x5a>
 80129b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80129b6:	b141      	cbz	r1, 80129ca <__swsetup_r+0x4a>
 80129b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80129bc:	4299      	cmp	r1, r3
 80129be:	d002      	beq.n	80129c6 <__swsetup_r+0x46>
 80129c0:	4628      	mov	r0, r5
 80129c2:	f7fd fef3 	bl	80107ac <_free_r>
 80129c6:	2300      	movs	r3, #0
 80129c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80129ca:	89a3      	ldrh	r3, [r4, #12]
 80129cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80129d0:	81a3      	strh	r3, [r4, #12]
 80129d2:	2300      	movs	r3, #0
 80129d4:	6063      	str	r3, [r4, #4]
 80129d6:	6923      	ldr	r3, [r4, #16]
 80129d8:	6023      	str	r3, [r4, #0]
 80129da:	89a3      	ldrh	r3, [r4, #12]
 80129dc:	f043 0308 	orr.w	r3, r3, #8
 80129e0:	81a3      	strh	r3, [r4, #12]
 80129e2:	6923      	ldr	r3, [r4, #16]
 80129e4:	b94b      	cbnz	r3, 80129fa <__swsetup_r+0x7a>
 80129e6:	89a3      	ldrh	r3, [r4, #12]
 80129e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80129ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80129f0:	d003      	beq.n	80129fa <__swsetup_r+0x7a>
 80129f2:	4621      	mov	r1, r4
 80129f4:	4628      	mov	r0, r5
 80129f6:	f000 f883 	bl	8012b00 <__smakebuf_r>
 80129fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129fe:	f013 0201 	ands.w	r2, r3, #1
 8012a02:	d00a      	beq.n	8012a1a <__swsetup_r+0x9a>
 8012a04:	2200      	movs	r2, #0
 8012a06:	60a2      	str	r2, [r4, #8]
 8012a08:	6962      	ldr	r2, [r4, #20]
 8012a0a:	4252      	negs	r2, r2
 8012a0c:	61a2      	str	r2, [r4, #24]
 8012a0e:	6922      	ldr	r2, [r4, #16]
 8012a10:	b942      	cbnz	r2, 8012a24 <__swsetup_r+0xa4>
 8012a12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012a16:	d1c5      	bne.n	80129a4 <__swsetup_r+0x24>
 8012a18:	bd38      	pop	{r3, r4, r5, pc}
 8012a1a:	0799      	lsls	r1, r3, #30
 8012a1c:	bf58      	it	pl
 8012a1e:	6962      	ldrpl	r2, [r4, #20]
 8012a20:	60a2      	str	r2, [r4, #8]
 8012a22:	e7f4      	b.n	8012a0e <__swsetup_r+0x8e>
 8012a24:	2000      	movs	r0, #0
 8012a26:	e7f7      	b.n	8012a18 <__swsetup_r+0x98>
 8012a28:	240001e4 	.word	0x240001e4

08012a2c <_raise_r>:
 8012a2c:	291f      	cmp	r1, #31
 8012a2e:	b538      	push	{r3, r4, r5, lr}
 8012a30:	4605      	mov	r5, r0
 8012a32:	460c      	mov	r4, r1
 8012a34:	d904      	bls.n	8012a40 <_raise_r+0x14>
 8012a36:	2316      	movs	r3, #22
 8012a38:	6003      	str	r3, [r0, #0]
 8012a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8012a3e:	bd38      	pop	{r3, r4, r5, pc}
 8012a40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012a42:	b112      	cbz	r2, 8012a4a <_raise_r+0x1e>
 8012a44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012a48:	b94b      	cbnz	r3, 8012a5e <_raise_r+0x32>
 8012a4a:	4628      	mov	r0, r5
 8012a4c:	f000 f830 	bl	8012ab0 <_getpid_r>
 8012a50:	4622      	mov	r2, r4
 8012a52:	4601      	mov	r1, r0
 8012a54:	4628      	mov	r0, r5
 8012a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a5a:	f000 b817 	b.w	8012a8c <_kill_r>
 8012a5e:	2b01      	cmp	r3, #1
 8012a60:	d00a      	beq.n	8012a78 <_raise_r+0x4c>
 8012a62:	1c59      	adds	r1, r3, #1
 8012a64:	d103      	bne.n	8012a6e <_raise_r+0x42>
 8012a66:	2316      	movs	r3, #22
 8012a68:	6003      	str	r3, [r0, #0]
 8012a6a:	2001      	movs	r0, #1
 8012a6c:	e7e7      	b.n	8012a3e <_raise_r+0x12>
 8012a6e:	2100      	movs	r1, #0
 8012a70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012a74:	4620      	mov	r0, r4
 8012a76:	4798      	blx	r3
 8012a78:	2000      	movs	r0, #0
 8012a7a:	e7e0      	b.n	8012a3e <_raise_r+0x12>

08012a7c <raise>:
 8012a7c:	4b02      	ldr	r3, [pc, #8]	@ (8012a88 <raise+0xc>)
 8012a7e:	4601      	mov	r1, r0
 8012a80:	6818      	ldr	r0, [r3, #0]
 8012a82:	f7ff bfd3 	b.w	8012a2c <_raise_r>
 8012a86:	bf00      	nop
 8012a88:	240001e4 	.word	0x240001e4

08012a8c <_kill_r>:
 8012a8c:	b538      	push	{r3, r4, r5, lr}
 8012a8e:	4d07      	ldr	r5, [pc, #28]	@ (8012aac <_kill_r+0x20>)
 8012a90:	2300      	movs	r3, #0
 8012a92:	4604      	mov	r4, r0
 8012a94:	4608      	mov	r0, r1
 8012a96:	4611      	mov	r1, r2
 8012a98:	602b      	str	r3, [r5, #0]
 8012a9a:	f7ee ff8d 	bl	80019b8 <_kill>
 8012a9e:	1c43      	adds	r3, r0, #1
 8012aa0:	d102      	bne.n	8012aa8 <_kill_r+0x1c>
 8012aa2:	682b      	ldr	r3, [r5, #0]
 8012aa4:	b103      	cbz	r3, 8012aa8 <_kill_r+0x1c>
 8012aa6:	6023      	str	r3, [r4, #0]
 8012aa8:	bd38      	pop	{r3, r4, r5, pc}
 8012aaa:	bf00      	nop
 8012aac:	24000e68 	.word	0x24000e68

08012ab0 <_getpid_r>:
 8012ab0:	f7ee bf7a 	b.w	80019a8 <_getpid>

08012ab4 <__swhatbuf_r>:
 8012ab4:	b570      	push	{r4, r5, r6, lr}
 8012ab6:	460c      	mov	r4, r1
 8012ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012abc:	2900      	cmp	r1, #0
 8012abe:	b096      	sub	sp, #88	@ 0x58
 8012ac0:	4615      	mov	r5, r2
 8012ac2:	461e      	mov	r6, r3
 8012ac4:	da0d      	bge.n	8012ae2 <__swhatbuf_r+0x2e>
 8012ac6:	89a3      	ldrh	r3, [r4, #12]
 8012ac8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012acc:	f04f 0100 	mov.w	r1, #0
 8012ad0:	bf14      	ite	ne
 8012ad2:	2340      	movne	r3, #64	@ 0x40
 8012ad4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012ad8:	2000      	movs	r0, #0
 8012ada:	6031      	str	r1, [r6, #0]
 8012adc:	602b      	str	r3, [r5, #0]
 8012ade:	b016      	add	sp, #88	@ 0x58
 8012ae0:	bd70      	pop	{r4, r5, r6, pc}
 8012ae2:	466a      	mov	r2, sp
 8012ae4:	f000 f848 	bl	8012b78 <_fstat_r>
 8012ae8:	2800      	cmp	r0, #0
 8012aea:	dbec      	blt.n	8012ac6 <__swhatbuf_r+0x12>
 8012aec:	9901      	ldr	r1, [sp, #4]
 8012aee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012af2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012af6:	4259      	negs	r1, r3
 8012af8:	4159      	adcs	r1, r3
 8012afa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012afe:	e7eb      	b.n	8012ad8 <__swhatbuf_r+0x24>

08012b00 <__smakebuf_r>:
 8012b00:	898b      	ldrh	r3, [r1, #12]
 8012b02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b04:	079d      	lsls	r5, r3, #30
 8012b06:	4606      	mov	r6, r0
 8012b08:	460c      	mov	r4, r1
 8012b0a:	d507      	bpl.n	8012b1c <__smakebuf_r+0x1c>
 8012b0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012b10:	6023      	str	r3, [r4, #0]
 8012b12:	6123      	str	r3, [r4, #16]
 8012b14:	2301      	movs	r3, #1
 8012b16:	6163      	str	r3, [r4, #20]
 8012b18:	b003      	add	sp, #12
 8012b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b1c:	ab01      	add	r3, sp, #4
 8012b1e:	466a      	mov	r2, sp
 8012b20:	f7ff ffc8 	bl	8012ab4 <__swhatbuf_r>
 8012b24:	9f00      	ldr	r7, [sp, #0]
 8012b26:	4605      	mov	r5, r0
 8012b28:	4639      	mov	r1, r7
 8012b2a:	4630      	mov	r0, r6
 8012b2c:	f7fb f9ba 	bl	800dea4 <_malloc_r>
 8012b30:	b948      	cbnz	r0, 8012b46 <__smakebuf_r+0x46>
 8012b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b36:	059a      	lsls	r2, r3, #22
 8012b38:	d4ee      	bmi.n	8012b18 <__smakebuf_r+0x18>
 8012b3a:	f023 0303 	bic.w	r3, r3, #3
 8012b3e:	f043 0302 	orr.w	r3, r3, #2
 8012b42:	81a3      	strh	r3, [r4, #12]
 8012b44:	e7e2      	b.n	8012b0c <__smakebuf_r+0xc>
 8012b46:	89a3      	ldrh	r3, [r4, #12]
 8012b48:	6020      	str	r0, [r4, #0]
 8012b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b4e:	81a3      	strh	r3, [r4, #12]
 8012b50:	9b01      	ldr	r3, [sp, #4]
 8012b52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012b56:	b15b      	cbz	r3, 8012b70 <__smakebuf_r+0x70>
 8012b58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b5c:	4630      	mov	r0, r6
 8012b5e:	f000 f81d 	bl	8012b9c <_isatty_r>
 8012b62:	b128      	cbz	r0, 8012b70 <__smakebuf_r+0x70>
 8012b64:	89a3      	ldrh	r3, [r4, #12]
 8012b66:	f023 0303 	bic.w	r3, r3, #3
 8012b6a:	f043 0301 	orr.w	r3, r3, #1
 8012b6e:	81a3      	strh	r3, [r4, #12]
 8012b70:	89a3      	ldrh	r3, [r4, #12]
 8012b72:	431d      	orrs	r5, r3
 8012b74:	81a5      	strh	r5, [r4, #12]
 8012b76:	e7cf      	b.n	8012b18 <__smakebuf_r+0x18>

08012b78 <_fstat_r>:
 8012b78:	b538      	push	{r3, r4, r5, lr}
 8012b7a:	4d07      	ldr	r5, [pc, #28]	@ (8012b98 <_fstat_r+0x20>)
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	4604      	mov	r4, r0
 8012b80:	4608      	mov	r0, r1
 8012b82:	4611      	mov	r1, r2
 8012b84:	602b      	str	r3, [r5, #0]
 8012b86:	f7ee ff77 	bl	8001a78 <_fstat>
 8012b8a:	1c43      	adds	r3, r0, #1
 8012b8c:	d102      	bne.n	8012b94 <_fstat_r+0x1c>
 8012b8e:	682b      	ldr	r3, [r5, #0]
 8012b90:	b103      	cbz	r3, 8012b94 <_fstat_r+0x1c>
 8012b92:	6023      	str	r3, [r4, #0]
 8012b94:	bd38      	pop	{r3, r4, r5, pc}
 8012b96:	bf00      	nop
 8012b98:	24000e68 	.word	0x24000e68

08012b9c <_isatty_r>:
 8012b9c:	b538      	push	{r3, r4, r5, lr}
 8012b9e:	4d06      	ldr	r5, [pc, #24]	@ (8012bb8 <_isatty_r+0x1c>)
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	4604      	mov	r4, r0
 8012ba4:	4608      	mov	r0, r1
 8012ba6:	602b      	str	r3, [r5, #0]
 8012ba8:	f7ee ff76 	bl	8001a98 <_isatty>
 8012bac:	1c43      	adds	r3, r0, #1
 8012bae:	d102      	bne.n	8012bb6 <_isatty_r+0x1a>
 8012bb0:	682b      	ldr	r3, [r5, #0]
 8012bb2:	b103      	cbz	r3, 8012bb6 <_isatty_r+0x1a>
 8012bb4:	6023      	str	r3, [r4, #0]
 8012bb6:	bd38      	pop	{r3, r4, r5, pc}
 8012bb8:	24000e68 	.word	0x24000e68

08012bbc <_init>:
 8012bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bbe:	bf00      	nop
 8012bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bc2:	bc08      	pop	{r3}
 8012bc4:	469e      	mov	lr, r3
 8012bc6:	4770      	bx	lr

08012bc8 <_fini>:
 8012bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bca:	bf00      	nop
 8012bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bce:	bc08      	pop	{r3}
 8012bd0:	469e      	mov	lr, r3
 8012bd2:	4770      	bx	lr
